{"home.repos.pwc.inspect_result.jadexin_cyctea.run.main_from_args_test.get_model": [[71, 73], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.run.main_with_args.get_model": [[213, 215], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.run.main_from_args.get_model": [[87, 89], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.run.main_from_args_reversed.get_model": [[70, 72], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.run.main_from_args_wo_attr.get_model": [[27, 29], ["getattr"], "function", ["None"], ["", "def", "get_model", "(", "model_name", ")", ":", "\n", "    ", "return", "getattr", "(", "ModelFamily", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.__init__": [[2, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "embed_size", "=", "75", "\n", "self", ".", "epochs", "=", "2000", "\n", "self", ".", "learning_rate", "=", "0.01", "\n", "self", ".", "top_k", "=", "20", "\n", "self", ".", "ent_top_k", "=", "[", "1", ",", "5", ",", "10", ",", "50", "]", "\n", "self", ".", "lambda_3", "=", "0.7", "\n", "self", ".", "generate_sim", "=", "10", "\n", "self", ".", "csls", "=", "5", "\n", "self", ".", "heuristic", "=", "True", "\n", "self", ".", "is_save", "=", "True", "\n", "\n", "self", ".", "mu1", "=", "1.0", "\n", "self", ".", "mu2", "=", "1.0", "\n", "\n", "self", ".", "nums_threads", "=", "10", "\n", "self", ".", "nums_threads_batch", "=", "1", "\n", "\n", "self", ".", "margin_rel", "=", "0.5", "\n", "self", ".", "margin_neg_triple", "=", "1.2", "\n", "self", ".", "margin_ent", "=", "0.5", "\n", "self", ".", "nums_neg", "=", "10", "\n", "self", ".", "nums_neg_neighbor", "=", "10", "\n", "\n", "self", ".", "epsilon", "=", "0.95", "\n", "self", ".", "batch_size", "=", "10000", "\n", "self", ".", "is_disc", "=", "True", "\n", "\n", "self", ".", "nn", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print": [[32, 38], ["param.Params.print"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Parameters used in this running are as follows:\"", ")", "\n", "items", "=", "sorted", "(", "self", ".", "__dict__", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "0", "]", ")", "\n", "for", "item", "in", "items", ":", "\n", "            ", "print", "(", "\"%s: %s\"", "%", "item", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.read_all_file": [[13, 30], ["os.listdir", "open", "f.readlines", "line.strip().split", "len", "all_data.append", "len", "all_data[].append", "line.strip", "len", "all_data[].append", "path.split", "path.split"], "function", ["None"], ["def", "read_all_file", "(", "dir_path", ")", ":", "\n", "    ", "all_data", "=", "[", "]", "\n", "all_file", "=", "os", ".", "listdir", "(", "dir_path", ")", "\n", "for", "path", "in", "all_file", ":", "\n", "        ", "with", "open", "(", "dir_path", "+", "\"/\"", "+", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "count", "=", "0", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "temp_data", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "all_data", ")", "<=", "count", ":", "\n", "                    ", "all_data", ".", "append", "(", "[", "]", ")", "\n", "", "if", "5", ">=", "len", "(", "temp_data", ")", ">", "1", ":", "\n", "                    ", "all_data", "[", "count", "]", ".", "append", "(", "{", "path", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ":", "[", "temp_data", "[", "1", "]", ",", "temp_data", "[", "3", "]", "]", "}", ")", "\n", "count", "+=", "1", "\n", "", "elif", "len", "(", "temp_data", ")", ">", "5", ":", "\n", "                    ", "all_data", "[", "count", "]", ".", "append", "(", "{", "path", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ":", "[", "temp_data", "[", "1", "]", ",", "temp_data", "[", "3", "]", ",", "temp_data", "[", "5", "]", "]", "}", ")", "\n", "count", "+=", "1", "\n", "", "", "", "", "return", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.get_hit_result": [[32, 49], ["dict", "os.listdir", "len", "files.replace", "numpy.load", "openea.read_input", "openea.expriment.test_funcs.eval_alignment_by_div_embed", "all_file[].split", "files.split"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_input", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed"], ["", "def", "get_hit_result", "(", "dirpath", ")", ":", "\n", "    ", "hit_result", "=", "dict", "(", ")", "\n", "all_file", "=", "os", ".", "listdir", "(", "dirpath", ")", "\n", "if", "len", "(", "all_file", ")", ">", "0", ":", "\n", "        ", "lan_type", "=", "all_file", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "", "training_folder", "=", "\"../DBP15K/\"", "+", "lan_type", "+", "\"/0_3/\"", "\n", "for", "files", "in", "all_file", ":", "\n", "        ", "part_dir", "=", "files", ".", "replace", "(", "\"-\"", ",", "\"/\"", ")", "\n", "output_folder", "=", "\"../out/\"", "+", "part_dir", "\n", "ent_embeds", "=", "np", ".", "load", "(", "output_folder", "+", "\"/ent_embeds.npy\"", ")", "\n", "triples1", ",", "triples2", ",", "_", ",", "_", ",", "ref_ent1", ",", "ref_ent2", ",", "total_triples_num", ",", "total_ent_num", ",", "total_rel_num", "=", "ut", ".", "read_input", "(", "\n", "training_folder", ")", "\n", "embed1", "=", "ent_embeds", "[", "ref_ent1", ",", "]", "\n", "embed2", "=", "ent_embeds", "[", "ref_ent2", ",", "]", "\n", "_", ",", "_", ",", "result", "=", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "accurate", "=", "True", ",", "is_euclidean", "=", "True", ")", "\n", "hit_result", "[", "files", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "]", "=", "result", "\n", "", "return", "hit_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.draw_hit_result": [[51, 71], ["data_analyse.get_hit_result", "matplotlib.figure", "get_hit_result.items", "matplotlib.ylim", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "x.append", "y1.append", "y5.append", "y10.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.get_hit_result"], ["", "def", "draw_hit_result", "(", "dirpath", ")", ":", "\n", "    ", "hit_result", "=", "get_hit_result", "(", "dirpath", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "46", ")", ")", "\n", "ylim", "=", "(", "0", ",", "100", ")", "\n", "ylabel", "=", "\"hit acc\"", "\n", "y1", "=", "[", "]", "\n", "y5", "=", "[", "]", "\n", "y10", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "hit_result", ".", "items", "(", ")", ":", "\n", "        ", "x", ".", "append", "(", "key", ")", "\n", "y1", ".", "append", "(", "value", "[", "0", "]", ")", "\n", "y5", ".", "append", "(", "value", "[", "1", "]", ")", "\n", "y10", ".", "append", "(", "value", "[", "2", "]", ")", "\n", "", "plt", ".", "ylim", "(", "ylim", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "L1", ",", "=", "plt", ".", "plot", "(", "x", ",", "y1", ",", "color", "=", "\"#D35400\"", ",", "marker", "=", "\"o\"", ")", "\n", "L2", ",", "=", "plt", ".", "plot", "(", "x", ",", "y5", ",", "color", "=", "\"#2ECC71\"", ",", "marker", "=", "\"o\"", ")", "\n", "L3", ",", "=", "plt", ".", "plot", "(", "x", ",", "y10", ",", "color", "=", "\"#3498DB\"", ",", "marker", "=", "\"o\"", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "L1", ",", "L2", ",", "L3", "]", ",", "labels", "=", "[", "\"hit1\"", ",", "\"hit5\"", ",", "\"hit10\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.draw_conicity_result": [[73, 91], ["data_analyse.read_all_file", "range", "matplotlib.figure", "matplotlib.ylim", "matplotlib.ylabel", "print", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "len", "conicity[].items", "xlabel.append", "ylabel.append", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.read_all_file", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "draw_conicity_result", "(", "datapath", ")", ":", "\n", "    ", "all_data", "=", "read_all_file", "(", "datapath", ")", "\n", "#   **************conicity\u3001vs\u5206\u522b\u4f4d\u4e8eall_data[15],all_data[16]", "\n", "conicity", "=", "all_data", "[", "15", "]", "\n", "xlabel", "=", "[", "]", "\n", "ylabel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "conicity", ")", ")", ":", "\n", "        ", "for", "key", ",", "values", "in", "conicity", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "xlabel", ".", "append", "(", "key", ")", "\n", "ylabel", ".", "append", "(", "values", ")", "\n", "", "", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "46", ")", ")", "\n", "plt", ".", "ylim", "(", "(", "0", ",", "0.5", ")", ")", "\n", "plt", ".", "ylabel", "(", "\"conicity\"", ")", "\n", "print", "(", "[", "x", "[", "0", "]", "for", "x", "in", "ylabel", "]", ")", "\n", "L1", ",", "=", "plt", ".", "plot", "(", "xlabel", ",", "[", "float", "(", "x", "[", "0", "]", ")", "for", "x", "in", "ylabel", "]", ",", "color", "=", "\"#D35400\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "L2", ",", "=", "plt", ".", "plot", "(", "xlabel", ",", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "ylabel", "]", ",", "color", "=", "\"#2ECC71\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "L3", ",", "=", "plt", ".", "plot", "(", "xlabel", ",", "[", "float", "(", "x", "[", "2", "]", ")", "for", "x", "in", "ylabel", "]", ",", "color", "=", "\"#3498DB\"", ",", "marker", "=", "\"*\"", ",", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "L1", ",", "L2", ",", "L3", "]", ",", "labels", "=", "[", "\"ent1\"", ",", "\"ent2\"", ",", "\"all_ents\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.draw_quartile_deviation_result": [[93, 110], ["data_analyse.read_all_file", "range", "matplotlib.figure", "matplotlib.ylim", "matplotlib.ylabel", "print", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "len", "conicity[].items", "xlabel.append", "ylabel.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.read_all_file", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "draw_quartile_deviation_result", "(", "datapath", ")", ":", "\n", "    ", "all_data", "=", "read_all_file", "(", "datapath", ")", "\n", "#   **************conicity\u3001vs\u5206\u522b\u4f4d\u4e8eall_data[15],all_data[16]", "\n", "conicity", "=", "all_data", "[", "17", "]", "\n", "xlabel", "=", "[", "]", "\n", "ylabel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "conicity", ")", ")", ":", "\n", "        ", "for", "key", ",", "values", "in", "conicity", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "xlabel", ".", "append", "(", "key", ")", "\n", "ylabel", ".", "append", "(", "values", ")", "\n", "", "", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "46", ")", ")", "\n", "plt", ".", "ylim", "(", "(", "0", ",", "10", ")", ")", "\n", "plt", ".", "ylabel", "(", "\"conicity\"", ")", "\n", "print", "(", "[", "x", "[", "0", "]", "for", "x", "in", "ylabel", "]", ")", "\n", "L1", ",", "=", "plt", ".", "plot", "(", "xlabel", ",", "[", "float", "(", "x", "[", "0", "]", ")", "for", "x", "in", "ylabel", "]", ",", "color", "=", "\"#D35400\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "L2", ",", "=", "plt", ".", "plot", "(", "xlabel", ",", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "ylabel", "]", ",", "color", "=", "\"#2ECC71\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "L1", ",", "L2", "]", ",", "labels", "=", "[", "\"quar_devi\"", ",", "\"mean_value\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.analyse_all": [[112, 144], ["data_analyse.read_all_file", "matplotlib.figure", "range", "matplotlib.subplot", "matplotlib.ylim", "matplotlib.ylabel", "range", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "len", "[].items", "print", "print", "temp_x.append", "aver_temp_y.append", "median_temp_y.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.read_all_file", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "analyse_all", "(", "datapath", ")", ":", "\n", "    ", "all_data", "=", "read_all_file", "(", "datapath", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "46", ")", ")", "\n", "ylim_list", "=", "[", "(", "0", ",", "0.3", ")", ",", "(", "0.3", ",", "1", ")", ",", "(", "0.3", ",", "1", ")", ",", "(", "0", ",", "0.3", ")", ",", "(", "0", ",", "0.3", ")", ",", "(", "0.3", ",", "1", ")", ",", "(", "0.3", ",", "1", ")", ",", "(", "0", ",", "0.3", ")", "]", "\n", "ylabel_list", "=", "[", "\"all_aver_sum\"", ",", "\"aver_most_sim\"", ",", "\"aver_diff_sum\"", ",", "\"aver_diff_var\"", ",", "\"align_all_aver_sum\"", "\n", ",", "\"align_aver_most_sim\"", ",", "\"align_aver_diff_sum\"", ",", "\"align_aver_diff_var\"", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "8", ")", ":", "\n", "# for i in range(len(all_data)):", "\n", "        ", "temp_y", "=", "[", "]", "\n", "temp_x", "=", "[", "]", "\n", "aver_temp_y", "=", "[", "]", "\n", "median_temp_y", "=", "[", "]", "\n", "\n", "plt", ".", "subplot", "(", "4", ",", "2", ",", "i", "+", "1", ")", "\n", "plt", ".", "ylim", "(", "ylim_list", "[", "i", "]", ")", "\n", "plt", ".", "ylabel", "(", "ylabel_list", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "all_data", "[", "i", "]", ")", ")", ":", "\n", "            ", "for", "key", ",", "values", "in", "all_data", "[", "i", "]", "[", "j", "]", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "key", ")", "\n", "print", "(", "values", ")", "\n", "temp_x", ".", "append", "(", "key", ")", "\n", "aver_temp_y", ".", "append", "(", "float", "(", "values", "[", "0", "]", ")", ")", "\n", "median_temp_y", ".", "append", "(", "float", "(", "values", "[", "1", "]", ")", ")", "\n", "", "", "L1", ",", "=", "plt", ".", "plot", "(", "temp_x", ",", "aver_temp_y", ",", "color", "=", "\"orange\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "# for xy in zip(temp_x,aver_temp_y):", "\n", "#     plt.annotate(\"(%s,%.6f)\"%xy,xy=xy,xytext=(-20,10),textcoords=\"offset points\")", "\n", "L2", ",", "=", "plt", ".", "plot", "(", "temp_x", ",", "median_temp_y", ",", "color", "=", "\"#2980B9\"", ",", "linestyle", "=", "\"--\"", ",", "marker", "=", "\"o\"", ")", "\n", "# for xy in zip(temp_x,aver_temp_y):", "\n", "#     plt.annotate(\"(%s,%.6f)\"%xy,xy=xy,xytext=(-20,-10),textcoords=\"offset points\")", "\n", "# plt.xlabel(\"method\")", "\n", "# plt.legend(handles=[l1,l2],labels=[\"average\",\"median\"],loc=\"best\")", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "L1", ",", "L2", "]", ",", "labels", "=", "[", "\"average\"", ",", "\"median\"", "]", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.analyse_near_sim": [[147, 212], ["data_analyse.read_all_file", "range", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "range", "range", "range", "matplotlib.figure", "range", "len", "[].items", "len", "[].items", "[].items", "len", "[].items", "[].items", "len", "[].items", "[].items", "matplotlib.subplot", "matplotlib.ylim", "matplotlib.ylabel", "draw_data[].items", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "x_label.append", "x_label.append", "x_data[].append", "median_data[].append", "x_data[].append", "median_data[].append", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.data_analyse.read_all_file"], ["", "", "def", "analyse_near_sim", "(", "datapath", ")", ":", "\n", "    ", "all_data", "=", "read_all_file", "(", "datapath", ")", "\n", "ylim_list", "=", "[", "(", "0", ",", "11", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0.3", ")", ",", "(", "0", ",", "0.3", ")", "]", "\n", "ylabel_list", "=", "[", "\"aver_near_number\"", ",", "\"aver_near_sim\"", ",", "\"aver_near_same_sim\"", ",", "\"aver_var_near\"", ",", "\"aver_var_near_same\"", "]", "\n", "x_label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_data", "[", "0", "]", ")", ")", ":", "\n", "        ", "for", "key", ",", "_", "in", "all_data", "[", "0", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "x_label", ".", "append", "(", "key", ")", "\n", "", "", "ent1_ann_data", "=", "dict", "(", ")", "\n", "ent2_ann_data", "=", "dict", "(", ")", "\n", "first_fig", "=", "[", "ent1_ann_data", ",", "ent2_ann_data", "]", "\n", "ent1_ans_data", "=", "dict", "(", ")", "\n", "ent2_ans_data", "=", "dict", "(", ")", "\n", "second_fig", "=", "[", "ent1_ans_data", ",", "ent2_ans_data", "]", "\n", "ent1_anss_data", "=", "dict", "(", ")", "\n", "ent2_anss_data", "=", "dict", "(", ")", "\n", "third_fig", "=", "[", "ent1_anss_data", ",", "ent2_anss_data", "]", "\n", "ent1_avn_data", "=", "dict", "(", ")", "\n", "ent2_avn_data", "=", "dict", "(", ")", "\n", "fourth_fig", "=", "[", "ent1_avn_data", ",", "ent2_avn_data", "]", "\n", "ent1_avns_data", "=", "dict", "(", ")", "\n", "ent2_avns_data", "=", "dict", "(", ")", "\n", "fifth_figure", "=", "[", "ent1_avns_data", ",", "ent2_avns_data", "]", "\n", "figure_data", "=", "[", "first_fig", ",", "second_fig", ",", "third_fig", ",", "fourth_fig", ",", "fifth_figure", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "all_data", "[", "9", "]", ")", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "all_data", "[", "9", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent1_ann_data", "[", "key", "]", "=", "value", "\n", "", "for", "key", ",", "value", "in", "all_data", "[", "12", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent2_ann_data", "[", "key", "]", "=", "value", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "all_data", "[", "10", "]", ")", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "all_data", "[", "10", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent1_ans_data", "[", "key", "]", "=", "value", "[", "0", ":", "2", "]", "\n", "ent1_avn_data", "[", "key", "]", "=", "value", "[", "-", "1", "]", "\n", "", "for", "key", ",", "value", "in", "all_data", "[", "13", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent2_ans_data", "[", "key", "]", "=", "value", "[", "0", ":", "2", "]", "\n", "ent2_avn_data", "[", "key", "]", "=", "value", "[", "-", "1", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "all_data", "[", "11", "]", ")", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "all_data", "[", "11", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent1_anss_data", "[", "key", "]", "=", "value", "[", "0", ":", "2", "]", "\n", "ent1_avns_data", "[", "key", "]", "=", "value", "[", "-", "1", "]", "\n", "", "for", "key", ",", "value", "in", "all_data", "[", "14", "]", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "ent2_anss_data", "[", "key", "]", "=", "value", "[", "0", ":", "2", "]", "\n", "ent2_avns_data", "[", "key", "]", "=", "value", "[", "-", "1", "]", "\n", "", "", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "46", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "plt", ".", "subplot", "(", "3", ",", "2", ",", "i", "+", "1", ")", "\n", "plt", ".", "ylim", "(", "ylim_list", "[", "i", "]", ")", "\n", "plt", ".", "ylabel", "(", "ylabel_list", "[", "i", "]", ")", "\n", "draw_data", "=", "figure_data", "[", "i", "]", "\n", "x_label", "=", "[", "]", "\n", "x_data", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "median_data", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "key", ",", "value", "in", "draw_data", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "            ", "x_label", ".", "append", "(", "key", ")", "\n", "x_data", "[", "0", "]", ".", "append", "(", "float", "(", "draw_data", "[", "0", "]", "[", "key", "]", "[", "0", "]", ")", ")", "\n", "median_data", "[", "0", "]", ".", "append", "(", "float", "(", "draw_data", "[", "0", "]", "[", "key", "]", "[", "1", "]", ")", ")", "\n", "x_data", "[", "1", "]", ".", "append", "(", "float", "(", "draw_data", "[", "1", "]", "[", "key", "]", "[", "0", "]", ")", ")", "\n", "median_data", "[", "1", "]", ".", "append", "(", "float", "(", "draw_data", "[", "1", "]", "[", "key", "]", "[", "1", "]", ")", ")", "\n", "", "L1", ",", "=", "plt", ".", "plot", "(", "x_label", ",", "x_data", "[", "0", "]", ",", "color", "=", "\"#D35400\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "L2", ",", "=", "plt", ".", "plot", "(", "x_label", ",", "x_data", "[", "1", "]", ",", "color", "=", "\"#28B463\"", ",", "marker", "=", "\"o\"", ",", ")", "\n", "# L3, = plt.plot(x_label, median_data[0], color=\"#F39C12\", marker=\"o\", )", "\n", "# L4, = plt.plot(x_label, median_data[1], color=\"#2E86C1\", marker=\"o\", )", "\n", "# plt.legend(handles=[L1, L2, L3, L4], labels=[\"ent1\", \"ent2\", \"ent1_median\", \"ent2_median\"])", "\n", "plt", ".", "legend", "(", "handles", "=", "[", "L1", ",", "L2", "]", ",", "labels", "=", "[", "\"ent1\"", ",", "\"ent2\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data": [[12, 19], ["list", "data.split", "range", "len", "list.append"], "function", ["None"], ["def", "split_data", "(", "data", ")", ":", "\n", "    ", "result", "=", "list", "(", ")", "\n", "temp", "=", "data", ".", "split", "(", "\"\\t\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "temp", ")", ")", ":", "\n", "        ", "if", "temp", "[", "i", "]", "!=", "\"\"", ":", "\n", "            ", "result", ".", "append", "(", "temp", "[", "i", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.get_data": [[21, 39], ["dict", "open", "f.readlines", "line.split.strip", "line.split.split", "len", "graphics.split_data", "range", "graphics.split_data", "graphics.split_data", "len", "graphics.split_data", "graphics.split_data"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.split_data"], ["", "def", "get_data", "(", "route", ",", "method", ")", ":", "\n", "    ", "data", "=", "dict", "(", ")", "\n", "with", "open", "(", "route", "+", "\"/\"", "+", "method", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", "\":\"", ")", "\n", "if", "len", "(", "line", ")", "==", "2", ":", "\n", "                ", "data", "[", "line", "[", "0", "]", "]", "=", "split_data", "(", "line", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "line", ")", "-", "2", ")", ":", "\n", "                    ", "data_key", "=", "split_data", "(", "line", "[", "i", "]", ")", "[", "-", "1", "]", "\n", "data_content", "=", "split_data", "(", "line", "[", "i", "+", "1", "]", ")", "[", "0", ":", "-", "1", "]", "\n", "data", "[", "data_key", "]", "=", "data_content", "\n", "# print(split_data(line[-2]))", "\n", "", "last_data_key", "=", "split_data", "(", "line", "[", "-", "2", "]", ")", "[", "-", "1", "]", "\n", "last_data_content", "=", "split_data", "(", "line", "[", "-", "1", "]", ")", "\n", "data", "[", "last_data_key", "]", "=", "last_data_content", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.get_all_data": [[41, 75], ["os.path.abspath", "os.path.normpath", "os.path.normpath.split", "os.path.normpath", "dict", "os.path.normpath", "dict", "list", "os.listdir", "dict", "dict", "os.path.join", "list.append", "dict", "range", "os.path.normpath", "os.listdir", "os.path.exists", "os.path.normpath", "graphics.get_data", "str", "os.path.exists", "fold.split"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.get_data"], ["", "def", "get_all_data", "(", "dataset", ",", "method", ",", "root_name", "=", "\"VLDB2020\"", ")", ":", "\n", "    ", "abs_route", "=", "os", ".", "path", ".", "abspath", "(", "\".\"", ")", "\n", "abs_route", "=", "os", ".", "path", ".", "normpath", "(", "abs_route", ")", "\n", "route_list", "=", "abs_route", ".", "split", "(", "root_name", ")", "\n", "root_route", "=", "route_list", "[", "0", "]", "+", "root_name", "\n", "\n", "dataset_root", "=", "os", ".", "path", ".", "normpath", "(", "root_route", "+", "\"/output/analyse_results\"", ")", "\n", "\n", "data_list", "=", "dict", "(", ")", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "dataset_dir", "=", "os", ".", "path", ".", "normpath", "(", "dataset_root", "+", "\"/\"", "+", "item", "+", "\"/\"", ")", "\n", "data_list", "[", "item", "]", "=", "dict", "(", ")", "\n", "fold_list", "=", "list", "(", ")", "\n", "dirs", "=", "os", ".", "listdir", "(", "dataset_dir", ")", "\n", "data_db_list", "=", "dict", "(", ")", "\n", "for", "next_dir", "in", "dirs", ":", "\n", "            ", "data_db_list", "[", "next_dir", "]", "=", "dict", "(", ")", "\n", "temp", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "next_dir", "+", "\"/721_5fold\"", ")", "\n", "fold_list", ".", "append", "(", "temp", ")", "\n", "", "for", "fold", "in", "fold_list", ":", "\n", "            ", "data_fold_list", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                ", "temp_path", "=", "os", ".", "path", ".", "normpath", "(", "fold", "+", "\"/\"", "+", "str", "(", "i", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_path", ")", ":", "\n", "                    ", "continue", "\n", "", "last_file", "=", "os", ".", "listdir", "(", "temp_path", ")", "\n", "for", "file", "in", "last_file", ":", "\n", "                    ", "data_final_dir", "=", "os", ".", "path", ".", "normpath", "(", "temp_path", "+", "\"/\"", "+", "file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_final_dir", "+", "\"/\"", "+", "method", ")", ":", "\n", "                        ", "continue", "\n", "", "data_fold_list", "[", "file", "]", "=", "get_data", "(", "data_final_dir", ",", "method", ")", "\n", "", "", "data_db_list", "[", "fold", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "]", "=", "data_fold_list", "\n", "", "data_list", "[", "item", "]", "=", "data_db_list", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.get_graphics_data": [[77, 88], ["data.items", "compare_method.append", "[].values", "final_data.append", "temp_value.append", "graphics.float_data"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.float_data"], ["", "def", "get_graphics_data", "(", "data", ",", "dataset_list", ",", "need", ")", ":", "\n", "    ", "compare_method", "=", "[", "]", "\n", "final_data", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "compare_method", ".", "append", "(", "key", ")", "\n", "temp_value", "=", "[", "]", "\n", "for", "item", "in", "dataset_list", ":", "\n", "            ", "for", "need_result", "in", "(", "data", "[", "key", "]", "[", "item", "]", ")", ".", "values", "(", ")", ":", "\n", "                ", "temp_value", ".", "append", "(", "need_result", "[", "need", "]", ")", "\n", "", "final_data", ".", "append", "(", "float_data", "(", "temp_value", ")", ")", "\n", "", "", "return", "compare_method", ",", "final_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.float_data": [[90, 104], ["numpy.array", "numpy.mean", "list", "list.append", "float", "type", "float.append", "float"], "function", ["None"], ["", "def", "float_data", "(", "data", ")", ":", "\n", "    ", "final_data", "=", "[", "]", "\n", "for", "item", "in", "data", ":", "\n", "        ", "if", "type", "(", "item", ")", ".", "__name__", "==", "\"list\"", ":", "\n", "            ", "temp_data", "=", "[", "]", "\n", "for", "part_data", "in", "item", ":", "\n", "                ", "temp_data", ".", "append", "(", "float", "(", "part_data", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "temp_data", "=", "float", "(", "item", ")", "\n", "", "final_data", ".", "append", "(", "temp_data", ")", "\n", "", "np_data", "=", "np", ".", "array", "(", "final_data", ")", "\n", "np_data", "=", "np", ".", "mean", "(", "np_data", ",", "axis", "=", "0", ")", "\n", "final_data", "=", "list", "(", "np_data", ")", "\n", "return", "final_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.plot_config": [[106, 113], ["matplotlib.rcParams.update"], "function", ["None"], ["", "def", "plot_config", "(", ")", ":", "\n", "    ", "params", "=", "{", "\n", "\"font.family\"", ":", "\"serif\"", ",", "\n", "\"font.serif\"", ":", "\"Times New Roman\"", ",", "\n", "\n", "}", "\n", "rcParams", ".", "update", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.config_color_map": [[115, 142], ["matplotlib.colors.LinearSegmentedColormap"], "function", ["None"], ["", "def", "config_color_map", "(", ")", ":", "\n", "    ", "cdict", "=", "{", "\n", "\"red\"", ":", "(", "\n", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "(", "0.2", ",", "1", ",", "1", ")", ",", "\n", "(", "0.5", ",", "0.3", ",", "0.3", ")", ",", "\n", "(", "0.7", ",", "0", ",", "0", ")", ",", "\n", "(", "1", ",", "0", ",", "0", ")", "\n", ")", ",", "\n", "\"green\"", ":", "(", "\n", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "(", "0.2", ",", "1", ",", "1", ")", ",", "\n", "(", "0.5", ",", "0.8", ",", "0.8", ")", ",", "\n", "(", "0.7", ",", "0.4", ",", "0.4", ")", ",", "\n", "(", "1", ",", "0.2", ",", "0.2", ")", ",", "\n", ")", ",", "\n", "\"blue\"", ":", "(", "\n", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "(", "0.2", ",", "0.6", ",", "0.6", ")", ",", "\n", "(", "0.5", ",", "1", ",", "1", ")", ",", "\n", "(", "0.7", ",", "0.8", ",", "0.8", ")", ",", "\n", "(", "1", ",", "0.4", ",", "0.4", ")", "\n", ")", "\n", "\n", "}", "\n", "cmap", "=", "LinearSegmentedColormap", "(", "\"user_color\"", ",", "cdict", ",", "256", ")", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.grid_figure": [[144, 163], ["graphics.config_color_map", "matplotlib.figure", "range", "matplotlib.colorbar", "plt.colorbar.ax.tick_params", "matplotlib.subplots_adjust", "matplotlib.show", "len", "list", "matplotlib.subplot", "matplotlib.xticks", "matplotlib.yticks", "range", "matplotlib.imshow", "len", "len", "len", "list.append", "numpy.array", "range", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.config_color_map"], ["", "def", "grid_figure", "(", "x_list", ",", "compare_method", ",", "analyse_data", ")", ":", "\n", "    ", "user_cmap", "=", "config_color_map", "(", ")", "\n", "x_position", "=", "0", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x_list", ")", ")", ":", "\n", "        ", "data", "=", "list", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "len", "(", "x_list", ")", ",", "i", "+", "1", ")", "\n", "plt", ".", "xticks", "(", "[", "x", "for", "x", "in", "range", "(", "len", "(", "compare_method", ")", ")", "]", ",", "compare_method", ",", "fontsize", "=", "20", ",", "rotation", "=", "-", "90", ",", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "for", "j", "in", "range", "(", "x_position", "+", "i", ",", "len", "(", "analyse_data", ")", ",", "len", "(", "x_list", ")", ")", ":", "\n", "            ", "data", ".", "append", "(", "analyse_data", "[", "j", "]", "[", "0", ":", "5", "]", ")", "\n", "", "pic_data", "=", "np", ".", "array", "(", "data", ")", ".", "T", "\n", "plt", ".", "imshow", "(", "pic_data", ",", "cmap", "=", "user_cmap", ")", "\n", "# sns.heatmap(pic_data)", "\n", "", "cb", "=", "plt", ".", "colorbar", "(", ")", "\n", "cb", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "16", ")", "\n", "# plt.tight_layout()", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0.05", ",", "right", "=", "0.9", ",", "bottom", "=", "0.3", ",", "wspace", "=", "0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.plot_figure": [[165, 183], ["matplotlib.figure", "range", "matplotlib.legend", "matplotlib.subplots_adjust", "matplotlib.show", "len", "list", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.ylim", "range", "matplotlib.plot", "line_list.append", "numpy.arange", "len", "len", "list.append", "range", "len"], "function", ["None"], ["", "def", "plot_figure", "(", "x_list", ",", "compare_method", ",", "analyse_data", ",", "ran", ")", ":", "\n", "    ", "marker", "=", "[", "\"o\"", ",", "\".\"", ",", "\"p\"", ",", "\"s\"", ",", "\"d\"", ",", "\"*\"", "]", "\n", "line_list", "=", "[", "]", "\n", "x_position", "=", "0", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "12", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x_list", ")", ")", ":", "\n", "        ", "data", "=", "list", "(", ")", "\n", "# plt.subplot(len(x_list),2,i+1)", "\n", "plt", ".", "xticks", "(", "[", "x", "for", "x", "in", "range", "(", "len", "(", "compare_method", ")", ")", "]", ",", "compare_method", ",", "rotation", "=", "0", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "ran", "[", "0", "]", ",", "ran", "[", "1", "]", ",", "(", "ran", "[", "1", "]", "-", "ran", "[", "0", "]", ")", "/", "5", ")", ")", "\n", "plt", ".", "ylim", "(", "(", "ran", "[", "0", "]", ",", "ran", "[", "1", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "x_position", "+", "i", ",", "len", "(", "analyse_data", ")", ",", "len", "(", "x_list", ")", ")", ":", "\n", "            ", "data", ".", "append", "(", "analyse_data", "[", "j", "]", "[", "0", "]", ")", "\n", "", "line", ",", "=", "plt", ".", "plot", "(", "compare_method", ",", "data", ",", "marker", "=", "marker", "[", "i", "]", ")", "\n", "line_list", ".", "append", "(", "line", ")", "\n", "", "plt", ".", "legend", "(", "line_list", ",", "x_list", ",", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0.05", ",", "right", "=", "0.9", ",", "wspace", "=", "0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.hub_picture": [[188, 223], ["matplotlib.subplots", "ax1.set_xticks", "ax2.set_xticks", "ax1.set_ylabel", "ax2.set_ylabel", "list", "range", "ax1.text", "range", "ax2.text", "matplotlib.figlegend", "matplotlib.show", "len", "range", "ax1.text", "len", "range", "ax2.text", "ax1.bar", "ax2.bar", "list.append", "len", "len", "len", "len"], "function", ["None"], ["", "def", "hub_picture", "(", "data", ",", "dataset", ",", "method", ")", ":", "\n", "    ", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "ax1", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax2", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"Proportion\"", ",", "fontsize", "=", "16", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"Proportion\"", ",", "fontsize", "=", "16", ")", "\n", "\n", "\n", "width", "=", "0.8", "\n", "startposition", "=", "0.8", "\n", "color_list", "=", "[", "\"tomato\"", ",", "'deepskyblue'", ",", "\"orange\"", "]", "\n", "label_list", "=", "[", "\"more than 5 times\"", ",", "\"1 to 5 times\"", ",", "\"never appear\"", "]", "\n", "legend_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "method", ")", ")", ":", "\n", "        ", "bottom", "=", "0", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "            ", "bar1", ",", "=", "ax1", ".", "bar", "(", "startposition", "+", "i", "*", "width", ",", "height", "=", "data", "[", "j", "]", "[", "i", "]", "[", "0", "]", ",", "width", "=", "0.5", ",", "bottom", "=", "bottom", ",", "color", "=", "color_list", "[", "j", "]", ",", "align", "=", "\"edge\"", ",", "edgecolor", "=", "\"black\"", ")", "\n", "bottom", "+=", "data", "[", "j", "]", "[", "i", "]", "[", "0", "]", "\n", "", "ax1", ".", "text", "(", "startposition", "+", "i", "*", "width", "+", "0.1", ",", "y", "=", "-", "0.03", ",", "s", "=", "method", "[", "i", "]", ",", "fontsize", "=", "\"14\"", ",", "rotation", "=", "-", "90", ")", "\n", "", "ax1", ".", "text", "(", "startposition", "+", "(", "len", "(", "method", ")", "/", "2", "-", "2", ")", "*", "width", ",", "y", "=", "1.08", ",", "s", "=", "dataset", "[", "0", "]", ",", "fontsize", "=", "\"14\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "method", ")", ")", ":", "\n", "        ", "bottom", "=", "0", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "            ", "bar2", ",", "=", "ax2", ".", "bar", "(", "startposition", "+", "i", "*", "width", ",", "height", "=", "data", "[", "j", "]", "[", "i", "+", "len", "(", "method", ")", "]", "[", "0", "]", ",", "width", "=", "0.5", ",", "bottom", "=", "bottom", ",", "color", "=", "color_list", "[", "j", "]", ",", "align", "=", "\"edge\"", ",", "edgecolor", "=", "\"black\"", ")", "\n", "bottom", "+=", "data", "[", "j", "]", "[", "i", "+", "len", "(", "method", ")", "]", "[", "0", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "legend_list", ".", "append", "(", "bar2", ")", "\n", "", "", "ax2", ".", "text", "(", "startposition", "+", "i", "*", "width", "+", "0.1", ",", "y", "=", "-", "0.03", ",", "s", "=", "method", "[", "i", "]", ",", "fontsize", "=", "\"14\"", ",", "rotation", "=", "-", "90", ")", "\n", "\n", "", "ax2", ".", "text", "(", "startposition", "+", "(", "len", "(", "method", ")", "/", "2", "-", "2", ")", "*", "width", ",", "y", "=", "1.08", ",", "s", "=", "dataset", "[", "1", "]", ",", "fontsize", "=", "\"14\"", ")", "\n", "\n", "plt", ".", "figlegend", "(", "legend_list", ",", "labels", "=", "label_list", ",", "loc", "=", "\"best\"", ")", "\n", "# plt.legend()", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.running_time": [[226, 304], ["graphics.config_color_map", "matplotlib.cm.get_cmap", "print", "matplotlib.colors.Normalize", "matplotlib.colors.Normalize", "matplotlib.cm.ScalarMappable", "xlrd.open_workbook", "xlrd.open_workbook.sheet_by_name", "matplotlib.figure", "matplotlib.subplots", "ax1.set_xticks", "ax2.set_xticks", "ax1.set_ylabel", "ax2.set_ylabel", "range", "ax1.text", "ax1.text", "list", "range", "ax2.text", "ax2.text", "matplotlib.figlegend", "matplotlib.show", "data_kind.index", "range", "range", "print", "print", "cm.ScalarMappable.to_rgba", "len", "range", "len", "range", "data.sheet_by_name.row_slice", "left_data.append", "data.sheet_by_name.row_slice", "right_data.append", "range", "len", "ax1.bar", "len", "ax2.bar", "list.append", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.graphics.config_color_map", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "running_time", "(", "dir", ",", "method_list", ",", "dataset_list", ")", ":", "\n", "    ", "user_cmap", "=", "config_color_map", "(", ")", "\n", "color_map", "=", "cm", ".", "get_cmap", "(", "\"tab20c\"", ")", "\n", "print", "(", ")", "\n", "cnorm", "=", "matplotlib", ".", "colors", ".", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "20", ")", "\n", "sclarmap", "=", "cm", ".", "ScalarMappable", "(", "norm", "=", "cnorm", ",", "cmap", "=", "color_map", ")", "\n", "\n", "\n", "data", "=", "xlrd", ".", "open_workbook", "(", "dir", ")", "\n", "tabel", "=", "data", ".", "sheet_by_name", "(", "\"run_time\"", ")", "\n", "# *****************\u884c*******************", "\n", "left_row_start", "=", "3", "\n", "left_row_end", "=", "14", "\n", "right_row_start", "=", "3", "\n", "right_row_end", "=", "9", "\n", "# ***********************\u5217\u5750\u6807*************", "\n", "left_col_start", "=", "3", "\n", "left_col_end", "=", "31", "\n", "right_col_start", "=", "34", "\n", "right_col_end", "=", "65", "\n", "data_kind", "=", "[", "\"DBP_en_DBP_de\"", ",", "\"DBP_en_DBP_fr\"", ",", "\"DBP_en_WD_en\"", ",", "\"DBP_en_YG_en\"", "]", "\n", "left_data", "=", "[", "]", "\n", "right_data", "=", "[", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "32", ",", "6", ")", ")", "\n", "sub_i", "=", "1", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "        ", "remove", "=", "data_kind", ".", "index", "(", "dataset", ")", "\n", "left_col_start", "+=", "11", "*", "remove", "\n", "left_col_end", "+=", "11", "*", "remove", "\n", "right_col_start", "+=", "6", "*", "remove", "\n", "right_col_end", "+=", "6", "*", "remove", "\n", "for", "i", "in", "range", "(", "left_row_start", ",", "left_row_end", ")", ":", "\n", "            ", "line_all_row", "=", "tabel", ".", "row_slice", "(", "i", ",", "left_col_start", ",", "left_col_end", ")", "\n", "left_data", ".", "append", "(", "line_all_row", ")", "\n", "", "for", "i", "in", "range", "(", "right_row_start", ",", "right_row_end", ")", ":", "\n", "            ", "line_all_row", "=", "tabel", ".", "row_slice", "(", "i", ",", "right_col_start", ",", "right_col_end", ")", "\n", "right_data", ".", "append", "(", "line_all_row", ")", "\n", "", "print", "(", "left_data", ")", "\n", "print", "(", "right_data", ")", "\n", "", "all_data", "=", "left_data", "+", "right_data", "\n", "#     ****************************************\u5f00\u59cb\u753b\u56fe\u76f8\u5173\u5de5\u4f5c*********************", "\n", "x_label_list", "=", "[", "[", "\"15K_V1\"", ",", "\"15K_V2\"", "]", ",", "[", "\"100K_V1\"", ",", "\"100K_V2\"", "]", "]", "\n", "\n", "color_list", "=", "[", "\"darkorange\"", ",", "\"forestgreen\"", ",", "\"lightsteelblue\"", ",", "\"rosybrown\"", ",", "\"gold\"", ",", "\"indigo\"", ",", "\"red\"", ",", "\"sienna\"", ",", "\n", "\"skyblue\"", ",", "\n", "\"deeppink\"", ",", "\"slategray\"", ",", "\"peru\"", ",", "\"grey\"", ",", "\"olive\"", ",", "\"cyan\"", ",", "\"blue\"", ",", "\"lightpink\"", "]", "\n", "color_list", "=", "[", "sclarmap", ".", "to_rgba", "(", "i", ")", "for", "i", "in", "range", "(", "17", ")", "]", "\n", "# ****************\u73b0\u5728\u662f17\u4e2a\u65b9\u6cd5******************", "\n", "first_x_position", "=", "[", "0.5", ",", "12", ",", "]", "\n", "width", "=", "0.5", "\n", "\n", "fig", ",", "(", "ax1", ",", "ax2", ")", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "16", ",", "8", ")", ")", "\n", "ax1", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax2", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"Time(s)\"", ",", "fontsize", "=", "16", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"Time(s)\"", ",", "fontsize", "=", "16", ")", "\n", "for", "method_pos", "in", "range", "(", "len", "(", "first_x_position", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "all_data", ")", ")", ":", "\n", "            ", "bar1", ",", "=", "ax1", ".", "bar", "(", "first_x_position", "[", "method_pos", "]", "+", "i", "*", "(", "width", ")", ",", "\n", "height", "=", "all_data", "[", "i", "]", "[", "5", "+", "method_pos", "*", "7", "]", ".", "value", ",", "width", "=", "0.5", ",", "\n", "bottom", "=", "0", ",", "color", "=", "color_list", "[", "i", "]", ",", "edgecolor", "=", "\"black\"", ",", "label", "=", "method_list", "[", "i", "]", ")", "\n", "", "", "ax1", ".", "text", "(", "x", "=", "3.5", ",", "y", "=", "-", "120", ",", "s", "=", "x_label_list", "[", "0", "]", "[", "0", "]", ",", "fontsize", "=", "\"16\"", ")", "\n", "ax1", ".", "text", "(", "x", "=", "15.5", ",", "y", "=", "-", "120", ",", "s", "=", "x_label_list", "[", "0", "]", "[", "1", "]", ",", "fontsize", "=", "\"16\"", ")", "\n", "\n", "legend_bar", "=", "list", "(", ")", "\n", "for", "method_pos", "in", "range", "(", "len", "(", "first_x_position", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "all_data", ")", ")", ":", "\n", "            ", "bar2", ",", "=", "ax2", ".", "bar", "(", "first_x_position", "[", "method_pos", "]", "+", "i", "*", "(", "width", ")", ",", "\n", "height", "=", "all_data", "[", "i", "]", "[", "14", "+", "5", "+", "method_pos", "*", "7", "]", ".", "value", ",", "width", "=", "0.5", ",", "\n", "bottom", "=", "0", ",", "color", "=", "color_list", "[", "i", "]", ",", "edgecolor", "=", "\"black\"", ",", "label", "=", "method_list", "[", "i", "]", ")", "\n", "if", "i", "<", "len", "(", "first_x_position", ")", "/", "2", ":", "\n", "                ", "legend_bar", ".", "append", "(", "bar2", ")", "\n", "", "", "", "ax2", ".", "text", "(", "x", "=", "3.5", ",", "y", "=", "-", "2400", ",", "s", "=", "x_label_list", "[", "1", "]", "[", "0", "]", ",", "fontsize", "=", "\"16\"", ")", "\n", "ax2", ".", "text", "(", "x", "=", "15.5", ",", "y", "=", "-", "2400", ",", "s", "=", "x_label_list", "[", "1", "]", "[", "1", "]", ",", "fontsize", "=", "\"16\"", ")", "\n", "\n", "plt", ".", "figlegend", "(", "legend_bar", ",", "labels", "=", "method_list", ",", "loc", "=", "\"upper center\"", ",", "ncol", "=", "10", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "0.95", ")", ")", "\n", "# plt.legend()", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.pool_collect_dis": [[16, 22], ["list", "range", "numpy.argsort", "list.append"], "function", ["None"], ["def", "pool_collect_dis", "(", "dis", ",", "a", ")", ":", "\n", "    ", "dis_result", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "dis", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dis_arg", "=", "np", ".", "argsort", "(", "dis", "[", "i", "]", ")", "\n", "dis_result", ".", "append", "(", "dis_arg", "[", "-", "6", ":", "-", "1", "]", ")", "\n", "", "return", "dis_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.hub_count": [[24, 94], ["ent1.dot", "raw_analyse.div_list", "gc.collect", "list", "gc.collect", "numpy.zeros", "dict", "range", "dict.keys", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "np.tile.reshape", "np.tile.reshape", "np.tile.reshape", "range", "range", "numpy.tile", "numpy.tile", "numpy.tile", "print", "list", "raw_analyse.div_list", "print", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "numpy.sum", "numpy.sum", "numpy.sum", "list.append", "gc.collect", "item.get", "list.append", "range", "numpy.square", "numpy.square", "numpy.square", "multiprocessing.Pool.apply_async"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "hub_count", "(", "ent1", ",", "ent2", ",", "all_ent", ",", "method", ")", ":", "\n", "    ", "if", "method", "==", "\"GCN_Align\"", ":", "\n", "        ", "ent1_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent1", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent2_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent2", ")", ",", "axis", "=", "1", ")", ")", "\n", "all_ent_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "all_ent", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent1_mod", "=", "ent1_mod", ".", "reshape", "(", "ent1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "ent2_mod", "=", "ent2_mod", ".", "reshape", "(", "ent2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "all_ent_mod", "=", "all_ent_mod", ".", "reshape", "(", "all_ent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ent1_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "ent1_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent1_mod", "[", "i", "]", "=", "1", "\n", "", "if", "ent2_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent2_mod", "[", "i", "]", "=", "1", "\n", "", "", "for", "i", "in", "range", "(", "all_ent_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "all_ent_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "all_ent_mod", "[", "i", "]", "=", "1", "\n", "\n", "", "", "ent1_mod", "=", "np", ".", "tile", "(", "ent1_mod", ",", "(", "1", ",", "ent1", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent2_mod", "=", "np", ".", "tile", "(", "ent2_mod", ",", "(", "1", ",", "ent2", ".", "shape", "[", "1", "]", ")", ")", "\n", "all_ent_mod", "=", "np", ".", "tile", "(", "all_ent_mod", ",", "(", "1", ",", "all_ent", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent1", "=", "ent1", "/", "ent1_mod", "\n", "ent2", "=", "ent2", "/", "ent2_mod", "\n", "all_ent", "=", "all_ent", "/", "all_ent_mod", "\n", "\n", "#     ***************************\u8ba1\u7b97\u5b9e\u4f53\u5206\u5e03**********************************", "\n", "", "ent1_dis", "=", "ent1", ".", "dot", "(", "all_ent", ".", "T", ")", "\n", "part_dis_list", "=", "div_list", "(", "ent1_dis", ",", "5", ")", "\n", "del", "ent1_dis", "\n", "gc", ".", "collect", "(", ")", "\n", "dis_result", "=", "list", "(", ")", "\n", "for", "part_dis", "in", "part_dis_list", ":", "\n", "# *************************add multiprocess************", "\n", "        ", "print", "(", "\"multiprocess\"", ")", "\n", "pool_result", "=", "list", "(", ")", "\n", "tasks", "=", "div_list", "(", "part_dis", ",", "PROCESS_NUMBER", ")", "\n", "del", "part_dis", "\n", "print", "(", "\"divide result ok\"", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "PROCESS_NUMBER", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "pool_result", ".", "append", "(", "pool", ".", "apply_async", "(", "pool_collect_dis", ",", "(", "task", ",", "1", ")", ")", ")", "\n", "del", "task", "\n", "gc", ".", "collect", "(", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "item", "in", "pool_result", ":", "\n", "            ", "temp_pool_result", "=", "item", ".", "get", "(", ")", "\n", "dis_result", ".", "append", "(", "temp_pool_result", ")", "\n", "# *******************************************************", "\n", "", "", "del", "part_dis_list", "\n", "gc", ".", "collect", "(", ")", "\n", "appear_array", "=", "np", ".", "zeros", "(", "all_ent", ".", "shape", "[", "0", "]", ")", "\n", "for", "part", "in", "dis_result", ":", "\n", "        ", "for", "item", "in", "part", ":", "\n", "            ", "for", "i", "in", "range", "(", "item", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "appear_array", "[", "item", "[", "i", "]", "]", "+=", "1", "\n", "\n", "", "", "", "appear_dict", "=", "dict", "(", ")", "\n", "appear_dict", "[", "0", "]", "=", "0", "\n", "appear_dict", "[", "1", "]", "=", "0", "\n", "appear_dict", "[", "2", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "all_ent", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "appear_array", "[", "i", "]", ">=", "5", ":", "\n", "            ", "appear_dict", "[", "0", "]", "+=", "1", "\n", "", "elif", "0", "<", "appear_array", "[", "i", "]", "<", "5", ":", "\n", "            ", "appear_dict", "[", "1", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "appear_dict", "[", "2", "]", "+=", "1", "\n", "", "", "for", "key", "in", "appear_dict", ".", "keys", "(", ")", ":", "\n", "        ", "appear_dict", "[", "key", "]", "=", "appear_dict", "[", "key", "]", "/", "all_ent", ".", "shape", "[", "0", "]", "\n", "", "return", "appear_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.div_list": [[96, 112], ["len", "range", "ls_return.append", "ls_return.append"], "function", ["None"], ["", "def", "div_list", "(", "ls", ",", "n", ")", ":", "\n", "    ", "ls_len", "=", "len", "(", "ls", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "if", "n", ">", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "elif", "n", "==", "ls_len", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "ls", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "ls_len", "//", "n", "\n", "k", "=", "ls_len", "%", "n", "\n", "ls_return", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "ls_return", ".", "append", "(", "ls", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "ls_return", ".", "append", "(", "ls", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "ls_return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.pool_near_ent": [[114, 142], ["gc.collect", "list", "list", "list", "range", "numpy.argsort", "range", "list.append", "list.append", "all_ent[].tolist", "list.append", "list.append"], "function", ["None"], ["", "", "def", "pool_near_ent", "(", "all_ent", ",", "ent_dis", ",", "ent", ")", ":", "\n", "    ", "gc", ".", "collect", "(", ")", "\n", "ent_belong_to_one", "=", "list", "(", ")", "\n", "ent_near_aver_sim", "=", "list", "(", ")", "\n", "ent_same_near_aver_sim", "=", "list", "(", ")", "\n", "part_len", "=", "ent_dis", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "part_len", ")", ":", "\n", "        ", "ent_dis_argsort", "=", "np", ".", "argsort", "(", "ent_dis", "[", "i", "]", ")", "\n", "ent1_count", "=", "0", "\n", "ent2_count", "=", "0", "\n", "ent1_sum", "=", "0", "\n", "ent2_sum", "=", "0", "\n", "for", "j", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "most_sim_ent", "=", "all_ent", "[", "ent_dis_argsort", "[", "-", "1", "-", "j", "]", "]", ".", "tolist", "(", ")", "\n", "if", "most_sim_ent", "in", "ent", ":", "\n", "                ", "ent1_count", "+=", "1", "\n", "ent1_sum", "+=", "ent_dis", "[", "i", "]", "[", "ent_dis_argsort", "[", "-", "1", "-", "j", "]", "]", "\n", "", "else", ":", "\n", "                ", "ent2_count", "+=", "1", "\n", "# ent2_sum += ent1_dis[i][ent1_dis_argsort[i][-1 - j]]", "\n", "ent2_sum", "+=", "ent_dis", "[", "i", "]", "[", "ent_dis_argsort", "[", "-", "1", "-", "j", "]", "]", "\n", "", "", "ent_belong_to_one", ".", "append", "(", "[", "ent1_count", ",", "ent2_count", "]", ")", "\n", "ent_near_aver_sim", ".", "append", "(", "(", "ent1_sum", "+", "ent2_sum", ")", "/", "10", ")", "\n", "if", "ent1_count", "==", "0", ":", "\n", "            ", "ent_same_near_aver_sim", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ent_same_near_aver_sim", ".", "append", "(", "ent1_sum", "/", "ent1_count", ")", "\n", "", "", "return", "ent_belong_to_one", ",", "ent_near_aver_sim", ",", "ent_same_near_aver_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.near_entity_sim_csls": [[144, 175], ["openea.expriment.test_funcs.sim_handler", "openea.expriment.test_funcs.sim_handler", "numpy.hstack", "numpy.argsort", "range", "openea.expriment.test_funcs.eval_alignment_by_sim_mat", "print", "ent1.dot", "ent1.dot", "numpy.hstack", "numpy.argsort", "range", "print", "numpy.array", "print", "np.array.append", "range", "range", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_handler", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_handler", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "near_entity_sim_csls", "(", "ent1", ",", "ent2", ",", "k", ",", "hitk", ",", "csls", "=", "True", ")", ":", "\n", "    ", "diff_kg_sim_mat", "=", "sim_handler", "(", "ent1", ",", "ent2", ",", "k", ")", "\n", "same_kg_sim_mat", "=", "sim_handler", "(", "ent1", ",", "ent1", ",", "k", ")", "\n", "ent2_num", "=", "ent2", ".", "shape", "[", "0", "]", "\n", "sim_mat", "=", "np", ".", "hstack", "(", "(", "diff_kg_sim_mat", ",", "same_kg_sim_mat", ")", ")", "\n", "sort_mat", "=", "np", ".", "argsort", "(", "-", "sim_mat", ",", "axis", "=", "1", ")", "\n", "diff_number", "=", "[", "]", "\n", "acc_number", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "ent1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "diff_number", ".", "append", "(", "0", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "11", ")", ":", "\n", "            ", "if", "sort_mat", "[", "i", "]", "[", "j", "]", "<", "ent2_num", ":", "\n", "                ", "diff_number", "[", "i", "]", "+=", "1", "\n", "", "", "for", "j", "in", "range", "(", "0", ",", "hitk", "+", "1", ")", ":", "\n", "            ", "if", "sort_mat", "[", "i", "]", "[", "j", "]", "==", "i", ":", "\n", "                ", "acc_number", "+=", "1", "\n", "", "", "", "acc", "=", "acc_number", "/", "ent2_num", "\n", "eval_alignment_by_sim_mat", "(", "ent1", ",", "ent2", ",", "[", "1", ",", "2", ",", "5", ",", "10", "]", ",", "k", ")", "\n", "print", "(", "acc", ")", "\n", "# **************************************\u4e0d\u52a0csls*****************************", "\n", "sim_mat1", "=", "ent1", ".", "dot", "(", "ent2", ".", "T", ")", "\n", "sim_mat2", "=", "ent1", ".", "dot", "(", "ent1", ".", "T", ")", "\n", "h_sim_mat", "=", "np", ".", "hstack", "(", "(", "sim_mat1", ",", "sim_mat2", ")", ")", "\n", "h_sort_mat", "=", "np", ".", "argsort", "(", "-", "h_sim_mat", ",", "axis", "=", "1", ")", "\n", "accu", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "ent1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "h_sort_mat", "[", "i", "]", "[", "1", "]", "==", "i", ":", "\n", "            ", "accu", "+=", "1", "\n", "", "", "print", "(", "\"no csls:{}\"", ".", "format", "(", "accu", "/", "ent2_num", ")", ")", "\n", "diff_number", "=", "np", ".", "array", "(", "diff_number", ")", "\n", "print", "(", "np", ".", "sum", "(", "diff_number", ")", "/", "diff_number", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.all_ents_sim": [[177, 221], ["ent1.dot", "numpy.median", "numpy.sum", "numpy.median", "ent1.dot.max", "numpy.median", "numpy.median", "ent1.dot.var", "numpy.median", "numpy.sqrt", "numpy.sqrt", "np.tile.reshape", "np.tile.reshape", "range", "numpy.tile", "numpy.tile", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "all_ents_sim", "(", "ent1", ",", "ent2", ",", "method", ")", ":", "\n", "    ", "if", "method", "==", "\"GCN_Align\"", ":", "\n", "        ", "ent1_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent1", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent2_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent2", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent1_mod", "=", "ent1_mod", ".", "reshape", "(", "ent1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "ent2_mod", "=", "ent2_mod", ".", "reshape", "(", "ent2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ent1_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "ent1_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent1_mod", "[", "i", "]", "=", "1", "\n", "", "if", "ent2_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent2_mod", "[", "i", "]", "=", "1", "\n", "", "", "ent1_mod", "=", "np", ".", "tile", "(", "ent1_mod", ",", "(", "1", ",", "ent1", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent2_mod", "=", "np", ".", "tile", "(", "ent2_mod", ",", "(", "1", ",", "ent2", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent1", "=", "ent1", "/", "ent1_mod", "\n", "ent2", "=", "ent2", "/", "ent2_mod", "\n", "\n", "", "result", "=", "ent1", ".", "dot", "(", "ent2", ".", "T", ")", "\n", "median_result", "=", "np", ".", "median", "(", "result", ",", "axis", "=", "1", ")", "\n", "row", "=", "result", ".", "shape", "[", "0", "]", "\n", "col", "=", "result", ".", "shape", "[", "1", "]", "\n", "\n", "all_sum", "=", "np", ".", "sum", "(", "result", ",", "axis", "=", "1", ")", "\n", "aver_sum", "=", "all_sum", "/", "col", "\n", "median_sum", "=", "np", ".", "median", "(", "aver_sum", ")", "\n", "aver_all_sum", "=", "np", ".", "sum", "(", "aver_sum", ")", "/", "row", "\n", "\n", "most_sim_mat", "=", "result", ".", "max", "(", "axis", "=", "1", ")", "\n", "median_most_sim", "=", "np", ".", "median", "(", "most_sim_mat", ")", "\n", "aver_most_sim", "=", "np", ".", "sum", "(", "most_sim_mat", ")", "/", "row", "\n", "# *************\u6c42\u6240\u6709embedding\u503c\u4e0e\u6700\u76f8\u4f3c\u7684\u4e4b\u95f4\u7684\u5dee\u503c*********", "\n", "diff_sum_mat", "=", "most_sim_mat", "*", "col", "-", "all_sum", "\n", "diff_sum_mat", "=", "diff_sum_mat", "/", "(", "col", "-", "1", ")", "\n", "median_diff_sum", "=", "np", ".", "median", "(", "diff_sum_mat", ")", "\n", "aver_diff_sum", "=", "np", ".", "sum", "(", "diff_sum_mat", ")", "/", "row", "\n", "# *******************\u6b64\u5904\u5148\u8ba1\u7b97\u5305\u542b\u6700\u76f8\u4f3c\u7684embedding\u7684\u65b9\u5dee*****", "\n", "diff_var_mat", "=", "result", ".", "var", "(", "axis", "=", "1", ")", "\n", "median_diff_var", "=", "np", ".", "median", "(", "diff_var_mat", ")", "\n", "aver_diff_var", "=", "np", ".", "sum", "(", "diff_var_mat", ")", "/", "row", "\n", "\n", "inte_info", "=", "[", "median_result", ",", "aver_sum", ",", "aver_all_sum", ",", "median_sum", "]", "\n", "most_sim_info", "=", "[", "most_sim_mat", ",", "aver_most_sim", ",", "median_most_sim", "]", "\n", "diff_info", "=", "[", "diff_sum_mat", ",", "aver_diff_sum", ",", "median_diff_sum", "]", "\n", "var_info", "=", "[", "diff_var_mat", ",", "aver_diff_var", ",", "median_diff_var", "]", "\n", "return", "inte_info", ",", "most_sim_info", ",", "diff_info", ",", "var_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.pool_quartile_deviation": [[223, 235], ["list", "range", "numpy.argsort", "range", "list.append", "all_ent[].tolist"], "function", ["None"], ["", "def", "pool_quartile_deviation", "(", "all_ent", ",", "ent_dis", ",", "ent", ")", ":", "\n", "    ", "ent_belong_to_one", "=", "list", "(", ")", "\n", "part_len", "=", "ent_dis", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "part_len", ")", ":", "\n", "        ", "ent1_dis_argsort", "=", "np", ".", "argsort", "(", "ent_dis", "[", "i", "]", ")", "\n", "ent1_count", "=", "0", "\n", "for", "j", "in", "range", "(", "0", ",", "11", ")", ":", "\n", "            ", "most_sim_ent", "=", "all_ent", "[", "ent1_dis_argsort", "[", "-", "1", "-", "j", "]", "]", ".", "tolist", "(", ")", "\n", "if", "most_sim_ent", "in", "ent", ":", "\n", "                ", "ent1_count", "+=", "1", "\n", "", "", "ent_belong_to_one", ".", "append", "(", "ent1_count", ")", "\n", "", "return", "ent_belong_to_one", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.comp_quartile_deviation": [[237, 268], ["ent1.tolist.dot", "ent1.tolist.tolist", "raw_analyse.div_list", "gc.collect", "gc.collect", "numpy.array", "numpy.argsort", "numpy.array", "numpy.mean", "multiprocessing.Pool", "raw_analyse.div_list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "pool_result.append", "gc.collect", "np.array.extend", "multiprocessing.Pool.apply_async", "item.get", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list"], ["", "def", "comp_quartile_deviation", "(", "ent1", ",", "all_ent", ")", ":", "\n", "    ", "ent1_dis", "=", "ent1", ".", "dot", "(", "all_ent", ".", "T", ")", "\n", "ent1_num", "=", "ent1", ".", "shape", "[", "0", "]", "\n", "ent1_belong_to_one", "=", "[", "]", "\n", "ent1", "=", "ent1", ".", "tolist", "(", ")", "\n", "# **************************add multiprocess************", "\n", "part_dis_list", "=", "div_list", "(", "ent1_dis", ",", "5", ")", "\n", "del", "ent1_dis", "\n", "gc", ".", "collect", "(", ")", "\n", "for", "part_dis", "in", "part_dis_list", ":", "\n", "        ", "pool_result", "=", "[", "]", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "PROCESS_NUMBER", ")", "\n", "tasks", "=", "div_list", "(", "part_dis", ",", "PROCESS_NUMBER", ")", "\n", "del", "part_dis", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "pool_result", ".", "append", "(", "pool", ".", "apply_async", "(", "pool_quartile_deviation", ",", "(", "all_ent", ",", "task", ",", "ent1", ")", ")", ")", "\n", "del", "task", "\n", "gc", ".", "collect", "(", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "item", "in", "pool_result", ":", "\n", "            ", "ent1_belong_to_one", ".", "extend", "(", "item", ".", "get", "(", ")", ")", "\n", "# ******************************************************", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "ent1_belong_to_one", "=", "np", ".", "array", "(", "ent1_belong_to_one", ")", "\n", "result_argsort", "=", "np", ".", "argsort", "(", "ent1_belong_to_one", ")", "\n", "final_result", "=", "np", ".", "array", "(", "ent1_belong_to_one", "[", "result_argsort", "[", "int", "(", "ent1_num", "/", "4", ")", ":", "int", "(", "-", "ent1_num", "/", "4", ")", "]", "]", ")", "\n", "quar_result", "=", "ent1_belong_to_one", "[", "result_argsort", "[", "int", "(", "-", "ent1_num", "/", "4", ")", "]", "]", "-", "ent1_belong_to_one", "[", "\n", "result_argsort", "[", "int", "(", "ent1_num", "/", "4", ")", "]", "]", "\n", "mean_result", "=", "np", ".", "mean", "(", "final_result", ")", "\n", "return", "[", "quar_result", ",", "mean_result", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.near_entity_sim": [[270, 393], ["time.time", "print", "ent1.tolist.dot", "numpy.argsort", "list", "list", "range", "numpy.array", "numpy.mean", "sim_result.tolist.tolist", "gc.collect", "ent1.tolist.dot", "ent1.tolist.tolist", "raw_analyse.div_list", "gc.collect", "gc.collect", "ent2.tolist.dot", "ent2.tolist.tolist", "raw_analyse.div_list", "gc.collect", "time.time", "print", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "np.tile.reshape", "np.tile.reshape", "np.tile.reshape", "range", "range", "numpy.tile", "numpy.tile", "numpy.tile", "list", "list", "range", "sim_result.tolist.append", "print", "raw_analyse.div_list", "print", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "raw_analyse.div_list", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "numpy.sum", "numpy.sum", "numpy.sum", "list.append", "list.append", "pool_result.append", "gc.collect", "item.get", "ent1_belong_to_one.extend", "ent1_near_aver_sim.extend", "ent1_same_near_aver_sim.extend", "pool_result.append", "gc.collect", "item.get", "ent2_belong_to_one.extend", "ent2_near_aver_sim.extend", "ent2_same_near_aver_sim.extend", "numpy.square", "numpy.square", "numpy.square", "multiprocessing.Pool.apply_async", "multiprocessing.Pool.apply_async"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list"], ["", "def", "near_entity_sim", "(", "ent1", ",", "ent2", ",", "align_ent1_id", ",", "align_ent2_id", ",", "all_ent", ",", "method", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"start\"", ")", "\n", "if", "method", "==", "\"GCN_Align\"", ":", "\n", "        ", "ent1_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent1", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent2_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent2", ")", ",", "axis", "=", "1", ")", ")", "\n", "all_ent_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "all_ent", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent1_mod", "=", "ent1_mod", ".", "reshape", "(", "ent1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "ent2_mod", "=", "ent2_mod", ".", "reshape", "(", "ent2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "all_ent_mod", "=", "all_ent_mod", ".", "reshape", "(", "all_ent", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ent1_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "ent1_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent1_mod", "[", "i", "]", "=", "1", "\n", "", "if", "ent2_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent2_mod", "[", "i", "]", "=", "1", "\n", "", "", "for", "i", "in", "range", "(", "all_ent_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "all_ent_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "all_ent_mod", "[", "i", "]", "=", "1", "\n", "\n", "", "", "ent1_mod", "=", "np", ".", "tile", "(", "ent1_mod", ",", "(", "1", ",", "ent1", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent2_mod", "=", "np", ".", "tile", "(", "ent2_mod", ",", "(", "1", ",", "ent2", ".", "shape", "[", "1", "]", ")", ")", "\n", "all_ent_mod", "=", "np", ".", "tile", "(", "all_ent_mod", ",", "(", "1", ",", "all_ent", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent1", "=", "ent1", "/", "ent1_mod", "\n", "ent2", "=", "ent2", "/", "ent2_mod", "\n", "all_ent", "=", "all_ent", "/", "all_ent_mod", "\n", "\n", "", "sim_ent_mat", "=", "ent1", ".", "dot", "(", "ent2", ".", "T", ")", "\n", "argsort_sim_ent_mat", "=", "np", ".", "argsort", "(", "sim_ent_mat", ")", "\n", "most_sim_ent_eleven", "=", "list", "(", ")", "\n", "sim_result", "=", "list", "(", ")", "\n", "# ******************************\u5e9f\u5f03**********************************************", "\n", "# t=0", "\n", "# for ent1_id,ent2_id in zip(align_ent1_id,align_ent2_id):", "\n", "#     if t>=len(most_sim_ent_eleven):", "\n", "#         most_sim_ent_eleven.append([])", "\n", "#         sim_result.append([])", "\n", "#     for i in range(11):", "\n", "#         most_sim_ent_eleven[t].append(ent2[argsort_sim_ent_mat[ent1_id][-1-i]])", "\n", "#         sim_result[t].append(sim_ent_mat[ent1_id][argsort_sim_ent_mat[ent1_id][-1-i]])", "\n", "#     t+=1", "\n", "# ******************************************************************************************", "\n", "for", "i", "in", "range", "(", "ent1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "temp_sim_result", "=", "list", "(", ")", "\n", "temp_most_sim_ent_eleven", "=", "list", "(", ")", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "            ", "temp_most_sim_ent_eleven", ".", "append", "(", "ent2", "[", "argsort_sim_ent_mat", "[", "i", "]", "[", "-", "1", "-", "j", "]", "]", ")", "\n", "temp_sim_result", ".", "append", "(", "sim_ent_mat", "[", "i", "]", "[", "argsort_sim_ent_mat", "[", "i", "]", "[", "-", "1", "-", "j", "]", "]", ")", "\n", "", "sim_result", ".", "append", "(", "temp_sim_result", ")", "\n", "", "sim_result", "=", "np", ".", "array", "(", "sim_result", ")", "\n", "sim_result", "=", "np", ".", "mean", "(", "sim_result", ",", "axis", "=", "0", ")", "\n", "sim_result", "=", "sim_result", ".", "tolist", "(", ")", "\n", "# **************************\u91ca\u653enumpy\u5185\u5b58**************", "\n", "del", "sim_ent_mat", "\n", "del", "argsort_sim_ent_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "# \u8ba1\u7b97\u4e00\u4e2a\u5b9e\u4f53\u6700\u8fd110\u4e2a\u5b9e\u4f53\u5728\u4e24\u4e2aKG\u4e2d\u7684\u5206\u5e03", "\n", "ent1_dis", "=", "ent1", ".", "dot", "(", "all_ent", ".", "T", ")", "\n", "# ent1_dis_argsort = np.argsort(ent1_dis)", "\n", "ent1_num", "=", "ent1", ".", "shape", "[", "0", "]", "\n", "\n", "ent1_belong_to_one", "=", "[", "]", "\n", "ent2_belong_to_one", "=", "[", "]", "\n", "ent1_near_aver_sim", "=", "[", "]", "\n", "ent2_near_aver_sim", "=", "[", "]", "\n", "ent1_same_near_aver_sim", "=", "[", "]", "\n", "ent2_same_near_aver_sim", "=", "[", "]", "\n", "ent1", "=", "ent1", ".", "tolist", "(", ")", "\n", "\n", "part_dis_list", "=", "div_list", "(", "ent1_dis", ",", "5", ")", "\n", "del", "ent1_dis", "\n", "gc", ".", "collect", "(", ")", "\n", "for", "part_dis", "in", "part_dis_list", ":", "\n", "# *************************add multiprocess************", "\n", "        ", "print", "(", "\"multiprocess\"", ")", "\n", "pool_result", "=", "[", "]", "\n", "tasks", "=", "div_list", "(", "part_dis", ",", "PROCESS_NUMBER", ")", "\n", "del", "part_dis", "\n", "print", "(", "\"divide result ok\"", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "PROCESS_NUMBER", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "pool_result", ".", "append", "(", "pool", ".", "apply_async", "(", "pool_near_ent", ",", "(", "all_ent", ",", "task", ",", "ent1", ")", ")", ")", "\n", "del", "task", "\n", "gc", ".", "collect", "(", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "item", "in", "pool_result", ":", "\n", "            ", "temp_pool_result", "=", "item", ".", "get", "(", ")", "\n", "# ent1_info.append(temp_pool_result)", "\n", "ent1_belong_to_one", ".", "extend", "(", "temp_pool_result", "[", "0", "]", ")", "\n", "ent1_near_aver_sim", ".", "extend", "(", "temp_pool_result", "[", "1", "]", ")", "\n", "ent1_same_near_aver_sim", ".", "extend", "(", "temp_pool_result", "[", "2", "]", ")", "\n", "# *******************************************************", "\n", "", "", "del", "part_dis_list", "\n", "gc", ".", "collect", "(", ")", "\n", "# *********************\u5220\u9664ent1\u76f8\u5173\u65e0\u7528\u5185\u5b58*************************", "\n", "ent2_dis", "=", "ent2", ".", "dot", "(", "all_ent", ".", "T", ")", "\n", "\n", "ent2_num", "=", "ent2", ".", "shape", "[", "0", "]", "\n", "ent2", "=", "ent2", ".", "tolist", "(", ")", "\n", "part_dis_list", "=", "div_list", "(", "ent2_dis", ",", "5", ")", "\n", "del", "ent2_dis", "\n", "gc", ".", "collect", "(", ")", "\n", "for", "part_dis", "in", "part_dis_list", ":", "\n", "# *************************add multiprocess************", "\n", "        ", "pool_result", "=", "[", "]", "\n", "tasks", "=", "div_list", "(", "part_dis", ",", "PROCESS_NUMBER", ")", "\n", "del", "part_dis", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "PROCESS_NUMBER", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "pool_result", ".", "append", "(", "pool", ".", "apply_async", "(", "pool_near_ent", ",", "(", "all_ent", ",", "task", ",", "ent2", ")", ")", ")", "\n", "del", "task", "\n", "gc", ".", "collect", "(", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "item", "in", "pool_result", ":", "\n", "            ", "temp_pool_result", "=", "item", ".", "get", "(", ")", "\n", "ent2_belong_to_one", ".", "extend", "(", "temp_pool_result", "[", "0", "]", ")", "\n", "ent2_near_aver_sim", ".", "extend", "(", "temp_pool_result", "[", "1", "]", ")", "\n", "ent2_same_near_aver_sim", ".", "extend", "(", "temp_pool_result", "[", "2", "]", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "end_time", "-", "start_time", ")", "\n", "return", "most_sim_ent_eleven", ",", "sim_result", ",", "[", "ent1_belong_to_one", ",", "ent1_near_aver_sim", ",", "ent1_same_near_aver_sim", "]", ",", "[", "ent2_belong_to_one", ",", "ent2_near_aver_sim", ",", "ent2_same_near_aver_sim", "]", "\n", "# return most_sim_ent_eleven, sim_result, [ent1_info, ent1_num], [ent2_info, ent2_num]", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.pool_near_entity_raw_analyse": [[396, 422], ["numpy.array", "numpy.sum", "numpy.median", "numpy.array", "numpy.sum", "numpy.median", "np.array.var", "numpy.array", "numpy.sum", "numpy.median", "np.array.var"], "function", ["None"], ["", "def", "pool_near_entity_raw_analyse", "(", "ent_belong_to_one", ",", "ent_near_aver_sim", ",", "ent_same_near_aver_sim", ")", ":", "\n", "# \u6b64\u5904\u7b80\u5355\u7684\u8ba1\u7b97\u5e73\u5747\u6570\u3001\u65b9\u5dee\u3001\u4e2d\u4f4d\u6570", "\n", "# ***********************************************************", "\n", "    ", "ent_belong_to_one", "=", "np", ".", "array", "(", "ent_belong_to_one", ")", "\n", "ent_aver", "=", "np", ".", "sum", "(", "ent_belong_to_one", ",", "axis", "=", "0", ")", "\n", "ent_median", "=", "np", ".", "median", "(", "ent_belong_to_one", "[", ":", "]", "[", "0", "]", ")", "\n", "del", "ent_belong_to_one", "\n", "\n", "ent_near_aver_sim", "=", "np", ".", "array", "(", "ent_near_aver_sim", ")", "\n", "ent_aver_near_aver_sim", "=", "np", ".", "sum", "(", "ent_near_aver_sim", ")", "\n", "ent_median_near_aver_sim", "=", "np", ".", "median", "(", "ent_near_aver_sim", ")", "\n", "ent_var_near_aver_sim", "=", "ent_near_aver_sim", ".", "var", "(", ")", "\n", "del", "ent_near_aver_sim", "\n", "\n", "ent_same_near_aver_sim", "=", "np", ".", "array", "(", "ent_same_near_aver_sim", ")", "\n", "ent_aver_same_near_aver_sim", "=", "np", ".", "sum", "(", "ent_same_near_aver_sim", ")", "\n", "ent_median_same_near_aver_sim", "=", "np", ".", "median", "(", "ent_same_near_aver_sim", ")", "\n", "ent_var_same_near_aver_sim", "=", "ent_same_near_aver_sim", ".", "var", "(", ")", "\n", "del", "ent_same_near_aver_sim", "\n", "\n", "ent_inte_info", "=", "[", "ent_aver", ",", "ent_median", "]", "\n", "ent_near_info", "=", "[", "ent_aver_near_aver_sim", ",", "ent_median_near_aver_sim", ",", "ent_var_near_aver_sim", "]", "\n", "ent_same_near_info", "=", "[", "ent_aver_same_near_aver_sim", ",", "ent_median_same_near_aver_sim", ",", "ent_var_same_near_aver_sim", "]", "\n", "ent_info", "=", "[", "ent_inte_info", ",", "ent_near_info", ",", "ent_same_near_info", "]", "\n", "\n", "return", "ent_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.inter_near_entity_analyse": [[424, 479], ["len", "len", "list", "list", "list", "numpy.array", "inte_array.sum.sum", "numpy.array", "near_array.sum.sum", "numpy.array", "same_near_array.sum.sum", "list", "list", "list", "numpy.array", "inte_array.sum.sum", "numpy.array", "near_array.sum.sum", "numpy.array", "same_near_array.sum.sum", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "inter_near_entity_analyse", "(", "ent1_near_dis", ",", "ent2_near_dis", ")", ":", "\n", "    ", "ent1_num", "=", "ent1_near_dis", "[", "1", "]", "\n", "ent1_info_list", "=", "ent1_near_dis", "[", "0", "]", "\n", "ent1_part_num", "=", "len", "(", "ent1_info_list", ")", "\n", "\n", "ent2_num", "=", "ent2_near_dis", "[", "1", "]", "\n", "ent2_info_list", "=", "ent2_near_dis", "[", "0", "]", "\n", "ent2_part_num", "=", "len", "(", "ent2_info_list", ")", "\n", "\n", "inte_list", "=", "list", "(", ")", "\n", "near_list", "=", "list", "(", ")", "\n", "same_near_list", "=", "list", "(", ")", "\n", "\n", "for", "item", "in", "ent2_info_list", ":", "\n", "        ", "inte_list", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "near_list", ".", "append", "(", "item", "[", "1", "]", ")", "\n", "same_near_list", ".", "append", "(", "item", "[", "2", "]", ")", "\n", "", "inte_array", "=", "np", ".", "array", "(", "inte_list", ")", "\n", "inte_array", "=", "inte_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "near_array", "=", "np", ".", "array", "(", "near_list", ")", "\n", "near_array", "=", "near_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "same_near_array", "=", "np", ".", "array", "(", "same_near_list", ")", "\n", "same_near_array", "=", "same_near_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "ent2_inte_info", "=", "[", "inte_array", "[", "0", "]", "/", "ent2_num", ",", "inte_array", "[", "1", "]", "/", "ent2_part_num", "]", "\n", "ent2_near_info", "=", "[", "near_array", "[", "0", "]", "/", "ent2_num", ",", "near_array", "[", "1", "]", "/", "ent2_part_num", ",", "near_array", "[", "2", "]", "/", "ent2_part_num", "]", "\n", "ent2_same_near_info", "=", "[", "same_near_array", "[", "0", "]", "/", "ent2_num", ",", "same_near_array", "[", "1", "]", "/", "ent2_part_num", ",", "\n", "same_near_array", "[", "2", "]", "/", "ent2_part_num", "]", "\n", "ent2_info", "=", "[", "ent2_inte_info", ",", "ent2_near_info", ",", "ent2_same_near_info", "]", "\n", "\n", "inte_list", "=", "list", "(", ")", "\n", "near_list", "=", "list", "(", ")", "\n", "same_near_list", "=", "list", "(", ")", "\n", "\n", "for", "item", "in", "ent1_info_list", ":", "\n", "        ", "inte_list", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "near_list", ".", "append", "(", "item", "[", "1", "]", ")", "\n", "same_near_list", ".", "append", "(", "item", "[", "2", "]", ")", "\n", "", "inte_array", "=", "np", ".", "array", "(", "inte_list", ")", "\n", "inte_array", "=", "inte_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "near_array", "=", "np", ".", "array", "(", "near_list", ")", "\n", "near_array", "=", "near_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "same_near_array", "=", "np", ".", "array", "(", "same_near_list", ")", "\n", "same_near_array", "=", "same_near_array", ".", "sum", "(", "axis", "=", "0", ")", "\n", "ent1_inte_info", "=", "[", "inte_array", "[", "0", "]", "/", "ent1_num", ",", "inte_array", "[", "1", "]", "/", "ent1_part_num", "]", "\n", "ent1_near_info", "=", "[", "near_array", "[", "0", "]", "/", "ent1_num", ",", "near_array", "[", "1", "]", "/", "ent1_part_num", ",", "near_array", "[", "2", "]", "/", "ent1_part_num", "]", "\n", "ent1_same_near_info", "=", "[", "same_near_array", "[", "0", "]", "/", "ent1_num", ",", "same_near_array", "[", "1", "]", "/", "ent1_part_num", ",", "\n", "same_near_array", "[", "2", "]", "/", "ent1_part_num", "]", "\n", "ent1_info", "=", "[", "ent1_inte_info", ",", "ent1_near_info", ",", "ent1_same_near_info", "]", "\n", "\n", "return", "ent1_info", ",", "ent2_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.near_entity_raw_analyse": [[481, 530], ["len", "numpy.array", "numpy.median", "numpy.array", "numpy.median", "np.array.var", "numpy.array", "numpy.median", "np.array.var", "len", "numpy.array", "numpy.median", "numpy.array", "numpy.median", "np.array.var", "numpy.array", "numpy.median", "np.array.var", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "near_entity_raw_analyse", "(", "ent1_near_dis", ",", "ent2_near_dis", ")", ":", "\n", "    ", "ent1_belong_to_one", "=", "ent1_near_dis", "[", "0", "]", "\n", "ent1_near_aver_sim", "=", "ent1_near_dis", "[", "1", "]", "\n", "ent1_same_near_aver_sim", "=", "ent1_near_dis", "[", "2", "]", "\n", "ent2_belong_to_one", "=", "ent2_near_dis", "[", "0", "]", "\n", "ent2_near_aver_sim", "=", "ent2_near_dis", "[", "1", "]", "\n", "ent2_same_near_aver_sim", "=", "ent2_near_dis", "[", "2", "]", "\n", "# \u6b64\u5904\u7b80\u5355\u7684\u8ba1\u7b97\u5e73\u5747\u6570\u3001\u65b9\u5dee\u3001\u4e2d\u4f4d\u6570", "\n", "# ***********************************************************", "\n", "ent1_length", "=", "len", "(", "ent1_belong_to_one", ")", "\n", "ent1_belong_to_one", "=", "np", ".", "array", "(", "ent1_belong_to_one", ")", "\n", "ent1_aver", "=", "np", ".", "sum", "(", "ent1_belong_to_one", ",", "axis", "=", "0", ")", "/", "ent1_length", "\n", "ent1_median", "=", "np", ".", "median", "(", "ent1_belong_to_one", "[", ":", "]", "[", "0", "]", ")", "\n", "\n", "ent1_near_aver_sim", "=", "np", ".", "array", "(", "ent1_near_aver_sim", ")", "\n", "ent1_aver_near_aver_sim", "=", "np", ".", "sum", "(", "ent1_near_aver_sim", ")", "/", "ent1_length", "\n", "ent1_median_near_aver_sim", "=", "np", ".", "median", "(", "ent1_near_aver_sim", ")", "\n", "ent1_var_near_aver_sim", "=", "ent1_near_aver_sim", ".", "var", "(", ")", "\n", "\n", "ent1_same_near_aver_sim", "=", "np", ".", "array", "(", "ent1_same_near_aver_sim", ")", "\n", "ent1_aver_same_near_aver_sim", "=", "np", ".", "sum", "(", "ent1_same_near_aver_sim", ")", "/", "ent1_length", "\n", "ent1_median_same_near_aver_sim", "=", "np", ".", "median", "(", "ent1_same_near_aver_sim", ")", "\n", "ent1_var_same_near_aver_sim", "=", "ent1_same_near_aver_sim", ".", "var", "(", ")", "\n", "\n", "ent2_length", "=", "len", "(", "ent2_belong_to_one", ")", "\n", "ent2_belong_to_one", "=", "np", ".", "array", "(", "ent2_belong_to_one", ")", "\n", "ent2_aver", "=", "np", ".", "sum", "(", "ent2_belong_to_one", ",", "axis", "=", "0", ")", "/", "ent2_length", "\n", "ent2_median", "=", "np", ".", "median", "(", "ent2_belong_to_one", "[", ":", "]", "[", "0", "]", ")", "\n", "\n", "ent2_near_aver_sim", "=", "np", ".", "array", "(", "ent2_near_aver_sim", ")", "\n", "ent2_aver_near_aver_sim", "=", "np", ".", "sum", "(", "ent2_near_aver_sim", ")", "/", "ent2_length", "\n", "ent2_median_near_aver_sim", "=", "np", ".", "median", "(", "ent2_near_aver_sim", ")", "\n", "ent2_var_near_aver_sim", "=", "ent2_near_aver_sim", ".", "var", "(", ")", "\n", "\n", "ent2_same_near_aver_sim", "=", "np", ".", "array", "(", "ent2_same_near_aver_sim", ")", "\n", "ent2_aver_same_near_aver_sim", "=", "np", ".", "sum", "(", "ent2_same_near_aver_sim", ")", "/", "ent2_length", "\n", "ent2_median_same_near_aver_sim", "=", "np", ".", "median", "(", "ent2_same_near_aver_sim", ")", "\n", "ent2_var_same_near_aver_sim", "=", "ent2_same_near_aver_sim", ".", "var", "(", ")", "\n", "\n", "ent1_inte_info", "=", "[", "ent1_aver", ",", "ent1_median", "]", "\n", "ent1_near_info", "=", "[", "ent1_aver_near_aver_sim", ",", "ent1_median_near_aver_sim", ",", "ent1_var_near_aver_sim", "]", "\n", "ent1_same_near_info", "=", "[", "ent1_aver_same_near_aver_sim", ",", "ent1_median_same_near_aver_sim", ",", "ent1_var_same_near_aver_sim", "]", "\n", "ent1_info", "=", "[", "ent1_inte_info", ",", "ent1_near_info", ",", "ent1_same_near_info", "]", "\n", "\n", "ent2_inte_info", "=", "[", "ent2_aver", ",", "ent2_median", "]", "\n", "ent2_near_info", "=", "[", "ent2_aver_near_aver_sim", ",", "ent2_median_near_aver_sim", ",", "ent2_var_near_aver_sim", "]", "\n", "ent2_same_near_info", "=", "[", "ent2_aver_same_near_aver_sim", ",", "ent2_median_same_near_aver_sim", ",", "ent2_var_same_near_aver_sim", "]", "\n", "ent2_info", "=", "[", "ent2_inte_info", ",", "ent2_near_info", ",", "ent2_same_near_info", "]", "\n", "return", "ent1_info", ",", "ent2_info", "\n", "# **************************************************************************************", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.ent_conicity": [[533, 558], ["numpy.mean", "numpy.mean", "numpy.vstack", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.square", "numpy.mean", "numpy.square", "numpy.mean", "numpy.square", "numpy.mean", "numpy.dot", "numpy.sqrt", "numpy.dot", "numpy.sqrt", "numpy.dot", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.square", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "ent_conicity", "(", "ent1", ",", "ent2", ")", ":", "\n", "    ", "ent1_mean", "=", "np", ".", "mean", "(", "ent1", ",", "axis", "=", "0", ")", "\n", "ent2_mean", "=", "np", ".", "mean", "(", "ent2", ",", "axis", "=", "0", ")", "\n", "all_ents", "=", "np", ".", "vstack", "(", "(", "ent1", ",", "ent2", ")", ")", "\n", "all_ents_mean", "=", "np", ".", "mean", "(", "all_ents", ",", "axis", "=", "0", ")", "\n", "\n", "#   ******************\u8ba1\u7b97atm*************************", "\n", "ent1_atm", "=", "np", ".", "dot", "(", "ent1", ",", "ent1_mean", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent1_mean", ")", ")", ")", "\n", "ent2_atm", "=", "np", ".", "dot", "(", "ent2", ",", "ent2_mean", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent2_mean", ")", ")", ")", "\n", "all_ents_atm", "=", "np", ".", "dot", "(", "all_ents", ",", "all_ents_mean", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "all_ents_mean", ")", ")", ")", "\n", "#   ******************\u8ba1\u7b97conicity********************", "\n", "ent1_conicity", "=", "np", ".", "mean", "(", "ent1_atm", ")", "\n", "ent2_conicity", "=", "np", ".", "mean", "(", "ent2_atm", ")", "\n", "all_ents_conicity", "=", "np", ".", "mean", "(", "all_ents_atm", ")", "\n", "#   *************************\u8ba1\u7b97VS****************", "\n", "ent1_temp_vs", "=", "np", ".", "square", "(", "ent1_atm", "-", "ent1_conicity", ")", "\n", "ent1_vs", "=", "np", ".", "mean", "(", "ent1_temp_vs", ")", "\n", "ent2_temp_vs", "=", "np", ".", "square", "(", "ent2_atm", "-", "ent2_conicity", ")", "\n", "ent2_vs", "=", "np", ".", "mean", "(", "ent2_temp_vs", ")", "\n", "all_ents_temp_vs", "=", "np", ".", "square", "(", "all_ents_atm", "-", "all_ents_conicity", ")", "\n", "all_ents_vs", "=", "np", ".", "mean", "(", "all_ents_temp_vs", ")", "\n", "\n", "conicity", "=", "[", "ent1_conicity", ",", "ent2_conicity", ",", "all_ents_conicity", "]", "\n", "vs", "=", "[", "ent1_vs", ",", "ent2_vs", ",", "all_ents_vs", "]", "\n", "return", "conicity", ",", "vs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.save_quartile_deviation_result": [[560, 564], ["open", "f.write"], "function", ["None"], ["", "def", "save_quartile_deviation_result", "(", "save_output_file", ",", "result", ")", ":", "\n", "    ", "save_output_file", "=", "save_output_file", "+", "\"quartile\"", "\n", "with", "open", "(", "save_output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"quar_devi:\\t{}\\tmean_value:\\t{}\\t\"", ".", "format", "(", "result", "[", "0", "]", ",", "result", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.save_near_ents_sim_result": [[566, 604], ["raw_analyse.near_entity_raw_analyse", "print", "open", "f.write", "range", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.near_entity_raw_analyse", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "save_near_ents_sim_result", "(", "save_output_file", ",", "sim_result", ",", "ent1_near_dis", ",", "ent2_near_dis", ")", ":", "\n", "# **************************************************************************************", "\n", "    ", "ent1_info", ",", "ent2_info", "=", "near_entity_raw_analyse", "(", "ent1_near_dis", ",", "ent2_near_dis", ")", "\n", "# ent1_info, ent2_info = inter_near_entity_analyse(ent1_near_dis, ent2_near_dis)", "\n", "print", "(", "\"write near\"", ")", "\n", "save_output_file", "=", "save_output_file", "+", "\"nearents\"", "\n", "with", "open", "(", "save_output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"sim_result:\\t\"", ")", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "sim_result", "[", "i", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\t\"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "sim_result", "[", "9", "]", ")", ")", "\n", "# **************\u63a5\u4e0b\u6765\u662f\u6781\u5176\u67af\u71e5\u7684\u6587\u4ef6\u5199\u5165\u5de5\u4f5c***********************", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent1_aver:\\t{}\\t ent1_median:\\t{}\"", ".", "format", "(", "ent1_info", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "ent1_info", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent1_aver_near_aver:\\t{}\\t ent1_median_near_aver:\\t{}\\t\"", "\n", "\"ent1_var_near_aver:\\t{}\"", ".", "format", "(", "ent1_info", "[", "1", "]", "[", "0", "]", ",", "\n", "ent1_info", "[", "1", "]", "[", "1", "]", ",", "\n", "ent1_info", "[", "1", "]", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent1_aver_same_aver:\\t{}\\t ent1_median_same_aver:\\t{}\\t\"", "\n", "\"ent1_var_same_aver:\\t{}\"", ".", "format", "(", "ent1_info", "[", "2", "]", "[", "0", "]", ",", "\n", "ent1_info", "[", "2", "]", "[", "1", "]", ",", "\n", "ent1_info", "[", "2", "]", "[", "2", "]", ")", ")", "\n", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent2_aver:\\t{}\\t ent2_median:\\t{}\"", ".", "format", "(", "ent2_info", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "ent2_info", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent2_aver_near_aver:\\t{}\\t ent2_median_near_aver:\\t{}\\t\"", "\n", "\"ent2_var_near_aver:\\t{}\"", ".", "format", "(", "ent2_info", "[", "1", "]", "[", "0", "]", ",", "\n", "ent2_info", "[", "1", "]", "[", "1", "]", ",", "\n", "ent2_info", "[", "1", "]", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"ent2_aver_same_aver:\\t{}\\t ent2_median_same_aver:\\t{}\\t\"", "\n", "\"ent2_var_same_aver:\\t{}\"", ".", "format", "(", "ent2_info", "[", "2", "]", "[", "0", "]", ",", "\n", "ent2_info", "[", "2", "]", "[", "1", "]", ",", "\n", "ent2_info", "[", "2", "]", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.save_all_ents_sim_result": [[606, 616], ["open", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write"], "function", ["None"], ["", "", "def", "save_all_ents_sim_result", "(", "save_output_file", ",", "inte_info", ",", "most_sim_info", ",", "diff_info", ",", "var_info", ")", ":", "\n", "    ", "save_output_file", "=", "save_output_file", "+", "\"allents\"", "\n", "with", "open", "(", "save_output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"all_aver_sum:\\t{}\\t median_sum:\\t{}\"", ".", "format", "(", "inte_info", "[", "2", "]", ",", "inte_info", "[", "3", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"aver_most_sim:\\t{}\\t median_most_sim:\\t{}\"", ".", "format", "(", "most_sim_info", "[", "1", "]", ",", "most_sim_info", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"aver_diff_sum_mat:\\t{}\\tmedian_diff_sum:\\t{}\"", ".", "format", "(", "diff_info", "[", "1", "]", ",", "diff_info", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\"aver_diff_var_mat:\\t{}\\tmedian_diff_var:\\t{}\"", ".", "format", "(", "var_info", "[", "1", "]", ",", "var_info", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.save_conicity": [[618, 626], ["open", "f.write", "f.write", "f.write"], "function", ["None"], ["", "", "def", "save_conicity", "(", "save_output_file", ",", "conicity", ",", "vs", ")", ":", "\n", "    ", "save_output_file", "=", "save_output_file", "+", "\"conicity\"", "\n", "with", "open", "(", "save_output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"ent1_conicity:\\t{}\\tent2_conicity:\\t{}\\tall_ents_conicity:\\t{}\\t\"", ".", "format", "(", "\n", "conicity", "[", "0", "]", ",", "conicity", "[", "1", "]", ",", "conicity", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\n", "\"ent1_vs:\\t{}\\tent2_vs:\\t{}\\tall_ents_vs:\\t{}\\t\"", ".", "format", "(", "vs", "[", "0", "]", ",", "vs", "[", "1", "]", ",", "vs", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.save_hub_result": [[628, 633], ["open", "f.write"], "function", ["None"], ["", "", "def", "save_hub_result", "(", "save_output_folder", ",", "hub_dis", ")", ":", "\n", "    ", "save_output_file", "=", "save_output_folder", "+", "\"hub\"", "\n", "with", "open", "(", "save_output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"gt5:\\t{}\\t1to5:\\t{}\\teq0:\\t{}\\t\"", ".", "format", "(", "\n", "hub_dis", "[", "0", "]", ",", "hub_dis", "[", "1", "]", ",", "hub_dis", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.get_dir": [[635, 666], ["os.path.abspath", "os.path.normpath", "os.path.normpath.split", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.path.normpath", "os.listdir", "os.listdir", "os.listdir", "V1.append", "os.listdir", "V2.append", "temp_list.append", "temp_list.append"], "function", ["None"], ["", "", "def", "get_dir", "(", "method", ",", "param", "=", "[", "\"en\"", ",", "\"de\"", ",", "\"15K\"", ",", "\"DBP\"", "]", ",", "root_name", "=", "\"VLDB2020\"", ",", "give_one", "=", "False", ")", ":", "\n", "    ", "abs_route", "=", "os", ".", "path", ".", "abspath", "(", "\".\"", ")", "\n", "abs_route", "=", "os", ".", "path", ".", "normpath", "(", "abs_route", ")", "\n", "route_list", "=", "abs_route", ".", "split", "(", "root_name", ")", "\n", "root_route", "=", "route_list", "[", "0", "]", "+", "root_name", "\n", "\n", "# ********************************************************", "\n", "dataset_route", "=", "os", ".", "path", ".", "normpath", "(", "root_route", "+", "\"/datasets/\"", ")", "\n", "output_route", "=", "os", ".", "path", ".", "normpath", "(", "root_route", "+", "\"/output/results/\"", "+", "method", ")", "\n", "dataset_lanua_V1", "=", "\"DBP_\"", "+", "param", "[", "0", "]", "+", "\"_\"", "+", "param", "[", "3", "]", "+", "\"_\"", "+", "param", "[", "1", "]", "+", "\"_\"", "+", "param", "[", "2", "]", "+", "\"_V1/\"", "\n", "dataset_lanua_V2", "=", "\"DBP_\"", "+", "param", "[", "0", "]", "+", "\"_\"", "+", "param", "[", "3", "]", "+", "\"_\"", "+", "param", "[", "1", "]", "+", "\"_\"", "+", "param", "[", "2", "]", "+", "\"_V2/\"", "\n", "output_route_v1", "=", "os", ".", "path", ".", "normpath", "(", "output_route", "+", "\"/\"", "+", "dataset_lanua_V1", "+", "\"721_5fold/\"", ")", "\n", "output_route_v2", "=", "os", ".", "path", ".", "normpath", "(", "output_route", "+", "\"/\"", "+", "dataset_lanua_V2", "+", "\"721_5fold/\"", ")", "\n", "# *********************************************************************************", "\n", "V1", "=", "[", "]", "\n", "V2", "=", "[", "]", "\n", "for", "path", "in", "os", ".", "listdir", "(", "output_route_v1", ")", ":", "\n", "        ", "temp_path", "=", "output_route_v1", "+", "\"/\"", "+", "path", "+", "\"/\"", "\n", "temp_list", "=", "[", "]", "\n", "for", "result_file", "in", "os", ".", "listdir", "(", "temp_path", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "temp_path", "+", "result_file", "+", "\"/\"", ")", "\n", "", "V1", ".", "append", "(", "temp_list", ")", "\n", "", "for", "path", "in", "os", ".", "listdir", "(", "output_route_v2", ")", ":", "\n", "        ", "temp_path", "=", "output_route_v2", "+", "\"/\"", "+", "path", "+", "\"/\"", "\n", "temp_list", "=", "[", "]", "\n", "for", "result_file", "in", "os", ".", "listdir", "(", "temp_path", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "temp_path", "+", "result_file", "+", "\"/\"", ")", "\n", "", "V2", ".", "append", "(", "temp_list", ")", "\n", "", "if", "give_one", ":", "\n", "        ", "return", "[", "V1", "[", "-", "1", "]", "]", ",", "[", "V2", "[", "-", "1", "]", "]", "\n", "", "return", "V1", ",", "V2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.get_ent_embedding": [[668, 740], ["testfile.split", "range", "numpy.load", "numpy.array", "numpy.array", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "ent1_name.index", "ref_ent1.append", "ent2_name.index", "ref_ent2.append", "numpy.load", "ent1.dot.dot", "numpy.sqrt", "np.tile.reshape", "range", "numpy.tile", "len", "line.split", "ent1_name.append", "ent1_id.append", "ent1.dot.append", "line.split", "ent2_name.append", "ent2_id.append", "np.array.append", "line.split", "ref_ent1_id.append", "ref_ent2_id.append", "line.split", "kg1_name.append", "kg2_name.append", "numpy.sum", "temp[].strip", "int", "temp[].strip", "int", "int", "int", "temp[].strip", "temp[].strip", "numpy.square", "int", "int"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "get_ent_embedding", "(", "dir", ",", "testfile", ",", "test_method", ")", ":", "\n", "    ", "temp_testfile", "=", "testfile", ".", "split", "(", "\"/\"", ")", "\n", "temp_save", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "temp_testfile", ")", "-", "2", ")", ":", "\n", "        ", "temp_save", "+=", "\"/\"", "+", "temp_testfile", "[", "i", "]", "\n", "", "testfile", "=", "temp_save", "+", "\"/test_links\"", "\n", "\n", "ent1_name", "=", "[", "]", "\n", "ent1_id", "=", "[", "]", "\n", "ent1", "=", "[", "]", "\n", "ref_ent1_id", "=", "[", "]", "\n", "\n", "ent2_name", "=", "[", "]", "\n", "ent2_id", "=", "[", "]", "\n", "ent2", "=", "[", "]", "\n", "ref_ent2_id", "=", "[", "]", "\n", "matrix", "=", "np", ".", "load", "(", "dir", "+", "\"ent_embeds.npy\"", ")", "\n", "\n", "with", "open", "(", "dir", "+", "\"kg1_ent_ids\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "temp", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "ent1_name", ".", "append", "(", "temp", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "ent1_id", ".", "append", "(", "int", "(", "temp", "[", "1", "]", ")", ")", "\n", "ent1", ".", "append", "(", "matrix", "[", "int", "(", "temp", "[", "1", "]", ")", "]", ")", "\n", "", "", "with", "open", "(", "dir", "+", "\"kg2_ent_ids\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "temp", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "ent2_name", ".", "append", "(", "temp", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "ent2_id", ".", "append", "(", "int", "(", "temp", "[", "1", "]", ")", ")", "\n", "ent2", ".", "append", "(", "matrix", "[", "int", "(", "temp", "[", "1", "]", ")", "]", ")", "\n", "", "", "with", "open", "(", "dir", "+", "\"alignment_results_12\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "temp", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "ref_ent1_id", ".", "append", "(", "int", "(", "temp", "[", "0", "]", ")", ")", "\n", "ref_ent2_id", ".", "append", "(", "int", "(", "temp", "[", "1", "]", ")", ")", "\n", "", "", "kg1_name", "=", "[", "]", "\n", "kg2_name", "=", "[", "]", "\n", "ref_ent1", "=", "[", "]", "\n", "ref_ent2", "=", "[", "]", "\n", "with", "open", "(", "testfile", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "temp", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "kg1_name", ".", "append", "(", "temp", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "kg2_name", ".", "append", "(", "temp", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "", "", "for", "id", "in", "ref_ent1_id", ":", "\n", "        ", "name", "=", "kg1_name", "[", "id", "]", "\n", "pos", "=", "ent1_name", ".", "index", "(", "name", ")", "\n", "mat_id", "=", "ent1_id", "[", "pos", "]", "\n", "ref_ent1", ".", "append", "(", "mat_id", ")", "\n", "", "for", "id", "in", "ref_ent2_id", ":", "\n", "        ", "name", "=", "kg2_name", "[", "id", "]", "\n", "pos", "=", "ent2_name", ".", "index", "(", "name", ")", "\n", "mat_id", "=", "ent2_id", "[", "pos", "]", "\n", "ref_ent2", ".", "append", "(", "mat_id", ")", "\n", "\n", "", "ent1", "=", "np", ".", "array", "(", "ent1", ")", "\n", "ent2", "=", "np", ".", "array", "(", "ent2", ")", "\n", "if", "test_method", "==", "\"MTransE\"", ":", "\n", "        ", "mapping_matric", "=", "np", ".", "load", "(", "dir", "+", "\"mapping_mat.npy\"", ")", "\n", "ent1", "=", "ent1", ".", "dot", "(", "mapping_matric", ")", "\n", "ent1_mod", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "ent1", ")", ",", "axis", "=", "1", ")", ")", "\n", "ent1_mod", "=", "ent1_mod", ".", "reshape", "(", "ent1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ent1_mod", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "ent1_mod", "[", "i", "]", "==", "0", ":", "\n", "                ", "ent1_mod", "[", "i", "]", "=", "1", "\n", "", "", "ent1_mod", "=", "np", ".", "tile", "(", "ent1_mod", ",", "(", "1", ",", "ent1", ".", "shape", "[", "1", "]", ")", ")", "\n", "ent1", "=", "ent1", "/", "ent1_mod", "\n", "i", "=", "0", "\n", "for", "item", "in", "ent1_id", ":", "\n", "            ", "matrix", "[", "item", "]", "=", "ent1", "[", "i", "]", "\n", "i", "+=", "1", "\n", "", "", "return", "ent1", ",", "ent2", ",", "ent1_name", ",", "ent2_name", ",", "ref_ent1", ",", "ref_ent2", ",", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.raw_analyse.get_mapping_matric": [[742, 745], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load"], ["", "def", "get_mapping_matric", "(", "dir", ")", ":", "\n", "    ", "matrix", "=", "np", ".", "load", "(", "dir", "+", "\"ent_embeds.npy\"", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples.__init__": [[5, 36], ["set", "list", "len", "set", "set", "set", "print", "print", "print", "list", "list", "triples.Triples.prop_list.sort", "triples.Triples.ent_list.sort", "triples.Triples._generate_related_ents", "triples.Triples._generate_triple_dict", "triples.Triples._generate_ht", "triples.Triples.__generate_weight", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_related_ents", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_triple_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_ht", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG.__generate_weight"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "ori_triples", "=", "None", ")", ":", "\n", "        ", "self", ".", "triples", "=", "set", "(", "triples", ")", "\n", "self", ".", "triple_list", "=", "list", "(", "self", ".", "triples", ")", "\n", "self", ".", "triples_num", "=", "len", "(", "self", ".", "triples", ")", "\n", "\n", "self", ".", "heads", "=", "set", "(", "[", "triple", "[", "0", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "props", "=", "set", "(", "[", "triple", "[", "1", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "tails", "=", "set", "(", "[", "triple", "[", "2", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "ents", "=", "self", ".", "heads", "|", "self", ".", "tails", "\n", "\n", "print", "(", "\"triples num\"", ",", "self", ".", "triples_num", ")", "\n", "\n", "print", "(", "\"head ent num\"", ",", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"total ent num\"", ",", "len", "(", "self", ".", "ents", ")", ")", "\n", "\n", "self", ".", "prop_list", "=", "list", "(", "self", ".", "props", ")", "\n", "self", ".", "ent_list", "=", "list", "(", "self", ".", "ents", ")", "\n", "self", ".", "prop_list", ".", "sort", "(", ")", "\n", "self", ".", "ent_list", ".", "sort", "(", ")", "\n", "\n", "# self.remove_useless_tripels()", "\n", "\n", "if", "ori_triples", "is", "None", ":", "\n", "            ", "self", ".", "ori_triples", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "ori_triples", "=", "set", "(", "ori_triples", ")", "\n", "\n", "", "self", ".", "_generate_related_ents", "(", ")", "\n", "self", ".", "_generate_triple_dict", "(", ")", "\n", "self", ".", "_generate_ht", "(", ")", "\n", "self", ".", "__generate_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples._generate_related_ents": [[37, 48], ["dict", "dict", "triples.Triples.out_related_ents_dict.get", "triples.Triples.add", "triples.Triples.in_related_ents_dict.get", "triples.Triples.add", "set", "set"], "methods", ["None"], ["", "def", "_generate_related_ents", "(", "self", ")", ":", "\n", "        ", "self", ".", "out_related_ents_dict", "=", "dict", "(", ")", "\n", "self", ".", "in_related_ents_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "out_related_ents", "=", "self", ".", "out_related_ents_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "out_related_ents", ".", "add", "(", "t", ")", "\n", "self", ".", "out_related_ents_dict", "[", "h", "]", "=", "out_related_ents", "\n", "\n", "in_related_ents", "=", "self", ".", "in_related_ents_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "in_related_ents", ".", "add", "(", "h", ")", "\n", "self", ".", "in_related_ents_dict", "[", "t", "]", "=", "in_related_ents", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples._generate_triple_dict": [[49, 58], ["dict", "dict", "triples.Triples.rt_dict.get", "triples.Triples.add", "triples.Triples.hr_dict.get", "triples.Triples.add", "set", "set"], "methods", ["None"], ["", "", "def", "_generate_triple_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "rt_dict", ",", "self", ".", "hr_dict", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "rt_set", "=", "self", ".", "rt_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "rt_set", ".", "add", "(", "(", "r", ",", "t", ")", ")", "\n", "self", ".", "rt_dict", "[", "h", "]", "=", "rt_set", "\n", "hr_set", "=", "self", ".", "hr_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "hr_set", ".", "add", "(", "(", "h", ",", "r", ")", ")", "\n", "self", ".", "hr_dict", "[", "t", "]", "=", "hr_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples._generate_ht": [[59, 63], ["set", "triples.Triples.ht.add"], "methods", ["None"], ["", "", "def", "_generate_ht", "(", "self", ")", ":", "\n", "        ", "self", ".", "ht", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "self", ".", "ht", ".", "add", "(", "(", "h", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples.__generate_weight": [[64, 84], ["dict", "list", "list", "math.ceil", "print", "print", "triples.Triples.weighted_triples.append", "len", "len", "triples.Triples.additional_triples.append", "dict.get", "dict.get"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "__generate_weight", "(", "self", ")", ":", "\n", "        ", "triple_num", "=", "dict", "(", ")", "\n", "n", "=", "0", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "if", "t", "in", "self", ".", "heads", ":", "\n", "                ", "n", "=", "n", "+", "1", "\n", "triple_num", "[", "h", "]", "=", "triple_num", ".", "get", "(", "h", ",", "0", ")", "+", "1", "\n", "triple_num", "[", "t", "]", "=", "triple_num", ".", "get", "(", "t", ",", "0", ")", "+", "1", "\n", "", "", "self", ".", "weighted_triples", "=", "list", "(", ")", "\n", "self", ".", "additional_triples", "=", "list", "(", ")", "\n", "ave", "=", "math", ".", "ceil", "(", "n", "/", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"ave outs:\"", ",", "ave", ")", "\n", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "w", "=", "1", "\n", "if", "t", "in", "self", ".", "heads", "and", "triple_num", "[", "h", "]", "<=", "ave", ":", "\n", "                ", "w", "=", "2.0", "\n", "self", ".", "additional_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "self", ".", "weighted_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ",", "w", ")", ")", "\n", "", "print", "(", "\"additional triples:\"", ",", "len", "(", "self", ".", "additional_triples", ")", ")", "\n", "# self.train_triples", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.triples.Triples.remove_useless_tripels": [[86, 110], ["set", "set", "list", "len", "set.add"], "methods", ["None"], ["", "def", "remove_useless_tripels", "(", "self", ")", ":", "\n", "        ", "filtered_triples", "=", "set", "(", ")", "\n", "# dic = dict()", "\n", "# out_ents = self.tails - self.heads", "\n", "# for h, r, t in self.triples:", "\n", "#     if t in out_ents:", "\n", "#         dic[t] = dic.get(t, 0) + 1", "\n", "# truncated_ents = set()", "\n", "# for t, n in dic.items():", "\n", "#     if n < 3:", "\n", "#         truncated_ents.add(t)", "\n", "# print(\"truncated ents\", len(truncated_ents))", "\n", "# for h, r, t in self.triples:", "\n", "#     if t not in truncated_ents:", "\n", "#         filtered_triples.add((h, r, t))", "\n", "# print(\"filtered triples\", len(filtered_triples))", "\n", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "if", "t", "in", "self", ".", "heads", ":", "\n", "                ", "filtered_triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "\n", "", "", "self", ".", "triples", "=", "set", "(", "filtered_triples", ")", "\n", "self", ".", "triple_list", "=", "list", "(", "self", ".", "triples", ")", "\n", "self", ".", "triples_num", "=", "len", "(", "self", ".", "triples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.re_evaluate.mcd_matrix": [[9, 21], ["numpy.sum", "numpy.sum", "numpy.zeros", "itertools.product", "range", "range", "numpy.square"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "mcd_matrix", "(", "sim_matrix", ")", ":", "\n", "    ", "n", ",", "m", "=", "sim_matrix", ".", "shape", "[", "0", "]", ",", "sim_matrix", ".", "shape", "[", "1", "]", "\n", "row_sum", "=", "np", ".", "sum", "(", "sim_matrix", ",", "axis", "=", "1", ")", "\n", "col_sum", "=", "np", ".", "sum", "(", "sim_matrix", ",", "axis", "=", "0", ")", "\n", "# print(type(row_sum), row_sum.shape)", "\n", "# print(type(col_sum), col_sum.shape)", "\n", "mcd", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "i", ",", "j", "in", "product", "(", "range", "(", "n", ")", ",", "range", "(", "m", ")", ")", ":", "\n", "        ", "mu", "=", "(", "row_sum", "[", "i", ",", "]", "+", "col_sum", "[", "j", ",", "]", "-", "sim_matrix", "[", "i", ",", "j", "]", ")", "/", "(", "n", "+", "m", "-", "1", ")", "\n", "delte", "=", "np", ".", "square", "(", "sim_matrix", "[", "i", ",", "j", "]", "-", "mu", ")", "\n", "mcd", "[", "i", ",", "j", "]", "=", "delte", "\n", "", "return", "mcd", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.re_evaluate.read_dir": [[22, 32], ["os.listdir", "os.path.join", "os.path.isdir", "re_evaluate.read_dir", "c_parent_dir.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.re_evaluate.read_dir"], ["", "def", "read_dir", "(", "dir_file", ",", "parent_dir", ")", ":", "\n", "    ", "c_parent_dir", "=", "parent_dir", "\n", "for", "every_file", "in", "os", ".", "listdir", "(", "dir_file", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "dir_file", ",", "every_file", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "read_dir", "(", "path", ",", "c_parent_dir", ")", "\n", "", "else", ":", "\n", "            ", "if", "dir_file", "not", "in", "c_parent_dir", ":", "\n", "                ", "c_parent_dir", ".", "append", "(", "dir_file", ")", "\n", "", "", "", "return", "c_parent_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.test_normal": [[18, 40], ["test_funcs.eval_alignment_by_div_embed", "test_funcs.early_stop", "gc.collect", "test_funcs.eval_alignment_by_div_embed", "test_funcs.pair2file", "numpy.save", "numpy.save", "test_funcs.eval_alignment_by_div_embed", "test_funcs.pair2file", "numpy.save", "numpy.save", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save"], ["def", "test_normal", "(", "ent_embeds", ",", "rel_embeds", ",", "embed1", ",", "embed2", ",", "ppre_hits1", ",", "pre_hits1", ",", "out_path", ",", "pairs", ",", "\n", "is_final_save", "=", "False", ",", "is_euclidean", "=", "False", ")", ":", "\n", "    ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "\n", "selected_pairs", "=", "pairs", ",", "is_euclidean", "=", "is_euclidean", ")", "\n", "ppre_hits1", ",", "pre_hits1", ",", "is_early", "=", "early_stop", "(", "ppre_hits1", ",", "pre_hits1", ",", "hits12", ")", "\n", "if", "is_early", ":", "\n", "        ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "selected_pairs", "=", "pairs", ",", "accurate", "=", "True", ")", "\n", "if", "P", ".", "is_save", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "pair2file", "(", "out_path", "+", "\"hits11\"", ",", "prec_set1", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"ent_embeds\"", ",", "ent_embeds", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"rel_embeds\"", ",", "rel_embeds", ")", "\n", "", "", "elif", "is_final_save", ":", "\n", "        ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "selected_pairs", "=", "pairs", ",", "accurate", "=", "True", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "pair2file", "(", "out_path", "+", "\"hits11\"", ",", "prec_set1", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"ent_embeds\"", ",", "ent_embeds", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"rel_embeds\"", ",", "rel_embeds", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "return", "ppre_hits1", ",", "pre_hits1", ",", "is_early", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.test_csls": [[42, 65], ["test_funcs.eval_alignment_by_div_embed", "test_funcs.early_stop", "gc.collect", "test_funcs.eval_alignment_by_sim_mat", "test_funcs.eval_alignment_by_sim_mat", "test_funcs.pair2file", "numpy.save", "numpy.save", "test_funcs.eval_alignment_by_sim_mat", "os.path.exists", "os.makedirs", "test_funcs.pair2file", "numpy.save", "numpy.save", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save"], ["", "def", "test_csls", "(", "ent_embeds", ",", "rel_embeds", ",", "embed1", ",", "embed2", ",", "ppre_hits1", ",", "pre_hits1", ",", "out_path", ",", "is_final_save", "=", "False", ")", ":", "\n", "    ", "if", "embed1", ".", "shape", "[", "0", "]", "<", "20000", ":", "\n", "        ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_sim_mat", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "csls", "=", "P", ".", "csls", ")", "\n", "", "prec_set1", ",", "hits12", "=", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ")", "\n", "ppre_hits1", ",", "pre_hits1", ",", "is_early", "=", "early_stop", "(", "ppre_hits1", ",", "pre_hits1", ",", "hits12", ")", "\n", "if", "is_early", ":", "\n", "        ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_sim_mat", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "csls", "=", "P", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "P", ".", "is_save", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "pair2file", "(", "out_path", "+", "\"hits11\"", ",", "prec_set1", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"ent_embeds\"", ",", "ent_embeds", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"rel_embeds\"", ",", "rel_embeds", ")", "\n", "", "", "elif", "is_final_save", ":", "\n", "        ", "prec_set1", ",", "hits12", "=", "eval_alignment_by_sim_mat", "(", "embed1", ",", "embed2", ",", "P", ".", "ent_top_k", ",", "csls", "=", "P", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "P", ".", "is_save", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "pair2file", "(", "out_path", "+", "\"hits11\"", ",", "prec_set1", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"ent_embeds\"", ",", "ent_embeds", ")", "\n", "np", ".", "save", "(", "out_path", "+", "\"rel_embeds\"", ",", "rel_embeds", ")", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "return", "ppre_hits1", ",", "pre_hits1", ",", "is_early", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.cal_rank_by_sim_mat": [[67, 87], ["set", "range", "len", "set.add", "range", "numpy.argpartition", "len", "numpy.where", "numpy.array"], "function", ["None"], ["", "def", "cal_rank_by_sim_mat", "(", "task", ",", "sim", ",", "top_k", ",", "accurate", ")", ":", "\n", "    ", "mean", "=", "0", "\n", "mrr", "=", "0", "\n", "num", "=", "[", "0", "for", "k", "in", "top_k", "]", "\n", "prec_set", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "task", ")", ")", ":", "\n", "        ", "ref", "=", "task", "[", "i", "]", "\n", "if", "accurate", ":", "\n", "            ", "rank", "=", "(", "-", "sim", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "", "else", ":", "\n", "            ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim", "[", "i", ",", ":", "]", ",", "np", ".", "array", "(", "top_k", ")", "-", "1", ")", "\n", "", "prec_set", ".", "add", "(", "(", "ref", ",", "rank", "[", "0", "]", ")", ")", "\n", "assert", "ref", "in", "rank", "\n", "rank_index", "=", "np", ".", "where", "(", "rank", "==", "ref", ")", "[", "0", "]", "[", "0", "]", "\n", "mean", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "            ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                ", "num", "[", "j", "]", "+=", "1", "\n", "", "", "", "return", "mean", ",", "mrr", ",", "num", ",", "prec_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_mcd_sim_mat": [[88, 142], ["time.time", "test_funcs.sim_handler", "numpy.sum", "numpy.sum", "numpy.zeros", "itertools.product", "print", "print", "set", "openea.expriment.utils.div_list", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "gc.collect", "range", "range", "numpy.square", "numpy.array", "list.append", "res.get", "numpy.array", "len", "len", "round", "print", "print", "print", "range", "len", "multiprocessing.Pool.apply_async", "numpy.array", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_handler", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "eval_alignment_by_mcd_sim_mat", "(", "embed1", ",", "embed2", ",", "top_k", ",", "csls", "=", "0", ",", "accurate", "=", "False", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "sim_mat", "=", "sim_handler", "(", "embed1", ",", "embed2", ",", "csls", ")", "\n", "n", ",", "m", "=", "sim_mat", ".", "shape", "[", "0", "]", ",", "sim_mat", ".", "shape", "[", "1", "]", "\n", "row_sum", "=", "np", ".", "sum", "(", "sim_mat", ",", "axis", "=", "1", ")", "\n", "col_sum", "=", "np", ".", "sum", "(", "sim_mat", ",", "axis", "=", "0", ")", "\n", "# print(type(row_sum), row_sum.shape)", "\n", "# print(type(col_sum), col_sum.shape)", "\n", "mcd", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "i", ",", "j", "in", "product", "(", "range", "(", "n", ")", ",", "range", "(", "m", ")", ")", ":", "\n", "        ", "mu", "=", "(", "row_sum", "[", "i", ",", "]", "+", "col_sum", "[", "j", ",", "]", "-", "sim_mat", "[", "i", ",", "j", "]", ")", "/", "(", "n", "+", "m", "-", "1", ")", "\n", "delte", "=", "np", ".", "square", "(", "sim_mat", "[", "i", ",", "j", "]", "-", "mu", ")", "\n", "mcd", "[", "i", ",", "j", "]", "=", "delte", "\n", "", "print", "(", "\"********************mcd*********************\"", ")", "\n", "print", "(", "mcd", ")", "\n", "\n", "ref_num", "=", "mcd", ".", "shape", "[", "0", "]", "\n", "t_num", "=", "[", "0", "for", "k", "in", "top_k", "]", "\n", "t_mean", "=", "0", "\n", "t_mrr", "=", "0", "\n", "t_prec_set", "=", "set", "(", ")", "\n", "tasks", "=", "div_list", "(", "np", ".", "array", "(", "range", "(", "ref_num", ")", ")", ",", "P", ".", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "tasks", ")", ")", "\n", "reses", "=", "list", "(", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "reses", ".", "append", "(", "pool", ".", "apply_async", "(", "cal_rank_by_sim_mat", ",", "(", "task", ",", "mcd", "[", "task", ",", ":", "]", ",", "top_k", ",", "accurate", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "res", "in", "reses", ":", "\n", "        ", "mean", ",", "mrr", ",", "num", ",", "prec_set", "=", "res", ".", "get", "(", ")", "\n", "t_mean", "+=", "mean", "\n", "t_mrr", "+=", "mrr", "\n", "t_num", "+=", "np", ".", "array", "(", "num", ")", "\n", "t_prec_set", "|=", "prec_set", "\n", "", "assert", "len", "(", "t_prec_set", ")", "==", "ref_num", "\n", "acc", "=", "np", ".", "array", "(", "t_num", ")", "/", "ref_num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "acc", ")", ")", ":", "\n", "        ", "acc", "[", "i", "]", "=", "round", "(", "acc", "[", "i", "]", ",", "2", ")", "\n", "", "t_mean", "/=", "ref_num", "\n", "t_mrr", "/=", "ref_num", "\n", "if", "csls", ">", "0", ":", "\n", "        ", "print", "(", "\"csls = {}\"", ".", "format", "(", "csls", ")", ")", "\n", "", "if", "accurate", ":", "\n", "        ", "print", "(", "\"accurate results: hits@{} = {}, mr = {:.3f}, mrr = {:.3f}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "t_mean", ",", "\n", "t_mrr", ",", "\n", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"hits@{} = {}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "hits1", "=", "acc", "[", "0", "]", "\n", "del", "sim_mat", "\n", "del", "mcd", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "top_k", ",", "acc", ",", "t_mean", ",", "t_mrr", ",", "time", ".", "time", "(", ")", "-", "t", "\n", "# return t_prec_set, hits1", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_sim_mat": [[144, 189], ["time.time", "test_funcs.sim_handler", "print", "set", "openea.expriment.utils.div_list", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "gc.collect", "numpy.array", "list.append", "res.get", "numpy.array", "len", "len", "round", "print", "print", "print", "range", "len", "multiprocessing.Pool.apply_async", "numpy.array", "time.time", "time.time", "time.time", "openea.expriment.param.P.ent_top_k", "openea.expriment.param.P.ent_top_k", "openea.expriment.param.P.ent_top_k"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_handler", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "eval_alignment_by_sim_mat", "(", "embed1", ",", "embed2", ",", "top_k", ",", "csls", "=", "0", ",", "accurate", "=", "False", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "sim_mat", "=", "sim_handler", "(", "embed1", ",", "embed2", ",", "csls", ")", "\n", "# *****************************************", "\n", "print", "(", "\"*******************sim_mat*****************\"", ")", "\n", "# ***********************************************", "\n", "\n", "ref_num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "t_num", "=", "[", "0", "for", "k", "in", "top_k", "]", "\n", "t_mean", "=", "0", "\n", "t_mrr", "=", "0", "\n", "t_prec_set", "=", "set", "(", ")", "\n", "tasks", "=", "div_list", "(", "np", ".", "array", "(", "range", "(", "ref_num", ")", ")", ",", "P", ".", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "tasks", ")", ")", "\n", "reses", "=", "list", "(", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "reses", ".", "append", "(", "pool", ".", "apply_async", "(", "cal_rank_by_sim_mat", ",", "(", "task", ",", "sim_mat", "[", "task", ",", ":", "]", ",", "top_k", ",", "accurate", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "res", "in", "reses", ":", "\n", "        ", "mean", ",", "mrr", ",", "num", ",", "prec_set", "=", "res", ".", "get", "(", ")", "\n", "t_mean", "+=", "mean", "\n", "t_mrr", "+=", "mrr", "\n", "t_num", "+=", "np", ".", "array", "(", "num", ")", "\n", "t_prec_set", "|=", "prec_set", "\n", "", "assert", "len", "(", "t_prec_set", ")", "==", "ref_num", "\n", "acc", "=", "np", ".", "array", "(", "t_num", ")", "/", "ref_num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "acc", ")", ")", ":", "\n", "        ", "acc", "[", "i", "]", "=", "round", "(", "acc", "[", "i", "]", ",", "2", ")", "\n", "", "t_mean", "/=", "ref_num", "\n", "t_mrr", "/=", "ref_num", "\n", "if", "csls", ">", "0", ":", "\n", "        ", "print", "(", "\"csls = {}\"", ".", "format", "(", "csls", ")", ")", "\n", "", "if", "accurate", ":", "\n", "        ", "print", "(", "\"accurate results: hits@{} = {}, mr = {:.3f}, mrr = {:.3f}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "t_mean", ",", "\n", "t_mrr", ",", "\n", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"hits@{} = {}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "hits1", "=", "acc", "[", "0", "]", "\n", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "# return t_prec_set, hits1", "\n", "return", "top_k", ",", "acc", ",", "t_mean", ",", "t_mrr", ",", "time", ".", "time", "(", ")", "-", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.cal_rank_by_div_embed": [[191, 243], ["numpy.array", "numpy.array", "set", "range", "test_funcs.sim_hander_ou", "numpy.matmul", "len", "range", "set.add", "numpy.argpartition", "len", "dic.get", "range", "range", "numpy.where", "dic.get", "len", "len", "numpy.array", "numpy.where"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_hander_ou"], ["", "def", "cal_rank_by_div_embed", "(", "frags", ",", "dic", ",", "sub_embed", ",", "embed", ",", "top_k", ",", "accurate", ",", "is_euclidean", ")", ":", "\n", "    ", "mean", "=", "0", "\n", "mrr", "=", "0", "\n", "num", "=", "np", ".", "array", "(", "[", "0", "for", "k", "in", "top_k", "]", ")", "\n", "mean1", "=", "0", "\n", "mrr1", "=", "0", "\n", "num1", "=", "np", ".", "array", "(", "[", "0", "for", "k", "in", "top_k", "]", ")", "\n", "if", "is_euclidean", ":", "\n", "        ", "sim_mat", "=", "sim_hander_ou", "(", "sub_embed", ",", "embed", ")", "\n", "", "else", ":", "\n", "        ", "sim_mat", "=", "np", ".", "matmul", "(", "sub_embed", ",", "embed", ".", "T", ")", "\n", "", "prec_set", "=", "set", "(", ")", "\n", "aligned_e", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "frags", ")", ")", ":", "\n", "        ", "ref", "=", "frags", "[", "i", "]", "\n", "if", "accurate", ":", "\n", "            ", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "", "else", ":", "\n", "            ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "np", ".", "array", "(", "top_k", ")", "-", "1", ")", "\n", "", "aligned_e", "=", "rank", "[", "0", "]", "\n", "assert", "ref", "in", "rank", "\n", "rank_index", "=", "np", ".", "where", "(", "rank", "==", "ref", ")", "[", "0", "]", "[", "0", "]", "\n", "mean", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "            ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                ", "num", "[", "j", "]", "+=", "1", "\n", "# del rank", "\n", "\n", "", "", "if", "dic", "is", "not", "None", "and", "dic", ".", "get", "(", "ref", ",", "-", "1", ")", ">", "-", "1", ":", "\n", "            ", "e2", "=", "dic", ".", "get", "(", "ref", ")", "\n", "sim_mat", "[", "i", ",", "e2", "]", "+=", "1.0", "\n", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "aligned_e", "=", "rank", "[", "0", "]", "\n", "assert", "ref", "in", "rank", "\n", "rank_index", "=", "np", ".", "where", "(", "rank", "==", "ref", ")", "[", "0", "]", "[", "0", "]", "\n", "mean1", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr1", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "                ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                    ", "num1", "[", "j", "]", "+=", "1", "\n", "# del rank", "\n", "", "", "", "else", ":", "\n", "            ", "mean1", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr1", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "                ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                    ", "num1", "[", "j", "]", "+=", "1", "\n", "\n", "", "", "", "prec_set", ".", "add", "(", "(", "ref", ",", "aligned_e", ")", ")", "\n", "", "del", "sim_mat", "\n", "return", "mean", ",", "mrr", ",", "num", ",", "mean1", ",", "mrr1", ",", "num1", ",", "prec_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.eval_alignment_by_div_embed": [[245, 312], ["time.time", "test_funcs.eval_alignment_by_div_embed.pair2dic", "openea.expriment.param.P.ent_top_k", "openea.expriment.param.P.ent_top_k", "openea.expriment.param.P.ent_top_k", "openea.expriment.param.P.ent_top_k"], "function", ["None"], ["", "def", "eval_alignment_by_div_embed", "(", "embed1", ",", "embed2", ",", "top_k", ",", "selected_pairs", "=", "None", ",", "accurate", "=", "False", ",", "is_euclidean", "=", "False", ")", ":", "\n", "    ", "def", "pair2dic", "(", "pairs", ")", ":", "\n", "        ", "if", "pairs", "is", "None", "or", "len", "(", "pairs", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "dic", "=", "dict", "(", ")", "\n", "for", "i", ",", "j", "in", "pairs", ":", "\n", "            ", "if", "i", "not", "in", "dic", ".", "keys", "(", ")", ":", "\n", "                ", "dic", "[", "i", "]", "=", "j", "\n", "", "", "assert", "len", "(", "dic", ")", "==", "len", "(", "pairs", ")", "\n", "return", "dic", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "dic", "=", "pair2dic", "(", "selected_pairs", ")", "\n", "ref_num", "=", "embed1", ".", "shape", "[", "0", "]", "\n", "t_num", "=", "np", ".", "array", "(", "[", "0", "for", "k", "in", "top_k", "]", ")", "\n", "t_mean", "=", "0", "\n", "t_mrr", "=", "0", "\n", "t_num1", "=", "np", ".", "array", "(", "[", "0", "for", "k", "in", "top_k", "]", ")", "\n", "t_mean1", "=", "0", "\n", "t_mrr1", "=", "0", "\n", "t_prec_set", "=", "set", "(", ")", "\n", "frags", "=", "div_list", "(", "np", ".", "array", "(", "range", "(", "ref_num", ")", ")", ",", "P", ".", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "frags", ")", ")", "\n", "reses", "=", "list", "(", ")", "\n", "for", "frag", "in", "frags", ":", "\n", "        ", "reses", ".", "append", "(", "pool", ".", "apply_async", "(", "cal_rank_by_div_embed", ",", "(", "frag", ",", "dic", ",", "embed1", "[", "frag", ",", ":", "]", ",", "\n", "embed2", ",", "top_k", ",", "accurate", ",", "is_euclidean", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "res", "in", "reses", ":", "\n", "        ", "mean", ",", "mrr", ",", "num", ",", "mean1", ",", "mrr1", ",", "num1", ",", "prec_set", "=", "res", ".", "get", "(", ")", "\n", "t_mean", "+=", "mean", "\n", "t_mrr", "+=", "mrr", "\n", "t_num", "+=", "num", "\n", "t_mean1", "+=", "mean1", "\n", "t_mrr1", "+=", "mrr1", "\n", "t_num1", "+=", "num1", "\n", "t_prec_set", "|=", "prec_set", "\n", "\n", "", "assert", "len", "(", "t_prec_set", ")", "==", "ref_num", "\n", "\n", "acc", "=", "t_num", "/", "ref_num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "acc", ")", ")", ":", "\n", "        ", "acc", "[", "i", "]", "=", "round", "(", "acc", "[", "i", "]", ",", "2", ")", "\n", "", "t_mean", "/=", "ref_num", "\n", "t_mrr", "/=", "ref_num", "\n", "if", "accurate", ":", "\n", "        ", "print", "(", "\"accurate results: hits@{} = {}, mr = {:.3f}, mrr = {:.3f}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "\n", "t_mean", ",", "t_mrr", ",", "\n", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"hits@{} = {}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "hits1", "=", "acc", "[", "0", "]", "\n", "if", "selected_pairs", "is", "not", "None", "and", "len", "(", "selected_pairs", ")", ">", "0", ":", "\n", "        ", "acc1", "=", "t_num1", "/", "ref_num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "acc1", ")", ")", ":", "\n", "            ", "acc1", "[", "i", "]", "=", "round", "(", "acc1", "[", "i", "]", ",", "2", ")", "\n", "", "t_mean1", "/=", "ref_num", "\n", "t_mrr1", "/=", "ref_num", "\n", "hits1", "=", "acc1", "[", "0", "]", "\n", "if", "accurate", ":", "\n", "            ", "print", "(", "\"accurate results: hits@{} = {}, mr = {:.3f}, mrr = {:.3f}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "\n", "t_mean", ",", "t_mrr", ",", "\n", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"hits@{} = {}, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "acc", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", "gc", ".", "collect", "(", ")", "\n", "return", "t_prec_set", ",", "hits1", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.early_stop": [[314, 327], ["print", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "early_stop", "(", "ppre_hits1", ",", "pre_hits1", ",", "hits1", ",", "small", "=", "True", ")", ":", "\n", "    ", "if", "small", ":", "\n", "        ", "if", "hits1", "<=", "pre_hits1", "<=", "ppre_hits1", ":", "\n", "            ", "print", "(", "\"\\n == should early stop == \\n\"", ")", "\n", "return", "pre_hits1", ",", "hits1", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "pre_hits1", ",", "hits1", ",", "False", "\n", "", "", "else", ":", "\n", "        ", "if", "hits1", "<=", "pre_hits1", ":", "\n", "            ", "print", "(", "\"\\n == should early stop == \\n\"", ")", "\n", "return", "pre_hits1", ",", "hits1", ",", "True", "\n", "", "else", ":", "\n", "            ", "return", "pre_hits1", ",", "hits1", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.pair2file": [[329, 334], ["open", "f.close", "f.write", "str", "str"], "function", ["None"], ["", "", "", "def", "pair2file", "(", "file", ",", "pairs", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "pairs", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.cal_csls_sim": [[336, 341], ["numpy.mean", "numpy.partition"], "function", ["None"], ["", "", "def", "cal_csls_sim", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "sorted_mat", "=", "-", "np", ".", "partition", "(", "-", "sim_mat", ",", "k", "+", "1", ",", "axis", "=", "1", ")", "# -np.sort(-sim_mat1)", "\n", "nearest_k", "=", "sorted_mat", "[", ":", ",", "0", ":", "k", "]", "\n", "sim_values", "=", "np", ".", "mean", "(", "nearest_k", ",", "axis", "=", "1", ")", "\n", "return", "sim_values", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.CSLS_sim": [[343, 364], ["openea.expriment.utils.div_list", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "numpy.array", "list.append", "res.get", "range", "len", "multiprocessing.Pool.apply_async", "numpy.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list"], ["", "def", "CSLS_sim", "(", "sim_mat1", ",", "k", ")", ":", "\n", "# sorted_mat = -np.partition(-sim_mat1, k, axis=1) # -np.sort(-sim_mat1)", "\n", "# nearest_k = sorted_mat[:, 0:k]", "\n", "# sim_values = np.mean(nearest_k, axis=1)", "\n", "\n", "    ", "tasks", "=", "div_list", "(", "np", ".", "array", "(", "range", "(", "sim_mat1", ".", "shape", "[", "0", "]", ")", ")", ",", "P", ".", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "tasks", ")", ")", "\n", "reses", "=", "list", "(", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "reses", ".", "append", "(", "pool", ".", "apply_async", "(", "cal_csls_sim", ",", "(", "sim_mat1", "[", "task", ",", ":", "]", ",", "k", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "sim_values", "=", "None", "\n", "for", "res", "in", "reses", ":", "\n", "        ", "val", "=", "res", ".", "get", "(", ")", "\n", "if", "sim_values", "is", "None", ":", "\n", "            ", "sim_values", "=", "val", "\n", "", "else", ":", "\n", "            ", "sim_values", "=", "np", ".", "append", "(", "sim_values", ",", "val", ")", "\n", "", "", "assert", "sim_values", ".", "shape", "[", "0", "]", "==", "sim_mat1", ".", "shape", "[", "0", "]", "\n", "return", "sim_values", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_handler": [[366, 382], ["numpy.matmul", "test_funcs.CSLS_sim", "test_funcs.CSLS_sim", "gc.collect", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.CSLS_sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.CSLS_sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "sim_handler", "(", "embed1", ",", "embed2", ",", "k", ")", ":", "\n", "    ", "sim_mat", "=", "np", ".", "matmul", "(", "embed1", ",", "embed2", ".", "T", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "print", "(", "\"k = 0\"", ")", "\n", "return", "sim_mat", "\n", "", "csls1", "=", "CSLS_sim", "(", "sim_mat", ",", "k", ")", "\n", "csls2", "=", "CSLS_sim", "(", "sim_mat", ".", "T", ",", "k", ")", "\n", "# for i in range(sim_mat.shape[0]):", "\n", "#     for j in range(sim_mat.shape[1]):", "\n", "#         sim_mat[i][j] = 2 * sim_mat[i][j] - csls1[i] - csls2[j]", "\n", "# return sim_mat", "\n", "csls_sim_mat", "=", "2", "*", "sim_mat", ".", "T", "-", "csls1", "\n", "csls_sim_mat", "=", "csls_sim_mat", ".", "T", "-", "csls2", "\n", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "csls_sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.test_funcs.sim_hander_ou": [[384, 386], ["scipy.spatial.distance.cdist"], "function", ["None"], ["", "def", "sim_hander_ou", "(", "embed1", ",", "embed2", ")", ":", "\n", "    ", "return", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "'euclidean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_input": [[7, 23], ["utils.read_triples", "utils.read_triples", "openea.expriment.triples.Triples", "openea.expriment.triples.Triples", "len", "len", "print", "print", "print", "utils.read_references", "print", "utils.read_references", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_references", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_references"], ["def", "read_input", "(", "folder", ")", ":", "\n", "    ", "triples_set1", "=", "read_triples", "(", "folder", "+", "'triples_1'", ")", "\n", "triples_set2", "=", "read_triples", "(", "folder", "+", "'triples_2'", ")", "\n", "triples1", "=", "Triples", "(", "triples_set1", ")", "\n", "triples2", "=", "Triples", "(", "triples_set2", ")", "\n", "total_ent_num", "=", "len", "(", "triples1", ".", "ents", "|", "triples2", ".", "ents", ")", "\n", "total_rel_num", "=", "len", "(", "triples1", ".", "props", "|", "triples2", ".", "props", ")", "\n", "total_triples_num", "=", "len", "(", "triples1", ".", "triple_list", ")", "+", "len", "(", "triples2", ".", "triple_list", ")", "\n", "print", "(", "'total ents:'", ",", "total_ent_num", ")", "\n", "print", "(", "'total rels:'", ",", "len", "(", "triples1", ".", "props", ")", ",", "len", "(", "triples2", ".", "props", ")", ",", "total_rel_num", ")", "\n", "print", "(", "'total triples: %d + %d = %d'", "%", "(", "len", "(", "triples1", ".", "triples", ")", ",", "len", "(", "triples2", ".", "triples", ")", ",", "total_triples_num", ")", ")", "\n", "ref_ent1", ",", "ref_ent2", "=", "read_references", "(", "folder", "+", "'ref_ent_ids'", ")", "\n", "assert", "len", "(", "ref_ent1", ")", "==", "len", "(", "ref_ent2", ")", "\n", "print", "(", "\"To aligned entities:\"", ",", "len", "(", "ref_ent1", ")", ")", "\n", "sup_ent1", ",", "sup_ent2", "=", "read_references", "(", "folder", "+", "'sup_ent_ids'", ")", "\n", "return", "triples1", ",", "triples2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_triples_num", ",", "total_ent_num", ",", "total_rel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_dbp15k_input": [[25, 41], ["utils.read_triples", "utils.read_triples", "openea.expriment.triples.Triples", "openea.expriment.triples.Triples", "len", "len", "print", "print", "print", "utils.read_references", "print", "utils.read_references", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_references", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_references"], ["", "def", "read_dbp15k_input", "(", "folder", ")", ":", "\n", "    ", "triples_set1", "=", "read_triples", "(", "folder", "+", "'triples_1'", ")", "\n", "triples_set2", "=", "read_triples", "(", "folder", "+", "'triples_2'", ")", "\n", "triples1", "=", "Triples", "(", "triples_set1", ")", "\n", "triples2", "=", "Triples", "(", "triples_set2", ")", "\n", "total_ent_num", "=", "len", "(", "triples1", ".", "ents", "|", "triples2", ".", "ents", ")", "\n", "total_rel_num", "=", "len", "(", "triples1", ".", "props", "|", "triples2", ".", "props", ")", "\n", "total_triples_num", "=", "len", "(", "triples1", ".", "triple_list", ")", "+", "len", "(", "triples2", ".", "triple_list", ")", "\n", "print", "(", "'total ents:'", ",", "total_ent_num", ")", "\n", "print", "(", "'total rels:'", ",", "len", "(", "triples1", ".", "props", ")", ",", "len", "(", "triples2", ".", "props", ")", ",", "total_rel_num", ")", "\n", "print", "(", "'total triples: %d + %d = %d'", "%", "(", "len", "(", "triples1", ".", "triples", ")", ",", "len", "(", "triples2", ".", "triples", ")", ",", "total_triples_num", ")", ")", "\n", "ref_ent1", ",", "ref_ent2", "=", "read_references", "(", "folder", "+", "'ref_pairs'", ")", "\n", "assert", "len", "(", "ref_ent1", ")", "==", "len", "(", "ref_ent2", ")", "\n", "print", "(", "\"To aligned entities:\"", ",", "len", "(", "ref_ent1", ")", ")", "\n", "sup_ent1", ",", "sup_ent2", "=", "read_references", "(", "folder", "+", "'sup_pairs'", ")", "\n", "return", "triples1", ",", "triples2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_triples_num", ",", "total_ent_num", ",", "total_rel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.generate_sup_triples": [[43, 59], ["range", "print", "set", "rt_dict1.get", "hr_dict1.get", "len", "len", "set", "set", "len", "utils.generate_sup_triples.generate_newly_triples"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples"], ["", "def", "generate_sup_triples", "(", "triples1", ",", "triples2", ",", "ents1", ",", "ents2", ")", ":", "\n", "    ", "def", "generate_newly_triples", "(", "ent1", ",", "ent2", ",", "rt_dict1", ",", "hr_dict1", ")", ":", "\n", "        ", "newly_triples", "=", "set", "(", ")", "\n", "for", "r", ",", "t", "in", "rt_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "            ", "newly_triples", ".", "add", "(", "(", "ent2", ",", "r", ",", "t", ")", ")", "\n", "", "for", "h", ",", "r", "in", "hr_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "            ", "newly_triples", ".", "add", "(", "(", "h", ",", "r", ",", "ent2", ")", ")", "\n", "", "return", "newly_triples", "\n", "\n", "", "assert", "len", "(", "ents1", ")", "==", "len", "(", "ents2", ")", "\n", "newly_triples1", ",", "newly_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ents1", ")", ")", ":", "\n", "        ", "newly_triples1", "|=", "(", "generate_newly_triples", "(", "ents1", "[", "i", "]", ",", "ents2", "[", "i", "]", ",", "triples1", ".", "rt_dict", ",", "triples1", ".", "hr_dict", ")", ")", "\n", "newly_triples2", "|=", "(", "generate_newly_triples", "(", "ents2", "[", "i", "]", ",", "ents1", "[", "i", "]", ",", "triples2", ".", "rt_dict", ",", "triples2", ".", "hr_dict", ")", ")", "\n", "", "print", "(", "\"supervised triples: {}, {}\"", ".", "format", "(", "len", "(", "newly_triples1", ")", ",", "len", "(", "newly_triples2", ")", ")", ")", "\n", "return", "newly_triples1", ",", "newly_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.add_sup_triples": [[61, 67], ["utils.generate_sup_triples", "openea.expriment.triples.Triples", "openea.expriment.triples.Triples", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.generate_sup_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "add_sup_triples", "(", "triples1", ",", "triples2", ",", "sup_ent1", ",", "sup_ent2", ")", ":", "\n", "    ", "newly_triples1", ",", "newly_triples2", "=", "generate_sup_triples", "(", "triples1", ",", "triples2", ",", "sup_ent1", ",", "sup_ent2", ")", "\n", "triples1", "=", "Triples", "(", "triples1", ".", "triples", "|", "newly_triples1", ",", "ori_triples", "=", "triples1", ".", "triples", ")", "\n", "triples2", "=", "Triples", "(", "triples2", ".", "triples", "|", "newly_triples2", ",", "ori_triples", "=", "triples2", ".", "triples", ")", "\n", "print", "(", "\"now triples: {}, {}\"", ".", "format", "(", "len", "(", "triples1", ".", "triples", ")", ",", "len", "(", "triples2", ".", "triples", ")", ")", ")", "\n", "return", "triples1", ",", "triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.pair2file": [[69, 74], ["open", "f.close", "f.write", "str", "str"], "function", ["None"], ["", "def", "pair2file", "(", "file", ",", "pairs", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "pairs", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_triples": [[76, 89], ["set", "open", "f.close", "line.strip().split", "print", "int", "int", "int", "set.add", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "read_triples", "(", "file", ")", ":", "\n", "    ", "triples", "=", "set", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "print", "(", "params", ")", "\n", "assert", "len", "(", "params", ")", "==", "3", "\n", "h", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "r", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "t", "=", "int", "(", "params", "[", "2", "]", ")", "\n", "triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.read_references": [[91, 104], ["list", "list", "open", "f.close", "line.strip().split", "int", "int", "ref1.append", "ref2.append", "len", "len", "len", "line.strip"], "function", ["None"], ["", "def", "read_references", "(", "file", ")", ":", "\n", "    ", "ref1", ",", "ref2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "e1", "=", "int", "(", "params", "[", "0", "]", ")", "\n", "e2", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "ref1", ".", "append", "(", "e1", ")", "\n", "ref2", ".", "append", "(", "e2", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "assert", "len", "(", "ref1", ")", "==", "len", "(", "ref2", ")", "\n", "", "return", "ref1", ",", "ref2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.div_list": [[106, 122], ["len", "range", "ls_return.append", "ls_return.append"], "function", ["None"], ["", "def", "div_list", "(", "ls", ",", "n", ")", ":", "\n", "    ", "ls_len", "=", "len", "(", "ls", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "if", "n", ">", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "elif", "n", "==", "ls_len", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "ls", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "ls_len", "//", "n", "\n", "k", "=", "ls_len", "%", "n", "\n", "ls_return", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "ls_return", ".", "append", "(", "ls", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "ls_return", ".", "append", "(", "ls", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "ls_return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.triples2ht_set": [[124, 130], ["set", "print", "set.add", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "triples2ht_set", "(", "triples", ")", ":", "\n", "    ", "ht_set", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "ht_set", ".", "add", "(", "(", "h", ",", "t", ")", ")", "\n", "", "print", "(", "\"the number of ht: {}\"", ".", "format", "(", "len", "(", "ht_set", ")", ")", ")", "\n", "return", "ht_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.merge_dic": [[132, 134], ["None"], "function", ["None"], ["", "def", "merge_dic", "(", "dic1", ",", "dic2", ")", ":", "\n", "    ", "return", "{", "**", "dic1", ",", "**", "dic2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.generate_adjacency_mat": [[136, 146], ["numpy.mat", "range", "print", "print", "numpy.zeros", "utils.triples2ht_set", "utils.triples2ht_set", "numpy.count_nonzero", "len", "sup_ents.index"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.triples2ht_set", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.triples2ht_set", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index"], ["", "def", "generate_adjacency_mat", "(", "triples1", ",", "triples2", ",", "ent_num", ",", "sup_ents", ")", ":", "\n", "    ", "adj_mat", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "(", "ent_num", ",", "len", "(", "sup_ents", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "ht_set", "=", "triples2ht_set", "(", "triples1", ")", "|", "triples2ht_set", "(", "triples2", ")", "\n", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "for", "j", "in", "sup_ents", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "in", "ht_set", ":", "\n", "                ", "adj_mat", "[", "i", ",", "sup_ents", ".", "index", "(", "j", ")", "]", "=", "1", "\n", "", "", "", "print", "(", "\"shape of adj_mat: {}\"", ".", "format", "(", "adj_mat", ".", "shape", ")", ")", "\n", "print", "(", "\"the number of 1 in adjacency matrix: {}\"", ".", "format", "(", "np", ".", "count_nonzero", "(", "adj_mat", ")", ")", ")", "\n", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.generate_adj_input_mat": [[148, 153], ["numpy.random.randn", "numpy.matmul", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "generate_adj_input_mat", "(", "adj_mat", ",", "d", ")", ":", "\n", "    ", "W", "=", "np", ".", "random", ".", "randn", "(", "adj_mat", ".", "shape", "[", "1", "]", ",", "d", ")", "\n", "M", "=", "np", ".", "matmul", "(", "adj_mat", ",", "W", ")", "\n", "print", "(", "\"shape of input adj_mat: {}\"", ".", "format", "(", "M", ".", "shape", ")", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.utils.generate_ent_attrs_sum": [[155, 169], ["time.time", "range", "print", "print", "list", "numpy.sum", "len", "numpy.row_stack", "ent_attrs1.get", "ent_attrs2.get", "time.time", "set", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "generate_ent_attrs_sum", "(", "ent_num", ",", "ent_attrs1", ",", "ent_attrs2", ",", "attr_embeddings", ")", ":", "\n", "    ", "t1", "=", "time", ".", "time", "(", ")", "\n", "ent_attrs_embeddings", "=", "None", "\n", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "attrs_index", "=", "list", "(", "ent_attrs1", ".", "get", "(", "i", ",", "set", "(", ")", ")", "|", "ent_attrs2", ".", "get", "(", "i", ",", "set", "(", ")", ")", ")", "\n", "assert", "len", "(", "attrs_index", ")", ">", "0", "\n", "attrs_embeds", "=", "np", ".", "sum", "(", "attr_embeddings", "[", "attrs_index", ",", "]", ",", "axis", "=", "0", ")", "\n", "if", "ent_attrs_embeddings", "is", "None", ":", "\n", "            ", "ent_attrs_embeddings", "=", "attrs_embeds", "\n", "", "else", ":", "\n", "            ", "ent_attrs_embeddings", "=", "np", ".", "row_stack", "(", "(", "ent_attrs_embeddings", ",", "attrs_embeds", ")", ")", "\n", "", "", "print", "(", "\"shape of ent_attr_embeds: {}\"", ".", "format", "(", "ent_attrs_embeddings", ".", "shape", ")", ")", "\n", "print", "(", "\"generating ent features costs: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "return", "ent_attrs_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.__init__": [[165, 186], ["tensorflow.keras.activations.get", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "kg", ",", "embedding", ")", ":", "\n", "        ", "self", ".", "dim", "=", "args", ".", "dim", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "act_func", "=", "tf", ".", "keras", ".", "activations", ".", "get", "(", "\"relu\"", ")", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "ILL", "=", "np", ".", "array", "(", "kg", ".", "train_links", ")", "\n", "self", ".", "k", "=", "args", ".", "neg_triple_num", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "self", ".", "triple_list", "=", "kg", ".", "kg1", ".", "relation_triples_list", "+", "kg", ".", "kg2", ".", "relation_triples_list", "\n", "self", ".", "rel_num", "=", "kg", ".", "relations_num", "\n", "self", ".", "ent_num", "=", "kg", ".", "entities_num", "\n", "self", ".", "head", "=", "None", "\n", "self", ".", "tail", "=", "None", "\n", "self", ".", "head_r", "=", "None", "\n", "self", ".", "tail_r", "=", "None", "\n", "self", ".", "r_mat", "=", "None", "\n", "self", ".", "M", "=", "None", "\n", "self", ".", "M_arr", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "pretrianed_embedding", "=", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.add_diag_layer": [[187, 195], ["tensorflow.nn.dropout", "init", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply", "rdgcn.Layer.act_func"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init"], ["", "def", "add_diag_layer", "(", "self", ",", "inlayer", ",", "init", "=", "ones", ")", ":", "\n", "        ", "inlayer", "=", "tf", ".", "nn", ".", "dropout", "(", "inlayer", ",", "1", "-", "self", ".", "dropout", ")", "\n", "w0", "=", "init", "(", "[", "1", ",", "self", ".", "dim", "]", ")", "\n", "tosum", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "M", ",", "tf", ".", "multiply", "(", "inlayer", ",", "w0", ")", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "tosum", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "act_func", "(", "tosum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.add_full_layer": [[196, 204], ["tensorflow.nn.dropout", "init", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "rdgcn.Layer.act_func"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init"], ["", "", "def", "add_full_layer", "(", "self", ",", "inlayer", ",", "init", "=", "glorot", ")", ":", "\n", "        ", "inlayer", "=", "tf", ".", "nn", ".", "dropout", "(", "inlayer", ",", "1", "-", "self", ".", "dropout", ")", "\n", "w0", "=", "init", "(", "[", "self", ".", "dim", ",", "self", ".", "dim", "]", ")", "\n", "tosum", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "M", ",", "tf", ".", "matmul", "(", "inlayer", ",", "w0", ")", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "tosum", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "act_func", "(", "tosum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.add_sparse_att_layer": [[205, 219], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.layers.conv1d", "tensorflow.nn.embedding_lookup", "rdgcn.Layer.act_func", "tensorflow.expand_dims", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["", "", "def", "add_sparse_att_layer", "(", "self", ",", "inlayer", ",", "dual_layer", ")", ":", "\n", "        ", "dual_transform", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "\n", "tf", ".", "expand_dims", "(", "dual_layer", ",", "0", ")", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "dual_transform", ",", "self", ".", "r_mat", ".", "values", ")", ",", "[", "-", "1", "]", ")", "\n", "lrelu", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "self", ".", "r_mat", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", ",", "\n", "dense_shape", "=", "self", ".", "r_mat", ".", "dense_shape", ")", "\n", "coefs", "=", "tf", ".", "sparse_softmax", "(", "lrelu", ")", "\n", "vals", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.add_dual_att_layer": [[220, 235], ["tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.multiply", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.transpose", "rdgcn.Layer.act_func", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["", "", "def", "add_dual_att_layer", "(", "self", ",", "inlayer", ",", "inlayer2", ",", "adj", ")", ":", "\n", "        ", "in_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "tf", ".", "expand_dims", "(", "inlayer2", ",", "0", ")", ",", "self", ".", "dim", ",", "1", ")", "\n", "f_1", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ")", "\n", "adj_tensor", "=", "tf", ".", "constant", "(", "adj", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "bias_mat", "=", "-", "1e9", "*", "(", "1.0", "-", "(", "adj", ">", "0", ")", ")", "\n", "logits", "=", "tf", ".", "multiply", "(", "adj_tensor", ",", "logits", ")", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "\n", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.add_self_att_layer": [[236, 252], ["tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.multiply", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.transpose", "rdgcn.Layer.act_func", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["", "", "def", "add_self_att_layer", "(", "self", ",", "inlayer", ",", "adj", ")", ":", "\n", "        ", "in_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "tf", ".", "expand_dims", "(", "\n", "inlayer", ",", "0", ")", ",", "self", ".", "dim", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "f_1", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ")", "\n", "adj_tensor", "=", "tf", ".", "constant", "(", "adj", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "logits", "=", "tf", ".", "multiply", "(", "adj_tensor", ",", "logits", ")", "\n", "bias_mat", "=", "-", "1e9", "*", "(", "1.0", "-", "(", "adj", ">", "0", ")", ")", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "\n", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.highway": [[253, 260], ["openea.approaches.gcn_align.glorot", "openea.approaches.gcn_align.zeros", "tensorflow.nn.sigmoid", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "", "def", "highway", "(", "self", ",", "layer1", ",", "layer2", ")", ":", "\n", "        ", "kernel_gate", "=", "glorot", "(", "[", "self", ".", "dim", ",", "self", ".", "dim", "]", ")", "\n", "bias_gate", "=", "zeros", "(", "[", "self", ".", "dim", "]", ")", "\n", "transform_gate", "=", "tf", ".", "matmul", "(", "layer1", ",", "kernel_gate", ")", "+", "bias_gate", "\n", "transform_gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "transform_gate", ")", "\n", "carry_gate", "=", "1.0", "-", "transform_gate", "\n", "return", "transform_gate", "*", "layer2", "+", "carry_gate", "*", "layer1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.compute_r": [[261, 270], ["tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.constant", "tensorflow.constant", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "compute_r", "(", "self", ",", "inlayer", ")", ":", "\n", "        ", "head_l", "=", "tf", ".", "transpose", "(", "tf", ".", "constant", "(", "self", ".", "head_r", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "tail_l", "=", "tf", ".", "transpose", "(", "tf", ".", "constant", "(", "self", ".", "tail_r", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "L", "=", "tf", ".", "matmul", "(", "head_l", ",", "inlayer", ")", "/", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "head_l", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "\n", "R", "=", "tf", ".", "matmul", "(", "tail_l", ",", "inlayer", ")", "/", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "tail_l", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "\n", "r_embeddings", "=", "tf", ".", "concat", "(", "[", "L", ",", "R", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "r_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.get_dual_input": [[271, 281], ["rdgcn.Layer.compute_r", "len", "numpy.zeros", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.compute_r", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "get_dual_input", "(", "self", ",", "inlayer", ")", ":", "\n", "        ", "dual_X", "=", "self", ".", "compute_r", "(", "inlayer", ")", "\n", "count_r", "=", "len", "(", "self", ".", "head", ")", "\n", "dual_A", "=", "np", ".", "zeros", "(", "(", "count_r", ",", "count_r", ")", ")", "\n", "for", "i", "in", "range", "(", "count_r", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "count_r", ")", ":", "\n", "                ", "a_h", "=", "len", "(", "self", ".", "head", "[", "i", "]", "&", "self", ".", "head", "[", "j", "]", ")", "/", "len", "(", "self", ".", "head", "[", "i", "]", "|", "self", ".", "head", "[", "j", "]", ")", "\n", "a_t", "=", "len", "(", "self", ".", "tail", "[", "i", "]", "&", "self", ".", "tail", "[", "j", "]", ")", "/", "len", "(", "self", ".", "tail", "[", "i", "]", "|", "self", ".", "tail", "[", "j", "]", ")", "\n", "dual_A", "[", "i", "]", "[", "j", "]", "=", "a_h", "+", "a_t", "\n", "", "", "return", "dual_X", ",", "dual_A", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.get_input_layer": [[283, 286], ["openea.approaches.gcn_align.glorot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot"], ["", "def", "get_input_layer", "(", "self", ")", ":", "\n", "        ", "ent_embeddings", "=", "glorot", "(", "(", "self", ".", "ent_num", ",", "self", ".", "dim", ")", ",", "\"input\"", ")", "\n", "return", "ent_embeddings", "\n", "# input_embeddings = tf.random_uniform([self.ent_num, self.dim], minval=-1, maxval=1)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.get_pretrained_input": [[290, 294], ["tensorflow.cast", "tensorflow.Variable"], "methods", ["None"], ["", "def", "get_pretrained_input", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "embedding", "=", "tf", ".", "cast", "(", "embedding", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "ent_embeddings", "=", "tf", ".", "Variable", "(", "embedding", ")", "\n", "return", "ent_embeddings", "\n", "# return tf.nn.l2_normalize(ent_embeddings, 1)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.get_loss": [[296, 319], ["len", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "outlayer", ")", ":", "\n", "        ", "left", "=", "self", ".", "ILL", "[", ":", ",", "0", "]", "\n", "right", "=", "self", ".", "ILL", "[", ":", ",", "1", "]", "\n", "t", "=", "len", "(", "self", ".", "ILL", ")", "\n", "left_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "left", ")", "\n", "right_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "right", ")", "\n", "A", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "left_x", "-", "right_x", ")", ",", "1", ")", "\n", "neg_left", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg_left\"", ")", "\n", "neg_right", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg_right\"", ")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "self", ".", "k", "]", ")", "\n", "D", "=", "A", "+", "self", ".", "gamma", "\n", "L1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "neg_left", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg2_left\"", ")", "\n", "neg_right", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg2_right\"", ")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "self", ".", "k", "]", ")", "\n", "L2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "L1", ")", "+", "tf", ".", "reduce_sum", "(", "L2", ")", ")", "/", "(", "2.0", "*", "self", ".", "k", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.Layer.build": [[320, 341], ["tensorflow.reset_default_graph", "rdgcn.Layer.get_input_layer", "rdgcn.get_sparse_tensor", "rdgcn.rfunc", "rdgcn.Layer.get_dual_input", "rdgcn.Layer.add_self_att_layer", "rdgcn.Layer.add_sparse_att_layer", "rdgcn.Layer.get_dual_input", "rdgcn.Layer.add_dual_att_layer", "rdgcn.Layer.add_sparse_att_layer", "rdgcn.Layer.add_diag_layer", "rdgcn.Layer.highway", "rdgcn.Layer.add_diag_layer", "rdgcn.Layer.highway", "rdgcn.Layer.get_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_input_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_sparse_tensor", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.rfunc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_dual_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_self_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_sparse_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_dual_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_dual_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_sparse_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_diag_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.highway", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_diag_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.highway", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_loss"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "primal_X_0", "=", "self", ".", "get_input_layer", "(", ")", "\n", "self", ".", "M", ",", "self", ".", "M_arr", "=", "get_sparse_tensor", "(", "self", ".", "triple_list", ",", "self", ".", "ent_num", ")", "\n", "self", ".", "head", ",", "self", ".", "tail", ",", "self", ".", "head_r", ",", "self", ".", "tail_r", ",", "self", ".", "r_mat", "=", "rfunc", "(", "self", ".", "triple_list", ",", "self", ".", "ent_num", ",", "self", ".", "rel_num", ")", "\n", "dual_X_1", ",", "dual_A_1", "=", "self", ".", "get_dual_input", "(", "primal_X_0", ")", "\n", "dual_H_1", "=", "self", ".", "add_self_att_layer", "(", "dual_X_1", ",", "dual_A_1", ")", "\n", "primal_H_1", "=", "self", ".", "add_sparse_att_layer", "(", "primal_X_0", ",", "dual_H_1", ")", "\n", "primal_X_1", "=", "primal_X_0", "+", "self", ".", "alpha", "*", "primal_H_1", "\n", "\n", "dual_X_2", ",", "dual_A_2", "=", "self", ".", "get_dual_input", "(", "primal_X_1", ")", "\n", "dual_H_2", "=", "self", ".", "add_dual_att_layer", "(", "dual_H_1", ",", "dual_X_2", ",", "dual_A_2", ")", "\n", "primal_H_2", "=", "self", ".", "add_sparse_att_layer", "(", "primal_X_1", ",", "dual_H_2", ")", "\n", "primal_X_2", "=", "primal_X_0", "+", "self", ".", "beta", "*", "primal_H_2", "\n", "\n", "gcn_layer_1", "=", "self", ".", "add_diag_layer", "(", "primal_X_2", ")", "\n", "gcn_layer_1", "=", "self", ".", "highway", "(", "primal_X_2", ",", "gcn_layer_1", ")", "\n", "gcn_layer_2", "=", "self", ".", "add_diag_layer", "(", "gcn_layer_1", ",", ")", "\n", "output_layer", "=", "self", ".", "highway", "(", "gcn_layer_1", ",", "gcn_layer_2", ")", "\n", "loss", "=", "self", ".", "get_loss", "(", "output_layer", ")", "\n", "return", "output_layer", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.__init__": [[344, 357], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "model_init", "=", "None", "\n", "self", ".", "sess", "=", "None", "\n", "self", ".", "feeddict", "=", "None", "\n", "self", ".", "gcn_model", "=", "None", "\n", "self", ".", "local_name_vectors", "=", "None", "\n", "self", ".", "entity_local_name_dict", "=", "None", "\n", "self", ".", "entities", "=", "None", "\n", "self", ".", "word_embed", "=", "'../../datasets/wiki-news-300d-1M.vec'", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.init": [[358, 366], ["rdgcn.Layer", "rdgcn.RDGCN.gcn_model.build", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.global_variables_initializer", "tensorflow.Session", "rdgcn.RDGCN.sess.run", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "self", ".", "gcn_model", "=", "Layer", "(", "self", ".", "args", ",", "self", ".", "kgs", ",", "self", ".", "local_name_vectors", ")", "\n", "self", ".", "output", ",", "self", ".", "loss", "=", "self", ".", "gcn_model", ".", "build", "(", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "model_init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "model_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN._get_local_name_by_name_triple": [[367, 409], ["rdgcn.RDGCN.kgs.kg1.entities_id_dict.items", "rdgcn.RDGCN.kgs.kg2.entities_id_dict.items", "set", "rdgcn.RDGCN.kgs.kg1.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg2.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg1.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg2.attributes_id_dict.items", "list", "local_name_dict.items", "list.append", "set.add", "set.add", "print", "print", "[].replace", "id_ent_dict[].split"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "_get_local_name_by_name_triple", "(", "self", ",", "name_attribute_list", "=", "None", ")", ":", "\n", "        ", "if", "name_attribute_list", "is", "None", ":", "\n", "            ", "if", "'D_Y'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'skos:prefLabel'", ",", "'http://dbpedia.org/ontology/birthName'", "}", "\n", "", "elif", "'D_W'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'http://www.wikidata.org/entity/P373'", ",", "'http://www.wikidata.org/entity/P1476'", "}", "\n", "", "else", ":", "\n", "                ", "name_attribute_list", "=", "{", "}", "\n", "\n", "", "", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_set", "|", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_set", "\n", "id_ent_dict", "=", "{", "}", "\n", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "\n", "", "name_ids", "=", "set", "(", ")", "\n", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "local_name_dict", "=", "{", "}", "\n", "ents", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "if", "a", "in", "name_ids", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "v", "\n", "", "", "for", "e", "in", "ents", ":", "\n", "            ", "if", "e", "not", "in", "local_name_dict", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "id_ent_dict", "[", "e", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "", "name_triples", "=", "list", "(", ")", "\n", "for", "e", ",", "n", "in", "local_name_dict", ".", "items", "(", ")", ":", "\n", "            ", "name_triples", ".", "append", "(", "(", "e", ",", "-", "1", ",", "n", ")", ")", "\n", "", "return", "name_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN._get_desc_input": [[410, 460], ["time.time", "rdgcn.RDGCN._get_local_name_by_name_triple", "pandas.DataFrame", "pandas.DataFrame.iloc[].str.replace().str.split", "pandas.Series.str.split", "pd.Series.str.split.apply", "pd.Series.str.split.apply", "print", "numpy.stack().astype", "numpy.append", "print", "pandas.Series", "len", "pandas.concat", "print", "pandas.DataFrame.iloc[].apply", "pandas.DataFrame", "numpy.stack", "print", "numpy.sum", "open", "f.readlines", "pandas.Series", "numpy.zeros", "list", "numpy.repeat", "range", "numpy.stack", "set", "pandas.Series", "pandas.Series", "list", "pandas.DataFrame.iloc[].str.replace", "pandas.Series.isin", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_local_name_by_name_triple", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "_get_desc_input", "(", "self", ")", ":", "\n", "# desc graph settings", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "self", "\n", "\n", "name_triples", "=", "self", ".", "_get_local_name_by_name_triple", "(", ")", "\n", "names", "=", "pd", ".", "DataFrame", "(", "name_triples", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "str", ".", "replace", "(", "r'[{}]+'", ".", "format", "(", "string", ".", "punctuation", ")", ",", "''", ")", ".", "str", ".", "split", "(", "' '", ")", "\n", "# load word embedding", "\n", "with", "open", "(", "self", ".", "word_embed", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "w", "=", "f", ".", "readlines", "(", ")", "\n", "w", "=", "pd", ".", "Series", "(", "w", "[", "1", ":", "]", ")", "\n", "\n", "", "we", "=", "w", ".", "str", ".", "split", "(", "' '", ")", "\n", "word", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "w_em", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ")", "\n", "print", "(", "'concat word embeddings'", ")", "\n", "word_em", "=", "np", ".", "stack", "(", "w_em", ".", "values", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "word_em", "=", "np", ".", "append", "(", "word_em", ",", "np", ".", "zeros", "(", "[", "1", ",", "300", "]", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "'convert words to ids'", ")", "\n", "w_in_desc", "=", "[", "]", "\n", "for", "l", "in", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ":", "\n", "            ", "w_in_desc", "+=", "l", "\n", "", "w_in_desc", "=", "pd", ".", "Series", "(", "list", "(", "set", "(", "w_in_desc", ")", ")", ")", "\n", "un_logged_words", "=", "w_in_desc", "[", "~", "w_in_desc", ".", "isin", "(", "word", ")", "]", "\n", "un_logged_id", "=", "len", "(", "word", ")", "\n", "\n", "all_word", "=", "pd", ".", "concat", "(", "\n", "[", "pd", ".", "Series", "(", "word", ".", "index", ",", "word", ".", "values", ")", ",", "\n", "pd", ".", "Series", "(", "[", "un_logged_id", ",", "]", "*", "len", "(", "un_logged_words", ")", ",", "index", "=", "un_logged_words", ")", "]", ")", "\n", "\n", "def", "lookup_and_padding", "(", "x", ")", ":", "\n", "            ", "default_length", "=", "4", "\n", "ids", "=", "list", "(", "all_word", ".", "loc", "[", "x", "]", ".", "values", ")", "+", "[", "all_word", ".", "iloc", "[", "-", "1", "]", ",", "]", "*", "default_length", "\n", "return", "ids", "[", ":", "default_length", "]", "\n", "\n", "", "print", "(", "'look up desc embeddings'", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "apply", "(", "lookup_and_padding", ")", "\n", "\n", "# entity-desc-embedding dataframe", "\n", "e_desc_input", "=", "pd", ".", "DataFrame", "(", "np", ".", "repeat", "(", "[", "[", "un_logged_id", ",", "]", "*", "4", "]", ",", "model", ".", "kgs", ".", "entities_num", ",", "axis", "=", "0", ")", ",", "\n", "range", "(", "model", ".", "kgs", ".", "entities_num", ")", ")", "\n", "\n", "e_desc_input", ".", "iloc", "[", "names", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", "]", "=", "np", ".", "stack", "(", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ")", "\n", "\n", "print", "(", "'generating desc input costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "name_embeds", "=", "word_em", "[", "e_desc_input", ".", "values", "]", "\n", "name_embeds", "=", "np", ".", "sum", "(", "name_embeds", ",", "axis", "=", "1", ")", "\n", "\n", "return", "word_em", ",", "e_desc_input", ",", "name_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.trainning": [[461, 489], ["len", "numpy.array", "pos.reshape", "pos.reshape", "rdgcn.RDGCN.sess.run", "rdgcn.get_neg", "rdgcn.get_neg", "range", "numpy.ones", "train_links[].reshape", "numpy.ones", "train_links[].reshape", "time.time", "rdgcn.RDGCN.sess.run", "print", "rdgcn.RDGCN.valid_", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.valid_", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "trainning", "(", "self", ")", ":", "\n", "        ", "neg_num", "=", "self", ".", "args", ".", "neg_triple_num", "\n", "train_num", "=", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "train_links", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg_left", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg2_right", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "neg2_left", "=", "get_neg", "(", "train_links", "[", ":", ",", "1", "]", ",", "output", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "neg_right", "=", "get_neg", "(", "train_links", "[", ":", ",", "0", "]", ",", "output", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "self", ".", "feeddict", "=", "{", "\"neg_left:0\"", ":", "neg_left", ",", "\n", "\"neg_right:0\"", ":", "neg_right", ",", "\n", "\"neg2_left:0\"", ":", "neg2_left", ",", "\n", "\"neg2_right:0\"", ":", "neg2_right", "}", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "_", ",", "batch_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "self", ".", "feeddict", ")", "\n", "print", "(", "'epoch {}, avg. relation triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "i", ",", "batch_loss", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# ********************no early stop********************************************", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid_", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.test": [[490, 500], ["rdgcn.RDGCN.sess.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["", "", "", "", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "rest_12", ",", "_", ",", "_", "=", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.save": [[501, 504], ["rdgcn.RDGCN.sess.run", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "embedding", ",", "None", ",", "None", ",", "mapping_mat", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.valid_": [[505, 514], ["rdgcn.RDGCN.sess.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.valid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ")", "\n", "if", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hits1_12", "\n", "", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.RDGCN.run": [[515, 520], ["time.time", "rdgcn.RDGCN.trainning", "print", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.trainning", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "trainning", "(", ")", "\n", "print", "(", "\"trainning finish\"", ")", "\n", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.rfunc": [[17, 43], ["dict", "dict", "dict", "list", "list", "numpy.zeros", "numpy.zeros", "tensorflow.SparseTensor", "list.append", "list.append", "set", "set", "head[].add", "tail[].add", "head[].add", "tail[].add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "rfunc", "(", "triple_list", ",", "ent_num", ",", "rel_num", ")", ":", "\n", "    ", "head", "=", "dict", "(", ")", "\n", "tail", "=", "dict", "(", ")", "\n", "rel_count", "=", "dict", "(", ")", "\n", "r_mat_ind", "=", "list", "(", ")", "\n", "r_mat_val", "=", "list", "(", ")", "\n", "head_r", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "rel_num", ")", ")", "\n", "tail_r", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "rel_num", ")", ")", "\n", "for", "triple", "in", "triple_list", ":", "\n", "        ", "head_r", "[", "triple", "[", "0", "]", "]", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "tail_r", "[", "triple", "[", "2", "]", "]", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "r_mat_ind", ".", "append", "(", "[", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", "]", ")", "\n", "r_mat_val", ".", "append", "(", "triple", "[", "1", "]", ")", "\n", "if", "triple", "[", "1", "]", "not", "in", "rel_count", ":", "\n", "            ", "rel_count", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "triple", "[", "1", "]", "]", "=", "set", "(", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", "=", "set", "(", ")", "\n", "head", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "0", "]", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "rel_count", "[", "triple", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "0", "]", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "2", "]", ")", "\n", "", "", "r_mat", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "r_mat_ind", ",", "values", "=", "r_mat_val", ",", "dense_shape", "=", "[", "ent_num", ",", "ent_num", "]", ")", "\n", "\n", "return", "head", ",", "tail", ",", "head_r", ",", "tail_r", ",", "r_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.get_mat": [[45, 61], ["dict", "range"], "function", ["None"], ["", "def", "get_mat", "(", "triple_list", ",", "ent_num", ")", ":", "\n", "    ", "degree", "=", "[", "1", "]", "*", "ent_num", "\n", "pos", "=", "dict", "(", ")", "\n", "for", "triple", "in", "triple_list", ":", "\n", "        ", "if", "triple", "[", "0", "]", "!=", "triple", "[", "1", "]", ":", "\n", "            ", "degree", "[", "triple", "[", "0", "]", "]", "+=", "1", "\n", "degree", "[", "triple", "[", "1", "]", "]", "+=", "1", "\n", "", "if", "triple", "[", "0", "]", "==", "triple", "[", "2", "]", ":", "\n", "            ", "continue", "\n", "", "if", "(", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", ")", "not", "in", "pos", ":", "\n", "            ", "pos", "[", "(", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", ")", "]", "=", "1", "\n", "pos", "[", "(", "triple", "[", "2", "]", ",", "triple", "[", "0", "]", ")", "]", "=", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "pos", "[", "(", "i", ",", "i", ")", "]", "=", "1", "\n", "", "return", "pos", ",", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.get_sparse_tensor": [[63, 75], ["rdgcn.get_mat", "numpy.zeros", "tensorflow.SparseTensor", "ind.append", "val.append", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "get_sparse_tensor", "(", "triple_list", ",", "ent_num", ")", ":", "\n", "    ", "pos", ",", "degree", "=", "get_mat", "(", "triple_list", ",", "ent_num", ")", "\n", "ind", "=", "[", "]", "\n", "val", "=", "[", "]", "\n", "M_arr", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "ent_num", ")", ")", "\n", "for", "fir", ",", "sec", "in", "pos", ":", "\n", "        ", "ind", ".", "append", "(", "(", "sec", ",", "fir", ")", ")", "\n", "val", ".", "append", "(", "pos", "[", "(", "fir", ",", "sec", ")", "]", "/", "math", ".", "sqrt", "(", "degree", "[", "fir", "]", ")", "/", "math", ".", "sqrt", "(", "degree", "[", "sec", "]", ")", ")", "\n", "M_arr", "[", "fir", "]", "[", "sec", "]", "=", "1.0", "\n", "", "pos", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "ind", ",", "values", "=", "val", ",", "dense_shape", "=", "[", "ent_num", ",", "ent_num", "]", ")", "\n", "\n", "return", "pos", ",", "M_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.get_neg": [[77, 90], ["len", "numpy.array", "numpy.array", "scipy.spatial.distance.cdist", "range", "numpy.array", "neg.reshape.reshape", "sim[].argsort", "neg.reshape.append"], "function", ["None"], ["", "def", "get_neg", "(", "ILL", ",", "output_layer", ",", "k", ")", ":", "\n", "    ", "neg", "=", "[", "]", "\n", "t", "=", "len", "(", "ILL", ")", "\n", "ILL_vec", "=", "np", ".", "array", "(", "[", "output_layer", "[", "e1", "]", "for", "e1", "in", "ILL", "]", ")", "\n", "KG_vec", "=", "np", ".", "array", "(", "output_layer", ")", "\n", "sim", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "ILL_vec", ",", "KG_vec", ",", "metric", "=", "'cityblock'", ")", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "        ", "rank", "=", "sim", "[", "i", ",", ":", "]", ".", "argsort", "(", ")", "\n", "neg", ".", "append", "(", "rank", "[", "0", ":", "k", "]", ")", "\n", "\n", "", "neg", "=", "np", ".", "array", "(", "neg", ")", "\n", "neg", "=", "neg", ".", "reshape", "(", "(", "t", "*", "k", ",", ")", ")", "\n", "return", "neg", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.is_number": [[92, 105], ["float", "unicodedata.numeric"], "function", ["None"], ["", "def", "is_number", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "import", "unicodedata", "\n", "unicodedata", ".", "numeric", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.clear_attribute_triples": [[107, 148], ["print", "set", "set", "set", "print", "print", "len", "attr_num.keys", "len", "v.replace().replace().replace.endswith", "rdgcn.is_number", "v.replace().replace().replace.replace().replace().replace().replace().replace", "v.replace().replace().replace.replace().replace().replace", "set.append", "len", "set.add", "set.add", "literals_number.append", "literals_string.append", "v.replace().replace().replace.replace().replace().replace().replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.index", "v.replace().replace().replace.index", "v.replace().replace().replace.replace().replace().replace", "v.replace().replace().replace.replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.is_number", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index"], ["", "def", "clear_attribute_triples", "(", "attribute_triples", ")", ":", "\n", "    ", "print", "(", "'\\nbefore clear:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "# step 1", "\n", "attribute_triples_new", "=", "set", "(", ")", "\n", "attr_num", "=", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "_", ")", "in", "attribute_triples", ":", "\n", "        ", "ent_num", "=", "1", "\n", "if", "a", "in", "attr_num", ":", "\n", "            ", "ent_num", "+=", "attr_num", "[", "a", "]", "\n", "", "attr_num", "[", "a", "]", "=", "ent_num", "\n", "", "attr_set", "=", "set", "(", "attr_num", ".", "keys", "(", ")", ")", "\n", "attr_set_new", "=", "set", "(", ")", "\n", "for", "a", "in", "attr_set", ":", "\n", "        ", "if", "attr_num", "[", "a", "]", ">=", "10", ":", "\n", "            ", "attr_set_new", ".", "add", "(", "a", ")", "\n", "", "", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "a", "in", "attr_set_new", ":", "\n", "            ", "attribute_triples_new", ".", "add", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 1:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "\n", "# step 2", "\n", "attribute_triples_new", "=", "[", "]", "\n", "literals_number", ",", "literals_string", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "'\"^^'", "in", "v", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"^^'", ")", "]", "\n", "", "if", "v", ".", "endswith", "(", "'\"@en'", ")", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"@en'", ")", "]", "\n", "", "if", "is_number", "(", "v", ")", ":", "\n", "            ", "literals_number", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "literals_string", ".", "append", "(", "v", ")", "\n", "", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "v", "=", "v", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", "\n", "if", "'http'", "in", "v", ":", "\n", "            ", "continue", "\n", "", "attribute_triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 2:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "return", "attribute_triples", ",", "literals_number", ",", "literals_string", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.rdgcn.read_word2vec": [[150, 162], ["print", "dict", "file.close", "open", "line.strip().split.strip().split", "numpy.array", "len", "list", "line.strip().split.strip", "map"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_word2vec", "(", "file_path", ",", "vector_dimension", ")", ":", "\n", "    ", "print", "(", "'\\n'", ",", "file_path", ")", "\n", "word2vec", "=", "dict", "(", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "!=", "vector_dimension", "+", "1", ":", "\n", "                ", "continue", "\n", "", "v", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "line", "[", "1", ":", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word2vec", "[", "line", "[", "0", "]", "]", "=", "v", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel.__init__": [[22, 42], ["load_session", "len", "numpy.reshape", "literal_encoder.AutoEncoderModel._init_graph", "literal_encoder.AutoEncoderModel._loss_optimizer", "tf.global_variables_initializer().run", "sklearn.preprocessing.normalize", "len", "tf.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._init_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._loss_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["    ", "def", "__init__", "(", "self", ",", "word_vec_list", ",", "args", ",", "hidden_dimensions", "=", "None", ")", ":", "\n", "        ", "self", ".", "session", "=", "load_session", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "weights", ",", "self", ".", "biases", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "input_dimension", "=", "self", ".", "args", ".", "literal_len", "*", "self", ".", "args", ".", "word2vec_dim", "\n", "if", "hidden_dimensions", "is", "None", ":", "\n", "            ", "hidden_dimensions", "=", "[", "1024", ",", "512", ",", "self", ".", "args", ".", "dim", "]", "\n", "", "self", ".", "hidden_dimensions", "=", "hidden_dimensions", "\n", "self", ".", "layer_num", "=", "len", "(", "self", ".", "hidden_dimensions", ")", "\n", "self", ".", "encoder_output", "=", "None", "\n", "self", ".", "decoder_output", "=", "None", "\n", "self", ".", "decoder_op", "=", "None", "\n", "\n", "self", ".", "word_vec_list", "=", "np", ".", "reshape", "(", "word_vec_list", ",", "[", "len", "(", "word_vec_list", ")", ",", "self", ".", "input_dimension", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_normalize", ":", "\n", "            ", "self", ".", "word_vec_list", "=", "preprocessing", ".", "normalize", "(", "self", ".", "word_vec_list", ")", "\n", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "_loss_optimizer", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel._init_graph": [[43, 64], ["literal_encoder.AutoEncoderModel.hidden_dimensions.insert", "range", "range", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.placeholder", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "_init_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden_dimensions", ".", "insert", "(", "0", ",", "self", ".", "input_dimension", ")", "\n", "hds", "=", "self", ".", "hidden_dimensions", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'encoder_h'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i", "]", ",", "hds", "[", "i", "+", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'encoder_b'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i", "+", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "i_decoder", "=", "self", ".", "layer_num", "-", "i", "\n", "self", ".", "weights", "[", "'decoder_h'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'decoder_h'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i_decoder", "]", ",", "hds", "[", "i_decoder", "-", "1", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "biases", "[", "'decoder_b'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'decoder_b'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i_decoder", "-", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "input_dimension", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel._loss_optimizer": [[65, 73], ["literal_encoder.AutoEncoderModel.encoder", "literal_encoder.AutoEncoderModel.decoder", "tf.reduce_mean", "openea.modules.base.optimizers.generate_optimizer", "tf.nn.l2_normalize", "tf.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.decoder", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_loss_optimizer", "(", "self", ")", ":", "\n", "        ", "encoder_output", "=", "self", ".", "encoder", "(", "self", ".", "batch", ")", "\n", "if", "self", ".", "args", ".", "encoder_normalize", ":", "\n", "            ", "encoder_output", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "encoder_output", ")", "\n", "", "decoder_output", "=", "self", ".", "decoder", "(", "encoder_output", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "pow", "(", "decoder_output", "-", "self", ".", "batch", ",", "2", ")", ")", "\n", "# self.optimizer = generate_optimizer(self.loss, self.args.learning_rate, opt=self.args.optimizer)", "\n", "self", ".", "optimizer", "=", "generate_optimizer", "(", "self", ".", "loss", ",", "0.01", ",", "opt", "=", "'Adagrad'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel.encoder": [[74, 84], ["range", "tf.add", "tf.matmul", "tf.nn.sigmoid", "tf.nn.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "encoder", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "input_layer", "=", "input_data", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "input_layer", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "input_layer", ",", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", ")", ",", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "tanh", "(", "input_layer", ")", "\n", "", "", "encoder_output", "=", "input_layer", "\n", "return", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel.decoder": [[85, 95], ["range", "tf.add", "tf.matmul", "tf.nn.sigmoid", "tf.nn.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "decoder", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "input_layer", "=", "input_data", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "input_layer", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "input_layer", ",", "self", ".", "weights", "[", "'decoder_h'", "+", "str", "(", "i", ")", "]", ")", ",", "self", ".", "biases", "[", "'decoder_b'", "+", "str", "(", "i", ")", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "tanh", "(", "input_layer", ")", "\n", "", "", "decoder_output", "=", "input_layer", "\n", "return", "decoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel.train_one_epoch": [[96, 116], ["time.time", "list", "range", "range", "time.time", "print", "literal_encoder.AutoEncoderModel.session.run", "len", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "batches", "=", "list", "(", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "num_batch", "=", "len", "(", "self", ".", "word_vec_list", ")", "//", "batch_size", "+", "1", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "if", "i", "==", "num_batch", "-", "1", ":", "\n", "                ", "batches", ".", "append", "(", "self", ".", "word_vec_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "batches", ".", "append", "(", "self", ".", "word_vec_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "loss_sum", "=", "0.0", "\n", "for", "batch_i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "loss_train", ",", "_", "=", "self", ".", "session", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "optimizer", "]", ",", "feed_dict", "=", "{", "self", ".", "batch", ":", "batches", "[", "batch_i", "]", "}", ")", "\n", "loss_sum", "+=", "loss_train", "\n", "", "loss_sum", "+=", "self", ".", "args", ".", "batch_size", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of literal encoder, loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "loss_sum", ",", "end", "-", "start_time", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.AutoEncoderModel.encoder_multi_batches": [[117, 148], ["print", "list", "numpy.zeros", "range", "range", "print", "len", "numpy.reshape", "range", "gc.collect", "len", "len", "list.append", "list.append", "literal_encoder.AutoEncoderModel.weights[].eval", "literal_encoder.AutoEncoderModel.biases[].eval", "numpy.array", "numpy.array", "len", "numpy.matmul", "literal_encoder.sigmoid", "literal_encoder.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "encoder_multi_batches", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "print", "(", "'encode literal embeddings...'", ",", "len", "(", "input_data", ")", ")", "\n", "batches", "=", "list", "(", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "len", "(", "input_data", ")", ",", "self", ".", "args", ".", "dim", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "num_batch", "=", "len", "(", "input_data", ")", "//", "batch_size", "+", "1", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "if", "i", "==", "num_batch", "-", "1", ":", "\n", "                ", "batches", ".", "append", "(", "input_data", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "batches", ".", "append", "(", "input_data", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "for", "batch_i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "input_layer", "=", "np", ".", "reshape", "(", "batches", "[", "batch_i", "]", ",", "[", "len", "(", "batches", "[", "batch_i", "]", ")", ",", "self", ".", "input_dimension", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "                ", "weight_i", "=", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "bias_i", "=", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "input_layer", "=", "np", ".", "matmul", "(", "input_layer", ",", "weight_i", ")", "+", "bias_i", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                    ", "input_layer", "=", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                    ", "input_layer", "=", "tanh", "(", "input_layer", ")", "\n", "", "", "literal_vectors", "=", "input_layer", "\n", "if", "batch_i", "==", "num_batch", "-", "1", ":", "\n", "                ", "results", "[", "batch_i", "*", "batch_size", ":", "]", "=", "np", ".", "array", "(", "literal_vectors", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "batch_i", "*", "batch_size", ":", "(", "batch_i", "+", "1", ")", "*", "batch_size", "]", "=", "np", ".", "array", "(", "literal_vectors", ")", "\n", "", "del", "literal_vectors", "\n", "gc", ".", "collect", "(", ")", "\n", "", "print", "(", "\"encoded literal embeddings\"", ",", "results", ".", "shape", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.LiteralEncoder.__init__": [[195, 215], ["literal_encoder.generate_unlisted_word2vec", "literal_encoder.AutoEncoderModel", "range", "literal_encoder.AutoEncoderModel.encoder_multi_batches", "numpy.zeros", "literal.split", "range", "literal_vector_list.append", "len", "len", "literal_encoder.AutoEncoderModel.train_one_epoch", "min", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.generate_unlisted_word2vec", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder_multi_batches", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.train_one_epoch"], ["    ", "def", "__init__", "(", "self", ",", "literal_list", ",", "word2vec", ",", "args", ",", "word2vec_dimension", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "literal_list", "=", "literal_list", "\n", "self", ".", "word2vec", "=", "generate_unlisted_word2vec", "(", "word2vec", ",", "literal_list", ",", "word2vec_dimension", ")", "\n", "self", ".", "tokens_max_len", "=", "self", ".", "args", ".", "literal_len", "\n", "self", ".", "word2vec_dimension", "=", "word2vec_dimension", "\n", "\n", "literal_vector_list", "=", "[", "]", "\n", "for", "literal", "in", "self", ".", "literal_list", ":", "\n", "            ", "vectors", "=", "np", ".", "zeros", "(", "(", "self", ".", "tokens_max_len", ",", "self", ".", "word2vec_dimension", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "words", "=", "literal", ".", "split", "(", "' '", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "tokens_max_len", ",", "len", "(", "words", ")", ")", ")", ":", "\n", "                ", "if", "words", "[", "i", "]", "in", "self", ".", "word2vec", ":", "\n", "                    ", "vectors", "[", "i", "]", "=", "self", ".", "word2vec", "[", "words", "[", "i", "]", "]", "\n", "", "", "literal_vector_list", ".", "append", "(", "vectors", ")", "\n", "", "assert", "len", "(", "literal_list", ")", "==", "len", "(", "literal_vector_list", ")", "\n", "encoder_model", "=", "AutoEncoderModel", "(", "literal_vector_list", ",", "self", ".", "args", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "encoder_epoch", ")", ":", "\n", "            ", "encoder_model", ".", "train_one_epoch", "(", "i", "+", "1", ")", "\n", "", "self", ".", "encoded_literal_vector", "=", "encoder_model", ".", "encoder_multi_batches", "(", "literal_vector_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.sigmoid": [[10, 12], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.tanh": [[14, 19], ["numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "s1", "=", "np", ".", "exp", "(", "x", ")", "-", "np", ".", "exp", "(", "-", "x", ")", "\n", "s2", "=", "np", ".", "exp", "(", "x", ")", "+", "np", ".", "exp", "(", "-", "x", ")", "\n", "s", "=", "s1", "/", "s2", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.literal_encoder.generate_unlisted_word2vec": [[150, 191], ["sorted", "sum", "range", "print", "print", "gensim.models.word2vec.Word2Vec", "word2vec.update", "literal.split", "sorted.items", "len", "len", "list", "numpy.zeros", "len", "unlisted_words.append", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "", "def", "generate_unlisted_word2vec", "(", "word2vec", ",", "literal_list", ",", "vector_dimension", ")", ":", "\n", "    ", "unlisted_words", "=", "[", "]", "\n", "for", "literal", "in", "literal_list", ":", "\n", "        ", "words", "=", "literal", ".", "split", "(", "' '", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word", "not", "in", "word2vec", ":", "\n", "                ", "unlisted_words", ".", "append", "(", "word", ")", "\n", "\n", "", "", "", "character_vectors", "=", "{", "}", "\n", "alphabet", "=", "''", "\n", "ch_num", "=", "{", "}", "\n", "for", "word", "in", "unlisted_words", ":", "\n", "        ", "for", "ch", "in", "word", ":", "\n", "            ", "n", "=", "1", "\n", "if", "ch", "in", "ch_num", ":", "\n", "                ", "n", "+=", "ch_num", "[", "ch", "]", "\n", "", "ch_num", "[", "ch", "]", "=", "n", "\n", "", "", "ch_num", "=", "sorted", "(", "ch_num", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "ch_sum", "=", "sum", "(", "[", "n", "for", "(", "_", ",", "n", ")", "in", "ch_num", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ch_num", ")", ")", ":", "\n", "        ", "if", "ch_num", "[", "i", "]", "[", "1", "]", "/", "ch_sum", ">=", "0.0001", ":", "\n", "            ", "alphabet", "+=", "ch_num", "[", "i", "]", "[", "0", "]", "\n", "", "", "print", "(", "alphabet", ")", "\n", "print", "(", "'len(alphabet):'", ",", "len", "(", "alphabet", ")", ",", "'\\n'", ")", "\n", "char_sequences", "=", "[", "list", "(", "word", ")", "for", "word", "in", "unlisted_words", "]", "\n", "model", "=", "Word2Vec", "(", "char_sequences", ",", "size", "=", "vector_dimension", ",", "window", "=", "5", ",", "min_count", "=", "1", ")", "\n", "for", "ch", "in", "alphabet", ":", "\n", "        ", "assert", "ch", "in", "model", "\n", "character_vectors", "[", "ch", "]", "=", "model", "[", "ch", "]", "\n", "\n", "", "word2vec_new", "=", "{", "}", "\n", "for", "word", "in", "unlisted_words", ":", "\n", "        ", "vec", "=", "np", ".", "zeros", "(", "vector_dimension", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ch", "in", "word", ":", "\n", "            ", "if", "ch", "in", "alphabet", ":", "\n", "                ", "vec", "+=", "character_vectors", "[", "ch", "]", "\n", "", "", "if", "len", "(", "word", ")", "!=", "0", ":", "\n", "            ", "word2vec_new", "[", "word", "]", "=", "vec", "/", "len", "(", "word", ")", "\n", "\n", "", "", "word2vec", ".", "update", "(", "word2vec_new", ")", "\n", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.IMUSE.__init__": [[254, 256], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.IMUSE.init": [[257, 277], ["imuse.IMUSE._define_variables", "imuse.IMUSE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "# self.aligned_ent_pair_set = interactive_model(self.kgs, self.args)", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'margin-based'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'SGD'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", "==", "1", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.IMUSE._define_variables": [[278, 284], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.IMUSE._define_embed_graph": [[285, 314], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.name_scope", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "self", ".", "aligned_ents1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "aligned_ents2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "ents1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "aligned_ents1", ")", "\n", "ents2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "aligned_ents2", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'align_loss'", ")", ":", "\n", "            ", "self", ".", "align_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "ents1", "-", "ents2", ",", "2", ")", ",", "1", ")", ")", "\n", "self", ".", "align_optimizer", "=", "generate_optimizer", "(", "self", ".", "align_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.IMUSE.run": [[330, 346], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "len", "len", "math.ceil", "list", "imuse.IMUSE.launch_triple_training_1epo", "range", "imuse.IMUSE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "None", ",", "None", ")", "\n", "# self.launch_align_training_1epo(i)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.interactive_model": [[17, 40], ["time.time", "set", "imuse.get_aligned_attr_pair_by_name_similarity", "print", "print", "len", "imuse.align_entity_by_attributes", "print", "imuse.align_attribute_by_entities", "print", "len", "len", "len", "len", "len", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.get_aligned_attr_pair_by_name_similarity", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_entity_by_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_attribute_by_entities", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "interactive_model", "(", "kgs", ",", "args", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "aligned_ent_pair_set_all", "=", "set", "(", ")", "\n", "i", "=", "0", "\n", "aligned_attr_pair_set_all", "=", "get_aligned_attr_pair_by_name_similarity", "(", "kgs", ",", "0.6", ")", "\n", "print", "(", "'aligned_attr_pair_set:'", ",", "len", "(", "aligned_attr_pair_set_all", ")", ")", "\n", "while", "True", ":", "\n", "        ", "i", "+=", "1", "\n", "aligned_ent_pair_set_iter", "=", "align_entity_by_attributes", "(", "kgs", ",", "aligned_attr_pair_set_all", ",", "args", ".", "sim_thresholds_ent", ")", "\n", "aligned_ent_pair_set_all", "|=", "aligned_ent_pair_set_iter", "\n", "print", "(", "i", ",", "'len(aligned_ent_pair_set_all):'", ",", "len", "(", "aligned_ent_pair_set_all", ")", ",", "'len(aligned_ent_pair_set_iter):'", ",", "\n", "len", "(", "aligned_ent_pair_set_iter", ")", ")", "\n", "if", "i", ">=", "args", ".", "interactive_model_iter_num", ":", "\n", "            ", "break", "\n", "", "aligned_attr_pair_set_iter", "=", "align_attribute_by_entities", "(", "kgs", ",", "aligned_ent_pair_set_all", ",", "\n", "args", ".", "sim_thresholds_attr", ")", "\n", "if", "len", "(", "aligned_attr_pair_set_all", "|", "aligned_attr_pair_set_iter", ")", "==", "len", "(", "aligned_attr_pair_set_all", ")", ":", "\n", "            ", "break", "\n", "", "aligned_attr_pair_set_all", "|=", "aligned_attr_pair_set_iter", "\n", "print", "(", "i", ",", "'len(aligned_attr_pair_set_all):'", ",", "len", "(", "aligned_attr_pair_set_all", ")", ",", "'len(aligned_attr_pair_set_iter):'", ",", "\n", "len", "(", "aligned_attr_pair_set_iter", ")", ")", "\n", "", "print", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "return", "aligned_ent_pair_set_all", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.run_one_ea": [[42, 67], ["set", "set", "ent_attrs_dict_1.items", "ent_attrs_dict_2.items", "set.add", "set.add", "imuse.compute_two_values_similarity"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.compute_two_values_similarity"], ["", "def", "run_one_ea", "(", "ent_attrs_dict_1", ",", "ent_attrs_dict_2", ",", "ent_attr_value_dict_1", ",", "ent_attr_value_dict_2", ",", "sim_thresholds_ent", ",", "\n", "aligned_attr_pair_set", ")", ":", "\n", "    ", "aligned_ent_pair_set_i", "=", "set", "(", ")", "\n", "cnt", "=", "0", "\n", "target_ent_set", "=", "set", "(", ")", "\n", "for", "e1", ",", "attrs1", "in", "ent_attrs_dict_1", ".", "items", "(", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "target_ent", "=", "None", "\n", "sim_max", "=", "sim_thresholds_ent", "\n", "for", "e2", ",", "attrs2", "in", "ent_attrs_dict_2", ".", "items", "(", ")", ":", "\n", "            ", "sim", ",", "sim_cnt", "=", "0", ",", "0", "\n", "for", "(", "a1", ",", "a2", ")", "in", "aligned_attr_pair_set", ":", "\n", "                ", "if", "a1", "in", "attrs1", "and", "a2", "in", "attrs2", ":", "\n", "                    ", "sim", "+=", "compute_two_values_similarity", "(", "ent_attr_value_dict_1", "[", "(", "e1", ",", "a1", ")", "]", ",", "\n", "ent_attr_value_dict_2", "[", "(", "e2", ",", "a2", ")", "]", ")", "\n", "sim_cnt", "+=", "1", "\n", "", "", "if", "sim_cnt", ">", "0", ":", "\n", "                ", "sim", "/=", "sim_cnt", "\n", "", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_ent", "=", "e2", "\n", "sim_max", "=", "sim", "\n", "", "if", "target_ent", "is", "not", "None", "and", "target_ent", "not", "in", "target_ent_set", ":", "\n", "                ", "aligned_ent_pair_set_i", ".", "add", "(", "(", "e1", ",", "target_ent", ")", ")", "\n", "target_ent_set", ".", "add", "(", "target_ent", ")", "\n", "", "", "", "return", "aligned_ent_pair_set_i", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.align_entity_by_attributes": [[69, 98], ["print", "set", "imuse.filter_by_aligned_attributes", "imuse.filter_by_aligned_attributes", "list", "multiprocessing.Pool", "multiprocessing.Pool", "list", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dict", "set", "len", "set", "set", "ent_attrs_dict_1.keys", "len", "dict", "list.append", "_res.get", "multiprocessing.Pool.apply_async", "dict.items"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "align_entity_by_attributes", "(", "kgs", ",", "aligned_attr_pair_set", ",", "sim_thresholds_ent", ")", ":", "\n", "    ", "print", "(", "'align_entity_by_attributes...'", ")", "\n", "aligned_ent_pair_set", "=", "set", "(", ")", "\n", "if", "len", "(", "aligned_attr_pair_set", ")", "==", "0", ":", "\n", "        ", "return", "aligned_ent_pair_set", "\n", "", "ent_attrs_dict_1", ",", "ent_attr_value_dict_1", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg1", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "a", "for", "(", "a", ",", "_", ")", "in", "aligned_attr_pair_set", "]", ")", ")", "\n", "ent_attrs_dict_2", ",", "ent_attr_value_dict_2", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg2", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "a", "for", "(", "_", ",", "a", ")", "in", "aligned_attr_pair_set", "]", ")", ")", "\n", "ent_set_1", "=", "list", "(", "ent_attrs_dict_1", ".", "keys", "(", ")", ")", "\n", "size", "=", "len", "(", "ent_set_1", ")", "//", "8", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "res", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "if", "i", "==", "7", ":", "\n", "            ", "ent_set_i", "=", "ent_set_1", "[", "size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "ent_set_i", "=", "ent_set_1", "[", "size", "*", "i", ":", "size", "*", "(", "i", "+", "1", ")", "]", "\n", "", "ent_attrs_dict_1_i", "=", "dict", "(", "[", "(", "k", ",", "ent_attrs_dict_1", "[", "k", "]", ")", "for", "k", "in", "ent_set_i", "]", ")", "\n", "res", ".", "append", "(", "pool", ".", "apply_async", "(", "run_one_ea", ",", "(", "ent_attrs_dict_1_i", ",", "ent_attrs_dict_2", ",", "ent_attr_value_dict_1", ",", "\n", "ent_attr_value_dict_2", ",", "sim_thresholds_ent", ",", "aligned_attr_pair_set", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "_res", "in", "res", ":", "\n", "        ", "aligned_ent_pair_set", "|=", "_res", ".", "get", "(", ")", "\n", "", "temp_dict", "=", "dict", "(", "[", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "aligned_ent_pair_set", "]", ")", "\n", "aligned_ent_pair_set", "=", "set", "(", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "temp_dict", ".", "items", "(", ")", "]", ")", "\n", "return", "aligned_ent_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.run_one_ae": [[100, 123], ["set", "set", "attr_ents_dict_1.items", "attr_ents_dict_2.items", "set.add", "set.add", "imuse.compute_two_values_similarity"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.compute_two_values_similarity"], ["", "def", "run_one_ae", "(", "attr_ents_dict_1", ",", "attr_ents_dict_2", ",", "attr_ent_value_dict_1", ",", "attr_ent_value_dict_2", ",", "sim_thresholds_attr", ",", "\n", "aligned_ent_pair_set", ")", ":", "\n", "    ", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "target_attr_set", "=", "set", "(", ")", "\n", "for", "a1", ",", "ents1", "in", "attr_ents_dict_1", ".", "items", "(", ")", ":", "\n", "        ", "target_attr", "=", "None", "\n", "sim_max", "=", "sim_thresholds_attr", "\n", "for", "a2", ",", "ents2", "in", "attr_ents_dict_2", ".", "items", "(", ")", ":", "\n", "            ", "sim", ",", "sim_cnt", "=", "0", ",", "0", "\n", "for", "(", "e1", ",", "e2", ")", "in", "aligned_ent_pair_set", ":", "\n", "                ", "if", "e1", "in", "ents1", "and", "e2", "in", "ents2", ":", "\n", "                    ", "sim", "+=", "compute_two_values_similarity", "(", "attr_ent_value_dict_1", "[", "(", "a1", ",", "e1", ")", "]", ",", "\n", "attr_ent_value_dict_2", "[", "(", "a2", ",", "e2", ")", "]", ")", "\n", "sim_cnt", "+=", "1", "\n", "", "", "if", "sim_cnt", ">", "0", ":", "\n", "                ", "sim", "/=", "sim_cnt", "\n", "", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_attr", "=", "a2", "\n", "sim_max", "=", "sim", "\n", "", "if", "target_attr", "is", "not", "None", "and", "target_attr", "not", "in", "target_attr_set", ":", "\n", "                ", "aligned_attr_pair_set", ".", "add", "(", "(", "a1", ",", "target_attr", ")", ")", "\n", "target_attr_set", ".", "add", "(", "target_attr", ")", "\n", "", "", "", "return", "aligned_attr_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.align_attribute_by_entities": [[125, 154], ["print", "set", "imuse.filter_by_aligned_attributes", "imuse.filter_by_aligned_attributes", "list", "multiprocessing.Pool", "multiprocessing.Pool", "list", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dict", "set", "set", "set", "attr_ents_dict_1.keys", "len", "dict", "list.append", "_res.get", "len", "multiprocessing.Pool.apply_async", "dict.items"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "align_attribute_by_entities", "(", "kgs", ",", "aligned_ent_pair_set", ",", "sim_thresholds_attr", ")", ":", "\n", "    ", "print", "(", "'align_attribute_by_entities...'", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "if", "aligned_ent_pair_set", "is", "None", "or", "len", "(", "aligned_ent_pair_set", ")", "==", "0", ":", "\n", "        ", "return", "aligned_attr_pair_set", "\n", "", "attr_ents_dict_1", ",", "attr_ent_value_dict_1", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg1", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "e", "for", "(", "e", ",", "_", ")", "in", "aligned_ent_pair_set", "]", ")", ")", "\n", "attr_ents_dict_2", ",", "attr_ent_value_dict_2", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg2", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "e", "for", "(", "_", ",", "e", ")", "in", "aligned_ent_pair_set", "]", ")", ")", "\n", "attr_set_1", "=", "list", "(", "attr_ents_dict_1", ".", "keys", "(", ")", ")", "\n", "size", "=", "len", "(", "attr_set_1", ")", "//", "8", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "res", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "if", "i", "==", "7", ":", "\n", "            ", "attr_set_i", "=", "attr_set_1", "[", "size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "attr_set_i", "=", "attr_set_1", "[", "size", "*", "i", ":", "size", "*", "(", "i", "+", "1", ")", "]", "\n", "", "attr_ents_dict_1_i", "=", "dict", "(", "[", "(", "k", ",", "attr_ents_dict_1", "[", "k", "]", ")", "for", "k", "in", "attr_set_i", "]", ")", "\n", "res", ".", "append", "(", "pool", ".", "apply_async", "(", "run_one_ae", ",", "(", "attr_ents_dict_1_i", ",", "attr_ents_dict_2", ",", "attr_ent_value_dict_1", ",", "\n", "attr_ent_value_dict_2", ",", "sim_thresholds_attr", ",", "aligned_ent_pair_set", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "_res", "in", "res", ":", "\n", "        ", "aligned_attr_pair_set", "|=", "_res", ".", "get", "(", ")", "\n", "", "temp_dict", "=", "dict", "(", "[", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "aligned_attr_pair_set", "]", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "temp_dict", ".", "items", "(", ")", "]", ")", "\n", "return", "aligned_attr_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.filter_by_aligned_attributes": [[156, 167], ["set", "set.add"], "function", ["None"], ["", "def", "filter_by_aligned_attributes", "(", "attr_triples", ",", "attr_set", ")", ":", "\n", "    ", "ent_attrs_dict", ",", "ent_attr_value_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attr_triples", ":", "\n", "        ", "if", "a", "in", "attr_set", "and", "(", "e", ",", "a", ")", "not", "in", "ent_attr_value_dict", ":", "\n", "            ", "ent_attr_value_dict", "[", "(", "e", ",", "a", ")", "]", "=", "v", "\n", "attrs", "=", "set", "(", ")", "\n", "if", "e", "in", "ent_attrs_dict", ":", "\n", "                ", "attrs", "=", "ent_attrs_dict", "[", "e", "]", "\n", "", "attrs", ".", "add", "(", "a", ")", "\n", "ent_attrs_dict", "[", "e", "]", "=", "attrs", "\n", "", "", "return", "ent_attrs_dict", ",", "ent_attr_value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.filter_by_aligned_entities": [[169, 179], ["set"], "function", ["None"], ["", "def", "filter_by_aligned_entities", "(", "attr_triples", ",", "ent_set", ")", ":", "\n", "    ", "attr_ents_dict", ",", "attr_ent_value_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attr_triples", ":", "\n", "        ", "if", "e", "in", "ent_set", "and", "(", "a", ",", "e", ")", "not", "in", "attr_ent_value_dict", ":", "\n", "            ", "attr_ent_value_dict", "[", "(", "a", ",", "e", ")", "]", "=", "v", "\n", "ents", "=", "set", "(", ")", "\n", "if", "a", "in", "attr_ents_dict", ":", "\n", "                ", "ents", "=", "attr_ents_dict", "[", "a", "]", "\n", "", "attr_ents_dict", "[", "e", "]", "=", "ents", "\n", "", "", "return", "attr_ents_dict", ",", "attr_ent_value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.cal_lcs_sim": [[181, 193], ["len", "len", "range", "float", "first_str.strip", "second_str.strip", "range", "float", "float", "max"], "function", ["None"], ["", "def", "cal_lcs_sim", "(", "first_str", ",", "second_str", ")", ":", "\n", "    ", "len_1", "=", "len", "(", "first_str", ".", "strip", "(", ")", ")", "\n", "len_2", "=", "len", "(", "second_str", ".", "strip", "(", ")", ")", "\n", "len_vv", "=", "[", "[", "0", "]", "*", "(", "len_2", "+", "2", ")", "]", "*", "(", "len_1", "+", "2", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len_1", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len_2", "+", "1", ")", ":", "\n", "            ", "if", "first_str", "[", "i", "-", "1", "]", "==", "second_str", "[", "j", "-", "1", "]", ":", "\n", "                ", "len_vv", "[", "i", "]", "[", "j", "]", "=", "1", "+", "len_vv", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "len_vv", "[", "i", "]", "[", "j", "]", "=", "max", "(", "len_vv", "[", "i", "-", "1", "]", "[", "j", "]", ",", "len_vv", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "float", "(", "float", "(", "len_vv", "[", "len_1", "]", "[", "len_2", "]", "*", "2", ")", "/", "float", "(", "len_1", "+", "len_2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.compute_two_values_similarity": [[195, 199], ["Levenshtein.ratio"], "function", ["None"], ["", "def", "compute_two_values_similarity", "(", "v1", ",", "v2", ")", ":", "\n", "# lcs_sim = cal_lcs_sim(v1, v2)", "\n", "# return lcs_sim/(Levenshtein.ratio(v1, v2)+lcs_sim)*2", "\n", "    ", "return", "Levenshtein", ".", "ratio", "(", "v1", ",", "v2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.imuse.get_aligned_attr_pair_by_name_similarity": [[201, 250], ["imuse.get_aligned_attr_pair_by_name_similarity.turn_id_attr_dict"], "function", ["None"], ["", "def", "get_aligned_attr_pair_by_name_similarity", "(", "kgs", ",", "sim_thresholds_attr", ",", "top_k", "=", "10", ")", ":", "\n", "    ", "def", "turn_id_attr_dict", "(", "attr_id_dict", ")", ":", "\n", "        ", "id_attr_dict", "=", "{", "}", "\n", "for", "a", ",", "i", "in", "attr_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_attr_dict", "[", "i", "]", "=", "a", "\n", "", "return", "id_attr_dict", "\n", "\n", "", "id_attr_dict_1", "=", "turn_id_attr_dict", "(", "kgs", ".", "kg1", ".", "attributes_id_dict", ")", "\n", "id_attr_dict_2", "=", "turn_id_attr_dict", "(", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "attr2_set", "=", "set", "(", ")", "\n", "for", "attr1", "in", "kgs", ".", "kg1", ".", "attributes_set", ":", "\n", "        ", "target_attr", "=", "None", "\n", "sim_max", "=", "sim_thresholds_attr", "\n", "attr_str_1", "=", "id_attr_dict_1", "[", "attr1", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "attr2", "in", "kgs", ".", "kg2", ".", "attributes_set", ":", "\n", "            ", "attr_str_2", "=", "id_attr_dict_2", "[", "attr2", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "sim", "=", "Levenshtein", ".", "ratio", "(", "attr_str_1", ",", "attr_str_2", ")", "\n", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_attr", "=", "attr2", "\n", "sim_max", "=", "sim", "\n", "", "", "if", "target_attr", "is", "not", "None", "and", "target_attr", "not", "in", "attr2_set", ":", "\n", "            ", "aligned_attr_pair_set", ".", "add", "(", "(", "attr1", ",", "target_attr", ")", ")", "\n", "attr2_set", ".", "add", "(", "target_attr", ")", "\n", "\n", "", "", "attr_num_dict_1", ",", "attr_num_dict_2", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "_", ",", "a", ",", "_", ")", "in", "kgs", ".", "kg1", ".", "attribute_triples_set", ":", "\n", "        ", "num", "=", "1", "\n", "if", "a", "in", "attr_num_dict_1", ":", "\n", "            ", "num", "+=", "attr_num_dict_1", "[", "a", "]", "\n", "", "attr_num_dict_1", "[", "a", "]", "=", "num", "\n", "", "for", "(", "_", ",", "a", ",", "_", ")", "in", "kgs", ".", "kg2", ".", "attribute_triples_set", ":", "\n", "        ", "num", "=", "1", "\n", "if", "a", "in", "attr_num_dict_2", ":", "\n", "            ", "num", "+=", "attr_num_dict_2", "[", "a", "]", "\n", "", "attr_num_dict_2", "[", "a", "]", "=", "num", "\n", "", "attr_pair_num_dict", "=", "{", "}", "\n", "for", "(", "a1", ",", "a2", ")", "in", "aligned_attr_pair_set", ":", "\n", "        ", "num", "=", "0", "\n", "if", "a1", "in", "attr_num_dict_1", ":", "\n", "            ", "num", "+=", "attr_num_dict_1", "[", "a1", "]", "\n", "", "if", "a2", "in", "attr_num_dict_2", ":", "\n", "            ", "num", "+=", "attr_num_dict_2", "[", "a2", "]", "\n", "", "attr_pair_num_dict", "[", "(", "a1", ",", "a2", ")", "]", "=", "num", "\n", "", "attr_pair_list", "=", "sorted", "(", "attr_pair_num_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "top_k", ">", "len", "(", "attr_pair_list", ")", ":", "\n", "        ", "top_k", "=", "len", "(", "attr_pair_list", ")", "\n", "", "aligned_attr_pair_set_top", "=", "set", "(", "[", "a_pair", "for", "(", "a_pair", ",", "_", ")", "in", "attr_pair_list", "[", ":", "top_k", "]", "]", ")", "\n", "return", "aligned_attr_pair_set_top", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.__init__": [[317, 319], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.init": [[320, 340], ["openea.approaches.predicate_alignmnet.PredicateAlignModel", "openea.approaches.predicate_alignmnet.PredicateAlignModel", "multi_ke.MultiKE._define_variables", "multi_ke.MultiKE._define_relation_view_graph", "multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph", "multi_ke.MultiKE._define_cross_kg_relation_reference_graph", "load_session", "tf.global_variables_initializer().run", "tf.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_relation_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_relation_reference_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "# self.entity_local_name_dict = self._get_local_name_by_name_triple()", "\n", "# print('len(self.entity_local_name_dict):', len(self.entity_local_name_dict))", "\n", "# self._generate_literal_vectors()", "\n", "# self._generate_name_vectors_mat()", "\n", "# self._generate_attribute_value_vectors()", "\n", "self", ".", "predicate_align_model", "=", "PredicateAlignModel", "(", "self", ".", "kgs", ",", "self", ".", "args", ")", "\n", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_relation_view_graph", "(", ")", "\n", "# self._define_attribute_view_graph()", "\n", "self", ".", "_define_cross_kg_entity_reference_relation_view_graph", "(", ")", "\n", "# self._define_cross_kg_entity_reference_attribute_view_graph()", "\n", "self", ".", "_define_cross_kg_relation_reference_graph", "(", ")", "\n", "# self._define_cross_kg_attribute_reference_graph()", "\n", "# self._define_common_space_learning_graph()", "\n", "# self._define_space_mapping_graph()", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._get_local_name_by_name_triple": [[341, 385], ["multi_ke.MultiKE.kgs.kg1.entities_id_dict.items", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.items", "print", "set", "multi_ke.MultiKE.kgs.kg1.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg2.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg1.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg2.attributes_id_dict.items", "print", "print", "print", "len", "len", "len", "set.add", "set.add", "print", "print", "[].replace", "id_ent_dict[].split"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "_get_local_name_by_name_triple", "(", "self", ",", "name_attribute_list", "=", "None", ")", ":", "\n", "        ", "if", "name_attribute_list", "is", "None", ":", "\n", "            ", "if", "'D_Y'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'skos:prefLabel'", ",", "'http://dbpedia.org/ontology/birthName'", "}", "\n", "", "elif", "'D_W'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'http://www.wikidata.org/entity/P373'", ",", "'http://www.wikidata.org/entity/P1476'", "}", "\n", "", "else", ":", "\n", "                ", "name_attribute_list", "=", "{", "}", "\n", "\n", "", "", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_set", "|", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_set", "\n", "id_ent_dict", "=", "{", "}", "\n", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "print", "(", "len", "(", "id_ent_dict", ")", ")", "\n", "\n", "name_ids", "=", "set", "(", ")", "\n", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "print", "(", "name_ids", ")", "\n", "\n", "local_name_dict", "=", "{", "}", "\n", "ents", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "print", "(", "len", "(", "ents", ")", ")", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "if", "a", "in", "name_ids", ":", "\n", "                ", "local_name_dict", "[", "id_ent_dict", "[", "e", "]", "]", "=", "v", "\n", "", "", "print", "(", "'after name_ids:'", ",", "len", "(", "local_name_dict", ")", ")", "\n", "for", "e", "in", "ents", ":", "\n", "            ", "if", "id_ent_dict", "[", "e", "]", "not", "in", "local_name_dict", ":", "\n", "                    ", "local_name_dict", "[", "id_ent_dict", "[", "e", "]", "]", "=", "id_ent_dict", "[", "e", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "", "return", "local_name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._generate_literal_vectors": [[386, 402], ["multi_ke.clear_attribute_triples", "multi_ke.clear_attribute_triples", "list", "list", "print", "multi_ke.read_word2vec", "openea.approaches.literal_encoder.LiteralEncoder", "openea.approaches.literal_encoder.LiteralEncoder", "dict", "range", "multi_ke.MultiKE.entity_local_name_dict.values", "set", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.read_word2vec"], ["", "def", "_generate_literal_vectors", "(", "self", ")", ":", "\n", "        ", "cleaned_attribute_triples_list1", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "cleaned_attribute_triples_list2", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "value_list", "=", "[", "v", "for", "(", "_", ",", "_", ",", "v", ")", "in", "cleaned_attribute_triples_list1", "+", "cleaned_attribute_triples_list2", "]", "\n", "local_name_list", "=", "list", "(", "self", ".", "entity_local_name_dict", ".", "values", "(", ")", ")", "\n", "self", ".", "literal_list", "=", "list", "(", "set", "(", "value_list", "+", "local_name_list", ")", ")", "\n", "print", "(", "'literal num:'", ",", "len", "(", "local_name_list", ")", ",", "len", "(", "value_list", ")", ",", "len", "(", "self", ".", "literal_list", ")", ")", "\n", "\n", "word2vec", "=", "read_word2vec", "(", "self", ".", "args", ".", "word2vec_path", ",", "self", ".", "args", ".", "word2vec_dim", ")", "\n", "literal_encoder", "=", "LiteralEncoder", "(", "self", ".", "literal_list", ",", "word2vec", ",", "self", ".", "args", ",", "300", ")", "\n", "self", ".", "literal_vectors_mat", "=", "literal_encoder", ".", "encoded_literal_vector", "\n", "assert", "self", ".", "literal_vectors_mat", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "literal_list", ")", "\n", "self", ".", "literal_id_dic", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "literal_list", ")", ")", ":", "\n", "            ", "self", ".", "literal_id_dic", "[", "self", ".", "literal_list", "[", "i", "]", "]", "=", "i", "\n", "", "assert", "len", "(", "self", ".", "literal_list", ")", "==", "len", "(", "self", ".", "literal_id_dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._generate_name_vectors_mat": [[403, 425], ["list", "len", "print", "dict", "dict", "dict.update", "print", "range", "print", "print", "zip", "zip", "len", "len", "dict.get", "multi_ke.MultiKE.entity_local_name_dict.get", "multi_ke.MultiKE.literal_id_dic.get", "list.append", "len", "type", "sklearn.preprocessing.normalize", "multi_ke.MultiKE.kgs.kg1.entities_id_dict.values", "multi_ke.MultiKE.kgs.kg1.entities_id_dict.keys", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.values", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "_generate_name_vectors_mat", "(", "self", ")", ":", "\n", "        ", "name_ordered_list", "=", "list", "(", ")", "\n", "num", "=", "len", "(", "self", ".", "entities", ")", "\n", "print", "(", "\"total entities:\"", ",", "num", ")", "\n", "entity_id_uris_dic", "=", "dict", "(", "zip", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "values", "(", ")", ",", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "entity_id_uris_dic2", "=", "dict", "(", "zip", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "values", "(", ")", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "entity_id_uris_dic", ".", "update", "(", "entity_id_uris_dic2", ")", "\n", "print", "(", "'total entities ids:'", ",", "len", "(", "entity_id_uris_dic", ")", ")", "\n", "assert", "len", "(", "entity_id_uris_dic", ")", "==", "num", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "assert", "i", "in", "entity_id_uris_dic", "\n", "entity_uri", "=", "entity_id_uris_dic", ".", "get", "(", "i", ")", "\n", "assert", "entity_uri", "in", "self", ".", "entity_local_name_dict", "\n", "entity_name", "=", "self", ".", "entity_local_name_dict", ".", "get", "(", "entity_uri", ")", "\n", "entity_name_index", "=", "self", ".", "literal_id_dic", ".", "get", "(", "entity_name", ")", "\n", "name_ordered_list", ".", "append", "(", "entity_name_index", ")", "\n", "", "print", "(", "'name_ordered_list'", ",", "len", "(", "name_ordered_list", ")", ")", "\n", "name_mat", "=", "self", ".", "literal_vectors_mat", "[", "name_ordered_list", ",", "]", "\n", "print", "(", "\"entity name embeddings mat:\"", ",", "type", "(", "name_mat", ")", ",", "name_mat", ".", "shape", ")", "\n", "if", "self", ".", "args", ".", "literal_normalize", ":", "\n", "            ", "name_mat", "=", "preprocessing", ".", "normalize", "(", "name_mat", ")", "\n", "", "self", ".", "local_name_vectors", "=", "name_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._generate_attribute_value_vectors": [[426, 467], ["set", "set", "multi_ke.clear_attribute_triples", "multi_ke.clear_attribute_triples", "print", "dict", "list", "len", "range", "set", "set", "multi_ke.MultiKE.kgs.kg1.set_attributes", "multi_ke.MultiKE.kgs.kg2.set_attributes", "openea.modules.load.read.generate_sup_attribute_triples", "openea.modules.load.read.generate_sup_attribute_triples", "multi_ke.MultiKE.kgs.kg1.add_sup_attribute_triples", "multi_ke.MultiKE.kgs.kg2.add_sup_attribute_triples", "len", "list", "range", "print", "print", "set", "set", "len", "len", "multi_ke.MultiKE.literal_id_dic.get", "list.append", "len", "type", "sklearn.preprocessing.normalize", "set.add", "attribute_triples_list1.add", "set.add", "attribute_triples_list2.add", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "_generate_attribute_value_vectors", "(", "self", ")", ":", "\n", "        ", "self", ".", "literal_set", "=", "set", "(", "self", ".", "literal_list", ")", "\n", "values_set", "=", "set", "(", ")", "\n", "cleaned_attribute_triples_list1", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "cleaned_attribute_triples_list2", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "attribute_triples_list1", ",", "attribute_triples_list2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "h", ",", "a", ",", "v", "in", "cleaned_attribute_triples_list1", ":", "\n", "            ", "if", "v", "in", "self", ".", "literal_set", ":", "\n", "                ", "values_set", ".", "add", "(", "v", ")", "\n", "attribute_triples_list1", ".", "add", "(", "(", "h", ",", "a", ",", "v", ")", ")", "\n", "\n", "", "", "for", "h", ",", "a", ",", "v", "in", "cleaned_attribute_triples_list2", ":", "\n", "            ", "if", "v", "in", "self", ".", "literal_set", ":", "\n", "                ", "values_set", ".", "add", "(", "v", ")", "\n", "attribute_triples_list2", ".", "add", "(", "(", "h", ",", "a", ",", "v", ")", ")", "\n", "", "", "print", "(", "\"selected attribute triples\"", ",", "len", "(", "attribute_triples_list1", ")", ",", "len", "(", "attribute_triples_list2", ")", ")", "\n", "values_id_dic", "=", "dict", "(", ")", "\n", "values_list", "=", "list", "(", "values_set", ")", "\n", "num", "=", "len", "(", "values_list", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "values_id_dic", "[", "values_list", "[", "i", "]", "]", "=", "i", "\n", "", "id_attribute_triples1", "=", "set", "(", "[", "(", "h", ",", "a", ",", "int", "(", "values_id_dic", "[", "v", "]", ")", ")", "for", "(", "h", ",", "a", ",", "v", ")", "in", "attribute_triples_list1", "]", ")", "\n", "id_attribute_triples2", "=", "set", "(", "[", "(", "h", ",", "a", ",", "int", "(", "values_id_dic", "[", "v", "]", ")", ")", "for", "(", "h", ",", "a", ",", "v", ")", "in", "attribute_triples_list2", "]", ")", "\n", "self", ".", "kgs", ".", "kg1", ".", "set_attributes", "(", "id_attribute_triples1", ")", "\n", "self", ".", "kgs", ".", "kg2", ".", "set_attributes", "(", "id_attribute_triples2", ")", "\n", "sup_triples1", ",", "sup_triples2", "=", "generate_sup_attribute_triples", "(", "self", ".", "kgs", ".", "train_links", ",", "self", ".", "kgs", ".", "kg1", ".", "av_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "av_dict", ")", "\n", "self", ".", "kgs", ".", "kg1", ".", "add_sup_attribute_triples", "(", "sup_triples1", ")", "\n", "self", ".", "kgs", ".", "kg2", ".", "add_sup_attribute_triples", "(", "sup_triples2", ")", "\n", "num", "=", "len", "(", "values_id_dic", ")", "\n", "value_ordered_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "value", "=", "values_list", "[", "i", "]", "\n", "value_index", "=", "self", ".", "literal_id_dic", ".", "get", "(", "value", ")", "\n", "value_ordered_list", ".", "append", "(", "value_index", ")", "\n", "", "print", "(", "'value_ordered_list'", ",", "len", "(", "value_ordered_list", ")", ")", "\n", "value_vectors", "=", "self", ".", "literal_vectors_mat", "[", "value_ordered_list", ",", "]", "\n", "print", "(", "\"value embeddings mat:\"", ",", "type", "(", "value_vectors", ")", ",", "value_vectors", ".", "shape", ")", "\n", "if", "self", ".", "args", ".", "literal_normalize", ":", "\n", "            ", "value_vectors", "=", "preprocessing", ".", "normalize", "(", "value_vectors", ")", "\n", "", "self", ".", "value_vectors", "=", "value_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_variables": [[468, 490], ["tf.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tf.variable_scope", "tf.variable_scope", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.constant", "numpy.eye", "tf.initializers.orthogonal", "tf.initializers.orthogonal", "tf.initializers.orthogonal"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "# with tf.variable_scope('literal' + 'embeddings'):", "\n", "#     self.literal_embeds = tf.constant(self.value_vectors, dtype=tf.float32)", "\n", "# with tf.variable_scope('name_view' + 'embeddings'):", "\n", "#     self.name_embeds = tf.constant(self.local_name_vectors, dtype=tf.float32)", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relation_view'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "rv_ent_embeds", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rv_ent_embeds'", ",", "True", ")", "\n", "self", ".", "rel_embeds", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "True", ")", "\n", "# with tf.variable_scope('attribute_view' + 'embeddings'):", "\n", "#     self.av_ent_embeds = xavier_init([self.kgs.entities_num, self.args.dim], 'av_ent_embeds', True)", "\n", "# False important!", "\n", "# self.attr_embeds = xavier_init([self.kgs.attributes_num, self.args.dim], 'attr_embeds', False)", "\n", "", "with", "tf", ".", "variable_scope", "(", "'shared'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "self", ".", "rv_ent_embeds", "# without name and attribute views", "\n", "", "with", "tf", ".", "variable_scope", "(", "'shared'", "+", "'combination'", ")", ":", "\n", "            ", "self", ".", "nv_mapping", "=", "tf", ".", "get_variable", "(", "'nv_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "rv_mapping", "=", "tf", ".", "get_variable", "(", "'rv_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "av_mapping", "=", "tf", ".", "get_variable", "(", "'av_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "eye_mat", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "self", ".", "args", ".", "dim", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'eye'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_relation_view_graph": [[493, 522], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.losses.logistic_loss", "openea.modules.base.losses.logistic_loss", "print", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_relation_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'relation_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'relation_triple_lookup'", ")", ":", "\n", "            ", "rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_pos_hs", ")", "\n", "rel_prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "rel_pos_rs", ")", "\n", "rel_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_pos_ts", ")", "\n", "rel_nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_neg_hs", ")", "\n", "rel_nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "rel_neg_rs", ")", "\n", "rel_nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'relation_triple_loss'", ")", ":", "\n", "            ", "self", ".", "relation_loss", "=", "logistic_loss", "(", "rel_phs", ",", "rel_prs", ",", "rel_pts", ",", "rel_nhs", ",", "rel_nrs", ",", "rel_nts", ",", "'L2'", ")", "\n", "print", "(", "\"relation cv\"", ")", "\n", "final_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "rel_pos_hs", ")", "\n", "final_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "rel_pos_ts", ")", "\n", "# name_phs = tf.nn.embedding_lookup(self.name_embeds, self.rel_pos_hs)", "\n", "# name_pts = tf.nn.embedding_lookup(self.name_embeds, self.rel_pos_ts)", "\n", "align_loss", "=", "positive_loss", "(", "final_phs", ",", "rel_prs", ",", "rel_pts", ",", "'L2'", ")", "\n", "align_loss", "+=", "positive_loss", "(", "rel_phs", ",", "rel_prs", ",", "final_pts", ",", "'L2'", ")", "\n", "# align_loss += 0.5 * alignment_loss(final_phs, name_phs)", "\n", "# align_loss += 0.5 * alignment_loss(final_pts, name_pts)", "\n", "self", ".", "relation_loss", "+=", "align_loss", "\n", "self", ".", "relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_attribute_view_graph": [[523, 547], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.variable_scope", "multi_ke.conv", "tf.log", "tf.multiply", "tf.reduce_sum", "print", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "multi_ke.conv", "tf.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.log", "multi_ke.alignment_loss", "tf.exp", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss"], ["", "", "def", "_define_attribute_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'attribute_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'attribute_triple_lookup'", ")", ":", "\n", "            ", "attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "attr_pos_as", ")", "\n", "attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "attr_pos_vs", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'cnn'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "attr_phs", ",", "attr_pas", ",", "attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "self", ".", "attr_pos_ws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "print", "(", "\"attribute cv\"", ")", "\n", "final_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "name_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "pos_score", "=", "conv", "(", "final_phs", ",", "attr_pas", ",", "attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_loss", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", ")", "\n", "pos_loss", "+=", "0.5", "*", "alignment_loss", "(", "final_phs", ",", "name_phs", ")", "\n", "self", ".", "attribute_loss", "=", "pos_loss", "\n", "self", ".", "attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph": [[550, 563], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss"], ["", "", "def", "_define_cross_kg_entity_reference_relation_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckge_rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_lookup'", ")", ":", "\n", "            ", "ckge_rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckge_rel_pos_hs", ")", "\n", "ckge_rel_prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "ckge_rel_pos_rs", ")", "\n", "ckge_rel_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckge_rel_pos_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_loss'", ")", ":", "\n", "            ", "self", ".", "ckge_relation_loss", "=", "2", "*", "positive_loss", "(", "ckge_rel_phs", ",", "ckge_rel_prs", ",", "ckge_rel_pts", ",", "'L2'", ")", "\n", "self", ".", "ckge_relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckge_relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_cross_kg_entity_reference_attribute_view_graph": [[564, 578], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.conv", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.reduce_sum", "tf.log", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_cross_kg_entity_reference_attribute_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckge_attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_lookup'", ")", ":", "\n", "            ", "ckge_attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "ckge_attr_pos_hs", ")", "\n", "ckge_attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "ckge_attr_pos_as", ")", "\n", "ckge_attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "ckge_attr_pos_vs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_loss'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "ckge_attr_phs", ",", "ckge_attr_pas", ",", "ckge_attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "self", ".", "ckge_attribute_loss", "=", "2", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", ")", "\n", "self", ".", "ckge_attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckge_attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_cross_kg_relation_reference_graph": [[579, 594], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "multi_ke.positive_loss_with_weight"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.positive_loss_with_weight"], ["", "", "def", "_define_cross_kg_relation_reference_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckgp_rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_lookup'", ")", ":", "\n", "            ", "ckgp_rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckgp_rel_pos_hs", ")", "\n", "ckgp_rel_prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "ckgp_rel_pos_rs", ")", "\n", "ckgp_rel_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckgp_rel_pos_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_loss'", ")", ":", "\n", "            ", "self", ".", "ckgp_relation_loss", "=", "2", "*", "positive_loss_with_weight", "(", "ckgp_rel_phs", ",", "ckgp_rel_prs", ",", "ckgp_rel_pts", ",", "\n", "self", ".", "ckgp_rel_pos_ws", ")", "\n", "self", ".", "ckgp_relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckgp_relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_cross_kg_attribute_reference_graph": [[595, 613], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.conv", "tf.log", "tf.multiply", "tf.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_cross_kg_attribute_reference_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckga_attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_lookup'", ")", ":", "\n", "            ", "ckga_attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "ckga_attr_pos_hs", ")", "\n", "ckga_attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "ckga_attr_pos_as", ")", "\n", "ckga_attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "ckga_attr_pos_vs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_loss'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "ckga_attr_phs", ",", "ckga_attr_pas", ",", "ckga_attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "self", ".", "ckga_attr_pos_ws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "self", ".", "ckga_attribute_loss", "=", "pos_loss", "\n", "self", ".", "ckga_attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckga_attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_common_space_learning_graph": [[616, 630], ["tf.name_scope", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.alignment_loss", "multi_ke.alignment_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_common_space_learning_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_name_view_placeholder'", ")", ":", "\n", "            ", "self", ".", "cn_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_name_view_lookup'", ")", ":", "\n", "            ", "final_cn_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "cn_hs", ")", "\n", "cn_hs_names", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "cn_hs", ")", "\n", "cr_hs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "cn_hs", ")", "\n", "ca_hs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "cn_hs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_name_view_loss'", ")", ":", "\n", "            ", "self", ".", "cross_name_loss", "=", "alignment_loss", "(", "final_cn_phs", ",", "cn_hs_names", ")", "\n", "self", ".", "cross_name_loss", "+=", "alignment_loss", "(", "final_cn_phs", ",", "cr_hs", ")", "\n", "# self.cross_name_loss += alignment_loss(final_cn_phs, ca_hs)", "\n", "self", ".", "cross_name_optimizer", "=", "generate_optimizer", "(", "self", ".", "args", ".", "cv_weight", "*", "self", ".", "cross_name_loss", ",", "\n", "self", ".", "args", ".", "ITC_learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE._define_space_mapping_graph": [[631, 650], ["tf.name_scope", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.space_mapping_loss", "multi_ke.space_mapping_loss", "multi_ke.space_mapping_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_space_mapping_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'final_entities_placeholder'", ")", ":", "\n", "            ", "self", ".", "entities", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "args", ".", "entity_batch_size", ",", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'multi_view_entities_lookup'", ")", ":", "\n", "            ", "final_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities", ")", "\n", "nv_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "entities", ")", "\n", "rv_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "entities", ")", "\n", "av_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "entities", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'mapping_loss'", ")", ":", "\n", "            ", "nv_space_mapping_loss", "=", "space_mapping_loss", "(", "nv_ents", ",", "final_ents", ",", "self", ".", "nv_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "rv_space_mapping_loss", "=", "space_mapping_loss", "(", "rv_ents", ",", "final_ents", ",", "self", ".", "rv_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "av_space_mapping_loss", "=", "space_mapping_loss", "(", "av_ents", ",", "final_ents", ",", "self", ".", "av_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "self", ".", "shared_comb_loss", "=", "nv_space_mapping_loss", "+", "rv_space_mapping_loss", "+", "av_space_mapping_loss", "\n", "opt_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "\"shared\"", ")", "]", "\n", "self", ".", "shared_comb_optimizer", "=", "generate_optimizer", "(", "self", ".", "shared_comb_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "var_list", "=", "opt_vars", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "# --- The followings are training for multi-view embeddings --- #", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_relation_view_1epo": [[652, 679], ["time.time", "range", "random.shuffle", "random.shuffle", "time.time", "print", "multiprocessing.Process().start", "batch_queue.get", "multi_ke.MultiKE.session.run", "len", "multiprocessing.Process"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "train_relation_view_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "relation_loss", ",", "self", ".", "relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "rel_neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "rel_neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_attribute_view_1epo": [[680, 707], ["time.time", "range", "random.shuffle", "random.shuffle", "time.time", "print", "multiprocessing.Process().start", "batch_queue.get", "multi_ke.MultiKE.session.run", "len", "multiprocessing.Process"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_attribute_view_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "generate_attribute_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights1", ",", "\n", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights2", ",", "\n", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights_set1", ",", "\n", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights_set2", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "attribute_batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "0", ")", ")", ".", "start", "(", ")", "\n", "", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "attribute_loss", ",", "self", ".", "attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights1", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights2", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of att. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo": [[710, 731], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_cross_kg_entity_inference_relation_view_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckge_relation_loss", ",", "self", ".", "ckge_relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckge_rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg entity inference in rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_cross_kg_entity_inference_attribute_view_1epo": [[732, 753], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_cross_kg_entity_inference_attribute_view_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "attribute_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "attribute_batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckge_attribute_loss", ",", "self", ".", "ckge_attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckge_attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg entity inference in attr. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_cross_kg_relation_inference_1epo": [[754, 776], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_cross_kg_relation_inference_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckgp_relation_loss", ",", "self", ".", "ckgp_relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckgp_rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg relation inference in rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_cross_kg_attribute_inference_1epo": [[777, 798], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_cross_kg_attribute_inference_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "attribute_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "attribute_batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckga_attribute_loss", ",", "self", ".", "ckga_attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckga_attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg attribute inference in attr. view, avg. loss: {:.4f}, time: {:.4f}s'", "\n", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_shared_space_mapping_1epo": [[799, 815], ["time.time", "int", "range", "time.time", "print", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_shared_space_mapping_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "entity_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "entity_batch_size", "if", "steps", ">", "1", "else", "len", "(", "entities", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "entities", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "shared_comb_loss", ",", "self", ".", "shared_comb_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "entities", ":", "batch_pos", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of shared space learning, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.train_common_space_learning_1epo": [[818, 834], ["time.time", "int", "range", "time.time", "print", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_common_space_learning_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "entity_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "entity_batch_size", "if", "steps", ">", "1", "else", "len", "(", "entities", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "entities", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "cross_name_loss", ",", "self", ".", "cross_name_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "cn_hs", ":", "batch_pos", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of common space learning, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.MultiKE.run": [[835, 921], ["time.time", "int", "int", "task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "math.ceil", "list", "print", "multi_ke.MultiKE.train_relation_view_1epo", "multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo", "range", "multi_ke.MultiKE.train_cross_kg_relation_inference_1epo", "multi_ke.valid_temp", "multi_ke.MultiKE.valid", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "multi_ke.MultiKE.predicate_align_model.update_predicate_alignment", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "print", "gc.collect", "multi_ke.MultiKE.rel_embeds.eval", "multi_ke.MultiKE.eval_kg1_useful_ent_embeddings", "multi_ke.MultiKE.eval_kg2_useful_ent_embeddings", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_relation_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_relation_inference_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_temp", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_num", "\n", "attribute_triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_num", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "attribute_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "attribute_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "# attribute_step_tasks = task_divide(list(range(attribute_triple_steps)), self.args.batch_threads_num)", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "# attribute_batch_queue = manager.Queue()", "\n", "cross_kg_relation_triples", "=", "self", ".", "kgs", ".", "kg1", ".", "sup_relation_triples_list", "+", "self", ".", "kgs", ".", "kg2", ".", "sup_relation_triples_list", "\n", "# cross_kg_entity_inference_in_attribute_triples = self.kgs.kg1.sup_attribute_triples_list + \\", "\n", "#                                                  self.kgs.kg2.sup_attribute_triples_list", "\n", "cross_kg_relation_inference", "=", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples1", "+", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples2", "\n", "# cross_kg_attribute_inference = self.predicate_align_model.sup_attribute_alignment_triples1 + \\", "\n", "#                                self.predicate_align_model.sup_attribute_alignment_triples2", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "entity_list", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "+", "self", ".", "kgs", ".", "kg2", ".", "entities_list", "\n", "\n", "# valid_temp(self, embed_choice='nv')", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "print", "(", "'epoch {}:'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "train_relation_view_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "\n", "neighbors1", ",", "neighbors2", ")", "\n", "# self.train_common_space_learning_1epo(i, entity_list)", "\n", "self", ".", "train_cross_kg_entity_inference_relation_view_1epo", "(", "i", ",", "cross_kg_relation_triples", ")", "\n", "if", "i", ">", "self", ".", "args", ".", "start_predicate_soft_alignment", ":", "\n", "                ", "self", ".", "train_cross_kg_relation_inference_1epo", "(", "i", ",", "cross_kg_relation_inference", ")", "\n", "\n", "# self.train_attribute_view_1epo(i, attribute_triple_steps, attribute_step_tasks, attribute_batch_queue,", "\n", "#                                neighbors1, neighbors2)", "\n", "# self.train_common_space_learning_1epo(i, entity_list)", "\n", "# self.train_cross_kg_entity_inference_attribute_view_1epo(i, cross_kg_entity_inference_in_attribute_triples)", "\n", "# if i > self.args.start_predicate_soft_alignment:", "\n", "#     self.train_cross_kg_attribute_inference_1epo(i, cross_kg_attribute_inference)", "\n", "\n", "", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "valid_temp", "(", "self", ",", "embed_choice", "=", "'rv'", ")", "\n", "# valid_temp(self, embed_choice='av')", "\n", "# valid_temp(self, embed_choice='final')", "\n", "# valid_temp(self, embed_choice='avg')", "\n", "# valid_WVA(self)", "\n", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "i", ">=", "self", ".", "args", ".", "start_predicate_soft_alignment", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "self", ".", "predicate_align_model", ".", "update_predicate_alignment", "(", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "# self.predicate_align_model.update_predicate_alignment(self.attr_embeds.eval(session=self.session),", "\n", "#                                                       predicate_type='attribute')", "\n", "cross_kg_relation_inference", "=", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples1", "+", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples2", "\n", "# cross_kg_attribute_inference = self.predicate_align_model.sup_attribute_alignment_triples1 + \\", "\n", "#                                self.predicate_align_model.sup_attribute_alignment_triples2", "\n", "\n", "# if self.early_stop or i == self.args.max_epoch:", "\n", "#     break", "\n", "\n", "", "if", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "and", "i", "%", "self", ".", "args", ".", "truncated_freq", "==", "0", ":", "\n", "                ", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                    ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"\\ngenerating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# for i in range(1, self.args.shared_learning_max_epoch + 1):", "\n", "#     self.train_shared_space_mapping_1epo(i, entity_list)", "\n", "#     if i >= self.args.start_valid and i % self.args.eval_freq == 0:", "\n", "#         self.valid(self)", "\n", "# test_WVA(self)", "\n", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.test_WVA": [[23, 57], ["tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "print", "print", "openea.valid", "gc.collect", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["def", "test_WVA", "(", "model", ")", ":", "\n", "    ", "nv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight11", ",", "weight21", ",", "weight31", "=", "wva", "(", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", ")", "\n", "\n", "test_list", "=", "model", ".", "kgs", ".", "test_entities2", "\n", "nv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight12", ",", "weight22", ",", "weight32", "=", "wva", "(", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", ")", "\n", "\n", "weight1", "=", "weight11", "+", "weight12", "\n", "weight2", "=", "weight21", "+", "weight22", "\n", "weight3", "=", "weight31", "+", "weight32", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "\n", "print", "(", "'weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "\n", "embeds1", "=", "weight1", "*", "nv_ent_embeds1", "+", "weight2", "*", "rv_ent_embeds1", "+", "weight3", "*", "av_ent_embeds1", "\n", "embeds2", "=", "weight1", "*", "nv_ent_embeds2", "+", "weight2", "*", "rv_ent_embeds2", "+", "weight3", "*", "av_ent_embeds2", "\n", "print", "(", "'wvag test results:'", ")", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke._compute_weight": [[59, 71], ["sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.matmul", "numpy.diag", "numpy.mean", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "_compute_weight", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", ":", "\n", "    ", "def", "min_max_normalization", "(", "mat", ")", ":", "\n", "        ", "min_", "=", "np", ".", "min", "(", "mat", ")", "\n", "max_", "=", "np", ".", "max", "(", "mat", ")", "\n", "return", "(", "mat", "-", "min_", ")", "/", "(", "max_", "-", "min_", ")", "\n", "\n", "", "other_embeds", "=", "(", "embeds1", "+", "embeds2", "+", "embeds3", ")", "/", "3", "\n", "other_embeds", "=", "preprocessing", ".", "normalize", "(", "other_embeds", ")", "\n", "embeds1", "=", "preprocessing", ".", "normalize", "(", "embeds1", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "embeds1", ",", "other_embeds", ".", "T", ")", "\n", "weights", "=", "np", ".", "diag", "(", "sim_mat", ")", "\n", "return", "np", ".", "mean", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.wva": [[73, 87], ["multi_ke._compute_weight", "multi_ke._compute_weight", "multi_ke._compute_weight", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "wva", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", ":", "\n", "    ", "weight1", "=", "_compute_weight", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", "\n", "weight2", "=", "_compute_weight", "(", "embeds2", ",", "embeds1", ",", "embeds3", ")", "\n", "weight3", "=", "_compute_weight", "(", "embeds3", ",", "embeds1", ",", "embeds2", ")", "\n", "return", "weight1", ",", "weight2", ",", "weight3", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "print", "(", "'final weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "ent_embeds", "=", "weight1", "*", "embeds1", "+", "weight2", "*", "embeds2", "+", "weight3", "*", "embeds3", "\n", "return", "ent_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.valid_WVA": [[89, 127], ["tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "print", "print", "openea.valid", "gc.collect", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_WVA", "(", "model", ")", ":", "\n", "    ", "nv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight11", ",", "weight21", ",", "weight31", "=", "wva", "(", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", ")", "\n", "\n", "test_list", "=", "model", ".", "kgs", ".", "valid_entities2", "+", "model", ".", "kgs", ".", "test_entities2", "\n", "nv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight12", ",", "weight22", ",", "weight32", "=", "wva", "(", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", ")", "\n", "\n", "weight1", "=", "weight11", "+", "weight12", "\n", "weight2", "=", "weight21", "+", "weight22", "\n", "weight3", "=", "weight31", "+", "weight32", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "\n", "print", "(", "'weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "\n", "embeds1", "=", "weight1", "*", "nv_ent_embeds1", "+", "weight2", "*", "rv_ent_embeds1", "+", "weight3", "*", "av_ent_embeds1", "\n", "embeds2", "=", "weight1", "*", "nv_ent_embeds2", "+", "weight2", "*", "rv_ent_embeds2", "+", "weight3", "*", "av_ent_embeds2", "\n", "print", "(", "'wvag valid results:'", ")", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "del", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", "\n", "del", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.valid_temp": [[129, 152], ["print", "openea.valid", "gc.collect", "model.name_embeds.eval", "model.rv_ent_embeds.eval", "model.av_ent_embeds.eval", "model.ent_embeds.eval", "model.av_ent_embeds.eval", "model.name_embeds.eval", "model.rv_ent_embeds.eval"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_temp", "(", "model", ",", "embed_choice", "=", "'avg'", ",", "w", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "    ", "if", "embed_choice", "==", "'nv'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "name_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'rv'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "rv_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'av'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "av_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'final'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'avg'", ":", "\n", "        ", "ent_embeds", "=", "w", "[", "0", "]", "*", "model", ".", "name_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "+", "w", "[", "1", "]", "*", "model", ".", "rv_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "+", "w", "[", "2", "]", "*", "model", ".", "av_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "else", ":", "# 'final'", "\n", "        ", "ent_embeds", "=", "model", ".", "ent_embeds", "\n", "", "print", "(", "embed_choice", ",", "'valid results:'", ")", "\n", "embeds1", "=", "ent_embeds", "[", "model", ".", "kgs", ".", "valid_entities1", ",", "]", "\n", "embeds2", "=", "ent_embeds", "[", "model", ".", "kgs", ".", "valid_entities2", "+", "model", ".", "kgs", ".", "test_entities2", ",", "]", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.conv": [[154, 177], ["tf.reshape", "tf.reshape", "tf.concat", "tf.concat.shape.as_list", "tf.reshape", "tf.layers.batch_normalization", "range", "tf.nn.l2_normalize", "tf.layers.conv2d.shape.as_list", "tf.reshape", "tf.layers.dense", "tf.nn.l2_normalize", "tf.layers.conv2d", "tf.reduce_sum", "tf.square"], "function", ["None"], ["", "def", "conv", "(", "attr_hs", ",", "attr_as", ",", "attr_vs", ",", "dim", ",", "feature_map_size", "=", "2", ",", "kernel_size", "=", "[", "2", ",", "4", "]", ",", "activation", "=", "tf", ".", "nn", ".", "tanh", ",", "layer_num", "=", "2", ")", ":", "\n", "    ", "attr_as", "=", "tf", ".", "reshape", "(", "attr_as", ",", "[", "-", "1", ",", "1", ",", "dim", "]", ")", "\n", "attr_vs", "=", "tf", ".", "reshape", "(", "attr_vs", ",", "[", "-", "1", ",", "1", ",", "dim", "]", ")", "\n", "\n", "input_avs", "=", "tf", ".", "concat", "(", "[", "attr_as", ",", "attr_vs", "]", ",", "1", ")", "\n", "input_shape", "=", "input_avs", ".", "shape", ".", "as_list", "(", ")", "\n", "input_layer", "=", "tf", ".", "reshape", "(", "input_avs", ",", "[", "-", "1", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "1", "]", ")", "\n", "_conv", "=", "input_layer", "\n", "_conv", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "_conv", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "        ", "_conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "inputs", "=", "_conv", ",", "\n", "filters", "=", "feature_map_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "activation", "=", "activation", ")", "\n", "", "_conv", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "_conv", ",", "2", ")", "\n", "_shape", "=", "_conv", ".", "shape", ".", "as_list", "(", ")", "\n", "_flat", "=", "tf", ".", "reshape", "(", "_conv", ",", "[", "-", "1", ",", "_shape", "[", "1", "]", "*", "_shape", "[", "2", "]", "*", "_shape", "[", "3", "]", "]", ")", "\n", "dense", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "_flat", ",", "units", "=", "dim", ",", "activation", "=", "activation", ")", "\n", "dense", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "dense", ")", "# important!!", "\n", "score", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "attr_hs", "-", "dense", ")", ",", "1", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.read_word2vec": [[179, 191], ["print", "dict", "file.close", "open", "line.strip().split.strip().split", "numpy.array", "len", "list", "line.strip().split.strip", "map"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_word2vec", "(", "file_path", ",", "vector_dimension", ")", ":", "\n", "    ", "print", "(", "'\\n'", ",", "file_path", ")", "\n", "word2vec", "=", "dict", "(", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "!=", "vector_dimension", "+", "1", ":", "\n", "                ", "continue", "\n", "", "v", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "line", "[", "1", ":", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word2vec", "[", "line", "[", "0", "]", "]", "=", "v", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.clear_attribute_triples": [[193, 234], ["print", "set", "set", "set", "print", "print", "len", "attr_num.keys", "len", "v.replace().replace().replace.endswith", "multi_ke.is_number", "v.replace().replace().replace.replace().replace().replace().replace().replace", "v.replace().replace().replace.replace().replace().replace", "set.append", "len", "set.add", "set.add", "literals_number.append", "literals_string.append", "v.replace().replace().replace.replace().replace().replace().replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.index", "v.replace().replace().replace.index", "v.replace().replace().replace.replace().replace().replace", "v.replace().replace().replace.replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.is_number", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index"], ["", "def", "clear_attribute_triples", "(", "attribute_triples", ")", ":", "\n", "    ", "print", "(", "'\\nbefore clear:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "# step 1", "\n", "attribute_triples_new", "=", "set", "(", ")", "\n", "attr_num", "=", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "_", ")", "in", "attribute_triples", ":", "\n", "        ", "ent_num", "=", "1", "\n", "if", "a", "in", "attr_num", ":", "\n", "            ", "ent_num", "+=", "attr_num", "[", "a", "]", "\n", "", "attr_num", "[", "a", "]", "=", "ent_num", "\n", "", "attr_set", "=", "set", "(", "attr_num", ".", "keys", "(", ")", ")", "\n", "attr_set_new", "=", "set", "(", ")", "\n", "for", "a", "in", "attr_set", ":", "\n", "        ", "if", "attr_num", "[", "a", "]", ">=", "10", ":", "\n", "            ", "attr_set_new", ".", "add", "(", "a", ")", "\n", "", "", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "a", "in", "attr_set_new", ":", "\n", "            ", "attribute_triples_new", ".", "add", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 1:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "\n", "# step 2", "\n", "attribute_triples_new", "=", "[", "]", "\n", "literals_number", ",", "literals_string", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "'\"^^'", "in", "v", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"^^'", ")", "]", "\n", "", "if", "v", ".", "endswith", "(", "'\"@en'", ")", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"@en'", ")", "]", "\n", "", "if", "is_number", "(", "v", ")", ":", "\n", "            ", "literals_number", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "literals_string", ".", "append", "(", "v", ")", "\n", "", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "v", "=", "v", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", "\n", "if", "'http'", "in", "v", ":", "\n", "            ", "continue", "\n", "", "attribute_triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 2:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "return", "attribute_triples", ",", "literals_number", ",", "literals_string", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.is_number": [[236, 249], ["float", "unicodedata.numeric"], "function", ["None"], ["", "def", "is_number", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "import", "unicodedata", "\n", "unicodedata", ".", "numeric", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.generate_neg_attribute_triples": [[251, 264], ["list", "dict", "range", "len", "list.append", "len", "random.choice", "dict.get"], "function", ["None"], ["", "def", "generate_neg_attribute_triples", "(", "pos_batch", ",", "all_triples_set", ",", "entity_list", ",", "neg_triples_num", ",", "neighbor", "=", "None", ")", ":", "\n", "    ", "if", "neighbor", "is", "None", ":", "\n", "        ", "neighbor", "=", "dict", "(", ")", "\n", "", "neg_batch", "=", "list", "(", ")", "\n", "for", "head", ",", "attribute", ",", "value", ",", "w", "in", "pos_batch", ":", "\n", "        ", "for", "i", "in", "range", "(", "neg_triples_num", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "neg_head", "=", "random", ".", "choice", "(", "neighbor", ".", "get", "(", "head", ",", "entity_list", ")", ")", "\n", "if", "(", "neg_head", ",", "attribute", ",", "value", ",", "w", ")", "not", "in", "all_triples_set", ":", "\n", "                    ", "break", "\n", "", "", "neg_batch", ".", "append", "(", "(", "neg_head", ",", "attribute", ",", "value", ",", "w", ")", ")", "\n", "", "", "assert", "len", "(", "neg_batch", ")", "==", "neg_triples_num", "*", "len", "(", "pos_batch", ")", "\n", "return", "neg_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.generate_attribute_triple_batch_queue": [[266, 275], ["exit", "multi_ke.generate_attribute_triple_batch", "out_queue.put"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_attribute_triple_batch"], ["", "def", "generate_attribute_triple_batch_queue", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "entity_list1", ",", "\n", "entity_list2", ",", "batch_size", ",", "steps", ",", "out_queue", ",", "neighbor1", ",", "neighbor2", ",", "\n", "neg_triples_num", ")", ":", "\n", "    ", "for", "step", "in", "steps", ":", "\n", "        ", "pos_batch", ",", "neg_batch", "=", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_batch", ",", "neg_batch", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.generate_attribute_triple_batch": [[277, 289], ["int", "openea.generate_pos_triples", "openea.generate_pos_triples", "multi_ke.generate_neg_attribute_triples", "multi_ke.generate_neg_attribute_triples", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples"], ["", "def", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", ":", "\n", "    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "pos_batch1", "=", "bat", ".", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ")", "\n", "pos_batch2", "=", "bat", ".", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ")", "\n", "neg_batch1", "=", "generate_neg_attribute_triples", "(", "pos_batch1", ",", "triple_set1", ",", "entity_list1", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor1", ")", "\n", "neg_batch2", "=", "generate_neg_attribute_triples", "(", "pos_batch2", ",", "triple_set2", ",", "entity_list2", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor2", ")", "\n", "return", "pos_batch1", "+", "pos_batch2", ",", "neg_batch1", "+", "neg_batch2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.positive_loss_with_weight": [[291, 298], ["tf.log", "tf.multiply", "tf.reduce_sum", "tf.reduce_sum", "tf.square", "tf.exp"], "function", ["None"], ["", "def", "positive_loss_with_weight", "(", "phs", ",", "pas", ",", "pvs", ",", "pws", ")", ":", "\n", "    ", "pos_distance", "=", "phs", "+", "pas", "-", "pvs", "\n", "pos_score", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "pws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "return", "pos_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.alignment_loss": [[300, 304], ["tf.reduce_sum", "tf.reduce_sum", "tf.square"], "function", ["None"], ["", "def", "alignment_loss", "(", "ents1", ",", "ents2", ")", ":", "\n", "    ", "distance", "=", "ents1", "-", "ents2", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "distance", ")", ",", "axis", "=", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.multi_ke.space_mapping_loss": [[306, 313], ["tf.matmul", "tf.nn.l2_normalize", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.square", "tf.square", "tf.pow", "tf.matmul"], "function", ["None"], ["", "def", "space_mapping_loss", "(", "view_embeds", ",", "shared_embeds", ",", "mapping", ",", "eye", ",", "orthogonal_weight", ",", "norm_w", "=", "0.0001", ")", ":", "\n", "    ", "mapped_ents2", "=", "tf", ".", "matmul", "(", "view_embeds", ",", "mapping", ")", "\n", "mapped_ents2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "mapped_ents2", ")", "\n", "map_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "shared_embeds", "-", "mapped_ents2", ")", ",", "1", ")", ")", "\n", "norm_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "mapping", ")", ",", "1", ")", ")", "\n", "orthogonal_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "tf", ".", "matmul", "(", "mapping", ",", "mapping", ",", "transpose_b", "=", "True", ")", "-", "eye", ",", "2", ")", ",", "1", ")", ")", "\n", "return", "map_loss", "+", "orthogonal_weight", "*", "orthogonal_loss", "+", "norm_w", "*", "norm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.__init__": [[20, 25], ["openea.models.basic_model.BasicModel.__init__", "openea.approaches.attr2vec.Attr2Vec"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attr2vec", "=", "Attr2Vec", "(", ")", "\n", "self", ".", "attr_sim_mat", "=", "None", "\n", "self", ".", "ref_entities1", ",", "self", ".", "ref_entities2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.init": [[26, 51], ["jape.JAPE._define_variables", "jape.JAPE._define_embed_graph", "jape.JAPE._define_sim_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE._define_sim_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "ref_entities1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_entities2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_sim_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">=", "1", "\n", "assert", "self", ".", "args", ".", "neg_alpha", ">=", "0.0", "\n", "assert", "self", ".", "args", ".", "top_attr_threshold", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "attr_sim_mat_threshold", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "attr_sim_mat_beta", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE._define_variables": [[52, 58], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE._define_embed_graph": [[59, 85], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'jape_loss_distance'", ")", ":", "\n", "                ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "neg_distance", "=", "nhs", "+", "nrs", "-", "nts", "\n", "", "with", "tf", ".", "name_scope", "(", "'jape_loss_score'", ")", ":", "\n", "                ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "neg_score", ")", "\n", "self", ".", "triple_loss", "=", "pos_loss", "-", "self", ".", "args", ".", "neg_alpha", "*", "neg_loss", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE._define_sim_graph": [[86, 99], ["tensorflow.placeholder", "len", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.nn.l2_normalize", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.trainable_variables", "v.name.startswith", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_sim_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "dim1", "=", "self", ".", "args", ".", "sub_mat_size", "\n", "dim2", "=", "len", "(", "self", ".", "ref_entities2", ")", "\n", "self", ".", "attr_sim_mat_place", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "dim1", ",", "dim2", "]", ")", "\n", "ref1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities1", ")", "\n", "ref2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_entities2", ")", "\n", "ref2_trans", "=", "tf", ".", "matmul", "(", "self", ".", "attr_sim_mat_place", ",", "ref2", ")", "\n", "ref2_trans", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ref2_trans", ",", "1", ")", "\n", "self", ".", "sim_loss", "=", "self", ".", "args", ".", "attr_sim_mat_beta", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "ref1", "-", "ref2_trans", ",", "2", ")", ",", "1", ")", ")", "\n", "opt_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "\"relational\"", ")", "]", "\n", "self", ".", "sim_optimizer", "=", "generate_optimizer", "(", "self", ".", "sim_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "var_list", "=", "opt_vars", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.launch_triple_training_1epo": [[100, 126], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "jape.JAPE.session.run", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.launch_sim_1epo": [[127, 139], ["time.time", "numpy.array", "list", "range", "print", "len", "range", "random.sample", "jape.JAPE.session.run", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_sim_1epo", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "steps", "=", "len", "(", "self", ".", "ref_entities1", ")", "//", "self", ".", "args", ".", "sub_mat_size", "\n", "ref_ent1_array", "=", "np", ".", "array", "(", "self", ".", "ref_entities1", ")", "\n", "ll", "=", "list", "(", "range", "(", "len", "(", "self", ".", "ref_entities1", ")", ")", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "ll", ",", "self", ".", "args", ".", "sub_mat_size", ")", "\n", "feed_dict", "=", "{", "self", ".", "entities1", ":", "ref_ent1_array", "[", "idx", "]", ",", "self", ".", "attr_sim_mat_place", ":", "self", ".", "attr_sim_mat", "[", "idx", ",", ":", "]", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "self", ".", "sim_loss", ",", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "+=", "vals", "\n", "", "print", "(", "'epoch {}, sim loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "loss", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.run_attr2vec": [[140, 151], ["time.time", "print", "jape.JAPE.attr2vec.set_args", "jape.JAPE.attr2vec.set_kgs", "jape.JAPE.attr2vec.init", "jape.JAPE.attr2vec.run", "jape.JAPE.attr2vec.eval_sim_mat", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "run_attr2vec", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Training attribute embeddings:\"", ")", "\n", "self", ".", "attr2vec", ".", "set_args", "(", "self", ".", "args", ")", "\n", "self", ".", "attr2vec", ".", "set_kgs", "(", "self", ".", "kgs", ")", "\n", "self", ".", "attr2vec", ".", "init", "(", ")", "\n", "self", ".", "attr2vec", ".", "run", "(", ")", "\n", "sim_mat", "=", "self", ".", "attr2vec", ".", "eval_sim_mat", "(", ")", "\n", "sim_mat", "[", "sim_mat", "<", "self", ".", "args", ".", "attr_sim_mat_threshold", "]", "=", "0", "\n", "self", ".", "attr_sim_mat", "=", "sim_mat", "\n", "print", "(", "\"Training attributes ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.jape.JAPE.run": [[152, 170], ["print", "time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "jape.JAPE.launch_triple_training_1epo", "range", "jape.JAPE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "# self.run_attr2vec()", "\n", "        ", "print", "(", "\"Joint training:\"", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "#            self.launch_sim_1epo(i)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.PredicateAlignModel.__init__": [[142, 170], ["predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.init_predicate_alignment", "predicate_alignmnet.init_predicate_alignment", "predicate_alignmnet.PredicateAlignModel.update_relation_triples", "predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "set", "set", "set", "set", "predicate_alignmnet.PredicateAlignModel.kgs.kg1.relations_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg1.attributes_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg2.relations_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg2.attributes_id_dict.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.init_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.init_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["    ", "def", "__init__", "(", "self", ",", "kgs", ",", "args", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "relation_name_dict1", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "attribute_name_dict1", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "relation_name_dict2", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "attribute_name_dict2", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "self", ".", "relation_id_alignment_set", "=", "None", "\n", "self", ".", "train_relations1", ",", "self", ".", "train_relations2", "=", "None", ",", "None", "\n", "self", ".", "sup_relation_alignment_triples1", ",", "self", ".", "sup_relation_alignment_triples2", "=", "None", ",", "None", "\n", "self", ".", "relation_triples_w_weights1", ",", "self", ".", "relation_triples_w_weights2", "=", "None", ",", "None", "\n", "self", ".", "relation_triples_w_weights_set1", ",", "self", ".", "relation_triples_w_weights_set2", "=", "None", ",", "None", "\n", "\n", "self", ".", "attribute_id_alignment_set", "=", "None", "\n", "self", ".", "train_attributes1", ",", "self", ".", "train_attributes2", "=", "None", ",", "None", "\n", "self", ".", "sup_attribute_alignment_triples1", ",", "self", ".", "sup_attribute_alignment_triples2", "=", "None", ",", "None", "\n", "self", ".", "attribute_triples_w_weights1", ",", "self", ".", "attribute_triples_w_weights2", "=", "None", ",", "None", "\n", "self", ".", "attribute_triples_w_weights_set1", ",", "self", ".", "attribute_triples_w_weights_set2", "=", "None", ",", "None", "\n", "\n", "self", ".", "relation_alignment_set", ",", "self", ".", "relation_latent_match_pairs_similarity_dict_init", "=", "init_predicate_alignment", "(", "self", ".", "relation_name_dict1", ",", "self", ".", "relation_name_dict2", ",", "self", ".", "args", ".", "predicate_init_sim", ")", "\n", "self", ".", "attribute_alignment_set", ",", "self", ".", "attribute_latent_match_pairs_similarity_dict_init", "=", "init_predicate_alignment", "(", "self", ".", "attribute_name_dict1", ",", "self", ".", "attribute_name_dict2", ",", "self", ".", "args", ".", "predicate_init_sim", ")", "\n", "self", ".", "relation_alignment_set_init", "=", "self", ".", "relation_alignment_set", "\n", "self", ".", "attribute_alignment_set_init", "=", "self", ".", "attribute_alignment_set", "\n", "self", ".", "update_relation_triples", "(", "self", ".", "relation_alignment_set", ")", "\n", "self", ".", "update_attribute_triples", "(", "self", ".", "attribute_alignment_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.PredicateAlignModel.update_attribute_triples": [[171, 185], ["predicate_alignmnet.predicate2id_matched_pairs", "predicate_alignmnet.generate_sup_predicate_triples", "predicate_alignmnet.add_weights"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.predicate2id_matched_pairs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.generate_sup_predicate_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.add_weights"], ["", "def", "update_attribute_triples", "(", "self", ",", "attribute_alignment_set", ")", ":", "\n", "        ", "self", ".", "attribute_id_alignment_set", "=", "predicate2id_matched_pairs", "(", "attribute_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "self", ".", "train_attributes1", "=", "[", "a", "for", "(", "a", ",", "_", ",", "_", ")", "in", "self", ".", "attribute_id_alignment_set", "]", "\n", "self", ".", "train_attributes2", "=", "[", "a", "for", "(", "_", ",", "a", ",", "_", ")", "in", "self", ".", "attribute_id_alignment_set", "]", "\n", "self", ".", "sup_attribute_alignment_triples1", ",", "self", ".", "sup_attribute_alignment_triples2", "=", "generate_sup_predicate_triples", "(", "self", ".", "attribute_id_alignment_set", ",", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "self", ".", "attribute_triples_w_weights1", ",", "self", ".", "attribute_triples_w_weights2", ",", "self", ".", "attribute_triples_w_weights_set1", ",", "self", ".", "attribute_triples_w_weights_set2", "=", "add_weights", "(", "self", ".", "attribute_id_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "args", ".", "predicate_soft_sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.PredicateAlignModel.update_relation_triples": [[186, 200], ["predicate_alignmnet.predicate2id_matched_pairs", "predicate_alignmnet.generate_sup_predicate_triples", "predicate_alignmnet.add_weights"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.predicate2id_matched_pairs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.generate_sup_predicate_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.add_weights"], ["", "def", "update_relation_triples", "(", "self", ",", "relation_alignment_set", ")", ":", "\n", "        ", "self", ".", "relation_id_alignment_set", "=", "predicate2id_matched_pairs", "(", "relation_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", ")", "\n", "self", ".", "train_relations1", "=", "[", "a", "for", "(", "a", ",", "_", ",", "_", ")", "in", "self", ".", "relation_id_alignment_set", "]", "\n", "self", ".", "train_relations2", "=", "[", "a", "for", "(", "_", ",", "a", ",", "_", ")", "in", "self", ".", "relation_id_alignment_set", "]", "\n", "self", ".", "sup_relation_alignment_triples1", ",", "self", ".", "sup_relation_alignment_triples2", "=", "generate_sup_predicate_triples", "(", "self", ".", "relation_id_alignment_set", ",", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ")", "\n", "self", ".", "relation_triples_w_weights1", ",", "self", ".", "relation_triples_w_weights2", ",", "self", ".", "relation_triples_w_weights_set1", ",", "self", ".", "relation_triples_w_weights_set2", "=", "add_weights", "(", "self", ".", "relation_id_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ",", "\n", "self", ".", "args", ".", "predicate_soft_sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.PredicateAlignModel.update_predicate_alignment": [[201, 232], ["predicate_alignmnet.find_predicate_alignment_by_embedding", "set", "print", "len", "predicate_alignmnet.PredicateAlignModel.update_relation_triples", "predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "set.add"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.find_predicate_alignment_by_embedding", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_attribute_triples"], ["", "def", "update_predicate_alignment", "(", "self", ",", "embed", ",", "predicate_type", "=", "'relation'", ",", "w", "=", "0.7", ")", ":", "\n", "        ", "if", "predicate_type", "==", "'relation'", ":", "\n", "            ", "predicate_list1", ",", "predicate_list2", "=", "self", ".", "kgs", ".", "kg1", ".", "relations_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relations_list", "\n", "predicate_id_dict1", ",", "predicate_id_dict2", "=", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ",", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", "\n", "predicate_alignment_set_init", "=", "self", ".", "relation_alignment_set_init", "\n", "", "else", ":", "\n", "            ", "predicate_list1", ",", "predicate_list2", "=", "self", ".", "kgs", ".", "kg1", ".", "attributes_list", ",", "self", ".", "kgs", ".", "kg2", ".", "attributes_list", "\n", "predicate_id_dict1", ",", "predicate_id_dict2", "=", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ",", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", "\n", "predicate_alignment_set_init", "=", "self", ".", "attribute_alignment_set_init", "\n", "\n", "", "predicate_latent_match_pairs_similarity_dict", "=", "find_predicate_alignment_by_embedding", "(", "embed", ",", "predicate_list1", ",", "predicate_list2", ",", "predicate_id_dict1", ",", "\n", "predicate_id_dict2", ")", "\n", "\n", "predicate_alignment_set", "=", "set", "(", ")", "\n", "for", "(", "p1", ",", "p2", ",", "sim_init", ")", "in", "predicate_alignment_set_init", ":", "\n", "            ", "p_id_1", "=", "predicate_id_dict1", "[", "p1", "]", "\n", "p_id_2", "=", "predicate_id_dict2", "[", "p2", "]", "\n", "sim", "=", "sim_init", "\n", "if", "(", "p_id_1", ",", "p_id_2", ")", "in", "predicate_latent_match_pairs_similarity_dict", ":", "\n", "                ", "sim", "=", "w", "*", "sim", "+", "(", "1", "-", "w", ")", "*", "predicate_latent_match_pairs_similarity_dict", "[", "(", "p_id_1", ",", "p_id_2", ")", "]", "\n", "", "if", "sim", ">", "self", ".", "args", ".", "predicate_soft_sim", ":", "\n", "                ", "predicate_alignment_set", ".", "add", "(", "(", "p1", ",", "p2", ",", "sim", ")", ")", "\n", "", "", "print", "(", "'update '", "+", "predicate_type", "+", "' alignment:'", ",", "len", "(", "predicate_alignment_set", ")", ")", "\n", "\n", "if", "predicate_type", "==", "'relation'", ":", "\n", "            ", "self", ".", "relation_alignment_set", "=", "predicate_alignment_set", "\n", "self", ".", "update_relation_triples", "(", "predicate_alignment_set", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attribute_alignment_set", "=", "predicate_alignment_set", "\n", "self", ".", "update_attribute_triples", "(", "predicate_alignment_set", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.link2dic": [[6, 13], ["dict", "dict", "len", "len"], "function", ["None"], ["def", "link2dic", "(", "links", ")", ":", "\n", "    ", "dic1", ",", "dic2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "i", ",", "j", ",", "w", "in", "links", ":", "\n", "        ", "dic1", "[", "i", "]", "=", "(", "j", ",", "w", ")", "\n", "dic2", "[", "j", "]", "=", "(", "i", ",", "w", ")", "\n", "", "assert", "len", "(", "dic1", ")", "==", "len", "(", "dic2", ")", "\n", "return", "dic1", ",", "dic2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.generate_sup_predicate_triples": [[15, 25], ["predicate_alignmnet.link2dic", "set", "set", "list", "list", "sup_triples1.add", "sup_triples2.add", "link_dic1.get", "link_dic1.get", "link_dic2.get", "link_dic2.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.link2dic"], ["", "def", "generate_sup_predicate_triples", "(", "predicate_links", ",", "triples1", ",", "triples2", ")", ":", "\n", "    ", "link_dic1", ",", "link_dic2", "=", "link2dic", "(", "predicate_links", ")", "\n", "sup_triples1", ",", "sup_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "triples1", ":", "\n", "        ", "if", "p", "in", "link_dic1", ":", "\n", "            ", "sup_triples1", ".", "add", "(", "(", "s", ",", "link_dic1", ".", "get", "(", "p", ")", "[", "0", "]", ",", "o", ",", "link_dic1", ".", "get", "(", "p", ")", "[", "1", "]", ")", ")", "\n", "", "", "for", "s", ",", "p", ",", "o", "in", "triples2", ":", "\n", "        ", "if", "p", "in", "link_dic2", ":", "\n", "            ", "sup_triples2", ".", "add", "(", "(", "s", ",", "link_dic2", ".", "get", "(", "p", ")", "[", "0", "]", ",", "o", ",", "link_dic2", ".", "get", "(", "p", ")", "[", "1", "]", ")", ")", "\n", "", "", "return", "list", "(", "sup_triples1", ")", ",", "list", "(", "sup_triples2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.add_weights": [[27, 44], ["predicate_alignmnet.link2dic", "set", "set", "len", "len", "len", "len", "list", "list", "weighted_triples1.add", "weighted_triples1.add", "weighted_triples2.add", "weighted_triples2.add", "predicate_alignmnet.zoom_weight", "predicate_alignmnet.zoom_weight", "link_dic1.get", "link_dic2.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.link2dic", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.zoom_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.zoom_weight"], ["", "def", "add_weights", "(", "predicate_links", ",", "triples1", ",", "triples2", ",", "min_w_before", ")", ":", "\n", "    ", "link_dic1", ",", "link_dic2", "=", "link2dic", "(", "predicate_links", ")", "\n", "weighted_triples1", ",", "weighted_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "w", "=", "0.2", "\n", "for", "s", ",", "p", ",", "o", "in", "triples1", ":", "\n", "        ", "if", "p", "in", "link_dic1", ":", "\n", "            ", "weighted_triples1", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "zoom_weight", "(", "link_dic1", ".", "get", "(", "p", ")", "[", "1", "]", ",", "min_w_before", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "weighted_triples1", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "w", ")", ")", "\n", "", "", "for", "s", ",", "p", ",", "o", "in", "triples2", ":", "\n", "        ", "if", "p", "in", "link_dic2", ":", "\n", "            ", "weighted_triples2", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "zoom_weight", "(", "link_dic2", ".", "get", "(", "p", ")", "[", "1", "]", ",", "min_w_before", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "weighted_triples2", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "w", ")", ")", "\n", "", "", "assert", "len", "(", "triples1", ")", "==", "len", "(", "weighted_triples1", ")", "\n", "assert", "len", "(", "triples2", ")", "==", "len", "(", "weighted_triples2", ")", "\n", "return", "list", "(", "weighted_triples1", ")", ",", "list", "(", "weighted_triples2", ")", ",", "weighted_triples1", ",", "weighted_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.init_predicate_alignment": [[46, 73], ["predicate_alignmnet.init_predicate_alignment.get_predicate_match_dict"], "function", ["None"], ["", "def", "init_predicate_alignment", "(", "predicate_local_name_dict_1", ",", "predicate_local_name_dict_2", ",", "predicate_init_sim", ")", ":", "\n", "    ", "def", "get_predicate_match_dict", "(", "p_ln_dict_1", ",", "p_ln_dict_2", ")", ":", "\n", "        ", "predicate_match_dict", ",", "sim_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "p1", ",", "ln1", "in", "p_ln_dict_1", ".", "items", "(", ")", ":", "\n", "            ", "match_p2", "=", "''", "\n", "max_sim", "=", "0", "\n", "for", "p2", ",", "ln2", "in", "p_ln_dict_2", ".", "items", "(", ")", ":", "\n", "                ", "sim_p2", "=", "Levenshtein", ".", "ratio", "(", "ln1", ",", "ln2", ")", "\n", "if", "sim_p2", ">", "max_sim", ":", "\n", "                    ", "match_p2", "=", "p2", "\n", "max_sim", "=", "sim_p2", "\n", "", "", "predicate_match_dict", "[", "p1", "]", "=", "match_p2", "\n", "sim_dict", "[", "p1", "]", "=", "max_sim", "\n", "", "return", "predicate_match_dict", ",", "sim_dict", "\n", "\n", "", "match_dict_1_2", ",", "sim_dict_1", "=", "get_predicate_match_dict", "(", "predicate_local_name_dict_1", ",", "predicate_local_name_dict_2", ")", "\n", "match_dict_2_1", ",", "sim_dict_2", "=", "get_predicate_match_dict", "(", "predicate_local_name_dict_2", ",", "predicate_local_name_dict_1", ")", "\n", "\n", "predicate_match_pairs_set", "=", "set", "(", ")", "\n", "predicate_latent_match_pairs_similarity_dict", "=", "{", "}", "\n", "for", "p1", ",", "p2", "in", "match_dict_1_2", ".", "items", "(", ")", ":", "\n", "        ", "if", "p2", "in", "match_dict_2_1", "and", "match_dict_2_1", "[", "p2", "]", "==", "p1", ":", "\n", "            ", "predicate_latent_match_pairs_similarity_dict", "[", "(", "p1", ",", "p2", ")", "]", "=", "sim_dict_1", "[", "p1", "]", "\n", "if", "sim_dict_1", "[", "p1", "]", ">", "predicate_init_sim", ":", "\n", "                ", "predicate_match_pairs_set", ".", "add", "(", "(", "p1", ",", "p2", ",", "sim_dict_1", "[", "p1", "]", ")", ")", "\n", "# print(p1, p2, sim_dict_1[p1], sim_dict_2[p2])", "\n", "", "", "", "return", "predicate_match_pairs_set", ",", "predicate_latent_match_pairs_similarity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.read_predicate_local_name_file": [[75, 87], ["file.close", "open", "line.strip().split.strip().split", "len", "line.strip().split.strip"], "function", ["None"], ["", "def", "read_predicate_local_name_file", "(", "file_path", ",", "relation_set", ")", ":", "\n", "    ", "relation_local_name_dict", ",", "attribute_local_name_dict", "=", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "line", ")", "==", "2", "\n", "if", "line", "[", "0", "]", "in", "relation_set", ":", "\n", "                ", "relation_local_name_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "attribute_local_name_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "1", "]", "\n", "", "", "", "file", ".", "close", "(", ")", "\n", "return", "relation_local_name_dict", ",", "attribute_local_name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.predicate2id_matched_pairs": [[89, 95], ["set", "set.add"], "function", ["None"], ["", "def", "predicate2id_matched_pairs", "(", "predicate_match_pairs_set", ",", "predicate_id_dict_1", ",", "predicate_id_dict_2", ")", ":", "\n", "    ", "id_match_pairs_set", "=", "set", "(", ")", "\n", "for", "(", "p1", ",", "p2", ",", "w", ")", "in", "predicate_match_pairs_set", ":", "\n", "        ", "if", "p1", "in", "predicate_id_dict_1", "and", "p2", "in", "predicate_id_dict_2", ":", "\n", "            ", "id_match_pairs_set", ".", "add", "(", "(", "predicate_id_dict_1", "[", "p1", "]", ",", "predicate_id_dict_2", "[", "p2", "]", ",", "w", ")", ")", "\n", "", "", "return", "id_match_pairs_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.find_predicate_alignment_by_embedding": [[97, 127], ["sklearn.preprocessing.normalize", "numpy.matmul", "predicate_id_dict1.items", "predicate_id_dict2.items", "matched_1.items"], "function", ["None"], ["", "def", "find_predicate_alignment_by_embedding", "(", "embed", ",", "predicate_list1", ",", "predicate_list2", ",", "predicate_id_dict1", ",", "\n", "predicate_id_dict2", ")", ":", "\n", "    ", "embed", "=", "preprocessing", ".", "normalize", "(", "embed", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "embed", ",", "embed", ".", "T", ")", "\n", "\n", "matched_1", ",", "matched_2", "=", "{", "}", ",", "{", "}", "\n", "for", "i", "in", "predicate_list1", ":", "\n", "        ", "sorted_sim", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "for", "j", "in", "sorted_sim", ":", "\n", "            ", "if", "j", "in", "predicate_list2", ":", "\n", "                ", "matched_1", "[", "i", "]", "=", "j", "\n", "break", "\n", "", "", "", "for", "j", "in", "predicate_list2", ":", "\n", "        ", "sorted_sim", "=", "(", "-", "sim_mat", "[", "j", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "for", "i", "in", "sorted_sim", ":", "\n", "            ", "if", "i", "in", "predicate_list1", ":", "\n", "                ", "matched_2", "[", "j", "]", "=", "i", "\n", "break", "\n", "\n", "", "", "", "id_attr_dict1", ",", "id_attr_dict2", "=", "{", "}", ",", "{", "}", "\n", "for", "a", ",", "i", "in", "predicate_id_dict1", ".", "items", "(", ")", ":", "\n", "        ", "id_attr_dict1", "[", "i", "]", "=", "a", "\n", "", "for", "a", ",", "i", "in", "predicate_id_dict2", ".", "items", "(", ")", ":", "\n", "        ", "id_attr_dict2", "[", "i", "]", "=", "a", "\n", "\n", "", "predicate_latent_match_pairs_similarity_dict", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "matched_1", ".", "items", "(", ")", ":", "\n", "        ", "if", "matched_2", "[", "j", "]", "==", "i", ":", "\n", "            ", "predicate_latent_match_pairs_similarity_dict", "[", "(", "i", ",", "j", ")", "]", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "", "", "return", "predicate_latent_match_pairs_similarity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.zoom_weight": [[129, 132], ["None"], "function", ["None"], ["", "def", "zoom_weight", "(", "weight", ",", "min_w_before", ",", "min_w_after", "=", "0.5", ")", ":", "\n", "    ", "weight_new", "=", "1.0", "-", "(", "1.0", "-", "weight", ")", "*", "(", "1.0", "-", "min_w_after", ")", "/", "(", "1.0", "-", "min_w_before", ")", "\n", "return", "weight_new", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.predicate_alignmnet.get_local_name": [[134, 139], ["[].replace", "item.split"], "function", ["None"], ["", "def", "get_local_name", "(", "item_set", ")", ":", "\n", "    ", "item_local_name_dict", "=", "{", "}", "\n", "for", "item", "in", "item_set", ":", "\n", "        ", "item_local_name_dict", "[", "item", "]", "=", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "return", "item_local_name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Layer.__init__": [[125, 138], ["kwargs.keys", "kwargs.get", "kwargs.get", "gcn_align.Layer.__class__.__name__.lower", "str", "gcn_align.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Layer._call": [[139, 141], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Layer.__call__": [[142, 150], ["tensorflow.name_scope", "gcn_align.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GraphConvolution._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Layer._log_vars": [[151, 154], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Dense.__init__": [[159, 184], ["gcn_align.Layer.__init__", "tensorflow.variable_scope", "gcn_align.glorot", "gcn_align.Dense._log_vars", "gcn_align.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "sparse_inputs", "=", "False", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "featureless", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Dense._call": [[185, 202], ["gcn_align.dot", "gcn_align.Dense.act", "gcn_align.sparse_dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "sparse_inputs", ":", "\n", "            ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "", "output", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GraphConvolution.__init__": [[207, 238], ["gcn_align.Layer.__init__", "tensorflow.variable_scope", "range", "gcn_align.GraphConvolution._log_vars", "len", "init", "gcn_align.zeros", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "\n", "sparse_inputs", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "\n", "featureless", "=", "False", ",", "transform", "=", "True", ",", "init", "=", "glorot", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "support", "=", "placeholders", "[", "'support'", "]", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "                ", "if", "input_dim", "==", "output_dim", "and", "not", "self", ".", "transform", "and", "not", "featureless", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "=", "init", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights_'", "+", "str", "(", "i", ")", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GraphConvolution._call": [[239, 268], ["list", "range", "tensorflow.add_n", "gcn_align.GraphConvolution.act", "len", "gcn_align.dot", "list.append", "gcn_align.sparse_dropout", "tensorflow.nn.dropout", "str", "gcn_align.dot", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "if", "self", ".", "sparse_inputs", ":", "\n", "                ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# convolve", "\n", "", "", "supports", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "            ", "if", "'weights_'", "+", "str", "(", "i", ")", "in", "self", ".", "vars", ":", "\n", "                ", "if", "not", "self", ".", "featureless", ":", "\n", "                    ", "pre_sup", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "", "else", ":", "\n", "                    ", "pre_sup", "=", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "pre_sup", "=", "x", "\n", "", "support", "=", "dot", "(", "self", ".", "support", "[", "i", "]", ",", "pre_sup", ",", "sparse", "=", "True", ")", "\n", "supports", ".", "append", "(", "support", ")", "\n", "", "output", "=", "tf", ".", "add_n", "(", "supports", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model.__init__": [[325, 350], ["kwargs.keys", "kwargs.get", "kwargs.get", "gcn_align.Model.__class__.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model._build": [[351, 353], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model.build": [[354, 375], ["gcn_align.Model.activations.append", "tensorflow.get_collection", "gcn_align.Model._loss", "gcn_align.Model._accuracy", "gcn_align.Model.optimizer.minimize", "tensorflow.variable_scope", "gcn_align.Model._build", "layer", "gcn_align.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._accuracy", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model.predict": [[376, 378], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model._loss": [[379, 381], ["None"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model._accuracy": [[382, 384], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model.save": [[385, 391], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.Model.load": [[392, 399], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.MLP.__init__": [[402, 414], ["gcn_align.Model.__init__", "tensorflow.train.AdamOptimizer", "gcn_align.MLP.build", "placeholders[].get_shape().as_list", "placeholders[].get_shape"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.MLP._loss": [[415, 423], ["gcn_align.MLP.layers[].vars.values", "gcn_align.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.MLP._accuracy": [[424, 427], ["gcn_align.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.MLP._build": [[428, 443], ["gcn_align.MLP.layers.append", "gcn_align.MLP.layers.append", "gcn_align.Dense", "gcn_align.Dense"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "self", ".", "args", ".", "sparse_inputs", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.MLP.predict": [[444, 446], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN.__init__": [[449, 464], ["gcn_align.Model.__init__", "tensorflow.train.AdamOptimizer", "gcn_align.GCN.build", "placeholders[].get_shape().as_list", "placeholders[].get_shape"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "# *************add***************", "\n", "\n", "# ************************************", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN._loss": [[465, 473], ["gcn_align.GCN.layers[].vars.values", "gcn_align.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN._accuracy": [[474, 477], ["gcn_align.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN._build": [[478, 493], ["gcn_align.GCN.layers.append", "gcn_align.GCN.layers.append", "gcn_align.GraphConvolution", "gcn_align.GraphConvolution"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN.predict": [[494, 496], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align_Unit.__init__": [[499, 513], ["gcn_align.Model.__init__", "tensorflow.train.GradientDescentOptimizer", "gcn_align.GCN_Align_Unit.build"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "output_dim", ",", "ILL", ",", "sparse_inputs", "=", "False", ",", "featureless", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCN_Align_Unit", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "ILL", "=", "ILL", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align_Unit._loss": [[515, 517], ["gcn_align.align_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.align_loss"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "+=", "align_loss", "(", "self", ".", "outputs", ",", "self", ".", "ILL", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align_Unit._accuracy": [[518, 520], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align_Unit._build": [[521, 540], ["gcn_align.GCN_Align_Unit.layers.append", "gcn_align.GCN_Align_Unit.layers.append", "gcn_align.GraphConvolution", "gcn_align.GraphConvolution"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "False", ",", "\n", "featureless", "=", "self", ".", "featureless", ",", "\n", "sparse_inputs", "=", "self", ".", "sparse_inputs", ",", "\n", "transform", "=", "False", ",", "\n", "init", "=", "trunc_normal", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "output_dim", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "False", ",", "\n", "transform", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.__init__": [[543, 546], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.sparse_to_tuple": [[547, 564], ["isinstance", "numpy.vstack().transpose", "range", "gcn_align.GCN_Utils.sparse_to_tuple.to_tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "        ", "def", "to_tuple", "(", "mx", ")", ":", "\n", "            ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "                ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "                ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.normalize_adj": [[565, 574], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.coo_matrix.dot().transpose().dot().tocoo", "scipy.coo_matrix.sum", "numpy.power", "numpy.isinf", "scipy.coo_matrix.dot().transpose().dot", "scipy.coo_matrix.dot().transpose", "scipy.coo_matrix.dot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "        ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.preprocess_adj": [[575, 579], ["gcn_align.GCN_Utils.normalize_adj", "gcn_align.GCN_Utils.sparse_to_tuple", "scipy.eye"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "self", ".", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "self", ".", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.construct_feed_dict": [[580, 587], ["dict", "dict.update", "dict.update", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "construct_feed_dict", "(", "features", ",", "support", ",", "placeholders", ")", ":", "\n", "        ", "\"\"\"Construct feed dictionary for GCN-Align.\"\"\"", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.chebyshev_polynomials": [[588, 609], ["print", "gcn_align.GCN_Utils.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "gcn_align.GCN_Utils.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "gcn_align.GCN_Utils.chebyshev_polynomials.chebyshev_recurrence"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "chebyshev_polynomials", "(", "self", ",", "adj", ",", "k", ")", ":", "\n", "        ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "adj_normalized", "=", "self", ".", "normalize_adj", "(", "adj", ")", "\n", "laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj_normalized", "\n", "largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "            ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "            ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "\n", "", "return", "self", ".", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.func": [[610, 625], ["head[].add", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "func", "(", "triples", ")", ":", "\n", "        ", "head", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "            ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "0", "]", ")", "\n", "", "", "r2f", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "            ", "r2f", "[", "r", "]", "=", "len", "(", "head", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2f", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.ifunc": [[626, 641], ["tail[].add", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ifunc", "(", "triples", ")", ":", "\n", "        ", "tail", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "            ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "2", "]", "}", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "2", "]", ")", "\n", "", "", "r2if", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "            ", "r2if", "[", "r", "]", "=", "len", "(", "tail", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2if", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.get_weighted_adj": [[642, 665], ["gcn_align.GCN_Utils.func", "gcn_align.GCN_Utils.ifunc", "scipy.coo_matrix", "row.append", "col.append", "data.append", "max", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.func", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.ifunc"], ["", "def", "get_weighted_adj", "(", "self", ",", "e", ",", "KG", ")", ":", "\n", "        ", "r2f", "=", "self", ".", "func", "(", "KG", ")", "\n", "r2if", "=", "self", ".", "ifunc", "(", "KG", ")", "\n", "M", "=", "{", "}", "\n", "for", "tri", "in", "KG", ":", "\n", "            ", "if", "tri", "[", "0", "]", "==", "tri", "[", "2", "]", ":", "\n", "                ", "continue", "\n", "", "if", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "not", "in", "M", ":", "\n", "                ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "                ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "+=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "if", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "not", "in", "M", ":", "\n", "                ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "                ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "+=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "for", "key", "in", "M", ":", "\n", "            ", "row", ".", "append", "(", "key", "[", "1", "]", ")", "\n", "col", ".", "append", "(", "key", "[", "0", "]", ")", "\n", "data", ".", "append", "(", "M", "[", "key", "]", ")", "\n", "", "return", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "e", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.get_ae_input": [[666, 668], ["gcn_align.GCN_Utils.sparse_to_tuple", "scipy.coo_matrix"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "get_ae_input", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "sparse_to_tuple", "(", "sp", ".", "coo_matrix", "(", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Utils.load_data": [[669, 675], ["gcn_align.GCN_Utils.get_ae_input", "gcn_align.GCN_Utils.get_weighted_adj", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_ae_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_weighted_adj"], ["", "def", "load_data", "(", "self", ",", "attr", ")", ":", "\n", "        ", "ae_input", "=", "self", ".", "get_ae_input", "(", "attr", ")", "\n", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", "\n", "adj", "=", "self", ".", "get_weighted_adj", "(", "self", ".", "kgs", ".", "entities_num", ",", "triples", ")", "\n", "train", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "return", "adj", ",", "ae_input", ",", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.__init__": [[678, 703], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attr", "=", "None", "\n", "self", ".", "opt", "=", "'SGD'", "\n", "self", ".", "act_func", "=", "tf", ".", "nn", ".", "relu", "\n", "self", ".", "dropout", "=", "0.0", "\n", "# *****************************add*******************************************************", "\n", "self", ".", "struct_loss", "=", "None", "\n", "self", ".", "struct_optimizer", "=", "None", "\n", "self", ".", "vec_ae", "=", "None", "\n", "self", ".", "vec_se", "=", "None", "\n", "self", ".", "num_supports", "=", "None", "\n", "self", ".", "utils", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "ae_input", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "e", "=", "None", "\n", "self", ".", "support", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "ph_ae", "=", "None", "\n", "self", ".", "ph_se", "=", "None", "\n", "self", ".", "model_ae", "=", "None", "\n", "self", ".", "model_se", "=", "None", "\n", "self", ".", "feed_dict_se", "=", "None", "\n", "self", ".", "feed_dict_ae", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.init": [[704, 736], ["gcn_align.GCN_Utils", "gcn_align.load_attr", "gcn_align.GCN_Align.utils.load_data", "gcn_align.GCN_Align_Unit", "gcn_align.GCN_Align_Unit", "openea.modules.utils.util.load_session", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "gcn_align.GCN_Align.utils.preprocess_adj", "tensorflow.sparse_placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder_with_default", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.global_variables_initializer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.load_attr", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.load_data", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.preprocess_adj"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "1", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n", "self", ".", "num_supports", "=", "self", ".", "args", ".", "support_number", "\n", "self", ".", "utils", "=", "GCN_Utils", "(", "self", ".", "args", ",", "self", ".", "kgs", ")", "\n", "self", ".", "attr", "=", "load_attr", "(", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "kgs", ")", "\n", "self", ".", "adj", ",", "self", ".", "ae_input", ",", "self", ".", "train", "=", "self", ".", "utils", ".", "load_data", "(", "self", ".", "attr", ")", "\n", "self", ".", "e", "=", "self", ".", "ae_input", "[", "2", "]", "[", "0", "]", "\n", "self", ".", "support", "=", "[", "self", ".", "utils", ".", "preprocess_adj", "(", "self", ".", "adj", ")", "]", "\n", "self", ".", "ph_ae", "=", "{", "\n", "\"support\"", ":", "[", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", "for", "_", "in", "range", "(", "self", ".", "args", ".", "support_number", ")", "]", ",", "\n", "\"features\"", ":", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", ",", "\n", "\"dropout\"", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", ",", "\n", "\"num_features_nonzero\"", ":", "tf", ".", "placeholder_with_default", "(", "0", ",", "shape", "=", "(", ")", ")", "\n", "}", "\n", "self", ".", "ph_se", "=", "{", "\n", "\"support\"", ":", "[", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", "for", "_", "in", "range", "(", "self", ".", "args", ".", "support_number", ")", "]", ",", "\n", "\"features\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", ",", "\n", "\"dropout\"", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", ",", "\n", "\"num_features_nonzero\"", ":", "tf", ".", "placeholder_with_default", "(", "0", ",", "shape", "=", "(", ")", ")", "\n", "}", "\n", "self", ".", "model_ae", "=", "GCN_Align_Unit", "(", "self", ".", "args", ",", "self", ".", "ph_ae", ",", "input_dim", "=", "self", ".", "ae_input", "[", "2", "]", "[", "1", "]", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "ae_dim", ",", "ILL", "=", "self", ".", "train", ",", "\n", "sparse_inputs", "=", "True", ",", "featureless", "=", "False", ",", "logging", "=", "False", ")", "\n", "self", ".", "model_se", "=", "GCN_Align_Unit", "(", "self", ".", "args", ",", "self", ".", "ph_se", ",", "input_dim", "=", "self", ".", "e", ",", "output_dim", "=", "self", ".", "args", ".", "se_dim", ",", "\n", "ILL", "=", "self", ".", "train", ",", "sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "True", ",", "logging", "=", "False", ")", "\n", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.train_embeddings": [[737, 787], ["len", "numpy.array", "pos.reshape", "pos.reshape", "range", "gcn_align.GCN_Align.session.run", "gcn_align.GCN_Align.session.run", "numpy.ones", "train_links[].reshape", "numpy.ones", "train_links[].reshape", "time.time", "gcn_align.GCN_Align.utils.construct_feed_dict", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.utils.construct_feed_dict", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.session.run", "print", "numpy.random.choice", "numpy.random.choice", "gcn_align.GCN_Align.valid_", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.construct_feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.construct_feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.valid_", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "train_embeddings", "(", "self", ",", "loss", ",", "optimizer", ",", "output", ")", ":", "\n", "# **t=train_number k=neg_num", "\n", "        ", "neg_num", "=", "self", ".", "args", ".", "neg_triple_num", "\n", "train_num", "=", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "train_links", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg_left", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg2_right", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "neg2_left", "=", "None", "\n", "neg_right", "=", "None", "\n", "feed_dict_se", "=", "None", "\n", "feed_dict_ae", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "i", "%", "10", "==", "1", ":", "\n", "                ", "neg2_left", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "e", ",", "train_num", "*", "neg_num", ")", "\n", "neg_right", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "e", ",", "train_num", "*", "neg_num", ")", "\n", "", "feed_dict_ae", "=", "self", ".", "utils", ".", "construct_feed_dict", "(", "self", ".", "ae_input", ",", "self", ".", "support", ",", "self", ".", "ph_ae", ")", "\n", "feed_dict_ae", ".", "update", "(", "{", "self", ".", "ph_ae", "[", "'dropout'", "]", ":", "self", ".", "args", ".", "dropout", "}", ")", "\n", "feed_dict_ae", ".", "update", "(", "{", "'neg_left:0'", ":", "neg_left", ",", "'neg_right:0'", ":", "neg_right", ",", "\n", "'neg2_left:0'", ":", "neg2_left", ",", "'neg2_right:0'", ":", "neg2_right", "}", ")", "\n", "feed_dict_se", "=", "self", ".", "utils", ".", "construct_feed_dict", "(", "1.", ",", "self", ".", "support", ",", "self", ".", "ph_se", ")", "\n", "feed_dict_se", ".", "update", "(", "{", "self", ".", "ph_se", "[", "'dropout'", "]", ":", "self", ".", "args", ".", "dropout", "}", ")", "\n", "feed_dict_se", ".", "update", "(", "{", "'neg_left:0'", ":", "neg_left", ",", "'neg_right:0'", ":", "neg_right", ",", "\n", "'neg2_left:0'", ":", "neg2_left", ",", "'neg2_right:0'", ":", "neg2_right", "}", ")", "\n", "# batch_loss1, _ = self.session.run(fetches=[self.model_ae.loss, self.model_ae.opt_op],", "\n", "#                                   feed_dict=feed_dict_ae)", "\n", "batch_loss2", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "model_se", ".", "loss", ",", "self", ".", "model_se", ".", "opt_op", "]", ",", "\n", "feed_dict", "=", "feed_dict_se", ")", "\n", "# ********************temp reduce ae*****************************", "\n", "# batch_loss = batch_loss1 + batch_loss2", "\n", "batch_loss", "=", "batch_loss2", "\n", "print", "(", "'epoch {}, avg. relation triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "i", ",", "batch_loss", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# ********************no early stop********************************************", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "self", ".", "feed_dict_se", "=", "feed_dict_se", "\n", "self", ".", "feed_dict_ae", "=", "feed_dict_ae", "\n", "flag", "=", "self", ".", "valid_", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "vec_se", "=", "self", ".", "session", ".", "run", "(", "output", ",", "feed_dict", "=", "feed_dict_se", ")", "\n", "vec_ae", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_ae", ".", "outputs", ",", "feed_dict", "=", "feed_dict_ae", ")", "\n", "self", ".", "vec_se", "=", "vec_se", "\n", "self", ".", "vec_ae", "=", "vec_ae", "\n", "return", "vec_se", ",", "vec_ae", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.test": [[788, 802], ["numpy.array", "numpy.array", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "numpy.concatenate", "openea.save_results", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "beta", "=", "self", ".", "args", ".", "beta", "\n", "embeddings", "=", "np", ".", "concatenate", "(", "[", "self", ".", "vec_se", "*", "beta", ",", "self", ".", "vec_ae", "*", "(", "1.0", "-", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "vec_se", "\n", "", "embeds1", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "rest_12", ",", "_", ",", "_", "=", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.save": [[803, 810], ["openea.save_embeddings", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "vec_se", "\n", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "attr_embeds", "=", "self", ".", "vec_ae", "\n", "", "else", ":", "\n", "            ", "attr_embeds", "=", "None", "\n", "", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "None", ",", "attr_embeds", ",", "mapping_mat", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.valid_": [[811, 826], ["gcn_align.GCN_Align.session.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.valid", "openea.modules.finding.evaluation.valid", "gcn_align.GCN_Align.session.run", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "valid_", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "se", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_se", ".", "outputs", ",", "feed_dict", "=", "self", ".", "feed_dict_se", ")", "\n", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "ae", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_ae", ".", "outputs", ",", "feed_dict", "=", "self", ".", "feed_dict_ae", ")", "\n", "beta", "=", "self", ".", "args", ".", "beta", "\n", "embeddings", "=", "np", ".", "concatenate", "(", "[", "se", "*", "beta", ",", "ae", "*", "(", "1.0", "-", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "se", "\n", "", "embeds1", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ")", "\n", "if", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hits1_12", "\n", "", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.GCN_Align.run": [[827, 831], ["time.time", "gcn_align.GCN_Align.train_embeddings", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.train_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "train_embeddings", "(", "self", ".", "struct_loss", ",", "self", ".", "struct_optimizer", ",", "self", ".", "model_se", ".", "outputs", ")", "\n", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.uniform": [[27, 31], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.glorot": [[33, 38], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.zeros": [[40, 44], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.ones": [[46, 50], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.trunc_normal": [[52, 57], ["tensorflow.Variable", "tensorflow.nn.l2_normalize", "tensorflow.truncated_normal", "math.sqrt"], "function", ["None"], ["", "def", "trunc_normal", "(", "shape", ",", "name", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "initial", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "1.0", "/", "math", ".", "sqrt", "(", "shape", "[", "0", "]", ")", ")", ")", "\n", "if", "not", "normalize", ":", "\n", "        ", "return", "initial", "\n", "", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "initial", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.get_layer_uid": [[60, 68], ["None"], "function", ["None"], ["", "def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.sparse_dropout": [[70, 77], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["", "", "def", "sparse_dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"Dropout for sparse tensors.\"\"\"", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.dot": [[79, 87], ["print", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "dot", "(", "x", ",", "y", ",", "sparse", "=", "False", ")", ":", "\n", "    ", "\"\"\"Wrapper for tf.matmul (sparse vs dense).\"\"\"", "\n", "print", "(", "x", ")", "\n", "if", "sparse", ":", "\n", "        ", "res", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "tf", ".", "matmul", "(", "x", ",", "y", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.load_attr": [[89, 110], ["openea.modules.utils.util.merge_dic", "openea.modules.utils.util.merge_dic.items", "print", "int", "range", "numpy.zeros", "openea.modules.utils.util.merge_dic.items", "sorted", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "load_attr", "(", "ent_num", ",", "kgs", ")", ":", "\n", "    ", "cnt", "=", "{", "}", "\n", "entity_attributes_dict", "=", "merge_dic", "(", "kgs", ".", "kg1", ".", "entity_attributes_dict", ",", "kgs", ".", "kg2", ".", "entity_attributes_dict", ")", "\n", "for", "_", ",", "vs", "in", "entity_attributes_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "v", "in", "vs", ":", "\n", "            ", "if", "v", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "v", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "v", "]", "+=", "1", "\n", "", "", "", "fre", "=", "[", "(", "k", ",", "cnt", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "cnt", ",", "key", "=", "cnt", ".", "get", ",", "reverse", "=", "True", ")", "]", "\n", "print", "(", "fre", ")", "\n", "attr2id", "=", "{", "}", "\n", "num", "=", "int", "(", "0.7", "*", "len", "(", "cnt", ")", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "attr2id", "[", "fre", "[", "i", "]", "[", "0", "]", "]", "=", "i", "\n", "", "attr", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ent", ",", "vs", "in", "entity_attributes_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "v", "in", "vs", ":", "\n", "            ", "if", "v", "in", "attr2id", ":", "\n", "                ", "attr", "[", "ent", "]", "[", "attr2id", "[", "v", "]", "]", "=", "1.0", "\n", "", "", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.masked_softmax_cross_entropy": [[272, 279], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.masked_accuracy": [[281, 289], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.get_placeholder_by_name": [[291, 296], ["tensorflow.get_default_graph().get_tensor_by_name", "tensorflow.placeholder", "tensorflow.get_default_graph"], "function", ["None"], ["", "def", "get_placeholder_by_name", "(", "name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "name", "+", "\":0\"", ")", "\n", "", "except", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.gcn_align.align_loss": [[298, 321], ["len", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "gcn_align.get_placeholder_by_name", "gcn_align.get_placeholder_by_name", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "gcn_align.get_placeholder_by_name", "gcn_align.get_placeholder_by_name", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name"], ["", "", "def", "align_loss", "(", "outlayer", ",", "ILL", ",", "gamma", ",", "k", ")", ":", "\n", "    ", "left", "=", "ILL", "[", ":", ",", "0", "]", "\n", "right", "=", "ILL", "[", ":", ",", "1", "]", "\n", "t", "=", "len", "(", "ILL", ")", "\n", "left_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "left", ")", "\n", "right_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "right", ")", "\n", "A", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "left_x", "-", "right_x", ")", ",", "1", ")", "\n", "neg_left", "=", "get_placeholder_by_name", "(", "\"neg_left\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg_left\")", "\n", "neg_right", "=", "get_placeholder_by_name", "(", "\"neg_right\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg_right\")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "k", "]", ")", "\n", "D", "=", "A", "+", "gamma", "\n", "L1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "neg_left", "=", "get_placeholder_by_name", "(", "\"neg2_left\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg2_left\")", "\n", "neg_right", "=", "get_placeholder_by_name", "(", "\"neg2_right\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg2_right\")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "k", "]", ")", "\n", "L2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "L1", ")", "+", "tf", ".", "reduce_sum", "(", "L2", ")", ")", "/", "(", "2.0", "*", "k", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE.__init__": [[112, 114], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE.init": [[115, 122], ["attre.formatting_attr_triples", "attre.AttrE._define_variables", "attre.AttrE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.formatting_attr_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "attribute_triples_list1", ",", "self", ".", "attribute_triples_list2", ",", "self", ".", "value_id_char_ids", ",", "self", ".", "char_list_size", "=", "formatting_attr_triples", "(", "self", ".", "kgs", ",", "self", ".", "args", ".", "literal_len", ")", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE._define_variables": [[123, 137], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'character'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds_ce", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds_ce'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "attr_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "attributes_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'attr_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "attr_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "char_embeds", "=", "init_embeddings", "(", "[", "self", ".", "char_list_size", ",", "self", ".", "args", ".", "dim", "]", ",", "'char_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "char_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "value_id_char_ids", "=", "tf", ".", "constant", "(", "self", ".", "value_id_char_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE._define_embed_graph": [[138, 190], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "attre.n_gram_compositional_func", "attre.n_gram_compositional_func", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "self", ".", "pos_es", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_es", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "self", ".", "joint_ents", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "pes", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "pos_es", ")", "\n", "pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "pos_as", ")", "\n", "pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeds", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "value_id_char_ids", ",", "self", ".", "pos_vs", ")", ")", "\n", "nes", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "neg_es", ")", "\n", "nas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "neg_as", ")", "\n", "nvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeds", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "value_id_char_ids", ",", "self", ".", "neg_vs", ")", ")", "\n", "\n", "pvs", "=", "n_gram_compositional_func", "(", "pvs", ",", "self", ".", "args", ".", "literal_len", ",", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "dim", ")", "\n", "nvs", "=", "n_gram_compositional_func", "(", "nvs", ",", "self", ".", "args", ".", "literal_len", ",", "\n", "self", ".", "args", ".", "batch_size", "*", "self", ".", "args", ".", "neg_triple_num", ",", "self", ".", "args", ".", "dim", ")", "\n", "\n", "ents_se", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "joint_ents", ")", "\n", "ents_ce", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "joint_ents", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "self", ".", "triple_loss_ce", "=", "get_loss_func", "(", "pes", ",", "pas", ",", "pvs", ",", "nes", ",", "nas", ",", "nvs", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer_ce", "=", "generate_optimizer", "(", "self", ".", "triple_loss_ce", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "cos_sim", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "ents_se", ",", "ents_ce", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "self", ".", "joint_loss", "=", "tf", ".", "reduce_sum", "(", "1", "-", "cos_sim", ")", "\n", "self", ".", "optimizer_joint", "=", "generate_optimizer", "(", "self", ".", "joint_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE.launch_triple_training_1epo_ce": [[191, 218], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "attre.AttrE.session.run", "len", "multiprocessing.Process", "time.time", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "launch_triple_training_1epo_ce", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_attribute_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "attribute_triples_list1", ",", "self", ".", "attribute_triples_list2", ",", "\n", "set", "(", "self", ".", "attribute_triples_list1", ")", ",", "set", "(", "self", ".", "attribute_triples_list2", ")", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "None", ",", "None", ",", "self", ".", "args", ".", "neg_triple_num", ",", "True", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss_ce", ",", "self", ".", "triple_optimizer_ce", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_es", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "neg_es", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "attribute_triples_list1", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "attribute_triples_list2", ")", "\n", "print", "(", "\n", "'epoch {}, CE, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE.launch_joint_training_1epo": [[219, 232], ["time.time", "int", "range", "print", "math.ceil", "list", "attre.AttrE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_joint_training_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_ents", "=", "list", "(", "entities", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "joint_loss", ",", "self", ".", "optimizer_joint", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "joint_ents", ":", "batch_ents", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_ents", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, joint learning loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.AttrE.run": [[233, 256], ["time.time", "int", "int", "openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "multiprocessing.Manager.Queue", "list", "range", "print", "len", "len", "len", "len", "math.ceil", "math.ceil", "list", "list", "attre.AttrE.launch_triple_training_1epo", "range", "range", "attre.AttrE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "attribute_triples_num", "=", "len", "(", "self", ".", "attribute_triples_list1", ")", "+", "len", "(", "self", ".", "attribute_triples_list2", ")", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "attribute_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "attribute_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "attribute_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "attribute_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "attribute_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "entity_list", "=", "list", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "+", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "None", ",", "\n", "None", ")", "\n", "# self.launch_triple_training_1epo_ce(i, attribute_triple_steps, attribute_step_tasks, attribute_batch_queue)", "\n", "# self.launch_joint_training_1epo(i, entity_list)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.formatting_attr_triples": [[17, 78], ["attre.formatting_attr_triples.clean_attribute_triples"], "function", ["None"], ["def", "formatting_attr_triples", "(", "kgs", ",", "literal_len", ")", ":", "\n", "    ", "\"\"\"\n    Formatting attribute triples from kgs for AttrE.\n    :param kgs: modules.load.kgs\n    :param literal_len: [optional] Literal truncation length, taking the first literal_len characters.\n    :return: attribute_triples_list1_new, attribute_triples_list2_new, char_list size\n    \"\"\"", "\n", "\n", "def", "clean_attribute_triples", "(", "triples", ")", ":", "\n", "        ", "triples_new", "=", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "v", "=", "v", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "rstrip", "(", "' '", ")", "\n", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "split", "(", "'\"'", ")", "[", "0", "]", "\n", "triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "return", "triples_new", "\n", "\n", "", "attribute_triples_list1", "=", "clean_attribute_triples", "(", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "attribute_triples_list2", "=", "clean_attribute_triples", "(", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "\n", "value_list", "=", "list", "(", "set", "(", "[", "v", "for", "(", "_", ",", "_", ",", "v", ")", "in", "attribute_triples_list1", "+", "attribute_triples_list2", "]", ")", ")", "\n", "char_set", "=", "set", "(", ")", "\n", "ch_num", "=", "{", "}", "\n", "for", "literal", "in", "value_list", ":", "\n", "        ", "for", "ch", "in", "literal", ":", "\n", "            ", "n", "=", "1", "\n", "if", "ch", "in", "ch_num", ":", "\n", "                ", "n", "+=", "ch_num", "[", "ch", "]", "\n", "", "ch_num", "[", "ch", "]", "=", "n", "\n", "\n", "", "", "ch_num", "=", "sorted", "(", "ch_num", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "ch_sum", "=", "sum", "(", "[", "n", "for", "(", "_", ",", "n", ")", "in", "ch_num", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ch_num", ")", ")", ":", "\n", "        ", "if", "ch_num", "[", "i", "]", "[", "1", "]", "/", "ch_sum", ">=", "0.0001", ":", "\n", "            ", "char_set", ".", "add", "(", "ch_num", "[", "i", "]", "[", "0", "]", ")", "\n", "", "", "char_list", "=", "list", "(", "char_set", ")", "\n", "char_id_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "char_list", ")", ")", ":", "\n", "        ", "char_id_dict", "[", "char_list", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "value_char_ids_dict", "=", "{", "}", "\n", "for", "value", "in", "value_list", ":", "\n", "        ", "char_id_list", "=", "[", "0", "for", "_", "in", "range", "(", "literal_len", ")", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "value", ")", ",", "literal_len", ")", ")", ":", "\n", "            ", "if", "value", "[", "i", "]", "in", "char_set", ":", "\n", "                ", "char_id_list", "[", "i", "]", "=", "char_id_dict", "[", "value", "[", "i", "]", "]", "\n", "", "", "value_char_ids_dict", "[", "value", "]", "=", "char_id_list", "\n", "\n", "", "attribute_triples_list1_new", ",", "attribute_triples_list2_new", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "value_id_char_ids", "=", "list", "(", ")", "\n", "value_id_cnt", "=", "0", "\n", "for", "(", "e_id", ",", "a_id", ",", "v", ")", "in", "attribute_triples_list1", ":", "\n", "        ", "attribute_triples_list1_new", ".", "append", "(", "(", "e_id", ",", "a_id", ",", "value_id_cnt", ")", ")", "\n", "value_id_char_ids", ".", "append", "(", "value_char_ids_dict", "[", "v", "]", ")", "\n", "value_id_cnt", "+=", "1", "\n", "\n", "", "for", "(", "e_id", ",", "a_id", ",", "v", ")", "in", "attribute_triples_list2", ":", "\n", "        ", "attribute_triples_list2_new", ".", "append", "(", "(", "e_id", ",", "a_id", ",", "value_id_cnt", ")", ")", "\n", "value_id_char_ids", ".", "append", "(", "value_char_ids_dict", "[", "v", "]", ")", "\n", "value_id_cnt", "+=", "1", "\n", "", "return", "attribute_triples_list1_new", ",", "attribute_triples_list2_new", ",", "value_id_char_ids", ",", "len", "(", "char_list", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.add_compositional_func": [[80, 84], ["tensorflow.reduce_mean", "tensorflow.nn.l2_normalize"], "function", ["None"], ["", "def", "add_compositional_func", "(", "character_vectors", ")", ":", "\n", "    ", "value_vector_list", "=", "tf", ".", "reduce_mean", "(", "character_vectors", ",", "axis", "=", "1", ")", "\n", "value_vector_list", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "value_vector_list", ",", "1", ")", "\n", "return", "value_vector_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.n_gram_compositional_func": [[86, 90], ["tensorflow.unstack", "attre.calculate_ngram_weight"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.calculate_ngram_weight"], ["", "def", "n_gram_compositional_func", "(", "character_vectors", ",", "value_lens", ",", "batch_size", ",", "embed_size", ")", ":", "\n", "    ", "pos_c_e_in_lstm", "=", "tf", ".", "unstack", "(", "character_vectors", ",", "num", "=", "value_lens", ",", "axis", "=", "1", ")", "\n", "pos_c_e_lstm", "=", "calculate_ngram_weight", "(", "pos_c_e_in_lstm", ",", "batch_size", ",", "embed_size", ")", "\n", "return", "pos_c_e_lstm", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches_without_attribute.attre.calculate_ngram_weight": [[92, 108], ["tensorflow.stack", "tensorflow.reverse", "tensorflow.constant", "tensorflow.zeros", "tensorflow.while_loop", "len", "tensorflow.greater", "tensorflow.slice", "tensorflow.reduce_mean", "tensorflow.subtract", "tensorflow.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "calculate_ngram_weight", "(", "unstacked_tensor", ",", "batch_size", ",", "embed_size", ")", ":", "\n", "    ", "stacked_tensor", "=", "tf", ".", "stack", "(", "unstacked_tensor", ",", "axis", "=", "1", ")", "\n", "stacked_tensor", "=", "tf", ".", "reverse", "(", "stacked_tensor", ",", "[", "1", "]", ")", "\n", "index", "=", "tf", ".", "constant", "(", "len", "(", "unstacked_tensor", ")", ")", "\n", "expected_result", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "embed_size", "]", ")", "\n", "\n", "def", "condition", "(", "index", ",", "summation", ")", ":", "\n", "        ", "return", "tf", ".", "greater", "(", "index", ",", "0", ")", "\n", "\n", "", "def", "body", "(", "index", ",", "summation", ")", ":", "\n", "        ", "precessed", "=", "tf", ".", "slice", "(", "stacked_tensor", ",", "[", "0", ",", "index", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "summand", "=", "tf", ".", "reduce_mean", "(", "precessed", ",", "1", ")", "\n", "return", "tf", ".", "subtract", "(", "index", ",", "1", ")", ",", "tf", ".", "add", "(", "summation", ",", "summand", ")", "\n", "\n", "", "result", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "[", "index", ",", "expected_result", "]", ")", "\n", "return", "result", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session": [[6, 10], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["def", "load_session", "(", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "return", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic": [[12, 14], ["None"], "function", ["None"], ["", "def", "merge_dic", "(", "dic1", ",", "dic2", ")", ":", "\n", "    ", "return", "{", "**", "dic1", ",", "**", "dic2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide": [[16, 31], ["len", "range", "tasks.append", "tasks.append"], "function", ["None"], ["", "def", "task_divide", "(", "idx", ",", "n", ")", ":", "\n", "    ", "total", "=", "len", "(", "idx", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "if", "n", ">", "total", ":", "\n", "        ", "return", "[", "idx", "]", "\n", "", "elif", "n", "==", "total", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "total", "//", "n", "\n", "tasks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "tasks", ".", "append", "(", "idx", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "tasks", ".", "append", "(", "idx", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder": [[33, 40], ["training_data_path.strip().split", "print", "print", "training_data_path.strip", "str", "time.strftime"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "generate_out_folder", "(", "out_folder", ",", "training_data_path", ",", "div_path", ",", "method_name", ")", ":", "\n", "    ", "params", "=", "training_data_path", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "\n", "print", "(", "out_folder", ",", "training_data_path", ",", "params", ",", "div_path", ",", "method_name", ")", "\n", "path", "=", "params", "[", "-", "1", "]", "\n", "folder", "=", "out_folder", "+", "method_name", "+", "'/'", "+", "path", "+", "\"/\"", "+", "div_path", "+", "str", "(", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ")", ")", "+", "\"/\"", "\n", "print", "(", "\"results output folder:\"", ",", "folder", ")", "\n", "return", "folder", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim": [[12, 56], ["sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.matmul", "similarity.csls_sim", "numpy.matmul", "print", "sim_mat.astype.astype", "sklearn.metrics.pairwise.euclidean_distances", "type", "sim_mat.astype.astype", "scipy.spatial.distance.cdist", "sim_mat.astype.astype", "sim_mat.astype.astype", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.csls_sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "sim", "(", "embed1", ",", "embed2", ",", "metric", "=", "'inner'", ",", "normalize", "=", "False", ",", "csls_k", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute pairwise similarity between the two collections of embeddings.\n\n    Parameters\n    ----------\n    embed1 : matrix_like\n        An embedding matrix of size n1*d, where n1 is the number of embeddings and d is the dimension.\n    embed2 : matrix_like\n        An embedding matrix of size n2*d, where n2 is the number of embeddings and d is the dimension.\n    metric : str, optional, inner default.\n        The distance metric to use. It can be 'cosine', 'euclidean', 'inner'.\n    normalize : bool, optional, default false.\n        Whether to normalize the input embeddings.\n    csls_k : int, optional, 0 by default.\n        K value for csls. If k > 0, enhance the similarity by csls.\n\n    Returns\n    -------\n    sim_mat : An similarity matrix of size n1*n2.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "embed1", "=", "preprocessing", ".", "normalize", "(", "embed1", ")", "\n", "embed2", "=", "preprocessing", ".", "normalize", "(", "embed2", ")", "\n", "", "if", "metric", "==", "'inner'", ":", "\n", "        ", "sim_mat", "=", "np", ".", "matmul", "(", "embed1", ",", "embed2", ".", "T", ")", "# numpy.ndarray, float32", "\n", "", "elif", "metric", "==", "'cosine'", "and", "normalize", ":", "\n", "        ", "sim_mat", "=", "np", ".", "matmul", "(", "embed1", ",", "embed2", ".", "T", ")", "# numpy.ndarray, float32", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "euclidean_distances", "(", "embed1", ",", "embed2", ")", "\n", "print", "(", "type", "(", "sim_mat", ")", ",", "sim_mat", ".", "dtype", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "metric", "==", "'cosine'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "'cosine'", ")", "# numpy.ndarray, float64", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "metric", "==", "'manhattan'", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "'cityblock'", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "sim_mat", "=", "1", "-", "cdist", "(", "embed1", ",", "embed2", ",", "metric", "=", "metric", ")", "\n", "sim_mat", "=", "sim_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "if", "csls_k", ">", "0", ":", "\n", "        ", "sim_mat", "=", "csls_sim", "(", "sim_mat", ",", "csls_k", ")", "\n", "", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.csls_sim": [[58, 79], ["similarity.calculate_nearest_k", "similarity.calculate_nearest_k"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.calculate_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.calculate_nearest_k"], ["", "def", "csls_sim", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Compute pairwise csls similarity based on the input similarity matrix.\n\n    Parameters\n    ----------\n    sim_mat : matrix-like\n        A pairwise similarity matrix.\n    k : int\n        The number of nearest neighbors.\n\n    Returns\n    -------\n    csls_sim_mat : A csls similarity matrix of n1*n2.\n    \"\"\"", "\n", "\n", "nearest_values1", "=", "calculate_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "nearest_values2", "=", "calculate_nearest_k", "(", "sim_mat", ".", "T", ",", "k", ")", "\n", "csls_sim_mat", "=", "2", "*", "sim_mat", ".", "T", "-", "nearest_values1", "\n", "csls_sim_mat", "=", "csls_sim_mat", ".", "T", "-", "nearest_values2", "\n", "return", "csls_sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.calculate_nearest_k": [[81, 85], ["numpy.mean", "numpy.partition"], "function", ["None"], ["", "def", "calculate_nearest_k", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "sorted_mat", "=", "-", "np", ".", "partition", "(", "-", "sim_mat", ",", "k", "+", "1", ",", "axis", "=", "1", ")", "# -np.sort(-sim_mat1)", "\n", "nearest_k", "=", "sorted_mat", "[", ":", ",", "0", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "nearest_k", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.csls_sim_multi_threads": [[87, 104], ["openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "numpy.array", "list.append", "res.get", "range", "len", "multiprocessing.Pool.apply_async", "numpy.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide"], ["", "def", "csls_sim_multi_threads", "(", "sim_mat", ",", "k", ",", "nums_threads", ")", ":", "\n", "    ", "tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "tasks", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "calculate_nearest_k", ",", "(", "sim_mat", "[", "task", ",", ":", "]", ",", "k", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "sim_values", "=", "None", "\n", "for", "res", "in", "rests", ":", "\n", "        ", "val", "=", "res", ".", "get", "(", ")", "\n", "if", "sim_values", "is", "None", ":", "\n", "            ", "sim_values", "=", "val", "\n", "", "else", ":", "\n", "            ", "sim_values", "=", "np", ".", "append", "(", "sim_values", ",", "val", ")", "\n", "", "", "assert", "sim_values", ".", "shape", "[", "0", "]", "==", "sim_mat", ".", "shape", "[", "0", "]", "\n", "return", "sim_values", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim_multi_threads": [[106, 118], ["openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "numpy.concatenate", "numpy.array", "list.append", "sim_list.append", "range", "len", "multiprocessing.Pool.apply_async", "res.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide"], ["", "def", "sim_multi_threads", "(", "embeds1", ",", "embeds2", ",", "threads_num", "=", "16", ")", ":", "\n", "    ", "num", "=", "embeds1", ".", "shape", "[", "0", "]", "\n", "idx_list", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "threads_num", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "idx_list", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "for", "idx", "in", "idx_list", ":", "\n", "        ", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "np", ".", "dot", ",", "(", "embeds1", "[", "idx", ",", ":", "]", ",", "embeds2", ".", "T", ")", ")", ")", "\n", "", "sim_list", "=", "[", "]", "\n", "for", "res", "in", "rests", ":", "\n", "        ", "sim_list", ".", "append", "(", "res", ".", "get", "(", ")", ")", "\n", "", "sim_mat", "=", "np", ".", "concatenate", "(", "sim_list", ",", "axis", "=", "0", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim_multi_blocks": [[120, 129], ["openea.modules.utils.util.task_divide", "numpy.concatenate", "numpy.array", "numpy.matmul", "sim_list.append", "range"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide"], ["", "def", "sim_multi_blocks", "(", "embeds1", ",", "embeds2", ",", "blocks_num", "=", "1000", ")", ":", "\n", "    ", "num", "=", "embeds1", ".", "shape", "[", "0", "]", "\n", "idx_list", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "blocks_num", ")", "\n", "sim_list", "=", "[", "]", "\n", "for", "idx", "in", "idx_list", ":", "\n", "        ", "res", "=", "np", ".", "matmul", "(", "embeds1", "[", "idx", ",", ":", "]", ",", "embeds2", ".", "T", ")", "\n", "sim_list", ".", "append", "(", "res", ")", "\n", "", "sim_mat", "=", "np", ".", "concatenate", "(", "sim_list", ",", "axis", "=", "0", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.greedy_alignment": [[13, 85], ["time.time", "openea.modules.finding.similarity.sim", "range", "gc.collect", "set", "list", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "alignment.calculate_rank", "len", "len", "round", "time.time", "len", "numpy.array", "list.append", "rest.get", "numpy.array", "list", "numpy.array", "print", "print", "print", "print", "range", "len", "multiprocessing.Pool.apply_async", "range"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.calculate_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "greedy_alignment", "(", "embed1", ",", "embed2", ",", "top_k", ",", "nums_threads", ",", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", ":", "\n", "    ", "\"\"\"\n    Search alignment with greedy strategy.\n\n    Parameters\n    ----------\n    embed1 : matrix_like\n        An embedding matrix of size n1*d, where n1 is the number of embeddings and d is the dimension.\n    embed2 : matrix_like\n        An embedding matrix of size n2*d, where n2 is the number of embeddings and d is the dimension.\n    top_k : list of integers\n        Hits@k metrics for evaluating results.\n    nums_threads : int\n        The number of threads used to search alignment.\n    metric : string\n        The distance metric to use. It can be 'cosine', 'euclidean' or 'inner'.\n    normalize : bool, true or false.\n        Whether to normalize the input embeddings.\n    csls_k : int\n        K value for csls. If k > 0, enhance the similarity by csls.\n\n    Returns\n    -------\n    alignment_rest :  list, pairs of aligned entities\n    hits1 : float, hits@1 values for alignment results\n    mr : float, MR values for alignment results\n    mrr : float, MRR values for alignment results\n    \"\"\"", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "sim_mat", "=", "sim", "(", "embed1", ",", "embed2", ",", "metric", "=", "metric", ",", "normalize", "=", "normalize", ",", "csls_k", "=", "csls_k", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "if", "nums_threads", ">", "1", ":", "\n", "        ", "hits", "=", "[", "0", "]", "*", "len", "(", "top_k", ")", "\n", "mr", ",", "mrr", "=", "0", ",", "0", "\n", "alignment_rest", "=", "set", "(", ")", "\n", "rests", "=", "list", "(", ")", "\n", "search_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "search_tasks", ")", ")", "\n", "for", "task", "in", "search_tasks", ":", "\n", "            ", "mat", "=", "sim_mat", "[", "task", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "calculate_rank", ",", "(", "task", ",", "mat", ",", "top_k", ",", "accurate", ",", "num", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "            ", "sub_mr", ",", "sub_mrr", ",", "sub_hits", ",", "sub_hits1_rest", "=", "rest", ".", "get", "(", ")", "\n", "mr", "+=", "sub_mr", "\n", "mrr", "+=", "sub_mrr", "\n", "hits", "+=", "np", ".", "array", "(", "sub_hits", ")", "\n", "alignment_rest", "|=", "sub_hits1_rest", "\n", "", "", "else", ":", "\n", "        ", "mr", ",", "mrr", ",", "hits", ",", "alignment_rest", "=", "calculate_rank", "(", "list", "(", "range", "(", "num", ")", ")", ",", "sim_mat", ",", "top_k", ",", "accurate", ",", "num", ")", "\n", "", "assert", "len", "(", "alignment_rest", ")", "==", "num", "\n", "hits", "=", "np", ".", "array", "(", "hits", ")", "/", "num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "hits", ")", ")", ":", "\n", "        ", "hits", "[", "i", "]", "=", "round", "(", "hits", "[", "i", "]", ",", "3", ")", "\n", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "if", "accurate", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"accurate results with csls: csls={}, hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "csls_k", ",", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"accurate results: hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"quick results with csls: csls={}, hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "csls_k", ",", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"quick results: hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "", "hits1", "=", "hits", "[", "0", "]", "# todo: return hits1", "\n", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "alignment_rest", ",", "hits", ",", "mr", ",", "mrr", "\n", "# num = len(embed1)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.stable_alignment": [[154, 201], ["time.time", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "time.time", "alignment.galeshapley", "galeshapley.items", "print", "openea.modules.finding.similarity.sim", "dict", "dict", "numpy.array", "len", "list.append", "openea.modules.utils.util.merge_dic", "numpy.array", "list.append", "openea.modules.utils.util.merge_dic", "time.time", "range", "len", "multiprocessing.Pool.apply_async", "rest.get", "range", "len", "multiprocessing.Pool.apply_async", "rest.get", "int", "int", "time.time", "i.split", "j.split", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.galeshapley", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic"], ["", "def", "stable_alignment", "(", "embed1", ",", "embed2", ",", "metric", ",", "normalize", ",", "csls_k", ",", "nums_threads", ",", "cut", "=", "100", ",", "sim_mat", "=", "None", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "sim_mat", "is", "None", ":", "\n", "        ", "sim_mat", "=", "sim", "(", "embed1", ",", "embed2", ",", "metric", "=", "metric", ",", "normalize", "=", "normalize", ",", "csls_k", "=", "csls_k", ")", "\n", "\n", "", "kg1_candidates", ",", "kg2_candidates", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "x_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "x_tasks", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "total", "=", "0", "\n", "for", "task", "in", "x_tasks", ":", "\n", "        ", "total", "+=", "len", "(", "task", ")", "\n", "mat", "=", "sim_mat", "[", "task", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "arg_sort", ",", "(", "task", ",", "mat", ",", "'x_'", ",", "'y_'", ")", ")", ")", "\n", "", "assert", "total", "==", "num", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "        ", "kg1_candidates", "=", "merge_dic", "(", "kg1_candidates", ",", "rest", ".", "get", "(", ")", ")", "\n", "\n", "", "sim_mat", "=", "sim_mat", ".", "T", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "y_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "y_tasks", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "for", "task", "in", "y_tasks", ":", "\n", "        ", "mat", "=", "sim_mat", "[", "task", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "arg_sort", ",", "(", "task", ",", "mat", ",", "'y_'", ",", "'x_'", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "        ", "kg2_candidates", "=", "merge_dic", "(", "kg2_candidates", ",", "rest", ".", "get", "(", ")", ")", "\n", "\n", "# print(\"kg1_candidates\", len(kg1_candidates))", "\n", "# print(\"kg2_candidates\", len(kg2_candidates))", "\n", "\n", "", "print", "(", "\"generating candidate lists costs time {:.3f} s \"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "matching", "=", "galeshapley", "(", "kg1_candidates", ",", "kg2_candidates", ",", "cut", ")", "\n", "n", "=", "0", "\n", "for", "i", ",", "j", "in", "matching", ".", "items", "(", ")", ":", "\n", "        ", "if", "int", "(", "i", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "==", "int", "(", "j", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ":", "\n", "            ", "n", "+=", "1", "\n", "", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"stable alignment precision = {:.3f}%, time = {:.3f} s \"", ".", "format", "(", "n", "/", "len", "(", "matching", ")", "*", "100", ",", "cost", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.arg_sort": [[203, 211], ["dict", "range", "len", "str", "str"], "function", ["None"], ["", "def", "arg_sort", "(", "idx", ",", "sim_mat", ",", "prefix1", ",", "prefix2", ")", ":", "\n", "    ", "candidates", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idx", ")", ")", ":", "\n", "        ", "x_i", "=", "prefix1", "+", "str", "(", "idx", "[", "i", "]", ")", "\n", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "y_j", "=", "[", "prefix2", "+", "str", "(", "r", ")", "for", "r", "in", "rank", "]", "\n", "candidates", "[", "x_i", "]", "=", "y_j", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.calculate_rank": [[213, 236], ["set", "range", "len", "len", "set.add", "range", "numpy.argpartition", "len", "numpy.where", "numpy.array"], "function", ["None"], ["", "def", "calculate_rank", "(", "idx", ",", "sim_mat", ",", "top_k", ",", "accurate", ",", "total_num", ")", ":", "\n", "    ", "assert", "1", "in", "top_k", "\n", "mr", "=", "0", "\n", "mrr", "=", "0", "\n", "hits", "=", "[", "0", "]", "*", "len", "(", "top_k", ")", "\n", "hits1_rest", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idx", ")", ")", ":", "\n", "        ", "gold", "=", "idx", "[", "i", "]", "\n", "if", "accurate", ":", "\n", "            ", "rank", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "", "else", ":", "\n", "            ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "np", ".", "array", "(", "top_k", ")", "-", "1", ")", "\n", "", "hits1_rest", ".", "add", "(", "(", "gold", ",", "rank", "[", "0", "]", ")", ")", "\n", "assert", "gold", "in", "rank", "\n", "rank_index", "=", "np", ".", "where", "(", "rank", "==", "gold", ")", "[", "0", "]", "[", "0", "]", "\n", "mr", "+=", "(", "rank_index", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "rank_index", "+", "1", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "top_k", ")", ")", ":", "\n", "            ", "if", "rank_index", "<", "top_k", "[", "j", "]", ":", "\n", "                ", "hits", "[", "j", "]", "+=", "1", "\n", "", "", "", "mr", "/=", "total_num", "\n", "mrr", "/=", "total_num", "\n", "return", "mr", ",", "mrr", ",", "hits", ",", "hits1_rest", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.galeshapley": [[238, 292], ["list", "dict", "dict", "range", "suitor_pref_dict.keys", "list", "len", "dict.values", "dict.get", "set", "set", "reviewer_pref_dict[].index", "reviewer_pref_dict[].index", "suitor_pref_dict[].remove", "suitor_pref_dict.keys", "dict.keys"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "galeshapley", "(", "suitor_pref_dict", ",", "reviewer_pref_dict", ",", "max_iteration", ")", ":", "\n", "    ", "\"\"\" The Gale-Shapley algorithm. This is known to provide a unique, stable\n    suitor-optimal matching. The algorithm is as follows:\n\n    (1) Assign all suitors and reviewers to be unmatched.\n\n    (2) Take any unmatched suitor, s, and their most preferred reviewer, r.\n            - If r is unmatched, match s to r.\n            - Else, if r is matched, consider their current partner, r_partner.\n                - If r prefers s to r_partner, unmatch r_partner from r and\n                  match s to r.\n                - Else, leave s unmatched and remove r from their preference\n                  list.\n    (3) Go to (2) until all suitors are matched, then end.\n\n    Parameters\n    ----------\n    suitor_pref_dict : dict\n        A dictionary with suitors as keys and their respective preference lists\n        as values\n    reviewer_pref_dict : dict\n        A dictionary with reviewers as keys and their respective preference\n        lists as values\n    max_iteration : int\n        An integer as the maximum iterations\n\n    Returns\n    -------\n    matching : dict\n        The suitor-optimal (stable) matching with suitors as keys and the\n        reviewer they are matched with as values\n    \"\"\"", "\n", "suitors", "=", "list", "(", "suitor_pref_dict", ".", "keys", "(", ")", ")", "\n", "matching", "=", "dict", "(", ")", "\n", "rev_matching", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_iteration", ")", ":", "\n", "        ", "if", "len", "(", "suitors", ")", "<=", "0", ":", "\n", "            ", "break", "\n", "", "for", "s", "in", "suitors", ":", "\n", "            ", "r", "=", "suitor_pref_dict", "[", "s", "]", "[", "0", "]", "\n", "if", "r", "not", "in", "matching", ".", "values", "(", ")", ":", "\n", "                ", "matching", "[", "s", "]", "=", "r", "\n", "rev_matching", "[", "r", "]", "=", "s", "\n", "", "else", ":", "\n", "                ", "r_partner", "=", "rev_matching", ".", "get", "(", "r", ")", "\n", "if", "reviewer_pref_dict", "[", "r", "]", ".", "index", "(", "s", ")", "<", "reviewer_pref_dict", "[", "r", "]", ".", "index", "(", "r_partner", ")", ":", "\n", "                    ", "del", "matching", "[", "r_partner", "]", "\n", "matching", "[", "s", "]", "=", "r", "\n", "rev_matching", "[", "r", "]", "=", "s", "\n", "", "else", ":", "\n", "                    ", "suitor_pref_dict", "[", "s", "]", ".", "remove", "(", "r", ")", "\n", "", "", "", "suitors", "=", "list", "(", "set", "(", "suitor_pref_dict", ".", "keys", "(", ")", ")", "-", "set", "(", "matching", ".", "keys", "(", ")", ")", ")", "\n", "", "return", "matching", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.retrieve_topk_alignment": [[294, 325], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "openea.modules.finding.similarity.sim", "alignment.retrieve_topk_alignment.search_nearest_k"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k"], ["", "def", "retrieve_topk_alignment", "(", "kg1_source_ents", ",", "kg1_embeddings", ",", "kg2_candidates", ",", "kg2_embeddings", ",", "session", ",", "k", "=", "1", ",", "\n", "metric", "=", "'inner'", ",", "normalize", "=", "False", ",", "csls_k", "=", "0", ",", "output_path", "=", "None", ")", ":", "\n", "\n", "    ", "def", "search_nearest_k", "(", "sim_mat", ",", "k", ")", ":", "\n", "        ", "assert", "k", ">", "0", "\n", "neighbors", "=", "list", "(", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "\n", "pairs", "=", "[", "j", "for", "j", "in", "itertools", ".", "product", "(", "[", "i", "]", ",", "rank", "[", "0", ":", "k", "]", ")", "]", "\n", "neighbors", ".", "extend", "(", "pairs", ")", "\n", "", "assert", "len", "(", "neighbors", ")", "==", "num", "*", "k", "\n", "return", "neighbors", "\n", "\n", "", "def", "triple_writer", "(", "triples", ",", "output_path", ",", "separator", "=", "\"\\t\"", ",", "linebreak", "=", "\"\\n\"", ")", ":", "\n", "        ", "file", "=", "open", "(", "output_path", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "triples", ":", "\n", "            ", "file", ".", "write", "(", "str", "(", "s", ")", "+", "separator", "+", "str", "(", "p", ")", "+", "separator", "+", "str", "(", "o", ")", "+", "linebreak", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "print", "(", "output_path", ",", "\"saved\"", ")", "\n", "\n", "", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "kg1_embeddings", ",", "kg1_source_ents", ")", ".", "eval", "(", "session", "=", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "kg2_embeddings", ",", "kg2_candidates", ")", ".", "eval", "(", "session", "=", "session", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "metric", "=", "metric", ",", "normalize", "=", "normalize", ",", "csls_k", "=", "csls_k", ")", "\n", "topk_neighbors", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "topk_neighbors_w_sim", "=", "[", "(", "kg1_source_ents", "[", "i", "]", ",", "kg2_candidates", "[", "j", "]", ",", "sim_mat", "[", "i", ",", "j", "]", ")", "for", "i", ",", "j", "in", "topk_neighbors", "]", "\n", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "        ", "triple_writer", "(", "topk_neighbors_w_sim", ",", "output_path", ")", "\n", "\n", "", "return", "topk_neighbors_w_sim", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.valid": [[6, 15], ["openea.modules.finding.alignment.greedy_alignment", "numpy.matmul", "openea.modules.finding.alignment.greedy_alignment"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment"], ["def", "valid", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "top_k", ",", "threads_num", ",", "metric", "=", "'inner'", ",", "normalize", "=", "False", ",", "csls_k", "=", "0", ",", "accurate", "=", "False", ")", ":", "\n", "    ", "if", "mapping", "is", "None", ":", "\n", "        ", "_", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "embeds1", ",", "embeds2", ",", "top_k", ",", "threads_num", ",", "\n", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", "\n", "", "else", ":", "\n", "        ", "test_embeds1_mapped", "=", "np", ".", "matmul", "(", "embeds1", ",", "mapping", ")", "\n", "_", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "test_embeds1_mapped", ",", "embeds2", ",", "top_k", ",", "threads_num", ",", "\n", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", "\n", "", "return", "hits1_12", ",", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.test": [[17, 26], ["openea.modules.finding.alignment.greedy_alignment", "numpy.matmul", "openea.modules.finding.alignment.greedy_alignment"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment"], ["", "def", "test", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "top_k", ",", "threads_num", ",", "metric", "=", "'inner'", ",", "normalize", "=", "False", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", ":", "\n", "    ", "if", "mapping", "is", "None", ":", "\n", "        ", "alignment_rest_12", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "embeds1", ",", "embeds2", ",", "top_k", ",", "threads_num", ",", "\n", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", "\n", "", "else", ":", "\n", "        ", "test_embeds1_mapped", "=", "np", ".", "matmul", "(", "embeds1", ",", "mapping", ")", "\n", "alignment_rest_12", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "test_embeds1_mapped", ",", "embeds2", ",", "top_k", ",", "threads_num", ",", "\n", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", "\n", "", "return", "alignment_rest_12", ",", "hits1_12", ",", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop": [[28, 34], ["print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "early_stop", "(", "flag1", ",", "flag2", ",", "flag", ")", ":", "\n", "    ", "if", "flag", "<=", "flag2", "<=", "flag1", ":", "\n", "        ", "print", "(", "\"\\n == should early stop == \\n\"", ")", "\n", "return", "flag2", ",", "flag", ",", "True", "\n", "", "else", ":", "\n", "        ", "return", "flag2", ",", "flag", ",", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_potential_alignment_greedily": [[8, 10], ["alignment_finder.find_alignment"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.find_alignment"], ["def", "find_potential_alignment_greedily", "(", "sim_mat", ",", "sim_th", ")", ":", "\n", "    ", "return", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_potential_alignment_mwgm": [[12, 26], ["time.time", "alignment_finder.find_alignment", "time.time", "alignment_finder.check_new_alignment", "print", "print", "alignment_finder.mwgm", "alignment_finder.mwgm", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.find_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm"], ["", "def", "find_potential_alignment_mwgm", "(", "sim_mat", ",", "sim_th", ",", "k", ",", "heuristic", "=", "True", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "potential_aligned_pairs", "=", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "k", ")", "\n", "if", "potential_aligned_pairs", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "if", "heuristic", ":", "\n", "        ", "selected_aligned_pairs", "=", "mwgm", "(", "potential_aligned_pairs", ",", "sim_mat", ",", "mwgm_graph_tool", ")", "\n", "", "else", ":", "\n", "        ", "selected_aligned_pairs", "=", "mwgm", "(", "potential_aligned_pairs", ",", "sim_mat", ",", "mwgm_igraph", ")", "\n", "", "check_new_alignment", "(", "selected_aligned_pairs", ",", "context", "=", "\"after mwgm\"", ")", "\n", "print", "(", "\"mwgm costs time: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "print", "(", "\"selecting potential alignment costs time: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "selected_aligned_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_alignment": [[28, 52], ["alignment_finder.filter_sim_mat", "alignment_finder.check_new_alignment", "alignment_finder.search_nearest_k", "alignment_finder.check_new_alignment", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.filter_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment"], ["", "def", "find_alignment", "(", "sim_mat", ",", "sim_th", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    Find potential pairs of aligned entities from the similarity matrix.\n    The potential pair (x, y) should satisfy: 1) sim(x, y) > sim_th; 2) y is among the nearest-k neighbors of x.\n\n    Parameters\n    ----------\n    :param sim_mat:\n    :param sim_th:\n    :param k:\n    :return:\n    \"\"\"", "\n", "potential_aligned_pairs", "=", "filter_sim_mat", "(", "sim_mat", ",", "sim_th", ")", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim threshold\"", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "potential_aligned_pairs", "\n", "", "nearest_k_neighbors", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "potential_aligned_pairs", "&=", "nearest_k_neighbors", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim and nearest k\"", ")", "\n", "return", "potential_aligned_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.filter_sim_mat": [[54, 64], ["set", "numpy.where", "zip", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "filter_sim_mat", "(", "mat", ",", "threshold", ",", "greater", "=", "True", ",", "equal", "=", "False", ")", ":", "\n", "    ", "if", "greater", "and", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", ">=", "threshold", ")", "\n", "", "elif", "greater", "and", "not", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", ">", "threshold", ")", "\n", "", "elif", "not", "greater", "and", "equal", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", "<=", "threshold", ")", "\n", "", "else", ":", "\n", "        ", "x", ",", "y", "=", "np", ".", "where", "(", "mat", "<", "threshold", ")", "\n", "", "return", "set", "(", "zip", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k": [[66, 77], ["set", "range", "numpy.argpartition", "set", "len", "itertools.product"], "function", ["None"], ["", "def", "search_nearest_k", "(", "sim_mat", ",", "k", ")", ":", "\n", "    ", "assert", "k", ">", "0", "\n", "neighbors", "=", "set", "(", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "rank", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "# heap sort: top 50 is rank first, but not gurantee order.", "\n", "pairs", "=", "[", "j", "for", "j", "in", "itertools", ".", "product", "(", "[", "i", "]", ",", "rank", "[", "0", ":", "k", "]", ")", "]", "\n", "neighbors", "|=", "set", "(", "pairs", ")", "\n", "# del rank", "\n", "", "assert", "len", "(", "neighbors", ")", "==", "num", "*", "k", "\n", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm": [[79, 81], ["alignment_finder.mwgm_graph_tool", "alignment_finder.mwgm_igraph"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm_graph_tool", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm_igraph"], ["", "def", "mwgm", "(", "pairs", ",", "sim_mat", ",", "func", ")", ":", "\n", "    ", "return", "func", "(", "pairs", ",", "sim_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm_graph_tool": [[83, 111], ["Graph", "Graph.new_edge_property", "dict", "dict", "list", "print", "max_cardinality_matching", "[].tolist", "set", "isinstance", "list", "dict.get", "dict.get", "Graph.add_edge", "list.append", "set.add", "dict.keys", "Graph.add_vertex", "dict.keys", "Graph.add_vertex", "Graph.edge", "numpy.where", "max_cardinality_matching.get_array"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "mwgm_graph_tool", "(", "pairs", ",", "sim_mat", ")", ":", "\n", "    ", "from", "graph_tool", ".", "all", "import", "Graph", ",", "max_cardinality_matching", "# necessary", "\n", "if", "not", "isinstance", "(", "pairs", ",", "list", ")", ":", "\n", "        ", "pairs", "=", "list", "(", "pairs", ")", "\n", "", "g", "=", "Graph", "(", ")", "\n", "weight_map", "=", "g", ".", "new_edge_property", "(", "\"float\"", ")", "\n", "nodes_dict1", "=", "dict", "(", ")", "\n", "nodes_dict2", "=", "dict", "(", ")", "\n", "edges", "=", "list", "(", ")", "\n", "for", "x", ",", "y", "in", "pairs", ":", "\n", "        ", "if", "x", "not", "in", "nodes_dict1", ".", "keys", "(", ")", ":", "\n", "            ", "n1", "=", "g", ".", "add_vertex", "(", ")", "\n", "nodes_dict1", "[", "x", "]", "=", "n1", "\n", "", "if", "y", "not", "in", "nodes_dict2", ".", "keys", "(", ")", ":", "\n", "            ", "n2", "=", "g", ".", "add_vertex", "(", ")", "\n", "nodes_dict2", "[", "y", "]", "=", "n2", "\n", "", "n1", "=", "nodes_dict1", ".", "get", "(", "x", ")", "\n", "n2", "=", "nodes_dict2", ".", "get", "(", "y", ")", "\n", "e", "=", "g", ".", "add_edge", "(", "n1", ",", "n2", ")", "\n", "edges", ".", "append", "(", "e", ")", "\n", "weight_map", "[", "g", ".", "edge", "(", "n1", ",", "n2", ")", "]", "=", "sim_mat", "[", "x", ",", "y", "]", "\n", "", "print", "(", "\"graph via graph_tool\"", ",", "g", ")", "\n", "res", "=", "max_cardinality_matching", "(", "g", ",", "heuristic", "=", "True", ",", "weight", "=", "weight_map", ",", "minimize", "=", "False", ")", "\n", "edge_index", "=", "np", ".", "where", "(", "res", ".", "get_array", "(", ")", "==", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "matched_pairs", "=", "set", "(", ")", "\n", "for", "index", "in", "edge_index", ":", "\n", "        ", "matched_pairs", ".", "add", "(", "pairs", "[", "index", "]", ")", "\n", "", "return", "matched_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.mwgm_igraph": [[113, 138], ["set", "set", "len", "igraph.Graph", "ig.Graph.maximum_bipartite_matching", "print", "set", "isinstance", "list", "dict", "dict", "len", "len", "len", "len", "len", "set.add", "len", "len", "len", "leda_graph.maximum_bipartite_matching.edges"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "mwgm_igraph", "(", "pairs", ",", "sim_mat", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "pairs", ",", "list", ")", ":", "\n", "        ", "pairs", "=", "list", "(", "pairs", ")", "\n", "", "index_id_dic1", ",", "index_id_dic2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "index1", "=", "set", "(", "[", "pair", "[", "0", "]", "for", "pair", "in", "pairs", "]", ")", "\n", "index2", "=", "set", "(", "[", "pair", "[", "1", "]", "for", "pair", "in", "pairs", "]", ")", "\n", "for", "index", "in", "index1", ":", "\n", "        ", "index_id_dic1", "[", "index", "]", "=", "len", "(", "index_id_dic1", ")", "\n", "", "off", "=", "len", "(", "index_id_dic1", ")", "\n", "for", "index", "in", "index2", ":", "\n", "        ", "index_id_dic2", "[", "index", "]", "=", "len", "(", "index_id_dic2", ")", "+", "off", "\n", "", "assert", "len", "(", "index1", ")", "==", "len", "(", "index_id_dic1", ")", "\n", "assert", "len", "(", "index2", ")", "==", "len", "(", "index_id_dic2", ")", "\n", "edge_list", "=", "[", "(", "index_id_dic1", "[", "x", "]", ",", "index_id_dic2", "[", "y", "]", ")", "for", "(", "x", ",", "y", ")", "in", "pairs", "]", "\n", "weight_list", "=", "[", "sim_mat", "[", "x", ",", "y", "]", "for", "(", "x", ",", "y", ")", "in", "pairs", "]", "\n", "leda_graph", "=", "ig", ".", "Graph", "(", "edge_list", ")", "\n", "leda_graph", ".", "vs", "[", "\"type\"", "]", "=", "[", "0", "]", "*", "len", "(", "index1", ")", "+", "[", "1", "]", "*", "len", "(", "index2", ")", "\n", "leda_graph", ".", "es", "[", "'weight'", "]", "=", "weight_list", "\n", "res", "=", "leda_graph", ".", "maximum_bipartite_matching", "(", "weights", "=", "leda_graph", ".", "es", "[", "'weight'", "]", ")", "\n", "print", "(", "res", ")", "\n", "selected_index", "=", "[", "e", ".", "index", "for", "e", "in", "res", ".", "edges", "(", ")", "]", "\n", "matched_pairs", "=", "set", "(", ")", "\n", "for", "index", "in", "selected_index", ":", "\n", "        ", "matched_pairs", ".", "add", "(", "pairs", "[", "index", "]", ")", "\n", "", "return", "matched_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.check_new_alignment": [[140, 159], ["print", "print", "print", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "check_new_alignment", "(", "aligned_pairs", ",", "context", "=", "\"check alignment\"", ",", "all_pos", "=", "False", ")", ":", "\n", "    ", "if", "aligned_pairs", "is", "None", "or", "len", "(", "aligned_pairs", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"{}, empty aligned pairs\"", ".", "format", "(", "context", ")", ")", "\n", "return", "\n", "", "num", "=", "0", "\n", "for", "x", ",", "y", "in", "aligned_pairs", ":", "\n", "        ", "if", "x", "==", "y", ":", "\n", "            ", "num", "+=", "1", "\n", "\n", "", "", "print", "(", "\"{}, right alignment: {}/{}={:.3f}\"", ".", "format", "(", "context", ",", "num", ",", "len", "(", "aligned_pairs", ")", ",", "num", "/", "len", "(", "aligned_pairs", ")", ")", ")", "\n", "if", "all_pos", ":", "\n", "        ", "precision", "=", "num", "/", "len", "(", "aligned_pairs", ")", "\n", "recall", "=", "num", "/", "all_pos", "\n", "if", "precision", "+", "recall", "==", "0", ":", "\n", "            ", "f1", "=", "0", "\n", "", "else", ":", "\n", "            ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "print", "(", "\"precision: {}, recall: {}, f1: {}\"", ".", "format", "(", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.__init__": [[10, 16], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "idx", ",", "table", "=", "None", ")", ":", "\n", "        ", "self", ".", "table_id", "=", "idx", "# id of the hash table", "\n", "if", "table", "is", "None", ":", "\n", "            ", "self", ".", "table", "=", "dict", "(", ")", "# key: hash code; value: a tuple (vector id, vector)", "\n", "", "else", ":", "\n", "            ", "self", ".", "table", "=", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys": [[17, 19], ["lshash.HashTable.table.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "table", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.get_bucket_by_code": [[20, 22], ["lshash.HashTable.table.get", "set"], "methods", ["None"], ["", "def", "get_bucket_by_code", "(", "self", ",", "code", ")", ":", "\n", "        ", "return", "self", ".", "table", ".", "get", "(", "code", ",", "set", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.add_vec": [[23, 25], ["lshash.HashTable.table.setdefault().add", "lshash.HashTable.table.setdefault", "set"], "methods", ["None"], ["", "def", "add_vec", "(", "self", ",", "code", ",", "vec", ",", "idx", ")", ":", "\n", "        ", "self", ".", "table", ".", "setdefault", "(", "code", ",", "set", "(", ")", ")", ".", "add", "(", "(", "idx", ",", "vec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.__init__": [[29, 37], ["lshash.LSHash._init_uniform_planes", "lshash.LSHash._init_tables"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._init_uniform_planes", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._init_tables"], ["    ", "def", "__init__", "(", "self", ",", "code_dim", ",", "vec_dim", ",", "num_tables", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "hash_size", "=", "code_dim", "\n", "self", ".", "input_dim", "=", "vec_dim", "\n", "self", ".", "num_tables", "=", "num_tables", "\n", "\n", "self", ".", "_init_uniform_planes", "(", ")", "\n", "self", ".", "_init_tables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._init_uniform_planes": [[38, 40], ["lshash.LSHash._generate_uniform_planes", "range"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._generate_uniform_planes"], ["", "def", "_init_uniform_planes", "(", "self", ")", ":", "\n", "        ", "self", ".", "uniform_planes", "=", "[", "self", ".", "_generate_uniform_planes", "(", ")", "for", "_", "in", "range", "(", "self", ".", "num_tables", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._init_tables": [[41, 43], ["lshash.HashTable", "range"], "methods", ["None"], ["", "def", "_init_tables", "(", "self", ")", ":", "\n", "        ", "self", ".", "hash_tables", "=", "[", "HashTable", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_tables", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._generate_uniform_planes": [[44, 47], ["numpy.random.randn"], "methods", ["None"], ["", "def", "_generate_uniform_planes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generate uniformly distributed hyperplanes and return it as a 2D numpy array. \"\"\"", "\n", "return", "np", ".", "random", ".", "randn", "(", "self", ".", "hash_size", ",", "self", ".", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._hash": [[48, 58], ["numpy.array", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "_hash", "(", "self", ",", "planes", ",", "vec", ")", ":", "\n", "        ", "\"\"\"\n        Generates the binary hash for `vec` and returns it.\n        :param planes:  The planes are random uniform planes with a dimension of `code_dim` * `vec_dim`.\n        :param vec: A Python tuple or list object that contains only numbers. The dimension needs to be 1 * `vec_dim`.\n        :return:\n        \"\"\"", "\n", "vec", "=", "np", ".", "array", "(", "vec", ")", "# for faster dot product", "\n", "projections", "=", "np", ".", "dot", "(", "planes", ",", "vec", ")", "\n", "return", "\"\"", ".", "join", "(", "[", "'1'", "if", "i", ">", "0", "else", "'0'", "for", "i", "in", "projections", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._as_np_array": [[59, 63], ["isinstance", "numpy.asarray"], "methods", ["None"], ["", "def", "_as_np_array", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index": [[64, 76], ["isinstance", "tuple", "enumerate", "vec.tolist.tolist.tolist", "table.add_vec", "lshash.LSHash._hash"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.add_vec", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._hash"], ["", "def", "index", "(", "self", ",", "vec", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Index a single input vector by adding it to the hash tables.\n        :param vec:\n        :param idx:\n        :return:\n        \"\"\"", "\n", "if", "isinstance", "(", "vec", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "vec", "=", "vec", ".", "tolist", "(", ")", "\n", "", "vec", "=", "tuple", "(", "vec", ")", "\n", "for", "i", ",", "table", "in", "enumerate", "(", "self", ".", "hash_tables", ")", ":", "\n", "            ", "table", ".", "add_vec", "(", "self", ".", "_hash", "(", "self", ".", "uniform_planes", "[", "i", "]", ",", "vec", ")", ",", "vec", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.query": [[77, 121], ["set", "enumerate", "list", "numpy.array", "lshash.LSHash._hash", "list.update", "numpy.argmin", "table.get_bucket_by_code", "d_func", "numpy.array.argsort", "lshash.LSHash._as_np_array", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._hash", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.get_bucket_by_code", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash._as_np_array"], ["", "", "def", "query", "(", "self", ",", "query_vec", ",", "query_id", "=", "None", ",", "dis_mat", "=", "None", ",", "num_results", "=", "1", ",", "distance_func", "=", "\"euclidean\"", ")", ":", "\n", "        ", "\"\"\"\n        Takes `query_vec` which is either a tuple or a list of numbers or numpy array,\n        returns `num_results` of results as a list of tuples that are ranked\n        based on the supplied metric function `distance_func`.\n        :param query_vec:\n        :param num_results:\n        :param distance_func:\n        :return:\n        \"\"\"", "\n", "candidates", "=", "set", "(", ")", "\n", "if", "distance_func", "==", "\"euclidean\"", ":", "\n", "            ", "d_func", "=", "LSHash", ".", "euclidean_dist_square", "\n", "", "elif", "distance_func", "==", "\"true_euclidean\"", ":", "\n", "            ", "d_func", "=", "LSHash", ".", "euclidean_dist", "\n", "", "elif", "distance_func", "==", "\"centred_euclidean\"", ":", "\n", "            ", "d_func", "=", "LSHash", ".", "euclidean_dist_centred", "\n", "", "elif", "distance_func", "==", "\"cosine\"", ":", "\n", "            ", "d_func", "=", "LSHash", ".", "cosine_dist", "\n", "", "elif", "distance_func", "==", "\"l1norm\"", ":", "\n", "            ", "d_func", "=", "LSHash", ".", "l1norm_dist", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"The distance function name is invalid.\"", ")", "\n", "\n", "", "for", "i", ",", "table", "in", "enumerate", "(", "self", ".", "hash_tables", ")", ":", "\n", "            ", "binary_hash", "=", "self", ".", "_hash", "(", "self", ".", "uniform_planes", "[", "i", "]", ",", "query_vec", ")", "\n", "candidates", ".", "update", "(", "table", ".", "get_bucket_by_code", "(", "binary_hash", ")", ")", "\n", "\n", "# rank candidates by distance function", "\n", "", "candidates", "=", "list", "(", "candidates", ")", "\n", "if", "query_id", "is", "not", "None", "and", "dis_mat", "is", "not", "None", ":", "\n", "            ", "candidates_dis", "=", "[", "dis_mat", "[", "ix", "[", "0", "]", ",", "query_id", "]", "for", "ix", "in", "candidates", "]", "\n", "", "else", ":", "\n", "            ", "candidates_dis", "=", "[", "d_func", "(", "query_vec", ",", "self", ".", "_as_np_array", "(", "ix", "[", "1", "]", ")", ")", "for", "ix", "in", "candidates", "]", "\n", "# print(len(candidates))", "\n", "", "candidates_dis", "=", "np", ".", "array", "(", "candidates_dis", ")", "\n", "if", "num_results", "==", "1", ":", "\n", "            ", "sorted_index", "=", "np", ".", "argmin", "(", "candidates_dis", ")", "\n", "candidates", "=", "[", "candidates", "[", "sorted_index", "]", "]", "\n", "", "else", ":", "\n", "            ", "sorted_index", "=", "candidates_dis", ".", "argsort", "(", ")", "[", "0", ":", "num_results", "]", "\n", "candidates", "=", "[", "candidates", "[", "i", "]", "for", "i", "in", "sorted_index", "]", "\n", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.hamming_dist": [[124, 128], ["xor_result.count", "bitarray", "bitarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hamming_dist", "(", "bitarray1", ",", "bitarray2", ")", ":", "\n", "        ", "xor_result", "=", "bitarray", "(", "bitarray1", ")", "^", "bitarray", "(", "bitarray2", ")", "\n", "return", "xor_result", ".", "count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.euclidean_dist": [[129, 134], ["numpy.sqrt", "numpy.array", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "array", "(", "x", ")", "-", "y", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "diff", ",", "diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.euclidean_dist_square": [[135, 140], ["numpy.dot", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist_square", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "array", "(", "x", ")", "-", "y", "\n", "return", "np", ".", "dot", "(", "diff", ",", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.euclidean_dist_centred": [[141, 146], ["numpy.dot", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist_centred", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "mean", "(", "x", ")", "-", "np", ".", "mean", "(", "y", ")", "\n", "return", "np", ".", "dot", "(", "diff", ",", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.l1norm_dist": [[147, 150], ["sum", "abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l1norm_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "abs", "(", "x", "-", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.cosine_dist": [[151, 154], ["numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "cosine_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "1", "-", "np", ".", "dot", "(", "x", ",", "y", ")", "/", "(", "(", "np", ".", "dot", "(", "x", ",", "x", ")", "*", "np", ".", "dot", "(", "y", ",", "y", ")", ")", "**", "0.5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_batch_queue": [[11, 15], ["exit", "out_queue.put", "batch.generate_pos_batch"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch"], ["def", "generate_pos_batch_queue", "(", "triple_list1", ",", "triple_list2", ",", "batch_size", ",", "steps", ",", "out_queue", ")", ":", "\n", "    ", "for", "step", "in", "steps", ":", "\n", "        ", "out_queue", ".", "put", "(", "generate_pos_batch", "(", "triple_list1", ",", "triple_list2", ",", "batch_size", ",", "step", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_batch": [[17, 23], ["int", "batch.generate_pos_triples", "batch.generate_pos_triples", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples"], ["", "def", "generate_pos_batch", "(", "triple_list1", ",", "triple_list2", ",", "batch_size", ",", "step", ")", ":", "\n", "    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "pos_batch1", "=", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ")", "\n", "pos_batch2", "=", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ")", "\n", "return", "pos_batch1", "+", "pos_batch2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_relation_triple_batch_queue": [[25, 34], ["exit", "batch.generate_relation_triple_batch", "out_queue.put"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_relation_triple_batch"], ["", "def", "generate_relation_triple_batch_queue", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "steps", ",", "out_queue", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", ":", "\n", "    ", "for", "step", "in", "steps", ":", "\n", "        ", "pos_batch", ",", "neg_batch", "=", "generate_relation_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_batch", ",", "neg_batch", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_relation_triple_batch": [[36, 46], ["int", "batch.generate_pos_triples", "batch.generate_pos_triples", "batch.generate_neg_triples_fast", "batch.generate_neg_triples_fast", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples_fast", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples_fast"], ["", "def", "generate_relation_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", ":", "\n", "    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "pos_batch1", "=", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ")", "\n", "pos_batch2", "=", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ")", "\n", "neg_batch1", "=", "generate_neg_triples_fast", "(", "pos_batch1", ",", "triple_set1", ",", "entity_list1", ",", "neg_triples_num", ",", "neighbor", "=", "neighbor1", ")", "\n", "neg_batch2", "=", "generate_neg_triples_fast", "(", "pos_batch2", ",", "triple_set2", ",", "entity_list2", ",", "neg_triples_num", ",", "neighbor", "=", "neighbor2", ")", "\n", "return", "pos_batch1", "+", "pos_batch2", ",", "neg_batch1", "+", "neg_batch2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples": [[48, 58], ["len", "len", "len", "len"], "function", ["None"], ["", "def", "generate_pos_triples", "(", "triples", ",", "batch_size", ",", "step", ",", "is_fixed_size", "=", "False", ")", ":", "\n", "    ", "start", "=", "step", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "if", "end", ">", "len", "(", "triples", ")", ":", "\n", "        ", "end", "=", "len", "(", "triples", ")", "\n", "", "pos_batch", "=", "triples", "[", "start", ":", "end", "]", "\n", "# pos_batch = random.sample(triples, batch_size)", "\n", "if", "is_fixed_size", "and", "len", "(", "pos_batch", ")", "<", "batch_size", ":", "\n", "        ", "pos_batch", "+=", "triples", "[", ":", "batch_size", "-", "len", "(", "pos_batch", ")", "]", "\n", "", "return", "pos_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples": [[60, 87], ["list", "dict", "dict.get", "dict.get", "range", "len", "len", "numpy.random.binomial", "random.choice", "random.choice", "list.append", "random.choice", "list.append"], "function", ["None"], ["", "def", "generate_neg_triples", "(", "pos_batch", ",", "all_triples_set", ",", "entities_list", ",", "neg_triples_num", ",", "neighbor", "=", "None", ",", "max_try", "=", "10", ")", ":", "\n", "    ", "if", "neighbor", "is", "None", ":", "\n", "        ", "neighbor", "=", "dict", "(", ")", "\n", "", "neg_batch", "=", "list", "(", ")", "\n", "for", "head", ",", "relation", ",", "tail", "in", "pos_batch", ":", "\n", "        ", "head_candidates", "=", "neighbor", ".", "get", "(", "head", ",", "entities_list", ")", "\n", "tail_candidates", "=", "neighbor", ".", "get", "(", "tail", ",", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "neg_triples_num", ")", ":", "\n", "            ", "n", "=", "0", "\n", "while", "True", ":", "\n", "                ", "corrupt_head_prob", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", "\n", "neg_head", "=", "head", "\n", "neg_tail", "=", "tail", "\n", "if", "corrupt_head_prob", ":", "\n", "                    ", "neg_head", "=", "random", ".", "choice", "(", "head_candidates", ")", "\n", "", "else", ":", "\n", "                    ", "neg_tail", "=", "random", ".", "choice", "(", "tail_candidates", ")", "\n", "", "if", "(", "neg_head", ",", "relation", ",", "neg_tail", ")", "not", "in", "all_triples_set", ":", "\n", "                    ", "neg_batch", ".", "append", "(", "(", "neg_head", ",", "relation", ",", "neg_tail", ")", ")", "\n", "break", "\n", "", "n", "+=", "1", "\n", "if", "n", "==", "max_try", ":", "\n", "                    ", "neg_tail", "=", "random", ".", "choice", "(", "entities_list", ")", "\n", "neg_batch", ".", "append", "(", "(", "head", ",", "relation", ",", "neg_tail", ")", ")", "\n", "break", "\n", "", "", "", "", "assert", "len", "(", "neg_batch", ")", "==", "neg_triples_num", "*", "len", "(", "pos_batch", ")", "\n", "return", "neg_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples_fast": [[89, 120], ["list", "dict", "list", "dict.get", "dict.get", "range", "list.extend", "len", "numpy.random.binomial", "len", "len", "random.sample", "random.sample", "list", "list", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample"], ["", "def", "generate_neg_triples_fast", "(", "pos_batch", ",", "all_triples_set", ",", "entities_list", ",", "neg_triples_num", ",", "neighbor", "=", "None", ",", "max_try", "=", "10", ")", ":", "\n", "    ", "if", "neighbor", "is", "None", ":", "\n", "        ", "neighbor", "=", "dict", "(", ")", "\n", "", "neg_batch", "=", "list", "(", ")", "\n", "for", "head", ",", "relation", ",", "tail", "in", "pos_batch", ":", "\n", "        ", "neg_triples", "=", "list", "(", ")", "\n", "nums_to_sample", "=", "neg_triples_num", "\n", "head_candidates", "=", "neighbor", ".", "get", "(", "head", ",", "entities_list", ")", "\n", "tail_candidates", "=", "neighbor", ".", "get", "(", "tail", ",", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "max_try", ")", ":", "\n", "            ", "corrupt_head_prob", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", "\n", "if", "corrupt_head_prob", ":", "\n", "                ", "neg_heads", "=", "random", ".", "sample", "(", "head_candidates", ",", "nums_to_sample", ")", "\n", "i_neg_triples", "=", "{", "(", "h2", ",", "relation", ",", "tail", ")", "for", "h2", "in", "neg_heads", "}", "\n", "", "else", ":", "\n", "                ", "neg_tails", "=", "random", ".", "sample", "(", "tail_candidates", ",", "nums_to_sample", ")", "\n", "i_neg_triples", "=", "{", "(", "head", ",", "relation", ",", "t2", ")", "for", "t2", "in", "neg_tails", "}", "\n", "", "if", "i", "==", "max_try", "-", "1", ":", "\n", "                ", "neg_triples", "+=", "list", "(", "i_neg_triples", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "i_neg_triples", "=", "list", "(", "i_neg_triples", "-", "all_triples_set", ")", "\n", "neg_triples", "+=", "i_neg_triples", "\n", "", "if", "len", "(", "neg_triples", ")", "==", "neg_triples_num", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "nums_to_sample", "=", "neg_triples_num", "-", "len", "(", "neg_triples", ")", "\n", "", "", "assert", "len", "(", "neg_triples", ")", "==", "neg_triples_num", "\n", "neg_batch", ".", "extend", "(", "neg_triples", ")", "\n", "", "assert", "len", "(", "neg_batch", ")", "==", "neg_triples_num", "*", "len", "(", "pos_batch", ")", "\n", "return", "neg_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neighbours": [[122, 143], ["openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dict", "gc.collect", "numpy.array", "numpy.array", "len", "list.append", "openea.modules.utils.util.merge_dic", "range", "len", "multiprocessing.Pool.apply_async", "res.get", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic"], ["", "def", "generate_neighbours", "(", "entity_embeds", ",", "entity_list", ",", "neighbors_num", ",", "threads_num", ")", ":", "\n", "    ", "ent_frags", "=", "task_divide", "(", "np", ".", "array", "(", "entity_list", ")", ",", "threads_num", ")", "\n", "ent_frag_indexes", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "len", "(", "entity_list", ")", ")", ")", ",", "threads_num", ")", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "ent_frags", ")", ")", "\n", "results", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ent_frags", ")", ")", ":", "\n", "        ", "results", ".", "append", "(", "pool", ".", "apply_async", "(", "find_neighbours", ",", "\n", "args", "=", "(", "ent_frags", "[", "i", "]", ",", "np", ".", "array", "(", "entity_list", ")", ",", "\n", "entity_embeds", "[", "ent_frag_indexes", "[", "i", "]", ",", ":", "]", ",", "\n", "entity_embeds", ",", "neighbors_num", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "dic", "=", "dict", "(", ")", "\n", "for", "res", "in", "results", ":", "\n", "        ", "dic", "=", "merge_dic", "(", "dic", ",", "res", ".", "get", "(", ")", ")", "\n", "\n", "", "del", "results", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.find_neighbours": [[145, 154], ["dict", "numpy.matmul", "range", "numpy.argpartition", "entity_list[].tolist"], "function", ["None"], ["", "def", "find_neighbours", "(", "frags", ",", "entity_list", ",", "sub_embed", ",", "embed", ",", "k", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "sub_embed", ",", "embed", ".", "T", ")", "\n", "for", "i", "in", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_index", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "\n", "neighbors_index", "=", "sort_index", "[", "0", ":", "k", "]", "\n", "neighbors", "=", "entity_list", "[", "neighbors_index", "]", ".", "tolist", "(", ")", "\n", "dic", "[", "frags", "[", "i", "]", "]", "=", "neighbors", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_triple_label_batch": [[156, 173], ["int", "exit", "batch.generate_pos_triples", "batch.generate_pos_triples", "batch.generate_neg_triples", "batch.generate_neg_triples", "out_queue.put", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_triples"], ["", "def", "generate_triple_label_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "entity_list1", ",", "entity_list2", ",", "\n", "batch_size", ",", "steps", ",", "out_queue", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", ":", "\n", "    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "for", "step", "in", "steps", ":", "\n", "        ", "pos_batch1", "=", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ")", "\n", "pos_batch2", "=", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ")", "\n", "neg_batch1", "=", "generate_neg_triples", "(", "pos_batch1", ",", "triple_set1", ",", "entity_list1", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor1", ")", "\n", "neg_batch2", "=", "generate_neg_triples", "(", "pos_batch2", ",", "triple_set2", ",", "entity_list2", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor2", ")", "\n", "pos_batch", "=", "pos_batch1", "+", "pos_batch2", "\n", "pos_label", "=", "[", "1", "]", "*", "len", "(", "pos_batch", ")", "\n", "neg_batch", "=", "neg_batch1", "+", "neg_batch2", "\n", "neg_label", "=", "[", "-", "1", "]", "*", "len", "(", "neg_batch", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_batch", "+", "neg_batch", ",", "pos_label", "+", "neg_label", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_neg_attribute_triples": [[175, 188], ["list", "dict", "range", "len", "list.append", "len", "random.choice", "dict.get"], "function", ["None"], ["", "def", "generate_neg_attribute_triples", "(", "pos_batch", ",", "all_triples_set", ",", "entity_list", ",", "neg_triples_num", ",", "neighbor", "=", "None", ")", ":", "\n", "    ", "if", "neighbor", "is", "None", ":", "\n", "        ", "neighbor", "=", "dict", "(", ")", "\n", "", "neg_batch", "=", "list", "(", ")", "\n", "for", "head", ",", "attribute", ",", "value", "in", "pos_batch", ":", "\n", "        ", "for", "i", "in", "range", "(", "neg_triples_num", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "neg_head", "=", "random", ".", "choice", "(", "neighbor", ".", "get", "(", "head", ",", "entity_list", ")", ")", "\n", "if", "(", "neg_head", ",", "attribute", ",", "value", ")", "not", "in", "all_triples_set", ":", "\n", "                    ", "break", "\n", "", "", "neg_batch", ".", "append", "(", "(", "neg_head", ",", "attribute", ",", "value", ")", ")", "\n", "", "", "assert", "len", "(", "neg_batch", ")", "==", "neg_triples_num", "*", "len", "(", "pos_batch", ")", "\n", "return", "neg_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_attribute_triple_batch_queue": [[190, 200], ["exit", "batch.generate_attribute_triple_batch", "out_queue.put"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_attribute_triple_batch"], ["", "def", "generate_attribute_triple_batch_queue", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "steps", ",", "out_queue", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ",", "is_fixed_size", ")", ":", "\n", "    ", "for", "step", "in", "steps", ":", "\n", "        ", "pos_batch", ",", "neg_batch", "=", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ",", "\n", "is_fixed_size", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_batch", ",", "neg_batch", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_attribute_triple_batch": [[202, 214], ["int", "batch.generate_pos_triples", "batch.generate_pos_triples", "batch.generate_neg_attribute_triples", "batch.generate_neg_attribute_triples", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples"], ["", "def", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ",", "is_fixed_size", ")", ":", "\n", "    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "pos_batch1", "=", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ",", "is_fixed_size", "=", "is_fixed_size", ")", "\n", "pos_batch2", "=", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ",", "is_fixed_size", "=", "is_fixed_size", ")", "\n", "neg_batch1", "=", "generate_neg_attribute_triples", "(", "pos_batch1", ",", "triple_set1", ",", "entity_list1", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor1", ")", "\n", "neg_batch2", "=", "generate_neg_attribute_triples", "(", "pos_batch2", ",", "triple_set2", ",", "entity_list2", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor2", ")", "\n", "return", "pos_batch1", "+", "pos_batch2", ",", "neg_batch1", "+", "neg_batch2", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.KGs.__init__": [[6, 74], ["uris_relation_triple_2ids", "uris_relation_triple_2ids", "uris_attribute_triple_2ids", "uris_attribute_triple_2ids", "openea.modules.load.kg.KG", "openea.modules.load.kg.KG", "openea.modules.load.kg.KG.set_id_dict", "openea.modules.load.kg.KG.set_id_dict", "uris_pair_2ids", "uris_pair_2ids", "list", "list", "list", "len", "len", "len", "generate_sharing_id", "generate_sharing_id", "generate_sharing_id", "generate_mapping_id", "generate_mapping_id", "generate_mapping_id", "generate_sup_relation_triples", "openea.modules.load.kg.KG.add_sup_relation_triples", "openea.modules.load.kg.KG.add_sup_relation_triples", "generate_sup_attribute_triples", "openea.modules.load.kg.KG.add_sup_attribute_triples", "openea.modules.load.kg.KG.add_sup_attribute_triples", "uris_pair_2ids"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_relation_triple_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_relation_triple_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_attribute_triple_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_attribute_triple_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_id_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_id_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_pair_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_pair_2ids", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sharing_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sharing_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sharing_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_mapping_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_mapping_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_mapping_id", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_pair_2ids"], ["    ", "def", "__init__", "(", "self", ",", "kg1", ":", "KG", ",", "kg2", ":", "KG", ",", "train_links", ",", "test_links", ",", "valid_links", "=", "None", ",", "mode", "=", "'mapping'", ",", "ordered", "=", "True", ")", ":", "\n", "        ", "if", "mode", "==", "\"sharing\"", ":", "\n", "            ", "ent_ids1", ",", "ent_ids2", "=", "generate_sharing_id", "(", "train_links", ",", "kg1", ".", "relation_triples_set", ",", "kg1", ".", "entities_set", ",", "\n", "kg2", ".", "relation_triples_set", ",", "kg2", ".", "entities_set", ",", "ordered", "=", "ordered", ")", "\n", "rel_ids1", ",", "rel_ids2", "=", "generate_sharing_id", "(", "[", "]", ",", "kg1", ".", "relation_triples_set", ",", "kg1", ".", "relations_set", ",", "\n", "kg2", ".", "relation_triples_set", ",", "kg2", ".", "relations_set", ",", "ordered", "=", "ordered", ")", "\n", "attr_ids1", ",", "attr_ids2", "=", "generate_sharing_id", "(", "[", "]", ",", "kg1", ".", "attribute_triples_set", ",", "kg1", ".", "attributes_set", ",", "\n", "kg2", ".", "attribute_triples_set", ",", "kg2", ".", "attributes_set", ",", "ordered", "=", "ordered", ")", "\n", "", "else", ":", "\n", "            ", "ent_ids1", ",", "ent_ids2", "=", "generate_mapping_id", "(", "kg1", ".", "relation_triples_set", ",", "kg1", ".", "entities_set", ",", "\n", "kg2", ".", "relation_triples_set", ",", "kg2", ".", "entities_set", ",", "ordered", "=", "ordered", ")", "\n", "rel_ids1", ",", "rel_ids2", "=", "generate_mapping_id", "(", "kg1", ".", "relation_triples_set", ",", "kg1", ".", "relations_set", ",", "\n", "kg2", ".", "relation_triples_set", ",", "kg2", ".", "relations_set", ",", "ordered", "=", "ordered", ")", "\n", "attr_ids1", ",", "attr_ids2", "=", "generate_mapping_id", "(", "kg1", ".", "attribute_triples_set", ",", "kg1", ".", "attributes_set", ",", "\n", "kg2", ".", "attribute_triples_set", ",", "kg2", ".", "attributes_set", ",", "ordered", "=", "ordered", ")", "\n", "\n", "", "id_relation_triples1", "=", "uris_relation_triple_2ids", "(", "kg1", ".", "relation_triples_set", ",", "ent_ids1", ",", "rel_ids1", ")", "\n", "id_relation_triples2", "=", "uris_relation_triple_2ids", "(", "kg2", ".", "relation_triples_set", ",", "ent_ids2", ",", "rel_ids2", ")", "\n", "\n", "id_attribute_triples1", "=", "uris_attribute_triple_2ids", "(", "kg1", ".", "attribute_triples_set", ",", "ent_ids1", ",", "attr_ids1", ")", "\n", "id_attribute_triples2", "=", "uris_attribute_triple_2ids", "(", "kg2", ".", "attribute_triples_set", ",", "ent_ids2", ",", "attr_ids2", ")", "\n", "\n", "self", ".", "uri_kg1", "=", "kg1", "\n", "self", ".", "uri_kg2", "=", "kg2", "\n", "\n", "kg1", "=", "KG", "(", "id_relation_triples1", ",", "id_attribute_triples1", ")", "\n", "kg2", "=", "KG", "(", "id_relation_triples2", ",", "id_attribute_triples2", ")", "\n", "kg1", ".", "set_id_dict", "(", "ent_ids1", ",", "rel_ids1", ",", "attr_ids1", ")", "\n", "kg2", ".", "set_id_dict", "(", "ent_ids2", ",", "rel_ids2", ",", "attr_ids2", ")", "\n", "\n", "self", ".", "uri_train_links", "=", "train_links", "\n", "self", ".", "uri_test_links", "=", "test_links", "\n", "self", ".", "train_links", "=", "uris_pair_2ids", "(", "self", ".", "uri_train_links", ",", "ent_ids1", ",", "ent_ids2", ")", "\n", "self", ".", "test_links", "=", "uris_pair_2ids", "(", "self", ".", "uri_test_links", ",", "ent_ids1", ",", "ent_ids2", ")", "\n", "self", ".", "train_entities1", "=", "[", "link", "[", "0", "]", "for", "link", "in", "self", ".", "train_links", "]", "\n", "self", ".", "train_entities2", "=", "[", "link", "[", "1", "]", "for", "link", "in", "self", ".", "train_links", "]", "\n", "self", ".", "test_entities1", "=", "[", "link", "[", "0", "]", "for", "link", "in", "self", ".", "test_links", "]", "\n", "self", ".", "test_entities2", "=", "[", "link", "[", "1", "]", "for", "link", "in", "self", ".", "test_links", "]", "\n", "\n", "if", "mode", "==", "'swapping'", ":", "\n", "            ", "sup_triples1", ",", "sup_triples2", "=", "generate_sup_relation_triples", "(", "self", ".", "train_links", ",", "\n", "kg1", ".", "rt_dict", ",", "kg1", ".", "hr_dict", ",", "\n", "kg2", ".", "rt_dict", ",", "kg2", ".", "hr_dict", ")", "\n", "kg1", ".", "add_sup_relation_triples", "(", "sup_triples1", ")", "\n", "kg2", ".", "add_sup_relation_triples", "(", "sup_triples2", ")", "\n", "\n", "sup_triples1", ",", "sup_triples2", "=", "generate_sup_attribute_triples", "(", "self", ".", "train_links", ",", "kg1", ".", "av_dict", ",", "kg2", ".", "av_dict", ")", "\n", "kg1", ".", "add_sup_attribute_triples", "(", "sup_triples1", ")", "\n", "kg2", ".", "add_sup_attribute_triples", "(", "sup_triples2", ")", "\n", "\n", "", "self", ".", "kg1", "=", "kg1", "\n", "self", ".", "kg2", "=", "kg2", "\n", "\n", "self", ".", "valid_links", "=", "list", "(", ")", "\n", "self", ".", "valid_entities1", "=", "list", "(", ")", "\n", "self", ".", "valid_entities2", "=", "list", "(", ")", "\n", "if", "valid_links", "is", "not", "None", ":", "\n", "            ", "self", ".", "uri_valid_links", "=", "valid_links", "\n", "self", ".", "valid_links", "=", "uris_pair_2ids", "(", "self", ".", "uri_valid_links", ",", "ent_ids1", ",", "ent_ids2", ")", "\n", "self", ".", "valid_entities1", "=", "[", "link", "[", "0", "]", "for", "link", "in", "self", ".", "valid_links", "]", "\n", "self", ".", "valid_entities2", "=", "[", "link", "[", "1", "]", "for", "link", "in", "self", ".", "valid_links", "]", "\n", "\n", "", "self", ".", "useful_entities_list1", "=", "self", ".", "train_entities1", "+", "self", ".", "valid_entities1", "+", "self", ".", "test_entities1", "\n", "self", ".", "useful_entities_list2", "=", "self", ".", "train_entities2", "+", "self", ".", "valid_entities2", "+", "self", ".", "test_entities2", "\n", "\n", "self", ".", "entities_num", "=", "len", "(", "self", ".", "kg1", ".", "entities_set", "|", "self", ".", "kg2", ".", "entities_set", ")", "\n", "self", ".", "relations_num", "=", "len", "(", "self", ".", "kg1", ".", "relations_set", "|", "self", ".", "kg2", ".", "relations_set", ")", "\n", "self", ".", "attributes_num", "=", "len", "(", "self", ".", "kg1", ".", "attributes_set", "|", "self", ".", "kg2", ".", "attributes_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.read_kgs_from_folder": [[76, 97], ["read_relation_triples", "read_relation_triples", "read_attribute_triples", "read_attribute_triples", "read_links", "read_links", "read_links", "openea.modules.load.kg.KG", "openea.modules.load.kg.KG", "kgs.KGs", "kgs.read_kgs_from_dbp_dwy", "kgs.remove_unlinked_triples", "kgs.remove_unlinked_triples", "training_data_folder.lower", "training_data_folder.lower"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.read_kgs_from_dbp_dwy", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples"], ["", "", "def", "read_kgs_from_folder", "(", "training_data_folder", ",", "division", ",", "mode", ",", "ordered", ",", "remove_unlinked", "=", "False", ")", ":", "\n", "    ", "if", "'dbp15k'", "in", "training_data_folder", ".", "lower", "(", ")", "or", "'dwy100k'", "in", "training_data_folder", ".", "lower", "(", ")", ":", "\n", "        ", "return", "read_kgs_from_dbp_dwy", "(", "training_data_folder", ",", "division", ",", "mode", ",", "ordered", ",", "remove_unlinked", "=", "remove_unlinked", ")", "\n", "", "kg1_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "training_data_folder", "+", "'rel_triples_1'", ")", "\n", "kg2_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "training_data_folder", "+", "'rel_triples_2'", ")", "\n", "kg1_attribute_triples", ",", "_", ",", "_", "=", "read_attribute_triples", "(", "training_data_folder", "+", "'attr_triples_1'", ")", "\n", "kg2_attribute_triples", ",", "_", ",", "_", "=", "read_attribute_triples", "(", "training_data_folder", "+", "'attr_triples_2'", ")", "\n", "\n", "train_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'train_links'", ")", "\n", "valid_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'valid_links'", ")", "\n", "test_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'test_links'", ")", "\n", "\n", "if", "remove_unlinked", ":", "\n", "        ", "links", "=", "train_links", "+", "valid_links", "+", "test_links", "\n", "kg1_relation_triples", "=", "remove_unlinked_triples", "(", "kg1_relation_triples", ",", "links", ")", "\n", "kg2_relation_triples", "=", "remove_unlinked_triples", "(", "kg2_relation_triples", ",", "links", ")", "\n", "\n", "", "kg1", "=", "KG", "(", "kg1_relation_triples", ",", "kg1_attribute_triples", ")", "\n", "kg2", "=", "KG", "(", "kg2_relation_triples", ",", "kg2_attribute_triples", ")", "\n", "kgs", "=", "KGs", "(", "kg1", ",", "kg2", ",", "train_links", ",", "test_links", ",", "valid_links", "=", "valid_links", ",", "mode", "=", "mode", ",", "ordered", "=", "ordered", ")", "\n", "return", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.read_reversed_kgs_from_folder": [[99, 121], ["read_relation_triples", "read_relation_triples", "read_attribute_triples", "read_attribute_triples", "read_links", "read_links", "read_links", "openea.modules.load.kg.KG", "openea.modules.load.kg.KG", "kgs.KGs", "kgs.remove_unlinked_triples", "kgs.remove_unlinked_triples"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples"], ["", "def", "read_reversed_kgs_from_folder", "(", "training_data_folder", ",", "division", ",", "mode", ",", "ordered", ",", "remove_unlinked", "=", "False", ")", ":", "\n", "    ", "kg1_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "training_data_folder", "+", "'rel_triples_2'", ")", "\n", "kg2_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "training_data_folder", "+", "'rel_triples_1'", ")", "\n", "kg1_attribute_triples", ",", "_", ",", "_", "=", "read_attribute_triples", "(", "training_data_folder", "+", "'attr_triples_2'", ")", "\n", "kg2_attribute_triples", ",", "_", ",", "_", "=", "read_attribute_triples", "(", "training_data_folder", "+", "'attr_triples_1'", ")", "\n", "\n", "temp_train_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'train_links'", ")", "\n", "temp_valid_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'valid_links'", ")", "\n", "temp_test_links", "=", "read_links", "(", "training_data_folder", "+", "division", "+", "'test_links'", ")", "\n", "train_links", "=", "[", "(", "j", ",", "i", ")", "for", "i", ",", "j", "in", "temp_train_links", "]", "\n", "valid_links", "=", "[", "(", "j", ",", "i", ")", "for", "i", ",", "j", "in", "temp_valid_links", "]", "\n", "test_links", "=", "[", "(", "j", ",", "i", ")", "for", "i", ",", "j", "in", "temp_test_links", "]", "\n", "\n", "if", "remove_unlinked", ":", "\n", "        ", "links", "=", "train_links", "+", "valid_links", "+", "test_links", "\n", "kg1_relation_triples", "=", "remove_unlinked_triples", "(", "kg1_relation_triples", ",", "links", ")", "\n", "kg2_relation_triples", "=", "remove_unlinked_triples", "(", "kg2_relation_triples", ",", "links", ")", "\n", "\n", "", "kg1", "=", "KG", "(", "kg1_relation_triples", ",", "kg1_attribute_triples", ")", "\n", "kg2", "=", "KG", "(", "kg2_relation_triples", ",", "kg2_attribute_triples", ")", "\n", "kgs", "=", "KGs", "(", "kg1", ",", "kg2", ",", "train_links", ",", "test_links", ",", "valid_links", "=", "valid_links", ",", "mode", "=", "mode", ",", "ordered", "=", "ordered", ")", "\n", "return", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.read_kgs_from_files": [[123, 129], ["openea.modules.load.kg.KG", "openea.modules.load.kg.KG", "kgs.KGs"], "function", ["None"], ["", "def", "read_kgs_from_files", "(", "kg1_relation_triples", ",", "kg2_relation_triples", ",", "kg1_attribute_triples", ",", "kg2_attribute_triples", ",", "\n", "train_links", ",", "valid_links", ",", "test_links", ",", "mode", ")", ":", "\n", "    ", "kg1", "=", "KG", "(", "kg1_relation_triples", ",", "kg1_attribute_triples", ")", "\n", "kg2", "=", "KG", "(", "kg2_relation_triples", ",", "kg2_attribute_triples", ")", "\n", "kgs", "=", "KGs", "(", "kg1", ",", "kg2", ",", "train_links", ",", "test_links", ",", "valid_links", "=", "valid_links", ",", "mode", "=", "mode", ")", "\n", "return", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.read_kgs_from_dbp_dwy": [[131, 167], ["read_relation_triples", "read_relation_triples", "os.path.exists", "os.path.exists", "print", "openea.modules.load.kg.KG", "openea.modules.load.kg.KG", "kgs.KGs", "read_links", "read_links", "read_links", "read_links", "range", "list", "list", "print", "kgs.remove_unlinked_triples", "kgs.remove_unlinked_triples", "len", "len", "kgs.remove_no_triples_link", "kgs.remove_unlinked_triples", "kgs.remove_unlinked_triples", "len", "len", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.remove_no_triples_link", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_kgs_from_dbp_dwy", "(", "folder", ",", "division", ",", "mode", ",", "ordered", ",", "remove_unlinked", "=", "False", ")", ":", "\n", "    ", "folder", "=", "folder", "+", "division", "\n", "kg1_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "folder", "+", "'triples_1'", ")", "\n", "kg2_relation_triples", ",", "_", ",", "_", "=", "read_relation_triples", "(", "folder", "+", "'triples_2'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder", "+", "'sup_pairs'", ")", ":", "\n", "        ", "train_links", "=", "read_links", "(", "folder", "+", "'sup_pairs'", ")", "\n", "", "else", ":", "\n", "        ", "train_links", "=", "read_links", "(", "folder", "+", "'sup_ent_ids'", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "folder", "+", "'ref_pairs'", ")", ":", "\n", "        ", "test_links", "=", "read_links", "(", "folder", "+", "'ref_pairs'", ")", "\n", "", "else", ":", "\n", "        ", "test_links", "=", "read_links", "(", "folder", "+", "'ref_ent_ids'", ")", "\n", "", "print", "(", ")", "\n", "if", "remove_unlinked", ":", "\n", "        ", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "            ", "print", "(", "\"removing times:\"", ",", "i", ")", "\n", "links", "=", "train_links", "+", "test_links", "\n", "kg1_relation_triples", "=", "remove_unlinked_triples", "(", "kg1_relation_triples", ",", "links", ")", "\n", "kg2_relation_triples", "=", "remove_unlinked_triples", "(", "kg2_relation_triples", ",", "links", ")", "\n", "n1", "=", "len", "(", "kg1_relation_triples", ")", "\n", "n2", "=", "len", "(", "kg2_relation_triples", ")", "\n", "train_links", ",", "test_links", "=", "remove_no_triples_link", "(", "kg1_relation_triples", ",", "kg2_relation_triples", ",", "\n", "train_links", ",", "test_links", ")", "\n", "links", "=", "train_links", "+", "test_links", "\n", "kg1_relation_triples", "=", "remove_unlinked_triples", "(", "kg1_relation_triples", ",", "links", ")", "\n", "kg2_relation_triples", "=", "remove_unlinked_triples", "(", "kg2_relation_triples", ",", "links", ")", "\n", "n11", "=", "len", "(", "kg1_relation_triples", ")", "\n", "n22", "=", "len", "(", "kg2_relation_triples", ")", "\n", "if", "n1", "==", "n11", "and", "n2", "==", "n22", ":", "\n", "                ", "break", "\n", "", "print", "(", ")", "\n", "\n", "", "", "kg1", "=", "KG", "(", "kg1_relation_triples", ",", "list", "(", ")", ")", "\n", "kg2", "=", "KG", "(", "kg2_relation_triples", ",", "list", "(", ")", ")", "\n", "kgs", "=", "KGs", "(", "kg1", ",", "kg2", ",", "train_links", ",", "test_links", ",", "mode", "=", "mode", ",", "ordered", "=", "ordered", ")", "\n", "return", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.remove_no_triples_link": [[169, 187], ["print", "print", "set", "set", "kg1_entities.add", "kg1_entities.add", "kg2_entities.add", "kg2_entities.add", "len", "len", "set", "set", "len", "len", "list", "list", "new_train_links.add", "new_test_links.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "remove_no_triples_link", "(", "kg1_relation_triples", ",", "kg2_relation_triples", ",", "train_links", ",", "test_links", ")", ":", "\n", "    ", "kg1_entities", ",", "kg2_entities", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "kg1_relation_triples", ":", "\n", "        ", "kg1_entities", ".", "add", "(", "h", ")", "\n", "kg1_entities", ".", "add", "(", "t", ")", "\n", "", "for", "h", ",", "r", ",", "t", "in", "kg2_relation_triples", ":", "\n", "        ", "kg2_entities", ".", "add", "(", "h", ")", "\n", "kg2_entities", ".", "add", "(", "t", ")", "\n", "", "print", "(", "\"before removing links with no triples:\"", ",", "len", "(", "train_links", ")", ",", "len", "(", "test_links", ")", ")", "\n", "new_train_links", ",", "new_test_links", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "train_links", ":", "\n", "        ", "if", "i", "in", "kg1_entities", "and", "j", "in", "kg2_entities", ":", "\n", "            ", "new_train_links", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "for", "i", ",", "j", "in", "test_links", ":", "\n", "        ", "if", "i", "in", "kg1_entities", "and", "j", "in", "kg2_entities", ":", "\n", "            ", "new_test_links", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "print", "(", "\"after removing links with no triples:\"", ",", "len", "(", "new_train_links", ")", ",", "len", "(", "new_test_links", ")", ")", "\n", "return", "list", "(", "new_train_links", ")", ",", "list", "(", "new_test_links", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kgs.remove_unlinked_triples": [[189, 201], ["print", "set", "set", "print", "len", "set.add", "set.add", "len", "set.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "remove_unlinked_triples", "(", "triples", ",", "links", ")", ":", "\n", "    ", "print", "(", "\"before removing unlinked triples:\"", ",", "len", "(", "triples", ")", ")", "\n", "linked_entities", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "links", ":", "\n", "        ", "linked_entities", ".", "add", "(", "i", ")", "\n", "linked_entities", ".", "add", "(", "j", ")", "\n", "", "linked_triples", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "if", "h", "in", "linked_entities", "and", "t", "in", "linked_entities", ":", "\n", "            ", "linked_triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "", "print", "(", "\"after removing unlinked triples:\"", ",", "len", "(", "linked_triples", ")", ")", "\n", "return", "linked_triples", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.__init__": [[11, 55], ["kg.KG.set_relations", "kg.KG.set_attributes", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_relations", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["    ", "def", "__init__", "(", "self", ",", "relation_triples", ",", "attribute_triples", ")", ":", "\n", "\n", "        ", "self", ".", "entities_set", ",", "self", ".", "entities_list", "=", "None", ",", "None", "\n", "self", ".", "relations_set", ",", "self", ".", "relations_list", "=", "None", ",", "None", "\n", "self", ".", "attributes_set", ",", "self", ".", "attributes_list", "=", "None", ",", "None", "\n", "self", ".", "entities_num", ",", "self", ".", "relations_num", ",", "self", ".", "attributes_num", "=", "None", ",", "None", ",", "None", "\n", "self", ".", "relation_triples_num", ",", "self", ".", "attribute_triples_num", "=", "None", ",", "None", "\n", "self", ".", "local_relation_triples_num", ",", "self", ".", "local_attribute_triples_num", "=", "None", ",", "None", "\n", "\n", "self", ".", "entities_id_dict", "=", "None", "\n", "self", ".", "relations_id_dict", "=", "None", "\n", "self", ".", "attributes_id_dict", "=", "None", "\n", "\n", "self", ".", "rt_dict", ",", "self", ".", "hr_dict", "=", "None", ",", "None", "\n", "self", ".", "entity_relations_dict", "=", "None", "\n", "self", ".", "entity_attributes_dict", "=", "None", "\n", "self", ".", "av_dict", "=", "None", "\n", "\n", "self", ".", "sup_relation_triples_set", ",", "self", ".", "sup_relation_triples_list", "=", "None", ",", "None", "\n", "self", ".", "sup_attribute_triples_set", ",", "self", ".", "sup_attribute_triples_list", "=", "None", ",", "None", "\n", "\n", "self", ".", "relation_triples_set", "=", "None", "\n", "self", ".", "attribute_triples_set", "=", "None", "\n", "self", ".", "relation_triples_list", "=", "None", "\n", "self", ".", "attribute_triples_list", "=", "None", "\n", "\n", "self", ".", "local_relation_triples_set", "=", "None", "\n", "self", ".", "local_relation_triples_list", "=", "None", "\n", "self", ".", "local_attribute_triples_set", "=", "None", "\n", "self", ".", "local_attribute_triples_list", "=", "None", "\n", "\n", "self", ".", "set_relations", "(", "relation_triples", ")", "\n", "self", ".", "set_attributes", "(", "attribute_triples", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "\"KG statistics:\"", ")", "\n", "print", "(", "\"Number of entities:\"", ",", "self", ".", "entities_num", ")", "\n", "print", "(", "\"Number of relations:\"", ",", "self", ".", "relations_num", ")", "\n", "print", "(", "\"Number of attributes:\"", ",", "self", ".", "attributes_num", ")", "\n", "print", "(", "\"Number of relation triples:\"", ",", "self", ".", "relation_triples_num", ")", "\n", "print", "(", "\"Number of attribute triples:\"", ",", "self", ".", "attribute_triples_num", ")", "\n", "print", "(", "\"Number of local relation triples:\"", ",", "self", ".", "local_relation_triples_num", ")", "\n", "print", "(", "\"Number of local attribute triples:\"", ",", "self", ".", "local_attribute_triples_num", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_relations": [[56, 73], ["set", "list", "kg.parse_triples", "list", "list", "len", "len", "len", "len", "kg.KG.generate_relation_triple_dict", "kg.KG.parse_relations"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.parse_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.generate_relation_triple_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.parse_relations"], ["", "def", "set_relations", "(", "self", ",", "relation_triples", ")", ":", "\n", "        ", "self", ".", "relation_triples_set", "=", "set", "(", "relation_triples", ")", "\n", "self", ".", "relation_triples_list", "=", "list", "(", "self", ".", "relation_triples_set", ")", "\n", "self", ".", "local_relation_triples_set", "=", "self", ".", "relation_triples_set", "\n", "self", ".", "local_relation_triples_list", "=", "self", ".", "relation_triples_list", "\n", "\n", "heads", ",", "relations", ",", "tails", "=", "parse_triples", "(", "self", ".", "relation_triples_set", ")", "\n", "self", ".", "entities_set", "=", "heads", "|", "tails", "# union of h, t", "\n", "self", ".", "relations_set", "=", "relations", "\n", "self", ".", "entities_list", "=", "list", "(", "self", ".", "entities_set", ")", "\n", "self", ".", "relations_list", "=", "list", "(", "self", ".", "relations_set", ")", "\n", "self", ".", "entities_num", "=", "len", "(", "self", ".", "entities_set", ")", "\n", "self", ".", "relations_num", "=", "len", "(", "self", ".", "relations_set", ")", "\n", "self", ".", "relation_triples_num", "=", "len", "(", "self", ".", "relation_triples_set", ")", "\n", "self", ".", "local_relation_triples_num", "=", "len", "(", "self", ".", "local_relation_triples_set", ")", "\n", "self", ".", "generate_relation_triple_dict", "(", ")", "\n", "self", ".", "parse_relations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes": [[74, 94], ["set", "list", "kg.parse_triples", "list", "len", "list", "len", "len", "len", "kg.KG.generate_attribute_triple_dict", "kg.KG.parse_attributes"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.parse_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.generate_attribute_triple_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.parse_attributes"], ["", "def", "set_attributes", "(", "self", ",", "attribute_triples", ")", ":", "\n", "        ", "self", ".", "attribute_triples_set", "=", "set", "(", "attribute_triples", ")", "\n", "self", ".", "attribute_triples_list", "=", "list", "(", "self", ".", "attribute_triples_set", ")", "\n", "self", ".", "local_attribute_triples_set", "=", "self", ".", "attribute_triples_set", "\n", "self", ".", "local_attribute_triples_list", "=", "self", ".", "attribute_triples_list", "\n", "\n", "entities", ",", "attributes", ",", "values", "=", "parse_triples", "(", "self", ".", "attribute_triples_set", ")", "\n", "self", ".", "attributes_set", "=", "attributes", "\n", "self", ".", "attributes_list", "=", "list", "(", "self", ".", "attributes_set", ")", "\n", "self", ".", "attributes_num", "=", "len", "(", "self", ".", "attributes_set", ")", "\n", "\n", "# add the new entities from attribute triples", "\n", "self", ".", "entities_set", "|=", "entities", "\n", "self", ".", "entities_list", "=", "list", "(", "self", ".", "entities_set", ")", "\n", "self", ".", "entities_num", "=", "len", "(", "self", ".", "entities_set", ")", "\n", "\n", "self", ".", "attribute_triples_num", "=", "len", "(", "self", ".", "attribute_triples_set", ")", "\n", "self", ".", "local_attribute_triples_num", "=", "len", "(", "self", ".", "local_attribute_triples_set", ")", "\n", "self", ".", "generate_attribute_triple_dict", "(", ")", "\n", "self", ".", "parse_attributes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.generate_relation_triple_dict": [[95, 106], ["print", "print", "dict", "dict", "kg.KG.rt_dict.get", "kg.KG.add", "kg.KG.hr_dict.get", "kg.KG.add", "len", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "generate_relation_triple_dict", "(", "self", ")", ":", "# collect triplet, given h, its r and t; given t, its h and r.", "\n", "        ", "self", ".", "rt_dict", ",", "self", ".", "hr_dict", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "local_relation_triples_list", ":", "\n", "            ", "rt_set", "=", "self", ".", "rt_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "rt_set", ".", "add", "(", "(", "r", ",", "t", ")", ")", "\n", "self", ".", "rt_dict", "[", "h", "]", "=", "rt_set", "\n", "hr_set", "=", "self", ".", "hr_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "hr_set", ".", "add", "(", "(", "h", ",", "r", ")", ")", "\n", "self", ".", "hr_dict", "[", "t", "]", "=", "hr_set", "\n", "", "print", "(", "\"Number of rt_dict:\"", ",", "len", "(", "self", ".", "rt_dict", ")", ")", "\n", "print", "(", "\"Number of hr_dict:\"", ",", "len", "(", "self", ".", "hr_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.generate_attribute_triple_dict": [[107, 114], ["dict", "print", "kg.KG.av_dict.get", "kg.KG.add", "len", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "generate_attribute_triple_dict", "(", "self", ")", ":", "# given e, provide its a and v.", "\n", "        ", "self", ".", "av_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "a", ",", "v", "in", "self", ".", "local_attribute_triples_list", ":", "\n", "            ", "av_set", "=", "self", ".", "av_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "av_set", ".", "add", "(", "(", "a", ",", "v", ")", ")", "\n", "self", ".", "av_dict", "[", "h", "]", "=", "av_set", "\n", "", "print", "(", "\"Number of av_dict:\"", ",", "len", "(", "self", ".", "av_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.parse_relations": [[115, 122], ["dict", "print", "kg.KG.entity_relations_dict.get", "kg.KG.add", "len", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "parse_relations", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_relations_dict", "=", "dict", "(", ")", "\n", "for", "ent", ",", "attr", ",", "_", "in", "self", ".", "local_relation_triples_set", ":", "\n", "            ", "attrs", "=", "self", ".", "entity_relations_dict", ".", "get", "(", "ent", ",", "set", "(", ")", ")", "\n", "attrs", ".", "add", "(", "attr", ")", "\n", "self", ".", "entity_relations_dict", "[", "ent", "]", "=", "attrs", "\n", "", "print", "(", "\"entity relations dict:\"", ",", "len", "(", "self", ".", "entity_relations_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.parse_attributes": [[123, 130], ["dict", "print", "kg.KG.entity_attributes_dict.get", "kg.KG.add", "len", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "parse_attributes", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_attributes_dict", "=", "dict", "(", ")", "\n", "for", "ent", ",", "attr", ",", "_", "in", "self", ".", "local_attribute_triples_set", ":", "\n", "            ", "attrs", "=", "self", ".", "entity_attributes_dict", ".", "get", "(", "ent", ",", "set", "(", ")", ")", "\n", "attrs", ".", "add", "(", "attr", ")", "\n", "self", ".", "entity_attributes_dict", "[", "ent", "]", "=", "attrs", "\n", "", "print", "(", "\"entity attributes dict:\"", ",", "len", "(", "self", ".", "entity_attributes_dict", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_id_dict": [[131, 135], ["None"], "methods", ["None"], ["", "def", "set_id_dict", "(", "self", ",", "entities_id_dict", ",", "relations_id_dict", ",", "attributes_id_dict", ")", ":", "\n", "        ", "self", ".", "entities_id_dict", "=", "entities_id_dict", "\n", "self", ".", "relations_id_dict", "=", "relations_id_dict", "\n", "self", ".", "attributes_id_dict", "=", "attributes_id_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_relation_triples": [[136, 142], ["set", "list", "list", "len"], "methods", ["None"], ["", "def", "add_sup_relation_triples", "(", "self", ",", "sup_triples", ")", ":", "\n", "        ", "self", ".", "sup_relation_triples_set", "=", "set", "(", "sup_triples", ")", "\n", "self", ".", "sup_relation_triples_list", "=", "list", "(", "self", ".", "sup_relation_triples_set", ")", "\n", "self", ".", "relation_triples_set", "|=", "sup_triples", "\n", "self", ".", "relation_triples_list", "=", "list", "(", "self", ".", "relation_triples_set", ")", "\n", "self", ".", "relation_triples_num", "=", "len", "(", "self", ".", "relation_triples_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples": [[143, 149], ["set", "list", "list", "len"], "methods", ["None"], ["", "def", "add_sup_attribute_triples", "(", "self", ",", "sup_triples", ")", ":", "\n", "        ", "self", ".", "sup_attribute_triples_set", "=", "set", "(", "sup_triples", ")", "\n", "self", ".", "sup_attribute_triples_list", "=", "list", "(", "self", ".", "sup_attribute_triples_set", ")", "\n", "self", ".", "attribute_triples_set", "|=", "sup_triples", "\n", "self", ".", "attribute_triples_list", "=", "list", "(", "self", ".", "attribute_triples_set", ")", "\n", "self", ".", "attribute_triples_num", "=", "len", "(", "self", ".", "attribute_triples_list", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.parse_triples": [[1, 8], ["set", "set", "set", "subjects.add", "predicates.add", "objects.add"], "function", ["None"], ["def", "parse_triples", "(", "triples", ")", ":", "\n", "    ", "subjects", ",", "predicates", ",", "objects", "=", "set", "(", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "triples", ":", "\n", "        ", "subjects", ".", "add", "(", "s", ")", "\n", "predicates", ".", "add", "(", "p", ")", "\n", "objects", ".", "add", "(", "o", ")", "\n", "", "return", "subjects", ",", "predicates", ",", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.load_embeddings": [[6, 10], ["os.path.exists", "numpy.load"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load"], ["def", "load_embeddings", "(", "file_name", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "file_name", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_name", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.sort_elements": [[12, 25], ["dict", "sorted", "dict.items", "dict.get", "dict.get", "dict.get"], "function", ["None"], ["", "def", "sort_elements", "(", "triples", ",", "elements_set", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "triples", ":", "\n", "        ", "if", "s", "in", "elements_set", ":", "\n", "            ", "dic", "[", "s", "]", "=", "dic", ".", "get", "(", "s", ",", "0", ")", "+", "1", "\n", "", "if", "p", "in", "elements_set", ":", "\n", "            ", "dic", "[", "p", "]", "=", "dic", ".", "get", "(", "p", ",", "0", ")", "+", "1", "\n", "", "if", "o", "in", "elements_set", ":", "\n", "            ", "dic", "[", "o", "]", "=", "dic", ".", "get", "(", "o", ",", "0", ")", "+", "1", "\n", "# firstly sort by values (i.e., frequencies), if equal, by keys (i.e, URIs)", "\n", "", "", "sorted_list", "=", "sorted", "(", "dic", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", "\n", "ordered_elements", "=", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_list", "]", "\n", "return", "ordered_elements", ",", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sharing_id": [[27, 57], ["dict", "dict", "dict", "read.generate_mapping_id", "len", "len", "len", "len", "set", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_mapping_id"], ["", "def", "generate_sharing_id", "(", "train_links", ",", "kg1_triples", ",", "kg1_elements", ",", "kg2_triples", ",", "kg2_elements", ",", "ordered", "=", "True", ")", ":", "\n", "    ", "ids1", ",", "ids2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "if", "ordered", ":", "\n", "        ", "linked_dic", "=", "dict", "(", ")", "\n", "for", "x", ",", "y", "in", "train_links", ":", "\n", "            ", "linked_dic", "[", "y", "]", "=", "x", "\n", "", "kg2_linked_elements", "=", "[", "x", "[", "1", "]", "for", "x", "in", "train_links", "]", "\n", "kg2_unlinked_elements", "=", "set", "(", "kg2_elements", ")", "-", "set", "(", "kg2_linked_elements", ")", "\n", "ids1", ",", "ids2", "=", "generate_mapping_id", "(", "kg1_triples", ",", "kg1_elements", ",", "kg2_triples", ",", "kg2_unlinked_elements", ",", "ordered", "=", "ordered", ")", "\n", "for", "ele", "in", "kg2_linked_elements", ":", "\n", "            ", "ids2", "[", "ele", "]", "=", "ids1", "[", "linked_dic", "[", "ele", "]", "]", "\n", "", "", "else", ":", "\n", "        ", "index", "=", "0", "\n", "for", "e1", ",", "e2", "in", "train_links", ":", "\n", "            ", "assert", "e1", "in", "kg1_elements", "\n", "assert", "e2", "in", "kg2_elements", "\n", "ids1", "[", "e1", "]", "=", "index", "\n", "ids2", "[", "e2", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "for", "ele", "in", "kg1_elements", ":", "\n", "            ", "if", "ele", "not", "in", "ids1", ":", "\n", "                ", "ids1", "[", "ele", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "for", "ele", "in", "kg2_elements", ":", "\n", "            ", "if", "ele", "not", "in", "ids2", ":", "\n", "                ", "ids2", "[", "ele", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "", "assert", "len", "(", "ids1", ")", "==", "len", "(", "set", "(", "kg1_elements", ")", ")", "\n", "assert", "len", "(", "ids2", ")", "==", "len", "(", "set", "(", "kg2_elements", ")", ")", "\n", "return", "ids1", ",", "ids2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_mapping_id": [[59, 88], ["dict", "dict", "read.sort_elements", "read.sort_elements", "len", "len", "max", "range", "len", "len", "len", "len", "set", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.sort_elements", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.sort_elements"], ["", "def", "generate_mapping_id", "(", "kg1_triples", ",", "kg1_elements", ",", "kg2_triples", ",", "kg2_elements", ",", "ordered", "=", "True", ")", ":", "\n", "    ", "ids1", ",", "ids2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "if", "ordered", ":", "\n", "        ", "kg1_ordered_elements", ",", "_", "=", "sort_elements", "(", "kg1_triples", ",", "kg1_elements", ")", "\n", "kg2_ordered_elements", ",", "_", "=", "sort_elements", "(", "kg2_triples", ",", "kg2_elements", ")", "\n", "n1", "=", "len", "(", "kg1_ordered_elements", ")", "\n", "n2", "=", "len", "(", "kg2_ordered_elements", ")", "\n", "n", "=", "max", "(", "n1", ",", "n2", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "if", "i", "<", "n1", "and", "i", "<", "n2", ":", "\n", "                ", "ids1", "[", "kg1_ordered_elements", "[", "i", "]", "]", "=", "i", "*", "2", "\n", "ids2", "[", "kg2_ordered_elements", "[", "i", "]", "]", "=", "i", "*", "2", "+", "1", "\n", "", "elif", "i", ">=", "n1", ":", "\n", "                ", "ids2", "[", "kg2_ordered_elements", "[", "i", "]", "]", "=", "n1", "*", "2", "+", "(", "i", "-", "n1", ")", "\n", "", "else", ":", "\n", "                ", "ids1", "[", "kg1_ordered_elements", "[", "i", "]", "]", "=", "n2", "*", "2", "+", "(", "i", "-", "n2", ")", "\n", "", "", "", "else", ":", "\n", "        ", "index", "=", "0", "\n", "for", "ele", "in", "kg1_elements", ":", "\n", "            ", "if", "ele", "not", "in", "ids1", ":", "\n", "                ", "ids1", "[", "ele", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "for", "ele", "in", "kg2_elements", ":", "\n", "            ", "if", "ele", "not", "in", "ids2", ":", "\n", "                ", "ids2", "[", "ele", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "", "assert", "len", "(", "ids1", ")", "==", "len", "(", "set", "(", "kg1_elements", ")", ")", "\n", "assert", "len", "(", "ids2", ")", "==", "len", "(", "set", "(", "kg2_elements", ")", ")", "\n", "return", "ids1", ",", "ids2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_list_2ids": [[90, 97], ["list", "list.append", "len", "len", "set"], "function", ["None"], ["", "def", "uris_list_2ids", "(", "uris", ",", "ids", ")", ":", "\n", "    ", "id_uris", "=", "list", "(", ")", "\n", "for", "u", "in", "uris", ":", "\n", "        ", "assert", "u", "in", "ids", "\n", "id_uris", ".", "append", "(", "ids", "[", "u", "]", ")", "\n", "", "assert", "len", "(", "id_uris", ")", "==", "len", "(", "set", "(", "uris", ")", ")", "\n", "return", "id_uris", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_pair_2ids": [[99, 108], ["list", "list.append"], "function", ["None"], ["", "def", "uris_pair_2ids", "(", "uris", ",", "ids1", ",", "ids2", ")", ":", "\n", "    ", "id_uris", "=", "list", "(", ")", "\n", "for", "u1", ",", "u2", "in", "uris", ":", "\n", "# assert u1 in ids1", "\n", "# assert u2 in ids2", "\n", "        ", "if", "u1", "in", "ids1", "and", "u2", "in", "ids2", ":", "\n", "            ", "id_uris", ".", "append", "(", "(", "ids1", "[", "u1", "]", ",", "ids2", "[", "u2", "]", ")", ")", "\n", "# assert len(id_uris) == len(set(uris))", "\n", "", "", "return", "id_uris", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_relation_triple_2ids": [[110, 119], ["list", "list.append", "len", "len", "set"], "function", ["None"], ["", "def", "uris_relation_triple_2ids", "(", "uris", ",", "ent_ids", ",", "rel_ids", ")", ":", "\n", "    ", "id_uris", "=", "list", "(", ")", "\n", "for", "u1", ",", "u2", ",", "u3", "in", "uris", ":", "\n", "        ", "assert", "u1", "in", "ent_ids", "\n", "assert", "u2", "in", "rel_ids", "\n", "assert", "u3", "in", "ent_ids", "\n", "id_uris", ".", "append", "(", "(", "ent_ids", "[", "u1", "]", ",", "rel_ids", "[", "u2", "]", ",", "ent_ids", "[", "u3", "]", ")", ")", "\n", "", "assert", "len", "(", "id_uris", ")", "==", "len", "(", "set", "(", "uris", ")", ")", "\n", "return", "id_uris", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.uris_attribute_triple_2ids": [[121, 129], ["list", "list.append", "len", "len", "set"], "function", ["None"], ["", "def", "uris_attribute_triple_2ids", "(", "uris", ",", "ent_ids", ",", "attr_ids", ")", ":", "\n", "    ", "id_uris", "=", "list", "(", ")", "\n", "for", "u1", ",", "u2", ",", "u3", "in", "uris", ":", "\n", "        ", "assert", "u1", "in", "ent_ids", "\n", "assert", "u2", "in", "attr_ids", "\n", "id_uris", ".", "append", "(", "(", "ent_ids", "[", "u1", "]", ",", "attr_ids", "[", "u2", "]", ",", "u3", ")", ")", "\n", "", "assert", "len", "(", "id_uris", ")", "==", "len", "(", "set", "(", "uris", ")", ")", "\n", "return", "id_uris", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_relation_triples_one_link": [[131, 138], ["set", "rt_dict.get", "hr_dict.get", "set", "set.add", "set", "set.add"], "function", ["None"], ["", "def", "generate_sup_relation_triples_one_link", "(", "e1", ",", "e2", ",", "rt_dict", ",", "hr_dict", ")", ":", "\n", "    ", "new_triples", "=", "set", "(", ")", "\n", "for", "r", ",", "t", "in", "rt_dict", ".", "get", "(", "e1", ",", "set", "(", ")", ")", ":", "\n", "        ", "new_triples", ".", "add", "(", "(", "e2", ",", "r", ",", "t", ")", ")", "\n", "", "for", "h", ",", "r", "in", "hr_dict", ".", "get", "(", "e1", ",", "set", "(", ")", ")", ":", "\n", "        ", "new_triples", ".", "add", "(", "(", "h", ",", "r", ",", "e2", ")", ")", "\n", "", "return", "new_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_relation_triples": [[140, 147], ["print", "set", "set", "read.generate_sup_relation_triples_one_link", "read.generate_sup_relation_triples_one_link", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_relation_triples_one_link", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_relation_triples_one_link"], ["", "def", "generate_sup_relation_triples", "(", "sup_links", ",", "rt_dict1", ",", "hr_dict1", ",", "rt_dict2", ",", "hr_dict2", ")", ":", "\n", "    ", "new_triples1", ",", "new_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "ent1", ",", "ent2", "in", "sup_links", ":", "\n", "        ", "new_triples1", "|=", "(", "generate_sup_relation_triples_one_link", "(", "ent1", ",", "ent2", ",", "rt_dict1", ",", "hr_dict1", ")", ")", "\n", "new_triples2", "|=", "(", "generate_sup_relation_triples_one_link", "(", "ent2", ",", "ent1", ",", "rt_dict2", ",", "hr_dict2", ")", ")", "\n", "", "print", "(", "\"supervised relation triples: {}, {}\"", ".", "format", "(", "len", "(", "new_triples1", ")", ",", "len", "(", "new_triples2", ")", ")", ")", "\n", "return", "new_triples1", ",", "new_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples_one_link": [[149, 154], ["set", "av_dict.get", "set", "set.add"], "function", ["None"], ["", "def", "generate_sup_attribute_triples_one_link", "(", "e1", ",", "e2", ",", "av_dict", ")", ":", "\n", "    ", "new_triples", "=", "set", "(", ")", "\n", "for", "a", ",", "v", "in", "av_dict", ".", "get", "(", "e1", ",", "set", "(", ")", ")", ":", "\n", "        ", "new_triples", ".", "add", "(", "(", "e2", ",", "a", ",", "v", ")", ")", "\n", "", "return", "new_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples": [[156, 163], ["print", "set", "set", "read.generate_sup_attribute_triples_one_link", "read.generate_sup_attribute_triples_one_link", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples_one_link", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples_one_link"], ["", "def", "generate_sup_attribute_triples", "(", "sup_links", ",", "av_dict1", ",", "av_dict2", ")", ":", "# para swapping", "\n", "    ", "new_triples1", ",", "new_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "ent1", ",", "ent2", "in", "sup_links", ":", "\n", "        ", "new_triples1", "|=", "(", "generate_sup_attribute_triples_one_link", "(", "ent1", ",", "ent2", ",", "av_dict1", ")", ")", "\n", "new_triples2", "|=", "(", "generate_sup_attribute_triples_one_link", "(", "ent2", ",", "ent1", ",", "av_dict2", ")", ")", "\n", "", "print", "(", "\"supervised attribute triples: {}, {}\"", ".", "format", "(", "len", "(", "new_triples1", ")", ",", "len", "(", "new_triples2", ")", ")", ")", "\n", "return", "new_triples1", ",", "new_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_relation_triples": [[217, 235], ["print", "set", "open", "open.readlines", "set", "set", "line.strip().split", "params[].strip", "params[].strip", "params[].strip", "set.add", "entities.add", "entities.add", "relations.add", "set", "set", "set", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_relation_triples", "(", "file_path", ")", ":", "\n", "    ", "print", "(", "\"read relation triples:\"", ",", "file_path", ")", "\n", "if", "file_path", "is", "None", ":", "\n", "        ", "return", "set", "(", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "", "triples", "=", "set", "(", ")", "\n", "entities", ",", "relations", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "3", "\n", "h", "=", "params", "[", "0", "]", ".", "strip", "(", ")", "\n", "r", "=", "params", "[", "1", "]", ".", "strip", "(", ")", "\n", "t", "=", "params", "[", "2", "]", ".", "strip", "(", ")", "\n", "triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "entities", ".", "add", "(", "h", ")", "\n", "entities", ".", "add", "(", "t", ")", "\n", "relations", ".", "add", "(", "r", ")", "\n", "", "return", "triples", ",", "entities", ",", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_links": [[237, 253], ["print", "list", "list", "list", "open", "open.readlines", "line.strip().split", "params[].strip", "params[].strip", "list.append", "list.append", "list.append", "len", "len", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_links", "(", "file_path", ")", ":", "\n", "    ", "print", "(", "\"read links:\"", ",", "file_path", ")", "\n", "links", "=", "list", "(", ")", "\n", "refs", "=", "list", "(", ")", "\n", "reft", "=", "list", "(", ")", "\n", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "e1", "=", "params", "[", "0", "]", ".", "strip", "(", ")", "\n", "e2", "=", "params", "[", "1", "]", ".", "strip", "(", ")", "\n", "refs", ".", "append", "(", "e1", ")", "\n", "reft", ".", "append", "(", "e2", ")", "\n", "links", ".", "append", "(", "(", "e1", ",", "e2", ")", ")", "\n", "", "assert", "len", "(", "refs", ")", "==", "len", "(", "reft", ")", "\n", "return", "links", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_dict": [[255, 264], ["open", "dict", "open.readlines", "open.close", "line.strip().split", "int", "len", "line.strip"], "function", ["None"], ["", "def", "read_dict", "(", "file_path", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "ids", "=", "dict", "(", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "ids", "[", "params", "[", "0", "]", "]", "=", "int", "(", "params", "[", "1", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_pair_ids": [[266, 275], ["open", "list", "open.readlines", "open.close", "line.strip().split", "list.append", "len", "line.strip", "int", "int"], "function", ["None"], ["", "def", "read_pair_ids", "(", "file_path", ")", ":", "\n", "    ", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "pairs", "=", "list", "(", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "params", ")", "==", "2", "\n", "pairs", ".", "append", "(", "(", "int", "(", "params", "[", "0", "]", ")", ",", "int", "(", "params", "[", "1", "]", ")", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file": [[277, 284], ["open", "f.close", "f.write", "str", "str"], "function", ["None"], ["", "def", "pair2file", "(", "file", ",", "pairs", ")", ":", "\n", "    ", "if", "pairs", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "pairs", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file": [[286, 294], ["print", "open", "dic.items", "f.close", "f.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "dict2file", "(", "file", ",", "dic", ")", ":", "\n", "    ", "if", "dic", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "j", "in", "dic", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "str", "(", "j", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "print", "(", "file", ",", "\"saved.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.line2file": [[296, 304], ["print", "open", "f.close", "f.write"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "line2file", "(", "file", ",", "lines", ")", ":", "\n", "    ", "if", "lines", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "file", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "f", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", "print", "(", "file", ",", "\"saved.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.radio_2file": [[306, 311], ["str().replace", "os.path.exists", "os.makedirs", "str"], "function", ["None"], ["", "def", "radio_2file", "(", "radio", ",", "folder", ")", ":", "\n", "    ", "path", "=", "folder", "+", "str", "(", "radio", ")", ".", "replace", "(", "'.'", ",", "'_'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "return", "path", "+", "'/'", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results": [[313, 318], ["read.pair2file", "print", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.pair2file", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "save_results", "(", "folder", ",", "rest_12", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "pair2file", "(", "folder", "+", "'alignment_results_12'", ",", "rest_12", ")", "\n", "print", "(", "\"Results saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings": [[320, 340], ["read.dict2file", "read.dict2file", "read.dict2file", "read.dict2file", "read.dict2file", "read.dict2file", "print", "os.path.exists", "os.makedirs", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.dict2file", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save"], ["", "def", "save_embeddings", "(", "folder", ",", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "attr_embeds", ",", "mapping_mat", "=", "None", ",", "rev_mapping_mat", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "if", "ent_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'ent_embeds.npy'", ",", "ent_embeds", ")", "\n", "", "if", "rel_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'rel_embeds.npy'", ",", "rel_embeds", ")", "\n", "", "if", "attr_embeds", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'attr_embeds.npy'", ",", "attr_embeds", ")", "\n", "", "if", "mapping_mat", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'mapping_mat.npy'", ",", "mapping_mat", ")", "\n", "", "if", "rev_mapping_mat", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "folder", "+", "'rev_mapping_mat.npy'", ",", "rev_mapping_mat", ")", "\n", "", "dict2file", "(", "folder", "+", "'kg1_ent_ids'", ",", "kgs", ".", "kg1", ".", "entities_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_ent_ids'", ",", "kgs", ".", "kg2", ".", "entities_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg1_rel_ids'", ",", "kgs", ".", "kg1", ".", "relations_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_rel_ids'", ",", "kgs", ".", "kg2", ".", "relations_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg1_attr_ids'", ",", "kgs", ".", "kg1", ".", "attributes_id_dict", ")", "\n", "dict2file", "(", "folder", "+", "'kg2_attr_ids'", ",", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "print", "(", "\"Embeddings saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.read_attribute_triples": [[342, 366], ["print", "set", "open", "open.readlines", "set", "set", "line.strip().strip().split", "params[].strip", "params[].strip", "params[].strip", "value.strip().rstrip().strip.strip().rstrip().strip", "entities.add", "attributes.add", "set.add", "set", "set", "set", "set", "set", "set", "len", "len", "line.strip().strip", "value.strip().rstrip().strip.strip().rstrip", "p.strip", "line.strip", "value.strip().rstrip().strip.strip"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_attribute_triples", "(", "file_path", ")", ":", "\n", "    ", "print", "(", "\"read attribute triples:\"", ",", "file_path", ")", "\n", "if", "file_path", "is", "None", ":", "\n", "        ", "return", "set", "(", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "", "if", "file_path", "is", "None", ":", "\n", "        ", "return", "set", "(", ")", ",", "set", "(", ")", ",", "set", "(", ")", "\n", "", "triples", "=", "set", "(", ")", "\n", "entities", ",", "attributes", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "params", "=", "line", ".", "strip", "(", ")", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "params", ")", "<", "3", ":", "\n", "            ", "continue", "\n", "", "head", "=", "params", "[", "0", "]", ".", "strip", "(", ")", "\n", "attr", "=", "params", "[", "1", "]", ".", "strip", "(", ")", "\n", "value", "=", "params", "[", "2", "]", ".", "strip", "(", ")", "\n", "if", "len", "(", "params", ")", ">", "3", ":", "\n", "            ", "for", "p", "in", "params", "[", "3", ":", "]", ":", "\n", "                ", "value", "=", "value", "+", "' '", "+", "p", ".", "strip", "(", ")", "\n", "", "", "value", "=", "value", ".", "strip", "(", ")", ".", "rstrip", "(", "'.'", ")", ".", "strip", "(", ")", "\n", "entities", ".", "add", "(", "head", ")", "\n", "attributes", ".", "add", "(", "attr", ")", "\n", "triples", ".", "add", "(", "(", "head", ",", "attr", ",", "value", ")", ")", "\n", "", "return", "triples", ",", "entities", ",", "attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.ARGs.__init__": [[14, 17], ["dic.items", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dic", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args": [[4, 11], ["print", "args_hander.ARGs", "open", "json.load", "f.close"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load"], ["def", "load_args", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "args_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "print", "(", "\"load arguments:\"", ",", "args_dict", ")", "\n", "args", "=", "ARGs", "(", "args_dict", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.check_args": [[19, 22], ["None"], "function", ["None"], ["", "", "", "def", "check_args", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "embedding_module", "in", "[", "'TransE'", ",", "'TransH'", ",", "'TransR'", ",", "'TransD'", "]", ":", "\n", "        ", "assert", "args", ".", "neg_triple_num", "==", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings": [[11, 22], ["initializers.xavier_init", "initializers.truncated_normal_init", "initializers.random_uniform_init", "initializers.random_unit_init"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.truncated_normal_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.random_uniform_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.random_unit_init"], ["def", "init_embeddings", "(", "shape", ",", "name", ",", "init", ",", "is_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "embeds", "=", "None", "\n", "if", "init", "==", "'xavier'", ":", "\n", "        ", "embeds", "=", "xavier_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "dtype", ")", "\n", "", "elif", "init", "==", "'normal'", ":", "\n", "        ", "embeds", "=", "truncated_normal_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "dtype", ")", "\n", "", "elif", "init", "==", "'uniform'", ":", "\n", "        ", "embeds", "=", "random_uniform_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "dtype", ")", "\n", "", "elif", "init", "==", "'unit'", ":", "\n", "        ", "embeds", "=", "random_unit_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init": [[24, 29], ["tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "def", "xavier_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'xavier_init'", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", ")", "\n", "", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "embeddings", ",", "1", ")", "if", "is_l2_norm", "else", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.truncated_normal_init": [[31, 37], ["tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "math.sqrt", "tensorflow.initializers.truncated_normal"], "function", ["None"], ["", "def", "truncated_normal_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'truncated_normal'", ")", ":", "\n", "        ", "std", "=", "1.0", "/", "math", ".", "sqrt", "(", "shape", "[", "1", "]", ")", "\n", "embeddings", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "truncated_normal", "(", "stddev", "=", "std", ")", ")", "\n", "", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "embeddings", ",", "1", ")", "if", "is_l2_norm", "else", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.random_uniform_init": [[39, 44], ["tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.nn.l2_normalize", "tensorflow.initializers.random_uniform"], "function", ["None"], ["", "def", "random_uniform_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "minval", "=", "0", ",", "maxval", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'random_uniform'", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "random_uniform", "(", "minval", "=", "minval", ",", "maxval", "=", "maxval", ")", ")", "\n", "", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "embeddings", ",", "1", ")", "if", "is_l2_norm", "else", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.random_unit_init": [[46, 53], ["tensorflow.Variable", "tensorflow.name_scope", "list", "range", "sklearn.preprocessing.normalize", "tensorflow.nn.l2_normalize", "list.append", "numpy.matrix", "random.gauss", "range"], "function", ["None"], ["", "def", "random_unit_init", "(", "shape", ",", "name", ",", "is_l2_norm", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'random_unit_init'", ")", ":", "\n", "        ", "vectors", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "shape", "[", "0", "]", ")", ":", "\n", "            ", "vectors", ".", "append", "(", "[", "random", ".", "gauss", "(", "0", ",", "1", ")", "for", "j", "in", "range", "(", "shape", "[", "1", "]", ")", "]", ")", "\n", "", "", "embeddings", "=", "tf", ".", "Variable", "(", "preprocessing", ".", "normalize", "(", "np", ".", "matrix", "(", "vectors", ")", ")", ",", "name", "=", "name", ",", "dtype", "=", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "embeddings", ",", "1", ")", "if", "is_l2_norm", "else", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.orthogonal_init": [[55, 59], ["tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.initializers.orthogonal"], "function", ["None"], ["", "def", "orthogonal_init", "(", "shape", ",", "name", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'orthogonal_init'", ")", ":", "\n", "        ", "embeddings", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", "=", "shape", ",", "dtype", "=", "dtype", ",", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "", "return", "embeddings", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_module": [[9, 20], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.mapping_loss"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.mapping_loss"], ["def", "add_mapping_module", "(", "model", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'seed_links_placeholder'", ")", ":", "\n", "        ", "model", ".", "seed_entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "model", ".", "seed_entities2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'seed_links_lookup'", ")", ":", "\n", "        ", "tes1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "ent_embeds", ",", "model", ".", "seed_entities1", ")", "\n", "tes2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "ent_embeds", ",", "model", ".", "seed_entities2", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'mapping_loss'", ")", ":", "\n", "        ", "model", ".", "mapping_loss", "=", "model", ".", "args", ".", "alpha", "*", "mapping_loss", "(", "tes1", ",", "tes2", ",", "model", ".", "mapping_mat", ",", "model", ".", "eye_mat", ")", "\n", "model", ".", "mapping_optimizer", "=", "generate_optimizer", "(", "model", ".", "mapping_loss", ",", "model", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "model", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_variables": [[22, 26], ["tensorflow.variable_scope", "openea.modules.base.initializers.orthogonal_init", "tensorflow.constant", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.orthogonal_init"], ["", "", "def", "add_mapping_variables", "(", "model", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'kgs'", "+", "'mapping'", ")", ":", "\n", "        ", "model", ".", "mapping_mat", "=", "orthogonal_init", "(", "[", "model", ".", "args", ".", "dim", ",", "model", ".", "args", ".", "dim", "]", ",", "'mapping_matrix'", ")", "\n", "model", ".", "eye_mat", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "model", ".", "args", ".", "dim", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'eye'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func": [[4, 13], ["losses.margin_loss", "losses.logistic_loss", "losses.limited_loss"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.margin_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.limited_loss"], ["def", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "args", ")", ":", "\n", "    ", "triple_loss", "=", "None", "\n", "if", "args", ".", "loss", "==", "'margin-based'", ":", "\n", "        ", "triple_loss", "=", "margin_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "args", ".", "margin", ",", "args", ".", "loss_norm", ")", "\n", "", "elif", "args", ".", "loss", "==", "'logistic'", ":", "\n", "        ", "triple_loss", "=", "logistic_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "args", ".", "loss_norm", ")", "\n", "", "elif", "args", ".", "loss", "==", "'limited'", ":", "\n", "        ", "triple_loss", "=", "limited_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "args", ".", "pos_margin", ",", "args", ".", "neg_margin", ",", "args", ".", "loss_norm", ")", "\n", "", "return", "triple_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.margin_loss": [[15, 28], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.square", "tensorflow.square", "tensorflow.constant"], "function", ["None"], ["", "def", "margin_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "margin", ",", "loss_norm", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'margin_loss_distance'", ")", ":", "\n", "        ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "neg_distance", "=", "nhs", "+", "nrs", "-", "nts", "\n", "", "with", "tf", ".", "name_scope", "(", "'margin_loss'", ")", ":", "\n", "        ", "if", "loss_norm", "==", "'L1'", ":", "# L1 normal", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "# L2 normal", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "constant", "(", "margin", ")", "+", "pos_score", "-", "neg_score", ")", ",", "name", "=", "'margin_loss'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss": [[30, 40], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.square"], "function", ["None"], ["", "def", "positive_loss", "(", "phs", ",", "prs", ",", "pts", ",", "loss_norm", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'positive_loss_distance'", ")", ":", "\n", "        ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "", "with", "tf", ".", "name_scope", "(", "'positive_loss_score'", ")", ":", "\n", "        ", "if", "loss_norm", "==", "'L1'", ":", "# L1 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "# L2 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ",", "name", "=", "'positive_loss'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.limited_loss": [[42, 57], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.square", "tensorflow.square", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "limited_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "pos_margin", ",", "neg_margin", ",", "loss_norm", ",", "balance", "=", "1.0", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'limited_loss_distance'", ")", ":", "\n", "        ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "neg_distance", "=", "nhs", "+", "nrs", "-", "nts", "\n", "", "with", "tf", ".", "name_scope", "(", "'limited_loss_score'", ")", ":", "\n", "        ", "if", "loss_norm", "==", "'L1'", ":", "# L1 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "# L2 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "pos_score", "-", "tf", ".", "constant", "(", "pos_margin", ")", ")", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "constant", "(", "neg_margin", ")", "-", "neg_score", ")", ")", "\n", "loss", "=", "tf", ".", "add", "(", "pos_loss", ",", "balance", "*", "neg_loss", ",", "name", "=", "'limited_loss'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss": [[59, 74], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.abs", "tensorflow.abs", "tensorflow.square", "tensorflow.square", "tensorflow.exp", "tensorflow.exp"], "function", ["None"], ["", "def", "logistic_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "loss_norm", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'logistic_loss_distance'", ")", ":", "\n", "        ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "neg_distance", "=", "nhs", "+", "nrs", "-", "nts", "\n", "", "with", "tf", ".", "name_scope", "(", "'logistic_loss_score'", ")", ":", "\n", "        ", "if", "loss_norm", "==", "'L1'", ":", "# L1 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "# L2 score", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "pos_score", ")", ")", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "neg_score", ")", ")", ")", "\n", "loss", "=", "tf", ".", "add", "(", "pos_loss", ",", "neg_loss", ",", "name", "=", "'logistic_loss'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.mapping_loss": [[76, 81], ["tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.pow", "tensorflow.matmul"], "function", ["None"], ["", "def", "mapping_loss", "(", "tes1", ",", "tes2", ",", "mapping", ",", "eye", ")", ":", "\n", "    ", "mapped_tes2", "=", "tf", ".", "matmul", "(", "tes1", ",", "mapping", ")", "\n", "map_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "tes2", "-", "mapped_tes2", ",", "2", ")", ",", "1", ")", ")", "\n", "orthogonal_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "tf", ".", "matmul", "(", "mapping", ",", "mapping", ",", "transpose_b", "=", "True", ")", "-", "eye", ",", "2", ")", ",", "1", ")", ")", "\n", "return", "map_loss", "+", "orthogonal_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer": [[4, 8], ["optimizers.get_optimizer", "get_optimizer.compute_gradients", "get_optimizer.apply_gradients"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.get_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.compute_gradients"], ["def", "generate_optimizer", "(", "loss", ",", "learning_rate", ",", "var_list", "=", "None", ",", "opt", "=", "'SGD'", ")", ":", "\n", "    ", "optimizer", "=", "get_optimizer", "(", "opt", ",", "learning_rate", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "loss", ",", "var_list", "=", "var_list", ")", "\n", "return", "optimizer", ".", "apply_gradients", "(", "grads_and_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.get_optimizer": [[10, 21], ["tensorflow.train.AdagradOptimizer", "tensorflow.train.AdadeltaOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.GradientDescentOptimizer"], "function", ["None"], ["", "def", "get_optimizer", "(", "opt", ",", "learning_rate", ")", ":", "\n", "    ", "if", "opt", "==", "'Adagrad'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "learning_rate", ")", "\n", "", "elif", "opt", "==", "'Adadelta'", ":", "\n", "# To match the exact form in the original paper use 1.0.", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "learning_rate", ")", "\n", "", "elif", "opt", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "", "else", ":", "# opt == 'SGD'", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", "\n", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.set_kgs": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.set_args": [[31, 35], ["openea.modules.utils.util.generate_out_folder", "openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.init": [[36, 39], ["None"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "# need to be overwrite", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.__init__": [[40, 72], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "out_folder", "=", "None", "\n", "self", ".", "args", "=", "None", "\n", "self", ".", "kgs", "=", "None", "\n", "\n", "self", ".", "session", "=", "None", "\n", "\n", "self", ".", "seed_entities1", "=", "None", "\n", "self", ".", "seed_entities2", "=", "None", "\n", "self", ".", "neg_ts", "=", "None", "\n", "self", ".", "neg_rs", "=", "None", "\n", "self", ".", "neg_hs", "=", "None", "\n", "self", ".", "pos_ts", "=", "None", "\n", "self", ".", "pos_rs", "=", "None", "\n", "self", ".", "pos_hs", "=", "None", "\n", "\n", "self", ".", "rel_embeds", "=", "None", "\n", "self", ".", "ent_embeds", "=", "None", "\n", "self", ".", "mapping_mat", "=", "None", "\n", "self", ".", "eye_mat", "=", "None", "\n", "\n", "self", ".", "triple_optimizer", "=", "None", "\n", "self", ".", "triple_loss", "=", "None", "\n", "self", ".", "mapping_optimizer", "=", "None", "\n", "self", ".", "mapping_loss", "=", "None", "\n", "\n", "self", ".", "mapping_mat", "=", "None", "\n", "\n", "self", ".", "flag1", "=", "-", "1", "\n", "self", ".", "flag2", "=", "-", "1", "\n", "self", ".", "early_stop", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_variables": [[73, 79], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_embed_graph": [[80, 99], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_variables": [[100, 102], ["openea.modules.base.mapping.add_mapping_variables", "openea.modules.base.mapping.add_mapping_variables"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_variables"], ["", "", "def", "_define_mapping_variables", "(", "self", ")", ":", "\n", "        ", "add_mapping_variables", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_graph": [[103, 105], ["openea.modules.base.mapping.add_mapping_module", "openea.modules.base.mapping.add_mapping_module"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_module", "home.repos.pwc.inspect_result.jadexin_cyctea.base.mapping.add_mapping_module"], ["", "def", "_define_mapping_graph", "(", "self", ")", ":", "\n", "        ", "add_mapping_module", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._eval_valid_embeddings": [[106, 116], ["len", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "basic_model.BasicModel.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "kgs", ".", "valid_links", ")", ">", "0", ":", "\n", "            ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "\n", "session", "=", "self", ".", "session", ")", "\n", "", "else", ":", "\n", "            ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._eval_test_embeddings": [[117, 122], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "basic_model.BasicModel.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.valid": [[123, 129], ["basic_model.BasicModel._eval_valid_embeddings", "openea.modules.finding.evaluation.valid", "openea.modules.finding.evaluation.valid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_valid_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "embeds1", ",", "embeds2", ",", "mapping", "=", "self", ".", "_eval_valid_embeddings", "(", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "self", ".", "args", ".", "top_k", ",", "\n", "self", ".", "args", ".", "test_threads_num", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "False", ")", "\n", "return", "hits1_12", "if", "stop_metric", "==", "'hits1'", "else", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.test": [[130, 138], ["basic_model.BasicModel._eval_test_embeddings", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.save_results", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_test_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "embeds1", ",", "embeds2", ",", "mapping", "=", "self", ".", "_eval_test_embeddings", "(", ")", "\n", "rest_12", ",", "_", ",", "_", "=", "test", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.retest": [[139, 182], ["basic_model.BasicModel.out_folder.split", "range", "os.listdir", "numpy.load", "print", "os.path.exists", "print", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "print", "print", "openea.modules.finding.alignment.stable_alignment", "openea.modules.finding.alignment.stable_alignment", "print", "openea.modules.finding.alignment.stable_alignment", "openea.modules.finding.alignment.stable_alignment", "type", "print", "numpy.load", "numpy.concatenate", "numpy.concatenate", "print", "numpy.load", "numpy.matmul", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.stable_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.stable_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.stable_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.stable_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test"], ["", "", "def", "retest", "(", "self", ")", ":", "\n", "        ", "dir", "=", "self", ".", "out_folder", ".", "split", "(", "\"/\"", ")", "\n", "new_dir", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "dir", ")", "-", "2", ")", ":", "\n", "            ", "new_dir", "+=", "(", "dir", "[", "i", "]", "+", "\"/\"", ")", "\n", "", "exist_file", "=", "os", ".", "listdir", "(", "new_dir", ")", "\n", "new_dir", "=", "new_dir", "+", "exist_file", "[", "0", "]", "+", "\"/\"", "\n", "embeds", "=", "np", ".", "load", "(", "new_dir", "+", "\"ent_embeds.npy\"", ")", "\n", "embeds1", "=", "embeds", "[", "self", ".", "kgs", ".", "test_entities1", "]", "\n", "embeds2", "=", "embeds", "[", "self", ".", "kgs", ".", "test_entities2", "]", "\n", "mapping", "=", "None", "\n", "\n", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "type", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "if", "self", ".", "__class__", ".", "__name__", "==", "\"GCN_Align\"", ":", "\n", "            ", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"loads attr embeds\"", ")", "\n", "attr_embeds", "=", "np", ".", "load", "(", "new_dir", "+", "\"attr_embeds.npy\"", ")", "\n", "attr_embeds1", "=", "attr_embeds", "[", "self", ".", "kgs", ".", "test_entities1", "]", "\n", "attr_embeds2", "=", "attr_embeds", "[", "self", ".", "kgs", ".", "test_entities2", "]", "\n", "embeds1", "=", "np", ".", "concatenate", "(", "[", "embeds1", "*", "self", ".", "args", ".", "beta", ",", "attr_embeds1", "*", "(", "1.0", "-", "self", ".", "args", ".", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "embeds2", "=", "np", ".", "concatenate", "(", "[", "embeds2", "*", "self", ".", "args", ".", "beta", ",", "attr_embeds2", "*", "(", "1.0", "-", "self", ".", "args", ".", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# if self.__class__.__name__ == \"MTransE\" or self.__class__.__name__ == \"SEA\" or self.__class__.__name__ == \"KDCoE\":", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "new_dir", "+", "\"mapping_mat.npy\"", ")", ":", "\n", "            ", "print", "(", "self", ".", "__class__", ".", "__name__", ",", "\"loads mapping mat\"", ")", "\n", "mapping", "=", "np", ".", "load", "(", "new_dir", "+", "\"mapping_mat.npy\"", ")", "\n", "\n", "", "print", "(", "\"conventional test:\"", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "mapping", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "print", "(", "\"conventional reversed test:\"", ")", "\n", "if", "mapping", "is", "not", "None", ":", "\n", "            ", "embeds1", "=", "np", ".", "matmul", "(", "embeds1", ",", "mapping", ")", "\n", "test", "(", "embeds2", ",", "embeds1", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "test", "(", "embeds2", ",", "embeds1", ",", "mapping", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "", "print", "(", "\"stable test:\"", ")", "\n", "stable_alignment", "(", "embeds1", ",", "embeds2", ",", "self", ".", "args", ".", "eval_metric", ",", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "\n", "nums_threads", "=", "self", ".", "args", ".", "test_threads_num", ")", "\n", "print", "(", "\"stable test with csls:\"", ")", "\n", "stable_alignment", "(", "embeds1", ",", "embeds2", ",", "self", ".", "args", ".", "eval_metric", ",", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "\n", "nums_threads", "=", "self", ".", "args", ".", "test_threads_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.save": [[183, 188], ["basic_model.BasicModel.ent_embeds.eval", "basic_model.BasicModel.rel_embeds.eval", "openea.save_embeddings", "openea.save_embeddings", "basic_model.BasicModel.mapping_mat.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "rel_embeds", "=", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "None", ",", "mapping_mat", "=", "mapping_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.eval_kg1_ent_embeddings": [[189, 192], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup.eval"], "methods", ["None"], ["", "def", "eval_kg1_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "\n", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.eval_kg2_ent_embeddings": [[193, 196], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup.eval"], "methods", ["None"], ["", "def", "eval_kg2_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.eval_kg1_useful_ent_embeddings": [[197, 200], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup.eval"], "methods", ["None"], ["", "def", "eval_kg1_useful_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "useful_entities_list1", ")", "\n", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.eval_kg2_useful_ent_embeddings": [[201, 204], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup.eval"], "methods", ["None"], ["", "def", "eval_kg2_useful_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "useful_entities_list2", ")", "\n", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.launch_training_1epo": [[205, 209], ["basic_model.BasicModel.launch_triple_training_1epo", "basic_model.BasicModel.launch_mapping_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo"], ["", "def", "launch_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "if", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", ":", "\n", "            ", "self", ".", "launch_mapping_training_1epo", "(", "epoch", ",", "triple_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.launch_triple_training_1epo": [[210, 250], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "set", "set", "time.time", "batch_queue.get", "basic_model.BasicModel.session.run", "len", "multiprocessing.Process().start", "multiprocessing.Process().start", "time.time", "multiprocessing.Process", "multiprocessing.Process"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "args", ".", "inverse_relation", ":", "# todo: inverse relation added not correct", "\n", "            ", "triplet_list1", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", "+", "self", ".", "kgs", ".", "kg1", ".", "rel_triplet_inv", "\n", "triplet_list2", "=", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", "+", "self", ".", "kgs", ".", "kg2", ".", "rel_triplet_inv", "\n", "triplet_set1", "=", "set", "(", "triplet_list1", ")", "\n", "triplet_set2", "=", "set", "(", "triplet_list2", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "                ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "triplet_list1", ",", "triplet_list2", ",", "\n", "triplet_set1", ",", "triplet_set2", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "steps_task", "in", "steps_tasks", ":", "\n", "                ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.launch_mapping_training_1epo": [[251, 264], ["time.time", "range", "print", "random.sample", "basic_model.BasicModel.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "links_batch", "=", "random", ".", "sample", "(", "self", ".", "kgs", ".", "train_links", ",", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "//", "triple_steps", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss", ",", "self", ".", "mapping_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "seed_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "links_batch", "]", ",", "\n", "self", ".", "seed_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "links_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "links_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.run": [[265, 298], ["time.time", "int", "openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "basic_model.BasicModel.launch_training_1epo", "range", "basic_model.BasicModel.valid", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "print", "gc.collect", "basic_model.BasicModel.eval_kg1_useful_ent_embeddings", "basic_model.BasicModel.eval_kg2_useful_ent_embeddings", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "if", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "and", "i", "%", "self", ".", "args", ".", "truncated_freq", "==", "0", ":", "\n", "                ", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                    ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"\\ngenerating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel.predict": [[299, 363], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "set", "numpy.matmul", "range", "range", "os.path.dirname", "open", "open.close", "print", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "basic_model.BasicModel.mapping_mat.eval", "set.intersection", "set", "ValueError", "basic_model.BasicModel.kgs.kg1.entities_id_dict.items", "basic_model.BasicModel.kgs.kg2.entities_id_dict.items", "os.path.exists", "os.makedirs", "open.write", "numpy.argpartition", "set.add", "numpy.argpartition", "set.add", "map", "map", "numpy.argwhere", "numpy.argwhere", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "predict", "(", "self", ",", "top_k", "=", "1", ",", "min_sim_value", "=", "None", ",", "output_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute pairwise similarity between the two collections of embeddings.\n        Parameters\n        ----------\n        top_k : int\n            The k for top k retrieval, can be None (but then min_sim_value should be set).\n        min_sim_value : float, optional\n            the minimum value for the confidence.\n        output_path : str, optional\n            The path to write the output file. It is formatted as tsv file with entity1, entity2, confidence.\n        Returns\n        -------\n        topk_neighbors_w_sim : A list of tuples of form (entity1, entity2, confidence)\n        \"\"\"", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "if", "self", ".", "mapping_mat", ":", "\n", "            ", "embeds1", "=", "np", ".", "matmul", "(", "embeds1", ",", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "\n", "", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ")", "\n", "\n", "# search for correspondences which match top_k and/or min_sim_value", "\n", "matched_entities_indexes", "=", "set", "(", ")", "\n", "if", "top_k", ":", "\n", "            ", "assert", "top_k", ">", "0", "\n", "# top k for entities in kg1", "\n", "for", "i", "in", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "rank_index", "in", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "top_k", ")", "[", ":", "top_k", "]", ":", "\n", "                    ", "matched_entities_indexes", ".", "add", "(", "(", "i", ",", "rank_index", ")", ")", "\n", "\n", "# top k for entities in kg2", "\n", "", "", "for", "i", "in", "range", "(", "sim_mat", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "for", "rank_index", "in", "np", ".", "argpartition", "(", "-", "sim_mat", "[", ":", ",", "i", "]", ",", "top_k", ")", "[", ":", "top_k", "]", ":", "\n", "                    ", "matched_entities_indexes", ".", "add", "(", "(", "rank_index", ",", "i", ")", ")", "\n", "\n", "", "", "if", "min_sim_value", ":", "\n", "                ", "matched_entities_indexes", ".", "intersection", "(", "map", "(", "tuple", ",", "np", ".", "argwhere", "(", "sim_mat", ">", "min_sim_value", ")", ")", ")", "\n", "", "", "elif", "min_sim_value", ":", "\n", "            ", "matched_entities_indexes", "=", "set", "(", "map", "(", "tuple", ",", "np", ".", "argwhere", "(", "sim_mat", ">", "min_sim_value", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Either top_k or min_sim_value should have a value\"", ")", "\n", "\n", "# build id to URI map:", "\n", "", "kg1_id_to_uri", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", "}", "\n", "kg2_id_to_uri", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", "}", "\n", "\n", "topk_neighbors_w_sim", "=", "[", "(", "kg1_id_to_uri", "[", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "[", "i", "]", "]", ",", "\n", "kg2_id_to_uri", "[", "self", ".", "kgs", ".", "kg2", ".", "entities_list", "[", "j", "]", "]", ",", "\n", "sim_mat", "[", "i", ",", "j", "]", ")", "for", "i", ",", "j", "in", "matched_entities_indexes", "]", "\n", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "# create dir if not existent", "\n", "            ", "directory", "=", "os", ".", "path", ".", "dirname", "(", "output_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "file", "=", "open", "(", "output_path", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "topk_neighbors_w_sim", ":", "\n", "                ", "file", ".", "write", "(", "str", "(", "s", ")", "+", "\"\\t\"", "+", "str", "(", "p", ")", "+", "\"\\t\"", "+", "str", "(", "o", ")", "+", "\"\\n\"", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "print", "(", "output_path", ",", "\"saved\"", ")", "\n", "\n", "", "return", "topk_neighbors_w_sim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult.set_kgs": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult.set_args": [[20, 23], ["openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult.init": [[24, 31], ["distmult.DistMult._define_variables", "distmult.DistMult._define_mapping_variables", "distmult.DistMult._define_embed_graph", "distmult.DistMult._define_mapping_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_mapping_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_mapping_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult.__init__": [[32, 35], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "metric", "=", "'inner'", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult._define_variables": [[36, 42], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "self", ".", "args", ".", "init", ",", "\n", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "self", ".", "args", ".", "init", ",", "\n", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult._calc": [[43, 45], ["None"], "methods", ["None"], ["", "", "def", "_calc", "(", "self", ",", "h", ",", "t", ",", "r", ")", ":", "\n", "        ", "return", "h", "*", "r", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult._define_embed_graph": [[46, 60], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "openea.modules.base.optimizers.generate_optimizer", "distmult.DistMult._calc", "tensorflow.nn.softplus"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "res", "=", "tf", ".", "reduce_sum", "(", "self", ".", "_calc", "(", "phs", ",", "pts", ",", "prs", ")", ",", "1", ",", "keep_dims", "=", "False", ")", "\n", "self", ".", "triple_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "self", ".", "label", "*", "res", ")", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "'Adagrad'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.distmult.DistMult.launch_triple_training_1epo": [[61, 88], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "distmult.DistMult.session.run", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_triple_label_batch", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "\n", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_pos_triples", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch", ",", "label", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch", "]", ",", "\n", "self", ".", "label", ":", "label", "}", ")", "\n", "trained_pos_triples", "+=", "len", "(", "batch", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "# print(trained_pos_triples)", "\n", "# epoch_loss /= trained_pos_triples", "\n", "", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE.set_kgs": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE.set_args": [[17, 21], ["openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE.init": [[22, 35], ["simple.SimplE._define_variables", "simple.SimplE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'xavier'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE.__init__": [[36, 38], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._define_variables": [[39, 49], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "head_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'head_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "tail_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'tail_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds1", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds1'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "self", ".", "rel_embeds2", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds2'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._calc": [[50, 55], ["tensorflow.multiply", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.multiply"], "methods", ["None"], ["", "", "def", "_calc", "(", "self", ",", "hs", ",", "rs", ",", "ts", ")", ":", "\n", "        ", "hrs", "=", "tf", ".", "multiply", "(", "hs", ",", "rs", ")", "\n", "hrs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "hrs", ",", "1", ")", "\n", "scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "hrs", ",", "ts", ")", ",", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._generate_loss": [[56, 59], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "simple.SimplE._calc", "simple.SimplE._calc", "tensorflow.nn.softplus", "tensorflow.nn.softplus"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc"], ["", "def", "_generate_loss", "(", "self", ",", "hs1", ",", "rs1", ",", "ts1", ",", "hs2", ",", "rs2", ",", "ts2", ",", "pos", "=", "True", ")", ":", "\n", "        ", "scores", "=", "(", "self", ".", "_calc", "(", "hs1", ",", "rs1", ",", "ts1", ")", "+", "self", ".", "_calc", "(", "hs2", ",", "rs2", ",", "ts2", ")", ")", "/", "2", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "scores", ")", ")", "if", "pos", "else", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._define_embed_graph": [[60, 89], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.optimizers.generate_optimizer", "simple.SimplE._generate_loss", "simple.SimplE._generate_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds1", ",", "self", ".", "pos_rs", ")", "\n", "pts1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "\n", "phs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "prs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds2", ",", "self", ".", "pos_rs", ")", "\n", "pts2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "\n", "nhs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds1", ",", "self", ".", "neg_rs", ")", "\n", "nts1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "nhs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "nrs2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds2", ",", "self", ".", "neg_rs", ")", "\n", "nts2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "self", ".", "_generate_loss", "(", "phs1", ",", "prs1", ",", "pts1", ",", "phs2", ",", "prs2", ",", "pts2", ",", "pos", "=", "True", ")", "+", "self", ".", "_generate_loss", "(", "nhs1", ",", "nrs1", ",", "nts1", ",", "nhs2", ",", "nrs2", ",", "nts2", ",", "pos", "=", "False", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._eval_valid_embeddings": [[90, 100], ["print", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "simple.SimplE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"valid\"", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE._eval_test_embeddings": [[101, 109], ["print", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "simple.SimplE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"test\"", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "head_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "tail_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.simple.SimplE.save": [[110, 116], ["sklearn.preprocessing.normalize", "openea.save_embeddings", "simple.SimplE.head_ent_embeds.eval", "simple.SimplE.tail_ent_embeds.eval", "simple.SimplE.rel_embeds1.eval", "simple.SimplE.rel_embeds2.eval", "simple.SimplE.mapping_mat.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "head_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "self", ".", "tail_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "ent_embeds", "=", "preprocessing", ".", "normalize", "(", "ent_embeds", ")", "\n", "rel_embeds", "=", "self", ".", "rel_embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "self", ".", "rel_embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "None", ",", "mapping_mat", "=", "mapping_mat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE.set_kgs": [[15, 17], ["None"], "methods", ["None"], ["def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE.set_args": [[18, 21], ["openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE.init": [[22, 37], ["hole.HolE._define_variables", "hole.HolE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'xavier'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "margin", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE.__init__": [[38, 40], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._define_variables": [[41, 47], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._cconv": [[48, 50], ["tensorflow.ifft", "tensorflow.fft", "tensorflow.fft"], "methods", ["None"], ["", "", "def", "_cconv", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "tf", ".", "ifft", "(", "tf", ".", "fft", "(", "a", ")", "*", "tf", ".", "fft", "(", "b", ")", ")", ".", "real", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._ccorr": [[51, 55], ["tensorflow.cast", "tensorflow.cast", "tensorflow.real", "tensorflow.ifft", "tensorflow.conj", "tensorflow.fft", "tensorflow.fft"], "methods", ["None"], ["", "def", "_ccorr", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "a", "=", "tf", ".", "cast", "(", "a", ",", "tf", ".", "complex64", ")", "\n", "b", "=", "tf", ".", "cast", "(", "b", ",", "tf", ".", "complex64", ")", "\n", "return", "tf", ".", "real", "(", "tf", ".", "ifft", "(", "tf", ".", "conj", "(", "tf", ".", "fft", "(", "a", ")", ")", "*", "tf", ".", "fft", "(", "b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._calc": [[56, 61], ["tensorflow.nn.l2_normalize", "hole.HolE._ccorr", "tensorflow.sigmoid", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._ccorr", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_calc", "(", "self", ",", "head", ",", "tail", ",", "rel", ")", ":", "\n", "        ", "relation_mention", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "rel", ",", "1", ")", "\n", "entity_mention", "=", "self", ".", "_ccorr", "(", "head", ",", "tail", ")", "\n", "# entity_mention = tf.nn.l2_normalize(entity_mention, 1)", "\n", "return", "-", "tf", ".", "sigmoid", "(", "tf", ".", "reduce_sum", "(", "relation_mention", "*", "entity_mention", ",", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.hole.HolE._define_embed_graph": [[62, 87], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "hole.HolE._calc", "hole.HolE._calc", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.nn.relu", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "pos_score", "=", "self", ".", "_calc", "(", "phs", ",", "pts", ",", "prs", ")", "\n", "neg_score", "=", "self", ".", "_calc", "(", "nhs", ",", "nts", ",", "nrs", ")", "\n", "if", "self", ".", "args", ".", "neg_triple_num", ">", "1", ":", "\n", "                ", "neg_score", "=", "tf", ".", "reshape", "(", "neg_score", ",", "[", "-", "1", ",", "self", ".", "args", ".", "neg_triple_num", "]", ")", "\n", "neg_score", "=", "tf", ".", "reduce_mean", "(", "neg_score", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "", "self", ".", "triple_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "constant", "(", "self", ".", "args", ".", "margin", ")", "+", "pos_score", "-", "neg_score", ")", ",", "\n", "name", "=", "'margin_loss'", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.__init__": [[22, 27], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pi", "=", "3.14159265358979323846", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "embedding_range", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.set_kgs": [[28, 30], ["None"], "methods", ["None"], ["", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.set_args": [[31, 35], ["openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.init": [[36, 51], ["rotate.RotatE._define_variables", "rotate.RotatE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_range", "=", "(", "self", ".", "args", ".", "gamma", "+", "self", ".", "epsilon", ")", "/", "self", ".", "args", ".", "dim", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adam'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "# assert self.args.ent_l2_norm is True", "\n", "# assert self.args.rel_l2_norm is True", "\n", "assert", "self", ".", "args", ".", "gamma", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._define_variables": [[52, 60], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "re_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'re_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "tf", ".", "float64", ")", "\n", "self", ".", "im_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'im_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "tf", ".", "float64", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ",", "tf", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._generate_scores": [[61, 73], ["tensorflow.stack", "tensorflow.norm", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "_generate_scores", "(", "self", ",", "rh", ",", "rr", ",", "rt", ",", "ih", ",", "ir", ",", "it", ",", "pos", "=", "True", ")", ":", "\n", "        ", "re_score", "=", "rh", "*", "rr", "-", "ih", "*", "ir", "-", "rt", "\n", "im_score", "=", "rh", "*", "ir", "+", "ih", "*", "rr", "-", "it", "\n", "# print(\"im_score\", im_score.shape)", "\n", "scores", "=", "tf", ".", "stack", "(", "[", "re_score", ",", "im_score", "]", ",", "axis", "=", "0", ")", "\n", "# print(\"scores 1\", scores.shape)", "\n", "scores", "=", "tf", ".", "norm", "(", "scores", ",", "axis", "=", "0", ")", "\n", "# print(\"scores 2\", scores.shape)", "\n", "scores", "=", "tf", ".", "reduce_sum", "(", "scores", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"scores 3\", scores.shape)", "\n", "scores", "=", "self", ".", "args", ".", "gamma", "-", "scores", "\n", "return", "scores", "if", "pos", "else", "-", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._generate_loss": [[74, 83], ["tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_generate_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "sigmoid", "(", "pos_scores", ")", "\n", "neg_scores", "=", "tf", ".", "sigmoid", "(", "neg_scores", ")", "\n", "pos_scores", "=", "tf", ".", "log", "(", "pos_scores", ")", "\n", "neg_scores", "=", "tf", ".", "log", "(", "neg_scores", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_scores", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "neg_scores", ")", "\n", "loss", "=", "-", "pos_loss", "-", "neg_loss", "/", "self", ".", "args", ".", "neg_triple_num", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.lookup_all": [[84, 94], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.cos", "tensorflow.sin"], "methods", ["None"], ["", "def", "lookup_all", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "re_head", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "h", ")", "\n", "re_tail", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "t", ")", "\n", "im_head", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "h", ")", "\n", "im_tail", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "t", ")", "\n", "relation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "r", ")", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", "/", "self", ".", "pi", ")", "\n", "re_relation", "=", "tf", ".", "cos", "(", "phase_relation", ")", "\n", "im_relation", "=", "tf", ".", "sin", "(", "phase_relation", ")", "\n", "return", "re_head", ",", "re_relation", ",", "re_tail", ",", "im_head", ",", "im_relation", ",", "im_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._define_embed_graph": [[95, 113], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "rotate.RotatE.lookup_all", "rotate.RotatE.lookup_all", "tensorflow.name_scope", "rotate.RotatE._generate_scores", "rotate.RotatE._generate_scores", "rotate.RotatE._generate_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", "=", "self", ".", "lookup_all", "(", "self", ".", "pos_hs", ",", "self", ".", "pos_rs", ",", "self", ".", "pos_ts", ")", "\n", "nrh", ",", "nrr", ",", "nrt", ",", "nih", ",", "nir", ",", "nit", "=", "self", ".", "lookup_all", "(", "self", ".", "neg_hs", ",", "self", ".", "neg_rs", ",", "self", ".", "neg_ts", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "pos_scores", "=", "self", ".", "_generate_scores", "(", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", ",", "pos", "=", "True", ")", "\n", "neg_scores", "=", "self", ".", "_generate_scores", "(", "nrh", ",", "nrr", ",", "nrt", ",", "nih", ",", "nir", ",", "nit", ",", "pos", "=", "False", ")", "\n", "self", ".", "triple_loss", "=", "self", ".", "_generate_loss", "(", "pos_scores", ",", "neg_scores", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "# optimizer = get_optimizer(self.args.optimizer, self.args.learning_rate)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._eval_valid_embeddings": [[121, 130], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "rotate.RotatE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE._eval_test_embeddings": [[131, 138], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "rotate.RotatE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.semantic.rotate.RotatE.save": [[139, 145], ["sklearn.preprocessing.normalize", "rotate.RotatE.rel_embeds.eval", "openea.save_embeddings", "rotate.RotatE.re_ent_embeds.eval", "rotate.RotatE.im_ent_embeds.eval", "rotate.RotatE.mapping_mat.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "re_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "self", ".", "im_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "ent_embeds", "=", "preprocessing", ".", "normalize", "(", "ent_embeds", ")", "\n", "rel_embeds", "=", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "None", ",", "mapping_mat", "=", "mapping_mat", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.attr.label2vec.load_vectors": [[10, 24], ["time.time", "read.open", "map", "print", "print", "print", "read.open.readline().split", "line.rstrip().split", "numpy.array", "len", "read.open.readline", "line.rstrip", "list", "time.time", "map"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "load_vectors", "(", "fname", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "fin", "=", "read", ".", "open", "(", "fname", ",", "'r'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "'\\n'", ",", "errors", "=", "'ignore'", ")", "\n", "n", ",", "d", "=", "map", "(", "int", ",", "fin", ".", "readline", "(", ")", ".", "split", "(", ")", ")", "\n", "print", "(", "\"num of word vectors:\"", ",", "n", ")", "\n", "print", "(", "\"dim:\"", ",", "d", ")", "\n", "data", "=", "{", "}", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "tokens", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "data", "[", "tokens", "[", "0", "]", "]", "=", "np", ".", "array", "(", "[", "list", "(", "map", "(", "float", ",", "tokens", "[", "1", ":", "]", ")", ")", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "# print(data[tokens[0]])", "\n", "", "assert", "len", "(", "data", ")", "==", "n", "\n", "print", "(", "\"load word vectors cost: {:.3f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE.__init__": [[19, 21], ["openea.models.trans.transe.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE.init": [[22, 35], ["proje.ProjE._define_variables", "proje.ProjE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'xavier'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adam'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "dnn_neg_nums", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE._define_variables": [[36, 45], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'prob'", "+", "'parameters'", ")", ":", "\n", "            ", "self", ".", "entity_w", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'entity_w'", ",", "'xavier'", ",", "False", ")", "\n", "self", ".", "entity_b", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "]", ",", "'entity_b'", ",", "'xavier'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE._define_embed_graph": [[46, 75], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "tensorflow.contrib.layers.batch_norm", "tensorflow.contrib.layers.batch_norm", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.batch_norm", "tensorflow.name_scope", "tensorflow.nn.nce_loss", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'input_bn'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bn_phs", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "phs", ",", "scope", "=", "'bn'", ")", "\n", "bn_prs", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "prs", ",", "reuse", "=", "True", ",", "scope", "=", "'bn'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'mlp'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "out_prs", "=", "bn_phs", "*", "tf", ".", "get_variable", "(", "'mlp_w'", ",", "[", "self", ".", "args", ".", "dim", "]", ")", "+", "bn_prs", "*", "tf", ".", "get_variable", "(", "'mlp_w'", ",", "[", "self", ".", "args", ".", "dim", "]", ")", "+", "tf", ".", "get_variable", "(", "'mlp_bias'", ",", "[", "self", ".", "args", ".", "dim", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'output_bn'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "bn_out_prs", "=", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "out_prs", ",", "scope", "=", "'bn'", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "triple_loss", "=", "tf", ".", "nn", ".", "nce_loss", "(", "\n", "weights", "=", "self", ".", "entity_w", ",", "\n", "biases", "=", "self", ".", "entity_b", ",", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos_ts", ",", "[", "-", "1", ",", "1", "]", ")", ",", "\n", "inputs", "=", "bn_out_prs", ",", "\n", "num_sampled", "=", "self", ".", "args", ".", "dnn_neg_nums", ",", "\n", "num_classes", "=", "self", ".", "kgs", ".", "entities_num", ",", "\n", "partition_strategy", "=", "'div'", ")", "\n", "self", ".", "triple_loss", "=", "tf", ".", "reduce_sum", "(", "triple_loss", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE.launch_triple_training_1epo": [[76, 97], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "proje.ProjE.session.run", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_pos_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "batch_queue", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.proje.ProjE.run": [[98, 113], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "proje.ProjE.launch_training_1epo", "range", "proje.ProjE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.conve.ConvE.__init__": [[23, 27], ["openea.models.neural.proje.ProjE.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "(", "3", ",", "3", ")", "\n", "print", "(", "\"kernel_size\"", ",", "self", ".", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.conve.ConvE.init": [[28, 41], ["conve.ConvE._define_variables", "conve.ConvE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'xavier'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adam'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "dnn_neg_nums", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.conve.ConvE._define_embed_graph": [[42, 80], ["tensorflow.concat", "tensorflow.layers.batch_normalization", "tensorflow.nn.dropout", "tensorflow.layers.batch_normalization", "tensorflow.nn.relu", "tensorflow.nn.dropout", "tensorflow.reshape", "tensorflow.contrib.layers.fully_connected", "tensorflow.layers.batch_normalization", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "conve.dim_factorization", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.layers.conv2d", "tensorflow.name_scope", "tensorflow.nn.nce_loss", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.neural.conve.dim_factorization", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "x", ",", "y", "=", "dim_factorization", "(", "self", ".", "args", ".", "dim", ")", "\n", "phs", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", ",", "[", "-", "1", ",", "1", ",", "x", ",", "y", "]", ")", "\n", "prs", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", ",", "[", "-", "1", ",", "1", ",", "x", ",", "y", "]", ")", "\n", "\n", "", "stacked_inputs", "=", "tf", ".", "concat", "(", "[", "phs", ",", "prs", "]", ",", "2", ")", "\n", "stacked_inputs", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "stacked_inputs", ")", "\n", "stacked_inputs", "=", "tf", ".", "nn", ".", "dropout", "(", "stacked_inputs", ",", "self", ".", "args", ".", "output_keep_prob", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'cnn'", ")", ":", "\n", "            ", "ocnn", "=", "tf", ".", "layers", ".", "conv2d", "(", "stacked_inputs", ",", "self", ".", "args", ".", "filter_num", ",", "self", ".", "kernel_size", ",", "\n", "padding", "=", "'same'", ",", "use_bias", "=", "True", ",", "data_format", "=", "'channels_first'", ")", "\n", "\n", "", "ocnn", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "ocnn", ",", "axis", "=", "1", ")", "\n", "ocnn", "=", "tf", ".", "nn", ".", "relu", "(", "ocnn", ")", "\n", "ocnn", "=", "tf", ".", "nn", ".", "dropout", "(", "ocnn", ",", "self", ".", "args", ".", "output_keep_prob", ")", "\n", "ocnn", "=", "tf", ".", "reshape", "(", "ocnn", ",", "[", "-", "1", ",", "self", ".", "args", ".", "filter_num", "*", "self", ".", "args", ".", "dim", "*", "2", "]", ")", "\n", "ocnn", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "ocnn", ",", "self", ".", "args", ".", "dim", ")", "\n", "ocnn", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "ocnn", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "triple_loss", "=", "tf", ".", "nn", ".", "nce_loss", "(", "\n", "weights", "=", "self", ".", "entity_w", ",", "\n", "biases", "=", "self", ".", "entity_b", ",", "\n", "labels", "=", "tf", ".", "reshape", "(", "self", ".", "pos_ts", ",", "[", "-", "1", ",", "1", "]", ")", ",", "\n", "inputs", "=", "ocnn", ",", "\n", "num_sampled", "=", "self", ".", "args", ".", "dnn_neg_nums", ",", "\n", "num_classes", "=", "self", ".", "kgs", ".", "entities_num", ",", "\n", "partition_strategy", "=", "'div'", ",", "\n", ")", "\n", "\n", "self", ".", "triple_loss", "=", "tf", ".", "reduce_sum", "(", "triple_loss", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.neural.conve.dim_factorization": [[10, 19], ["print", "int", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "dim_factorization", "(", "d", ")", ":", "\n", "    ", "half", "=", "int", "(", "math", ".", "sqrt", "(", "d", ")", ")", "+", "1", "\n", "while", "d", "%", "half", ">", "0", ":", "\n", "        ", "half", "-=", "1", "\n", "", "x", "=", "half", "\n", "y", "=", "d", "//", "half", "\n", "assert", "x", "*", "y", "==", "d", "\n", "print", "(", "\"dim factorization\"", ",", "x", ",", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transd.TransD.__init__": [[11, 13], ["openea.models.trans.transe.TransE.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transd.TransD._define_variables": [[14, 24], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'ent_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'rel_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "self", ".", "ent_transfer", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'ent_transfer'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_transfer", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'rel_transfer'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transd.TransD._define_embed_graph": [[25, 55], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "transd.TransD._calc", "transd.TransD._calc", "transd.TransD._calc", "transd.TransD._calc", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phe", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "pte", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pht", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_transfer", ",", "self", ".", "pos_hs", ")", "\n", "ptt", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_transfer", ",", "self", ".", "pos_ts", ")", "\n", "prt", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_transfer", ",", "self", ".", "pos_rs", ")", "\n", "nhe", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nte", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "nre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nht", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_transfer", ",", "self", ".", "neg_hs", ")", "\n", "ntt", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_transfer", ",", "self", ".", "neg_ts", ")", "\n", "nrt", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_transfer", ",", "self", ".", "neg_rs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'projection'", ")", ":", "\n", "            ", "phe", "=", "self", ".", "_calc", "(", "phe", ",", "pht", ",", "prt", ")", "\n", "pte", "=", "self", ".", "_calc", "(", "pte", ",", "ptt", ",", "prt", ")", "\n", "nhe", "=", "self", ".", "_calc", "(", "nhe", ",", "nht", ",", "nrt", ")", "\n", "nte", "=", "self", ".", "_calc", "(", "nte", ",", "ntt", ",", "nrt", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phe", ",", "pre", ",", "pte", ",", "nhe", ",", "nre", ",", "nte", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transd.TransD._calc": [[56, 58], ["tensorflow.nn.l2_normalize", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "_calc", "(", "self", ",", "e", ",", "t", ",", "r", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "e", "+", "tf", ".", "reduce_sum", "(", "e", "*", "t", ",", "1", ",", "keep_dims", "=", "True", ")", "*", "r", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transe.TransE.__init__": [[11, 13], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transe.TransE.init": [[14, 30], ["transe.TransE._define_variables", "transe.TransE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'margin-based'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transe.TransE._define_embed_graph": [[31, 50], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transr.TransR.__init__": [[11, 13], ["openea.models.trans.transe.TransE.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transr.TransR._define_variables": [[14, 22], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'ent_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'rel_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "self", ".", "rel_matrix", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "*", "self", ".", "args", ".", "dim", "]", ",", "\n", "'rel_matrix'", ",", "self", ".", "args", ".", "init", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transr.TransR._define_embed_graph": [[23, 54], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "1", "]", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "1", "]", ")", "\n", "nhs", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "1", "]", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "1", "]", ")", "\n", "p_matrix", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_matrix", ",", "self", ".", "pos_rs", ")", ",", "\n", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "n_matrix", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_matrix", ",", "self", ".", "neg_rs", ")", ",", "\n", "[", "-", "1", ",", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "phs", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "p_matrix", ",", "phs", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "pts", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "p_matrix", ",", "pts", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "phs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "phs", ",", "1", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "pts", ",", "1", ")", "\n", "nhs", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "n_matrix", ",", "nhs", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "nts", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "n_matrix", ",", "nts", ")", ",", "[", "-", "1", ",", "self", ".", "args", ".", "dim", "]", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "nhs", ",", "1", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "nts", ",", "1", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transh.TransH.__init__": [[11, 13], ["openea.models.trans.transe.TransE.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transh.TransH._define_variables": [[14, 22], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'ent_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'rel_embeds'", ",", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "self", ".", "normal_vector", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'normal_vector'", ",", "self", ".", "args", ".", "init", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transh.TransH._define_embed_graph": [[23, 47], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "transh.TransH._calc", "transh.TransH._calc", "transh.TransH._calc", "transh.TransH._calc", "tensorflow.name_scope", "openea.modules.base.losses.margin_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.margin_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "pos_norm_vec", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "normal_vector", ",", "self", ".", "pos_rs", ")", "\n", "neg_norm_vec", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "normal_vector", ",", "self", ".", "neg_rs", ")", "\n", "phs", "=", "self", ".", "_calc", "(", "phs", ",", "pos_norm_vec", ")", "\n", "pts", "=", "self", ".", "_calc", "(", "pts", ",", "pos_norm_vec", ")", "\n", "nhs", "=", "self", ".", "_calc", "(", "nhs", ",", "neg_norm_vec", ")", "\n", "nts", "=", "self", ".", "_calc", "(", "nts", ",", "neg_norm_vec", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "margin_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ".", "margin", ",", "self", ".", "args", ".", "loss_norm", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.trans.transh.TransH._calc": [[48, 52], ["tensorflow.nn.l2_normalize", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_calc", "(", "e", ",", "n", ")", ":", "\n", "        ", "norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "n", ",", "1", ")", "\n", "return", "e", "-", "tf", ".", "reduce_sum", "(", "e", "*", "norm", ",", "1", ",", "keep_dims", "=", "True", ")", "*", "norm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.__init__": [[120, 124], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ref_entities1", ",", "self", ".", "ref_entities2", "=", "None", ",", "None", "\n", "self", ".", "paths1", ",", "self", ".", "paths2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.init": [[125, 150], ["iptranse.generate_2steps_path", "iptranse.generate_2steps_path", "iptranse.IPTransE._define_variables", "iptranse.IPTransE._define_embed_graph", "iptranse.IPTransE._define_alignment_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_2steps_path", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_2steps_path", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_alignment_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "ref_entities1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_entities2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "self", ".", "paths1", "=", "generate_2steps_path", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "self", ".", "paths2", "=", "generate_2steps_path", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_alignment_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "margin", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", "==", "1", "\n", "assert", "self", ".", "args", ".", "sim_th", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._define_variables": [[151, 157], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_transe_loss": [[158, 166], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.pow", "tensorflow.pow", "tensorflow.abs", "tensorflow.abs"], "methods", ["None"], ["", "", "def", "_generate_transe_loss", "(", "self", ",", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "loss_norm", "==", "\"L2\"", ":", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "phs", "+", "prs", "-", "pts", ",", "2", ")", ",", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "nhs", "+", "nrs", "-", "nts", ",", "2", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "phs", "+", "prs", "-", "pts", ")", ",", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "nhs", "+", "nrs", "-", "nts", ")", ",", "1", ")", "\n", "", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "pos_score", "+", "self", ".", "args", ".", "margin", "-", "neg_score", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_transe_alignment_loss": [[167, 171], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.pow", "tensorflow.maximum"], "methods", ["None"], ["", "def", "_generate_transe_alignment_loss", "(", "self", ",", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "ws", ")", ":", "\n", "        ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "phs", "+", "prs", "-", "pts", ",", "2", ")", ",", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "nhs", "+", "nrs", "-", "nts", ",", "2", ")", ",", "1", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "ws", "*", "tf", ".", "maximum", "(", "pos_score", "+", "self", ".", "args", ".", "margin", "-", "neg_score", ",", "0", ")", ")", "\n", "# return tf.reduce_sum(ws * pos_score)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_path_loss": [[173, 178], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.pow", "tensorflow.nn.relu"], "methods", ["None"], ["", "def", "_generate_path_loss", "(", "self", ",", "prx", ",", "pry", ",", "pr", ",", "nrx", ",", "nry", ",", "nr", ",", "weight", ")", ":", "\n", "        ", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "prx", "+", "pry", "-", "pr", ",", "2", ")", ",", "1", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "nrx", "+", "nry", "-", "nr", ",", "2", ")", ",", "1", ")", "\n", "weight", "=", "tf", ".", "cast", "(", "1", "/", "weight", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "weight", "*", "tf", ".", "nn", ".", "relu", "(", "pos_loss", "+", "self", ".", "args", ".", "margin", "-", "neg_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_loss": [[179, 182], ["iptranse.IPTransE._generate_transe_loss", "iptranse.IPTransE._generate_path_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_transe_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_path_loss"], ["", "def", "_generate_loss", "(", "self", ",", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "prx", ",", "pry", ",", "pr", ",", "nrx", ",", "nry", ",", "nr", ",", "ws", ")", ":", "\n", "        ", "return", "self", ".", "_generate_transe_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ")", "+", "self", ".", "args", ".", "path_parm", "*", "self", ".", "_generate_path_loss", "(", "prx", ",", "pry", ",", "pr", ",", "nrx", ",", "nry", ",", "nr", ",", "ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._define_embed_graph": [[183, 216], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "iptranse.IPTransE._generate_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ry", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ry", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "path_weight", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "prx", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rx", ")", "\n", "pry", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_ry", ")", "\n", "pr", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_r", ")", "\n", "\n", "nrx", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rx", ")", "\n", "nry", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_ry", ")", "\n", "nr", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_r", ")", "\n", "self", ".", "train_loss", "=", "self", ".", "_generate_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "prx", ",", "pry", ",", "pr", ",", "nrx", ",", "nry", ",", "nr", ",", "\n", "self", ".", "path_weight", ")", "\n", "self", ".", "optimizer", "=", "generate_optimizer", "(", "self", ".", "train_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._define_alignment_graph": [[217, 236], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "iptranse.IPTransE._generate_transe_alignment_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._generate_transe_alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_alignment_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_pr", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_pt", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_nh", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_nr", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_nt", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "tr_weight", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "ph_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_ph", ")", "\n", "pr_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "new_pr", ")", "\n", "pt_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_pt", ")", "\n", "nh_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_nh", ")", "\n", "nr_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "new_nr", ")", "\n", "nt_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_nt", ")", "\n", "self", ".", "alignment_loss", "=", "self", ".", "_generate_transe_alignment_loss", "(", "ph_embed", ",", "pr_embed", ",", "pt_embed", ",", "nh_embed", ",", "nr_embed", ",", "\n", "nt_embed", ",", "self", ".", "tr_weight", ")", "\n", "self", ".", "alignment_optimizer", "=", "generate_optimizer", "(", "self", ".", "alignment_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._ref_sim_mat": [[237, 242], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "numpy.matmul", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_ref_sim_mat", "(", "self", ")", ":", "\n", "        ", "ref1_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "ref2_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "ref1_embeddings", ",", "ref2_embeddings", ".", "T", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.launch_ptranse_training_1epo": [[243, 273], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "iptranse.IPTransE.session.run", "len", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_ptranse_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "path_batch_size", "=", "(", "len", "(", "self", ".", "paths1", ")", "+", "len", "(", "self", ".", "paths2", ")", ")", "//", "triple_steps", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "generate_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ",", "self", ".", "paths1", ",", "self", ".", "paths2", ",", "self", ".", "args", ".", "batch_size", ",", "path_batch_size", ",", "\n", "steps_task", ",", "self", ".", "args", ".", "neg_triple_num", ",", "batch_queue", ")", ")", ".", "start", "(", ")", "\n", "", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "train_loss", ",", "\"train_op\"", ":", "self", ".", "optimizer", "}", "\n", "epoch_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "pos_triples", ",", "neg_triples", ",", "pos_paths", ",", "neg_paths", "=", "batch_queue", ".", "get", "(", ")", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "pos_triples", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "pos_triples", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "pos_triples", "]", ",", "\n", "self", ".", "neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "neg_triples", "]", ",", "\n", "self", ".", "neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "neg_triples", "]", ",", "\n", "self", ".", "neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "neg_triples", "]", ",", "\n", "self", ".", "pos_rx", ":", "[", "x", "[", "0", "]", "for", "x", "in", "pos_paths", "]", ",", "\n", "self", ".", "pos_ry", ":", "[", "x", "[", "1", "]", "for", "x", "in", "pos_paths", "]", ",", "\n", "self", ".", "pos_r", ":", "[", "x", "[", "2", "]", "for", "x", "in", "pos_paths", "]", ",", "\n", "self", ".", "neg_rx", ":", "[", "x", "[", "0", "]", "for", "x", "in", "neg_paths", "]", ",", "\n", "self", ".", "neg_ry", ":", "[", "x", "[", "1", "]", "for", "x", "in", "neg_paths", "]", ",", "\n", "self", ".", "neg_r", ":", "[", "x", "[", "2", "]", "for", "x", "in", "neg_paths", "]", ",", "\n", "self", ".", "path_weight", ":", "[", "x", "[", "3", "]", "for", "x", "in", "pos_paths", "]", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "epoch_loss", "+=", "vals", "[", "\"loss\"", "]", "\n", "", "epoch_loss", "/=", "self", ".", "args", ".", "batch_size", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.launch_alignment_training_1epo": [[274, 304], ["time.time", "iptranse.IPTransE._ref_sim_mat", "openea.modules.bootstrapping.alignment_finder.find_potential_alignment_greedily", "iptranse.generate_triples_of_latent_ents", "math.ceil", "range", "len", "print", "iptranse.generate_triple_batch", "iptranse.IPTransE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE._ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_potential_alignment_greedily", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_triples_of_latent_ents", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_triple_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_alignment_training_1epo", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "t1", "=", "time", ".", "time", "(", ")", "\n", "sim_mat", "=", "self", ".", "_ref_sim_mat", "(", ")", "\n", "pairs", "=", "find_potential_alignment_greedily", "(", "sim_mat", ",", "self", ".", "args", ".", "sim_th", ")", "\n", "if", "pairs", "is", "None", "or", "len", "(", "pairs", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "new_ent1", "=", "[", "self", ".", "ref_entities1", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "pairs", "]", "\n", "new_ent2", "=", "[", "self", ".", "ref_entities2", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "pairs", "]", "\n", "tr_ws", "=", "[", "sim_mat", "[", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "]", "for", "pair", "in", "pairs", "]", "\n", "newly_triples", "=", "generate_triples_of_latent_ents", "(", "self", ".", "kgs", ",", "new_ent1", ",", "new_ent2", ",", "tr_ws", ")", "\n", "steps", "=", "math", ".", "ceil", "(", "(", "(", "len", "(", "newly_triples", ")", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "alignment_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "            ", "newly_pos_batch", ",", "newly_neg_batch", "=", "generate_triple_batch", "(", "newly_triples", ",", "self", ".", "args", ".", "batch_size", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "+", "\n", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "alignment_fetches", "=", "{", "\"loss\"", ":", "self", ".", "alignment_loss", ",", "\"train_op\"", ":", "self", ".", "alignment_optimizer", "}", "\n", "alignment_feed_dict", "=", "{", "self", ".", "new_ph", ":", "[", "tr", "[", "0", "]", "for", "tr", "in", "newly_pos_batch", "]", ",", "\n", "self", ".", "new_pr", ":", "[", "tr", "[", "1", "]", "for", "tr", "in", "newly_pos_batch", "]", ",", "\n", "self", ".", "new_pt", ":", "[", "tr", "[", "2", "]", "for", "tr", "in", "newly_pos_batch", "]", ",", "\n", "self", ".", "new_nh", ":", "[", "tr", "[", "0", "]", "for", "tr", "in", "newly_neg_batch", "]", ",", "\n", "self", ".", "new_nr", ":", "[", "tr", "[", "1", "]", "for", "tr", "in", "newly_neg_batch", "]", ",", "\n", "self", ".", "new_nt", ":", "[", "tr", "[", "2", "]", "for", "tr", "in", "newly_neg_batch", "]", ",", "\n", "self", ".", "tr_weight", ":", "[", "tr", "[", "3", "]", "for", "tr", "in", "newly_pos_batch", "]", "}", "\n", "alignment_vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "alignment_fetches", ",", "feed_dict", "=", "alignment_feed_dict", ")", "\n", "alignment_loss", "+=", "alignment_vals", "[", "\"loss\"", "]", "\n", "", "alignment_loss", "/=", "len", "(", "newly_triples", ")", "\n", "print", "(", "'epoch {}, alignment loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "alignment_loss", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.run": [[305, 322], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "iptranse.IPTransE.launch_ptranse_training_1epo", "range", "iptranse.IPTransE.valid", "openea.modules.finding.evaluation.early_stop", "iptranse.IPTransE.launch_alignment_training_1epo", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.launch_ptranse_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.IPTransE.launch_alignment_training_1epo"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", ")", ":", "\n", "            ", "self", ".", "launch_ptranse_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ")", "\n", "if", "epoch", ">=", "self", ".", "args", ".", "start_valid", "and", "epoch", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "epoch", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "if", "epoch", "%", "self", ".", "args", ".", "bp_freq", "==", "0", ":", "\n", "                ", "self", ".", "launch_alignment_training_1epo", "(", "epoch", ")", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_neg_paths": [[21, 27], ["list", "list.append", "random.sample"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample"], ["def", "generate_neg_paths", "(", "pos_paths", ",", "rel_list", ")", ":", "\n", "    ", "neg_paths", "=", "list", "(", ")", "\n", "for", "(", "r_x", ",", "r_y", ",", "r", ",", "_", ")", "in", "pos_paths", ":", "\n", "        ", "r2", "=", "random", ".", "sample", "(", "rel_list", ",", "1", ")", "[", "0", "]", "\n", "neg_paths", ".", "append", "(", "(", "r_x", ",", "r_y", ",", "r2", ")", ")", "\n", "", "return", "neg_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_newly_triples": [[29, 36], ["set", "rt_dict1.get", "hr_dict1.get", "set", "set.add", "set", "set.add"], "function", ["None"], ["", "def", "generate_newly_triples", "(", "ent1", ",", "ent2", ",", "w", ",", "rt_dict1", ",", "hr_dict1", ")", ":", "\n", "    ", "newly_triples", "=", "set", "(", ")", "\n", "for", "r", ",", "t", "in", "rt_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "        ", "newly_triples", ".", "add", "(", "(", "ent2", ",", "r", ",", "t", ",", "w", ")", ")", "\n", "", "for", "h", ",", "r", "in", "hr_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "        ", "newly_triples", ".", "add", "(", "(", "h", ",", "r", ",", "ent2", ",", "w", ")", ")", "\n", "", "return", "newly_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_triples_of_latent_ents": [[38, 46], ["set", "range", "print", "len", "len", "len", "iptranse.generate_newly_triples", "iptranse.generate_newly_triples", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples"], ["", "def", "generate_triples_of_latent_ents", "(", "kgs", ":", "KGs", ",", "ents1", ",", "ents2", ",", "tr_ws", ")", ":", "\n", "    ", "assert", "len", "(", "ents1", ")", "==", "len", "(", "ents2", ")", "\n", "newly_triples", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ents1", ")", ")", ":", "\n", "        ", "newly_triples", "|=", "generate_newly_triples", "(", "ents1", "[", "i", "]", ",", "ents2", "[", "i", "]", ",", "tr_ws", "[", "i", "]", ",", "kgs", ".", "kg1", ".", "rt_dict", ",", "kgs", ".", "kg1", ".", "hr_dict", ")", "\n", "newly_triples", "|=", "generate_newly_triples", "(", "ents2", "[", "i", "]", ",", "ents1", "[", "i", "]", ",", "tr_ws", "[", "i", "]", ",", "kgs", ".", "kg2", ".", "rt_dict", ",", "kgs", ".", "kg2", ".", "hr_dict", ")", "\n", "", "print", "(", "\"newly triples: {}\"", ".", "format", "(", "len", "(", "newly_triples", ")", ")", ")", "\n", "return", "newly_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_neg_triples_w": [[48, 59], ["list", "random.randint", "list.append", "random.sample", "random.sample"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample"], ["", "def", "generate_neg_triples_w", "(", "pos_triples", ",", "ents_list", ")", ":", "\n", "    ", "neg_triples", "=", "list", "(", ")", "\n", "for", "(", "h", ",", "r", ",", "t", ",", "w", ")", "in", "pos_triples", ":", "\n", "        ", "h2", ",", "r2", ",", "t2", "=", "h", ",", "r", ",", "t", "\n", "choice", "=", "random", ".", "randint", "(", "0", ",", "999", ")", "\n", "if", "choice", "<", "500", ":", "\n", "            ", "h2", "=", "random", ".", "sample", "(", "ents_list", ",", "1", ")", "[", "0", "]", "\n", "", "elif", "choice", ">=", "500", ":", "\n", "            ", "t2", "=", "random", ".", "sample", "(", "ents_list", ",", "1", ")", "[", "0", "]", "\n", "", "neg_triples", ".", "append", "(", "(", "h2", ",", "r2", ",", "t2", ",", "w", ")", ")", "\n", "", "return", "neg_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_triple_batch": [[61, 67], ["random.sample", "iptranse.generate_neg_triples_w", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_neg_triples_w"], ["", "def", "generate_triple_batch", "(", "triples", ",", "batch_size", ",", "ents_list", ")", ":", "\n", "    ", "if", "batch_size", ">", "len", "(", "triples", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "triples", ")", "\n", "", "pos_triples", "=", "random", ".", "sample", "(", "triples", ",", "batch_size", ")", "\n", "neg_triples", "=", "generate_neg_triples_w", "(", "pos_triples", ",", "ents_list", ")", "\n", "return", "pos_triples", ",", "neg_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_batch": [[69, 86], ["openea.generate_relation_triple_batch", "int", "random.sample", "random.sample", "iptranse.generate_neg_paths", "iptranse.generate_neg_paths", "random.sample.extend", "generate_neg_paths.extend", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_relation_triple_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_neg_paths", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_neg_paths"], ["", "def", "generate_batch", "(", "kgs", ":", "KGs", ",", "paths1", ",", "paths2", ",", "batch_size", ",", "path_batch_size", ",", "step", ",", "neg_triple_num", ")", ":", "\n", "    ", "pos_triples", ",", "neg_triples", "=", "bat", ".", "generate_relation_triple_batch", "(", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "\n", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "kgs", ".", "kg1", ".", "relation_triples_set", ",", "\n", "kgs", ".", "kg2", ".", "relation_triples_set", ",", "\n", "kgs", ".", "kg1", ".", "entities_list", ",", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "batch_size", ",", "step", ",", "\n", "None", ",", "None", ",", "neg_triple_num", ")", "\n", "num1", "=", "int", "(", "len", "(", "paths1", ")", "/", "(", "len", "(", "paths1", ")", "+", "len", "(", "paths2", ")", ")", "*", "path_batch_size", ")", "\n", "num2", "=", "path_batch_size", "-", "num1", "\n", "pos_paths1", "=", "random", ".", "sample", "(", "paths1", ",", "num1", ")", "\n", "pos_paths2", "=", "random", ".", "sample", "(", "paths2", ",", "num2", ")", "\n", "neg_paths1", "=", "generate_neg_paths", "(", "pos_paths1", ",", "kgs", ".", "kg1", ".", "relations_list", ")", "\n", "neg_paths2", "=", "generate_neg_paths", "(", "pos_paths2", ",", "kgs", ".", "kg2", ".", "relations_list", ")", "\n", "pos_paths1", ".", "extend", "(", "pos_paths2", ")", "\n", "neg_paths1", ".", "extend", "(", "neg_paths2", ")", "\n", "return", "pos_triples", ",", "neg_triples", ",", "pos_paths1", ",", "neg_paths1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_batch_queue": [[88, 93], ["iptranse.generate_batch", "out_queue.put"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_batch"], ["", "def", "generate_batch_queue", "(", "kgs", ":", "KGs", ",", "paths1", ",", "paths2", ",", "batch_size", ",", "path_batch_size", ",", "steps", ",", "neg_triple_num", ",", "out_queue", ")", ":", "\n", "    ", "for", "step", "in", "steps", ":", "\n", "        ", "pos_triples", ",", "neg_triples", ",", "pos_paths1", ",", "neg_paths1", "=", "generate_batch", "(", "kgs", ",", "paths1", ",", "paths2", ",", "batch_size", ",", "\n", "path_batch_size", ",", "step", ",", "neg_triple_num", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_triples", ",", "neg_triples", ",", "pos_paths1", ",", "neg_paths1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.iptranse.generate_2steps_path": [[95, 116], ["numpy.array", "pandas.DataFrame", "tr.join.groupby().size", "tr.join.join", "pandas.merge", "print", "pandas.merge", "print", "list", "range", "list.append", "tr.join.groupby", "float"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "generate_2steps_path", "(", "triples", ")", ":", "\n", "    ", "tr", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "2", "]", ",", "tr", "[", "1", "]", "]", "for", "tr", "in", "triples", "]", ")", "\n", "tr", "=", "pd", ".", "DataFrame", "(", "tr", ",", "columns", "=", "[", "'h'", ",", "'t'", ",", "'r'", "]", ")", "\n", "sizes", "=", "tr", ".", "groupby", "(", "[", "'h'", ",", "'r'", "]", ")", ".", "size", "(", ")", "\n", "sizes", ".", "name", "=", "'size'", "\n", "tr", "=", "tr", ".", "join", "(", "sizes", ",", "on", "=", "[", "'h'", ",", "'r'", "]", ")", "\n", "train_raw_df", "=", "tr", "[", "[", "'h'", ",", "'r'", ",", "'t'", ",", "'size'", "]", "]", "\n", "two_step_df", "=", "pd", ".", "merge", "(", "train_raw_df", ",", "train_raw_df", ",", "left_on", "=", "'t'", ",", "right_on", "=", "'h'", ")", "\n", "print", "(", "'start merge triple with path'", ")", "\n", "\n", "two_step_df", "[", "'_path_weight'", "]", "=", "two_step_df", ".", "size_x", "*", "two_step_df", ".", "size_y", "\n", "two_step_df", "=", "two_step_df", "[", "two_step_df", "[", "'_path_weight'", "]", "<", "101", "]", "\n", "two_step_df", "=", "pd", ".", "merge", "(", "two_step_df", ",", "train_raw_df", ",", "left_on", "=", "[", "'h_x'", ",", "'t_y'", "]", ",", "right_on", "=", "[", "'h'", ",", "'t'", "]", ",", "copy", "=", "False", ",", "\n", "sort", "=", "False", ")", "\n", "# print(two_step_df[['r_x', 'r_y', 'r', '_path_weight']])", "\n", "path_mat", "=", "two_step_df", "[", "[", "'r_x'", ",", "'r_y'", ",", "'r'", ",", "'_path_weight'", "]", "]", ".", "values", "\n", "print", "(", "\"num of path:\"", ",", "path_mat", ".", "shape", "[", "0", "]", ")", "\n", "path_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "path_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "path_list", ".", "append", "(", "(", "path_mat", "[", "i", "]", "[", "0", "]", ",", "path_mat", "[", "i", "]", "[", "1", "]", ",", "path_mat", "[", "i", "]", "[", "2", "]", ",", "float", "(", "path_mat", "[", "i", "]", "[", "3", "]", ")", ")", ")", "\n", "", "return", "path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.__init__": [[164, 184], ["tensorflow.keras.activations.get", "numpy.array"], "methods", ["None"], ["", "class", "Layer", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "kg", ",", "embedding", ")", ":", "\n", "        ", "self", ".", "dim", "=", "args", ".", "dim", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "act_func", "=", "tf", ".", "keras", ".", "activations", ".", "get", "(", "\"relu\"", ")", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "ILL", "=", "np", ".", "array", "(", "kg", ".", "train_links", ")", "\n", "self", ".", "k", "=", "args", ".", "neg_triple_num", "\n", "self", ".", "alpha", "=", "args", ".", "alpha", "\n", "self", ".", "beta", "=", "args", ".", "beta", "\n", "self", ".", "triple_list", "=", "kg", ".", "kg1", ".", "relation_triples_list", "+", "kg", ".", "kg2", ".", "relation_triples_list", "\n", "self", ".", "rel_num", "=", "kg", ".", "relations_num", "\n", "self", ".", "ent_num", "=", "kg", ".", "entities_num", "\n", "self", ".", "head", "=", "None", "\n", "self", ".", "tail", "=", "None", "\n", "self", ".", "head_r", "=", "None", "\n", "self", ".", "tail_r", "=", "None", "\n", "self", ".", "r_mat", "=", "None", "\n", "self", ".", "M", "=", "None", "\n", "self", ".", "M_arr", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_diag_layer": [[185, 193], ["tensorflow.nn.dropout", "init", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply", "rdgcn.Layer.act_func"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init"], ["self", ".", "pretrianed_embedding", "=", "embedding", "\n", "\n", "", "def", "add_diag_layer", "(", "self", ",", "inlayer", ",", "init", "=", "ones", ")", ":", "\n", "        ", "inlayer", "=", "tf", ".", "nn", ".", "dropout", "(", "inlayer", ",", "1", "-", "self", ".", "dropout", ")", "\n", "w0", "=", "init", "(", "[", "1", ",", "self", ".", "dim", "]", ")", "\n", "tosum", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "M", ",", "tf", ".", "multiply", "(", "inlayer", ",", "w0", ")", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "tosum", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_full_layer": [[194, 202], ["tensorflow.nn.dropout", "init", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "rdgcn.Layer.act_func"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init"], ["            ", "return", "self", ".", "act_func", "(", "tosum", ")", "\n", "\n", "", "", "def", "add_full_layer", "(", "self", ",", "inlayer", ",", "init", "=", "glorot", ")", ":", "\n", "        ", "inlayer", "=", "tf", ".", "nn", ".", "dropout", "(", "inlayer", ",", "1", "-", "self", ".", "dropout", ")", "\n", "w0", "=", "init", "(", "[", "self", ".", "dim", ",", "self", ".", "dim", "]", ")", "\n", "tosum", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "M", ",", "tf", ".", "matmul", "(", "inlayer", ",", "w0", ")", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "tosum", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_sparse_att_layer": [[203, 217], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.layers.conv1d", "tensorflow.nn.embedding_lookup", "rdgcn.Layer.act_func", "tensorflow.expand_dims", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["            ", "return", "self", ".", "act_func", "(", "tosum", ")", "\n", "\n", "", "", "def", "add_sparse_att_layer", "(", "self", ",", "inlayer", ",", "dual_layer", ")", ":", "\n", "        ", "dual_transform", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "\n", "tf", ".", "expand_dims", "(", "dual_layer", ",", "0", ")", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "dual_transform", ",", "self", ".", "r_mat", ".", "values", ")", ",", "[", "-", "1", "]", ")", "\n", "lrelu", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "self", ".", "r_mat", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", ",", "\n", "dense_shape", "=", "self", ".", "r_mat", ".", "dense_shape", ")", "\n", "coefs", "=", "tf", ".", "sparse_softmax", "(", "lrelu", ")", "\n", "vals", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_dual_att_layer": [[218, 233], ["tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.multiply", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.transpose", "rdgcn.Layer.act_func", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n", "", "", "def", "add_dual_att_layer", "(", "self", ",", "inlayer", ",", "inlayer2", ",", "adj", ")", ":", "\n", "        ", "in_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "tf", ".", "expand_dims", "(", "inlayer2", ",", "0", ")", ",", "self", ".", "dim", ",", "1", ")", "\n", "f_1", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ")", "\n", "adj_tensor", "=", "tf", ".", "constant", "(", "adj", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "bias_mat", "=", "-", "1e9", "*", "(", "1.0", "-", "(", "adj", ">", "0", ")", ")", "\n", "logits", "=", "tf", ".", "multiply", "(", "adj_tensor", ",", "logits", ")", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "\n", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_self_att_layer": [[234, 250], ["tensorflow.layers.conv1d", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.constant", "tensorflow.multiply", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.transpose", "rdgcn.Layer.act_func", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n", "", "", "def", "add_self_att_layer", "(", "self", ",", "inlayer", ",", "adj", ")", ":", "\n", "        ", "in_fts", "=", "tf", ".", "layers", ".", "conv1d", "(", "tf", ".", "expand_dims", "(", "\n", "inlayer", ",", "0", ")", ",", "self", ".", "dim", ",", "1", ",", "use_bias", "=", "False", ")", "\n", "f_1", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "f_2", "=", "tf", ".", "reshape", "(", "tf", ".", "layers", ".", "conv1d", "(", "in_fts", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "logits", "=", "f_1", "+", "tf", ".", "transpose", "(", "f_2", ")", "\n", "adj_tensor", "=", "tf", ".", "constant", "(", "adj", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "logits", "=", "tf", ".", "multiply", "(", "adj_tensor", ",", "logits", ")", "\n", "bias_mat", "=", "-", "1e9", "*", "(", "1.0", "-", "(", "adj", ">", "0", ")", ")", "\n", "coefs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "nn", ".", "leaky_relu", "(", "logits", ")", "+", "bias_mat", ")", "\n", "\n", "vals", "=", "tf", ".", "matmul", "(", "coefs", ",", "inlayer", ")", "\n", "if", "self", ".", "act_func", "is", "None", ":", "\n", "            ", "return", "vals", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.highway": [[251, 258], ["openea.approaches.gcn_align.glorot", "openea.approaches.gcn_align.zeros", "tensorflow.nn.sigmoid", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["            ", "return", "self", ".", "act_func", "(", "vals", ")", "\n", "\n", "", "", "def", "highway", "(", "self", ",", "layer1", ",", "layer2", ")", ":", "\n", "        ", "kernel_gate", "=", "glorot", "(", "[", "self", ".", "dim", ",", "self", ".", "dim", "]", ")", "\n", "bias_gate", "=", "zeros", "(", "[", "self", ".", "dim", "]", ")", "\n", "transform_gate", "=", "tf", ".", "matmul", "(", "layer1", ",", "kernel_gate", ")", "+", "bias_gate", "\n", "transform_gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "transform_gate", ")", "\n", "carry_gate", "=", "1.0", "-", "transform_gate", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.compute_r": [[259, 268], ["tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.constant", "tensorflow.constant", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["return", "transform_gate", "*", "layer2", "+", "carry_gate", "*", "layer1", "\n", "\n", "", "def", "compute_r", "(", "self", ",", "inlayer", ")", ":", "\n", "        ", "head_l", "=", "tf", ".", "transpose", "(", "tf", ".", "constant", "(", "self", ".", "head_r", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "tail_l", "=", "tf", ".", "transpose", "(", "tf", ".", "constant", "(", "self", ".", "tail_r", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "L", "=", "tf", ".", "matmul", "(", "head_l", ",", "inlayer", ")", "/", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "head_l", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "\n", "R", "=", "tf", ".", "matmul", "(", "tail_l", ",", "inlayer", ")", "/", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_sum", "(", "tail_l", ",", "axis", "=", "-", "1", ")", ",", "-", "1", ")", "\n", "r_embeddings", "=", "tf", ".", "concat", "(", "[", "L", ",", "R", "]", ",", "axis", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_dual_input": [[269, 279], ["rdgcn.Layer.compute_r", "len", "numpy.zeros", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.compute_r", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["return", "r_embeddings", "\n", "\n", "", "def", "get_dual_input", "(", "self", ",", "inlayer", ")", ":", "\n", "        ", "dual_X", "=", "self", ".", "compute_r", "(", "inlayer", ")", "\n", "count_r", "=", "len", "(", "self", ".", "head", ")", "\n", "dual_A", "=", "np", ".", "zeros", "(", "(", "count_r", ",", "count_r", ")", ")", "\n", "for", "i", "in", "range", "(", "count_r", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "count_r", ")", ":", "\n", "                ", "a_h", "=", "len", "(", "self", ".", "head", "[", "i", "]", "&", "self", ".", "head", "[", "j", "]", ")", "/", "len", "(", "self", ".", "head", "[", "i", "]", "|", "self", ".", "head", "[", "j", "]", ")", "\n", "a_t", "=", "len", "(", "self", ".", "tail", "[", "i", "]", "&", "self", ".", "tail", "[", "j", "]", ")", "/", "len", "(", "self", ".", "tail", "[", "i", "]", "|", "self", ".", "tail", "[", "j", "]", ")", "\n", "dual_A", "[", "i", "]", "[", "j", "]", "=", "a_h", "+", "a_t", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_input_layer": [[281, 284], ["openea.approaches.gcn_align.glorot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot"], ["\n", "# ******************************get_input_layer is used to initialize embeddings**********", "\n", "", "def", "get_input_layer", "(", "self", ")", ":", "\n", "        ", "ent_embeddings", "=", "glorot", "(", "(", "self", ".", "ent_num", ",", "self", ".", "dim", ")", ",", "\"input\"", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_pretrained_input": [[288, 292], ["tensorflow.cast", "tensorflow.Variable"], "methods", ["None"], ["# return tf.nn.l2_normalize(ent_embeddings, 1)", "\n", "\n", "", "def", "get_pretrained_input", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "embedding", "=", "tf", ".", "cast", "(", "embedding", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "ent_embeddings", "=", "tf", ".", "Variable", "(", "embedding", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_loss": [[294, 317], ["len", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["# return tf.nn.l2_normalize(ent_embeddings, 1)", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "outlayer", ")", ":", "\n", "        ", "left", "=", "self", ".", "ILL", "[", ":", ",", "0", "]", "\n", "right", "=", "self", ".", "ILL", "[", ":", ",", "1", "]", "\n", "t", "=", "len", "(", "self", ".", "ILL", ")", "\n", "left_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "left", ")", "\n", "right_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "right", ")", "\n", "A", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "left_x", "-", "right_x", ")", ",", "1", ")", "\n", "neg_left", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg_left\"", ")", "\n", "neg_right", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg_right\"", ")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "self", ".", "k", "]", ")", "\n", "D", "=", "A", "+", "self", ".", "gamma", "\n", "L1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "neg_left", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg2_left\"", ")", "\n", "neg_right", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "t", "*", "self", ".", "k", "]", ",", "\"neg2_right\"", ")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "self", ".", "k", "]", ")", "\n", "L2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.build": [[318, 342], ["tensorflow.reset_default_graph", "rdgcn.Layer.get_pretrained_input", "rdgcn.get_sparse_tensor", "rdgcn.rfunc", "rdgcn.Layer.get_dual_input", "rdgcn.Layer.add_self_att_layer", "rdgcn.Layer.add_sparse_att_layer", "rdgcn.Layer.get_dual_input", "rdgcn.Layer.add_dual_att_layer", "rdgcn.Layer.add_sparse_att_layer", "rdgcn.Layer.add_diag_layer", "rdgcn.Layer.highway", "rdgcn.Layer.add_diag_layer", "rdgcn.Layer.highway", "rdgcn.Layer.get_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_pretrained_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_sparse_tensor", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.rfunc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_dual_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_self_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_sparse_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_dual_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_dual_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_sparse_att_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_diag_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.highway", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.add_diag_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.highway", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.Layer.get_loss"], ["return", "(", "tf", ".", "reduce_sum", "(", "L1", ")", "+", "tf", ".", "reduce_sum", "(", "L2", ")", ")", "/", "(", "2.0", "*", "self", ".", "k", "*", "t", ")", "\n", "\n", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "tf", ".", "reset_default_graph", "(", ")", "\n", "primal_X_0", "=", "self", ".", "get_input_layer", "(", ")", "\n", "self", ".", "M", ",", "self", ".", "M_arr", "=", "get_sparse_tensor", "(", "self", ".", "triple_list", ",", "self", ".", "ent_num", ")", "\n", "self", ".", "head", ",", "self", ".", "tail", ",", "self", ".", "head_r", ",", "self", ".", "tail_r", ",", "self", ".", "r_mat", "=", "rfunc", "(", "self", ".", "triple_list", ",", "self", ".", "ent_num", ",", "self", ".", "rel_num", ")", "\n", "dual_X_1", ",", "dual_A_1", "=", "self", ".", "get_dual_input", "(", "primal_X_0", ")", "\n", "dual_H_1", "=", "self", ".", "add_self_att_layer", "(", "dual_X_1", ",", "dual_A_1", ")", "\n", "primal_H_1", "=", "self", ".", "add_sparse_att_layer", "(", "primal_X_0", ",", "dual_H_1", ")", "\n", "primal_X_1", "=", "primal_X_0", "+", "self", ".", "alpha", "*", "primal_H_1", "\n", "\n", "dual_X_2", ",", "dual_A_2", "=", "self", ".", "get_dual_input", "(", "primal_X_1", ")", "\n", "dual_H_2", "=", "self", ".", "add_dual_att_layer", "(", "dual_H_1", ",", "dual_X_2", ",", "dual_A_2", ")", "\n", "primal_H_2", "=", "self", ".", "add_sparse_att_layer", "(", "primal_X_1", ",", "dual_H_2", ")", "\n", "primal_X_2", "=", "primal_X_0", "+", "self", ".", "beta", "*", "primal_H_2", "\n", "\n", "gcn_layer_1", "=", "self", ".", "add_diag_layer", "(", "primal_X_2", ")", "\n", "gcn_layer_1", "=", "self", ".", "highway", "(", "primal_X_2", ",", "gcn_layer_1", ")", "\n", "gcn_layer_2", "=", "self", ".", "add_diag_layer", "(", "gcn_layer_1", ",", ")", "\n", "output_layer", "=", "self", ".", "highway", "(", "gcn_layer_1", ",", "gcn_layer_2", ")", "\n", "loss", "=", "self", ".", "get_loss", "(", "output_layer", ")", "\n", "return", "output_layer", ",", "loss", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.__init__": [[345, 366], ["openea.models.basic_model.BasicModel.__init__", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "model_init", "=", "None", "\n", "self", ".", "sess", "=", "None", "\n", "self", ".", "feeddict", "=", "None", "\n", "self", ".", "gcn_model", "=", "None", "\n", "self", ".", "local_name_vectors", "=", "None", "\n", "self", ".", "entity_local_name_dict", "=", "None", "\n", "self", ".", "entities", "=", "None", "\n", "self", ".", "word_embed", "=", "'../../datasets/wiki-news-300d-1M.vec'", "\n", "\n", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "self", ".", "gcn_model", "=", "Layer", "(", "self", ".", "args", ",", "self", ".", "kgs", ",", "self", ".", "local_name_vectors", ")", "\n", "self", ".", "output", ",", "self", ".", "loss", "=", "self", ".", "gcn_model", ".", "build", "(", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "model_init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "model_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.init": [[367, 388], ["os.path.exists", "rdgcn.Layer", "rdgcn.RDGCN.gcn_model.build", "tensorflow.train.AdamOptimizer().minimize", "rdgcn.RDGCN._generate_semi_graph", "tensorflow.global_variables_initializer", "tensorflow.Session", "rdgcn.RDGCN.session.run", "rdgcn.RDGCN.args.training_data.split", "joblib.load", "rdgcn.RDGCN._get_desc_input", "joblib.dump", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._generate_semi_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_desc_input"], ["", "def", "_get_local_name_by_name_triple", "(", "self", ",", "name_attribute_list", "=", "None", ")", ":", "\n", "        ", "if", "name_attribute_list", "is", "None", ":", "\n", "            ", "if", "'D_Y'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'skos:prefLabel'", ",", "'http://dbpedia.org/ontology/birthName'", "}", "\n", "", "elif", "'D_W'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'http://www.wikidata.org/entity/P373'", ",", "'http://www.wikidata.org/entity/P1476'", "}", "\n", "", "else", ":", "\n", "                ", "name_attribute_list", "=", "{", "}", "\n", "\n", "", "", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_set", "|", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_set", "\n", "id_ent_dict", "=", "{", "}", "\n", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "\n", "", "name_ids", "=", "set", "(", ")", "\n", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN._generate_semi_graph": [[389, 393], ["tensorflow.placeholder", "rdgcn.RDGCN.compute_pos_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.compute_pos_loss"], ["                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.compute_pos_loss": [[394, 401], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.abs"], "methods", ["None"], ["", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "local_name_dict", "=", "{", "}", "\n", "ents", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "if", "a", "in", "name_ids", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "v", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN._get_local_name_by_name_triple": [[402, 451], ["list", "rdgcn.RDGCN.kgs.kg1.entities_id_dict.items", "rdgcn.RDGCN.kgs.kg2.entities_id_dict.items", "set", "rdgcn.RDGCN.kgs.kg1.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg2.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg1.attributes_id_dict.items", "rdgcn.RDGCN.kgs.kg2.attributes_id_dict.items", "list", "local_name_dict.items", "v.rstrip.rstrip.strip", "v.rstrip.rstrip.endswith", "list.append", "list.append", "v.rstrip.rstrip.rstrip", "set.add", "set.add", "print", "print", "[].replace", "id_ent_dict[].split"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "for", "e", "in", "ents", ":", "\n", "            ", "if", "e", "not", "in", "local_name_dict", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "id_ent_dict", "[", "e", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "", "name_triples", "=", "list", "(", ")", "\n", "for", "e", ",", "n", "in", "local_name_dict", ".", "items", "(", ")", ":", "\n", "            ", "name_triples", ".", "append", "(", "(", "e", ",", "-", "1", ",", "n", ")", ")", "\n", "", "return", "name_triples", "\n", "\n", "", "def", "_get_desc_input", "(", "self", ")", ":", "\n", "# desc graph settings", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "self", "\n", "\n", "name_triples", "=", "self", ".", "_get_local_name_by_name_triple", "(", ")", "\n", "names", "=", "pd", ".", "DataFrame", "(", "name_triples", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "str", ".", "replace", "(", "r'[{}]+'", ".", "format", "(", "string", ".", "punctuation", ")", ",", "''", ")", ".", "str", ".", "split", "(", "' '", ")", "\n", "# load word embedding", "\n", "with", "open", "(", "self", ".", "word_embed", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "w", "=", "f", ".", "readlines", "(", ")", "\n", "w", "=", "pd", ".", "Series", "(", "w", "[", "1", ":", "]", ")", "\n", "\n", "", "we", "=", "w", ".", "str", ".", "split", "(", "' '", ")", "\n", "word", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "w_em", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "1", ":", "]", ")", "\n", "print", "(", "'concat word embeddings'", ")", "\n", "word_em", "=", "np", ".", "stack", "(", "w_em", ".", "values", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "word_em", "=", "np", ".", "append", "(", "word_em", ",", "np", ".", "zeros", "(", "[", "1", ",", "300", "]", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "'convert words to ids'", ")", "\n", "w_in_desc", "=", "[", "]", "\n", "for", "l", "in", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ":", "\n", "            ", "w_in_desc", "+=", "l", "\n", "", "w_in_desc", "=", "pd", ".", "Series", "(", "list", "(", "set", "(", "w_in_desc", ")", ")", ")", "\n", "un_logged_words", "=", "w_in_desc", "[", "~", "w_in_desc", ".", "isin", "(", "word", ")", "]", "\n", "un_logged_id", "=", "len", "(", "word", ")", "\n", "\n", "all_word", "=", "pd", ".", "concat", "(", "\n", "[", "pd", ".", "Series", "(", "word", ".", "index", ",", "word", ".", "values", ")", ",", "\n", "pd", ".", "Series", "(", "[", "un_logged_id", ",", "]", "*", "len", "(", "un_logged_words", ")", ",", "index", "=", "un_logged_words", ")", "]", ")", "\n", "\n", "def", "lookup_and_padding", "(", "x", ")", ":", "\n", "            ", "default_length", "=", "4", "\n", "ids", "=", "list", "(", "all_word", ".", "loc", "[", "x", "]", ".", "values", ")", "+", "[", "all_word", ".", "iloc", "[", "-", "1", "]", ",", "]", "*", "default_length", "\n", "return", "ids", "[", ":", "default_length", "]", "\n", "\n", "", "print", "(", "'look up desc embeddings'", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "apply", "(", "lookup_and_padding", ")", "\n", "\n", "# entity-desc-embedding dataframe", "\n", "e_desc_input", "=", "pd", ".", "DataFrame", "(", "np", ".", "repeat", "(", "[", "[", "un_logged_id", ",", "]", "*", "4", "]", ",", "model", ".", "kgs", ".", "entities_num", ",", "axis", "=", "0", ")", ",", "\n", "range", "(", "model", ".", "kgs", ".", "entities_num", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN._get_desc_input": [[452, 503], ["time.time", "rdgcn.RDGCN._get_local_name_by_name_triple", "pandas.DataFrame", "pandas.DataFrame.iloc[].str.replace().str.split", "pandas.Series.str.split", "pd.Series.str.split.apply", "pd.Series.str.split.apply", "print", "numpy.stack().astype", "numpy.append", "print", "pandas.Series", "len", "pandas.concat", "print", "pandas.DataFrame.iloc[].apply", "pandas.DataFrame", "numpy.stack", "print", "numpy.sum", "open", "f.readlines", "pandas.Series", "numpy.zeros", "list", "numpy.repeat", "range", "numpy.stack", "set", "pandas.Series", "pandas.Series", "list", "pandas.DataFrame.iloc[].str.replace", "pandas.Series.isin", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_local_name_by_name_triple", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["\n", "e_desc_input", ".", "iloc", "[", "names", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", "]", "=", "np", ".", "stack", "(", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ")", "\n", "\n", "print", "(", "'generating desc input costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "name_embeds", "=", "word_em", "[", "e_desc_input", ".", "values", "]", "\n", "name_embeds", "=", "np", ".", "sum", "(", "name_embeds", ",", "axis", "=", "1", ")", "\n", "\n", "return", "word_em", ",", "e_desc_input", ",", "name_embeds", "\n", "\n", "", "def", "trainning", "(", "self", ")", ":", "\n", "        ", "neg_num", "=", "self", ".", "args", ".", "neg_triple_num", "\n", "train_num", "=", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "train_links", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg_left", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg2_right", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "neg2_left", "=", "get_neg", "(", "train_links", "[", ":", ",", "1", "]", ",", "output", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "neg_right", "=", "get_neg", "(", "train_links", "[", ":", ",", "0", "]", ",", "output", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "self", ".", "feeddict", "=", "{", "\"neg_left:0\"", ":", "neg_left", ",", "\n", "\"neg_right:0\"", ":", "neg_right", ",", "\n", "\"neg2_left:0\"", ":", "neg2_left", ",", "\n", "\"neg2_right:0\"", ":", "neg2_right", "}", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "_", ",", "batch_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "optimizer", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "self", ".", "feeddict", ")", "\n", "print", "(", "'epoch {}, avg. relation triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "i", ",", "batch_loss", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# ********************no early stop********************************************", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid_", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "rest_12", ",", "_", ",", "_", "=", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "\n", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "embedding", ",", "None", ",", "None", ",", "mapping_mat", "=", "None", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.eval_ref_sim_mat": [[504, 512], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "rdgcn.RDGCN.session.run"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["\n", "", "def", "valid_", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embedding", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ")", "\n", "if", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hits1_12", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.launch_rdgcn_training_k_repo": [[513, 531], ["range", "time.time", "numpy.array", "rdgcn.RDGCN.session.run", "print", "rdgcn.RDGCN.session.run", "rdgcn.get_neg", "rdgcn.get_neg", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg"], ["", "return", "mrr_12", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "trainning", "(", ")", "\n", "print", "(", "\"trainning finish\"", ")", "\n", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.trainning": [[532, 563], ["len", "numpy.array", "pos.reshape", "pos.reshape", "range", "numpy.ones", "train_links[].reshape", "numpy.ones", "train_links[].reshape", "time.time", "rdgcn.RDGCN.session.run", "print", "rdgcn.RDGCN.session.run", "rdgcn.get_neg", "rdgcn.get_neg", "openea.modules.finding.evaluation.early_stop", "rdgcn.RDGCN.valid", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.test": [[564, 574], ["rdgcn.RDGCN.session.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.save": [[575, 578], ["rdgcn.RDGCN.session.run", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.valid": [[579, 588], ["rdgcn.RDGCN.session.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.valid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.run": [[589, 594], ["time.time", "rdgcn.RDGCN.trainning", "print", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.RDGCN.trainning", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.rfunc": [[18, 44], ["dict", "dict", "dict", "list", "list", "numpy.zeros", "numpy.zeros", "tensorflow.SparseTensor", "list.append", "list.append", "set", "set", "head[].add", "tail[].add", "head[].add", "tail[].add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["    ", "head", "=", "dict", "(", ")", "\n", "tail", "=", "dict", "(", ")", "\n", "rel_count", "=", "dict", "(", ")", "\n", "r_mat_ind", "=", "list", "(", ")", "\n", "r_mat_val", "=", "list", "(", ")", "\n", "head_r", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "rel_num", ")", ")", "\n", "tail_r", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "rel_num", ")", ")", "\n", "for", "triple", "in", "triple_list", ":", "\n", "        ", "head_r", "[", "triple", "[", "0", "]", "]", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "tail_r", "[", "triple", "[", "2", "]", "]", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "r_mat_ind", ".", "append", "(", "[", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", "]", ")", "\n", "r_mat_val", ".", "append", "(", "triple", "[", "1", "]", ")", "\n", "if", "triple", "[", "1", "]", "not", "in", "rel_count", ":", "\n", "            ", "rel_count", "[", "triple", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "triple", "[", "1", "]", "]", "=", "set", "(", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", "=", "set", "(", ")", "\n", "head", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "0", "]", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "rel_count", "[", "triple", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "0", "]", ")", "\n", "tail", "[", "triple", "[", "1", "]", "]", ".", "add", "(", "triple", "[", "2", "]", ")", "\n", "", "", "r_mat", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "r_mat_ind", ",", "values", "=", "r_mat_val", ",", "dense_shape", "=", "[", "ent_num", ",", "ent_num", "]", ")", "\n", "\n", "return", "head", ",", "tail", ",", "head_r", ",", "tail_r", ",", "r_mat", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_mat": [[46, 62], ["dict", "range"], "function", ["None"], ["    ", "degree", "=", "[", "1", "]", "*", "ent_num", "\n", "pos", "=", "dict", "(", ")", "\n", "for", "triple", "in", "triple_list", ":", "\n", "        ", "if", "triple", "[", "0", "]", "!=", "triple", "[", "1", "]", ":", "\n", "            ", "degree", "[", "triple", "[", "0", "]", "]", "+=", "1", "\n", "degree", "[", "triple", "[", "1", "]", "]", "+=", "1", "\n", "", "if", "triple", "[", "0", "]", "==", "triple", "[", "2", "]", ":", "\n", "            ", "continue", "\n", "", "if", "(", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", ")", "not", "in", "pos", ":", "\n", "            ", "pos", "[", "(", "triple", "[", "0", "]", ",", "triple", "[", "2", "]", ")", "]", "=", "1", "\n", "pos", "[", "(", "triple", "[", "2", "]", ",", "triple", "[", "0", "]", ")", "]", "=", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "ent_num", ")", ":", "\n", "        ", "pos", "[", "(", "i", ",", "i", ")", "]", "=", "1", "\n", "", "return", "pos", ",", "degree", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_sparse_tensor": [[64, 74], ["print", "rdgcn.get_mat", "tensorflow.SparseTensor", "ind.append", "val.append", "math.sqrt", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_mat"], ["    ", "pos", ",", "degree", "=", "get_mat", "(", "triple_list", ",", "ent_num", ")", "\n", "ind", "=", "[", "]", "\n", "val", "=", "[", "]", "\n", "M_arr", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "ent_num", ")", ")", "\n", "for", "fir", ",", "sec", "in", "pos", ":", "\n", "        ", "ind", ".", "append", "(", "(", "sec", ",", "fir", ")", ")", "\n", "val", ".", "append", "(", "pos", "[", "(", "fir", ",", "sec", ")", "]", "/", "math", ".", "sqrt", "(", "degree", "[", "fir", "]", ")", "/", "math", ".", "sqrt", "(", "degree", "[", "sec", "]", ")", ")", "\n", "M_arr", "[", "fir", "]", "[", "sec", "]", "=", "1.0", "\n", "", "pos", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "ind", ",", "values", "=", "val", ",", "dense_shape", "=", "[", "ent_num", ",", "ent_num", "]", ")", "\n", "\n", "return", "pos", ",", "M_arr", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.get_neg": [[76, 89], ["len", "numpy.array", "numpy.array", "scipy.spatial.distance.cdist", "range", "numpy.array", "neg.reshape.reshape", "sim[].argsort", "neg.reshape.append"], "function", ["None"], ["\n", "", "def", "get_neg", "(", "ILL", ",", "output_layer", ",", "k", ")", ":", "\n", "    ", "neg", "=", "[", "]", "\n", "t", "=", "len", "(", "ILL", ")", "\n", "ILL_vec", "=", "np", ".", "array", "(", "[", "output_layer", "[", "e1", "]", "for", "e1", "in", "ILL", "]", ")", "\n", "KG_vec", "=", "np", ".", "array", "(", "output_layer", ")", "\n", "sim", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "ILL_vec", ",", "KG_vec", ",", "metric", "=", "'cityblock'", ")", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "        ", "rank", "=", "sim", "[", "i", ",", ":", "]", ".", "argsort", "(", ")", "\n", "neg", ".", "append", "(", "rank", "[", "0", ":", "k", "]", ")", "\n", "\n", "", "neg", "=", "np", ".", "array", "(", "neg", ")", "\n", "neg", "=", "neg", ".", "reshape", "(", "(", "t", "*", "k", ",", ")", ")", "\n", "return", "neg", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.is_number": [[91, 104], ["float", "unicodedata.numeric"], "function", ["None"], ["\n", "", "def", "is_number", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "float", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "import", "unicodedata", "\n", "unicodedata", ".", "numeric", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.clear_attribute_triples": [[106, 147], ["print", "set", "set", "set", "print", "print", "len", "attr_num.keys", "len", "v.replace().replace().replace.endswith", "rdgcn.is_number", "v.replace().replace().replace.replace().replace().replace().replace().replace", "v.replace().replace().replace.replace().replace().replace", "set.append", "len", "set.add", "set.add", "literals_number.append", "literals_string.append", "v.replace().replace().replace.replace().replace().replace().replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.index", "v.replace().replace().replace.index", "v.replace().replace().replace.replace().replace().replace", "v.replace().replace().replace.replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.is_number", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index"], ["\n", "", "def", "clear_attribute_triples", "(", "attribute_triples", ")", ":", "\n", "    ", "print", "(", "'\\nbefore clear:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "# step 1", "\n", "attribute_triples_new", "=", "set", "(", ")", "\n", "attr_num", "=", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "_", ")", "in", "attribute_triples", ":", "\n", "        ", "ent_num", "=", "1", "\n", "if", "a", "in", "attr_num", ":", "\n", "            ", "ent_num", "+=", "attr_num", "[", "a", "]", "\n", "", "attr_num", "[", "a", "]", "=", "ent_num", "\n", "", "attr_set", "=", "set", "(", "attr_num", ".", "keys", "(", ")", ")", "\n", "attr_set_new", "=", "set", "(", ")", "\n", "for", "a", "in", "attr_set", ":", "\n", "        ", "if", "attr_num", "[", "a", "]", ">=", "10", ":", "\n", "            ", "attr_set_new", ".", "add", "(", "a", ")", "\n", "", "", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "a", "in", "attr_set_new", ":", "\n", "            ", "attribute_triples_new", ".", "add", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 1:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "\n", "# step 2", "\n", "attribute_triples_new", "=", "[", "]", "\n", "literals_number", ",", "literals_string", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "'\"^^'", "in", "v", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"^^'", ")", "]", "\n", "", "if", "v", ".", "endswith", "(", "'\"@en'", ")", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"@en'", ")", "]", "\n", "", "if", "is_number", "(", "v", ")", ":", "\n", "            ", "literals_number", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "literals_string", ".", "append", "(", "v", ")", "\n", "", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "v", "=", "v", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", "\n", "if", "'http'", "in", "v", ":", "\n", "            ", "continue", "\n", "", "attribute_triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 2:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "return", "attribute_triples", ",", "literals_number", ",", "literals_string", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rdgcn.read_word2vec": [[149, 161], ["print", "dict", "file.close", "open", "line.strip().split.strip().split", "numpy.array", "len", "list", "line.strip().split.strip", "map"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["\n", "", "def", "read_word2vec", "(", "file_path", ",", "vector_dimension", ")", ":", "\n", "    ", "print", "(", "'\\n'", ",", "file_path", ")", "\n", "word2vec", "=", "dict", "(", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "!=", "vector_dimension", "+", "1", ":", "\n", "                ", "continue", "\n", "", "v", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "line", "[", "1", ":", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word2vec", "[", "line", "[", "0", "]", "]", "=", "v", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "word2vec", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE.__init__": [[19, 21], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE.init": [[22, 35], ["openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'unit'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "alpha", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE._define_variables": [[36, 42], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE._define_embed_graph": [[43, 62], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.margin_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.margin_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "margin_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ".", "margin", ",", "self", ".", "args", ".", "loss_norm", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE.launch_training_1epo": [[63, 66], ["kdcoe_wo_desc.KDCoE.launch_triple_training_1epo", "kdcoe_wo_desc.KDCoE.launch_mapping_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo"], ["", "", "def", "launch_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "self", ".", "launch_mapping_training_1epo", "(", "epoch", ",", "triple_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE.launch_mapping_training_1epo": [[67, 80], ["time.time", "range", "print", "random.sample", "kdcoe_wo_desc.KDCoE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "links_batch", "=", "random", ".", "sample", "(", "self", ".", "kgs", ".", "train_links", ",", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "//", "triple_steps", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss", ",", "self", ".", "mapping_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "seed_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "links_batch", "]", ",", "\n", "self", ".", "seed_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "links_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "links_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe_wo_desc.KDCoE.run": [[81, 96], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "kdcoe_wo_desc.KDCoE.launch_training_1epo", "range", "kdcoe_wo_desc.KDCoE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.__init__": [[22, 42], ["load_session", "len", "numpy.reshape", "literal_encoder.AutoEncoderModel._init_graph", "literal_encoder.AutoEncoderModel._loss_optimizer", "tf.global_variables_initializer().run", "sklearn.preprocessing.normalize", "len", "tf.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._init_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._loss_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["    ", "def", "__init__", "(", "self", ",", "word_vec_list", ",", "args", ",", "hidden_dimensions", "=", "None", ")", ":", "\n", "        ", "self", ".", "session", "=", "load_session", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "weights", ",", "self", ".", "biases", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "input_dimension", "=", "self", ".", "args", ".", "literal_len", "*", "self", ".", "args", ".", "word2vec_dim", "\n", "if", "hidden_dimensions", "is", "None", ":", "\n", "            ", "hidden_dimensions", "=", "[", "1024", ",", "512", ",", "self", ".", "args", ".", "dim", "]", "\n", "", "self", ".", "hidden_dimensions", "=", "hidden_dimensions", "\n", "self", ".", "layer_num", "=", "len", "(", "self", ".", "hidden_dimensions", ")", "\n", "self", ".", "encoder_output", "=", "None", "\n", "self", ".", "decoder_output", "=", "None", "\n", "self", ".", "decoder_op", "=", "None", "\n", "\n", "self", ".", "word_vec_list", "=", "np", ".", "reshape", "(", "word_vec_list", ",", "[", "len", "(", "word_vec_list", ")", ",", "self", ".", "input_dimension", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_normalize", ":", "\n", "            ", "self", ".", "word_vec_list", "=", "preprocessing", ".", "normalize", "(", "self", ".", "word_vec_list", ")", "\n", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "_loss_optimizer", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._init_graph": [[43, 64], ["literal_encoder.AutoEncoderModel.hidden_dimensions.insert", "range", "range", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.placeholder", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "_init_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "hidden_dimensions", ".", "insert", "(", "0", ",", "self", ".", "input_dimension", ")", "\n", "hds", "=", "self", ".", "hidden_dimensions", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'encoder_h'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i", "]", ",", "hds", "[", "i", "+", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'encoder_b'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i", "+", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "i_decoder", "=", "self", ".", "layer_num", "-", "i", "\n", "self", ".", "weights", "[", "'decoder_h'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'decoder_h'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i_decoder", "]", ",", "hds", "[", "i_decoder", "-", "1", "]", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "biases", "[", "'decoder_b'", "+", "str", "(", "i", ")", "]", "=", "tf", ".", "get_variable", "(", "'decoder_b'", "+", "str", "(", "i", ")", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", ",", "\n", "shape", "=", "[", "hds", "[", "i_decoder", "-", "1", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "input_dimension", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel._loss_optimizer": [[65, 73], ["literal_encoder.AutoEncoderModel.encoder", "literal_encoder.AutoEncoderModel.decoder", "tf.reduce_mean", "openea.modules.base.optimizers.generate_optimizer", "tf.nn.l2_normalize", "tf.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.decoder", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_loss_optimizer", "(", "self", ")", ":", "\n", "        ", "encoder_output", "=", "self", ".", "encoder", "(", "self", ".", "batch", ")", "\n", "if", "self", ".", "args", ".", "encoder_normalize", ":", "\n", "            ", "encoder_output", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "encoder_output", ")", "\n", "", "decoder_output", "=", "self", ".", "decoder", "(", "encoder_output", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "pow", "(", "decoder_output", "-", "self", ".", "batch", ",", "2", ")", ")", "\n", "# self.optimizer = generate_optimizer(self.loss, self.args.learning_rate, opt=self.args.optimizer)", "\n", "self", ".", "optimizer", "=", "generate_optimizer", "(", "self", ".", "loss", ",", "0.01", ",", "opt", "=", "'Adagrad'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder": [[74, 84], ["range", "tf.add", "tf.matmul", "tf.nn.sigmoid", "tf.nn.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "encoder", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "input_layer", "=", "input_data", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "input_layer", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "input_layer", ",", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", ")", ",", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "tanh", "(", "input_layer", ")", "\n", "", "", "encoder_output", "=", "input_layer", "\n", "return", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.decoder": [[85, 95], ["range", "tf.add", "tf.matmul", "tf.nn.sigmoid", "tf.nn.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "decoder", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "input_layer", "=", "input_data", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "input_layer", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "input_layer", ",", "self", ".", "weights", "[", "'decoder_h'", "+", "str", "(", "i", ")", "]", ")", ",", "self", ".", "biases", "[", "'decoder_b'", "+", "str", "(", "i", ")", "]", ")", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                ", "input_layer", "=", "tf", ".", "nn", ".", "tanh", "(", "input_layer", ")", "\n", "", "", "decoder_output", "=", "input_layer", "\n", "return", "decoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.train_one_epoch": [[96, 116], ["time.time", "list", "range", "range", "time.time", "print", "literal_encoder.AutoEncoderModel.session.run", "len", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "train_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "batches", "=", "list", "(", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "num_batch", "=", "len", "(", "self", ".", "word_vec_list", ")", "//", "batch_size", "+", "1", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "if", "i", "==", "num_batch", "-", "1", ":", "\n", "                ", "batches", ".", "append", "(", "self", ".", "word_vec_list", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "batches", ".", "append", "(", "self", ".", "word_vec_list", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "loss_sum", "=", "0.0", "\n", "for", "batch_i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "loss_train", ",", "_", "=", "self", ".", "session", ".", "run", "(", "[", "self", ".", "loss", ",", "self", ".", "optimizer", "]", ",", "feed_dict", "=", "{", "self", ".", "batch", ":", "batches", "[", "batch_i", "]", "}", ")", "\n", "loss_sum", "+=", "loss_train", "\n", "", "loss_sum", "+=", "self", ".", "args", ".", "batch_size", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of literal encoder, loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "loss_sum", ",", "end", "-", "start_time", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder_multi_batches": [[117, 148], ["print", "list", "numpy.zeros", "range", "range", "print", "len", "numpy.reshape", "range", "gc.collect", "len", "len", "list.append", "list.append", "literal_encoder.AutoEncoderModel.weights[].eval", "literal_encoder.AutoEncoderModel.biases[].eval", "numpy.array", "numpy.array", "len", "numpy.matmul", "literal_encoder.sigmoid", "literal_encoder.tanh", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "def", "encoder_multi_batches", "(", "self", ",", "input_data", ")", ":", "\n", "        ", "print", "(", "'encode literal embeddings...'", ",", "len", "(", "input_data", ")", ")", "\n", "batches", "=", "list", "(", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "len", "(", "input_data", ")", ",", "self", ".", "args", ".", "dim", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "\n", "num_batch", "=", "len", "(", "input_data", ")", "//", "batch_size", "+", "1", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "if", "i", "==", "num_batch", "-", "1", ":", "\n", "                ", "batches", ".", "append", "(", "input_data", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "batches", ".", "append", "(", "input_data", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "for", "batch_i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "input_layer", "=", "np", ".", "reshape", "(", "batches", "[", "batch_i", "]", ",", "[", "len", "(", "batches", "[", "batch_i", "]", ")", ",", "self", ".", "input_dimension", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "                ", "weight_i", "=", "self", ".", "weights", "[", "'encoder_h'", "+", "str", "(", "i", ")", "]", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "bias_i", "=", "self", ".", "biases", "[", "'encoder_b'", "+", "str", "(", "i", ")", "]", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "input_layer", "=", "np", ".", "matmul", "(", "input_layer", ",", "weight_i", ")", "+", "bias_i", "\n", "if", "self", ".", "args", ".", "encoder_active", "==", "'sigmoid'", ":", "\n", "                    ", "input_layer", "=", "sigmoid", "(", "input_layer", ")", "\n", "", "elif", "self", ".", "args", ".", "encoder_active", "==", "'tanh'", ":", "\n", "                    ", "input_layer", "=", "tanh", "(", "input_layer", ")", "\n", "", "", "literal_vectors", "=", "input_layer", "\n", "if", "batch_i", "==", "num_batch", "-", "1", ":", "\n", "                ", "results", "[", "batch_i", "*", "batch_size", ":", "]", "=", "np", ".", "array", "(", "literal_vectors", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "batch_i", "*", "batch_size", ":", "(", "batch_i", "+", "1", ")", "*", "batch_size", "]", "=", "np", ".", "array", "(", "literal_vectors", ")", "\n", "", "del", "literal_vectors", "\n", "gc", ".", "collect", "(", ")", "\n", "", "print", "(", "\"encoded literal embeddings\"", ",", "results", ".", "shape", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.LiteralEncoder.__init__": [[195, 215], ["literal_encoder.generate_unlisted_word2vec", "literal_encoder.AutoEncoderModel", "range", "literal_encoder.AutoEncoderModel.encoder_multi_batches", "numpy.zeros", "literal.split", "range", "literal_vector_list.append", "len", "len", "literal_encoder.AutoEncoderModel.train_one_epoch", "min", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.generate_unlisted_word2vec", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.encoder_multi_batches", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.AutoEncoderModel.train_one_epoch"], ["    ", "def", "__init__", "(", "self", ",", "literal_list", ",", "word2vec", ",", "args", ",", "word2vec_dimension", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "literal_list", "=", "literal_list", "\n", "self", ".", "word2vec", "=", "generate_unlisted_word2vec", "(", "word2vec", ",", "literal_list", ",", "word2vec_dimension", ")", "\n", "self", ".", "tokens_max_len", "=", "self", ".", "args", ".", "literal_len", "\n", "self", ".", "word2vec_dimension", "=", "word2vec_dimension", "\n", "\n", "literal_vector_list", "=", "[", "]", "\n", "for", "literal", "in", "self", ".", "literal_list", ":", "\n", "            ", "vectors", "=", "np", ".", "zeros", "(", "(", "self", ".", "tokens_max_len", ",", "self", ".", "word2vec_dimension", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "words", "=", "literal", ".", "split", "(", "' '", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "tokens_max_len", ",", "len", "(", "words", ")", ")", ")", ":", "\n", "                ", "if", "words", "[", "i", "]", "in", "self", ".", "word2vec", ":", "\n", "                    ", "vectors", "[", "i", "]", "=", "self", ".", "word2vec", "[", "words", "[", "i", "]", "]", "\n", "", "", "literal_vector_list", ".", "append", "(", "vectors", ")", "\n", "", "assert", "len", "(", "literal_list", ")", "==", "len", "(", "literal_vector_list", ")", "\n", "encoder_model", "=", "AutoEncoderModel", "(", "literal_vector_list", ",", "self", ".", "args", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "encoder_epoch", ")", ":", "\n", "            ", "encoder_model", ".", "train_one_epoch", "(", "i", "+", "1", ")", "\n", "", "self", ".", "encoded_literal_vector", "=", "encoder_model", ".", "encoder_multi_batches", "(", "literal_vector_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid": [[10, 12], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh": [[14, 19], ["numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "tanh", "(", "x", ")", ":", "\n", "    ", "s1", "=", "np", ".", "exp", "(", "x", ")", "-", "np", ".", "exp", "(", "-", "x", ")", "\n", "s2", "=", "np", ".", "exp", "(", "x", ")", "+", "np", ".", "exp", "(", "-", "x", ")", "\n", "s", "=", "s1", "/", "s2", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.generate_unlisted_word2vec": [[150, 191], ["sorted", "sum", "range", "print", "print", "gensim.models.word2vec.Word2Vec", "word2vec.update", "literal.split", "sorted.items", "len", "len", "list", "numpy.zeros", "len", "unlisted_words.append", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "", "def", "generate_unlisted_word2vec", "(", "word2vec", ",", "literal_list", ",", "vector_dimension", ")", ":", "\n", "    ", "unlisted_words", "=", "[", "]", "\n", "for", "literal", "in", "literal_list", ":", "\n", "        ", "words", "=", "literal", ".", "split", "(", "' '", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word", "not", "in", "word2vec", ":", "\n", "                ", "unlisted_words", ".", "append", "(", "word", ")", "\n", "\n", "", "", "", "character_vectors", "=", "{", "}", "\n", "alphabet", "=", "''", "\n", "ch_num", "=", "{", "}", "\n", "for", "word", "in", "unlisted_words", ":", "\n", "        ", "for", "ch", "in", "word", ":", "\n", "            ", "n", "=", "1", "\n", "if", "ch", "in", "ch_num", ":", "\n", "                ", "n", "+=", "ch_num", "[", "ch", "]", "\n", "", "ch_num", "[", "ch", "]", "=", "n", "\n", "", "", "ch_num", "=", "sorted", "(", "ch_num", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "ch_sum", "=", "sum", "(", "[", "n", "for", "(", "_", ",", "n", ")", "in", "ch_num", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ch_num", ")", ")", ":", "\n", "        ", "if", "ch_num", "[", "i", "]", "[", "1", "]", "/", "ch_sum", ">=", "0.0001", ":", "\n", "            ", "alphabet", "+=", "ch_num", "[", "i", "]", "[", "0", "]", "\n", "", "", "print", "(", "alphabet", ")", "\n", "print", "(", "'len(alphabet):'", ",", "len", "(", "alphabet", ")", ",", "'\\n'", ")", "\n", "char_sequences", "=", "[", "list", "(", "word", ")", "for", "word", "in", "unlisted_words", "]", "\n", "model", "=", "Word2Vec", "(", "char_sequences", ",", "size", "=", "vector_dimension", ",", "window", "=", "5", ",", "min_count", "=", "1", ")", "\n", "for", "ch", "in", "alphabet", ":", "\n", "        ", "assert", "ch", "in", "model", "\n", "character_vectors", "[", "ch", "]", "=", "model", "[", "ch", "]", "\n", "\n", "", "word2vec_new", "=", "{", "}", "\n", "for", "word", "in", "unlisted_words", ":", "\n", "        ", "vec", "=", "np", ".", "zeros", "(", "vector_dimension", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ch", "in", "word", ":", "\n", "            ", "if", "ch", "in", "alphabet", ":", "\n", "                ", "vec", "+=", "character_vectors", "[", "ch", "]", "\n", "", "", "if", "len", "(", "word", ")", "!=", "0", ":", "\n", "            ", "word2vec_new", "[", "word", "]", "=", "vec", "/", "len", "(", "word", ")", "\n", "\n", "", "", "word2vec", ".", "update", "(", "word2vec_new", ")", "\n", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG.__init__": [[430, 459], ["set", "list", "len", "set", "set", "set", "print", "print", "print", "list", "list", "alinet.AKG.prop_list.sort", "alinet.AKG.ent_list.sort", "alinet.AKG._generate_related_ents", "alinet.AKG._generate_triple_dict", "alinet.AKG._generate_ht", "alinet.AKG.__generate_weight", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_related_ents", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_triple_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_ht", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG.__generate_weight"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "ori_triples", "=", "None", ")", ":", "\n", "        ", "self", ".", "triples", "=", "set", "(", "triples", ")", "\n", "self", ".", "triple_list", "=", "list", "(", "self", ".", "triples", ")", "\n", "self", ".", "triples_num", "=", "len", "(", "self", ".", "triples", ")", "\n", "\n", "self", ".", "heads", "=", "set", "(", "[", "triple", "[", "0", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "props", "=", "set", "(", "[", "triple", "[", "1", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "tails", "=", "set", "(", "[", "triple", "[", "2", "]", "for", "triple", "in", "self", ".", "triple_list", "]", ")", "\n", "self", ".", "ents", "=", "self", ".", "heads", "|", "self", ".", "tails", "\n", "\n", "print", "(", "\"triples num\"", ",", "self", ".", "triples_num", ")", "\n", "\n", "print", "(", "\"head ent num\"", ",", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"total ent num\"", ",", "len", "(", "self", ".", "ents", ")", ")", "\n", "\n", "self", ".", "prop_list", "=", "list", "(", "self", ".", "props", ")", "\n", "self", ".", "ent_list", "=", "list", "(", "self", ".", "ents", ")", "\n", "self", ".", "prop_list", ".", "sort", "(", ")", "\n", "self", ".", "ent_list", ".", "sort", "(", ")", "\n", "\n", "if", "ori_triples", "is", "None", ":", "\n", "            ", "self", ".", "ori_triples", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "ori_triples", "=", "set", "(", "ori_triples", ")", "\n", "\n", "", "self", ".", "_generate_related_ents", "(", ")", "\n", "self", ".", "_generate_triple_dict", "(", ")", "\n", "self", ".", "_generate_ht", "(", ")", "\n", "self", ".", "__generate_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_related_ents": [[460, 471], ["dict", "dict", "alinet.AKG.out_related_ents_dict.get", "alinet.AKG.add", "alinet.AKG.in_related_ents_dict.get", "alinet.AKG.add", "set", "set"], "methods", ["None"], ["", "def", "_generate_related_ents", "(", "self", ")", ":", "\n", "        ", "self", ".", "out_related_ents_dict", "=", "dict", "(", ")", "\n", "self", ".", "in_related_ents_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "out_related_ents", "=", "self", ".", "out_related_ents_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "out_related_ents", ".", "add", "(", "t", ")", "\n", "self", ".", "out_related_ents_dict", "[", "h", "]", "=", "out_related_ents", "\n", "\n", "in_related_ents", "=", "self", ".", "in_related_ents_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "in_related_ents", ".", "add", "(", "h", ")", "\n", "self", ".", "in_related_ents_dict", "[", "t", "]", "=", "in_related_ents", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_triple_dict": [[472, 481], ["dict", "dict", "alinet.AKG.rt_dict.get", "alinet.AKG.add", "alinet.AKG.hr_dict.get", "alinet.AKG.add", "set", "set"], "methods", ["None"], ["", "", "def", "_generate_triple_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "rt_dict", ",", "self", ".", "hr_dict", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triple_list", ":", "\n", "            ", "rt_set", "=", "self", ".", "rt_dict", ".", "get", "(", "h", ",", "set", "(", ")", ")", "\n", "rt_set", ".", "add", "(", "(", "r", ",", "t", ")", ")", "\n", "self", ".", "rt_dict", "[", "h", "]", "=", "rt_set", "\n", "hr_set", "=", "self", ".", "hr_dict", ".", "get", "(", "t", ",", "set", "(", ")", ")", "\n", "hr_set", ".", "add", "(", "(", "h", ",", "r", ")", ")", "\n", "self", ".", "hr_dict", "[", "t", "]", "=", "hr_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG._generate_ht": [[482, 486], ["set", "alinet.AKG.ht.add"], "methods", ["None"], ["", "", "def", "_generate_ht", "(", "self", ")", ":", "\n", "        ", "self", ".", "ht", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "self", ".", "ht", ".", "add", "(", "(", "h", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AKG.__generate_weight": [[487, 507], ["dict", "list", "list", "math.ceil", "print", "print", "alinet.AKG.weighted_triples.append", "len", "len", "alinet.AKG.additional_triples.append", "dict.get", "dict.get"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "__generate_weight", "(", "self", ")", ":", "\n", "        ", "triple_num", "=", "dict", "(", ")", "\n", "n", "=", "0", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "if", "t", "in", "self", ".", "heads", ":", "\n", "                ", "n", "=", "n", "+", "1", "\n", "triple_num", "[", "h", "]", "=", "triple_num", ".", "get", "(", "h", ",", "0", ")", "+", "1", "\n", "triple_num", "[", "t", "]", "=", "triple_num", ".", "get", "(", "t", ",", "0", ")", "+", "1", "\n", "", "", "self", ".", "weighted_triples", "=", "list", "(", ")", "\n", "self", ".", "additional_triples", "=", "list", "(", ")", "\n", "ave", "=", "math", ".", "ceil", "(", "n", "/", "len", "(", "self", ".", "heads", ")", ")", "\n", "print", "(", "\"ave outs:\"", ",", "ave", ")", "\n", "\n", "for", "h", ",", "r", ",", "t", "in", "self", ".", "triples", ":", "\n", "            ", "w", "=", "1", "\n", "if", "t", "in", "self", ".", "heads", "and", "triple_num", "[", "h", "]", "<=", "ave", ":", "\n", "                ", "w", "=", "2.0", "\n", "self", ".", "additional_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "self", ".", "weighted_triples", ".", "append", "(", "(", "h", ",", "r", ",", "t", ",", "w", ")", ")", "\n", "", "print", "(", "\"additional triples:\"", ",", "len", "(", "self", ".", "additional_triples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.GraphConvolution.__init__": [[510, 530], ["list", "list", "alinet.GraphConvolution._get_variable", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._get_variable"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "adj", ",", "\n", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "name", "=", "'GCN'", ",", "\n", "is_sparse_inputs", "=", "False", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "use_bias", "=", "True", ")", ":", "\n", "        ", "self", ".", "activation", "=", "activation", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "self", ".", "num_features_nonzero", "=", "num_features_nonzero", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "is_sparse_inputs", "=", "is_sparse_inputs", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "kernels", "=", "list", "(", ")", "\n", "self", ".", "bias", "=", "list", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "data_type", "=", "tf", ".", "float32", "\n", "self", ".", "_get_variable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.GraphConvolution._get_variable": [[531, 543], ["tensorflow.keras.layers.BatchNormalization", "range", "len", "alinet.GraphConvolution.kernels.append", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.zeros_initializer", "str", "tensorflow.glorot_uniform_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["None"], ["", "def", "_get_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_normalization", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "adjs", ")", ")", ":", "\n", "            ", "self", ".", "kernels", ".", "append", "(", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_kernel_'", "+", "str", "(", "i", ")", ",", "\n", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.01", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", ")", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "bias", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_bias'", ",", "shape", "=", "[", "self", ".", "output_dim", ",", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.GraphConvolution.call": [[544, 561], ["alinet.GraphConvolution.batch_normalization", "list", "range", "tensorflow.add_n", "alinet.dropout", "len", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "list.append", "tensorflow.nn.bias_add", "alinet.GraphConvolution.activation", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "batch_normalization", "(", "inputs", ")", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "inputs", "=", "dropout", "(", "inputs", ",", "self", ".", "dropout_rate", ",", "self", ".", "num_features_nonzero", ",", "self", ".", "is_sparse_inputs", ")", "\n", "", "hidden_vectors", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "adjs", ")", ")", ":", "\n", "            ", "pre_sup", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernels", "[", "i", "]", ",", "a_is_sparse", "=", "self", ".", "is_sparse_inputs", ")", "\n", "hidden_vector", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "i", "]", ",", "tf", ".", "float32", ")", ",", "pre_sup", ")", "\n", "hidden_vectors", ".", "append", "(", "hidden_vector", ")", "\n", "", "outputs", "=", "tf", ".", "add_n", "(", "hidden_vectors", ")", "\n", "# bias", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "# activation", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.GraphConvolution.update_adj": [[562, 565], ["print", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "update_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "print", "(", "\"gcn update adj...\"", ")", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "am", "[", "0", "]", ",", "values", "=", "am", "[", "1", "]", ",", "dense_shape", "=", "am", "[", "2", "]", ")", "for", "am", "in", "adj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.HighwayLayer.__init__": [[568, 574], ["alinet.HighwayLayer._get_variable"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._get_variable"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout_rate", "=", "0.0", ",", "name", "=", "\"highway\"", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "(", "input_dim", ",", "output_dim", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "data_type", "=", "tf", ".", "float32", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "_get_variable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.HighwayLayer._get_variable": [[575, 582], ["tensorflow.get_variable", "tensorflow.keras.layers.BatchNormalization", "tensorflow.glorot_uniform_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["None"], ["", "def", "_get_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'kernel'", ",", "shape", "=", "self", ".", "input_shape", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.01", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", "\n", "self", ".", "activation", "=", "tf", ".", "tanh", "\n", "self", ".", "batch_normal", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.HighwayLayer.call": [[583, 593], ["alinet.HighwayLayer.batch_normal", "alinet.HighwayLayer.batch_normal", "tensorflow.matmul", "alinet.HighwayLayer.activation", "tensorflow.keras.activations.relu", "tensorflow.add", "alinet.HighwayLayer.activation", "tensorflow.nn.dropout", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "def", "call", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "input1", "=", "self", ".", "batch_normal", "(", "input1", ")", "\n", "input2", "=", "self", ".", "batch_normal", "(", "input2", ")", "\n", "gate", "=", "tf", ".", "matmul", "(", "input1", ",", "self", ".", "weight", ")", "\n", "gate", "=", "self", ".", "activation", "(", "gate", ")", "\n", "if", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "gate", "=", "tf", ".", "nn", ".", "dropout", "(", "gate", ",", "self", ".", "dropout_rate", ")", "\n", "", "gate", "=", "tf", ".", "keras", ".", "activations", ".", "relu", "(", "gate", ")", "\n", "output", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "input2", ",", "1", "-", "gate", ")", ",", "tf", ".", "multiply", "(", "input1", ",", "gate", ")", ")", "\n", "return", "self", ".", "activation", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer.__init__": [[596, 610], ["alinet.AliNetGraphAttentionLayer._get_variable", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._get_variable"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "adj", ",", "nodes_num", ",", "\n", "dropout_rate", ",", "is_sparse_input", "=", "False", ",", "use_bias", "=", "True", ",", "\n", "activation", "=", "None", ",", "name", "=", "\"alinet\"", ")", ":", "\n", "        ", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "adjs", "=", "[", "tf", ".", "SparseTensor", "(", "indices", "=", "adj", "[", "0", "]", "[", "0", "]", ",", "values", "=", "adj", "[", "0", "]", "[", "1", "]", ",", "dense_shape", "=", "adj", "[", "0", "]", "[", "2", "]", ")", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "is_sparse_input", "=", "is_sparse_input", "\n", "self", ".", "nodes_num", "=", "nodes_num", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "data_type", "=", "tf", ".", "float32", "\n", "self", ".", "_get_variable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer._get_variable": [[611, 625], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.keras.layers.BatchNormalization", "tensorflow.glorot_uniform_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.glorot_uniform_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.glorot_uniform_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["None"], ["", "def", "_get_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "kernel", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_kernel'", ",", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "output_dim", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.01", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", "\n", "self", ".", "kernel1", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_kernel_1'", ",", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.01", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", "\n", "self", ".", "kernel2", "=", "tf", ".", "get_variable", "(", "self", ".", "name", "+", "'_kernel_2'", ",", "shape", "=", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.01", ")", ",", "\n", "dtype", "=", "self", ".", "data_type", ")", "\n", "self", ".", "batch_normlization", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer.call": [[626, 648], ["alinet.AliNetGraphAttentionLayer.batch_normlization", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.keras.activations.tanh", "tensorflow.keras.activations.tanh", "tensorflow.sparse_add", "tensorflow.SparseTensor", "tensorflow.sparse_softmax", "tensorflow.sparse_reshape", "tensorflow.sparse_tensor_dense_matmul", "alinet.AliNetGraphAttentionLayer.activation", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.cast", "tensorflow.cast", "tensorflow.transpose", "tensorflow.nn.leaky_relu"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "batch_normlization", "(", "inputs", ")", "\n", "mapped_inputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel", ")", "\n", "attention_inputs1", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel1", ")", "\n", "attention_inputs2", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "kernel2", ")", "\n", "con_sa_1", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "attention_inputs1", ",", "inputs", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "con_sa_2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "attention_inputs2", ",", "inputs", ")", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "con_sa_1", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "(", "con_sa_1", ")", "\n", "con_sa_2", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "(", "con_sa_2", ")", "\n", "if", "self", ".", "dropout_rate", ">", "0.0", ":", "\n", "            ", "con_sa_1", "=", "tf", ".", "nn", ".", "dropout", "(", "con_sa_1", ",", "self", ".", "dropout_rate", ")", "\n", "con_sa_2", "=", "tf", ".", "nn", ".", "dropout", "(", "con_sa_2", ",", "self", ".", "dropout_rate", ")", "\n", "", "con_sa_1", "=", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "con_sa_1", "\n", "con_sa_2", "=", "tf", ".", "cast", "(", "self", ".", "adjs", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "tf", ".", "transpose", "(", "con_sa_2", ",", "[", "1", ",", "0", "]", ")", "\n", "weights", "=", "tf", ".", "sparse_add", "(", "con_sa_1", ",", "con_sa_2", ")", "\n", "weights", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "weights", ".", "indices", ",", "\n", "values", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "weights", ".", "values", ")", ",", "\n", "dense_shape", "=", "weights", ".", "dense_shape", ")", "\n", "attention_adj", "=", "tf", ".", "sparse_softmax", "(", "weights", ")", "\n", "attention_adj", "=", "tf", ".", "sparse_reshape", "(", "attention_adj", ",", "shape", "=", "[", "self", ".", "nodes_num", ",", "self", ".", "nodes_num", "]", ")", "\n", "value", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "attention_adj", ",", "mapped_inputs", ")", "\n", "return", "self", ".", "activation", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.set_kgs": [[652, 656], ["alinet.AKG", "alinet.AKG"], "methods", ["None"], ["    ", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "self", ".", "kg1", "=", "AKG", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_set", ")", "\n", "self", ".", "kg2", "=", "AKG", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.set_args": [[657, 661], ["openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "\n", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.init": [[662, 719], ["set", "alinet.enhance_triples", "alinet.remove_unlinked_triples", "alinet.generate_rel_ht", "os.path.exists", "numpy.array().reshape", "numpy.array().reshape", "numpy.ones", "numpy.hstack", "tensorflow.ConfigProto", "tensorflow.Session", "alinet.AliNet._get_variable", "alinet.AliNet._generate_semi_graph", "tensorflow.global_variables_initializer().run", "print", "pickle.load", "alinet.no_weighted_adj", "print", "pickle.dump", "len", "alinet.AliNet._generate_rel_graph", "alinet.AliNet._generate_graph", "list", "open", "alinet.generate_2hop_triples", "alinet.generate_2hop_triples", "alinet.no_weighted_adj", "pickle.load.append", "open", "numpy.array", "len", "numpy.array", "len", "len", "tensorflow.global_variables_initializer", "list"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.enhance_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_rel_ht", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._get_variable", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._generate_semi_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.no_weighted_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._generate_rel_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._generate_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_2hop_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_2hop_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.no_weighted_adj"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "self", ".", "sup_ent1", "=", "self", ".", "kgs", ".", "train_entities1", "\n", "self", ".", "sup_ent2", "=", "self", ".", "kgs", ".", "train_entities2", "\n", "self", ".", "linked_ents", "=", "set", "(", "self", ".", "kgs", ".", "train_entities1", "+", "\n", "self", ".", "kgs", ".", "train_entities2", "+", "\n", "self", ".", "kgs", ".", "valid_entities1", "+", "\n", "self", ".", "kgs", ".", "test_entities1", "+", "\n", "self", ".", "kgs", ".", "test_entities2", "+", "\n", "self", ".", "kgs", ".", "valid_entities2", ")", "\n", "enhanced_triples1", ",", "enhanced_triples2", "=", "enhance_triples", "(", "self", ".", "kg1", ",", "\n", "self", ".", "kg2", ",", "\n", "self", ".", "sup_ent1", ",", "\n", "self", ".", "sup_ent2", ")", "\n", "ori_triples", "=", "self", ".", "kg1", ".", "triple_list", "+", "self", ".", "kg2", ".", "triple_list", "\n", "triples", "=", "remove_unlinked_triples", "(", "ori_triples", "+", "list", "(", "enhanced_triples1", ")", "+", "\n", "list", "(", "enhanced_triples2", ")", ",", "self", ".", "linked_ents", ")", "\n", "rel_ht_dict", "=", "generate_rel_ht", "(", "triples", ")", "\n", "saved_data_path", "=", "self", ".", "args", ".", "training_data", "+", "self", ".", "args", ".", "dataset_division", "+", "'alinet_saved_data.pkl'", "\n", "if", "os", ".", "path", ".", "exists", "(", "saved_data_path", ")", ":", "\n", "            ", "print", "(", "'load saved adj data from'", ",", "saved_data_path", ")", "\n", "adj", "=", "pickle", ".", "load", "(", "open", "(", "saved_data_path", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "            ", "one_adj", ",", "_", "=", "no_weighted_adj", "(", "self", ".", "kgs", ".", "entities_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", "=", "[", "one_adj", "]", "\n", "if", "self", ".", "is_two", ":", "\n", "                ", "two_hop_triples1", "=", "generate_2hop_triples", "(", "self", ".", "kg1", ",", "linked_ents", "=", "self", ".", "linked_ents", ")", "\n", "two_hop_triples2", "=", "generate_2hop_triples", "(", "self", ".", "kg2", ",", "linked_ents", "=", "self", ".", "linked_ents", ")", "\n", "triples", "=", "two_hop_triples1", "|", "two_hop_triples2", "\n", "two_adj", ",", "_", "=", "no_weighted_adj", "(", "self", ".", "kgs", ".", "entities_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", ".", "append", "(", "two_adj", ")", "\n", "", "print", "(", "'save adj data to'", ",", "saved_data_path", ")", "\n", "pickle", ".", "dump", "(", "adj", ",", "open", "(", "saved_data_path", ",", "'wb'", ")", ")", "\n", "\n", "", "self", ".", "adj", "=", "adj", "\n", "self", ".", "rel_ht_dict", "=", "rel_ht_dict", "\n", "self", ".", "rel_win_size", "=", "self", ".", "args", ".", "batch_size", "//", "len", "(", "rel_ht_dict", ")", "\n", "if", "self", ".", "rel_win_size", "<=", "1", ":", "\n", "            ", "self", ".", "rel_win_size", "=", "self", ".", "args", ".", "min_rel_win", "\n", "", "self", ".", "sim_th", "=", "self", ".", "args", ".", "sim_th", "\n", "\n", "sup_ent1", "=", "np", ".", "array", "(", "self", ".", "sup_ent1", ")", ".", "reshape", "(", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "1", ")", ")", "\n", "sup_ent2", "=", "np", ".", "array", "(", "self", ".", "sup_ent2", ")", ".", "reshape", "(", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "1", ")", ")", "\n", "weight", "=", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "kgs", ".", "train_entities1", ")", ",", "1", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "sup_links", "=", "np", ".", "hstack", "(", "(", "sup_ent1", ",", "sup_ent2", ",", "weight", ")", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "_get_variable", "(", ")", "\n", "if", "self", ".", "args", ".", "rel_param", ">", "0.0", ":", "\n", "            ", "self", ".", "_generate_rel_graph", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_generate_graph", "(", ")", "\n", "", "self", ".", "_generate_semi_graph", "(", ")", "\n", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.__init__": [[720, 755], ["openea.models.basic_model.BasicModel.__init__", "set", "set", "set", "set", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "one_hop_layers", "=", "None", "\n", "self", ".", "two_hop_layers", "=", "None", "\n", "self", ".", "layers_outputs", "=", "None", "\n", "\n", "self", ".", "new_edges1", ",", "self", ".", "new_edges2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "self", ".", "new_links", "=", "set", "(", ")", "\n", "self", ".", "pos_link_batch", "=", "None", "\n", "self", ".", "neg_link_batch", "=", "None", "\n", "self", ".", "sup_links_set", "=", "set", "(", ")", "\n", "self", ".", "rel_ht_dict", "=", "None", "\n", "self", ".", "rel_win_size", "=", "None", "\n", "self", ".", "sim_th", "=", "None", "\n", "self", ".", "start_augment", "=", "None", "\n", "self", ".", "is_two", "=", "True", "\n", "self", ".", "new_sup_links_set", "=", "set", "(", ")", "\n", "self", ".", "new_sup_links", "=", "None", "\n", "self", ".", "input_embeds", ",", "self", ".", "output_embeds_list", "=", "None", ",", "None", "\n", "self", ".", "sup_links", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "self", ".", "sup_ent1", "=", "None", "\n", "self", ".", "sup_ent2", "=", "None", "\n", "self", ".", "linked_ents", "=", "None", "\n", "self", ".", "session", "=", "None", "\n", "\n", "self", ".", "labeled_align", "=", "set", "(", ")", "\n", "self", ".", "labeled_align_1", "=", "set", "(", ")", "\n", "self", ".", "new_pos_links", "=", "None", "\n", "self", ".", "semi_loss", "=", "None", "\n", "self", ".", "semi_optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._get_variable": [[756, 761], ["tensorflow.get_variable", "tensorflow.glorot_uniform_initializer"], "methods", ["None"], ["", "def", "_get_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_embedding", "=", "tf", ".", "get_variable", "(", "'init_embedding'", ",", "\n", "shape", "=", "(", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "layer_dims", "[", "0", "]", ")", ",", "\n", "initializer", "=", "tf", ".", "glorot_uniform_initializer", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._define_model": [[762, 804], ["print", "list", "list", "list", "range", "len", "alinet.GraphConvolution", "list.append", "alinet.GraphConvolution.call", "list.append", "alinet.AliNetGraphAttentionLayer", "list.append", "alinet.AliNetGraphAttentionLayer.call", "alinet.HighwayLayer", "alinet.HighwayLayer.call", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer.call", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer.call", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNetGraphAttentionLayer.call"], ["", "def", "_define_model", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Getting AliNet model...'", ")", "\n", "layer_num", "=", "len", "(", "self", ".", "args", ".", "layer_dims", ")", "-", "1", "\n", "output_embeds", "=", "self", ".", "init_embedding", "\n", "one_layers", "=", "list", "(", ")", "\n", "two_layers", "=", "list", "(", ")", "\n", "layers_outputs", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "            ", "gcn_layer", "=", "GraphConvolution", "(", "input_dim", "=", "self", ".", "args", ".", "layer_dims", "[", "i", "]", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "adj", "=", "[", "self", ".", "adj", "[", "0", "]", "]", ",", "\n", "num_features_nonzero", "=", "self", ".", "args", ".", "num_features_nonzero", ",", "\n", "dropout_rate", "=", "self", ".", "args", ".", "dropout", ",", "\n", "name", "=", "'gcn_'", "+", "str", "(", "i", ")", ")", "\n", "one_layers", ".", "append", "(", "gcn_layer", ")", "\n", "one_output_embeds", "=", "gcn_layer", ".", "call", "(", "output_embeds", ")", "\n", "\n", "if", "i", "<", "layer_num", "-", "1", ":", "\n", "                ", "gat_layer", "=", "AliNetGraphAttentionLayer", "(", "input_dim", "=", "self", ".", "args", ".", "layer_dims", "[", "i", "]", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "adj", "=", "[", "self", ".", "adj", "[", "1", "]", "]", ",", "\n", "nodes_num", "=", "self", ".", "kgs", ".", "entities_num", ",", "\n", "dropout_rate", "=", "self", ".", "args", ".", "dropout", ",", "\n", "is_sparse_input", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "name", "=", "'alinet_'", "+", "str", "(", "i", ")", ")", "\n", "two_layers", ".", "append", "(", "gat_layer", ")", "\n", "two_output_embeds", "=", "gat_layer", ".", "call", "(", "output_embeds", ")", "\n", "\n", "highway_layer", "=", "HighwayLayer", "(", "self", ".", "args", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "args", ".", "layer_dims", "[", "i", "+", "1", "]", ",", "\n", "dropout_rate", "=", "self", ".", "args", ".", "dropout", ")", "\n", "output_embeds", "=", "highway_layer", ".", "call", "(", "two_output_embeds", ",", "one_output_embeds", ")", "\n", "", "else", ":", "\n", "                ", "output_embeds", "=", "one_output_embeds", "\n", "\n", "", "layers_outputs", ".", "append", "(", "output_embeds", ")", "\n", "\n", "", "self", ".", "one_hop_layers", "=", "one_layers", "\n", "self", ".", "two_hop_layers", "=", "two_layers", "\n", "self", ".", "output_embeds_list", "=", "layers_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_loss": [[805, 828], ["list", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "list.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.square", "tensorflow.keras.activations.relu", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pos_links", ",", "neg_links", ",", "only_pos", "=", "False", ")", ":", "\n", "        ", "index1", "=", "pos_links", "[", ":", ",", "0", "]", "\n", "index2", "=", "pos_links", "[", ":", ",", "1", "]", "\n", "neg_index1", "=", "neg_links", "[", ":", ",", "0", "]", "\n", "neg_index2", "=", "neg_links", "[", ":", ",", "1", "]", "\n", "\n", "embeds_list", "=", "list", "(", ")", "\n", "for", "output_embeds", "in", "self", ".", "output_embeds_list", "+", "[", "self", ".", "init_embedding", "]", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "output_embeds", "=", "tf", ".", "concat", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index2", ",", "tf", ".", "int32", ")", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", ")", "\n", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "neg_index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "neg_index2", ",", "tf", ".", "int32", ")", ")", "\n", "neg_distance", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "keras", ".", "activations", ".", "relu", "(", "self", ".", "args", ".", "neg_margin", "-", "neg_distance", ")", ")", "\n", "\n", "return", "pos_loss", "+", "self", ".", "args", ".", "neg_margin_balance", "*", "neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_pos_loss": [[829, 845], ["list", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "list.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_pos_loss", "(", "self", ",", "pos_links", ")", ":", "\n", "        ", "index1", "=", "pos_links", "[", ":", ",", "0", "]", "\n", "index2", "=", "pos_links", "[", ":", ",", "1", "]", "\n", "\n", "embeds_list", "=", "list", "(", ")", "\n", "for", "output_embeds", "in", "self", ".", "output_embeds_list", "+", "[", "self", ".", "init_embedding", "]", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "output_embeds", "=", "tf", ".", "concat", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "index2", ",", "tf", ".", "int32", ")", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", ")", "\n", "\n", "return", "pos_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_rel_loss": [[846, 861], ["list", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "list.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_rel_loss", "(", "self", ",", "hs", ",", "ts", ")", ":", "\n", "        ", "embeds_list", "=", "list", "(", ")", "\n", "for", "output_embeds", "in", "self", ".", "output_embeds_list", "+", "[", "self", ".", "init_embedding", "]", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "output_embeds", "=", "tf", ".", "concat", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "h_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "hs", ",", "tf", ".", "int32", ")", ")", "\n", "t_embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "tf", ".", "cast", "(", "ts", ",", "tf", ".", "int32", ")", ")", "\n", "r_temp_embeds", "=", "tf", ".", "reshape", "(", "h_embeds", "-", "t_embeds", ",", "[", "-", "1", ",", "self", ".", "rel_win_size", ",", "output_embeds", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "r_temp_embeds", "=", "tf", ".", "reduce_mean", "(", "r_temp_embeds", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "r_embeds", "=", "tf", ".", "tile", "(", "r_temp_embeds", ",", "[", "1", ",", "self", ".", "rel_win_size", ",", "1", "]", ")", "\n", "r_embeds", "=", "tf", ".", "reshape", "(", "r_embeds", ",", "[", "-", "1", ",", "output_embeds", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "r_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "r_embeds", ",", "1", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "h_embeds", "-", "t_embeds", "-", "r_embeds", ")", ",", "1", ")", ")", "*", "self", ".", "args", ".", "rel_param", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._generate_graph": [[862, 868], ["tensorflow.placeholder", "tensorflow.placeholder", "alinet.AliNet._define_model", "alinet.AliNet.compute_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._define_model", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_loss"], ["", "def", "_generate_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "pos_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "3", "]", ",", "name", "=", "\"pos\"", ")", "\n", "self", ".", "neg_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "'neg'", ")", "\n", "self", ".", "_define_model", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "compute_loss", "(", "self", ".", "pos_links", ",", "self", ".", "neg_links", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._generate_semi_graph": [[869, 873], ["tensorflow.placeholder", "alinet.AliNet.compute_pos_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.compute_pos_loss"], ["", "def", "_generate_semi_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_pos_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "\"new_pos\"", ")", "\n", "self", ".", "semi_loss", "=", "self", ".", "compute_pos_loss", "(", "self", ".", "new_pos_links", ")", "\n", "self", ".", "semi_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "semi_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._generate_rel_graph": [[874, 883], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "alinet.AliNet._define_model", "tensorflow.train.AdamOptimizer().minimize", "alinet.AliNet.compute_loss", "alinet.AliNet.compute_rel_loss", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._define_model", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.compute_rel_loss"], ["", "def", "_generate_rel_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "rel_pos_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "3", "]", ",", "name", "=", "\"pos\"", ")", "\n", "self", ".", "rel_neg_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "'neg'", ")", "\n", "self", ".", "hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "\"hs\"", ")", "\n", "self", ".", "ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'ts'", ")", "\n", "self", ".", "_define_model", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "compute_loss", "(", "self", ".", "rel_pos_links", ",", "self", ".", "rel_neg_links", ")", "+", "self", ".", "compute_rel_loss", "(", "self", ".", "hs", ",", "self", ".", "ts", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.augment": [[884, 898], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "print", "openea.modules.finding.similarity.sim", "scipy.special.expit", "scipy.special.expit", "scipy.special.expit", "scipy.special.expit", "print", "openea.modules.bootstrapping.alignment_finder.find_alignment", "numpy.array.eval", "numpy.array.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.find_alignment"], ["", "def", "augment", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "print", "(", "\"calculate sim mat...\"", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "sim_mat", "=", "scipy", ".", "special", ".", "expit", "(", "sim_mat", ")", "\n", "th", "=", "self", ".", "sim_th", "\n", "print", "(", "\"sim th:\"", ",", "th", ")", "\n", "pair_index", "=", "find_alignment", "(", "sim_mat", ",", "th", ",", "1", ")", "\n", "return", "pair_index", ",", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.augment_neighborhood": [[899, 920], ["alinet.AliNet.augment", "alinet.update_labeled_alignment_x", "alinet.update_labeled_alignment_y", "set", "alinet.enhance_triples", "alinet.remove_unlinked_triples", "alinet.no_weighted_adj", "list", "layer.update_adj", "len", "len", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.augment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_x", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_y", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.enhance_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.no_weighted_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.GraphConvolution.update_adj"], ["", "def", "augment_neighborhood", "(", "self", ")", ":", "\n", "        ", "pair_index", ",", "sim_mat", "=", "self", ".", "augment", "(", ")", "\n", "if", "pair_index", "is", "None", "or", "len", "(", "pair_index", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "self", ".", "new_links", "=", "update_labeled_alignment_x", "(", "self", ".", "new_links", ",", "pair_index", ",", "sim_mat", ")", "\n", "self", ".", "new_links", "=", "update_labeled_alignment_y", "(", "self", ".", "new_links", ",", "sim_mat", ")", "\n", "new_sup_ent1", "=", "[", "self", ".", "ref_ent1", "[", "i", "]", "for", "i", ",", "_", ",", "in", "self", ".", "new_links", "]", "\n", "new_sup_ent2", "=", "[", "self", ".", "ref_ent2", "[", "i", "]", "for", "_", ",", "i", ",", "in", "self", ".", "new_links", "]", "\n", "self", ".", "new_sup_links_set", "=", "set", "(", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", ")", "\n", "if", "new_sup_ent1", "is", "None", "or", "len", "(", "new_sup_ent1", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "enhanced_triples1", ",", "enhanced_triples2", "=", "enhance_triples", "(", "self", ".", "kg1", ",", "self", ".", "kg2", ",", "self", ".", "sup_ent1", "+", "new_sup_ent1", ",", "\n", "self", ".", "sup_ent2", "+", "new_sup_ent2", ")", "\n", "self", ".", "new_edges1", "=", "enhanced_triples1", "\n", "self", ".", "new_edges2", "=", "enhanced_triples2", "\n", "triples", "=", "self", ".", "kg1", ".", "triple_list", "+", "self", ".", "kg2", ".", "triple_list", "+", "list", "(", "self", ".", "new_edges1", ")", "+", "list", "(", "self", ".", "new_edges2", ")", "\n", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "self", ".", "linked_ents", ")", "\n", "one_adj", ",", "_", "=", "no_weighted_adj", "(", "self", ".", "kgs", ".", "entities_num", ",", "triples", ",", "is_two_adj", "=", "False", ")", "\n", "adj", "=", "[", "one_adj", "]", "\n", "for", "layer", "in", "self", ".", "one_hop_layers", ":", "\n", "            ", "layer", ".", "update_adj", "(", "adj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.augment_training_data": [[921, 934], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "openea.modules.finding.similarity.sim", "openea.approaches.bootea.bootstrapping", "numpy.array.eval", "numpy.array.eval", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping"], ["", "", "def", "augment_training_data", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ")", "\n", "# sim_mat = sim(embeds1, embeds2, csls_k=self.args.csls)", "\n", "self", ".", "labeled_align", ",", "new_sup_ent1", ",", "new_sup_ent2", "=", "bootstrapping", "(", "sim_mat", ",", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "\n", "self", ".", "labeled_align", ",", "self", ".", "args", ".", "sim_th", ",", "\n", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "new_sup_links", "=", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.eval_ref_sim_mat": [[935, 944], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "openea.modules.finding.similarity.sim", "numpy.array.eval", "numpy.array.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim"], ["", "def", "eval_ref_sim_mat", "(", "self", ",", "csls", "=", "0", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "output_embeds_list", "[", "-", "1", "]", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "csls_k", "=", "csls", ")", "\n", "return", "sim_mat", "\n", "# embeds1 = tf.nn.embedding_lookup(self.output_embeds_list[-1], self.ref_ent1)", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._eval_valid_embeddings": [[952, 976], ["numpy.concatenate", "numpy.concatenate", "len", "list", "list", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "embeds_list1.append", "embeds_list2.append", "alinet.AliNet.mapping_mat.eval", "numpy.array.eval", "numpy.array.eval"], "methods", ["None"], ["", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "kgs", ".", "valid_links", ")", ">", "0", ":", "\n", "            ", "ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "\n", "ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "", "else", ":", "\n", "            ", "ent1", "=", "self", ".", "kgs", ".", "test_entities1", "\n", "ent2", "=", "self", ".", "kgs", ".", "test_entities2", "\n", "", "embeds_list1", ",", "embeds_list2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "input_embeds", "=", "self", ".", "init_embedding", "\n", "output_embeds_list", "=", "self", ".", "output_embeds_list", "\n", "for", "output_embeds", "in", "[", "input_embeds", "]", "+", "output_embeds_list", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds_list1", ".", "append", "(", "embeds1", ")", "\n", "embeds_list2", ".", "append", "(", "embeds2", ")", "\n", "", "embeds1", "=", "np", ".", "concatenate", "(", "embeds_list1", ",", "axis", "=", "1", ")", "\n", "embeds2", "=", "np", ".", "concatenate", "(", "embeds_list2", ",", "axis", "=", "1", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet._eval_test_embeddings": [[977, 997], ["numpy.concatenate", "numpy.concatenate", "list", "list", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "embeds_list1.append", "embeds_list2.append", "alinet.AliNet.mapping_mat.eval", "numpy.array.eval", "numpy.array.eval"], "methods", ["None"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "ent1", "=", "self", ".", "kgs", ".", "test_entities1", "\n", "ent2", "=", "self", ".", "kgs", ".", "test_entities2", "\n", "embeds_list1", ",", "embeds_list2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "input_embeds", "=", "self", ".", "init_embedding", "\n", "output_embeds_list", "=", "self", ".", "output_embeds_list", "\n", "for", "output_embeds", "in", "[", "input_embeds", "]", "+", "output_embeds_list", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds", ",", "ent2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds_list1", ".", "append", "(", "embeds1", ")", "\n", "embeds_list2", ".", "append", "(", "embeds2", ")", "\n", "", "embeds1", "=", "np", ".", "concatenate", "(", "embeds_list1", ",", "axis", "=", "1", ")", "\n", "embeds2", "=", "np", ".", "concatenate", "(", "embeds_list2", ",", "axis", "=", "1", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.save": [[998, 1008], ["list", "numpy.concatenate", "openea.save_embeddings", "tensorflow.nn.l2_normalize", "numpy.array", "list.append", "numpy.array.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "embeds_list", "=", "list", "(", ")", "\n", "input_embeds", "=", "self", ".", "init_embedding", "\n", "output_embeds_list", "=", "self", ".", "output_embeds_list", "\n", "for", "output_embeds", "in", "[", "input_embeds", "]", "+", "output_embeds_list", ":", "\n", "            ", "output_embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "output_embeds", ",", "1", ")", "\n", "output_embeds", "=", "np", ".", "array", "(", "output_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds_list", ".", "append", "(", "output_embeds", ")", "\n", "", "ent_embeds", "=", "np", ".", "concatenate", "(", "embeds_list", ",", "axis", "=", "1", ")", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "None", ",", "None", ",", "mapping_mat", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_input_batch": [[1013, 1038], ["numpy.random.choice", "list", "numpy.array", "len", "len", "len", "list", "list", "range", "numpy.array.extend", "range", "set", "list", "list.extend", "list.extend", "random.sample", "numpy.array.extend", "random.sample", "numpy.array.extend", "random.sample", "random.sample", "neighbors1.get", "neighbors2.get", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample"], ["", "def", "generate_input_batch", "(", "self", ",", "batch_size", ",", "neighbors1", "=", "None", ",", "neighbors2", "=", "None", ")", ":", "\n", "        ", "if", "batch_size", ">", "len", "(", "self", ".", "sup_ent1", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "self", ".", "sup_ent1", ")", "\n", "", "index", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "sup_ent1", ")", ",", "batch_size", ")", "\n", "pos_links", "=", "self", ".", "sup_links", "[", "index", ",", "]", "\n", "neg_links", "=", "list", "(", ")", "\n", "if", "neighbors1", "is", "None", ":", "\n", "            ", "neg_ent1", "=", "list", "(", ")", "\n", "neg_ent2", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "neg_triple_num", ")", ":", "\n", "                ", "neg_ent1", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "sup_ent1", "+", "self", ".", "ref_ent1", ",", "batch_size", ")", ")", "\n", "neg_ent2", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "sup_ent2", "+", "self", ".", "ref_ent2", ",", "batch_size", ")", ")", "\n", "", "neg_links", ".", "extend", "(", "[", "(", "neg_ent1", "[", "i", "]", ",", "neg_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "neg_ent1", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "e1", "=", "pos_links", "[", "i", ",", "0", "]", "\n", "candidates", "=", "random", ".", "sample", "(", "neighbors1", ".", "get", "(", "e1", ")", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "neg_links", ".", "extend", "(", "[", "(", "e1", ",", "candidate", ")", "for", "candidate", "in", "candidates", "]", ")", "\n", "e2", "=", "pos_links", "[", "i", ",", "1", "]", "\n", "candidates", "=", "random", ".", "sample", "(", "neighbors2", ".", "get", "(", "e2", ")", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "neg_links", ".", "extend", "(", "[", "(", "candidate", ",", "e2", ")", "for", "candidate", "in", "candidates", "]", ")", "\n", "", "", "neg_links", "=", "set", "(", "neg_links", ")", "-", "self", ".", "sup_links_set", "\n", "neg_links", "=", "neg_links", "-", "self", ".", "new_sup_links_set", "\n", "neg_links", "=", "np", ".", "array", "(", "list", "(", "neg_links", ")", ")", "\n", "return", "pos_links", ",", "neg_links", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_rel_batch": [[1039, 1048], ["alinet.AliNet.rel_ht_dict.items", "list", "list", "list", "random.choice", "hs.append", "ts.append", "rs.append", "range"], "methods", ["None"], ["", "def", "generate_rel_batch", "(", "self", ")", ":", "\n", "        ", "hs", ",", "rs", ",", "ts", "=", "list", "(", ")", ",", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "r", ",", "hts", "in", "self", ".", "rel_ht_dict", ".", "items", "(", ")", ":", "\n", "            ", "hts_batch", "=", "[", "random", ".", "choice", "(", "hts", ")", "for", "_", "in", "range", "(", "self", ".", "rel_win_size", ")", "]", "\n", "for", "h", ",", "t", "in", "hts_batch", ":", "\n", "                ", "hs", ".", "append", "(", "h", ")", "\n", "ts", ".", "append", "(", "t", ")", "\n", "rs", ".", "append", "(", "r", ")", "\n", "", "", "return", "hs", ",", "rs", ",", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.find_neighbors": [[1049, 1070], ["time.time", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.array", "numpy.array", "int", "print", "alinet.generate_neighbours", "alinet.generate_neighbours", "print", "numpy.array.eval", "numpy.array.eval", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "find_neighbors", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "truncated_epsilon", "<=", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "output_embeds_list", "=", "self", ".", "output_embeds_list", "\n", "ents1", "=", "self", ".", "sup_ent1", "+", "self", ".", "ref_ent1", "\n", "ents2", "=", "self", ".", "sup_ent2", "+", "self", ".", "ref_ent2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "ents1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "output_embeds_list", "[", "-", "1", "]", ",", "ents2", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "embeds1", "=", "np", ".", "array", "(", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "num", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "len", "(", "ents1", ")", ")", "\n", "print", "(", "\"neighbors num\"", ",", "num", ")", "\n", "neighbors1", "=", "generate_neighbours", "(", "embeds1", ",", "ents1", ",", "embeds2", ",", "ents2", ",", "num", ",", "\n", "threads_num", "=", "self", ".", "args", ".", "test_threads_num", ")", "\n", "neighbors2", "=", "generate_neighbours", "(", "embeds2", ",", "ents2", ",", "embeds1", ",", "ents1", ",", "num", ",", "\n", "threads_num", "=", "self", ".", "args", ".", "test_threads_num", ")", "\n", "print", "(", "'finding neighbors for sampling costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "neighbors1", ",", "neighbors2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.launch_alinet_training_k_repo": [[1071, 1095], ["range", "time.time", "range", "print", "alinet.AliNet.generate_input_batch", "alinet.AliNet.generate_rel_batch", "alinet.AliNet.session.run", "alinet.AliNet.session.run", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_input_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_rel_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_alinet_training_k_repo", "(", "self", ",", "iter", ",", "iter_nums", ",", "steps", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch", "=", "(", "iter", "-", "1", ")", "*", "iter_nums", "+", "i", "\n", "epoch_loss", "=", "0.0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", "=", "self", ".", "generate_input_batch", "(", "self", ".", "args", ".", "batch_size", ",", "\n", "neighbors1", "=", "neighbors1", ",", "\n", "neighbors2", "=", "neighbors2", ")", "\n", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "loss", ",", "\"optimizer\"", ":", "self", ".", "optimizer", "}", "\n", "if", "self", ".", "args", ".", "rel_param", ">", "0", ":", "\n", "                    ", "hs", ",", "_", ",", "ts", "=", "self", ".", "generate_rel_batch", "(", ")", "\n", "feed_dict", "=", "{", "self", ".", "rel_pos_links", ":", "self", ".", "pos_link_batch", ",", "\n", "self", ".", "rel_neg_links", ":", "self", ".", "neg_link_batch", ",", "\n", "self", ".", "hs", ":", "hs", ",", "\n", "self", ".", "ts", ":", "ts", "}", "\n", "results", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "                    ", "feed_dict", "=", "{", "self", ".", "pos_links", ":", "self", ".", "pos_link_batch", ",", "\n", "self", ".", "neg_links", ":", "self", ".", "neg_link_batch", "}", "\n", "results", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "batch_loss", "=", "results", "[", "\"loss\"", "]", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "print", "(", "'epoch {}, loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.run": [[1096, 1148], ["range", "joblib.dump", "len", "time.time", "range", "print", "alinet.AliNet.generate_input_batch", "openea.modules.finding.evaluation.early_stop", "alinet.AliNet.find_neighbors", "alinet.AliNet.generate_rel_batch", "alinet.AliNet.session.run", "alinet.AliNet.session.run", "alinet.AliNet.valid", "print", "time.time", "alinet.AliNet.augment_training_data", "math.ceil", "range", "len", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "seed_performance.append", "alinet.AliNet.session.run", "len", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_input_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.find_neighbors", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.generate_rel_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.augment_training_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "flag1", "=", "0", "\n", "flag2", "=", "0", "\n", "steps", "=", "len", "(", "self", ".", "sup_ent2", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "seed_performance", "=", "[", "]", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0.0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "self", ".", "pos_link_batch", ",", "self", ".", "neg_link_batch", "=", "self", ".", "generate_input_batch", "(", "self", ".", "args", ".", "batch_size", ",", "\n", "neighbors1", "=", "neighbors1", ",", "\n", "neighbors2", "=", "neighbors2", ")", "\n", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "loss", ",", "\"optimizer\"", ":", "self", ".", "optimizer", "}", "\n", "if", "self", ".", "args", ".", "rel_param", ">", "0", ":", "\n", "                    ", "hs", ",", "_", ",", "ts", "=", "self", ".", "generate_rel_batch", "(", ")", "\n", "feed_dict", "=", "{", "self", ".", "rel_pos_links", ":", "self", ".", "pos_link_batch", ",", "\n", "self", ".", "rel_neg_links", ":", "self", ".", "neg_link_batch", ",", "\n", "self", ".", "hs", ":", "hs", ",", "\n", "self", ".", "ts", ":", "ts", "}", "\n", "results", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "                    ", "feed_dict", "=", "{", "self", ".", "pos_links", ":", "self", ".", "pos_link_batch", ",", "\n", "self", ".", "neg_links", ":", "self", ".", "neg_link_batch", "}", "\n", "results", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "batch_loss", "=", "results", "[", "\"loss\"", "]", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "print", "(", "'epoch {}, loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "epoch", "%", "self", ".", "args", ".", "eval_freq", "==", "0", "and", "epoch", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "flag1", ",", "flag2", ",", "is_stop", "=", "early_stop", "(", "flag1", ",", "flag2", ",", "flag", ")", "\n", "if", "is_stop", ":", "\n", "                    ", "print", "(", "\"\\n == training stop == \\n\"", ")", "\n", "break", "\n", "", "neighbors1", ",", "neighbors2", "=", "self", ".", "find_neighbors", "(", ")", "\n", "if", "epoch", ">=", "self", ".", "args", ".", "start_augment", "*", "self", ".", "args", ".", "eval_freq", ":", "\n", "                    ", "if", "self", ".", "args", ".", "sim_th", ">", "0.0", ":", "\n", "# self.augment_neighborhood()", "\n", "                        ", "self", ".", "augment_training_data", "(", ")", "\n", "if", "len", "(", "self", ".", "labeled_align", ")", "!=", "0", ":", "\n", "                            ", "p", ",", "r", ",", "f", "=", "check_alignment_f1", "(", "self", ".", "labeled_align", ",", "context", "=", "\"after AliNet\"", ",", "\n", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "seed_performance", ".", "append", "(", "(", "p", ",", "r", ",", "f", ")", ")", "\n", "", "boot_steps", "=", "math", ".", "ceil", "(", "(", "len", "(", "self", ".", "new_sup_links", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "semi_loss", ",", "\"optimizer\"", ":", "self", ".", "semi_optimizer", "}", "\n", "for", "s", "in", "range", "(", "boot_steps", ")", ":", "\n", "                            ", "feed_dict", "=", "{", "self", ".", "new_pos_links", ":", "self", ".", "new_sup_links", "[", "s", "*", "self", ".", "args", ".", "batch_size", ":", "min", "(", "(", "s", "+", "1", ")", "*", "\n", "self", ".", "args", ".", "batch_size", ",", "len", "(", "self", ".", "new_sup_links", ")", ")", "]", "}", "\n", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "", "", "", "joblib", ".", "dump", "(", "seed_performance", ",", "self", ".", "args", ".", "save_suffix", "+", "'_alinet_seed_performance'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.sparse_to_tuple": [[30, 45], ["isinstance", "numpy.vstack().transpose", "range", "alinet.sparse_to_tuple.to_tuple"], "function", ["None"], ["def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.normalize_adj": [[47, 55], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.preprocess_adj": [[57, 61], ["alinet.normalize_adj", "alinet.sparse_to_tuple", "scipy.eye"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Preprocessing of adjacency matrix for simple GCN gnn and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.chebyshev_polynomials": [[63, 81], ["print", "alinet.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "alinet.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "alinet.chebyshev_polynomials.chebyshev_recurrence"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "chebyshev_polynomials", "(", "adj", ",", "k", ")", ":", "\n", "    ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "adj_normalized", "=", "normalize_adj", "(", "adj", ")", "\n", "laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj_normalized", "\n", "largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "        ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "        ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "", "return", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.func": [[83, 97], ["head[].add", "len"], "function", ["None"], ["", "def", "func", "(", "triples", ")", ":", "\n", "    ", "head", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "0", "]", ")", "\n", "", "", "r2f", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "        ", "r2f", "[", "r", "]", "=", "len", "(", "head", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2f", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.ifunc": [[99, 113], ["tail[].add", "len"], "function", ["None"], ["", "def", "ifunc", "(", "triples", ")", ":", "\n", "    ", "tail", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "2", "]", "}", "\n", "", "else", ":", "\n", "            ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "2", "]", ")", "\n", "", "", "r2if", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "        ", "r2if", "[", "r", "]", "=", "len", "(", "tail", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2if", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.get_weighted_adj": [[115, 139], ["alinet.func", "alinet.ifunc", "numpy.array", "scipy.coo_matrix", "row.append", "col.append", "np.array.append", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.func", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.ifunc"], ["", "def", "get_weighted_adj", "(", "e", ",", "triples", ")", ":", "\n", "    ", "r2f", "=", "func", "(", "triples", ")", "\n", "r2if", "=", "ifunc", "(", "triples", ")", "\n", "M", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "        ", "if", "tri", "[", "0", "]", "==", "tri", "[", "2", "]", ":", "\n", "            ", "continue", "\n", "", "if", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "not", "in", "M", ":", "\n", "            ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "+=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "if", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "not", "in", "M", ":", "\n", "            ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "+=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "for", "key", "in", "M", ":", "\n", "        ", "row", ".", "append", "(", "key", "[", "1", "]", ")", "\n", "col", ".", "append", "(", "key", "[", "0", "]", ")", "\n", "data", ".", "append", "(", "M", "[", "key", "]", ")", "\n", "", "data", "=", "np", ".", "array", "(", "data", ",", "dtype", "=", "'float32'", ")", "\n", "return", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "e", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_rel_ht": [[141, 148], ["dict", "dict.get", "rel_ht_dict.get.append", "list"], "function", ["None"], ["", "def", "generate_rel_ht", "(", "triples", ")", ":", "\n", "    ", "rel_ht_dict", "=", "dict", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "hts", "=", "rel_ht_dict", ".", "get", "(", "r", ",", "list", "(", ")", ")", "\n", "hts", ".", "append", "(", "(", "h", ",", "t", ")", ")", "\n", "rel_ht_dict", "[", "r", "]", "=", "hts", "\n", "", "return", "rel_ht_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.diag_adj": [[150, 156], ["numpy.array().flatten", "scipy.diags", "alinet.sparse_to_tuple", "sp.diags.dot", "numpy.array", "numpy.isinf", "adj.sum"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "def", "diag_adj", "(", "adj", ")", ":", "\n", "    ", "d", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", ".", "flatten", "(", ")", "\n", "d_inv", "=", "1.", "/", "d", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0", "\n", "d_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "return", "sparse_to_tuple", "(", "d_inv", ".", "dot", "(", "adj", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.no_weighted_adj": [[158, 208], ["time.time", "dict", "list", "list", "range", "len", "numpy.ones", "scipy.coo_matrix", "alinet.preprocess_adj", "print", "dict", "list", "list", "dict.items", "numpy.ones", "scipy.coo_matrix", "alinet.preprocess_adj", "print", "edge[].add", "edge[].add", "len", "list.extend", "list.extend", "len", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "dict.keys", "set", "time.time", "time.time", "numpy.ones", "expend_edge[].add", "len", "list.append", "list.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.preprocess_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.preprocess_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["", "def", "no_weighted_adj", "(", "total_ent_num", ",", "triple_list", ",", "is_two_adj", "=", "False", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triple_list", ":", "\n", "        ", "if", "item", "[", "0", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "if", "item", "[", "2", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "2", "]", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item", "[", "0", "]", "]", ".", "add", "(", "item", "[", "2", "]", ")", "\n", "edge", "[", "item", "[", "2", "]", "]", ".", "add", "(", "item", "[", "0", "]", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "total_ent_num", ")", ":", "\n", "        ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "np", ".", "ones", "(", "data_len", ")", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_ent_num", ",", "total_ent_num", ")", ")", "\n", "one_adj", "=", "preprocess_adj", "(", "one_adj", ")", "\n", "print", "(", "'generating one-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "not", "is_two_adj", ":", "\n", "        ", "return", "one_adj", ",", "None", "\n", "", "expend_edge", "=", "dict", "(", ")", "\n", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "temp_len", "=", "0", "\n", "for", "key", ",", "values", "in", "edge", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "expend_edge", ".", "keys", "(", ")", ":", "\n", "            ", "expend_edge", "[", "key", "]", "=", "set", "(", ")", "\n", "", "for", "value", "in", "values", ":", "\n", "            ", "add_value", "=", "edge", "[", "value", "]", "\n", "for", "item", "in", "add_value", ":", "\n", "                ", "if", "item", "not", "in", "values", "and", "item", "!=", "key", ":", "\n", "                    ", "expend_edge", "[", "key", "]", ".", "add", "(", "item", ")", "\n", "no_len", "=", "len", "(", "expend_edge", "[", "key", "]", ")", "\n", "if", "temp_len", "!=", "no_len", ":", "\n", "                        ", "row", ".", "append", "(", "key", ")", "\n", "col", ".", "append", "(", "item", ")", "\n", "", "temp_len", "=", "no_len", "\n", "", "", "", "", "data", "=", "np", ".", "ones", "(", "len", "(", "row", ")", ")", "\n", "two_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_ent_num", ",", "total_ent_num", ")", ")", "\n", "two_adj", "=", "preprocess_adj", "(", "two_adj", ")", "\n", "print", "(", "'generating one- and two-adj costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "one_adj", ",", "two_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples": [[210, 218], ["print", "set", "print", "list", "len", "len", "set.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "remove_unlinked_triples", "(", "triples", ",", "linked_ents", ")", ":", "\n", "    ", "print", "(", "\"before removing unlinked triples:\"", ",", "len", "(", "triples", ")", ")", "\n", "new_triples", "=", "set", "(", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "        ", "if", "h", "in", "linked_ents", "and", "t", "in", "linked_ents", ":", "\n", "            ", "new_triples", ".", "add", "(", "(", "h", ",", "r", ",", "t", ")", ")", "\n", "", "", "print", "(", "\"after removing unlinked triples:\"", ",", "len", "(", "new_triples", ")", ")", "\n", "return", "list", "(", "new_triples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_2hop_triples": [[220, 258], ["numpy.array", "pandas.DataFrame", "pandas.merge", "set", "dict", "pd.merge.iterrows", "print", "print", "sorted", "int", "set", "range", "print", "set", "print", "alinet.remove_unlinked_triples", "len", "len", "sorted.items", "len", "set.add", "len", "len", "set.add", "len", "set.add", "set.add", "kg.out_related_ents_dict.get", "kg.in_related_ents_dict.get", "sorted.get", "set", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.remove_unlinked_triples"], ["", "def", "generate_2hop_triples", "(", "kg", ",", "linked_ents", "=", "None", ")", ":", "\n", "    ", "triples", "=", "kg", ".", "triples", "\n", "if", "linked_ents", "is", "not", "None", ":", "\n", "        ", "triples", "=", "remove_unlinked_triples", "(", "triples", ",", "linked_ents", ")", "\n", "", "triple_df", "=", "np", ".", "array", "(", "[", "[", "tr", "[", "0", "]", ",", "tr", "[", "1", "]", ",", "tr", "[", "2", "]", "]", "for", "tr", "in", "triples", "]", ")", "\n", "triple_df", "=", "pd", ".", "DataFrame", "(", "triple_df", ",", "columns", "=", "[", "'h'", ",", "'r'", ",", "'t'", "]", ")", "\n", "# print(triple_df)", "\n", "two_hop_triple_df", "=", "pd", ".", "merge", "(", "triple_df", ",", "triple_df", ",", "left_on", "=", "'t'", ",", "right_on", "=", "'h'", ")", "\n", "# print(two_hop_triple_df)", "\n", "two_step_quadruples", "=", "set", "(", ")", "\n", "relation_patterns", "=", "dict", "(", ")", "\n", "for", "index", ",", "row", "in", "two_hop_triple_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "head", "=", "row", "[", "\"h_x\"", "]", "\n", "tail", "=", "row", "[", "\"t_y\"", "]", "\n", "r_x", "=", "row", "[", "\"r_x\"", "]", "\n", "r_y", "=", "row", "[", "'r_y'", "]", "\n", "if", "tail", "not", "in", "kg", ".", "out_related_ents_dict", ".", "get", "(", "head", ",", "set", "(", ")", ")", "and", "head", "not", "in", "kg", ".", "in_related_ents_dict", ".", "get", "(", "tail", ",", "set", "(", ")", ")", ":", "\n", "            ", "relation_patterns", "[", "(", "r_x", ",", "r_y", ")", "]", "=", "relation_patterns", ".", "get", "(", "(", "r_x", ",", "r_y", ")", ",", "0", ")", "+", "1", "\n", "two_step_quadruples", ".", "add", "(", "(", "head", ",", "r_x", ",", "r_y", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"total 2-hop neighbors:\"", ",", "len", "(", "two_step_quadruples", ")", ")", "\n", "print", "(", "\"total 2-hop relation patterns:\"", ",", "len", "(", "relation_patterns", ")", ")", "\n", "relation_patterns", "=", "sorted", "(", "relation_patterns", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "p", "=", "0.05", "\n", "num", "=", "int", "(", "p", "*", "len", "(", "relation_patterns", ")", ")", "\n", "selected_patterns", "=", "set", "(", ")", "\n", "# for i in range(20, num):", "\n", "for", "i", "in", "range", "(", "5", ",", "len", "(", "relation_patterns", ")", ")", ":", "\n", "        ", "pattern", "=", "relation_patterns", "[", "i", "]", "[", "0", "]", "\n", "selected_patterns", ".", "add", "(", "pattern", ")", "\n", "", "print", "(", "\"selected relation patterns:\"", ",", "len", "(", "selected_patterns", ")", ")", "\n", "two_step_triples", "=", "set", "(", ")", "\n", "for", "head", ",", "rx", ",", "ry", ",", "tail", "in", "two_step_quadruples", ":", "\n", "        ", "if", "(", "rx", ",", "ry", ")", "in", "selected_patterns", ":", "\n", "            ", "two_step_triples", ".", "add", "(", "(", "head", ",", "0", ",", "head", ")", ")", "\n", "two_step_triples", ".", "add", "(", "(", "head", ",", "rx", "+", "ry", ",", "tail", ")", ")", "\n", "", "", "print", "(", "\"selected 2-hop neighbors:\"", ",", "len", "(", "two_step_triples", ")", ")", "\n", "return", "two_step_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.transloss_add2hop": [[260, 289], ["set", "alinet.generate_2hop_triples", "alinet.generate_2hop_triples", "dict", "list", "list", "range", "len", "numpy.ones", "scipy.coo_matrix", "alinet.sparse_to_tuple", "edge[].add", "edge[].add", "len", "list.extend", "list.extend", "dict.keys", "set", "dict.keys", "set", "dict.keys", "list", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_2hop_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_2hop_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["", "def", "transloss_add2hop", "(", "kg1", ",", "kg2", ",", "sup_ent1", ",", "sup_ent2", ",", "ref_ent1", ",", "ref_ent2", ",", "total_e_num", ")", ":", "\n", "    ", "linked_ents", "=", "set", "(", "sup_ent1", "+", "sup_ent2", "+", "ref_ent1", "+", "ref_ent2", ")", "\n", "enhanced_triples1", "=", "generate_2hop_triples", "(", "kg1", ",", "linked_ents", "=", "linked_ents", ")", "\n", "enhanced_triples2", "=", "generate_2hop_triples", "(", "kg2", ",", "linked_ents", "=", "linked_ents", ")", "\n", "triples", "=", "enhanced_triples1", "|", "enhanced_triples2", "\n", "edge", "=", "dict", "(", ")", "\n", "for", "item", "in", "triples", ":", "\n", "        ", "if", "item", "[", "0", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "if", "item", "[", "2", "]", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "edge", "[", "item", "[", "2", "]", "]", "=", "set", "(", ")", "\n", "", "edge", "[", "item", "[", "0", "]", "]", ".", "add", "(", "item", "[", "2", "]", ")", "\n", "edge", "[", "item", "[", "2", "]", "]", ".", "add", "(", "item", "[", "0", "]", ")", "\n", "", "row", "=", "list", "(", ")", "\n", "col", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "total_e_num", ")", ":", "\n", "        ", "if", "i", "not", "in", "edge", ".", "keys", "(", ")", ":", "\n", "            ", "continue", "\n", "", "key", "=", "i", "\n", "value", "=", "edge", "[", "key", "]", "\n", "add_key_len", "=", "len", "(", "value", ")", "\n", "add_key", "=", "(", "key", "*", "np", ".", "ones", "(", "add_key_len", ")", ")", ".", "tolist", "(", ")", "\n", "row", ".", "extend", "(", "add_key", ")", "\n", "col", ".", "extend", "(", "list", "(", "value", ")", ")", "\n", "", "data_len", "=", "len", "(", "row", ")", "\n", "data", "=", "np", ".", "ones", "(", "data_len", ")", "\n", "one_adj", "=", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "total_e_num", ",", "total_e_num", ")", ")", "\n", "one_adj", "=", "sparse_to_tuple", "(", "one_adj", ")", "\n", "return", "one_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.get_neighbor_dict": [[291, 300], ["dict", "out_dict.items", "in_dict.items", "dict.get", "set"], "function", ["None"], ["", "def", "get_neighbor_dict", "(", "out_dict", ",", "in_dict", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "out_dict", ".", "items", "(", ")", ":", "\n", "        ", "dic", "[", "key", "]", "=", "value", "\n", "", "for", "key", ",", "value", "in", "in_dict", ".", "items", "(", ")", ":", "\n", "        ", "values", "=", "dic", ".", "get", "(", "key", ",", "set", "(", ")", ")", "\n", "values", "|=", "value", "\n", "dic", "[", "key", "]", "=", "values", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.get_neighbor_counterparts": [[302, 308], ["set", "set.add", "alignment_dic.get"], "function", ["None"], ["", "def", "get_neighbor_counterparts", "(", "neighbors", ",", "alignment_dic", ")", ":", "\n", "    ", "neighbor_counterparts", "=", "set", "(", ")", "\n", "for", "n", "in", "neighbors", ":", "\n", "        ", "if", "n", "in", "alignment_dic", ":", "\n", "            ", "neighbor_counterparts", ".", "add", "(", "alignment_dic", ".", "get", "(", "n", ")", ")", "\n", "", "", "return", "neighbor_counterparts", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment": [[310, 319], ["print", "print", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "check_new_alignment", "(", "aligned_pairs", ",", "context", "=", "\"check align\"", ")", ":", "\n", "    ", "if", "aligned_pairs", "is", "None", "or", "len", "(", "aligned_pairs", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"{}, empty aligned pairs\"", ".", "format", "(", "context", ")", ")", "\n", "return", "\n", "", "num", "=", "0", "\n", "for", "x", ",", "y", "in", "aligned_pairs", ":", "\n", "        ", "if", "x", "==", "y", ":", "\n", "            ", "num", "+=", "1", "\n", "", "", "print", "(", "\"{}, right align: {}/{}={:.3f}\"", ".", "format", "(", "context", ",", "num", ",", "len", "(", "aligned_pairs", ")", ",", "num", "/", "len", "(", "aligned_pairs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.update_labeled_alignment_x": [[321, 344], ["openea.modules.bootstrapping.alignment_finder.check_new_alignment", "dict", "print", "set", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "zip", "dict.keys", "dict.get", "dict.keys", "dict.values", "dict.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "update_labeled_alignment_x", "(", "pre_labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "check_new_alignment", "(", "pre_labeled_alignment", ",", "context", "=", "\"before editing (<-)\"", ")", "\n", "labeled_alignment_dict", "=", "dict", "(", "pre_labeled_alignment", ")", "\n", "n1", ",", "n2", "=", "0", ",", "0", "\n", "for", "i", ",", "j", "in", "curr_labeled_alignment", ":", "\n", "        ", "if", "labeled_alignment_dict", ".", "get", "(", "i", ",", "-", "1", ")", "==", "i", "and", "j", "!=", "i", ":", "\n", "            ", "n2", "+=", "1", "\n", "", "if", "i", "in", "labeled_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pre_j", "=", "labeled_alignment_dict", ".", "get", "(", "i", ")", "\n", "if", "pre_j", "==", "j", ":", "\n", "                ", "continue", "\n", "", "pre_sim", "=", "sim_mat", "[", "i", ",", "pre_j", "]", "\n", "new_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "if", "new_sim", ">=", "pre_sim", ":", "\n", "                ", "if", "pre_j", "==", "i", "and", "j", "!=", "i", ":", "\n", "                    ", "n1", "+=", "1", "\n", "", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "else", ":", "\n", "            ", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "print", "(", "\"update wrongly: \"", ",", "n1", ",", "\"greedy update wrongly: \"", ",", "n2", ")", "\n", "pre_labeled_alignment", "=", "set", "(", "zip", "(", "labeled_alignment_dict", ".", "keys", "(", ")", ",", "labeled_alignment_dict", ".", "values", "(", ")", ")", ")", "\n", "check_new_alignment", "(", "pre_labeled_alignment", ",", "context", "=", "\"after editing (<-)\"", ")", "\n", "return", "pre_labeled_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.update_labeled_alignment_y": [[346, 367], ["dict", "set", "dict.items", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "dict.get", "labeled_alignment_dict.get.add", "set", "len", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment"], ["", "def", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "labeled_alignment_dict", "=", "dict", "(", ")", "\n", "updated_alignment", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "labeled_alignment", ":", "\n", "        ", "i_set", "=", "labeled_alignment_dict", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "labeled_alignment_dict", "[", "j", "]", "=", "i_set", "\n", "", "for", "j", ",", "i_set", "in", "labeled_alignment_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", "==", "1", ":", "\n", "            ", "for", "i", "in", "i_set", ":", "\n", "                ", "updated_alignment", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "sim_mat", "[", "i", ",", "j", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "max_i", "=", "i", "\n", "", "", "updated_alignment", ".", "add", "(", "(", "max_i", ",", "j", ")", ")", "\n", "", "", "check_new_alignment", "(", "updated_alignment", ",", "context", "=", "\"after editing (->)\"", ")", "\n", "return", "updated_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.enhance_triples": [[369, 387], ["print", "dict", "dict", "print", "len", "len", "len", "len", "set", "set", "zip", "zip", "dict.get", "dict.get", "dict.get", "dict.get", "len", "len", "enhanced_triples2.add", "enhanced_triples1.add", "kg2.out_related_ents_dict.get", "kg1.out_related_ents_dict.get", "set", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "enhance_triples", "(", "kg1", ",", "kg2", ",", "ents1", ",", "ents2", ")", ":", "\n", "    ", "assert", "len", "(", "ents1", ")", "==", "len", "(", "ents2", ")", "\n", "print", "(", "\"before enhanced:\"", ",", "len", "(", "kg1", ".", "triples", ")", ",", "len", "(", "kg2", ".", "triples", ")", ")", "\n", "enhanced_triples1", ",", "enhanced_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "links1", "=", "dict", "(", "zip", "(", "ents1", ",", "ents2", ")", ")", "\n", "links2", "=", "dict", "(", "zip", "(", "ents2", ",", "ents1", ")", ")", "\n", "for", "h1", ",", "r1", ",", "t1", "in", "kg1", ".", "triples", ":", "\n", "        ", "h2", "=", "links1", ".", "get", "(", "h1", ",", "None", ")", "\n", "t2", "=", "links1", ".", "get", "(", "t1", ",", "None", ")", "\n", "if", "h2", "is", "not", "None", "and", "t2", "is", "not", "None", "and", "t2", "not", "in", "kg2", ".", "out_related_ents_dict", ".", "get", "(", "h2", ",", "set", "(", ")", ")", ":", "\n", "            ", "enhanced_triples2", ".", "add", "(", "(", "h2", ",", "r1", ",", "t2", ")", ")", "\n", "", "", "for", "h2", ",", "r2", ",", "t2", "in", "kg2", ".", "triples", ":", "\n", "        ", "h1", "=", "links2", ".", "get", "(", "h2", ",", "None", ")", "\n", "t1", "=", "links2", ".", "get", "(", "t2", ",", "None", ")", "\n", "if", "h1", "is", "not", "None", "and", "t1", "is", "not", "None", "and", "t1", "not", "in", "kg1", ".", "out_related_ents_dict", ".", "get", "(", "h1", ",", "set", "(", ")", ")", ":", "\n", "            ", "enhanced_triples1", ".", "add", "(", "(", "h1", ",", "r2", ",", "t1", ")", ")", "\n", "", "", "print", "(", "\"after enhanced:\"", ",", "len", "(", "enhanced_triples1", ")", ",", "len", "(", "enhanced_triples2", ")", ")", "\n", "return", "enhanced_triples1", ",", "enhanced_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout": [[389, 393], ["alinet.sparse_dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "def", "dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ",", "is_sparse", ")", ":", "\n", "    ", "if", "not", "is_sparse", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "drop_rate", ")", "\n", "", "return", "sparse_dropout", "(", "inputs", ",", "drop_rate", ",", "noise_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.sparse_dropout": [[395, 405], ["tensorflow.random.uniform", "tensorflow.cast", "tensorflow.sparse.retain", "tensorflow.floor"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.uniform"], ["", "def", "sparse_dropout", "(", "x", ",", "drop_rate", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"\n    Dropout for sparse tensors.\n    \"\"\"", "\n", "keep_prob", "=", "1", "-", "drop_rate", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random", ".", "uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse", ".", "retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours": [[407, 416], ["openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "dict", "range", "numpy.array", "numpy.array", "len", "alinet.find_neighbours", "openea.modules.utils.util.merge_dic", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.find_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic"], ["", "def", "generate_neighbours", "(", "entity_embeds1", ",", "entity_list1", ",", "entity_embeds2", ",", "entity_list2", ",", "neighbors_num", ",", "threads_num", "=", "4", ")", ":", "\n", "    ", "ent_frags", "=", "task_divide", "(", "np", ".", "array", "(", "entity_list1", ")", ",", "threads_num", ")", "\n", "ent_frag_indexes", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "len", "(", "entity_list1", ")", ")", ")", ",", "threads_num", ")", "\n", "dic", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ent_frags", ")", ")", ":", "\n", "        ", "res", "=", "find_neighbours", "(", "ent_frags", "[", "i", "]", ",", "entity_embeds1", "[", "ent_frag_indexes", "[", "i", "]", ",", ":", "]", ",", "np", ".", "array", "(", "entity_list2", ")", ",", "\n", "entity_embeds2", ",", "neighbors_num", ")", "\n", "dic", "=", "merge_dic", "(", "dic", ",", "res", ")", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.find_neighbours": [[418, 427], ["dict", "numpy.matmul", "range", "numpy.argpartition", "entity_list2[].tolist"], "function", ["None"], ["", "def", "find_neighbours", "(", "frags", ",", "sub_embed1", ",", "entity_list2", ",", "embed2", ",", "k", ")", ":", "\n", "    ", "dic", "=", "dict", "(", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "sub_embed1", ",", "embed2", ".", "T", ")", "\n", "for", "i", "in", "range", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_index", "=", "np", ".", "argpartition", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ",", "k", ")", "\n", "neighbors_index", "=", "sort_index", "[", "0", ":", "k", "]", "\n", "neighbors", "=", "entity_list2", "[", "neighbors_index", "]", ".", "tolist", "(", ")", "\n", "dic", "[", "frags", "[", "i", "]", "]", "=", "neighbors", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE.__init__": [[254, 256], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE.init": [[257, 277], ["imuse.interactive_model", "imuse.IMUSE._define_variables", "imuse.IMUSE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.interactive_model", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "# self.aligned_ent_pair_set = interactive_model(self.kgs, self.args)", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'margin-based'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'SGD'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", "==", "1", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE._define_variables": [[278, 284], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE._define_embed_graph": [[285, 314], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.name_scope", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "self", ".", "aligned_ents1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "aligned_ents2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "ents1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "aligned_ents1", ")", "\n", "ents2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "aligned_ents2", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'align_loss'", ")", ":", "\n", "            ", "self", ".", "align_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "ents1", "-", "ents2", ",", "2", ")", ",", "1", ")", ")", "\n", "self", ".", "align_optimizer", "=", "generate_optimizer", "(", "self", ".", "align_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE.launch_align_training_1epo": [[315, 329], ["time.time", "int", "range", "print", "math.ceil", "list", "imuse.IMUSE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["# def launch_align_training_1epo(self, epoch):", "\n", "#     start = time.time()", "\n", "#     epoch_loss = 0", "\n", "#     trained_samples_num = 0", "\n", "#     steps = int(math.ceil(len(self.aligned_ent_pair_set) / self.args.batch_size))", "\n", "#     for i in range(steps):", "\n", "#         batch_ent_pairs = list(self.aligned_ent_pair_set)", "\n", "#         batch_loss, _ = self.session.run(fetches=[self.align_loss, self.align_optimizer],", "\n", "#                                          feed_dict={self.aligned_ents1: [x[0] for x in batch_ent_pairs],", "\n", "#                                                     self.aligned_ents2: [x[1] for x in batch_ent_pairs]})", "\n", "#         trained_samples_num += len(batch_ent_pairs)", "\n", "#         epoch_loss += batch_loss", "\n", "#     epoch_loss /= trained_samples_num", "\n", "#     print('epoch {}, align learning loss: {:.4f}, time: {:.4f}s'.format(epoch, epoch_loss, time.time() - start))", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE.run": [[330, 346], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "len", "len", "math.ceil", "list", "imuse.IMUSE.launch_triple_training_1epo", "imuse.IMUSE.launch_align_training_1epo", "range", "imuse.IMUSE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.IMUSE.launch_align_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "None", ",", "None", ")", "\n", "# self.launch_align_training_1epo(i)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.interactive_model": [[17, 40], ["time.time", "set", "imuse.get_aligned_attr_pair_by_name_similarity", "print", "print", "len", "imuse.align_entity_by_attributes", "print", "imuse.align_attribute_by_entities", "print", "len", "len", "len", "len", "len", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.get_aligned_attr_pair_by_name_similarity", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_entity_by_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_attribute_by_entities", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "interactive_model", "(", "kgs", ",", "args", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "aligned_ent_pair_set_all", "=", "set", "(", ")", "\n", "i", "=", "0", "\n", "aligned_attr_pair_set_all", "=", "get_aligned_attr_pair_by_name_similarity", "(", "kgs", ",", "0.6", ")", "\n", "print", "(", "'aligned_attr_pair_set:'", ",", "len", "(", "aligned_attr_pair_set_all", ")", ")", "\n", "while", "True", ":", "\n", "        ", "i", "+=", "1", "\n", "aligned_ent_pair_set_iter", "=", "align_entity_by_attributes", "(", "kgs", ",", "aligned_attr_pair_set_all", ",", "args", ".", "sim_thresholds_ent", ")", "\n", "aligned_ent_pair_set_all", "|=", "aligned_ent_pair_set_iter", "\n", "print", "(", "i", ",", "'len(aligned_ent_pair_set_all):'", ",", "len", "(", "aligned_ent_pair_set_all", ")", ",", "'len(aligned_ent_pair_set_iter):'", ",", "\n", "len", "(", "aligned_ent_pair_set_iter", ")", ")", "\n", "if", "i", ">=", "args", ".", "interactive_model_iter_num", ":", "\n", "            ", "break", "\n", "", "aligned_attr_pair_set_iter", "=", "align_attribute_by_entities", "(", "kgs", ",", "aligned_ent_pair_set_all", ",", "\n", "args", ".", "sim_thresholds_attr", ")", "\n", "if", "len", "(", "aligned_attr_pair_set_all", "|", "aligned_attr_pair_set_iter", ")", "==", "len", "(", "aligned_attr_pair_set_all", ")", ":", "\n", "            ", "break", "\n", "", "aligned_attr_pair_set_all", "|=", "aligned_attr_pair_set_iter", "\n", "print", "(", "i", ",", "'len(aligned_attr_pair_set_all):'", ",", "len", "(", "aligned_attr_pair_set_all", ")", ",", "'len(aligned_attr_pair_set_iter):'", ",", "\n", "len", "(", "aligned_attr_pair_set_iter", ")", ")", "\n", "", "print", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "return", "aligned_ent_pair_set_all", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.run_one_ea": [[42, 67], ["set", "set", "ent_attrs_dict_1.items", "ent_attrs_dict_2.items", "set.add", "set.add", "imuse.compute_two_values_similarity"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.compute_two_values_similarity"], ["", "def", "run_one_ea", "(", "ent_attrs_dict_1", ",", "ent_attrs_dict_2", ",", "ent_attr_value_dict_1", ",", "ent_attr_value_dict_2", ",", "sim_thresholds_ent", ",", "\n", "aligned_attr_pair_set", ")", ":", "\n", "    ", "aligned_ent_pair_set_i", "=", "set", "(", ")", "\n", "cnt", "=", "0", "\n", "target_ent_set", "=", "set", "(", ")", "\n", "for", "e1", ",", "attrs1", "in", "ent_attrs_dict_1", ".", "items", "(", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "target_ent", "=", "None", "\n", "sim_max", "=", "sim_thresholds_ent", "\n", "for", "e2", ",", "attrs2", "in", "ent_attrs_dict_2", ".", "items", "(", ")", ":", "\n", "            ", "sim", ",", "sim_cnt", "=", "0", ",", "0", "\n", "for", "(", "a1", ",", "a2", ")", "in", "aligned_attr_pair_set", ":", "\n", "                ", "if", "a1", "in", "attrs1", "and", "a2", "in", "attrs2", ":", "\n", "                    ", "sim", "+=", "compute_two_values_similarity", "(", "ent_attr_value_dict_1", "[", "(", "e1", ",", "a1", ")", "]", ",", "\n", "ent_attr_value_dict_2", "[", "(", "e2", ",", "a2", ")", "]", ")", "\n", "sim_cnt", "+=", "1", "\n", "", "", "if", "sim_cnt", ">", "0", ":", "\n", "                ", "sim", "/=", "sim_cnt", "\n", "", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_ent", "=", "e2", "\n", "sim_max", "=", "sim", "\n", "", "if", "target_ent", "is", "not", "None", "and", "target_ent", "not", "in", "target_ent_set", ":", "\n", "                ", "aligned_ent_pair_set_i", ".", "add", "(", "(", "e1", ",", "target_ent", ")", ")", "\n", "target_ent_set", ".", "add", "(", "target_ent", ")", "\n", "", "", "", "return", "aligned_ent_pair_set_i", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_entity_by_attributes": [[69, 98], ["print", "set", "imuse.filter_by_aligned_attributes", "imuse.filter_by_aligned_attributes", "list", "multiprocessing.Pool", "multiprocessing.Pool", "list", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dict", "set", "len", "set", "set", "ent_attrs_dict_1.keys", "len", "dict", "list.append", "_res.get", "multiprocessing.Pool.apply_async", "dict.items"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "align_entity_by_attributes", "(", "kgs", ",", "aligned_attr_pair_set", ",", "sim_thresholds_ent", ")", ":", "\n", "    ", "print", "(", "'align_entity_by_attributes...'", ")", "\n", "aligned_ent_pair_set", "=", "set", "(", ")", "\n", "if", "len", "(", "aligned_attr_pair_set", ")", "==", "0", ":", "\n", "        ", "return", "aligned_ent_pair_set", "\n", "", "ent_attrs_dict_1", ",", "ent_attr_value_dict_1", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg1", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "a", "for", "(", "a", ",", "_", ")", "in", "aligned_attr_pair_set", "]", ")", ")", "\n", "ent_attrs_dict_2", ",", "ent_attr_value_dict_2", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg2", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "a", "for", "(", "_", ",", "a", ")", "in", "aligned_attr_pair_set", "]", ")", ")", "\n", "ent_set_1", "=", "list", "(", "ent_attrs_dict_1", ".", "keys", "(", ")", ")", "\n", "size", "=", "len", "(", "ent_set_1", ")", "//", "8", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "res", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "if", "i", "==", "7", ":", "\n", "            ", "ent_set_i", "=", "ent_set_1", "[", "size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "ent_set_i", "=", "ent_set_1", "[", "size", "*", "i", ":", "size", "*", "(", "i", "+", "1", ")", "]", "\n", "", "ent_attrs_dict_1_i", "=", "dict", "(", "[", "(", "k", ",", "ent_attrs_dict_1", "[", "k", "]", ")", "for", "k", "in", "ent_set_i", "]", ")", "\n", "res", ".", "append", "(", "pool", ".", "apply_async", "(", "run_one_ea", ",", "(", "ent_attrs_dict_1_i", ",", "ent_attrs_dict_2", ",", "ent_attr_value_dict_1", ",", "\n", "ent_attr_value_dict_2", ",", "sim_thresholds_ent", ",", "aligned_attr_pair_set", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "_res", "in", "res", ":", "\n", "        ", "aligned_ent_pair_set", "|=", "_res", ".", "get", "(", ")", "\n", "", "temp_dict", "=", "dict", "(", "[", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "aligned_ent_pair_set", "]", ")", "\n", "aligned_ent_pair_set", "=", "set", "(", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "temp_dict", ".", "items", "(", ")", "]", ")", "\n", "return", "aligned_ent_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.run_one_ae": [[100, 123], ["set", "set", "attr_ents_dict_1.items", "attr_ents_dict_2.items", "set.add", "set.add", "imuse.compute_two_values_similarity"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.compute_two_values_similarity"], ["", "def", "run_one_ae", "(", "attr_ents_dict_1", ",", "attr_ents_dict_2", ",", "attr_ent_value_dict_1", ",", "attr_ent_value_dict_2", ",", "sim_thresholds_attr", ",", "\n", "aligned_ent_pair_set", ")", ":", "\n", "    ", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "target_attr_set", "=", "set", "(", ")", "\n", "for", "a1", ",", "ents1", "in", "attr_ents_dict_1", ".", "items", "(", ")", ":", "\n", "        ", "target_attr", "=", "None", "\n", "sim_max", "=", "sim_thresholds_attr", "\n", "for", "a2", ",", "ents2", "in", "attr_ents_dict_2", ".", "items", "(", ")", ":", "\n", "            ", "sim", ",", "sim_cnt", "=", "0", ",", "0", "\n", "for", "(", "e1", ",", "e2", ")", "in", "aligned_ent_pair_set", ":", "\n", "                ", "if", "e1", "in", "ents1", "and", "e2", "in", "ents2", ":", "\n", "                    ", "sim", "+=", "compute_two_values_similarity", "(", "attr_ent_value_dict_1", "[", "(", "a1", ",", "e1", ")", "]", ",", "\n", "attr_ent_value_dict_2", "[", "(", "a2", ",", "e2", ")", "]", ")", "\n", "sim_cnt", "+=", "1", "\n", "", "", "if", "sim_cnt", ">", "0", ":", "\n", "                ", "sim", "/=", "sim_cnt", "\n", "", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_attr", "=", "a2", "\n", "sim_max", "=", "sim", "\n", "", "if", "target_attr", "is", "not", "None", "and", "target_attr", "not", "in", "target_attr_set", ":", "\n", "                ", "aligned_attr_pair_set", ".", "add", "(", "(", "a1", ",", "target_attr", ")", ")", "\n", "target_attr_set", ".", "add", "(", "target_attr", ")", "\n", "", "", "", "return", "aligned_attr_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.align_attribute_by_entities": [[125, 154], ["print", "set", "imuse.filter_by_aligned_attributes", "imuse.filter_by_aligned_attributes", "list", "multiprocessing.Pool", "multiprocessing.Pool", "list", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dict", "set", "set", "set", "attr_ents_dict_1.keys", "len", "dict", "list.append", "_res.get", "len", "multiprocessing.Pool.apply_async", "dict.items"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "align_attribute_by_entities", "(", "kgs", ",", "aligned_ent_pair_set", ",", "sim_thresholds_attr", ")", ":", "\n", "    ", "print", "(", "'align_attribute_by_entities...'", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "if", "aligned_ent_pair_set", "is", "None", "or", "len", "(", "aligned_ent_pair_set", ")", "==", "0", ":", "\n", "        ", "return", "aligned_attr_pair_set", "\n", "", "attr_ents_dict_1", ",", "attr_ent_value_dict_1", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg1", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "e", "for", "(", "e", ",", "_", ")", "in", "aligned_ent_pair_set", "]", ")", ")", "\n", "attr_ents_dict_2", ",", "attr_ent_value_dict_2", "=", "filter_by_aligned_attributes", "(", "kgs", ".", "kg2", ".", "attribute_triples_set", ",", "\n", "set", "(", "[", "e", "for", "(", "_", ",", "e", ")", "in", "aligned_ent_pair_set", "]", ")", ")", "\n", "attr_set_1", "=", "list", "(", "attr_ents_dict_1", ".", "keys", "(", ")", ")", "\n", "size", "=", "len", "(", "attr_set_1", ")", "//", "8", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "res", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "if", "i", "==", "7", ":", "\n", "            ", "attr_set_i", "=", "attr_set_1", "[", "size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "attr_set_i", "=", "attr_set_1", "[", "size", "*", "i", ":", "size", "*", "(", "i", "+", "1", ")", "]", "\n", "", "attr_ents_dict_1_i", "=", "dict", "(", "[", "(", "k", ",", "attr_ents_dict_1", "[", "k", "]", ")", "for", "k", "in", "attr_set_i", "]", ")", "\n", "res", ".", "append", "(", "pool", ".", "apply_async", "(", "run_one_ae", ",", "(", "attr_ents_dict_1_i", ",", "attr_ents_dict_2", ",", "attr_ent_value_dict_1", ",", "\n", "attr_ent_value_dict_2", ",", "sim_thresholds_attr", ",", "aligned_ent_pair_set", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "_res", "in", "res", ":", "\n", "        ", "aligned_attr_pair_set", "|=", "_res", ".", "get", "(", ")", "\n", "", "temp_dict", "=", "dict", "(", "[", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "aligned_attr_pair_set", "]", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", "[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "temp_dict", ".", "items", "(", ")", "]", ")", "\n", "return", "aligned_attr_pair_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_attributes": [[156, 167], ["set", "set.add"], "function", ["None"], ["", "def", "filter_by_aligned_attributes", "(", "attr_triples", ",", "attr_set", ")", ":", "\n", "    ", "ent_attrs_dict", ",", "ent_attr_value_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attr_triples", ":", "\n", "        ", "if", "a", "in", "attr_set", "and", "(", "e", ",", "a", ")", "not", "in", "ent_attr_value_dict", ":", "\n", "            ", "ent_attr_value_dict", "[", "(", "e", ",", "a", ")", "]", "=", "v", "\n", "attrs", "=", "set", "(", ")", "\n", "if", "e", "in", "ent_attrs_dict", ":", "\n", "                ", "attrs", "=", "ent_attrs_dict", "[", "e", "]", "\n", "", "attrs", ".", "add", "(", "a", ")", "\n", "ent_attrs_dict", "[", "e", "]", "=", "attrs", "\n", "", "", "return", "ent_attrs_dict", ",", "ent_attr_value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.filter_by_aligned_entities": [[169, 179], ["set"], "function", ["None"], ["", "def", "filter_by_aligned_entities", "(", "attr_triples", ",", "ent_set", ")", ":", "\n", "    ", "attr_ents_dict", ",", "attr_ent_value_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attr_triples", ":", "\n", "        ", "if", "e", "in", "ent_set", "and", "(", "a", ",", "e", ")", "not", "in", "attr_ent_value_dict", ":", "\n", "            ", "attr_ent_value_dict", "[", "(", "a", ",", "e", ")", "]", "=", "v", "\n", "ents", "=", "set", "(", ")", "\n", "if", "a", "in", "attr_ents_dict", ":", "\n", "                ", "ents", "=", "attr_ents_dict", "[", "a", "]", "\n", "", "attr_ents_dict", "[", "e", "]", "=", "ents", "\n", "", "", "return", "attr_ents_dict", ",", "attr_ent_value_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.cal_lcs_sim": [[181, 193], ["len", "len", "range", "float", "first_str.strip", "second_str.strip", "range", "float", "float", "max"], "function", ["None"], ["", "def", "cal_lcs_sim", "(", "first_str", ",", "second_str", ")", ":", "\n", "    ", "len_1", "=", "len", "(", "first_str", ".", "strip", "(", ")", ")", "\n", "len_2", "=", "len", "(", "second_str", ".", "strip", "(", ")", ")", "\n", "len_vv", "=", "[", "[", "0", "]", "*", "(", "len_2", "+", "2", ")", "]", "*", "(", "len_1", "+", "2", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len_1", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len_2", "+", "1", ")", ":", "\n", "            ", "if", "first_str", "[", "i", "-", "1", "]", "==", "second_str", "[", "j", "-", "1", "]", ":", "\n", "                ", "len_vv", "[", "i", "]", "[", "j", "]", "=", "1", "+", "len_vv", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "len_vv", "[", "i", "]", "[", "j", "]", "=", "max", "(", "len_vv", "[", "i", "-", "1", "]", "[", "j", "]", ",", "len_vv", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "float", "(", "float", "(", "len_vv", "[", "len_1", "]", "[", "len_2", "]", "*", "2", ")", "/", "float", "(", "len_1", "+", "len_2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.compute_two_values_similarity": [[195, 199], ["Levenshtein.ratio"], "function", ["None"], ["", "def", "compute_two_values_similarity", "(", "v1", ",", "v2", ")", ":", "\n", "# lcs_sim = cal_lcs_sim(v1, v2)", "\n", "# return lcs_sim/(Levenshtein.ratio(v1, v2)+lcs_sim)*2", "\n", "    ", "return", "Levenshtein", ".", "ratio", "(", "v1", ",", "v2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.imuse.get_aligned_attr_pair_by_name_similarity": [[201, 250], ["imuse.get_aligned_attr_pair_by_name_similarity.turn_id_attr_dict"], "function", ["None"], ["", "def", "get_aligned_attr_pair_by_name_similarity", "(", "kgs", ",", "sim_thresholds_attr", ",", "top_k", "=", "10", ")", ":", "\n", "    ", "def", "turn_id_attr_dict", "(", "attr_id_dict", ")", ":", "\n", "        ", "id_attr_dict", "=", "{", "}", "\n", "for", "a", ",", "i", "in", "attr_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_attr_dict", "[", "i", "]", "=", "a", "\n", "", "return", "id_attr_dict", "\n", "\n", "", "id_attr_dict_1", "=", "turn_id_attr_dict", "(", "kgs", ".", "kg1", ".", "attributes_id_dict", ")", "\n", "id_attr_dict_2", "=", "turn_id_attr_dict", "(", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "aligned_attr_pair_set", "=", "set", "(", ")", "\n", "attr2_set", "=", "set", "(", ")", "\n", "for", "attr1", "in", "kgs", ".", "kg1", ".", "attributes_set", ":", "\n", "        ", "target_attr", "=", "None", "\n", "sim_max", "=", "sim_thresholds_attr", "\n", "attr_str_1", "=", "id_attr_dict_1", "[", "attr1", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "for", "attr2", "in", "kgs", ".", "kg2", ".", "attributes_set", ":", "\n", "            ", "attr_str_2", "=", "id_attr_dict_2", "[", "attr2", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "sim", "=", "Levenshtein", ".", "ratio", "(", "attr_str_1", ",", "attr_str_2", ")", "\n", "if", "sim", ">", "sim_max", ":", "\n", "                ", "target_attr", "=", "attr2", "\n", "sim_max", "=", "sim", "\n", "", "", "if", "target_attr", "is", "not", "None", "and", "target_attr", "not", "in", "attr2_set", ":", "\n", "            ", "aligned_attr_pair_set", ".", "add", "(", "(", "attr1", ",", "target_attr", ")", ")", "\n", "attr2_set", ".", "add", "(", "target_attr", ")", "\n", "\n", "", "", "attr_num_dict_1", ",", "attr_num_dict_2", "=", "{", "}", ",", "{", "}", "\n", "for", "(", "_", ",", "a", ",", "_", ")", "in", "kgs", ".", "kg1", ".", "attribute_triples_set", ":", "\n", "        ", "num", "=", "1", "\n", "if", "a", "in", "attr_num_dict_1", ":", "\n", "            ", "num", "+=", "attr_num_dict_1", "[", "a", "]", "\n", "", "attr_num_dict_1", "[", "a", "]", "=", "num", "\n", "", "for", "(", "_", ",", "a", ",", "_", ")", "in", "kgs", ".", "kg2", ".", "attribute_triples_set", ":", "\n", "        ", "num", "=", "1", "\n", "if", "a", "in", "attr_num_dict_2", ":", "\n", "            ", "num", "+=", "attr_num_dict_2", "[", "a", "]", "\n", "", "attr_num_dict_2", "[", "a", "]", "=", "num", "\n", "", "attr_pair_num_dict", "=", "{", "}", "\n", "for", "(", "a1", ",", "a2", ")", "in", "aligned_attr_pair_set", ":", "\n", "        ", "num", "=", "0", "\n", "if", "a1", "in", "attr_num_dict_1", ":", "\n", "            ", "num", "+=", "attr_num_dict_1", "[", "a1", "]", "\n", "", "if", "a2", "in", "attr_num_dict_2", ":", "\n", "            ", "num", "+=", "attr_num_dict_2", "[", "a2", "]", "\n", "", "attr_pair_num_dict", "[", "(", "a1", ",", "a2", ")", "]", "=", "num", "\n", "", "attr_pair_list", "=", "sorted", "(", "attr_pair_num_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "top_k", ">", "len", "(", "attr_pair_list", ")", ":", "\n", "        ", "top_k", "=", "len", "(", "attr_pair_list", ")", "\n", "", "aligned_attr_pair_set_top", "=", "set", "(", "[", "a_pair", "for", "(", "a_pair", ",", "_", ")", "in", "attr_pair_list", "[", ":", "top_k", "]", "]", ")", "\n", "return", "aligned_attr_pair_set_top", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.__init__": [[349, 351], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.my_lstm_layer": [[352, 390], ["gmnn.LayerUtils.dropout_layer", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.contrib.cudnn_rnn.CudnnLSTM", "tensorflow.contrib.cudnn_rnn.CudnnLSTM.", "tensorflow.transpose", "tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.nn.bidirectional_dynamic_rnn", "tensorflow.concat", "tensorflow.nn.rnn_cell.DropoutWrapper", "tensorflow.nn.rnn_cell.DropoutWrapper"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.dropout_layer"], ["", "def", "my_lstm_layer", "(", "self", ",", "input_reps", ",", "lstm_dim", ",", "input_lengths", "=", "None", ",", "scope_name", "=", "None", ",", "reuse", "=", "False", ",", "is_training", "=", "True", ",", "\n", "dropout_rate", "=", "0.2", ",", "use_cudnn", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: [batch_size, seq_len, feature_dim]\n        :param lstm_dim:\n        :param scope_name:\n        :param reuse:\n        :param is_training:\n        :param dropout_rate:\n        :return:\n        \"\"\"", "\n", "input_reps", "=", "self", ".", "dropout_layer", "(", "input_reps", ",", "dropout_rate", ",", "is_training", "=", "is_training", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope_name", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "use_cudnn", ":", "\n", "                ", "inputs", "=", "tf", ".", "transpose", "(", "input_reps", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "lstm", "=", "tf", ".", "contrib", ".", "cudnn_rnn", ".", "CudnnLSTM", "(", "1", ",", "lstm_dim", ",", "direction", "=", "\"bidirectional\"", ",", "\n", "name", "=", "\"{}_cudnn_bi_lstm\"", ".", "format", "(", "scope_name", ")", ",", "\n", "dropout", "=", "dropout_rate", "if", "is_training", "else", "0", ")", "\n", "outputs", ",", "_", "=", "lstm", "(", "inputs", ")", "\n", "outputs", "=", "tf", ".", "transpose", "(", "outputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "f_rep", "=", "outputs", "[", ":", ",", ":", ",", "0", ":", "lstm_dim", "]", "\n", "b_rep", "=", "outputs", "[", ":", ",", ":", ",", "lstm_dim", ":", "2", "*", "lstm_dim", "]", "\n", "", "else", ":", "\n", "                ", "context_lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "lstm_dim", ")", "\n", "context_lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "lstm_dim", ")", "\n", "if", "is_training", ":", "\n", "                    ", "context_lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "context_lstm_cell_fw", ",", "\n", "output_keep_prob", "=", "(", "1", "-", "dropout_rate", ")", ")", "\n", "context_lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "context_lstm_cell_bw", ",", "\n", "output_keep_prob", "=", "(", "1", "-", "dropout_rate", ")", ")", "\n", "", "context_lstm_cell_fw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "[", "context_lstm_cell_fw", "]", ")", "\n", "context_lstm_cell_bw", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "[", "context_lstm_cell_bw", "]", ")", "\n", "\n", "(", "f_rep", ",", "b_rep", ")", ",", "_", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "context_lstm_cell_fw", ",", "context_lstm_cell_bw", ",", "input_reps", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "sequence_length", "=", "input_lengths", ")", "# [batch_size, question_len, context_lstm_dim]", "\n", "outputs", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "f_rep", ",", "b_rep", "]", ")", "\n", "", "", "return", "f_rep", ",", "b_rep", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.dropout_layer": [[391, 398], ["tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "@", "staticmethod", "\n", "def", "dropout_layer", "(", "input_reps", ",", "dropout_rate", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "if", "is_training", ":", "\n", "            ", "output_repr", "=", "tf", ".", "nn", ".", "dropout", "(", "input_reps", ",", "(", "1", "-", "dropout_rate", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_repr", "=", "input_reps", "\n", "", "return", "output_repr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.cosine_distance": [[399, 410], ["tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.multiply", "tensorflow.tanh", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh"], ["", "@", "staticmethod", "\n", "def", "cosine_distance", "(", "y1", ",", "y2", ",", "cosine_norm", "=", "True", ",", "eps", "=", "1e-6", ")", ":", "\n", "# cosine_norm = True", "\n", "# y1 [....,a, 1, d]", "\n", "# y2 [....,1, b, d]", "\n", "        ", "cosine_numerator", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "y1", ",", "y2", ")", ",", "axis", "=", "-", "1", ")", "\n", "if", "not", "cosine_norm", ":", "\n", "            ", "return", "tf", ".", "tanh", "(", "cosine_numerator", ")", "\n", "", "y1_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y1", ")", ",", "axis", "=", "-", "1", ")", ",", "eps", ")", ")", "\n", "y2_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y2", ")", ",", "axis", "=", "-", "1", ")", ",", "eps", ")", ")", "\n", "return", "cosine_numerator", "/", "y1_norm", "/", "y2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.euclidean_distance": [[411, 415], ["tensorflow.sqrt", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "euclidean_distance", "(", "y1", ",", "y2", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "distance", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y1", "-", "y2", ")", ",", "axis", "=", "-", "1", ")", ",", "eps", ")", ")", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.cross_entropy": [[416, 428], ["tensorflow.subtract", "tensorflow.subtract", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cross_entropy", "(", "logits", ",", "truth", ",", "mask", "=", "None", ")", ":", "\n", "# logits: [batch_size, passage_len]", "\n", "# truth: [batch_size, passage_len]", "\n", "# mask: [batch_size, passage_len]", "\n", "        ", "if", "mask", "is", "not", "None", ":", "logits", "=", "tf", ".", "multiply", "(", "logits", ",", "mask", ")", "\n", "xdev", "=", "tf", ".", "subtract", "(", "logits", ",", "tf", ".", "expand_dims", "(", "tf", ".", "reduce_max", "(", "logits", ",", "1", ")", ",", "-", "1", ")", ")", "\n", "log_predictions", "=", "tf", ".", "subtract", "(", "xdev", ",", "tf", ".", "expand_dims", "(", "tf", ".", "log", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "xdev", ")", ",", "-", "1", ")", ")", ",", "-", "1", ")", ")", "\n", "result", "=", "tf", ".", "multiply", "(", "truth", ",", "log_predictions", ")", "# [batch_size, passage_len]", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "result", "=", "tf", ".", "multiply", "(", "result", ",", "mask", ")", "# [batch_size, passage_len]", "\n", "", "return", "tf", ".", "multiply", "(", "-", "1.0", ",", "tf", ".", "reduce_sum", "(", "result", ",", "-", "1", ")", ")", "# [batch_size]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.projection_layer": [[429, 443], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "activation_func", "tensorflow.nn.xw_plus_b"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "projection_layer", "(", "in_val", ",", "input_size", ",", "output_size", ",", "activation_func", "=", "tf", ".", "tanh", ",", "scope", "=", "None", ")", ":", "\n", "# in_val: [batch_size, passage_len, dim]", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "in_val", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "passage_len", "=", "input_shape", "[", "1", "]", "\n", "#     feat_dim = input_shape[2]", "\n", "in_val", "=", "tf", ".", "reshape", "(", "in_val", ",", "[", "batch_size", "*", "passage_len", ",", "input_size", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"projection_layer\"", ")", ":", "\n", "            ", "full_w", "=", "tf", ".", "get_variable", "(", "\"full_w\"", ",", "[", "input_size", ",", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "full_b", "=", "tf", ".", "get_variable", "(", "\"full_b\"", ",", "[", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "activation_func", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "in_val", ",", "full_w", ",", "full_b", ")", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "batch_size", ",", "passage_len", ",", "output_size", "]", ")", "\n", "return", "outputs", "# [batch_size, passage_len, output_size]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.highway_layer": [[444, 462], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "activation_func", "tensorflow.nn.sigmoid", "tensorflow.add", "tensorflow.nn.xw_plus_b", "tensorflow.nn.xw_plus_b", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.subtract"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "@", "staticmethod", "\n", "def", "highway_layer", "(", "in_val", ",", "output_size", ",", "activation_func", "=", "tf", ".", "tanh", ",", "scope", "=", "None", ")", ":", "\n", "# in_val: [batch_size, passage_len, dim]", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "in_val", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "passage_len", "=", "input_shape", "[", "1", "]", "\n", "#     feat_dim = input_shape[2]", "\n", "in_val", "=", "tf", ".", "reshape", "(", "in_val", ",", "[", "batch_size", "*", "passage_len", ",", "output_size", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"highway_layer\"", ")", ":", "\n", "            ", "highway_w", "=", "tf", ".", "get_variable", "(", "\"highway_w\"", ",", "[", "output_size", ",", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "highway_b", "=", "tf", ".", "get_variable", "(", "\"highway_b\"", ",", "[", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "full_w", "=", "tf", ".", "get_variable", "(", "\"full_w\"", ",", "[", "output_size", ",", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "full_b", "=", "tf", ".", "get_variable", "(", "\"full_b\"", ",", "[", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "trans", "=", "activation_func", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "in_val", ",", "full_w", ",", "full_b", ")", ")", "\n", "gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "in_val", ",", "highway_w", ",", "highway_b", ")", ")", "\n", "outputs", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "trans", ",", "gate", ")", ",", "tf", ".", "multiply", "(", "in_val", ",", "tf", ".", "subtract", "(", "1.0", ",", "gate", ")", ")", ",", "\"y\"", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "batch_size", ",", "passage_len", ",", "output_size", "]", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.multi_highway_layer": [[463, 470], ["tensorflow.variable_scope", "range", "gmnn.LayerUtils.highway_layer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.highway_layer"], ["", "def", "multi_highway_layer", "(", "self", ",", "in_val", ",", "output_size", ",", "num_layers", ",", "activation_func", "=", "tf", ".", "tanh", ",", "scope_name", "=", "None", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope_name", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "cur_scope_name", "=", "scope_name", "+", "\"-{}\"", ".", "format", "(", "i", ")", "\n", "in_val", "=", "self", ".", "highway_layer", "(", "in_val", ",", "output_size", ",", "activation_func", "=", "activation_func", ",", "scope", "=", "cur_scope_name", ")", "\n", "", "", "return", "in_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_representation": [[471, 475], ["gmnn.LayerUtils.collect_probs"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_probs"], ["", "def", "collect_representation", "(", "self", ",", "representation", ",", "positions", ")", ":", "\n", "# representation: [batch_size, node_num, feature_dim]", "\n", "# positions: [batch_size, neigh_num]", "\n", "        ", "return", "self", ".", "collect_probs", "(", "representation", ",", "positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_final_step_of_lstm": [[476, 486], ["tensorflow.maximum", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.zeros_like", "tensorflow.shape"], "methods", ["None"], ["", "def", "collect_final_step_of_lstm", "(", "self", ",", "lstm_representation", ",", "lengths", ")", ":", "\n", "# lstm_representation: [batch_size, passsage_length, dim]", "\n", "# lengths: [batch_size]", "\n", "        ", "lengths", "=", "tf", ".", "maximum", "(", "lengths", ",", "tf", ".", "zeros_like", "(", "lengths", ",", "dtype", "=", "tf", ".", "int32", ")", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "lengths", ")", "[", "0", "]", "\n", "batch_nums", "=", "tf", ".", "range", "(", "0", ",", "limit", "=", "batch_size", ")", "# shape (batch_size)", "\n", "indices", "=", "tf", ".", "stack", "(", "(", "batch_nums", ",", "lengths", ")", ",", "axis", "=", "1", ")", "# shape (batch_size, 2)", "\n", "result", "=", "tf", ".", "gather_nd", "(", "lstm_representation", ",", "indices", ",", "name", "=", "'last-forwar-lstm'", ")", "\n", "return", "result", "# [batch_size, dim]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_probs": [[487, 500], ["tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "collect_probs", "(", "self", ",", "probs", ",", "positions", ")", ":", "\n", "# probs [batch_size, chunks_size]", "\n", "# positions [batch_size, pair_size]", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "probs", ")", "[", "0", "]", "\n", "pair_size", "=", "tf", ".", "shape", "(", "positions", ")", "[", "1", "]", "\n", "batch_nums", "=", "tf", ".", "range", "(", "0", ",", "limit", "=", "batch_size", ")", "# shape (batch_size)", "\n", "batch_nums", "=", "tf", ".", "reshape", "(", "batch_nums", ",", "shape", "=", "[", "-", "1", ",", "1", "]", ")", "# [batch_size, 1]", "\n", "batch_nums", "=", "tf", ".", "tile", "(", "batch_nums", ",", "multiples", "=", "[", "1", ",", "pair_size", "]", ")", "# [batch_size, pair_size]", "\n", "\n", "indices", "=", "tf", ".", "stack", "(", "(", "batch_nums", ",", "positions", ")", ",", "axis", "=", "2", ")", "# shape (batch_size, pair_size, 2)", "\n", "pair_probs", "=", "tf", ".", "gather_nd", "(", "probs", ",", "indices", ")", "\n", "# pair_probs = tf.reshape(pair_probs, shape=[batch_size, pair_size])", "\n", "return", "pair_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.calcuate_attention": [[501, 562], ["tensorflow.shape", "gmnn.LayerUtils.dropout_layer", "gmnn.LayerUtils.dropout_layer", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.python.ops.nn_ops.bias_add", "tensorflow.tanh", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.ones", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.diag", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.dropout_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.dropout_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["", "def", "calcuate_attention", "(", "self", ",", "in_value_1", ",", "in_value_2", ",", "feature_dim1", ",", "feature_dim2", ",", "scope_name", "=", "'att'", ",", "\n", "att_type", "=", "'symmetric'", ",", "att_dim", "=", "20", ",", "remove_diagnoal", "=", "False", ",", "mask1", "=", "None", ",", "mask2", "=", "None", ",", "\n", "is_training", "=", "False", ",", "dropout_rate", "=", "0.2", ")", ":", "\n", "        ", "input_shape", "=", "tf", ".", "shape", "(", "in_value_1", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "len_1", "=", "input_shape", "[", "1", "]", "\n", "len_2", "=", "tf", ".", "shape", "(", "in_value_2", ")", "[", "1", "]", "\n", "\n", "in_value_1", "=", "self", ".", "dropout_layer", "(", "in_value_1", ",", "dropout_rate", ",", "is_training", "=", "is_training", ")", "\n", "in_value_2", "=", "self", ".", "dropout_layer", "(", "in_value_2", ",", "dropout_rate", ",", "is_training", "=", "is_training", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope_name", ")", ":", "\n", "# calculate attention ==> a: [batch_size, len_1, len_2]", "\n", "            ", "atten_w1", "=", "tf", ".", "get_variable", "(", "\"atten_w1\"", ",", "[", "feature_dim1", ",", "att_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "feature_dim1", "==", "feature_dim2", ":", "\n", "                ", "atten_w2", "=", "atten_w1", "\n", "", "else", ":", "\n", "                ", "atten_w2", "=", "tf", ".", "get_variable", "(", "\"atten_w2\"", ",", "[", "feature_dim2", ",", "att_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "atten_value_1", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "in_value_1", ",", "[", "batch_size", "*", "len_1", ",", "feature_dim1", "]", ")", ",", "\n", "atten_w1", ")", "# [batch_size*len_1, feature_dim]", "\n", "atten_value_1", "=", "tf", ".", "reshape", "(", "atten_value_1", ",", "[", "batch_size", ",", "len_1", ",", "att_dim", "]", ")", "\n", "atten_value_2", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "in_value_2", ",", "[", "batch_size", "*", "len_2", ",", "feature_dim2", "]", ")", ",", "\n", "atten_w2", ")", "# [batch_size*len_2, feature_dim]", "\n", "atten_value_2", "=", "tf", ".", "reshape", "(", "atten_value_2", ",", "[", "batch_size", ",", "len_2", ",", "att_dim", "]", ")", "\n", "\n", "if", "att_type", "==", "'additive'", ":", "\n", "                ", "atten_b", "=", "tf", ".", "get_variable", "(", "\"atten_b\"", ",", "[", "att_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "atten_v", "=", "tf", ".", "get_variable", "(", "\"atten_v\"", ",", "[", "1", ",", "att_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "atten_value_1", "=", "tf", ".", "expand_dims", "(", "atten_value_1", ",", "axis", "=", "2", ",", "\n", "name", "=", "\"atten_value_1\"", ")", "# [batch_size, len_1, 'x', feature_dim]", "\n", "atten_value_2", "=", "tf", ".", "expand_dims", "(", "atten_value_2", ",", "axis", "=", "1", ",", "\n", "name", "=", "\"atten_value_2\"", ")", "# [batch_size, 'x', len_2, feature_dim]", "\n", "atten_value", "=", "atten_value_1", "+", "atten_value_2", "# + tf.expand_dims(tf.expand_dims(tf.expand_dims(atten_b, axis=0), axis=0), axis=0)", "\n", "atten_value", "=", "nn_ops", ".", "bias_add", "(", "atten_value", ",", "atten_b", ")", "\n", "atten_value", "=", "tf", ".", "tanh", "(", "atten_value", ")", "# [batch_size, len_1, len_2, feature_dim]", "\n", "atten_value", "=", "tf", ".", "reshape", "(", "atten_value", ",", "[", "-", "1", ",", "\n", "att_dim", "]", ")", "*", "atten_v", "# tf.expand_dims(atten_v, axis=0) # [batch_size*len_1*len_2, feature_dim]", "\n", "atten_value", "=", "tf", ".", "reduce_sum", "(", "atten_value", ",", "axis", "=", "-", "1", ")", "\n", "atten_value", "=", "tf", ".", "reshape", "(", "atten_value", ",", "[", "batch_size", ",", "len_1", ",", "len_2", "]", ")", "\n", "", "else", ":", "\n", "                ", "atten_value_1", "=", "tf", ".", "tanh", "(", "atten_value_1", ")", "\n", "# atten_value_1 = tf.nn.relu(atten_value_1)", "\n", "atten_value_2", "=", "tf", ".", "tanh", "(", "atten_value_2", ")", "\n", "# atten_value_2 = tf.nn.relu(atten_value_2)", "\n", "diagnoal_params", "=", "tf", ".", "get_variable", "(", "\"diagnoal_params\"", ",", "[", "1", ",", "1", ",", "att_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "atten_value_1", "=", "atten_value_1", "*", "diagnoal_params", "\n", "atten_value", "=", "tf", ".", "matmul", "(", "atten_value_1", ",", "atten_value_2", ",", "transpose_b", "=", "True", ")", "# [batch_size, len_1, len_2]", "\n", "\n", "# normalize", "\n", "", "if", "remove_diagnoal", ":", "\n", "                ", "diagnoal", "=", "tf", ".", "ones", "(", "[", "len_1", "]", ",", "tf", ".", "float32", ")", "# [len1]", "\n", "diagnoal", "=", "1.0", "-", "tf", ".", "diag", "(", "diagnoal", ")", "# [len1, len1]", "\n", "diagnoal", "=", "tf", ".", "expand_dims", "(", "diagnoal", ",", "axis", "=", "0", ")", "# ['x', len1, len1]", "\n", "atten_value", "=", "atten_value", "*", "diagnoal", "\n", "", "if", "mask1", "is", "not", "None", ":", "atten_value", "=", "tf", ".", "multiply", "(", "atten_value", ",", "tf", ".", "expand_dims", "(", "mask1", ",", "axis", "=", "-", "1", ")", ")", "\n", "if", "mask2", "is", "not", "None", ":", "atten_value", "=", "tf", ".", "multiply", "(", "atten_value", ",", "tf", ".", "expand_dims", "(", "mask2", ",", "axis", "=", "1", ")", ")", "\n", "atten_value", "=", "tf", ".", "nn", ".", "softmax", "(", "atten_value", ",", "name", "=", "'atten_value'", ")", "# [batch_size, len_1, len_2]", "\n", "if", "remove_diagnoal", ":", "atten_value", "=", "atten_value", "*", "diagnoal", "\n", "if", "mask1", "is", "not", "None", ":", "atten_value", "=", "tf", ".", "multiply", "(", "atten_value", ",", "tf", ".", "expand_dims", "(", "mask1", ",", "axis", "=", "-", "1", ")", ")", "\n", "if", "mask2", "is", "not", "None", ":", "atten_value", "=", "tf", ".", "multiply", "(", "atten_value", ",", "tf", ".", "expand_dims", "(", "mask2", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "return", "atten_value", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.weighted_sum": [[563, 570], ["tensorflow.matmul"], "methods", ["None"], ["", "def", "weighted_sum", "(", "self", ",", "atten_scores", ",", "in_values", ")", ":", "\n", "        ", "\"\"\"\n        :param atten_scores: # [batch_size, len1, len2]\n        :param in_values: [batch_size, len2, dim]\n        :return:\n        \"\"\"", "\n", "return", "tf", ".", "matmul", "(", "atten_scores", ",", "in_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.cal_relevancy_matrix": [[571, 577], ["tensorflow.expand_dims", "tensorflow.expand_dims", "gmnn.LayerUtils.cosine_distance"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance"], ["", "def", "cal_relevancy_matrix", "(", "self", ",", "in_question_repres", ",", "in_passage_repres", ")", ":", "\n", "        ", "in_question_repres_tmp", "=", "tf", ".", "expand_dims", "(", "in_question_repres", ",", "1", ")", "# [batch_size, 1, question_len, dim]", "\n", "in_passage_repres_tmp", "=", "tf", ".", "expand_dims", "(", "in_passage_repres", ",", "2", ")", "# [batch_size, passage_len, 1, dim]", "\n", "relevancy_matrix", "=", "self", ".", "cosine_distance", "(", "in_question_repres_tmp", ",", "\n", "in_passage_repres_tmp", ")", "# [batch_size, passage_len, question_len]", "\n", "return", "relevancy_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.mask_relevancy_matrix": [[578, 586], ["tensorflow.multiply", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "mask_relevancy_matrix", "(", "self", ",", "relevancy_matrix", ",", "question_mask", ",", "passage_mask", ")", ":", "\n", "# relevancy_matrix: [batch_size, passage_len, question_len]", "\n", "# question_mask: [batch_size, question_len]", "\n", "# passage_mask: [batch_size, passsage_len]", "\n", "        ", "if", "question_mask", "is", "not", "None", ":", "\n", "            ", "relevancy_matrix", "=", "tf", ".", "multiply", "(", "relevancy_matrix", ",", "tf", ".", "expand_dims", "(", "question_mask", ",", "1", ")", ")", "\n", "", "relevancy_matrix", "=", "tf", ".", "multiply", "(", "relevancy_matrix", ",", "tf", ".", "expand_dims", "(", "passage_mask", ",", "2", ")", ")", "\n", "return", "relevancy_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.compute_gradients": [[587, 591], ["tensorflow.gradients", "tensorflow.zeros_like", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_gradients", "(", "tensor", ",", "var_list", ")", ":", "\n", "        ", "grads", "=", "tf", ".", "gradients", "(", "tensor", ",", "var_list", ")", "\n", "return", "[", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "var", ")", "for", "var", ",", "grad", "in", "zip", "(", "var_list", ",", "grads", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.Layer.__init__": [[605, 618], ["kwargs.keys", "kwargs.get", "kwargs.get", "gmnn.Layer.__class__.__name__.lower", "str", "gmnn.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", ",", "'model_size'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.Layer._call": [[619, 621], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.Layer.__call__": [[622, 626], ["tensorflow.name_scope", "gmnn.Layer._call"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GraphConvolution._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.Dense.__init__": [[631, 656], ["gmnn.Layer.__init__", "tensorflow.variable_scope", "tensorflow.get_variable", "gmnn.zeros", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dropout", "=", "0.", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "placeholders", "=", "None", ",", "bias", "=", "True", ",", "featureless", "=", "False", ",", "\n", "sparse_inputs", "=", "False", ",", "name", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "if", "sparse_inputs", ":", "\n", "            ", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "shape", "=", "(", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.0000", ")", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.Dense._call": [[657, 670], ["tensorflow.matmul", "gmnn.Dense.act"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# x = tf.nn.dropout(x, self.dropout)", "\n", "\n", "# transform", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.UniformNeighborSampler.__init__": [[678, 681], ["gmnn.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["def", "__init__", "(", "self", ",", "adj_info", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UniformNeighborSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "adj_info", "=", "adj_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.UniformNeighborSampler._call": [[682, 688], ["tensorflow.nn.embedding_lookup", "tensorflow.transpose", "tensorflow.slice", "tensorflow.transpose"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "ids", ",", "num_samples", "=", "inputs", "\n", "adj_lists", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adj_info", ",", "ids", ")", "\n", "adj_lists", "=", "tf", ".", "transpose", "(", "tf", ".", "transpose", "(", "adj_lists", ")", ")", "\n", "adj_lists", "=", "tf", ".", "slice", "(", "adj_lists", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "num_samples", "]", ")", "\n", "return", "adj_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GatedMeanAggregator.__init__": [[691, 726], ["gmnn.Layer.__init__", "tensorflow.variable_scope", "gmnn.glorot", "gmnn.glorot", "gmnn.glorot", "gmnn.zeros", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GatedMeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "concat", ":", "\n", "            ", "self", ".", "output_dim", "=", "2", "*", "output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "self", ".", "vars", "[", "'gate_weights'", "]", "=", "glorot", "(", "[", "2", "*", "output_dim", ",", "2", "*", "output_dim", "]", ",", "\n", "name", "=", "'gate_weights'", ")", "\n", "self", ".", "vars", "[", "'gate_bias'", "]", "=", "zeros", "(", "[", "2", "*", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GatedMeanAggregator._call": [[727, 754], ["tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.nn.relu", "tensorflow.add_n", "tensorflow.concat", "tensorflow.matmul", "gmnn.GatedMeanAggregator.act"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "gate", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "gate", "=", "tf", ".", "matmul", "(", "gate", ",", "self", ".", "vars", "[", "\"gate_weights\"", "]", ")", "+", "self", ".", "vars", "[", "\"gate_bias\"", "]", "\n", "gate", "=", "tf", ".", "nn", ".", "relu", "(", "gate", ")", "\n", "\n", "return", "gate", "*", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GCNAggregator.__init__": [[762, 791], ["gmnn.Layer.__init__", "tensorflow.variable_scope", "gmnn.glorot", "gmnn.GCNAggregator._log_vars", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "mode", "=", "\"train\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCNAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GCNAggregator._call": [[792, 809], ["tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.concat", "gmnn.GCNAggregator.act", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "", "means", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "[", "neigh_vecs", ",", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# [nodes] x [out_dim]", "\n", "output", "=", "tf", ".", "matmul", "(", "means", ",", "self", ".", "vars", "[", "'weights'", "]", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", ",", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.MeanAggregator.__init__": [[814, 859], ["gmnn.Layer.__init__", "tensorflow.variable_scope", "gmnn.glorot", "gmnn.glorot", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "mode", "=", "\"train\"", ",", "if_use_high_way", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "if_use_high_way", "=", "if_use_high_way", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n", "if", "concat", ":", "\n", "            ", "self", ".", "output_dim", "=", "2", "*", "output_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "neigh_input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "\n", "# self.vars['neigh_weights'] = random([neigh_input_dim, output_dim], name='neigh_weights')", "\n", "# self.vars['self_weights'] = random([input_dim, output_dim], name='neigh_weights')", "\n", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "self", ".", "input_dim", "=", "input_dim", "\n", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "self", ".", "output_dim", "=", "output_dim", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.MeanAggregator._call": [[860, 890], ["tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.add_n", "tensorflow.concat", "gmnn.MeanAggregator.act", "tensorflow.variable_scope", "gmnn.multi_highway_layer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_highway_layer"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "neigh_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "neigh_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "self_vecs", "=", "tf", ".", "nn", ".", "dropout", "(", "self_vecs", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# reduce_mean performs better than mean_pool", "\n", "", "neigh_means", "=", "tf", ".", "reduce_mean", "(", "neigh_vecs", ",", "axis", "=", "1", ")", "\n", "# neigh_means = mean_pool(neigh_vecs, neigh_len)", "\n", "\n", "# [nodes] x [out_dim]", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_means", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "\n", "if", "self", ".", "if_use_high_way", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"fw_hidden_highway\"", ")", ":", "\n", "                ", "fw_hidden", "=", "multi_highway_layer", "(", "from_neighs", ",", "self", ".", "neigh_input_dim", ",", "1", ")", "\n", "\n", "", "", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", ",", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.AttentionAggregator.__init__": [[895, 930], ["gmnn.Layer.__init__", "tensorflow.variable_scope", "gmnn.Dense", "gmnn.Dense", "gmnn.Dense", "gmnn.Dense", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "None", ",", "concat", "=", "False", ",", "mode", "=", "\"train\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "neigh_input_dim", "==", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "self", ".", "q_dense_layer", "=", "Dense", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", ",", "bias", "=", "False", ",", "sparse_inputs", "=", "False", ",", "\n", "name", "=", "\"q\"", ")", "\n", "self", ".", "k_dense_layer", "=", "Dense", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", ",", "bias", "=", "False", ",", "sparse_inputs", "=", "False", ",", "\n", "name", "=", "\"k\"", ")", "\n", "self", ".", "v_dense_layer", "=", "Dense", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", ",", "bias", "=", "False", ",", "sparse_inputs", "=", "False", ",", "\n", "name", "=", "\"v\"", ")", "\n", "\n", "self", ".", "output_dense_layer", "=", "Dense", "(", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "bias", "=", "False", ",", "sparse_inputs", "=", "False", ",", "\n", "name", "=", "\"output_transform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.AttentionAggregator._call": [[931, 957], ["gmnn.AttentionAggregator.q_dense_layer", "tensorflow.concat", "tensorflow.reshape", "gmnn.AttentionAggregator.k_dense_layer", "gmnn.AttentionAggregator.v_dense_layer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "gmnn.AttentionAggregator.output_dense_layer", "tensorflow.shape", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["None"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "q", "=", "self", ".", "q_dense_layer", "(", "self_vecs", ")", "\n", "\n", "neigh_vecs", "=", "tf", ".", "concat", "(", "[", "tf", ".", "expand_dims", "(", "self_vecs", ",", "axis", "=", "1", ")", ",", "neigh_vecs", "]", ",", "axis", "=", "1", ")", "\n", "neigh_len", "=", "tf", ".", "shape", "(", "neigh_vecs", ")", "[", "1", "]", "\n", "neigh_vecs", "=", "tf", ".", "reshape", "(", "neigh_vecs", ",", "[", "-", "1", ",", "self", ".", "input_dim", "]", ")", "\n", "\n", "k", "=", "self", ".", "k_dense_layer", "(", "neigh_vecs", ")", "\n", "v", "=", "self", ".", "v_dense_layer", "(", "neigh_vecs", ")", "\n", "\n", "k", "=", "tf", ".", "reshape", "(", "k", ",", "[", "-", "1", ",", "neigh_len", ",", "self", ".", "input_dim", "]", ")", "\n", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "-", "1", ",", "neigh_len", ",", "self", ".", "input_dim", "]", ")", "\n", "\n", "logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "expand_dims", "(", "q", ",", "axis", "=", "1", ")", ",", "k", ")", ",", "axis", "=", "-", "1", ")", "\n", "# if self.bias:", "\n", "#     logits += self.vars['bias']", "\n", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "\n", "attention_output", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "expand_dims", "(", "weights", ",", "axis", "=", "-", "1", ")", ",", "v", ")", ",", "axis", "=", "1", ")", "\n", "\n", "attention_output", "=", "self", ".", "output_dense_layer", "(", "attention_output", ")", "\n", "\n", "return", "attention_output", ",", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.MaxPoolingAggregator.__init__": [[962, 1007], ["gmnn.Layer.__init__", "gmnn.MaxPoolingAggregator.mlp_layers.append", "gmnn.Dense", "tensorflow.variable_scope", "gmnn.glorot", "gmnn.glorot", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "mode", "=", "\"train\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MaxPoolingAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "concat", ":", "\n", "            ", "self", ".", "output_dim", "=", "2", "*", "output_dim", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "50", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "50", "\n", "\n", "", "self", ".", "mlp_layers", "=", "[", "]", "\n", "self", ".", "mlp_layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "neigh_input_dim", ",", "output_dim", "=", "hidden_dim", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "dropout", ",", "sparse_inputs", "=", "False", ",", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "name", "=", "'self_weights'", ")", "\n", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "self", ".", "output_dim", "=", "output_dim", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.MaxPoolingAggregator._call": [[1008, 1036], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.matmul", "tensorflow.matmul", "l", "tensorflow.add_n", "tensorflow.concat", "gmnn.MaxPoolingAggregator.act"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "neigh_h", "=", "neigh_vecs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_h", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "num_neighbors", "=", "dims", "[", "1", "]", "\n", "\n", "h_reshaped", "=", "tf", ".", "reshape", "(", "neigh_h", ",", "(", "batch_size", "*", "num_neighbors", ",", "self", ".", "neigh_input_dim", ")", ")", "\n", "\n", "for", "l", "in", "self", ".", "mlp_layers", ":", "\n", "            ", "h_reshaped", "=", "l", "(", "h_reshaped", ")", "\n", "", "neigh_h", "=", "tf", ".", "reshape", "(", "h_reshaped", ",", "(", "batch_size", ",", "num_neighbors", ",", "self", ".", "hidden_dim", ")", ")", "\n", "neigh_h", "=", "tf", ".", "reduce_max", "(", "neigh_h", ",", "axis", "=", "1", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", ",", "self", ".", "output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.SeqAggregator.__init__": [[1042, 1082], ["gmnn.Layer.__init__", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.variable_scope", "gmnn.glorot", "gmnn.glorot", "gmnn.SeqAggregator._log_vars", "gmnn.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "model_size", "=", "\"small\"", ",", "neigh_input_dim", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "None", ",", "concat", "=", "False", ",", "mode", "=", "\"train\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeqAggregator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "if", "neigh_input_dim", "is", "None", ":", "\n", "            ", "neigh_input_dim", "=", "input_dim", "\n", "\n", "", "if", "name", "is", "not", "None", ":", "\n", "            ", "name", "=", "'/'", "+", "name", "\n", "", "else", ":", "\n", "            ", "name", "=", "''", "\n", "\n", "", "if", "model_size", "==", "\"small\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "128", "\n", "", "elif", "model_size", "==", "\"big\"", ":", "\n", "            ", "hidden_dim", "=", "self", ".", "hidden_dim", "=", "256", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'neigh_weights'", "]", "=", "glorot", "(", "[", "hidden_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'neigh_weights'", ")", "\n", "\n", "self", ".", "vars", "[", "'self_weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'self_weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "self", ".", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n", "", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "neigh_input_dim", "=", "neigh_input_dim", "\n", "self", ".", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.SeqAggregator._call": [[1083, 1128], ["tensorflow.shape", "gmnn.SeqAggregator.cell.zero_state", "tensorflow.sign", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.cast", "int", "tensorflow.reshape", "tensorflow.gather", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add_n", "gmnn.SeqAggregator.act", "tensorflow.reduce_max", "tensorflow.constant", "tensorflow.variable_scope", "tensorflow.shape", "tensorflow.shape", "tensorflow.add_n", "tensorflow.concat", "tensorflow.abs", "tensorflow.nn.dynamic_rnn", "rnn_outputs.get_shape", "tensorflow.range", "scope.reuse_variables", "tensorflow.nn.dynamic_rnn"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self_vecs", ",", "neigh_vecs", "=", "inputs", "\n", "\n", "dims", "=", "tf", ".", "shape", "(", "neigh_vecs", ")", "\n", "batch_size", "=", "dims", "[", "0", "]", "\n", "initial_state", "=", "self", ".", "cell", ".", "zero_state", "(", "batch_size", ",", "tf", ".", "float32", ")", "\n", "used", "=", "tf", ".", "sign", "(", "tf", ".", "reduce_max", "(", "tf", ".", "abs", "(", "neigh_vecs", ")", ",", "axis", "=", "2", ")", ")", "\n", "length", "=", "tf", ".", "reduce_sum", "(", "used", ",", "axis", "=", "1", ")", "\n", "length", "=", "tf", ".", "maximum", "(", "length", ",", "tf", ".", "constant", "(", "1.", ")", ")", "\n", "length", "=", "tf", ".", "cast", "(", "length", ",", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "scope", ":", "\n", "            ", "try", ":", "\n", "                ", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "scope", ".", "reuse_variables", "(", ")", "\n", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "self", ".", "cell", ",", "neigh_vecs", ",", "\n", "initial_state", "=", "initial_state", ",", "dtype", "=", "tf", ".", "float32", ",", "time_major", "=", "False", ",", "\n", "sequence_length", "=", "length", ")", "\n", "", "", "batch_size", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "0", "]", "\n", "max_len", "=", "tf", ".", "shape", "(", "rnn_outputs", ")", "[", "1", "]", "\n", "out_size", "=", "int", "(", "rnn_outputs", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "index", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "*", "max_len", "+", "(", "length", "-", "1", ")", "\n", "flat", "=", "tf", ".", "reshape", "(", "rnn_outputs", ",", "[", "-", "1", ",", "out_size", "]", ")", "\n", "neigh_h", "=", "tf", ".", "gather", "(", "flat", ",", "index", ")", "\n", "\n", "from_neighs", "=", "tf", ".", "matmul", "(", "neigh_h", ",", "self", ".", "vars", "[", "'neigh_weights'", "]", ")", "\n", "from_self", "=", "tf", ".", "matmul", "(", "self_vecs", ",", "self", ".", "vars", "[", "\"self_weights\"", "]", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "\n", "if", "not", "self", ".", "concat", ":", "\n", "            ", "output", "=", "tf", ".", "add_n", "(", "[", "from_self", ",", "from_neighs", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "tf", ".", "concat", "(", "[", "from_self", ",", "from_neighs", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# bias", "\n", "", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.__init__": [[1131, 1215], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "gmnn.LayerUtils", "dict", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "conf", ",", "pretrained_word_embeddings", ")", ":", "\n", "        ", "self", ".", "training_op", "=", "None", "\n", "self", ".", "loss", "=", "None", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "word_vocab_size", "=", "conf", ".", "word_vocab_size", "\n", "self", ".", "l2_lambda", "=", "conf", ".", "l2_lambda", "\n", "self", ".", "word_embedding_dim", "=", "conf", ".", "hidden_layer_dim", "\n", "self", ".", "encoder_hidden_dim", "=", "conf", ".", "encoder_hidden_dim", "\n", "\n", "# the setting for the GCN", "\n", "self", ".", "num_layers", "=", "conf", ".", "num_layers", "\n", "self", ".", "graph_encode_direction", "=", "conf", ".", "graph_encode_direction", "\n", "self", ".", "hidden_layer_dim", "=", "conf", ".", "hidden_layer_dim", "\n", "self", ".", "concat", "=", "conf", ".", "concat", "\n", "\n", "self", ".", "y_true", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "2", "]", ",", "name", "=", "\"true_labels\"", ")", "\n", "\n", "# the following place holders are for the first graph", "\n", "self", ".", "fw_adj_info_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the fw adj info for each node", "\n", "self", ".", "bw_adj_info_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the bw adj info for each node", "\n", "self", ".", "feature_info_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the feature info for each node", "\n", "self", ".", "feature_len_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the feature len for each node", "\n", "self", ".", "batch_nodes_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the nodes for the first batch", "\n", "self", ".", "batch_mask_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", "# the mask for the first batch", "\n", "self", ".", "looking_table_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the looking table for the first batch", "\n", "self", ".", "entity_index_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the entity node index in each graph", "\n", "\n", "self", ".", "fw_adj_info_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the fw adj info for each node", "\n", "self", ".", "bw_adj_info_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the bw adj info for each node", "\n", "self", ".", "feature_info_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the feature info for each node", "\n", "self", ".", "feature_len_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the feature len for each node", "\n", "self", ".", "batch_nodes_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "None", "]", ")", "# the nodes for the first batch", "\n", "self", ".", "batch_mask_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", "]", ")", "# the mask for the second batch", "\n", "self", ".", "looking_table_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the looking table for the second batch", "\n", "self", ".", "entity_index_second", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "# the entity node index in each graph", "\n", "\n", "self", ".", "with_match_highway", "=", "conf", ".", "with_match_highway", "\n", "self", ".", "with_gcn_highway", "=", "conf", ".", "with_gcn_highway", "\n", "self", ".", "if_use_multiple_gcn_1_state", "=", "conf", ".", "if_use_multiple_gcn_1_state", "\n", "self", ".", "if_use_multiple_gcn_2_state", "=", "conf", ".", "if_use_multiple_gcn_2_state", "\n", "\n", "self", ".", "pretrained_word_embeddings", "=", "pretrained_word_embeddings", "\n", "self", ".", "pretrained_word_size", "=", "conf", ".", "pretrained_word_size", "\n", "self", ".", "learned_word_size", "=", "conf", ".", "learned_word_size", "\n", "\n", "self", ".", "sample_size_per_layer_first", "=", "tf", ".", "shape", "(", "self", ".", "fw_adj_info_first", ")", "[", "1", "]", "\n", "self", ".", "sample_size_per_layer_second", "=", "tf", ".", "shape", "(", "self", ".", "fw_adj_info_second", ")", "[", "1", "]", "\n", "self", ".", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "y_true", ")", "[", "0", "]", "\n", "self", ".", "dropout", "=", "conf", ".", "dropout", "\n", "\n", "self", ".", "fw_aggregators_first", "=", "[", "]", "\n", "self", ".", "bw_aggregators_first", "=", "[", "]", "\n", "self", ".", "aggregator_dim_first", "=", "conf", ".", "aggregator_dim_first", "\n", "self", ".", "gcn_window_size_first", "=", "conf", ".", "gcn_window_size_first", "\n", "self", ".", "gcn_layer_size_first", "=", "conf", ".", "gcn_layer_size_first", "\n", "\n", "self", ".", "fw_aggregators_second", "=", "[", "]", "\n", "self", ".", "bw_aggregators_second", "=", "[", "]", "\n", "self", ".", "aggregator_dim_second", "=", "conf", ".", "aggregator_dim_second", "\n", "self", ".", "gcn_window_size_second", "=", "conf", ".", "gcn_window_size_second", "\n", "self", ".", "gcn_layer_size_second", "=", "conf", ".", "gcn_layer_size_second", "\n", "\n", "self", ".", "if_pred_on_dev", "=", "False", "\n", "self", ".", "learning_rate", "=", "conf", ".", "learning_rate", "\n", "\n", "self", ".", "agg_sim_method", "=", "conf", ".", "agg_sim_method", "\n", "\n", "self", ".", "agg_type_first", "=", "conf", ".", "gcn_type_first", "\n", "self", ".", "agg_type_second", "=", "conf", ".", "gcn_type_second", "\n", "\n", "self", ".", "node_vec_method", "=", "conf", ".", "node_vec_method", "\n", "self", ".", "pred_method", "=", "conf", ".", "pred_method", "\n", "self", ".", "watch", "=", "{", "}", "\n", "# *******************new add*********************", "\n", "self", ".", "layer_utils", "=", "LayerUtils", "(", ")", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "conf", ".", "options", "=", "dict", "(", ")", "\n", "self", ".", "conf", ".", "options", "=", "{", "\"aggregation_layer_num\"", ":", "1", ",", "\"with_full_match\"", ":", "True", ",", "\"with_maxpool_match\"", ":", "True", ",", "\n", "\"with_max_attentive_match\"", ":", "True", ",", "\"with_attentive_match\"", ":", "True", ",", "\"with_cosine\"", ":", "True", ",", "\n", "\"with_mp_cosine\"", ":", "True", ",", "\"highway_layer_num\"", ":", "1", ",", "\"with_highway\"", ":", "True", ",", "\n", "\"with_match_highway\"", ":", "True", ",", "\"with_aggregation_highway\"", ":", "True", ",", "\"use_cudnn\"", ":", "False", ",", "\n", "\"aggregation_lstm_dim\"", ":", "100", ",", "\"with_moving_average\"", ":", "False", ",", "\n", "'cosine_MP_dim'", ":", "conf", ".", "cosine_MP_dim", "}", "\n", "self", ".", "temp", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN._build_graph": [[1216, 1541], ["tensorflow.zeros", "tensorflow.concat", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.variable_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "gmnn.GraphMatchNN.gcn_encode", "gmnn.GraphMatchNN.gcn_encode", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.tanh", "tensorflow.name_scope", "tensorflow.nn.softmax", "tensorflow.train.AdamOptimizer", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.shape", "tensorflow.shape", "gmnn.GraphMatchNN.build_encoder_cell", "tensorflow.nn.dynamic_rnn", "gmnn.GraphMatchNN.layer_utils.collect_final_step_of_lstm", "tensorflow.nn.dynamic_rnn", "gmnn.GraphMatchNN.layer_utils.collect_final_step_of_lstm", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.cast", "zip", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.constant", "tensorflow.transpose", "tensorflow.constant", "tensorflow.variable_scope", "gmnn.match_graph_1_with_graph_2", "matching_scope.reuse_variables", "multi_highway_layer.append", "gmnn.match_graph_1_with_graph_2", "multi_highway_layer.append", "tensorflow.variable_scope", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "gmnn.multi_highway_layer", "tensorflow.variable_scope", "gmnn.multi_highway_layer", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "gmnn.GraphMatchNN.gcn_encode", "gmnn.GraphMatchNN.gcn_encode", "int", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "range", "range", "aggregation_representation.append", "aggregation_representation.append", "aggregation_representation.append", "aggregation_representation.append", "tensorflow.concat", "tensorflow.tanh", "tensorflow.reshape.append", "len", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.zeros", "tensorflow.nn.embedding_lookup", "tensorflow.zeros", "len", "aggregation_representation.append", "aggregation_representation.append", "aggregation_representation.append", "aggregation_representation.append", "len", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.gcn_encode", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.gcn_encode", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.build_encoder_cell", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_final_step_of_lstm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_final_step_of_lstm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.match_graph_1_with_graph_2", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.match_graph_1_with_graph_2", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_highway_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_highway_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.gcn_encode", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.gcn_encode", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "_build_graph", "(", "self", ")", ":", "\n", "        ", "node_1_mask", "=", "self", ".", "batch_mask_first", "\n", "node_2_mask", "=", "self", ".", "batch_mask_second", "\n", "node_1_looking_table", "=", "self", ".", "looking_table_first", "\n", "node_2_looking_table", "=", "self", ".", "looking_table_second", "\n", "\n", "node_2_aware_representations", "=", "[", "]", "\n", "node_2_aware_dim", "=", "0", "\n", "node_1_aware_representations", "=", "[", "]", "\n", "node_1_aware_dim", "=", "0", "\n", "\n", "pad_word_embedding", "=", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "word_embedding_dim", "]", ")", "# this is for the PAD symbol", "\n", "self", ".", "word_embeddings", "=", "tf", ".", "concat", "(", "[", "pad_word_embedding", ",", "\n", "tf", ".", "get_variable", "(", "'pretrained_embedding'", ",", "\n", "shape", "=", "[", "self", ".", "pretrained_word_size", ",", "self", ".", "word_embedding_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "\n", "self", ".", "pretrained_word_embeddings", ")", ",", "trainable", "=", "True", ")", ",", "\n", "tf", ".", "get_variable", "(", "'W_train'", ",", "\n", "shape", "=", "[", "self", ".", "learned_word_size", ",", "self", ".", "word_embedding_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "trainable", "=", "True", ")", "]", ",", "0", ")", "\n", "\n", "self", ".", "watch", "[", "'word_embeddings'", "]", "=", "self", ".", "word_embeddings", "\n", "\n", "# ============ encode node feature by looking up word embedding =============", "\n", "with", "tf", ".", "variable_scope", "(", "'node_rep_gen'", ")", ":", "\n", "# [node_size, hidden_layer_dim]", "\n", "            ", "feature_embedded_chars_first", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "word_embeddings", ",", "self", ".", "feature_info_first", ")", "\n", "graph_1_size", "=", "tf", ".", "shape", "(", "feature_embedded_chars_first", ")", "[", "0", "]", "\n", "\n", "feature_embedded_chars_second", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "word_embeddings", ",", "self", ".", "feature_info_second", ")", "\n", "graph_2_size", "=", "tf", ".", "shape", "(", "feature_embedded_chars_second", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "node_vec_method", "==", "\"lstm\"", ":", "\n", "                ", "cell", "=", "self", ".", "build_encoder_cell", "(", "1", ",", "self", ".", "hidden_layer_dim", ")", "\n", "\n", "outputs", ",", "hidden_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", "=", "cell", ",", "inputs", "=", "feature_embedded_chars_first", ",", "\n", "sequence_length", "=", "self", ".", "feature_len_first", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "node_1_rep", "=", "self", ".", "layer_utils", ".", "collect_final_step_of_lstm", "(", "outputs", ",", "self", ".", "feature_len_first", "-", "1", ")", "\n", "\n", "outputs", ",", "hidden_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", "=", "cell", ",", "inputs", "=", "feature_embedded_chars_second", ",", "\n", "sequence_length", "=", "self", ".", "feature_len_second", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "node_2_rep", "=", "self", ".", "layer_utils", ".", "collect_final_step_of_lstm", "(", "outputs", ",", "self", ".", "feature_len_second", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "node_vec_method", "==", "\"word_emb\"", ":", "\n", "                ", "node_1_rep", "=", "tf", ".", "reshape", "(", "feature_embedded_chars_first", ",", "[", "graph_1_size", ",", "-", "1", "]", ")", "\n", "node_2_rep", "=", "tf", ".", "reshape", "(", "feature_embedded_chars_second", ",", "[", "graph_2_size", ",", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "watch", "[", "\"node_1_rep_initial\"", "]", "=", "node_1_rep", "\n", "self", ".", "watch", "[", "'node_2_rep_initial'", "]", "=", "node_2_rep", "\n", "\n", "# ============ encode node feature by GCN =============", "\n", "", "with", "tf", ".", "variable_scope", "(", "'first_gcn'", ")", "as", "first_gcn_scope", ":", "\n", "# shape of node embedding: [batch_size, single_graph_nodes_size, node_embedding_dim]", "\n", "# shape of node size: [batch_size]", "\n", "            ", "gcn_1_res", "=", "self", ".", "gcn_encode", "(", "self", ".", "batch_nodes_first", ",", "\n", "node_1_rep", ",", "\n", "self", ".", "fw_adj_info_first", ",", "self", ".", "bw_adj_info_first", ",", "\n", "input_node_dim", "=", "self", ".", "word_embedding_dim", ",", "\n", "output_node_dim", "=", "self", ".", "aggregator_dim_first", ",", "\n", "fw_aggregators", "=", "self", ".", "fw_aggregators_first", ",", "\n", "bw_aggregators", "=", "self", ".", "bw_aggregators_first", ",", "\n", "window_size", "=", "self", ".", "gcn_window_size_first", ",", "\n", "layer_size", "=", "self", ".", "gcn_layer_size_first", ",", "\n", "scope", "=", "\"first_gcn\"", ",", "\n", "agg_type", "=", "self", ".", "agg_type_first", ",", "\n", "sample_size_per_layer", "=", "self", ".", "sample_size_per_layer_first", ",", "\n", "keep_inter_state", "=", "self", ".", "if_use_multiple_gcn_1_state", ")", "\n", "\n", "node_1_rep", "=", "gcn_1_res", "[", "0", "]", "\n", "node_1_rep_dim", "=", "gcn_1_res", "[", "3", "]", "\n", "\n", "gcn_2_res", "=", "self", ".", "gcn_encode", "(", "self", ".", "batch_nodes_second", ",", "\n", "node_2_rep", ",", "\n", "self", ".", "fw_adj_info_second", ",", "\n", "self", ".", "bw_adj_info_second", ",", "\n", "input_node_dim", "=", "self", ".", "word_embedding_dim", ",", "\n", "output_node_dim", "=", "self", ".", "aggregator_dim_first", ",", "\n", "fw_aggregators", "=", "self", ".", "fw_aggregators_first", ",", "\n", "bw_aggregators", "=", "self", ".", "bw_aggregators_first", ",", "\n", "window_size", "=", "self", ".", "gcn_window_size_first", ",", "\n", "layer_size", "=", "self", ".", "gcn_layer_size_first", ",", "\n", "scope", "=", "\"first_gcn\"", ",", "\n", "agg_type", "=", "self", ".", "agg_type_first", ",", "\n", "sample_size_per_layer", "=", "self", ".", "sample_size_per_layer_second", ",", "\n", "keep_inter_state", "=", "self", ".", "if_use_multiple_gcn_1_state", ")", "\n", "\n", "node_2_rep", "=", "gcn_2_res", "[", "0", "]", "\n", "node_2_rep_dim", "=", "gcn_2_res", "[", "3", "]", "\n", "\n", "", "self", ".", "watch", "[", "\"node_1_rep_first_GCN\"", "]", "=", "node_1_rep", "\n", "self", ".", "watch", "[", "\"node_1_mask\"", "]", "=", "node_1_mask", "\n", "self", ".", "watch", "[", "\"node_2_rep_first_GCN\"", "]", "=", "node_2_rep", "\n", "\n", "# mask", "\n", "node_1_rep", "=", "tf", ".", "multiply", "(", "node_1_rep", ",", "tf", ".", "expand_dims", "(", "node_1_mask", ",", "2", ")", ")", "\n", "node_2_rep", "=", "tf", ".", "multiply", "(", "node_2_rep", ",", "tf", ".", "expand_dims", "(", "node_2_mask", ",", "2", ")", ")", "\n", "\n", "self", ".", "watch", "[", "\"node_1_rep_first_GCN_masked\"", "]", "=", "node_1_rep", "\n", "\n", "if", "self", ".", "pred_method", "==", "\"node_level\"", ":", "\n", "            ", "entity_1_rep", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "tf", ".", "transpose", "(", "node_1_rep", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "tf", ".", "constant", "(", "0", ")", ")", ",", "\n", "[", "-", "1", ",", "node_1_rep_dim", "]", ")", "\n", "entity_2_rep", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "tf", ".", "transpose", "(", "node_2_rep", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "tf", ".", "constant", "(", "0", ")", ")", ",", "\n", "[", "-", "1", ",", "node_2_rep_dim", "]", ")", "\n", "\n", "entity_1_2_diff", "=", "entity_1_rep", "-", "entity_2_rep", "\n", "entity_1_2_sim", "=", "entity_1_rep", "*", "entity_2_rep", "\n", "\n", "aggregation", "=", "tf", ".", "concat", "(", "[", "entity_1_rep", ",", "entity_2_rep", ",", "entity_1_2_diff", ",", "entity_1_2_sim", "]", ",", "axis", "=", "1", ")", "\n", "aggregation_dim", "=", "4", "*", "node_1_rep_dim", "\n", "\n", "w_0", "=", "tf", ".", "get_variable", "(", "\"w_0\"", ",", "[", "aggregation_dim", ",", "aggregation_dim", "/", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "b_0", "=", "tf", ".", "get_variable", "(", "\"b_0\"", ",", "[", "aggregation_dim", "/", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "w_1", "=", "tf", ".", "get_variable", "(", "\"w_1\"", ",", "[", "aggregation_dim", "/", "2", ",", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "b_1", "=", "tf", ".", "get_variable", "(", "\"b_1\"", ",", "[", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# ====== Prediction Layer ===============", "\n", "logits", "=", "tf", ".", "matmul", "(", "aggregation", ",", "w_0", ")", "+", "b_0", "\n", "logits", "=", "tf", ".", "tanh", "(", "logits", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "logits", ",", "w_1", ")", "+", "b_1", "\n", "\n", "", "elif", "self", ".", "pred_method", "==", "\"graph_level\"", ":", "\n", "# if the prediction method is graph_level, we perform the graph matching based prediction", "\n", "\n", "            ", "assert", "node_1_rep_dim", "==", "node_2_rep_dim", "\n", "input_dim", "=", "node_1_rep_dim", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'node_level_matching'", ")", "as", "matching_scope", ":", "\n", "# ========= node level matching ===============", "\n", "                ", "(", "match_reps", ",", "match_dim", ")", "=", "match_graph_1_with_graph_2", "(", "node_1_rep", ",", "node_2_rep", ",", "node_1_mask", ",", "node_2_mask", ",", "\n", "input_dim", ",", "\n", "options", "=", "self", ".", "conf", ".", "options", ",", "watch", "=", "self", ".", "watch", ")", "\n", "\n", "matching_scope", ".", "reuse_variables", "(", ")", "\n", "\n", "node_2_aware_representations", ".", "append", "(", "match_reps", ")", "\n", "node_2_aware_dim", "+=", "match_dim", "\n", "\n", "(", "match_reps", ",", "match_dim", ")", "=", "match_graph_1_with_graph_2", "(", "node_2_rep", ",", "node_1_rep", ",", "node_2_mask", ",", "node_1_mask", ",", "\n", "input_dim", ",", "\n", "options", "=", "self", ".", "conf", ".", "options", ",", "watch", "=", "self", ".", "watch", ")", "\n", "\n", "node_1_aware_representations", ".", "append", "(", "match_reps", ")", "\n", "node_1_aware_dim", "+=", "match_dim", "\n", "\n", "# TODO: add one more MP matching over the graph representation", "\n", "# with tf.variable_scope('context_MP_matching'):", "\n", "#     for i in range(options['context_layer_num']):", "\n", "#         with tf.variable_scope('layer-{}',format(i)):", "\n", "\n", "# [batch_size, single_graph_nodes_size, node_2_aware_dim]", "\n", "", "node_2_aware_representations", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "node_2_aware_representations", ")", "\n", "\n", "# [batch_size, single_graph_nodes_size, node_1_aware_dim]", "\n", "node_1_aware_representations", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "node_1_aware_representations", ")", "\n", "\n", "# if self.mode == \"train\":", "\n", "#     node_2_aware_representations = tf.nn.dropout(node_2_aware_representations, (1 - options['dropout_rate']))", "\n", "#     node_1_aware_representations = tf.nn.dropout(node_1_aware_representations, (1 - options['dropout_rate']))", "\n", "\n", "# ========= Highway layer ==============", "\n", "if", "self", ".", "with_match_highway", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"left_matching_highway\"", ")", ":", "\n", "                    ", "node_2_aware_representations", "=", "multi_highway_layer", "(", "node_2_aware_representations", ",", "node_2_aware_dim", ",", "\n", "self", ".", "conf", ".", "options", "[", "'highway_layer_num'", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"right_matching_highway\"", ")", ":", "\n", "                    ", "node_1_aware_representations", "=", "multi_highway_layer", "(", "node_1_aware_representations", ",", "node_1_aware_dim", ",", "\n", "self", ".", "conf", ".", "options", "[", "'highway_layer_num'", "]", ")", "\n", "\n", "", "", "self", ".", "watch", "[", "\"node_1_rep_match\"", "]", "=", "node_2_aware_representations", "\n", "\n", "# ========= Aggregation Layer ==============", "\n", "aggregation_representation", "=", "[", "]", "\n", "aggregation_dim", "=", "0", "\n", "\n", "node_2_aware_aggregation_input", "=", "node_2_aware_representations", "\n", "node_1_aware_aggregation_input", "=", "node_1_aware_representations", "\n", "\n", "self", ".", "watch", "[", "\"node_1_rep_match_layer\"", "]", "=", "node_2_aware_aggregation_input", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'aggregation_layer'", ")", ":", "\n", "# TODO: now we only have 1 aggregation layer;", "\n", "#  need to change this part if support more aggregation layers", "\n", "# [batch_size, single_graph_nodes_size, node_2_aware_dim]", "\n", "                ", "node_2_aware_aggregation_input", "=", "tf", ".", "multiply", "(", "node_2_aware_aggregation_input", ",", "\n", "tf", ".", "expand_dims", "(", "node_1_mask", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "# [batch_size, single_graph_nodes_size, node_1_aware_dim]", "\n", "node_1_aware_aggregation_input", "=", "tf", ".", "multiply", "(", "node_1_aware_aggregation_input", ",", "\n", "tf", ".", "expand_dims", "(", "node_2_mask", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "if", "self", ".", "agg_sim_method", "==", "\"GCN\"", ":", "\n", "# [batch_size*single_graph_nodes_size, node_2_aware_dim]", "\n", "                    ", "node_2_aware_aggregation_input", "=", "tf", ".", "reshape", "(", "node_2_aware_aggregation_input", ",", "\n", "shape", "=", "[", "-", "1", ",", "node_2_aware_dim", "]", ")", "\n", "\n", "# [batch_size*single_graph_nodes_size, node_1_aware_dim]", "\n", "node_1_aware_aggregation_input", "=", "tf", ".", "reshape", "(", "node_1_aware_aggregation_input", ",", "\n", "shape", "=", "[", "-", "1", ",", "node_1_aware_dim", "]", ")", "\n", "\n", "# [node_1_size, node_2_aware_dim]", "\n", "node_1_rep", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "node_2_aware_aggregation_input", ",", "node_1_looking_table", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "node_2_aware_dim", "]", ")", "]", ",", "0", ")", "\n", "\n", "# [node_2_size, node_1_aware_dim]", "\n", "node_2_rep", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "nn", ".", "embedding_lookup", "(", "node_1_aware_aggregation_input", ",", "node_2_looking_table", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "node_1_aware_dim", "]", ")", "]", ",", "0", ")", "\n", "\n", "gcn_1_res", "=", "self", ".", "gcn_encode", "(", "self", ".", "batch_nodes_first", ",", "\n", "node_1_rep", ",", "\n", "self", ".", "fw_adj_info_first", ",", "\n", "self", ".", "bw_adj_info_first", ",", "\n", "input_node_dim", "=", "node_2_aware_dim", ",", "\n", "output_node_dim", "=", "self", ".", "aggregator_dim_second", ",", "\n", "fw_aggregators", "=", "self", ".", "fw_aggregators_second", ",", "\n", "bw_aggregators", "=", "self", ".", "bw_aggregators_second", ",", "\n", "window_size", "=", "self", ".", "gcn_window_size_second", ",", "\n", "layer_size", "=", "self", ".", "gcn_layer_size_second", ",", "\n", "scope", "=", "\"second_gcn\"", ",", "\n", "agg_type", "=", "self", ".", "agg_type_second", ",", "\n", "sample_size_per_layer", "=", "self", ".", "sample_size_per_layer_first", ",", "\n", "keep_inter_state", "=", "self", ".", "if_use_multiple_gcn_2_state", ")", "\n", "\n", "max_graph_1_rep", "=", "gcn_1_res", "[", "1", "]", "\n", "mean_graph_1_rep", "=", "gcn_1_res", "[", "2", "]", "\n", "graph_1_rep_dim", "=", "gcn_1_res", "[", "3", "]", "\n", "\n", "gcn_2_res", "=", "self", ".", "gcn_encode", "(", "self", ".", "batch_nodes_second", ",", "\n", "node_2_rep", ",", "\n", "self", ".", "fw_adj_info_second", ",", "\n", "self", ".", "bw_adj_info_second", ",", "\n", "input_node_dim", "=", "node_1_aware_dim", ",", "\n", "output_node_dim", "=", "self", ".", "aggregator_dim_second", ",", "\n", "fw_aggregators", "=", "self", ".", "fw_aggregators_second", ",", "\n", "bw_aggregators", "=", "self", ".", "bw_aggregators_second", ",", "\n", "window_size", "=", "self", ".", "gcn_window_size_second", ",", "\n", "layer_size", "=", "self", ".", "gcn_layer_size_second", ",", "\n", "scope", "=", "\"second_gcn\"", ",", "\n", "agg_type", "=", "self", ".", "agg_type_second", ",", "\n", "sample_size_per_layer", "=", "self", ".", "sample_size_per_layer_second", ",", "\n", "keep_inter_state", "=", "self", ".", "if_use_multiple_gcn_2_state", ")", "\n", "\n", "max_graph_2_rep", "=", "gcn_2_res", "[", "1", "]", "\n", "mean_graph_2_rep", "=", "gcn_2_res", "[", "2", "]", "\n", "graph_2_rep_dim", "=", "gcn_2_res", "[", "3", "]", "\n", "\n", "assert", "graph_1_rep_dim", "==", "graph_2_rep_dim", "\n", "\n", "if", "self", ".", "if_use_multiple_gcn_2_state", ":", "\n", "                        ", "graph_1_reps", "=", "gcn_1_res", "[", "5", "]", "\n", "graph_2_reps", "=", "gcn_2_res", "[", "5", "]", "\n", "inter_dims", "=", "gcn_1_res", "[", "6", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "graph_1_reps", ")", ")", ":", "\n", "                            ", "(", "max_graph_1_rep_tmp", ",", "mean_graph_1_rep_tmp", ")", "=", "graph_1_reps", "[", "idx", "]", "\n", "(", "max_graph_2_rep_tmp", ",", "mean_graph_2_rep_tmp", ")", "=", "graph_2_reps", "[", "idx", "]", "\n", "inter_dim", "=", "inter_dims", "[", "idx", "]", "\n", "aggregation_representation", ".", "append", "(", "max_graph_1_rep_tmp", ")", "\n", "aggregation_representation", ".", "append", "(", "mean_graph_1_rep_tmp", ")", "\n", "aggregation_representation", ".", "append", "(", "max_graph_2_rep_tmp", ")", "\n", "aggregation_representation", ".", "append", "(", "mean_graph_2_rep_tmp", ")", "\n", "aggregation_dim", "+=", "4", "*", "inter_dim", "\n", "\n", "", "", "else", ":", "\n", "                        ", "aggregation_representation", ".", "append", "(", "max_graph_1_rep", ")", "\n", "aggregation_representation", ".", "append", "(", "mean_graph_1_rep", ")", "\n", "aggregation_representation", ".", "append", "(", "max_graph_2_rep", ")", "\n", "aggregation_representation", ".", "append", "(", "mean_graph_2_rep", ")", "\n", "aggregation_dim", "=", "4", "*", "graph_1_rep_dim", "\n", "\n", "# aggregation_representation = tf.concat(aggregation_representation, axis=1)", "\n", "\n", "", "gcn_2_window_size", "=", "int", "(", "len", "(", "aggregation_representation", ")", "/", "4", ")", "\n", "aggregation_dim", "=", "aggregation_dim", "/", "gcn_2_window_size", "\n", "\n", "w_0", "=", "tf", ".", "get_variable", "(", "\"w_0\"", ",", "[", "aggregation_dim", ",", "aggregation_dim", "/", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "b_0", "=", "tf", ".", "get_variable", "(", "\"b_0\"", ",", "[", "aggregation_dim", "/", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "w_1", "=", "tf", ".", "get_variable", "(", "\"w_1\"", ",", "[", "aggregation_dim", "/", "2", ",", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "b_1", "=", "tf", ".", "get_variable", "(", "\"b_1\"", ",", "[", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "weights", "=", "tf", ".", "get_variable", "(", "\"gcn_2_window_weights\"", ",", "[", "gcn_2_window_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# shape: [gcn_2_window_size, batch_size, 2]", "\n", "logits", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "gcn_2_window_size", ")", ":", "\n", "                        ", "max_graph_1_rep", "=", "aggregation_representation", "[", "layer_idx", "*", "4", "+", "0", "]", "\n", "mean_graph_1_rep", "=", "aggregation_representation", "[", "layer_idx", "*", "4", "+", "1", "]", "\n", "max_graph_2_rep", "=", "aggregation_representation", "[", "layer_idx", "*", "4", "+", "2", "]", "\n", "mean_graph_2_rep", "=", "aggregation_representation", "[", "layer_idx", "*", "4", "+", "3", "]", "\n", "\n", "aggregation_representation_single", "=", "tf", ".", "concat", "(", "\n", "[", "max_graph_1_rep", ",", "mean_graph_1_rep", ",", "max_graph_2_rep", ",", "mean_graph_2_rep", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# ====== Prediction Layer ===============", "\n", "logit", "=", "tf", ".", "matmul", "(", "aggregation_representation_single", ",", "w_0", ")", "+", "b_0", "\n", "logit", "=", "tf", ".", "tanh", "(", "logit", ")", "\n", "logit", "=", "tf", ".", "matmul", "(", "logit", ",", "w_1", ")", "+", "b_1", "\n", "logits", ".", "append", "(", "logit", ")", "\n", "\n", "", "if", "len", "(", "logits", ")", "!=", "1", ":", "\n", "                        ", "logits", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "logits", ",", "axis", "=", "0", ")", ",", "[", "gcn_2_window_size", ",", "-", "1", ",", "2", "]", ")", "\n", "logits", "=", "tf", ".", "transpose", "(", "logits", ",", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "logits", "=", "tf", ".", "multiply", "(", "logits", ",", "tf", ".", "expand_dims", "(", "weights", ",", "axis", "=", "-", "1", ")", ")", "\n", "logits", "=", "tf", ".", "reduce_sum", "(", "logits", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                        ", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "# ====== Highway layer ============", "\n", "# if options['with_aggregation_highway']:", "\n", "\n", "", "", "", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "self", ".", "y_pred", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "y_true", ",", "logits", "=", "logits", ",", "\n", "name", "=", "\"xentropy_loss\"", ")", ")", "/", "tf", ".", "cast", "(", "\n", "self", ".", "batch_size", ",", "tf", ".", "float32", ")", "\n", "\n", "# ============  Training Objective ===========================", "\n", "", "if", "self", ".", "mode", "==", "\"train\"", "and", "not", "self", ".", "if_pred_on_dev", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", ")", "\n", "params", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "gradients", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "params", ")", "\n", "clipped_gradients", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "gradients", ",", "1", ")", "\n", "self", ".", "training_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "clipped_gradients", ",", "params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.build_encoder_cell": [[1542, 1556], ["tensorflow.nn.rnn_cell.BasicLSTMCell", "range", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.nn.rnn_cell.DropoutWrapper", "tensorflow.contrib.rnn.BasicLSTMCell", "cell_list.append", "tensorflow.nn.rnn_cell.DropoutWrapper"], "methods", ["None"], ["", "", "def", "build_encoder_cell", "(", "self", ",", "num_layers", ",", "hidden_size", ")", ":", "\n", "        ", "if", "num_layers", "==", "1", ":", "\n", "            ", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "hidden_size", ")", "\n", "if", "self", ".", "mode", "==", "\"train\"", "and", "self", ".", "dropout", ">", "0.0", ":", "\n", "                ", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "cell", ",", "self", ".", "dropout", ")", "\n", "", "return", "cell", "\n", "", "else", ":", "\n", "            ", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "                ", "single_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "hidden_size", ")", "\n", "if", "self", ".", "mode", "==", "\"train\"", "and", "self", ".", "dropout", ">", "0.0", ":", "\n", "                    ", "single_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "single_cell", ",", "self", ".", "dropout", ")", "\n", "", "cell_list", ".", "append", "(", "single_cell", ")", "\n", "", "return", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "cell_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.gcn_encode": [[1557, 1735], ["tensorflow.variable_scope", "gmnn.UniformNeighborSampler", "gmnn.UniformNeighborSampler", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "UniformNeighborSampler.", "UniformNeighborSampler.", "range", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "res.append", "res.append", "res.append", "tensorflow.shape", "gmnn.GraphMatchNN.watch[].append", "range", "tensorflow.reshape", "tensorflow.concat", "range", "res.append", "res.append", "res.append", "len", "fw_aggregators.append", "len", "bw_aggregators.append", "AttentionAggregator.", "len", "tensorflow.reshape", "tensorflow.nn.relu", "inter_node_reps.append", "inter_graph_dims.append", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.reshape", "inter_graph_reps.append", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "inter_fw_hiddens.append", "inter_dims.append", "AttentionAggregator.", "tensorflow.reshape", "tensorflow.concat", "len", "fw_aggregators[].append", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "inter_bw_hiddens.append", "gmnn.GCNAggregator", "len", "bw_aggregators[].append", "tensorflow.concat", "tensorflow.variable_scope", "gmnn.multi_highway_layer", "gmnn.MeanAggregator", "tensorflow.zeros", "gmnn.GCNAggregator", "gmnn.MaxPoolingAggregator", "gmnn.MeanAggregator", "tensorflow.zeros", "gmnn.SeqAggregator", "gmnn.MaxPoolingAggregator", "gmnn.AttentionAggregator", "gmnn.SeqAggregator", "gmnn.AttentionAggregator"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_highway_layer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "", "def", "gcn_encode", "(", "self", ",", "batch_nodes", ",", "embedded_node_rep", ",", "fw_adj_info", ",", "bw_adj_info", ",", "input_node_dim", ",", "output_node_dim", ",", "\n", "fw_aggregators", ",", "bw_aggregators", ",", "window_size", ",", "layer_size", ",", "scope", ",", "agg_type", ",", "sample_size_per_layer", ",", "\n", "keep_inter_state", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "single_graph_nodes_size", "=", "tf", ".", "shape", "(", "batch_nodes", ")", "[", "1", "]", "\n", "# ============ encode graph structure ==========", "\n", "fw_sampler", "=", "UniformNeighborSampler", "(", "fw_adj_info", ")", "\n", "bw_sampler", "=", "UniformNeighborSampler", "(", "bw_adj_info", ")", "\n", "nodes", "=", "tf", ".", "reshape", "(", "batch_nodes", ",", "[", "-", "1", ",", "]", ")", "\n", "\n", "# the fw_hidden and bw_hidden is the initial node embedding", "\n", "# [node_size, dim_size]", "\n", "fw_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedded_node_rep", ",", "nodes", ")", "\n", "bw_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedded_node_rep", ",", "nodes", ")", "\n", "\n", "# [node_size, adj_size]", "\n", "fw_sampled_neighbors", "=", "fw_sampler", "(", "(", "nodes", ",", "sample_size_per_layer", ")", ")", "\n", "bw_sampled_neighbors", "=", "bw_sampler", "(", "(", "nodes", ",", "sample_size_per_layer", ")", ")", "\n", "\n", "inter_fw_hiddens", "=", "[", "]", "\n", "inter_bw_hiddens", "=", "[", "]", "\n", "inter_dims", "=", "[", "]", "\n", "\n", "if", "scope", "==", "\"first_gcn\"", ":", "\n", "                ", "self", ".", "watch", "[", "\"node_1_rep_in_first_gcn\"", "]", "=", "[", "]", "\n", "\n", "", "fw_hidden_dim", "=", "input_node_dim", "\n", "# layer is the index of convolution and hop is used to combine information", "\n", "for", "layer", "in", "range", "(", "layer_size", ")", ":", "\n", "                ", "self", ".", "watch", "[", "\"node_1_rep_in_first_gcn\"", "]", ".", "append", "(", "fw_hidden", ")", "\n", "\n", "if", "len", "(", "fw_aggregators", ")", "<=", "layer", ":", "\n", "                    ", "fw_aggregators", ".", "append", "(", "[", "]", ")", "\n", "", "if", "len", "(", "bw_aggregators", ")", "<=", "layer", ":", "\n", "                    ", "bw_aggregators", ".", "append", "(", "[", "]", ")", "\n", "", "for", "hop", "in", "range", "(", "window_size", ")", ":", "\n", "                    ", "if", "hop", ">", "6", ":", "\n", "                        ", "fw_aggregator", "=", "fw_aggregators", "[", "layer", "]", "[", "6", "]", "\n", "", "elif", "len", "(", "fw_aggregators", "[", "layer", "]", ")", ">", "hop", ":", "\n", "                        ", "fw_aggregator", "=", "fw_aggregators", "[", "layer", "]", "[", "hop", "]", "\n", "", "else", ":", "\n", "                        ", "if", "agg_type", "==", "\"GCN\"", ":", "\n", "                            ", "fw_aggregator", "=", "GCNAggregator", "(", "fw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"mean_pooling\"", ":", "\n", "                            ", "fw_aggregator", "=", "MeanAggregator", "(", "fw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "if_use_high_way", "=", "self", ".", "with_gcn_highway", ",", "\n", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"max_pooling\"", ":", "\n", "                            ", "fw_aggregator", "=", "MaxPoolingAggregator", "(", "fw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"lstm\"", ":", "\n", "                            ", "fw_aggregator", "=", "SeqAggregator", "(", "fw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"att\"", ":", "\n", "                            ", "fw_aggregator", "=", "AttentionAggregator", "(", "fw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n", "", "fw_aggregators", "[", "layer", "]", ".", "append", "(", "fw_aggregator", ")", "\n", "\n", "# [node_size, adj_size, word_embedding_dim]", "\n", "", "if", "layer", "==", "0", "and", "hop", "==", "0", ":", "\n", "                        ", "neigh_vec_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedded_node_rep", ",", "fw_sampled_neighbors", ")", "\n", "", "else", ":", "\n", "                        ", "neigh_vec_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "tf", ".", "concat", "(", "[", "fw_hidden", ",", "tf", ".", "zeros", "(", "[", "1", ",", "fw_hidden_dim", "]", ")", "]", ",", "0", ")", ",", "fw_sampled_neighbors", ")", "\n", "\n", "# if self.with_gcn_highway:", "\n", "#     # we try to forget something when introducing the neighbor information", "\n", "#     with tf.variable_scope(\"fw_hidden_highway\"):", "\n", "#         fw_hidden = multi_highway_layer(fw_hidden, fw_hidden_dim, options['highway_layer_num'])", "\n", "\n", "", "bw_hidden_dim", "=", "fw_hidden_dim", "\n", "\n", "fw_hidden", ",", "fw_hidden_dim", "=", "fw_aggregator", "(", "(", "fw_hidden", ",", "neigh_vec_hidden", ")", ")", "\n", "\n", "if", "keep_inter_state", ":", "\n", "                        ", "inter_fw_hiddens", ".", "append", "(", "fw_hidden", ")", "\n", "inter_dims", ".", "append", "(", "fw_hidden_dim", ")", "\n", "\n", "", "if", "self", ".", "graph_encode_direction", "==", "\"bi\"", ":", "\n", "                        ", "if", "hop", ">", "6", ":", "\n", "                            ", "bw_aggregator", "=", "bw_aggregators", "[", "layer", "]", "[", "6", "]", "\n", "", "elif", "len", "(", "bw_aggregators", "[", "layer", "]", ")", ">", "hop", ":", "\n", "                            ", "bw_aggregator", "=", "bw_aggregators", "[", "layer", "]", "[", "hop", "]", "\n", "", "else", ":", "\n", "                            ", "if", "agg_type", "==", "\"GCN\"", ":", "\n", "                                ", "bw_aggregator", "=", "GCNAggregator", "(", "bw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"mean_pooling\"", ":", "\n", "                                ", "bw_aggregator", "=", "MeanAggregator", "(", "bw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "if_use_high_way", "=", "self", ".", "with_gcn_highway", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"max_pooling\"", ":", "\n", "                                ", "bw_aggregator", "=", "MaxPoolingAggregator", "(", "bw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"lstm\"", ":", "\n", "                                ", "bw_aggregator", "=", "SeqAggregator", "(", "bw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "elif", "agg_type", "==", "\"att\"", ":", "\n", "                                ", "bw_aggregator", "=", "AttentionAggregator", "(", "bw_hidden_dim", ",", "output_node_dim", ",", "concat", "=", "self", ".", "concat", ",", "\n", "mode", "=", "self", ".", "mode", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "", "bw_aggregators", "[", "layer", "]", ".", "append", "(", "bw_aggregator", ")", "\n", "\n", "", "if", "layer", "==", "0", "and", "hop", "==", "0", ":", "\n", "                            ", "neigh_vec_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedded_node_rep", ",", "bw_sampled_neighbors", ")", "\n", "", "else", ":", "\n", "                            ", "neigh_vec_hidden", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "tf", ".", "concat", "(", "[", "bw_hidden", ",", "tf", ".", "zeros", "(", "[", "1", ",", "fw_hidden_dim", "]", ")", "]", ",", "0", ")", ",", "bw_sampled_neighbors", ")", "\n", "\n", "", "if", "self", ".", "with_gcn_highway", ":", "\n", "                            ", "with", "tf", ".", "variable_scope", "(", "\"bw_hidden_highway\"", ")", ":", "\n", "                                ", "bw_hidden", "=", "multi_highway_layer", "(", "bw_hidden", ",", "fw_hidden_dim", ",", "\n", "self", ".", "conf", ".", "options", "[", "'highway_layer_num'", "]", ")", "\n", "\n", "", "", "bw_hidden", ",", "bw_hidden_dim", "=", "bw_aggregator", "(", "(", "bw_hidden", ",", "neigh_vec_hidden", ")", ")", "\n", "\n", "if", "keep_inter_state", ":", "\n", "                            ", "inter_bw_hiddens", ".", "append", "(", "bw_hidden", ")", "\n", "\n", "", "", "", "", "node_dim", "=", "fw_hidden_dim", "\n", "\n", "# hidden stores the representation for all nodes", "\n", "fw_hidden", "=", "tf", ".", "reshape", "(", "fw_hidden", ",", "[", "-", "1", ",", "single_graph_nodes_size", ",", "node_dim", "]", ")", "\n", "if", "self", ".", "graph_encode_direction", "==", "\"bi\"", ":", "\n", "                ", "bw_hidden", "=", "tf", ".", "reshape", "(", "bw_hidden", ",", "[", "-", "1", ",", "single_graph_nodes_size", ",", "node_dim", "]", ")", "\n", "hidden", "=", "tf", ".", "concat", "(", "[", "fw_hidden", ",", "bw_hidden", "]", ",", "axis", "=", "2", ")", "\n", "graph_dim", "=", "2", "*", "node_dim", "\n", "", "else", ":", "\n", "                ", "hidden", "=", "fw_hidden", "\n", "graph_dim", "=", "node_dim", "\n", "\n", "", "hidden", "=", "tf", ".", "nn", ".", "relu", "(", "hidden", ")", "\n", "max_pooled", "=", "tf", ".", "reduce_max", "(", "hidden", ",", "1", ")", "\n", "mean_pooled", "=", "tf", ".", "reduce_mean", "(", "hidden", ",", "1", ")", "\n", "res", "=", "[", "hidden", "]", "\n", "\n", "max_graph_embedding", "=", "tf", ".", "reshape", "(", "max_pooled", ",", "[", "-", "1", ",", "graph_dim", "]", ")", "\n", "mean_graph_embedding", "=", "tf", ".", "reshape", "(", "mean_pooled", ",", "[", "-", "1", ",", "graph_dim", "]", ")", "\n", "res", ".", "append", "(", "max_graph_embedding", ")", "\n", "res", ".", "append", "(", "mean_graph_embedding", ")", "\n", "res", ".", "append", "(", "graph_dim", ")", "\n", "\n", "if", "keep_inter_state", ":", "\n", "                ", "inter_node_reps", "=", "[", "]", "\n", "inter_graph_reps", "=", "[", "]", "\n", "inter_graph_dims", "=", "[", "]", "\n", "# process the inter hidden states", "\n", "for", "_", "in", "range", "(", "len", "(", "inter_fw_hiddens", ")", ")", ":", "\n", "                    ", "inter_fw_hidden", "=", "inter_fw_hiddens", "[", "_", "]", "\n", "inter_bw_hidden", "=", "inter_bw_hiddens", "[", "_", "]", "\n", "inter_dim", "=", "inter_dims", "[", "_", "]", "\n", "inter_fw_hidden", "=", "tf", ".", "reshape", "(", "inter_fw_hidden", ",", "[", "-", "1", ",", "single_graph_nodes_size", ",", "inter_dim", "]", ")", "\n", "\n", "if", "self", ".", "graph_encode_direction", "==", "\"bi\"", ":", "\n", "                        ", "inter_bw_hidden", "=", "tf", ".", "reshape", "(", "inter_bw_hidden", ",", "[", "-", "1", ",", "single_graph_nodes_size", ",", "inter_dim", "]", ")", "\n", "inter_hidden", "=", "tf", ".", "concat", "(", "[", "inter_fw_hidden", ",", "inter_bw_hidden", "]", ",", "axis", "=", "2", ")", "\n", "inter_graph_dim", "=", "inter_dim", "*", "2", "\n", "", "else", ":", "\n", "                        ", "inter_hidden", "=", "inter_fw_hidden", "\n", "inter_graph_dim", "=", "inter_dim", "\n", "\n", "", "inter_node_rep", "=", "tf", ".", "nn", ".", "relu", "(", "inter_hidden", ")", "\n", "inter_node_reps", ".", "append", "(", "inter_node_rep", ")", "\n", "inter_graph_dims", ".", "append", "(", "inter_graph_dim", ")", "\n", "\n", "max_pooled_tmp", "=", "tf", ".", "reduce_max", "(", "inter_node_rep", ",", "1", ")", "\n", "mean_pooled_tmp", "=", "tf", ".", "reduce_max", "(", "inter_node_rep", ",", "1", ")", "\n", "max_graph_embedding", "=", "tf", ".", "reshape", "(", "max_pooled_tmp", ",", "[", "-", "1", ",", "inter_graph_dim", "]", ")", "\n", "mean_graph_embedding", "=", "tf", ".", "reshape", "(", "mean_pooled_tmp", ",", "[", "-", "1", ",", "inter_graph_dim", "]", ")", "\n", "inter_graph_reps", ".", "append", "(", "(", "max_graph_embedding", ",", "mean_graph_embedding", ")", ")", "\n", "\n", "", "res", ".", "append", "(", "inter_node_reps", ")", "\n", "res", ".", "append", "(", "inter_graph_reps", ")", "\n", "res", ".", "append", "(", "inter_graph_dims", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act": [[1736, 1768], ["sess.run", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "sess.run", "sess.run"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "act", "(", "self", ",", "sess", ",", "mode", ",", "dict", ",", "if_pred_on_dev", ",", "eval", ")", ":", "\n", "        ", "self", ".", "if_pred_on_dev", "=", "if_pred_on_dev", "\n", "\n", "feed_dict", "=", "{", "\n", "self", ".", "y_true", ":", "np", ".", "array", "(", "dict", "[", "'y'", "]", ")", ",", "\n", "self", ".", "fw_adj_info_first", ":", "np", ".", "array", "(", "dict", "[", "'fw_adj_info_first'", "]", ")", ",", "\n", "self", ".", "bw_adj_info_first", ":", "np", ".", "array", "(", "dict", "[", "'bw_adj_info_first'", "]", ")", ",", "\n", "self", ".", "feature_info_first", ":", "np", ".", "array", "(", "dict", "[", "'feature_info_first'", "]", ")", ",", "\n", "self", ".", "feature_len_first", ":", "np", ".", "array", "(", "dict", "[", "'feature_len_first'", "]", ")", ",", "\n", "self", ".", "batch_nodes_first", ":", "np", ".", "array", "(", "dict", "[", "'batch_nodes_first'", "]", ")", ",", "\n", "self", ".", "batch_mask_first", ":", "np", ".", "array", "(", "dict", "[", "'batch_mask_first'", "]", ")", ",", "\n", "self", ".", "looking_table_first", ":", "np", ".", "array", "(", "dict", "[", "'looking_table_first'", "]", ")", ",", "\n", "\n", "self", ".", "fw_adj_info_second", ":", "np", ".", "array", "(", "dict", "[", "'fw_adj_info_second'", "]", ")", ",", "\n", "self", ".", "bw_adj_info_second", ":", "np", ".", "array", "(", "dict", "[", "'bw_adj_info_second'", "]", ")", ",", "\n", "self", ".", "feature_info_second", ":", "np", ".", "array", "(", "dict", "[", "'feature_info_second'", "]", ")", ",", "\n", "self", ".", "feature_len_second", ":", "np", ".", "array", "(", "dict", "[", "'feature_len_second'", "]", ")", ",", "\n", "self", ".", "batch_nodes_second", ":", "np", ".", "array", "(", "dict", "[", "'batch_nodes_second'", "]", ")", ",", "\n", "self", ".", "batch_mask_second", ":", "np", ".", "array", "(", "dict", "[", "'batch_mask_second'", "]", ")", ",", "\n", "self", ".", "looking_table_second", ":", "np", ".", "array", "(", "dict", "[", "'looking_table_second'", "]", ")", ",", "\n", "}", "\n", "if", "mode", "==", "\"train\"", "and", "not", "if_pred_on_dev", ":", "\n", "            ", "output_feeds", "=", "[", "self", ".", "watch", ",", "self", ".", "training_op", ",", "self", ".", "loss", "]", "\n", "", "elif", "mode", "==", "\"test\"", "or", "if_pred_on_dev", ":", "\n", "            ", "output_feeds", "=", "[", "self", ".", "y_pred", "]", "\n", "\n", "", "if", "eval", ":", "\n", "            ", "embeds1", "=", "sess", ".", "run", "(", "self", ".", "watch", "[", "\"node_1_rep_initial\"", "]", ",", "feed_dict", ")", "\n", "embeds2", "=", "sess", ".", "run", "(", "self", ".", "watch", "[", "\"node_2_rep_initial\"", "]", ",", "feed_dict", ")", "\n", "return", "embeds1", ",", "embeds2", "\n", "", "results", "=", "sess", ".", "run", "(", "output_feeds", ",", "feed_dict", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.__init__": [[1771, 1802], ["openea.models.basic_model.BasicModel.__init__", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attr", "=", "None", "\n", "self", ".", "opt", "=", "'SGD'", "\n", "self", ".", "act_func", "=", "tf", ".", "nn", ".", "relu", "\n", "self", ".", "dropout", "=", "0.0", "\n", "# *****************************add*******************************************************", "\n", "self", ".", "struct_loss", "=", "None", "\n", "self", ".", "struct_optimizer", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "# **********GMNN add new arguments**************************", "\n", "self", ".", "use_pretrained_embedding", "=", "None", "\n", "self", ".", "hidden_layer_dim", "=", "None", "\n", "self", ".", "pretraind_word_embedding", "=", "None", "\n", "self", ".", "word_idx", "=", "None", "\n", "self", ".", "embedding_path", "=", "None", "\n", "self", ".", "pretraind_word_size", "=", "0", "\n", "self", ".", "word_embedding_dime", "=", "None", "\n", "self", ".", "unknown_word", "=", "None", "\n", "self", ".", "conf", "=", "None", "\n", "self", ".", "id_dict1", "=", "dict", "(", ")", "\n", "self", ".", "id_dict2", "=", "dict", "(", ")", "\n", "self", ".", "assign_gen", "=", "dict", "(", ")", "\n", "self", ".", "save_g1_batch", "=", "None", "\n", "self", ".", "save_g2_batch", "=", "None", "\n", "self", ".", "save_label_batch", "=", "None", "\n", "self", ".", "temp_model", "=", "None", "\n", "self", ".", "graphs_1_test", "=", "None", "\n", "self", ".", "graphs_2_test", "=", "None", "\n", "self", ".", "labels_test", "=", "None", "\n", "self", ".", "saver", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.init": [[1803, 1833], ["numpy.array", "dict", "gmnn.GMNN.kgs.kg1.entities_id_dict.items", "gmnn.GMNN.kgs.kg2.entities_id_dict.items", "[].lower", "temp.replace.replace.replace", "temp.replace.replace.replace", "temp.replace.replace.replace", "[].lower", "temp.replace.replace.replace", "temp.replace.replace.replace", "temp.replace.replace.replace", "int", "int", "int", "int", "int", "int", "int", "int", "key.split", "key.split"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "\n", "# ****************************init GMNN arguments****************", "\n", "        ", "self", ".", "use_pretrained_embedding", "=", "self", ".", "args", ".", "use_pretrained_embedding", "\n", "self", ".", "hidden_layer_dim", "=", "self", ".", "args", ".", "hidden_layer_dim", "\n", "self", ".", "pretraind_word_embedding", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "word_idx", "=", "dict", "(", ")", "\n", "self", ".", "embedding_path", "=", "self", ".", "args", ".", "embedding_path", "\n", "self", ".", "word_embedding_dim", "=", "self", ".", "args", ".", "word_embedding_dim", "\n", "self", ".", "unknown_word", "=", "\"**UNK**\"", "\n", "self", ".", "conf", "=", "self", ".", "args", "\n", "\n", "for", "key", ",", "value", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "temp", "=", "key", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "\n", "temp", "=", "temp", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", "\n", "temp", "=", "temp", ".", "replace", "(", "\")\"", ",", "\"\"", ")", "\n", "self", ".", "id_dict1", "[", "int", "(", "value", ")", "]", "=", "temp", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "\n", "# self.id_dict1[int(value)] = key.split(\"/\")[-1].replace(\"_\", \" \")", "\n", "", "for", "key", ",", "value", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "temp", "=", "key", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "lower", "(", ")", "\n", "temp", "=", "temp", ".", "replace", "(", "\"(\"", ",", "\"\"", ")", "\n", "temp", "=", "temp", ".", "replace", "(", "\")\"", ",", "\"\"", ")", "\n", "self", ".", "id_dict2", "[", "int", "(", "value", ")", "]", "=", "temp", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "\n", "# self.id_dict2[int(value)] = key.split(\"/\")[-1].replace(\"_\", \" \")", "\n", "", "for", "item", "in", "self", ".", "kgs", ".", "train_links", ":", "\n", "            ", "self", ".", "assign_gen", "[", "int", "(", "item", "[", "0", "]", ")", "]", "=", "int", "(", "item", "[", "1", "]", ")", "\n", "", "for", "item", "in", "self", ".", "kgs", ".", "valid_links", ":", "\n", "            ", "self", ".", "assign_gen", "[", "int", "(", "item", "[", "0", "]", ")", "]", "=", "int", "(", "item", "[", "1", "]", ")", "\n", "", "for", "item", "in", "self", ".", "kgs", ".", "test_links", ":", "\n", "            ", "self", ".", "assign_gen", "[", "int", "(", "item", "[", "0", "]", ")", "]", "=", "int", "(", "item", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.extract_sub_graph": [[1834, 1884], ["range", "len", "g_ids_features_list.append", "g_adj_list.append", "len", "hop_1_ids.append", "len", "g_adj[].append"], "methods", ["None"], ["", "", "def", "extract_sub_graph", "(", "self", ",", "id_list", ",", "id_features", ",", "fw_graph", ")", ":", "\n", "        ", "g_ids_features_list", "=", "[", "]", "\n", "g_adj_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "id_list", ")", ")", ":", "\n", "            ", "id", "=", "id_list", "[", "_", "]", "\n", "g_ids_features", "=", "{", "}", "\n", "g_adj", "=", "{", "}", "\n", "id_mapping", "=", "{", "}", "\n", "hop_1_ids", "=", "[", "id", "]", "\n", "\n", "if", "id", "in", "fw_graph", ":", "\n", "                ", "fw_neighbor_info", "=", "fw_graph", "[", "id", "]", "\n", "for", "(", "rel_id", ",", "obj_id", ")", "in", "fw_neighbor_info", ":", "\n", "                    ", "if", "obj_id", "not", "in", "hop_1_ids", ":", "\n", "                        ", "hop_1_ids", ".", "append", "(", "obj_id", ")", "\n", "\n", "", "", "", "for", "subj_id", "in", "hop_1_ids", ":", "\n", "                ", "if", "subj_id", "not", "in", "id_mapping", ":", "\n", "                    ", "id_mapping", "[", "subj_id", "]", "=", "len", "(", "id_mapping", ")", "\n", "\n", "", "subj_mapped_id", "=", "id_mapping", "[", "subj_id", "]", "\n", "\n", "if", "subj_mapped_id", "not", "in", "g_ids_features", ":", "\n", "                    ", "feature", "=", "id_features", "[", "subj_id", "]", "\n", "g_ids_features", "[", "subj_mapped_id", "]", "=", "feature", "\n", "\n", "", "if", "subj_mapped_id", "not", "in", "g_adj", ":", "\n", "                    ", "g_adj", "[", "subj_mapped_id", "]", "=", "[", "]", "\n", "\n", "", "if", "subj_id", "in", "fw_graph", ":", "\n", "                    ", "fw_neighbor_info", "=", "fw_graph", "[", "subj_id", "]", "\n", "for", "(", "rel_id", ",", "obj_id", ")", "in", "fw_neighbor_info", ":", "\n", "                        ", "if", "obj_id", "not", "in", "hop_1_ids", ":", "\n", "                            ", "continue", "\n", "\n", "", "if", "obj_id", "not", "in", "id_mapping", ":", "\n", "                            ", "id_mapping", "[", "obj_id", "]", "=", "len", "(", "id_mapping", ")", "\n", "", "obj_mapped_id", "=", "id_mapping", "[", "obj_id", "]", "\n", "\n", "if", "obj_mapped_id", "not", "in", "g_adj", "[", "subj_mapped_id", "]", ":", "\n", "                            ", "g_adj", "[", "subj_mapped_id", "]", ".", "append", "(", "obj_mapped_id", ")", "\n", "\n", "", "if", "obj_mapped_id", "not", "in", "g_ids_features", ":", "\n", "                            ", "feature", "=", "id_features", "[", "obj_id", "]", "\n", "g_ids_features", "[", "obj_mapped_id", "]", "=", "feature", "\n", "\n", "", "", "", "", "g_ids_features_list", ".", "append", "(", "g_ids_features", ")", "\n", "g_adj_list", ".", "append", "(", "g_adj", ")", "\n", "\n", "", "return", "g_ids_features_list", ",", "g_adj_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.can_gen": [[1885, 1962], ["set", "gmnn.GMNN.id_dict1.items", "set", "gmnn.GMNN.id_dict2.items", "gmnn.div_list", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "codecs.open", "emb_fr.readlines", "value.split", "gmnn.GMNN.can_gen.if_zero_vec"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list"], ["", "def", "can_gen", "(", "self", ",", "method", ")", ":", "\n", "        ", "def", "if_zero_vec", "(", "zvec", ")", ":", "\n", "            ", "tag", "=", "True", "\n", "for", "_", "in", "range", "(", "len", "(", "zvec", ")", ")", ":", "\n", "                ", "if", "zvec", "[", "_", "]", "!=", "0.0", ":", "\n", "                    ", "tag", "=", "False", "\n", "break", "\n", "", "", "return", "tag", "\n", "\n", "", "w_vec", "=", "{", "}", "\n", "\n", "with", "codecs", ".", "open", "(", "self", ".", "args", ".", "embedding_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "emb_fr", ":", "\n", "            ", "lines", "=", "emb_fr", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "w", "=", "info", "[", "0", "]", "\n", "vec", "=", "[", "float", "(", "x", ")", "for", "x", "in", "info", "[", "1", ":", "]", "]", "\n", "w_vec", "[", "w", "]", "=", "vec", "\n", "", "", "id_1_vec", "=", "{", "}", "\n", "zero_vec_id1", "=", "set", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "id_dict1", ".", "items", "(", ")", ":", "\n", "            ", "vec", "=", "[", "0.0", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "split_value", "=", "value", ".", "split", "(", "\" \"", ")", "\n", "for", "item", "in", "split_value", ":", "\n", "                ", "item", "=", "item", ".", "lower", "(", ")", "\n", "if", "item", "in", "w_vec", ":", "\n", "                    ", "temp_v", "=", "w_vec", "[", "item", "]", "\n", "vec", "=", "[", "vec", "[", "_", "]", "+", "temp_v", "[", "_", "]", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "", "", "vec", "=", "[", "vec", "[", "_", "]", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "id_1_vec", "[", "key", "]", "=", "vec", "\n", "if", "if_zero_vec", "(", "vec", ")", ":", "\n", "                ", "zero_vec_id1", ".", "add", "(", "key", ")", "\n", "\n", "", "", "id_2_vec", "=", "{", "}", "\n", "zero_vec_id2", "=", "set", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "id_dict2", ".", "items", "(", ")", ":", "\n", "            ", "vec", "=", "[", "0.0", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "split_value", "=", "value", ".", "split", "(", "\" \"", ")", "\n", "for", "item", "in", "split_value", ":", "\n", "                ", "if", "item", "in", "w_vec", ":", "\n", "                    ", "temp_v", "=", "w_vec", "[", "item", "]", "\n", "vec", "=", "[", "vec", "[", "_", "]", "+", "temp_v", "[", "_", "]", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "", "", "vec", "=", "[", "vec", "[", "_", "]", "for", "_", "in", "range", "(", "300", ")", "]", "\n", "id_2_vec", "[", "key", "]", "=", "vec", "\n", "if", "if_zero_vec", "(", "vec", ")", ":", "\n", "                ", "zero_vec_id2", ".", "add", "(", "key", ")", "\n", "", "", "real_links", "=", "None", "\n", "if", "method", "==", "\"train\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "train_links", "\n", "", "elif", "method", "==", "\"dev\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "valid_links", "\n", "", "elif", "method", "==", "\"test\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "test_links", "\n", "# *********************************add multiprocessing*****************************", "\n", "", "final_result", "=", "[", "]", "\n", "pool_result", "=", "[", "]", "\n", "tasks", "=", "div_list", "(", "real_links", ",", "8", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "8", ")", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "pool_result", ".", "append", "(", "pool", ".", "apply_async", "(", "find_near", ",", "\n", "(", "task", ",", "id_1_vec", ",", "id_2_vec", ",", "zero_vec_id1", ",", "\n", "zero_vec_id2", ",", "self", ".", "args", ".", "cand_size", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "item", "in", "pool_result", ":", "\n", "            ", "temp_pool_result", "=", "item", ".", "get", "(", ")", "\n", "final_result", ".", "append", "(", "temp_pool_result", ")", "\n", "\n", "# *********************************************************************************", "\n", "", "with", "open", "(", "self", ".", "args", ".", "training_data", "+", "method", "+", "\"_cand_list\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", ",", "\"w\"", ",", "\n", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "final_result", ":", "\n", "                ", "for", "key", "in", "item", ".", "keys", "(", ")", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "key", ")", "+", "\": \"", ")", "\n", "for", "value", "in", "range", "(", "len", "(", "item", "[", "key", "]", ")", ")", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "item", "[", "key", "]", "[", "value", "]", ")", "+", "\" \"", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_data": [[1963, 1993], ["codecs.open", "codecs.open", "f.readlines", "line.strip().split", "int", "info[].strip().split", "fw.write", "str", "str", "int", "fw.write", "line.strip", "info[].strip", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "", "", "def", "gen_data", "(", "self", ",", "method", ")", ":", "\n", "        ", "real_links", "=", "None", "\n", "if", "method", "==", "\"train\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "train_links", "\n", "", "elif", "method", "==", "\"dev\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "valid_links", "\n", "", "elif", "method", "==", "\"test\"", ":", "\n", "            ", "real_links", "=", "self", ".", "kgs", ".", "test_links", "\n", "\n", "", "with", "codecs", ".", "open", "(", "self", ".", "args", ".", "training_data", "+", "method", "+", "\"_cand_list\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", ",", "\n", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ",", "codecs", ".", "open", "(", "self", ".", "args", ".", "training_data", "\n", "+", "method", "+", "\"_examples\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", ",", "\n", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fw", ":", "\n", "            ", "id_1_2_map", "=", "{", "}", "\n", "for", "item", "in", "real_links", ":", "\n", "                ", "id_1_2_map", "[", "item", "[", "0", "]", "]", "=", "item", "[", "1", "]", "\n", "", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\":\"", ")", "\n", "id_1", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "gold_id_2", "=", "id_1_2_map", "[", "id_1", "]", "\n", "cands", "=", "info", "[", "1", "]", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "cands", "=", "cands", "[", "1", ":", "self", ".", "args", ".", "cand_size", "]", "\n", "fw", ".", "write", "(", "str", "(", "id_1", ")", "+", "\"\\t\"", "+", "str", "(", "self", ".", "assign_gen", "[", "id_1", "]", ")", "+", "\"\\t\"", "+", "str", "(", "1", ")", "+", "\"\\n\"", ")", "\n", "for", "cand", "in", "cands", ":", "\n", "                    ", "cand", "=", "int", "(", "cand", ")", "\n", "label", "=", "0", "\n", "if", "cand", "==", "gold_id_2", ":", "\n", "                        ", "label", "=", "1", "\n", "", "fw", ".", "write", "(", "str", "(", "id_1", ")", "+", "\"\\t\"", "+", "str", "(", "cand", ")", "+", "\"\\t\"", "+", "str", "(", "label", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.build_graph": [[1994, 2014], ["codecs.open", "f.readlines", "line.strip().split", "int", "int", "int", "fw_graph[].append", "bw_graph[].append", "line.strip"], "methods", ["None"], ["", "", "", "", "def", "build_graph", "(", "self", ",", "triple_file_path", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "triple_file_path", ",", "'r'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "fw_graph", "=", "{", "}", "\n", "bw_graph", "=", "{", "}", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "subj_id", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "rel_id", "=", "int", "(", "info", "[", "1", "]", ")", "\n", "obj_id", "=", "int", "(", "info", "[", "2", "]", ")", "\n", "\n", "if", "subj_id", "not", "in", "fw_graph", ":", "\n", "                    ", "fw_graph", "[", "subj_id", "]", "=", "[", "]", "\n", "", "fw_graph", "[", "subj_id", "]", ".", "append", "(", "(", "rel_id", ",", "obj_id", ")", ")", "\n", "\n", "if", "obj_id", "not", "in", "bw_graph", ":", "\n", "                    ", "bw_graph", "[", "obj_id", "]", "=", "[", "]", "\n", "", "bw_graph", "[", "obj_id", "]", ".", "append", "(", "(", "rel_id", ",", "subj_id", ")", ")", "\n", "\n", "", "return", "fw_graph", ",", "bw_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.extract_node_feature": [[2015, 2028], ["codecs.open", "f.readlines", "line.strip().split", "int", "len", "info[].lower", "line.strip"], "methods", ["None"], ["", "", "def", "extract_node_feature", "(", "self", ",", "feature_path", ")", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "feature_path", ",", "'r'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "res", "=", "{", "}", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "id", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "if", "len", "(", "info", ")", "!=", "2", ":", "\n", "                    ", "feature", "=", "\"**UNK**\"", "\n", "", "else", ":", "\n", "                    ", "feature", "=", "info", "[", "1", "]", ".", "lower", "(", ")", "\n", "", "res", "[", "id", "]", "=", "feature", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_graph": [[2029, 2053], ["dict", "dict", "list", "gmnn.GMNN.extract_sub_graph", "range", "fw_graph[].append", "bw_graph[].append", "features.keys", "len", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.extract_sub_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "", "def", "gen_graph", "(", "self", ",", "relation_list", ",", "kg_features", ")", ":", "\n", "        ", "fw_graph", "=", "dict", "(", ")", "\n", "bw_graph", "=", "dict", "(", ")", "\n", "features", "=", "kg_features", "\n", "for", "item", "in", "relation_list", ":", "\n", "            ", "if", "int", "(", "item", "[", "0", "]", ")", "not", "in", "fw_graph", ":", "\n", "                ", "fw_graph", "[", "int", "(", "item", "[", "0", "]", ")", "]", "=", "[", "]", "\n", "", "fw_graph", "[", "int", "(", "item", "[", "0", "]", ")", "]", ".", "append", "(", "(", "int", "(", "item", "[", "1", "]", ")", ",", "int", "(", "item", "[", "2", "]", ")", ")", ")", "\n", "if", "int", "(", "item", "[", "2", "]", ")", "not", "in", "bw_graph", ":", "\n", "                ", "bw_graph", "[", "int", "(", "item", "[", "2", "]", ")", "]", "=", "[", "]", "\n", "", "bw_graph", "[", "int", "(", "item", "[", "2", "]", ")", "]", ".", "append", "(", "(", "int", "(", "item", "[", "1", "]", ")", ",", "int", "(", "item", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "id_list", "=", "list", "(", "features", ".", "keys", "(", ")", ")", "\n", "features_list", ",", "adj_list", "=", "self", ".", "extract_sub_graph", "(", "id_list", ",", "features", ",", "fw_graph", ")", "\n", "res_map", "=", "{", "}", "\n", "for", "_", "in", "range", "(", "len", "(", "id_list", ")", ")", ":", "\n", "            ", "id", "=", "id_list", "[", "_", "]", "\n", "feature", "=", "features_list", "[", "_", "]", "\n", "adj", "=", "adj_list", "[", "_", "]", "\n", "jo", "=", "{", "}", "\n", "jo", "[", "'g_ids_features'", "]", "=", "feature", "\n", "jo", "[", "'g_adj'", "]", "=", "adj", "\n", "res_map", "[", "id", "]", "=", "jo", "\n", "", "return", "res_map", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.read_data": [[2054, 2088], ["gmnn.GMNN.gen_graph", "gmnn.GMNN.gen_graph", "open", "fr.readlines", "range", "len", "lines[].strip", "lines[].strip.split", "int", "int", "int", "graphs_1.append", "graphs_2.append", "labels.append", "f[].split", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_graph"], ["", "def", "read_data", "(", "self", ",", "input_path", ",", "word_idx", ",", "if_increase_dct", ")", ":", "\n", "        ", "g1_map", "=", "self", ".", "gen_graph", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "id_dict1", ")", "\n", "g2_map", "=", "self", ".", "gen_graph", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "self", ".", "id_dict2", ")", "\n", "graphs_1", "=", "[", "]", "\n", "graphs_2", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "open", "(", "input_path", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "lines", "=", "fr", ".", "readlines", "(", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "                ", "line", "=", "lines", "[", "_", "]", ".", "strip", "(", ")", "\n", "info", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "id_1", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "id_2", "=", "int", "(", "info", "[", "1", "]", ")", "\n", "label", "=", "int", "(", "info", "[", "2", "]", ")", "\n", "\n", "graph_1", "=", "g1_map", "[", "id_1", "]", "\n", "graph_2", "=", "g2_map", "[", "id_2", "]", "\n", "\n", "graph_1", "[", "'g_id'", "]", "=", "id_1", "\n", "graph_2", "[", "'g_id'", "]", "=", "id_2", "\n", "\n", "graphs_1", ".", "append", "(", "graph_1", ")", "\n", "graphs_2", ".", "append", "(", "graph_2", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "if", "if_increase_dct", ":", "\n", "                    ", "features", "=", "[", "graph_1", "[", "'g_ids_features'", "]", ",", "graph_2", "[", "'g_ids_features'", "]", "]", "\n", "for", "f", "in", "features", ":", "\n", "                        ", "for", "id", "in", "f", ":", "\n", "                            ", "for", "w", "in", "f", "[", "id", "]", ".", "split", "(", ")", ":", "\n", "                                ", "if", "w", "not", "in", "word_idx", ":", "\n", "                                    ", "word_idx", "[", "w", "]", "=", "len", "(", "word_idx", ")", "+", "1", "\n", "\n", "", "", "", "", "", "", "", "return", "graphs_1", ",", "graphs_2", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph": [[2089, 2141], ["len", "range", "len", "features.keys", "g_nodes.append", "g_ids_features.keys", "g_ids_features.keys", "int", "nodes.append", "int", "int", "g_fw_adj[].append", "g_bw_adj[].append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "batch_graph", "(", "self", ",", "graphs", ")", ":", "\n", "        ", "g_ids_features", "=", "{", "}", "\n", "g_fw_adj", "=", "{", "}", "\n", "g_bw_adj", "=", "{", "}", "\n", "g_nodes", "=", "[", "]", "\n", "\n", "for", "g", "in", "graphs", ":", "\n", "            ", "id_adj", "=", "g", "[", "'g_adj'", "]", "\n", "features", "=", "g", "[", "'g_ids_features'", "]", "\n", "\n", "nodes", "=", "[", "]", "\n", "\n", "# we first add all nodes into batch_graph and create a mapping from graph id to batch_graph id, this mapping will be", "\n", "# used in the creation of fw_adj and bw_adj", "\n", "\n", "id_gid_map", "=", "{", "}", "\n", "offset", "=", "len", "(", "g_ids_features", ".", "keys", "(", ")", ")", "\n", "for", "id", "in", "features", ".", "keys", "(", ")", ":", "\n", "                ", "id", "=", "int", "(", "id", ")", "\n", "g_ids_features", "[", "offset", "+", "id", "]", "=", "features", "[", "id", "]", "\n", "id_gid_map", "[", "id", "]", "=", "offset", "+", "id", "\n", "nodes", ".", "append", "(", "offset", "+", "id", ")", "\n", "", "g_nodes", ".", "append", "(", "nodes", ")", "\n", "\n", "for", "id", "in", "id_adj", ":", "\n", "                ", "adj", "=", "id_adj", "[", "id", "]", "\n", "id", "=", "int", "(", "id", ")", "\n", "g_id", "=", "id_gid_map", "[", "id", "]", "\n", "if", "g_id", "not", "in", "g_fw_adj", ":", "\n", "                    ", "g_fw_adj", "[", "g_id", "]", "=", "[", "]", "\n", "", "for", "t", "in", "adj", ":", "\n", "                    ", "t", "=", "int", "(", "t", ")", "\n", "g_t", "=", "id_gid_map", "[", "t", "]", "\n", "g_fw_adj", "[", "g_id", "]", ".", "append", "(", "g_t", ")", "\n", "if", "g_t", "not", "in", "g_bw_adj", ":", "\n", "                        ", "g_bw_adj", "[", "g_t", "]", "=", "[", "]", "\n", "", "g_bw_adj", "[", "g_t", "]", ".", "append", "(", "g_id", ")", "\n", "\n", "", "", "", "node_size", "=", "len", "(", "g_ids_features", ".", "keys", "(", ")", ")", "\n", "for", "id", "in", "range", "(", "node_size", ")", ":", "\n", "            ", "if", "id", "not", "in", "g_fw_adj", ":", "\n", "                ", "g_fw_adj", "[", "id", "]", "=", "[", "]", "\n", "", "if", "id", "not", "in", "g_bw_adj", ":", "\n", "                ", "g_bw_adj", "[", "id", "]", "=", "[", "]", "\n", "\n", "", "", "graph", "=", "{", "}", "\n", "graph", "[", "'g_ids_features'", "]", "=", "g_ids_features", "\n", "graph", "[", "'g_nodes'", "]", "=", "g_nodes", "\n", "graph", "[", "'g_fw_adj'", "]", "=", "g_fw_adj", "\n", "graph", "[", "'g_bw_adj'", "]", "=", "g_bw_adj", "\n", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_label": [[2142, 2153], ["numpy.array", "numpy.array.append", "numpy.array.append", "print"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "vectorize_label", "(", "self", ",", "labels", ")", ":", "\n", "        ", "lv", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "if", "label", "==", "0", "or", "label", "==", "'0'", ":", "\n", "                ", "lv", ".", "append", "(", "[", "1", ",", "0", "]", ")", "\n", "", "elif", "label", "==", "1", "or", "label", "==", "'1'", ":", "\n", "                ", "lv", ".", "append", "(", "[", "0", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"error in vectoring the label\"", ")", "\n", "", "", "lv", "=", "np", ".", "array", "(", "lv", ")", "\n", "return", "lv", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph": [[2154, 2265], ["nv.append", "n_len_v.append", "numpy.array", "numpy.array", "min", "g_fw_adj_v.append", "g_bw_adj_v.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "max", "feature.split", "range", "nv.append", "max", "max", "range", "g_fw_adj_v.append", "range", "g_bw_adj_v.append", "max", "range", "g_node_v.append", "g_node_mask.append", "entity_index.append", "len", "len", "n_len_v.append", "n_len_v.append", "fv.append", "len", "len", "adj.append", "len", "len", "adj.append", "len", "len", "len", "nodes.append", "mask.append", "feature.split", "len", "fv.append", "fv.append", "len", "len", "range", "len", "len", "g_fw_adj.keys", "range", "len", "len", "g_bw_adj.keys", "range", "range", "len", "len", "g_looking_table.append", "g_fw_adj.keys", "g_bw_adj.keys", "len", "g_fw_adj.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "vectorize_batch_graph", "(", "self", ",", "graph", ",", "word_idx", ")", ":", "\n", "# vectorize the graph feature and normalize the adj info", "\n", "        ", "id_features", "=", "graph", "[", "'g_ids_features'", "]", "\n", "gv", "=", "{", "}", "\n", "nv", "=", "[", "]", "\n", "n_len_v", "=", "[", "]", "\n", "word_max_len", "=", "0", "\n", "for", "id", "in", "id_features", ":", "\n", "            ", "feature", "=", "id_features", "[", "id", "]", "\n", "word_max_len", "=", "max", "(", "word_max_len", ",", "len", "(", "feature", ".", "split", "(", ")", ")", ")", "\n", "# word_max_len = min(word_max_len, conf.word_size_max)", "\n", "\n", "", "for", "id", "in", "graph", "[", "'g_ids_features'", "]", ":", "\n", "            ", "feature", "=", "graph", "[", "'g_ids_features'", "]", "[", "id", "]", "\n", "fv", "=", "[", "]", "\n", "for", "token", "in", "feature", ".", "split", "(", ")", ":", "\n", "                ", "if", "len", "(", "token", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "token", "in", "word_idx", ":", "\n", "                    ", "fv", ".", "append", "(", "word_idx", "[", "token", "]", ")", "\n", "", "else", ":", "\n", "                    ", "fv", ".", "append", "(", "word_idx", "[", "self", ".", "args", ".", "unknown_word", "]", ")", "\n", "\n", "", "", "if", "len", "(", "fv", ")", ">", "word_max_len", ":", "\n", "                ", "n_len_v", ".", "append", "(", "word_max_len", ")", "\n", "", "else", ":", "\n", "                ", "n_len_v", ".", "append", "(", "len", "(", "fv", ")", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "word_max_len", "-", "len", "(", "fv", ")", ")", ":", "\n", "                ", "fv", ".", "append", "(", "0", ")", "\n", "", "fv", "=", "fv", "[", ":", "word_max_len", "]", "\n", "nv", ".", "append", "(", "fv", ")", "\n", "\n", "# add an all-zero vector for the PAD node", "\n", "", "nv", ".", "append", "(", "[", "0", "for", "_", "in", "range", "(", "word_max_len", ")", "]", ")", "\n", "n_len_v", ".", "append", "(", "0", ")", "\n", "\n", "gv", "[", "'g_ids_features'", "]", "=", "np", ".", "array", "(", "nv", ")", "\n", "gv", "[", "'g_ids_feature_lens'", "]", "=", "np", ".", "array", "(", "n_len_v", ")", "\n", "\n", "# ============== vectorize adj info ======================", "\n", "g_fw_adj", "=", "graph", "[", "'g_fw_adj'", "]", "\n", "g_fw_adj_v", "=", "[", "]", "\n", "\n", "degree_max_size", "=", "0", "\n", "for", "id", "in", "g_fw_adj", ":", "\n", "            ", "degree_max_size", "=", "max", "(", "degree_max_size", ",", "len", "(", "g_fw_adj", "[", "id", "]", ")", ")", "\n", "", "g_bw_adj", "=", "graph", "[", "'g_bw_adj'", "]", "\n", "for", "id", "in", "g_bw_adj", ":", "\n", "            ", "degree_max_size", "=", "max", "(", "degree_max_size", ",", "len", "(", "g_bw_adj", "[", "id", "]", ")", ")", "\n", "", "degree_max_size", "=", "min", "(", "degree_max_size", ",", "self", ".", "args", ".", "sample_size_per_layer", ")", "\n", "\n", "for", "id", "in", "g_fw_adj", ":", "\n", "            ", "adj", "=", "g_fw_adj", "[", "id", "]", "\n", "for", "_", "in", "range", "(", "degree_max_size", "-", "len", "(", "adj", ")", ")", ":", "\n", "                ", "adj", ".", "append", "(", "len", "(", "g_fw_adj", ".", "keys", "(", ")", ")", ")", "\n", "", "adj", "=", "adj", "[", ":", "degree_max_size", "]", "\n", "assert", "len", "(", "adj", ")", "==", "degree_max_size", "\n", "g_fw_adj_v", ".", "append", "(", "adj", ")", "\n", "\n", "# PAD node directs to the PAD node", "\n", "", "g_fw_adj_v", ".", "append", "(", "[", "len", "(", "g_fw_adj", ".", "keys", "(", ")", ")", "for", "_", "in", "range", "(", "degree_max_size", ")", "]", ")", "\n", "\n", "g_bw_adj_v", "=", "[", "]", "\n", "for", "id", "in", "g_bw_adj", ":", "\n", "            ", "adj", "=", "g_bw_adj", "[", "id", "]", "\n", "for", "_", "in", "range", "(", "degree_max_size", "-", "len", "(", "adj", ")", ")", ":", "\n", "                ", "adj", ".", "append", "(", "len", "(", "g_bw_adj", ".", "keys", "(", ")", ")", ")", "\n", "", "adj", "=", "adj", "[", ":", "degree_max_size", "]", "\n", "assert", "len", "(", "adj", ")", "==", "degree_max_size", "\n", "g_bw_adj_v", ".", "append", "(", "adj", ")", "\n", "\n", "# PAD node directs to the PAD node", "\n", "", "g_bw_adj_v", ".", "append", "(", "[", "len", "(", "g_bw_adj", ".", "keys", "(", ")", ")", "for", "_", "in", "range", "(", "degree_max_size", ")", "]", ")", "\n", "\n", "# ============== vectorize nodes info ====================", "\n", "g_nodes", "=", "graph", "[", "'g_nodes'", "]", "\n", "graph_max_size", "=", "0", "\n", "for", "nodes", "in", "g_nodes", ":", "\n", "            ", "graph_max_size", "=", "max", "(", "graph_max_size", ",", "len", "(", "nodes", ")", ")", "\n", "\n", "", "g_node_v", "=", "[", "]", "\n", "g_node_mask", "=", "[", "]", "\n", "entity_index", "=", "[", "]", "\n", "for", "nodes", "in", "g_nodes", ":", "\n", "            ", "mask", "=", "[", "1", "for", "_", "in", "range", "(", "len", "(", "nodes", ")", ")", "]", "\n", "for", "_", "in", "range", "(", "graph_max_size", "-", "len", "(", "nodes", ")", ")", ":", "\n", "                ", "nodes", ".", "append", "(", "len", "(", "g_fw_adj", ".", "keys", "(", ")", ")", ")", "\n", "mask", ".", "append", "(", "0", ")", "\n", "", "nodes", "=", "nodes", "[", ":", "graph_max_size", "]", "\n", "mask", "=", "mask", "[", ":", "graph_max_size", "]", "\n", "g_node_v", ".", "append", "(", "nodes", ")", "\n", "g_node_mask", ".", "append", "(", "mask", ")", "\n", "entity_index", ".", "append", "(", "0", ")", "\n", "\n", "", "g_looking_table", "=", "[", "]", "\n", "global_count", "=", "0", "\n", "for", "mask", "in", "g_node_mask", ":", "\n", "            ", "for", "item", "in", "mask", ":", "\n", "                ", "if", "item", "==", "1", ":", "\n", "                    ", "g_looking_table", ".", "append", "(", "global_count", ")", "\n", "", "global_count", "+=", "1", "\n", "\n", "", "", "gv", "[", "'g_nodes'", "]", "=", "np", ".", "array", "(", "g_node_v", ")", "\n", "gv", "[", "'g_bw_adj'", "]", "=", "np", ".", "array", "(", "g_bw_adj_v", ")", "\n", "gv", "[", "'g_fw_adj'", "]", "=", "np", ".", "array", "(", "g_fw_adj_v", ")", "\n", "gv", "[", "'g_mask'", "]", "=", "np", ".", "array", "(", "g_node_mask", ")", "\n", "gv", "[", "'g_looking_table'", "]", "=", "np", ".", "array", "(", "g_looking_table", ")", "\n", "gv", "[", "'entity_index'", "]", "=", "entity_index", "\n", "\n", "return", "gv", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.feed_dict": [[2266, 2286], ["None"], "methods", ["None"], ["", "def", "feed_dict", "(", "self", ",", "g1_v_batch", ",", "g2_v_batch", ",", "label_v_batch", ")", ":", "\n", "        ", "dict", "=", "{", "}", "\n", "dict", "[", "'fw_adj_info_first'", "]", "=", "g1_v_batch", "[", "'g_fw_adj'", "]", "\n", "dict", "[", "'bw_adj_info_first'", "]", "=", "g1_v_batch", "[", "'g_bw_adj'", "]", "\n", "dict", "[", "'feature_info_first'", "]", "=", "g1_v_batch", "[", "'g_ids_features'", "]", "\n", "dict", "[", "'feature_len_first'", "]", "=", "g1_v_batch", "[", "'g_ids_feature_lens'", "]", "\n", "dict", "[", "'batch_nodes_first'", "]", "=", "g1_v_batch", "[", "'g_nodes'", "]", "\n", "dict", "[", "'batch_mask_first'", "]", "=", "g1_v_batch", "[", "'g_mask'", "]", "\n", "dict", "[", "'looking_table_first'", "]", "=", "g1_v_batch", "[", "'g_looking_table'", "]", "\n", "\n", "dict", "[", "'fw_adj_info_second'", "]", "=", "g2_v_batch", "[", "'g_fw_adj'", "]", "\n", "dict", "[", "'bw_adj_info_second'", "]", "=", "g2_v_batch", "[", "'g_bw_adj'", "]", "\n", "dict", "[", "'feature_info_second'", "]", "=", "g2_v_batch", "[", "'g_ids_features'", "]", "\n", "dict", "[", "'feature_len_second'", "]", "=", "g2_v_batch", "[", "'g_ids_feature_lens'", "]", "\n", "dict", "[", "'batch_nodes_second'", "]", "=", "g2_v_batch", "[", "'g_nodes'", "]", "\n", "dict", "[", "'batch_mask_second'", "]", "=", "g2_v_batch", "[", "'g_mask'", "]", "\n", "dict", "[", "'looking_table_second'", "]", "=", "g2_v_batch", "[", "'g_looking_table'", "]", "\n", "\n", "dict", "[", "'y'", "]", "=", "label_v_batch", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.construct_embedding": [[2287, 2351], ["list", "list", "list", "list", "list", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "gmnn.GMNN.feed_dict", "list", "words.split", "max", "range", "list.append", "list", "words.split", "max", "range", "list.append", "len", "len", "len", "temp_words[].lower", "len", "len", "temp_words[].lower", "len", "list.append", "range", "list.append", "len", "list.append", "range", "list.append", "len", "range", "gmnn.GMNN.word_idx.keys", "list.append", "list.append", "gmnn.GMNN.word_idx.keys", "list.append", "list.append", "len", "dev1[].append", "len", "dev2[].append", "len", "list.append", "len", "range", "len", "len", "len", "list.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "construct_embedding", "(", "self", ",", "method", ")", ":", "\n", "        ", "construct_list", "=", "list", "(", ")", "\n", "if", "method", "==", "\"dev\"", "or", "method", "==", "\"valid\"", ":", "\n", "            ", "construct_list", "=", "self", ".", "kgs", ".", "valid_links", "\n", "", "elif", "method", "==", "\"test\"", ":", "\n", "            ", "construct_list", "=", "self", ".", "kgs", ".", "test_links", "\n", "", "elif", "method", "==", "\"kg1\"", ":", "\n", "            ", "kg2_len", "=", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", ")", ":", "\n", "                ", "temp", "=", "[", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "[", "i", "]", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", "[", "i", "%", "kg2_len", "]", "]", "\n", "construct_list", ".", "append", "(", "temp", ")", "\n", "", "", "elif", "method", "==", "\"kg2\"", ":", "\n", "            ", "kg1_len", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", ")", ":", "\n", "                ", "temp", "=", "[", "self", ".", "kgs", ".", "kg2", ".", "entities_list", "[", "i", "]", ",", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "[", "i", "%", "kg1_len", "]", "]", "\n", "construct_list", ".", "append", "(", "temp", ")", "\n", "", "", "max_len", "=", "0", "\n", "dev1", "=", "list", "(", ")", "\n", "dev2", "=", "list", "(", ")", "\n", "for", "item", "in", "construct_list", ":", "\n", "            ", "words", "=", "self", ".", "id_dict1", "[", "item", "[", "0", "]", "]", "\n", "temp_dev1", "=", "list", "(", ")", "\n", "temp_words", "=", "words", ".", "split", "(", ")", "\n", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "temp_words", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_words", ")", ")", ":", "\n", "                ", "word", "=", "temp_words", "[", "i", "]", ".", "lower", "(", ")", "\n", "if", "word", "in", "self", ".", "word_idx", ".", "keys", "(", ")", ":", "\n", "                    ", "temp_dev1", ".", "append", "(", "self", ".", "word_idx", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "                    ", "temp_dev1", ".", "append", "(", "0", ")", "\n", "", "", "dev1", ".", "append", "(", "temp_dev1", ")", "\n", "\n", "words", "=", "self", ".", "id_dict2", "[", "item", "[", "1", "]", "]", "\n", "temp_dev2", "=", "list", "(", ")", "\n", "temp_words", "=", "words", ".", "split", "(", ")", "\n", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "temp_words", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_words", ")", ")", ":", "\n", "                ", "word", "=", "temp_words", "[", "i", "]", ".", "lower", "(", ")", "\n", "if", "word", "in", "self", ".", "word_idx", ".", "keys", "(", ")", ":", "\n", "                    ", "temp_dev2", ".", "append", "(", "self", ".", "word_idx", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "                    ", "temp_dev2", ".", "append", "(", "0", ")", "\n", "", "", "dev2", ".", "append", "(", "temp_dev2", ")", "\n", "", "dev1_len", "=", "list", "(", ")", "\n", "dev2_len", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dev1", ")", ")", ":", "\n", "            ", "if", "len", "(", "dev1", "[", "i", "]", ")", "<", "max_len", ":", "\n", "                ", "dev1_len", ".", "append", "(", "len", "(", "dev1", "[", "i", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "max_len", "-", "len", "(", "dev1", "[", "i", "]", ")", ")", ":", "\n", "                    ", "dev1", "[", "i", "]", ".", "append", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "dev1_len", ".", "append", "(", "max_len", ")", "\n", "", "if", "len", "(", "dev2", "[", "i", "]", ")", "<", "max_len", ":", "\n", "                ", "dev2_len", ".", "append", "(", "len", "(", "dev2", "[", "i", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "max_len", "-", "len", "(", "dev2", "[", "i", "]", ")", ")", ":", "\n", "                    ", "dev2", "[", "i", "]", ".", "append", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "dev2_len", ".", "append", "(", "max_len", ")", "\n", "", "", "self", ".", "save_g1_batch", "[", "'g_ids_features'", "]", "=", "np", ".", "array", "(", "dev1", ")", "\n", "self", ".", "save_g2_batch", "[", "'g_ids_features'", "]", "=", "np", ".", "array", "(", "dev2", ")", "\n", "self", ".", "save_g1_batch", "[", "'g_ids_feature_lens'", "]", "=", "np", ".", "array", "(", "dev1_len", ")", "\n", "self", ".", "save_g2_batch", "[", "'g_ids_feature_lens'", "]", "=", "np", ".", "array", "(", "dev2_len", ")", "\n", "dict", "=", "self", ".", "feed_dict", "(", "self", ".", "save_g1_batch", ",", "self", ".", "save_g2_batch", ",", "self", ".", "save_label_batch", ")", "\n", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.train_embeddings": [[2352, 2416], ["gmnn.GMNN.read_data", "gmnn.GMNN.read_data", "gmnn.GMNN.read_data", "len", "gmnn.GraphMatchNN", "gmnn.GraphMatchNN._build_graph", "tensorflow.train.Saver", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "range", "str", "str", "str", "len", "time.time", "len", "list", "numpy.random.shuffle", "range", "print", "tensorflow.global_variables_initializer", "range", "min", "range", "gmnn.GMNN.batch_graph", "gmnn.GMNN.batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_label", "gmnn.GMNN.feed_dict", "gmnn.GraphMatchNN.act", "gmnn.GMNN.valid_", "openea.modules.finding.evaluation.early_stop", "graphs_1.append", "graphs_2.append", "labels.append", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.read_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.read_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.read_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN._build_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_label", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.valid_", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "train_embeddings", "(", "self", ",", ")", ":", "\n", "        ", "train_data_path", "=", "self", ".", "args", ".", "training_data", "+", "\"train_examples\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", "\n", "dev_data_path", "=", "self", ".", "args", ".", "training_data", "+", "\"dev_examples\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", "\n", "test_data_path", "=", "self", ".", "args", ".", "training_data", "+", "\"test_examples\"", "+", "str", "(", "self", ".", "args", ".", "cand_size", ")", "\n", "graphs_1_train", ",", "graphs_2_train", ",", "labels_train", "=", "self", ".", "read_data", "(", "train_data_path", ",", "self", ".", "word_idx", ",", "True", ")", "\n", "graphs_1_dev", ",", "graphs_2_dev", ",", "labels_dev", "=", "self", ".", "read_data", "(", "dev_data_path", ",", "self", ".", "word_idx", ",", "True", ")", "\n", "self", ".", "graphs_1_test", ",", "self", ".", "graphs_2_test", ",", "self", ".", "labels_test", "=", "self", ".", "read_data", "(", "test_data_path", ",", "self", ".", "word_idx", ",", "True", ")", "\n", "\n", "self", ".", "args", ".", "word_vocab_size", "=", "len", "(", "self", ".", "word_idx", ")", "\n", "self", ".", "args", ".", "pretrained_word_size", "=", "self", ".", "pretraind_word_size", "\n", "self", ".", "args", ".", "learned_word_size", "=", "len", "(", "self", ".", "word_idx", ")", "-", "self", ".", "pretraind_word_size", "\n", "\n", "model", "=", "GraphMatchNN", "(", "\"train\"", ",", "self", ".", "args", ",", "self", ".", "pretraind_word_embedding", ")", "\n", "model", ".", "_build_graph", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "None", ")", "\n", "self", ".", "temp_model", "=", "model", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "g1_v_batch", "=", "None", "\n", "g2_v_batch", "=", "None", "\n", "label_v_batch", "=", "None", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "n_train", "=", "len", "(", "graphs_1_train", ")", "\n", "temp_order", "=", "list", "(", "range", "(", "n_train", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "temp_order", ")", "\n", "\n", "loss_sum", "=", "0.0", "\n", "for", "start", "in", "range", "(", "0", ",", "n_train", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "end", "=", "min", "(", "start", "+", "self", ".", "args", ".", "batch_size", ",", "n_train", ")", "\n", "graphs_1", "=", "[", "]", "\n", "graphs_2", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "                    ", "idx", "=", "temp_order", "[", "_", "]", "\n", "graphs_1", ".", "append", "(", "graphs_1_train", "[", "idx", "]", ")", "\n", "graphs_2", ".", "append", "(", "graphs_2_train", "[", "idx", "]", ")", "\n", "labels", ".", "append", "(", "labels_train", "[", "idx", "]", ")", "\n", "\n", "", "batch_graph_1", "=", "self", ".", "batch_graph", "(", "graphs_1", ")", "\n", "batch_graph_2", "=", "self", ".", "batch_graph", "(", "graphs_2", ")", "\n", "\n", "g1_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_1", ",", "self", ".", "word_idx", ")", "\n", "g2_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_2", ",", "self", ".", "word_idx", ")", "\n", "label_v_batch", "=", "self", ".", "vectorize_label", "(", "labels", ")", "\n", "train_dict", "=", "self", ".", "feed_dict", "(", "g1_v_batch", ",", "g2_v_batch", ",", "label_v_batch", ")", "\n", "\n", "watch", ",", "_", ",", "batch_loss", "=", "model", ".", "act", "(", "self", ".", "session", ",", "\"train\"", ",", "train_dict", ",", "False", ",", "False", ")", "\n", "loss_sum", "+=", "batch_loss", "\n", "\n", "", "print", "(", "'epoch {}, avg. relation triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "i", ",", "loss_sum", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "# ********************no early stop********************************************", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "self", ".", "save_g1_batch", "=", "g1_v_batch", "\n", "self", ".", "save_g2_batch", "=", "g2_v_batch", "\n", "self", ".", "save_label_batch", "=", "label_v_batch", "\n", "flag", "=", "self", ".", "valid_", "(", "self", ".", "args", ".", "stop_metric", ",", "model", ",", "graphs_1_dev", ",", "graphs_2_dev", ",", "labels_dev", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.test": [[2417, 2500], ["time.time", "len", "range", "int", "range", "print", "min", "range", "gmnn.GMNN.batch_graph", "gmnn.GMNN.batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_label", "gmnn.GMNN.feed_dict", "range", "len", "len", "len", "len", "range", "idx_score.items", "sorted", "range", "time.time", "graphs_1.append", "graphs_2.append", "labels.append", "golds.append", "g1_ori_ids.append", "g2_ori_ids.append", "gmnn.GMNN.temp_model.act", "predicted_res.append", "len", "len", "min", "len", "incorrect_pairs.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_label", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "n_dev", "=", "len", "(", "self", ".", "graphs_1_test", ")", "\n", "dev_batch_size", "=", "self", ".", "args", ".", "dev_batch_size", "\n", "golds", "=", "[", "]", "\n", "predicted_res", "=", "[", "]", "\n", "g1_ori_ids", "=", "[", "]", "\n", "g2_ori_ids", "=", "[", "]", "\n", "for", "start", "in", "range", "(", "0", ",", "n_dev", ",", "dev_batch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "start", "+", "dev_batch_size", ",", "n_dev", ")", "\n", "graphs_1", "=", "[", "]", "\n", "graphs_2", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "                ", "graphs_1", ".", "append", "(", "self", ".", "graphs_1_test", "[", "_", "]", ")", "\n", "graphs_2", ".", "append", "(", "self", ".", "graphs_2_test", "[", "_", "]", ")", "\n", "labels", ".", "append", "(", "self", ".", "labels_test", "[", "_", "]", ")", "\n", "golds", ".", "append", "(", "self", ".", "labels_test", "[", "_", "]", ")", "\n", "\n", "g1_ori_ids", ".", "append", "(", "self", ".", "graphs_1_test", "[", "_", "]", "[", "'g_id'", "]", ")", "\n", "g2_ori_ids", ".", "append", "(", "self", ".", "graphs_2_test", "[", "_", "]", "[", "'g_id'", "]", ")", "\n", "\n", "", "batch_graph_1", "=", "self", ".", "batch_graph", "(", "graphs_1", ")", "\n", "batch_graph_2", "=", "self", ".", "batch_graph", "(", "graphs_2", ")", "\n", "\n", "g1_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_1", ",", "self", ".", "word_idx", ")", "\n", "g2_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_2", ",", "self", ".", "word_idx", ")", "\n", "label_v_batch", "=", "self", ".", "vectorize_label", "(", "labels", ")", "\n", "\n", "dev_dict", "=", "self", ".", "feed_dict", "(", "g1_v_batch", ",", "g2_v_batch", ",", "label_v_batch", ")", "\n", "predicted", "=", "self", ".", "temp_model", ".", "act", "(", "self", ".", "session", ",", "\"train\"", ",", "dev_dict", ",", "True", ",", "False", ")", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "0", ",", "end", "-", "start", ")", ":", "\n", "                ", "predicted_res", ".", "append", "(", "predicted", "[", "_", "]", "[", "1", "]", ")", "# add the prediction result into the bag", "\n", "", "", "count", "=", "0.0", "\n", "correct_50", "=", "0.0", "\n", "correct_10", "=", "0.0", "\n", "correct_5", "=", "0.0", "\n", "correct_1", "=", "0.0", "\n", "mr", "=", "0.0", "\n", "mrr", "=", "0.00", "\n", "cand_size", "=", "self", ".", "args", ".", "cand_size", "\n", "assert", "len", "(", "predicted_res", ")", "%", "cand_size", "==", "0", "\n", "assert", "len", "(", "predicted_res", ")", "==", "len", "(", "g1_ori_ids", ")", "\n", "assert", "len", "(", "g1_ori_ids", ")", "==", "len", "(", "g2_ori_ids", ")", "\n", "number", "=", "int", "(", "len", "(", "predicted_res", ")", "/", "cand_size", ")", "\n", "incorrect_pairs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "number", ")", ":", "\n", "            ", "idx_score", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "cand_size", ")", ":", "\n", "                ", "idx_score", "[", "_", "*", "cand_size", "+", "idx", "]", "=", "predicted_res", "[", "_", "*", "cand_size", "+", "idx", "]", "\n", "", "idx_score_items", "=", "idx_score", ".", "items", "(", ")", "\n", "idx_score_items", "=", "sorted", "(", "idx_score_items", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "id_1", "=", "g1_ori_ids", "[", "_", "*", "cand_size", "]", "\n", "id_2", "=", "g2_ori_ids", "[", "_", "*", "cand_size", "]", "\n", "for", "sub_idx", "in", "range", "(", "min", "(", "100", ",", "len", "(", "idx_score_items", ")", ")", ")", ":", "\n", "                ", "idx", "=", "idx_score_items", "[", "sub_idx", "]", "[", "0", "]", "\n", "if", "golds", "[", "idx", "]", "==", "1", ":", "\n", "                    ", "mr", "+=", "(", "sub_idx", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "sub_idx", "+", "1", ")", "\n", "if", "sub_idx", "<", "50", ":", "\n", "                        ", "correct_50", "+=", "1", "\n", "", "if", "sub_idx", "<", "10", ":", "\n", "                        ", "correct_10", "+=", "1", "\n", "", "if", "sub_idx", "<", "5", ":", "\n", "                        ", "correct_5", "+=", "1", "\n", "", "if", "sub_idx", "==", "0", ":", "\n", "                        ", "correct_1", "+=", "1.0", "\n", "", "else", ":", "\n", "                        ", "incorrect_pairs", ".", "append", "(", "(", "id_1", ",", "id_2", ")", ")", "\n", "", "break", "\n", "", "", "count", "+=", "1.0", "\n", "", "mr", "/=", "count", "\n", "mrr", "/=", "count", "\n", "hit50", "=", "correct_50", "/", "count", "*", "100", "\n", "hit10", "=", "correct_10", "/", "count", "*", "100", "\n", "hit5", "=", "correct_5", "/", "count", "*", "100", "\n", "hit1", "=", "correct_1", "/", "count", "*", "100", "\n", "top_k", "=", "[", "1", ",", "5", ",", "10", ",", "50", "]", "\n", "hits", "=", "[", "hit1", ",", "hit5", ",", "hit10", ",", "hit50", "]", "\n", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"accurate results: hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.save": [[2501, 2506], ["gmnn.GMNN.saver.save", "print", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "out_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "out_folder", ")", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "session", ",", "self", ".", "out_folder", "+", "\"gmnn_model\"", ",", "global_step", "=", "0", ")", "\n", "print", "(", "\"Results saved!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.valid_": [[2507, 2594], ["time.time", "len", "range", "int", "range", "print", "min", "range", "gmnn.GMNN.batch_graph", "gmnn.GMNN.batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_batch_graph", "gmnn.GMNN.vectorize_label", "gmnn.GMNN.feed_dict", "range", "len", "len", "len", "len", "range", "idx_score.items", "sorted", "range", "time.time", "graphs_1.append", "graphs_2.append", "labels.append", "golds.append", "g1_ori_ids.append", "g2_ori_ids.append", "model.act", "predicted_res.append", "len", "len", "min", "len", "incorrect_pairs.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_batch_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.vectorize_label", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act"], ["", "def", "valid_", "(", "self", ",", "stop_metric", ",", "model", ",", "graphs_1_dev", ",", "graphs_2_dev", ",", "labels_dev", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "n_dev", "=", "len", "(", "graphs_1_dev", ")", "\n", "dev_batch_size", "=", "self", ".", "args", ".", "dev_batch_size", "\n", "golds", "=", "[", "]", "\n", "predicted_res", "=", "[", "]", "\n", "g1_ori_ids", "=", "[", "]", "\n", "g2_ori_ids", "=", "[", "]", "\n", "for", "start", "in", "range", "(", "0", ",", "n_dev", ",", "dev_batch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "start", "+", "dev_batch_size", ",", "n_dev", ")", "\n", "graphs_1", "=", "[", "]", "\n", "graphs_2", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "start", ",", "end", ")", ":", "\n", "                ", "graphs_1", ".", "append", "(", "graphs_1_dev", "[", "_", "]", ")", "\n", "graphs_2", ".", "append", "(", "graphs_2_dev", "[", "_", "]", ")", "\n", "labels", ".", "append", "(", "labels_dev", "[", "_", "]", ")", "\n", "golds", ".", "append", "(", "labels_dev", "[", "_", "]", ")", "\n", "\n", "g1_ori_ids", ".", "append", "(", "graphs_1_dev", "[", "_", "]", "[", "'g_id'", "]", ")", "\n", "g2_ori_ids", ".", "append", "(", "graphs_2_dev", "[", "_", "]", "[", "'g_id'", "]", ")", "\n", "\n", "", "batch_graph_1", "=", "self", ".", "batch_graph", "(", "graphs_1", ")", "\n", "batch_graph_2", "=", "self", ".", "batch_graph", "(", "graphs_2", ")", "\n", "\n", "g1_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_1", ",", "self", ".", "word_idx", ")", "\n", "g2_v_batch", "=", "self", ".", "vectorize_batch_graph", "(", "batch_graph_2", ",", "self", ".", "word_idx", ")", "\n", "label_v_batch", "=", "self", ".", "vectorize_label", "(", "labels", ")", "\n", "\n", "dev_dict", "=", "self", ".", "feed_dict", "(", "g1_v_batch", ",", "g2_v_batch", ",", "label_v_batch", ")", "\n", "predicted", "=", "model", ".", "act", "(", "self", ".", "session", ",", "\"train\"", ",", "dev_dict", ",", "True", ",", "False", ")", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "0", ",", "end", "-", "start", ")", ":", "\n", "                ", "predicted_res", ".", "append", "(", "predicted", "[", "_", "]", "[", "1", "]", ")", "# add the prediction result into the bag", "\n", "", "", "count", "=", "0.0", "\n", "correct_50", "=", "0.0", "\n", "correct_10", "=", "0.0", "\n", "correct_5", "=", "0.0", "\n", "correct_1", "=", "0.0", "\n", "\n", "mr", "=", "0.0", "\n", "mrr", "=", "0.00", "\n", "cand_size", "=", "self", ".", "args", ".", "cand_size", "\n", "assert", "len", "(", "predicted_res", ")", "%", "cand_size", "==", "0", "\n", "assert", "len", "(", "predicted_res", ")", "==", "len", "(", "g1_ori_ids", ")", "\n", "assert", "len", "(", "g1_ori_ids", ")", "==", "len", "(", "g2_ori_ids", ")", "\n", "number", "=", "int", "(", "len", "(", "predicted_res", ")", "/", "cand_size", ")", "\n", "incorrect_pairs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "number", ")", ":", "\n", "            ", "idx_score", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "cand_size", ")", ":", "\n", "                ", "idx_score", "[", "_", "*", "cand_size", "+", "idx", "]", "=", "predicted_res", "[", "_", "*", "cand_size", "+", "idx", "]", "\n", "", "idx_score_items", "=", "idx_score", ".", "items", "(", ")", "\n", "idx_score_items", "=", "sorted", "(", "idx_score_items", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "id_1", "=", "g1_ori_ids", "[", "_", "*", "cand_size", "]", "\n", "id_2", "=", "g2_ori_ids", "[", "_", "*", "cand_size", "]", "\n", "for", "sub_idx", "in", "range", "(", "min", "(", "100", ",", "len", "(", "idx_score_items", ")", ")", ")", ":", "\n", "                ", "idx", "=", "idx_score_items", "[", "sub_idx", "]", "[", "0", "]", "\n", "if", "golds", "[", "idx", "]", "==", "1", ":", "\n", "                    ", "mr", "+=", "(", "sub_idx", "+", "1", ")", "\n", "mrr", "+=", "1", "/", "(", "sub_idx", "+", "1", ")", "\n", "if", "sub_idx", "<", "50", ":", "\n", "                        ", "correct_50", "+=", "1", "\n", "", "if", "sub_idx", "<", "10", ":", "\n", "                        ", "correct_10", "+=", "1", "\n", "", "if", "sub_idx", "<", "5", ":", "\n", "                        ", "correct_5", "+=", "1", "\n", "", "if", "sub_idx", "==", "0", ":", "\n", "                        ", "correct_1", "+=", "1.0", "\n", "", "else", ":", "\n", "                        ", "incorrect_pairs", ".", "append", "(", "(", "id_1", ",", "id_2", ")", ")", "\n", "", "break", "\n", "", "", "count", "+=", "1.0", "\n", "", "mr", "/=", "count", "\n", "mrr", "/=", "count", "\n", "hit50", "=", "correct_50", "/", "count", "*", "100", "\n", "hit10", "=", "correct_10", "/", "count", "*", "100", "\n", "hit5", "=", "correct_5", "/", "count", "*", "100", "\n", "hit1", "=", "correct_1", "/", "count", "*", "100", "\n", "top_k", "=", "[", "1", ",", "5", ",", "10", ",", "50", "]", "\n", "hits", "=", "[", "hit1", ",", "hit5", ",", "hit10", ",", "hit50", "]", "\n", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"quick results: hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "\n", "if", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hit1", "\n", "", "return", "mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.run": [[2595, 2611], ["time.time", "gmnn.GMNN.train_embeddings", "print", "gmnn.load_word_embedding", "len", "len", "gmnn.GMNN.can_gen", "gmnn.GMNN.gen_data", "gmnn.GMNN.can_gen", "gmnn.GMNN.gen_data", "gmnn.GMNN.can_gen", "gmnn.GMNN.gen_data", "gmnn.GMNN.word_idx.keys", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.train_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.load_word_embedding", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.can_gen", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.can_gen", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.can_gen", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GMNN.gen_data", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_pretrained_embedding", ":", "\n", "            ", "self", ".", "pretraind_word_embedding", "=", "load_word_embedding", "(", "self", ".", "embedding_path", ",", "self", ".", "word_idx", ")", "\n", "self", ".", "pretraind_word_size", "=", "len", "(", "self", ".", "pretraind_word_embedding", ")", "\n", "self", ".", "args", ".", "hidden_layer_dim", "=", "self", ".", "args", ".", "pretrained_word_embedding_dim", "\n", "", "self", ".", "word_idx", "[", "self", ".", "unknown_word", "]", "=", "len", "(", "self", ".", "word_idx", ".", "keys", "(", ")", ")", "+", "1", "\n", "if", "self", ".", "args", ".", "build_train_examples", ":", "\n", "            ", "self", ".", "can_gen", "(", "\"train\"", ")", "\n", "self", ".", "gen_data", "(", "\"train\"", ")", "\n", "self", ".", "can_gen", "(", "\"dev\"", ")", "\n", "self", ".", "gen_data", "(", "\"dev\"", ")", "\n", "self", ".", "can_gen", "(", "\"test\"", ")", "\n", "self", ".", "gen_data", "(", "\"test\"", ")", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "train_embeddings", "(", ")", "\n", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.div_list": [[25, 41], ["len", "range", "ls_return.append", "ls_return.append"], "function", ["None"], ["def", "div_list", "(", "ls", ",", "n", ")", ":", "\n", "    ", "ls_len", "=", "len", "(", "ls", ")", "\n", "if", "n", "<=", "0", "or", "0", "==", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "if", "n", ">", "ls_len", ":", "\n", "        ", "return", "[", "ls", "]", "\n", "", "elif", "n", "==", "ls_len", ":", "\n", "        ", "return", "[", "[", "i", "]", "for", "i", "in", "ls", "]", "\n", "", "else", ":", "\n", "        ", "j", "=", "ls_len", "//", "n", "\n", "k", "=", "ls_len", "%", "n", "\n", "ls_return", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "(", "n", "-", "1", ")", "*", "j", ",", "j", ")", ":", "\n", "            ", "ls_return", ".", "append", "(", "ls", "[", "i", ":", "i", "+", "j", "]", ")", "\n", "", "ls_return", ".", "append", "(", "ls", "[", "(", "n", "-", "1", ")", "*", "j", ":", "]", ")", "\n", "return", "ls_return", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.find_near": [[43, 64], ["dict", "id_2_vec.keys", "cand_id_2_score_map.items", "sorted", "range", "result_list.append", "scipy.spatial.distance.cosine"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "", "def", "find_near", "(", "all_links", ",", "id_1_vec", ",", "id_2_vec", ",", "zero_vec_id1", ",", "zero_vec_id2", ",", "cand_size", ")", ":", "\n", "    ", "result_dict", "=", "dict", "(", ")", "\n", "for", "item", "in", "all_links", ":", "\n", "        ", "id_1", "=", "item", "[", "0", "]", "\n", "vec_1", "=", "id_1_vec", "[", "id_1", "]", "\n", "\n", "if", "id_1", "not", "in", "zero_vec_id1", ":", "\n", "            ", "cand_id_2_score_map", "=", "{", "}", "\n", "for", "id_2_cand", "in", "id_2_vec", ".", "keys", "(", ")", ":", "\n", "                ", "if", "id_2_cand", "in", "zero_vec_id2", ":", "\n", "                    ", "continue", "\n", "", "cos_sim", "=", "1", "-", "spatial", ".", "distance", ".", "cosine", "(", "vec_1", ",", "id_2_vec", "[", "id_2_cand", "]", ")", "\n", "cand_id_2_score_map", "[", "id_2_cand", "]", "=", "cos_sim", "\n", "\n", "", "cand_id_2_score_items", "=", "cand_id_2_score_map", ".", "items", "(", ")", "\n", "cand_id_2_score_items", "=", "sorted", "(", "cand_id_2_score_items", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "cand_size", ")", ":", "\n", "                ", "result_list", ".", "append", "(", "cand_id_2_score_items", "[", "idx", "]", "[", "0", "]", ")", "\n", "", "result_dict", "[", "id_1", "]", "=", "result_list", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.load_word_embedding": [[67, 82], ["numpy.array", "codecs.open", "list", "line.strip.strip", "line.strip.split", "list.append", "len", "float", "len", "len", "line.strip.split", "word_idx.keys"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "load_word_embedding", "(", "embedding_path", ",", "word_idx", ")", ":", "\n", "    ", "with", "codecs", ".", "open", "(", "embedding_path", ",", "\"r\"", ",", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "vecs", "=", "list", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ".", "split", "(", "\" \"", ")", ")", "==", "2", ":", "\n", "                ", "continue", "\n", "", "info", "=", "line", ".", "split", "(", "' '", ")", "\n", "word", "=", "info", "[", "0", "]", "\n", "vec", "=", "[", "float", "(", "v", ")", "for", "v", "in", "info", "[", "1", ":", "]", "]", "\n", "if", "len", "(", "vec", ")", "!=", "300", ":", "\n", "                ", "continue", "\n", "", "vecs", ".", "append", "(", "vec", ")", "\n", "word_idx", "[", "word", "]", "=", "len", "(", "word_idx", ".", "keys", "(", ")", ")", "+", "1", "# + 1 is due to that we already have an unknown word", "\n", "", "", "return", "np", ".", "array", "(", "vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.write_word_idx": [[84, 92], ["os.path.exists", "os.makedirs", "codecs.open", "path.rfind", "f.write", "str", "str"], "function", ["None"], ["", "def", "write_word_idx", "(", "word_idx", ",", "path", ")", ":", "\n", "    ", "dir", "=", "path", "[", ":", "path", ".", "rfind", "(", "'/'", ")", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "with", "codecs", ".", "open", "(", "path", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "word", "in", "word_idx", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "word", ")", "+", "\" \"", "+", "str", "(", "word_idx", "[", "word", "]", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.read_word_idx_from_file": [[94, 108], ["codecs.open", "f.readlines", "line.strip().split", "len", "int", "line.strip", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "read_word_idx_from_file", "(", "path", ",", "if_key_is_int", "=", "False", ")", ":", "\n", "    ", "word_idx", "=", "{", "}", "\n", "with", "codecs", ".", "open", "(", "path", ",", "'r'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "info", ")", "!=", "2", ":", "\n", "                ", "word_idx", "[", "' '", "]", "=", "int", "(", "info", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "if_key_is_int", ":", "\n", "                    ", "word_idx", "[", "int", "(", "info", "[", "0", "]", ")", "]", "=", "int", "(", "info", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "word_idx", "[", "info", "[", "0", "]", "]", "=", "int", "(", "info", "[", "1", "]", ")", "\n", "", "", "", "", "return", "word_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.zeros": [[110, 113], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.get_layer_uid": [[115, 123], ["None"], "function", ["None"], ["", "def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance": [[125, 132], ["tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square"], "function", ["None"], ["", "", "def", "cosine_distance", "(", "y1", ",", "y2", ")", ":", "\n", "# y1 [....,a, 1, d]", "\n", "# y2 [....,1, b, d]", "\n", "    ", "cosine_numerator", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "y1", ",", "y2", ")", ",", "axis", "=", "-", "1", ")", "\n", "y1_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y1", ")", ",", "axis", "=", "-", "1", ")", ",", "eps", ")", ")", "\n", "y2_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y2", ")", ",", "axis", "=", "-", "1", ")", ",", "eps", ")", ")", "\n", "return", "cosine_numerator", "/", "y1_norm", "/", "y2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_relevancy_matrix": [[134, 149], ["tensorflow.expand_dims", "tensorflow.expand_dims", "gmnn.cosine_distance"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance"], ["", "def", "cal_relevancy_matrix", "(", "node_1_repres", ",", "node_2_repres", ",", "watch", "=", "None", ")", ":", "\n", "# [batch_size, 1, single_graph_1_nodes_size, node_embedding_dim]", "\n", "    ", "node_1_repres_tmp", "=", "tf", ".", "expand_dims", "(", "node_1_repres", ",", "1", ")", "\n", "\n", "# [batch_size, single_graph_2_nodes_size, 1, node_embedding_dim]", "\n", "node_2_repres_tmp", "=", "tf", ".", "expand_dims", "(", "node_2_repres", ",", "2", ")", "\n", "\n", "# [batch_size, single_graph_2_nodes_size, single_graph_1_nodes_size]", "\n", "relevancy_matrix", "=", "cosine_distance", "(", "node_1_repres_tmp", ",", "node_2_repres_tmp", ")", "\n", "\n", "watch", "[", "\"node_1_repres_tmp\"", "]", "=", "node_1_repres", "\n", "watch", "[", "\"node_2_repres_tmp\"", "]", "=", "node_2_repres", "\n", "watch", "[", "\"relevancy_matrix\"", "]", "=", "relevancy_matrix", "\n", "\n", "return", "relevancy_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.mask_relevancy_matrix": [[151, 160], ["tensorflow.multiply", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "def", "mask_relevancy_matrix", "(", "relevancy_matrix", ",", "graph_1_mask", ",", "graph_2_mask", ")", ":", "\n", "# relevancy_matrix: [batch_size, single_graph_2_nodes_size, single_graph_1_nodes_size]", "\n", "# graph_1_mask: [batch_size, single_graph_1_nodes_size]", "\n", "# graph_2_mask: [batch_size, single_graph_2_nodes_size]", "\n", "    ", "relevancy_matrix", "=", "tf", ".", "multiply", "(", "relevancy_matrix", ",", "tf", ".", "expand_dims", "(", "graph_1_mask", ",", "1", ")", ")", "\n", "relevancy_matrix", "=", "tf", ".", "multiply", "(", "relevancy_matrix", ",", "tf", ".", "expand_dims", "(", "graph_2_mask", ",", "2", ")", ")", "\n", "\n", "# [batch_size, single_graph_2_nodes_size, single_graph_1_nodes_size]", "\n", "return", "relevancy_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_perspective_expand_for_2D": [[162, 169], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply"], "function", ["None"], ["", "def", "multi_perspective_expand_for_2D", "(", "in_tensor", ",", "decompose_params", ")", ":", "\n", "# [batch_size, 'x', dim]", "\n", "    ", "in_tensor", "=", "tf", ".", "expand_dims", "(", "in_tensor", ",", "axis", "=", "1", ")", "\n", "# [1, decompse_dim, dim]", "\n", "decompose_params", "=", "tf", ".", "expand_dims", "(", "decompose_params", ",", "axis", "=", "0", ")", "\n", "# [batch_size, decompse_dim, dim]", "\n", "return", "tf", ".", "multiply", "(", "in_tensor", ",", "decompose_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_maxpooling_matching": [[171, 202], ["tensorflow.map_fn", "tensorflow.concat", "gmnn.multi_perspective_expand_for_2D", "gmnn.multi_perspective_expand_for_2D", "tensorflow.expand_dims", "tensorflow.expand_dims", "gmnn.cosine_distance", "tensorflow.reduce_max", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_perspective_expand_for_2D", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_perspective_expand_for_2D", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance"], ["", "def", "cal_maxpooling_matching", "(", "node_1_rep", ",", "node_2_rep", ",", "decompose_params", ")", ":", "\n", "# node_1_rep: [batch_size, single_graph_1_nodes_size, dim]", "\n", "# node_2_rep: [batch_size, single_graph_2_nodes_size, dim]", "\n", "# decompose_params: [decompose_dim, dim]", "\n", "    ", "def", "singel_instance", "(", "x", ")", ":", "\n", "# p: [single_graph_1_nodes_size, dim], q: [single_graph_2_nodes_size, dim]", "\n", "        ", "p", "=", "x", "[", "0", "]", "\n", "q", "=", "x", "[", "1", "]", "\n", "\n", "# [single_graph_1_nodes_size, decompose_dim, dim]", "\n", "p", "=", "multi_perspective_expand_for_2D", "(", "p", ",", "decompose_params", ")", "\n", "\n", "# [single_graph_2_nodes_size, decompose_dim, dim]", "\n", "q", "=", "multi_perspective_expand_for_2D", "(", "q", ",", "decompose_params", ")", "\n", "\n", "# [single_graph_1_nodes_size, 1, decompose_dim, dim]", "\n", "p", "=", "tf", ".", "expand_dims", "(", "p", ",", "1", ")", "\n", "\n", "# [1, single_graph_2_nodes_size, decompose_dim, dim]", "\n", "q", "=", "tf", ".", "expand_dims", "(", "q", ",", "0", ")", "\n", "\n", "# [single_graph_1_nodes_size, single_graph_2_nodes_size, decompose]", "\n", "return", "cosine_distance", "(", "p", ",", "q", ")", "\n", "\n", "", "elems", "=", "(", "node_1_rep", ",", "node_2_rep", ")", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, single_graph_2_nodes_size, decompse_dim]", "\n", "matching_matrix", "=", "tf", ".", "map_fn", "(", "singel_instance", ",", "elems", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, 2 * decompse_dim]", "\n", "return", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "tf", ".", "reduce_max", "(", "matching_matrix", ",", "axis", "=", "2", ")", ",", "tf", ".", "reduce_mean", "(", "matching_matrix", ",", "axis", "=", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_max_node_2_representation": [[204, 212], ["gmnn.LayerUtils", "tensorflow.argmax", "gmnn.LayerUtils.collect_representation"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.LayerUtils.collect_representation"], ["", "def", "cal_max_node_2_representation", "(", "node_2_rep", ",", "relevancy_matrix", ")", ":", "\n", "    ", "layer_utils", "=", "LayerUtils", "(", ")", "\n", "# [batch_size, single_graph_1_nodes_size]", "\n", "atten_positions", "=", "tf", ".", "argmax", "(", "relevancy_matrix", ",", "axis", "=", "2", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "max_node_2_reps", "=", "layer_utils", ".", "collect_representation", "(", "node_2_rep", ",", "atten_positions", ")", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, dim]", "\n", "return", "max_node_2_reps", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_perspective_match": [[214, 247], ["tensorflow.shape", "tensorflow.concat", "tensorflow.variable_scope", "layer_utils.cosine_distance", "tensorflow.reshape", "tf.concat.append", "tensorflow.get_variable", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "layer_utils.cosine_distance", "tf.concat.append", "tensorflow.multiply"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cosine_distance"], ["", "def", "multi_perspective_match", "(", "feature_dim", ",", "rep_1", ",", "rep_2", ",", "options", "=", "None", ",", "scope_name", "=", "'mp-match'", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n        :param repres1: [batch_size, len, feature_dim]\n        :param repres2: [batch_size, len, feature_dim]\n        :return:\n    \"\"\"", "\n", "layer_utils", "=", "LayerUtils", "\n", "input_shape", "=", "tf", ".", "shape", "(", "rep_1", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "matching_result", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope_name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "match_dim", "=", "0", "\n", "if", "options", "[", "'with_cosine'", "]", ":", "\n", "            ", "cosine_value", "=", "layer_utils", ".", "cosine_distance", "(", "rep_1", ",", "rep_2", ",", "cosine_norm", "=", "False", ")", "\n", "cosine_value", "=", "tf", ".", "reshape", "(", "cosine_value", ",", "[", "batch_size", ",", "seq_length", ",", "1", "]", ")", "\n", "matching_result", ".", "append", "(", "cosine_value", ")", "\n", "match_dim", "+=", "1", "\n", "\n", "", "if", "options", "[", "'with_mp_cosine'", "]", ":", "\n", "            ", "mp_cosine_params", "=", "tf", ".", "get_variable", "(", "\"mp_cosine\"", ",", "shape", "=", "[", "options", "[", "'cosine_MP_dim'", "]", ",", "feature_dim", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "mp_cosine_params", "=", "tf", ".", "expand_dims", "(", "mp_cosine_params", ",", "axis", "=", "0", ")", "\n", "mp_cosine_params", "=", "tf", ".", "expand_dims", "(", "mp_cosine_params", ",", "axis", "=", "0", ")", "\n", "rep_1_flat", "=", "tf", ".", "expand_dims", "(", "rep_1", ",", "axis", "=", "2", ")", "\n", "rep_2_flat", "=", "tf", ".", "expand_dims", "(", "rep_2", ",", "axis", "=", "2", ")", "\n", "mp_cosine_matching", "=", "layer_utils", ".", "cosine_distance", "(", "tf", ".", "multiply", "(", "rep_1_flat", ",", "mp_cosine_params", ")", ",", "\n", "rep_2_flat", ",", "cosine_norm", "=", "False", ")", "\n", "matching_result", ".", "append", "(", "mp_cosine_matching", ")", "\n", "match_dim", "+=", "options", "[", "'cosine_MP_dim'", "]", "\n", "\n", "", "", "matching_result", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "matching_result", ")", "\n", "return", "matching_result", ",", "match_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.match_graph_1_with_graph_2": [[249, 304], ["tensorflow.variable_scope", "gmnn.cal_relevancy_matrix", "gmnn.mask_relevancy_matrix", "tf.concat.append", "tf.concat.append", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.get_variable", "gmnn.cal_maxpooling_matching", "tensorflow.multiply", "tf.concat.append", "gmnn.cal_max_node_2_representation", "gmnn.multi_perspective_match", "tensorflow.multiply", "tf.concat.append", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_relevancy_matrix", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.mask_relevancy_matrix", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_maxpooling_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.cal_max_node_2_representation", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_perspective_match"], ["", "def", "match_graph_1_with_graph_2", "(", "node_1_rep", ",", "node_2_rep", ",", "node_1_mask", ",", "node_2_mask", ",", "node_rep_dim", ",", "options", "=", "None", ",", "\n", "watch", "=", "None", ")", ":", "\n", "    ", "'''\n    :param node_1_rep:\n    :param node_2_rep:\n    :param node_1_mask:\n    :param node_2_mask:\n    :param node_rep_dim: dim of node representation\n    :param with_maxpool_match:\n    :param with_max_attentive_match:\n    :param options:\n    :return:\n    '''", "\n", "\n", "with_maxpool_match", "=", "options", "[", "\"with_maxpool_match\"", "]", "\n", "with_max_attentive_match", "=", "options", "[", "\"with_max_attentive_match\"", "]", "\n", "\n", "# an array of [batch_size, single_graph_1_nodes_size]", "\n", "all_graph_2_aware_representations", "=", "[", "]", "\n", "dim", "=", "0", "\n", "with", "tf", ".", "variable_scope", "(", "'match_graph_1_with_graph_2'", ")", ":", "\n", "# [batch_size, single_graph_1_nodes_size, single_graph_2_nodes_size]", "\n", "        ", "relevancy_matrix", "=", "cal_relevancy_matrix", "(", "node_2_rep", ",", "node_1_rep", ",", "watch", "=", "watch", ")", "\n", "relevancy_matrix", "=", "mask_relevancy_matrix", "(", "relevancy_matrix", ",", "node_2_mask", ",", "node_1_mask", ")", "\n", "\n", "all_graph_2_aware_representations", ".", "append", "(", "tf", ".", "reduce_max", "(", "relevancy_matrix", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ")", "\n", "all_graph_2_aware_representations", ".", "append", "(", "tf", ".", "reduce_mean", "(", "relevancy_matrix", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ")", "\n", "dim", "+=", "2", "\n", "\n", "if", "with_maxpool_match", ":", "\n", "            ", "maxpooling_decomp_params", "=", "tf", ".", "get_variable", "(", "\"maxpooling_matching_decomp\"", ",", "\n", "shape", "=", "[", "options", "[", "'cosine_MP_dim'", "]", ",", "node_rep_dim", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, 2 * decompse_dim]", "\n", "maxpooling_rep", "=", "cal_maxpooling_matching", "(", "node_1_rep", ",", "node_2_rep", ",", "maxpooling_decomp_params", ")", "\n", "maxpooling_rep", "=", "tf", ".", "multiply", "(", "maxpooling_rep", ",", "tf", ".", "expand_dims", "(", "node_1_mask", ",", "-", "1", ")", ")", "\n", "all_graph_2_aware_representations", ".", "append", "(", "maxpooling_rep", ")", "\n", "dim", "+=", "2", "*", "options", "[", "'cosine_MP_dim'", "]", "\n", "\n", "", "if", "with_max_attentive_match", ":", "\n", "# [batch_size, single_graph_1_nodes_size, dim]", "\n", "            ", "max_att", "=", "cal_max_node_2_representation", "(", "node_2_rep", ",", "relevancy_matrix", ")", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, match_dim]", "\n", "(", "max_attentive_rep", ",", "match_dim", ")", "=", "multi_perspective_match", "(", "node_rep_dim", ",", "node_1_rep", ",", "max_att", ",", "options", "=", "options", ",", "\n", "scope_name", "=", "'mp-match-max-att'", ")", "\n", "max_attentive_rep", "=", "tf", ".", "multiply", "(", "max_attentive_rep", ",", "tf", ".", "expand_dims", "(", "node_1_mask", ",", "-", "1", ")", ")", "\n", "all_graph_2_aware_representations", ".", "append", "(", "max_attentive_rep", ")", "\n", "dim", "+=", "match_dim", "\n", "\n", "# [batch_size, single_graph_1_nodes_size, dim]", "\n", "", "all_graph_2_aware_representations", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "all_graph_2_aware_representations", ")", "\n", "\n", "", "return", "all_graph_2_aware_representations", ",", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.highway_layer": [[306, 323], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.tanh", "tensorflow.nn.sigmoid", "tensorflow.nn.xw_plus_b", "tensorflow.nn.xw_plus_b"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.tanh", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "highway_layer", "(", "in_val", ",", "output_size", ",", "scope", "=", "None", ")", ":", "\n", "# in_val: [batch_size, passage_len, dim]", "\n", "    ", "input_shape", "=", "tf", ".", "shape", "(", "in_val", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "passage_len", "=", "input_shape", "[", "1", "]", "\n", "#     feat_dim = input_shape[2]", "\n", "in_val", "=", "tf", ".", "reshape", "(", "in_val", ",", "[", "batch_size", "*", "passage_len", ",", "output_size", "]", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"highway_layer\"", ")", ":", "\n", "        ", "highway_w", "=", "tf", ".", "get_variable", "(", "\"highway_w\"", ",", "[", "output_size", ",", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "highway_b", "=", "tf", ".", "get_variable", "(", "\"highway_b\"", ",", "[", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "full_w", "=", "tf", ".", "get_variable", "(", "\"full_w\"", ",", "[", "output_size", ",", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "full_b", "=", "tf", ".", "get_variable", "(", "\"full_b\"", ",", "[", "output_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "trans", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "in_val", ",", "full_w", ",", "full_b", ")", ")", "\n", "gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "nn", ".", "xw_plus_b", "(", "in_val", ",", "highway_w", ",", "highway_b", ")", ")", "\n", "outputs", "=", "trans", "*", "gate", "+", "in_val", "*", "(", "1.0", "-", "gate", ")", "\n", "", "outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "[", "batch_size", ",", "passage_len", ",", "output_size", "]", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.multi_highway_layer": [[325, 332], ["range", "gmnn.highway_layer"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.highway_layer"], ["", "def", "multi_highway_layer", "(", "in_val", ",", "output_size", ",", "num_layers", ",", "scope", "=", "None", ")", ":", "\n", "    ", "scope_name", "=", "'highway_layer'", "\n", "if", "scope", "is", "not", "None", ":", "scope_name", "=", "scope", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "cur_scope_name", "=", "scope_name", "+", "\"-{}\"", ".", "format", "(", "i", ")", "\n", "in_val", "=", "highway_layer", "(", "in_val", ",", "output_size", ",", "scope", "=", "cur_scope_name", ")", "\n", "", "return", "in_val", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.glorot": [[334, 339], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.random": [[341, 346], ["tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["", "def", "random", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "# tf.get_variable('W_train',", "\n", "#                 shape=[self.word_vocab_size, self.word_embedding_dim],", "\n", "# initializer=tf.contrib.layers.xavier_initializer()", "\n", "    ", "return", "tf", ".", "get_variable", "(", "name", "=", "name", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs": [[80, 84], ["attr2vec.get_kgs_popular_attributes", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kgs_popular_attributes"], ["    ", "def", "set_kgs", "(", "self", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "_", ",", "_", ",", "self", ".", "selected_attributes", "=", "get_kgs_popular_attributes", "(", "kgs", ",", "self", ".", "args", ".", "top_attr_threshold", ")", "\n", "self", ".", "num_sampled_negs", "=", "len", "(", "self", ".", "selected_attributes", ")", "//", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args": [[85, 88], ["openea.modules.utils.util.generate_out_folder", "openea.modules.utils.util.generate_out_folder"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.generate_out_folder"], ["", "def", "set_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "out_folder", "=", "generate_out_folder", "(", "self", ".", "args", ".", "output", ",", "self", ".", "args", ".", "training_data", ",", "self", ".", "args", ".", "dataset_division", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.init": [[89, 94], ["attr2vec.Attr2Vec._define_variables", "attr2vec.Attr2Vec._define_embed_graph", "openea.modules.utils.util.load_session", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.__init__": [[95, 105], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_sampled_negs", "=", "-", "1", "\n", "self", ".", "kgs", "=", "None", "\n", "self", ".", "args", "=", "None", "\n", "self", ".", "out_folder", "=", "None", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", "=", "-", "1", ",", "-", "1", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "session", "=", "None", "\n", "self", ".", "selected_attributes", "=", "None", "\n", "self", ".", "opt", "=", "'Adagrad'", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec._define_variables": [[106, 112], ["tensorflow.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tensorflow.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tensorflow.Variable", "tensorflow.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'attribute'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "embeds", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "attributes_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'attr_embed'", ",", "True", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'nce'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "nce_weights", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "attributes_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'nce_weights'", ",", "True", ")", "\n", "self", ".", "nce_biases", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "self", ".", "kgs", ".", "attributes_num", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec._define_embed_graph": [[113, 125], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reduce_mean", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.nce_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'attribute_placeholder'", ")", ":", "\n", "            ", "self", ".", "train_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "args", ".", "batch_size", "]", ")", "\n", "self", ".", "train_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "args", ".", "batch_size", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'attribute_lookup'", ")", ":", "\n", "            ", "self", ".", "train_inputs_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embeds", ",", "self", ".", "train_inputs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'attribute_nce_loss'", ")", ":", "\n", "            ", "self", ".", "train_labels", "=", "tf", ".", "reshape", "(", "self", ".", "train_labels", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "nce_loss", "(", "self", ".", "nce_weights", ",", "self", ".", "nce_biases", ",", "\n", "self", ".", "train_labels", ",", "self", ".", "train_inputs_embed", ",", "\n", "self", ".", "num_sampled_negs", ",", "self", ".", "kgs", ".", "attributes_num", ")", ")", "\n", "self", ".", "optimizer", "=", "generate_optimizer", "(", "self", ".", "loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings": [[126, 128], ["attr2vec.Attr2Vec.embeds.eval"], "methods", ["None"], ["", "", "def", "eval_attribute_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_kg1_ent_embeddings": [[129, 133], ["attr2vec.get_ent_embeds_from_attributes", "attr2vec.Attr2Vec.eval_attribute_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings"], ["", "def", "eval_kg1_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "mat", "=", "get_ent_embeds_from_attributes", "(", "self", ".", "kgs", ",", "self", ".", "eval_attribute_embeddings", "(", ")", ",", "self", ".", "selected_attributes", ")", "\n", "embeds1", "=", "mat", "[", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "]", "\n", "return", "embeds1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_kg2_ent_embeddings": [[134, 138], ["attr2vec.get_ent_embeds_from_attributes", "attr2vec.Attr2Vec.eval_attribute_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings"], ["", "def", "eval_kg2_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "mat", "=", "get_ent_embeds_from_attributes", "(", "self", ".", "kgs", ",", "self", ".", "eval_attribute_embeddings", "(", ")", ",", "self", ".", "selected_attributes", ")", "\n", "embeds2", "=", "mat", "[", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "]", "\n", "return", "embeds2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_sim_mat": [[139, 144], ["attr2vec.get_ent_embeds_from_attributes", "numpy.matmul", "attr2vec.Attr2Vec.eval_attribute_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings"], ["", "def", "eval_sim_mat", "(", "self", ")", ":", "\n", "        ", "mat", "=", "get_ent_embeds_from_attributes", "(", "self", ".", "kgs", ",", "self", ".", "eval_attribute_embeddings", "(", ")", ",", "self", ".", "selected_attributes", ")", "\n", "embeds1", "=", "mat", "[", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", ",", "]", "\n", "embeds2", "=", "mat", "[", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", ",", "]", "\n", "return", "np", ".", "matmul", "(", "embeds1", ",", "embeds2", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.launch_training_1epo": [[145, 162], ["time.time", "range", "print", "random.sample", "numpy.ndarray", "numpy.ndarray", "enumerate", "attr2vec.Attr2Vec.session.run", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_training_1epo", "(", "self", ",", "epoch", ",", "steps", ",", "training_data_list", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_pos_triples", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "training_batch", "=", "random", ".", "sample", "(", "training_data_list", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "batch", "=", "np", ".", "ndarray", "(", "shape", "=", "(", "self", ".", "args", ".", "batch_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "=", "np", ".", "ndarray", "(", "shape", "=", "(", "self", ".", "args", ".", "batch_size", ",", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "index", ",", "x", "in", "enumerate", "(", "training_batch", ")", ":", "\n", "                ", "batch", "[", "index", "]", "=", "x", "[", "0", "]", "\n", "labels", "[", "index", ",", "0", "]", "=", "x", "[", "1", "]", "\n", "", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "loss", ",", "self", ".", "optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "train_inputs", ":", "batch", ",", "\n", "self", ".", "train_labels", ":", "labels", "}", ")", "\n", "trained_pos_triples", "+=", "len", "(", "training_batch", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "print", "(", "'epoch {}, attribute loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid": [[163, 172], ["attr2vec.get_ent_embeds_from_attributes", "openea.valid", "openea.valid", "attr2vec.Attr2Vec.eval_attribute_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings"], ["", "def", "valid", "(", "self", ")", ":", "\n", "        ", "mat", "=", "get_ent_embeds_from_attributes", "(", "self", ".", "kgs", ",", "self", ".", "eval_attribute_embeddings", "(", ")", ",", "self", ".", "selected_attributes", ")", "\n", "embeds1", "=", "mat", "[", "self", ".", "kgs", ".", "valid_entities1", ",", "]", "\n", "embeds2", "=", "mat", "[", "self", ".", "kgs", ".", "valid_entities2", ",", "]", "\n", "hits1_12", ",", "mrr_12", "=", "evaluation", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "\n", "self", ".", "args", ".", "test_threads_num", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ")", "\n", "if", "self", ".", "args", ".", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hits1_12", "\n", "", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.test": [[173, 182], ["attr2vec.get_ent_embeds_from_attributes", "openea.test", "openea.test", "attr2vec.Attr2Vec.eval_attribute_embeddings", "openea.save_results", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_attribute_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "mat", "=", "get_ent_embeds_from_attributes", "(", "self", ".", "kgs", ",", "self", ".", "eval_attribute_embeddings", "(", ")", ",", "self", ".", "selected_attributes", ")", "\n", "embeds1", "=", "mat", "[", "self", ".", "kgs", ".", "test_entities1", ",", "]", "\n", "embeds2", "=", "mat", "[", "self", ".", "kgs", ".", "test_entities2", ",", "]", "\n", "rest_12", ",", "_", ",", "_", ",", "rest_21", ",", "_", ",", "_", "=", "evaluation", ".", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "\n", "self", ".", "args", ".", "test_threads_num", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "if", "save", ":", "\n", "            ", "read", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.run": [[183, 188], ["attr2vec.generate_training_data", "range", "len", "attr2vec.Attr2Vec.launch_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.generate_training_data", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "training_data_list", "=", "generate_training_data", "(", "self", ".", "kgs", ",", "threshold", "=", "0.9", ")", "\n", "steps", "=", "len", "(", "training_data_list", ")", "//", "self", ".", "args", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "attr_max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "steps", ",", "training_data_list", ")", "\n", "# if i % 10 == 0:", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.save": [[191, 194], ["attr2vec.Attr2Vec.embeds.eval", "openea.save_embeddings", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "embeds", "=", "self", ".", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "read", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "None", ",", "None", ",", "embeds", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kg_popular_attributes": [[19, 29], ["dict", "print", "int", "sorted", "set", "print", "len", "len", "dict.get", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "get_kg_popular_attributes", "(", "kg", ":", "KG", ",", "threshold", ")", ":", "\n", "    ", "count_dic", "=", "dict", "(", ")", "\n", "for", "_", ",", "attr", ",", "_", "in", "kg", ".", "attribute_triples_list", ":", "\n", "        ", "count_dic", "[", "attr", "]", "=", "count_dic", ".", "get", "(", "attr", ",", "0", ")", "+", "1", "\n", "", "print", "(", "\"total attributes:\"", ",", "len", "(", "count_dic", ")", ")", "\n", "used_attributes_num", "=", "int", "(", "len", "(", "count_dic", ")", "*", "threshold", ")", "\n", "sorted_attributes", "=", "sorted", "(", "count_dic", ",", "key", "=", "count_dic", ".", "get", ",", "reverse", "=", "True", ")", "\n", "selected_attributes", "=", "set", "(", "sorted_attributes", "[", "0", ":", "used_attributes_num", "]", ")", "\n", "print", "(", "\"selected attributes\"", ",", "len", "(", "selected_attributes", ")", ")", "\n", "return", "selected_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kgs_popular_attributes": [[31, 37], ["attr2vec.get_kg_popular_attributes", "attr2vec.get_kg_popular_attributes", "print", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kg_popular_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kg_popular_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "get_kgs_popular_attributes", "(", "kgs", ":", "KGs", ",", "threshold", ")", ":", "\n", "    ", "kg1_selected_attributes", "=", "get_kg_popular_attributes", "(", "kgs", ".", "kg1", ",", "threshold", ")", "\n", "kg2_selected_attributes", "=", "get_kg_popular_attributes", "(", "kgs", ".", "kg2", ",", "threshold", ")", "\n", "selected_attributes", "=", "kg1_selected_attributes", "|", "kg2_selected_attributes", "\n", "print", "(", "\"total selected attributes\"", ",", "len", "(", "selected_attributes", ")", ")", "\n", "return", "kg1_selected_attributes", ",", "kg2_selected_attributes", ",", "selected_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.generate_training_data": [[39, 56], ["attr2vec.get_kgs_popular_attributes", "openea.modules.utils.util.merge_dic", "print", "list", "dict", "dict", "openea.modules.utils.util.merge_dic", "openea.modules.utils.util.merge_dic.items", "print", "len", "zip", "zip", "itertools.combinations", "len", "openea.modules.utils.util.merge_dic.keys", "openea.modules.utils.util.merge_dic.get", "list.append", "openea.modules.utils.util.merge_dic.get", "set"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_kgs_popular_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "generate_training_data", "(", "kgs", ":", "KGs", ",", "threshold", "=", "1.0", ")", ":", "\n", "    ", "kg1_selected_attributes", ",", "kg2_selected_attributes", ",", "selected_attributes", "=", "get_kgs_popular_attributes", "(", "kgs", ",", "threshold", ")", "\n", "entity_attributes_dict", "=", "merge_dic", "(", "kgs", ".", "kg1", ".", "entity_attributes_dict", ",", "kgs", ".", "kg2", ".", "entity_attributes_dict", ")", "\n", "print", "(", "\"entity attribute dict\"", ",", "len", "(", "entity_attributes_dict", ")", ")", "\n", "training_data_list", "=", "list", "(", ")", "\n", "training_links_dict12", "=", "dict", "(", "zip", "(", "kgs", ".", "train_entities1", ",", "kgs", ".", "train_entities2", ")", ")", "\n", "training_links_dict21", "=", "dict", "(", "zip", "(", "kgs", ".", "train_entities2", ",", "kgs", ".", "train_entities1", ")", ")", "\n", "training_links_dict", "=", "merge_dic", "(", "training_links_dict12", ",", "training_links_dict21", ")", "\n", "for", "ent", ",", "attributes", "in", "entity_attributes_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "ent", "in", "training_links_dict", ".", "keys", "(", ")", ":", "\n", "            ", "attributes", "=", "attributes", "|", "entity_attributes_dict", ".", "get", "(", "training_links_dict", ".", "get", "(", "ent", ")", ",", "set", "(", ")", ")", "\n", "", "attributes", "=", "attributes", "&", "selected_attributes", "\n", "for", "attr", ",", "context_attr", "in", "itertools", ".", "combinations", "(", "attributes", ",", "2", ")", ":", "\n", "            ", "if", "attr", "!=", "context_attr", ":", "\n", "                ", "training_data_list", ".", "append", "(", "(", "attr", ",", "context_attr", ")", ")", "\n", "", "", "", "print", "(", "\"training data of attribute correlations\"", ",", "len", "(", "training_data_list", ")", ")", "\n", "return", "training_data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.get_ent_embeds_from_attributes": [[58, 77], ["print", "time.time", "openea.modules.utils.util.merge_dic", "numpy.zeros", "range", "print", "sklearn.preprocessing.normalize", "openea.modules.utils.util.merge_dic.get", "set", "len", "numpy.mean", "numpy.row_stack", "time.time", "list"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "get_ent_embeds_from_attributes", "(", "kgs", ":", "KGs", ",", "attr_embeds", ",", "selected_attributes", ")", ":", "\n", "    ", "print", "(", "\"get entity embeddings from attributes\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ent_mat", "=", "None", "\n", "entity_attributes_dict", "=", "merge_dic", "(", "kgs", ".", "kg1", ".", "entity_attributes_dict", ",", "kgs", ".", "kg2", ".", "entity_attributes_dict", ")", "\n", "zero_vec", "=", "np", ".", "zeros", "(", "[", "1", ",", "attr_embeds", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "kgs", ".", "entities_num", ")", ":", "\n", "        ", "attr_vec", "=", "zero_vec", "\n", "attributes", "=", "entity_attributes_dict", ".", "get", "(", "i", ",", "set", "(", ")", ")", "\n", "attributes", "=", "attributes", "&", "selected_attributes", "\n", "if", "len", "(", "attributes", ")", ">", "0", ":", "\n", "            ", "attr_vecs", "=", "attr_embeds", "[", "list", "(", "attributes", ")", ",", "]", "\n", "attr_vec", "=", "np", ".", "mean", "(", "attr_vecs", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "", "if", "ent_mat", "is", "None", ":", "\n", "            ", "ent_mat", "=", "attr_vec", "\n", "", "else", ":", "\n", "            ", "ent_mat", "=", "np", ".", "row_stack", "(", "[", "ent_mat", ",", "attr_vec", "]", ")", "\n", "", "", "print", "(", "'cost time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "preprocessing", ".", "normalize", "(", "ent_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.__init__": [[320, 322], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "# self.entity_local_name_dict = self._get_local_name_by_name_triple()", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.init": [[323, 343], ["multi_ke.MultiKE._get_local_name_by_name_triple", "print", "multi_ke.MultiKE._generate_literal_vectors", "multi_ke.MultiKE._generate_name_vectors_mat", "multi_ke.MultiKE._generate_attribute_value_vectors", "openea.approaches.predicate_alignmnet.PredicateAlignModel", "openea.approaches.predicate_alignmnet.PredicateAlignModel", "multi_ke.MultiKE._define_variables", "multi_ke.MultiKE._define_relation_view_graph", "multi_ke.MultiKE._define_attribute_view_graph", "multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph", "multi_ke.MultiKE._define_cross_kg_entity_reference_attribute_view_graph", "multi_ke.MultiKE._define_cross_kg_relation_reference_graph", "multi_ke.MultiKE._define_cross_kg_attribute_reference_graph", "multi_ke.MultiKE._define_common_space_learning_graph", "multi_ke.MultiKE._define_space_mapping_graph", "load_session", "tf.global_variables_initializer().run", "len", "tf.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_local_name_by_name_triple", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_literal_vectors", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_name_vectors_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_attribute_value_vectors", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_relation_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_attribute_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_entity_reference_attribute_view_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_relation_reference_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_attribute_reference_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_common_space_learning_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_space_mapping_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["# print('len(self.entity_local_name_dict):', len(self.entity_local_name_dict))", "\n", "# self._generate_literal_vectors()", "\n", "# self._generate_name_vectors_mat()", "\n", "# self._generate_attribute_value_vectors()", "\n", "self", ".", "predicate_align_model", "=", "PredicateAlignModel", "(", "self", ".", "kgs", ",", "self", ".", "args", ")", "\n", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_relation_view_graph", "(", ")", "\n", "# self._define_attribute_view_graph()", "\n", "self", ".", "_define_cross_kg_entity_reference_relation_view_graph", "(", ")", "\n", "# self._define_cross_kg_entity_reference_attribute_view_graph()", "\n", "self", ".", "_define_cross_kg_relation_reference_graph", "(", ")", "\n", "# self._define_cross_kg_attribute_reference_graph()", "\n", "# self._define_common_space_learning_graph()", "\n", "# self._define_space_mapping_graph()", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "", "def", "_get_local_name_by_name_triple", "(", "self", ",", "name_attribute_list", "=", "None", ")", ":", "\n", "        ", "if", "name_attribute_list", "is", "None", ":", "\n", "            ", "if", "'D_Y'", "in", "self", ".", "args", ".", "training_data", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._get_local_name_by_name_triple": [[344, 394], ["list", "multi_ke.MultiKE.kgs.kg1.entities_id_dict.items", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.items", "print", "set", "multi_ke.MultiKE.kgs.kg1.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg2.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg1.attributes_id_dict.items", "multi_ke.MultiKE.kgs.kg2.attributes_id_dict.items", "print", "print", "print", "v.rstrip.rstrip.strip", "v.rstrip.rstrip.endswith", "list.append", "len", "len", "len", "v.rstrip.rstrip.rstrip", "set.add", "set.add", "print", "print", "[].replace", "id_ent_dict[].split"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["                ", "name_attribute_list", "=", "{", "'skos:prefLabel'", ",", "'http://dbpedia.org/ontology/birthName'", "}", "\n", "", "elif", "'D_W'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'http://www.wikidata.org/entity/P373'", ",", "'http://www.wikidata.org/entity/P1476'", "}", "\n", "", "else", ":", "\n", "                ", "name_attribute_list", "=", "{", "}", "\n", "\n", "", "", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_set", "|", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_set", "\n", "id_ent_dict", "=", "{", "}", "\n", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "print", "(", "len", "(", "id_ent_dict", ")", ")", "\n", "\n", "name_ids", "=", "set", "(", ")", "\n", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "print", "(", "name_ids", ")", "\n", "\n", "local_name_dict", "=", "{", "}", "\n", "ents", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "print", "(", "len", "(", "ents", ")", ")", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "if", "a", "in", "name_ids", ":", "\n", "                ", "local_name_dict", "[", "id_ent_dict", "[", "e", "]", "]", "=", "v", "\n", "", "", "print", "(", "'after name_ids:'", ",", "len", "(", "local_name_dict", ")", ")", "\n", "for", "e", "in", "ents", ":", "\n", "            ", "if", "id_ent_dict", "[", "e", "]", "not", "in", "local_name_dict", ":", "\n", "                    ", "local_name_dict", "[", "id_ent_dict", "[", "e", "]", "]", "=", "id_ent_dict", "[", "e", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "", "return", "local_name_dict", "\n", "\n", "", "def", "_generate_literal_vectors", "(", "self", ")", ":", "\n", "        ", "cleaned_attribute_triples_list1", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "cleaned_attribute_triples_list2", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "value_list", "=", "[", "v", "for", "(", "_", ",", "_", ",", "v", ")", "in", "cleaned_attribute_triples_list1", "+", "cleaned_attribute_triples_list2", "]", "\n", "local_name_list", "=", "list", "(", "self", ".", "entity_local_name_dict", ".", "values", "(", ")", ")", "\n", "self", ".", "literal_list", "=", "list", "(", "set", "(", "value_list", "+", "local_name_list", ")", ")", "\n", "print", "(", "'literal num:'", ",", "len", "(", "local_name_list", ")", ",", "len", "(", "value_list", ")", ",", "len", "(", "self", ".", "literal_list", ")", ")", "\n", "\n", "word2vec", "=", "read_word2vec", "(", "self", ".", "args", ".", "word2vec_path", ",", "self", ".", "args", ".", "word2vec_dim", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_literal_vectors": [[395, 411], ["multi_ke.clear_attribute_triples", "multi_ke.clear_attribute_triples", "list", "list", "print", "multi_ke.read_word2vec", "openea.approaches.literal_encoder.LiteralEncoder", "openea.approaches.literal_encoder.LiteralEncoder", "dict", "range", "multi_ke.MultiKE.entity_local_name_dict.values", "set", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.read_word2vec"], ["literal_encoder", "=", "LiteralEncoder", "(", "self", ".", "literal_list", ",", "word2vec", ",", "self", ".", "args", ",", "300", ")", "\n", "self", ".", "literal_vectors_mat", "=", "literal_encoder", ".", "encoded_literal_vector", "\n", "assert", "self", ".", "literal_vectors_mat", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "literal_list", ")", "\n", "self", ".", "literal_id_dic", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "literal_list", ")", ")", ":", "\n", "            ", "self", ".", "literal_id_dic", "[", "self", ".", "literal_list", "[", "i", "]", "]", "=", "i", "\n", "", "assert", "len", "(", "self", ".", "literal_list", ")", "==", "len", "(", "self", ".", "literal_id_dic", ")", "\n", "\n", "", "def", "_generate_name_vectors_mat", "(", "self", ")", ":", "\n", "        ", "name_ordered_list", "=", "list", "(", ")", "\n", "num", "=", "len", "(", "self", ".", "entities", ")", "\n", "print", "(", "\"total entities:\"", ",", "num", ")", "\n", "entity_id_uris_dic", "=", "dict", "(", "zip", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "values", "(", ")", ",", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "entity_id_uris_dic2", "=", "dict", "(", "zip", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "values", "(", ")", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "entity_id_uris_dic", ".", "update", "(", "entity_id_uris_dic2", ")", "\n", "print", "(", "'total entities ids:'", ",", "len", "(", "entity_id_uris_dic", ")", ")", "\n", "assert", "len", "(", "entity_id_uris_dic", ")", "==", "num", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_name_vectors_mat": [[412, 434], ["list", "len", "print", "dict", "dict", "dict.update", "print", "range", "print", "print", "zip", "zip", "len", "len", "dict.get", "multi_ke.MultiKE.entity_local_name_dict.get", "multi_ke.MultiKE.literal_id_dic.get", "list.append", "len", "type", "sklearn.preprocessing.normalize", "multi_ke.MultiKE.kgs.kg1.entities_id_dict.values", "multi_ke.MultiKE.kgs.kg1.entities_id_dict.keys", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.values", "multi_ke.MultiKE.kgs.kg2.entities_id_dict.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "assert", "i", "in", "entity_id_uris_dic", "\n", "entity_uri", "=", "entity_id_uris_dic", ".", "get", "(", "i", ")", "\n", "assert", "entity_uri", "in", "self", ".", "entity_local_name_dict", "\n", "entity_name", "=", "self", ".", "entity_local_name_dict", ".", "get", "(", "entity_uri", ")", "\n", "entity_name_index", "=", "self", ".", "literal_id_dic", ".", "get", "(", "entity_name", ")", "\n", "name_ordered_list", ".", "append", "(", "entity_name_index", ")", "\n", "", "print", "(", "'name_ordered_list'", ",", "len", "(", "name_ordered_list", ")", ")", "\n", "name_mat", "=", "self", ".", "literal_vectors_mat", "[", "name_ordered_list", ",", "]", "\n", "print", "(", "\"entity name embeddings mat:\"", ",", "type", "(", "name_mat", ")", ",", "name_mat", ".", "shape", ")", "\n", "if", "self", ".", "args", ".", "literal_normalize", ":", "\n", "            ", "name_mat", "=", "preprocessing", ".", "normalize", "(", "name_mat", ")", "\n", "", "self", ".", "local_name_vectors", "=", "name_mat", "\n", "\n", "", "def", "_generate_attribute_value_vectors", "(", "self", ")", ":", "\n", "        ", "self", ".", "literal_set", "=", "set", "(", "self", ".", "literal_list", ")", "\n", "values_set", "=", "set", "(", ")", "\n", "cleaned_attribute_triples_list1", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "cleaned_attribute_triples_list2", ",", "_", ",", "_", "=", "clear_attribute_triples", "(", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "attribute_triples_list1", ",", "attribute_triples_list2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "h", ",", "a", ",", "v", "in", "cleaned_attribute_triples_list1", ":", "\n", "            ", "if", "v", "in", "self", ".", "literal_set", ":", "\n", "                ", "values_set", ".", "add", "(", "v", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._generate_attribute_value_vectors": [[435, 476], ["set", "set", "multi_ke.clear_attribute_triples", "multi_ke.clear_attribute_triples", "print", "dict", "list", "len", "range", "set", "set", "multi_ke.MultiKE.kgs.kg1.set_attributes", "multi_ke.MultiKE.kgs.kg2.set_attributes", "openea.modules.load.read.generate_sup_attribute_triples", "openea.modules.load.read.generate_sup_attribute_triples", "multi_ke.MultiKE.kgs.kg1.add_sup_attribute_triples", "multi_ke.MultiKE.kgs.kg2.add_sup_attribute_triples", "len", "list", "range", "print", "print", "set", "set", "len", "len", "multi_ke.MultiKE.literal_id_dic.get", "list.append", "len", "type", "sklearn.preprocessing.normalize", "set.add", "attribute_triples_list1.add", "set.add", "attribute_triples_list2.add", "int", "int"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.set_attributes", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.generate_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.load.kg.KG.add_sup_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["attribute_triples_list1", ".", "add", "(", "(", "h", ",", "a", ",", "v", ")", ")", "\n", "\n", "", "", "for", "h", ",", "a", ",", "v", "in", "cleaned_attribute_triples_list2", ":", "\n", "            ", "if", "v", "in", "self", ".", "literal_set", ":", "\n", "                ", "values_set", ".", "add", "(", "v", ")", "\n", "attribute_triples_list2", ".", "add", "(", "(", "h", ",", "a", ",", "v", ")", ")", "\n", "", "", "print", "(", "\"selected attribute triples\"", ",", "len", "(", "attribute_triples_list1", ")", ",", "len", "(", "attribute_triples_list2", ")", ")", "\n", "values_id_dic", "=", "dict", "(", ")", "\n", "values_list", "=", "list", "(", "values_set", ")", "\n", "num", "=", "len", "(", "values_list", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "values_id_dic", "[", "values_list", "[", "i", "]", "]", "=", "i", "\n", "", "id_attribute_triples1", "=", "set", "(", "[", "(", "h", ",", "a", ",", "int", "(", "values_id_dic", "[", "v", "]", ")", ")", "for", "(", "h", ",", "a", ",", "v", ")", "in", "attribute_triples_list1", "]", ")", "\n", "id_attribute_triples2", "=", "set", "(", "[", "(", "h", ",", "a", ",", "int", "(", "values_id_dic", "[", "v", "]", ")", ")", "for", "(", "h", ",", "a", ",", "v", ")", "in", "attribute_triples_list2", "]", ")", "\n", "self", ".", "kgs", ".", "kg1", ".", "set_attributes", "(", "id_attribute_triples1", ")", "\n", "self", ".", "kgs", ".", "kg2", ".", "set_attributes", "(", "id_attribute_triples2", ")", "\n", "sup_triples1", ",", "sup_triples2", "=", "generate_sup_attribute_triples", "(", "self", ".", "kgs", ".", "train_links", ",", "self", ".", "kgs", ".", "kg1", ".", "av_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "av_dict", ")", "\n", "self", ".", "kgs", ".", "kg1", ".", "add_sup_attribute_triples", "(", "sup_triples1", ")", "\n", "self", ".", "kgs", ".", "kg2", ".", "add_sup_attribute_triples", "(", "sup_triples2", ")", "\n", "num", "=", "len", "(", "values_id_dic", ")", "\n", "value_ordered_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "            ", "value", "=", "values_list", "[", "i", "]", "\n", "value_index", "=", "self", ".", "literal_id_dic", ".", "get", "(", "value", ")", "\n", "value_ordered_list", ".", "append", "(", "value_index", ")", "\n", "", "print", "(", "'value_ordered_list'", ",", "len", "(", "value_ordered_list", ")", ")", "\n", "value_vectors", "=", "self", ".", "literal_vectors_mat", "[", "value_ordered_list", ",", "]", "\n", "print", "(", "\"value embeddings mat:\"", ",", "type", "(", "value_vectors", ")", ",", "value_vectors", ".", "shape", ")", "\n", "if", "self", ".", "args", ".", "literal_normalize", ":", "\n", "            ", "value_vectors", "=", "preprocessing", ".", "normalize", "(", "value_vectors", ")", "\n", "", "self", ".", "value_vectors", "=", "value_vectors", "\n", "\n", "", "def", "_define_variables", "(", "self", ")", ":", "\n", "# with tf.variable_scope('literal' + 'embeddings'):", "\n", "#     self.literal_embeds = tf.constant(self.value_vectors, dtype=tf.float32)", "\n", "# with tf.variable_scope('name_view' + 'embeddings'):", "\n", "#     self.name_embeds = tf.constant(self.local_name_vectors, dtype=tf.float32)", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relation_view'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "rv_ent_embeds", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rv_ent_embeds'", ",", "True", ")", "\n", "self", ".", "rel_embeds", "=", "xavier_init", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "True", ")", "\n", "# with tf.variable_scope('attribute_view' + 'embeddings'):", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_variables": [[477, 499], ["tf.variable_scope", "tf.constant", "tf.variable_scope", "tf.constant", "tf.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tf.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tf.variable_scope", "openea.modules.base.initializers.xavier_init", "openea.modules.base.initializers.xavier_init", "tf.variable_scope", "tf.get_variable", "tf.get_variable", "tf.get_variable", "tf.constant", "numpy.eye", "tf.initializers.orthogonal", "tf.initializers.orthogonal", "tf.initializers.orthogonal"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.xavier_init"], ["#     self.av_ent_embeds = xavier_init([self.kgs.entities_num, self.args.dim], 'av_ent_embeds', True)", "\n", "# False important!", "\n", "# self.attr_embeds = xavier_init([self.kgs.attributes_num, self.args.dim], 'attr_embeds', False)", "\n", "", "with", "tf", ".", "variable_scope", "(", "'shared'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "self", ".", "rv_ent_embeds", "# without name and attribute views", "\n", "", "with", "tf", ".", "variable_scope", "(", "'shared'", "+", "'combination'", ")", ":", "\n", "            ", "self", ".", "nv_mapping", "=", "tf", ".", "get_variable", "(", "'nv_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "rv_mapping", "=", "tf", ".", "get_variable", "(", "'rv_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "av_mapping", "=", "tf", ".", "get_variable", "(", "'av_mapping'", ",", "shape", "=", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "initializer", "=", "tf", ".", "initializers", ".", "orthogonal", "(", ")", ")", "\n", "self", ".", "eye_mat", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "self", ".", "args", ".", "dim", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'eye'", ")", "\n", "\n", "# --- The followings are view-specific embedding models --- #", "\n", "\n", "", "", "def", "_define_relation_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'relation_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "rel_neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_relation_view_graph": [[502, 531], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.losses.logistic_loss", "openea.modules.base.losses.logistic_loss", "print", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "multi_ke.alignment_loss", "multi_ke.alignment_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.logistic_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss"], ["            ", "rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_pos_hs", ")", "\n", "rel_prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "rel_pos_rs", ")", "\n", "rel_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_pos_ts", ")", "\n", "rel_nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_neg_hs", ")", "\n", "rel_nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "rel_neg_rs", ")", "\n", "rel_nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "rel_neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'relation_triple_loss'", ")", ":", "\n", "            ", "self", ".", "relation_loss", "=", "logistic_loss", "(", "rel_phs", ",", "rel_prs", ",", "rel_pts", ",", "rel_nhs", ",", "rel_nrs", ",", "rel_nts", ",", "'L2'", ")", "\n", "print", "(", "\"relation cv\"", ")", "\n", "final_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "rel_pos_hs", ")", "\n", "final_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "rel_pos_ts", ")", "\n", "# name_phs = tf.nn.embedding_lookup(self.name_embeds, self.rel_pos_hs)", "\n", "# name_pts = tf.nn.embedding_lookup(self.name_embeds, self.rel_pos_ts)", "\n", "align_loss", "=", "positive_loss", "(", "final_phs", ",", "rel_prs", ",", "rel_pts", ",", "'L2'", ")", "\n", "align_loss", "+=", "positive_loss", "(", "rel_phs", ",", "rel_prs", ",", "final_pts", ",", "'L2'", ")", "\n", "# align_loss += 0.5 * alignment_loss(final_phs, name_phs)", "\n", "# align_loss += 0.5 * alignment_loss(final_pts, name_pts)", "\n", "self", ".", "relation_loss", "+=", "align_loss", "\n", "self", ".", "relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "_define_attribute_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'attribute_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "attr_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'attribute_triple_lookup'", ")", ":", "\n", "            ", "attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "attr_pos_as", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_attribute_view_graph": [[532, 556], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.variable_scope", "multi_ke.conv", "tf.log", "tf.multiply", "tf.reduce_sum", "print", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "multi_ke.conv", "tf.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.log", "multi_ke.alignment_loss", "tf.exp", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss"], ["attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "attr_pos_vs", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'cnn'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "attr_phs", ",", "attr_pas", ",", "attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "self", ".", "attr_pos_ws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "print", "(", "\"attribute cv\"", ")", "\n", "final_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "name_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "attr_pos_hs", ")", "\n", "pos_score", "=", "conv", "(", "final_phs", ",", "attr_pas", ",", "attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_loss", "+=", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", ")", "\n", "pos_loss", "+=", "0.5", "*", "alignment_loss", "(", "final_phs", ",", "name_phs", ")", "\n", "self", ".", "attribute_loss", "=", "pos_loss", "\n", "self", ".", "attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "# --- The followings are cross-kg identity inference --- #", "\n", "\n", "", "", "def", "_define_cross_kg_entity_reference_relation_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckge_rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_lookup'", ")", ":", "\n", "            ", "ckge_rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckge_rel_pos_hs", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_entity_reference_relation_view_graph": [[559, 572], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.positive_loss", "openea.modules.base.losses.positive_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss"], ["", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_triple_loss'", ")", ":", "\n", "            ", "self", ".", "ckge_relation_loss", "=", "2", "*", "positive_loss", "(", "ckge_rel_phs", ",", "ckge_rel_prs", ",", "ckge_rel_pts", ",", "'L2'", ")", "\n", "self", ".", "ckge_relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckge_relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "_define_cross_kg_entity_reference_attribute_view_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckge_attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckge_attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_lookup'", ")", ":", "\n", "            ", "ckge_attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "ckge_attr_pos_hs", ")", "\n", "ckge_attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "ckge_attr_pos_as", ")", "\n", "ckge_attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "ckge_attr_pos_vs", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_entity_reference_attribute_view_graph": [[573, 587], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.conv", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.reduce_sum", "tf.log", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_triple_loss'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "ckge_attr_phs", ",", "ckge_attr_pas", ",", "ckge_attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "self", ".", "ckge_attribute_loss", "=", "2", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", ")", "\n", "self", ".", "ckge_attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckge_attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "_define_cross_kg_relation_reference_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckgp_rel_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckgp_rel_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_lookup'", ")", ":", "\n", "            ", "ckgp_rel_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckgp_rel_pos_hs", ")", "\n", "ckgp_rel_prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "ckgp_rel_pos_rs", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_relation_reference_graph": [[588, 603], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "multi_ke.positive_loss_with_weight"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.positive_loss_with_weight"], ["ckgp_rel_pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "ckgp_rel_pos_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_relation_reference_loss'", ")", ":", "\n", "            ", "self", ".", "ckgp_relation_loss", "=", "2", "*", "positive_loss_with_weight", "(", "ckgp_rel_phs", ",", "ckgp_rel_prs", ",", "ckgp_rel_pts", ",", "\n", "self", ".", "ckgp_rel_pos_ws", ")", "\n", "self", ".", "ckgp_relation_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckgp_relation_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "_define_cross_kg_attribute_reference_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_placeholder'", ")", ":", "\n", "            ", "self", ".", "ckga_attr_pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "ckga_attr_pos_ws", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_lookup'", ")", ":", "\n", "            ", "ckga_attr_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "ckga_attr_pos_hs", ")", "\n", "ckga_attr_pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "ckga_attr_pos_as", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_cross_kg_attribute_reference_graph": [[604, 622], ["tf.name_scope", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.conv", "tf.log", "tf.multiply", "tf.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.exp"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["ckga_attr_pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "literal_embeds", ",", "self", ".", "ckga_attr_pos_vs", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_kg_attribute_reference_loss'", ")", ":", "\n", "            ", "pos_score", "=", "conv", "(", "ckga_attr_phs", ",", "ckga_attr_pas", ",", "ckga_attr_pvs", ",", "self", ".", "args", ".", "dim", ")", "\n", "pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "self", ".", "ckga_attr_pos_ws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "self", ".", "ckga_attribute_loss", "=", "pos_loss", "\n", "self", ".", "ckga_attribute_optimizer", "=", "generate_optimizer", "(", "self", ".", "ckga_attribute_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "# --- The followings are intermediate combination --- #", "\n", "\n", "", "", "def", "_define_common_space_learning_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'cross_name_view_placeholder'", ")", ":", "\n", "            ", "self", ".", "cn_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'cross_name_view_lookup'", ")", ":", "\n", "            ", "final_cn_phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "cn_hs", ")", "\n", "cn_hs_names", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "cn_hs", ")", "\n", "cr_hs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "cn_hs", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_common_space_learning_graph": [[625, 639], ["tf.name_scope", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.alignment_loss", "multi_ke.alignment_loss", "multi_ke.alignment_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["            ", "self", ".", "cross_name_loss", "=", "alignment_loss", "(", "final_cn_phs", ",", "cn_hs_names", ")", "\n", "self", ".", "cross_name_loss", "+=", "alignment_loss", "(", "final_cn_phs", ",", "cr_hs", ")", "\n", "# self.cross_name_loss += alignment_loss(final_cn_phs, ca_hs)", "\n", "self", ".", "cross_name_optimizer", "=", "generate_optimizer", "(", "self", ".", "args", ".", "cv_weight", "*", "self", ".", "cross_name_loss", ",", "\n", "self", ".", "args", ".", "ITC_learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "_define_space_mapping_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'final_entities_placeholder'", ")", ":", "\n", "            ", "self", ".", "entities", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "args", ".", "entity_batch_size", ",", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'multi_view_entities_lookup'", ")", ":", "\n", "            ", "final_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities", ")", "\n", "nv_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "name_embeds", ",", "self", ".", "entities", ")", "\n", "rv_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rv_ent_embeds", ",", "self", ".", "entities", ")", "\n", "av_ents", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "av_ent_embeds", ",", "self", ".", "entities", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'mapping_loss'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE._define_space_mapping_graph": [[640, 659], ["tf.name_scope", "tf.placeholder", "tf.name_scope", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.name_scope", "multi_ke.space_mapping_loss", "multi_ke.space_mapping_loss", "multi_ke.space_mapping_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tf.trainable_variables", "v.name.startswith"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["            ", "nv_space_mapping_loss", "=", "space_mapping_loss", "(", "nv_ents", ",", "final_ents", ",", "self", ".", "nv_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "rv_space_mapping_loss", "=", "space_mapping_loss", "(", "rv_ents", ",", "final_ents", ",", "self", ".", "rv_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "av_space_mapping_loss", "=", "space_mapping_loss", "(", "av_ents", ",", "final_ents", ",", "self", ".", "av_mapping", ",", "self", ".", "eye_mat", ",", "\n", "self", ".", "args", ".", "orthogonal_weight", ")", "\n", "self", ".", "shared_comb_loss", "=", "nv_space_mapping_loss", "+", "rv_space_mapping_loss", "+", "av_space_mapping_loss", "\n", "opt_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "\"shared\"", ")", "]", "\n", "self", ".", "shared_comb_optimizer", "=", "generate_optimizer", "(", "self", ".", "shared_comb_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "var_list", "=", "opt_vars", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "# --- The followings are training for multi-view embeddings --- #", "\n", "\n", "", "", "def", "train_relation_view_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_set", ",", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_relation_view_1epo": [[661, 688], ["time.time", "range", "random.shuffle", "random.shuffle", "time.time", "print", "multiprocessing.Process().start", "batch_queue.get", "multi_ke.MultiKE.session.run", "len", "multiprocessing.Process"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "relation_loss", ",", "self", ".", "relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "rel_neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "rel_neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "rel_neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "train_attribute_view_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "generate_attribute_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights1", ",", "\n", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights2", ",", "\n", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights_set1", ",", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_attribute_view_1epo": [[689, 716], ["time.time", "range", "random.shuffle", "random.shuffle", "time.time", "print", "multiprocessing.Process().start", "batch_queue.get", "multi_ke.MultiKE.session.run", "len", "multiprocessing.Process"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["self", ".", "predicate_align_model", ".", "attribute_triples_w_weights_set2", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "attribute_batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "0", ")", ")", ".", "start", "(", ")", "\n", "", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "attribute_loss", ",", "self", ".", "attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "attr_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights1", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "predicate_align_model", ".", "attribute_triples_w_weights2", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of att. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n", "# --- The followings are training for cross-kg identity inference --- #", "\n", "\n", "", "def", "train_cross_kg_entity_inference_relation_view_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo": [[719, 740], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckge_relation_loss", ",", "self", ".", "ckge_relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckge_rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg entity inference in rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "train_cross_kg_entity_inference_attribute_view_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "attribute_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "attribute_batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_entity_inference_attribute_view_1epo": [[741, 762], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckge_attribute_loss", ",", "self", ".", "ckge_attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckge_attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckge_attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg entity inference in attr. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "train_cross_kg_relation_inference_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_relation_inference_1epo": [[763, 785], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckgp_relation_loss", ",", "self", ".", "ckgp_relation_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckgp_rel_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckgp_rel_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg relation inference in rel. view, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "\n", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "train_cross_kg_attribute_inference_1epo", "(", "self", ",", "epoch", ",", "sup_triples", ")", ":", "\n", "        ", "if", "len", "(", "sup_triples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "sup_triples", ")", "/", "self", ".", "args", ".", "attribute_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "attribute_batch_size", "if", "steps", ">", "1", "else", "len", "(", "sup_triples", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_attribute_inference_1epo": [[786, 807], ["time.time", "int", "range", "time.time", "print", "len", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["            ", "batch_pos", "=", "random", ".", "sample", "(", "sup_triples", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "ckga_attribute_loss", ",", "self", ".", "ckga_attribute_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "ckga_attr_pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "ckga_attr_pos_ws", ":", "[", "x", "[", "3", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of cross-kg attribute inference in attr. view, avg. loss: {:.4f}, time: {:.4f}s'", "\n", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "train_shared_space_mapping_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "entity_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "entity_batch_size", "if", "steps", ">", "1", "else", "len", "(", "entities", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_pos", "=", "random", ".", "sample", "(", "entities", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "shared_comb_loss", ",", "self", ".", "shared_comb_optimizer", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_shared_space_mapping_1epo": [[808, 824], ["time.time", "int", "range", "time.time", "print", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["feed_dict", "=", "{", "self", ".", "entities", ":", "batch_pos", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of shared space learning, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n", "# --- The followings are training for cross-view inference --- #", "\n", "\n", "", "def", "train_common_space_learning_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "entity_batch_size", ")", ")", "\n", "batch_size", "=", "self", ".", "args", ".", "entity_batch_size", "if", "steps", ">", "1", "else", "len", "(", "entities", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_common_space_learning_1epo": [[827, 843], ["time.time", "int", "range", "time.time", "print", "math.ceil", "len", "random.sample", "multi_ke.MultiKE.session.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["feed_dict", "=", "{", "self", ".", "cn_hs", ":", "batch_pos", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'epoch {} of common space learning, avg. loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "\n", "end", "-", "start", ")", ")", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_num", "\n", "attribute_triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_num", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "attribute_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "attribute_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "# attribute_step_tasks = task_divide(list(range(attribute_triple_steps)), self.args.batch_threads_num)", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.run": [[844, 930], ["time.time", "int", "int", "task_divide", "task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "multiprocessing.Manager.Queue", "multi_ke.valid_temp", "range", "print", "math.ceil", "math.ceil", "list", "list", "print", "multi_ke.MultiKE.train_relation_view_1epo", "multi_ke.MultiKE.train_common_space_learning_1epo", "multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo", "multi_ke.MultiKE.train_attribute_view_1epo", "multi_ke.MultiKE.train_common_space_learning_1epo", "multi_ke.MultiKE.train_cross_kg_entity_inference_attribute_view_1epo", "range", "range", "multi_ke.MultiKE.train_cross_kg_relation_inference_1epo", "multi_ke.MultiKE.train_cross_kg_attribute_inference_1epo", "multi_ke.valid_temp", "multi_ke.valid_temp", "multi_ke.MultiKE.valid", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "multi_ke.MultiKE.predicate_align_model.update_predicate_alignment", "multi_ke.MultiKE.predicate_align_model.update_predicate_alignment", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "print", "gc.collect", "multi_ke.MultiKE.rel_embeds.eval", "multi_ke.MultiKE.attr_embeds.eval", "multi_ke.MultiKE.eval_kg1_useful_ent_embeddings", "multi_ke.MultiKE.eval_kg2_useful_ent_embeddings", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_temp", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_relation_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_common_space_learning_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_entity_inference_relation_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_attribute_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_common_space_learning_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_entity_inference_attribute_view_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_relation_inference_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.MultiKE.train_cross_kg_attribute_inference_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_temp", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_temp", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings"], ["relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "# attribute_batch_queue = manager.Queue()", "\n", "cross_kg_relation_triples", "=", "self", ".", "kgs", ".", "kg1", ".", "sup_relation_triples_list", "+", "self", ".", "kgs", ".", "kg2", ".", "sup_relation_triples_list", "\n", "# cross_kg_entity_inference_in_attribute_triples = self.kgs.kg1.sup_attribute_triples_list + \\", "\n", "#                                                  self.kgs.kg2.sup_attribute_triples_list", "\n", "cross_kg_relation_inference", "=", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples1", "+", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples2", "\n", "# cross_kg_attribute_inference = self.predicate_align_model.sup_attribute_alignment_triples1 + \\", "\n", "#                                self.predicate_align_model.sup_attribute_alignment_triples2", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "entity_list", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "+", "self", ".", "kgs", ".", "kg2", ".", "entities_list", "\n", "\n", "# valid_temp(self, embed_choice='nv')", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "print", "(", "'epoch {}:'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "train_relation_view_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "\n", "neighbors1", ",", "neighbors2", ")", "\n", "# self.train_common_space_learning_1epo(i, entity_list)", "\n", "self", ".", "train_cross_kg_entity_inference_relation_view_1epo", "(", "i", ",", "cross_kg_relation_triples", ")", "\n", "if", "i", ">", "self", ".", "args", ".", "start_predicate_soft_alignment", ":", "\n", "                ", "self", ".", "train_cross_kg_relation_inference_1epo", "(", "i", ",", "cross_kg_relation_inference", ")", "\n", "\n", "# self.train_attribute_view_1epo(i, attribute_triple_steps, attribute_step_tasks, attribute_batch_queue,", "\n", "#                                neighbors1, neighbors2)", "\n", "# self.train_common_space_learning_1epo(i, entity_list)", "\n", "# self.train_cross_kg_entity_inference_attribute_view_1epo(i, cross_kg_entity_inference_in_attribute_triples)", "\n", "# if i > self.args.start_predicate_soft_alignment:", "\n", "#     self.train_cross_kg_attribute_inference_1epo(i, cross_kg_attribute_inference)", "\n", "\n", "", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "valid_temp", "(", "self", ",", "embed_choice", "=", "'rv'", ")", "\n", "# valid_temp(self, embed_choice='av')", "\n", "# valid_temp(self, embed_choice='final')", "\n", "# valid_temp(self, embed_choice='avg')", "\n", "# valid_WVA(self)", "\n", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "i", ">=", "self", ".", "args", ".", "start_predicate_soft_alignment", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "self", ".", "predicate_align_model", ".", "update_predicate_alignment", "(", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", ")", "\n", "# self.predicate_align_model.update_predicate_alignment(self.attr_embeds.eval(session=self.session),", "\n", "#                                                       predicate_type='attribute')", "\n", "cross_kg_relation_inference", "=", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples1", "+", "self", ".", "predicate_align_model", ".", "sup_relation_alignment_triples2", "\n", "# cross_kg_attribute_inference = self.predicate_align_model.sup_attribute_alignment_triples1 + \\", "\n", "#                                self.predicate_align_model.sup_attribute_alignment_triples2", "\n", "\n", "# if self.early_stop or i == self.args.max_epoch:", "\n", "#     break", "\n", "\n", "", "if", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "and", "i", "%", "self", ".", "args", ".", "truncated_freq", "==", "0", ":", "\n", "                ", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                    ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"\\ngenerating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# for i in range(1, self.args.shared_learning_max_epoch + 1):", "\n", "#     self.train_shared_space_mapping_1epo(i, entity_list)", "\n", "#     if i >= self.args.start_valid and i % self.args.eval_freq == 0:", "\n", "#         self.valid(self)", "\n", "# test_WVA(self)", "\n", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.test_WVA": [[23, 57], ["tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "print", "print", "openea.valid", "gc.collect", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["def", "test_WVA", "(", "model", ")", ":", "\n", "    ", "nv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "model", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight11", ",", "weight21", ",", "weight31", "=", "wva", "(", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", ")", "\n", "\n", "test_list", "=", "model", ".", "kgs", ".", "test_entities2", "\n", "nv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight12", ",", "weight22", ",", "weight32", "=", "wva", "(", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", ")", "\n", "\n", "weight1", "=", "weight11", "+", "weight12", "\n", "weight2", "=", "weight21", "+", "weight22", "\n", "weight3", "=", "weight31", "+", "weight32", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "\n", "print", "(", "'weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "\n", "embeds1", "=", "weight1", "*", "nv_ent_embeds1", "+", "weight2", "*", "rv_ent_embeds1", "+", "weight3", "*", "av_ent_embeds1", "\n", "embeds2", "=", "weight1", "*", "nv_ent_embeds2", "+", "weight2", "*", "rv_ent_embeds2", "+", "weight3", "*", "av_ent_embeds2", "\n", "print", "(", "'wvag test results:'", ")", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight": [[59, 71], ["sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.matmul", "numpy.diag", "numpy.mean", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "_compute_weight", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", ":", "\n", "    ", "def", "min_max_normalization", "(", "mat", ")", ":", "\n", "        ", "min_", "=", "np", ".", "min", "(", "mat", ")", "\n", "max_", "=", "np", ".", "max", "(", "mat", ")", "\n", "return", "(", "mat", "-", "min_", ")", "/", "(", "max_", "-", "min_", ")", "\n", "\n", "", "other_embeds", "=", "(", "embeds1", "+", "embeds2", "+", "embeds3", ")", "/", "3", "\n", "other_embeds", "=", "preprocessing", ".", "normalize", "(", "other_embeds", ")", "\n", "embeds1", "=", "preprocessing", ".", "normalize", "(", "embeds1", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "embeds1", ",", "other_embeds", ".", "T", ")", "\n", "weights", "=", "np", ".", "diag", "(", "sim_mat", ")", "\n", "return", "np", ".", "mean", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva": [[73, 87], ["multi_ke._compute_weight", "multi_ke._compute_weight", "multi_ke._compute_weight", "print"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke._compute_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "wva", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", ":", "\n", "    ", "weight1", "=", "_compute_weight", "(", "embeds1", ",", "embeds2", ",", "embeds3", ")", "\n", "weight2", "=", "_compute_weight", "(", "embeds2", ",", "embeds1", ",", "embeds3", ")", "\n", "weight3", "=", "_compute_weight", "(", "embeds3", ",", "embeds1", ",", "embeds2", ")", "\n", "return", "weight1", ",", "weight2", ",", "weight3", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "print", "(", "'final weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "ent_embeds", "=", "weight1", "*", "embeds1", "+", "weight2", "*", "embeds2", "+", "weight3", "*", "embeds3", "\n", "return", "ent_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_WVA": [[89, 127], ["tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "tf.nn.embedding_lookup().eval", "multi_ke.wva", "print", "print", "openea.valid", "gc.collect", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.wva", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_WVA", "(", "model", ")", ":", "\n", "    ", "nv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "model", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight11", ",", "weight21", ",", "weight31", "=", "wva", "(", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", ")", "\n", "\n", "test_list", "=", "model", ".", "kgs", ".", "valid_entities2", "+", "model", ".", "kgs", ".", "test_entities2", "\n", "nv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "name_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "rv_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "rv_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "av_ent_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "model", ".", "av_ent_embeds", ",", "test_list", ")", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "weight12", ",", "weight22", ",", "weight32", "=", "wva", "(", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", ")", "\n", "\n", "weight1", "=", "weight11", "+", "weight12", "\n", "weight2", "=", "weight21", "+", "weight22", "\n", "weight3", "=", "weight31", "+", "weight32", "\n", "all_weight", "=", "weight1", "+", "weight2", "+", "weight3", "\n", "weight1", "/=", "all_weight", "\n", "weight2", "/=", "all_weight", "\n", "weight3", "/=", "all_weight", "\n", "\n", "print", "(", "'weights'", ",", "weight1", ",", "weight2", ",", "weight3", ")", "\n", "\n", "embeds1", "=", "weight1", "*", "nv_ent_embeds1", "+", "weight2", "*", "rv_ent_embeds1", "+", "weight3", "*", "av_ent_embeds1", "\n", "embeds2", "=", "weight1", "*", "nv_ent_embeds2", "+", "weight2", "*", "rv_ent_embeds2", "+", "weight3", "*", "av_ent_embeds2", "\n", "print", "(", "'wvag valid results:'", ")", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "del", "nv_ent_embeds1", ",", "rv_ent_embeds1", ",", "av_ent_embeds1", "\n", "del", "nv_ent_embeds2", ",", "rv_ent_embeds2", ",", "av_ent_embeds2", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.valid_temp": [[129, 152], ["print", "openea.valid", "gc.collect", "model.name_embeds.eval", "model.rv_ent_embeds.eval", "model.av_ent_embeds.eval", "model.ent_embeds.eval", "model.av_ent_embeds.eval", "model.name_embeds.eval", "model.rv_ent_embeds.eval"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_temp", "(", "model", ",", "embed_choice", "=", "'avg'", ",", "w", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "    ", "if", "embed_choice", "==", "'nv'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "name_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'rv'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "rv_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'av'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "av_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'final'", ":", "\n", "        ", "ent_embeds", "=", "model", ".", "ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "elif", "embed_choice", "==", "'avg'", ":", "\n", "        ", "ent_embeds", "=", "w", "[", "0", "]", "*", "model", ".", "name_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "+", "w", "[", "1", "]", "*", "model", ".", "rv_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "+", "w", "[", "2", "]", "*", "model", ".", "av_ent_embeds", ".", "eval", "(", "session", "=", "model", ".", "session", ")", "\n", "", "else", ":", "# 'final'", "\n", "        ", "ent_embeds", "=", "model", ".", "ent_embeds", "\n", "", "print", "(", "embed_choice", ",", "'valid results:'", ")", "\n", "embeds1", "=", "ent_embeds", "[", "model", ".", "kgs", ".", "valid_entities1", ",", "]", "\n", "embeds2", "=", "ent_embeds", "[", "model", ".", "kgs", ".", "valid_entities2", "+", "model", ".", "kgs", ".", "test_entities2", ",", "]", "\n", "hits1_12", ",", "mrr_12", "=", "eva", ".", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "model", ".", "args", ".", "top_k", ",", "model", ".", "args", ".", "test_threads_num", ",", "\n", "normalize", "=", "True", ")", "\n", "del", "embeds1", ",", "embeds2", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.conv": [[154, 177], ["tf.reshape", "tf.reshape", "tf.concat", "tf.concat.shape.as_list", "tf.reshape", "tf.layers.batch_normalization", "range", "tf.nn.l2_normalize", "tf.layers.conv2d.shape.as_list", "tf.reshape", "tf.layers.dense", "tf.nn.l2_normalize", "tf.layers.conv2d", "tf.reduce_sum", "tf.square"], "function", ["None"], ["", "def", "conv", "(", "attr_hs", ",", "attr_as", ",", "attr_vs", ",", "dim", ",", "feature_map_size", "=", "2", ",", "kernel_size", "=", "[", "2", ",", "4", "]", ",", "activation", "=", "tf", ".", "nn", ".", "tanh", ",", "layer_num", "=", "2", ")", ":", "\n", "    ", "attr_as", "=", "tf", ".", "reshape", "(", "attr_as", ",", "[", "-", "1", ",", "1", ",", "dim", "]", ")", "\n", "attr_vs", "=", "tf", ".", "reshape", "(", "attr_vs", ",", "[", "-", "1", ",", "1", ",", "dim", "]", ")", "\n", "\n", "input_avs", "=", "tf", ".", "concat", "(", "[", "attr_as", ",", "attr_vs", "]", ",", "1", ")", "\n", "input_shape", "=", "input_avs", ".", "shape", ".", "as_list", "(", ")", "\n", "input_layer", "=", "tf", ".", "reshape", "(", "input_avs", ",", "[", "-", "1", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ",", "1", "]", ")", "\n", "_conv", "=", "input_layer", "\n", "_conv", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "_conv", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "layer_num", ")", ":", "\n", "        ", "_conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "inputs", "=", "_conv", ",", "\n", "filters", "=", "feature_map_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "activation", "=", "activation", ")", "\n", "", "_conv", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "_conv", ",", "2", ")", "\n", "_shape", "=", "_conv", ".", "shape", ".", "as_list", "(", ")", "\n", "_flat", "=", "tf", ".", "reshape", "(", "_conv", ",", "[", "-", "1", ",", "_shape", "[", "1", "]", "*", "_shape", "[", "2", "]", "*", "_shape", "[", "3", "]", "]", ")", "\n", "dense", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "_flat", ",", "units", "=", "dim", ",", "activation", "=", "activation", ")", "\n", "dense", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "dense", ")", "# important!!", "\n", "score", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "attr_hs", "-", "dense", ")", ",", "1", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.read_word2vec": [[179, 191], ["print", "dict", "file.close", "open", "line.strip().split.strip().split", "numpy.array", "len", "list", "line.strip().split.strip", "map"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "read_word2vec", "(", "file_path", ",", "vector_dimension", ")", ":", "\n", "    ", "print", "(", "'\\n'", ",", "file_path", ")", "\n", "word2vec", "=", "dict", "(", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "!=", "vector_dimension", "+", "1", ":", "\n", "                ", "continue", "\n", "", "v", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "line", "[", "1", ":", "]", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "word2vec", "[", "line", "[", "0", "]", "]", "=", "v", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "word2vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.clear_attribute_triples": [[193, 237], ["print", "set", "set", "set", "print", "print", "len", "attr_num.keys", "len", "v.replace().replace().replace.strip", "v.replace().replace().replace.endswith", "v.replace().replace().replace.endswith", "multi_ke.is_number", "v.replace().replace().replace.replace().replace().replace().replace().replace", "v.replace().replace().replace.replace().replace().replace", "set.append", "len", "set.add", "set.add", "literals_number.append", "literals_string.append", "v.replace().replace().replace.replace().replace().replace().replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.index", "v.replace().replace().replace.index", "v.replace().replace().replace.index", "v.replace().replace().replace.replace().replace().replace", "v.replace().replace().replace.replace", "v.replace().replace().replace.replace().replace", "v.replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.is_number", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index"], ["", "def", "clear_attribute_triples", "(", "attribute_triples", ")", ":", "\n", "    ", "print", "(", "'\\nbefore clear:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "# step 1", "\n", "attribute_triples_new", "=", "set", "(", ")", "\n", "attr_num", "=", "{", "}", "\n", "for", "(", "e", ",", "a", ",", "_", ")", "in", "attribute_triples", ":", "\n", "        ", "ent_num", "=", "1", "\n", "if", "a", "in", "attr_num", ":", "\n", "            ", "ent_num", "+=", "attr_num", "[", "a", "]", "\n", "", "attr_num", "[", "a", "]", "=", "ent_num", "\n", "", "attr_set", "=", "set", "(", "attr_num", ".", "keys", "(", ")", ")", "\n", "attr_set_new", "=", "set", "(", ")", "\n", "for", "a", "in", "attr_set", ":", "\n", "        ", "if", "attr_num", "[", "a", "]", ">=", "10", ":", "\n", "            ", "attr_set_new", ".", "add", "(", "a", ")", "\n", "", "", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "a", "in", "attr_set_new", ":", "\n", "            ", "attribute_triples_new", ".", "add", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 1:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "\n", "# step 2", "\n", "attribute_triples_new", "=", "[", "]", "\n", "literals_number", ",", "literals_string", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "attribute_triples", ":", "\n", "        ", "if", "'\"^^'", "in", "v", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"^^'", ")", "]", "\n", "", "if", "v", ".", "endswith", "(", "'\"@en'", ")", ":", "\n", "            ", "v", "=", "v", "[", ":", "v", ".", "index", "(", "'\"@en'", ")", "]", "\n", "", "if", "is_number", "(", "v", ")", ":", "\n", "            ", "literals_number", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "literals_string", ".", "append", "(", "v", ")", "\n", "", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "v", "=", "v", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "replace", "(", "'/'", ",", "' '", ")", "\n", "if", "'http'", "in", "v", ":", "\n", "            ", "continue", "\n", "", "attribute_triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "attribute_triples", "=", "attribute_triples_new", "\n", "print", "(", "'after step 2:'", ",", "len", "(", "attribute_triples", ")", ")", "\n", "return", "attribute_triples", ",", "literals_number", ",", "literals_string", "\n", "\n", "\n", "", "def", "is_number", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.is_number": [[239, 252], ["float", "unicodedata.numeric"], "function", ["None"], ["return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "try", ":", "\n", "        ", "import", "unicodedata", "\n", "unicodedata", ".", "numeric", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "(", "TypeError", ",", "ValueError", ")", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n", "\n", "", "def", "generate_neg_attribute_triples", "(", "pos_batch", ",", "all_triples_set", ",", "entity_list", ",", "neg_triples_num", ",", "neighbor", "=", "None", ")", ":", "\n", "    ", "if", "neighbor", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples": [[254, 267], ["list", "dict", "range", "len", "list.append", "len", "random.choice", "dict.get"], "function", ["None"], ["", "neg_batch", "=", "list", "(", ")", "\n", "for", "head", ",", "attribute", ",", "value", ",", "w", "in", "pos_batch", ":", "\n", "        ", "for", "i", "in", "range", "(", "neg_triples_num", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "neg_head", "=", "random", ".", "choice", "(", "neighbor", ".", "get", "(", "head", ",", "entity_list", ")", ")", "\n", "if", "(", "neg_head", ",", "attribute", ",", "value", ",", "w", ")", "not", "in", "all_triples_set", ":", "\n", "                    ", "break", "\n", "", "", "neg_batch", ".", "append", "(", "(", "neg_head", ",", "attribute", ",", "value", ",", "w", ")", ")", "\n", "", "", "assert", "len", "(", "neg_batch", ")", "==", "neg_triples_num", "*", "len", "(", "pos_batch", ")", "\n", "return", "neg_batch", "\n", "\n", "\n", "", "def", "generate_attribute_triple_batch_queue", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "entity_list1", ",", "\n", "entity_list2", ",", "batch_size", ",", "steps", ",", "out_queue", ",", "neighbor1", ",", "neighbor2", ",", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_attribute_triple_batch_queue": [[269, 278], ["exit", "multi_ke.generate_attribute_triple_batch", "out_queue.put"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_attribute_triple_batch"], ["    ", "for", "step", "in", "steps", ":", "\n", "        ", "pos_batch", ",", "neg_batch", "=", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n", "step", ",", "neighbor1", ",", "neighbor2", ",", "neg_triples_num", ")", "\n", "out_queue", ".", "put", "(", "(", "pos_batch", ",", "neg_batch", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n", "\n", "", "def", "generate_attribute_triple_batch", "(", "triple_list1", ",", "triple_list2", ",", "triple_set1", ",", "triple_set2", ",", "\n", "entity_list1", ",", "entity_list2", ",", "batch_size", ",", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_attribute_triple_batch": [[280, 292], ["int", "openea.generate_pos_triples", "openea.generate_pos_triples", "multi_ke.generate_neg_attribute_triples", "multi_ke.generate_neg_attribute_triples", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.train.batch.generate_pos_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.generate_neg_attribute_triples"], ["    ", "batch_size1", "=", "int", "(", "len", "(", "triple_list1", ")", "/", "(", "len", "(", "triple_list1", ")", "+", "len", "(", "triple_list2", ")", ")", "*", "batch_size", ")", "\n", "batch_size2", "=", "batch_size", "-", "batch_size1", "\n", "pos_batch1", "=", "bat", ".", "generate_pos_triples", "(", "triple_list1", ",", "batch_size1", ",", "step", ")", "\n", "pos_batch2", "=", "bat", ".", "generate_pos_triples", "(", "triple_list2", ",", "batch_size2", ",", "step", ")", "\n", "neg_batch1", "=", "generate_neg_attribute_triples", "(", "pos_batch1", ",", "triple_set1", ",", "entity_list1", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor1", ")", "\n", "neg_batch2", "=", "generate_neg_attribute_triples", "(", "pos_batch2", ",", "triple_set2", ",", "entity_list2", ",", "\n", "neg_triples_num", ",", "neighbor", "=", "neighbor2", ")", "\n", "return", "pos_batch1", "+", "pos_batch2", ",", "neg_batch1", "+", "neg_batch2", "\n", "\n", "\n", "", "def", "positive_loss_with_weight", "(", "phs", ",", "pas", ",", "pvs", ",", "pws", ")", ":", "\n", "    ", "pos_distance", "=", "phs", "+", "pas", "-", "pvs", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.positive_loss_with_weight": [[294, 301], ["tf.log", "tf.multiply", "tf.reduce_sum", "tf.reduce_sum", "tf.square", "tf.exp"], "function", ["None"], ["pos_score", "=", "tf", ".", "log", "(", "1", "+", "tf", ".", "exp", "(", "-", "pos_score", ")", ")", "\n", "pos_score", "=", "tf", ".", "multiply", "(", "pos_score", ",", "pws", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "return", "pos_loss", "\n", "\n", "\n", "", "def", "alignment_loss", "(", "ents1", ",", "ents2", ")", ":", "\n", "    ", "distance", "=", "ents1", "-", "ents2", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.alignment_loss": [[303, 307], ["tf.reduce_sum", "tf.reduce_sum", "tf.square"], "function", ["None"], ["return", "loss", "\n", "\n", "\n", "", "def", "space_mapping_loss", "(", "view_embeds", ",", "shared_embeds", ",", "mapping", ",", "eye", ",", "orthogonal_weight", ",", "norm_w", "=", "0.0001", ")", ":", "\n", "    ", "mapped_ents2", "=", "tf", ".", "matmul", "(", "view_embeds", ",", "mapping", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.multi_ke.space_mapping_loss": [[309, 316], ["tf.matmul", "tf.nn.l2_normalize", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.reduce_sum", "tf.square", "tf.square", "tf.pow", "tf.matmul"], "function", ["None"], ["map_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "shared_embeds", "-", "mapped_ents2", ")", ",", "1", ")", ")", "\n", "norm_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "mapping", ")", ",", "1", ")", ")", "\n", "orthogonal_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "tf", ".", "matmul", "(", "mapping", ",", "mapping", ",", "transpose_b", "=", "True", ")", "-", "eye", ",", "2", ")", ",", "1", ")", ")", "\n", "return", "map_loss", "+", "orthogonal_weight", "*", "orthogonal_loss", "+", "norm_w", "*", "norm_loss", "\n", "\n", "\n", "", "class", "MultiKE", "(", "BasicModel", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.__init__": [[19, 21], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.init": [[22, 38], ["mtranse.MTransE._define_variables", "mtranse.MTransE._define_mapping_variables", "mtranse.MTransE._define_embed_graph", "mtranse.MTransE._define_mapping_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_mapping_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_mapping_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'unit'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "alpha", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE._define_variables": [[39, 45], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE._define_embed_graph": [[46, 58], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.positive_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.positive_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "positive_loss", "(", "phs", ",", "prs", ",", "pts", ",", "'L2'", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.launch_training_1epo": [[59, 62], ["mtranse.MTransE.launch_triple_training_1epo", "mtranse.MTransE.launch_mapping_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo"], ["", "", "def", "launch_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "self", ".", "launch_mapping_training_1epo", "(", "epoch", ",", "triple_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.launch_triple_training_1epo": [[63, 83], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "mtranse.MTransE.session.run", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_pos_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "batch_queue", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.launch_mapping_training_1epo": [[84, 97], ["time.time", "range", "print", "random.sample", "mtranse.MTransE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "links_batch", "=", "random", ".", "sample", "(", "self", ".", "kgs", ".", "train_links", ",", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "//", "triple_steps", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss", ",", "self", ".", "mapping_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "seed_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "links_batch", "]", ",", "\n", "self", ".", "seed_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "links_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "links_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.mtranse.MTransE.run": [[98, 113], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "mtranse.MTransE.launch_training_1epo", "range", "mtranse.MTransE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.__init__": [[20, 25], ["openea.models.basic_model.BasicModel.__init__", "openea.approaches.attr2vec.Attr2Vec"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attr2vec", "=", "Attr2Vec", "(", ")", "\n", "self", ".", "attr_sim_mat", "=", "None", "\n", "self", ".", "ref_entities1", ",", "self", ".", "ref_entities2", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.init": [[26, 51], ["jape.JAPE._define_variables", "jape.JAPE._define_embed_graph", "jape.JAPE._define_sim_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE._define_sim_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "ref_entities1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_entities2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_sim_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'sharing'", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">=", "1", "\n", "assert", "self", ".", "args", ".", "neg_alpha", ">=", "0.0", "\n", "assert", "self", ".", "args", ".", "top_attr_threshold", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "attr_sim_mat_threshold", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "attr_sim_mat_beta", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE._define_variables": [[52, 58], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE._define_embed_graph": [[59, 85], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'jape_loss_distance'", ")", ":", "\n", "                ", "pos_distance", "=", "phs", "+", "prs", "-", "pts", "\n", "neg_distance", "=", "nhs", "+", "nrs", "-", "nts", "\n", "", "with", "tf", ".", "name_scope", "(", "'jape_loss_score'", ")", ":", "\n", "                ", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pos_distance", ")", ",", "axis", "=", "1", ")", "\n", "neg_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "neg_distance", ")", ",", "axis", "=", "1", ")", "\n", "", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_score", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "neg_score", ")", "\n", "self", ".", "triple_loss", "=", "pos_loss", "-", "self", ".", "args", ".", "neg_alpha", "*", "neg_loss", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE._define_sim_graph": [[86, 99], ["tensorflow.placeholder", "len", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "tensorflow.nn.l2_normalize", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.trainable_variables", "v.name.startswith", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_sim_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "dim1", "=", "self", ".", "args", ".", "sub_mat_size", "\n", "dim2", "=", "len", "(", "self", ".", "ref_entities2", ")", "\n", "self", ".", "attr_sim_mat_place", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "dim1", ",", "dim2", "]", ")", "\n", "ref1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities1", ")", "\n", "ref2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_entities2", ")", "\n", "ref2_trans", "=", "tf", ".", "matmul", "(", "self", ".", "attr_sim_mat_place", ",", "ref2", ")", "\n", "ref2_trans", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ref2_trans", ",", "1", ")", "\n", "self", ".", "sim_loss", "=", "self", ".", "args", ".", "attr_sim_mat_beta", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "ref1", "-", "ref2_trans", ",", "2", ")", ",", "1", ")", ")", "\n", "opt_vars", "=", "[", "v", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "if", "v", ".", "name", ".", "startswith", "(", "\"relational\"", ")", "]", "\n", "self", ".", "sim_optimizer", "=", "generate_optimizer", "(", "self", ".", "sim_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "var_list", "=", "opt_vars", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo": [[100, 126], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "jape.JAPE.session.run", "len", "multiprocessing.Process", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_triple_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_relation_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_set", ",", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "neighbors1", ",", "neighbors2", ",", "self", ".", "args", ".", "neg_triple_num", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss", ",", "self", ".", "triple_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "neg_hs", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_rs", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_ts", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "print", "(", "'epoch {}, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_sim_1epo": [[127, 139], ["time.time", "numpy.array", "list", "range", "print", "len", "range", "random.sample", "jape.JAPE.session.run", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_sim_1epo", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "steps", "=", "len", "(", "self", ".", "ref_entities1", ")", "//", "self", ".", "args", ".", "sub_mat_size", "\n", "ref_ent1_array", "=", "np", ".", "array", "(", "self", ".", "ref_entities1", ")", "\n", "ll", "=", "list", "(", "range", "(", "len", "(", "self", ".", "ref_entities1", ")", ")", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "ll", ",", "self", ".", "args", ".", "sub_mat_size", ")", "\n", "feed_dict", "=", "{", "self", ".", "entities1", ":", "ref_ent1_array", "[", "idx", "]", ",", "self", ".", "attr_sim_mat_place", ":", "self", ".", "attr_sim_mat", "[", "idx", ",", ":", "]", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "self", ".", "sim_loss", ",", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "+=", "vals", "\n", "", "print", "(", "'epoch {}, sim loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "loss", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.run_attr2vec": [[140, 151], ["time.time", "print", "jape.JAPE.attr2vec.set_args", "jape.JAPE.attr2vec.set_kgs", "jape.JAPE.attr2vec.init", "jape.JAPE.attr2vec.run", "jape.JAPE.attr2vec.eval_sim_mat", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.eval_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "run_attr2vec", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Training attribute embeddings:\"", ")", "\n", "self", ".", "attr2vec", ".", "set_args", "(", "self", ".", "args", ")", "\n", "self", ".", "attr2vec", ".", "set_kgs", "(", "self", ".", "kgs", ")", "\n", "self", ".", "attr2vec", ".", "init", "(", ")", "\n", "self", ".", "attr2vec", ".", "run", "(", ")", "\n", "sim_mat", "=", "self", ".", "attr2vec", ".", "eval_sim_mat", "(", ")", "\n", "sim_mat", "[", "sim_mat", "<", "self", ".", "args", ".", "attr_sim_mat_threshold", "]", "=", "0", "\n", "self", ".", "attr_sim_mat", "=", "sim_mat", "\n", "print", "(", "\"Training attributes ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.run": [[152, 170], ["jape.JAPE.run_attr2vec", "print", "time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "jape.JAPE.launch_triple_training_1epo", "jape.JAPE.launch_sim_1epo", "range", "jape.JAPE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.run_attr2vec", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_sim_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "# self.run_attr2vec()", "\n", "        ", "print", "(", "\"Joint training:\"", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "#            self.launch_sim_1epo(i)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.__init__": [[627, 640], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "model_init", "=", "None", "\n", "self", ".", "sess", "=", "None", "\n", "self", ".", "feeddict", "=", "None", "\n", "self", ".", "bootea", "=", "None", "\n", "self", ".", "alinet", "=", "None", "\n", "self", ".", "model3", "=", "None", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.init": [[641, 675], ["openea.approaches.bootea.BootEA", "openea.approaches.bootea.BootEA", "cycle.Cycle.bootea.set_args", "cycle.Cycle.bootea.set_kgs", "cycle.Cycle.bootea.init", "openea.approaches.alinet.AliNet", "openea.approaches.alinet.AliNet", "cycle.Cycle.alinet.set_args", "cycle.Cycle.alinet.set_kgs", "cycle.Cycle.alinet.init", "cycle.Cycle.model3.set_args", "cycle.Cycle.model3.set_kgs", "cycle.Cycle.model3.init", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.modules.args.args_hander.load_args", "openea.approaches.rsn4ea.RSN4EA", "openea.approaches.rsn4ea.RSN4EA"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_args", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.set_kgs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args", "home.repos.pwc.inspect_result.jadexin_cyctea.args.args_hander.load_args"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "if", "'100K'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "            ", "args_bootea", "=", "load_args", "(", "'./args/bootea_args_100K.json'", ")", "\n", "args_alinet", "=", "load_args", "(", "'./args/alinet_args_100K.json'", ")", "\n", "args_model3", "=", "load_args", "(", "'./args/'", "+", "self", ".", "args", ".", "model3", "+", "'_args_100K.json'", ")", "\n", "", "else", ":", "\n", "            ", "args_bootea", "=", "load_args", "(", "'./args/bootea_args_15K.json'", ")", "\n", "args_alinet", "=", "load_args", "(", "'./args/alinet_args_15K.json'", ")", "\n", "args_model3", "=", "load_args", "(", "'./args/'", "+", "self", ".", "args", ".", "model3", "+", "'_args_15K.json'", ")", "\n", "\n", "", "self", ".", "bootea", "=", "BootEA", "(", ")", "\n", "args_bootea", ".", "training_data", "=", "args_bootea", ".", "training_data", "+", "sys", ".", "argv", "[", "2", "]", "+", "'/'", "\n", "args_bootea", ".", "dataset_division", "=", "sys", ".", "argv", "[", "3", "]", "\n", "self", ".", "bootea", ".", "set_args", "(", "args_bootea", ")", "\n", "self", ".", "bootea", ".", "set_kgs", "(", "self", ".", "kgs", ")", "\n", "self", ".", "bootea", ".", "init", "(", ")", "\n", "\n", "self", ".", "alinet", "=", "AliNet", "(", ")", "\n", "args_alinet", ".", "training_data", "=", "args_alinet", ".", "training_data", "+", "sys", ".", "argv", "[", "2", "]", "+", "'/'", "\n", "args_alinet", ".", "dataset_division", "=", "sys", ".", "argv", "[", "3", "]", "\n", "self", ".", "alinet", ".", "set_args", "(", "args_alinet", ")", "\n", "self", ".", "alinet", ".", "set_kgs", "(", "self", ".", "kgs", ")", "\n", "self", ".", "alinet", ".", "init", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "model3", "==", "'rsn4ea'", ":", "\n", "            ", "self", ".", "model3", "=", "RSN4EA", "(", ")", "\n", "", "args_model3", ".", "training_data", "=", "args_model3", ".", "training_data", "+", "sys", ".", "argv", "[", "2", "]", "+", "'/'", "\n", "args_model3", ".", "dataset_division", "=", "sys", ".", "argv", "[", "3", "]", "\n", "self", ".", "model3", ".", "set_args", "(", "args_model3", ")", "\n", "self", ".", "model3", ".", "set_kgs", "(", "self", ".", "kgs", ")", "\n", "self", ".", "model3", ".", "init", "(", ")", "\n", "\n", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.test": [[677, 688], ["cycle.Cycle.bootea.test", "cycle.Cycle.alinet.test", "cycle.Cycle.model3.test", "print", "cycle.Cycle.ensemble_test", "cycle.Cycle.bootea.test", "cycle.Cycle.alinet.test", "cycle.Cycle.model3.test"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.ensemble_test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test"], ["", "def", "test", "(", "self", ",", "save", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "ensemble", ":", "\n", "            ", "self", ".", "bootea", ".", "test", "(", "save", ")", "\n", "self", ".", "alinet", ".", "test", "(", "save", ")", "\n", "self", ".", "model3", ".", "test", "(", "save", ")", "\n", "print", "(", "\"========== ensemble results==========\"", ")", "\n", "self", ".", "ensemble_test", "(", "save", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bootea", ".", "test", "(", "save", ")", "\n", "self", ".", "alinet", ".", "test", "(", "save", ")", "\n", "self", ".", "model3", ".", "test", "(", "save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.ensemble_valid": [[689, 705], ["cycle.Cycle.bootea._eval_valid_embeddings", "cycle.Cycle.alinet._eval_valid_embeddings", "cycle.Cycle.model3._eval_valid_embeddings", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "cycle.greedy_alignment"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_valid_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_valid_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_valid_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment"], ["", "", "def", "ensemble_valid", "(", "self", ",", "stop_metric", ",", "weights", ")", ":", "\n", "        ", "model1_embeds1", ",", "model1_embeds2", ",", "model1_mapping", "=", "self", ".", "bootea", ".", "_eval_valid_embeddings", "(", ")", "\n", "model2_embeds1", ",", "model2_embeds2", ",", "model2_mapping", "=", "self", ".", "alinet", ".", "_eval_valid_embeddings", "(", ")", "\n", "model3_embeds1", ",", "model3_embeds2", ",", "model3_mapping", "=", "self", ".", "model3", ".", "_eval_valid_embeddings", "(", ")", "\n", "sim_mat1", "=", "sim", "(", "model1_embeds1", ",", "model1_embeds2", ",", "metric", "=", "self", ".", "bootea", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "bootea", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat2", "=", "sim", "(", "model2_embeds1", ",", "model2_embeds2", ",", "metric", "=", "self", ".", "alinet", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "alinet", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat3", "=", "sim", "(", "model3_embeds1", ",", "model3_embeds2", ",", "metric", "=", "self", ".", "model3", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "model3", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat", "=", "weights", "[", "0", "]", "*", "sim_mat1", "+", "weights", "[", "1", "]", "*", "sim_mat2", "+", "weights", "[", "2", "]", "*", "sim_mat3", "\n", "_", ",", "hits1_12", ",", "mr_12", ",", "mrr_12", "=", "greedy_alignment", "(", "sim_mat", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "0", ",", "accurate", "=", "False", ")", "\n", "\n", "return", "hits1_12", "if", "stop_metric", "==", "'hits1'", "else", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.ensemble_test": [[706, 727], ["cycle.Cycle.bootea._eval_test_embeddings", "cycle.Cycle.alinet._eval_test_embeddings", "cycle.Cycle.model3._eval_test_embeddings", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "openea.modules.finding.similarity.sim", "cycle.greedy_alignment", "cycle.greedy_alignment", "openea.save_results", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_test_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_test_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_test_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["", "def", "ensemble_test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "model1_embeds1", ",", "model1_embeds2", ",", "model1_mapping", "=", "self", ".", "bootea", ".", "_eval_test_embeddings", "(", ")", "\n", "model2_embeds1", ",", "model2_embeds2", ",", "model2_mapping", "=", "self", ".", "alinet", ".", "_eval_test_embeddings", "(", ")", "\n", "model3_embeds1", ",", "model3_embeds2", ",", "model3_mapping", "=", "self", ".", "model3", ".", "_eval_test_embeddings", "(", ")", "\n", "sim_mat1", "=", "sim", "(", "model1_embeds1", ",", "model1_embeds2", ",", "metric", "=", "self", ".", "bootea", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "bootea", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat2", "=", "sim", "(", "model2_embeds1", ",", "model2_embeds2", ",", "metric", "=", "self", ".", "alinet", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "alinet", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat3", "=", "sim", "(", "model3_embeds1", ",", "model3_embeds2", ",", "metric", "=", "self", ".", "model3", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "model3", ".", "args", ".", "\n", "eval_metric", ",", "csls_k", "=", "0", ")", "\n", "sim_mat", "=", "self", ".", "w1", "*", "sim_mat1", "+", "self", ".", "w2", "*", "sim_mat2", "+", "self", ".", "w3", "*", "sim_mat3", "\n", "rest_12", ",", "_", ",", "_", ",", "_", "=", "greedy_alignment", "(", "sim_mat", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "rest_12", ",", "_", ",", "_", ",", "_", "=", "greedy_alignment", "(", "sim_mat", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.save": [[728, 730], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.Cycle.run": [[731, 1119], ["time.time", "int", "openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "set", "set", "dict", "range", "print", "math.ceil", "list", "len", "range", "print", "print", "cycle.Cycle.bootea.launch_training_k_epo", "cycle.Cycle.alinet.launch_alinet_training_k_repo", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "print", "gc.collect", "cycle.Cycle.alinet.find_neighbors", "range", "len", "print", "cycle.Cycle.bootea.eval_ref_sim_mat", "cycle.sim_norm", "cycle.my_mcd_matrix", "numpy.min", "numpy.max", "numpy.mean", "min", "cycle.bootstrapping_stable_matching", "list", "cycle.Cycle.alinet.eval_ref_sim_mat", "cycle.sim_norm", "cycle.my_mcd_matrix", "numpy.min", "numpy.max", "numpy.mean", "min", "cycle.bootstrapping_stable_matching", "cycle.Cycle.model3.eval_ref_sim_mat", "cycle.sim_norm", "cycle.my_mcd_matrix", "numpy.min", "numpy.max", "numpy.mean", "min", "cycle.bootstrapping_stable_matching", "print", "print", "jaccard_list.append", "cycle.Cycle.run.check_correctness"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.launch_training_k_epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.launch_alinet_training_k_repo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.AliNet.find_neighbors", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.my_mcd_matrix", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.my_mcd_matrix", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.my_mcd_matrix", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "bootea", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "bootea", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "alinet_neighbors1", ",", "alinet_neighbors2", "=", "None", ",", "None", "\n", "labeled_align", "=", "set", "(", ")", "\n", "labeled_align_1", "=", "set", "(", ")", "\n", "sub_num", "=", "self", ".", "args", ".", "sub_epoch", "\n", "iter_nums", "=", "self", ".", "args", ".", "max_epoch", "//", "sub_num", "\n", "alinet_steps", "=", "len", "(", "self", ".", "alinet", ".", "sup_ent2", ")", "//", "self", ".", "alinet", ".", "args", ".", "batch_size", "\n", "if", "alinet_steps", "==", "0", ":", "\n", "            ", "alinet_steps", "=", "1", "\n", "", "flag1", ",", "flag2", "=", "0", ",", "0", "\n", "flag11", ",", "flag22", "=", "0", ",", "0", "\n", "cycle_flag1", ",", "cycle_flag2", "=", "0", ",", "0", "\n", "if", "self", ".", "args", ".", "model3", "==", "'rsn4ea'", ":", "\n", "            ", "train_data", "=", "self", ".", "model3", ".", "_train_data", "\n", "\n", "", "ground_pair", "=", "self", ".", "kgs", ".", "test_links", "+", "self", ".", "kgs", ".", "valid_links", "\n", "ground_dict", "=", "dict", "(", "ground_pair", ")", "\n", "jaccard_list", "=", "[", "]", "\n", "seed_performance", "=", "{", "'boot1'", ":", "[", "]", ",", "'boot2'", ":", "[", "]", ",", "'alinet1'", ":", "[", "]", ",", "'alinet2'", ":", "[", "]", ",", "'model3_1'", ":", "[", "]", ",", "'model3_2'", ":", "[", "]", "}", "\n", "\n", "# define function of checking the accuracy of new alignment seeds", "\n", "def", "check_correctness", "(", "ent1_list", ",", "ent2_list", ",", "context", "=", "\"check alignment\"", ",", "all_pos", "=", "False", ")", ":", "\n", "            ", "count", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "ent1_list", ")", ")", ":", "\n", "                ", "ent1", "=", "ent1_list", "[", "idx", "]", "\n", "ent2", "=", "ent2_list", "[", "idx", "]", "\n", "if", "ground_dict", ".", "get", "(", "ent1", ")", "==", "ent2", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "", "print", "(", "\"{}, right alignment: {}/{}={:.3f}\"", ".", "format", "(", "context", ",", "count", ",", "len", "(", "ent1_list", ")", ",", "count", "/", "len", "(", "ent1_list", ")", ")", ")", "\n", "if", "all_pos", ":", "\n", "                ", "precision", "=", "count", "/", "len", "(", "ent1_list", ")", "\n", "recall", "=", "count", "/", "all_pos", "\n", "if", "precision", "+", "recall", "==", "0", ":", "\n", "                    ", "f1", "=", "0", "\n", "", "else", ":", "\n", "                    ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "print", "(", "\"precision: {}, recall: {}, f1: {}\"", ".", "format", "(", "precision", ",", "recall", ",", "f1", ")", ")", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "\n", "# for i in range(1, iter_nums + 1):", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "50", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"\\niteration\"", ",", "i", ")", "\n", "# bootea training", "\n", "self", ".", "bootea", ".", "launch_training_k_epo", "(", "i", ",", "sub_num", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", "\n", "# alinet training", "\n", "self", ".", "alinet", ".", "launch_alinet_training_k_repo", "(", "i", ",", "sub_num", ",", "alinet_steps", ",", "alinet_neighbors1", ",", "alinet_neighbors2", ")", "\n", "\n", "# rsn4ea training", "\n", "if", "self", ".", "args", ".", "model3", "==", "'rsn4ea'", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "self", ".", "model3", ".", "launch_rsn4ea_training_k_repo", "(", "i", ",", "3", "*", "sub_num", ",", "train_data", ")", "# todo", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model3", ".", "launch_rsn4ea_training_k_repo", "(", "i", ",", "1", ",", "train_data", ")", "\n", "\n", "", "", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "if", "self", ".", "args", ".", "ensemble", ":", "\n", "                    ", "flag", "=", "self", ".", "bootea", ".", "valid", "(", "self", ".", "bootea", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "self", ".", "bootea", ".", "flag1", ",", "self", ".", "bootea", ".", "flag2", ",", "self", ".", "bootea", ".", "early_stop", "=", "early_stop", "(", "self", ".", "bootea", ".", "flag1", ",", "\n", "self", ".", "bootea", ".", "flag2", ",", "flag", ")", "\n", "alinet_flag", "=", "self", ".", "alinet", ".", "valid", "(", "self", ".", "alinet", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "flag1", ",", "flag2", ",", "is_stop", "=", "early_stop", "(", "flag1", ",", "flag2", ",", "alinet_flag", ")", "\n", "\n", "model3_flag", "=", "self", ".", "model3", ".", "valid", "(", "self", ".", "model3", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "flag11", ",", "flag22", ",", "is_stop_model3", "=", "early_stop", "(", "flag11", ",", "flag22", ",", "model3_flag", ")", "\n", "\n", "norm", "=", "flag", "+", "alinet_flag", "+", "model3_flag", "\n", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "w3", "=", "flag", "/", "norm", ",", "alinet_flag", "/", "norm", ",", "model3_flag", "/", "norm", "\n", "cycle_flag", "=", "self", ".", "ensemble_valid", "(", "self", ".", "args", ".", "stop_metric", ",", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "w3", "]", ")", "[", "0", "]", "\n", "cycle_flag1", ",", "cycle_flag2", ",", "cycle_is_stop", "=", "early_stop", "(", "cycle_flag1", ",", "cycle_flag2", ",", "cycle_flag", ")", "\n", "if", "cycle_is_stop", "or", "i", "==", "iter_nums", ":", "\n", "                        ", "print", "(", "\"\\n == ensemble training stop == \\n\"", ")", "\n", "", "", "else", ":", "\n", "                    ", "flag", "=", "self", ".", "bootea", ".", "valid", "(", "self", ".", "bootea", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "self", ".", "bootea", ".", "flag1", ",", "self", ".", "bootea", ".", "flag2", ",", "self", ".", "bootea", ".", "early_stop", "=", "early_stop", "(", "self", ".", "bootea", ".", "flag1", ",", "\n", "self", ".", "bootea", ".", "flag2", ",", "flag", ")", "\n", "alinet_flag", "=", "self", ".", "alinet", ".", "valid", "(", "self", ".", "alinet", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "flag1", ",", "flag2", ",", "is_stop", "=", "early_stop", "(", "flag1", ",", "flag2", ",", "alinet_flag", ")", "\n", "\n", "model3_flag", "=", "self", ".", "model3", ".", "valid", "(", "self", ".", "model3", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "flag11", ",", "flag22", ",", "is_stop_model3", "=", "early_stop", "(", "flag11", ",", "flag22", ",", "model3_flag", ")", "\n", "\n", "if", "(", "self", ".", "bootea", ".", "early_stop", "and", "is_stop", "and", "is_stop_model3", ")", "or", "i", "==", "iter_nums", ":", "\n", "                        ", "print", "(", "\"\\n == training stop == \\n\"", ")", "\n", "\n", "", "", "", "if", "i", "*", "sub_num", ">=", "self", ".", "alinet", ".", "args", ".", "start_augment", "*", "self", ".", "alinet", ".", "args", ".", "eval_freq", ":", "\n", "                ", "ref_mat1", "=", "self", ".", "bootea", ".", "eval_ref_sim_mat", "(", ")", "\n", "ref_mat1", "=", "sim_norm", "(", "ref_mat1", ")", "\n", "ref_mat1", "=", "my_mcd_matrix", "(", "ref_mat1", ")", "\n", "min_val1", "=", "np", ".", "min", "(", "ref_mat1", ")", "\n", "max_val1", "=", "np", ".", "max", "(", "ref_mat1", ")", "\n", "avg_val1", "=", "np", ".", "mean", "(", "ref_mat1", ")", "\n", "sim_th1", "=", "min", "(", "self", ".", "bootea", ".", "args", ".", "sim_th", ",", "(", "max_val1", "+", "avg_val1", ")", "/", "2", ")", "\n", "labeled_align", ",", "entities1", ",", "entities2", "=", "bootstrapping_stable_matching", "(", "ref_mat1", ",", "self", ".", "bootea", ".", "ref_ent1", ",", "\n", "self", ".", "bootea", ".", "ref_ent2", ",", "labeled_align", ",", "sim_th1", ",", "self", ".", "bootea", ".", "args", ".", "k", ")", "\n", "bootea_seed", "=", "list", "(", "zip", "(", "entities1", ",", "entities2", ")", ")", "\n", "ref_mat2", "=", "self", ".", "alinet", ".", "eval_ref_sim_mat", "(", ")", "\n", "ref_mat2", "=", "sim_norm", "(", "ref_mat2", ")", "\n", "ref_mat2", "=", "my_mcd_matrix", "(", "ref_mat2", ")", "\n", "min_val2", "=", "np", ".", "min", "(", "ref_mat2", ")", "\n", "max_val2", "=", "np", ".", "max", "(", "ref_mat2", ")", "\n", "avg_val2", "=", "np", ".", "mean", "(", "ref_mat2", ")", "\n", "sim_th2", "=", "min", "(", "self", ".", "alinet", ".", "args", ".", "sim_th", ",", "(", "max_val2", "+", "avg_val2", ")", "/", "2", ")", "\n", "self", ".", "alinet", ".", "labeled_align", ",", "new_sup_ent1", ",", "new_sup_ent2", "=", "bootstrapping_stable_matching", "(", "ref_mat2", ",", "\n", "self", ".", "alinet", ".", "ref_ent1", ",", "self", ".", "alinet", ".", "ref_ent2", ",", "self", ".", "alinet", ".", "labeled_align", ",", "sim_th2", ",", "self", ".", "alinet", ".", "args", ".", "k", ")", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", "\n", "\n", "ref_mat3", "=", "self", ".", "model3", ".", "eval_ref_sim_mat", "(", ")", "\n", "ref_mat3", "=", "sim_norm", "(", "ref_mat3", ")", "\n", "ref_mat3", "=", "my_mcd_matrix", "(", "ref_mat3", ")", "\n", "min_val3", "=", "np", ".", "min", "(", "ref_mat3", ")", "\n", "max_val3", "=", "np", ".", "max", "(", "ref_mat3", ")", "\n", "avg_val3", "=", "np", ".", "mean", "(", "ref_mat3", ")", "\n", "sim_th3", "=", "min", "(", "self", ".", "model3", ".", "args", ".", "sim_th", ",", "(", "max_val3", "+", "avg_val3", ")", "/", "2", ")", "\n", "self", ".", "model3", ".", "labeled_align", ",", "model3_entities1", ",", "model3_entities2", "=", "bootstrapping_stable_matching", "(", "ref_mat3", ",", "\n", "self", ".", "model3", ".", "ref_ent1", ",", "\n", "self", ".", "model3", ".", "ref_ent2", ",", "\n", "self", ".", "model3", ".", "labeled_align", ",", "\n", "sim_th3", ",", "\n", "self", ".", "model3", ".", "args", ".", "k", ")", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "[", "(", "model3_entities1", "[", "i", "]", ",", "model3_entities2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "model3_entities1", ")", ")", "]", "\n", "\n", "if", "len", "(", "entities1", ")", ">", "0", ":", "\n", "                    ", "p1", ",", "r1", ",", "f1", "=", "check_correctness", "(", "entities1", ",", "entities2", ",", "context", "=", "'seed of AlignE'", ",", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "", "if", "len", "(", "new_sup_ent1", ")", ">", "0", ":", "\n", "                    ", "p2", ",", "r2", ",", "f2", "=", "check_correctness", "(", "new_sup_ent1", ",", "new_sup_ent2", ",", "context", "=", "'seed of AliNet'", ",", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "", "if", "len", "(", "model3_entities1", ")", ">", "0", ":", "\n", "                    ", "p3", ",", "r3", ",", "f3", "=", "check_correctness", "(", "model3_entities1", ",", "model3_entities2", ",", "context", "=", "'seed of model3'", ",", "\n", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "\n", "", "if", "len", "(", "entities1", ")", ">", "0", "and", "len", "(", "new_sup_ent1", ")", ">", "0", "and", "len", "(", "model3_entities1", ")", ">", "0", ":", "\n", "                    ", "seed_performance", "[", "'boot1'", "]", ".", "append", "(", "(", "p1", ",", "r1", ",", "f1", ")", ")", "\n", "seed_performance", "[", "'alinet1'", "]", ".", "append", "(", "(", "p2", ",", "r2", ",", "f2", ")", ")", "\n", "seed_performance", "[", "'model3_1'", "]", ".", "append", "(", "(", "p3", ",", "r3", ",", "f3", ")", ")", "\n", "\n", "", "a", "=", "set", "(", "bootea_seed", ")", "&", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", "&", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", "\n", "b", "=", "set", "(", "bootea_seed", ")", "|", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", "|", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", "\n", "jcard", "=", "len", "(", "a", ")", "/", "len", "(", "b", ")", "\n", "print", "(", "'jcard similarity of new seed of 3 models: '", "+", "str", "(", "jcard", ")", ")", "\n", "c", "=", "(", "set", "(", "bootea_seed", ")", "&", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", ")", "|", "(", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", "&", "\n", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "|", "(", "\n", "set", "(", "bootea_seed", ")", "&", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "\n", "correct1", "=", "0", "\n", "for", "ii", "in", "a", ":", "\n", "                    ", "if", "ground_dict", ".", "get", "(", "ii", "[", "0", "]", ")", "==", "ii", "[", "1", "]", ":", "\n", "                        ", "correct1", "+=", "1", "\n", "", "", "if", "len", "(", "a", ")", "==", "0", ":", "\n", "                    ", "print", "(", "'joint set has correct proportion: '", "+", "str", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'joint set has correct proportion: '", "+", "str", "(", "correct1", "/", "len", "(", "a", ")", ")", ")", "\n", "", "correct2", "=", "0", "\n", "for", "ii", "in", "b", ":", "\n", "                    ", "if", "ground_dict", ".", "get", "(", "ii", "[", "0", "]", ")", "==", "ii", "[", "1", "]", ":", "\n", "                        ", "correct2", "+=", "1", "\n", "", "", "print", "(", "'union set has correct proportion: '", "+", "str", "(", "correct2", "/", "len", "(", "b", ")", ")", ")", "\n", "jaccard_list", ".", "append", "(", "(", "jcard", ",", "correct1", ",", "correct2", ")", ")", "\n", "\n", "if", "i", "*", "sub_num", "%", "2", "==", "0", "and", "self", ".", "args", ".", "exchange", ":", "\n", "                    ", "if", "i", "*", "sub_num", "<", "self", ".", "args", ".", "start_valid", ":", "\n", "                        ", "flag", "=", "self", ".", "bootea", ".", "valid", "(", "self", ".", "bootea", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "alinet_flag", "=", "self", ".", "alinet", ".", "valid", "(", "self", ".", "alinet", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "model3_flag", "=", "self", ".", "model3", ".", "valid", "(", "self", ".", "model3", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "norm", "=", "flag", "+", "alinet_flag", "+", "model3_flag", "\n", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "w3", "=", "flag", "/", "norm", ",", "alinet_flag", "/", "norm", ",", "model3_flag", "/", "norm", "\n", "\n", "# order arrangement", "\n", "", "jac12", "=", "len", "(", "set", "(", "bootea_seed", ")", "&", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", ")", "/", "len", "(", "set", "(", "bootea_seed", ")", "|", "\n", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", ")", "\n", "jac23", "=", "len", "(", "set", "(", "self", ".", "alinet", ".", "new_sup_links", ")", "&", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "/", "len", "(", "set", "(", "\n", "self", ".", "alinet", ".", "new_sup_links", ")", "|", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "\n", "jac31", "=", "len", "(", "set", "(", "bootea_seed", ")", "&", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "/", "len", "(", "set", "(", "bootea_seed", ")", "|", "\n", "set", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "\n", "order123", "=", "(", "jac12", "+", "math", ".", "exp", "(", "self", ".", "w1", "-", "self", ".", "w2", ")", ")", "+", "(", "jac23", "+", "math", ".", "exp", "(", "self", ".", "w2", "-", "self", ".", "w3", ")", ")", "+", "(", "jac31", "+", "math", ".", "exp", "(", "self", ".", "w3", "-", "self", ".", "w1", ")", ")", "\n", "order132", "=", "(", "jac31", "+", "math", ".", "exp", "(", "self", ".", "w1", "-", "self", ".", "w3", ")", ")", "+", "(", "jac23", "+", "math", ".", "exp", "(", "self", ".", "w3", "-", "self", ".", "w2", ")", ")", "+", "(", "jac12", "+", "math", ".", "exp", "(", "self", ".", "w2", "-", "self", ".", "w1", ")", ")", "\n", "if", "order123", ">", "order132", ":", "\n", "                        ", "order", "=", "order123", "\n", "print", "(", "'======= order in iteration {:.3f}% is 1->2->3 ======'", ".", "format", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "                        ", "order", "=", "order132", "\n", "print", "(", "'======= order in iteration {:.3f}% is 1->3->2 ======'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "", "label_dict1", ",", "label_dict2", ",", "label_dict3", "=", "dict", "(", "labeled_align", ")", ",", "dict", "(", "self", ".", "alinet", ".", "labeled_align", ")", ",", "dict", "(", "self", ".", "model3", ".", "labeled_align", ")", "\n", "# label_dict1_inv, label_dict2_inv, label_dict3_inv = inverse_dict(label_dict1), \\", "\n", "#                                                 inverse_dict(label_dict2), inverse_dict(label_dict3)", "\n", "\n", "\n", "if", "self", ".", "args", ".", "exchange", ":", "\n", "                    ", "if", "order", "==", "order123", ":", "\n", "# orer 123", "\n", "                        ", "bootea_seed1", ",", "bootea_seed2", "=", "model3_entities1", ",", "model3_entities2", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "list", "(", "zip", "(", "entities1", ",", "entities2", ")", ")", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "list", "(", "zip", "(", "new_sup_ent1", ",", "new_sup_ent2", ")", ")", "\n", "", "else", ":", "\n", "# order op1: 132", "\n", "                        ", "bootea_seed1", ",", "bootea_seed2", "=", "new_sup_ent1", ",", "new_sup_ent2", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "list", "(", "zip", "(", "entities1", ",", "entities2", ")", ")", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "list", "(", "zip", "(", "model3_entities1", ",", "model3_entities2", ")", ")", "\n", "", "", "elif", "self", ".", "args", ".", "conflict_resolve", ":", "\n", "                    ", "head2tails_map", ",", "tail2heads_map", ",", "conflict12", ",", "conflict21", "=", "check_conflict", "(", "labeled_align", ",", "\n", "self", ".", "alinet", ".", "labeled_align", ")", "\n", "aa", "=", "set", "(", "labeled_align", ")", "&", "set", "(", "self", ".", "alinet", ".", "labeled_align", ")", "\n", "diff2", "=", "set", "(", "labeled_align", ")", "-", "set", "(", "aa", ")", "\n", "diff2", "=", "conflict_resolution", "(", "label_dict1", ",", "label_dict2", ",", "label_dict3", ",", "ref_mat1", ",", "ref_mat2", ",", "\n", "ref_mat3", ",", "diff2", ",", "conflict12", ",", "conflict21", ")", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "pair", "[", "0", "]", "]", ",", "self", ".", "ref_ent2", "[", "pair", "[", "1", "]", "]", ")", "for", "pair", "in", "(", "aa", "|", "diff2", ")", "]", "\n", "\n", "head2tails_map", ",", "tail2heads_map", ",", "conflict23", ",", "conflict32", "=", "check_conflict", "(", "self", ".", "alinet", ".", "labeled_align", ",", "\n", "self", ".", "model3", ".", "labeled_align", ")", "\n", "aa", "=", "set", "(", "self", ".", "alinet", ".", "labeled_align", ")", "&", "set", "(", "self", ".", "model3", ".", "labeled_align", ")", "\n", "diff3", "=", "set", "(", "self", ".", "alinet", ".", "labeled_align", ")", "-", "set", "(", "aa", ")", "\n", "diff3", "=", "conflict_resolution", "(", "label_dict2", ",", "label_dict3", ",", "label_dict1", ",", "ref_mat2", ",", "ref_mat3", ",", "\n", "ref_mat1", ",", "diff3", ",", "conflict23", ",", "conflict32", ")", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "pair", "[", "0", "]", "]", ",", "self", ".", "ref_ent2", "[", "pair", "[", "1", "]", "]", ")", "for", "pair", "in", "\n", "(", "aa", "|", "diff3", ")", "]", "\n", "\n", "head2tails_map", ",", "tail2heads_map", ",", "conflict31", ",", "conflict13", "=", "check_conflict", "(", "self", ".", "model3", ".", "labeled_align", ",", "\n", "labeled_align", ")", "\n", "aa", "=", "set", "(", "self", ".", "model3", ".", "labeled_align", ")", "&", "set", "(", "labeled_align", ")", "\n", "diff1", "=", "set", "(", "self", ".", "model3", ".", "labeled_align", ")", "-", "set", "(", "aa", ")", "\n", "diff1", "=", "conflict_resolution", "(", "label_dict3", ",", "label_dict1", ",", "label_dict2", ",", "ref_mat3", ",", "ref_mat1", ",", "\n", "ref_mat2", ",", "diff1", ",", "conflict31", ",", "conflict13", ")", "\n", "bootea_seed1", ",", "bootea_seed2", "=", "zip", "(", "*", "[", "(", "self", ".", "ref_ent1", "[", "pair", "[", "0", "]", "]", ",", "self", ".", "ref_ent2", "[", "pair", "[", "1", "]", "]", ")", "for", "pair", "in", "\n", "(", "aa", "|", "diff1", ")", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "rematching", ":", "\n", "# 1-2", "\n", "                    ", "agreement_align12", "=", "labeled_align", "&", "self", ".", "alinet", ".", "labeled_align", "\n", "left_ents1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align12", "]", ")", "\n", "left_ents2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align12", "]", ")", "\n", "if", "self", ".", "args", ".", "ensemble", ":", "\n", "                        ", "ensemble_sim_mat12", "=", "self", ".", "sim_norm", "(", "ref_mat1", "+", "ref_mat2", ")", "\n", "", "else", ":", "\n", "                        ", "alpha", "=", "flag", "/", "(", "flag", "+", "alinet_flag", ")", "\n", "ensemble_sim_mat12", "=", "self", ".", "sim_norm", "(", "alpha", "*", "ref_mat1", "+", "(", "1", "-", "alpha", ")", "*", "ref_mat2", ")", "\n", "", "print", "(", "\"============= re stable alignment of model 1-2 ============= \"", ")", "\n", "re_matching12", "=", "re_stable_matching", "(", "left_ents1", ",", "left_ents2", ",", "ensemble_sim_mat12", ",", "(", "sim_th1", "+", "sim_th2", ")", "/", "2", "\n", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "new_alignment12", "=", "agreement_align12", "|", "re_matching12", "\n", "labeled_align", "=", "add_new_alignment", "(", "labeled_align", ",", "new_alignment12", ",", "\n", "ensemble_sim_mat12", ")", "\n", "check_new_alignment", "(", "labeled_align", ",", "context", "=", "'final new alignment of 1-2'", ")", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "labeled_align", "]", "\n", "# 2-3", "\n", "agreement_align23", "=", "self", ".", "alinet", ".", "labeled_align", "&", "self", ".", "model3", ".", "labeled_align", "\n", "left_ents1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align23", "]", ")", "\n", "left_ents2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align23", "]", ")", "\n", "if", "self", ".", "args", ".", "ensemble", ":", "\n", "                        ", "ensemble_sim_mat23", "=", "sim_norm", "(", "ref_mat2", "+", "ref_mat3", ")", "\n", "", "else", ":", "\n", "                        ", "alpha", "=", "alinet_flag", "/", "(", "alinet_flag", "+", "model3_flag", ")", "\n", "ensemble_sim_mat23", "=", "sim_norm", "(", "alpha", "*", "ref_mat2", "+", "(", "1", "-", "alpha", ")", "*", "ref_mat3", ")", "\n", "", "print", "(", "\"============= re stable alignment of model 2-3 ============= \"", ")", "\n", "re_matching23", "=", "re_stable_matching", "(", "left_ents1", ",", "left_ents2", ",", "ensemble_sim_mat23", ",", "\n", "(", "sim_th2", "+", "sim_th3", ")", "/", "2", "\n", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "new_alignment23", "=", "agreement_align23", "|", "re_matching23", "\n", "self", ".", "alinet", ".", "labeled_align", "=", "add_new_alignment", "(", "self", ".", "alinet", ".", "labeled_align", ",", "new_alignment23", ",", "\n", "ensemble_sim_mat23", ")", "\n", "check_new_alignment", "(", "self", ".", "alinet", ".", "labeled_align", ",", "context", "=", "'final new alignment of 2-3'", ")", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "\n", "self", ".", "alinet", ".", "labeled_align", "]", "\n", "# 3-1", "\n", "agreement_align31", "=", "self", ".", "model3", ".", "labeled_align", "&", "labeled_align", "\n", "left_ents1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align31", "]", ")", "\n", "left_ents2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align31", "]", ")", "\n", "if", "self", ".", "args", ".", "ensemble", ":", "\n", "                        ", "ensemble_sim_mat31", "=", "sim_norm", "(", "ref_mat3", "+", "ref_mat1", ")", "\n", "", "else", ":", "\n", "                        ", "alpha", "=", "model3_flag", "/", "(", "model3_flag", "+", "flag", ")", "\n", "ensemble_sim_mat31", "=", "sim_norm", "(", "alpha", "*", "ref_mat3", "+", "(", "1", "-", "alpha", ")", "*", "ref_mat1", ")", "\n", "", "print", "(", "\"============= re stable alignment of model 3-1 ============= \"", ")", "\n", "re_matching31", "=", "re_stable_matching", "(", "left_ents1", ",", "left_ents2", ",", "ensemble_sim_mat31", ",", "\n", "(", "sim_th3", "+", "sim_th1", ")", "/", "2", "\n", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "new_alignment31", "=", "agreement_align31", "|", "re_matching31", "\n", "self", ".", "model3", ".", "labeled_align", "=", "add_new_alignment", "(", "self", ".", "model3", ".", "labeled_align", ",", "new_alignment31", ",", "ensemble_sim_mat31", ")", "\n", "check_new_alignment", "(", "self", ".", "model3", ".", "labeled_align", ",", "context", "=", "'final new alignment of 3-1'", ")", "\n", "bootea_seed1", ",", "bootea_seed2", "=", "zip", "(", "*", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "self", ".", "model3", ".", "labeled_align", "]", ")", "\n", "", "elif", "self", ".", "args", ".", "conflict_rematch", ":", "\n", "# 1-2", "\n", "                    ", "head2tails_map", ",", "tail2heads_map", ",", "conflict12", ",", "conflict21", "=", "check_conflict", "(", "labeled_align", ",", "\n", "self", ".", "alinet", ".", "labeled_align", ")", "\n", "conflict12", ",", "labeled_align", "=", "update_labeled_align", "(", "conflict12", ",", "labeled_align", ",", "label_dict1", ",", "label_dict2", ",", "ref_mat1", ")", "\n", "left_ents12", "=", "set", "(", "conflict12", ".", "keys", "(", ")", ")", "\n", "right_ents12", "=", "set", "(", "self", ".", "ref_ent2", ")", "-", "set", "(", "[", "i", "[", "1", "]", "for", "i", "in", "list", "(", "labeled_align", ")", "]", ")", "\n", "ensemble_sim_mat12_whole", "=", "sim_norm", "(", "ref_mat1", "+", "ref_mat2", ")", "\n", "print", "(", "\"============= rematching of conflict of model 1-2 ============= \"", ")", "\n", "new_alignment12", "=", "re_stable_matching", "(", "left_ents12", ",", "right_ents12", ",", "ensemble_sim_mat12_whole", ",", "(", "sim_th1", "+", "sim_th2", ")", "/", "2", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "labeled_align", "=", "add_new_alignment", "(", "labeled_align", ",", "new_alignment12", ",", "\n", "ensemble_sim_mat12_whole", ")", "\n", "check_new_alignment", "(", "labeled_align", ",", "context", "=", "'final new alignment of 1-2'", ")", "\n", "self", ".", "alinet", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "\n", "labeled_align", "]", "\n", "# 2-3", "\n", "head2tails_map", ",", "tail2heads_map", ",", "conflict23", ",", "conflict32", "=", "check_conflict", "(", "self", ".", "alinet", ".", "labeled_align", ",", "\n", "self", ".", "model3", ".", "labeled_align", ")", "\n", "conflict23", ",", "self", ".", "alinet", ".", "labeled_align", "=", "update_labeled_align", "(", "conflict23", ",", "self", ".", "alinet", ".", "labeled_align", ",", "\n", "label_dict2", ",", "label_dict3", ",", "ref_mat2", ")", "\n", "left_ents23", "=", "set", "(", "conflict23", ".", "keys", "(", ")", ")", "\n", "right_ents23", "=", "set", "(", "self", ".", "ref_ent2", ")", "-", "set", "(", "[", "i", "[", "1", "]", "for", "i", "in", "list", "(", "self", ".", "alinet", ".", "labeled_align", ")", "]", ")", "\n", "ensemble_sim_mat23_whole", "=", "sim_norm", "(", "ref_mat2", "+", "ref_mat3", ")", "\n", "print", "(", "\"============= rematching of conflict of model 2-3 ============= \"", ")", "\n", "new_alignment23", "=", "re_stable_matching", "(", "left_ents23", ",", "right_ents23", ",", "ensemble_sim_mat23_whole", ",", "\n", "(", "sim_th2", "+", "sim_th3", ")", "/", "2", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "alinet", ".", "labeled_align", "=", "add_new_alignment", "(", "self", ".", "alinet", ".", "labeled_align", ",", "new_alignment23", ",", "\n", "ensemble_sim_mat23_whole", ")", "\n", "check_new_alignment", "(", "self", ".", "alinet", ".", "labeled_align", ",", "context", "=", "'final new alignment of 2-3'", ")", "\n", "self", ".", "model3", ".", "new_sup_links", "=", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "\n", "self", ".", "alinet", ".", "labeled_align", "]", "\n", "# 3-1", "\n", "head2tails_map", ",", "tail2heads_map", ",", "conflict31", ",", "conflict13", "=", "check_conflict", "(", "self", ".", "model3", ".", "labeled_align", ",", "\n", "labeled_align", ")", "\n", "conflict31", ",", "self", ".", "model3", ".", "labeled_align", "=", "update_labeled_align", "(", "conflict31", ",", "self", ".", "model3", ".", "labeled_align", ",", "\n", "label_dict3", ",", "label_dict1", ",", "ref_mat3", ")", "\n", "left_ents31", "=", "set", "(", "conflict31", ".", "keys", "(", ")", ")", "\n", "right_ents31", "=", "set", "(", "self", ".", "ref_ent2", ")", "-", "set", "(", "[", "i", "[", "1", "]", "for", "i", "in", "list", "(", "self", ".", "model3", ".", "labeled_align", ")", "]", ")", "\n", "ensemble_sim_mat31_whole", "=", "sim_norm", "(", "ref_mat3", "+", "ref_mat1", ")", "\n", "print", "(", "\"============= rematching of conflict of model 3-1 ============= \"", ")", "\n", "new_alignment31", "=", "re_stable_matching", "(", "left_ents31", ",", "right_ents31", ",", "ensemble_sim_mat31_whole", ",", "\n", "(", "sim_th3", "+", "sim_th1", ")", "/", "2", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "model3", ".", "labeled_align", "=", "add_new_alignment", "(", "self", ".", "model3", ".", "labeled_align", ",", "new_alignment31", ",", "\n", "ensemble_sim_mat31_whole", ")", "\n", "check_new_alignment", "(", "self", ".", "model3", ".", "labeled_align", ",", "context", "=", "'final new alignment of 3-1'", ")", "\n", "bootea_seed1", ",", "bootea_seed2", "=", "zip", "(", "*", "[", "(", "self", ".", "ref_ent1", "[", "i", "]", ",", "self", ".", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "self", ".", "model3", ".", "labeled_align", "]", ")", "\n", "\n", "", "p1", ",", "r1", ",", "f1", "=", "check_correctness", "(", "bootea_seed1", ",", "bootea_seed2", ",", "context", "=", "'seed of AlignE'", ",", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "p2", ",", "r2", ",", "f2", "=", "check_correctness", "(", "[", "i", "[", "0", "]", "for", "i", "in", "self", ".", "alinet", ".", "new_sup_links", "]", ",", "[", "i", "[", "1", "]", "for", "i", "in", "self", ".", "alinet", ".", "new_sup_links", "]", ",", "\n", "context", "=", "'seed of AliNet'", ",", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "p3", ",", "r3", ",", "f3", "=", "check_correctness", "(", "[", "i", "[", "0", "]", "for", "i", "in", "self", ".", "model3", ".", "new_sup_links", "]", ",", "[", "i", "[", "1", "]", "for", "i", "in", "self", ".", "model3", ".", "new_sup_links", "]", ",", "\n", "context", "=", "'seed of model3'", ",", "all_pos", "=", "len", "(", "self", ".", "ref_ent1", ")", ")", "\n", "seed_performance", "[", "'boot2'", "]", ".", "append", "(", "(", "p1", ",", "r1", ",", "f1", ")", ")", "\n", "seed_performance", "[", "'alinet2'", "]", ".", "append", "(", "(", "p2", ",", "r2", ",", "f2", ")", ")", "\n", "seed_performance", "[", "'model3_2'", "]", ".", "append", "(", "(", "p3", ",", "r3", ",", "f3", ")", ")", "\n", "\n", "del", "ref_mat1", "\n", "del", "ref_mat2", "\n", "del", "ref_mat3", "\n", "gc", ".", "collect", "(", ")", "\n", "# semi-supervised training of 3 models", "\n", "self", ".", "bootea", ".", "train_alignment", "(", "self", ".", "kgs", ".", "kg1", ",", "self", ".", "kgs", ".", "kg2", ",", "bootea_seed1", ",", "bootea_seed2", ",", "1", ")", "\n", "steps", "=", "math", ".", "ceil", "(", "(", "len", "(", "self", ".", "alinet", ".", "new_sup_links", ")", "/", "self", ".", "alinet", ".", "args", ".", "batch_size", ")", ")", "\n", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "alinet", ".", "semi_loss", ",", "\"optimizer\"", ":", "self", ".", "alinet", ".", "semi_optimizer", "}", "\n", "for", "s", "in", "range", "(", "steps", ")", ":", "\n", "                    ", "feed_dict", "=", "{", "self", ".", "alinet", ".", "new_pos_links", ":", "self", ".", "alinet", ".", "new_sup_links", "[", "s", "*", "self", ".", "alinet", ".", "args", ".", "batch_size", ":", "\n", "min", "(", "(", "s", "+", "1", ")", "*", "self", ".", "alinet", ".", "args", ".", "batch_size", ",", "len", "(", "self", ".", "alinet", ".", "new_sup_links", ")", ")", "]", "}", "\n", "self", ".", "alinet", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "if", "self", ".", "args", ".", "model3", "==", "'rdgcn'", ":", "\n", "                    ", "steps", "=", "math", ".", "ceil", "(", "(", "len", "(", "self", ".", "model3", ".", "new_sup_links", ")", "/", "self", ".", "model3", ".", "args", ".", "batch_size", ")", ")", "\n", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "model3", ".", "semi_loss", ",", "\"optimizer\"", ":", "self", ".", "model3", ".", "semi_optimizer", "}", "\n", "for", "s", "in", "range", "(", "steps", ")", ":", "\n", "                        ", "feed_dict", "=", "{", "self", ".", "model3", ".", "new_pos_links", ":", "self", ".", "model3", ".", "new_sup_links", "[", "s", "*", "self", ".", "model3", ".", "args", ".", "batch_size", ":", "\n", "min", "(", "(", "s", "+", "1", ")", "*", "self", ".", "model3", ".", "args", ".", "batch_size", ",", "len", "(", "self", ".", "model3", ".", "new_sup_links", ")", ")", "]", "}", "\n", "self", ".", "model3", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "", "if", "self", ".", "args", ".", "model3", "==", "'rsn4ea'", ":", "\n", "                    ", "self", ".", "model3", ".", "semi_train", "(", ")", "\n", "", "if", "self", ".", "args", ".", "model3", "==", "'attre'", ":", "\n", "                    ", "self", ".", "model3", ".", "semi_train", "(", ")", "\n", "\n", "# generate neighbours of 3 models", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "bootea", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "bootea", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "bootea", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "bootea", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "bootea", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "bootea", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "bootea", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"generating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "if", "alinet_neighbors1", "is", "not", "None", ":", "\n", "                ", "del", "alinet_neighbors1", ",", "alinet_neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "alinet_neighbors1", ",", "alinet_neighbors2", "=", "self", ".", "alinet", ".", "find_neighbors", "(", ")", "\n", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.galeshapley": [[38, 94], ["list", "dict", "dict", "range", "suitor_pref_dict.keys", "list", "len", "len", "dict.values", "dict.get", "set", "set", "reviewer_pref_dict[].index", "reviewer_pref_dict[].index", "suitor_pref_dict[].remove", "suitor_pref_dict.keys", "dict.keys"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.LSHash.index", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["def", "galeshapley", "(", "suitor_pref_dict", ",", "reviewer_pref_dict", ",", "max_iteration", ")", ":", "\n", "    ", "\"\"\" The Gale-Shapley algorithm. This is known to provide a unique, stable\n    suitor-optimal matching. The algorithm is as follows:\n\n    (1) Assign all suitors and reviewers to be unmatched.\n\n    (2) Take any unmatched suitor, s, and their most preferred reviewer, r.\n            - If r is unmatched, match s to r.\n            - Else, if r is matched, consider their current partner, r_partner.\n                - If r prefers s to r_partner, unmatch r_partner from r and\n                  match s to r.\n                - Else, leave s unmatched and remove r from their preference\n                  list.\n    (3) Go to (2) until all suitors are matched, then end.\n\n    Parameters\n    ----------\n    suitor_pref_dict : dict\n        A dictionary with suitors as keys and their respective preference lists\n        as values\n    reviewer_pref_dict : dict\n        A dictionary with reviewers as keys and their respective preference\n        lists as values\n    max_iteration : int\n        An integer as the maximum iterations\n\n    Returns\n    -------\n    matching : dict\n        The suitor-optimal (stable) matching with suitors as keys and the\n        reviewer they are matched with as values\n    \"\"\"", "\n", "suitors", "=", "list", "(", "suitor_pref_dict", ".", "keys", "(", ")", ")", "\n", "matching", "=", "dict", "(", ")", "\n", "rev_matching", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_iteration", ")", ":", "\n", "        ", "if", "len", "(", "suitors", ")", "<=", "0", ":", "\n", "            ", "break", "\n", "", "for", "s", "in", "suitors", ":", "\n", "            ", "if", "len", "(", "suitor_pref_dict", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "r", "=", "suitor_pref_dict", "[", "s", "]", "[", "0", "]", "\n", "if", "r", "not", "in", "matching", ".", "values", "(", ")", ":", "\n", "                ", "matching", "[", "s", "]", "=", "r", "\n", "rev_matching", "[", "r", "]", "=", "s", "\n", "", "else", ":", "\n", "                ", "r_partner", "=", "rev_matching", ".", "get", "(", "r", ")", "\n", "if", "reviewer_pref_dict", "[", "r", "]", ".", "index", "(", "s", ")", "<", "reviewer_pref_dict", "[", "r", "]", ".", "index", "(", "r_partner", ")", ":", "\n", "                    ", "del", "matching", "[", "r_partner", "]", "\n", "matching", "[", "s", "]", "=", "r", "\n", "rev_matching", "[", "r", "]", "=", "s", "\n", "", "else", ":", "\n", "                    ", "suitor_pref_dict", "[", "s", "]", ".", "remove", "(", "r", ")", "\n", "", "", "", "suitors", "=", "list", "(", "set", "(", "suitor_pref_dict", ".", "keys", "(", ")", ")", "-", "set", "(", "matching", ".", "keys", "(", ")", ")", ")", "\n", "", "return", "matching", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.exchange_xy": [[96, 98], ["set"], "function", ["None"], ["", "def", "exchange_xy", "(", "xy", ")", ":", "\n", "    ", "return", "set", "(", "[", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "xy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.stable_matching": [[100, 174], ["time.time", "openea.modules.bootstrapping.alignment_finder.filter_sim_mat", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "dict", "dict", "dict", "dict", "dict.items", "dict.items", "print", "time.time", "cycle.galeshapley", "set", "galeshapley.items", "print", "dict", "dict", "len", "cycle.exchange_xy", "len", "dict.get", "i_candidate.get.append", "dict.get", "np.array.append", "dict.get", "j_candidate.get.append", "dict.get", "np.array.append", "numpy.array", "numpy.argsort", "[].tolist", "numpy.array", "numpy.argsort", "[].tolist", "len", "len", "int", "int", "set.add", "time.time", "list", "list", "list", "list", "dict.get", "str", "dict.get", "str", "len", "str", "str", "time.time", "i.split", "j.split", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.filter_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.galeshapley", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.exchange_xy"], ["", "def", "stable_matching", "(", "sim_mat", ",", "sim_th", ",", "k", ",", "cut", "=", "100", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "kg1_candidates", ",", "kg2_candidates", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "potential_aligned_pairs", "=", "filter_sim_mat", "(", "sim_mat", ",", "sim_th", ")", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim threshold\"", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "potential_aligned_pairs", "\n", "", "nearest_k_neighbors1", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "nearest_k_neighbors2", "=", "search_nearest_k", "(", "sim_mat", ".", "T", ",", "k", ")", "\n", "nearest_k_neighbors", "=", "nearest_k_neighbors1", "|", "exchange_xy", "(", "nearest_k_neighbors2", ")", "\n", "potential_aligned_pairs", "&=", "nearest_k_neighbors", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim and nearest k\"", ")", "\n", "\n", "i_candidate", "=", "dict", "(", ")", "\n", "i_candidate_sim", "=", "dict", "(", ")", "\n", "j_candidate", "=", "dict", "(", ")", "\n", "j_candidate_sim", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "j", "in", "potential_aligned_pairs", ":", "\n", "        ", "i_candidate_list", "=", "i_candidate", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_list", ".", "append", "(", "j", ")", "\n", "i_candidate", "[", "i", "]", "=", "i_candidate_list", "\n", "\n", "i_candidate_sim_list", "=", "i_candidate_sim", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "i", ",", "j", "]", ")", "\n", "i_candidate_sim", "[", "i", "]", "=", "i_candidate_sim_list", "\n", "\n", "j_candidate_list", "=", "j_candidate", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_list", ".", "append", "(", "i", ")", "\n", "j_candidate", "[", "j", "]", "=", "j_candidate_list", "\n", "\n", "j_candidate_sim_list", "=", "j_candidate_sim", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "i", ",", "j", "]", ")", "\n", "j_candidate_sim", "[", "j", "]", "=", "j_candidate_sim_list", "\n", "\n", "", "prefix1", "=", "\"x_\"", "\n", "prefix2", "=", "\"y_\"", "\n", "\n", "for", "i", ",", "i_candidate_list", "in", "i_candidate", ".", "items", "(", ")", ":", "\n", "        ", "i_candidate_sim_list", "=", "np", ".", "array", "(", "i_candidate_sim", ".", "get", "(", "i", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "i_candidate_sim_list", ")", "\n", "i_sorted_candidate_list", "=", "np", ".", "array", "(", "i_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "x_i", "=", "prefix1", "+", "str", "(", "i", ")", "\n", "kg1_candidates", "[", "x_i", "]", "=", "[", "prefix2", "+", "str", "(", "y", ")", "for", "y", "in", "i_sorted_candidate_list", "]", "\n", "", "for", "j", ",", "j_candidate_list", "in", "j_candidate", ".", "items", "(", ")", ":", "\n", "        ", "j_candidate_sim_list", "=", "np", ".", "array", "(", "j_candidate_sim", ".", "get", "(", "j", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "j_candidate_sim_list", ")", "\n", "j_sorted_candidate_list", "=", "np", ".", "array", "(", "j_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "y_j", "=", "prefix2", "+", "str", "(", "j", ")", "\n", "kg2_candidates", "[", "y_j", "]", "=", "[", "prefix1", "+", "str", "(", "x", ")", "for", "x", "in", "j_sorted_candidate_list", "]", "\n", "\n", "", "print", "(", "\"generating candidate lists costs time {:.1f} s \"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "len", "(", "kg1_candidates", ")", ",", "\n", "len", "(", "kg2_candidates", ")", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "matching", "=", "galeshapley", "(", "kg1_candidates", ",", "kg2_candidates", ",", "cut", ")", "\n", "new_alignment", "=", "set", "(", ")", "\n", "n", "=", "0", "\n", "for", "i", ",", "j", "in", "matching", ".", "items", "(", ")", ":", "\n", "        ", "x", "=", "int", "(", "i", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "y", "=", "int", "(", "j", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "new_alignment", ".", "add", "(", "(", "x", ",", "y", ")", ")", "\n", "if", "x", "==", "y", ":", "\n", "            ", "n", "+=", "1", "\n", "", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"stable matching = {}, precision = {:.3f}%, time = {:.3f} s \"", ".", "format", "(", "len", "(", "matching", ")", ",", "\n", "n", "/", "len", "(", "matching", ")", "*", "100", ",", "cost", ")", ")", "\n", "return", "new_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.re_stable_matching": [[176, 261], ["time.time", "openea.modules.bootstrapping.alignment_finder.filter_sim_mat", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "set", "print", "dict", "dict", "dict", "dict", "dict.items", "dict.items", "print", "time.time", "cycle.galeshapley", "dict", "dict", "len", "set", "cycle.exchange_xy", "len", "set", "len", "dict.get", "i_candidate.get.append", "dict.get", "np.array.append", "dict.get", "j_candidate.get.append", "dict.get", "np.array.append", "numpy.array", "numpy.argsort", "[].tolist", "numpy.array", "numpy.argsort", "[].tolist", "len", "len", "len", "print", "set", "set", "galeshapley.items", "print", "set.add", "list", "list", "list", "list", "dict.get", "str", "dict.get", "str", "int", "int", "set.add", "time.time", "str", "str", "time.time", "len", "numpy.array", "numpy.array", "time.time", "i.split", "j.split", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.filter_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.galeshapley", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.exchange_xy", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "re_stable_matching", "(", "left_ents1", ",", "left_ents2", ",", "sim_mat", ",", "sim_th", ",", "k", ",", "cut", "=", "100", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "\n", "kg1_candidates", ",", "kg2_candidates", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "\n", "potential_aligned_pairs", "=", "filter_sim_mat", "(", "sim_mat", ",", "sim_th", ")", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "set", "(", ")", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim threshold\"", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "potential_aligned_pairs", "\n", "", "nearest_k_neighbors1", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "nearest_k_neighbors2", "=", "search_nearest_k", "(", "sim_mat", ".", "T", ",", "k", ")", "\n", "nearest_k_neighbors", "=", "nearest_k_neighbors1", "|", "exchange_xy", "(", "nearest_k_neighbors2", ")", "\n", "potential_aligned_pairs", "&=", "nearest_k_neighbors", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "set", "(", ")", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim and nearest k\"", ")", "\n", "\n", "left_aligned_pairs", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "potential_aligned_pairs", ":", "\n", "        ", "if", "i", "in", "left_ents1", "and", "j", "in", "left_ents2", ":", "\n", "            ", "left_aligned_pairs", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "print", "(", "\"left entities for re-matching:\"", ",", "len", "(", "left_aligned_pairs", ")", ")", "\n", "potential_aligned_pairs", "=", "left_aligned_pairs", "\n", "\n", "i_candidate", "=", "dict", "(", ")", "\n", "i_candidate_sim", "=", "dict", "(", ")", "\n", "j_candidate", "=", "dict", "(", ")", "\n", "j_candidate_sim", "=", "dict", "(", ")", "\n", "\n", "for", "i", ",", "j", "in", "potential_aligned_pairs", ":", "\n", "        ", "i_candidate_list", "=", "i_candidate", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_list", ".", "append", "(", "j", ")", "\n", "i_candidate", "[", "i", "]", "=", "i_candidate_list", "\n", "\n", "i_candidate_sim_list", "=", "i_candidate_sim", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "i", ",", "j", "]", ")", "\n", "i_candidate_sim", "[", "i", "]", "=", "i_candidate_sim_list", "\n", "\n", "j_candidate_list", "=", "j_candidate", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_list", ".", "append", "(", "i", ")", "\n", "j_candidate", "[", "j", "]", "=", "j_candidate_list", "\n", "\n", "j_candidate_sim_list", "=", "j_candidate_sim", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "i", ",", "j", "]", ")", "\n", "j_candidate_sim", "[", "j", "]", "=", "j_candidate_sim_list", "\n", "\n", "", "prefix1", "=", "\"x_\"", "\n", "prefix2", "=", "\"y_\"", "\n", "\n", "for", "i", ",", "i_candidate_list", "in", "i_candidate", ".", "items", "(", ")", ":", "\n", "        ", "i_candidate_sim_list", "=", "np", ".", "array", "(", "i_candidate_sim", ".", "get", "(", "i", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "i_candidate_sim_list", ")", "\n", "i_sorted_candidate_list", "=", "np", ".", "array", "(", "i_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "x_i", "=", "prefix1", "+", "str", "(", "i", ")", "\n", "kg1_candidates", "[", "x_i", "]", "=", "[", "prefix2", "+", "str", "(", "y", ")", "for", "y", "in", "i_sorted_candidate_list", "]", "\n", "", "for", "j", ",", "j_candidate_list", "in", "j_candidate", ".", "items", "(", ")", ":", "\n", "        ", "j_candidate_sim_list", "=", "np", ".", "array", "(", "j_candidate_sim", ".", "get", "(", "j", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "j_candidate_sim_list", ")", "\n", "j_sorted_candidate_list", "=", "np", ".", "array", "(", "j_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "y_j", "=", "prefix2", "+", "str", "(", "j", ")", "\n", "kg2_candidates", "[", "y_j", "]", "=", "[", "prefix1", "+", "str", "(", "x", ")", "for", "x", "in", "j_sorted_candidate_list", "]", "\n", "\n", "", "print", "(", "\"generating candidate lists costs time {:.1f} s \"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "len", "(", "kg1_candidates", ")", ",", "\n", "len", "(", "kg2_candidates", ")", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "matching", "=", "galeshapley", "(", "kg1_candidates", ",", "kg2_candidates", ",", "cut", ")", "\n", "if", "len", "(", "matching", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"re-matching = {}, precision = {:.3f}%, time = {:.3f} s \"", ".", "format", "(", "0", ",", "0", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "set", "(", ")", "\n", "", "else", ":", "\n", "        ", "new_alignment", "=", "set", "(", ")", "\n", "n", "=", "0", "\n", "for", "i", ",", "j", "in", "matching", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "int", "(", "i", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "y", "=", "int", "(", "j", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "new_alignment", ".", "add", "(", "(", "x", ",", "y", ")", ")", "\n", "if", "x", "==", "y", ":", "\n", "                ", "n", "+=", "1", "\n", "", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"re-matching = {}, precision = {:.3f}%, time = {:.3f} s \"", ".", "format", "(", "len", "(", "matching", ")", ",", "\n", "n", "/", "len", "(", "matching", ")", "*", "100", ",", "cost", ")", ")", "\n", "return", "new_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching": [[263, 277], ["cycle.stable_matching", "gc.collect", "openea.approaches.bootea.update_labeled_alignment_x", "openea.approaches.bootea.update_labeled_alignment_y"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_x", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_y"], ["", "", "def", "bootstrapping_stable_matching", "(", "sim_mat", ",", "unaligned_entities1", ",", "unaligned_entities2", ",", "labeled_alignment", ",", "sim_th", ",", "k", ")", ":", "\n", "    ", "curr_labeled_alignment", "=", "stable_matching", "(", "sim_mat", ",", "sim_th", ",", "k", ")", "\n", "if", "curr_labeled_alignment", "is", "not", "None", ":", "\n", "        ", "labeled_alignment", "=", "update_labeled_alignment_x", "(", "labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", "\n", "labeled_alignment", "=", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", "\n", "del", "curr_labeled_alignment", "\n", "", "if", "labeled_alignment", "is", "not", "None", ":", "\n", "        ", "newly_aligned_entities1", "=", "[", "unaligned_entities1", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "labeled_alignment", "]", "\n", "newly_aligned_entities2", "=", "[", "unaligned_entities2", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "labeled_alignment", "]", "\n", "", "else", ":", "\n", "        ", "newly_aligned_entities1", ",", "newly_aligned_entities2", "=", "None", ",", "None", "\n", "", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "labeled_alignment", ",", "newly_aligned_entities1", ",", "newly_aligned_entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.add_new_alignment": [[279, 284], ["openea.approaches.bootea.update_labeled_alignment_x", "openea.approaches.bootea.update_labeled_alignment_y"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_x", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_y"], ["", "def", "add_new_alignment", "(", "labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "if", "curr_labeled_alignment", "is", "not", "None", ":", "\n", "        ", "labeled_alignment", "=", "update_labeled_alignment_x", "(", "labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", "\n", "labeled_alignment", "=", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", "\n", "", "return", "labeled_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.check_conflict": [[286, 309], ["dict", "dict", "print", "head2tails_map[].add", "tail2heads_map[].add", "set", "set", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "check_conflict", "(", "labeled_align1", ",", "labeled_align2", ")", ":", "\n", "    ", "head2tails_map", "=", "dict", "(", ")", "\n", "tail2heads_map", "=", "dict", "(", ")", "\n", "for", "idx", "in", "labeled_align1", "|", "labeled_align2", ":", "\n", "        ", "if", "idx", "[", "0", "]", "not", "in", "head2tails_map", ":", "\n", "            ", "head2tails_map", "[", "idx", "[", "0", "]", "]", "=", "set", "(", ")", "\n", "", "head2tails_map", "[", "idx", "[", "0", "]", "]", ".", "add", "(", "idx", "[", "1", "]", ")", "\n", "if", "idx", "[", "1", "]", "not", "in", "tail2heads_map", ":", "\n", "            ", "tail2heads_map", "[", "idx", "[", "1", "]", "]", "=", "set", "(", ")", "\n", "", "tail2heads_map", "[", "idx", "[", "1", "]", "]", ".", "add", "(", "idx", "[", "0", "]", ")", "\n", "", "conflict_num", "=", "0", "\n", "conflict_12", "=", "{", "}", "\n", "conflict_21", "=", "{", "}", "\n", "for", "k", "in", "head2tails_map", ":", "\n", "        ", "if", "len", "(", "head2tails_map", "[", "k", "]", ")", ">", "1", ":", "\n", "            ", "conflict_num", "+=", "1", "\n", "conflict_12", "[", "k", "]", "=", "head2tails_map", "[", "k", "]", "\n", "", "", "for", "k", "in", "tail2heads_map", ":", "\n", "        ", "if", "len", "(", "tail2heads_map", "[", "k", "]", ")", ">", "1", ":", "\n", "            ", "conflict_num", "+=", "1", "\n", "conflict_21", "[", "k", "]", "=", "tail2heads_map", "[", "k", "]", "\n", "", "", "print", "(", "\"### Observation ### conflict num %d/%d/%d\"", "%", "(", "conflict_num", ",", "len", "(", "labeled_align1", ")", ",", "len", "(", "labeled_align2", ")", ")", ")", "\n", "return", "head2tails_map", ",", "tail2heads_map", ",", "conflict_12", ",", "conflict_21", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank": [[311, 317], ["None"], "function", ["None"], ["", "def", "get_rank", "(", "sim_mat", ",", "num", ")", ":", "\n", "    ", "rank", "=", "0", "\n", "for", "i", "in", "sim_mat", ":", "\n", "        ", "if", "i", "<", "num", ":", "\n", "            ", "rank", "+=", "1", "\n", "", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.update_labeled_align": [[319, 330], ["dict", "labeled_align.discard", "labeled_align.add"], "function", ["None"], ["", "def", "update_labeled_align", "(", "conflict12", ",", "labeled_align", ",", "label_dict1", ",", "label_dict2", ",", "ref_mat1", ")", ":", "\n", "    ", "conflict12_copy", "=", "dict", "(", ")", "\n", "for", "key", "in", "conflict12", ":", "\n", "# print((key, conflict12[key]))", "\n", "# print(label_dict1.get(key, -1))", "\n", "        ", "labeled_align", ".", "discard", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "if", "ref_mat1", "[", "key", ",", "label_dict1", "[", "key", "]", "]", "<", "ref_mat1", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ":", "\n", "            ", "labeled_align", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "conflict12_copy", "[", "key", "]", "=", "conflict12", "[", "key", "]", "\n", "", "", "return", "conflict12_copy", ",", "labeled_align", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.conflict_resolution": [[332, 407], ["print", "print", "print", "print", "dict", "dict", "dict.items", "set", "dict.items", "diff2.discard", "dict.get", "diff2_dict_inv.get.add", "dict.get", "label_dict3.get", "diff2.add", "str", "str", "str", "len", "set", "len", "set.add", "set.add", "label_dict3.get", "cycle.get_rank", "cycle.get_rank", "len", "diff2.add", "diff2.add", "diff2.add", "diff2_dict_inv.get.pop", "diff2.add", "cycle.get_rank", "cycle.get_rank", "cycle.get_rank", "diff2.add", "max", "diff2.add", "max", "diff2.add", "diff2.add", "max"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.get_rank"], ["", "def", "conflict_resolution", "(", "label_dict1", ",", "label_dict2", ",", "label_dict3", ",", "ref_mat1", ",", "ref_mat2", ",", "ref_mat3", ",", "diff2", ",", "conflict12", ",", "\n", "conflict21", ",", "remove", "=", "False", ")", ":", "\n", "    ", "conflict", "=", "0", "\n", "conflict_gold", "=", "0", "\n", "real_conflict", "=", "0", "\n", "correct", "=", "0", "\n", "for", "key", "in", "conflict12", ":", "\n", "        ", "diff2", ".", "discard", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "conflict", "+=", "1", "\n", "if", "key", "==", "label_dict1", "[", "key", "]", "or", "key", "==", "label_dict2", "[", "key", "]", "or", "key", "==", "label_dict3", ".", "get", "(", "key", ",", "None", ")", ":", "\n", "            ", "conflict_gold", "+=", "1", "\n", "", "if", "remove", ":", "\n", "            ", "continue", "\n", "", "if", "ref_mat1", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ">", "ref_mat1", "[", "key", ",", "label_dict2", "[", "key", "]", "]", "and", "ref_mat2", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ">", "ref_mat2", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ":", "\n", "            ", "real_conflict", "+=", "1", "\n", "ans3", "=", "label_dict3", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "ans3", "is", "None", ":", "\n", "                ", "rank1", "=", "get_rank", "(", "ref_mat1", "[", "key", ",", ":", "]", ",", "ref_mat1", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ")", "\n", "rank2", "=", "get_rank", "(", "ref_mat2", "[", "key", ",", ":", "]", ",", "ref_mat2", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ")", "\n", "if", "rank1", ">=", "rank2", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "", "elif", "ans3", "==", "label_dict1", "[", "key", "]", ":", "\n", "                ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "elif", "ans3", "==", "label_dict2", "[", "key", "]", ":", "\n", "                ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "rank1", "=", "get_rank", "(", "ref_mat1", "[", "key", ",", ":", "]", ",", "ref_mat1", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ")", "\n", "rank2", "=", "get_rank", "(", "ref_mat2", "[", "key", ",", ":", "]", ",", "ref_mat2", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ")", "\n", "rank3", "=", "get_rank", "(", "ref_mat3", "[", "key", ",", ":", "]", ",", "ref_mat3", "[", "key", ",", "label_dict3", "[", "key", "]", "]", ")", "\n", "if", "rank1", "==", "max", "(", "[", "rank1", ",", "rank2", ",", "rank3", "]", ")", "and", "rank1", "!=", "rank2", "and", "rank1", "!=", "rank3", "and", "rank2", "!=", "rank3", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "elif", "rank2", "==", "max", "(", "[", "rank1", ",", "rank2", ",", "rank3", "]", ")", "and", "rank1", "!=", "rank2", "and", "rank1", "!=", "rank3", "and", "rank2", "!=", "rank3", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "elif", "rank3", "==", "max", "(", "[", "rank1", ",", "rank2", ",", "rank3", "]", ")", "and", "rank1", "!=", "rank2", "and", "rank1", "!=", "rank3", "and", "rank2", "!=", "rank3", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict3", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "x", ",", "y", "=", "diff2", "[", "-", "1", "]", "[", "0", "]", ",", "diff2", "[", "-", "1", "]", "[", "1", "]", "\n", "if", "x", "==", "y", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "", "print", "(", "'num of conflict: '", "+", "str", "(", "conflict", ")", ")", "\n", "print", "(", "'num of real conflict: '", "+", "str", "(", "real_conflict", ")", ")", "\n", "print", "(", "'num of ground truth exist in conflict: '", "+", "str", "(", "conflict_gold", ")", ")", "\n", "print", "(", "\"right alignment: {}/{}={:.3f}\"", ".", "format", "(", "correct", ",", "len", "(", "conflict12", ")", ",", "correct", "/", "len", "(", "conflict12", ")", ")", ")", "\n", "diff2_dict", "=", "dict", "(", "diff2", ")", "\n", "diff2_dict_inv", "=", "dict", "(", ")", "\n", "for", "i", ",", "j", "in", "diff2_dict", ".", "items", "(", ")", ":", "\n", "        ", "i_set", "=", "diff2_dict_inv", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "diff2_dict_inv", "[", "j", "]", "=", "i_set", "\n", "\n", "", "for", "key", "in", "conflict21", ":", "\n", "        ", "i_set", "=", "conflict21", "[", "key", "]", "\n", "if", "diff2_dict_inv", ".", "get", "(", "key", ")", ":", "\n", "            ", "diff2_dict_inv", "[", "key", "]", "=", "diff2_dict_inv", "[", "key", "]", "|", "i_set", "\n", "", "else", ":", "\n", "            ", "diff2_dict_inv", "[", "key", "]", "=", "i_set", "\n", "", "", "update_diff2", "=", "set", "(", ")", "\n", "for", "key", ",", "i_set", "in", "diff2_dict_inv", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", ">", "1", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "ref_mat2", "[", "i", ",", "key", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "ref_mat2", "[", "i", ",", "key", "]", "\n", "max_i", "=", "i", "\n", "", "", "update_diff2", ".", "add", "(", "(", "max_i", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "            ", "update_diff2", ".", "add", "(", "(", "i_set", ".", "pop", "(", ")", ",", "key", ")", ")", "\n", "", "", "return", "update_diff2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.edit_conflict": [[409, 476], ["diff1_dict.items", "diff2_dict.items", "set", "set", "diff1_dict_inv.items", "diff2_dict_inv.items", "diff1.discard", "diff2.discard", "dict", "dict", "dict", "dict", "diff1_dict_inv.get", "diff2_dict_inv.get.add", "diff2_dict_inv.get", "diff2_dict_inv.get.add", "diff1_dict_inv.get", "diff2_dict_inv.get", "set", "set", "len", "set.add", "set.add", "len", "set.add", "set.add", "diff1.add", "diff1.add", "diff2.add", "diff2.add", "diff2_dict_inv.get.pop", "diff2_dict_inv.get.pop"], "function", ["None"], ["", "def", "edit_conflict", "(", "label_dict1", ",", "label_dict2", ",", "ref_mat1", ",", "ref_mat2", ",", "diff1", ",", "diff2", ",", "conflict12", ",", "conflict21", ",", "remove", "=", "False", ")", ":", "\n", "    ", "n1", ",", "n2", ",", "n3", ",", "n4", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "conflict", "=", "0", "\n", "conflict_gold", "=", "0", "\n", "for", "key", "in", "conflict12", ":", "\n", "        ", "diff1", ".", "discard", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "diff2", ".", "discard", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "conflict", "+=", "1", "\n", "if", "key", "==", "label_dict1", "[", "key", "]", "or", "key", "==", "label_dict2", "[", "key", "]", ":", "\n", "            ", "conflict_gold", "+=", "1", "\n", "", "if", "remove", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "if", "ref_mat1", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ">", "ref_mat1", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ":", "\n", "                ", "diff1", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "diff1", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "if", "ref_mat2", "[", "key", ",", "label_dict1", "[", "key", "]", "]", ">", "ref_mat2", "[", "key", ",", "label_dict2", "[", "key", "]", "]", ":", "\n", "                ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict1", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "diff2", ".", "add", "(", "(", "key", ",", "label_dict2", "[", "key", "]", ")", ")", "\n", "", "", "", "diff1_dict", ",", "diff2_dict", "=", "dict", "(", "diff1", ")", ",", "dict", "(", "diff2", ")", "\n", "diff1_dict_inv", ",", "diff2_dict_inv", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "i", ",", "j", "in", "diff1_dict", ".", "items", "(", ")", ":", "\n", "        ", "i_set", "=", "diff1_dict_inv", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "diff1_dict_inv", "[", "j", "]", "=", "i_set", "\n", "", "for", "i", ",", "j", "in", "diff2_dict", ".", "items", "(", ")", ":", "\n", "        ", "i_set", "=", "diff2_dict_inv", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "diff2_dict_inv", "[", "j", "]", "=", "i_set", "\n", "\n", "", "for", "key", "in", "conflict21", ":", "\n", "        ", "i_set", "=", "conflict21", "[", "key", "]", "\n", "if", "diff1_dict_inv", ".", "get", "(", "key", ")", ":", "\n", "            ", "diff1_dict_inv", "[", "key", "]", "=", "diff1_dict_inv", "[", "key", "]", "|", "i_set", "\n", "", "else", ":", "\n", "            ", "diff1_dict_inv", "[", "key", "]", "=", "i_set", "\n", "", "if", "diff2_dict_inv", ".", "get", "(", "key", ")", ":", "\n", "            ", "diff2_dict_inv", "[", "key", "]", "=", "diff2_dict_inv", "[", "key", "]", "|", "i_set", "\n", "", "else", ":", "\n", "            ", "diff2_dict_inv", "[", "key", "]", "=", "i_set", "\n", "", "", "update_diff1", "=", "set", "(", ")", "\n", "update_diff2", "=", "set", "(", ")", "\n", "for", "key", ",", "i_set", "in", "diff1_dict_inv", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", ">", "1", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "ref_mat1", "[", "i", ",", "key", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "ref_mat1", "[", "i", ",", "key", "]", "\n", "max_i", "=", "i", "\n", "", "", "update_diff1", ".", "add", "(", "(", "max_i", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "            ", "update_diff1", ".", "add", "(", "(", "i_set", ".", "pop", "(", ")", ",", "key", ")", ")", "\n", "", "", "for", "key", ",", "i_set", "in", "diff2_dict_inv", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", ">", "1", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "ref_mat2", "[", "i", ",", "key", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "ref_mat2", "[", "i", ",", "key", "]", "\n", "max_i", "=", "i", "\n", "", "", "update_diff2", ".", "add", "(", "(", "max_i", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "            ", "update_diff2", ".", "add", "(", "(", "i_set", ".", "pop", "(", ")", ",", "key", ")", ")", "\n", "", "", "return", "update_diff1", ",", "update_diff2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.conflict_rematch": [[478, 550], ["time.time", "print", "openea.modules.bootstrapping.alignment_finder.filter_sim_mat", "set", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "set", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "dict", "dict", "dict", "dict", "enumerate", "dict.items", "dict.items", "print", "cycle.galeshapley", "set", "galeshapley.items", "print", "dict", "dict", "len", "set", "len", "set", "dict.get", "i_candidate.get.append", "dict.get", "np.array.append", "dict.get", "j_candidate.get.append", "dict.get", "np.array.append", "numpy.array", "numpy.argsort", "[].tolist", "numpy.array", "numpy.argsort", "[].tolist", "len", "len", "int", "int", "set.add", "time.time", "str", "list", "list", "list", "list", "dict.get", "str", "dict.get", "str", "len", "str", "str", "time.time", "i.split", "j.split", "numpy.array", "numpy.array", "len", "list", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.filter_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.galeshapley", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "conflict_rematch", "(", "sim_mat", ",", "sim_th", ",", "k", ",", "conflict", ",", "cut", "=", "100", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "kg1_candidates", ",", "kg2_candidates", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "print", "(", "\"total conflict numbers: \"", "+", "str", "(", "sim_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "potential_aligned_pairs_index", "=", "filter_sim_mat", "(", "sim_mat", ",", "sim_th", ")", "\n", "potential_aligned_pairs", "=", "set", "(", "[", "(", "conflict", "[", "i", "[", "0", "]", "]", ",", "i", "[", "1", "]", ")", "for", "i", "in", "potential_aligned_pairs_index", "]", ")", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "set", "(", ")", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim threshold\"", ")", "\n", "if", "k", "<=", "0", ":", "\n", "        ", "return", "potential_aligned_pairs", "\n", "", "nearest_k_neighbors_index", "=", "search_nearest_k", "(", "sim_mat", ",", "k", ")", "\n", "nearest_k_neighbors", "=", "set", "(", "[", "(", "conflict", "[", "i", "[", "0", "]", "]", ",", "i", "[", "1", "]", ")", "for", "i", "in", "nearest_k_neighbors_index", "]", ")", "\n", "potential_aligned_pairs_index", "&=", "nearest_k_neighbors_index", "\n", "potential_aligned_pairs", "&=", "nearest_k_neighbors", "\n", "if", "len", "(", "potential_aligned_pairs", ")", "==", "0", ":", "\n", "        ", "return", "set", "(", ")", "\n", "", "check_new_alignment", "(", "potential_aligned_pairs", ",", "context", "=", "\"after filtering by sim and nearest k\"", ")", "\n", "i_candidate", "=", "dict", "(", ")", "\n", "i_candidate_sim", "=", "dict", "(", ")", "\n", "j_candidate", "=", "dict", "(", ")", "\n", "j_candidate_sim", "=", "dict", "(", ")", "\n", "\n", "for", "index", ",", "(", "i", ",", "j", ")", "in", "enumerate", "(", "potential_aligned_pairs", ")", ":", "\n", "        ", "i_candidate_list", "=", "i_candidate", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_list", ".", "append", "(", "j", ")", "\n", "i_candidate", "[", "i", "]", "=", "i_candidate_list", "\n", "\n", "i_candidate_sim_list", "=", "i_candidate_sim", ".", "get", "(", "i", ",", "list", "(", ")", ")", "\n", "i_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "list", "(", "potential_aligned_pairs_index", ")", "[", "index", "]", "[", "0", "]", ",", "list", "(", "potential_aligned_pairs_index", ")", "[", "index", "]", "[", "1", "]", "]", ")", "\n", "i_candidate_sim", "[", "i", "]", "=", "i_candidate_sim_list", "\n", "\n", "j_candidate_list", "=", "j_candidate", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_list", ".", "append", "(", "i", ")", "\n", "j_candidate", "[", "j", "]", "=", "j_candidate_list", "\n", "\n", "j_candidate_sim_list", "=", "j_candidate_sim", ".", "get", "(", "j", ",", "list", "(", ")", ")", "\n", "j_candidate_sim_list", ".", "append", "(", "sim_mat", "[", "list", "(", "potential_aligned_pairs_index", ")", "[", "index", "]", "[", "0", "]", ",", "list", "(", "potential_aligned_pairs_index", ")", "[", "index", "]", "[", "1", "]", "]", ")", "\n", "j_candidate_sim", "[", "j", "]", "=", "j_candidate_sim_list", "\n", "\n", "", "prefix1", "=", "\"x_\"", "\n", "prefix2", "=", "\"y_\"", "\n", "\n", "for", "i", ",", "i_candidate_list", "in", "i_candidate", ".", "items", "(", ")", ":", "\n", "        ", "i_candidate_sim_list", "=", "np", ".", "array", "(", "i_candidate_sim", ".", "get", "(", "i", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "i_candidate_sim_list", ")", "\n", "i_sorted_candidate_list", "=", "np", ".", "array", "(", "i_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "x_i", "=", "prefix1", "+", "str", "(", "i", ")", "\n", "kg1_candidates", "[", "x_i", "]", "=", "[", "prefix2", "+", "str", "(", "y", ")", "for", "y", "in", "i_sorted_candidate_list", "]", "\n", "", "for", "j", ",", "j_candidate_list", "in", "j_candidate", ".", "items", "(", ")", ":", "\n", "        ", "j_candidate_sim_list", "=", "np", ".", "array", "(", "j_candidate_sim", ".", "get", "(", "j", ")", ")", "\n", "sorts", "=", "np", ".", "argsort", "(", "-", "j_candidate_sim_list", ")", "\n", "j_sorted_candidate_list", "=", "np", ".", "array", "(", "j_candidate_list", ")", "[", "sorts", "]", ".", "tolist", "(", ")", "\n", "y_j", "=", "prefix2", "+", "str", "(", "j", ")", "\n", "kg2_candidates", "[", "y_j", "]", "=", "[", "prefix1", "+", "str", "(", "x", ")", "for", "x", "in", "j_sorted_candidate_list", "]", "\n", "\n", "", "print", "(", "\"generating candidate lists costs time {:.1f} s \"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ",", "\n", "len", "(", "kg1_candidates", ")", ",", "\n", "len", "(", "kg2_candidates", ")", ")", "\n", "matching", "=", "galeshapley", "(", "kg1_candidates", ",", "kg2_candidates", ",", "cut", ")", "\n", "new_alignment", "=", "set", "(", ")", "\n", "n", "=", "0", "\n", "for", "i", ",", "j", "in", "matching", ".", "items", "(", ")", ":", "\n", "        ", "x", "=", "int", "(", "i", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "y", "=", "int", "(", "j", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "new_alignment", ".", "add", "(", "(", "x", ",", "y", ")", ")", "\n", "if", "x", "==", "y", ":", "\n", "            ", "n", "+=", "1", "\n", "", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "\"conflict re-matching = {}, precision = {:.3f}%, time = {:.3f} s \"", ".", "format", "(", "len", "(", "matching", ")", ",", "\n", "n", "/", "len", "(", "matching", ")", "*", "100", ",", "cost", ")", ")", "\n", "return", "new_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.inverse_dict": [[552, 559], ["dict", "dict.items", "dict.get", "dict_inv.get.add", "set"], "function", ["None"], ["", "def", "inverse_dict", "(", "dict", ")", ":", "\n", "    ", "dict_inv", "=", "dict", "(", ")", "\n", "for", "i", ",", "j", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "i_set", "=", "dict_inv", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "dict_inv", "[", "j", "]", "=", "i_set", "\n", "", "return", "dict_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.greedy_alignment": [[561, 605], ["time.time", "range", "gc.collect", "set", "list", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "openea.modules.finding.alignment.calculate_rank", "len", "len", "round", "time.time", "len", "numpy.array", "list.append", "rest.get", "numpy.array", "list", "numpy.array", "print", "print", "print", "print", "range", "len", "multiprocessing.Pool.apply_async", "range"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.alignment.calculate_rank", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "greedy_alignment", "(", "sim_mat", ",", "top_k", ",", "nums_threads", ",", "metric", ",", "normalize", ",", "csls_k", ",", "accurate", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "num", "=", "sim_mat", ".", "shape", "[", "0", "]", "\n", "if", "nums_threads", ">", "1", ":", "\n", "        ", "hits", "=", "[", "0", "]", "*", "len", "(", "top_k", ")", "\n", "mr", ",", "mrr", "=", "0", ",", "0", "\n", "alignment_rest", "=", "set", "(", ")", "\n", "rests", "=", "list", "(", ")", "\n", "search_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "nums_threads", ")", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "len", "(", "search_tasks", ")", ")", "\n", "for", "task", "in", "search_tasks", ":", "\n", "            ", "mat", "=", "sim_mat", "[", "task", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "calculate_rank", ",", "(", "task", ",", "mat", ",", "top_k", ",", "accurate", ",", "num", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "            ", "sub_mr", ",", "sub_mrr", ",", "sub_hits", ",", "sub_hits1_rest", "=", "rest", ".", "get", "(", ")", "\n", "mr", "+=", "sub_mr", "\n", "mrr", "+=", "sub_mrr", "\n", "hits", "+=", "np", ".", "array", "(", "sub_hits", ")", "\n", "alignment_rest", "|=", "sub_hits1_rest", "\n", "", "", "else", ":", "\n", "        ", "mr", ",", "mrr", ",", "hits", ",", "alignment_rest", "=", "calculate_rank", "(", "list", "(", "range", "(", "num", ")", ")", ",", "sim_mat", ",", "top_k", ",", "accurate", ",", "num", ")", "\n", "", "assert", "len", "(", "alignment_rest", ")", "==", "num", "\n", "hits", "=", "np", ".", "array", "(", "hits", ")", "/", "num", "*", "100", "\n", "for", "i", "in", "range", "(", "len", "(", "hits", ")", ")", ":", "\n", "        ", "hits", "[", "i", "]", "=", "round", "(", "hits", "[", "i", "]", ",", "3", ")", "\n", "", "cost", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "if", "accurate", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"accurate results with csls: csls={}, hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "csls_k", ",", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"accurate results: hits@{} = {}%, mr = {:.3f}, mrr = {:.6f}, time = {:.3f} s \"", ".", "\n", "format", "(", "top_k", ",", "hits", ",", "mr", ",", "mrr", ",", "cost", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "csls_k", ">", "0", ":", "\n", "            ", "print", "(", "\"quick results with csls: csls={}, hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "csls_k", ",", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"quick results: hits@{} = {}%, time = {:.3f} s \"", ".", "format", "(", "top_k", ",", "hits", ",", "cost", ")", ")", "\n", "", "", "hits1", "=", "hits", "[", "0", "]", "# todo: return hits1", "\n", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "alignment_rest", ",", "hits", ",", "mr", ",", "mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.sim_norm": [[607, 612], ["numpy.min", "numpy.max"], "function", ["None"], ["", "def", "sim_norm", "(", "csls_sim_mat", ")", ":", "\n", "    ", "min_val", "=", "np", ".", "min", "(", "csls_sim_mat", ")", "\n", "max_val", "=", "np", ".", "max", "(", "csls_sim_mat", ")", "\n", "val_range", "=", "max_val", "-", "min_val", "\n", "return", "(", "csls_sim_mat", "-", "min_val", ")", "/", "val_range", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.my_mcd_matrix": [[615, 624], ["numpy.sum", "numpy.sum", "numpy.mean", "numpy.mean", "cycle.sim_norm"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm"], ["", "def", "my_mcd_matrix", "(", "sim_matrix", ")", ":", "\n", "    ", "n", ",", "m", "=", "sim_matrix", ".", "shape", "[", "0", "]", ",", "sim_matrix", ".", "shape", "[", "1", "]", "\n", "row_sum", "=", "np", ".", "sum", "(", "sim_matrix", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "col_sum", "=", "np", ".", "sum", "(", "sim_matrix", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "row_mean", "=", "np", ".", "mean", "(", "sim_matrix", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "col_mean", "=", "np", ".", "mean", "(", "sim_matrix", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "mu_mat", "=", "(", "-", "sim_matrix", "+", "row_sum", "+", "col_sum", ")", "/", "(", "n", "+", "m", "-", "1", ")", "\n", "mat", "=", "(", "sim_matrix", "-", "mu_mat", ")", "/", "(", "(", "row_mean", "+", "col_mean", ")", "/", "2", ")", "\n", "return", "sim_norm", "(", "mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.read": [[21, 56], ["pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "rsn4ea.BasicReader.add_align_infor", "rsn4ea.BasicReader.add_weight", "list", "list"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.add_align_infor", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.add_weight"], ["    ", "def", "read", "(", "self", ",", "data_path", "=", "'data/dbp_wd_15k_V1/mapping/0_3/'", ")", ":", "\n", "# add shortcuts", "\n", "        ", "kgs", "=", "self", ".", "kgs", "\n", "\n", "kg1", "=", "pd", ".", "DataFrame", "(", "kgs", ".", "kg1", ".", "relation_triples_list", ",", "columns", "=", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", "]", ")", "\n", "kg2", "=", "pd", ".", "DataFrame", "(", "kgs", ".", "kg2", ".", "relation_triples_list", ",", "columns", "=", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", "]", ")", "\n", "\n", "kb", "=", "pd", ".", "concat", "(", "[", "kg1", ",", "kg2", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "# self._eid_1 = pd.Series(eid_1)", "\n", "# self._eid_2 = pd.Series(eid_2)", "\n", "\n", "self", ".", "_ent_num", "=", "kgs", ".", "entities_num", "\n", "self", ".", "_rel_num", "=", "kgs", ".", "relations_num", "\n", "# self._ent_id = e_map", "\n", "# self._rel_id = r_map", "\n", "self", ".", "_ent_mapping", "=", "pd", ".", "DataFrame", "(", "list", "(", "kgs", ".", "train_links", ")", ",", "columns", "=", "[", "'kb_1'", ",", "'kb_2'", "]", ")", "\n", "self", ".", "_rel_mapping", "=", "pd", ".", "DataFrame", "(", "{", "}", ",", "columns", "=", "[", "'kb_1'", ",", "'kb_2'", "]", ")", "\n", "self", ".", "_ent_testing", "=", "pd", ".", "DataFrame", "(", "list", "(", "kgs", ".", "test_links", ")", ",", "columns", "=", "[", "'kb_1'", ",", "'kb_2'", "]", ")", "\n", "self", ".", "_rel_testing", "=", "pd", ".", "DataFrame", "(", "{", "}", ",", "columns", "=", "[", "'kb_1'", ",", "'kb_2'", "]", ")", "\n", "\n", "# add reverse edges", "\n", "rev_kb", "=", "kb", "[", "[", "'t_id'", ",", "'r_id'", ",", "'h_id'", "]", "]", ".", "values", "\n", "rev_kb", "[", ":", ",", "1", "]", "+=", "self", ".", "_rel_num", "\n", "rev_kb", "=", "pd", ".", "DataFrame", "(", "rev_kb", ",", "columns", "=", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", "]", ")", "\n", "self", ".", "_rel_num", "*=", "2", "\n", "kb", "=", "pd", ".", "concat", "(", "[", "kb", ",", "rev_kb", "]", ",", "ignore_index", "=", "True", ")", "\n", "# print(kb)", "\n", "# print(kb[len(kb)//2:])", "\n", "\n", "self", ".", "_kb", "=", "kb", "\n", "# we first tag the entities that have algined entities according to entity_mapping", "\n", "self", ".", "add_align_infor", "(", ")", "\n", "# we then connect two KGs by creating new triples involving aligned entities.", "\n", "self", ".", "add_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.add_align_infor": [[57, 87], ["pandas.Series.rename", "pandas.Series.rename", "pandas.concat", "pandas.concat", "pandas.Series", "pandas.Series", "kb.h_id.isin", "kb.r_id.isin", "kb.t_id.isin"], "methods", ["None"], ["", "def", "add_align_infor", "(", "self", ")", ":", "\n", "        ", "kb", "=", "self", ".", "_kb", "\n", "\n", "ent_mapping", "=", "self", ".", "_ent_mapping", "\n", "rev_e_m", "=", "ent_mapping", ".", "rename", "(", "columns", "=", "{", "'kb_1'", ":", "'kb_2'", ",", "'kb_2'", ":", "'kb_1'", "}", ")", "\n", "rel_mapping", "=", "self", ".", "_rel_mapping", "\n", "rev_r_m", "=", "rel_mapping", ".", "rename", "(", "columns", "=", "{", "'kb_1'", ":", "'kb_2'", ",", "'kb_2'", ":", "'kb_1'", "}", ")", "\n", "\n", "ent_mapping", "=", "pd", ".", "concat", "(", "[", "ent_mapping", ",", "rev_e_m", "]", ",", "ignore_index", "=", "True", ")", "\n", "rel_mapping", "=", "pd", ".", "concat", "(", "[", "rel_mapping", ",", "rev_r_m", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n", "ent_mapping", "=", "pd", ".", "Series", "(", "ent_mapping", ".", "kb_2", ".", "values", ",", "index", "=", "ent_mapping", ".", "kb_1", ".", "values", ")", "\n", "rel_mapping", "=", "pd", ".", "Series", "(", "rel_mapping", ".", "kb_2", ".", "values", ",", "index", "=", "rel_mapping", ".", "kb_1", ".", "values", ")", "\n", "\n", "self", ".", "_e_m", "=", "ent_mapping", "\n", "self", ".", "_r_m", "=", "rel_mapping", "\n", "\n", "kb", "[", "'ah_id'", "]", "=", "kb", ".", "h_id", "\n", "kb", "[", "'ar_id'", "]", "=", "kb", ".", "r_id", "\n", "kb", "[", "'at_id'", "]", "=", "kb", ".", "t_id", "\n", "\n", "h_mask", "=", "kb", ".", "h_id", ".", "isin", "(", "ent_mapping", ")", "\n", "r_mask", "=", "kb", ".", "r_id", ".", "isin", "(", "rel_mapping", ")", "\n", "t_mask", "=", "kb", ".", "t_id", ".", "isin", "(", "ent_mapping", ")", "\n", "\n", "kb", "[", "'ah_id'", "]", "[", "h_mask", "]", "=", "ent_mapping", ".", "loc", "[", "kb", "[", "'ah_id'", "]", "[", "h_mask", "]", ".", "values", "]", "\n", "kb", "[", "'ar_id'", "]", "[", "r_mask", "]", "=", "rel_mapping", ".", "loc", "[", "kb", "[", "'ar_id'", "]", "[", "r_mask", "]", ".", "values", "]", "\n", "kb", "[", "'at_id'", "]", "[", "t_mask", "]", "=", "ent_mapping", ".", "loc", "[", "kb", "[", "'at_id'", "]", "[", "t_mask", "]", ".", "values", "]", "\n", "\n", "self", ".", "_kb", "=", "kb", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.add_weight": [[88, 129], ["akb.rename.rename.rename", "[].rename", "[].rename", "[].rename", "[].rename", "[].rename", "[].rename", "[].rename", "pandas.concat().drop_duplicates", "pandas.concat().drop_duplicates.reset_index", "pandas.concat"], "methods", ["None"], ["", "def", "add_weight", "(", "self", ")", ":", "\n", "        ", "kb", "=", "self", ".", "_kb", "[", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", ",", "'ah_id'", ",", "'ar_id'", ",", "'at_id'", "]", "]", "\n", "\n", "kb", "[", "'w_h'", "]", "=", "0", "\n", "kb", "[", "'w_r'", "]", "=", "0", "\n", "kb", "[", "'w_t'", "]", "=", "0", "\n", "\n", "h_mask", "=", "~", "(", "kb", ".", "h_id", "==", "kb", ".", "ah_id", ")", "\n", "r_mask", "=", "~", "(", "kb", ".", "r_id", "==", "kb", ".", "ar_id", ")", "\n", "t_mask", "=", "~", "(", "kb", ".", "t_id", "==", "kb", ".", "at_id", ")", "\n", "\n", "kb", ".", "loc", "[", "h_mask", ",", "'w_h'", "]", "=", "1", "\n", "kb", ".", "loc", "[", "r_mask", ",", "'w_r'", "]", "=", "1", "\n", "kb", ".", "loc", "[", "t_mask", ",", "'w_t'", "]", "=", "1", "\n", "\n", "akb", "=", "kb", "[", "[", "'ah_id'", ",", "'ar_id'", ",", "'at_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", "\n", "akb", "=", "akb", ".", "rename", "(", "columns", "=", "{", "'ah_id'", ":", "'h_id'", ",", "'ar_id'", ":", "'r_id'", ",", "'at_id'", ":", "'t_id'", "}", ")", "\n", "\n", "ahkb", "=", "kb", "[", "h_mask", "]", "[", "[", "'ah_id'", ",", "'r_id'", ",", "'t_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "columns", "=", "{", "'ah_id'", ":", "'h_id'", "}", ")", "\n", "arkb", "=", "kb", "[", "r_mask", "]", "[", "[", "'h_id'", ",", "'ar_id'", ",", "'t_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "columns", "=", "{", "'ar_id'", ":", "'r_id'", "}", ")", "\n", "atkb", "=", "kb", "[", "t_mask", "]", "[", "[", "'h_id'", ",", "'r_id'", ",", "'at_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "columns", "=", "{", "'at_id'", ":", "'t_id'", "}", ")", "\n", "ahrkb", "=", "kb", "[", "h_mask", "&", "r_mask", "]", "[", "[", "'ah_id'", ",", "'ar_id'", ",", "'t_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "\n", "columns", "=", "{", "'ah_id'", ":", "'h_id'", ",", "'ar_id'", ":", "'r_id'", "}", ")", "\n", "ahtkb", "=", "kb", "[", "h_mask", "&", "t_mask", "]", "[", "[", "'ah_id'", ",", "'r_id'", ",", "'at_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "\n", "columns", "=", "{", "'ah_id'", ":", "'h_id'", ",", "'at_id'", ":", "'t_id'", "}", ")", "\n", "artkb", "=", "kb", "[", "r_mask", "&", "t_mask", "]", "[", "[", "'h_id'", ",", "'ar_id'", ",", "'at_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "\n", "columns", "=", "{", "'ar_id'", ":", "'r_id'", ",", "'at_id'", ":", "'t_id'", "}", ")", "\n", "ahrtkb", "=", "kb", "[", "h_mask", "&", "r_mask", "&", "t_mask", "]", "[", "[", "'ah_id'", ",", "'ar_id'", ",", "'at_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", ".", "rename", "(", "\n", "columns", "=", "{", "'ah_id'", ":", "'h_id'", ",", "\n", "'ar_id'", ":", "'r_id'", ",", "\n", "'at_id'", ":", "'t_id'", "}", ")", "\n", "\n", "kb", "[", "'w_h'", "]", "=", "0", "\n", "kb", "[", "'w_r'", "]", "=", "0", "\n", "kb", "[", "'w_t'", "]", "=", "0", "\n", "\n", "kb", "=", "pd", ".", "concat", "(", "\n", "[", "akb", ",", "ahkb", ",", "arkb", ",", "atkb", ",", "ahrkb", ",", "ahtkb", ",", "artkb", ",", "ahrtkb", ",", "kb", "[", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", ",", "'w_h'", ",", "'w_r'", ",", "'w_t'", "]", "]", "]", ",", "\n", "ignore_index", "=", "True", ")", ".", "drop_duplicates", "(", ")", "\n", "\n", "self", ".", "_kb", "=", "kb", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicSampler.sample_paths": [[133, 218], ["rsn4ea.BasicSampler._kb.copy", "numpy.unique", "pandas.DataFrame", "rtdf.reset_index().rename.reset_index().rename.reset_index().rename", "rsn4ea.BasicSampler.merge", "numpy.unique", "scipy.sparse.csr_matrix", "rsn4ea.BasicSampler.merge.t_id.isin", "pandas.DataFrame.groupby().apply", "pandas.DataFrame", "numpy.repeat", "pandas.DataFrame.loc[].apply", "print", "numpy.concatenate", "pandas.DataFrame", "pandas.concat", "numpy.random.choice", "numpy.random.choice", "len", "len", "print", "curr.apply", "rts.append", "print", "pandas.DataFrame.to_csv", "rtdf.reset_index().rename.reset_index().rename.reset_index", "numpy.ones", "pandas.DataFrame.groupby", "x.tails[].astype().reshape", "pre_c.A.reshape", "p.sum", "numpy.concatenate", "len", "len", "len", "x.across.sum", "x.tails[].astype", "numpy.concatenate", "numpy.repeat", "x.tails[].astype"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["    ", "def", "sample_paths", "(", "self", ",", "repeat_times", "=", "2", ",", "save_path", "=", "None", ")", ":", "\n", "        ", "opts", "=", "self", ".", "_options", "\n", "\n", "kb", "=", "self", ".", "_kb", ".", "copy", "(", ")", "\n", "\n", "kb", "=", "kb", "[", "[", "'h_id'", ",", "'r_id'", ",", "'t_id'", "]", "]", "\n", "\n", "# sampling triples with the h_id-(r_id,t_id) form.", "\n", "\n", "rtlist", "=", "np", ".", "unique", "(", "kb", "[", "[", "'r_id'", ",", "'t_id'", "]", "]", ".", "values", ",", "axis", "=", "0", ")", "\n", "\n", "rtdf", "=", "pd", ".", "DataFrame", "(", "rtlist", ",", "columns", "=", "[", "'r_id'", ",", "'t_id'", "]", ")", "\n", "\n", "rtdf", "=", "rtdf", ".", "reset_index", "(", ")", ".", "rename", "(", "{", "'index'", ":", "'tail_id'", "}", ",", "axis", "=", "'columns'", ")", "\n", "\n", "rtkb", "=", "kb", ".", "merge", "(", "\n", "rtdf", ",", "left_on", "=", "[", "'r_id'", ",", "'t_id'", "]", ",", "right_on", "=", "[", "'r_id'", ",", "'t_id'", "]", ")", "\n", "\n", "htail", "=", "np", ".", "unique", "(", "rtkb", "[", "[", "'h_id'", ",", "'tail_id'", "]", "]", ".", "values", ",", "axis", "=", "0", ")", "\n", "\n", "htailmat", "=", "csr_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "htail", ")", ")", ",", "(", "htail", "[", ":", ",", "0", "]", ",", "htail", "[", ":", ",", "1", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "_ent_num", ",", "rtlist", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# calulate corss-KG bias at first", "\n", "em", "=", "pd", ".", "concat", "(", "\n", "[", "self", ".", "_ent_mapping", ".", "kb_1", ",", "self", ".", "_ent_mapping", ".", "kb_2", "]", ")", ".", "values", "\n", "\n", "rtkb", "[", "'across'", "]", "=", "rtkb", ".", "t_id", ".", "isin", "(", "em", ")", "\n", "rtkb", ".", "loc", "[", "rtkb", ".", "across", ",", "'across'", "]", "=", "opts", ".", "beta", "\n", "rtkb", ".", "loc", "[", "rtkb", ".", "across", "==", "0", ",", "'across'", "]", "=", "1", "-", "opts", ".", "beta", "\n", "\n", "rtailkb", "=", "rtkb", "[", "[", "'h_id'", ",", "'t_id'", ",", "'tail_id'", ",", "'across'", "]", "]", "\n", "\n", "def", "gen_tail_dict", "(", "x", ")", ":", "\n", "            ", "return", "x", ".", "tail_id", ".", "values", ",", "x", ".", "across", ".", "values", "/", "x", ".", "across", ".", "sum", "(", ")", "\n", "\n", "", "rtailkb", "=", "rtailkb", ".", "groupby", "(", "'h_id'", ")", ".", "apply", "(", "gen_tail_dict", ")", "\n", "\n", "rtailkb", "=", "pd", ".", "DataFrame", "(", "{", "'tails'", ":", "rtailkb", "}", ")", "\n", "\n", "# start sampling", "\n", "\n", "hrt", "=", "np", ".", "repeat", "(", "kb", ".", "values", ",", "repeat_times", ",", "axis", "=", "0", ")", "\n", "\n", "# for starting triples", "\n", "def", "perform_random", "(", "x", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "choice", "(", "x", ".", "tails", "[", "0", "]", ",", "1", ",", "p", "=", "x", ".", "tails", "[", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "\n", "# else", "\n", "", "def", "perform_random2", "(", "x", ")", ":", "\n", "# calculate depth bias", "\n", "            ", "pre_c", "=", "htailmat", "[", "np", ".", "repeat", "(", "x", ".", "pre", ",", "x", ".", "tails", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ",", "x", ".", "tails", "[", "0", "]", "]", "\n", "pre_c", "[", "pre_c", "==", "0", "]", "=", "opts", ".", "alpha", "\n", "pre_c", "[", "pre_c", "==", "1", "]", "=", "1", "-", "opts", ".", "alpha", "\n", "p", "=", "x", ".", "tails", "[", "1", "]", ".", "astype", "(", "np", ".", "float", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "]", ")", "*", "pre_c", ".", "A", ".", "reshape", "(", "[", "-", "1", ",", "]", ")", "\n", "p", "=", "p", "/", "p", ".", "sum", "(", ")", "\n", "return", "np", ".", "random", ".", "choice", "(", "x", ".", "tails", "[", "0", "]", ",", "1", ",", "p", "=", "p", ")", "\n", "\n", "# print(rtailkb.loc[hrt[:, 2]])", "\n", "", "rt_x", "=", "rtailkb", ".", "loc", "[", "hrt", "[", ":", ",", "2", "]", "]", ".", "apply", "(", "perform_random", ",", "axis", "=", "1", ")", "\n", "rt_x", "=", "rtlist", "[", "np", ".", "concatenate", "(", "rt_x", ".", "values", ")", "]", "\n", "\n", "rts", "=", "[", "hrt", ",", "rt_x", "]", "\n", "print", "(", "'hrt'", ",", "'rt_x'", ",", "len", "(", "hrt", ")", ",", "len", "(", "rt_x", ")", ")", "\n", "c_length", "=", "5", "\n", "while", "c_length", "<", "opts", ".", "max_length", ":", "\n", "            ", "curr", "=", "rtailkb", ".", "loc", "[", "rt_x", "[", ":", ",", "1", "]", "]", "\n", "print", "(", "len", "(", "curr", ")", ",", "len", "(", "hrt", "[", ":", ",", "0", "]", ")", ")", "\n", "curr", ".", "loc", "[", ":", ",", "'pre'", "]", "=", "hrt", "[", ":", ",", "0", "]", "\n", "\n", "rt_x", "=", "curr", ".", "apply", "(", "perform_random2", ",", "axis", "=", "1", ")", "\n", "rt_x", "=", "rtlist", "[", "np", ".", "concatenate", "(", "rt_x", ".", "values", ")", "]", "\n", "\n", "rts", ".", "append", "(", "rt_x", ")", "\n", "c_length", "+=", "2", "\n", "\n", "", "data", "=", "np", ".", "concatenate", "(", "rts", ",", "axis", "=", "1", ")", "\n", "data", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "\n", "self", ".", "_train_data", "=", "data", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"save paths to:\"", ",", "save_path", ")", "\n", "data", ".", "to_csv", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.__init__": [[221, 227], ["object.__init__", "list", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "new_sup_links", "=", "list", "(", ")", "\n", "self", ".", "labeled_align", "=", "set", "(", ")", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.init": [[228, 256], ["rsn4ea.RSN4EA.read", "rsn4ea.RSN4EA._define_variables", "rsn4ea.RSN4EA._define_embed_graph", "rsn4ea.RSN4EA._generate_semi_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "os.path.exists", "rsn4ea.RSN4EA.sample_paths", "print", "pandas.read_csv", "os.path.join", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicReader.read", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._generate_semi_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.BasicSampler.sample_paths", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_options", "=", "opts", "=", "self", ".", "args", "\n", "opts", ".", "data_path", "=", "opts", ".", "training_data", "\n", "\n", "self", ".", "read", "(", "data_path", "=", "self", ".", "_options", ".", "data_path", ")", "\n", "\n", "# sequence_datapath = '%spaths_%.1f_%.1f' % (", "\n", "#     self._options.data_path, self._options.alpha, self._options.beta)", "\n", "\n", "sequence_datapath", "=", "'%sent_paths_%.1f_%.1f_len%s'", "%", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_options", ".", "data_path", ",", "\n", "self", ".", "args", ".", "dataset_division", ")", ",", "\n", "self", ".", "_options", ".", "alpha", ",", "\n", "self", ".", "_options", ".", "beta", ",", "\n", "self", ".", "_options", ".", "max_length", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sequence_datapath", ")", ":", "\n", "            ", "self", ".", "sample_paths", "(", "save_path", "=", "sequence_datapath", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'load existing training sequences'", ")", "\n", "self", ".", "_train_data", "=", "pd", ".", "read_csv", "(", "sequence_datapath", ",", "index_col", "=", "0", ")", "\n", "\n", "", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_generate_semi_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._define_variables": [[257, 300], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "options", "=", "self", ".", "_options", "\n", "hidden_size", "=", "options", ".", "hidden_size", "\n", "\n", "self", ".", "_entity_embedding", "=", "tf", ".", "get_variable", "(", "\n", "'entity_embedding'", ",", "\n", "[", "self", ".", "_ent_num", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", ")", "\n", "self", ".", "_relation_embedding", "=", "tf", ".", "get_variable", "(", "\n", "'relation_embedding'", ",", "\n", "[", "self", ".", "_rel_num", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", "=", "self", ".", "_entity_embedding", ",", "self", ".", "_relation_embedding", "\n", "\n", "self", ".", "_rel_w", "=", "tf", ".", "get_variable", "(", "\n", "\"relation_softmax_w\"", ",", "\n", "[", "self", ".", "_rel_num", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", ")", "\n", "self", ".", "_rel_b", "=", "tf", ".", "get_variable", "(", "\n", "\"relation_softmax_b\"", ",", "\n", "[", "self", ".", "_rel_num", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", "\n", ")", "\n", "self", ".", "_ent_w", "=", "tf", ".", "get_variable", "(", "\n", "\"entity_softmax_w\"", ",", "\n", "[", "self", ".", "_ent_num", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", ")", "\n", "self", ".", "_ent_b", "=", "tf", ".", "get_variable", "(", "\n", "\"entity_softmax_b\"", ",", "\n", "[", "self", ".", "_ent_num", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", "\n", ")", "\n", "\n", "self", ".", "entity_w", ",", "self", ".", "_entity_b", "=", "self", ".", "_ent_w", ",", "self", ".", "_ent_b", "\n", "\n", "self", ".", "_lr", "=", "tf", ".", "Variable", "(", "options", ".", "learning_rate", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "options", ".", "learning_rate", ")", "# , beta2=0.98, epsilon=1e-9", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.bn": [[301, 308], ["tensorflow.contrib.layers.batch_norm"], "methods", ["None"], ["", "def", "bn", "(", "self", ",", "inputs", ",", "is_train", "=", "True", ",", "reuse", "=", "True", ")", ":", "\n", "        ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "inputs", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "is_train", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "'bn'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.lstm_cell": [[310, 342], ["tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "gen_cell", "rsn4ea.RSN4EA.lstm_cell.basic_lstm_cell"], "methods", ["None"], ["", "def", "lstm_cell", "(", "self", ",", "drop", "=", "True", ",", "keep_prob", "=", "0.5", ",", "num_layers", "=", "2", ",", "hidden_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "hidden_size", ":", "\n", "            ", "hidden_size", "=", "self", ".", "_options", ".", "hidden_size", "\n", "\n", "", "def", "basic_lstm_cell", "(", ")", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "\n", "num_units", "=", "hidden_size", ",", "\n", "initializer", "=", "tf", ".", "orthogonal_initializer", ",", "\n", "forget_bias", "=", "1", ",", "\n", "reuse", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", ",", "\n", "activation", "=", "tf", ".", "identity", "\n", ")", "\n", "\n", "", "def", "drop_cell", "(", ")", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "\n", "basic_lstm_cell", "(", ")", ",", "\n", "output_keep_prob", "=", "keep_prob", "\n", ")", "\n", "\n", "", "if", "drop", ":", "\n", "            ", "gen_cell", "=", "drop_cell", "\n", "", "else", ":", "\n", "            ", "gen_cell", "=", "basic_lstm_cell", "\n", "\n", "", "if", "num_layers", "==", "0", ":", "\n", "            ", "return", "gen_cell", "(", ")", "\n", "\n", "", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "gen_cell", "(", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ",", "\n", "state_is_tuple", "=", "True", ",", "\n", ")", "\n", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sampled_loss": [[343, 358], ["min", "tensorflow.reshape", "tensorflow.nn.nce_loss", "tensorflow.reshape", "w.get_shape().as_list", "w.get_shape"], "methods", ["None"], ["", "def", "sampled_loss", "(", "self", ",", "inputs", ",", "labels", ",", "w", ",", "b", ",", "weight", "=", "1", ",", "is_entity", "=", "False", ")", ":", "\n", "        ", "num_sampled", "=", "min", "(", "self", ".", "_options", ".", "num_samples", ",", "w", ".", "shape", "[", "0", "]", "//", "3", ")", "\n", "\n", "labels", "=", "tf", ".", "reshape", "(", "labels", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "losses", "=", "tf", ".", "nn", ".", "nce_loss", "(", "\n", "weights", "=", "w", ",", "\n", "biases", "=", "b", ",", "\n", "labels", "=", "labels", ",", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "w", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "]", ")", ",", "\n", "num_sampled", "=", "num_sampled", ",", "\n", "num_classes", "=", "w", ".", "shape", "[", "0", "]", ",", "\n", "partition_strategy", "=", "'div'", ",", "\n", ")", "\n", "return", "losses", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.logits": [[359, 361], ["tensorflow.nn.bias_add", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "inputs", ",", "w", ",", "b", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "inputs", ",", "tf", ".", "transpose", "(", "w", ")", ")", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample": [[363, 366], ["numpy.random.choice", "len", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "data", ")", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "data", ")", ",", "size", "=", "len", "(", "data", ")", ",", "replace", "=", "False", ")", "\n", "return", "data", ".", "iloc", "[", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.build_sub_graph": [[368, 466], ["tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "range", "tensorflow.concat", "range", "rsn4ea.RSN4EA.build_sub_graph.cal_loss"], "methods", ["None"], ["", "def", "build_sub_graph", "(", "self", ",", "length", "=", "15", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "options", "=", "self", ".", "_options", "\n", "hidden_size", "=", "options", ".", "hidden_size", "\n", "batch_size", "=", "options", ".", "batch_size", "\n", "\n", "seq", "=", "tf", ".", "placeholder", "(", "\n", "tf", ".", "int32", ",", "[", "batch_size", ",", "length", "]", ",", "name", "=", "'seq'", "+", "str", "(", "length", ")", ")", "\n", "\n", "e_em", ",", "r_em", "=", "self", ".", "_entity_embedding", ",", "self", ".", "_relation_embedding", "\n", "\n", "# seperately read, and then recover the order", "\n", "ent", "=", "seq", "[", ":", ",", ":", "-", "1", ":", "2", "]", "\n", "rel", "=", "seq", "[", ":", ",", "1", ":", ":", "2", "]", "\n", "\n", "ent_em", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "e_em", ",", "ent", ")", "\n", "rel_em", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "r_em", ",", "rel", ")", "\n", "\n", "em_seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "em_seq", ".", "append", "(", "ent_em", "[", ":", ",", "i", "//", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "em_seq", ".", "append", "(", "rel_em", "[", ":", ",", "i", "//", "2", "]", ")", "\n", "\n", "# seperately bn", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'input_bn'", ")", ":", "\n", "            ", "if", "not", "reuse", ":", "\n", "                ", "bn_em_seq", "=", "[", "tf", ".", "reshape", "(", "self", ".", "bn", "(", "em_seq", "[", "i", "]", ",", "reuse", "=", "(", "\n", "i", "is", "not", "0", ")", ")", ",", "[", "-", "1", ",", "1", ",", "hidden_size", "]", ")", "for", "i", "in", "range", "(", "length", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "                ", "bn_em_seq", "=", "[", "tf", ".", "reshape", "(", "\n", "self", ".", "bn", "(", "em_seq", "[", "i", "]", ",", "reuse", "=", "True", ")", ",", "[", "-", "1", ",", "1", ",", "hidden_size", "]", ")", "for", "i", "in", "range", "(", "length", "-", "1", ")", "]", "\n", "\n", "", "", "bn_em_seq", "=", "tf", ".", "concat", "(", "bn_em_seq", ",", "axis", "=", "1", ")", "\n", "\n", "ent_bn_em", "=", "bn_em_seq", "[", ":", ",", ":", ":", "2", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'rnn'", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "            ", "cell", "=", "self", ".", "lstm_cell", "(", "True", ",", "options", ".", "keep_prob", ",", "options", ".", "num_layers", ")", "\n", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "bn_em_seq", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# with tf.variable_scope('transformer', reuse=reuse):", "\n", "#     outputs = transformer_model(input_tensor=bn_em_seq,", "\n", "#                                 hidden_size=hidden_size,", "\n", "#                                 intermediate_size=hidden_size*4,", "\n", "#                                 num_attention_heads=8)", "\n", "\n", "", "rel_outputs", "=", "outputs", "[", ":", ",", "1", ":", ":", "2", ",", ":", "]", "\n", "outputs", "=", "[", "outputs", "[", ":", ",", "i", ",", ":", "]", "for", "i", "in", "range", "(", "length", "-", "1", ")", "]", "\n", "\n", "ent_outputs", "=", "outputs", "[", ":", ":", "2", "]", "\n", "\n", "# RSN", "\n", "res_rel_outputs", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "rel_outputs", ",", "hidden_size", ",", "biases_initializer", "=", "None", ",", "\n", "activation_fn", "=", "None", ")", "+", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "\n", "ent_bn_em", ",", "hidden_size", ",", "biases_initializer", "=", "None", ",", "activation_fn", "=", "None", ")", "\n", "\n", "# recover the order", "\n", "res_rel_outputs", "=", "[", "res_rel_outputs", "[", ":", ",", "i", ",", ":", "]", "for", "i", "in", "range", "(", "(", "length", "-", "1", ")", "//", "2", ")", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "            ", "if", "i", "%", "2", "==", "0", ":", "\n", "                ", "outputs", ".", "append", "(", "ent_outputs", "[", "i", "//", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "outputs", ".", "append", "(", "res_rel_outputs", "[", "i", "//", "2", "]", ")", "\n", "\n", "# output bn", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'output_bn'", ")", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "bn_outputs", "=", "[", "tf", ".", "reshape", "(", "\n", "self", ".", "bn", "(", "outputs", "[", "i", "]", ",", "reuse", "=", "True", ")", ",", "[", "-", "1", ",", "1", ",", "hidden_size", "]", ")", "for", "i", "in", "range", "(", "length", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "                ", "bn_outputs", "=", "[", "tf", ".", "reshape", "(", "self", ".", "bn", "(", "outputs", "[", "i", "]", ",", "reuse", "=", "(", "\n", "i", "is", "not", "0", ")", ")", ",", "[", "-", "1", ",", "1", ",", "hidden_size", "]", ")", "for", "i", "in", "range", "(", "length", "-", "1", ")", "]", "\n", "\n", "", "", "def", "cal_loss", "(", "bn_outputs", ",", "seq", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "\n", "masks", "=", "np", ".", "random", ".", "choice", "(", "[", "0.", ",", "1.0", "]", ",", "size", "=", "batch_size", ",", "p", "=", "[", "0.5", ",", "0.5", "]", ")", "\n", "weight", "=", "tf", ".", "random_shuffle", "(", "tf", ".", "cast", "(", "masks", ",", "tf", ".", "float32", ")", ")", "\n", "for", "i", ",", "output", "in", "enumerate", "(", "bn_outputs", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "losses", ".", "append", "(", "self", ".", "sampled_loss", "(", "\n", "output", ",", "seq", "[", ":", ",", "i", "+", "1", "]", ",", "self", ".", "_rel_w", ",", "self", ".", "_rel_b", ",", "weight", "=", "weight", ",", "is_entity", "=", "i", ")", ")", "\n", "", "else", ":", "\n", "                    ", "losses", ".", "append", "(", "self", ".", "sampled_loss", "(", "\n", "output", ",", "seq", "[", ":", ",", "i", "+", "1", "]", ",", "self", ".", "_ent_w", ",", "self", ".", "_ent_b", ",", "weight", "=", "weight", ",", "is_entity", "=", "i", ")", ")", "\n", "", "", "losses", "=", "tf", ".", "stack", "(", "losses", ",", "axis", "=", "1", ")", "\n", "return", "losses", "\n", "\n", "", "seq_loss", "=", "cal_loss", "(", "bn_outputs", ",", "seq", ")", "\n", "\n", "losses", "=", "tf", ".", "reduce_sum", "(", "seq_loss", ")", "/", "batch_size", "\n", "\n", "return", "losses", ",", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._define_embed_graph": [[468, 483], ["rsn4ea.RSN4EA.build_sub_graph", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "tensorflow.get_collection", "tensorflow.gradients", "tensorflow.control_dependencies", "rsn4ea.RSN4EA._optimizer.apply_gradients", "zip", "tensorflow.train.get_or_create_global_step"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.build_sub_graph"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "options", "=", "self", ".", "_options", "\n", "\n", "loss", ",", "seq", "=", "self", ".", "build_sub_graph", "(", "length", "=", "options", ".", "max_length", ",", "reuse", "=", "False", ")", "\n", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "loss", ",", "tvars", ")", ",", "2.0", ")", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "train_op", "=", "self", ".", "_optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "tvars", ")", ",", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", ")", "\n", "\n", "", "self", ".", "_seq", ",", "self", ".", "_loss", ",", "self", ".", "_train_op", "=", "seq", ",", "loss", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.seq_train": [[485, 516], ["numpy.random.choice", "range", "len", "len", "rsn4ea.RSN4EA.session.run", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "seq_train", "(", "self", ",", "data", ",", "choices", "=", "None", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "opts", "=", "self", ".", "_options", "\n", "\n", "choices", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "data", ")", ",", "size", "=", "len", "(", "data", ")", ",", "replace", "=", "True", ")", "\n", "batch_size", "=", "opts", ".", "batch_size", "\n", "\n", "num_batch", "=", "len", "(", "data", ")", "//", "batch_size", "\n", "\n", "fetches", "=", "{", "\n", "'loss'", ":", "self", ".", "_loss", ",", "\n", "'train_op'", ":", "self", ".", "_train_op", "\n", "}", "\n", "\n", "losses", "=", "0", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "one_batch_choices", "=", "choices", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "one_batch_data", "=", "data", ".", "iloc", "[", "one_batch_choices", "]", "\n", "\n", "feed_dict", "=", "{", "}", "\n", "seq", "=", "one_batch_data", ".", "values", "[", ":", ",", ":", "opts", ".", "max_length", "]", "\n", "feed_dict", "[", "self", ".", "_seq", "]", "=", "seq", "\n", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", ",", "feed_dict", ")", "\n", "\n", "del", "one_batch_data", "\n", "\n", "loss", "=", "vals", "[", "'loss'", "]", "\n", "losses", "+=", "loss", "\n", "", "self", ".", "_last_mean_loss", "=", "losses", "/", "num_batch", "\n", "\n", "return", "self", ".", "_last_mean_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.co_teaching": [[518, 568], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "embeds1.eval.eval.eval", "embeds2.eval.eval.eval", "openea.modules.finding.similarity.sim", "rsn4ea.RSN4EA.sim_norm", "numpy.min", "numpy.max", "numpy.mean", "max", "print", "print", "openea.approaches.bootea.bootstrapping", "print", "bootstrapping_stable_matching", "print", "check_new_alignment", "rsn4ea.RSN4EA.sim_norm", "print", "re_stable_matching", "add_new_alignment", "check_new_alignment", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "range", "range", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.re_stable_matching", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.add_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment"], ["", "def", "co_teaching", "(", "self", ")", ":", "\n", "        ", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent2", ")", "\n", "embeds1", "=", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "sim_mat", "=", "self", ".", "sim_norm", "(", "sim_mat", ")", "\n", "min_val", "=", "np", ".", "min", "(", "sim_mat", ")", "\n", "max_val", "=", "np", ".", "max", "(", "sim_mat", ")", "\n", "avg_val", "=", "np", ".", "mean", "(", "sim_mat", ")", "\n", "sim_th", "=", "max", "(", "self", ".", "args", ".", "sim_th", ",", "(", "max_val", "+", "avg_val", ")", "/", "2", ")", "\n", "print", "(", "\"min, max, avg sim and sim_th:\"", ",", "min_val", ",", "max_val", ",", "avg_val", ",", "sim_th", ")", "\n", "\n", "sim_mat1", "=", "sim_mat", "\n", "sim_mat2", "=", "sim_mat", "\n", "\n", "# aligner1", "\n", "print", "(", "\"============= bootstrapping via aligner1 (graph matching) ============= \"", ")", "\n", "new_align1", ",", "_", ",", "_", "=", "bootstrapping", "(", "sim_mat1", ",", "ref_ent1", ",", "ref_ent2", ",", "self", ".", "labeled_align", ",", "sim_th", ",", "self", ".", "args", ".", "k", ")", "\n", "# aligner2", "\n", "print", "(", "\"============= bootstrapping via aligner2 (stable matching) ============= \"", ")", "\n", "new_align2", ",", "_", ",", "_", "=", "bootstrapping_stable_matching", "(", "sim_mat2", ",", "ref_ent1", ",", "ref_ent2", ",", "self", ".", "labeled_align", ",", "sim_th", ",", "\n", "self", ".", "args", ".", "k", ")", "\n", "\n", "agreement_align", "=", "new_align1", "&", "new_align2", "\n", "print", "(", "\"============= agreement alignment of aligner1 and aligner2 ============= \"", ")", "\n", "check_new_alignment", "(", "agreement_align", ",", "context", "=", "\"agreement_alignment\"", ")", "\n", "\n", "left_ents1_aligner1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "new_align1", "]", ")", "\n", "left_ents2_aligner1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "new_align1", "]", ")", "\n", "left_ents1_aligner2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "new_align2", "]", ")", "\n", "left_ents2_aligner2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "new_align2", "]", ")", "\n", "\n", "left_ents1", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent1", ")", ")", "]", ")", "-", "set", "(", "[", "i", "for", "i", ",", "j", "in", "agreement_align", "]", ")", "\n", "left_ents2", "=", "set", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "ref_ent2", ")", ")", "]", ")", "-", "set", "(", "[", "j", "for", "i", ",", "j", "in", "agreement_align", "]", ")", "\n", "\n", "ensemble_sim_mat", "=", "self", ".", "sim_norm", "(", "sim_mat1", "+", "sim_mat2", ")", "\n", "print", "(", "\"============= re stable alignment  ============= \"", ")", "\n", "re_matching", "=", "re_stable_matching", "(", "left_ents1", ",", "left_ents2", ",", "ensemble_sim_mat", ",", "sim_th", "+", "0.1", ",", "self", ".", "args", ".", "k", ")", "\n", "\n", "new_alignment", "=", "agreement_align", "|", "re_matching", "\n", "self", ".", "labeled_align", "=", "add_new_alignment", "(", "self", ".", "labeled_align", ",", "new_alignment", ",", "ensemble_sim_mat", ")", "\n", "check_new_alignment", "(", "self", ".", "labeled_align", ",", "context", "=", "\"final new alignment\"", ")", "\n", "\n", "self", ".", "new_sup_links", "=", "[", "(", "ref_ent1", "[", "i", "]", ",", "ref_ent2", "[", "j", "]", ")", "for", "i", ",", "j", "in", "self", ".", "labeled_align", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm": [[569, 575], ["numpy.min", "numpy.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sim_norm", "(", "csls_sim_mat", ")", ":", "\n", "        ", "min_val", "=", "np", ".", "min", "(", "csls_sim_mat", ")", "\n", "max_val", "=", "np", ".", "max", "(", "csls_sim_mat", ")", "\n", "val_range", "=", "max_val", "-", "min_val", "\n", "return", "(", "csls_sim_mat", "-", "min_val", ")", "/", "val_range", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.self_training": [[576, 600], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "embeds1.eval.eval.eval", "embeds2.eval.eval.eval", "openea.modules.finding.similarity.sim", "rsn4ea.RSN4EA.sim_norm", "numpy.min", "numpy.max", "numpy.mean", "max", "print", "bootstrapping_stable_matching", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sim_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.cycle.bootstrapping_stable_matching"], ["", "def", "self_training", "(", "self", ")", ":", "\n", "        ", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent2", ")", "\n", "embeds1", "=", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "sim_mat", "=", "self", ".", "sim_norm", "(", "sim_mat", ")", "\n", "min_val", "=", "np", ".", "min", "(", "sim_mat", ")", "\n", "max_val", "=", "np", ".", "max", "(", "sim_mat", ")", "\n", "avg_val", "=", "np", ".", "mean", "(", "sim_mat", ")", "\n", "sim_th", "=", "max", "(", "self", ".", "args", ".", "sim_th", ",", "(", "max_val", "+", "avg_val", ")", "/", "2", ")", "\n", "print", "(", "\"min, max, avg sim and sim_th:\"", ",", "min_val", ",", "max_val", ",", "avg_val", ",", "sim_th", ")", "\n", "# self.labeled_align, new_sup_ent1, new_sup_ent2 = bootstrapping(sim_mat, ref_ent1, ref_ent2,", "\n", "#                                                                self.labeled_align, sim_th,", "\n", "#                                                                self.args.k)", "\n", "self", ".", "labeled_align", ",", "new_sup_ent1", ",", "new_sup_ent2", "=", "bootstrapping_stable_matching", "(", "sim_mat", ",", "ref_ent1", ",", "ref_ent2", ",", "\n", "self", ".", "labeled_align", ",", "sim_th", ",", "\n", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "new_sup_links", "=", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.csls_norm": [[601, 606], ["numpy.min", "numpy.max"], "methods", ["None"], ["", "def", "csls_norm", "(", "self", ",", "csls_sim_mat", ")", ":", "\n", "        ", "min_val", "=", "np", ".", "min", "(", "csls_sim_mat", ")", "\n", "max_val", "=", "np", ".", "max", "(", "csls_sim_mat", ")", "\n", "val_range", "=", "max_val", "-", "min_val", "\n", "return", "(", "csls_sim_mat", "-", "min_val", ")", "/", "val_range", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.eval_ref_sim_mat": [[607, 618], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "embeds1.eval.eval.eval", "embeds2.eval.eval.eval", "openea.modules.finding.similarity.sim", "rsn4ea.RSN4EA.csls_norm"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.csls_norm"], ["", "def", "eval_ref_sim_mat", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "embeds1", "=", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "sim_mat", "=", "self", ".", "csls_norm", "(", "sim_mat", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.bootstrapping": [[619, 635], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "embeds1.eval.eval.eval", "embeds2.eval.eval.eval", "openea.modules.finding.similarity.sim", "rsn4ea.RSN4EA.csls_norm", "openea.approaches.bootea.bootstrapping", "range", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.csls_norm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping"], ["", "def", "bootstrapping", "(", "self", ")", ":", "\n", "        ", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "ref_ent2", ")", "\n", "embeds1", "=", "embeds1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "embeds2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "\n", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "sim_mat", "=", "self", ".", "csls_norm", "(", "sim_mat", ")", "\n", "self", ".", "labeled_align", ",", "new_sup_ent1", ",", "new_sup_ent2", "=", "bootstrapping", "(", "sim_mat", ",", "ref_ent1", ",", "ref_ent2", ",", "\n", "self", ".", "labeled_align", ",", "self", ".", "args", ".", "sim_th", ",", "\n", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "new_sup_links", "=", "[", "(", "new_sup_ent1", "[", "i", "]", ",", "new_sup_ent2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "new_sup_ent1", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.compute_pos_loss": [[636, 645], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "def", "compute_pos_loss", "(", "self", ",", "pos_links", ")", ":", "\n", "        ", "index1", "=", "pos_links", "[", ":", ",", "0", "]", "\n", "index2", "=", "pos_links", "[", ":", ",", "1", "]", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "tf", ".", "cast", "(", "index1", ",", "tf", ".", "int32", ")", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "tf", ".", "cast", "(", "index2", ",", "tf", ".", "int32", ")", ")", "\n", "embeds1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds1", ",", "1", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds2", ",", "1", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "embeds1", "-", "embeds2", ")", ",", "1", ")", ")", "\n", "return", "pos_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA._generate_semi_graph": [[646, 650], ["tensorflow.placeholder", "rsn4ea.RSN4EA.compute_pos_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.compute_pos_loss"], ["", "def", "_generate_semi_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_pos_links", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "2", "]", ",", "name", "=", "\"semi_align\"", ")", "\n", "self", ".", "semi_loss", "=", "self", ".", "compute_pos_loss", "(", "self", ".", "new_pos_links", ")", "\n", "self", ".", "semi_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "semi_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.semi_train": [[651, 669], ["len", "rsn4ea.RSN4EA.session.run", "print", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "semi_train", "(", "self", ")", ":", "\n", "# if len(self.new_sup_links) > 0:", "\n", "#     fetches = {\"loss\": self.semi_loss, \"optimizer\": self.semi_optimizer}", "\n", "#     batch_size = min(len(self.new_sup_links), self.args.batch_size)", "\n", "#     steps = len(self.new_sup_links) // batch_size + 1", "\n", "#     loss = 0.0", "\n", "#     for i in range(steps):", "\n", "#         batch_links = random.sample(self.new_sup_links, batch_size)", "\n", "#         feed_dict = {self.new_pos_links: batch_links}", "\n", "#         vals = self.session.run(fetches=fetches, feed_dict=feed_dict)", "\n", "#         loss += vals['loss'] / len(batch_links)", "\n", "#     print('bp_loss: %.3f' % (loss / steps))", "\n", "        ", "if", "len", "(", "self", ".", "new_sup_links", ")", ">", "0", ":", "\n", "            ", "fetches", "=", "{", "\"loss\"", ":", "self", ".", "semi_loss", ",", "\"optimizer\"", ":", "self", ".", "semi_optimizer", "}", "\n", "feed_dict", "=", "{", "self", ".", "new_pos_links", ":", "self", ".", "new_sup_links", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "loss", "=", "vals", "[", "'loss'", "]", "/", "len", "(", "self", ".", "new_sup_links", ")", "\n", "print", "(", "'bp_loss: %.3f'", "%", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.launch_rsn4ea_training_k_repo": [[670, 676], ["range", "time.time", "rsn4ea.RSN4EA.seq_train", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.seq_train", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "launch_rsn4ea_training_k_repo", "(", "self", ",", "iter", ",", "iter_nums", ",", "train_data", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "time_i", "=", "time", ".", "time", "(", ")", "\n", "epoch", "=", "(", "iter", "-", "1", ")", "*", "iter_nums", "+", "i", "\n", "last_mean_loss", "=", "self", ".", "seq_train", "(", "train_data", ")", "\n", "print", "(", "'epoch %i, avg. batch_loss: %f,  cost time: %.4f s'", "%", "(", "epoch", ",", "last_mean_loss", ",", "time", ".", "time", "(", ")", "-", "time_i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.run": [[677, 693], ["time.time", "range", "print", "time.time", "rsn4ea.RSN4EA.seq_train", "print", "openea.modules.finding.evaluation.early_stop", "rsn4ea.RSN4EA.valid", "rsn4ea.RSN4EA.bootstrapping", "rsn4ea.RSN4EA.semi_train", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.seq_train", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.semi_train"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "train_data", "=", "self", ".", "_train_data", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "time_i", "=", "time", ".", "time", "(", ")", "\n", "last_mean_loss", "=", "self", ".", "seq_train", "(", "train_data", ")", "\n", "print", "(", "'epoch %i, avg. batch_loss: %f,  cost time: %.4f s'", "%", "(", "i", ",", "last_mean_loss", ",", "time", ".", "time", "(", ")", "-", "time_i", ")", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "and", "i", ">", "self", ".", "args", ".", "min_epoch", ":", "\n", "                    ", "break", "\n", "", "if", "self", ".", "args", ".", "sim_th", ">", "0.0", ":", "\n", "                    ", "self", ".", "bootstrapping", "(", ")", "\n", "self", ".", "semi_train", "(", ")", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.__init__": [[42, 61], ["openea.models.basic_model.BasicModel.__init__", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "desc_batch_size", "=", "None", "\n", "self", ".", "negative_indication_weight", "=", "None", "\n", "self", ".", "wv_dim", "=", "None", "\n", "self", ".", "default_desc_length", "=", "None", "\n", "self", ".", "word_embed", "=", "None", "\n", "\n", "self", ".", "desc_sim_th", "=", "None", "\n", "self", ".", "sim_th", "=", "None", "\n", "\n", "self", ".", "word_em", "=", "None", "\n", "self", ".", "e_desc", "=", "None", "\n", "\n", "self", ".", "ref_entities1", "=", "None", "\n", "self", ".", "ref_entities2", "=", "None", "\n", "\n", "self", ".", "new_alignment", "=", "set", "(", ")", "\n", "self", ".", "new_alignment_index", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.init": [[62, 87], ["kdcoe.KDCoE._get_desc_input", "kdcoe.KDCoE._define_variables", "kdcoe.KDCoE._define_mapping_variables", "kdcoe.KDCoE._define_embed_graph", "kdcoe.KDCoE._define_mapping_graph", "kdcoe.KDCoE._define_mapping_graph_new", "kdcoe.KDCoE._define_desc_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_desc_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.models.basic_model.BasicModel._define_mapping_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_mapping_graph_new", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_desc_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "args", ".", "alpha", ">", "1", "\n", "\n", "self", ".", "desc_batch_size", "=", "self", ".", "args", ".", "desc_batch_size", "\n", "self", ".", "negative_indication_weight", "=", "-", "1.", "/", "self", ".", "desc_batch_size", "\n", "self", ".", "wv_dim", "=", "self", ".", "args", ".", "wv_dim", "\n", "self", ".", "default_desc_length", "=", "self", ".", "args", ".", "default_desc_length", "\n", "self", ".", "word_embed", "=", "self", ".", "args", ".", "word_embed", "\n", "self", ".", "desc_sim_th", "=", "self", ".", "args", ".", "desc_sim_th", "\n", "self", ".", "sim_th", "=", "self", ".", "args", ".", "sim_th", "\n", "\n", "self", ".", "word_em", ",", "self", ".", "e_desc", "=", "self", ".", "_get_desc_input", "(", ")", "\n", "\n", "self", ".", "ref_entities1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_entities2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_mapping_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_mapping_graph", "(", ")", "\n", "self", ".", "_define_mapping_graph_new", "(", ")", "\n", "self", ".", "_define_desc_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_desc_input": [[88, 231], ["dict", "print", "time.time", "pandas.DataFrame", "pandas.DataFrame", "pandas.Series", "pandas.Series", "desc_uris1.index.values.tolist", "desc_uris2.index.values.tolist", "print", "print", "e_desc1.drop_duplicates.drop_duplicates.drop_duplicates", "e_desc2.drop_duplicates.drop_duplicates.drop_duplicates", "print", "print", "e_desc1.drop_duplicates.drop_duplicates.iloc[].values.tolist", "set", "e_desc1.drop_duplicates.drop_duplicates.index.values.tolist", "print", "e_desc2.drop_duplicates.drop_duplicates.iloc[].values.tolist", "set", "print", "e_desc1.drop_duplicates.drop_duplicates.iloc[].str.replace().str.split", "e_desc2.drop_duplicates.drop_duplicates.iloc[].str.replace().str.split", "kdcoe.KDCoE._get_local_name_by_name_triple", "pandas.DataFrame", "pandas.DataFrame.iloc[].str.replace().str.split", "pandas.Series.str.split", "pd.Series.str.split.apply", "pd.Series.str.split.apply", "print", "numpy.stack().astype", "numpy.append", "print", "pandas.Series", "len", "pandas.concat", "print", "pandas.DataFrame.iloc[].apply", "pandas.DataFrame", "numpy.stack", "print", "zip", "len", "list", "list", "len", "len", "len", "len", "len", "len", "open", "f.readlines", "pandas.Series", "numpy.zeros", "list", "numpy.repeat", "range", "kdcoe.KDCoE.kgs.kg1.attributes_id_dict.values", "kdcoe.KDCoE.kgs.kg2.attributes_id_dict.values", "pandas.DataFrame.iloc[].isin", "pandas.DataFrame.iloc[].isin", "numpy.stack", "set", "pandas.Series", "pandas.Series", "list", "pandas.Series.str.findall().apply", "pandas.Series.str.findall().apply", "e_desc1.drop_duplicates.drop_duplicates.iloc[].str.replace", "e_desc2.drop_duplicates.drop_duplicates.iloc[].str.replace", "pandas.DataFrame.iloc[].str.replace", "pandas.Series.isin", "time.time", "len", "pandas.Series.str.findall", "len", "pandas.Series.str.findall", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_local_name_by_name_triple", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "_get_desc_input", "(", "self", ")", ":", "\n", "\n", "        ", "list1", "=", "self", ".", "kgs", ".", "train_entities1", "+", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "list2", "=", "self", ".", "kgs", ".", "train_entities2", "+", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "aligned_dict", "=", "dict", "(", "zip", "(", "list1", ",", "list2", ")", ")", "\n", "print", "(", "\"aligned dict\"", ",", "len", "(", "aligned_dict", ")", ")", "\n", "\n", "# desc graph settings", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# find desc", "\n", "model", "=", "self", "\n", "at1", "=", "pd", ".", "DataFrame", "(", "model", ".", "kgs", ".", "kg1", ".", "attribute_triples_list", ")", "\n", "at2", "=", "pd", ".", "DataFrame", "(", "model", ".", "kgs", ".", "kg2", ".", "attribute_triples_list", ")", "\n", "\"\"\"\n               0    1                                                  2\n        0  22816  168  \"4000.1952\"^^<http://www.w3.org/2001/XMLSchema...\n        1  14200    6  \"1.82\"^^<http://www.w3.org/2001/XMLSchema#double>\n        2  20874   38                                              99657\n        \"\"\"", "\n", "aid1", "=", "pd", ".", "Series", "(", "list", "(", "model", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ")", ",", "index", "=", "model", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "values", "(", ")", ")", "\n", "aid2", "=", "pd", ".", "Series", "(", "list", "(", "model", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", ",", "index", "=", "model", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "values", "(", ")", ")", "\n", "\"\"\"\n        0                         http://xmlns.com/foaf/0.1/name\n        2                  http://dbpedia.org/ontology/birthDate\n        \"\"\"", "\n", "\"\"\"\n        1                      http://dbpedia.org/ontology/years\n        3        http://dbpedia.org/ontology/appearancesInLeague\n        \"\"\"", "\n", "uri_name", "=", "'description'", "# in Wikidata, the attribute is http://schema.org/description", "\n", "desc_uris1", "=", "aid1", "[", "aid1", ".", "str", ".", "findall", "(", "uri_name", ")", ".", "apply", "(", "lambda", "x", ":", "len", "(", "x", ")", ")", ">", "0", "]", "\n", "desc_uris2", "=", "aid2", "[", "aid2", ".", "str", ".", "findall", "(", "uri_name", ")", ".", "apply", "(", "lambda", "x", ":", "len", "(", "x", ")", ")", ">", "0", "]", "\n", "\"\"\"\n        8      http://purl.org/dc/elements/1.1/description\n        462        http://dbpedia.org/ontology/description\n        464    http://dbpedia.org/ontology/depictionDescription\n        \"\"\"", "\n", "\"\"\"\n        31     http://dbpedia.org/ontology/depictionDescription\n        123           http://purl.org/dc/terms/description\n        183    http://purl.org/dc/elements/1.1/description\n        \"\"\"", "\n", "desc_ids1", "=", "desc_uris1", ".", "index", ".", "values", ".", "tolist", "(", ")", "\n", "desc_ids2", "=", "desc_uris2", ".", "index", ".", "values", ".", "tolist", "(", ")", "\n", "\"\"\"\n        [31 123 183]\n        \"\"\"", "\n", "e_desc1", "=", "at1", "[", "at1", ".", "iloc", "[", ":", ",", "1", "]", ".", "isin", "(", "desc_ids1", ")", "]", "\n", "e_desc2", "=", "at2", "[", "at2", ".", "iloc", "[", ":", ",", "1", "]", ".", "isin", "(", "desc_ids2", ")", "]", "\n", "print", "(", "\"kg1 descriptions:\"", ",", "len", "(", "e_desc1", ")", ")", "\n", "print", "(", "\"kg2 descriptions:\"", ",", "len", "(", "e_desc2", ")", ")", "\n", "\"\"\"\n        156083   7169   31                        Tomasz Wisio (2016, rechts)\n        156127   1285   31     Olk (links) mitFranz BeckenbauerundGerd M\u00fcller\n        \"\"\"", "\n", "e_desc1", "=", "e_desc1", ".", "drop_duplicates", "(", "subset", "=", "0", ")", "\n", "e_desc2", "=", "e_desc2", ".", "drop_duplicates", "(", "subset", "=", "0", ")", "\n", "print", "(", "\"after drop_duplicates, kg1 descriptions:\"", ",", "len", "(", "e_desc1", ")", ")", "\n", "print", "(", "\"after drop_duplicates, kg2 descriptions:\"", ",", "len", "(", "e_desc2", ")", ")", "\n", "\n", "ents_w_desc1_list", "=", "e_desc1", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ".", "tolist", "(", ")", "\n", "ents_w_desc1", "=", "set", "(", "ents_w_desc1_list", ")", "\n", "ents_w_desc1_index", "=", "e_desc1", ".", "index", ".", "values", ".", "tolist", "(", ")", "\n", "print", "(", "\"kg1 entities having descriptions:\"", ",", "len", "(", "ents_w_desc1", ")", ")", "\n", "ents_w_desc2_list", "=", "e_desc2", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ".", "tolist", "(", ")", "\n", "ents_w_desc2", "=", "set", "(", "ents_w_desc2_list", ")", "\n", "print", "(", "\"kg2 entities having descriptions:\"", ",", "len", "(", "ents_w_desc2", ")", ")", "\n", "\n", "# drop_desc_index1 = []", "\n", "# selected_ent2_ids = []", "\n", "# for i in range(len(ents_w_desc1_list)):", "\n", "#     aligned_ent2 = aligned_dict.get(ents_w_desc1_list[i], None)", "\n", "#     if aligned_ent2 not in ents_w_desc2:", "\n", "#         drop_desc_index1.append(ents_w_desc1_index[i])", "\n", "#     else:", "\n", "#         selected_ent2_ids.append(aligned_ent2)", "\n", "# e_desc1 = e_desc1.drop(drop_desc_index1)", "\n", "# e_desc2 = e_desc2[e_desc2.iloc[:, 0].isin(selected_ent2_ids)]", "\n", "# print(\"after alignment, kg1 descriptions:\", len(e_desc1))", "\n", "# print(\"after alignment, kg2 descriptions:\", len(e_desc2))", "\n", "# ents_w_desc1_list = e_desc1.iloc[:, 0].values.tolist()", "\n", "# ents_w_desc1 = set(ents_w_desc1_list)", "\n", "# ents_w_desc2_list = e_desc2.iloc[:, 0].values.tolist()", "\n", "# ents_w_desc2 = set(ents_w_desc2_list)", "\n", "# print(\"after alignment, kg1 entities having descriptions:\", len(ents_w_desc1))", "\n", "# print(\"after alignment, kg2 entities having descriptions:\", len(ents_w_desc2))", "\n", "\n", "# prepare desc", "\n", "e_desc1", ".", "iloc", "[", ":", ",", "2", "]", "=", "e_desc1", ".", "iloc", "[", ":", ",", "2", "]", ".", "str", ".", "replace", "(", "r'[{}]+'", ".", "format", "(", "string", ".", "punctuation", ")", ",", "''", ")", ".", "str", ".", "split", "(", "' '", ")", "\n", "e_desc2", ".", "iloc", "[", ":", ",", "2", "]", "=", "e_desc2", ".", "iloc", "[", ":", ",", "2", "]", ".", "str", ".", "replace", "(", "r'[{}]+'", ".", "format", "(", "string", ".", "punctuation", ")", ",", "''", ")", ".", "str", ".", "split", "(", "' '", ")", "\n", "\"\"\"\n        155791                            [Tiffeny, Milbrett, 2003]\n        155801        [Plattspitzen, von, Nordosten, Jubil\u00e4umsgrat]\n        \"\"\"", "\n", "name_triples", "=", "self", ".", "_get_local_name_by_name_triple", "(", ")", "\n", "names", "=", "pd", ".", "DataFrame", "(", "name_triples", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "str", ".", "replace", "(", "r'[{}]+'", ".", "format", "(", "string", ".", "punctuation", ")", ",", "''", ")", ".", "str", ".", "split", "(", "' '", ")", "\n", "names", ".", "iloc", "[", "e_desc1", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ",", "[", "1", ",", "2", "]", "]", "=", "e_desc1", ".", "iloc", "[", ":", ",", "[", "1", ",", "2", "]", "]", ".", "values", "\n", "names", ".", "iloc", "[", "e_desc2", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ",", "[", "1", ",", "2", "]", "]", "=", "e_desc2", ".", "iloc", "[", ":", ",", "[", "1", ",", "2", "]", "]", ".", "values", "\n", "\"\"\"\n        29998  29998 -1                                      [Til, Death]\n        29999  29999 -1  [You, Gotta, Fight, for, Your, Right, to, Party]\n        \"\"\"", "\n", "\n", "# load word embedding", "\n", "with", "open", "(", "self", ".", "word_embed", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "w", "=", "f", ".", "readlines", "(", ")", "\n", "w", "=", "pd", ".", "Series", "(", "w", "[", "1", ":", "]", ")", "\n", "\n", "", "we", "=", "w", ".", "str", ".", "split", "(", "' '", ")", "\n", "word", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "w_em", "=", "we", ".", "apply", "(", "lambda", "x", ":", "x", "[", "1", ":", "-", "1", "]", ")", "\n", "print", "(", "'concat word embeddings'", ")", "\n", "word_em", "=", "np", ".", "stack", "(", "w_em", ".", "values", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "word_em", "=", "np", ".", "append", "(", "word_em", ",", "np", ".", "zeros", "(", "[", "1", ",", "300", "]", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "'convert words to ids'", ")", "\n", "w_in_desc", "=", "[", "]", "\n", "for", "l", "in", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ":", "\n", "            ", "w_in_desc", "+=", "l", "\n", "", "w_in_desc", "=", "pd", ".", "Series", "(", "list", "(", "set", "(", "w_in_desc", ")", ")", ")", "\n", "un_logged_words", "=", "w_in_desc", "[", "~", "w_in_desc", ".", "isin", "(", "word", ")", "]", "\n", "un_logged_id", "=", "len", "(", "word", ")", "\n", "\n", "all_word", "=", "pd", ".", "concat", "(", "\n", "[", "pd", ".", "Series", "(", "word", ".", "index", ",", "word", ".", "values", ")", ",", "\n", "pd", ".", "Series", "(", "[", "un_logged_id", ",", "]", "*", "len", "(", "un_logged_words", ")", ",", "index", "=", "un_logged_words", ")", "]", ")", "\n", "\n", "def", "lookup_and_padding", "(", "x", ")", ":", "\n", "            ", "default_length", "=", "4", "\n", "ids", "=", "list", "(", "all_word", ".", "loc", "[", "x", "]", ".", "values", ")", "+", "[", "all_word", ".", "iloc", "[", "-", "1", "]", ",", "]", "*", "default_length", "\n", "return", "ids", "[", ":", "default_length", "]", "\n", "\n", "", "print", "(", "'look up desc embeddings'", ")", "\n", "names", ".", "iloc", "[", ":", ",", "2", "]", "=", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "apply", "(", "lookup_and_padding", ")", "\n", "\n", "# entity-desc-embedding dataframe", "\n", "e_desc_input", "=", "pd", ".", "DataFrame", "(", "np", ".", "repeat", "(", "[", "[", "un_logged_id", ",", "]", "*", "4", "]", ",", "model", ".", "kgs", ".", "entities_num", ",", "axis", "=", "0", ")", ",", "\n", "range", "(", "model", ".", "kgs", ".", "entities_num", ")", ")", "\n", "\n", "e_desc_input", ".", "iloc", "[", "names", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", "]", "=", "np", ".", "stack", "(", "names", ".", "iloc", "[", ":", ",", "2", "]", ".", "values", ")", "\n", "\n", "print", "(", "'generating desc input costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "word_em", ",", "e_desc_input", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._get_local_name_by_name_triple": [[232, 281], ["list", "kdcoe.KDCoE.kgs.kg1.entities_id_dict.items", "kdcoe.KDCoE.kgs.kg2.entities_id_dict.items", "set", "kdcoe.KDCoE.kgs.kg1.attributes_id_dict.items", "kdcoe.KDCoE.kgs.kg2.attributes_id_dict.items", "kdcoe.KDCoE.kgs.kg1.attributes_id_dict.items", "kdcoe.KDCoE.kgs.kg2.attributes_id_dict.items", "list", "local_name_dict.items", "v.rstrip.rstrip.strip", "v.rstrip.rstrip.endswith", "list.append", "list.append", "v.rstrip.rstrip.rstrip", "set.add", "set.add", "print", "print", "[].replace", "id_ent_dict[].split"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "_get_local_name_by_name_triple", "(", "self", ",", "name_attribute_list", "=", "None", ")", ":", "\n", "        ", "if", "name_attribute_list", "is", "None", ":", "\n", "            ", "if", "'D_Y'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'skos:prefLabel'", ",", "'http://dbpedia.org/ontology/birthName'", "}", "\n", "", "elif", "'D_W'", "in", "self", ".", "args", ".", "training_data", ":", "\n", "                ", "name_attribute_list", "=", "{", "'http://www.wikidata.org/entity/P373'", ",", "'http://www.wikidata.org/entity/P1476'", "}", "\n", "", "else", ":", "\n", "                ", "name_attribute_list", "=", "{", "}", "\n", "\n", "# triples = self.kgs.kg1.local_attribute_triples_set | self.kgs.kg2.local_attribute_triples_set", "\n", "", "", "local_triples", "=", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_set", "|", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_set", "\n", "triples", "=", "list", "(", ")", "\n", "for", "h", ",", "a", ",", "v", "in", "local_triples", ":", "\n", "            ", "v", "=", "v", ".", "strip", "(", "'\"'", ")", "\n", "if", "v", ".", "endswith", "(", "'\"@eng'", ")", ":", "\n", "                ", "v", "=", "v", ".", "rstrip", "(", "'\"@eng'", ")", "\n", "", "triples", ".", "append", "(", "(", "h", ",", "a", ",", "v", ")", ")", "\n", "", "id_ent_dict", "=", "{", "}", "\n", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg1", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "", "for", "e", ",", "e_id", "in", "self", ".", "kgs", ".", "kg2", ".", "entities_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "id_ent_dict", "[", "e_id", "]", "=", "e", "\n", "\n", "", "name_ids", "=", "set", "(", ")", "\n", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a", "in", "name_attribute_list", ":", "\n", "                ", "name_ids", ".", "add", "(", "a_id", ")", "\n", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "for", "a", ",", "a_id", "in", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "a_id", "in", "name_ids", ":", "\n", "                ", "print", "(", "a", ")", "\n", "", "", "local_name_dict", "=", "{", "}", "\n", "ents", "=", "self", ".", "kgs", ".", "kg1", ".", "entities_set", "|", "self", ".", "kgs", ".", "kg2", ".", "entities_set", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "if", "a", "in", "name_ids", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "v", "\n", "", "", "for", "e", "in", "ents", ":", "\n", "            ", "if", "e", "not", "in", "local_name_dict", ":", "\n", "                ", "local_name_dict", "[", "e", "]", "=", "id_ent_dict", "[", "e", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "", "name_triples", "=", "list", "(", ")", "\n", "for", "e", ",", "n", "in", "local_name_dict", ".", "items", "(", ")", ":", "\n", "            ", "name_triples", ".", "append", "(", "(", "e", ",", "-", "1", ",", "n", ")", ")", "\n", "", "return", "name_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_variables": [[282, 288], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_embed_graph": [[289, 308], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.margin_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.margin_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "margin_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ".", "margin", ",", "self", ".", "args", ".", "loss_norm", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_desc_graph": [[309, 373], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.keras.layers.GRU", "tensorflow.contrib.keras.layers.GRU", "tensorflow.contrib.keras.layers.Conv1D", "tensorflow.contrib.keras.layers.Dense", "tensorflow.contrib.keras.layers.Dense", "tensorflow.contrib.keras.layers.Dense", "tensorflow.contrib.keras.layers.Conv1D.", "tensorflow.contrib.keras.layers.Conv1D.", "tensorflow.contrib.keras.activations.softmax", "tensorflow.contrib.keras.activations.softmax", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.contrib.keras.layers.GRU.", "tensorflow.contrib.keras.layers.GRU.", "tensorflow.contrib.keras.activations.softmax", "tensorflow.contrib.keras.activations.softmax", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "numpy.empty", "tensorflow.constant.fill", "numpy.fill_diagonal", "tensorflow.constant", "openea.modules.base.optimizers.get_optimizer().minimize", "tensorflow.contrib.keras.layers.GRU.", "tensorflow.contrib.keras.layers.GRU.", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.scalar_mul", "tensorflow.scalar_mul", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.contrib.keras.layers.Dense.", "tensorflow.reduce_sum", "openea.modules.base.optimizers.get_optimizer", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.get_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "", "def", "_define_desc_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'desc'", ")", ":", "\n", "            ", "self", ".", "desc1", "=", "AM_desc1_batch", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "default_desc_length", ",", "self", ".", "wv_dim", "]", ",", "\n", "name", "=", "'desc1'", ")", "\n", "\n", "self", ".", "desc2", "=", "AM_desc2_batch", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "default_desc_length", ",", "self", ".", "wv_dim", "]", ",", "\n", "name", "=", "'desc2'", ")", "\n", "\n", "gru_1", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "GRU", "(", "units", "=", "self", ".", "wv_dim", ",", "return_sequences", "=", "True", ")", "\n", "\n", "gru_5", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "GRU", "(", "units", "=", "self", ".", "wv_dim", ",", "return_sequences", "=", "True", ")", "\n", "\n", "conv1", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "Conv1D", "(", "filters", "=", "self", ".", "wv_dim", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "activation", "=", "tf", ".", "tanh", ",", "\n", "padding", "=", "'valid'", ",", "use_bias", "=", "True", ")", "\n", "\n", "ds3", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "self", ".", "wv_dim", ",", "activation", "=", "tf", ".", "tanh", ",", "use_bias", "=", "True", ")", "\n", "\n", "self", ".", "_att1", "=", "att1", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "activation", "=", "'tanh'", ",", "use_bias", "=", "True", ")", "\n", "self", ".", "_att3", "=", "att3", "=", "tf", ".", "contrib", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "1", ",", "activation", "=", "'tanh'", ",", "use_bias", "=", "True", ")", "\n", "\n", "# gru_+att1", "\n", "mp1_b", "=", "conv1", "(", "gru_1", "(", "AM_desc1_batch", ")", ")", "\n", "mp2_b", "=", "conv1", "(", "gru_1", "(", "AM_desc2_batch", ")", ")", "\n", "\n", "att1_w", "=", "tf", ".", "contrib", ".", "keras", ".", "activations", ".", "softmax", "(", "att1", "(", "mp1_b", ")", ",", "axis", "=", "-", "2", ")", "\n", "att2_w", "=", "tf", ".", "contrib", ".", "keras", ".", "activations", ".", "softmax", "(", "att1", "(", "mp2_b", ")", ",", "axis", "=", "-", "2", ")", "\n", "\n", "size1", "=", "self", ".", "default_desc_length", "\n", "\n", "mp1_b", "=", "tf", ".", "multiply", "(", "mp1_b", ",", "tf", ".", "scalar_mul", "(", "size1", ",", "att1_w", ")", ")", "\n", "mp2_b", "=", "tf", ".", "multiply", "(", "mp2_b", ",", "tf", ".", "scalar_mul", "(", "size1", ",", "att2_w", ")", ")", "\n", "\n", "# gru_+at3", "\n", "mp1_b", "=", "gru_5", "(", "mp1_b", ")", "\n", "mp2_b", "=", "gru_5", "(", "mp2_b", ")", "\n", "\n", "att1_w", "=", "tf", ".", "contrib", ".", "keras", ".", "activations", ".", "softmax", "(", "att3", "(", "mp1_b", ")", ",", "axis", "=", "-", "2", ")", "\n", "att2_w", "=", "tf", ".", "contrib", ".", "keras", ".", "activations", ".", "softmax", "(", "att3", "(", "mp2_b", ")", ",", "axis", "=", "-", "2", ")", "\n", "\n", "mp1_b", "=", "tf", ".", "multiply", "(", "mp1_b", ",", "att1_w", ")", "\n", "mp2_b", "=", "tf", ".", "multiply", "(", "mp2_b", ",", "att2_w", ")", "\n", "\n", "# last ds", "\n", "ds1_b", "=", "tf", ".", "reduce_sum", "(", "mp1_b", ",", "1", ")", "\n", "ds2_b", "=", "tf", ".", "reduce_sum", "(", "mp2_b", ",", "1", ")", "\n", "eb_desc_batch1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ds3", "(", "ds1_b", ")", ",", "dim", "=", "1", ")", "\n", "eb_desc_batch2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ds3", "(", "ds2_b", ")", ",", "dim", "=", "1", ")", "# tf.nn.l2_normalize(DS4(ds2_b), dim=1)", "\n", "\n", "indicator", "=", "np", ".", "empty", "(", "(", "self", ".", "desc_batch_size", ",", "self", ".", "desc_batch_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indicator", ".", "fill", "(", "self", ".", "negative_indication_weight", ")", "\n", "np", ".", "fill_diagonal", "(", "indicator", ",", "1.", ")", "\n", "indicator", "=", "tf", ".", "constant", "(", "indicator", ")", "\n", "\n", "self", ".", "desc_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "tf", ".", "multiply", "(", "tf", ".", "matmul", "(", "eb_desc_batch1", ",", "\n", "tf", ".", "transpose", "(", "eb_desc_batch2", ")", ")", ",", "\n", "indicator", ")", ")", "+", "0.", ")", ")", "/", "self", ".", "desc_batch_size", "\n", "\n", "self", ".", "desc_embedding1", "=", "eb_desc_batch1", "\n", "self", ".", "desc_embedding2", "=", "eb_desc_batch2", "\n", "\n", "# opt_vars = [v for v in tf.trainable_variables() if v.name.startswith(\"desc\")]", "\n", "self", ".", "desc_optimizer", "=", "get_optimizer", "(", "self", ".", "args", ".", "optimizer", ",", "self", ".", "args", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "desc_loss", ")", "\n", "# generate_optimizer(self.desc_loss, self.args.learning_rate,", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE._define_mapping_graph_new": [[377, 388], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.mapping_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.mapping_loss"], ["", "", "def", "_define_mapping_graph_new", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'seed_links_placeholder_new'", ")", ":", "\n", "            ", "self", ".", "seed_entities1_new", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "seed_entities2_new", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'seed_links_lookup_new'", ")", ":", "\n", "            ", "tes1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "seed_entities1_new", ")", "\n", "tes2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "seed_entities2_new", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'mapping_loss_new'", ")", ":", "\n", "            ", "self", ".", "mapping_loss_new", "=", "self", ".", "args", ".", "new_param", "*", "mapping_loss", "(", "tes1", ",", "tes2", ",", "self", ".", "mapping_mat", ",", "self", ".", "eye_mat", ")", "\n", "self", ".", "mapping_optimizer_new", "=", "generate_optimizer", "(", "self", ".", "mapping_loss_new", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.find_new_alignment_desc": [[389, 441], ["time.time", "print", "print", "pandas.DataFrame", "kdcoe.KDCoE.session.run", "len", "openea.modules.utils.util.task_divide", "multiprocessing.Pool", "list", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "set", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "print", "numpy.array", "list.append", "rest.get", "set", "len", "set", "range", "len", "multiprocessing.Pool.apply_async", "len", "len", "set", "time.time", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "", "def", "find_new_alignment_desc", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"sim th\"", ",", "self", ".", "desc_sim_th", ",", "self", ".", "sim_th", ")", "\n", "# find new alignment based on description embeddings", "\n", "print", "(", "\"find new alignment based on description embeddings:\"", ")", "\n", "to_align_links", "=", "pd", ".", "DataFrame", "(", "self", ".", "kgs", ".", "valid_links", "+", "self", ".", "kgs", ".", "test_links", ")", "\n", "un_aligned_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "un_aligned_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "desc1", "=", "self", ".", "e_desc", ".", "loc", "[", "to_align_links", ".", "values", "[", ":", ",", "0", "]", "]", ".", "values", "\n", "desc2", "=", "self", ".", "e_desc", ".", "loc", "[", "to_align_links", ".", "values", "[", ":", ",", "1", "]", "]", ".", "values", "\n", "desc_em1", "=", "self", ".", "word_em", "[", "desc1", "]", "\n", "desc_em2", "=", "self", ".", "word_em", "[", "desc2", "]", "\n", "dem1", ",", "dem2", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "desc_embedding1", ",", "self", ".", "desc_embedding2", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "desc1", ":", "desc_em1", ",", "\n", "self", ".", "desc2", ":", "desc_em2", "}", ")", "\n", "num", "=", "len", "(", "self", ".", "kgs", ".", "valid_links", "+", "self", ".", "kgs", ".", "test_links", ")", "\n", "search_tasks", "=", "task_divide", "(", "np", ".", "array", "(", "range", "(", "num", ")", ")", ",", "self", ".", "args", ".", "test_threads_num", "//", "2", ")", "\n", "\n", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "len", "(", "search_tasks", ")", ")", "\n", "rests", "=", "list", "(", ")", "\n", "for", "indexes", "in", "search_tasks", ":", "\n", "            ", "sub_embeds", "=", "dem1", "[", "indexes", ",", ":", "]", "\n", "rests", ".", "append", "(", "pool", ".", "apply_async", "(", "find_alignment", ",", "(", "sub_embeds", ",", "dem2", ",", "indexes", ",", "self", ".", "desc_sim_th", ")", ")", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "new_alignment_desc_index", "=", "set", "(", ")", "\n", "for", "rest", "in", "rests", ":", "\n", "            ", "alignment", "=", "rest", ".", "get", "(", ")", "\n", "new_alignment_desc_index", "|=", "set", "(", "alignment", ")", "\n", "\n", "# new_alignment_desc_index = set()", "\n", "# for indexes in search_tasks:", "\n", "#     sub_embeds = dem1[indexes, :]", "\n", "#     alignment = find_alignment(sub_embeds, dem2, indexes, self.desc_sim_th)", "\n", "#     new_alignment_desc_index |= set(alignment)", "\n", "\n", "", "if", "new_alignment_desc_index", "is", "None", "or", "len", "(", "new_alignment_desc_index", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "check_new_alignment", "(", "new_alignment_desc_index", ")", "\n", "stop", "=", "False", "\n", "if", "len", "(", "self", ".", "new_alignment_index", ")", "==", "0", ":", "\n", "            ", "self", ".", "new_alignment_index", "=", "set", "(", "new_alignment_desc_index", ")", "\n", "", "elif", "len", "(", "set", "(", "new_alignment_desc_index", ")", "-", "self", ".", "new_alignment_index", ")", "==", "0", ":", "\n", "            ", "stop", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_alignment_index", "|=", "set", "(", "new_alignment_desc_index", ")", "\n", "stop", "=", "False", "\n", "", "check_new_alignment", "(", "self", ".", "new_alignment_index", ",", "context", "=", "'check total new alignment'", ")", "\n", "self", ".", "new_alignment", "=", "[", "(", "un_aligned_ent1", "[", "x", "]", ",", "un_aligned_ent2", "[", "y", "]", ")", "for", "(", "x", ",", "y", ")", "in", "self", ".", "new_alignment_index", "]", "\n", "# del desc_em1, desc_em2, dem1, dem2, desc_sim", "\n", "print", "(", "'finding new alignment costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.find_new_alignment_rel": [[442, 469], ["time.time", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "kdcoe.KDCoE.mapping_mat.eval", "numpy.matmul", "openea.modules.finding.similarity.sim", "print", "openea.modules.bootstrapping.alignment_finder.find_potential_alignment_greedily", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "print", "len", "set", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "len", "len", "set", "time.time", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_potential_alignment_greedily", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "find_new_alignment_rel", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "un_aligned_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "un_aligned_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "un_aligned_ent1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "un_aligned_ent2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds1", "=", "np", ".", "matmul", "(", "embeds1", ",", "mapping_mat", ")", "\n", "sim_mat", "=", "sim", "(", "embeds1", ",", "embeds2", ",", "normalize", "=", "True", ")", "\n", "print", "(", "\"find new alignment based on relational embeddings:\"", ")", "\n", "new_alignment_rel_index", "=", "find_potential_alignment_greedily", "(", "sim_mat", ",", "self", ".", "sim_th", ")", "\n", "check_new_alignment", "(", "new_alignment_rel_index", ")", "\n", "if", "new_alignment_rel_index", "is", "None", "or", "len", "(", "new_alignment_rel_index", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "stop", "=", "False", "\n", "if", "len", "(", "self", ".", "new_alignment_index", ")", "==", "0", ":", "\n", "            ", "self", ".", "new_alignment_index", "=", "set", "(", "new_alignment_rel_index", ")", "\n", "", "elif", "len", "(", "set", "(", "new_alignment_rel_index", ")", "-", "self", ".", "new_alignment_index", ")", "==", "0", ":", "\n", "            ", "stop", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_alignment_index", "|=", "set", "(", "new_alignment_rel_index", ")", "\n", "stop", "=", "False", "\n", "", "check_new_alignment", "(", "self", ".", "new_alignment_index", ",", "context", "=", "'check total new alignment'", ")", "\n", "self", ".", "new_alignment", "=", "[", "(", "un_aligned_ent1", "[", "x", "]", ",", "un_aligned_ent2", "[", "y", "]", ")", "for", "(", "x", ",", "y", ")", "in", "self", ".", "new_alignment_index", "]", "\n", "# del embeds1, embeds2, sim_mat", "\n", "print", "(", "'finding new alignment costs time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.launch_mapping_training_1epo": [[470, 485], ["time.time", "math.ceil", "range", "print", "random.sample", "kdcoe.KDCoE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "train_links", "=", "self", ".", "kgs", ".", "train_links", "\n", "batch_size", "=", "math", ".", "ceil", "(", "len", "(", "train_links", ")", "/", "triple_steps", ")", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "links_batch", "=", "random", ".", "sample", "(", "train_links", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss", ",", "self", ".", "mapping_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "seed_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "links_batch", "]", ",", "\n", "self", ".", "seed_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "links_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "links_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.launch_mapping_training_1epo_new": [[486, 504], ["time.time", "math.ceil", "range", "print", "list", "random.sample", "kdcoe.KDCoE.session.run", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo_new", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "if", "self", ".", "new_alignment", "is", "not", "None", "and", "len", "(", "self", ".", "new_alignment", ")", ">", "0", ":", "\n", "            ", "train_links", "=", "list", "(", "self", ".", "new_alignment", ")", "\n", "", "else", ":", "\n", "            ", "return", "\n", "", "batch_size", "=", "math", ".", "ceil", "(", "len", "(", "train_links", ")", "/", "triple_steps", ")", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "links_batch", "=", "random", ".", "sample", "(", "train_links", ",", "batch_size", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss_new", ",", "self", ".", "mapping_optimizer_new", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "seed_entities1_new", ":", "[", "x", "[", "0", "]", "for", "x", "in", "links_batch", "]", ",", "\n", "self", ".", "seed_entities2_new", ":", "[", "x", "[", "1", "]", "for", "x", "in", "links_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "links_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. new mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.launch_desc_1epo": [[505, 539], ["time.time", "numpy.random.choice", "range", "print", "len", "pandas.DataFrame", "pandas.DataFrame", "len", "len", "len", "len", "kdcoe.KDCoE.session.run", "len", "list", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_desc_1epo", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "len", "(", "self", ".", "new_alignment", ")", ">", "0", ":", "\n", "            ", "alignments", "=", "pd", ".", "DataFrame", "(", "self", ".", "kgs", ".", "train_links", "+", "list", "(", "self", ".", "new_alignment", ")", ")", "\n", "", "else", ":", "\n", "            ", "alignments", "=", "pd", ".", "DataFrame", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "\n", "", "word_em", "=", "self", ".", "word_em", "\n", "e_desc", "=", "self", ".", "e_desc", "\n", "\n", "batch_size", "=", "self", ".", "desc_batch_size", "\n", "if", "batch_size", ">", "len", "(", "alignments", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "alignments", ")", "\n", "", "batch_num", "=", "len", "(", "alignments", ")", "//", "batch_size", "\n", "\n", "# shuffle", "\n", "choices", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "alignments", ")", ",", "size", "=", "len", "(", "alignments", ")", ",", "replace", "=", "True", ")", "\n", "epoch_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "one_batch_choice", "=", "choices", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "one_batch_alignments", "=", "alignments", ".", "iloc", "[", "one_batch_choice", "]", "\n", "\n", "desc1", "=", "e_desc", ".", "loc", "[", "one_batch_alignments", ".", "values", "[", ":", ",", "0", "]", "]", ".", "values", "\n", "desc2", "=", "e_desc", ".", "loc", "[", "one_batch_alignments", ".", "values", "[", ":", ",", "1", "]", "]", ".", "values", "\n", "\n", "desc_em1", "=", "word_em", "[", "desc1", "]", "\n", "desc_em2", "=", "word_em", "[", "desc2", "]", "\n", "\n", "desc_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "desc_loss", ",", "self", ".", "desc_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "desc1", ":", "desc_em1", ",", "\n", "self", ".", "desc2", ":", "desc_em2", "}", ")", "\n", "epoch_loss", "+=", "desc_loss", "\n", "", "print", "(", "'epoch {}, avg. desc loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.valid_desc": [[540, 556], ["print", "pandas.DataFrame", "kdcoe.KDCoE.session.run", "openea.modules.finding.evaluation.valid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "valid_desc", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "print", "(", "\"valid desc\"", ")", "\n", "valid_links", "=", "pd", ".", "DataFrame", "(", "self", ".", "kgs", ".", "valid_links", ")", "\n", "desc1", "=", "self", ".", "e_desc", ".", "loc", "[", "valid_links", ".", "values", "[", ":", ",", "0", "]", "]", ".", "values", "\n", "desc2", "=", "self", ".", "e_desc", ".", "loc", "[", "valid_links", ".", "values", "[", ":", ",", "1", "]", "]", ".", "values", "\n", "desc_em1", "=", "self", ".", "word_em", "[", "desc1", "]", "\n", "desc_em2", "=", "self", ".", "word_em", "[", "desc2", "]", "\n", "dem1", ",", "dem2", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "desc_embedding1", ",", "self", ".", "desc_embedding2", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "desc1", ":", "desc_em1", ",", "\n", "self", ".", "desc2", ":", "desc_em2", "}", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "dem1", ",", "dem2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "\n", "self", ".", "args", ".", "test_threads_num", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "False", ")", "\n", "# del dem1, dem2, desc_em1, desc_em2, desc1, desc2", "\n", "# gc.collect()", "\n", "return", "hits1_12", "if", "stop_metric", "==", "'hits1'", "else", "mrr_12", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.test_desc": [[557, 570], ["print", "pandas.DataFrame", "kdcoe.KDCoE.session.run", "openea.modules.finding.evaluation.test"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test"], ["", "def", "test_desc", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"test desc\"", ")", "\n", "test_links", "=", "pd", ".", "DataFrame", "(", "self", ".", "kgs", ".", "test_links", ")", "\n", "desc1", "=", "self", ".", "e_desc", ".", "loc", "[", "test_links", ".", "values", "[", ":", ",", "0", "]", "]", ".", "values", "\n", "desc2", "=", "self", ".", "e_desc", ".", "loc", "[", "test_links", ".", "values", "[", ":", ",", "1", "]", "]", ".", "values", "\n", "desc_em1", "=", "self", ".", "word_em", "[", "desc1", "]", "\n", "desc_em2", "=", "self", ".", "word_em", "[", "desc2", "]", "\n", "dem1", ",", "dem2", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "desc_embedding1", ",", "self", ".", "desc_embedding2", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "desc1", ":", "desc_em1", ",", "\n", "self", ".", "desc2", ":", "desc_em2", "}", ")", "\n", "test", "(", "dem1", ",", "dem2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "\n", "self", ".", "args", ".", "test_threads_num", ",", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "\n", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "# del dem1, dem2", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.run": [[573, 618], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "range", "gc.collect", "kdcoe.KDCoE.find_new_alignment_desc", "gc.collect", "range", "kdcoe.KDCoE.find_new_alignment_rel", "range", "kdcoe.KDCoE.launch_desc_1epo", "print", "kdcoe.KDCoE.launch_triple_training_1epo", "kdcoe.KDCoE.launch_mapping_training_1epo", "kdcoe.KDCoE.launch_mapping_training_1epo_new", "print", "kdcoe.KDCoE.valid_desc", "openea.modules.finding.evaluation.early_stop", "kdcoe.KDCoE.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.find_new_alignment_desc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.find_new_alignment_rel", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.launch_desc_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.launch_mapping_training_1epo_new", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.KDCoE.valid_desc", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "it", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_iter", "+", "1", ")", ":", "\n", "            ", "self", ".", "flag1", "=", "-", "1", "\n", "self", ".", "flag2", "=", "-", "1", "\n", "self", ".", "early_stop", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "                ", "self", ".", "launch_desc_1epo", "(", "i", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "# gc.collect()", "\n", "                    ", "flag", "=", "self", ".", "valid_desc", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "# gc.collect()", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                        ", "break", "\n", "", "", "", "gc", ".", "collect", "(", ")", "\n", "stop", "=", "self", ".", "find_new_alignment_desc", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "if", "stop", ":", "\n", "                ", "print", "(", "\"co-training ends\"", ")", "\n", "break", "\n", "", "self", ".", "flag1", "=", "-", "1", "\n", "self", ".", "flag2", "=", "-", "1", "\n", "self", ".", "early_stop", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "                ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "self", ".", "launch_mapping_training_1epo", "(", "i", ",", "triple_steps", ")", "\n", "self", ".", "launch_mapping_training_1epo_new", "(", "i", ",", "triple_steps", ")", "\n", "if", "i", ">", "0", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                    ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "# gc.collect()", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                        ", "break", "\n", "", "", "", "stop", "=", "self", ".", "find_new_alignment_rel", "(", ")", "\n", "# gc.collect()", "\n", "if", "stop", ":", "\n", "                ", "print", "(", "\"co-training ends\"", ")", "\n", "break", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.kdcoe.find_alignment": [[23, 39], ["openea.modules.finding.similarity.sim", "openea.modules.bootstrapping.alignment_finder.search_nearest_k", "list", "len", "print", "list.append"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.search_nearest_k", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["def", "find_alignment", "(", "sub_embeds", ",", "embeds", ",", "indexes", ",", "desc_sim_th", ")", ":", "\n", "    ", "desc_sim", "=", "sim", "(", "sub_embeds", ",", "embeds", ",", "normalize", "=", "True", ")", "\n", "nearest_k_neighbors", "=", "search_nearest_k", "(", "desc_sim", ",", "1", ")", "\n", "alignment", "=", "list", "(", ")", "\n", "for", "i", ",", "j", "in", "nearest_k_neighbors", ":", "\n", "        ", "if", "desc_sim", "[", "i", ",", "j", "]", ">=", "desc_sim_th", ":", "\n", "            ", "alignment", ".", "append", "(", "(", "indexes", "[", "i", "]", ",", "j", ")", ")", "\n", "", "", "if", "len", "(", "alignment", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"find no new alignment\"", ")", "\n", "return", "[", "]", "\n", "# new_alignment_desc_index = find_potential_alignment_greedily(desc_sim, desc_sim_th)", "\n", "# if new_alignment_desc_index is None or len(new_alignment_desc_index) == 0:", "\n", "#     print(\"find no new alignment\")", "\n", "#     return []", "\n", "# alignment = [(indexes[i], j) for (i, j) in new_alignment_desc_index]", "\n", "", "return", "alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.aligne.AlignE.__init__": [[14, 16], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.aligne.AlignE.init": [[17, 41], ["aligne.AlignE._define_variables", "aligne.AlignE._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'swapping'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'limited'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "pos_margin", ">=", "0.0", "\n", "assert", "self", ".", "args", ".", "neg_margin", ">", "self", ".", "args", ".", "pos_margin", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "1", "\n", "assert", "self", ".", "args", ".", "truncated_epsilon", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.aligne.AlignE._define_variables": [[42, 55], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "embedding_module", "==", "'RLEA'", "or", "'HIEA'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "                ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "2", "*", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "                ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.aligne.AlignE._define_embed_graph": [[56, 76], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.limited_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.limited_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "limited_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "\n", "self", ".", "args", ".", "pos_margin", ",", "self", ".", "args", ".", "neg_margin", ",", "\n", "self", ".", "args", ".", "loss_norm", ",", "balance", "=", "self", ".", "args", ".", "neg_margin_balance", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.__init__": [[162, 166], ["openea.approaches.aligne.AlignE.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.init": [[167, 195], ["bootea.BootEA._define_variables", "bootea.BootEA._define_embed_graph", "bootea.BootEA._define_alignment_graph", "bootea.BootEA._define_likelihood_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_alignment_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_likelihood_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_alignment_graph", "(", ")", "\n", "self", ".", "_define_likelihood_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'swapping'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'limited'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "pos_margin", ">=", "0.0", "\n", "assert", "self", ".", "args", ".", "neg_margin", ">", "self", ".", "args", ".", "pos_margin", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "1", "\n", "assert", "self", ".", "args", ".", "truncated_epsilon", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA._define_alignment_graph": [[196, 205], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_define_alignment_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_h", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "new_r", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_t", ")", "\n", "self", ".", "alignment_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "phs", "+", "prs", "-", "pts", ",", "2", ")", ",", "1", ")", ")", ")", ")", "\n", "self", ".", "alignment_optimizer", "=", "generate_optimizer", "(", "self", ".", "alignment_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA._define_likelihood_graph": [[206, 217], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.log", "openea.modules.base.optimizers.generate_optimizer", "len", "len", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_define_likelihood_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "entities2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "dim", "=", "len", "(", "self", ".", "kgs", ".", "valid_links", ")", "+", "len", "(", "self", ".", "kgs", ".", "test_entities1", ")", "\n", "dim1", "=", "self", ".", "args", ".", "likelihood_slice", "\n", "self", ".", "likelihood_mat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "dim1", ",", "dim", "]", ")", "\n", "ent1_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities1", ")", "\n", "ent2_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities2", ")", "\n", "mat", "=", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "ent1_embed", ",", "ent2_embed", ",", "transpose_b", "=", "True", ")", ")", ")", "\n", "self", ".", "likelihood_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "mat", ",", "self", ".", "likelihood_mat", ")", ")", "\n", "self", ".", "likelihood_optimizer", "=", "generate_optimizer", "(", "self", ".", "likelihood_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.eval_ref_sim_mat": [[218, 231], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "bootea.BootEA.session.run"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "eval_ref_sim_mat", "(", "self", ")", ":", "\n", "# refs1_embeddings = tf.nn.embedding_lookup(self.ent_embeds, self.ref_ent1)", "\n", "# refs2_embeddings = tf.nn.embedding_lookup(self.ent_embeds, self.ref_ent2)", "\n", "# refs1_embeddings = tf.nn.l2_normalize(refs1_embeddings, 1).eval(session=self.session)", "\n", "# refs2_embeddings = tf.nn.l2_normalize(refs2_embeddings, 1).eval(session=self.session)", "\n", "# return np.matmul(refs1_embeddings, refs2_embeddings.T)", "\n", "        ", "refs1_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "refs1_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs1_embeddings", ",", "1", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs2_embeddings", ",", "1", ")", "\n", "mat_op", "=", "tf", ".", "matmul", "(", "refs1_embeddings", ",", "refs2_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "sim_mat", "=", "self", ".", "session", ".", "run", "(", "mat_op", ")", "\n", "return", "sim_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.launch_training_k_epo": [[232, 238], ["range", "bootea.BootEA.launch_triple_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo"], ["", "def", "launch_training_k_epo", "(", "self", ",", "iter", ",", "iter_nums", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "epoch", "=", "(", "iter", "-", "1", ")", "*", "iter_nums", "+", "i", "\n", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.train_alignment": [[239, 261], ["bootea.generate_supervised_triples", "math.ceil", "range", "time.time", "range", "print", "len", "bootea.generate_pos_batch", "newly_batch1.extend", "bootea.BootEA.session.run", "len", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "train_alignment", "(", "self", ",", "kg1", ":", "KG", ",", "kg2", ":", "KG", ",", "entities1", ",", "entities2", ",", "training_epochs", ")", ":", "\n", "        ", "if", "entities1", "is", "None", "or", "len", "(", "entities1", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "newly_tris1", ",", "newly_tris2", "=", "generate_supervised_triples", "(", "kg1", ".", "rt_dict", ",", "kg1", ".", "hr_dict", ",", "kg2", ".", "rt_dict", ",", "kg2", ".", "hr_dict", ",", "\n", "entities1", ",", "entities2", ")", "\n", "steps", "=", "math", ".", "ceil", "(", "(", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "for", "i", "in", "range", "(", "training_epochs", ")", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "alignment_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "newly_batch1", ",", "newly_batch2", "=", "generate_pos_batch", "(", "newly_tris1", ",", "newly_tris2", ",", "step", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "newly_batch1", ".", "extend", "(", "newly_batch2", ")", "\n", "alignment_fetches", "=", "{", "\"loss\"", ":", "self", ".", "alignment_loss", ",", "\"train_op\"", ":", "self", ".", "alignment_optimizer", "}", "\n", "alignment_feed_dict", "=", "{", "self", ".", "new_h", ":", "[", "tr", "[", "0", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_r", ":", "[", "tr", "[", "1", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_t", ":", "[", "tr", "[", "2", "]", "for", "tr", "in", "newly_batch1", "]", "}", "\n", "alignment_vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "alignment_fetches", ",", "feed_dict", "=", "alignment_feed_dict", ")", "\n", "alignment_loss", "+=", "alignment_vals", "[", "\"loss\"", "]", "\n", "", "alignment_loss", "/=", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "\n", "print", "(", "\"alignment_loss = {:.3f}, time = {:.3f} s\"", ".", "format", "(", "alignment_loss", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.likelihood": [[262, 279], ["time.time", "bootea.calculate_likelihood_mat", "numpy.array", "list", "range", "print", "len", "range", "random.sample", "bootea.BootEA.session.run", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.calculate_likelihood_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "likelihood", "(", "self", ",", "labeled_alignment", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "likelihood_mat", "=", "calculate_likelihood_mat", "(", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_alignment", ")", "\n", "likelihood_fetches", "=", "{", "\"likelihood_loss\"", ":", "self", ".", "likelihood_loss", ",", "\"likelihood_op\"", ":", "self", ".", "likelihood_optimizer", "}", "\n", "likelihood_loss", "=", "0.0", "\n", "steps", "=", "len", "(", "self", ".", "ref_ent1", ")", "//", "self", ".", "args", ".", "likelihood_slice", "\n", "ref_ent1_array", "=", "np", ".", "array", "(", "self", ".", "ref_ent1", ")", "\n", "ll", "=", "list", "(", "range", "(", "len", "(", "self", ".", "ref_ent1", ")", ")", ")", "\n", "# print(steps)", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "ll", ",", "self", ".", "args", ".", "likelihood_slice", ")", "\n", "likelihood_feed_dict", "=", "{", "self", ".", "entities1", ":", "ref_ent1_array", "[", "idx", "]", ",", "\n", "self", ".", "entities2", ":", "self", ".", "ref_ent2", ",", "\n", "self", ".", "likelihood_mat", ":", "likelihood_mat", "[", "idx", ",", ":", "]", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "likelihood_fetches", ",", "feed_dict", "=", "likelihood_feed_dict", ")", "\n", "likelihood_loss", "+=", "vals", "[", "\"likelihood_loss\"", "]", "\n", "", "print", "(", "\"likelihood_loss = {:.3f}, time = {:.3f} s\"", ".", "format", "(", "likelihood_loss", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.BootEA.run": [[280, 357], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "set", "set", "dict", "range", "print", "joblib.dump", "math.ceil", "list", "print", "bootea.BootEA.launch_training_k_epo", "bootea.bootstrapping", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "openea.modules.finding.similarity.sim", "bootea.bootstrapping", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "print", "range", "openea.modules.finding.evaluation.early_stop", "bootea.BootEA.eval_ref_sim_mat", "list", "list", "print", "print", "print", "jcard_list.append", "bootea.BootEA.train_alignment", "bootea.BootEA.eval_kg1_useful_ent_embeddings", "bootea.BootEA.eval_kg2_useful_ent_embeddings", "len", "len", "bootea.BootEA.valid", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "len", "len", "zip", "zip", "set", "set", "set", "set", "len", "len", "zip", "zip", "time.time", "str", "dict.get", "str", "dict.get", "str", "time.time", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.launch_training_k_epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.similarity.sim", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.train_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "labeled_align", "=", "set", "(", ")", "\n", "labeled_align_1", "=", "set", "(", ")", "\n", "sub_num", "=", "self", ".", "args", ".", "sub_epoch", "\n", "iter_nums", "=", "self", ".", "args", ".", "max_epoch", "//", "sub_num", "\n", "performance", "=", "[", "]", "\n", "ground_pair", "=", "self", ".", "kgs", ".", "train_links", "+", "self", ".", "kgs", ".", "valid_links", "+", "self", ".", "kgs", ".", "test_links", "\n", "ground_dict", "=", "dict", "(", "ground_pair", ")", "\n", "jcard_list", "=", "[", "]", "\n", "seed_performance", "=", "[", "]", "\n", "# for i in range(1, iter_nums + 1):", "\n", "for", "i", "in", "range", "(", "1", ",", "100", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"\\niteration\"", ",", "i", ")", "\n", "self", ".", "launch_training_k_epo", "(", "i", ",", "sub_num", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "[", "0", "]", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "iter_nums", ":", "\n", "                    ", "break", "\n", "", "", "labeled_align", ",", "entities1", ",", "entities2", "=", "bootstrapping", "(", "self", ".", "eval_ref_sim_mat", "(", ")", ",", "\n", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_align", ",", "\n", "self", ".", "args", ".", "sim_th", ",", "self", ".", "args", ".", "k", ")", "\n", "refs1_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "ref_sim_mat", "=", "sim", "(", "refs1_embeddings", ",", "refs2_embeddings", ",", "metric", "=", "'cosine'", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ")", "\n", "labeled_align_1", ",", "entities1_1", ",", "entities2_1", "=", "bootstrapping", "(", "ref_sim_mat", ",", "\n", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_align_1", ",", "\n", "0.0", ",", "2", ")", "\n", "if", "len", "(", "labeled_align", ")", "!=", "0", "and", "len", "(", "labeled_align_1", ")", "!=", "0", ":", "\n", "                ", "bootea_seed", "=", "list", "(", "zip", "(", "entities1", ",", "entities2", ")", ")", "\n", "bootea_seed1", "=", "list", "(", "zip", "(", "entities1_1", ",", "entities2_1", ")", ")", "\n", "a", "=", "set", "(", "bootea_seed", ")", "&", "set", "(", "bootea_seed1", ")", "\n", "b", "=", "set", "(", "bootea_seed", ")", "|", "set", "(", "bootea_seed1", ")", "\n", "jcard", "=", "len", "(", "a", ")", "/", "len", "(", "b", ")", "\n", "print", "(", "'jcard similarity of new seed of 2 models: '", "+", "str", "(", "jcard", ")", ")", "\n", "correct1", "=", "0", "\n", "for", "ii", "in", "a", ":", "\n", "                    ", "if", "ground_dict", ".", "get", "(", "ii", "[", "0", "]", ")", "==", "ii", "[", "1", "]", ":", "\n", "                        ", "correct1", "+=", "1", "\n", "", "", "print", "(", "'joint set has correct proportion: '", "+", "str", "(", "correct1", "/", "len", "(", "a", ")", ")", ")", "\n", "correct2", "=", "0", "\n", "for", "ii", "in", "b", ":", "\n", "                    ", "if", "ground_dict", ".", "get", "(", "ii", "[", "0", "]", ")", "==", "ii", "[", "1", "]", ":", "\n", "                        ", "correct2", "+=", "1", "\n", "", "", "print", "(", "'union set has correct proportion: '", "+", "str", "(", "correct2", "/", "len", "(", "b", ")", ")", ")", "\n", "jcard_list", ".", "append", "(", "(", "jcard", ",", "correct1", ",", "correct2", ")", ")", "\n", "if", "self", ".", "args", ".", "joint_set", ":", "\n", "                    ", "select_seed1", ",", "select_seed2", "=", "zip", "(", "*", "a", ")", "\n", "", "if", "self", ".", "args", ".", "union_set", ":", "\n", "                    ", "select_seed1", ",", "select_seed2", "=", "zip", "(", "*", "b", ")", "\n", "", "if", "not", "self", ".", "args", ".", "joint_set", "and", "not", "self", ".", "args", ".", "union_set", ":", "\n", "                    ", "select_seed1", ",", "select_seed2", "=", "entities1", ",", "entities2", "\n", "", "self", ".", "train_alignment", "(", "self", ".", "kgs", ".", "kg1", ",", "self", ".", "kgs", ".", "kg2", ",", "select_seed1", ",", "select_seed2", ",", "1", ")", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"generating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "joblib", ".", "dump", "(", "seed_performance", ",", "self", ".", "args", ".", "save_suffix", "+", "'boot_seed_performance'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping": [[25, 39], ["openea.modules.bootstrapping.alignment_finder.find_potential_alignment_mwgm", "gc.collect", "bootea.update_labeled_alignment_x", "bootea.update_labeled_alignment_y"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.bootstrapping.alignment_finder.find_potential_alignment_mwgm", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_x", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_y"], ["def", "bootstrapping", "(", "sim_mat", ",", "unaligned_entities1", ",", "unaligned_entities2", ",", "labeled_alignment", ",", "sim_th", ",", "k", ")", ":", "\n", "    ", "curr_labeled_alignment", "=", "find_potential_alignment_mwgm", "(", "sim_mat", ",", "sim_th", ",", "k", ")", "\n", "if", "curr_labeled_alignment", "is", "not", "None", ":", "\n", "        ", "labeled_alignment", "=", "update_labeled_alignment_x", "(", "labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", "\n", "labeled_alignment", "=", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", "\n", "del", "curr_labeled_alignment", "\n", "", "if", "labeled_alignment", "is", "not", "None", ":", "\n", "        ", "newly_aligned_entities1", "=", "[", "unaligned_entities1", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "labeled_alignment", "]", "\n", "newly_aligned_entities2", "=", "[", "unaligned_entities2", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "labeled_alignment", "]", "\n", "", "else", ":", "\n", "        ", "newly_aligned_entities1", ",", "newly_aligned_entities2", "=", "None", ",", "None", "\n", "", "del", "sim_mat", "\n", "gc", ".", "collect", "(", ")", "\n", "return", "labeled_alignment", ",", "newly_aligned_entities1", ",", "newly_aligned_entities2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_x": [[41, 61], ["dict", "print", "set", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "zip", "dict.keys", "dict.get", "dict.keys", "dict.values", "dict.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["", "def", "update_labeled_alignment_x", "(", "pre_labeled_alignment", ",", "curr_labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "labeled_alignment_dict", "=", "dict", "(", "pre_labeled_alignment", ")", "\n", "n1", ",", "n2", "=", "0", ",", "0", "\n", "for", "i", ",", "j", "in", "curr_labeled_alignment", ":", "\n", "        ", "if", "labeled_alignment_dict", ".", "get", "(", "i", ",", "-", "1", ")", "==", "i", "and", "j", "!=", "i", ":", "\n", "            ", "n2", "+=", "1", "\n", "", "if", "i", "in", "labeled_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "pre_j", "=", "labeled_alignment_dict", ".", "get", "(", "i", ")", "\n", "pre_sim", "=", "sim_mat", "[", "i", ",", "pre_j", "]", "\n", "new_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "if", "new_sim", ">=", "pre_sim", ":", "\n", "                ", "if", "pre_j", "==", "i", "and", "j", "!=", "i", ":", "\n", "                    ", "n1", "+=", "1", "\n", "", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "else", ":", "\n", "            ", "labeled_alignment_dict", "[", "i", "]", "=", "j", "\n", "", "", "print", "(", "\"update wrongly: \"", ",", "n1", ",", "\"greedy update wrongly: \"", ",", "n2", ")", "\n", "pre_labeled_alignment", "=", "set", "(", "zip", "(", "labeled_alignment_dict", ".", "keys", "(", ")", ",", "labeled_alignment_dict", ".", "values", "(", ")", ")", ")", "\n", "check_new_alignment", "(", "pre_labeled_alignment", ",", "context", "=", "\"after editing (<-)\"", ")", "\n", "return", "pre_labeled_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.update_labeled_alignment_y": [[63, 84], ["dict", "set", "dict.items", "openea.modules.bootstrapping.alignment_finder.check_new_alignment", "dict.get", "labeled_alignment_dict.get.add", "set", "len", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.check_new_alignment"], ["", "def", "update_labeled_alignment_y", "(", "labeled_alignment", ",", "sim_mat", ")", ":", "\n", "    ", "labeled_alignment_dict", "=", "dict", "(", ")", "\n", "updated_alignment", "=", "set", "(", ")", "\n", "for", "i", ",", "j", "in", "labeled_alignment", ":", "\n", "        ", "i_set", "=", "labeled_alignment_dict", ".", "get", "(", "j", ",", "set", "(", ")", ")", "\n", "i_set", ".", "add", "(", "i", ")", "\n", "labeled_alignment_dict", "[", "j", "]", "=", "i_set", "\n", "", "for", "j", ",", "i_set", "in", "labeled_alignment_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "i_set", ")", "==", "1", ":", "\n", "            ", "for", "i", "in", "i_set", ":", "\n", "                ", "updated_alignment", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "max_i", "=", "-", "1", "\n", "max_sim", "=", "-", "10", "\n", "for", "i", "in", "i_set", ":", "\n", "                ", "if", "sim_mat", "[", "i", ",", "j", "]", ">", "max_sim", ":", "\n", "                    ", "max_sim", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "max_i", "=", "i", "\n", "", "", "updated_alignment", ".", "add", "(", "(", "max_i", ",", "j", ")", ")", "\n", "", "", "check_new_alignment", "(", "updated_alignment", ",", "context", "=", "\"after editing (->)\"", ")", "\n", "return", "updated_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.calculate_likelihood_mat": [[86, 109], ["time.time", "numpy.zeros", "print", "dict", "bootea.calculate_likelihood_mat.set2dic"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "calculate_likelihood_mat", "(", "ref_ent1", ",", "ref_ent2", ",", "labeled_alignment", ")", ":", "\n", "    ", "def", "set2dic", "(", "alignment", ")", ":", "\n", "        ", "if", "alignment", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "dic", "=", "dict", "(", ")", "\n", "for", "i", ",", "j", "in", "alignment", ":", "\n", "            ", "dic", "[", "i", "]", "=", "j", "\n", "", "assert", "len", "(", "dic", ")", "==", "len", "(", "alignment", ")", "\n", "return", "dic", "\n", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "ref_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "ref_ent1", ")", ",", "len", "(", "ref_ent2", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "labeled_alignment", "is", "not", "None", ":", "\n", "        ", "alignment_dic", "=", "set2dic", "(", "labeled_alignment", ")", "\n", "n", "=", "1", "/", "len", "(", "ref_ent1", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "ref_ent1", ")", ")", ":", "\n", "            ", "if", "ii", "in", "alignment_dic", ".", "keys", "(", ")", ":", "\n", "                ", "ref_mat", "[", "ii", ",", "alignment_dic", ".", "get", "(", "ii", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "for", "jj", "in", "range", "(", "len", "(", "ref_ent1", ")", ")", ":", "\n", "                    ", "ref_mat", "[", "ii", ",", "jj", "]", "=", "n", "\n", "", "", "", "", "print", "(", "\"calculate likelihood matrix costs {:.2f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "ref_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples": [[111, 119], ["range", "print", "len", "len", "list", "list", "len", "newly_triples1.extend", "newly_triples2.extend", "bootea.generate_newly_triples", "bootea.generate_newly_triples", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples"], ["", "def", "generate_supervised_triples", "(", "rt_dict1", ",", "hr_dict1", ",", "rt_dict2", ",", "hr_dict2", ",", "ents1", ",", "ents2", ")", ":", "\n", "    ", "assert", "len", "(", "ents1", ")", "==", "len", "(", "ents2", ")", "\n", "newly_triples1", ",", "newly_triples2", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ents1", ")", ")", ":", "\n", "        ", "newly_triples1", ".", "extend", "(", "generate_newly_triples", "(", "ents1", "[", "i", "]", ",", "ents2", "[", "i", "]", ",", "rt_dict1", ",", "hr_dict1", ")", ")", "\n", "newly_triples2", ".", "extend", "(", "generate_newly_triples", "(", "ents2", "[", "i", "]", ",", "ents1", "[", "i", "]", ",", "rt_dict2", ",", "hr_dict2", ")", ")", "\n", "", "print", "(", "\"newly triples: {}, {}\"", ".", "format", "(", "len", "(", "newly_triples1", ")", ",", "len", "(", "newly_triples2", ")", ")", ")", "\n", "return", "newly_triples1", ",", "newly_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_newly_triples": [[121, 128], ["list", "rt_dict1.get", "hr_dict1.get", "set", "list.append", "set", "list.append"], "function", ["None"], ["", "def", "generate_newly_triples", "(", "ent1", ",", "ent2", ",", "rt_dict1", ",", "hr_dict1", ")", ":", "\n", "    ", "newly_triples", "=", "list", "(", ")", "\n", "for", "r", ",", "t", "in", "rt_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "        ", "newly_triples", ".", "append", "(", "(", "ent2", ",", "r", ",", "t", ")", ")", "\n", "", "for", "h", ",", "r", "in", "hr_dict1", ".", "get", "(", "ent1", ",", "set", "(", ")", ")", ":", "\n", "        ", "newly_triples", ".", "append", "(", "(", "h", ",", "r", ",", "ent2", ")", ")", "\n", "", "return", "newly_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch": [[130, 144], ["int", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "generate_pos_batch", "(", "triples1", ",", "triples2", ",", "step", ",", "batch_size", ")", ":", "\n", "    ", "num1", "=", "int", "(", "len", "(", "triples1", ")", "/", "(", "len", "(", "triples1", ")", "+", "len", "(", "triples2", ")", ")", "*", "batch_size", ")", "\n", "num2", "=", "batch_size", "-", "num1", "\n", "start1", "=", "step", "*", "num1", "\n", "start2", "=", "step", "*", "num2", "\n", "end1", "=", "start1", "+", "num1", "\n", "end2", "=", "start2", "+", "num2", "\n", "if", "end1", ">", "len", "(", "triples1", ")", ":", "\n", "        ", "end1", "=", "len", "(", "triples1", ")", "\n", "", "if", "end2", ">", "len", "(", "triples2", ")", ":", "\n", "        ", "end2", "=", "len", "(", "triples2", ")", "\n", "", "pos_triples1", "=", "triples1", "[", "start1", ":", "end1", "]", "\n", "pos_triples2", "=", "triples2", "[", "start2", ":", "end2", "]", "\n", "return", "pos_triples1", ",", "pos_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.mul": [[146, 158], ["time.time", "print", "tensorflow.matmul", "numpy.matmul", "tensorflow.sigmoid().eval", "tf.matmul.eval", "tensor1.eval", "tensor2.eval", "time.time", "tensorflow.sigmoid"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "mul", "(", "tensor1", ",", "tensor2", ",", "session", ",", "num", ",", "sigmoid", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "num", "<", "20000", ":", "\n", "        ", "sim_mat", "=", "tf", ".", "matmul", "(", "tensor1", ",", "tensor2", ",", "transpose_b", "=", "True", ")", "\n", "if", "sigmoid", ":", "\n", "            ", "res", "=", "tf", ".", "sigmoid", "(", "sim_mat", ")", ".", "eval", "(", "session", "=", "session", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "sim_mat", ".", "eval", "(", "session", "=", "session", ")", "\n", "", "", "else", ":", "\n", "        ", "res", "=", "np", ".", "matmul", "(", "tensor1", ".", "eval", "(", "session", "=", "session", ")", ",", "tensor2", ".", "eval", "(", "session", "=", "session", ")", ".", "T", ")", "\n", "", "print", "(", "\"mat mul costs: {:.3f}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.__init__": [[24, 31], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "self", ".", "pi", "=", "3.14159265358979323846", "\n", "self", ".", "epsilon", "=", "2.0", "\n", "self", ".", "embedding_range", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.init": [[32, 47], ["bootea_rotate.BootEA_RotatE._define_variables", "bootea_rotate.BootEA_RotatE._define_embed_graph", "bootea_rotate.BootEA_RotatE._define_alignment_graph", "openea.modules.utils.util.load_session", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_alignment_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding_range", "=", "(", "self", ".", "args", ".", "gamma", "+", "self", ".", "epsilon", ")", "/", "self", ".", "args", ".", "dim", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_alignment_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'swapping'", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "truncated_epsilon", ">", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._define_variables": [[48, 56], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "re_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'re_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "tf", ".", "float64", ")", "\n", "self", ".", "im_ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'im_ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "tf", ".", "float64", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ",", "tf", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores": [[57, 69], ["tensorflow.stack", "tensorflow.norm", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "_generate_scores", "(", "self", ",", "rh", ",", "rr", ",", "rt", ",", "ih", ",", "ir", ",", "it", ",", "pos", "=", "True", ")", ":", "\n", "        ", "re_score", "=", "rh", "*", "rr", "-", "ih", "*", "ir", "-", "rt", "\n", "im_score", "=", "rh", "*", "ir", "+", "ih", "*", "rr", "-", "it", "\n", "# print(\"im_score\", im_score.shape)", "\n", "scores", "=", "tf", ".", "stack", "(", "[", "re_score", ",", "im_score", "]", ",", "axis", "=", "0", ")", "\n", "# print(\"scores 1\", scores.shape)", "\n", "scores", "=", "tf", ".", "norm", "(", "scores", ",", "axis", "=", "0", ")", "\n", "# print(\"scores 2\", scores.shape)", "\n", "scores", "=", "tf", ".", "reduce_sum", "(", "scores", ",", "axis", "=", "-", "1", ")", "\n", "# print(\"scores 3\", scores.shape)", "\n", "scores", "=", "self", ".", "args", ".", "gamma", "-", "scores", "\n", "return", "scores", "if", "pos", "else", "-", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss": [[70, 79], ["tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.log", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_generate_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "sigmoid", "(", "pos_scores", ")", "\n", "neg_scores", "=", "tf", ".", "sigmoid", "(", "neg_scores", ")", "\n", "pos_scores", "=", "tf", ".", "log", "(", "pos_scores", ")", "\n", "neg_scores", "=", "tf", ".", "log", "(", "neg_scores", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_scores", ")", "\n", "neg_loss", "=", "tf", ".", "reduce_sum", "(", "neg_scores", ")", "\n", "loss", "=", "-", "pos_loss", "-", "neg_loss", "# / self.args.neg_triple_num", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all": [[80, 90], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.cos", "tensorflow.sin"], "methods", ["None"], ["", "def", "lookup_all", "(", "self", ",", "h", ",", "r", ",", "t", ")", ":", "\n", "        ", "re_head", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "h", ")", "\n", "re_tail", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "t", ")", "\n", "im_head", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "h", ")", "\n", "im_tail", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "t", ")", "\n", "relation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "r", ")", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", "/", "self", ".", "pi", ")", "\n", "re_relation", "=", "tf", ".", "cos", "(", "phase_relation", ")", "\n", "im_relation", "=", "tf", ".", "sin", "(", "phase_relation", ")", "\n", "return", "re_head", ",", "re_relation", ",", "re_tail", ",", "im_head", ",", "im_relation", ",", "im_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._define_embed_graph": [[91, 109], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "bootea_rotate.BootEA_RotatE.lookup_all", "bootea_rotate.BootEA_RotatE.lookup_all", "tensorflow.name_scope", "bootea_rotate.BootEA_RotatE._generate_scores", "bootea_rotate.BootEA_RotatE._generate_scores", "bootea_rotate.BootEA_RotatE._generate_loss", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", "=", "self", ".", "lookup_all", "(", "self", ".", "pos_hs", ",", "self", ".", "pos_rs", ",", "self", ".", "pos_ts", ")", "\n", "nrh", ",", "nrr", ",", "nrt", ",", "nih", ",", "nir", ",", "nit", "=", "self", ".", "lookup_all", "(", "self", ".", "neg_hs", ",", "self", ".", "neg_rs", ",", "self", ".", "neg_ts", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "pos_scores", "=", "self", ".", "_generate_scores", "(", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", ",", "pos", "=", "True", ")", "\n", "neg_scores", "=", "self", ".", "_generate_scores", "(", "nrh", ",", "nrr", ",", "nrt", ",", "nih", ",", "nir", ",", "nit", ",", "pos", "=", "False", ")", "\n", "self", ".", "triple_loss", "=", "self", ".", "_generate_loss", "(", "pos_scores", ",", "neg_scores", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._eval_valid_embeddings": [[110, 119], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "bootea_rotate.BootEA_RotatE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "\n", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._eval_test_embeddings": [[120, 127], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "bootea_rotate.BootEA_RotatE.mapping_mat.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "re_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "im_ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings": [[128, 134], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize.eval", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "eval_kg1_useful_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "re_ent_embeds", "+", "self", ".", "im_ent_embeds", "\n", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "ent_embeds", ",", "self", ".", "kgs", ".", "useful_entities_list1", ")", "\n", "if", "self", ".", "args", ".", "ent_l2_norm", ":", "\n", "            ", "embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds", ",", "1", ")", "\n", "", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings": [[135, 141], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize.eval", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "eval_kg2_useful_ent_embeddings", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "re_ent_embeds", "+", "self", ".", "im_ent_embeds", "\n", "embeds", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "ent_embeds", ",", "self", ".", "kgs", ".", "useful_entities_list2", ")", "\n", "if", "self", ".", "args", ".", "ent_l2_norm", ":", "\n", "            ", "embeds", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "embeds", ",", "1", ")", "\n", "", "return", "embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.save": [[142, 148], ["sklearn.preprocessing.normalize", "bootea_rotate.BootEA_RotatE.rel_embeds.eval", "openea.save_embeddings", "openea.save_embeddings", "bootea_rotate.BootEA_RotatE.re_ent_embeds.eval", "bootea_rotate.BootEA_RotatE.im_ent_embeds.eval", "bootea_rotate.BootEA_RotatE.mapping_mat.eval"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "re_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "+", "self", ".", "im_ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "ent_embeds", "=", "preprocessing", ".", "normalize", "(", "ent_embeds", ")", "\n", "rel_embeds", "=", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat", "=", "self", ".", "mapping_mat", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "if", "self", ".", "mapping_mat", "is", "not", "None", "else", "None", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "None", ",", "mapping_mat", "=", "mapping_mat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._define_alignment_graph": [[149, 161], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "bootea_rotate.BootEA_RotatE.lookup_all", "bootea_rotate.BootEA_RotatE._generate_scores", "tensorflow.sigmoid", "tensorflow.log", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.lookup_all", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE._generate_scores", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "def", "_define_alignment_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", "=", "self", ".", "lookup_all", "(", "self", ".", "new_h", ",", "self", ".", "new_r", ",", "self", ".", "new_t", ")", "\n", "pos_scores", "=", "self", ".", "_generate_scores", "(", "prh", ",", "prr", ",", "prt", ",", "pih", ",", "pir", ",", "pit", ",", "pos", "=", "True", ")", "\n", "pos_scores", "=", "tf", ".", "sigmoid", "(", "pos_scores", ")", "\n", "pos_scores", "=", "tf", ".", "log", "(", "pos_scores", ")", "\n", "pos_loss", "=", "tf", ".", "reduce_sum", "(", "pos_scores", ")", "\n", "self", ".", "alignment_loss", "=", "-", "pos_loss", "\n", "self", ".", "alignment_optimizer", "=", "generate_optimizer", "(", "self", ".", "alignment_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_ref_sim_mat": [[162, 170], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize().eval", "tensorflow.nn.l2_normalize().eval", "numpy.matmul", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "eval_ref_sim_mat", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "re_ent_embeds", "+", "self", ".", "im_ent_embeds", "\n", "refs1_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "ent_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "ent_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "# if self.args.ent_l2_norm:", "\n", "refs1_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs1_embeddings", ",", "1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs2_embeddings", ",", "1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "return", "np", ".", "matmul", "(", "refs1_embeddings", ",", "refs2_embeddings", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.launch_training_k_epo": [[171, 177], ["range", "bootea_rotate.BootEA_RotatE.launch_triple_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo"], ["", "def", "launch_training_k_epo", "(", "self", ",", "iter", ",", "iter_nums", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "epoch", "=", "(", "iter", "-", "1", ")", "*", "iter_nums", "+", "i", "\n", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.train_alignment": [[178, 200], ["openea.approaches.bootea.generate_supervised_triples", "openea.approaches.bootea.generate_supervised_triples", "math.ceil", "range", "time.time", "range", "print", "len", "openea.approaches.bootea.generate_pos_batch", "openea.approaches.bootea.generate_pos_batch", "newly_batch1.extend", "bootea_rotate.BootEA_RotatE.session.run", "len", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "train_alignment", "(", "self", ",", "kg1", ":", "KG", ",", "kg2", ":", "KG", ",", "entities1", ",", "entities2", ",", "training_epochs", ")", ":", "\n", "        ", "if", "entities1", "is", "None", "or", "len", "(", "entities1", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "newly_tris1", ",", "newly_tris2", "=", "generate_supervised_triples", "(", "kg1", ".", "rt_dict", ",", "kg1", ".", "hr_dict", ",", "kg2", ".", "rt_dict", ",", "kg2", ".", "hr_dict", ",", "\n", "entities1", ",", "entities2", ")", "\n", "steps", "=", "math", ".", "ceil", "(", "(", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "for", "i", "in", "range", "(", "training_epochs", ")", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "alignment_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "newly_batch1", ",", "newly_batch2", "=", "generate_pos_batch", "(", "newly_tris1", ",", "newly_tris2", ",", "step", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "newly_batch1", ".", "extend", "(", "newly_batch2", ")", "\n", "alignment_fetches", "=", "{", "\"loss\"", ":", "self", ".", "alignment_loss", ",", "\"train_op\"", ":", "self", ".", "alignment_optimizer", "}", "\n", "alignment_feed_dict", "=", "{", "self", ".", "new_h", ":", "[", "tr", "[", "0", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_r", ":", "[", "tr", "[", "1", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_t", ":", "[", "tr", "[", "2", "]", "for", "tr", "in", "newly_batch1", "]", "}", "\n", "alignment_vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "alignment_fetches", ",", "feed_dict", "=", "alignment_feed_dict", ")", "\n", "alignment_loss", "+=", "alignment_vals", "[", "\"loss\"", "]", "\n", "", "alignment_loss", "/=", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "\n", "print", "(", "\"alignment_loss = {:.3f}, time = {:.3f} s\"", ".", "format", "(", "alignment_loss", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.run": [[201, 246], ["time.time", "int", "openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "set", "range", "print", "math.ceil", "list", "print", "bootea_rotate.BootEA_RotatE.launch_training_k_epo", "time.time", "range", "bootea_rotate.BootEA_RotatE.valid", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "print", "openea.approaches.bootea.bootstrapping", "openea.approaches.bootea.bootstrapping", "bootea_rotate.BootEA_RotatE.train_alignment", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "openea.generate_neighbours", "print", "bootea_rotate.BootEA_RotatE.eval_ref_sim_mat", "bootea_rotate.BootEA_RotatE.valid", "bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.launch_training_k_epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.train_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "labeled_align", "=", "set", "(", ")", "\n", "sub_num", "=", "self", ".", "args", ".", "sub_epoch", "\n", "iter_nums", "=", "self", ".", "args", ".", "max_epoch", "//", "sub_num", "\n", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"\\niteration\"", ",", "i", ")", "\n", "self", ".", "launch_training_k_epo", "(", "i", ",", "sub_num", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "\n", "neighbors1", ",", "neighbors2", ")", "\n", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "(", "self", ".", "early_stop", "and", "i", ">=", "self", ".", "args", ".", "min_iter", ")", "or", "i", "==", "iter_nums", ":", "\n", "                    ", "break", "\n", "", "", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_bp", ":", "\n", "                ", "print", "(", "\"bootstrapping\"", ")", "\n", "labeled_align", ",", "entities1", ",", "entities2", "=", "bootstrapping", "(", "self", ".", "eval_ref_sim_mat", "(", ")", ",", "\n", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_align", ",", "\n", "self", ".", "args", ".", "sim_th", ",", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "train_alignment", "(", "self", ".", "kgs", ".", "kg1", ",", "self", ".", "kgs", ".", "kg2", ",", "entities1", ",", "entities2", ",", "self", ".", "args", ".", "align_times", ")", "\n", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                    ", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "args", ".", "neg_sampling", "==", "\"truncated\"", ":", "\n", "                ", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                    ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"generating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.__init__": [[142, 170], ["predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.get_local_name", "predicate_alignmnet.init_predicate_alignment", "predicate_alignmnet.init_predicate_alignment", "predicate_alignmnet.PredicateAlignModel.update_relation_triples", "predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "set", "set", "set", "set", "predicate_alignmnet.PredicateAlignModel.kgs.kg1.relations_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg1.attributes_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg2.relations_id_dict.keys", "predicate_alignmnet.PredicateAlignModel.kgs.kg2.attributes_id_dict.keys"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.init_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.init_predicate_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["    ", "def", "__init__", "(", "self", ",", "kgs", ",", "args", ")", ":", "\n", "        ", "self", ".", "kgs", "=", "kgs", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "relation_name_dict1", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "attribute_name_dict1", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "relation_name_dict2", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "attribute_name_dict2", "=", "get_local_name", "(", "set", "(", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "self", ".", "relation_id_alignment_set", "=", "None", "\n", "self", ".", "train_relations1", ",", "self", ".", "train_relations2", "=", "None", ",", "None", "\n", "self", ".", "sup_relation_alignment_triples1", ",", "self", ".", "sup_relation_alignment_triples2", "=", "None", ",", "None", "\n", "self", ".", "relation_triples_w_weights1", ",", "self", ".", "relation_triples_w_weights2", "=", "None", ",", "None", "\n", "self", ".", "relation_triples_w_weights_set1", ",", "self", ".", "relation_triples_w_weights_set2", "=", "None", ",", "None", "\n", "\n", "self", ".", "attribute_id_alignment_set", "=", "None", "\n", "self", ".", "train_attributes1", ",", "self", ".", "train_attributes2", "=", "None", ",", "None", "\n", "self", ".", "sup_attribute_alignment_triples1", ",", "self", ".", "sup_attribute_alignment_triples2", "=", "None", ",", "None", "\n", "self", ".", "attribute_triples_w_weights1", ",", "self", ".", "attribute_triples_w_weights2", "=", "None", ",", "None", "\n", "self", ".", "attribute_triples_w_weights_set1", ",", "self", ".", "attribute_triples_w_weights_set2", "=", "None", ",", "None", "\n", "\n", "self", ".", "relation_alignment_set", ",", "self", ".", "relation_latent_match_pairs_similarity_dict_init", "=", "init_predicate_alignment", "(", "self", ".", "relation_name_dict1", ",", "self", ".", "relation_name_dict2", ",", "self", ".", "args", ".", "predicate_init_sim", ")", "\n", "self", ".", "attribute_alignment_set", ",", "self", ".", "attribute_latent_match_pairs_similarity_dict_init", "=", "init_predicate_alignment", "(", "self", ".", "attribute_name_dict1", ",", "self", ".", "attribute_name_dict2", ",", "self", ".", "args", ".", "predicate_init_sim", ")", "\n", "self", ".", "relation_alignment_set_init", "=", "self", ".", "relation_alignment_set", "\n", "self", ".", "attribute_alignment_set_init", "=", "self", ".", "attribute_alignment_set", "\n", "self", ".", "update_relation_triples", "(", "self", ".", "relation_alignment_set", ")", "\n", "self", ".", "update_attribute_triples", "(", "self", ".", "attribute_alignment_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_attribute_triples": [[171, 185], ["predicate_alignmnet.predicate2id_matched_pairs", "predicate_alignmnet.generate_sup_predicate_triples", "predicate_alignmnet.add_weights"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.predicate2id_matched_pairs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.generate_sup_predicate_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.add_weights"], ["", "def", "update_attribute_triples", "(", "self", ",", "attribute_alignment_set", ")", ":", "\n", "        ", "self", ".", "attribute_id_alignment_set", "=", "predicate2id_matched_pairs", "(", "attribute_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", ")", "\n", "self", ".", "train_attributes1", "=", "[", "a", "for", "(", "a", ",", "_", ",", "_", ")", "in", "self", ".", "attribute_id_alignment_set", "]", "\n", "self", ".", "train_attributes2", "=", "[", "a", "for", "(", "_", ",", "a", ",", "_", ")", "in", "self", ".", "attribute_id_alignment_set", "]", "\n", "self", ".", "sup_attribute_alignment_triples1", ",", "self", ".", "sup_attribute_alignment_triples2", "=", "generate_sup_predicate_triples", "(", "self", ".", "attribute_id_alignment_set", ",", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "self", ".", "attribute_triples_w_weights1", ",", "self", ".", "attribute_triples_w_weights2", ",", "self", ".", "attribute_triples_w_weights_set1", ",", "self", ".", "attribute_triples_w_weights_set2", "=", "add_weights", "(", "self", ".", "attribute_id_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ",", "\n", "self", ".", "args", ".", "predicate_soft_sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_relation_triples": [[186, 200], ["predicate_alignmnet.predicate2id_matched_pairs", "predicate_alignmnet.generate_sup_predicate_triples", "predicate_alignmnet.add_weights"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.predicate2id_matched_pairs", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.generate_sup_predicate_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.add_weights"], ["", "def", "update_relation_triples", "(", "self", ",", "relation_alignment_set", ")", ":", "\n", "        ", "self", ".", "relation_id_alignment_set", "=", "predicate2id_matched_pairs", "(", "relation_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", ")", "\n", "self", ".", "train_relations1", "=", "[", "a", "for", "(", "a", ",", "_", ",", "_", ")", "in", "self", ".", "relation_id_alignment_set", "]", "\n", "self", ".", "train_relations2", "=", "[", "a", "for", "(", "_", ",", "a", ",", "_", ")", "in", "self", ".", "relation_id_alignment_set", "]", "\n", "self", ".", "sup_relation_alignment_triples1", ",", "self", ".", "sup_relation_alignment_triples2", "=", "generate_sup_predicate_triples", "(", "self", ".", "relation_id_alignment_set", ",", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ")", "\n", "self", ".", "relation_triples_w_weights1", ",", "self", ".", "relation_triples_w_weights2", ",", "self", ".", "relation_triples_w_weights_set1", ",", "self", ".", "relation_triples_w_weights_set2", "=", "add_weights", "(", "self", ".", "relation_id_alignment_set", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "local_relation_triples_list", ",", "\n", "self", ".", "kgs", ".", "kg2", ".", "local_relation_triples_list", ",", "\n", "self", ".", "args", ".", "predicate_soft_sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_predicate_alignment": [[201, 232], ["predicate_alignmnet.find_predicate_alignment_by_embedding", "set", "print", "len", "predicate_alignmnet.PredicateAlignModel.update_relation_triples", "predicate_alignmnet.PredicateAlignModel.update_attribute_triples", "set.add"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.find_predicate_alignment_by_embedding", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_relation_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.PredicateAlignModel.update_attribute_triples"], ["", "def", "update_predicate_alignment", "(", "self", ",", "embed", ",", "predicate_type", "=", "'relation'", ",", "w", "=", "0.7", ")", ":", "\n", "        ", "if", "predicate_type", "==", "'relation'", ":", "\n", "            ", "predicate_list1", ",", "predicate_list2", "=", "self", ".", "kgs", ".", "kg1", ".", "relations_list", ",", "self", ".", "kgs", ".", "kg2", ".", "relations_list", "\n", "predicate_id_dict1", ",", "predicate_id_dict2", "=", "self", ".", "kgs", ".", "kg1", ".", "relations_id_dict", ",", "self", ".", "kgs", ".", "kg2", ".", "relations_id_dict", "\n", "predicate_alignment_set_init", "=", "self", ".", "relation_alignment_set_init", "\n", "", "else", ":", "\n", "            ", "predicate_list1", ",", "predicate_list2", "=", "self", ".", "kgs", ".", "kg1", ".", "attributes_list", ",", "self", ".", "kgs", ".", "kg2", ".", "attributes_list", "\n", "predicate_id_dict1", ",", "predicate_id_dict2", "=", "self", ".", "kgs", ".", "kg1", ".", "attributes_id_dict", ",", "self", ".", "kgs", ".", "kg2", ".", "attributes_id_dict", "\n", "predicate_alignment_set_init", "=", "self", ".", "attribute_alignment_set_init", "\n", "\n", "", "predicate_latent_match_pairs_similarity_dict", "=", "find_predicate_alignment_by_embedding", "(", "embed", ",", "predicate_list1", ",", "predicate_list2", ",", "predicate_id_dict1", ",", "\n", "predicate_id_dict2", ")", "\n", "\n", "predicate_alignment_set", "=", "set", "(", ")", "\n", "for", "(", "p1", ",", "p2", ",", "sim_init", ")", "in", "predicate_alignment_set_init", ":", "\n", "            ", "p_id_1", "=", "predicate_id_dict1", "[", "p1", "]", "\n", "p_id_2", "=", "predicate_id_dict2", "[", "p2", "]", "\n", "sim", "=", "sim_init", "\n", "if", "(", "p_id_1", ",", "p_id_2", ")", "in", "predicate_latent_match_pairs_similarity_dict", ":", "\n", "                ", "sim", "=", "w", "*", "sim", "+", "(", "1", "-", "w", ")", "*", "predicate_latent_match_pairs_similarity_dict", "[", "(", "p_id_1", ",", "p_id_2", ")", "]", "\n", "", "if", "sim", ">", "self", ".", "args", ".", "predicate_soft_sim", ":", "\n", "                ", "predicate_alignment_set", ".", "add", "(", "(", "p1", ",", "p2", ",", "sim", ")", ")", "\n", "", "", "print", "(", "'update '", "+", "predicate_type", "+", "' alignment:'", ",", "len", "(", "predicate_alignment_set", ")", ")", "\n", "\n", "if", "predicate_type", "==", "'relation'", ":", "\n", "            ", "self", ".", "relation_alignment_set", "=", "predicate_alignment_set", "\n", "self", ".", "update_relation_triples", "(", "predicate_alignment_set", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attribute_alignment_set", "=", "predicate_alignment_set", "\n", "self", ".", "update_attribute_triples", "(", "predicate_alignment_set", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.link2dic": [[6, 13], ["dict", "dict", "len", "len"], "function", ["None"], ["def", "link2dic", "(", "links", ")", ":", "\n", "    ", "dic1", ",", "dic2", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "i", ",", "j", ",", "w", "in", "links", ":", "\n", "        ", "dic1", "[", "i", "]", "=", "(", "j", ",", "w", ")", "\n", "dic2", "[", "j", "]", "=", "(", "i", ",", "w", ")", "\n", "", "assert", "len", "(", "dic1", ")", "==", "len", "(", "dic2", ")", "\n", "return", "dic1", ",", "dic2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.generate_sup_predicate_triples": [[15, 25], ["predicate_alignmnet.link2dic", "set", "set", "list", "list", "sup_triples1.add", "sup_triples2.add", "link_dic1.get", "link_dic1.get", "link_dic2.get", "link_dic2.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.link2dic"], ["", "def", "generate_sup_predicate_triples", "(", "predicate_links", ",", "triples1", ",", "triples2", ")", ":", "\n", "    ", "link_dic1", ",", "link_dic2", "=", "link2dic", "(", "predicate_links", ")", "\n", "sup_triples1", ",", "sup_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "s", ",", "p", ",", "o", "in", "triples1", ":", "\n", "        ", "if", "p", "in", "link_dic1", ":", "\n", "            ", "sup_triples1", ".", "add", "(", "(", "s", ",", "link_dic1", ".", "get", "(", "p", ")", "[", "0", "]", ",", "o", ",", "link_dic1", ".", "get", "(", "p", ")", "[", "1", "]", ")", ")", "\n", "", "", "for", "s", ",", "p", ",", "o", "in", "triples2", ":", "\n", "        ", "if", "p", "in", "link_dic2", ":", "\n", "            ", "sup_triples2", ".", "add", "(", "(", "s", ",", "link_dic2", ".", "get", "(", "p", ")", "[", "0", "]", ",", "o", ",", "link_dic2", ".", "get", "(", "p", ")", "[", "1", "]", ")", ")", "\n", "", "", "return", "list", "(", "sup_triples1", ")", ",", "list", "(", "sup_triples2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.add_weights": [[27, 44], ["predicate_alignmnet.link2dic", "set", "set", "len", "len", "len", "len", "list", "list", "weighted_triples1.add", "weighted_triples1.add", "weighted_triples2.add", "weighted_triples2.add", "predicate_alignmnet.zoom_weight", "predicate_alignmnet.zoom_weight", "link_dic1.get", "link_dic2.get"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.link2dic", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.zoom_weight", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.zoom_weight"], ["", "def", "add_weights", "(", "predicate_links", ",", "triples1", ",", "triples2", ",", "min_w_before", ")", ":", "\n", "    ", "link_dic1", ",", "link_dic2", "=", "link2dic", "(", "predicate_links", ")", "\n", "weighted_triples1", ",", "weighted_triples2", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "w", "=", "0.2", "\n", "for", "s", ",", "p", ",", "o", "in", "triples1", ":", "\n", "        ", "if", "p", "in", "link_dic1", ":", "\n", "            ", "weighted_triples1", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "zoom_weight", "(", "link_dic1", ".", "get", "(", "p", ")", "[", "1", "]", ",", "min_w_before", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "weighted_triples1", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "w", ")", ")", "\n", "", "", "for", "s", ",", "p", ",", "o", "in", "triples2", ":", "\n", "        ", "if", "p", "in", "link_dic2", ":", "\n", "            ", "weighted_triples2", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "zoom_weight", "(", "link_dic2", ".", "get", "(", "p", ")", "[", "1", "]", ",", "min_w_before", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "weighted_triples2", ".", "add", "(", "(", "s", ",", "p", ",", "o", ",", "w", ")", ")", "\n", "", "", "assert", "len", "(", "triples1", ")", "==", "len", "(", "weighted_triples1", ")", "\n", "assert", "len", "(", "triples2", ")", "==", "len", "(", "weighted_triples2", ")", "\n", "return", "list", "(", "weighted_triples1", ")", ",", "list", "(", "weighted_triples2", ")", ",", "weighted_triples1", ",", "weighted_triples2", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.init_predicate_alignment": [[46, 73], ["predicate_alignmnet.init_predicate_alignment.get_predicate_match_dict"], "function", ["None"], ["", "def", "init_predicate_alignment", "(", "predicate_local_name_dict_1", ",", "predicate_local_name_dict_2", ",", "predicate_init_sim", ")", ":", "\n", "    ", "def", "get_predicate_match_dict", "(", "p_ln_dict_1", ",", "p_ln_dict_2", ")", ":", "\n", "        ", "predicate_match_dict", ",", "sim_dict", "=", "{", "}", ",", "{", "}", "\n", "for", "p1", ",", "ln1", "in", "p_ln_dict_1", ".", "items", "(", ")", ":", "\n", "            ", "match_p2", "=", "''", "\n", "max_sim", "=", "0", "\n", "for", "p2", ",", "ln2", "in", "p_ln_dict_2", ".", "items", "(", ")", ":", "\n", "                ", "sim_p2", "=", "Levenshtein", ".", "ratio", "(", "ln1", ",", "ln2", ")", "\n", "if", "sim_p2", ">", "max_sim", ":", "\n", "                    ", "match_p2", "=", "p2", "\n", "max_sim", "=", "sim_p2", "\n", "", "", "predicate_match_dict", "[", "p1", "]", "=", "match_p2", "\n", "sim_dict", "[", "p1", "]", "=", "max_sim", "\n", "", "return", "predicate_match_dict", ",", "sim_dict", "\n", "\n", "", "match_dict_1_2", ",", "sim_dict_1", "=", "get_predicate_match_dict", "(", "predicate_local_name_dict_1", ",", "predicate_local_name_dict_2", ")", "\n", "match_dict_2_1", ",", "sim_dict_2", "=", "get_predicate_match_dict", "(", "predicate_local_name_dict_2", ",", "predicate_local_name_dict_1", ")", "\n", "\n", "predicate_match_pairs_set", "=", "set", "(", ")", "\n", "predicate_latent_match_pairs_similarity_dict", "=", "{", "}", "\n", "for", "p1", ",", "p2", "in", "match_dict_1_2", ".", "items", "(", ")", ":", "\n", "        ", "if", "p2", "in", "match_dict_2_1", "and", "match_dict_2_1", "[", "p2", "]", "==", "p1", ":", "\n", "            ", "predicate_latent_match_pairs_similarity_dict", "[", "(", "p1", ",", "p2", ")", "]", "=", "sim_dict_1", "[", "p1", "]", "\n", "if", "sim_dict_1", "[", "p1", "]", ">", "predicate_init_sim", ":", "\n", "                ", "predicate_match_pairs_set", ".", "add", "(", "(", "p1", ",", "p2", ",", "sim_dict_1", "[", "p1", "]", ")", ")", "\n", "# print(p1, p2, sim_dict_1[p1], sim_dict_2[p2])", "\n", "", "", "", "return", "predicate_match_pairs_set", ",", "predicate_latent_match_pairs_similarity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.read_predicate_local_name_file": [[75, 87], ["file.close", "open", "line.strip().split.strip().split", "len", "line.strip().split.strip"], "function", ["None"], ["", "def", "read_predicate_local_name_file", "(", "file_path", ",", "relation_set", ")", ":", "\n", "    ", "relation_local_name_dict", ",", "attribute_local_name_dict", "=", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "line", ")", "==", "2", "\n", "if", "line", "[", "0", "]", "in", "relation_set", ":", "\n", "                ", "relation_local_name_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "attribute_local_name_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "1", "]", "\n", "", "", "", "file", ".", "close", "(", ")", "\n", "return", "relation_local_name_dict", ",", "attribute_local_name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.predicate2id_matched_pairs": [[89, 95], ["set", "set.add"], "function", ["None"], ["", "def", "predicate2id_matched_pairs", "(", "predicate_match_pairs_set", ",", "predicate_id_dict_1", ",", "predicate_id_dict_2", ")", ":", "\n", "    ", "id_match_pairs_set", "=", "set", "(", ")", "\n", "for", "(", "p1", ",", "p2", ",", "w", ")", "in", "predicate_match_pairs_set", ":", "\n", "        ", "if", "p1", "in", "predicate_id_dict_1", "and", "p2", "in", "predicate_id_dict_2", ":", "\n", "            ", "id_match_pairs_set", ".", "add", "(", "(", "predicate_id_dict_1", "[", "p1", "]", ",", "predicate_id_dict_2", "[", "p2", "]", ",", "w", ")", ")", "\n", "", "", "return", "id_match_pairs_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.find_predicate_alignment_by_embedding": [[97, 127], ["sklearn.preprocessing.normalize", "numpy.matmul", "predicate_id_dict1.items", "predicate_id_dict2.items", "matched_1.items"], "function", ["None"], ["", "def", "find_predicate_alignment_by_embedding", "(", "embed", ",", "predicate_list1", ",", "predicate_list2", ",", "predicate_id_dict1", ",", "\n", "predicate_id_dict2", ")", ":", "\n", "    ", "embed", "=", "preprocessing", ".", "normalize", "(", "embed", ")", "\n", "sim_mat", "=", "np", ".", "matmul", "(", "embed", ",", "embed", ".", "T", ")", "\n", "\n", "matched_1", ",", "matched_2", "=", "{", "}", ",", "{", "}", "\n", "for", "i", "in", "predicate_list1", ":", "\n", "        ", "sorted_sim", "=", "(", "-", "sim_mat", "[", "i", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "for", "j", "in", "sorted_sim", ":", "\n", "            ", "if", "j", "in", "predicate_list2", ":", "\n", "                ", "matched_1", "[", "i", "]", "=", "j", "\n", "break", "\n", "", "", "", "for", "j", "in", "predicate_list2", ":", "\n", "        ", "sorted_sim", "=", "(", "-", "sim_mat", "[", "j", ",", ":", "]", ")", ".", "argsort", "(", ")", "\n", "for", "i", "in", "sorted_sim", ":", "\n", "            ", "if", "i", "in", "predicate_list1", ":", "\n", "                ", "matched_2", "[", "j", "]", "=", "i", "\n", "break", "\n", "\n", "", "", "", "id_attr_dict1", ",", "id_attr_dict2", "=", "{", "}", ",", "{", "}", "\n", "for", "a", ",", "i", "in", "predicate_id_dict1", ".", "items", "(", ")", ":", "\n", "        ", "id_attr_dict1", "[", "i", "]", "=", "a", "\n", "", "for", "a", ",", "i", "in", "predicate_id_dict2", ".", "items", "(", ")", ":", "\n", "        ", "id_attr_dict2", "[", "i", "]", "=", "a", "\n", "\n", "", "predicate_latent_match_pairs_similarity_dict", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "matched_1", ".", "items", "(", ")", ":", "\n", "        ", "if", "matched_2", "[", "j", "]", "==", "i", ":", "\n", "            ", "predicate_latent_match_pairs_similarity_dict", "[", "(", "i", ",", "j", ")", "]", "=", "sim_mat", "[", "i", ",", "j", "]", "\n", "", "", "return", "predicate_latent_match_pairs_similarity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.zoom_weight": [[129, 132], ["None"], "function", ["None"], ["", "def", "zoom_weight", "(", "weight", ",", "min_w_before", ",", "min_w_after", "=", "0.5", ")", ":", "\n", "    ", "weight_new", "=", "1.0", "-", "(", "1.0", "-", "weight", ")", "*", "(", "1.0", "-", "min_w_after", ")", "/", "(", "1.0", "-", "min_w_before", ")", "\n", "return", "weight_new", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.predicate_alignmnet.get_local_name": [[134, 139], ["[].replace", "item.split"], "function", ["None"], ["", "def", "get_local_name", "(", "item_set", ")", ":", "\n", "    ", "item_local_name_dict", "=", "{", "}", "\n", "for", "item", "in", "item_set", ":", "\n", "        ", "item_local_name_dict", "[", "item", "]", "=", "item", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "return", "item_local_name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer.__init__": [[125, 138], ["kwargs.keys", "kwargs.get", "kwargs.get", "gcn_align.Layer.__class__.__name__.lower", "str", "gcn_align.get_layer_uid"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_layer_uid"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "layer", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "name", "=", "layer", "+", "'_'", "+", "str", "(", "get_layer_uid", "(", "layer", ")", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "vars", "=", "{", "}", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "self", ".", "sparse_inputs", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._call": [[139, 141], ["None"], "methods", ["None"], ["", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer.__call__": [[142, 150], ["tensorflow.name_scope", "gcn_align.Layer._call", "tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GraphConvolution._call"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "if", "self", ".", "logging", "and", "not", "self", ".", "sparse_inputs", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/inputs'", ",", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "_call", "(", "inputs", ")", "\n", "if", "self", ".", "logging", ":", "\n", "                ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/outputs'", ",", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars": [[151, 154], ["tensorflow.summary.histogram"], "methods", ["None"], ["", "", "def", "_log_vars", "(", "self", ")", ":", "\n", "        ", "for", "var", "in", "self", ".", "vars", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "self", ".", "name", "+", "'/vars/'", "+", "var", ",", "self", ".", "vars", "[", "var", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Dense.__init__": [[159, 184], ["gcn_align.Layer.__init__", "tensorflow.variable_scope", "gcn_align.glorot", "gcn_align.Dense._log_vars", "gcn_align.zeros"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "sparse_inputs", "=", "False", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "featureless", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Dense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "self", ".", "vars", "[", "'weights'", "]", "=", "glorot", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights'", ")", "\n", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Dense._call": [[185, 202], ["gcn_align.dot", "gcn_align.Dense.act", "gcn_align.sparse_dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "sparse_inputs", ":", "\n", "            ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# transform", "\n", "", "output", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights'", "]", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GraphConvolution.__init__": [[207, 238], ["gcn_align.Layer.__init__", "tensorflow.variable_scope", "range", "gcn_align.GraphConvolution._log_vars", "len", "init", "gcn_align.zeros", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Layer._log_vars", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "placeholders", ",", "dropout", "=", "0.", ",", "\n", "sparse_inputs", "=", "False", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "bias", "=", "False", ",", "\n", "featureless", "=", "False", ",", "transform", "=", "True", ",", "init", "=", "glorot", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "placeholders", "[", "'dropout'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "\n", "", "self", ".", "act", "=", "act", "\n", "self", ".", "support", "=", "placeholders", "[", "'support'", "]", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# helper variable for sparse dropout", "\n", "self", ".", "num_features_nonzero", "=", "placeholders", "[", "'num_features_nonzero'", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", "+", "'_vars'", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "                ", "if", "input_dim", "==", "output_dim", "and", "not", "self", ".", "transform", "and", "not", "featureless", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "=", "init", "(", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "name", "=", "'weights_'", "+", "str", "(", "i", ")", ")", "\n", "", "if", "self", ".", "bias", ":", "\n", "                ", "self", ".", "vars", "[", "'bias'", "]", "=", "zeros", "(", "[", "output_dim", "]", ",", "name", "=", "'bias'", ")", "\n", "\n", "", "", "if", "self", ".", "logging", ":", "\n", "            ", "self", ".", "_log_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GraphConvolution._call": [[239, 268], ["list", "range", "tensorflow.add_n", "gcn_align.GraphConvolution.act", "len", "gcn_align.dot", "list.append", "gcn_align.sparse_dropout", "tensorflow.nn.dropout", "str", "gcn_align.dot", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gmnn.GraphMatchNN.act", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.dropout", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "", "def", "_call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# dropout", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "if", "self", ".", "sparse_inputs", ":", "\n", "                ", "x", "=", "sparse_dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ",", "self", ".", "num_features_nonzero", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "1", "-", "self", ".", "dropout", ")", "\n", "\n", "# convolve", "\n", "", "", "supports", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "support", ")", ")", ":", "\n", "            ", "if", "'weights_'", "+", "str", "(", "i", ")", "in", "self", ".", "vars", ":", "\n", "                ", "if", "not", "self", ".", "featureless", ":", "\n", "                    ", "pre_sup", "=", "dot", "(", "x", ",", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", ",", "sparse", "=", "self", ".", "sparse_inputs", ")", "\n", "", "else", ":", "\n", "                    ", "pre_sup", "=", "self", ".", "vars", "[", "'weights_'", "+", "str", "(", "i", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "pre_sup", "=", "x", "\n", "", "support", "=", "dot", "(", "self", ".", "support", "[", "i", "]", ",", "pre_sup", ",", "sparse", "=", "True", ")", "\n", "supports", ".", "append", "(", "support", ")", "\n", "", "output", "=", "tf", ".", "add_n", "(", "supports", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "vars", "[", "'bias'", "]", "\n", "\n", "", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.__init__": [[325, 350], ["kwargs.keys", "kwargs.get", "kwargs.get", "gcn_align.Model.__class__.__name__.lower"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.blocking.lshash.HashTable.keys"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "allowed_kwargs", "=", "{", "'name'", ",", "'logging'", "}", "\n", "for", "kwarg", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "assert", "kwarg", "in", "allowed_kwargs", ",", "'Invalid keyword argument: '", "+", "kwarg", "\n", "", "name", "=", "kwargs", ".", "get", "(", "'name'", ")", "\n", "if", "not", "name", ":", "\n", "            ", "name", "=", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", "\n", "", "self", ".", "name", "=", "name", "\n", "\n", "logging", "=", "kwargs", ".", "get", "(", "'logging'", ",", "False", ")", "\n", "self", ".", "logging", "=", "logging", "\n", "\n", "self", ".", "vars", "=", "{", "}", "\n", "self", ".", "placeholders", "=", "{", "}", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n", "self", ".", "inputs", "=", "None", "\n", "self", ".", "outputs", "=", "None", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "self", ".", "accuracy", "=", "0", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "opt_op", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model._build": [[351, 353], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build": [[354, 375], ["gcn_align.Model.activations.append", "tensorflow.get_collection", "gcn_align.Model._loss", "gcn_align.Model._accuracy", "gcn_align.Model.optimizer.minimize", "tensorflow.variable_scope", "gcn_align.Model._build", "layer", "gcn_align.Model.activations.append"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._loss", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._accuracy", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\" Wrapper for _build() \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "_build", "(", ")", "\n", "\n", "# Build sequential layer model", "\n", "", "self", ".", "activations", ".", "append", "(", "self", ".", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "hidden", "=", "layer", "(", "self", ".", "activations", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "hidden", ")", "\n", "", "self", ".", "outputs", "=", "self", ".", "activations", "[", "-", "1", "]", "\n", "\n", "# Store model variables for easy access", "\n", "variables", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "name", ")", "\n", "self", ".", "vars", "=", "{", "var", ".", "name", ":", "var", "for", "var", "in", "variables", "}", "\n", "\n", "# Build metrics", "\n", "self", ".", "_loss", "(", ")", "\n", "self", ".", "_accuracy", "(", ")", "\n", "\n", "self", ".", "opt_op", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.predict": [[376, 378], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model._loss": [[379, 381], ["None"], "methods", ["None"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model._accuracy": [[382, 384], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.save": [[385, 391], ["tensorflow.train.Saver", "tensorflow.train.Saver.save", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "save", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", ")", "\n", "print", "(", "\"Model saved in file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.load": [[392, 399], ["tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "load", "(", "self", ",", "sess", "=", "None", ")", ":", "\n", "        ", "if", "not", "sess", ":", "\n", "            ", "raise", "AttributeError", "(", "\"TensorFlow session not provided.\"", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "self", ".", "vars", ")", "\n", "save_path", "=", "\"tmp/%s.ckpt\"", "%", "self", ".", "name", "\n", "saver", ".", "restore", "(", "sess", ",", "save_path", ")", "\n", "print", "(", "\"Model restored from file: %s\"", "%", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.MLP.__init__": [[402, 414], ["gcn_align.Model.__init__", "tensorflow.train.AdamOptimizer", "gcn_align.MLP.build", "placeholders[].get_shape().as_list", "placeholders[].get_shape"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.MLP._loss": [[415, 423], ["gcn_align.MLP.layers[].vars.values", "gcn_align.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.MLP._accuracy": [[424, 427], ["gcn_align.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.MLP._build": [[428, 443], ["gcn_align.MLP.layers.append", "gcn_align.MLP.layers.append", "gcn_align.Dense", "gcn_align.Dense"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "self", ".", "args", ".", "sparse_inputs", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "Dense", "(", "input_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.MLP.predict": [[444, 446], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN.__init__": [[449, 464], ["gcn_align.Model.__init__", "tensorflow.train.AdamOptimizer", "gcn_align.GCN.build", "placeholders[].get_shape().as_list", "placeholders[].get_shape"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "# *************add***************", "\n", "\n", "# ************************************", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "# self.input_dim = self.inputs.get_shape().as_list()[1]  # To be supported in future Tensorflow versions", "\n", "self", ".", "output_dim", "=", "placeholders", "[", "'labels'", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "learning_rate", ")", "\n", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN._loss": [[465, 473], ["gcn_align.GCN.layers[].vars.values", "gcn_align.masked_softmax_cross_entropy", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_softmax_cross_entropy"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "# Weight decay loss", "\n", "        ", "for", "var", "in", "self", ".", "layers", "[", "0", "]", ".", "vars", ".", "values", "(", ")", ":", "\n", "            ", "self", ".", "loss", "+=", "self", ".", "args", ".", "weight_decay", "*", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "\n", "\n", "# Cross entropy error", "\n", "", "self", ".", "loss", "+=", "masked_softmax_cross_entropy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN._accuracy": [[474, 477], ["gcn_align.masked_accuracy"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_accuracy"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "accuracy", "=", "masked_accuracy", "(", "self", ".", "outputs", ",", "self", ".", "placeholders", "[", "'labels'", "]", ",", "\n", "self", ".", "placeholders", "[", "'labels_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN._build": [[478, 493], ["gcn_align.GCN.layers.append", "gcn_align.GCN.layers.append", "gcn_align.GraphConvolution", "gcn_align.GraphConvolution"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "True", ",", "\n", "sparse_inputs", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "args", ".", "hidden1", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "True", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN.predict": [[494, 496], ["tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit.__init__": [[499, 513], ["gcn_align.Model.__init__", "tensorflow.train.GradientDescentOptimizer", "gcn_align.GCN_Align_Unit.build"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.Model.build"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "placeholders", ",", "input_dim", ",", "output_dim", ",", "ILL", ",", "sparse_inputs", "=", "False", ",", "featureless", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCN_Align_Unit", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "inputs", "=", "placeholders", "[", "'features'", "]", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "placeholders", "=", "placeholders", "\n", "self", ".", "ILL", "=", "ILL", "\n", "self", ".", "sparse_inputs", "=", "sparse_inputs", "\n", "self", ".", "featureless", "=", "featureless", "\n", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._loss": [[515, 517], ["gcn_align.align_loss"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.align_loss"], ["", "def", "_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "+=", "align_loss", "(", "self", ".", "outputs", ",", "self", ".", "ILL", ",", "self", ".", "args", ".", "gamma", ",", "self", ".", "args", ".", "neg_triple_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._accuracy": [[518, 520], ["None"], "methods", ["None"], ["", "def", "_accuracy", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align_Unit._build": [[521, 540], ["gcn_align.GCN_Align_Unit.layers.append", "gcn_align.GCN_Align_Unit.layers.append", "gcn_align.GraphConvolution", "gcn_align.GraphConvolution"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "input_dim", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "dropout", "=", "False", ",", "\n", "featureless", "=", "self", ".", "featureless", ",", "\n", "sparse_inputs", "=", "self", ".", "sparse_inputs", ",", "\n", "transform", "=", "False", ",", "\n", "init", "=", "trunc_normal", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n", "self", ".", "layers", ".", "append", "(", "GraphConvolution", "(", "input_dim", "=", "self", ".", "output_dim", ",", "\n", "output_dim", "=", "self", ".", "output_dim", ",", "\n", "placeholders", "=", "self", ".", "placeholders", ",", "\n", "act", "=", "lambda", "x", ":", "x", ",", "\n", "dropout", "=", "False", ",", "\n", "transform", "=", "False", ",", "\n", "logging", "=", "self", ".", "logging", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.__init__": [[543, 546], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "kgs", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "kgs", "=", "kgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple": [[547, 564], ["isinstance", "numpy.vstack().transpose", "range", "gcn_align.GCN_Utils.sparse_to_tuple.to_tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "        ", "def", "to_tuple", "(", "mx", ")", ":", "\n", "            ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "                ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "                ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj": [[565, 574], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.coo_matrix.dot().transpose().dot().tocoo", "scipy.coo_matrix.sum", "numpy.power", "numpy.isinf", "scipy.coo_matrix.dot().transpose().dot", "scipy.coo_matrix.dot().transpose", "scipy.coo_matrix.dot"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot"], ["", "@", "staticmethod", "\n", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "        ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.preprocess_adj": [[575, 579], ["gcn_align.GCN_Utils.normalize_adj", "gcn_align.GCN_Utils.sparse_to_tuple", "scipy.eye"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "preprocess_adj", "(", "self", ",", "adj", ")", ":", "\n", "        ", "\"\"\"Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation.\"\"\"", "\n", "adj_normalized", "=", "self", ".", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "self", ".", "sparse_to_tuple", "(", "adj_normalized", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.construct_feed_dict": [[580, 587], ["dict", "dict.update", "dict.update", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "construct_feed_dict", "(", "features", ",", "support", ",", "placeholders", ")", ":", "\n", "        ", "\"\"\"Construct feed dictionary for GCN-Align.\"\"\"", "\n", "feed_dict", "=", "dict", "(", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'features'", "]", ":", "features", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "placeholders", "[", "'support'", "]", "[", "i", "]", ":", "support", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "support", ")", ")", "}", ")", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.chebyshev_polynomials": [[588, 609], ["print", "gcn_align.GCN_Utils.normalize_adj", "scipy.sparse.linalg.eigen.arpack.eigsh", "list", "list.append", "list.append", "range", "gcn_align.GCN_Utils.sparse_to_tuple", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.csr_matrix", "list.append", "gcn_align.GCN_Utils.chebyshev_polynomials.chebyshev_recurrence"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.normalize_adj", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "chebyshev_polynomials", "(", "self", ",", "adj", ",", "k", ")", ":", "\n", "        ", "\"\"\"Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation).\"\"\"", "\n", "print", "(", "\"Calculating Chebyshev polynomials up to order {}...\"", ".", "format", "(", "k", ")", ")", "\n", "\n", "adj_normalized", "=", "self", ".", "normalize_adj", "(", "adj", ")", "\n", "laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj_normalized", "\n", "largest_eigval", ",", "_", "=", "eigsh", "(", "laplacian", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "scaled_laplacian", "=", "(", "2.", "/", "largest_eigval", "[", "0", "]", ")", "*", "laplacian", "-", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "\n", "t_k", "=", "list", "(", ")", "\n", "t_k", ".", "append", "(", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "t_k", ".", "append", "(", "scaled_laplacian", ")", "\n", "\n", "def", "chebyshev_recurrence", "(", "t_k_minus_one", ",", "t_k_minus_two", ",", "scaled_lap", ")", ":", "\n", "            ", "s_lap", "=", "sp", ".", "csr_matrix", "(", "scaled_lap", ",", "copy", "=", "True", ")", "\n", "return", "2", "*", "s_lap", ".", "dot", "(", "t_k_minus_one", ")", "-", "t_k_minus_two", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "k", "+", "1", ")", ":", "\n", "            ", "t_k", ".", "append", "(", "chebyshev_recurrence", "(", "t_k", "[", "-", "1", "]", ",", "t_k", "[", "-", "2", "]", ",", "scaled_laplacian", ")", ")", "\n", "\n", "", "return", "self", ".", "sparse_to_tuple", "(", "t_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.func": [[610, 625], ["head[].add", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "func", "(", "triples", ")", ":", "\n", "        ", "head", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "            ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "head", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "0", "]", ")", "\n", "", "", "r2f", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "            ", "r2f", "[", "r", "]", "=", "len", "(", "head", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2f", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.ifunc": [[626, 641], ["tail[].add", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "ifunc", "(", "triples", ")", ":", "\n", "        ", "tail", "=", "{", "}", "\n", "cnt", "=", "{", "}", "\n", "for", "tri", "in", "triples", ":", "\n", "            ", "if", "tri", "[", "1", "]", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", "=", "{", "tri", "[", "2", "]", "}", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "tri", "[", "1", "]", "]", "+=", "1", "\n", "tail", "[", "tri", "[", "1", "]", "]", ".", "add", "(", "tri", "[", "2", "]", ")", "\n", "", "", "r2if", "=", "{", "}", "\n", "for", "r", "in", "cnt", ":", "\n", "            ", "r2if", "[", "r", "]", "=", "len", "(", "tail", "[", "r", "]", ")", "/", "cnt", "[", "r", "]", "\n", "", "return", "r2if", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_weighted_adj": [[642, 665], ["gcn_align.GCN_Utils.func", "gcn_align.GCN_Utils.ifunc", "scipy.coo_matrix", "row.append", "col.append", "data.append", "max", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.func", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.ifunc"], ["", "def", "get_weighted_adj", "(", "self", ",", "e", ",", "KG", ")", ":", "\n", "        ", "r2f", "=", "self", ".", "func", "(", "KG", ")", "\n", "r2if", "=", "self", ".", "ifunc", "(", "KG", ")", "\n", "M", "=", "{", "}", "\n", "for", "tri", "in", "KG", ":", "\n", "            ", "if", "tri", "[", "0", "]", "==", "tri", "[", "2", "]", ":", "\n", "                ", "continue", "\n", "", "if", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "not", "in", "M", ":", "\n", "                ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "                ", "M", "[", "(", "tri", "[", "0", "]", ",", "tri", "[", "2", "]", ")", "]", "+=", "max", "(", "r2if", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "if", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "not", "in", "M", ":", "\n", "                ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "else", ":", "\n", "                ", "M", "[", "(", "tri", "[", "2", "]", ",", "tri", "[", "0", "]", ")", "]", "+=", "max", "(", "r2f", "[", "tri", "[", "1", "]", "]", ",", "0.3", ")", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "for", "key", "in", "M", ":", "\n", "            ", "row", ".", "append", "(", "key", "[", "1", "]", ")", "\n", "col", ".", "append", "(", "key", "[", "0", "]", ")", "\n", "data", ".", "append", "(", "M", "[", "key", "]", ")", "\n", "", "return", "sp", ".", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "e", ",", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_ae_input": [[666, 668], ["gcn_align.GCN_Utils.sparse_to_tuple", "scipy.coo_matrix"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.sparse_to_tuple"], ["", "def", "get_ae_input", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "sparse_to_tuple", "(", "sp", ".", "coo_matrix", "(", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.load_data": [[669, 675], ["gcn_align.GCN_Utils.get_ae_input", "gcn_align.GCN_Utils.get_weighted_adj", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_ae_input", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.get_weighted_adj"], ["", "def", "load_data", "(", "self", ",", "attr", ")", ":", "\n", "        ", "ae_input", "=", "self", ".", "get_ae_input", "(", "attr", ")", "\n", "triples", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", "\n", "adj", "=", "self", ".", "get_weighted_adj", "(", "self", ".", "kgs", ".", "entities_num", ",", "triples", ")", "\n", "train", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "return", "adj", ",", "ae_input", ",", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.__init__": [[678, 703], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attr", "=", "None", "\n", "self", ".", "opt", "=", "'SGD'", "\n", "self", ".", "act_func", "=", "tf", ".", "nn", ".", "relu", "\n", "self", ".", "dropout", "=", "0.0", "\n", "# *****************************add*******************************************************", "\n", "self", ".", "struct_loss", "=", "None", "\n", "self", ".", "struct_optimizer", "=", "None", "\n", "self", ".", "vec_ae", "=", "None", "\n", "self", ".", "vec_se", "=", "None", "\n", "self", ".", "num_supports", "=", "None", "\n", "self", ".", "utils", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "ae_input", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "e", "=", "None", "\n", "self", ".", "support", "=", "None", "\n", "self", ".", "adj", "=", "None", "\n", "self", ".", "ph_ae", "=", "None", "\n", "self", ".", "ph_se", "=", "None", "\n", "self", ".", "model_ae", "=", "None", "\n", "self", ".", "model_se", "=", "None", "\n", "self", ".", "feed_dict_se", "=", "None", "\n", "self", ".", "feed_dict_ae", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.init": [[704, 736], ["gcn_align.GCN_Utils", "gcn_align.load_attr", "gcn_align.GCN_Align.utils.load_data", "gcn_align.GCN_Align_Unit", "gcn_align.GCN_Align_Unit", "openea.modules.utils.util.load_session", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "gcn_align.GCN_Align.utils.preprocess_adj", "tensorflow.sparse_placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder_with_default", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.global_variables_initializer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.load_attr", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.load_data", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.preprocess_adj"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "1", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n", "self", ".", "num_supports", "=", "self", ".", "args", ".", "support_number", "\n", "self", ".", "utils", "=", "GCN_Utils", "(", "self", ".", "args", ",", "self", ".", "kgs", ")", "\n", "self", ".", "attr", "=", "load_attr", "(", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "kgs", ")", "\n", "self", ".", "adj", ",", "self", ".", "ae_input", ",", "self", ".", "train", "=", "self", ".", "utils", ".", "load_data", "(", "self", ".", "attr", ")", "\n", "self", ".", "e", "=", "self", ".", "ae_input", "[", "2", "]", "[", "0", "]", "\n", "self", ".", "support", "=", "[", "self", ".", "utils", ".", "preprocess_adj", "(", "self", ".", "adj", ")", "]", "\n", "self", ".", "ph_ae", "=", "{", "\n", "\"support\"", ":", "[", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", "for", "_", "in", "range", "(", "self", ".", "args", ".", "support_number", ")", "]", ",", "\n", "\"features\"", ":", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", ",", "\n", "\"dropout\"", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", ",", "\n", "\"num_features_nonzero\"", ":", "tf", ".", "placeholder_with_default", "(", "0", ",", "shape", "=", "(", ")", ")", "\n", "}", "\n", "self", ".", "ph_se", "=", "{", "\n", "\"support\"", ":", "[", "tf", ".", "sparse_placeholder", "(", "tf", ".", "float32", ")", "for", "_", "in", "range", "(", "self", ".", "args", ".", "support_number", ")", "]", ",", "\n", "\"features\"", ":", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", ",", "\n", "\"dropout\"", ":", "tf", ".", "placeholder_with_default", "(", "0.", ",", "shape", "=", "(", ")", ")", ",", "\n", "\"num_features_nonzero\"", ":", "tf", ".", "placeholder_with_default", "(", "0", ",", "shape", "=", "(", ")", ")", "\n", "}", "\n", "self", ".", "model_ae", "=", "GCN_Align_Unit", "(", "self", ".", "args", ",", "self", ".", "ph_ae", ",", "input_dim", "=", "self", ".", "ae_input", "[", "2", "]", "[", "1", "]", ",", "\n", "output_dim", "=", "self", ".", "args", ".", "ae_dim", ",", "ILL", "=", "self", ".", "train", ",", "\n", "sparse_inputs", "=", "True", ",", "featureless", "=", "False", ",", "logging", "=", "False", ")", "\n", "self", ".", "model_se", "=", "GCN_Align_Unit", "(", "self", ".", "args", ",", "self", ".", "ph_se", ",", "input_dim", "=", "self", ".", "e", ",", "output_dim", "=", "self", ".", "args", ".", "se_dim", ",", "\n", "ILL", "=", "self", ".", "train", ",", "sparse_inputs", "=", "False", ",", "\n", "featureless", "=", "True", ",", "logging", "=", "False", ")", "\n", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.train_embeddings": [[737, 786], ["len", "numpy.array", "pos.reshape", "pos.reshape", "range", "gcn_align.GCN_Align.session.run", "gcn_align.GCN_Align.session.run", "numpy.ones", "train_links[].reshape", "numpy.ones", "train_links[].reshape", "time.time", "gcn_align.GCN_Align.utils.construct_feed_dict", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.utils.construct_feed_dict", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.update", "gcn_align.GCN_Align.session.run", "gcn_align.GCN_Align.session.run", "print", "numpy.random.choice", "numpy.random.choice", "gcn_align.GCN_Align.valid_", "openea.modules.finding.evaluation.early_stop", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.construct_feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Utils.construct_feed_dict", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.valid_", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "train_embeddings", "(", "self", ",", "loss", ",", "optimizer", ",", "output", ")", ":", "\n", "# **t=train_number k=neg_num", "\n", "        ", "neg_num", "=", "self", ".", "args", ".", "neg_triple_num", "\n", "train_num", "=", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "train_links", "=", "np", ".", "array", "(", "self", ".", "kgs", ".", "train_links", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg_left", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "pos", "=", "np", ".", "ones", "(", "(", "train_num", ",", "neg_num", ")", ")", "*", "(", "train_links", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "train_num", ",", "1", ")", ")", ")", "\n", "neg2_right", "=", "pos", ".", "reshape", "(", "(", "train_num", "*", "neg_num", ",", ")", ")", "\n", "neg2_left", "=", "None", "\n", "neg_right", "=", "None", "\n", "feed_dict_se", "=", "None", "\n", "feed_dict_ae", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "i", "%", "10", "==", "1", ":", "\n", "                ", "neg2_left", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "e", ",", "train_num", "*", "neg_num", ")", "\n", "neg_right", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "e", ",", "train_num", "*", "neg_num", ")", "\n", "", "feed_dict_ae", "=", "self", ".", "utils", ".", "construct_feed_dict", "(", "self", ".", "ae_input", ",", "self", ".", "support", ",", "self", ".", "ph_ae", ")", "\n", "feed_dict_ae", ".", "update", "(", "{", "self", ".", "ph_ae", "[", "'dropout'", "]", ":", "self", ".", "args", ".", "dropout", "}", ")", "\n", "feed_dict_ae", ".", "update", "(", "{", "'neg_left:0'", ":", "neg_left", ",", "'neg_right:0'", ":", "neg_right", ",", "\n", "'neg2_left:0'", ":", "neg2_left", ",", "'neg2_right:0'", ":", "neg2_right", "}", ")", "\n", "feed_dict_se", "=", "self", ".", "utils", ".", "construct_feed_dict", "(", "1.", ",", "self", ".", "support", ",", "self", ".", "ph_se", ")", "\n", "feed_dict_se", ".", "update", "(", "{", "self", ".", "ph_se", "[", "'dropout'", "]", ":", "self", ".", "args", ".", "dropout", "}", ")", "\n", "feed_dict_se", ".", "update", "(", "{", "'neg_left:0'", ":", "neg_left", ",", "'neg_right:0'", ":", "neg_right", ",", "\n", "'neg2_left:0'", ":", "neg2_left", ",", "'neg2_right:0'", ":", "neg2_right", "}", ")", "\n", "# batch_loss1, _ = self.session.run(fetches=[self.model_ae.loss, self.model_ae.opt_op],", "\n", "#                                   feed_dict=feed_dict_ae)", "\n", "batch_loss2", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "model_se", ".", "loss", ",", "self", ".", "model_se", ".", "opt_op", "]", ",", "\n", "feed_dict", "=", "feed_dict_se", ")", "\n", "# ********************temp reduce ae*****************************", "\n", "# batch_loss = batch_loss1 + batch_loss2", "\n", "batch_loss", "=", "batch_loss2", "\n", "print", "(", "'epoch {}, avg. relation triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "i", ",", "batch_loss", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# ********************no early stop********************************************", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "self", ".", "feed_dict_se", "=", "feed_dict_se", "\n", "self", ".", "feed_dict_ae", "=", "feed_dict_ae", "\n", "flag", "=", "self", ".", "valid_", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "vec_se", "=", "self", ".", "session", ".", "run", "(", "output", ",", "feed_dict", "=", "feed_dict_se", ")", "\n", "vec_ae", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_ae", ".", "outputs", ",", "feed_dict", "=", "feed_dict_ae", ")", "\n", "self", ".", "vec_se", "=", "vec_se", "\n", "self", ".", "vec_ae", "=", "vec_ae", "\n", "return", "vec_se", ",", "vec_ae", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test": [[787, 801], ["numpy.array", "numpy.array", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "openea.modules.finding.evaluation.test", "numpy.concatenate", "openea.save_results", "openea.save_results"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.test", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_results"], ["\n", "", "def", "test", "(", "self", ",", "save", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "beta", "=", "self", ".", "args", ".", "beta", "\n", "embeddings", "=", "np", ".", "concatenate", "(", "[", "self", ".", "vec_se", "*", "beta", ",", "self", ".", "vec_ae", "*", "(", "1.0", "-", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "self", ".", "vec_se", "\n", "", "embeds1", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "rest_12", ",", "_", ",", "_", "=", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "0", ",", "accurate", "=", "True", ")", "\n", "test", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ",", "normalize", "=", "self", ".", "args", ".", "eval_norm", ",", "csls_k", "=", "self", ".", "args", ".", "csls", ",", "accurate", "=", "True", ")", "\n", "if", "save", ":", "\n", "            ", "rd", ".", "save_results", "(", "self", ".", "out_folder", ",", "rest_12", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.save": [[802, 806], ["openea.save_embeddings", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["\n", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "vec_se", "\n", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "attr_embeds", "=", "self", ".", "vec_ae", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.valid_": [[807, 822], ["gcn_align.GCN_Align.session.run", "numpy.array", "numpy.array", "openea.modules.finding.evaluation.valid", "openea.modules.finding.evaluation.valid", "gcn_align.GCN_Align.session.run", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "else", ":", "\n", "            ", "attr_embeds", "=", "None", "\n", "", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "None", ",", "attr_embeds", ",", "mapping_mat", "=", "None", ")", "\n", "\n", "", "def", "valid_", "(", "self", ",", "stop_metric", ")", ":", "\n", "        ", "se", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_se", ".", "outputs", ",", "feed_dict", "=", "self", ".", "feed_dict_se", ")", "\n", "if", "self", ".", "args", ".", "test_method", "==", "\"sa\"", ":", "\n", "            ", "ae", "=", "self", ".", "session", ".", "run", "(", "self", ".", "model_ae", ".", "outputs", ",", "feed_dict", "=", "self", ".", "feed_dict_ae", ")", "\n", "beta", "=", "self", ".", "args", ".", "beta", "\n", "embeddings", "=", "np", ".", "concatenate", "(", "[", "se", "*", "beta", ",", "ae", "*", "(", "1.0", "-", "beta", ")", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", "=", "se", "\n", "", "embeds1", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities1", "]", ")", "\n", "embeds2", "=", "np", ".", "array", "(", "[", "embeddings", "[", "e", "]", "for", "e", "in", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "]", ")", "\n", "hits1_12", ",", "mrr_12", "=", "valid", "(", "embeds1", ",", "embeds2", ",", "None", ",", "self", ".", "args", ".", "top_k", ",", "self", ".", "args", ".", "test_threads_num", ",", "\n", "metric", "=", "self", ".", "args", ".", "eval_metric", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.run": [[823, 827], ["time.time", "gcn_align.GCN_Align.train_embeddings", "print", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.GCN_Align.train_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["if", "stop_metric", "==", "'hits1'", ":", "\n", "            ", "return", "hits1_12", "\n", "", "return", "mrr_12", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.uniform": [[27, 31], ["tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["def", "uniform", "(", "shape", ",", "scale", "=", "0.05", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Uniform init.\"\"\"", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "scale", ",", "maxval", "=", "scale", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.glorot": [[33, 38], ["numpy.sqrt", "tensorflow.random_uniform", "tensorflow.Variable"], "function", ["None"], ["", "def", "glorot", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Glorot & Bengio (AISTATS 2010) init.\"\"\"", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "initial", "=", "tf", ".", "random_uniform", "(", "shape", ",", "minval", "=", "-", "init_range", ",", "maxval", "=", "init_range", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros": [[40, 44], ["tensorflow.zeros", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "zeros", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All zeros.\"\"\"", "\n", "initial", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones": [[46, 50], ["tensorflow.ones", "tensorflow.Variable"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.ones"], ["", "def", "ones", "(", "shape", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"All ones.\"\"\"", "\n", "initial", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.trunc_normal": [[52, 57], ["tensorflow.Variable", "tensorflow.nn.l2_normalize", "tensorflow.truncated_normal", "math.sqrt"], "function", ["None"], ["", "def", "trunc_normal", "(", "shape", ",", "name", "=", "None", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "initial", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "1.0", "/", "math", ".", "sqrt", "(", "shape", "[", "0", "]", ")", ")", ")", "\n", "if", "not", "normalize", ":", "\n", "        ", "return", "initial", "\n", "", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "initial", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_layer_uid": [[60, 68], ["None"], "function", ["None"], ["", "def", "get_layer_uid", "(", "layer_name", "=", "''", ")", ":", "\n", "    ", "\"\"\"Helper function, assigns unique layer IDs.\"\"\"", "\n", "if", "layer_name", "not", "in", "_LAYER_UIDS", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "=", "1", "\n", "return", "1", "\n", "", "else", ":", "\n", "        ", "_LAYER_UIDS", "[", "layer_name", "]", "+=", "1", "\n", "return", "_LAYER_UIDS", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.sparse_dropout": [[70, 77], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor"], "function", ["None"], ["", "", "def", "sparse_dropout", "(", "x", ",", "keep_prob", ",", "noise_shape", ")", ":", "\n", "    ", "\"\"\"Dropout for sparse tensors.\"\"\"", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "x", ",", "dropout_mask", ")", "\n", "return", "pre_out", "*", "(", "1.", "/", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.dot": [[79, 87], ["print", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print"], ["", "def", "dot", "(", "x", ",", "y", ",", "sparse", "=", "False", ")", ":", "\n", "    ", "\"\"\"Wrapper for tf.matmul (sparse vs dense).\"\"\"", "\n", "print", "(", "x", ")", "\n", "if", "sparse", ":", "\n", "        ", "res", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "tf", ".", "matmul", "(", "x", ",", "y", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.load_attr": [[89, 110], ["openea.modules.utils.util.merge_dic", "openea.modules.utils.util.merge_dic.items", "print", "int", "range", "numpy.zeros", "openea.modules.utils.util.merge_dic.items", "sorted", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.merge_dic", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["", "def", "load_attr", "(", "ent_num", ",", "kgs", ")", ":", "\n", "    ", "cnt", "=", "{", "}", "\n", "entity_attributes_dict", "=", "merge_dic", "(", "kgs", ".", "kg1", ".", "entity_attributes_dict", ",", "kgs", ".", "kg2", ".", "entity_attributes_dict", ")", "\n", "for", "_", ",", "vs", "in", "entity_attributes_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "v", "in", "vs", ":", "\n", "            ", "if", "v", "not", "in", "cnt", ":", "\n", "                ", "cnt", "[", "v", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "cnt", "[", "v", "]", "+=", "1", "\n", "", "", "", "fre", "=", "[", "(", "k", ",", "cnt", "[", "k", "]", ")", "for", "k", "in", "sorted", "(", "cnt", ",", "key", "=", "cnt", ".", "get", ",", "reverse", "=", "True", ")", "]", "\n", "print", "(", "fre", ")", "\n", "attr2id", "=", "{", "}", "\n", "num", "=", "int", "(", "0.7", "*", "len", "(", "cnt", ")", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "attr2id", "[", "fre", "[", "i", "]", "[", "0", "]", "]", "=", "i", "\n", "", "attr", "=", "np", ".", "zeros", "(", "(", "ent_num", ",", "num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "ent", ",", "vs", "in", "entity_attributes_dict", ".", "items", "(", ")", ":", "\n", "        ", "for", "v", "in", "vs", ":", "\n", "            ", "if", "v", "in", "attr2id", ":", "\n", "                ", "attr", "[", "ent", "]", "[", "attr2id", "[", "v", "]", "]", "=", "1.0", "\n", "", "", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_softmax_cross_entropy": [[272, 279], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "masked_softmax_cross_entropy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Softmax cross-entropy loss with masking.\"\"\"", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "loss", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.masked_accuracy": [[281, 289], ["tensorflow.equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax"], "function", ["None"], ["", "def", "masked_accuracy", "(", "preds", ",", "labels", ",", "mask", ")", ":", "\n", "    ", "\"\"\"Accuracy with masking.\"\"\"", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "preds", ",", "1", ")", ",", "tf", ".", "argmax", "(", "labels", ",", "1", ")", ")", "\n", "accuracy_all", "=", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "accuracy_all", "*=", "mask", "\n", "return", "tf", ".", "reduce_mean", "(", "accuracy_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name": [[291, 296], ["tensorflow.get_default_graph().get_tensor_by_name", "tensorflow.placeholder", "tensorflow.get_default_graph"], "function", ["None"], ["", "def", "get_placeholder_by_name", "(", "name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "name", "+", "\":0\"", ")", "\n", "", "except", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.align_loss": [[298, 321], ["len", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "gcn_align.get_placeholder_by_name", "gcn_align.get_placeholder_by_name", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "gcn_align.get_placeholder_by_name", "gcn_align.get_placeholder_by_name", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.nn.relu", "tensorflow.abs", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.abs", "tensorflow.reshape", "tensorflow.add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.get_placeholder_by_name"], ["", "", "def", "align_loss", "(", "outlayer", ",", "ILL", ",", "gamma", ",", "k", ")", ":", "\n", "    ", "left", "=", "ILL", "[", ":", ",", "0", "]", "\n", "right", "=", "ILL", "[", ":", ",", "1", "]", "\n", "t", "=", "len", "(", "ILL", ")", "\n", "left_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "left", ")", "\n", "right_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "right", ")", "\n", "A", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "left_x", "-", "right_x", ")", ",", "1", ")", "\n", "neg_left", "=", "get_placeholder_by_name", "(", "\"neg_left\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg_left\")", "\n", "neg_right", "=", "get_placeholder_by_name", "(", "\"neg_right\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg_right\")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "k", "]", ")", "\n", "D", "=", "A", "+", "gamma", "\n", "L1", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "neg_left", "=", "get_placeholder_by_name", "(", "\"neg2_left\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg2_left\")", "\n", "neg_right", "=", "get_placeholder_by_name", "(", "\"neg2_right\"", ")", "# tf.placeholder(tf.int32, [t * k], \"neg2_right\")", "\n", "neg_l_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_left", ")", "\n", "neg_r_x", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "outlayer", ",", "neg_right", ")", "\n", "B", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "neg_l_x", "-", "neg_r_x", ")", ",", "1", ")", "\n", "C", "=", "-", "tf", ".", "reshape", "(", "B", ",", "[", "t", ",", "k", "]", ")", "\n", "L2", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "C", ",", "tf", ".", "reshape", "(", "D", ",", "[", "t", ",", "1", "]", ")", ")", ")", "\n", "return", "(", "tf", ".", "reduce_sum", "(", "L1", ")", "+", "tf", ".", "reduce_sum", "(", "L2", ")", ")", "/", "(", "2.0", "*", "k", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.__init__": [[133, 142], ["openea.models.basic_model.BasicModel.__init__", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "attr_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "char_embeds", "=", "init_embeddings", "(", "[", "self", ".", "char_list_size", ",", "self", ".", "args", ".", "dim", "]", ",", "'char_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "char_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "value_id_char_ids", "=", "tf", ".", "constant", "(", "self", ".", "value_id_char_ids", ")", "\n", "\n", "", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.init": [[143, 153], ["attre.formatting_attr_triples", "attre.AttrE._define_variables", "attre.AttrE._define_embed_graph", "attre.AttrE._define_semi_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.formatting_attr_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE._define_semi_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "self", ".", "pos_es", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_es", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_as", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_vs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE._define_variables": [[154, 168], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["self", ".", "joint_ents", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "\n", "pes", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "pos_es", ")", "\n", "pas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "pos_as", ")", "\n", "pvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeds", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "value_id_char_ids", ",", "self", ".", "pos_vs", ")", ")", "\n", "nes", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "neg_es", ")", "\n", "nas", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "attr_embeds", ",", "self", ".", "neg_as", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE._define_embed_graph": [[169, 221], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "attre.n_gram_compositional_func", "attre.n_gram_compositional_func", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["nvs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "char_embeds", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "value_id_char_ids", ",", "self", ".", "neg_vs", ")", ")", "\n", "\n", "pvs", "=", "n_gram_compositional_func", "(", "pvs", ",", "self", ".", "args", ".", "literal_len", ",", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "dim", ")", "\n", "nvs", "=", "n_gram_compositional_func", "(", "nvs", ",", "self", ".", "args", ".", "literal_len", ",", "\n", "self", ".", "args", ".", "batch_size", "*", "self", ".", "args", ".", "neg_triple_num", ",", "self", ".", "args", ".", "dim", ")", "\n", "\n", "ents_se", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "joint_ents", ")", "\n", "ents_ce", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds_ce", ",", "self", ".", "joint_ents", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "self", ".", "triple_loss_ce", "=", "get_loss_func", "(", "pes", ",", "pas", ",", "pvs", ",", "nes", ",", "nas", ",", "nvs", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer_ce", "=", "generate_optimizer", "(", "self", ".", "triple_loss_ce", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "cos_sim", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "ents_se", ",", "ents_ce", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "self", ".", "joint_loss", "=", "tf", ".", "reduce_sum", "(", "1", "-", "cos_sim", ")", "\n", "self", ".", "optimizer_joint", "=", "generate_optimizer", "(", "self", ".", "joint_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n", "", "", "def", "launch_triple_training_1epo_ce", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "batch_queue", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "steps_task", "in", "steps_tasks", ":", "\n", "            ", "mp", ".", "Process", "(", "target", "=", "bat", ".", "generate_attribute_triple_batch_queue", ",", "\n", "args", "=", "(", "self", ".", "attribute_triples_list1", ",", "self", ".", "attribute_triples_list2", ",", "\n", "set", "(", "self", ".", "attribute_triples_list1", ")", ",", "set", "(", "self", ".", "attribute_triples_list2", ")", ",", "\n", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ",", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ",", "\n", "self", ".", "args", ".", "batch_size", ",", "steps_task", ",", "\n", "batch_queue", ",", "None", ",", "None", ",", "self", ".", "args", ".", "neg_triple_num", ",", "True", ")", ")", ".", "start", "(", ")", "\n", "", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "batch_pos", ",", "batch_neg", "=", "batch_queue", ".", "get", "(", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "triple_loss_ce", ",", "self", ".", "triple_optimizer_ce", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "pos_es", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "pos_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_pos", "]", ",", "\n", "self", ".", "neg_es", ":", "[", "x", "[", "0", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_as", ":", "[", "x", "[", "1", "]", "for", "x", "in", "batch_neg", "]", ",", "\n", "self", ".", "neg_vs", ":", "[", "x", "[", "2", "]", "for", "x", "in", "batch_neg", "]", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_pos", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "random", ".", "shuffle", "(", "self", ".", "attribute_triples_list1", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "attribute_triples_list2", ")", "\n", "print", "(", "\n", "'epoch {}, CE, avg. triple loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "def", "launch_joint_training_1epo", "(", "self", ",", "epoch", ",", "entities", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE._define_semi_graph": [[222, 250], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "attre.n_gram_compositional_func", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "openea.modules.base.optimizers.generate_optimizer", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.log", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["trained_samples_num", "=", "0", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "entities", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "batch_ents", "=", "list", "(", "entities", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "joint_loss", ",", "self", ".", "optimizer_joint", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "joint_ents", ":", "batch_ents", "}", ")", "\n", "trained_samples_num", "+=", "len", "(", "batch_ents", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, joint learning loss: {:.4f}, time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "relation_triples_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_list", ")", "\n", "attribute_triples_num", "=", "len", "(", "self", ".", "attribute_triples_list1", ")", "+", "len", "(", "self", ".", "attribute_triples_list2", ")", "\n", "relation_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "relation_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "attribute_triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "attribute_triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "relation_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "relation_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "attribute_step_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "attribute_triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "relation_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "attribute_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "entity_list", "=", "list", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", "+", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_triple_training_1epo", "(", "i", ",", "relation_triple_steps", ",", "relation_step_tasks", ",", "relation_batch_queue", ",", "None", ",", "\n", "None", ")", "\n", "# self.launch_triple_training_1epo_ce(i, attribute_triple_steps, attribute_step_tasks, attribute_batch_queue)", "\n", "# self.launch_joint_training_1epo(i, entity_list)", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.eval_ref_sim_mat": [[251, 264], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "attre.AttrE.session.run"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_triple_training_1epo_ce": [[265, 292], ["time.time", "range", "random.shuffle", "random.shuffle", "print", "multiprocessing.Process().start", "batch_queue.get", "attre.AttrE.session.run", "len", "multiprocessing.Process", "time.time", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_joint_training_1epo": [[293, 306], ["time.time", "int", "range", "print", "math.ceil", "list", "attre.AttrE.session.run", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_attre_training_k_repo": [[307, 318], ["range", "attre.AttrE.launch_triple_training_1epo", "attre.AttrE.launch_triple_training_1epo_ce", "attre.AttrE.launch_joint_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_triple_training_1epo_ce", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_joint_training_1epo"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.semi_train": [[319, 323], ["attre.AttrE.train_alignment"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.train_alignment"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.train_alignment": [[324, 368], ["openea.approaches.bootea.generate_supervised_triples", "math.ceil", "range", "attre.generate_supervised_attr_triples", "math.ceil", "range", "list", "attre.AttrE.launch_joint_training_1epo", "time.time", "range", "print", "time.time", "range", "print", "len", "openea.approaches.bootea.generate_pos_batch", "newly_batch1.extend", "attre.AttrE.session.run", "len", "len", "openea.approaches.bootea.generate_pos_batch", "newly_attr_batch1.extend", "attre.AttrE.session.run", "len", "len", "len", "len", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.generate_supervised_attr_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_joint_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.run": [[369, 392], ["time.time", "int", "int", "openea.modules.utils.util.task_divide", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "multiprocessing.Manager.Queue", "list", "range", "print", "len", "len", "len", "len", "math.ceil", "math.ceil", "list", "list", "attre.AttrE.launch_triple_training_1epo", "attre.AttrE.launch_triple_training_1epo_ce", "attre.AttrE.launch_joint_training_1epo", "range", "range", "openea.modules.finding.evaluation.early_stop", "attre.AttrE.valid", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_triple_training_1epo_ce", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.AttrE.launch_joint_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid"], []], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.formatting_attr_triples": [[21, 82], ["attre.formatting_attr_triples.clean_attribute_triples"], "function", ["None"], ["\n", "\n", "def", "clean_attribute_triples", "(", "triples", ")", ":", "\n", "        ", "triples_new", "=", "[", "]", "\n", "for", "(", "e", ",", "a", ",", "v", ")", "in", "triples", ":", "\n", "            ", "v", "=", "v", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "rstrip", "(", "' '", ")", "\n", "v", "=", "v", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "'_'", ",", "' '", ")", ".", "replace", "(", "'-'", ",", "' '", ")", ".", "split", "(", "'\"'", ")", "[", "0", "]", "\n", "triples_new", ".", "append", "(", "(", "e", ",", "a", ",", "v", ")", ")", "\n", "", "return", "triples_new", "\n", "\n", "", "attribute_triples_list1", "=", "clean_attribute_triples", "(", "kgs", ".", "kg1", ".", "local_attribute_triples_list", ")", "\n", "attribute_triples_list2", "=", "clean_attribute_triples", "(", "kgs", ".", "kg2", ".", "local_attribute_triples_list", ")", "\n", "\n", "value_list", "=", "list", "(", "set", "(", "[", "v", "for", "(", "_", ",", "_", ",", "v", ")", "in", "attribute_triples_list1", "+", "attribute_triples_list2", "]", ")", ")", "\n", "char_set", "=", "set", "(", ")", "\n", "ch_num", "=", "{", "}", "\n", "for", "literal", "in", "value_list", ":", "\n", "        ", "for", "ch", "in", "literal", ":", "\n", "            ", "n", "=", "1", "\n", "if", "ch", "in", "ch_num", ":", "\n", "                ", "n", "+=", "ch_num", "[", "ch", "]", "\n", "", "ch_num", "[", "ch", "]", "=", "n", "\n", "\n", "", "", "ch_num", "=", "sorted", "(", "ch_num", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "ch_sum", "=", "sum", "(", "[", "n", "for", "(", "_", ",", "n", ")", "in", "ch_num", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ch_num", ")", ")", ":", "\n", "        ", "if", "ch_num", "[", "i", "]", "[", "1", "]", "/", "ch_sum", ">=", "0.0001", ":", "\n", "            ", "char_set", ".", "add", "(", "ch_num", "[", "i", "]", "[", "0", "]", ")", "\n", "", "", "char_list", "=", "list", "(", "char_set", ")", "\n", "char_id_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "char_list", ")", ")", ":", "\n", "        ", "char_id_dict", "[", "char_list", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "value_char_ids_dict", "=", "{", "}", "\n", "for", "value", "in", "value_list", ":", "\n", "        ", "char_id_list", "=", "[", "0", "for", "_", "in", "range", "(", "literal_len", ")", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "len", "(", "value", ")", ",", "literal_len", ")", ")", ":", "\n", "            ", "if", "value", "[", "i", "]", "in", "char_set", ":", "\n", "                ", "char_id_list", "[", "i", "]", "=", "char_id_dict", "[", "value", "[", "i", "]", "]", "\n", "", "", "value_char_ids_dict", "[", "value", "]", "=", "char_id_list", "\n", "\n", "", "attribute_triples_list1_new", ",", "attribute_triples_list2_new", "=", "list", "(", ")", ",", "list", "(", ")", "\n", "value_id_char_ids", "=", "list", "(", ")", "\n", "value_id_cnt", "=", "0", "\n", "for", "(", "e_id", ",", "a_id", ",", "v", ")", "in", "attribute_triples_list1", ":", "\n", "        ", "attribute_triples_list1_new", ".", "append", "(", "(", "e_id", ",", "a_id", ",", "value_id_cnt", ")", ")", "\n", "value_id_char_ids", ".", "append", "(", "value_char_ids_dict", "[", "v", "]", ")", "\n", "value_id_cnt", "+=", "1", "\n", "\n", "", "for", "(", "e_id", ",", "a_id", ",", "v", ")", "in", "attribute_triples_list2", ":", "\n", "        ", "attribute_triples_list2_new", ".", "append", "(", "(", "e_id", ",", "a_id", ",", "value_id_cnt", ")", ")", "\n", "value_id_char_ids", ".", "append", "(", "value_char_ids_dict", "[", "v", "]", ")", "\n", "value_id_cnt", "+=", "1", "\n", "", "return", "attribute_triples_list1_new", ",", "attribute_triples_list2_new", ",", "value_id_char_ids", ",", "len", "(", "char_list", ")", "+", "1", "\n", "\n", "\n", "", "def", "add_compositional_func", "(", "character_vectors", ")", ":", "\n", "    ", "value_vector_list", "=", "tf", ".", "reduce_mean", "(", "character_vectors", ",", "axis", "=", "1", ")", "\n", "value_vector_list", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "value_vector_list", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.add_compositional_func": [[84, 88], ["tensorflow.reduce_mean", "tensorflow.nn.l2_normalize"], "function", ["None"], ["\n", "\n", "", "def", "n_gram_compositional_func", "(", "character_vectors", ",", "value_lens", ",", "batch_size", ",", "embed_size", ")", ":", "\n", "    ", "pos_c_e_in_lstm", "=", "tf", ".", "unstack", "(", "character_vectors", ",", "num", "=", "value_lens", ",", "axis", "=", "1", ")", "\n", "pos_c_e_lstm", "=", "calculate_ngram_weight", "(", "pos_c_e_in_lstm", ",", "batch_size", ",", "embed_size", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.n_gram_compositional_func": [[90, 94], ["tensorflow.unstack", "attre.calculate_ngram_weight"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.calculate_ngram_weight"], ["\n", "\n", "", "def", "calculate_ngram_weight", "(", "unstacked_tensor", ",", "batch_size", ",", "embed_size", ")", ":", "\n", "    ", "stacked_tensor", "=", "tf", ".", "stack", "(", "unstacked_tensor", ",", "axis", "=", "1", ")", "\n", "stacked_tensor", "=", "tf", ".", "reverse", "(", "stacked_tensor", ",", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.calculate_ngram_weight": [[96, 112], ["tensorflow.stack", "tensorflow.reverse", "tensorflow.constant", "tensorflow.zeros", "tensorflow.while_loop", "len", "tensorflow.greater", "tensorflow.slice", "tensorflow.reduce_mean", "tensorflow.subtract", "tensorflow.add"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.gcn_align.zeros"], ["expected_result", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "embed_size", "]", ")", "\n", "\n", "def", "condition", "(", "index", ",", "summation", ")", ":", "\n", "        ", "return", "tf", ".", "greater", "(", "index", ",", "0", ")", "\n", "\n", "", "def", "body", "(", "index", ",", "summation", ")", ":", "\n", "        ", "precessed", "=", "tf", ".", "slice", "(", "stacked_tensor", ",", "[", "0", ",", "index", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "summand", "=", "tf", ".", "reduce_mean", "(", "precessed", ",", "1", ")", "\n", "return", "tf", ".", "subtract", "(", "index", ",", "1", ")", ",", "tf", ".", "add", "(", "summation", ",", "summand", ")", "\n", "\n", "", "result", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "[", "index", ",", "expected_result", "]", ")", "\n", "return", "result", "[", "1", "]", "\n", "\n", "\n", "", "class", "AttrE", "(", "BasicModel", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.generate_supervised_attr_triples": [[114, 122], ["range", "print", "len", "len", "list", "list", "len", "newly_attr_triples1.extend", "newly_attr_triples2.extend", "attre.generate_newly_attr_triples", "attre.generate_newly_attr_triples", "len", "len"], "function", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.generate_newly_attr_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.generate_newly_attr_triples"], ["\n", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "attribute_triples_list1", ",", "self", ".", "attribute_triples_list2", ",", "self", ".", "value_id_char_ids", ",", "self", ".", "char_list_size", "=", "formatting_attr_triples", "(", "self", ".", "kgs", ",", "self", ".", "args", ".", "literal_len", ")", "\n", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attre.generate_newly_attr_triples": [[124, 129], ["list", "av_dict1.get", "set", "list.append"], "function", ["None"], ["        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'character'", "+", "'embeddings'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.__init__": [[21, 23], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.init": [[24, 41], ["sea.SEA._define_variables", "sea.SEA._define_embed_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'margin-based'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'mapping'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'margin-based'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'uniform'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adam'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._define_variables": [[42, 53], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "tensorflow.variable_scope", "openea.modules.base.initializers.orthogonal_init", "tensorflow.constant", "openea.modules.base.initializers.orthogonal_init", "tensorflow.constant", "numpy.eye", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.orthogonal_init", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.orthogonal_init"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'kgs'", "+", "'mapping'", ")", ":", "\n", "            ", "self", ".", "mapping_mat_1", "=", "orthogonal_init", "(", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "'mapping_matrix_1'", ")", "\n", "self", ".", "eye_mat_1", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "self", ".", "args", ".", "dim", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'eye_1'", ")", "\n", "self", ".", "mapping_mat_2", "=", "orthogonal_init", "(", "[", "self", ".", "args", ".", "dim", ",", "self", ".", "args", ".", "dim", "]", ",", "'mapping_matrix_2'", ")", "\n", "self", ".", "eye_mat_2", "=", "tf", ".", "constant", "(", "np", ".", "eye", "(", "self", ".", "args", ".", "dim", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'eye_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._define_embed_graph": [[54, 99], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "openea.modules.base.losses.get_loss_func", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.name_scope", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.name_scope", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.pow", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.pow", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.get_loss_func", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "get_loss_func", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "self", ".", "args", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'seed_links_placeholder'", ")", ":", "\n", "            ", "self", ".", "labeled_entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "labeled_entities2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "unlabeled_entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "unlabeled_entities2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'seed_links_lookup'", ")", ":", "\n", "            ", "labeled_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "labeled_entities1", ")", "\n", "labeled_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "labeled_entities2", ")", "\n", "unlabeled_embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "unlabeled_entities1", ")", "\n", "unlabeled_embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "unlabeled_entities2", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'sup_mapping_loss'", ")", ":", "\n", "            ", "mapped_12", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "labeled_embeds1", ",", "self", ".", "mapping_mat_1", ")", ")", "\n", "mapped_21", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "labeled_embeds2", ",", "self", ".", "mapping_mat_2", ")", ")", "\n", "map_loss_12", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "labeled_embeds2", "-", "mapped_12", ",", "2", ")", ",", "1", ")", ")", "\n", "map_loss_21", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "labeled_embeds1", "-", "mapped_21", ",", "2", ")", ",", "1", ")", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'semi_sup_mapping_loss'", ")", ":", "\n", "            ", "semi_mapped_121", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "unlabeled_embeds1", ",", "self", ".", "mapping_mat_1", ")", ",", "\n", "self", ".", "mapping_mat_2", ")", ")", "\n", "semi_mapped_212", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "unlabeled_embeds2", ",", "self", ".", "mapping_mat_2", ")", ",", "\n", "self", ".", "mapping_mat_1", ")", ")", "\n", "map_loss_11", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "unlabeled_embeds1", "-", "semi_mapped_121", ",", "2", ")", ",", "1", ")", ")", "\n", "map_loss_22", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "unlabeled_embeds2", "-", "semi_mapped_212", ",", "2", ")", ",", "1", ")", ")", "\n", "self", ".", "mapping_loss", "=", "self", ".", "args", ".", "alpha_1", "*", "(", "map_loss_12", "+", "map_loss_21", ")", "+", "self", ".", "args", ".", "alpha_2", "*", "(", "map_loss_11", "+", "map_loss_22", ")", "\n", "self", ".", "mapping_optimizer", "=", "generate_optimizer", "(", "self", ".", "mapping_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "\n", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_valid_embeddings": [[100, 110], ["sea.SEA.mapping_mat_1.eval", "len", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "_eval_valid_embeddings", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "kgs", ".", "valid_links", ")", ">", "0", ":", "\n", "            ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "\n", "session", "=", "self", ".", "session", ")", "\n", "", "else", ":", "\n", "            ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "", "mapping_mat_1", "=", "self", ".", "mapping_mat_1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping_mat_1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA._eval_test_embeddings": [[111, 116], ["tensorflow.nn.embedding_lookup().eval", "tensorflow.nn.embedding_lookup().eval", "sea.SEA.mapping_mat_1.eval", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "def", "_eval_test_embeddings", "(", "self", ")", ":", "\n", "        ", "embeds1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "embeds2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "kgs", ".", "test_entities2", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat_1", "=", "self", ".", "mapping_mat_1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "return", "embeds1", ",", "embeds2", ",", "mapping_mat_1", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.save": [[117, 124], ["sea.SEA.ent_embeds.eval", "sea.SEA.rel_embeds.eval", "sea.SEA.mapping_mat_1.eval", "sea.SEA.mapping_mat_2.eval", "openea.save_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.load.read.save_embeddings"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ent_embeds", "=", "self", ".", "ent_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "rel_embeds", "=", "self", ".", "rel_embeds", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat_1", "=", "self", ".", "mapping_mat_1", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "mapping_mat_2", "=", "self", ".", "mapping_mat_2", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "rd", ".", "save_embeddings", "(", "self", ".", "out_folder", ",", "self", ".", "kgs", ",", "ent_embeds", ",", "rel_embeds", ",", "None", ",", "\n", "mapping_mat", "=", "mapping_mat_1", ",", "rev_mapping_mat", "=", "mapping_mat_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo": [[125, 128], ["sea.SEA.launch_triple_training_1epo", "sea.SEA.launch_mapping_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo"], ["", "def", "launch_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", ":", "\n", "        ", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "self", ".", "launch_mapping_training_1epo", "(", "epoch", ",", "triple_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_mapping_training_1epo": [[129, 146], ["time.time", "range", "print", "random.sample", "random.sample", "sea.SEA.session.run", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "launch_mapping_training_1epo", "(", "self", ",", "epoch", ",", "triple_steps", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "trained_samples_num", "=", "0", "\n", "for", "i", "in", "range", "(", "triple_steps", ")", ":", "\n", "            ", "labeled_batch", "=", "random", ".", "sample", "(", "self", ".", "kgs", ".", "train_links", ",", "len", "(", "self", ".", "kgs", ".", "train_links", ")", "//", "triple_steps", ")", "\n", "unlabeled_batch", "=", "random", ".", "sample", "(", "self", ".", "kgs", ".", "test_links", "+", "self", ".", "kgs", ".", "valid_links", ",", "\n", "len", "(", "self", ".", "kgs", ".", "test_links", "+", "self", ".", "kgs", ".", "valid_links", ")", "//", "triple_steps", ")", "\n", "batch_loss", ",", "_", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "[", "self", ".", "mapping_loss", ",", "self", ".", "mapping_optimizer", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "labeled_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "labeled_batch", "]", ",", "\n", "self", ".", "labeled_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "labeled_batch", "]", ",", "\n", "self", ".", "unlabeled_entities1", ":", "[", "x", "[", "0", "]", "for", "x", "in", "unlabeled_batch", "]", ",", "\n", "self", ".", "unlabeled_entities2", ":", "[", "x", "[", "1", "]", "for", "x", "in", "unlabeled_batch", "]", "}", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "trained_samples_num", "+=", "len", "(", "labeled_batch", ")", "\n", "", "epoch_loss", "/=", "trained_samples_num", "\n", "print", "(", "'epoch {}, avg. mapping loss: {:.4f}, cost time: {:.4f}s'", ".", "format", "(", "epoch", ",", "epoch_loss", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.run": [[147, 162], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "range", "print", "math.ceil", "list", "sea.SEA.launch_training_1epo", "range", "sea.SEA.valid", "openea.modules.finding.evaluation.early_stop", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.sea.SEA.launch_training_1epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "launch_training_1epo", "(", "i", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "None", ",", "None", ")", "\n", "if", "i", ">=", "self", ".", "args", ".", "start_valid", "and", "i", "%", "self", ".", "args", ".", "eval_freq", "==", "0", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "self", ".", "args", ".", "max_epoch", ":", "\n", "                    ", "break", "\n", "", "", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__": [[25, 29], ["openea.models.basic_model.BasicModel.__init__"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ref_ent1", "=", "None", "\n", "self", ".", "ref_ent2", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.init": [[30, 58], ["bootea_transh.BootEA_TransH._define_variables", "bootea_transh.BootEA_TransH._define_embed_graph", "bootea_transh.BootEA_TransH._define_alignment_graph", "bootea_transh.BootEA_TransH._define_likelihood_graph", "openea.modules.utils.util.load_session", "tensorflow.global_variables_initializer().run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_alignment_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_likelihood_graph", "home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.load_session", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "_define_variables", "(", ")", "\n", "self", ".", "_define_embed_graph", "(", ")", "\n", "self", ".", "_define_alignment_graph", "(", ")", "\n", "self", ".", "_define_likelihood_graph", "(", ")", "\n", "self", ".", "session", "=", "load_session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", "session", "=", "self", ".", "session", ")", "\n", "self", ".", "ref_ent1", "=", "self", ".", "kgs", ".", "valid_entities1", "+", "self", ".", "kgs", ".", "test_entities1", "\n", "self", ".", "ref_ent2", "=", "self", ".", "kgs", ".", "valid_entities2", "+", "self", ".", "kgs", ".", "test_entities2", "\n", "\n", "# customize parameters", "\n", "assert", "self", ".", "args", ".", "init", "==", "'normal'", "\n", "assert", "self", ".", "args", ".", "alignment_module", "==", "'swapping'", "\n", "assert", "self", ".", "args", ".", "loss", "==", "'limited'", "\n", "assert", "self", ".", "args", ".", "neg_sampling", "==", "'truncated'", "\n", "assert", "self", ".", "args", ".", "optimizer", "==", "'Adagrad'", "\n", "assert", "self", ".", "args", ".", "eval_metric", "==", "'inner'", "\n", "assert", "self", ".", "args", ".", "loss_norm", "==", "'L2'", "\n", "\n", "assert", "self", ".", "args", ".", "ent_l2_norm", "is", "True", "\n", "assert", "self", ".", "args", ".", "rel_l2_norm", "is", "True", "\n", "\n", "assert", "self", ".", "args", ".", "pos_margin", ">=", "0.0", "\n", "assert", "self", ".", "args", ".", "neg_margin", ">", "self", ".", "args", ".", "pos_margin", "\n", "\n", "assert", "self", ".", "args", ".", "neg_triple_num", ">", "1", "\n", "assert", "self", ".", "args", ".", "truncated_epsilon", ">", "0.0", "\n", "assert", "self", ".", "args", ".", "learning_rate", ">=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc": [[59, 62], ["tensorflow.nn.l2_normalize", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "_calc", "(", "self", ",", "e", ",", "n", ")", ":", "\n", "        ", "norm", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "n", ",", "1", ")", "\n", "return", "e", "-", "tf", ".", "reduce_sum", "(", "e", "*", "norm", ",", "1", ",", "keep_dims", "=", "True", ")", "*", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_variables": [[63, 71], ["tensorflow.variable_scope", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings", "openea.modules.base.initializers.init_embeddings"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.base.initializers.init_embeddings"], ["", "def", "_define_variables", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'relational'", "+", "'embeddings'", ")", ":", "\n", "            ", "self", ".", "ent_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "entities_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'ent_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "ent_l2_norm", ")", "\n", "self", ".", "rel_embeds", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "'rel_embeds'", ",", "\n", "self", ".", "args", ".", "init", ",", "self", ".", "args", ".", "rel_l2_norm", ")", "\n", "self", ".", "normal_vector", "=", "init_embeddings", "(", "[", "self", ".", "kgs", ".", "relations_num", ",", "self", ".", "args", ".", "dim", "]", ",", "\n", "'normal_vector'", ",", "self", ".", "args", ".", "init", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_embed_graph": [[72, 98], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "bootea_transh.BootEA_TransH._calc", "bootea_transh.BootEA_TransH._calc", "bootea_transh.BootEA_TransH._calc", "bootea_transh.BootEA_TransH._calc", "tensorflow.name_scope", "openea.modules.base.losses.limited_loss", "openea.modules.base.optimizers.generate_optimizer"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._calc", "home.repos.pwc.inspect_result.jadexin_cyctea.base.losses.limited_loss", "home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer"], ["", "", "def", "_define_embed_graph", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'triple_placeholder'", ")", ":", "\n", "            ", "self", ".", "pos_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_hs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_rs", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_lookup'", ")", ":", "\n", "            ", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_hs", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "pos_rs", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "pos_ts", ")", "\n", "nhs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_hs", ")", "\n", "nrs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "neg_rs", ")", "\n", "nts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "neg_ts", ")", "\n", "pos_norm_vec", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "normal_vector", ",", "self", ".", "pos_rs", ")", "\n", "neg_norm_vec", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "normal_vector", ",", "self", ".", "neg_rs", ")", "\n", "phs", "=", "self", ".", "_calc", "(", "phs", ",", "pos_norm_vec", ")", "\n", "pts", "=", "self", ".", "_calc", "(", "pts", ",", "pos_norm_vec", ")", "\n", "nhs", "=", "self", ".", "_calc", "(", "nhs", ",", "neg_norm_vec", ")", "\n", "nts", "=", "self", ".", "_calc", "(", "nts", ",", "neg_norm_vec", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'triple_loss'", ")", ":", "\n", "            ", "self", ".", "triple_loss", "=", "limited_loss", "(", "phs", ",", "prs", ",", "pts", ",", "nhs", ",", "nrs", ",", "nts", ",", "\n", "self", ".", "args", ".", "pos_margin", ",", "self", ".", "args", ".", "neg_margin", ",", "\n", "self", ".", "args", ".", "loss_norm", ",", "balance", "=", "self", ".", "args", ".", "neg_margin_balance", ")", "\n", "self", ".", "triple_optimizer", "=", "generate_optimizer", "(", "self", ".", "triple_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_alignment_graph": [[99, 108], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "openea.modules.base.optimizers.generate_optimizer", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.pow"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "", "def", "_define_alignment_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "new_h", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_r", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "new_t", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "phs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_h", ")", "\n", "prs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rel_embeds", ",", "self", ".", "new_r", ")", "\n", "pts", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "new_t", ")", "\n", "self", ".", "alignment_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "phs", "+", "prs", "-", "pts", ",", "2", ")", ",", "1", ")", ")", ")", ")", "\n", "self", ".", "alignment_optimizer", "=", "generate_optimizer", "(", "self", ".", "alignment_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH._define_likelihood_graph": [[109, 120], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.log", "openea.modules.base.optimizers.generate_optimizer", "len", "len", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.base.optimizers.generate_optimizer", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.literal_encoder.sigmoid"], ["", "def", "_define_likelihood_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "entities1", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "entities2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ")", "\n", "dim", "=", "len", "(", "self", ".", "kgs", ".", "valid_links", ")", "+", "len", "(", "self", ".", "kgs", ".", "test_entities1", ")", "\n", "dim1", "=", "self", ".", "args", ".", "likelihood_slice", "\n", "self", ".", "likelihood_mat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "dim1", ",", "dim", "]", ")", "\n", "ent1_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities1", ")", "\n", "ent2_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "entities2", ")", "\n", "mat", "=", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "ent1_embed", ",", "ent2_embed", ",", "transpose_b", "=", "True", ")", ")", ")", "\n", "self", ".", "likelihood_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "mat", ",", "self", ".", "likelihood_mat", ")", ")", "\n", "self", ".", "likelihood_optimizer", "=", "generate_optimizer", "(", "self", ".", "likelihood_loss", ",", "self", ".", "args", ".", "learning_rate", ",", "opt", "=", "self", ".", "args", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat": [[121, 127], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize().eval", "tensorflow.nn.l2_normalize().eval", "numpy.matmul", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "eval_ref_sim_mat", "(", "self", ")", ":", "\n", "        ", "refs1_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent1", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ent_embeds", ",", "self", ".", "ref_ent2", ")", "\n", "refs1_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs1_embeddings", ",", "1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "refs2_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "refs2_embeddings", ",", "1", ")", ".", "eval", "(", "session", "=", "self", ".", "session", ")", "\n", "return", "np", ".", "matmul", "(", "refs1_embeddings", ",", "refs2_embeddings", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.launch_training_k_epo": [[128, 134], ["range", "bootea_transh.BootEA_TransH.launch_triple_training_1epo"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.jape.JAPE.launch_triple_training_1epo"], ["", "def", "launch_training_k_epo", "(", "self", ",", "iter", ",", "iter_nums", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "epoch", "=", "(", "iter", "-", "1", ")", "*", "iter_nums", "+", "i", "\n", "self", ".", "launch_triple_training_1epo", "(", "epoch", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "\n", "neighbors2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.train_alignment": [[135, 157], ["openea.approaches.bootea.generate_supervised_triples", "math.ceil", "range", "time.time", "range", "print", "len", "openea.approaches.bootea.generate_pos_batch", "newly_batch1.extend", "bootea_transh.BootEA_TransH.session.run", "len", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_supervised_triples", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.generate_pos_batch", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "train_alignment", "(", "self", ",", "kg1", ":", "KG", ",", "kg2", ":", "KG", ",", "entities1", ",", "entities2", ",", "training_epochs", ")", ":", "\n", "        ", "if", "entities1", "is", "None", "or", "len", "(", "entities1", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "newly_tris1", ",", "newly_tris2", "=", "generate_supervised_triples", "(", "kg1", ".", "rt_dict", ",", "kg1", ".", "hr_dict", ",", "kg2", ".", "rt_dict", ",", "kg2", ".", "hr_dict", ",", "\n", "entities1", ",", "entities2", ")", "\n", "steps", "=", "math", ".", "ceil", "(", "(", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "if", "steps", "==", "0", ":", "\n", "            ", "steps", "=", "1", "\n", "", "for", "i", "in", "range", "(", "training_epochs", ")", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "alignment_loss", "=", "0", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "                ", "newly_batch1", ",", "newly_batch2", "=", "generate_pos_batch", "(", "newly_tris1", ",", "newly_tris2", ",", "step", ",", "self", ".", "args", ".", "batch_size", ")", "\n", "newly_batch1", ".", "extend", "(", "newly_batch2", ")", "\n", "alignment_fetches", "=", "{", "\"loss\"", ":", "self", ".", "alignment_loss", ",", "\"train_op\"", ":", "self", ".", "alignment_optimizer", "}", "\n", "alignment_feed_dict", "=", "{", "self", ".", "new_h", ":", "[", "tr", "[", "0", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_r", ":", "[", "tr", "[", "1", "]", "for", "tr", "in", "newly_batch1", "]", ",", "\n", "self", ".", "new_t", ":", "[", "tr", "[", "2", "]", "for", "tr", "in", "newly_batch1", "]", "}", "\n", "alignment_vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "alignment_fetches", ",", "feed_dict", "=", "alignment_feed_dict", ")", "\n", "alignment_loss", "+=", "alignment_vals", "[", "\"loss\"", "]", "\n", "", "alignment_loss", "/=", "(", "len", "(", "newly_tris1", ")", "+", "len", "(", "newly_tris2", ")", ")", "\n", "print", "(", "\"alignment_loss = {:.3f}, time = {:.3f} s\"", ".", "format", "(", "alignment_loss", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.likelihood": [[158, 175], ["time.time", "openea.approaches.bootea.calculate_likelihood_mat", "numpy.array", "list", "range", "print", "len", "range", "random.sample", "bootea_transh.BootEA_TransH.session.run", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.calculate_likelihood_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.rsn4ea.RSN4EA.sample", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run"], ["", "", "def", "likelihood", "(", "self", ",", "labeled_alignment", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "likelihood_mat", "=", "calculate_likelihood_mat", "(", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_alignment", ")", "\n", "likelihood_fetches", "=", "{", "\"likelihood_loss\"", ":", "self", ".", "likelihood_loss", ",", "\"likelihood_op\"", ":", "self", ".", "likelihood_optimizer", "}", "\n", "likelihood_loss", "=", "0.0", "\n", "steps", "=", "len", "(", "self", ".", "ref_ent1", ")", "//", "self", ".", "args", ".", "likelihood_slice", "\n", "ref_ent1_array", "=", "np", ".", "array", "(", "self", ".", "ref_ent1", ")", "\n", "ll", "=", "list", "(", "range", "(", "len", "(", "self", ".", "ref_ent1", ")", ")", ")", "\n", "# print(steps)", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "idx", "=", "random", ".", "sample", "(", "ll", ",", "self", ".", "args", ".", "likelihood_slice", ")", "\n", "likelihood_feed_dict", "=", "{", "self", ".", "entities1", ":", "ref_ent1_array", "[", "idx", "]", ",", "\n", "self", ".", "entities2", ":", "self", ".", "ref_ent2", ",", "\n", "self", ".", "likelihood_mat", ":", "likelihood_mat", "[", "idx", ",", ":", "]", "}", "\n", "vals", "=", "self", ".", "session", ".", "run", "(", "fetches", "=", "likelihood_fetches", ",", "feed_dict", "=", "likelihood_feed_dict", ")", "\n", "likelihood_loss", "+=", "vals", "[", "\"likelihood_loss\"", "]", "\n", "", "print", "(", "\"likelihood_loss = {:.3f}, time = {:.3f} s\"", ".", "format", "(", "likelihood_loss", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.run": [[176, 217], ["time.time", "int", "openea.modules.utils.util.task_divide", "multiprocessing.Manager", "multiprocessing.Manager.Queue", "set", "range", "print", "math.ceil", "list", "print", "bootea_transh.BootEA_TransH.launch_training_k_epo", "openea.approaches.bootea.bootstrapping", "bootea_transh.BootEA_TransH.train_alignment", "time.time", "int", "int", "gc.collect", "openea.generate_neighbours", "openea.generate_neighbours", "print", "range", "bootea_transh.BootEA_TransH.valid", "openea.modules.finding.evaluation.early_stop", "bootea_transh.BootEA_TransH.eval_ref_sim_mat", "bootea_transh.BootEA_TransH.valid", "bootea_transh.BootEA_TransH.eval_kg1_useful_ent_embeddings", "bootea_transh.BootEA_TransH.eval_kg2_useful_ent_embeddings", "len", "len", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.jadexin_cyctea.utils.util.task_divide", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.launch_training_k_epo", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea.bootstrapping", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.train_alignment", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.alinet.generate_neighbours", "home.repos.pwc.inspect_result.jadexin_cyctea.expriment.param.Params.print", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.finding.evaluation.early_stop", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_transh.BootEA_TransH.eval_ref_sim_mat", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.attr2vec.Attr2Vec.valid", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg1_useful_ent_embeddings", "home.repos.pwc.inspect_result.jadexin_cyctea.approaches.bootea_rotate.BootEA_RotatE.eval_kg2_useful_ent_embeddings"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "triples_num", "=", "self", ".", "kgs", ".", "kg1", ".", "relation_triples_num", "+", "self", ".", "kgs", ".", "kg2", ".", "relation_triples_num", "\n", "triple_steps", "=", "int", "(", "math", ".", "ceil", "(", "triples_num", "/", "self", ".", "args", ".", "batch_size", ")", ")", "\n", "steps_tasks", "=", "task_divide", "(", "list", "(", "range", "(", "triple_steps", ")", ")", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "manager", "=", "mp", ".", "Manager", "(", ")", "\n", "training_batch_queue", "=", "manager", ".", "Queue", "(", ")", "\n", "neighbors1", ",", "neighbors2", "=", "None", ",", "None", "\n", "labeled_align", "=", "set", "(", ")", "\n", "sub_num", "=", "self", ".", "args", ".", "sub_epoch", "\n", "iter_nums", "=", "self", ".", "args", ".", "max_epoch", "//", "sub_num", "\n", "for", "i", "in", "range", "(", "1", ",", "iter_nums", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"\\niteration\"", ",", "i", ")", "\n", "self", ".", "launch_training_k_epo", "(", "i", ",", "sub_num", ",", "triple_steps", ",", "steps_tasks", ",", "training_batch_queue", ",", "neighbors1", ",", "neighbors2", ")", "\n", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "flag", "=", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "self", ".", "early_stop", "=", "early_stop", "(", "self", ".", "flag1", ",", "self", ".", "flag2", ",", "flag", ")", "\n", "if", "self", ".", "early_stop", "or", "i", "==", "iter_nums", ":", "\n", "                    ", "break", "\n", "", "", "labeled_align", ",", "entities1", ",", "entities2", "=", "bootstrapping", "(", "self", ".", "eval_ref_sim_mat", "(", ")", ",", "\n", "self", ".", "ref_ent1", ",", "self", ".", "ref_ent2", ",", "labeled_align", ",", "\n", "self", ".", "args", ".", "sim_th", ",", "self", ".", "args", ".", "k", ")", "\n", "self", ".", "train_alignment", "(", "self", ".", "kgs", ".", "kg1", ",", "self", ".", "kgs", ".", "kg2", ",", "entities1", ",", "entities2", ",", "1", ")", "\n", "if", "i", "*", "sub_num", ">=", "self", ".", "args", ".", "start_valid", ":", "\n", "                ", "self", ".", "valid", "(", "self", ".", "args", ".", "stop_metric", ")", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "assert", "0.0", "<", "self", ".", "args", ".", "truncated_epsilon", "<", "1.0", "\n", "neighbors_num1", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg1", ".", "entities_num", ")", "\n", "neighbors_num2", "=", "int", "(", "(", "1", "-", "self", ".", "args", ".", "truncated_epsilon", ")", "*", "self", ".", "kgs", ".", "kg2", ".", "entities_num", ")", "\n", "if", "neighbors1", "is", "not", "None", ":", "\n", "                ", "del", "neighbors1", ",", "neighbors2", "\n", "", "gc", ".", "collect", "(", ")", "\n", "neighbors1", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg1_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list1", ",", "\n", "neighbors_num1", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "neighbors2", "=", "bat", ".", "generate_neighbours", "(", "self", ".", "eval_kg2_useful_ent_embeddings", "(", ")", ",", "\n", "self", ".", "kgs", ".", "useful_entities_list2", ",", "\n", "neighbors_num2", ",", "self", ".", "args", ".", "batch_threads_num", ")", "\n", "ent_num", "=", "len", "(", "self", ".", "kgs", ".", "kg1", ".", "entities_list", ")", "+", "len", "(", "self", ".", "kgs", ".", "kg2", ".", "entities_list", ")", "\n", "print", "(", "\"generating neighbors of {} entities costs {:.3f} s.\"", ".", "format", "(", "ent_num", ",", "time", ".", "time", "(", ")", "-", "t1", ")", ")", "\n", "", "print", "(", "\"Training ends. Total time = {:.3f} s.\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "", "", ""]]}