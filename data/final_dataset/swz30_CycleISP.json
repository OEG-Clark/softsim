{"home.repos.pwc.inspect_result.swz30_CycleISP.None.test_dnd_raw.denoiser": [[61, 71], ["torch.Tensor().unsqueeze().permute().cuda", "torch.Tensor().unsqueeze().permute().cuda", "torch.Tensor().unsqueeze().permute().cuda", "torch.Tensor().unsqueeze().permute().cuda", "torch.Tensor().unsqueeze().permute().cuda", "torch.Tensor().unsqueeze().permute().cuda", "torch.clamp", "torch.clamp", "torch.clamp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_restoration", "model_restoration.permute().cpu().detach().numpy", "torch.Tensor().unsqueeze().permute", "torch.Tensor().unsqueeze().permute", "torch.Tensor().unsqueeze().permute", "torch.Tensor().unsqueeze().permute", "torch.Tensor().unsqueeze().permute", "torch.Tensor().unsqueeze().permute", "model_restoration.permute().cpu().detach", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "model_restoration.permute().cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model_restoration.permute"], "function", ["None"], ["def", "denoiser", "(", "raw_noisy", ",", "variance", ")", ":", "\n", "    ", "raw_noisy", "=", "torch", ".", "Tensor", "(", "raw_noisy", ")", ".", "unsqueeze", "(", "0", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "cuda", "(", ")", "\n", "variance", "=", "torch", ".", "Tensor", "(", "variance", ")", ".", "unsqueeze", "(", "0", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "cuda", "(", ")", "\n", "# Predict  ", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "raw_restored", "=", "model_restoration", "(", "raw_noisy", ",", "variance", ")", "\n", "", "raw_restored", "=", "torch", ".", "clamp", "(", "raw_restored", ",", "0", ",", "1", ")", "\n", "\n", "raw_restored", "=", "raw_restored", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "return", "raw_restored", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.GaussianBlur.get_gaussian_kernel": [[13, 50], ["torch.arange", "torch.arange", "torch.arange.repeat().view", "x_coord.repeat().view.t", "torch.stack().float", "torch.stack().float", "gaussian_kernel.repeat.view", "gaussian_kernel.repeat.repeat", "torch.Conv2d", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.arange.repeat", "torch.stack", "torch.stack", "torch.sum", "torch.sum"], "function", ["None"], ["def", "get_gaussian_kernel", "(", "kernel_size", "=", "21", ",", "sigma", "=", "5", ",", "channels", "=", "3", ")", ":", "\n", "#if not kernel_size: kernel_size = int(2*np.ceil(2*sigma)+1)", "\n", "#print(\"Kernel is: \",kernel_size)", "\n", "#print(\"Sigma is: \",sigma)", "\n", "    ", "padding", "=", "kernel_size", "//", "2", "\n", "# Create a x, y coordinate grid of shape (kernel_size, kernel_size, 2)", "\n", "x_coord", "=", "torch", ".", "arange", "(", "kernel_size", ")", "\n", "x_grid", "=", "x_coord", ".", "repeat", "(", "kernel_size", ")", ".", "view", "(", "kernel_size", ",", "kernel_size", ")", "\n", "y_grid", "=", "x_grid", ".", "t", "(", ")", "\n", "xy_grid", "=", "torch", ".", "stack", "(", "[", "x_grid", ",", "y_grid", "]", ",", "dim", "=", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "mean", "=", "(", "kernel_size", "-", "1", ")", "/", "2.", "\n", "variance", "=", "sigma", "**", "2.", "\n", "\n", "# Calculate the 2-dimensional gaussian kernel which is", "\n", "# the product of two gaussian distributions for two different", "\n", "# variables (in this case called x and y)", "\n", "gaussian_kernel", "=", "(", "1.", "/", "(", "2.", "*", "math", ".", "pi", "*", "variance", ")", ")", "*", "torch", ".", "exp", "(", "\n", "-", "torch", ".", "sum", "(", "(", "xy_grid", "-", "mean", ")", "**", "2.", ",", "dim", "=", "-", "1", ")", "/", "(", "2", "*", "variance", ")", "\n", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "gaussian_kernel", "=", "gaussian_kernel", "/", "torch", ".", "sum", "(", "gaussian_kernel", ")", "\n", "\n", "# Reshape to 2d depthwise convolutional weight", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "view", "(", "1", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", "\n", "gaussian_kernel", "=", "gaussian_kernel", ".", "repeat", "(", "channels", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "gaussian_filter", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "groups", "=", "channels", ",", "bias", "=", "False", ")", "\n", "\n", "gaussian_filter", ".", "weight", ".", "data", "=", "gaussian_kernel", "\n", "gaussian_filter", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "return", "gaussian_filter", ",", "padding", "\n", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.Augment_Bayer.__init__": [[126, 128], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "transform0", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.Augment_Bayer.transform0": [[128, 130], ["raw.copy", "rgb.copy"], "methods", ["None"], ["", "def", "transform0", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n", "        ", "return", "raw", ".", "copy", "(", ")", ",", "rgb", ".", "copy", "(", ")", "\n", "", "def", "transform1", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.Augment_Bayer.transform1": [[130, 134], ["dataset_utils.bayer_aug", "raw_flip_v.copy", "rgb_flip_v.copy"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_aug"], ["", "def", "transform1", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n", "        ", "raw_flip_v", ",", "rgb_flip_v", "=", "bayer_aug", "(", "raw", "[", "...", ",", "0", "]", ",", "rgb", ",", "flip_h", "=", "True", ",", "flip_w", "=", "False", ",", "transpose", "=", "False", ",", "input_pattern", "=", "\"RGGB\"", ")", "\n", "raw_flip_v", "=", "raw_flip_v", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "raw_flip_v", ".", "copy", "(", ")", ",", "rgb_flip_v", ".", "copy", "(", ")", "\n", "", "def", "transform2", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.Augment_Bayer.transform2": [[134, 138], ["dataset_utils.bayer_aug", "raw_flip_h.copy", "rgb_flip_h.copy"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_aug"], ["", "def", "transform2", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n", "        ", "raw_flip_h", ",", "rgb_flip_h", "=", "bayer_aug", "(", "raw", "[", "...", ",", "0", "]", ",", "rgb", ",", "flip_h", "=", "False", ",", "flip_w", "=", "True", ",", "transpose", "=", "False", ",", "input_pattern", "=", "\"RGGB\"", ")", "\n", "raw_flip_h", "=", "raw_flip_h", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "raw_flip_h", ".", "copy", "(", ")", ",", "rgb_flip_h", ".", "copy", "(", ")", "\n", "", "def", "transform3", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.Augment_Bayer.transform3": [[138, 142], ["dataset_utils.bayer_aug", "raw_flip_h.copy", "rgb_flip_h.copy"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_aug"], ["", "def", "transform3", "(", "self", ",", "raw", ",", "rgb", ")", ":", "\n", "        ", "raw_flip_h", ",", "rgb_flip_h", "=", "bayer_aug", "(", "raw", "[", "...", ",", "0", "]", ",", "rgb", ",", "flip_h", "=", "False", ",", "flip_w", "=", "False", ",", "transpose", "=", "True", ",", "input_pattern", "=", "\"RGGB\"", ")", "\n", "raw_flip_h", "=", "raw_flip_h", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "return", "raw_flip_h", ".", "copy", "(", ")", ",", "rgb_flip_h", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_unify": [[8, 62], ["ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.dstack", "isinstance", "len", "isinstance", "len", "ValueError", "RuntimeError"], "function", ["None"], ["def", "bayer_unify", "(", "raw", ":", "np", ".", "ndarray", ",", "rgb", ":", "np", ".", "ndarray", ",", "input_pattern", ":", "str", ",", "target_pattern", ":", "str", ",", "mode", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Convert a bayer raw image from one bayer pattern to another.\n\n    Parameters\n    ----------\n    raw : np.ndarray in shape (H, W)\n        Bayer raw image to be unified.\n    input_pattern : {\"RGGB\", \"BGGR\", \"GRBG\", \"GBRG\"}\n        The bayer pattern of the input image.\n    target_pattern : {\"RGGB\", \"BGGR\", \"GRBG\", \"GBRG\"}\n        The expected output pattern.\n    mode: {\"crop\", \"pad\"}\n        The way to handle submosaic shift. \"crop\" abandons the outmost pixels,\n        and \"pad\" introduces extra pixels. Use \"crop\" in training and \"pad\" in\n        testing.\n    \"\"\"", "\n", "if", "input_pattern", "not", "in", "BAYER_PATTERNS", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown input bayer pattern!'", ")", "\n", "", "if", "target_pattern", "not", "in", "BAYER_PATTERNS", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown target bayer pattern!'", ")", "\n", "", "if", "mode", "not", "in", "NORMALIZATION_MODE", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown normalization mode!'", ")", "\n", "", "if", "not", "isinstance", "(", "raw", ",", "np", ".", "ndarray", ")", "or", "len", "(", "raw", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'raw should be a 2-dimensional numpy.ndarray!'", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", "or", "len", "(", "rgb", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'rgb should be a 3-dimensional numpy.ndarray!'", ")", "\n", "\n", "", "if", "input_pattern", "==", "target_pattern", ":", "\n", "        ", "h_offset", ",", "w_offset", "=", "0", ",", "0", "\n", "", "elif", "input_pattern", "[", "0", "]", "==", "target_pattern", "[", "2", "]", "and", "input_pattern", "[", "1", "]", "==", "target_pattern", "[", "3", "]", ":", "\n", "        ", "h_offset", ",", "w_offset", "=", "1", ",", "0", "\n", "", "elif", "input_pattern", "[", "0", "]", "==", "target_pattern", "[", "1", "]", "and", "input_pattern", "[", "2", "]", "==", "target_pattern", "[", "3", "]", ":", "\n", "        ", "h_offset", ",", "w_offset", "=", "0", ",", "1", "\n", "", "elif", "input_pattern", "[", "0", "]", "==", "target_pattern", "[", "3", "]", "and", "input_pattern", "[", "1", "]", "==", "target_pattern", "[", "2", "]", ":", "\n", "        ", "h_offset", ",", "w_offset", "=", "1", ",", "1", "\n", "", "else", ":", "# This is not happening in [\"RGGB\", \"BGGR\", \"GRBG\", \"GBRG\"]", "\n", "        ", "raise", "RuntimeError", "(", "'Unexpected pair of input and target bayer pattern!'", ")", "\n", "\n", "", "if", "mode", "==", "\"pad\"", ":", "\n", "        ", "out1", "=", "np", ".", "pad", "(", "raw", ",", "[", "[", "h_offset", ",", "h_offset", "]", ",", "[", "w_offset", ",", "w_offset", "]", "]", ",", "'reflect'", ")", "\n", "out2_1", "=", "np", ".", "pad", "(", "rgb", "[", ":", ",", ":", ",", "0", "]", ",", "[", "[", "h_offset", ",", "h_offset", "]", ",", "[", "w_offset", ",", "w_offset", "]", "]", ",", "'reflect'", ")", "\n", "out2_2", "=", "np", ".", "pad", "(", "rgb", "[", ":", ",", ":", ",", "1", "]", ",", "[", "[", "h_offset", ",", "h_offset", "]", ",", "[", "w_offset", ",", "w_offset", "]", "]", ",", "'reflect'", ")", "\n", "out2_3", "=", "np", ".", "pad", "(", "rgb", "[", ":", ",", ":", ",", "2", "]", ",", "[", "[", "h_offset", ",", "h_offset", "]", ",", "[", "w_offset", ",", "w_offset", "]", "]", ",", "'reflect'", ")", "\n", "out2", "=", "np", ".", "dstack", "(", "(", "out2_1", ",", "out2_2", ",", "out2_3", ")", ")", "\n", "", "elif", "mode", "==", "\"crop\"", ":", "\n", "        ", "h", ",", "w", "=", "raw", ".", "shape", "\n", "out1", "=", "raw", "[", "h_offset", ":", "h", "-", "h_offset", ",", "w_offset", ":", "w", "-", "w_offset", "]", "\n", "out2", "=", "rgb", "[", "h_offset", ":", "h", "-", "h_offset", ",", "w_offset", ":", "w", "-", "w_offset", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown normalization mode!'", ")", "\n", "\n", "", "return", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_aug": [[64, 116], ["dataset_utils.bayer_unify", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "numpy.dstack", "isinstance", "len", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_unify"], ["", "def", "bayer_aug", "(", "raw", ":", "np", ".", "ndarray", ",", "rgb", ":", "np", ".", "ndarray", ",", "flip_h", ":", "bool", ",", "flip_w", ":", "bool", ",", "transpose", ":", "bool", ",", "input_pattern", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    Apply augmentation to a bayer raw image.\n\n    Parameters\n    ----------\n    raw : np.ndarray in shape (H, W)\n        Bayer raw image to be augmented. H and W must be even numbers.\n    flip_h : bool\n        If True, do vertical flip.\n    flip_w : bool\n        If True, do horizontal flip.\n    transpose : bool\n        If True, do transpose.\n    input_pattern : {\"RGGB\", \"BGGR\", \"GRBG\", \"GBRG\"}\n        The bayer pattern of the input image.\n    \"\"\"", "\n", "\n", "if", "input_pattern", "not", "in", "BAYER_PATTERNS", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown input bayer pattern!'", ")", "\n", "", "if", "not", "isinstance", "(", "raw", ",", "np", ".", "ndarray", ")", "or", "len", "(", "raw", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'raw should be a 2-dimensional numpy.ndarray'", ")", "\n", "", "if", "raw", ".", "shape", "[", "0", "]", "%", "2", "==", "1", "or", "raw", ".", "shape", "[", "1", "]", "%", "2", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'raw should have even number of height and width!'", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "rgb", ",", "np", ".", "ndarray", ")", "or", "len", "(", "rgb", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'rgb should be a 3-dimensional numpy.ndarray'", ")", "\n", "", "if", "rgb", ".", "shape", "[", "0", "]", "%", "2", "==", "1", "or", "rgb", ".", "shape", "[", "1", "]", "%", "2", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'rgb should have even number of height and width!'", ")", "\n", "\n", "", "aug_pattern", ",", "target_pattern", "=", "input_pattern", ",", "input_pattern", "\n", "\n", "out1", "=", "raw", "\n", "out2", "=", "rgb", "\n", "if", "flip_h", ":", "\n", "        ", "out1", "=", "out1", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "out2", "=", "out2", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "aug_pattern", "=", "aug_pattern", "[", "2", "]", "+", "aug_pattern", "[", "3", "]", "+", "aug_pattern", "[", "0", "]", "+", "aug_pattern", "[", "1", "]", "\n", "", "if", "flip_w", ":", "\n", "        ", "out1", "=", "out1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "out2", "=", "out2", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "aug_pattern", "=", "aug_pattern", "[", "1", "]", "+", "aug_pattern", "[", "0", "]", "+", "aug_pattern", "[", "3", "]", "+", "aug_pattern", "[", "2", "]", "\n", "", "if", "transpose", ":", "\n", "        ", "out1", "=", "out1", ".", "T", "\n", "out2_1", "=", "out2", "[", ":", ",", ":", ",", "0", "]", ".", "T", "\n", "out2_2", "=", "out2", "[", ":", ",", ":", ",", "1", "]", ".", "T", "\n", "out2_3", "=", "out2", "[", ":", ",", ":", ",", "2", "]", ".", "T", "\n", "out2", "=", "np", ".", "dstack", "(", "(", "out2_1", ",", "out2_2", ",", "out2_3", ")", ")", "\n", "aug_pattern", "=", "aug_pattern", "[", "0", "]", "+", "aug_pattern", "[", "2", "]", "+", "aug_pattern", "[", "1", "]", "+", "aug_pattern", "[", "3", "]", "\n", "\n", "", "out1", ",", "out2", "=", "bayer_unify", "(", "out1", ",", "out2", ",", "aug_pattern", ",", "target_pattern", ",", "\"crop\"", ")", "\n", "return", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.plot_utils.plot_psnr": [[6, 15], ["numpy.linspace", "matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.savefig", "matplotlib.close", "len", "len"], "function", ["None"], ["def", "plot_psnr", "(", "apath", ",", "epoch", ",", "psnr_vec", ",", "mode", "=", "None", ")", ":", "\n", "    ", "axis", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "psnr_vec", ")", ",", "len", "(", "psnr_vec", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "axis", ",", "psnr_vec", ")", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'PSNR'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "'{}psnr_{}.pdf'", ".", "format", "(", "apath", ",", "mode", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.plot_utils.plot_loss": [[17, 38], ["len", "numpy.linspace", "matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.savefig", "matplotlib.close", "numpy.linspace", "matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.savefig", "matplotlib.close", "len", "len"], "function", ["None"], ["", "def", "plot_loss", "(", "apath", ",", "epoch", ",", "loss_vec", ")", ":", "\n", "    ", "if", "len", "(", "loss_vec", ")", "==", "epoch", ":", "\n", "        ", "axis", "=", "np", ".", "linspace", "(", "1", ",", "epoch", ",", "epoch", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "axis", ",", "loss_vec", ")", "\n", "#plt.legend()", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "'{}loss.pdf'", ".", "format", "(", "apath", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "", "else", ":", "\n", "        ", "axis", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "loss_vec", ")", ",", "len", "(", "loss_vec", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "axis", ",", "loss_vec", ")", "\n", "#plt.legend()", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "'{}loss_resume.pdf'", ".", "format", "(", "apath", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.noise_sampling.random_noise_levels_dnd": [[18, 32], ["torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.uniform.Uniform", "dist.normal.Normal.sample", "torch.pow", "torch.pow", "torch.normal.Normal", "dist.normal.Normal.sample", "torch.pow", "torch.pow", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "line"], "function", ["None"], ["def", "random_noise_levels_dnd", "(", ")", ":", "\n", "  ", "\"\"\"Generates random noise levels from a log-log linear distribution.\"\"\"", "\n", "log_min_shot_noise", "=", "torch", ".", "log10", "(", "torch", ".", "Tensor", "(", "[", "0.0001", "]", ")", ")", "\n", "log_max_shot_noise", "=", "torch", ".", "log10", "(", "torch", ".", "Tensor", "(", "[", "0.012", "]", ")", ")", "\n", "distribution", "=", "dist", ".", "uniform", ".", "Uniform", "(", "log_min_shot_noise", ",", "log_max_shot_noise", ")", "\n", "\n", "log_shot_noise", "=", "distribution", ".", "sample", "(", ")", "\n", "shot_noise", "=", "torch", ".", "pow", "(", "10", ",", "log_shot_noise", ")", "\n", "distribution", "=", "dist", ".", "normal", ".", "Normal", "(", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ",", "torch", ".", "Tensor", "(", "[", "0.26", "]", ")", ")", "\n", "read_noise", "=", "distribution", ".", "sample", "(", ")", "\n", "line", "=", "lambda", "x", ":", "2.18", "*", "x", "+", "1.20", "\n", "log_read_noise", "=", "line", "(", "log_shot_noise", ")", "+", "read_noise", "\n", "read_noise", "=", "torch", ".", "pow", "(", "10", ",", "log_read_noise", ")", "\n", "return", "shot_noise", ",", "read_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.noise_sampling.random_noise_levels_sidd": [[34, 49], ["torch.log10", "torch.log10", "torch.log10", "torch.log10", "torch.uniform.Uniform", "dist.normal.Normal.sample", "torch.pow", "torch.pow", "torch.normal.Normal", "dist.normal.Normal.sample", "torch.pow", "torch.pow", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "line"], "function", ["None"], ["", "def", "random_noise_levels_sidd", "(", ")", ":", "\n", "  ", "\"\"\" Where read_noise in SIDD is not 0 \"\"\"", "\n", "log_min_shot_noise", "=", "torch", ".", "log10", "(", "torch", ".", "Tensor", "(", "[", "0.00068674", "]", ")", ")", "\n", "log_max_shot_noise", "=", "torch", ".", "log10", "(", "torch", ".", "Tensor", "(", "[", "0.02194856", "]", ")", ")", "\n", "distribution", "=", "dist", ".", "uniform", ".", "Uniform", "(", "log_min_shot_noise", ",", "log_max_shot_noise", ")", "\n", "\n", "log_shot_noise", "=", "distribution", ".", "sample", "(", ")", "\n", "shot_noise", "=", "torch", ".", "pow", "(", "10", ",", "log_shot_noise", ")", "\n", "\n", "distribution", "=", "dist", ".", "normal", ".", "Normal", "(", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ",", "torch", ".", "Tensor", "(", "[", "0.20", "]", ")", ")", "\n", "read_noise", "=", "distribution", ".", "sample", "(", ")", "\n", "line", "=", "lambda", "x", ":", "1.85", "*", "x", "+", "0.30", "### Line SIDD test set", "\n", "log_read_noise", "=", "line", "(", "log_shot_noise", ")", "+", "read_noise", "\n", "read_noise", "=", "torch", ".", "pow", "(", "10", ",", "log_read_noise", ")", "\n", "return", "shot_noise", ",", "read_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.noise_sampling.add_noise": [[51, 60], ["torch.Tensor", "torch.Tensor", "torch.normal.Normal", "dist.normal.Normal.sample", "mean.cuda.cuda", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "add_noise", "(", "image", ",", "shot_noise", "=", "0.01", ",", "read_noise", "=", "0.0005", ",", "use_cuda", "=", "False", ")", ":", "\n", "  ", "\"\"\"Adds random shot (proportional to image) and read (independent) noise.\"\"\"", "\n", "variance", "=", "image", "*", "shot_noise", "+", "read_noise", "\n", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", "\n", "if", "use_cuda", ":", "\n", "    ", "mean", "=", "mean", ".", "cuda", "(", ")", "\n", "", "distribution", "=", "dist", ".", "normal", ".", "Normal", "(", "mean", ",", "torch", ".", "sqrt", "(", "variance", ")", ")", "\n", "noise", "=", "distribution", ".", "sample", "(", ")", "\n", "return", "image", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.freeze": [[5, 8], ["model.parameters"], "function", ["None"], ["def", "freeze", "(", "model", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.unfreeze": [[9, 12], ["model.parameters"], "function", ["None"], ["", "", "def", "unfreeze", "(", "model", ")", ":", "\n", "    ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.is_frozen": [[13, 16], ["all", "model.parameters"], "function", ["None"], ["", "", "def", "is_frozen", "(", "model", ")", ":", "\n", "    ", "x", "=", "[", "p", ".", "requires_grad", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", "\n", "return", "not", "all", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.save_checkpoint": [[17, 21], ["os.path.join", "torch.save"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model_dir", ",", "state", ",", "session", ")", ":", "\n", "    ", "epoch", "=", "state", "[", "'epoch'", "]", "\n", "model_out_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_epoch_{}_{}.pth\"", ".", "format", "(", "epoch", ",", "session", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "model_out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.load_checkpoint": [[22, 33], ["torch.load", "model.load_state_dict", "collections.OrderedDict", "state_dict.items", "model.load_state_dict"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "weights", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "weights", ")", "\n", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "", "except", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.load_checkpoint_multigpu": [[35, 43], ["torch.load", "collections.OrderedDict", "state_dict.items", "model.load_state_dict"], "function", ["None"], ["", "", "def", "load_checkpoint_multigpu", "(", "model", ",", "weights", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "weights", ")", "\n", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.load_start_epoch": [[44, 48], ["torch.load"], "function", ["None"], ["", "def", "load_start_epoch", "(", "weights", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "weights", ")", "\n", "epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.model_utils.load_optim": [[49, 54], ["torch.load", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_optim", "(", "optimizer", ",", "weights", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "weights", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "lr", "=", "p", "[", "'lr'", "]", "\n", "return", "lr", "\n", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_numpy_file": [[9, 11], ["any", "filename.endswith"], "function", ["None"], ["def", "is_numpy_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".npy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_image_file": [[12, 14], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".jpg\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_png_file": [[15, 17], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_png_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".png\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_pkl_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["", "def", "is_pkl_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "[", "\".pkl\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_dict": [[21, 25], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_dict", "(", "filename_", ")", ":", "\n", "    ", "with", "open", "(", "filename_", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "ret_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_pkl": [[26, 30], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_pkl", "(", "filename_", ")", ":", "\n", "    ", "with", "open", "(", "filename_", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "ret_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.save_dict": [[31, 34], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_dict", "(", "dict_", ",", "filename_", ")", ":", "\n", "    ", "with", "open", "(", "filename_", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "dict_", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_npy": [[35, 38], ["numpy.load"], "function", ["None"], ["", "", "def", "load_npy", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "np", ".", "load", "(", "filepath", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_img": [[39, 44], ["lycon.load", "img.astype.astype"], "function", ["None"], ["", "def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "lycon", ".", "load", "(", "filepath", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "/", "255.", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.batch_PSNR": [[45, 55], ["img.data.cpu().numpy().astype", "imclean.data.cpu().numpy().astype", "range", "skimage.measure.simple_metrics.compare_psnr", "numpy.isinf", "PSNR.append", "sum", "len", "img.data.cpu().numpy", "imclean.data.cpu().numpy", "img.data.cpu", "imclean.data.cpu"], "function", ["None"], ["", "def", "batch_PSNR", "(", "img", ",", "imclean", ",", "data_range", ")", ":", "\n", "    ", "Img", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Iclean", "=", "imclean", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "PSNR", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "Img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "psnr", "=", "compare_psnr", "(", "Iclean", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "Img", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "data_range", "=", "data_range", ")", "\n", "if", "np", ".", "isinf", "(", "psnr", ")", ":", "\n", "            ", "continue", "\n", "", "PSNR", ".", "append", "(", "psnr", ")", "\n", "", "return", "sum", "(", "PSNR", ")", "/", "len", "(", "PSNR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.batch_SSIM": [[57, 65], ["img.data.cpu().numpy().astype", "imclean.data.cpu().numpy().astype", "range", "skimage.measure.compare_ssim", "SSIM.append", "sum", "len", "img.data.cpu().numpy", "imclean.data.cpu().numpy", "img.data.cpu", "imclean.data.cpu"], "function", ["None"], ["", "def", "batch_SSIM", "(", "img", ",", "imclean", ")", ":", "\n", "    ", "Img", "=", "img", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Iclean", "=", "imclean", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "SSIM", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "Img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ssim", "=", "compare_ssim", "(", "Iclean", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "Img", "[", "i", ",", ":", ",", ":", ",", ":", "]", ",", "gaussian_weights", "=", "True", ",", "use_sample_covariance", "=", "False", ",", "multichannel", "=", "True", ")", "\n", "SSIM", ".", "append", "(", "ssim", ")", "\n", "", "return", "sum", "(", "SSIM", ")", "/", "len", "(", "SSIM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.unpack_raw": [[67, 77], ["torch.zeros", "img2.unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "unpack_raw", "(", "im", ")", ":", "\n", "    ", "bs", ",", "chan", ",", "h", ",", "w", "=", "im", ".", "shape", "\n", "H", ",", "W", "=", "h", "*", "2", ",", "w", "*", "2", "\n", "img2", "=", "torch", ".", "zeros", "(", "(", "bs", ",", "H", ",", "W", ")", ")", "\n", "img2", "[", ":", ",", "0", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", "]", "=", "im", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "img2", "[", ":", ",", "0", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", "]", "=", "im", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "img2", "[", ":", ",", "1", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", "]", "=", "im", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "img2", "[", ":", ",", "1", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", "]", "=", "im", "[", ":", ",", "3", ",", ":", ",", ":", "]", "\n", "img2", "=", "img2", ".", "unsqueeze", "(", "1", ")", "\n", "return", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.pack_raw": [[78, 88], ["numpy.concatenate"], "function", ["None"], ["", "def", "pack_raw", "(", "im", ")", ":", "\n", "    ", "img_shape", "=", "im", ".", "shape", "\n", "H", "=", "img_shape", "[", "0", "]", "\n", "W", "=", "img_shape", "[", "1", "]", "\n", "## R G G B", "\n", "out", "=", "np", ".", "concatenate", "(", "(", "im", "[", "0", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "0", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "1", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "1", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", ",", ":", "]", ")", ",", "axis", "=", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.pack_raw_torch": [[89, 99], ["torch.cat"], "function", ["None"], ["", "def", "pack_raw_torch", "(", "im", ")", ":", "\n", "    ", "img_shape", "=", "im", ".", "shape", "\n", "H", "=", "img_shape", "[", "0", "]", "\n", "W", "=", "img_shape", "[", "1", "]", "\n", "## R G G B", "\n", "out", "=", "torch", ".", "cat", "(", "(", "im", "[", "0", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "0", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "1", ":", "H", ":", "2", ",", "0", ":", "W", ":", "2", ",", ":", "]", ",", "\n", "im", "[", "1", ":", "H", ":", "2", ",", "1", ":", "W", ":", "2", ",", ":", "]", ")", ",", "dim", "=", "2", ")", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.bundle_submissions.bundle_submissions_raw": [[13, 44], ["os.path.join", "range", "os.mkdir", "numpy.zeros", "range", "scipy.savemat", "scipy.loadmat", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir"], ["def", "bundle_submissions_raw", "(", "submission_folder", ",", "session", ")", ":", "\n", "    ", "'''\n    Bundles submission data for raw denoising\n\n    submission_folder Folder where denoised images reside\n\n    Output is written to <submission_folder>/bundled/. Please submit\n    the content of this folder.\n    '''", "\n", "\n", "out_folder", "=", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "session", ")", "\n", "# out_folder = os.path.join(submission_folder, \"bundled/\")", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_folder", ")", "\n", "", "except", ":", "pass", "\n", "\n", "israw", "=", "True", "\n", "eval_version", "=", "\"1.0\"", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "Idenoised", "=", "np", ".", "zeros", "(", "(", "20", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "for", "bb", "in", "range", "(", "20", ")", ":", "\n", "            ", "filename", "=", "'%04d_%02d.mat'", "%", "(", "i", "+", "1", ",", "bb", "+", "1", ")", "\n", "s", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "filename", ")", ")", "\n", "Idenoised_crop", "=", "s", "[", "\"Idenoised_crop\"", "]", "\n", "Idenoised", "[", "bb", "]", "=", "Idenoised_crop", "\n", "", "filename", "=", "'%04d.mat'", "%", "(", "i", "+", "1", ")", "\n", "sio", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "out_folder", ",", "filename", ")", ",", "\n", "{", "\"Idenoised\"", ":", "Idenoised", ",", "\n", "\"israw\"", ":", "israw", ",", "\n", "\"eval_version\"", ":", "eval_version", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.bundle_submissions.bundle_submissions_srgb": [[46, 75], ["os.path.join", "range", "os.mkdir", "numpy.zeros", "range", "scipy.savemat", "scipy.loadmat", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir"], ["", "", "def", "bundle_submissions_srgb", "(", "submission_folder", ",", "session", ")", ":", "\n", "    ", "'''\n    Bundles submission data for sRGB denoising\n    \n    submission_folder Folder where denoised images reside\n\n    Output is written to <submission_folder>/bundled/. Please submit\n    the content of this folder.\n    '''", "\n", "out_folder", "=", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "session", ")", "\n", "# out_folder = os.path.join(submission_folder, \"bundled/\")", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_folder", ")", "\n", "", "except", ":", "pass", "\n", "israw", "=", "False", "\n", "eval_version", "=", "\"1.0\"", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "Idenoised", "=", "np", ".", "zeros", "(", "(", "20", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "for", "bb", "in", "range", "(", "20", ")", ":", "\n", "            ", "filename", "=", "'%04d_%02d.mat'", "%", "(", "i", "+", "1", ",", "bb", "+", "1", ")", "\n", "s", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "filename", ")", ")", "\n", "Idenoised_crop", "=", "s", "[", "\"Idenoised_crop\"", "]", "\n", "Idenoised", "[", "bb", "]", "=", "Idenoised_crop", "\n", "", "filename", "=", "'%04d.mat'", "%", "(", "i", "+", "1", ")", "\n", "sio", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "out_folder", ",", "filename", ")", ",", "\n", "{", "\"Idenoised\"", ":", "Idenoised", ",", "\n", "\"israw\"", ":", "israw", ",", "\n", "\"eval_version\"", ":", "eval_version", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.bundle_submissions.bundle_submissions_srgb_v1": [[79, 108], ["os.path.join", "range", "os.mkdir", "numpy.zeros", "range", "scipy.savemat", "scipy.loadmat", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir"], ["", "", "def", "bundle_submissions_srgb_v1", "(", "submission_folder", ",", "session", ")", ":", "\n", "    ", "'''\n    Bundles submission data for sRGB denoising\n    \n    submission_folder Folder where denoised images reside\n\n    Output is written to <submission_folder>/bundled/. Please submit\n    the content of this folder.\n    '''", "\n", "out_folder", "=", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "session", ")", "\n", "# out_folder = os.path.join(submission_folder, \"bundled/\")", "\n", "try", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_folder", ")", "\n", "", "except", ":", "pass", "\n", "israw", "=", "False", "\n", "eval_version", "=", "\"1.0\"", "\n", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "        ", "Idenoised", "=", "np", ".", "zeros", "(", "(", "20", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "for", "bb", "in", "range", "(", "20", ")", ":", "\n", "            ", "filename", "=", "'%04d_%d.mat'", "%", "(", "i", "+", "1", ",", "bb", "+", "1", ")", "\n", "s", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "submission_folder", ",", "filename", ")", ")", "\n", "Idenoised_crop", "=", "s", "[", "\"Idenoised_crop\"", "]", "\n", "Idenoised", "[", "bb", "]", "=", "Idenoised_crop", "\n", "", "filename", "=", "'%04d.mat'", "%", "(", "i", "+", "1", ")", "\n", "sio", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "out_folder", ",", "filename", ")", ",", "\n", "{", "\"Idenoised\"", ":", "Idenoised", ",", "\n", "\"israw\"", ":", "israw", ",", "\n", "\"eval_version\"", ":", "eval_version", "}", ",", "\n", ")", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdirs": [[5, 11], ["isinstance", "dir_utils.mkdir", "isinstance", "dir_utils.mkdir"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir"], ["def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.mkdir": [[12, 15], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dir_utils.get_last_path": [[16, 19], ["natsort.natsorted", "glob.glob", "os.path.join"], "function", ["None"], ["", "", "def", "get_last_path", "(", "path", ",", "session", ")", ":", "\n", "\t", "x", "=", "natsorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'*%s'", "%", "session", ")", ")", ")", "[", "-", "1", "]", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.datasets.convert_fivek_raw2rgb.raw2rgb": [[28, 43], ["rawpy.imread", "rawpy.imread.postprocess", "rawpy.imread.raw_image_visible.astype", "print", "print", "shutil.move", "lycon.save", "[].rsplit", "inp_path.split"], "function", ["None"], ["def", "raw2rgb", "(", "inp_path", ",", "out_path", ")", ":", "\n", "    ", "filename", "=", "inp_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "0", "]", "+", "'.jpg'", "\n", "filepath", "=", "out_path", "+", "'/'", "+", "filename", "\n", "\n", "raw", "=", "rawpy", ".", "imread", "(", "inp_path", ")", "\n", "im", "=", "raw", ".", "postprocess", "(", "use_camera_wb", "=", "True", ",", "half_size", "=", "False", ",", "user_flip", "=", "0", ",", "no_auto_bright", "=", "True", ",", "output_bps", "=", "8", ")", "\n", "\n", "im_raw", "=", "raw", ".", "raw_image_visible", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "im_raw", ".", "shape", "[", "0", "]", "!=", "im", ".", "shape", "[", "0", "]", "or", "im_raw", ".", "shape", "[", "1", "]", "!=", "im", ".", "shape", "[", "1", "]", ":", "\n", "        ", "print", "(", "'Dimension Mismatch in Image: '", ",", "filename", ")", "\n", "print", "(", "'Moving: '", ",", "filename", "[", ":", "-", "4", "]", "+", "'.dng'", ")", "\n", "shutil", ".", "move", "(", "inp_path", ",", "'./corrupt/FinePixS2Pro/'", ")", "\n", "", "else", ":", "\n", "        ", "lycon", ".", "save", "(", "filepath", ",", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.datasets.image2npy.bit_depth": [[34, 36], ["numpy.ceil", "numpy.log", "numpy.log", "x.max"], "function", ["None"], ["def", "bit_depth", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "ceil", "(", "np", ".", "log", "(", "x", ".", "max", "(", ")", ")", "/", "np", ".", "log", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.datasets.image2npy.raw2npy": [[37, 47], ["os.path.join", "rawpy.imread", "rawpy.imread.raw_image_visible.astype", "numpy.save", "image2npy.bit_depth", "os.path.splitext", "os.path.split"], "function", ["home.repos.pwc.inspect_result.swz30_CycleISP.datasets.image2npy.bit_depth"], ["", "def", "raw2npy", "(", "inp_path", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "inp_path", ")", "[", "-", "1", "]", ")", "[", "0", "]", "+", "'.npy'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "raw", "=", "rawpy", ".", "imread", "(", "inp_path", ")", "\n", "im_raw", "=", "raw", ".", "raw_image_visible", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# normalize values in range [0,1]", "\n", "norm_factor", "=", "2", "**", "bit_depth", "(", "im_raw", ")", "\n", "im_raw", "=", "im_raw", "/", "norm_factor", "\n", "im_raw", "=", "im_raw", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "np", ".", "save", "(", "filepath", ",", "im_raw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.datasets.image2npy.jpg2npy": [[48, 57], ["os.path.join", "lycon.load", "lycon.load.astype", "numpy.save", "os.path.splitext", "os.path.split"], "function", ["None"], ["", "def", "jpg2npy", "(", "inp_path", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "inp_path", ")", "[", "-", "1", "]", ")", "[", "0", "]", "+", "'.npy'", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "jpg", "=", "lycon", ".", "load", "(", "inp_path", ")", "\n", "im_jpg", "=", "jpg", ".", "astype", "(", "np", ".", "float16", ")", "\n", "# normalize values in range [0,1]", "\n", "norm_factor", "=", "255", "\n", "im_jpg", "=", "im_jpg", "/", "norm_factor", "\n", "np", ".", "save", "(", "filepath", ",", "im_jpg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.CALayer.__init__": [[27, 37], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# global average pooling: feature --> point", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.CALayer.forward": [[39, 43], ["denoising_rgb.CALayer.avg_pool", "denoising_rgb.CALayer.conv_du"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_du", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "##########################################################################", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.BasicConv.__init__": [[46, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.BasicConv.forward": [[53, 60], ["denoising_rgb.BasicConv.conv", "denoising_rgb.BasicConv.bn", "denoising_rgb.BasicConv.relu"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.ChannelPool.forward": [[62, 64], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.spatial_attn_layer.__init__": [[66, 70], ["torch.Module.__init__", "denoising_rgb.ChannelPool", "denoising_rgb.BasicConv"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "spatial_attn_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.spatial_attn_layer.forward": [[70, 76], ["denoising_rgb.spatial_attn_layer.compress", "denoising_rgb.spatial_attn_layer.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.DAB.__init__": [[82, 97], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "denoising_rgb.spatial_attn_layer", "denoising_rgb.CALayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules_body.append", "denoising_rgb.conv", "modules_body.append", "modules_body.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "\n", "        ", "super", "(", "DAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "modules_body", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feat", ")", ")", "\n", "if", "i", "==", "0", ":", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "", "self", ".", "SA", "=", "spatial_attn_layer", "(", ")", "## Spatial Attention", "\n", "self", ".", "CA", "=", "CALayer", "(", "n_feat", ",", "reduction", ")", "## Channel Attention", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "n_feat", "*", "2", ",", "n_feat", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.DAB.forward": [[99, 107], ["denoising_rgb.DAB.body", "denoising_rgb.DAB.SA", "denoising_rgb.DAB.CA", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "denoising_rgb.DAB.conv1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "sa_branch", "=", "self", ".", "SA", "(", "res", ")", "\n", "ca_branch", "=", "self", ".", "CA", "(", "res", ")", "\n", "res", "=", "torch", ".", "cat", "(", "[", "sa_branch", ",", "ca_branch", "]", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "conv1x1", "(", "res", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.RRG.__init__": [[113, 122], ["torch.Module.__init__", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "denoising_rgb.DAB", "denoising_rgb.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "act", ",", "num_dab", ")", ":", "\n", "        ", "super", "(", "RRG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "modules_body", "=", "[", "\n", "DAB", "(", "\n", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "act", ")", "for", "_", "in", "range", "(", "num_dab", ")", "]", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.RRG.forward": [[123, 127], ["denoising_rgb.RRG.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.DenoiseNet.__init__": [[132, 158], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "modules_body.append", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "denoising_rgb.conv", "denoising_rgb.RRG", "denoising_rgb.conv", "denoising_rgb.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", "=", "conv", ")", ":", "\n", "        ", "super", "(", "DenoiseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_rrg", "=", "4", "\n", "num_dab", "=", "8", "\n", "n_feats", "=", "64", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "16", "\n", "inp_chans", "=", "3", "\n", "act", "=", "nn", ".", "PReLU", "(", "n_feats", ")", "\n", "\n", "modules_head", "=", "[", "conv", "(", "inp_chans", ",", "n_feats", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ")", "]", "\n", "\n", "modules_body", "=", "[", "\n", "RRG", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "num_dab", "=", "num_dab", ")", "for", "_", "in", "range", "(", "num_rrg", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "modules_tail", "=", "[", "conv", "(", "n_feats", ",", "inp_chans", ",", "kernel_size", ")", "]", "\n", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.DenoiseNet.forward": [[160, 166], ["denoising_rgb.DenoiseNet.head", "denoising_rgb.DenoiseNet.body", "denoising_rgb.DenoiseNet.tail"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noisy_img", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "noisy_img", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "noisy_img", "+", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_rgb.conv": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.CALayer.__init__": [[26, 36], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# global average pooling: feature --> point", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.CALayer.forward": [[38, 42], ["denoising_raw.CALayer.avg_pool", "denoising_raw.CALayer.conv_du"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_du", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "##########################################################################", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.BasicConv.__init__": [[45, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.BasicConv.forward": [[52, 59], ["denoising_raw.BasicConv.conv", "denoising_raw.BasicConv.bn", "denoising_raw.BasicConv.relu"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.ChannelPool.forward": [[61, 63], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.spatial_attn_layer.__init__": [[65, 69], ["torch.Module.__init__", "denoising_raw.ChannelPool", "denoising_raw.BasicConv"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "spatial_attn_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.spatial_attn_layer.forward": [[69, 75], ["denoising_raw.spatial_attn_layer.compress", "denoising_raw.spatial_attn_layer.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.DAB.__init__": [[81, 96], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "denoising_raw.spatial_attn_layer", "denoising_raw.CALayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules_body.append", "denoising_raw.conv", "modules_body.append", "modules_body.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "\n", "        ", "super", "(", "DAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "modules_body", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feat", ")", ")", "\n", "if", "i", "==", "0", ":", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "", "self", ".", "SA", "=", "spatial_attn_layer", "(", ")", "## Spatial Attention", "\n", "self", ".", "CA", "=", "CALayer", "(", "n_feat", ",", "reduction", ")", "## Channel Attention", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "n_feat", "*", "2", ",", "n_feat", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.DAB.forward": [[98, 106], ["denoising_raw.DAB.body", "denoising_raw.DAB.SA", "denoising_raw.DAB.CA", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "denoising_raw.DAB.conv1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "sa_branch", "=", "self", ".", "SA", "(", "res", ")", "\n", "ca_branch", "=", "self", ".", "CA", "(", "res", ")", "\n", "res", "=", "torch", ".", "cat", "(", "[", "sa_branch", ",", "ca_branch", "]", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "conv1x1", "(", "res", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.RRG.__init__": [[112, 121], ["torch.Module.__init__", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "denoising_raw.DAB", "denoising_raw.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "act", ",", "num_dab", ")", ":", "\n", "        ", "super", "(", "RRG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "modules_body", "=", "[", "\n", "DAB", "(", "\n", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "act", ")", "for", "_", "in", "range", "(", "num_dab", ")", "]", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.RRG.forward": [[122, 126], ["denoising_raw.RRG.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.DenoiseNet.__init__": [[131, 157], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "modules_body.append", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "denoising_raw.conv", "denoising_raw.RRG", "denoising_raw.conv", "denoising_raw.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", "=", "conv", ")", ":", "\n", "        ", "super", "(", "DenoiseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_rrg", "=", "4", "\n", "num_dab", "=", "8", "\n", "n_feats", "=", "64", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "16", "\n", "inp_chans", "=", "8", "# 4 RGGB channels, and 4 Variance maps", "\n", "act", "=", "nn", ".", "PReLU", "(", "n_feats", ")", "\n", "\n", "modules_head", "=", "[", "conv", "(", "inp_chans", ",", "n_feats", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ")", "]", "\n", "\n", "modules_body", "=", "[", "\n", "RRG", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "num_dab", "=", "num_dab", ")", "for", "_", "in", "range", "(", "num_rrg", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "modules_tail", "=", "[", "conv", "(", "n_feats", ",", "inp_chans", "//", "2", ",", "kernel_size", ")", "]", "\n", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.DenoiseNet.forward": [[159, 166], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "denoising_raw.DenoiseNet.head", "denoising_raw.DenoiseNet.body", "denoising_raw.DenoiseNet.tail"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "noisy_img", ",", "variance", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "noisy_img", ",", "variance", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "noisy_img", "+", "x", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.denoising_raw.conv": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.CALayer.__init__": [[43, 53], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# global average pooling: feature --> point", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.CALayer.forward": [[55, 59], ["cycleisp.CALayer.avg_pool", "cycleisp.CALayer.conv_du"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "y", "=", "self", ".", "conv_du", "(", "y", ")", "\n", "return", "x", "*", "y", "\n", "##########################################################################", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.BasicConv.__init__": [[62, 68], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.BasicConv.forward": [[69, 76], ["cycleisp.BasicConv.conv", "cycleisp.BasicConv.bn", "cycleisp.BasicConv.relu"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.ChannelPool.forward": [[78, 80], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.spatial_attn_layer.__init__": [[82, 86], ["torch.Module.__init__", "cycleisp.ChannelPool", "cycleisp.BasicConv"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "spatial_attn_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.spatial_attn_layer.forward": [[86, 92], ["cycleisp.spatial_attn_layer.compress", "cycleisp.spatial_attn_layer.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# import pdb;pdb.set_trace()", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.DAB.__init__": [[98, 113], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "range", "cycleisp.spatial_attn_layer", "cycleisp.CALayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules_body.append", "cycleisp.conv", "modules_body.append", "modules_body.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "\n", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "\n", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "\n", "        ", "super", "(", "DAB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ",", "bias", "=", "bias", ")", ")", "\n", "if", "bn", ":", "modules_body", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_feat", ")", ")", "\n", "if", "i", "==", "0", ":", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "", "self", ".", "SA", "=", "spatial_attn_layer", "(", ")", "## Spatial Attention", "\n", "self", ".", "CA", "=", "CALayer", "(", "n_feat", ",", "reduction", ")", "## Channel Attention", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "n_feat", "*", "2", ",", "n_feat", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.DAB.forward": [[115, 123], ["cycleisp.DAB.body", "cycleisp.DAB.SA", "cycleisp.DAB.CA", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cycleisp.DAB.conv1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "sa_branch", "=", "self", ".", "SA", "(", "res", ")", "\n", "ca_branch", "=", "self", ".", "CA", "(", "res", ")", "\n", "res", "=", "torch", ".", "cat", "(", "[", "sa_branch", ",", "ca_branch", "]", ",", "dim", "=", "1", ")", "\n", "res", "=", "self", ".", "conv1x1", "(", "res", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.RRG.__init__": [[129, 138], ["torch.Module.__init__", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cycleisp.DAB", "cycleisp.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "act", ",", "num_dab", ")", ":", "\n", "        ", "super", "(", "RRG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules_body", "=", "[", "]", "\n", "modules_body", "=", "[", "\n", "DAB", "(", "\n", "conv", ",", "n_feat", ",", "kernel_size", ",", "reduction", ",", "bias", "=", "True", ",", "bn", "=", "False", ",", "act", "=", "act", ")", "for", "_", "in", "range", "(", "num_dab", ")", "]", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feat", ",", "n_feat", ",", "kernel_size", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.RRG.forward": [[139, 143], ["cycleisp.RRG.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "body", "(", "x", ")", "\n", "res", "+=", "x", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.Rgb2Raw.__init__": [[149, 178], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "modules_body.append", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cycleisp.conv", "cycleisp.RRG", "cycleisp.conv", "cycleisp.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", "=", "conv", ")", ":", "\n", "        ", "super", "(", "Rgb2Raw", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_nc", "=", "3", "\n", "output_nc", "=", "4", "\n", "\n", "num_rrg", "=", "3", "\n", "num_dab", "=", "5", "\n", "n_feats", "=", "96", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "8", "\n", "\n", "\n", "act", "=", "nn", ".", "PReLU", "(", "n_feats", ")", "\n", "\n", "modules_head", "=", "[", "conv", "(", "input_nc", ",", "n_feats", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ")", "]", "\n", "\n", "modules_body", "=", "[", "\n", "RRG", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "num_dab", "=", "num_dab", ")", "for", "_", "in", "range", "(", "num_rrg", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "modules_tail", "=", "[", "conv", "(", "n_feats", ",", "3", ",", "kernel_size", ")", "]", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.Rgb2Raw.forward": [[180, 186], ["cycleisp.Rgb2Raw.head", "cycleisp.Rgb2Raw.body", "cycleisp.Rgb2Raw.tail", "cycleisp.mosaic"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.mosaic"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "mosaic", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.CCM.__init__": [[193, 228], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules_body.append", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.GaussianBlur.get_gaussian_kernel", "cycleisp.conv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "cycleisp.RRG", "cycleisp.conv", "cycleisp.conv", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.GaussianBlur.get_gaussian_kernel", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", "=", "conv", ")", ":", "\n", "        ", "super", "(", "CCM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_nc", "=", "3", "\n", "output_nc", "=", "96", "\n", "\n", "num_rrg", "=", "2", "\n", "num_dab", "=", "2", "\n", "n_feats", "=", "96", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "8", "\n", "\n", "sigma", "=", "12", "## GAUSSIAN_SIGMA", "\n", "\n", "act", "=", "nn", ".", "PReLU", "(", "n_feats", ")", "\n", "\n", "\n", "modules_head", "=", "[", "conv", "(", "input_nc", ",", "n_feats", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ")", "]", "\n", "\n", "modules_downsample", "=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "]", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "*", "modules_downsample", ")", "\n", "\n", "modules_body", "=", "[", "\n", "RRG", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "num_dab", "=", "num_dab", ")", "for", "_", "in", "range", "(", "num_rrg", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "modules_tail", "=", "[", "conv", "(", "n_feats", ",", "output_nc", ",", "kernel_size", ")", ",", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "self", ".", "blur", ",", "self", ".", "pad", "=", "get_gaussian_kernel", "(", "sigma", "=", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.CCM.forward": [[230, 238], ["torch.pad", "torch.pad", "torch.pad", "cycleisp.CCM.blur", "cycleisp.CCM.head", "cycleisp.CCM.downsample", "cycleisp.CCM.body", "cycleisp.CCM.tail"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "self", ".", "pad", ",", "self", ".", "pad", ",", "self", ".", "pad", ",", "self", ".", "pad", ")", ",", "mode", "=", "'reflect'", ")", "\n", "x", "=", "self", ".", "blur", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.Raw2Rgb.__init__": [[244, 277], ["torch.Module.__init__", "torch.PReLU", "torch.PReLU", "torch.PReLU", "modules_body.append", "modules_body.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cycleisp.conv", "cycleisp.RRG", "cycleisp.conv", "cycleisp.conv", "cycleisp.conv", "cycleisp.conv", "range"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv", "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv"], ["    ", "def", "__init__", "(", "self", ",", "conv", "=", "conv", ")", ":", "\n", "        ", "super", "(", "Raw2Rgb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_nc", "=", "4", "\n", "output_nc", "=", "3", "\n", "\n", "num_rrg", "=", "3", "\n", "num_dab", "=", "5", "\n", "n_feats", "=", "96", "\n", "kernel_size", "=", "3", "\n", "reduction", "=", "8", "\n", "\n", "act", "=", "nn", ".", "PReLU", "(", "n_feats", ")", "\n", "\n", "modules_head", "=", "[", "conv", "(", "input_nc", ",", "n_feats", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ")", "]", "\n", "\n", "modules_body", "=", "[", "\n", "RRG", "(", "\n", "conv", ",", "n_feats", ",", "kernel_size", ",", "reduction", ",", "act", "=", "act", ",", "num_dab", "=", "num_dab", ")", "for", "_", "in", "range", "(", "num_rrg", ")", "]", "\n", "\n", "modules_body", ".", "append", "(", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ")", "\n", "modules_body", ".", "append", "(", "act", ")", "\n", "\n", "modules_tail", "=", "[", "conv", "(", "n_feats", ",", "n_feats", ",", "kernel_size", ")", ",", "act", "]", "\n", "modules_tail_rgb", "=", "[", "conv", "(", "n_feats", ",", "output_nc", "*", "4", ",", "kernel_size", "=", "1", ")", "]", "#, nn.Sigmoid()]        ", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "modules_head", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules_body", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "*", "modules_tail", ")", "\n", "self", ".", "tail_rgb", "=", "nn", ".", "Sequential", "(", "*", "modules_tail_rgb", ")", "\n", "\n", "conv1x1", "=", "[", "conv", "(", "n_feats", "*", "2", ",", "n_feats", ",", "kernel_size", "=", "1", ")", "]", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Sequential", "(", "*", "conv1x1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.Raw2Rgb.forward": [[279, 291], ["cycleisp.Raw2Rgb.head", "range", "torch.functional.pixel_shuffle.clone", "cycleisp.Raw2Rgb.tail", "cycleisp.Raw2Rgb.tail_rgb", "torch.functional.pixel_shuffle", "torch.functional.pixel_shuffle", "torch.functional.pixel_shuffle", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ccm_feat", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "body", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "body", "[", "i", "]", "(", "x", ")", "\n", "", "body_out", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "x", "*", "ccm_feat", "## Attention ", "\n", "x", "=", "x", "+", "body_out", "\n", "x", "=", "self", ".", "body", "[", "-", "1", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "x", "=", "self", ".", "tail_rgb", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "pixel_shuffle", "(", "x", ",", "2", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.mosaic": [[16, 27], ["torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "mosaic", "(", "images", ")", ":", "\n", "  ", "\"\"\"Extracts RGGB Bayer planes from RGB image.\"\"\"", "\n", "# import pdb;pdb.set_trace()", "\n", "shape", "=", "images", ".", "shape", "\n", "red", "=", "images", "[", ":", ",", "0", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "green_red", "=", "images", "[", ":", ",", "1", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "\n", "green_blue", "=", "images", "[", ":", ",", "1", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "\n", "blue", "=", "images", "[", ":", ",", "2", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "\n", "images", "=", "torch", ".", "stack", "(", "(", "red", ",", "green_red", ",", "green_blue", ",", "blue", ")", ",", "dim", "=", "1", ")", "\n", "# images = tf.reshape(images, (shape[0] // 2, shape[1] // 2, 4))", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.networks.cycleisp.conv": [[32, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "bias", "=", "True", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "//", "2", ")", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderVal.__init__": [[10, 21], ["torch.utils.data.Dataset.__init__", "sorted", "len", "os.listdir", "os.path.join", "utils.image_utils.is_pkl_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_pkl_file"], ["    ", "def", "__init__", "(", "self", ",", "gt_dir", ",", "img_options", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DataLoaderVal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "gt_files", "=", "sorted", "(", "os", ".", "listdir", "(", "gt_dir", ")", ")", "\n", "\n", "self", ".", "target_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_files", "if", "is_pkl_file", "(", "x", ")", "]", "\n", "\n", "self", ".", "img_options", "=", "img_options", "\n", "self", ".", "tar_size", "=", "len", "(", "self", ".", "target_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderVal.__len__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tar_size", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderVal.__getitem__": [[25, 39], ["utils.image_utils.load_pkl", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "os.path.split", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_pkl"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "tar_index", "=", "index", "%", "self", ".", "tar_size", "\n", "\n", "target", "=", "load_pkl", "(", "self", ".", "target_filenames", "[", "tar_index", "]", ")", "\n", "\n", "clean", ",", "noisy", ",", "variance", "=", "target", "[", "'clean'", "]", ",", "target", "[", "'noisy'", "]", ",", "target", "[", "'variance'", "]", "\n", "\n", "tar_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "target_filenames", "[", "tar_index", "]", ")", "[", "-", "1", "]", "\n", "\n", "clean", "=", "torch", ".", "from_numpy", "(", "clean", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "noisy", "=", "torch", ".", "from_numpy", "(", "noisy", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "variance", "=", "torch", ".", "from_numpy", "(", "variance", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "clean", ",", "noisy", ",", "variance", ",", "tar_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderTest.__init__": [[43, 53], ["torch.utils.data.Dataset.__init__", "sorted", "len", "os.listdir", "os.path.join", "utils.image_utils.is_pkl_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_pkl_file"], ["    ", "def", "__init__", "(", "self", ",", "inp_dir", ",", "input_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DataLoaderTest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_transform", "=", "input_transform", "\n", "\n", "inp_files", "=", "sorted", "(", "os", ".", "listdir", "(", "inp_dir", ")", ")", "\n", "\n", "self", ".", "input_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "inp_dir", ",", "x", ")", "for", "x", "in", "inp_files", "if", "is_pkl_file", "(", "x", ")", "]", "\n", "\n", "self", ".", "inp_size", "=", "len", "(", "self", ".", "input_filenames", ")", "# get the size of input", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderTest.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "inp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_raw.DataLoaderTest.__getitem__": [[57, 73], ["utils.image_utils.load_pkl", "torch.Tensor", "raw_noisy.permute.permute.clone", "utils.image_utils.pack_raw_torch", "raw_noisy.permute.permute.permute", "raw_noisy_orig.permute.permute.permute", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_pkl", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.pack_raw_torch"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", "=", "load_pkl", "(", "self", ".", "input_filenames", "[", "index", "]", ")", "\n", "\n", "# if self.input_transform:", "\n", "#     input= self.input_transform(input)", "\n", "\n", "input_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "input_filenames", "[", "index", "]", ")", "[", "-", "1", "]", "\n", "raw_noisy", "=", "input", "[", "'image'", "]", "\n", "# raw_noisy = raw_noisy[:128,:128,:]", "\n", "raw_noisy", "=", "torch", ".", "Tensor", "(", "raw_noisy", ")", "\n", "raw_noisy_orig", "=", "raw_noisy", ".", "clone", "(", ")", "\n", "raw_noisy", "=", "pack_raw_torch", "(", "raw_noisy", ")", "\n", "raw_noisy", "=", "raw_noisy", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "raw_noisy_orig", "=", "raw_noisy_orig", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "bayer", "=", "input", "[", "'pattern'", "]", "\n", "return", "raw_noisy", ",", "bayer", ",", "input_filename", ",", "raw_noisy_orig", "", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.data_raw.get_validation_data": [[4, 7], ["os.path.exists", "dataset_raw.DataLoaderVal"], "function", ["None"], ["def", "get_validation_data", "(", "inp_dir", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "inp_dir", ")", "\n", "return", "DataLoaderVal", "(", "inp_dir", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.data_raw.get_test_data": [[8, 11], ["os.path.exists", "dataset_raw.DataLoaderTest"], "function", ["None"], ["", "def", "get_test_data", "(", "inp_dir", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "inp_dir", ")", "\n", "return", "DataLoaderTest", "(", "inp_dir", ",", "None", ")", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderVal.__init__": [[13, 27], ["torch.utils.data.Dataset.__init__", "sorted", "sorted", "len", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.image_utils.is_png_file", "utils.image_utils.is_png_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_png_file", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_png_file"], ["    ", "def", "__init__", "(", "self", ",", "rgb_dir", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DataLoaderVal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "clean_files", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'clean'", ")", ")", ")", "\n", "noisy_files", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'noisy'", ")", ")", ")", "\n", "\n", "\n", "self", ".", "clean_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'clean'", ",", "x", ")", "for", "x", "in", "clean_files", "if", "is_png_file", "(", "x", ")", "]", "\n", "self", ".", "noisy_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'noisy'", ",", "x", ")", "for", "x", "in", "noisy_files", "if", "is_png_file", "(", "x", ")", "]", "\n", "\n", "\n", "self", ".", "tar_size", "=", "len", "(", "self", ".", "clean_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderVal.__len__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tar_size", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderVal.__getitem__": [[31, 45], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "clean.permute.permute.permute", "noisy.permute.permute.permute", "numpy.float32", "numpy.float32", "os.path.split", "os.path.split", "utils.image_utils.load_img", "utils.image_utils.load_img"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_img", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "tar_index", "=", "index", "%", "self", ".", "tar_size", "\n", "\n", "\n", "clean", "=", "torch", ".", "from_numpy", "(", "np", ".", "float32", "(", "load_img", "(", "self", ".", "clean_filenames", "[", "tar_index", "]", ")", ")", ")", "\n", "noisy", "=", "torch", ".", "from_numpy", "(", "np", ".", "float32", "(", "load_img", "(", "self", ".", "noisy_filenames", "[", "tar_index", "]", ")", ")", ")", "\n", "\n", "clean_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "clean_filenames", "[", "tar_index", "]", ")", "[", "-", "1", "]", "\n", "noisy_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "noisy_filenames", "[", "tar_index", "]", ")", "[", "-", "1", "]", "\n", "\n", "clean", "=", "clean", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "noisy", "=", "noisy", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "clean", ",", "noisy", ",", "clean_filename", ",", "noisy_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderTest.__init__": [[49, 61], ["torch.utils.data.Dataset.__init__", "sorted", "len", "os.listdir", "os.path.join", "os.path.join", "utils.image_utils.is_png_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_png_file"], ["    ", "def", "__init__", "(", "self", ",", "rgb_dir", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DataLoaderTest", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "noisy_files", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'noisy'", ")", ")", ")", "\n", "\n", "\n", "self", ".", "noisy_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "'noisy'", ",", "x", ")", "for", "x", "in", "noisy_files", "if", "is_png_file", "(", "x", ")", "]", "\n", "\n", "\n", "self", ".", "tar_size", "=", "len", "(", "self", ".", "noisy_filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderTest.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tar_size", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoaderTest.__getitem__": [[65, 76], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "noisy.permute.permute.permute", "numpy.float32", "os.path.split", "utils.image_utils.load_img"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "tar_index", "=", "index", "%", "self", ".", "tar_size", "\n", "\n", "\n", "noisy", "=", "torch", ".", "from_numpy", "(", "np", ".", "float32", "(", "load_img", "(", "self", ".", "noisy_filenames", "[", "tar_index", "]", ")", ")", ")", "\n", "\n", "noisy_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "noisy_filenames", "[", "tar_index", "]", ")", "[", "-", "1", "]", "\n", "\n", "noisy", "=", "noisy", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "noisy", ",", "noisy_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoader_NoisyData.__init__": [[88, 98], ["torch.utils.data.Dataset.__init__", "sorted", "len", "utils.GaussianBlur.get_gaussian_kernel", "os.listdir", "os.path.join", "utils.image_utils.is_png_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.GaussianBlur.get_gaussian_kernel", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_png_file"], ["    ", "def", "__init__", "(", "self", ",", "rgb_dir", ")", ":", "\n", "        ", "super", "(", "DataLoader_NoisyData", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rgb_files", "=", "sorted", "(", "os", ".", "listdir", "(", "rgb_dir", ")", ")", "\n", "\n", "#print(\"number of images:\", len(rgb_files))", "\n", "self", ".", "target_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "x", ")", "for", "x", "in", "rgb_files", "if", "is_png_file", "(", "x", ")", "]", "\n", "\n", "self", ".", "tar_size", "=", "len", "(", "self", ".", "target_filenames", ")", "# get the size of target", "\n", "self", ".", "blur", ",", "self", ".", "pad", "=", "get_gaussian_kernel", "(", "kernel_size", "=", "5", ",", "sigma", "=", "1", ")", "### preprocessing to remove noise from the input rgb image", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoader_NoisyData.__len__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tar_size", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.DataLoader_NoisyData.__getitem__": [[102, 123], ["numpy.float32", "dataset_rgb.divisible_by", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.pad().squeeze.permute", "torch.pad", "torch.pad", "dataset_rgb.DataLoader_NoisyData.blur().squeeze", "torch.pad().squeeze", "torch.pad().squeeze", "utils.image_utils.load_img", "os.path.split", "torch.pad().squeeze.unsqueeze", "dataset_rgb.DataLoader_NoisyData.blur", "torch.pad", "torch.pad", "torch.pad().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.divisible_by", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "tar_index", "=", "index", "%", "self", ".", "tar_size", "\n", "\n", "target", "=", "np", ".", "float32", "(", "load_img", "(", "self", ".", "target_filenames", "[", "tar_index", "]", ")", ")", "\n", "\n", "target", "=", "divisible_by", "(", "target", ",", "16", ")", "\n", "\n", "tar_filename", "=", "os", ".", "path", ".", "split", "(", "self", ".", "target_filenames", "[", "tar_index", "]", ")", "[", "-", "1", "]", "\n", "\n", "\n", "target", "=", "torch", ".", "Tensor", "(", "target", ")", "\n", "target", "=", "target", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "target", "=", "F", ".", "pad", "(", "target", ".", "unsqueeze", "(", "0", ")", ",", "(", "self", ".", "pad", ",", "self", ".", "pad", ",", "self", ".", "pad", ",", "self", ".", "pad", ")", ",", "mode", "=", "'reflect'", ")", "\n", "target", "=", "self", ".", "blur", "(", "target", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "padh", "=", "(", "MAX_SIZE", "-", "target", ".", "shape", "[", "1", "]", ")", "//", "2", "\n", "padw", "=", "(", "MAX_SIZE", "-", "target", ".", "shape", "[", "2", "]", ")", "//", "2", "\n", "target", "=", "F", ".", "pad", "(", "target", ".", "unsqueeze", "(", "0", ")", ",", "(", "padw", ",", "padw", ",", "padh", ",", "padh", ")", ",", "mode", "=", "'constant'", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "return", "target", ",", "tar_filename", ",", "padh", ",", "padw", "", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb.divisible_by": [[82, 86], ["int", "int", "numpy.floor", "numpy.floor"], "function", ["None"], ["def", "divisible_by", "(", "img", ",", "factor", "=", "16", ")", ":", "\n", "    ", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "img", "=", "img", "[", ":", "int", "(", "np", ".", "floor", "(", "h", "/", "factor", ")", "*", "factor", ")", ",", ":", "int", "(", "np", ".", "floor", "(", "w", "/", "factor", ")", "*", "factor", ")", ",", ":", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.data_rgb.get_validation_data": [[4, 7], ["os.path.exists", "dataset_rgb.DataLoaderVal"], "function", ["None"], ["def", "get_validation_data", "(", "rgb_dir", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "rgb_dir", ")", "\n", "return", "DataLoaderVal", "(", "rgb_dir", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.data_rgb.get_test_data": [[9, 12], ["os.path.exists", "dataset_rgb.DataLoaderTest"], "function", ["None"], ["", "def", "get_test_data", "(", "rgb_dir", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "rgb_dir", ")", "\n", "return", "DataLoaderTest", "(", "rgb_dir", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.data_rgb.get_rgb_data": [[13, 16], ["os.path.exists", "dataset_rgb.DataLoader_NoisyData"], "function", ["None"], ["", "def", "get_rgb_data", "(", "rgb_dir", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "rgb_dir", ")", "\n", "return", "DataLoader_NoisyData", "(", "rgb_dir", ")", "", "", ""]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__": [[14, 28], ["torch.utils.data.Dataset.__init__", "utils.image_utils.load_dict", "sorted", "sorted", "len", "len", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "utils.image_utils.is_numpy_file", "utils.image_utils.is_numpy_file"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__init__", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_dict", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_numpy_file", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.is_numpy_file"], ["    ", "def", "__init__", "(", "self", ",", "raw_dir", ",", "rgb_dir", ",", "img_options", "=", "None", ")", ":", "\n", "        ", "super", "(", "DataLoaderTrain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pkl_bayer_patterns", "=", "load_dict", "(", "'./datasets/fivek_bayer.pkl'", ")", "\n", "\n", "rgb_files", "=", "sorted", "(", "os", ".", "listdir", "(", "rgb_dir", ")", ")", "\n", "raw_files", "=", "sorted", "(", "os", ".", "listdir", "(", "raw_dir", ")", ")", "\n", "\n", "self", ".", "rgb_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "rgb_dir", ",", "x", ")", "for", "x", "in", "rgb_files", "if", "is_numpy_file", "(", "x", ")", "]", "\n", "self", ".", "raw_filenames", "=", "[", "os", ".", "path", ".", "join", "(", "raw_dir", ",", "x", ")", "for", "x", "in", "raw_files", "if", "is_numpy_file", "(", "x", ")", "]", "\n", "\n", "self", ".", "img_options", "=", "img_options", "\n", "self", ".", "rgb_size", "=", "len", "(", "self", ".", "rgb_filenames", ")", "# get the size of input", "\n", "self", ".", "raw_size", "=", "len", "(", "self", ".", "raw_filenames", ")", "# get the size of target", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__len__": [[29, 31], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "rgb_size", ",", "self", ".", "raw_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.swz30_CycleISP.dataloaders.dataset_rgb2raw.DataLoaderTrain.__getitem__": [[32, 81], ["utils.image_utils.load_npy", "utils.image_utils.load_npy", "numpy.random.randint", "numpy.random.randint", "utils.dataset_utils.bayer_unify", "numpy.random.randint", "utils.image_utils.pack_raw", "torch.Tensor().permute", "torch.Tensor().permute", "os.path.splitext", "torch.Tensor().permute.squeeze", "len", "getattr", "torch.Tensor", "torch.Tensor", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_npy", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.load_npy", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.dataset_utils.bayer_unify", "home.repos.pwc.inspect_result.swz30_CycleISP.utils.image_utils.pack_raw"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "rgb_index", "=", "index", "%", "self", ".", "rgb_size", "\n", "raw_index", "=", "index", "%", "self", ".", "raw_size", "\n", "\n", "filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "self", ".", "rgb_filenames", "[", "rgb_index", "]", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "bayer_pattern", "=", "self", ".", "pkl_bayer_patterns", "[", "filename", "]", "\n", "\n", "## Load Images", "\n", "rgb_image", "=", "load_npy", "(", "self", ".", "rgb_filenames", "[", "rgb_index", "]", ")", "\n", "raw_image", "=", "load_npy", "(", "self", ".", "raw_filenames", "[", "raw_index", "]", ")", "\n", "\n", "\n", "#Extract random crops from rgb and raw images", "\n", "ps", "=", "self", ".", "img_options", "[", "'patch_size'", "]", "\n", "ps_temp", "=", "ps", "*", "2", "+", "16", "\n", "H", "=", "raw_image", ".", "shape", "[", "0", "]", "\n", "W", "=", "raw_image", ".", "shape", "[", "1", "]", "\n", "r", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "H", "-", "ps_temp", ")", "\n", "c", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "W", "-", "ps_temp", ")", "\n", "if", "r", "%", "2", "!=", "0", ":", "r", "=", "r", "-", "1", "\n", "if", "c", "%", "2", "!=", "0", ":", "c", "=", "c", "-", "1", "\n", "rgb_patch", "=", "rgb_image", "[", "r", ":", "r", "+", "ps_temp", ",", "c", ":", "c", "+", "ps_temp", ",", ":", "]", "\n", "raw_patch", "=", "raw_image", "[", "r", ":", "r", "+", "ps_temp", ",", "c", ":", "c", "+", "ps_temp", ",", ":", "]", "\n", "\n", "\n", "raw_patch", ",", "rgb_patch", "=", "bayer_unify", "(", "raw_patch", ".", "squeeze", "(", ")", ",", "rgb_patch", ",", "bayer_pattern", ",", "\"RGGB\"", ",", "\"crop\"", ")", "\n", "\n", "#Apply Bayer Augmentation", "\n", "indx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "transforms_aug", ")", ")", "\n", "apply_trans", "=", "transforms_aug", "[", "indx", "]", "\n", "\n", "raw_patch", ",", "rgb_patch", "=", "getattr", "(", "augment", ",", "apply_trans", ")", "(", "raw_patch", "[", "...", ",", "np", ".", "newaxis", "]", ",", "rgb_patch", ")", "\n", "\n", "#Pack Target", "\n", "raw_patch", "=", "pack_raw", "(", "raw_patch", ")", "\n", "\n", "# Extract crops of desired patch size", "\n", "H", "=", "raw_patch", ".", "shape", "[", "0", "]", "\n", "W", "=", "raw_patch", ".", "shape", "[", "1", "]", "\n", "r", "=", "(", "H", "-", "ps", ")", "//", "2", "\n", "c", "=", "(", "W", "-", "ps", ")", "//", "2", "\n", "PS", ",", "R", ",", "C", "=", "ps", "*", "2", ",", "r", "*", "2", ",", "c", "*", "2", "\n", "rgb_patch", "=", "rgb_patch", "[", "R", ":", "R", "+", "PS", ",", "C", ":", "C", "+", "PS", ",", ":", "]", "\n", "raw_patch", "=", "raw_patch", "[", "r", ":", "r", "+", "ps", ",", "c", ":", "c", "+", "ps", ",", ":", "]", "\n", "\n", "rgb_patch", "=", "torch", ".", "Tensor", "(", "rgb_patch", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "raw_patch", "=", "torch", ".", "Tensor", "(", "raw_patch", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "rgb_patch", ",", "raw_patch", "\n", "\n"]]}