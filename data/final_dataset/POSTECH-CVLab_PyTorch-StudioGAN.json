{"home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.__init__": [[31, 36], ["config.Configurations.load_base_cfgs", "config.Configurations._overwrite_cfgs", "config.Configurations.define_modules"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.load_base_cfgs", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations._overwrite_cfgs", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_modules"], ["    ", "def", "__init__", "(", "self", ",", "cfg_file", ")", ":", "\n", "        ", "self", ".", "cfg_file", "=", "cfg_file", "\n", "self", ".", "load_base_cfgs", "(", ")", "\n", "self", ".", "_overwrite_cfgs", "(", "self", ".", "cfg_file", ")", "\n", "self", ".", "define_modules", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.load_base_cfgs": [[37, 394], ["utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object", "utils.make_empty_object"], "methods", ["None"], ["", "def", "load_base_cfgs", "(", "self", ")", ":", "\n", "# -----------------------------------------------------------------------------", "\n", "# Data settings", "\n", "# -----------------------------------------------------------------------------", "\n", "        ", "self", ".", "DATA", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# dataset name \\in [\"CIFAR10\", \"CIFAR100\", \"Tiny_ImageNet\", \"CUB200\", \"ImageNet\", \"MY_DATASET\"]", "\n", "self", ".", "DATA", ".", "name", "=", "\"CIFAR10\"", "\n", "# image size for training", "\n", "self", ".", "DATA", ".", "img_size", "=", "32", "\n", "# number of classes in training dataset, if there is no explicit class label, DATA.num_classes = 1", "\n", "self", ".", "DATA", ".", "num_classes", "=", "10", "\n", "# number of image channels in dataset. //image_shape[0]", "\n", "self", ".", "DATA", ".", "img_channels", "=", "3", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# Model settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "MODEL", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# type of backbone architectures of the generator and discriminator \\in", "\n", "# [\"deep_conv\", \"resnet\", \"big_resnet\", \"big_resnet_deep_legacy\", \"big_resnet_deep_studiogan\", \"stylegan2\", \"stylegan3\"]", "\n", "self", ".", "MODEL", ".", "backbone", "=", "\"resnet\"", "\n", "# conditioning method of the generator \\in [\"W/O\", \"cBN\", \"cAdaIN\"]", "\n", "self", ".", "MODEL", ".", "g_cond_mtd", "=", "\"W/O\"", "\n", "# conditioning method of the discriminator \\in [\"W/O\", \"AC\", \"PD\", \"MH\", \"MD\", \"2C\",\"D2DCE\", \"SPD\"]", "\n", "self", ".", "MODEL", ".", "d_cond_mtd", "=", "\"W/O\"", "\n", "# type of auxiliary classifier \\in [\"W/O\", \"TAC\", \"ADC\"]", "\n", "self", ".", "MODEL", ".", "aux_cls_type", "=", "\"W/O\"", "\n", "# whether to normalize feature maps from the discriminator or not", "\n", "self", ".", "MODEL", ".", "normalize_d_embed", "=", "False", "\n", "# dimension of feature maps from the discriminator", "\n", "# only appliable when MODEL.d_cond_mtd \\in [\"2C, D2DCE\"]", "\n", "self", ".", "MODEL", ".", "d_embed_dim", "=", "\"N/A\"", "\n", "# whether to apply spectral normalization on the generator", "\n", "self", ".", "MODEL", ".", "apply_g_sn", "=", "False", "\n", "# whether to apply spectral normalization on the discriminator", "\n", "self", ".", "MODEL", ".", "apply_d_sn", "=", "False", "\n", "# type of activation function in the generator \\in [\"ReLU\", \"Leaky_ReLU\", \"ELU\", \"GELU\"]", "\n", "self", ".", "MODEL", ".", "g_act_fn", "=", "\"ReLU\"", "\n", "# type of activation function in the discriminator \\in [\"ReLU\", \"Leaky_ReLU\", \"ELU\", \"GELU\"]", "\n", "self", ".", "MODEL", ".", "d_act_fn", "=", "\"ReLU\"", "\n", "# whether to apply self-attention proposed by zhang et al. (SAGAN)", "\n", "self", ".", "MODEL", ".", "apply_attn", "=", "False", "\n", "# locations of the self-attention layer in the generator (should be list type)", "\n", "self", ".", "MODEL", ".", "attn_g_loc", "=", "[", "\"N/A\"", "]", "\n", "# locations of the self-attention layer in the discriminator (should be list type)", "\n", "self", ".", "MODEL", ".", "attn_d_loc", "=", "[", "\"N/A\"", "]", "\n", "# prior distribution for noise sampling \\in [\"gaussian\", \"uniform\"]", "\n", "self", ".", "MODEL", ".", "z_prior", "=", "\"gaussian\"", "\n", "# dimension of noise vectors", "\n", "self", ".", "MODEL", ".", "z_dim", "=", "128", "\n", "# dimension of intermediate latent (W) dimensionality used only for StyleGAN", "\n", "self", ".", "MODEL", ".", "w_dim", "=", "\"N/A\"", "\n", "# dimension of a shared latent embedding", "\n", "self", ".", "MODEL", ".", "g_shared_dim", "=", "\"N/A\"", "\n", "# base channel for the resnet style generator architecture", "\n", "self", ".", "MODEL", ".", "g_conv_dim", "=", "64", "\n", "# base channel for the resnet style discriminator architecture", "\n", "self", ".", "MODEL", ".", "d_conv_dim", "=", "64", "\n", "# generator's depth for \"models/big_resnet_deep_*.py\"", "\n", "self", ".", "MODEL", ".", "g_depth", "=", "\"N/A\"", "\n", "# discriminator's depth for \"models/big_resnet_deep_*.py\"", "\n", "self", ".", "MODEL", ".", "d_depth", "=", "\"N/A\"", "\n", "# whether to apply moving average update for the generator", "\n", "self", ".", "MODEL", ".", "apply_g_ema", "=", "False", "\n", "# decay rate for the ema generator", "\n", "self", ".", "MODEL", ".", "g_ema_decay", "=", "\"N/A\"", "\n", "# starting step for g_ema update", "\n", "self", ".", "MODEL", ".", "g_ema_start", "=", "\"N/A\"", "\n", "# weight initialization method for the generator \\in [\"ortho\", \"N02\", \"glorot\", \"xavier\"]", "\n", "self", ".", "MODEL", ".", "g_init", "=", "\"ortho\"", "\n", "# weight initialization method for the discriminator \\in [\"ortho\", \"N02\", \"glorot\", \"xavier\"]", "\n", "self", ".", "MODEL", ".", "d_init", "=", "\"ortho\"", "\n", "# type of information for infoGAN training \\in [\"N/A\", \"discrete\", \"continuous\", \"both\"]", "\n", "self", ".", "MODEL", ".", "info_type", "=", "\"N/A\"", "\n", "# way to inject information into Generator \\in [\"N/A\", \"concat\", \"cBN\"]", "\n", "self", ".", "MODEL", ".", "g_info_injection", "=", "\"N/A\"", "\n", "# number of discrete c to use in InfoGAN", "\n", "self", ".", "MODEL", ".", "info_num_discrete_c", "=", "\"N/A\"", "\n", "# number of continuous c to use in InfoGAN", "\n", "self", ".", "MODEL", ".", "info_num_conti_c", "=", "\"N/A\"", "\n", "# dimension of discrete c to use in InfoGAN (one-hot)", "\n", "self", ".", "MODEL", ".", "info_dim_discrete_c", "=", "\"N/A\"", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# loss settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "LOSS", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# type of adversarial loss \\in [\"vanilla\", \"least_squere\", \"wasserstein\", \"hinge\", \"MH\"]", "\n", "self", ".", "LOSS", ".", "adv_loss", "=", "\"vanilla\"", "\n", "# balancing hyperparameter for conditional image generation", "\n", "self", ".", "LOSS", ".", "cond_lambda", "=", "\"N/A\"", "\n", "# strength of conditioning loss induced by twin auxiliary classifier for generator training", "\n", "self", ".", "LOSS", ".", "tac_gen_lambda", "=", "\"N/A\"", "\n", "# strength of conditioning loss induced by twin auxiliary classifier for discriminator training", "\n", "self", ".", "LOSS", ".", "tac_dis_lambda", "=", "\"N/A\"", "\n", "# strength of multi-hinge loss (MH) for the generator training", "\n", "self", ".", "LOSS", ".", "mh_lambda", "=", "\"N/A\"", "\n", "# whether to apply feature matching regularization", "\n", "self", ".", "LOSS", ".", "apply_fm", "=", "False", "\n", "# strength of feature matching regularization", "\n", "self", ".", "LOSS", ".", "fm_lambda", "=", "\"N/A\"", "\n", "# whether to apply r1 regularization used in multiple-discriminator (FUNIT)", "\n", "self", ".", "LOSS", ".", "apply_r1_reg", "=", "False", "\n", "# a place to apply the R1 regularization \\in [\"N/A\", \"inside_loop\", \"outside_loop\"]", "\n", "self", ".", "LOSS", ".", "r1_place", "=", "\"N/A\"", "\n", "# strength of r1 regularization (it does not apply to r1_reg in StyleGAN2", "\n", "self", ".", "LOSS", ".", "r1_lambda", "=", "\"N/A\"", "\n", "# positive margin for D2DCE", "\n", "self", ".", "LOSS", ".", "m_p", "=", "\"N/A\"", "\n", "# temperature scalar for [2C, D2DCE]", "\n", "self", ".", "LOSS", ".", "temperature", "=", "\"N/A\"", "\n", "# whether to apply weight clipping regularization to let the discriminator satisfy Lipschitzness", "\n", "self", ".", "LOSS", ".", "apply_wc", "=", "False", "\n", "# clipping bound for weight clippling regularization", "\n", "self", ".", "LOSS", ".", "wc_bound", "=", "\"N/A\"", "\n", "# whether to apply gradient penalty regularization", "\n", "self", ".", "LOSS", ".", "apply_gp", "=", "False", "\n", "# strength of the gradient penalty regularization", "\n", "self", ".", "LOSS", ".", "gp_lambda", "=", "\"N/A\"", "\n", "# whether to apply deep regret analysis regularization", "\n", "self", ".", "LOSS", ".", "apply_dra", "=", "False", "\n", "# strength of the deep regret analysis regularization", "\n", "self", ".", "LOSS", ".", "dra_lambda", "=", "\"N/A\"", "\n", "# whther to apply max gradient penalty to let the discriminator satisfy Lipschitzness", "\n", "self", ".", "LOSS", ".", "apply_maxgp", "=", "False", "\n", "# strength of the maxgp regularization", "\n", "self", ".", "LOSS", ".", "maxgp_lambda", "=", "\"N/A\"", "\n", "# whether to apply consistency regularization", "\n", "self", ".", "LOSS", ".", "apply_cr", "=", "False", "\n", "# strength of the consistency regularization", "\n", "self", ".", "LOSS", ".", "cr_lambda", "=", "\"N/A\"", "\n", "# whether to apply balanced consistency regularization", "\n", "self", ".", "LOSS", ".", "apply_bcr", "=", "False", "\n", "# attraction strength between logits of real and augmented real samples", "\n", "self", ".", "LOSS", ".", "real_lambda", "=", "\"N/A\"", "\n", "# attraction strength between logits of fake and augmented fake samples", "\n", "self", ".", "LOSS", ".", "fake_lambda", "=", "\"N/A\"", "\n", "# whether to apply latent consistency regularization", "\n", "self", ".", "LOSS", ".", "apply_zcr", "=", "False", "\n", "# radius of ball to generate an fake image G(z + radius)", "\n", "self", ".", "LOSS", ".", "radius", "=", "\"N/A\"", "\n", "# repulsion strength between fake images (G(z), G(z + radius))", "\n", "self", ".", "LOSS", ".", "g_lambda", "=", "\"N/A\"", "\n", "# attaction strength between logits of fake images (G(z), G(z + radius))", "\n", "self", ".", "LOSS", ".", "d_lambda", "=", "\"N/A\"", "\n", "# whether to apply latent optimization for stable training", "\n", "self", ".", "LOSS", ".", "apply_lo", "=", "False", "\n", "# latent step size for latent optimization", "\n", "self", ".", "LOSS", ".", "lo_alpha", "=", "\"N/A\"", "\n", "# damping factor for calculating Fisher Information matrix", "\n", "self", ".", "LOSS", ".", "lo_beta", "=", "\"N/A\"", "\n", "# portion of z for latent optimization (c)", "\n", "self", ".", "LOSS", ".", "lo_rate", "=", "\"N/A\"", "\n", "# strength of latent optimization (w_{r})", "\n", "self", ".", "LOSS", ".", "lo_lambda", "=", "\"N/A\"", "\n", "# number of latent optimization iterations for a single sample during training", "\n", "self", ".", "LOSS", ".", "lo_steps4train", "=", "\"N/A\"", "\n", "# number of latent optimization iterations for a single sample during evaluation", "\n", "self", ".", "LOSS", ".", "lo_steps4eval", "=", "\"N/A\"", "\n", "# whether to apply topk training for the generator update", "\n", "self", ".", "LOSS", ".", "apply_topk", "=", "False", "\n", "# hyperparameter for batch_size decay rate for topk training \\in [0,1]", "\n", "self", ".", "LOSS", ".", "topk_gamma", "=", "\"N/A\"", "\n", "# hyperparameter for the supremum of the number of topk samples \\in [0,1],", "\n", "# sup_batch_size = int(topk_nu*batch_size)", "\n", "self", ".", "LOSS", ".", "topk_nu", "=", "\"N/A\"", "\n", "# strength lambda for infoGAN loss in case of discrete c (typically 0.1)", "\n", "self", ".", "LOSS", ".", "infoGAN_loss_discrete_lambda", "=", "\"N/A\"", "\n", "# strength lambda for infoGAN loss in case of continuous c (typically 1)", "\n", "self", ".", "LOSS", ".", "infoGAN_loss_conti_lambda", "=", "\"N/A\"", "\n", "# whether to apply LeCam regularization or not", "\n", "self", ".", "LOSS", ".", "apply_lecam", "=", "False", "\n", "# strength of the LeCam regularization", "\n", "self", ".", "LOSS", ".", "lecam_lambda", "=", "\"N/A\"", "\n", "# start iteration for EMALosses in src/utils/EMALosses", "\n", "self", ".", "LOSS", ".", "lecam_ema_start_iter", "=", "\"N/A\"", "\n", "# decay rate for the EMALosses", "\n", "self", ".", "LOSS", ".", "lecam_ema_decay", "=", "\"N/A\"", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# optimizer settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "OPTIMIZATION", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# type of the optimizer for GAN training \\in [\"SGD\", RMSprop, \"Adam\"]", "\n", "self", ".", "OPTIMIZATION", ".", "type_", "=", "\"Adam\"", "\n", "# number of batch size for GAN training,", "\n", "# typically {CIFAR10: 64, CIFAR100: 64, Tiny_ImageNet: 1024, \"CUB200\": 256, ImageNet: 512(batch_size) * 4(accm_step)\"}", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", "=", "64", "\n", "# acuumulation steps for large batch training (batch_size = batch_size*accm_step)", "\n", "self", ".", "OPTIMIZATION", ".", "acml_steps", "=", "1", "\n", "# learning rate for generator update", "\n", "self", ".", "OPTIMIZATION", ".", "g_lr", "=", "0.0002", "\n", "# learning rate for discriminator update", "\n", "self", ".", "OPTIMIZATION", ".", "d_lr", "=", "0.0002", "\n", "# weight decay strength for the generator update", "\n", "self", ".", "OPTIMIZATION", ".", "g_weight_decay", "=", "0.0", "\n", "# weight decay strength for the discriminator update", "\n", "self", ".", "OPTIMIZATION", ".", "d_weight_decay", "=", "0.0", "\n", "# momentum value for SGD and RMSprop optimizers", "\n", "self", ".", "OPTIMIZATION", ".", "momentum", "=", "\"N/A\"", "\n", "# nesterov value for SGD optimizer", "\n", "self", ".", "OPTIMIZATION", ".", "nesterov", "=", "\"N/A\"", "\n", "# alpha value for RMSprop optimizer", "\n", "self", ".", "OPTIMIZATION", ".", "alpha", "=", "\"N/A\"", "\n", "# beta values for Adam optimizer", "\n", "self", ".", "OPTIMIZATION", ".", "beta1", "=", "0.5", "\n", "self", ".", "OPTIMIZATION", ".", "beta2", "=", "0.999", "\n", "# whether to optimize discriminator first,", "\n", "# if True: optimize D -> optimize G", "\n", "self", ".", "OPTIMIZATION", ".", "d_first", "=", "True", "\n", "# the number of generator updates per step", "\n", "self", ".", "OPTIMIZATION", ".", "g_updates_per_step", "=", "1", "\n", "# the number of discriminator updates per step", "\n", "self", ".", "OPTIMIZATION", ".", "d_updates_per_step", "=", "5", "\n", "# the total number of steps for GAN training", "\n", "self", ".", "OPTIMIZATION", ".", "total_steps", "=", "100000", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# preprocessing settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "PRE", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# whether to apply random flip preprocessing before training", "\n", "self", ".", "PRE", ".", "apply_rflip", "=", "True", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# differentiable augmentation settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "AUG", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# whether to apply differentiable augmentations for limited data training", "\n", "self", ".", "AUG", ".", "apply_diffaug", "=", "False", "\n", "\n", "# whether to apply adaptive discriminator augmentation (ADA)", "\n", "self", ".", "AUG", ".", "apply_ada", "=", "False", "\n", "# initial value of augmentation probability.", "\n", "self", ".", "AUG", ".", "ada_initial_augment_p", "=", "\"N/A\"", "\n", "# target probability for adaptive differentiable augmentations, None = fixed p (keep ada_initial_augment_p)", "\n", "self", ".", "AUG", ".", "ada_target", "=", "\"N/A\"", "\n", "# ADA adjustment speed, measured in how many kimg it takes for p to increase/decrease by one unit.", "\n", "self", ".", "AUG", ".", "ada_kimg", "=", "\"N/A\"", "\n", "# how often to perform ada adjustment", "\n", "self", ".", "AUG", ".", "ada_interval", "=", "\"N/A\"", "\n", "# whether to apply adaptive pseudo augmentation (APA)", "\n", "self", ".", "AUG", ".", "apply_apa", "=", "False", "\n", "# initial value of augmentation probability.", "\n", "self", ".", "AUG", ".", "apa_initial_augment_p", "=", "\"N/A\"", "\n", "# target probability for adaptive pseudo augmentations, None = fixed p (keep ada_initial_augment_p)", "\n", "self", ".", "AUG", ".", "apa_target", "=", "\"N/A\"", "\n", "# APA adjustment speed, measured in how many kimg it takes for p to increase/decrease by one unit.", "\n", "self", ".", "AUG", ".", "apa_kimg", "=", "\"N/A\"", "\n", "# how often to perform apa adjustment", "\n", "self", ".", "AUG", ".", "apa_interval", "=", "\"N/A\"", "\n", "# type of differentiable augmentation for cr, bcr, or limited data training", "\n", "# \\in [\"W/O\", \"cr\", \"bcr\", \"diffaug\", \"simclr_basic\", \"simclr_hq\", \"simclr_hq_cutout\", \"byol\",", "\n", "# \"blit\", \"geom\", \"color\", \"filter\", \"noise\", \"cutout\", \"bg\", \"bgc\", \"bgcf\", \"bgcfn\", \"bgcfnc\"]", "\n", "# cr (bcr, diffaugment, ada, simclr, byol) indicates differentiable augmenations used in the original paper", "\n", "self", ".", "AUG", ".", "cr_aug_type", "=", "\"W/O\"", "\n", "self", ".", "AUG", ".", "bcr_aug_type", "=", "\"W/O\"", "\n", "self", ".", "AUG", ".", "diffaug_type", "=", "\"W/O\"", "\n", "self", ".", "AUG", ".", "ada_aug_type", "=", "\"W/O\"", "\n", "\n", "self", ".", "STYLEGAN", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# type of generator used in stylegan3, stylegan3-t : translatino equiv., stylegan3-r : translation & rotation equiv.", "\n", "# \\ in [\"stylegan3-t\", \"stylegan3-r\"]", "\n", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "=", "\"N/A\"", "\n", "# conditioning types that utilize embedding proxies for conditional stylegan2, stylegan3", "\n", "self", ".", "STYLEGAN", ".", "cond_type", "=", "[", "\"PD\"", ",", "\"SPD\"", ",", "\"2C\"", ",", "\"D2DCE\"", "]", "\n", "# lazy regularization interval for generator, default 4", "\n", "self", ".", "STYLEGAN", ".", "g_reg_interval", "=", "\"N/A\"", "\n", "# lazy regularization interval for discriminator, default 16", "\n", "self", ".", "STYLEGAN", ".", "d_reg_interval", "=", "\"N/A\"", "\n", "# number of layers for the mapping network, default 8 except for cifar (2)", "\n", "self", ".", "STYLEGAN", ".", "mapping_network", "=", "\"N/A\"", "\n", "# style_mixing_p in stylegan generator, default 0.9 except for cifar (0)", "\n", "self", ".", "STYLEGAN", ".", "style_mixing_p", "=", "\"N/A\"", "\n", "# half-life of the exponential moving average (EMA) of generator weights default 500", "\n", "self", ".", "STYLEGAN", ".", "g_ema_kimg", "=", "\"N/A\"", "\n", "# EMA ramp-up coefficient, defalt \"N/A\" except for cifar 0.05", "\n", "self", ".", "STYLEGAN", ".", "g_ema_rampup", "=", "\"N/A\"", "\n", "# whether to apply path length regularization, default is True except cifar", "\n", "self", ".", "STYLEGAN", ".", "apply_pl_reg", "=", "False", "\n", "# pl regularization strength, default 2", "\n", "self", ".", "STYLEGAN", ".", "pl_weight", "=", "\"N/A\"", "\n", "# discriminator architecture for STYLEGAN. 'resnet' except for cifar10 ('orig')", "\n", "self", ".", "STYLEGAN", ".", "d_architecture", "=", "\"N/A\"", "\n", "# group size for the minibatch standard deviation layer, None = entire minibatch.", "\n", "self", ".", "STYLEGAN", ".", "d_epilogue_mbstd_group_size", "=", "\"N/A\"", "\n", "# Whether to blur the images seen by the discriminator. Only used for stylegan3-r with value 10", "\n", "self", ".", "STYLEGAN", ".", "blur_init_sigma", "=", "\"N/A\"", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# run settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "RUN", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# run settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "MISC", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "self", ".", "MISC", ".", "no_proc_data", "=", "[", "\"CIFAR10\"", ",", "\"CIFAR100\"", ",", "\"Tiny_ImageNet\"", "]", "\n", "self", ".", "MISC", ".", "base_folders", "=", "[", "\"checkpoints\"", ",", "\"figures\"", ",", "\"logs\"", ",", "\"moments\"", ",", "\"samples\"", ",", "\"values\"", "]", "\n", "self", ".", "MISC", ".", "classifier_based_GAN", "=", "[", "\"AC\"", ",", "\"2C\"", ",", "\"D2DCE\"", "]", "\n", "self", ".", "MISC", ".", "info_params", "=", "[", "\"info_discrete_linear\"", ",", "\"info_conti_mu_linear\"", ",", "\"info_conti_var_linear\"", "]", "\n", "self", ".", "MISC", ".", "cas_setting", "=", "{", "\n", "\"CIFAR10\"", ":", "{", "\n", "\"batch_size\"", ":", "128", ",", "\n", "\"epochs\"", ":", "90", ",", "\n", "\"depth\"", ":", "32", ",", "\n", "\"lr\"", ":", "0.1", ",", "\n", "\"momentum\"", ":", "0.9", ",", "\n", "\"weight_decay\"", ":", "1e-4", ",", "\n", "\"print_freq\"", ":", "1", ",", "\n", "\"bottleneck\"", ":", "True", "\n", "}", ",", "\n", "\"Tiny_ImageNet\"", ":", "{", "\n", "\"batch_size\"", ":", "128", ",", "\n", "\"epochs\"", ":", "90", ",", "\n", "\"depth\"", ":", "34", ",", "\n", "\"lr\"", ":", "0.1", ",", "\n", "\"momentum\"", ":", "0.9", ",", "\n", "\"weight_decay\"", ":", "1e-4", ",", "\n", "\"print_freq\"", ":", "1", ",", "\n", "\"bottleneck\"", ":", "True", "\n", "}", ",", "\n", "\"ImageNet\"", ":", "{", "\n", "\"batch_size\"", ":", "128", ",", "\n", "\"epochs\"", ":", "90", ",", "\n", "\"depth\"", ":", "34", ",", "\n", "\"lr\"", ":", "0.1", ",", "\n", "\"momentum\"", ":", "0.9", ",", "\n", "\"weight_decay\"", ":", "1e-4", ",", "\n", "\"print_freq\"", ":", "1", ",", "\n", "\"bottleneck\"", ":", "True", "\n", "}", ",", "\n", "}", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# Module settings", "\n", "# -----------------------------------------------------------------------------", "\n", "self", ".", "MODULES", "=", "misc", ".", "make_empty_object", "(", ")", "\n", "\n", "self", ".", "super_cfgs", "=", "{", "\n", "\"DATA\"", ":", "self", ".", "DATA", ",", "\n", "\"MODEL\"", ":", "self", ".", "MODEL", ",", "\n", "\"LOSS\"", ":", "self", ".", "LOSS", ",", "\n", "\"OPTIMIZATION\"", ":", "self", ".", "OPTIMIZATION", ",", "\n", "\"PRE\"", ":", "self", ".", "PRE", ",", "\n", "\"AUG\"", ":", "self", ".", "AUG", ",", "\n", "\"RUN\"", ":", "self", ".", "RUN", ",", "\n", "\"STYLEGAN\"", ":", "self", ".", "STYLEGAN", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.update_cfgs": [[396, 399], ["cfgs.items", "setattr"], "methods", ["None"], ["", "def", "update_cfgs", "(", "self", ",", "cfgs", ",", "super", "=", "\"RUN\"", ")", ":", "\n", "        ", "for", "attr", ",", "value", "in", "cfgs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ".", "super_cfgs", "[", "super", "]", ",", "attr", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations._overwrite_cfgs": [[400, 410], ["open", "yaml.load", "yaml.load.items", "attr_value.items", "hasattr", "setattr", "AttributeError"], "methods", ["None"], ["", "", "def", "_overwrite_cfgs", "(", "self", ",", "cfg_file", ")", ":", "\n", "        ", "with", "open", "(", "cfg_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "yaml_cfg", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "for", "super_cfg_name", ",", "attr_value", "in", "yaml_cfg", ".", "items", "(", ")", ":", "\n", "                ", "for", "attr", ",", "value", "in", "attr_value", ".", "items", "(", ")", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "super_cfgs", "[", "super_cfg_name", "]", ",", "attr", ")", ":", "\n", "                        ", "setattr", "(", "self", ".", "super_cfgs", "[", "super_cfg_name", "]", ",", "attr", ",", "value", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "AttributeError", "(", "\"There does not exist '{cls}.{attr}' attribute in the config.py.\"", ".", "format", "(", "cls", "=", "super_cfg_name", ",", "attr", "=", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_losses": [[411, 434], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "define_losses", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"MH\"", "and", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "LOSS", ".", "g_loss", "=", "losses", ".", "crammer_singer_loss", "\n", "self", ".", "LOSS", ".", "d_loss", "=", "losses", ".", "crammer_singer_loss", "\n", "", "else", ":", "\n", "            ", "g_losses", "=", "{", "\n", "\"vanilla\"", ":", "losses", ".", "g_vanilla", ",", "\n", "\"logistic\"", ":", "losses", ".", "g_logistic", ",", "\n", "\"least_square\"", ":", "losses", ".", "g_ls", ",", "\n", "\"hinge\"", ":", "losses", ".", "g_hinge", ",", "\n", "\"wasserstein\"", ":", "losses", ".", "g_wasserstein", ",", "\n", "}", "\n", "\n", "d_losses", "=", "{", "\n", "\"vanilla\"", ":", "losses", ".", "d_vanilla", ",", "\n", "\"logistic\"", ":", "losses", ".", "d_logistic", ",", "\n", "\"least_square\"", ":", "losses", ".", "d_ls", ",", "\n", "\"hinge\"", ":", "losses", ".", "d_hinge", ",", "\n", "\"wasserstein\"", ":", "losses", ".", "d_wasserstein", ",", "\n", "}", "\n", "\n", "self", ".", "LOSS", ".", "g_loss", "=", "g_losses", "[", "self", ".", "LOSS", ".", "adv_loss", "]", "\n", "self", ".", "LOSS", ".", "d_loss", "=", "d_losses", "[", "self", ".", "LOSS", ".", "adv_loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_modules": [[435, 496], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.ELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["None"], ["", "", "def", "define_modules", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "MODEL", ".", "apply_g_sn", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_conv2d", "=", "ops", ".", "snconv2d", "\n", "self", ".", "MODULES", ".", "g_deconv2d", "=", "ops", ".", "sndeconv2d", "\n", "self", ".", "MODULES", ".", "g_linear", "=", "ops", ".", "snlinear", "\n", "self", ".", "MODULES", ".", "g_embedding", "=", "ops", ".", "sn_embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_conv2d", "=", "ops", ".", "conv2d", "\n", "self", ".", "MODULES", ".", "g_deconv2d", "=", "ops", ".", "deconv2d", "\n", "self", ".", "MODULES", ".", "g_linear", "=", "ops", ".", "linear", "\n", "self", ".", "MODULES", ".", "g_embedding", "=", "ops", ".", "embedding", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "apply_d_sn", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_conv2d", "=", "ops", ".", "snconv2d", "\n", "self", ".", "MODULES", ".", "d_deconv2d", "=", "ops", ".", "sndeconv2d", "\n", "self", ".", "MODULES", ".", "d_linear", "=", "ops", ".", "snlinear", "\n", "self", ".", "MODULES", ".", "d_embedding", "=", "ops", ".", "sn_embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_conv2d", "=", "ops", ".", "conv2d", "\n", "self", ".", "MODULES", ".", "d_deconv2d", "=", "ops", ".", "deconv2d", "\n", "self", ".", "MODULES", ".", "d_linear", "=", "ops", ".", "linear", "\n", "self", ".", "MODULES", ".", "d_embedding", "=", "ops", ".", "embedding", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", "or", "self", ".", "MODEL", ".", "backbone", "==", "\"big_resnet\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_bn", "=", "ops", ".", "ConditionalBatchNorm2d", "\n", "", "elif", "self", ".", "MODEL", ".", "g_cond_mtd", "==", "\"W/O\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_bn", "=", "ops", ".", "batchnorm_2d", "\n", "", "elif", "self", ".", "MODEL", ".", "g_cond_mtd", "==", "\"cAdaIN\"", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "not", "self", ".", "MODEL", ".", "apply_d_sn", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_bn", "=", "ops", ".", "batchnorm_2d", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_act_fn", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_act_fn", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_act_fn", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "g_act_fn", "=", "nn", ".", "GELU", "(", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"Auto\"", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"ReLU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_act_fn", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"Leaky_ReLU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_act_fn", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"ELU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_act_fn", "=", "nn", ".", "ELU", "(", "alpha", "=", "1.0", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"GELU\"", ":", "\n", "            ", "self", ".", "MODULES", ".", "d_act_fn", "=", "nn", ".", "GELU", "(", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"Auto\"", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "MODULES", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_optimizer": [[497, 566], ["Gen.named_parameters", "Dis.named_parameters", "Gen_params.append", "Dis.info_discrete_linear.named_parameters", "Dis.info_conti_mu_linear.named_parameters", "Dis.info_conti_var_linear.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "Gen_params.append", "Gen_params.append", "Gen_params.append", "Dis_params.append", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "Dis_params.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam"], "methods", ["None"], ["", "def", "define_optimizer", "(", "self", ",", "Gen", ",", "Dis", ")", ":", "\n", "        ", "Gen_params", ",", "Dis_params", "=", "[", "]", ",", "[", "]", "\n", "for", "g_name", ",", "g_param", "in", "Gen", ".", "named_parameters", "(", ")", ":", "\n", "            ", "Gen_params", ".", "append", "(", "g_param", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "for", "info_name", ",", "info_param", "in", "Dis", ".", "info_discrete_linear", ".", "named_parameters", "(", ")", ":", "\n", "                ", "Gen_params", ".", "append", "(", "info_param", ")", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "for", "info_name", ",", "info_param", "in", "Dis", ".", "info_conti_mu_linear", ".", "named_parameters", "(", ")", ":", "\n", "                ", "Gen_params", ".", "append", "(", "info_param", ")", "\n", "", "for", "info_name", ",", "info_param", "in", "Dis", ".", "info_conti_var_linear", ".", "named_parameters", "(", ")", ":", "\n", "                ", "Gen_params", ".", "append", "(", "info_param", ")", "\n", "\n", "", "", "for", "d_name", ",", "d_param", "in", "Dis", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "if", "\"info_discrete\"", "in", "d_name", "or", "\"info_conti\"", "in", "d_name", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "Dis_params", ".", "append", "(", "d_param", ")", "\n", "", "", "else", ":", "\n", "                ", "Dis_params", ".", "append", "(", "d_param", ")", "\n", "\n", "", "", "if", "self", ".", "OPTIMIZATION", ".", "type_", "==", "\"SGD\"", ":", "\n", "            ", "self", ".", "OPTIMIZATION", ".", "g_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", "=", "Gen_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "g_lr", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "g_weight_decay", ",", "\n", "momentum", "=", "self", ".", "OPTIMIZATION", ".", "momentum", ",", "\n", "nesterov", "=", "self", ".", "OPTIMIZATION", ".", "nesterov", ")", "\n", "self", ".", "OPTIMIZATION", ".", "d_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", "=", "Dis_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "d_lr", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "d_weight_decay", ",", "\n", "momentum", "=", "self", ".", "OPTIMIZATION", ".", "momentum", ",", "\n", "nesterov", "=", "self", ".", "OPTIMIZATION", ".", "nesterov", ")", "\n", "", "elif", "self", ".", "OPTIMIZATION", ".", "type_", "==", "\"RMSprop\"", ":", "\n", "            ", "self", ".", "OPTIMIZATION", ".", "g_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "params", "=", "Gen_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "g_lr", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "g_weight_decay", ",", "\n", "momentum", "=", "self", ".", "OPTIMIZATION", ".", "momentum", ",", "\n", "alpha", "=", "self", ".", "OPTIMIZATION", ".", "alpha", ")", "\n", "self", ".", "OPTIMIZATION", ".", "d_optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "params", "=", "Dis_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "d_lr", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "d_weight_decay", ",", "\n", "momentum", "=", "self", ".", "OPTIMIZATION", ".", "momentum", ",", "\n", "alpha", "=", "self", ".", "OPTIMIZATION", ".", "alpha", ")", "\n", "", "elif", "self", ".", "OPTIMIZATION", ".", "type_", "==", "\"Adam\"", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "                ", "g_ratio", "=", "(", "self", ".", "STYLEGAN", ".", "g_reg_interval", "/", "(", "self", ".", "STYLEGAN", ".", "g_reg_interval", "+", "1", ")", ")", "if", "self", ".", "STYLEGAN", ".", "g_reg_interval", "!=", "1", "else", "1", "\n", "d_ratio", "=", "(", "self", ".", "STYLEGAN", ".", "d_reg_interval", "/", "(", "self", ".", "STYLEGAN", ".", "d_reg_interval", "+", "1", ")", ")", "if", "self", ".", "STYLEGAN", ".", "d_reg_interval", "!=", "1", "else", "1", "\n", "self", ".", "OPTIMIZATION", ".", "g_lr", "*=", "g_ratio", "\n", "self", ".", "OPTIMIZATION", ".", "d_lr", "*=", "d_ratio", "\n", "betas_g", "=", "[", "self", ".", "OPTIMIZATION", ".", "beta1", "**", "g_ratio", ",", "self", ".", "OPTIMIZATION", ".", "beta2", "**", "g_ratio", "]", "\n", "betas_d", "=", "[", "self", ".", "OPTIMIZATION", ".", "beta1", "**", "d_ratio", ",", "self", ".", "OPTIMIZATION", ".", "beta2", "**", "d_ratio", "]", "\n", "eps_", "=", "1e-8", "\n", "", "else", ":", "\n", "                ", "betas_g", "=", "betas_d", "=", "[", "self", ".", "OPTIMIZATION", ".", "beta1", ",", "self", ".", "OPTIMIZATION", ".", "beta2", "]", "\n", "eps_", "=", "1e-6", "\n", "\n", "", "self", ".", "OPTIMIZATION", ".", "g_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "Gen_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "g_lr", ",", "\n", "betas", "=", "betas_g", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "g_weight_decay", ",", "\n", "eps", "=", "eps_", ")", "\n", "self", ".", "OPTIMIZATION", ".", "d_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "Dis_params", ",", "\n", "lr", "=", "self", ".", "OPTIMIZATION", ".", "d_lr", ",", "\n", "betas", "=", "betas_d", ",", "\n", "weight_decay", "=", "self", ".", "OPTIMIZATION", ".", "d_weight_decay", ",", "\n", "eps", "=", "eps_", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_augments": [[567, 629], ["dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.AdaAugment().train().to().requires_grad_", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.SimclrAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.AdaAugment().train().to", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.SimclrAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.AdaAugment().train", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.SimclrAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment", "utils.AdaAugment"], "methods", ["None"], ["", "", "def", "define_augments", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "AUG", ".", "series_augment", "=", "misc", ".", "identity", "\n", "ada_augpipe", "=", "{", "\n", "'blit'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ")", ",", "\n", "'geom'", ":", "dict", "(", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ")", ",", "\n", "'color'", ":", "dict", "(", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ")", ",", "\n", "'filter'", ":", "dict", "(", "imgfilter", "=", "1", ")", ",", "\n", "'noise'", ":", "dict", "(", "noise", "=", "1", ")", ",", "\n", "'cutout'", ":", "dict", "(", "cutout", "=", "1", ")", ",", "\n", "'bg'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ")", ",", "\n", "'bgc'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ")", ",", "\n", "'bgcf'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ")", ",", "\n", "'bgcfn'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ",", "noise", "=", "1", ")", ",", "\n", "'bgcfnc'", ":", "dict", "(", "xflip", "=", "1", ",", "rotate90", "=", "1", ",", "xint", "=", "1", ",", "scale", "=", "1", ",", "rotate", "=", "1", ",", "aniso", "=", "1", ",", "xfrac", "=", "1", ",", "brightness", "=", "1", ",", "contrast", "=", "1", ",", "lumaflip", "=", "1", ",", "hue", "=", "1", ",", "saturation", "=", "1", ",", "imgfilter", "=", "1", ",", "noise", "=", "1", ",", "cutout", "=", "1", ")", ",", "\n", "}", "\n", "if", "self", ".", "AUG", ".", "apply_diffaug", ":", "\n", "            ", "assert", "self", ".", "AUG", ".", "diffaug_type", "!=", "\"W/O\"", ",", "\"Please select diffentiable augmentation type!\"", "\n", "if", "self", ".", "AUG", ".", "diffaug_type", "==", "\"cr\"", ":", "\n", "                ", "self", ".", "AUG", ".", "series_augment", "=", "cr", ".", "apply_cr_aug", "\n", "", "elif", "self", ".", "AUG", ".", "diffaug_type", "==", "\"diffaug\"", ":", "\n", "                ", "self", ".", "AUG", ".", "series_augment", "=", "diffaug", ".", "apply_diffaug", "\n", "", "elif", "self", ".", "AUG", ".", "diffaug_type", "in", "[", "\"simclr_basic\"", ",", "\"simclr_hq\"", ",", "\"simclr_hq_cutout\"", ",", "\"byol\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "series_augment", "=", "simclr_aug", ".", "SimclrAugment", "(", "aug_type", "=", "self", ".", "AUG", ".", "diffaug", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "", "elif", "self", ".", "AUG", ".", "diffaug_type", "in", "[", "\"blit\"", ",", "\"geom\"", ",", "\"color\"", ",", "\"filter\"", ",", "\"noise\"", ",", "\"cutout\"", ",", "\"bg\"", ",", "\"bgc\"", ",", "\"bgcf\"", ",", "\"bgcfn\"", ",", "\"bgcfnc\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "series_augment", "=", "ada_aug", ".", "AdaAugment", "(", "**", "ada_augpipe", "[", "self", ".", "AUG", ".", "diffaug_type", "]", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "AUG", ".", "series_augment", ".", "p", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "self", ".", "AUG", ".", "apply_ada", ":", "\n", "            ", "assert", "self", ".", "AUG", ".", "ada_aug_type", "in", "[", "\"blit\"", ",", "\"geom\"", ",", "\"color\"", ",", "\"filter\"", ",", "\"noise\"", ",", "\"cutout\"", ",", "\"bg\"", ",", "\"bgc\"", ",", "\"bgcf\"", ",", "\"bgcfn\"", ",", "\n", "\"bgcfnc\"", "]", ",", "\"Please select ada supported augmentations\"", "\n", "self", ".", "AUG", ".", "series_augment", "=", "ada_aug", ".", "AdaAugment", "(", "**", "ada_augpipe", "[", "self", ".", "AUG", ".", "ada_aug_type", "]", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "if", "self", ".", "LOSS", ".", "apply_cr", ":", "\n", "            ", "assert", "self", ".", "AUG", ".", "cr_aug_type", "!=", "\"W/O\"", ",", "\"Please select augmentation type for cr!\"", "\n", "if", "self", ".", "AUG", ".", "cr_aug_type", "==", "\"cr\"", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "cr", ".", "apply_cr_aug", "\n", "", "elif", "self", ".", "AUG", ".", "cr_aug_type", "==", "\"diffaug\"", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "diffaug", ".", "apply_diffaug", "\n", "", "elif", "self", ".", "AUG", ".", "cr_aug_type", "in", "[", "\"simclr_basic\"", ",", "\"simclr_hq\"", ",", "\"simclr_hq_cutout\"", ",", "\"byol\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "simclr_aug", ".", "SimclrAugment", "(", "aug_type", "=", "self", ".", "AUG", ".", "diffaug", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "", "elif", "self", ".", "AUG", ".", "cr_aug_type", "in", "[", "\"blit\"", ",", "\"geom\"", ",", "\"color\"", ",", "\"filter\"", ",", "\"noise\"", ",", "\"cutout\"", ",", "\"bg\"", ",", "\"bgc\"", ",", "\"bgcf\"", ",", "\"bgcfn\"", ",", "\"bgcfnc\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "ada_aug", ".", "AdaAugment", "(", "**", "ada_augpipe", "[", "self", ".", "AUG", ".", "cr_aug_type", "]", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "AUG", ".", "parallel_augment", ".", "p", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "self", ".", "LOSS", ".", "apply_bcr", ":", "\n", "            ", "assert", "self", ".", "AUG", ".", "bcr_aug_type", "!=", "\"W/O\"", ",", "\"Please select augmentation type for bcr!\"", "\n", "if", "self", ".", "AUG", ".", "bcr_aug_type", "==", "\"bcr\"", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "cr", ".", "apply_cr_aug", "\n", "", "elif", "self", ".", "AUG", ".", "bcr_aug_type", "==", "\"diffaug\"", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "diffaug", ".", "apply_diffaug", "\n", "", "elif", "self", ".", "AUG", ".", "bcr_aug_type", "in", "[", "\"simclr_basic\"", ",", "\"simclr_hq\"", ",", "\"simclr_hq_cutout\"", ",", "\"byol\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "simclr_aug", ".", "SimclrAugment", "(", "aug_type", "=", "self", ".", "AUG", ".", "diffaug", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "", "elif", "self", ".", "AUG", ".", "bcr_aug_type", "in", "[", "\"blit\"", ",", "\"geom\"", ",", "\"color\"", ",", "\"filter\"", ",", "\"noise\"", ",", "\"cutout\"", ",", "\"bg\"", ",", "\"bgc\"", ",", "\"bgcf\"", ",", "\"bgcfn\"", ",", "\"bgcfnc\"", "]", ":", "\n", "                ", "self", ".", "AUG", ".", "parallel_augment", "=", "ada_aug", ".", "AdaAugment", "(", "\n", "**", "ada_augpipe", "[", "self", ".", "AUG", ".", "bcr_aug_type", "]", ")", ".", "train", "(", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "AUG", ".", "parallel_augment", ".", "p", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.check_compatability": [[630, 877], ["len", "isinstance", "print", "print", "print", "isinstance", "isinstance", "print", "print", "isinstance", "isinstance", "isinstance", "isinstance", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "", "", "def", "check_compatability", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "RUN", ".", "distributed_data_parallel", "and", "self", ".", "RUN", ".", "mixed_precision", ":", "\n", "            ", "print", "(", "\"-\"", "*", "120", ")", "\n", "print", "(", "\"Please using standing statistics (-std_stat) with -std_max and -std_step options for reliable evaluation!\"", ")", "\n", "print", "(", "\"-\"", "*", "120", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "RUN", ".", "eval_metrics", ")", ":", "\n", "            ", "for", "item", "in", "self", ".", "RUN", ".", "eval_metrics", ":", "\n", "                ", "assert", "item", "in", "[", "\"is\"", ",", "\"fid\"", ",", "\"prdc\"", ",", "\"none\"", "]", ",", "\"-metrics option can only contain is, fid, prdc or none for skipping evaluation.\"", "\n", "\n", "", "", "if", "self", ".", "RUN", ".", "load_data_in_memory", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "load_train_hdf5", ",", "\"load_data_in_memory option is appliable with the load_train_hdf5 (-hdf5) option.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"deep_conv\"", ":", "\n", "            ", "assert", "self", ".", "DATA", ".", "img_size", "==", "32", ",", "\"StudioGAN does not support the deep_conv backbone for the dataset whose spatial resolution is not 32.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"big_resnet_deep_legacy\"", ",", "\"big_resnet_deep_studiogan\"", "]", ":", "\n", "            ", "msg", "=", "\"StudioGAN does not support the big_resnet_deep backbones without applying spectral normalization to the generator and discriminator.\"", "\n", "assert", "self", ".", "MODEL", ".", "g_cond_mtd", "and", "self", ".", "MODEL", ".", "d_cond_mtd", ",", "msg", "\n", "\n", "", "if", "self", ".", "RUN", ".", "langevin_sampling", "or", "self", ".", "LOSS", ".", "apply_lo", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "langevin_sampling", "*", "self", ".", "LOSS", ".", "apply_lo", "==", "0", ",", "\"Langevin sampling and latent optmization cannot be used simultaneously.\"", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "MODEL", ".", "g_depth", ",", "int", ")", "or", "isinstance", "(", "self", ".", "MODEL", ".", "d_depth", ",", "int", ")", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"big_resnet_deep_legacy\"", ",", "\"big_resnet_deep_studiogan\"", "]", ",", "\"MODEL.g_depth and MODEL.d_depth are hyperparameters for big_resnet_deep backbones.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "langevin_sampling", ":", "\n", "            ", "msg", "=", "\"Langevin sampling cannot be used for training only.\"", "\n", "assert", "self", ".", "RUN", ".", "vis_fake_images", "+", "self", ".", "RUN", ".", "k_nearest_neighbor", "+", "self", ".", "RUN", ".", "interpolation", "+", "self", ".", "RUN", ".", "frequency_analysis", "+", "self", ".", "RUN", ".", "tsne_analysis", "+", "self", ".", "RUN", ".", "intra_class_fid", "+", "self", ".", "RUN", ".", "semantic_factorization", "+", "self", ".", "RUN", ".", "GAN_train", "+", "self", ".", "RUN", ".", "GAN_test", "!=", "0", ",", "msg", "\n", "\n", "", "if", "self", ".", "RUN", ".", "langevin_sampling", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "z_prior", "==", "\"gaussian\"", ",", "\"Langevin sampling is defined only if z_prior is gaussian.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "freezeD", ">", "-", "1", ":", "\n", "            ", "msg", "=", "\"Freezing discriminator needs a pre-trained model. Please specify the checkpoint directory (using -ckpt) for loading a pre-trained discriminator.\"", "\n", "assert", "self", ".", "RUN", ".", "ckpt_dir", "is", "not", "None", ",", "msg", "\n", "\n", "", "if", "not", "self", ".", "RUN", ".", "train", "and", "self", ".", "RUN", ".", "eval_metrics", "!=", "\"none\"", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "ckpt_dir", "is", "not", "None", ",", "\"Specify -ckpt CHECKPOINT_FOLDER to evaluate GAN without training.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "GAN_train", "+", "self", ".", "RUN", ".", "GAN_test", ">", "1", ":", "\n", "            ", "msg", "=", "\"Please turn off -DDP option to calculate CAS. It is possible to train a GAN using the DDP option and then compute CAS using DP.\"", "\n", "assert", "not", "self", ".", "RUN", ".", "distributed_data_parallel", ",", "msg", "\n", "\n", "", "if", "self", ".", "RUN", ".", "distributed_data_parallel", ":", "\n", "            ", "msg", "=", "\"StudioGAN does not support image visualization, k_nearest_neighbor, interpolation, frequency, tsne analysis, DDLS, SeFa, and CAS with DDP. \"", "+", "\"Please change DDP with a single GPU training or DataParallel instead.\"", "\n", "assert", "self", ".", "RUN", ".", "vis_fake_images", "+", "self", ".", "RUN", ".", "k_nearest_neighbor", "+", "self", ".", "RUN", ".", "interpolation", "+", "self", ".", "RUN", ".", "frequency_analysis", "+", "self", ".", "RUN", ".", "tsne_analysis", "+", "self", ".", "RUN", ".", "semantic_factorization", "+", "self", ".", "RUN", ".", "langevin_sampling", "+", "self", ".", "RUN", ".", "GAN_train", "+", "self", ".", "RUN", ".", "GAN_test", "==", "0", ",", "msg", "\n", "\n", "", "if", "self", ".", "RUN", ".", "intra_class_fid", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "load_data_in_memory", "*", "self", ".", "RUN", ".", "load_train_hdf5", "or", "not", "self", ".", "RUN", ".", "load_train_hdf5", ",", "\"StudioGAN does not support calculating iFID using hdf5 data format without load_data_in_memory option.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "vis_fake_images", "+", "self", ".", "RUN", ".", "k_nearest_neighbor", "+", "self", ".", "RUN", ".", "interpolation", "+", "self", ".", "RUN", ".", "intra_class_fid", "+", "self", ".", "RUN", ".", "GAN_train", "+", "self", ".", "RUN", ".", "GAN_test", ">=", "1", ":", "\n", "            ", "assert", "self", ".", "OPTIMIZATION", ".", "batch_size", "%", "8", "==", "0", ",", "\"batch_size should be divided by 8.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "aux_cls_type", "!=", "\"W/O\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "self", ".", "MISC", ".", "classifier_based_GAN", ",", "\"TAC and ADC are only applicable to classifier-based GANs.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"MH\"", "or", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"MH\"", "and", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ",", "\"To train a GAN with Multi-Hinge loss, both d_cond_mtd and adv_loss must be 'MH'.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"MH\"", "or", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "            ", "assert", "not", "self", ".", "LOSS", ".", "apply_topk", ",", "\"StudioGAN does not support Topk training for MHGAN.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "train", "*", "self", ".", "RUN", ".", "standing_statistics", ":", "\n", "            ", "print", "(", "\"StudioGAN does not support standing_statistics during training\"", ")", "\n", "print", "(", "\"After training is done, StudioGAN will accumulate batchnorm statistics to evaluate GAN.\"", ")", "\n", "\n", "", "if", "self", ".", "OPTIMIZATION", ".", "world_size", ">", "1", "and", "self", ".", "RUN", ".", "synchronized_bn", ":", "\n", "            ", "assert", "not", "self", ".", "RUN", ".", "batch_statistics", ",", "\"batch_statistics cannot be used with synchronized_bn.\"", "\n", "\n", "", "if", "self", ".", "DATA", ".", "name", "in", "[", "\"CIFAR10\"", ",", "\"CIFAR100\"", "]", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "ref_dataset", "in", "[", "\"train\"", ",", "\"test\"", "]", ",", "\"There is no data for validation.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "interpolation", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"big_resnet\"", ",", "\"big_resnet_deep_legacy\"", ",", "\"big_resnet_deep_studiogan\"", "]", ",", "\"StudioGAN does not support interpolation analysis except for biggan and big_resnet_deep backbones.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "semantic_factorization", ":", "\n", "            ", "assert", "self", ".", "RUN", ".", "num_semantic_axis", ">", "0", ",", "\"To apply sefa, please set num_semantic_axis to a natual number greater than 0.\"", "\n", "\n", "", "if", "self", ".", "OPTIMIZATION", ".", "world_size", "==", "1", ":", "\n", "            ", "assert", "not", "self", ".", "RUN", ".", "distributed_data_parallel", ",", "\"Cannot perform distributed training with a single gpu.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", ":", "\n", "            ", "assert", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "in", "[", "\"stylegan3-t\"", ",", "\"stylegan3-r\"", "]", ",", "\"You must choose which type of stylegan3 generator (-r or -t)\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "g_cond_mtd", "==", "\"cAdaIN\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ",", "\"cAdaIN is only applicable to stylegan2, stylegan3.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"SPD\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ",", "\"SytleGAN Projection Discriminator (SPD) is only applicable to stylegan2, stylegan3.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"Auto\"", "and", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"Auto\"", ",", "\"g_act_fn and d_act_fn should be 'Auto' to build StyleGAN2, StyleGAN3 generator and discriminator.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "not", "self", ".", "MODEL", ".", "apply_g_sn", "and", "not", "self", ".", "MODEL", ".", "apply_d_sn", ",", "\"StudioGAN does not support spectral normalization on stylegan2, stylegan3.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "g_cond_mtd", "in", "[", "\"W/O\"", ",", "\"cAdaIN\"", "]", ",", "\"stylegan2 and stylegan3 only supports 'W/O' or 'cAdaIN' as g_cond_mtd.\"", "\n", "\n", "", "if", "self", ".", "LOSS", ".", "apply_r1_reg", "and", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "LOSS", ".", "r1_place", "in", "[", "\"inside_loop\"", ",", "\"outside_loop\"", "]", ",", "\"LOSS.r1_place should be one of ['inside_loop', 'outside_loop']\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "g_act_fn", "==", "\"Auto\"", "or", "self", ".", "MODEL", ".", "d_act_fn", "==", "\"Auto\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ",", "\"StudioGAN does not support the act_fn auto selection options except for stylegan2, stylegan3.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", ":", "\n", "            ", "assert", "self", ".", "STYLEGAN", ".", "blur_init_sigma", "!=", "\"N/A\"", ",", "\"With stylegan3-r, you need to specify blur_init_sigma.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", "and", "self", ".", "MODEL", ".", "apply_g_ema", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "g_ema_decay", "==", "\"N/A\"", "and", "self", ".", "MODEL", ".", "g_ema_start", "==", "\"N/A\"", ",", "\"Please specify g_ema parameters to STYLEGAN.g_ema_kimg and STYLEGAN.g_ema_rampup instead of MODEL.g_ema_decay and MODEL.g_ema_start.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "STYLEGAN", ".", "d_epilogue_mbstd_group_size", "<=", "(", "self", ".", "OPTIMIZATION", ".", "batch_size", "/", "self", ".", "OPTIMIZATION", ".", "world_size", ")", ",", "\"Number of imgs that goes to each GPU must be bigger than d_epilogue_mbstd_group_size\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "not", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", "and", "self", ".", "MODEL", ".", "apply_g_ema", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "MODEL", ".", "g_ema_decay", ",", "float", ")", "and", "isinstance", "(", "self", ".", "MODEL", ".", "g_ema_start", ",", "int", ")", ",", "\"Please specify g_ema parameters to MODEL.g_ema_decay and MODEL.g_ema_start.\"", "\n", "assert", "self", ".", "STYLEGAN", ".", "g_ema_kimg", "==", "\"N/A\"", "and", "self", ".", "STYLEGAN", ".", "g_ema_rampup", "==", "\"N/A\"", ",", "\"g_ema_kimg, g_ema_rampup hyperparameters are only valid for stylegan2 backbone.\"", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "MODEL", ".", "g_shared_dim", ",", "int", ")", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"big_resnet\"", ",", "\"big_resnet_deep_legacy\"", ",", "\"big_resnet_deep_studiogan\"", "]", ",", "\"hierarchical embedding is only applicable to big_resnet or big_resnet_deep backbones.\"", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "MODEL", ".", "g_conv_dim", ",", "int", ")", "or", "isinstance", "(", "self", ".", "MODEL", ".", "d_conv_dim", ",", "int", ")", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"resnet\"", ",", "\"big_resnet\"", ",", "\"big_resnet_deep_legacy\"", ",", "\"big_resnet_deep_studiogan\"", "]", ",", "\"g_conv_dim and d_conv_dim are hyperparameters for controlling dimensions of resnet, big_resnet, and big_resnet_deeps.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "LOSS", ".", "apply_fm", "+", "self", ".", "LOSS", ".", "apply_gp", "+", "self", ".", "LOSS", ".", "apply_dra", "+", "self", ".", "LOSS", ".", "apply_maxgp", "+", "self", ".", "LOSS", ".", "apply_zcr", "+", "self", ".", "LOSS", ".", "apply_lo", "+", "self", ".", "RUN", ".", "synchronized_bn", "+", "self", ".", "RUN", ".", "batch_statistics", "+", "self", ".", "RUN", ".", "standing_statistics", "+", "self", ".", "RUN", ".", "freezeD", "+", "self", ".", "RUN", ".", "langevin_sampling", "+", "self", ".", "RUN", ".", "interpolation", "+", "self", ".", "RUN", ".", "semantic_factorization", "==", "-", "1", ",", "\"StudioGAN does not support some options for stylegan2, stylegan3. Please refer to config.py for more details.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "not", "self", ".", "MODEL", ".", "apply_attn", ",", "\"cannot apply attention layers to the stylegan2 generator.\"", "\n", "\n", "", "if", "self", ".", "RUN", ".", "GAN_train", "or", "self", ".", "RUN", ".", "GAN_test", ":", "\n", "            ", "assert", "not", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"W/O\"", ",", "\"Classifier Accuracy Score (CAS) is defined only when the GAN is trained by a class-conditioned way.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "==", "\"N/A\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_discrete_c", "==", "\"N/A\"", "and", "self", ".", "MODEL", ".", "info_num_conti_c", "==", "\"N/A\"", "and", "self", ".", "MODEL", ".", "info_dim_discrete_c", "==", "\"N/A\"", "and", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_discrete_lambda", "==", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_conti_lambda", "==", "\"N/A\"", ",", "\"MODEL.info_num_discrete_c, MODEL.info_num_conti_c, MODEL.info_dim_discrete_c, LOSS.infoGAN_loss_discrete_lambda, and LOSS.infoGAN_loss_conti_lambda should be 'N/A'.\"", "\n", "", "elif", "self", ".", "MODEL", ".", "info_type", "==", "\"continuous\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_conti_c", "!=", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_conti_lambda", "!=", "\"N/A\"", ",", "\"MODEL.info_num_conti_c and LOSS.infoGAN_loss_conti_lambda should be integer and float.\"", "\n", "", "elif", "self", ".", "MODEL", ".", "info_type", "==", "\"discrete\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_discrete_c", "!=", "\"N/A\"", "and", "self", ".", "MODEL", ".", "info_dim_discrete_c", "!=", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_discrete_lambda", "!=", "\"N/A\"", ",", "\"MODEL.info_num_discrete_c, MODEL.info_dim_discrete_c, and LOSS.infoGAN_loss_discrete_lambda should be integer, integer, and float, respectively.\"", "\n", "", "elif", "self", ".", "MODEL", ".", "info_type", "==", "\"both\"", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_discrete_c", "!=", "\"N/A\"", "and", "self", ".", "MODEL", ".", "info_num_conti_c", "!=", "\"N/A\"", "and", "self", ".", "MODEL", ".", "info_dim_discrete_c", "!=", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_discrete_lambda", "!=", "\"N/A\"", "and", "self", ".", "LOSS", ".", "infoGAN_loss_conti_lambda", "!=", "\"N/A\"", ",", "\"MODEL.info_num_discrete_c, MODEL.info_num_conti_c, MODEL.info_dim_discrete_c, LOSS.infoGAN_loss_discrete_lambda, and LOSS.infoGAN_loss_conti_lambda should not be 'N/A'.\"", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_discrete_c", ">", "0", "and", "self", ".", "MODEL", ".", "info_dim_discrete_c", ">", "0", ",", "\"MODEL.info_num_discrete_c and MODEL.info_dim_discrete_c should be over 0.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "info_num_conti_c", ">", "0", ",", "\"MODEL.info_num_conti_c should be over 0.\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"continuous\"", ",", "\"both\"", "]", "and", "self", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ",", "\"StyleGAN2, StyleGAN3 only allows concat as g_info_injection method\"", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "assert", "self", ".", "MODEL", ".", "g_info_injection", "in", "[", "\"concat\"", ",", "\"cBN\"", "]", ",", "\"MODEL.g_info_injection should be 'concat' or 'cBN'.\"", "\n", "\n", "", "if", "self", ".", "AUG", ".", "apply_ada", "and", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "            ", "assert", "self", ".", "AUG", ".", "ada_initial_augment_p", "==", "self", ".", "AUG", ".", "apa_initial_augment_p", "and", "self", ".", "AUG", ".", "ada_target", "==", "self", ".", "AUG", ".", "apa_target", "and", "self", ".", "AUG", ".", "ada_kimg", "==", "self", ".", "AUG", ".", "apa_kimg", "and", "self", ".", "AUG", ".", "ada_interval", "==", "self", ".", "AUG", ".", "apa_interval", ",", "\"ADA and APA specifications should be the completely same.\"", "\n", "\n", "", "assert", "self", ".", "RUN", ".", "eval_backbone", "in", "[", "\"InceptionV3_tf\"", ",", "\"InceptionV3_torch\"", ",", "\"ResNet50_torch\"", ",", "\"SwAV_torch\"", ",", "\"DINO_torch\"", ",", "\"Swin-T_torch\"", "]", ",", "\"eval_backbone should be in [InceptionV3_tf, InceptionV3_torch, ResNet50_torch, SwAV_torch, DINO_torch, Swin-T_torch]\"", "\n", "\n", "assert", "self", ".", "RUN", ".", "post_resizer", "in", "[", "\"legacy\"", ",", "\"clean\"", ",", "\"friendly\"", "]", ",", "\"resizing flag should be in [legacy, clean, friendly]\"", "\n", "\n", "assert", "self", ".", "RUN", ".", "data_dir", "is", "not", "None", "or", "self", ".", "RUN", ".", "save_fake_images", ",", "\"Please specify data_dir if dataset is prepared. \\\n            \\nIn the case of CIFAR10 or CIFAR100, just specify the directory where you want \\\n            dataset to be downloaded.\"", "\n", "\n", "assert", "self", ".", "RUN", ".", "batch_statistics", "*", "self", ".", "RUN", ".", "standing_statistics", "==", "0", ",", "\"You can't turn on batch_statistics and standing_statistics simultaneously.\"", "\n", "\n", "assert", "self", ".", "OPTIMIZATION", ".", "batch_size", "%", "self", ".", "OPTIMIZATION", ".", "world_size", "==", "0", ",", "\"Batch_size should be divided by the number of gpus.\"", "\n", "\n", "assert", "int", "(", "self", ".", "LOSS", ".", "apply_cr", ")", "*", "int", "(", "self", ".", "LOSS", ".", "apply_bcr", ")", "==", "0", "and", "int", "(", "self", ".", "LOSS", ".", "apply_cr", ")", "*", "int", "(", "self", ".", "LOSS", ".", "apply_zcr", ")", "==", "0", ",", "\"You can't simultaneously turn on consistency reg. and improved consistency reg.\"", "\n", "\n", "assert", "int", "(", "self", ".", "LOSS", ".", "apply_gp", ")", "*", "int", "(", "self", ".", "LOSS", ".", "apply_dra", ")", "*", "(", "self", ".", "LOSS", ".", "apply_maxgp", ")", "==", "0", ",", "\"You can't simultaneously apply gradient penalty regularization, deep regret analysis, and max gradient penalty.\"", "\n", "\n", "assert", "self", ".", "RUN", ".", "save_freq", "%", "self", ".", "RUN", ".", "print_freq", "==", "0", ",", "\"RUN.save_freq should be divided by RUN.print_freq for wandb logging.\"", "\n", "\n", "assert", "self", ".", "RUN", ".", "pre_resizer", "in", "[", "\"wo_resize\"", ",", "\"nearest\"", ",", "\"bilinear\"", ",", "\"bicubic\"", ",", "\"lanczos\"", "]", ",", "\"The interpolation filter for pre-precessing should be \\in ['wo_resize', 'nearest', 'bilinear', 'bicubic', 'lanczos']\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.main.load_configs_initialize_training": [[28, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "config.Configurations", "config.Configurations.update_cfgs", "config.Configurations.check_compatability", "utils.make_run_name", "utils.prepare_folder", "utils.download_data_if_possible", "argparse.ArgumentParser.print_help", "sys.exit", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "utils.make_hdf5", "random.randint", "print", "config.Configurations.RUN.cfg_file.split"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.update_cfgs", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.check_compatability", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.log.make_run_name", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.prepare_folder", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.download_data_if_possible", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.hdf5.make_hdf5"], ["def", "load_configs_initialize_training", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--entity\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"entity for wandb logging\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--project\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"project name for wandb logging\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-cfg\"", ",", "\"--cfg_file\"", ",", "type", "=", "str", ",", "default", "=", "\"./src/configs/CIFAR10/ContraGAN.yaml\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-data\"", ",", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"-save\"", ",", "\"--save_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ckpt\"", ",", "\"--ckpt_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"-best\"", ",", "\"--load_best\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"load the best performed checkpoint\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"seed for generating random numbers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-DDP\"", ",", "\"--distributed_data_parallel\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backend\"", ",", "type", "=", "str", ",", "default", "=", "\"nccl\"", ",", "help", "=", "\"cuda backend for DDP training \\in ['nccl', 'gloo']\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-tn\"", ",", "\"--total_nodes\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"total number of nodes for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cn\"", ",", "\"--current_node\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"rank of the current node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"-sync_bn\"", ",", "\"--synchronized_bn\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"turn on synchronized batchnorm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-mpc\"", ",", "\"--mixed_precision\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"turn on mixed precision training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--truncation_factor\"", ",", "type", "=", "float", ",", "default", "=", "-", "1.0", ",", "help", "=", "\"truncation factor for applying truncation trick \\\n                        (-1.0 means not applying truncation trick)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--truncation_cutoff\"", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "\"truncation cutoff for stylegan \\\n                        (apply truncation for only w[:truncation_cutoff]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-batch_stat\"", ",", "\"--batch_statistics\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use the statistics of a batch when evaluating GAN \\\n                        (if false, use the moving average updated statistics)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-std_stat\"", ",", "\"--standing_statistics\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"apply standing statistics for evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-std_max\"", ",", "\"--standing_max_batch\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"maximum batch_size for calculating standing statistics \\\n                        (-1.0 menas not applying standing statistics trick for evaluation)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-std_step\"", ",", "\"--standing_step\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"# of steps for standing statistics \\\n                        (-1.0 menas not applying standing statistics trick for evaluation)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--freezeD\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"# of freezed blocks in the discriminator for transfer learning\"", ")", "\n", "\n", "# parser arguments to apply langevin sampling for GAN evaluation", "\n", "# In the arguments regarding 'decay', -1 means not applying the decay trick by default", "\n", "parser", ".", "add_argument", "(", "\"-lgv\"", ",", "\"--langevin_sampling\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"apply langevin sampling to generate images from a Energy-Based Model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lgv_rate\"", ",", "\"--langevin_rate\"", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"an initial update rate for langevin sampling (\\epsilon)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lgv_std\"", ",", "\"--langevin_noise_std\"", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"standard deviation of a gaussian noise used in langevin sampling (std of n_i)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lgv_decay\"", ",", "\"--langevin_decay\"", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"decay strength for langevin_rate and langevin_noise_std\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lgv_decay_steps\"", ",", "\"--langevin_decay_steps\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"langevin_rate and langevin_noise_std decrease every 'langevin_decay_steps'\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-lgv_steps\"", ",", "\"--langevin_steps\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"total steps of langevin sampling\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"-t\"", ",", "\"--train\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-hdf5\"", ",", "\"--load_train_hdf5\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"load train images from a hdf5 file for fast I/O\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-l\"", ",", "\"--load_data_in_memory\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"put the whole train dataset on the main memory for fast I/O\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-metrics\"", ",", "\"--eval_metrics\"", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'fid'", "]", ",", "\n", "help", "=", "\"evaluation metrics to use during training, a subset list of ['fid', 'is', 'prdc'] or none\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pre_resizer\"", ",", "type", "=", "str", ",", "default", "=", "\"wo_resize\"", ",", "help", "=", "\"which resizer will you use to pre-process images\\\n                        in ['wo_resize', 'nearest', 'bilinear', 'bicubic', 'lanczos']\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--post_resizer\"", ",", "type", "=", "str", ",", "default", "=", "\"legacy\"", ",", "help", "=", "\"which resizer will you use to evaluate GANs\\\n                        in ['legacy', 'clean', 'friendly']\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_eval\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of runs for final evaluation.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sr\"", ",", "\"--save_real_images\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save images sampled from the reference dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sf\"", ",", "\"--save_fake_images\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save fake images generated by the GAN.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sf_num\"", ",", "\"--save_fake_images_num\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of fake images to save\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-v\"", ",", "\"--vis_fake_images\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"visualize image canvas\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-knn\"", ",", "\"--k_nearest_neighbor\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"conduct k-nearest neighbor analysis\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-itp\"", ",", "\"--interpolation\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"conduct interpolation analysis\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-fa\"", ",", "\"--frequency_analysis\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"conduct frequency analysis\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-tsne\"", ",", "\"--tsne_analysis\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"conduct tsne analysis\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ifid\"", ",", "\"--intra_class_fid\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"calculate intra-class fid\"", ")", "\n", "parser", ".", "add_argument", "(", "'--GAN_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"whether to calculate CAS (Recall)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--GAN_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"whether to calculate CAS (Precision)\"", ")", "\n", "parser", ".", "add_argument", "(", "'-resume_ct'", ",", "'--resume_classifier_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"whether to resume classifier traning for CAS\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sefa\"", ",", "\"--semantic_factorization\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"perform semantic (closed-form) factorization\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sefa_axis\"", ",", "\"--num_semantic_axis\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"number of semantic axis for sefa\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-sefa_max\"", ",", "\"--maximum_variations\"", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"iterpolate between z and z + maximum_variations*eigen-vector\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-empty_cache\"", ",", "\"--empty_cache\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"empty cuda caches after training step of generator and discriminator, \\\n                        slightly reduces memory usage but slows training speed. (not recommended for normal use)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_freq\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"logging interval\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_freq\"", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "\"save interval\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_backbone'", ",", "type", "=", "str", ",", "default", "=", "'InceptionV3_tf'", ",", "help", "=", "\"[InceptionV3_tf, InceptionV3_torch, ResNet50_torch, SwAV_torch, DINO_torch, Swin-T_torch]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-ref\"", ",", "\"--ref_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"train\"", ",", "help", "=", "\"reference dataset for evaluation[train/valid/test]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--calc_is_ref_dataset\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"whether to calculate a inception score of the ref dataset.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_cfgs", "=", "vars", "(", "args", ")", "\n", "\n", "if", "not", "args", ".", "train", "and", "\"none\"", "in", "args", ".", "eval_metrics", "and", "not", "args", ".", "save_real_images", "and", "not", "args", ".", "save_fake_images", "and", "not", "args", ".", "vis_fake_images", "and", "not", "args", ".", "k_nearest_neighbor", "and", "not", "args", ".", "interpolation", "and", "not", "args", ".", "frequency_analysis", "and", "not", "args", ".", "tsne_analysis", "and", "not", "args", ".", "intra_class_fid", "and", "not", "args", ".", "GAN_train", "and", "not", "args", ".", "GAN_test", "and", "not", "args", ".", "semantic_factorization", ":", "\n", "        ", "parser", ".", "print_help", "(", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "\n", "cfgs", "=", "config", ".", "Configurations", "(", "args", ".", "cfg_file", ")", "\n", "cfgs", ".", "update_cfgs", "(", "run_cfgs", ",", "super", "=", "\"RUN\"", ")", "\n", "cfgs", ".", "OPTIMIZATION", ".", "world_size", "=", "gpus_per_node", "*", "cfgs", ".", "RUN", ".", "total_nodes", "\n", "cfgs", ".", "check_compatability", "(", ")", "\n", "\n", "run_name", "=", "log", ".", "make_run_name", "(", "RUN_NAME_FORMAT", ",", "\n", "data_name", "=", "cfgs", ".", "DATA", ".", "name", ",", "\n", "framework", "=", "cfgs", ".", "RUN", ".", "cfg_file", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ",", "\n", "phase", "=", "\"train\"", ")", "\n", "\n", "crop_long_edge", "=", "False", "if", "cfgs", ".", "DATA", ".", "name", "in", "cfgs", ".", "MISC", ".", "no_proc_data", "else", "True", "\n", "resize_size", "=", "None", "if", "cfgs", ".", "DATA", ".", "name", "in", "cfgs", ".", "MISC", ".", "no_proc_data", "else", "cfgs", ".", "DATA", ".", "img_size", "\n", "cfgs", ".", "RUN", ".", "pre_resizer", "=", "\"wo_resize\"", "if", "cfgs", ".", "DATA", ".", "name", "in", "cfgs", ".", "MISC", ".", "no_proc_data", "else", "cfgs", ".", "RUN", ".", "pre_resizer", "\n", "if", "cfgs", ".", "RUN", ".", "load_train_hdf5", ":", "\n", "        ", "hdf5_path", ",", "crop_long_edge", ",", "resize_size", "=", "hdf5", ".", "make_hdf5", "(", "\n", "name", "=", "cfgs", ".", "DATA", ".", "name", ",", "\n", "img_size", "=", "cfgs", ".", "DATA", ".", "img_size", ",", "\n", "crop_long_edge", "=", "crop_long_edge", ",", "\n", "resize_size", "=", "resize_size", ",", "\n", "resizer", "=", "cfgs", ".", "RUN", ".", "pre_resizer", ",", "\n", "data_dir", "=", "cfgs", ".", "RUN", ".", "data_dir", ",", "\n", "DATA", "=", "cfgs", ".", "DATA", ",", "\n", "RUN", "=", "cfgs", ".", "RUN", ")", "\n", "", "else", ":", "\n", "        ", "hdf5_path", "=", "None", "\n", "", "cfgs", ".", "PRE", ".", "crop_long_edge", ",", "cfgs", ".", "PRE", ".", "resize_size", "=", "crop_long_edge", ",", "resize_size", "\n", "\n", "misc", ".", "prepare_folder", "(", "names", "=", "cfgs", ".", "MISC", ".", "base_folders", ",", "save_dir", "=", "cfgs", ".", "RUN", ".", "save_dir", ")", "\n", "misc", ".", "download_data_if_possible", "(", "data_name", "=", "cfgs", ".", "DATA", ".", "name", ",", "data_dir", "=", "cfgs", ".", "RUN", ".", "data_dir", ")", "\n", "\n", "if", "cfgs", ".", "RUN", ".", "seed", "==", "-", "1", ":", "\n", "        ", "cfgs", ".", "RUN", ".", "seed", "=", "random", ".", "randint", "(", "1", ",", "4096", ")", "\n", "cfgs", ".", "RUN", ".", "fix_seed", "=", "False", "\n", "", "else", ":", "\n", "        ", "cfgs", ".", "RUN", ".", "fix_seed", "=", "True", "\n", "\n", "", "if", "cfgs", ".", "OPTIMIZATION", ".", "world_size", "==", "1", ":", "\n", "        ", "print", "(", "\"You have chosen a specific GPU. This will completely disable data parallelism.\"", ")", "\n", "", "return", "cfgs", ",", "gpus_per_node", ",", "run_name", ",", "hdf5_path", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.__init__": [[60, 187], ["worker.WORKER.cfgs.define_augments", "worker.WORKER.cfgs.define_losses", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.define_sampler", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "utils.PathLengthRegularizer", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.LeCamEMA", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "utils.GeneratorController", "datetime.datetime.datetime.now", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "worker.WORKER.lossy.data.fill_", "copy.deepcopy", "torch.new_group", "torch.new_group", "torch.new_group", "torch.new_group", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "wandb.init", "worker.WORKER.AUG.series_augment.p.copy_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "utils.ConditionalContrastiveLoss", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "utils.Data2DataCrossEntropyLoss", "range"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_augments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_losses", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler"], ["    ", "def", "__init__", "(", "self", ",", "cfgs", ",", "run_name", ",", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "\n", "ema", ",", "eval_model", ",", "train_dataloader", ",", "eval_dataloader", ",", "global_rank", ",", "local_rank", ",", "mu", ",", "sigma", ",", "real_feats", ",", "logger", ",", "\n", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", ",", "num_eval", ",", "loss_list_dict", ",", "metric_dict_during_train", ")", ":", "\n", "        ", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "Gen", "=", "Gen", "\n", "self", ".", "Gen_mapping", "=", "Gen_mapping", "\n", "self", ".", "Gen_synthesis", "=", "Gen_synthesis", "\n", "self", ".", "Dis", "=", "Dis", "\n", "self", ".", "Gen_ema", "=", "Gen_ema", "\n", "self", ".", "Gen_ema_mapping", "=", "Gen_ema_mapping", "\n", "self", ".", "Gen_ema_synthesis", "=", "Gen_ema_synthesis", "\n", "self", ".", "ema", "=", "ema", "\n", "self", ".", "eval_model", "=", "eval_model", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "eval_dataloader", "=", "eval_dataloader", "\n", "self", ".", "global_rank", "=", "global_rank", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "real_feats", "=", "real_feats", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "aa_p", "=", "aa_p", "\n", "self", ".", "best_step", "=", "best_step", "\n", "self", ".", "best_fid", "=", "best_fid", "\n", "self", ".", "best_ckpt_path", "=", "best_ckpt_path", "\n", "self", ".", "lecam_emas", "=", "lecam_emas", "\n", "self", ".", "num_eval", "=", "num_eval", "\n", "self", ".", "loss_list_dict", "=", "loss_list_dict", "\n", "self", ".", "metric_dict_during_train", "=", "metric_dict_during_train", "\n", "self", ".", "metric_dict_during_final_eval", "=", "{", "}", "\n", "\n", "self", ".", "cfgs", ".", "define_augments", "(", "local_rank", ")", "\n", "self", ".", "cfgs", ".", "define_losses", "(", ")", "\n", "self", ".", "DATA", "=", "cfgs", ".", "DATA", "\n", "self", ".", "MODEL", "=", "cfgs", ".", "MODEL", "\n", "self", ".", "LOSS", "=", "cfgs", ".", "LOSS", "\n", "self", ".", "STYLEGAN", "=", "cfgs", ".", "STYLEGAN", "\n", "self", ".", "OPTIMIZATION", "=", "cfgs", ".", "OPTIMIZATION", "\n", "self", ".", "PRE", "=", "cfgs", ".", "PRE", "\n", "self", ".", "AUG", "=", "cfgs", ".", "AUG", "\n", "self", ".", "RUN", "=", "cfgs", ".", "RUN", "\n", "self", ".", "MISC", "=", "cfgs", ".", "MISC", "\n", "self", ".", "is_stylegan", "=", "cfgs", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", "\n", "self", ".", "effective_batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", "*", "self", ".", "OPTIMIZATION", ".", "acml_steps", "\n", "self", ".", "blur_init_sigma", "=", "self", ".", "STYLEGAN", ".", "blur_init_sigma", "\n", "self", ".", "blur_fade_kimg", "=", "self", ".", "effective_batch_size", "*", "200", "/", "32", "\n", "self", ".", "DDP", "=", "self", ".", "RUN", ".", "distributed_data_parallel", "\n", "self", ".", "adc_fake", "=", "False", "\n", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", "\n", "\n", "self", ".", "sampler", "=", "misc", ".", "define_sampler", "(", "self", ".", "DATA", ".", "name", ",", "self", ".", "MODEL", ".", "d_cond_mtd", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "self", ".", "DATA", ".", "num_classes", ")", "\n", "\n", "self", ".", "pl_reg", "=", "losses", ".", "PathLengthRegularizer", "(", "device", "=", "local_rank", ",", "pl_weight", "=", "cfgs", ".", "STYLEGAN", ".", "pl_weight", ",", "pl_no_weight_grad", "=", "(", "cfgs", ".", "MODEL", ".", "backbone", "==", "\"stylegan2\"", ")", ")", "\n", "self", ".", "l2_loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "fm_loss", "=", "losses", ".", "feature_matching_loss", "\n", "self", ".", "lecam_ema", "=", "ops", ".", "LeCamEMA", "(", ")", "\n", "if", "self", ".", "lecam_emas", "is", "not", "None", ":", "\n", "            ", "self", ".", "lecam_ema", ".", "__dict__", "=", "self", ".", "lecam_emas", "\n", "", "self", ".", "lecam_ema", ".", "decay", ",", "self", ".", "lecam_ema", ".", "start_itr", "=", "self", ".", "LOSS", ".", "lecam_ema_decay", ",", "self", ".", "LOSS", ".", "lecam_ema_start_iter", "\n", "if", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "lossy", "=", "torch", ".", "LongTensor", "(", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "self", ".", "lossy", ".", "data", ".", "fill_", "(", "self", ".", "DATA", ".", "num_classes", ")", "\n", "\n", "", "if", "self", ".", "AUG", ".", "apply_ada", "+", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "            ", "if", "self", ".", "AUG", ".", "apply_ada", ":", "self", ".", "AUG", ".", "series_augment", ".", "p", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "self", ".", "aa_p", ")", ")", "\n", "self", ".", "aa_interval", "=", "self", ".", "AUG", ".", "ada_interval", "if", "self", ".", "AUG", ".", "ada_interval", "!=", "\"N/A\"", "else", "self", ".", "AUG", ".", "apa_interval", "\n", "self", ".", "aa_target", "=", "self", ".", "AUG", ".", "ada_target", "if", "self", ".", "AUG", ".", "ada_target", "!=", "\"N/A\"", "else", "self", ".", "AUG", ".", "apa_target", "\n", "self", ".", "aa_kimg", "=", "self", ".", "AUG", ".", "ada_kimg", "if", "self", ".", "AUG", ".", "ada_kimg", "!=", "\"N/A\"", "else", "self", ".", "AUG", ".", "apa_kimg", "\n", "self", ".", "dis_sign_real", ",", "self", ".", "dis_sign_fake", "=", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", ",", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_real", ",", "self", ".", "dis_logit_fake", "=", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", ",", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_sign_real_log", ",", "self", ".", "dis_sign_fake_log", "=", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", ",", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_real_log", ",", "self", ".", "dis_logit_fake_log", "=", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", ",", "torch", ".", "zeros", "(", "2", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "self", ".", "adc_fake", "=", "True", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "cond_loss", "=", "self", ".", "ce_loss", "\n", "", "elif", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"2C\"", ":", "\n", "            ", "self", ".", "cond_loss", "=", "losses", ".", "ConditionalContrastiveLoss", "(", "num_classes", "=", "num_classes", ",", "\n", "temperature", "=", "self", ".", "LOSS", ".", "temperature", ",", "\n", "master_rank", "=", "\"cuda\"", ",", "\n", "DDP", "=", "self", ".", "DDP", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"D2DCE\"", ":", "\n", "            ", "self", ".", "cond_loss", "=", "losses", ".", "Data2DataCrossEntropyLoss", "(", "num_classes", "=", "num_classes", ",", "\n", "temperature", "=", "self", ".", "LOSS", ".", "temperature", ",", "\n", "m_p", "=", "self", ".", "LOSS", ".", "m_p", ",", "\n", "master_rank", "=", "\"cuda\"", ",", "\n", "DDP", "=", "self", ".", "DDP", ")", "\n", "", "else", ":", "pass", "\n", "\n", "if", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "self", ".", "cond_loss_mi", "=", "copy", ".", "deepcopy", "(", "self", ".", "cond_loss", ")", "\n", "\n", "", "self", ".", "gen_ctlr", "=", "misc", ".", "GeneratorController", "(", "generator", "=", "self", ".", "Gen_ema", "if", "self", ".", "MODEL", ".", "apply_g_ema", "else", "self", ".", "Gen", ",", "\n", "generator_mapping", "=", "self", ".", "Gen_ema_mapping", ",", "\n", "generator_synthesis", "=", "self", ".", "Gen_ema_synthesis", ",", "\n", "batch_statistics", "=", "self", ".", "RUN", ".", "batch_statistics", ",", "\n", "standing_statistics", "=", "False", ",", "\n", "standing_max_batch", "=", "\"N/A\"", ",", "\n", "standing_step", "=", "\"N/A\"", ",", "\n", "cfgs", "=", "self", ".", "cfgs", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "global_rank", "=", "self", ".", "global_rank", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "std_stat_counter", "=", "0", ")", "\n", "\n", "if", "self", ".", "DDP", ":", "\n", "            ", "self", ".", "group", "=", "dist", ".", "new_group", "(", "[", "n", "for", "n", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "world_size", ")", "]", ")", "\n", "\n", "", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", ":", "\n", "            ", "self", ".", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n", "", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "resume", "=", "False", "if", "self", ".", "RUN", ".", "freezeD", ">", "-", "1", "else", "True", "\n", "wandb", ".", "init", "(", "project", "=", "self", ".", "RUN", ".", "project", ",", "\n", "entity", "=", "self", ".", "RUN", ".", "entity", ",", "\n", "name", "=", "self", ".", "run_name", ",", "\n", "dir", "=", "self", ".", "RUN", ".", "save_dir", ",", "\n", "resume", "=", "self", ".", "best_step", ">", "0", "and", "resume", ")", "\n", "\n", "", "self", ".", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.prepare_train_iter": [[188, 193], ["iter", "worker.WORKER.train_dataloader.sampler.set_epoch"], "methods", ["None"], ["", "def", "prepare_train_iter", "(", "self", ",", "epoch_counter", ")", ":", "\n", "        ", "self", ".", "epoch_counter", "=", "epoch_counter", "\n", "if", "self", ".", "DDP", ":", "\n", "            ", "self", ".", "train_dataloader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "epoch_counter", ")", "\n", "", "self", ".", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.sample_data_basket": [[194, 209], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "next", "iter", "next", "worker.WORKER.train_dataloader.sampler.set_epoch"], "methods", ["None"], ["", "def", "sample_data_basket", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "real_image_basket", ",", "real_label_basket", "=", "next", "(", "self", ".", "train_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "epoch_counter", "+=", "1", "\n", "if", "self", ".", "RUN", ".", "train", "and", "self", ".", "DDP", ":", "\n", "                ", "self", ".", "train_dataloader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "epoch_counter", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "self", ".", "train_iter", "=", "iter", "(", "self", ".", "train_dataloader", ")", "\n", "real_image_basket", ",", "real_label_basket", "=", "next", "(", "self", ".", "train_iter", ")", "\n", "\n", "", "real_image_basket", "=", "torch", ".", "split", "(", "real_image_basket", ",", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", "\n", "real_label_basket", "=", "torch", ".", "split", "(", "real_label_basket", ",", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", "\n", "return", "real_image_basket", ",", "real_label_basket", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_discriminator": [[213, 493], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "worker.WORKER.sample_data_basket", "range", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "worker.WORKER.Gen.apply", "worker.WORKER.OPTIMIZATION.d_optimizer.zero_grad", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "getattr", "getattr", "worker.WORKER.scaler.step", "worker.WORKER.scaler.update", "worker.WORKER.OPTIMIZATION.d_optimizer.step", "worker.WORKER.OPTIMIZATION.d_optimizer.zero_grad", "range", "worker.WORKER.OPTIMIZATION.d_optimizer.step", "min", "worker.WORKER.Dis.parameters", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "real_image_basket[].to", "real_label_basket[].to", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.AUG.series_augment", "worker.WORKER.AUG.series_augment", "worker.WORKER.Dis", "worker.WORKER.Dis", "worker.WORKER.scaler.scale().backward", "worker.WORKER.backward", "real_image_basket[].to", "real_label_basket[].to", "utils.style_ops.upfirdn2d.filter2d.requires_grad_", "worker.WORKER.Dis", "worker.WORKER.r1_penalty.backward", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "max", "worker.WORKER.AUG.series_augment.p.copy_", "worker.WORKER.dis_sign_real_log.copy_", "worker.WORKER.dis_sign_fake_log.copy_", "worker.WORKER.dis_logit_real_log.copy_", "worker.WORKER.dis_logit_fake_log.copy_", "worker.WORKER.dis_sign_real.mul_", "worker.WORKER.dis_sign_fake.mul_", "worker.WORKER.dis_logit_real.mul_", "worker.WORKER.dis_logit_fake.mul_", "p.data.clamp_", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.style_ops.upfirdn2d.filter2d.requires_grad_", "numpy.floor", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "worker.WORKER.LOSS.d_loss", "worker.WORKER.LOSS.d_loss", "worker.WORKER.LOSS.d_loss", "worker.WORKER.cond_loss", "worker.WORKER.AUG.parallel_augment", "worker.WORKER.Dis", "worker.WORKER.l2_loss", "worker.WORKER.AUG.parallel_augment", "worker.WORKER.AUG.parallel_augment", "worker.WORKER.Dis", "worker.WORKER.Dis", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "worker.WORKER.Dis", "worker.WORKER.l2_loss", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_grad_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_dra_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "utils.cal_maxgrad_penalty", "worker.WORKER.lecam_ema.update", "worker.WORKER.lecam_ema.update", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "utils.cal_r1_reg", "numpy.floor", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "utils.apply_apa_aug", "worker.WORKER.AUG.series_augment", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sign", "worker.WORKER.dis_sign_real[].item", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "max", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d.detach", "worker.WORKER.cond_loss_mi", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "utils.lecam_reg", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.style_ops.upfirdn2d.filter2d.requires_grad_", "worker.WORKER.Dis", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "utils.stylegan_cal_r1_reg", "worker.WORKER.scaler.scale", "max", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d.detach", "real_dict[].sign().sum().item", "fake_dict[].sign().sum().item", "real_dict[].sum().item", "fake_dict[].sum().item", "worker.WORKER.cond_loss", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "worker.WORKER.l2_loss", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "worker.WORKER.AUG.series_augment", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "real_dict[].sign().sum().item", "real_dict[].sum().item", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "real_dict[].sign().sum", "fake_dict[].sign().sum", "real_dict[].sum", "fake_dict[].sum", "real_dict[].sign().sum().item", "real_dict[].sum().item", "real_dict[].sign().sum", "real_dict[].sum", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "real_dict[].sign", "fake_dict[].sign", "real_dict[].sign().sum", "real_dict[].sum", "real_dict[].sign", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "real_dict[].sign", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.sample_data_basket", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d"], ["", "def", "train_discriminator", "(", "self", ",", "current_step", ")", ":", "\n", "        ", "batch_counter", "=", "0", "\n", "# make GAN be trainable before starting training", "\n", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "# toggle gradients of the generator and discriminator", "\n", "misc", ".", "toggle_grad", "(", "model", "=", "self", ".", "Gen", ",", "grad", "=", "False", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "self", ".", "is_stylegan", ")", "\n", "misc", ".", "toggle_grad", "(", "model", "=", "self", ".", "Dis", ",", "grad", "=", "True", ",", "num_freeze_layers", "=", "self", ".", "RUN", ".", "freezeD", ",", "is_stylegan", "=", "self", ".", "is_stylegan", ")", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "0", "]", ")", ",", "grad", "=", "False", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "1", "]", ")", ",", "grad", "=", "False", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "2", "]", ")", ",", "grad", "=", "False", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "", "if", "self", ".", "DDP", "*", "self", ".", "RUN", ".", "mixed_precision", "*", "self", ".", "RUN", ".", "synchronized_bn", "==", "0", ":", "self", ".", "Gen", ".", "apply", "(", "misc", ".", "untrack_bn_statistics", ")", "\n", "# sample real images and labels from the true data distribution", "\n", "real_image_basket", ",", "real_label_basket", "=", "self", ".", "sample_data_basket", "(", ")", "\n", "for", "step_index", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "d_updates_per_step", ")", ":", "\n", "            ", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "acml_steps", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "# load real images and labels onto the GPU memory", "\n", "                    ", "real_images", "=", "real_image_basket", "[", "batch_counter", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "real_labels", "=", "real_label_basket", "[", "batch_counter", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "# sample fake images and labels from p(G(z), y)", "\n", "fake_images", ",", "fake_labels", ",", "fake_images_eps", ",", "trsp_cost", ",", "ws", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "-", "1.0", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "self", ".", "LOSS", ".", "radius", ",", "\n", "generator", "=", "self", ".", "Gen", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "True", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "generator_mapping", "=", "self", ".", "Gen_mapping", ",", "\n", "generator_synthesis", "=", "self", ".", "Gen_synthesis", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "style_mixing_p", "=", "self", ".", "cfgs", ".", "STYLEGAN", ".", "style_mixing_p", ",", "\n", "stylegan_update_emas", "=", "True", ",", "\n", "cal_trsp_cost", "=", "True", "if", "self", ".", "LOSS", ".", "apply_lo", "else", "False", ")", "\n", "\n", "# if LOSS.apply_r1_reg is True,", "\n", "# let real images require gradient calculation to compute \\derv_{x}Dis(x)", "\n", "if", "self", ".", "LOSS", ".", "apply_r1_reg", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                        ", "real_images", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# blur images for stylegan3-r", "\n", "", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", "and", "self", ".", "blur_init_sigma", "!=", "\"N/A\"", ":", "\n", "                        ", "blur_sigma", "=", "max", "(", "1", "-", "(", "self", ".", "effective_batch_size", "*", "current_step", ")", "/", "(", "self", ".", "blur_fade_kimg", "*", "1e3", ")", ",", "0", ")", "*", "self", ".", "blur_init_sigma", "\n", "blur_size", "=", "np", ".", "floor", "(", "blur_sigma", "*", "3", ")", "\n", "if", "blur_size", ">", "0", ":", "\n", "                            ", "f", "=", "torch", ".", "arange", "(", "-", "blur_size", ",", "blur_size", "+", "1", ",", "device", "=", "real_images", ".", "device", ")", ".", "div", "(", "blur_sigma", ")", ".", "square", "(", ")", ".", "neg", "(", ")", ".", "exp2", "(", ")", "\n", "real_images", "=", "upfirdn2d", ".", "filter2d", "(", "real_images", ",", "f", "/", "f", ".", "sum", "(", ")", ")", "\n", "fake_images", "=", "upfirdn2d", ".", "filter2d", "(", "fake_images", ",", "f", "/", "f", ".", "sum", "(", ")", ")", "\n", "\n", "", "", "if", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "                        ", "real_images", "=", "apa_aug", ".", "apply_apa_aug", "(", "real_images", ",", "fake_images", ".", "detach", "(", ")", ",", "self", ".", "aa_p", ",", "self", ".", "local_rank", ")", "\n", "\n", "# apply differentiable augmentations if \"apply_diffaug\" or \"apply_ada\" is True", "\n", "", "real_images_", "=", "self", ".", "AUG", ".", "series_augment", "(", "real_images", ")", "\n", "fake_images_", "=", "self", ".", "AUG", ".", "series_augment", "(", "fake_images", ")", "\n", "\n", "# calculate adv_output, embed, proxy, and cls_output using the discriminator", "\n", "real_dict", "=", "self", ".", "Dis", "(", "real_images_", ",", "real_labels", ")", "\n", "fake_dict", "=", "self", ".", "Dis", "(", "fake_images_", ",", "fake_labels", ",", "adc_fake", "=", "self", ".", "adc_fake", ")", "\n", "\n", "# accumulate discriminator output informations for logging", "\n", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "                        ", "self", ".", "dis_sign_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sign", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_sign_fake", "+=", "torch", ".", "tensor", "(", "(", "fake_dict", "[", "\"adv_output\"", "]", ".", "sign", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_fake", "+=", "torch", ".", "tensor", "(", "(", "fake_dict", "[", "\"adv_output\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "# calculate adversarial loss defined by \"LOSS.adv_loss\"", "\n", "", "if", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "                        ", "dis_acml_loss", "=", "self", ".", "LOSS", ".", "d_loss", "(", "DDP", "=", "self", ".", "DDP", ",", "**", "real_dict", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "d_loss", "(", "fake_dict", "[", "\"adv_output\"", "]", ",", "self", ".", "lossy", ",", "DDP", "=", "self", ".", "DDP", ")", "\n", "", "else", ":", "\n", "                        ", "dis_acml_loss", "=", "self", ".", "LOSS", ".", "d_loss", "(", "real_dict", "[", "\"adv_output\"", "]", ",", "fake_dict", "[", "\"adv_output\"", "]", ",", "DDP", "=", "self", ".", "DDP", ")", "\n", "\n", "# calculate class conditioning loss defined by \"MODEL.d_cond_mtd\"", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "self", ".", "MISC", ".", "classifier_based_GAN", ":", "\n", "                        ", "real_cond_loss", "=", "self", ".", "cond_loss", "(", "**", "real_dict", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "cond_lambda", "*", "real_cond_loss", "\n", "if", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                            ", "tac_dis_loss", "=", "self", ".", "cond_loss_mi", "(", "**", "fake_dict", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "tac_dis_lambda", "*", "tac_dis_loss", "\n", "", "elif", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                            ", "fake_cond_loss", "=", "self", ".", "cond_loss", "(", "**", "fake_dict", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "cond_lambda", "*", "fake_cond_loss", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "", "", "else", ":", "\n", "                        ", "real_cond_loss", "=", "\"N/A\"", "\n", "\n", "# add transport cost for latent optimization training", "\n", "", "if", "self", ".", "LOSS", ".", "apply_lo", ":", "\n", "                        ", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "lo_lambda", "*", "trsp_cost", "\n", "\n", "# if LOSS.apply_cr is True, force the adv. and cls. logits to be the same", "\n", "", "if", "self", ".", "LOSS", ".", "apply_cr", ":", "\n", "                        ", "real_prl_images", "=", "self", ".", "AUG", ".", "parallel_augment", "(", "real_images", ")", "\n", "real_prl_dict", "=", "self", ".", "Dis", "(", "real_prl_images", ",", "real_labels", ")", "\n", "real_consist_loss", "=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"adv_output\"", "]", ",", "real_prl_dict", "[", "\"adv_output\"", "]", ")", "\n", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                            ", "real_consist_loss", "+=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"cls_output\"", "]", ",", "real_prl_dict", "[", "\"cls_output\"", "]", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                            ", "real_consist_loss", "+=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"embed\"", "]", ",", "real_prl_dict", "[", "\"embed\"", "]", ")", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "cr_lambda", "*", "real_consist_loss", "\n", "\n", "# if LOSS.apply_bcr is True, apply balanced consistency regularization proposed in ICRGAN", "\n", "", "if", "self", ".", "LOSS", ".", "apply_bcr", ":", "\n", "                        ", "real_prl_images", "=", "self", ".", "AUG", ".", "parallel_augment", "(", "real_images", ")", "\n", "fake_prl_images", "=", "self", ".", "AUG", ".", "parallel_augment", "(", "fake_images", ")", "\n", "real_prl_dict", "=", "self", ".", "Dis", "(", "real_prl_images", ",", "real_labels", ")", "\n", "fake_prl_dict", "=", "self", ".", "Dis", "(", "fake_prl_images", ",", "fake_labels", ",", "adc_fake", "=", "self", ".", "adc_fake", ")", "\n", "real_bcr_loss", "=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"adv_output\"", "]", ",", "real_prl_dict", "[", "\"adv_output\"", "]", ")", "\n", "fake_bcr_loss", "=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"adv_output\"", "]", ",", "fake_prl_dict", "[", "\"adv_output\"", "]", ")", "\n", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                            ", "real_bcr_loss", "+=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"cls_output\"", "]", ",", "real_prl_dict", "[", "\"cls_output\"", "]", ")", "\n", "fake_bcr_loss", "+=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"cls_output\"", "]", ",", "fake_prl_dict", "[", "\"cls_output\"", "]", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                            ", "real_bcr_loss", "+=", "self", ".", "l2_loss", "(", "real_dict", "[", "\"embed\"", "]", ",", "real_prl_dict", "[", "\"embed\"", "]", ")", "\n", "fake_bcr_loss", "+=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"embed\"", "]", ",", "fake_prl_dict", "[", "\"embed\"", "]", ")", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "real_lambda", "*", "real_bcr_loss", "+", "self", ".", "LOSS", ".", "fake_lambda", "*", "fake_bcr_loss", "\n", "\n", "# if LOSS.apply_zcr is True, apply latent consistency regularization proposed in ICRGAN", "\n", "", "if", "self", ".", "LOSS", ".", "apply_zcr", ":", "\n", "                        ", "fake_eps_dict", "=", "self", ".", "Dis", "(", "fake_images_eps", ",", "fake_labels", ",", "adc_fake", "=", "self", ".", "adc_fake", ")", "\n", "fake_zcr_loss", "=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"adv_output\"", "]", ",", "fake_eps_dict", "[", "\"adv_output\"", "]", ")", "\n", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                            ", "fake_zcr_loss", "+=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"cls_output\"", "]", ",", "fake_eps_dict", "[", "\"cls_output\"", "]", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                            ", "fake_zcr_loss", "+=", "self", ".", "l2_loss", "(", "fake_dict", "[", "\"embed\"", "]", ",", "fake_eps_dict", "[", "\"embed\"", "]", ")", "\n", "", "else", ":", "\n", "                            ", "pass", "\n", "", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "d_lambda", "*", "fake_zcr_loss", "\n", "\n", "# apply gradient penalty regularization to train wasserstein GAN", "\n", "", "if", "self", ".", "LOSS", ".", "apply_gp", ":", "\n", "                        ", "gp_loss", "=", "losses", ".", "cal_grad_penalty", "(", "real_images", "=", "real_images", ",", "\n", "real_labels", "=", "real_labels", ",", "\n", "fake_images", "=", "fake_images", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "gp_lambda", "*", "gp_loss", "\n", "\n", "# apply deep regret analysis regularization to train wasserstein GAN", "\n", "", "if", "self", ".", "LOSS", ".", "apply_dra", ":", "\n", "                        ", "dra_loss", "=", "losses", ".", "cal_dra_penalty", "(", "real_images", "=", "real_images", ",", "\n", "real_labels", "=", "real_labels", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "dra_lambda", "*", "dra_loss", "\n", "\n", "# apply max gradient penalty regularization to train Lipschitz GAN", "\n", "", "if", "self", ".", "LOSS", ".", "apply_maxgp", ":", "\n", "                        ", "maxgp_loss", "=", "losses", ".", "cal_maxgrad_penalty", "(", "real_images", "=", "real_images", ",", "\n", "real_labels", "=", "real_labels", ",", "\n", "fake_images", "=", "fake_images", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "maxgp_lambda", "*", "maxgp_loss", "\n", "\n", "# apply LeCam reg. for data-efficient training if self.LOSS.apply_lecam is set to True", "\n", "", "if", "self", ".", "LOSS", ".", "apply_lecam", ":", "\n", "                        ", "if", "self", ".", "DDP", ":", "\n", "                            ", "real_adv_output", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "real_dict", "[", "\"adv_output\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "fake_adv_output", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "fake_dict", "[", "\"adv_output\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                            ", "real_adv_output", ",", "fake_adv_output", "=", "real_dict", "[", "\"adv_output\"", "]", ",", "fake_dict", "[", "\"adv_output\"", "]", "\n", "", "self", ".", "lecam_ema", ".", "update", "(", "torch", ".", "mean", "(", "real_adv_output", ")", ".", "item", "(", ")", ",", "\"D_real\"", ",", "current_step", ")", "\n", "self", ".", "lecam_ema", ".", "update", "(", "torch", ".", "mean", "(", "fake_adv_output", ")", ".", "item", "(", ")", ",", "\"D_fake\"", ",", "current_step", ")", "\n", "if", "current_step", ">", "self", ".", "LOSS", ".", "lecam_ema_start_iter", ":", "\n", "                            ", "lecam_loss", "=", "losses", ".", "lecam_reg", "(", "real_adv_output", ",", "fake_adv_output", ",", "self", ".", "lecam_ema", ")", "\n", "", "else", ":", "\n", "                            ", "lecam_loss", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "lecam_lambda", "*", "lecam_loss", "\n", "\n", "", "if", "self", ".", "LOSS", ".", "apply_r1_reg", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                        ", "self", ".", "r1_penalty", "=", "losses", ".", "cal_r1_reg", "(", "adv_output", "=", "real_dict", "[", "\"adv_output\"", "]", ",", "images", "=", "real_images", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "dis_acml_loss", "+=", "self", ".", "LOSS", ".", "r1_lambda", "*", "self", ".", "r1_penalty", "\n", "", "elif", "self", ".", "LOSS", ".", "apply_r1_reg", "and", "self", ".", "LOSS", ".", "r1_place", "==", "\"inside_loop\"", "and", "(", "self", ".", "OPTIMIZATION", ".", "d_updates_per_step", "*", "current_step", "+", "step_index", ")", "%", "self", ".", "STYLEGAN", ".", "d_reg_interval", "==", "0", ":", "\n", "                        ", "real_images", ".", "requires_grad_", "(", "True", ")", "\n", "real_dict", "=", "self", ".", "Dis", "(", "self", ".", "AUG", ".", "series_augment", "(", "real_images", ")", ",", "real_labels", ")", "\n", "self", ".", "r1_penalty", "=", "losses", ".", "stylegan_cal_r1_reg", "(", "adv_output", "=", "real_dict", "[", "\"adv_output\"", "]", ",", "\n", "images", "=", "real_images", ")", "\n", "dis_acml_loss", "+=", "self", ".", "STYLEGAN", ".", "d_reg_interval", "*", "self", ".", "LOSS", ".", "r1_lambda", "*", "self", ".", "r1_penalty", "\n", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "                            ", "self", ".", "dis_sign_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sign", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "# adjust gradients for applying gradient accumluation trick", "\n", "", "", "dis_acml_loss", "=", "dis_acml_loss", "/", "self", ".", "OPTIMIZATION", ".", "acml_steps", "\n", "batch_counter", "+=", "1", "\n", "\n", "# accumulate gradients of the discriminator", "\n", "", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                    ", "self", ".", "scaler", ".", "scale", "(", "dis_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "dis_acml_loss", ".", "backward", "(", ")", "\n", "\n", "# update the discriminator using the pre-defined optimizer", "\n", "", "", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                ", "self", ".", "scaler", ".", "step", "(", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "LOSS", ".", "apply_r1_reg", "and", "self", ".", "LOSS", ".", "r1_place", "==", "\"outside_loop\"", "and", "(", "self", ".", "OPTIMIZATION", ".", "d_updates_per_step", "*", "current_step", "+", "step_index", ")", "%", "self", ".", "STYLEGAN", ".", "d_reg_interval", "==", "0", ":", "\n", "                ", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "acml_steps", ")", ":", "\n", "                    ", "real_images", "=", "real_image_basket", "[", "batch_counter", "-", "acml_index", "-", "1", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "real_labels", "=", "real_label_basket", "[", "batch_counter", "-", "acml_index", "-", "1", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "# blur images for stylegan3-r", "\n", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", "and", "self", ".", "blur_init_sigma", "!=", "\"N/A\"", ":", "\n", "                        ", "blur_sigma", "=", "max", "(", "1", "-", "(", "self", ".", "effective_batch_size", "*", "current_step", ")", "/", "(", "self", ".", "blur_fade_kimg", "*", "1e3", ")", ",", "0", ")", "*", "self", ".", "blur_init_sigma", "\n", "blur_size", "=", "np", ".", "floor", "(", "blur_sigma", "*", "3", ")", "\n", "if", "blur_size", ">", "0", ":", "\n", "                            ", "f", "=", "torch", ".", "arange", "(", "-", "blur_size", ",", "blur_size", "+", "1", ",", "device", "=", "real_images", ".", "device", ")", ".", "div", "(", "blur_sigma", ")", ".", "square", "(", ")", ".", "neg", "(", ")", ".", "exp2", "(", ")", "\n", "real_images", "=", "upfirdn2d", ".", "filter2d", "(", "real_images", ",", "f", "/", "f", ".", "sum", "(", ")", ")", "\n", "", "", "if", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "                        ", "real_images", "=", "apa_aug", ".", "apply_apa_aug", "(", "real_images", ",", "fake_images", ".", "detach", "(", ")", ",", "self", ".", "aa_p", ",", "self", ".", "local_rank", ")", "\n", "", "real_images", ".", "requires_grad_", "(", "True", ")", "\n", "real_dict", "=", "self", ".", "Dis", "(", "self", ".", "AUG", ".", "series_augment", "(", "real_images", ")", ",", "real_labels", ")", "\n", "self", ".", "r1_penalty", "=", "losses", ".", "stylegan_cal_r1_reg", "(", "adv_output", "=", "real_dict", "[", "\"adv_output\"", "]", ",", "images", "=", "real_images", ")", "+", "misc", ".", "enable_allreduce", "(", "real_dict", ")", "\n", "self", ".", "r1_penalty", "*=", "self", ".", "STYLEGAN", ".", "d_reg_interval", "*", "self", ".", "LOSS", ".", "r1_lambda", "/", "self", ".", "OPTIMIZATION", ".", "acml_steps", "\n", "self", ".", "r1_penalty", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "                        ", "self", ".", "dis_sign_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sign", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_real", "+=", "torch", ".", "tensor", "(", "(", "real_dict", "[", "\"adv_output\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "", "", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "# apply ada heuristics", "\n", "", "if", "(", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ")", "and", "self", ".", "aa_target", "is", "not", "None", "and", "current_step", "%", "self", ".", "aa_interval", "==", "0", ":", "\n", "                ", "if", "self", ".", "DDP", ":", "dist", ".", "all_reduce", "(", "self", ".", "dis_sign_real", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "group", "=", "self", ".", "group", ")", "\n", "heuristic", "=", "(", "self", ".", "dis_sign_real", "[", "0", "]", "/", "self", ".", "dis_sign_real", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "adjust", "=", "np", ".", "sign", "(", "heuristic", "-", "self", ".", "aa_target", ")", "*", "(", "self", ".", "dis_sign_real", "[", "1", "]", ".", "item", "(", ")", ")", "/", "(", "self", ".", "aa_kimg", "*", "1000", ")", "\n", "self", ".", "aa_p", "=", "min", "(", "torch", ".", "as_tensor", "(", "1.", ")", ",", "max", "(", "self", ".", "aa_p", "+", "adjust", ",", "torch", ".", "as_tensor", "(", "0.", ")", ")", ")", "\n", "if", "self", ".", "AUG", ".", "apply_ada", ":", "self", ".", "AUG", ".", "series_augment", ".", "p", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "self", ".", "aa_p", ")", ")", "\n", "self", ".", "dis_sign_real_log", ".", "copy_", "(", "self", ".", "dis_sign_real", ")", ",", "self", ".", "dis_sign_fake_log", ".", "copy_", "(", "self", ".", "dis_sign_fake", ")", "\n", "self", ".", "dis_logit_real_log", ".", "copy_", "(", "self", ".", "dis_logit_real", ")", ",", "self", ".", "dis_logit_fake_log", ".", "copy_", "(", "self", ".", "dis_logit_fake", ")", "\n", "self", ".", "dis_sign_real", ".", "mul_", "(", "0", ")", ",", "self", ".", "dis_sign_fake", ".", "mul_", "(", "0", ")", "\n", "self", ".", "dis_logit_real", ".", "mul_", "(", "0", ")", ",", "self", ".", "dis_logit_fake", ".", "mul_", "(", "0", ")", "\n", "\n", "# clip weights to restrict the discriminator to satisfy 1-Lipschitz constraint", "\n", "", "if", "self", ".", "LOSS", ".", "apply_wc", ":", "\n", "                ", "for", "p", "in", "self", ".", "Dis", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "data", ".", "clamp_", "(", "-", "self", ".", "LOSS", ".", "wc_bound", ",", "self", ".", "LOSS", ".", "wc_bound", ")", "\n", "", "", "", "if", "self", ".", "RUN", ".", "empty_cache", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "return", "real_cond_loss", ",", "dis_acml_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_generator": [[497, 673], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "worker.WORKER.Gen.apply", "range", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "utils.toggle_grad", "worker.WORKER.OPTIMIZATION.g_optimizer.zero_grad", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "getattr", "getattr", "getattr", "worker.WORKER.scaler.step", "worker.WORKER.scaler.update", "worker.WORKER.OPTIMIZATION.g_optimizer.step", "worker.WORKER.OPTIMIZATION.g_optimizer.zero_grad", "range", "worker.WORKER.OPTIMIZATION.g_optimizer.step", "worker.WORKER.ema.update", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.AUG.series_augment", "worker.WORKER.Dis", "worker.WORKER.scaler.scale().backward", "worker.WORKER.backward", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.pl_reg_loss.backward", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "numpy.floor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "worker.WORKER.LOSS.g_loss", "worker.WORKER.cond_loss", "worker.WORKER.sample_data_basket", "real_image_basket[].to", "real_label_basket[].to", "worker.WORKER.AUG.series_augment", "worker.WORKER.Dis", "worker.WORKER.fm_loss", "range", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "utils.normal_nll_loss", "numpy.floor", "worker.WORKER.pl_reg.cal_pl_reg", "max", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "worker.WORKER.LOSS.g_loss", "real_dict[].detach", "worker.WORKER.l2_loss", "worker.WORKER.ce_loss", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "utils.enable_allreduce", "worker.WORKER.scaler.scale", "max", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "torch.arange().div().square().neg().exp2", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "utils.style_ops.upfirdn2d.filter2d", "fake_images[].mean", "fake_dict[].sign().sum().item", "fake_dict[].sum().item", "int", "worker.WORKER.cond_loss_mi", "worker.WORKER.Dis", "info_discrete_c[].squeeze", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "worker.WORKER.cond_loss", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "torch.arange().div().square().neg().exp2.sum", "fake_dict[].sign().sum", "fake_dict[].sum", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "torch.arange().div().square", "fake_dict[].sign", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange().div", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.sample_data_basket", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.PathLengthRegularizer.cal_pl_reg", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d"], ["", "def", "train_generator", "(", "self", ",", "current_step", ")", ":", "\n", "# make GAN be trainable before starting training", "\n", "        ", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "# toggle gradients of the generator and discriminator", "\n", "misc", ".", "toggle_grad", "(", "model", "=", "self", ".", "Dis", ",", "grad", "=", "False", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "self", ".", "is_stylegan", ")", "\n", "misc", ".", "toggle_grad", "(", "model", "=", "self", ".", "Gen", ",", "grad", "=", "True", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "self", ".", "is_stylegan", ")", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "0", "]", ")", ",", "grad", "=", "True", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "1", "]", ")", ",", "grad", "=", "True", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "misc", ".", "toggle_grad", "(", "getattr", "(", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ",", "self", ".", "MISC", ".", "info_params", "[", "2", "]", ")", ",", "grad", "=", "True", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", "\n", "", "self", ".", "Gen", ".", "apply", "(", "misc", ".", "track_bn_statistics", ")", "\n", "for", "step_index", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "g_updates_per_step", ")", ":", "\n", "            ", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_step", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "acml_steps", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "# sample fake images and labels from p(G(z), y)", "\n", "                    ", "fake_images", ",", "fake_labels", ",", "fake_images_eps", ",", "trsp_cost", ",", "ws", ",", "info_discrete_c", ",", "info_conti_c", "=", "sample", ".", "generate_images", "(", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "-", "1.0", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "self", ".", "LOSS", ".", "radius", ",", "\n", "generator", "=", "self", ".", "Gen", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "True", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "generator_mapping", "=", "self", ".", "Gen_mapping", ",", "\n", "generator_synthesis", "=", "self", ".", "Gen_synthesis", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "style_mixing_p", "=", "self", ".", "cfgs", ".", "STYLEGAN", ".", "style_mixing_p", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "True", "if", "self", ".", "LOSS", ".", "apply_lo", "else", "False", ")", "\n", "\n", "# blur images for stylegan3-r", "\n", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", "and", "self", ".", "blur_init_sigma", "!=", "\"N/A\"", ":", "\n", "                        ", "blur_sigma", "=", "max", "(", "1", "-", "(", "self", ".", "effective_batch_size", "*", "current_step", ")", "/", "(", "self", ".", "blur_fade_kimg", "*", "1e3", ")", ",", "0", ")", "*", "self", ".", "blur_init_sigma", "\n", "blur_size", "=", "np", ".", "floor", "(", "blur_sigma", "*", "3", ")", "\n", "if", "blur_size", ">", "0", ":", "\n", "                            ", "f", "=", "torch", ".", "arange", "(", "-", "blur_size", ",", "blur_size", "+", "1", ",", "device", "=", "fake_images", ".", "device", ")", ".", "div", "(", "blur_sigma", ")", ".", "square", "(", ")", ".", "neg", "(", ")", ".", "exp2", "(", ")", "\n", "fake_images", "=", "upfirdn2d", ".", "filter2d", "(", "fake_images", ",", "f", "/", "f", ".", "sum", "(", ")", ")", "\n", "\n", "# apply differentiable augmentations if \"apply_diffaug\" is True", "\n", "", "", "fake_images_", "=", "self", ".", "AUG", ".", "series_augment", "(", "fake_images", ")", "\n", "\n", "# calculate adv_output, embed, proxy, and cls_output using the discriminator", "\n", "fake_dict", "=", "self", ".", "Dis", "(", "fake_images_", ",", "fake_labels", ")", "\n", "\n", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "# accumulate discriminator output informations for logging", "\n", "                        ", "self", ".", "dis_sign_fake", "+=", "torch", ".", "tensor", "(", "(", "fake_dict", "[", "\"adv_output\"", "]", ".", "sign", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "self", ".", "dis_logit_fake", "+=", "torch", ".", "tensor", "(", "(", "fake_dict", "[", "\"adv_output\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\n", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "# apply top k sampling for discarding bottom 1-k samples which are 'in-between modes'", "\n", "", "if", "self", ".", "LOSS", ".", "apply_topk", ":", "\n", "                        ", "fake_dict", "[", "\"adv_output\"", "]", "=", "torch", ".", "topk", "(", "fake_dict", "[", "\"adv_output\"", "]", ",", "int", "(", "self", ".", "topk", ")", ")", ".", "values", "\n", "\n", "# calculate adversarial loss defined by \"LOSS.adv_loss\"", "\n", "", "if", "self", ".", "LOSS", ".", "adv_loss", "==", "\"MH\"", ":", "\n", "                        ", "gen_acml_loss", "=", "self", ".", "LOSS", ".", "mh_lambda", "*", "self", ".", "LOSS", ".", "g_loss", "(", "DDP", "=", "self", ".", "DDP", ",", "**", "fake_dict", ",", ")", "\n", "", "else", ":", "\n", "                        ", "gen_acml_loss", "=", "self", ".", "LOSS", ".", "g_loss", "(", "fake_dict", "[", "\"adv_output\"", "]", ",", "DDP", "=", "self", ".", "DDP", ")", "\n", "\n", "# calculate class conditioning loss defined by \"MODEL.d_cond_mtd\"", "\n", "", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "self", ".", "MISC", ".", "classifier_based_GAN", ":", "\n", "                        ", "fake_cond_loss", "=", "self", ".", "cond_loss", "(", "**", "fake_dict", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "cond_lambda", "*", "fake_cond_loss", "\n", "if", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                            ", "tac_gen_loss", "=", "-", "self", ".", "cond_loss_mi", "(", "**", "fake_dict", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "tac_gen_lambda", "*", "tac_gen_loss", "\n", "", "elif", "self", ".", "MODEL", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                            ", "adc_fake_dict", "=", "self", ".", "Dis", "(", "fake_images_", ",", "fake_labels", ",", "adc_fake", "=", "self", ".", "adc_fake", ")", "\n", "adc_fake_cond_loss", "=", "-", "self", ".", "cond_loss", "(", "**", "adc_fake_dict", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "cond_lambda", "*", "adc_fake_cond_loss", "\n", "", "pass", "\n", "\n", "# apply feature matching regularization to stabilize adversarial dynamics", "\n", "", "if", "self", ".", "LOSS", ".", "apply_fm", ":", "\n", "                        ", "real_image_basket", ",", "real_label_basket", "=", "self", ".", "sample_data_basket", "(", ")", "\n", "real_images", "=", "real_image_basket", "[", "0", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "real_labels", "=", "real_label_basket", "[", "0", "]", ".", "to", "(", "self", ".", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "real_images_", "=", "self", ".", "AUG", ".", "series_augment", "(", "real_images", ")", "\n", "real_dict", "=", "self", ".", "Dis", "(", "real_images_", ",", "real_labels", ")", "\n", "\n", "mean_match_loss", "=", "self", ".", "fm_loss", "(", "real_dict", "[", "\"h\"", "]", ".", "detach", "(", ")", ",", "fake_dict", "[", "\"h\"", "]", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "fm_lambda", "*", "mean_match_loss", "\n", "\n", "# add transport cost for latent optimization training", "\n", "", "if", "self", ".", "LOSS", ".", "apply_lo", ":", "\n", "                        ", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "lo_lambda", "*", "trsp_cost", "\n", "\n", "# apply latent consistency regularization for generating diverse images", "\n", "", "if", "self", ".", "LOSS", ".", "apply_zcr", ":", "\n", "                        ", "fake_zcr_loss", "=", "-", "1", "*", "self", ".", "l2_loss", "(", "fake_images", ",", "fake_images_eps", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "g_lambda", "*", "fake_zcr_loss", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                        ", "dim", "=", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_loss", "=", "0.0", "\n", "for", "info_c", "in", "range", "(", "self", ".", "MODEL", ".", "info_num_discrete_c", ")", ":", "\n", "                            ", "self", ".", "info_discrete_loss", "+=", "self", ".", "ce_loss", "(", "\n", "fake_dict", "[", "\"info_discrete_c_logits\"", "]", "[", ":", ",", "info_c", "*", "dim", ":", "dim", "*", "(", "info_c", "+", "1", ")", "]", ",", "\n", "info_discrete_c", "[", ":", ",", "info_c", ":", "info_c", "+", "1", "]", ".", "squeeze", "(", ")", ")", "\n", "", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "infoGAN_loss_discrete_lambda", "*", "self", ".", "info_discrete_loss", "+", "misc", ".", "enable_allreduce", "(", "fake_dict", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                        ", "self", ".", "info_conti_loss", "=", "losses", ".", "normal_nll_loss", "(", "info_conti_c", ",", "fake_dict", "[", "\"info_conti_mu\"", "]", ",", "fake_dict", "[", "\"info_conti_var\"", "]", ")", "\n", "gen_acml_loss", "+=", "self", ".", "LOSS", ".", "infoGAN_loss_conti_lambda", "*", "self", ".", "info_conti_loss", "+", "misc", ".", "enable_allreduce", "(", "fake_dict", ")", "\n", "\n", "# adjust gradients for applying gradient accumluation trick", "\n", "", "gen_acml_loss", "=", "gen_acml_loss", "/", "self", ".", "OPTIMIZATION", ".", "acml_steps", "\n", "\n", "# accumulate gradients of the generator", "\n", "", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                    ", "self", ".", "scaler", ".", "scale", "(", "gen_acml_loss", ")", ".", "backward", "(", ")", "\n", "", "else", ":", "\n", "                    ", "gen_acml_loss", ".", "backward", "(", ")", "\n", "\n", "# update the generator using the pre-defined optimizer", "\n", "", "", "if", "self", ".", "RUN", ".", "mixed_precision", "and", "not", "self", ".", "is_stylegan", ":", "\n", "                ", "self", ".", "scaler", ".", "step", "(", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ".", "step", "(", ")", "\n", "\n", "# apply path length regularization", "\n", "", "if", "self", ".", "STYLEGAN", ".", "apply_pl_reg", "and", "(", "self", ".", "OPTIMIZATION", ".", "g_updates_per_step", "*", "current_step", "+", "step_index", ")", "%", "self", ".", "STYLEGAN", ".", "g_reg_interval", "==", "0", ":", "\n", "                ", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "acml_index", "in", "range", "(", "self", ".", "OPTIMIZATION", ".", "acml_steps", ")", ":", "\n", "                    ", "fake_images", ",", "fake_labels", ",", "fake_images_eps", ",", "trsp_cost", ",", "ws", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "-", "1.0", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", "//", "2", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "self", ".", "LOSS", ".", "radius", ",", "\n", "generator", "=", "self", ".", "Gen", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "True", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "generator_mapping", "=", "self", ".", "Gen_mapping", ",", "\n", "generator_synthesis", "=", "self", ".", "Gen_synthesis", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "style_mixing_p", "=", "self", ".", "cfgs", ".", "STYLEGAN", ".", "style_mixing_p", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "True", "if", "self", ".", "LOSS", ".", "apply_lo", "else", "False", ")", "\n", "# blur images for stylegan3-r", "\n", "if", "self", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "self", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", "and", "self", ".", "blur_init_sigma", "!=", "\"N/A\"", ":", "\n", "                        ", "blur_sigma", "=", "max", "(", "1", "-", "(", "self", ".", "effective_batch_size", "*", "current_step", ")", "/", "(", "self", ".", "blur_fade_kimg", "*", "1e3", ")", ",", "0", ")", "*", "self", ".", "blur_init_sigma", "\n", "blur_size", "=", "np", ".", "floor", "(", "blur_sigma", "*", "3", ")", "\n", "if", "blur_size", ">", "0", ":", "\n", "                            ", "f", "=", "torch", ".", "arange", "(", "-", "blur_size", ",", "blur_size", "+", "1", ",", "device", "=", "fake_images", ".", "device", ")", ".", "div", "(", "blur_sigma", ")", ".", "square", "(", ")", ".", "neg", "(", ")", ".", "exp2", "(", ")", "\n", "fake_images", "=", "upfirdn2d", ".", "filter2d", "(", "fake_images", ",", "f", "/", "f", ".", "sum", "(", ")", ")", "\n", "", "", "self", ".", "pl_reg_loss", "=", "self", ".", "pl_reg", ".", "cal_pl_reg", "(", "fake_images", "=", "fake_images", ",", "ws", "=", "ws", ")", "+", "fake_images", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "mean", "(", ")", "*", "0", "\n", "self", ".", "pl_reg_loss", "*=", "self", ".", "STYLEGAN", ".", "g_reg_interval", "/", "self", ".", "OPTIMIZATION", ".", "acml_steps", "\n", "self", ".", "pl_reg_loss", ".", "backward", "(", ")", "\n", "", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ".", "step", "(", ")", "\n", "\n", "# if ema is True: update parameters of the Gen_ema in adaptive way", "\n", "", "if", "self", ".", "MODEL", ".", "apply_g_ema", ":", "\n", "                ", "self", ".", "ema", ".", "update", "(", "current_step", ")", "\n", "", "", "if", "self", ".", "RUN", ".", "empty_cache", ":", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "return", "gen_acml_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.log_train_statistics": [[677, 745], ["LOG_FORMAT.format", "worker.WORKER.logger.info", "wandb.log", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "real_cond_loss.item", "gen_acml_loss.item", "dis_acml_loss.item", "wandb.log", "wandb.log", "worker.WORKER.info_discrete_loss.item", "worker.WORKER.info_conti_loss.item", "wandb.log", "wandb.log", "wandb.log", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "wandb.log", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "utils.calculate_all_sn", "wandb.log", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "utils.elapsed_time", "gen_acml_loss.item", "dis_acml_loss.item", "os.path.join", "int", "worker.WORKER.aa_p.item", "worker.WORKER.r1_penalty.item", "worker.WORKER.pl_reg_loss.item"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time"], ["", "def", "log_train_statistics", "(", "self", ",", "current_step", ",", "real_cond_loss", ",", "gen_acml_loss", ",", "dis_acml_loss", ")", ":", "\n", "        ", "self", ".", "wandb_step", "=", "current_step", "+", "1", "\n", "if", "self", ".", "MODEL", ".", "d_cond_mtd", "in", "self", ".", "MISC", ".", "classifier_based_GAN", ":", "\n", "            ", "cls_loss", "=", "real_cond_loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "cls_loss", "=", "\"N/A\"", "\n", "\n", "", "log_message", "=", "LOG_FORMAT", ".", "format", "(", "\n", "step", "=", "current_step", "+", "1", ",", "\n", "progress", "=", "(", "current_step", "+", "1", ")", "/", "self", ".", "OPTIMIZATION", ".", "total_steps", ",", "\n", "elapsed", "=", "misc", ".", "elapsed_time", "(", "self", ".", "start_time", ")", ",", "\n", "gen_loss", "=", "gen_acml_loss", ".", "item", "(", ")", ",", "\n", "dis_loss", "=", "dis_acml_loss", ".", "item", "(", ")", ",", "\n", "cls_loss", "=", "cls_loss", ",", "\n", "topk", "=", "int", "(", "self", ".", "topk", ")", "if", "self", ".", "LOSS", ".", "apply_topk", "else", "\"N/A\"", ",", "\n", "aa_p", "=", "self", ".", "aa_p", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", "else", "\"N/A\"", ",", "\n", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_message", ")", "\n", "\n", "# save loss values in wandb event file and .npz format", "\n", "loss_dict", "=", "{", "\n", "\"gen_loss\"", ":", "gen_acml_loss", ".", "item", "(", ")", ",", "\n", "\"dis_loss\"", ":", "dis_acml_loss", ".", "item", "(", ")", ",", "\n", "\"cls_loss\"", ":", "0.0", "if", "cls_loss", "==", "\"N/A\"", "else", "cls_loss", ",", "\n", "}", "\n", "\n", "wandb", ".", "log", "(", "loss_dict", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "save_dict", "=", "misc", ".", "accm_values_convert_dict", "(", "list_dict", "=", "self", ".", "loss_list_dict", ",", "\n", "value_dict", "=", "loss_dict", ",", "\n", "step", "=", "current_step", "+", "1", ",", "\n", "interval", "=", "self", ".", "RUN", ".", "print_freq", ")", "\n", "misc", ".", "save_dict_npy", "(", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"statistics\"", ",", "self", ".", "run_name", ")", ",", "\n", "name", "=", "\"losses\"", ",", "\n", "dictionary", "=", "save_dict", ")", "\n", "\n", "if", "self", ".", "AUG", ".", "apply_ada", "or", "self", ".", "AUG", ".", "apply_apa", ":", "\n", "            ", "dis_output_dict", "=", "{", "\n", "\"dis_sign_real\"", ":", "(", "self", ".", "dis_sign_real_log", "[", "0", "]", "/", "self", ".", "dis_sign_real_log", "[", "1", "]", ")", ".", "item", "(", ")", ",", "\n", "\"dis_sign_fake\"", ":", "(", "self", ".", "dis_sign_fake_log", "[", "0", "]", "/", "self", ".", "dis_sign_fake_log", "[", "1", "]", ")", ".", "item", "(", ")", ",", "\n", "\"dis_logit_real\"", ":", "(", "self", ".", "dis_logit_real_log", "[", "0", "]", "/", "self", ".", "dis_logit_real_log", "[", "1", "]", ")", ".", "item", "(", ")", ",", "\n", "\"dis_logit_fake\"", ":", "(", "self", ".", "dis_logit_fake_log", "[", "0", "]", "/", "self", ".", "dis_logit_fake_log", "[", "1", "]", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "wandb", ".", "log", "(", "dis_output_dict", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "wandb", ".", "log", "(", "{", "\"aa_p\"", ":", "self", ".", "aa_p", ".", "item", "(", ")", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "infoGAN_dict", "=", "{", "}", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "infoGAN_dict", "[", "\"info_discrete_loss\"", "]", "=", "self", ".", "info_discrete_loss", ".", "item", "(", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "infoGAN_dict", "[", "\"info_conti_loss\"", "]", "=", "self", ".", "info_conti_loss", ".", "item", "(", ")", "\n", "wandb", ".", "log", "(", "infoGAN_dict", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "if", "self", ".", "LOSS", ".", "apply_r1_reg", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"r1_reg_loss\"", ":", "self", ".", "r1_penalty", ".", "item", "(", ")", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "if", "self", ".", "STYLEGAN", ".", "apply_pl_reg", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"pl_reg_loss\"", ":", "self", ".", "pl_reg_loss", ".", "item", "(", ")", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "# calculate the spectral norms of all weights in the generator for monitoring purpose", "\n", "", "if", "self", ".", "MODEL", ".", "apply_g_sn", ":", "\n", "            ", "gen_sigmas", "=", "misc", ".", "calculate_all_sn", "(", "self", ".", "Gen", ",", "prefix", "=", "\"Gen\"", ")", "\n", "wandb", ".", "log", "(", "gen_sigmas", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "# calculate the spectral norms of all weights in the discriminator for monitoring purpose", "\n", "", "if", "self", ".", "MODEL", ".", "apply_d_sn", ":", "\n", "            ", "dis_sigmas", "=", "misc", ".", "calculate_all_sn", "(", "self", ".", "Dis", ",", "prefix", "=", "\"Dis\"", ")", "\n", "wandb", ".", "log", "(", "dis_sigmas", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.visualize_fake_images": [[749, 792], ["utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "wandb.log", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "fake_images.detach().cpu", "os.path.join", "wandb.Image", "fake_images.detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "", "def", "visualize_fake_images", "(", "self", ",", "num_cols", ",", "current_step", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Visualize (num_rows x 8) fake image canvans.\"", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "self", ".", "sampler", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "\n", "", "misc", ".", "plot_img_canvas", "(", "images", "=", "fake_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "save_path", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\n", "\"figures/{run_name}/generated_canvas_{step}.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ",", "step", "=", "current_step", ")", ")", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ")", "\n", "\n", "if", "self", ".", "RUN", ".", "train", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"generated_images\"", ":", "wandb", ".", "Image", "(", "fake_images", ")", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.evaluate": [[796, 929], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "worker.WORKER.logger.info", "metrics.eval_features", "metrics.eval_features", "metrics.eval_features", "metrics.eval_features", "metrics.eval_features", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_pr_dc", "metrics.calculate_pr_dc", "metrics.calculate_pr_dc", "metrics.calculate_pr_dc", "metrics.calculate_pr_dc", "worker.WORKER.logger.info", "metric_dict.update", "worker.WORKER.logger.info", "metric_dict.update", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "metric_dict.update", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "wandb.log", "wandb.log", "worker.WORKER.logger.info", "wandb.log", "wandb.log", "wandb.log", "wandb.log", "open", "pickle.dump", "len", "wandb.log", "wandb.log", "os.path.join", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy"], ["", "def", "evaluate", "(", "self", ",", "step", ",", "metrics", ",", "writing", "=", "True", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Start Evaluation ({step} Step): {run_name}\"", ".", "format", "(", "step", "=", "step", ",", "run_name", "=", "self", ".", "run_name", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "is_best", ",", "num_splits", ",", "nearest_k", "=", "False", ",", "1", ",", "5", "\n", "is_acc", "=", "True", "if", "\"ImageNet\"", "in", "self", ".", "DATA", ".", "name", "and", "\"Tiny\"", "not", "in", "self", ".", "DATA", ".", "name", "else", "False", "\n", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "metric_dict", "=", "{", "}", "\n", "\n", "fake_feats", ",", "fake_probs", ",", "fake_labels", "=", "features", ".", "generate_images_and_stack_features", "(", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "quantize", "=", "True", ",", "\n", "world_size", "=", "self", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "self", ".", "DDP", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "disable_tqdm", "=", "self", ".", "global_rank", "!=", "0", ")", "\n", "\n", "if", "(", "\"fid\"", "in", "metrics", "or", "\"prdc\"", "in", "metrics", ")", "and", "self", ".", "global_rank", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"{num_images} real images is used for evaluation.\"", ".", "format", "(", "num_images", "=", "len", "(", "self", ".", "eval_dataloader", ".", "dataset", ")", ")", ")", "\n", "\n", "", "if", "\"is\"", "in", "metrics", ":", "\n", "                ", "kl_score", ",", "kl_std", ",", "top1", ",", "top5", "=", "ins", ".", "eval_features", "(", "probs", "=", "fake_probs", ",", "\n", "labels", "=", "fake_labels", ",", "\n", "data_loader", "=", "self", ".", "eval_dataloader", ",", "\n", "num_features", "=", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ",", "\n", "split", "=", "num_splits", ",", "\n", "is_acc", "=", "is_acc", ",", "\n", "is_torch_backbone", "=", "True", "if", "\"torch\"", "in", "self", ".", "RUN", ".", "eval_backbone", "else", "False", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Inception score (Step: {step}, {num} generated images): {IS}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ")", ",", "IS", "=", "kl_score", ")", ")", "\n", "if", "is_acc", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "\"{eval_model} Top1 acc: (Step: {step}, {num} generated images): {Top1}\"", ".", "format", "(", "\n", "eval_model", "=", "self", ".", "RUN", ".", "eval_backbone", ",", "step", "=", "step", ",", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ")", ",", "Top1", "=", "top1", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"{eval_model} Top5 acc: (Step: {step}, {num} generated images): {Top5}\"", ".", "format", "(", "\n", "eval_model", "=", "self", ".", "RUN", ".", "eval_backbone", ",", "step", "=", "step", ",", "num", "=", "str", "(", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ")", ",", "Top5", "=", "top5", ")", ")", "\n", "", "metric_dict", ".", "update", "(", "{", "\"IS\"", ":", "kl_score", ",", "\"Top1_acc\"", ":", "top1", ",", "\"Top5_acc\"", ":", "top5", "}", ")", "\n", "if", "writing", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "\"IS score\"", ":", "kl_score", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "if", "is_acc", ":", "\n", "                            ", "wandb", ".", "log", "(", "{", "\"{eval_model} Top1 acc\"", ".", "format", "(", "eval_model", "=", "self", ".", "RUN", ".", "eval_backbone", ")", ":", "top1", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "wandb", ".", "log", "(", "{", "\"{eval_model} Top5 acc\"", ".", "format", "(", "eval_model", "=", "self", ".", "RUN", ".", "eval_backbone", ")", ":", "top5", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "", "", "", "if", "\"fid\"", "in", "metrics", ":", "\n", "                ", "fid_score", ",", "m1", ",", "c1", "=", "fid", ".", "calculate_fid", "(", "data_loader", "=", "self", ".", "eval_dataloader", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ",", "\n", "cfgs", "=", "self", ".", "cfgs", ",", "\n", "pre_cal_mean", "=", "self", ".", "mu", ",", "\n", "pre_cal_std", "=", "self", ".", "sigma", ",", "\n", "fake_feats", "=", "fake_feats", ",", "\n", "disable_tqdm", "=", "self", ".", "global_rank", "!=", "0", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"FID score (Step: {step}, Using {type} moments): {FID}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "FID", "=", "fid_score", ")", ")", "\n", "if", "self", ".", "best_fid", "is", "None", "or", "fid_score", "<=", "self", ".", "best_fid", ":", "\n", "                        ", "self", ".", "best_fid", ",", "self", ".", "best_step", ",", "is_best", "=", "fid_score", ",", "step", ",", "True", "\n", "", "metric_dict", ".", "update", "(", "{", "\"FID\"", ":", "fid_score", "}", ")", "\n", "if", "writing", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "\"FID score\"", ":", "fid_score", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "", "if", "training", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "\"Best FID score (Step: {step}, Using {type} moments): {FID}\"", ".", "format", "(", "\n", "step", "=", "self", ".", "best_step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "FID", "=", "self", ".", "best_fid", ")", ")", "\n", "\n", "", "", "", "if", "\"prdc\"", "in", "metrics", ":", "\n", "                ", "prc", ",", "rec", ",", "dns", ",", "cvg", "=", "prdc", ".", "calculate_pr_dc", "(", "real_feats", "=", "self", ".", "real_feats", ",", "\n", "fake_feats", "=", "fake_feats", ",", "\n", "data_loader", "=", "self", ".", "eval_dataloader", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ",", "\n", "cfgs", "=", "self", ".", "cfgs", ",", "\n", "quantize", "=", "True", ",", "\n", "nearest_k", "=", "nearest_k", ",", "\n", "world_size", "=", "self", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "self", ".", "DDP", ",", "\n", "disable_tqdm", "=", "True", ")", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Improved Precision (Step: {step}, Using {type} images): {prc}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "prc", "=", "prc", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Improved Recall (Step: {step}, Using {type} images): {rec}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "rec", "=", "rec", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Density (Step: {step}, Using {type} images): {dns}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "dns", "=", "dns", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Coverage (Step: {step}, Using {type} images): {cvg}\"", ".", "format", "(", "\n", "step", "=", "step", ",", "type", "=", "self", ".", "RUN", ".", "ref_dataset", ",", "cvg", "=", "cvg", ")", ")", "\n", "metric_dict", ".", "update", "(", "{", "\"Improved_Precision\"", ":", "prc", ",", "\"Improved_Recall\"", ":", "rec", ",", "\"Density\"", ":", "dns", ",", "\"Coverage\"", ":", "cvg", "}", ")", "\n", "if", "writing", ":", "\n", "                        ", "wandb", ".", "log", "(", "{", "\"Improved Precision\"", ":", "prc", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "wandb", ".", "log", "(", "{", "\"Improved Recall\"", ":", "rec", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "wandb", ".", "log", "(", "{", "\"Density\"", ":", "dns", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "wandb", ".", "log", "(", "{", "\"Coverage\"", ":", "cvg", "}", ",", "step", "=", "self", ".", "wandb_step", ")", "\n", "\n", "", "", "", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "                ", "if", "training", ":", "\n", "                    ", "save_dict", "=", "misc", ".", "accm_values_convert_dict", "(", "list_dict", "=", "self", ".", "metric_dict_during_train", ",", "\n", "value_dict", "=", "metric_dict", ",", "\n", "step", "=", "step", ",", "\n", "interval", "=", "self", ".", "RUN", ".", "save_freq", ")", "\n", "", "else", ":", "\n", "                    ", "save_dict", "=", "misc", ".", "accm_values_convert_dict", "(", "list_dict", "=", "self", ".", "metric_dict_during_final_eval", ",", "\n", "value_dict", "=", "metric_dict", ",", "\n", "step", "=", "None", ",", "\n", "interval", "=", "None", ")", "\n", "\n", "misc", ".", "save_dict_npy", "(", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"statistics\"", ",", "self", ".", "run_name", ",", "\"train\"", "if", "training", "else", "\"eval\"", ")", ",", "\n", "name", "=", "\"metrics\"", ",", "\n", "dictionary", "=", "save_dict", ")", "\n", "with", "open", "(", "\"./eval_pickles/\"", "+", "self", ".", "run_name", "+", "\"-\"", "+", "self", ".", "RUN", ".", "eval_backbone", "+", "\"-\"", "+", "self", ".", "RUN", ".", "ref_dataset", "+", "\".pickle\"", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "metric_dict", ",", "f", ")", "\n", "\n", "", "", "", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "return", "is_best", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save": [[933, 977], ["utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.peel_models", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "Gen.state_dict", "worker.WORKER.OPTIMIZATION.g_optimizer.state_dict", "Dis.state_dict", "worker.WORKER.OPTIMIZATION.d_optimizer.state_dict", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "worker.WORKER.logger.info", "Gen_ema.state_dict", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model", "utils.save_model"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model"], ["", "def", "save", "(", "self", ",", "step", ",", "is_best", ")", ":", "\n", "        ", "when", "=", "\"best\"", "if", "is_best", "is", "True", "else", "\"current\"", "\n", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "Gen", ",", "Gen_ema", ",", "Dis", "=", "misc", ".", "peel_models", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n", "g_states", "=", "{", "\"state_dict\"", ":", "Gen", ".", "state_dict", "(", ")", ",", "\"optimizer\"", ":", "self", ".", "OPTIMIZATION", ".", "g_optimizer", ".", "state_dict", "(", ")", "}", "\n", "\n", "d_states", "=", "{", "\n", "\"state_dict\"", ":", "Dis", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "self", ".", "OPTIMIZATION", ".", "d_optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"seed\"", ":", "self", ".", "RUN", ".", "seed", ",", "\n", "\"run_name\"", ":", "self", ".", "run_name", ",", "\n", "\"step\"", ":", "step", ",", "\n", "\"epoch\"", ":", "self", ".", "epoch_counter", ",", "\n", "\"topk\"", ":", "self", ".", "topk", ",", "\n", "\"aa_p\"", ":", "self", ".", "aa_p", ",", "\n", "\"best_step\"", ":", "self", ".", "best_step", ",", "\n", "\"best_fid\"", ":", "self", ".", "best_fid", ",", "\n", "\"best_fid_ckpt\"", ":", "self", ".", "RUN", ".", "ckpt_dir", ",", "\n", "\"lecam_emas\"", ":", "self", ".", "lecam_ema", ".", "__dict__", ",", "\n", "}", "\n", "\n", "if", "self", ".", "Gen_ema", "is", "not", "None", ":", "\n", "            ", "g_ema_states", "=", "{", "\"state_dict\"", ":", "Gen_ema", ".", "state_dict", "(", ")", "}", "\n", "\n", "", "misc", ".", "save_model", "(", "model", "=", "\"G\"", ",", "when", "=", "when", ",", "step", "=", "step", ",", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "states", "=", "g_states", ")", "\n", "misc", ".", "save_model", "(", "model", "=", "\"D\"", ",", "when", "=", "when", ",", "step", "=", "step", ",", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "states", "=", "d_states", ")", "\n", "if", "self", ".", "Gen_ema", "is", "not", "None", ":", "\n", "            ", "misc", ".", "save_model", "(", "model", "=", "\"G_ema\"", ",", "when", "=", "when", ",", "step", "=", "step", ",", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "states", "=", "g_ema_states", ")", "\n", "\n", "", "if", "when", "==", "\"best\"", ":", "\n", "            ", "misc", ".", "save_model", "(", "model", "=", "\"G\"", ",", "when", "=", "\"current\"", ",", "step", "=", "step", ",", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "states", "=", "g_states", ")", "\n", "misc", ".", "save_model", "(", "model", "=", "\"D\"", ",", "when", "=", "\"current\"", ",", "step", "=", "step", ",", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "states", "=", "d_states", ")", "\n", "if", "self", ".", "Gen_ema", "is", "not", "None", ":", "\n", "                ", "misc", ".", "save_model", "(", "model", "=", "\"G_ema\"", ",", "\n", "when", "=", "\"current\"", ",", "\n", "step", "=", "step", ",", "\n", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "\n", "states", "=", "g_ema_states", ")", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "self", ".", "RUN", ".", "ckpt_dir", ")", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save_real_images": [[981, 1006], ["utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "worker.WORKER.logger.info", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png"], ["", "def", "save_real_images", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"save {num_images} real images in png format.\"", ".", "format", "(", "\n", "num_images", "=", "len", "(", "self", ".", "eval_dataloader", ".", "dataset", ")", ")", ")", "\n", "\n", "", "misc", ".", "save_images_png", "(", "data_loader", "=", "self", ".", "eval_dataloader", ",", "\n", "generator", "=", "\"N/A\"", ",", "\n", "discriminator", "=", "\"N/A\"", ",", "\n", "is_generate", "=", "False", ",", "\n", "num_images", "=", "len", "(", "self", ".", "eval_dataloader", ".", "dataset", ")", ",", "\n", "y_sampler", "=", "\"N/A\"", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_prior", "=", "\"N/A\"", ",", "\n", "truncation_factor", "=", "\"N/A\"", ",", "\n", "z_dim", "=", "\"N/A\"", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "OPTIMIZATION", "=", "self", ".", "OPTIMIZATION", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "is_stylegan", "=", "False", ",", "\n", "generator_mapping", "=", "\"N/A\"", ",", "\n", "generator_synthesis", "=", "\"N/A\"", ",", "\n", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"samples\"", ",", "self", ".", "run_name", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save_fake_images": [[1010, 1043], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "utils.save_images_png", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png"], ["", "def", "save_fake_images", "(", "self", ",", "num_images", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"save {num_images} generated images in png format.\"", ".", "format", "(", "num_images", "=", "self", ".", "num_eval", "[", "self", ".", "RUN", ".", "ref_dataset", "]", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "misc", ".", "save_images_png", "(", "data_loader", "=", "self", ".", "eval_dataloader", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_generate", "=", "True", ",", "\n", "num_images", "=", "num_images", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "OPTIMIZATION", "=", "self", ".", "OPTIMIZATION", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"samples\"", ",", "self", ".", "run_name", ")", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_k_nearest_neighbor": [[1047, 1139], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "torchvision.transforms.ToTensor", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.Sequential().to", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "tqdm.tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "range", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "range", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "next", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.resize_images", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "numpy.concatenate", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "utils.resize_images.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "numpy.concatenate", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.resize_images.detach().cpu().numpy", "list", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "utils.resize_images.detach().cpu", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "torch.square().mean().detach().cpu().numpy", "utils.resize_images.detach().cpu().numpy", "utils.resize_images.detach().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.path.join", "utils.resize_images.detach().cpu().numpy", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "torch.hub.load.children", "utils.resize_images.detach().cpu", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "utils.resize_images.detach", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "torch.square().mean().detach().cpu", "utils.resize_images.detach().cpu", "utils.resize_images.detach().cpu", "utils.resize_images.detach().cpu", "utils.resize_images.detach", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "torch.square().mean().detach", "utils.resize_images.detach", "utils.resize_images.detach", "utils.resize_images.detach", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square().mean", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas"], ["", "def", "run_k_nearest_neighbor", "(", "self", ",", "dataset", ",", "num_rows", ",", "num_cols", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Run K-nearest neighbor analysis using fake and {ref} dataset.\"", ".", "format", "(", "ref", "=", "self", ".", "RUN", ".", "ref_dataset", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "res", ",", "mean", ",", "std", "=", "224", ",", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "resizer", "=", "resize", ".", "build_resizer", "(", "resizer", "=", "self", ".", "RUN", ".", "post_resizer", ",", "\n", "backbone", "=", "\"ResNet50_torch\"", ",", "\n", "size", "=", "res", ")", "\n", "totensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "std", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "resnet50_model", "=", "torch", ".", "hub", ".", "load", "(", "\"pytorch/vision:v0.6.0\"", ",", "\"resnet50\"", ",", "pretrained", "=", "True", ")", "\n", "resnet50_conv", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "if", "self", ".", "OPTIMIZATION", ".", "world_size", ">", "1", ":", "\n", "                ", "resnet50_conv", "=", "DataParallel", "(", "resnet50_conv", ",", "output_device", "=", "self", ".", "local_rank", ")", "\n", "", "resnet50_conv", ".", "eval", "(", ")", "\n", "\n", "for", "c", "in", "tqdm", "(", "range", "(", "self", ".", "DATA", ".", "num_classes", ")", ")", ":", "\n", "                ", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "c", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "fake_anchor", "=", "torch", ".", "unsqueeze", "(", "fake_images", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "fake_anchor", "=", "ops", ".", "quantize_images", "(", "fake_anchor", ")", "\n", "fake_anchor", "=", "ops", ".", "resize_images", "(", "fake_anchor", ",", "resizer", ",", "totensor", ",", "mean", ",", "std", ",", "self", ".", "local_rank", ")", "\n", "fake_anchor_embed", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "fake_anchor", ")", ")", "\n", "\n", "num_samples", ",", "target_sampler", "=", "sample", ".", "make_target_cls_sampler", "(", "dataset", "=", "dataset", ",", "target_class", "=", "c", ")", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", "if", "num_samples", ">=", "self", ".", "OPTIMIZATION", ".", "batch_size", "else", "num_samples", "\n", "c_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "target_sampler", ",", "\n", "num_workers", "=", "self", ".", "RUN", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "c_iter", "=", "iter", "(", "c_dataloader", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_samples", "//", "batch_size", ")", ":", "\n", "                    ", "real_images", ",", "real_labels", "=", "next", "(", "c_iter", ")", "\n", "real_images", "=", "ops", ".", "quantize_images", "(", "real_images", ")", "\n", "real_images", "=", "ops", ".", "resize_images", "(", "real_images", ",", "resizer", ",", "totensor", ",", "mean", ",", "std", ",", "self", ".", "local_rank", ")", "\n", "real_embed", "=", "torch", ".", "squeeze", "(", "resnet50_conv", "(", "real_images", ")", ")", "\n", "if", "batch_idx", "==", "0", ":", "\n", "                        ", "distances", "=", "torch", ".", "square", "(", "real_embed", "-", "fake_anchor_embed", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "image_holder", "=", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "distances", "=", "np", ".", "concatenate", "(", "[", "\n", "distances", ",", "\n", "torch", ".", "square", "(", "real_embed", "-", "fake_anchor_embed", ")", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "]", ",", "\n", "axis", "=", "0", ")", "\n", "image_holder", "=", "np", ".", "concatenate", "(", "[", "image_holder", ",", "real_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "nearest_indices", "=", "(", "-", "distances", ")", ".", "argsort", "(", ")", "[", "-", "(", "num_cols", "-", "1", ")", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "if", "c", "%", "num_rows", "==", "0", ":", "\n", "                    ", "canvas", "=", "np", ".", "concatenate", "(", "[", "fake_anchor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "image_holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "c", "%", "num_rows", "==", "num_rows", "-", "1", ":", "\n", "                    ", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_anchor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "image_holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "misc", ".", "plot_img_canvas", "(", "images", "=", "torch", ".", "from_numpy", "(", "canvas", ")", ",", "\n", "save_path", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures/{run_name}/fake_anchor_{num_cols}NN_{cls}_classes.png\"", ".", "format", "(", "run_name", "=", "self", ".", "run_name", ",", "num_cols", "=", "num_cols", ",", "cls", "=", "c", "+", "1", ")", ")", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ")", "\n", "", "else", ":", "\n", "                    ", "row_images", "=", "np", ".", "concatenate", "(", "[", "fake_anchor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "image_holder", "[", "nearest_indices", "]", "]", ",", "axis", "=", "0", ")", "\n", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "row_images", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_linear_interpolation": [[1143, 1194], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "tqdm.tqdm.tqdm", "print", "int", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "range", "generator", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "utils.interpolate().view.repeat().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "shared().view", "utils.interpolate().view.repeat().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "utils.interpolate().view", "os.path.join", "generator.detach().cpu", "os.path.join", "utils.interpolate().view.repeat", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "shared", "utils.interpolate().view.repeat", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "utils.interpolate", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "shared().view", "shared().view", "generator.detach", "shared", "shared", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot", "utils.sample_onehot"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot"], ["", "def", "run_linear_interpolation", "(", "self", ",", "num_rows", ",", "num_cols", ",", "fix_z", ",", "fix_y", ",", "num_saves", "=", "100", ")", ":", "\n", "        ", "assert", "int", "(", "fix_z", ")", "*", "int", "(", "fix_y", ")", "!=", "1", ",", "\"unable to switch fix_z and fix_y on together!\"", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "flag", "=", "\"fix_z\"", "if", "fix_z", "else", "\"fix_y\"", "\n", "self", ".", "logger", ".", "info", "(", "\"Run linear interpolation analysis ({flag}) {num} times.\"", ".", "format", "(", "flag", "=", "flag", ",", "num", "=", "num_saves", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "shared", "=", "misc", ".", "peel_model", "(", "generator", ")", ".", "shared", "\n", "for", "ns", "in", "tqdm", "(", "range", "(", "num_saves", ")", ")", ":", "\n", "                ", "if", "fix_z", ":", "\n", "                    ", "zs", "=", "torch", ".", "randn", "(", "num_rows", ",", "1", ",", "self", ".", "MODEL", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", "\n", "zs", "=", "zs", ".", "repeat", "(", "1", ",", "num_cols", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "MODEL", ".", "z_dim", ")", "\n", "name", "=", "\"fix_z\"", "\n", "", "else", ":", "\n", "                    ", "zs", "=", "misc", ".", "interpolate", "(", "torch", ".", "randn", "(", "num_rows", ",", "1", ",", "self", ".", "MODEL", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "torch", ".", "randn", "(", "num_rows", ",", "1", ",", "self", ".", "MODEL", ".", "z_dim", ",", "device", "=", "self", ".", "local_rank", ")", ",", "\n", "num_cols", "-", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "MODEL", ".", "z_dim", ")", "\n", "\n", "", "if", "fix_y", ":", "\n", "                    ", "ys", "=", "sample", ".", "sample_onehot", "(", "batch_size", "=", "num_rows", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "ys", "=", "shared", "(", "ys", ")", ".", "view", "(", "num_rows", ",", "1", ",", "-", "1", ")", "\n", "ys", "=", "ys", ".", "repeat", "(", "1", ",", "num_cols", ",", "1", ")", ".", "view", "(", "num_rows", "*", "(", "num_cols", ")", ",", "-", "1", ")", "\n", "name", "=", "\"fix_y\"", "\n", "", "else", ":", "\n", "                    ", "ys", "=", "misc", ".", "interpolate", "(", "\n", "shared", "(", "sample", ".", "sample_onehot", "(", "num_rows", ",", "self", ".", "DATA", ".", "num_classes", ")", ")", ".", "view", "(", "num_rows", ",", "1", ",", "-", "1", ")", ",", "\n", "shared", "(", "sample", ".", "sample_onehot", "(", "num_rows", ",", "self", ".", "DATA", ".", "num_classes", ")", ")", ".", "view", "(", "num_rows", ",", "1", ",", "-", "1", ")", ",", "\n", "num_cols", "-", "2", ")", ".", "view", "(", "num_rows", "*", "(", "num_cols", ")", ",", "-", "1", ")", "\n", "\n", "", "interpolated_images", "=", "generator", "(", "zs", ",", "None", ",", "shared_label", "=", "ys", ")", "\n", "\n", "misc", ".", "plot_img_canvas", "(", "images", "=", "interpolated_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "save_path", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures/{run_name}/{num}_Interpolated_images_{fix_flag}.png\"", ".", "format", "(", "num", "=", "ns", ",", "run_name", "=", "self", ".", "run_name", ",", "fix_flag", "=", "name", ")", ")", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ":", "\n", "            ", "print", "(", "\"Save figures to {}/*_Interpolated_images_{}.png\"", ".", "format", "(", "\n", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures\"", ",", "self", ".", "run_name", ")", ",", "flag", ")", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_frequency_analysis": [[1198, 1272], ["utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.plot_spectrum_image", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "iter", "range", "numpy.shape", "tqdm.tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "len", "next", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "numpy.asarray.detach().cpu().numpy", "numpy.asarray", "numpy.asarray", "range", "numpy.fft.fft2", "numpy.fft.fft2", "numpy.fft.fftshift", "numpy.fft.fftshift", "os.path.join", "numpy.concatenate", "numpy.concatenate", "len", "numpy.asarray.detach().cpu", "scipy.ndimage.median_filter", "scipy.ndimage.median_filter", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.asarray.detach", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "def", "run_frequency_analysis", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Run frequency analysis (use {num} fake and {ref} images).\"", ".", "format", "(", "num", "=", "len", "(", "dataloader", ")", ",", "ref", "=", "self", ".", "RUN", ".", "ref_dataset", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "num_batches", "=", "len", "(", "dataloader", ")", "//", "self", ".", "OPTIMIZATION", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "real_images", ",", "real_labels", "=", "next", "(", "data_iter", ")", "\n", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "fake_images", "=", "fake_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "real_images", "=", "np", ".", "asarray", "(", "(", "real_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "fake_images", "=", "np", ".", "asarray", "(", "(", "fake_images", "+", "1", ")", "*", "127.5", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "real_array", "=", "real_images", "\n", "fake_array", "=", "fake_images", "\n", "", "else", ":", "\n", "                    ", "real_array", "=", "np", ".", "concatenate", "(", "[", "real_array", ",", "real_images", "]", ",", "axis", "=", "0", ")", "\n", "fake_array", "=", "np", ".", "concatenate", "(", "[", "fake_array", ",", "fake_images", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "N", ",", "C", ",", "H", ",", "W", "=", "np", ".", "shape", "(", "real_array", ")", "\n", "real_r", ",", "real_g", ",", "real_b", "=", "real_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "real_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "real_gray", "=", "0.2989", "*", "real_r", "+", "0.5870", "*", "real_g", "+", "0.1140", "*", "real_b", "\n", "fake_r", ",", "fake_g", ",", "fake_b", "=", "fake_array", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "fake_array", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "fake_gray", "=", "0.2989", "*", "fake_r", "+", "0.5870", "*", "fake_g", "+", "0.1140", "*", "fake_b", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "N", ")", ")", ":", "\n", "                ", "real_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "real_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "real_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "fake_gray_f", "=", "np", ".", "fft", ".", "fft2", "(", "fake_gray", "[", "j", "]", "-", "ndimage", ".", "median_filter", "(", "fake_gray", "[", "j", "]", ",", "size", "=", "H", "//", "8", ")", ")", "\n", "\n", "real_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "real_gray_f", ")", "\n", "fake_gray_f_shifted", "=", "np", ".", "fft", ".", "fftshift", "(", "fake_gray_f", ")", "\n", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "real_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "", "else", ":", "\n", "                    ", "real_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "real_gray_f_shifted", ")", ")", "/", "N", "\n", "fake_gray_spectrum", "+=", "20", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "fake_gray_f_shifted", ")", ")", "/", "N", "\n", "\n", "", "", "", "misc", ".", "plot_spectrum_image", "(", "real_spectrum", "=", "real_gray_spectrum", ",", "\n", "fake_spectrum", "=", "fake_gray_spectrum", ",", "\n", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures\"", ",", "self", ".", "run_name", ")", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ")", "\n", "\n", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_tsne": [[1276, 1369], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "utils.peel_model().named_children", "iter", "range", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "sklearn.manifold.TSNE.fit_transform", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "utils.plot_tsne_scatter_plot", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "len", "next", "worker.WORKER.Dis", "save_output.clear", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.Dis", "save_output.clear", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "layer.register_forward_pre_hook", "hook_handles.append", "real_images.to", "real_labels.to", "[].detach().cpu().numpy", "real_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "[].detach().cpu().numpy", "fake_labels.detach().cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "os.path.join", "os.path.join", "numpy.isin", "numpy.isin", "numpy.isin", "numpy.isin", "[].detach().cpu", "real_labels.detach().cpu", "[].cpu().detach().numpy", "real_labels.detach().cpu().numpy", "[].detach().cpu", "fake_labels.detach().cpu", "[].cpu().detach().numpy", "fake_labels.detach().cpu().numpy", "[].detach", "real_labels.detach", "[].cpu().detach", "real_labels.detach().cpu", "[].detach", "fake_labels.detach", "[].cpu().detach", "fake_labels.detach().cpu", "[].cpu", "real_labels.detach", "[].cpu", "fake_labels.detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.clear", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model"], ["", "def", "run_tsne", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Start TSNE analysis using randomly sampled 10 classes.\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Use {ref} dataset and the same amount of generated images for visualization.\"", ".", "format", "(", "\n", "ref", "=", "self", ".", "RUN", ".", "ref_dataset", ")", ")", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "save_output", ",", "real", ",", "fake", ",", "hook_handles", "=", "misc", ".", "SaveOutput", "(", ")", ",", "{", "}", ",", "{", "}", ",", "[", "]", "\n", "for", "name", ",", "layer", "in", "misc", ".", "peel_model", "(", "self", ".", "Dis", ")", ".", "named_children", "(", ")", ":", "\n", "                ", "if", "name", "==", "\"linear1\"", ":", "\n", "                    ", "handle", "=", "layer", ".", "register_forward_pre_hook", "(", "save_output", ")", "\n", "hook_handles", ".", "append", "(", "handle", ")", "\n", "\n", "", "", "tsne_iter", "=", "iter", "(", "dataloader", ")", "\n", "num_batches", "=", "len", "(", "dataloader", ".", "dataset", ")", "//", "self", ".", "OPTIMIZATION", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "real_images", ",", "real_labels", "=", "next", "(", "tsne_iter", ")", "\n", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "real_labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "real_dict", "=", "self", ".", "Dis", "(", "real_images", ",", "real_labels", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "real", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "real", "[", "\"labels\"", "]", "=", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "real", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "real", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "real", "[", "\"labels\"", "]", ",", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "\n", "fake_dict", "=", "self", ".", "Dis", "(", "fake_images", ",", "fake_labels", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "fake", "[", "\"embeds\"", "]", "=", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "fake", "[", "\"embeds\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"embeds\"", "]", ",", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "fake", "[", "\"labels\"", "]", "=", "np", ".", "concatenate", "(", "[", "fake", "[", "\"labels\"", "]", ",", "fake_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "\n", "\n", "", "save_output", ".", "clear", "(", ")", "\n", "\n", "", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "verbose", "=", "1", ",", "perplexity", "=", "40", ",", "n_iter", "=", "300", ")", "\n", "if", "self", ".", "DATA", ".", "num_classes", ">", "10", ":", "\n", "                ", "cls_indices", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "DATA", ".", "num_classes", ")", "[", ":", "10", "]", "\n", "real", "[", "\"embeds\"", "]", "=", "real", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "real", "[", "\"labels\"", "]", "=", "real", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "real", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"embeds\"", "]", "=", "fake", "[", "\"embeds\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "fake", "[", "\"labels\"", "]", "=", "fake", "[", "\"labels\"", "]", "[", "np", ".", "isin", "(", "fake", "[", "\"labels\"", "]", ",", "cls_indices", ")", "]", "\n", "\n", "", "real_tsne_results", "=", "tsne", ".", "fit_transform", "(", "real", "[", "\"embeds\"", "]", ")", "\n", "misc", ".", "plot_tsne_scatter_plot", "(", "df", "=", "real", ",", "\n", "tsne_results", "=", "real_tsne_results", ",", "\n", "flag", "=", "\"real\"", ",", "\n", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures\"", ",", "self", ".", "run_name", ")", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ")", "\n", "\n", "fake_tsne_results", "=", "tsne", ".", "fit_transform", "(", "fake", "[", "\"embeds\"", "]", ")", "\n", "misc", ".", "plot_tsne_scatter_plot", "(", "df", "=", "fake", ",", "\n", "tsne_results", "=", "fake_tsne_results", ",", "\n", "flag", "=", "\"fake\"", ",", "\n", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures\"", ",", "self", ".", "run_name", ")", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.calculate_intra_class_fid": [[1373, 1459], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "tqdm.tqdm.tqdm", "worker.WORKER.logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "range", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "utils.make_target_cls_sampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "metrics.calculate_moments", "metrics.calculate_moments", "metrics.calculate_moments", "metrics.calculate_moments", "metrics.calculate_moments", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.generate_images_and_stack_features", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "metrics.calculate_fid", "fids.append", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.accm_values_convert_dict", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "utils.save_dict_npy", "int", "os.path.join", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy"], ["", "def", "calculate_intra_class_fid", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Start calculating iFID (use approx. {num} fake images per class and train images as the reference).\"", ".", "format", "(", "num", "=", "int", "(", "len", "(", "dataset", ")", "/", "self", ".", "DATA", ".", "num_classes", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "fids", "=", "[", "]", "\n", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "for", "c", "in", "tqdm", "(", "range", "(", "self", ".", "DATA", ".", "num_classes", ")", ")", ":", "\n", "                ", "num_samples", ",", "target_sampler", "=", "sample", ".", "make_target_cls_sampler", "(", "dataset", ",", "c", ")", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", "if", "num_samples", ">=", "self", ".", "OPTIMIZATION", ".", "batch_size", "else", "num_samples", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "target_sampler", ",", "\n", "num_workers", "=", "self", ".", "RUN", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "mu", ",", "sigma", "=", "fid", ".", "calculate_moments", "(", "data_loader", "=", "dataloader", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "\"N/A\"", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "quantize", "=", "True", ",", "\n", "world_size", "=", "self", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "self", ".", "DDP", ",", "\n", "disable_tqdm", "=", "True", ",", "\n", "fake_feats", "=", "None", ")", "\n", "\n", "c_fake_feats", ",", "_", ",", "_", "=", "features", ".", "generate_images_and_stack_features", "(", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "num_samples", ",", "\n", "y_sampler", "=", "c", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "quantize", "=", "True", ",", "\n", "world_size", "=", "self", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "self", ".", "DDP", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "disable_tqdm", "=", "True", ")", "\n", "\n", "ifid_score", ",", "_", ",", "_", "=", "fid", ".", "calculate_fid", "(", "data_loader", "=", "\"N/A\"", ",", "\n", "eval_model", "=", "self", ".", "eval_model", ",", "\n", "num_generate", "=", "num_samples", ",", "\n", "cfgs", "=", "self", ".", "cfgs", ",", "\n", "pre_cal_mean", "=", "mu", ",", "\n", "pre_cal_std", "=", "sigma", ",", "\n", "quantize", "=", "False", ",", "\n", "fake_feats", "=", "c_fake_feats", ",", "\n", "disable_tqdm", "=", "True", ")", "\n", "\n", "fids", ".", "append", "(", "ifid_score", ")", "\n", "\n", "# save iFID values in .npz format", "\n", "metric_dict", "=", "{", "\"iFID\"", ":", "ifid_score", "}", "\n", "\n", "save_dict", "=", "misc", ".", "accm_values_convert_dict", "(", "list_dict", "=", "{", "\"iFID\"", ":", "[", "]", "}", ",", "\n", "value_dict", "=", "metric_dict", ",", "\n", "step", "=", "c", ",", "\n", "interval", "=", "1", ")", "\n", "misc", ".", "save_dict_npy", "(", "directory", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"statistics\"", ",", "self", ".", "run_name", ")", ",", "\n", "name", "=", "\"iFID\"", ",", "\n", "dictionary", "=", "save_dict", ")", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Average iFID score: {iFID}\"", ".", "format", "(", "iFID", "=", "sum", "(", "fids", ",", "0.0", ")", "/", "len", "(", "fids", ")", ")", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_semantic_factorization": [[1463, 1504], ["utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "utils.make_GAN_trainable", "worker.WORKER.logger.info", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "utils.sample_zy", "tqdm.tqdm.tqdm", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "range", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.apply_sefa", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "utils.plot_img_canvas", "os.path.join", "utils.apply_sefa.detach().cpu", "os.path.join", "utils.apply_sefa.detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas"], ["", "def", "run_semantic_factorization", "(", "self", ",", "num_rows", ",", "num_cols", ",", "maximum_variations", ")", ":", "\n", "        ", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Perform semantic factorization for latent nevigation.\"", ")", "\n", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "requires_grad", "=", "self", ".", "LOSS", ".", "apply_lo", "or", "self", ".", "RUN", ".", "langevin_sampling", "\n", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "requires_grad", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "ctx", ":", "\n", "            ", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "zs", ",", "fake_labels", ",", "_", "=", "sample", ".", "sample_zy", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "device", "=", "self", ".", "local_rank", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "self", ".", "OPTIMIZATION", ".", "batch_size", ")", ")", ":", "\n", "                ", "images_canvas", "=", "sefa", ".", "apply_sefa", "(", "generator", "=", "generator", ",", "\n", "backbone", "=", "self", ".", "MODEL", ".", "backbone", ",", "\n", "z", "=", "zs", "[", "i", "]", ",", "\n", "fake_label", "=", "fake_labels", "[", "i", "]", ",", "\n", "num_semantic_axis", "=", "num_rows", ",", "\n", "maximum_variations", "=", "maximum_variations", ",", "\n", "num_cols", "=", "num_cols", ")", "\n", "\n", "misc", ".", "plot_img_canvas", "(", "images", "=", "images_canvas", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "save_path", "=", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures/{run_name}/{idx}_sefa_images.png\"", ".", "format", "(", "idx", "=", "i", ",", "run_name", "=", "self", ".", "run_name", ")", ")", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "logging", "=", "False", ")", "\n", "\n", "", "", "if", "self", ".", "global_rank", "==", "0", "and", "self", ".", "logger", ":", "\n", "            ", "print", "(", "\"Save figures to {}/*_sefa_images.png\"", ".", "format", "(", "join", "(", "self", ".", "RUN", ".", "save_dir", ",", "\"figures\"", ",", "self", ".", "run_name", ")", ")", ")", "\n", "\n", "", "misc", ".", "make_GAN_trainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.compute_GAN_train_or_test_classifier_accuracy_score": [[1508, 1617], ["utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "utils.make_GAN_untrainable", "worker.WORKER.gen_ctlr.prepare_generator", "metrics.ResNet().to", "metrics.ResNet().to", "metrics.ResNet().to", "metrics.ResNet().to", "metrics.ResNet().to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "tqdm.tqdm.tqdm", "worker.WORKER.logger.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "utils.check_is_pre_trained_model", "range", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.nn.DataParallel.train", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "utils.adjust_learning_rate", "enumerate", "worker.WORKER.validate_classifier", "max", "metrics.ResNet", "metrics.ResNet", "metrics.ResNet", "metrics.ResNet", "metrics.ResNet", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.load_GAN_train_test_model", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "worker.WORKER.ce_loss", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "train_loss.update", "train_top1_acc.update", "train_top5_acc.update", "worker.WORKER.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.step", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.peel_model", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "utils.save_model_c", "worker.WORKER.logger.info", "worker.WORKER.logger.info", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.item", "images.size", "train_acc1.item", "images.size", "train_acc5.item", "images.size", "utils.peel_model.state_dict", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict", "images.to", "labels.to"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.validate_classifier", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "def", "compute_GAN_train_or_test_classifier_accuracy_score", "(", "self", ",", "GAN_train", "=", "False", ",", "GAN_test", "=", "False", ")", ":", "\n", "        ", "assert", "GAN_train", "*", "GAN_test", "==", "0", ",", "\"cannot conduct GAN_train and GAN_test togather.\"", "\n", "if", "self", ".", "global_rank", "==", "0", ":", "\n", "            ", "if", "GAN_train", ":", "\n", "                ", "phase", ",", "metric", "=", "\"train\"", ",", "\"recall\"", "\n", "", "else", ":", "\n", "                ", "phase", ",", "metric", "=", "\"test\"", ",", "\"precision\"", "\n", "", "self", ".", "logger", ".", "info", "(", "\"compute GAN_{phase} Classifier Accuracy Score (CAS) to identify class-conditional {metric}.\"", ".", "format", "(", "phase", "=", "phase", ",", "metric", "=", "metric", ")", ")", "\n", "\n", "", "if", "self", ".", "gen_ctlr", ".", "standing_statistics", ":", "\n", "            ", "self", ".", "gen_ctlr", ".", "std_stat_counter", "+=", "1", "\n", "\n", "", "misc", ".", "make_GAN_untrainable", "(", "self", ".", "Gen", ",", "self", ".", "Gen_ema", ",", "self", ".", "Dis", ")", "\n", "generator", ",", "generator_mapping", ",", "generator_synthesis", "=", "self", ".", "gen_ctlr", ".", "prepare_generator", "(", ")", "\n", "\n", "best_top1", ",", "best_top5", ",", "cas_setting", "=", "0.0", ",", "0.0", ",", "self", ".", "MISC", ".", "cas_setting", "[", "self", ".", "DATA", ".", "name", "]", "\n", "model", "=", "resnet", ".", "ResNet", "(", "dataset", "=", "self", ".", "DATA", ".", "name", ",", "\n", "depth", "=", "cas_setting", "[", "\"depth\"", "]", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "bottleneck", "=", "cas_setting", "[", "\"bottleneck\"", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cas_setting", "[", "\"lr\"", "]", ",", "\n", "momentum", "=", "cas_setting", "[", "\"momentum\"", "]", ",", "\n", "weight_decay", "=", "cas_setting", "[", "\"weight_decay\"", "]", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "if", "self", ".", "OPTIMIZATION", ".", "world_size", ">", "1", ":", "\n", "            ", "model", "=", "DataParallel", "(", "model", ",", "output_device", "=", "self", ".", "local_rank", ")", "\n", "\n", "", "epoch_trained", "=", "0", "\n", "if", "self", ".", "RUN", ".", "ckpt_dir", "is", "not", "None", "and", "self", ".", "RUN", ".", "resume_classifier_train", ":", "\n", "            ", "is_pre_trained_model", ",", "mode", "=", "ckpt", ".", "check_is_pre_trained_model", "(", "ckpt_dir", "=", "self", ".", "RUN", ".", "ckpt_dir", ",", "\n", "GAN_train", "=", "GAN_train", ",", "\n", "GAN_test", "=", "GAN_test", ")", "\n", "if", "is_pre_trained_model", ":", "\n", "                ", "epoch_trained", ",", "best_top1", ",", "best_top5", ",", "best_epoch", "=", "ckpt", ".", "load_GAN_train_test_model", "(", "model", "=", "model", ",", "\n", "mode", "=", "mode", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "RUN", "=", "self", ".", "RUN", ")", "\n", "\n", "", "", "for", "current_epoch", "in", "tqdm", "(", "range", "(", "epoch_trained", ",", "cas_setting", "[", "\"epochs\"", "]", ")", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "ops", ".", "adjust_learning_rate", "(", "optimizer", "=", "optimizer", ",", "\n", "lr_org", "=", "cas_setting", "[", "\"lr\"", "]", ",", "\n", "epoch", "=", "current_epoch", ",", "\n", "total_epoch", "=", "cas_setting", "[", "\"epochs\"", "]", ",", "\n", "dataset", "=", "self", ".", "DATA", ".", "name", ")", "\n", "\n", "train_top1_acc", ",", "train_top5_acc", ",", "train_loss", "=", "misc", ".", "AverageMeter", "(", ")", ",", "misc", ".", "AverageMeter", "(", ")", ",", "misc", ".", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "                ", "if", "GAN_train", ":", "\n", "                    ", "images", ",", "labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "", "logits", "=", "model", "(", "images", ")", "\n", "ce_loss", "=", "self", ".", "ce_loss", "(", "logits", ",", "labels", ")", "\n", "\n", "train_acc1", ",", "train_acc5", "=", "misc", ".", "accuracy", "(", "logits", ".", "data", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "train_loss", ".", "update", "(", "ce_loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "train_top1_acc", ".", "update", "(", "train_acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "train_top5_acc", ".", "update", "(", "train_acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "ce_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "valid_acc1", ",", "valid_acc5", ",", "valid_loss", "=", "self", ".", "validate_classifier", "(", "model", "=", "model", ",", "\n", "generator", "=", "generator", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "epoch", "=", "current_epoch", ",", "\n", "GAN_test", "=", "GAN_test", ",", "\n", "setting", "=", "cas_setting", ")", "\n", "\n", "is_best", "=", "valid_acc1", ">", "best_top1", "\n", "best_top1", "=", "max", "(", "valid_acc1", ",", "best_top1", ")", "\n", "if", "is_best", ":", "\n", "                ", "best_top5", ",", "best_epoch", "=", "valid_acc5", ",", "current_epoch", "\n", "model_", "=", "misc", ".", "peel_model", "(", "model", ")", "\n", "states", "=", "{", "\"state_dict\"", ":", "model_", ".", "state_dict", "(", ")", ",", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\"epoch\"", ":", "current_epoch", "+", "1", ",", "\n", "\"best_top1\"", ":", "best_top1", ",", "\"best_top5\"", ":", "best_top5", ",", "\"best_epoch\"", ":", "best_epoch", "}", "\n", "misc", ".", "save_model_c", "(", "states", ",", "mode", ",", "self", ".", "RUN", ")", "\n", "\n", "", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Current best accuracy: Top-1: {top1:.4f}% and Top-5 {top5:.4f}%\"", ".", "format", "(", "top1", "=", "best_top1", ",", "top5", "=", "best_top5", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Save model to {}\"", ".", "format", "(", "self", ".", "RUN", ".", "ckpt_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.validate_classifier": [[1621, 1662], ["model.eval", "enumerate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model", "worker.WORKER.ce_loss", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "utils.accuracy", "valid_loss.update", "valid_top1_acc.update", "valid_top5_acc.update", "worker.WORKER.logger.info", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "utils.generate_images", "worker.WORKER.item", "images.size", "valid_acc1.item", "images.size", "valid_acc5.item", "images.size", "images.to", "labels.to"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "", "", "def", "validate_classifier", "(", "self", ",", "model", ",", "generator", ",", "generator_mapping", ",", "generator_synthesis", ",", "epoch", ",", "GAN_test", ",", "setting", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "valid_top1_acc", ",", "valid_top5_acc", ",", "valid_loss", "=", "misc", ".", "AverageMeter", "(", ")", ",", "misc", ".", "AverageMeter", "(", ")", ",", "misc", ".", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "train_dataloader", ")", ":", "\n", "            ", "if", "GAN_test", ":", "\n", "                ", "images", ",", "labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "self", ".", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "self", ".", "RUN", ".", "truncation_factor", ",", "\n", "batch_size", "=", "self", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "z_dim", "=", "self", ".", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "self", ".", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "self", ".", "Dis", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "self", ".", "LOSS", ",", "\n", "RUN", "=", "self", ".", "RUN", ",", "\n", "MODEL", "=", "self", ".", "MODEL", ",", "\n", "device", "=", "self", ".", "local_rank", ",", "\n", "is_stylegan", "=", "self", ".", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "images", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "local_rank", ")", ",", "labels", ".", "to", "(", "self", ".", "local_rank", ")", "\n", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "ce_loss", "=", "self", ".", "ce_loss", "(", "output", ",", "labels", ")", "\n", "\n", "valid_acc1", ",", "valid_acc5", "=", "misc", ".", "accuracy", "(", "output", ".", "data", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "valid_loss", ".", "update", "(", "ce_loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "valid_top1_acc", ".", "update", "(", "valid_acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "valid_top5_acc", ".", "update", "(", "valid_acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Top 1-acc {top1.val:.4f} ({top1.avg:.4f})\\t\"", "\n", "\"Top 5-acc {top5.val:.4f} ({top5.avg:.4f})\"", ".", "format", "(", "top1", "=", "valid_top1_acc", ",", "top5", "=", "valid_top5_acc", ")", ")", "\n", "", "return", "valid_top1_acc", ".", "avg", ",", "valid_top5_acc", ".", "avg", ",", "valid_loss", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.CenterCropLongEdge.__call__": [[46, 48], ["torchvision.functional.center_crop", "min"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "transforms", ".", "functional", ".", "center_crop", "(", "img", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.CenterCropLongEdge.__repr__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.Dataset_.__init__": [[54, 61], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "evaluate.Dataset_.load_dataset", "torchvision.PILToTensor"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.load_dataset"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "super", "(", "Dataset_", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "trsf_list", "=", "[", "transforms", ".", "PILToTensor", "(", ")", "]", "\n", "self", ".", "trsf", "=", "transforms", ".", "Compose", "(", "self", ".", "trsf_list", ")", "\n", "\n", "self", ".", "load_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.Dataset_.load_dataset": [[62, 64], ["torchvision.datasets.ImageFolder"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "self", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.Dataset_.__len__": [[65, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "num_dataset", "=", "len", "(", "self", ".", "data", ")", "\n", "return", "num_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.Dataset_.__getitem__": [[69, 72], ["evaluate.Dataset_.trsf", "int"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", "\n", "return", "self", ".", "trsf", "(", "img", ")", ",", "int", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.prepare_evaluation": [[74, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.current_device", "torch.cuda.current_device", "random.randint", "print"], "function", ["None"], ["", "", "def", "prepare_evaluation", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "add_help", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-metrics\"", ",", "\"--eval_metrics\"", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'fid'", "]", ",", "\n", "help", "=", "\"evaluation metrics to use during training, a subset list of ['fid', 'is', 'prdc'] or none\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--post_resizer\"", ",", "type", "=", "str", ",", "default", "=", "\"legacy\"", ",", "help", "=", "\"which resizer will you use to evaluate GANs\\\n                        in ['legacy', 'clean', 'friendly']\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_backbone'", ",", "type", "=", "str", ",", "default", "=", "'InceptionV3_tf'", ",", "help", "=", "\"[InceptionV3_tf, InceptionV3_torch, ResNet50_torch, SwAV_torch, DINO_torch, Swin-T_torch]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dset1\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"specify the directory of the folder that contains dset1 images (real).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dset1_feats\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"specify the path of *.npy that contains features of dset1 (real). \\\n                        If not specified, StudioGAN will automatically extract feat1 using the whole dset1.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dset1_moments\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"specify the path of *.npy that contains moments (mu, sigma) of dset1 (real). \\\n                        If not specified, StudioGAN will automatically extract moments using the whole dset1.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dset2\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"specify the directory of the folder that contains dset2 images (fake).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "256", ",", "type", "=", "int", ",", "help", "=", "\"batch_size for evaluation\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"seed for generating random numbers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-DDP\"", ",", "\"--distributed_data_parallel\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backend\"", ",", "type", "=", "str", ",", "default", "=", "\"nccl\"", ",", "help", "=", "\"cuda backend for DDP training \\in ['nccl', 'gloo']\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-tn\"", ",", "\"--total_nodes\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"total number of nodes for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-cn\"", ",", "\"--current_node\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"rank of the current node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "dset1_feats", "==", "None", "and", "args", ".", "dset1_moments", "==", "None", ":", "\n", "        ", "assert", "args", ".", "dset1", "!=", "None", ",", "\"dset1 should be specified!\"", "\n", "", "if", "\"fid\"", "in", "args", ".", "eval_metrics", ":", "\n", "        ", "assert", "args", ".", "dset1", "!=", "None", "or", "args", ".", "dset1_moments", "!=", "None", ",", "\"Either dset1 or dset1_moments should be given to compute FID.\"", "\n", "", "if", "\"prdc\"", "in", "args", ".", "eval_metrics", ":", "\n", "        ", "assert", "args", ".", "dset1", "!=", "None", "or", "args", ".", "dset1_feats", "!=", "None", ",", "\"Either dset1 or dset1_feats should be given to compute PRDC.\"", "\n", "\n", "", "gpus_per_node", ",", "rank", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "world_size", "=", "gpus_per_node", "*", "args", ".", "total_nodes", "\n", "if", "args", ".", "seed", "==", "-", "1", ":", "args", ".", "seed", "=", "random", ".", "randint", "(", "1", ",", "4096", ")", "\n", "if", "world_size", "==", "1", ":", "print", "(", "\"You have chosen a specific GPU. This will completely disable data parallelism.\"", ")", "\n", "return", "args", ",", "world_size", ",", "gpus_per_node", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.evaluate": [[112, 289], ["utils.fix_seed", "evaluate.Dataset_", "torch.utils.data.DataLoader", "metrics.LoadEvalModel", "metrics.sample_images_from_loader_and_stack_features", "print", "utils.setup", "torch.cuda.set_device", "torch.cuda.set_device", "evaluate.Dataset_", "print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "metrics.sample_images_from_loader_and_stack_features", "metrics.eval_features", "numpy.mean", "numpy.cov", "metrics.frechet_inception_distance", "metrics.compute_prdc", "print", "torch.utils.data.distributed.DistributedSampler", "metrics.eval_features", "metric_dict.update", "print", "numpy.mean", "numpy.cov", "metric_dict.update", "numpy.array", "metric_dict.update", "print", "print", "print", "print", "len", "print", "dset2_feats.detach().cpu().numpy().astype", "dset2_feats.detach().cpu().numpy().astype", "print", "print", "numpy.array", "numpy.load", "dset2_feats.detach().cpu().numpy", "len", "len", "len", "dset1_feats.detach().cpu().numpy().astype", "dset1_feats.detach().cpu().numpy().astype", "numpy.load", "numpy.load", "len", "len", "dset1_feats.detach().cpu().numpy", "len", "len", "str", "len", "len", "dset2_feats.detach().cpu().numpy", "dset2_feats.detach().cpu().numpy", "dset2_feats.detach().cpu", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "len", "dset1_feats.detach().cpu().numpy", "dset1_feats.detach().cpu().numpy", "str", "str", "str", "dset1_feats.detach().cpu", "len", "len", "len", "len", "len", "len", "len", "len", "len", "dset2_feats.detach().cpu", "dset2_feats.detach().cpu", "len", "len", "len", "dset2_feats.detach", "dset1_feats.detach().cpu", "dset1_feats.detach().cpu", "dset1_feats.detach", "dset2_feats.detach", "dset2_feats.detach", "dset1_feats.detach", "dset1_feats.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.fix_seed", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.sample_images_from_loader_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.setup", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.sample_images_from_loader_and_stack_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.frechet_inception_distance", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_prdc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update"], ["", "def", "evaluate", "(", "local_rank", ",", "args", ",", "world_size", ",", "gpus_per_node", ")", ":", "\n", "# -----------------------------------------------------------------------------", "\n", "# determine cuda, cudnn, and backends settings.", "\n", "# -----------------------------------------------------------------------------", "\n", "    ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# initialize all processes and fix seed of each process", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "args", ".", "distributed_data_parallel", ":", "\n", "        ", "global_rank", "=", "args", ".", "current_node", "*", "(", "gpus_per_node", ")", "+", "local_rank", "\n", "print", "(", "\"Use GPU: {global_rank} for training.\"", ".", "format", "(", "global_rank", "=", "global_rank", ")", ")", "\n", "misc", ".", "setup", "(", "global_rank", ",", "world_size", ",", "args", ".", "backend", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "global_rank", "=", "local_rank", "\n", "\n", "", "misc", ".", "fix_seed", "(", "args", ".", "seed", "+", "global_rank", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load dset1 and dset1.", "\n", "# -----------------------------------------------------------------------------", "\n", "load_dset1", "=", "(", "\"fid\"", "in", "args", ".", "eval_metrics", "and", "args", ".", "dset1_moments", "==", "None", ")", "*", "(", "\"prdc\"", "in", "args", ".", "eval_metrics", "and", "args", ".", "dset1_feats", "==", "None", ")", "\n", "if", "load_dset1", ":", "\n", "        ", "dset1", "=", "Dataset_", "(", "data_dir", "=", "args", ".", "dset1", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"Size of dset1: {dataset_size}\"", ".", "format", "(", "dataset_size", "=", "len", "(", "dset1", ")", ")", ")", "\n", "\n", "", "", "dset2", "=", "Dataset_", "(", "data_dir", "=", "args", ".", "dset2", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "print", "(", "\"Size of dset2: {dataset_size}\"", ".", "format", "(", "dataset_size", "=", "len", "(", "dset2", ")", ")", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# define a distributed sampler for DDP evaluation.", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "args", ".", "distributed_data_parallel", ":", "\n", "        ", "batch_size", "=", "args", ".", "batch_size", "//", "world_size", "\n", "if", "load_dset1", ":", "\n", "            ", "dset1_sampler", "=", "DistributedSampler", "(", "dset1", ",", "\n", "num_replicas", "=", "world_size", ",", "\n", "rank", "=", "local_rank", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "", "dset2_sampler", "=", "DistributedSampler", "(", "dset2", ",", "\n", "num_replicas", "=", "world_size", ",", "\n", "rank", "=", "local_rank", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "args", ".", "batch_size", "\n", "dset1_sampler", ",", "dset2_sampler", "=", "None", ",", "None", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# define dataloaders for dset1 and dset2.", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "load_dset1", ":", "\n", "        ", "dset1_dataloader", "=", "DataLoader", "(", "dataset", "=", "dset1", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "sampler", "=", "dset1_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "", "dset2_dataloader", "=", "DataLoader", "(", "dataset", "=", "dset2", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "sampler", "=", "dset2_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load a pre-trained network (InceptionV3 or ResNet50 trained using SwAV).", "\n", "# -----------------------------------------------------------------------------", "\n", "eval_model", "=", "pp", ".", "LoadEvalModel", "(", "eval_backbone", "=", "args", ".", "eval_backbone", ",", "\n", "post_resizer", "=", "args", ".", "post_resizer", ",", "\n", "world_size", "=", "world_size", ",", "\n", "distributed_data_parallel", "=", "args", ".", "distributed_data_parallel", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# extract features, probabilities, and labels to calculate metrics.", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "load_dset1", ":", "\n", "        ", "dset1_feats", ",", "dset1_probs", ",", "dset1_labels", "=", "features", ".", "sample_images_from_loader_and_stack_features", "(", "\n", "dataloader", "=", "dset1_dataloader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "quantize", "=", "False", ",", "\n", "world_size", "=", "world_size", ",", "\n", "DDP", "=", "args", ".", "distributed_data_parallel", ",", "\n", "device", "=", "local_rank", ",", "\n", "disable_tqdm", "=", "local_rank", "!=", "0", ")", "\n", "\n", "", "dset2_feats", ",", "dset2_probs", ",", "dset2_labels", "=", "features", ".", "sample_images_from_loader_and_stack_features", "(", "\n", "dataloader", "=", "dset2_dataloader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "quantize", "=", "False", ",", "\n", "world_size", "=", "world_size", ",", "\n", "DDP", "=", "args", ".", "distributed_data_parallel", ",", "\n", "device", "=", "local_rank", ",", "\n", "disable_tqdm", "=", "local_rank", "!=", "0", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# calculate metrics.", "\n", "# -----------------------------------------------------------------------------", "\n", "metric_dict", "=", "{", "}", "\n", "if", "\"is\"", "in", "args", ".", "eval_metrics", ":", "\n", "        ", "num_splits", "=", "1", "\n", "if", "load_dset1", ":", "\n", "            ", "dset1_kl_score", ",", "dset1_kl_std", ",", "dset1_top1", ",", "dset1_top5", "=", "ins", ".", "eval_features", "(", "probs", "=", "dset1_probs", ",", "\n", "labels", "=", "dset1_labels", ",", "\n", "data_loader", "=", "dset1_dataloader", ",", "\n", "num_features", "=", "len", "(", "dset1", ")", ",", "\n", "split", "=", "num_splits", ",", "\n", "is_acc", "=", "False", ",", "\n", "is_torch_backbone", "=", "True", "if", "\"torch\"", "in", "args", ".", "eval_backbone", "else", "False", ")", "\n", "\n", "", "dset2_kl_score", ",", "dset2_kl_std", ",", "dset2_top1", ",", "dset2_top5", "=", "ins", ".", "eval_features", "(", "\n", "probs", "=", "dset2_probs", ",", "\n", "labels", "=", "dset2_labels", ",", "\n", "data_loader", "=", "dset2_dataloader", ",", "\n", "num_features", "=", "len", "(", "dset2", ")", ",", "\n", "split", "=", "num_splits", ",", "\n", "is_acc", "=", "False", ",", "\n", "is_torch_backbone", "=", "True", "if", "\"torch\"", "in", "args", ".", "eval_backbone", "else", "False", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "metric_dict", ".", "update", "(", "{", "\"IS\"", ":", "dset2_kl_score", ",", "\"Top1_acc\"", ":", "dset2_top1", ",", "\"Top5_acc\"", ":", "dset2_top5", "}", ")", "\n", "if", "load_dset1", ":", "\n", "                ", "print", "(", "\"Inception score of dset1 ({num} images): {IS}\"", ".", "format", "(", "num", "=", "str", "(", "len", "(", "dset1", ")", ")", ",", "IS", "=", "dset1_kl_score", ")", ")", "\n", "", "print", "(", "\"Inception score of dset2 ({num} images): {IS}\"", ".", "format", "(", "num", "=", "str", "(", "len", "(", "dset2", ")", ")", ",", "IS", "=", "dset2_kl_score", ")", ")", "\n", "\n", "", "", "if", "\"fid\"", "in", "args", ".", "eval_metrics", ":", "\n", "        ", "if", "args", ".", "dset1_moments", "is", "None", ":", "\n", "            ", "mu1", "=", "np", ".", "mean", "(", "dset1_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "[", ":", "len", "(", "dset1", ")", "]", ",", "axis", "=", "0", ")", "\n", "sigma1", "=", "np", ".", "cov", "(", "dset1_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "[", ":", "len", "(", "dset1", ")", "]", ",", "rowvar", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "mu1", ",", "sigma1", "=", "np", ".", "load", "(", "args", ".", "dset1_moments", ")", "[", "\"mu\"", "]", ",", "np", ".", "load", "(", "args", ".", "dset1_moments", ")", "[", "\"sigma\"", "]", "\n", "\n", "", "mu2", "=", "np", ".", "mean", "(", "dset2_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "[", ":", "len", "(", "dset2", ")", "]", ",", "axis", "=", "0", ")", "\n", "sigma2", "=", "np", ".", "cov", "(", "dset2_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "[", ":", "len", "(", "dset2", ")", "]", ",", "rowvar", "=", "False", ")", "\n", "\n", "fid_score", "=", "fid", ".", "frechet_inception_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "metric_dict", ".", "update", "(", "{", "\"FID\"", ":", "fid_score", "}", ")", "\n", "if", "args", ".", "dset1_moments", "is", "None", ":", "\n", "                ", "print", "(", "\"FID between dset1 and dset2 (dset1: {num1} images, dset2: {num2} images): {fid}\"", ".", "format", "(", "num1", "=", "str", "(", "len", "(", "dset1", ")", ")", ",", "num2", "=", "str", "(", "len", "(", "dset2", ")", ")", ",", "fid", "=", "fid_score", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"FID between pre-calculated dset1 moments and dset2 (dset2: {num2} images): {fid}\"", ".", "format", "(", "num2", "=", "str", "(", "len", "(", "dset2", ")", ")", ",", "fid", "=", "fid_score", ")", ")", "\n", "\n", "", "", "", "if", "\"prdc\"", "in", "args", ".", "eval_metrics", ":", "\n", "        ", "nearest_k", "=", "5", "\n", "if", "args", ".", "dset1_feats", "is", "None", ":", "\n", "            ", "dset1_feats_np", "=", "np", ".", "array", "(", "dset1_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float64", ")", "[", ":", "len", "(", "dset1", ")", "]", "\n", "dset1_mode", "=", "\"dset1\"", "\n", "", "else", ":", "\n", "            ", "dset1_feats_np", "=", "np", ".", "load", "(", "args", ".", "dset1_feats", ",", "mmap_mode", "=", "'r'", ")", "[", "\"real_feats\"", "]", "\n", "dset1_mode", "=", "\"pre-calculated dset1_feats\"", "\n", "", "dset2_feats_np", "=", "np", ".", "array", "(", "dset2_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float64", ")", "[", ":", "len", "(", "dset2", ")", "]", "\n", "metrics", "=", "prdc", ".", "compute_prdc", "(", "real_features", "=", "dset1_feats_np", ",", "fake_features", "=", "dset2_feats_np", ",", "nearest_k", "=", "nearest_k", ")", "\n", "prc", ",", "rec", ",", "dns", ",", "cvg", "=", "metrics", "[", "\"precision\"", "]", ",", "metrics", "[", "\"recall\"", "]", ",", "metrics", "[", "\"density\"", "]", ",", "metrics", "[", "\"coverage\"", "]", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "metric_dict", ".", "update", "(", "{", "\"Improved_Precision\"", ":", "prc", ",", "\"Improved_Recall\"", ":", "rec", ",", "\"Density\"", ":", "dns", ",", "\"Coverage\"", ":", "cvg", "}", ")", "\n", "print", "(", "\"Improved Precision between {dset1_mode} (ref) and dset2 (target) ({dset1_mode}: {num1} images, dset2: {num2} images): {prc}\"", ".", "format", "(", "dset1_mode", "=", "str", "(", "dset1_mode", ")", ",", "num1", "=", "str", "(", "len", "(", "dset1_feats_np", ")", ")", ",", "num2", "=", "str", "(", "len", "(", "dset2_feats_np", ")", ")", ",", "prc", "=", "prc", ")", ")", "\n", "print", "(", "\"Improved Recall between {dset1_mode} (ref) and dset2 (target) ({dset1_mode}: {num1} images, dset2: {num2} images): {rec}\"", ".", "format", "(", "dset1_mode", "=", "str", "(", "dset1_mode", ")", ",", "num1", "=", "str", "(", "len", "(", "dset1_feats_np", ")", ")", ",", "num2", "=", "str", "(", "len", "(", "dset2_feats_np", ")", ")", ",", "rec", "=", "rec", ")", ")", "\n", "print", "(", "\"Density between {dset1_mode} (ref) and dset2 (target) ({dset1_mode}: {num1} images, dset2: {num2} images): {dns}\"", ".", "format", "(", "dset1_mode", "=", "str", "(", "dset1_mode", ")", ",", "num1", "=", "str", "(", "len", "(", "dset1_feats_np", ")", ")", ",", "num2", "=", "str", "(", "len", "(", "dset2_feats_np", ")", ")", ",", "dns", "=", "dns", ")", ")", "\n", "print", "(", "\"Coverage between {dset1_mode} (ref) and dset2 (target) ({dset1_mode}: {num1} images, dset2: {num2} images): {cvg}\"", ".", "format", "(", "dset1_mode", "=", "str", "(", "dset1_mode", ")", ",", "num1", "=", "str", "(", "len", "(", "dset1_feats_np", ")", ")", ",", "num2", "=", "str", "(", "len", "(", "dset2_feats_np", ")", ")", ",", "cvg", "=", "cvg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.RandomCropLongEdge.__call__": [[35, 41], ["torchvision.functional.crop", "min", "min", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "size", "=", "(", "min", "(", "img", ".", "size", ")", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "# Only step forward along this edge if it's the long edge", "\n", "i", "=", "(", "0", "if", "size", "[", "0", "]", "==", "img", ".", "size", "[", "0", "]", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "0", "]", "-", "size", "[", "0", "]", ")", ")", "\n", "j", "=", "(", "0", "if", "size", "[", "1", "]", "==", "img", ".", "size", "[", "1", "]", "else", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "img", ".", "size", "[", "1", "]", "-", "size", "[", "1", "]", ")", ")", "\n", "return", "transforms", ".", "functional", ".", "crop", "(", "img", ",", "j", ",", "i", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.RandomCropLongEdge.__repr__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.CenterCropLongEdge.__call__": [[52, 54], ["torchvision.functional.center_crop", "min"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "transforms", ".", "functional", ".", "center_crop", "(", "img", ",", "min", "(", "img", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.CenterCropLongEdge.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.__init__": [[60, 101], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "data_util.Dataset_.load_dataset", "torchvision.ToPILImage", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.PILToTensor", "data_util.CenterCropLongEdge", "torchvision.Resize"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.load_dataset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_name", ",", "\n", "data_dir", ",", "\n", "train", ",", "\n", "crop_long_edge", "=", "False", ",", "\n", "resize_size", "=", "None", ",", "\n", "resizer", "=", "\"lanczos\"", ",", "\n", "random_flip", "=", "False", ",", "\n", "normalize", "=", "True", ",", "\n", "hdf5_path", "=", "None", ",", "\n", "load_data_in_memory", "=", "False", ")", ":", "\n", "        ", "super", "(", "Dataset_", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_name", "=", "data_name", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "hdf5_path", "=", "hdf5_path", "\n", "self", ".", "load_data_in_memory", "=", "load_data_in_memory", "\n", "self", ".", "trsf_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "if", "crop_long_edge", ":", "\n", "                ", "self", ".", "trsf_list", "+=", "[", "CenterCropLongEdge", "(", ")", "]", "\n", "", "if", "resize_size", "is", "not", "None", "and", "resizer", "!=", "\"wo_resize\"", ":", "\n", "                ", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "Resize", "(", "resize_size", ",", "interpolation", "=", "resizer_collection", "[", "resizer", "]", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "\n", "\n", "", "if", "self", ".", "random_flip", ":", "\n", "            ", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "Normalize", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "trsf_list", "+=", "[", "transforms", ".", "PILToTensor", "(", ")", "]", "\n", "\n", "", "self", ".", "trsf", "=", "transforms", ".", "Compose", "(", "self", ".", "trsf_list", ")", "\n", "\n", "self", ".", "load_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.load_dataset": [[102, 122], ["torchvision.datasets.CIFAR10", "h5py.File", "torchvision.datasets.CIFAR100", "os.path.join", "torchvision.datasets.ImageFolder", "print"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hdf5_path", "is", "not", "None", ":", "\n", "            ", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "data", ",", "labels", "=", "f", "[", "\"imgs\"", "]", ",", "f", "[", "\"labels\"", "]", "\n", "self", ".", "num_dataset", "=", "data", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "load_data_in_memory", ":", "\n", "                    ", "print", "(", "\"Load {path} into memory.\"", ".", "format", "(", "path", "=", "self", ".", "hdf5_path", ")", ")", "\n", "self", ".", "data", "=", "data", "[", ":", "]", "\n", "self", ".", "labels", "=", "labels", "[", ":", "]", "\n", "", "", "return", "\n", "\n", "", "if", "self", ".", "data_name", "==", "\"CIFAR10\"", ":", "\n", "            ", "self", ".", "data", "=", "CIFAR10", "(", "root", "=", "self", ".", "data_dir", ",", "train", "=", "self", ".", "train", ",", "download", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "data_name", "==", "\"CIFAR100\"", ":", "\n", "            ", "self", ".", "data", "=", "CIFAR100", "(", "root", "=", "self", ".", "data_dir", ",", "train", "=", "self", ".", "train", ",", "download", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "mode", "=", "\"train\"", "if", "self", ".", "train", "==", "True", "else", "\"valid\"", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "mode", ")", "\n", "self", ".", "data", "=", "ImageFolder", "(", "root", "=", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_._get_hdf5": [[123, 126], ["h5py.File"], "methods", ["None"], ["", "", "def", "_get_hdf5", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "h5", ".", "File", "(", "self", ".", "hdf5_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "return", "f", "[", "\"imgs\"", "]", "[", "index", "]", ",", "f", "[", "\"labels\"", "]", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.__len__": [[127, 133], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "num_dataset", "=", "len", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "num_dataset", "=", "self", ".", "num_dataset", "\n", "", "return", "num_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_.__getitem__": [[134, 143], ["data_util.Dataset_.trsf", "int", "data_util.Dataset_._get_hdf5"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.data_util.Dataset_._get_hdf5"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "hdf5_path", "is", "None", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "load_data_in_memory", ":", "\n", "                ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "", "else", ":", "\n", "                ", "img", ",", "label", "=", "self", ".", "_get_hdf5", "(", "index", ")", "\n", "", "", "return", "self", ".", "trsf", "(", "img", ")", ",", "int", "(", "label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.loader.load_worker": [[39, 511], ["utils.fix_seed", "models.load_generator_discriminator", "cfgs.define_optimizer", "worker.WORKER", "len", "misc.load_log_dicts.update", "misc.load_log_dicts.update", "misc.load_log_dicts.update", "print", "utils.setup", "torch.cuda.set_device", "torch.cuda.set_device", "utils.make_logger", "cfgs.super_cfgs.items", "data_util.Dataset_", "data_util.Dataset_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.load_StudioGAN_ckpts", "os.path.join", "utils.load_log_dicts", "utils.load_log_dicts", "models.prepare_parallel_training", "len", "metrics.LoadEvalModel", "metrics.prepare_moments", "torch.utils.data.DataLoader", "metrics.prepare_real_feats", "metrics.calculate_ins", "worker.WORKER.prepare_train_iter", "utils.load_best_model", "range", "worker.WORKER.save_real_images", "worker.WORKER.save_fake_images", "worker.WORKER.visualize_fake_images", "worker.WORKER.run_k_nearest_neighbor", "worker.WORKER.run_linear_interpolation", "worker.WORKER.run_linear_interpolation", "worker.WORKER.run_frequency_analysis", "worker.WORKER.run_tsne", "worker.WORKER.calculate_intra_class_fid", "worker.WORKER.run_semantic_factorization", "worker.WORKER.compute_GAN_train_or_test_classifier_accuracy_score", "worker.WORKER.compute_GAN_train_or_test_classifier_accuracy_score", "wandb.finish", "cfgs.RUN.ckpt_dir.split", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "log.make_logger.info", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "os.remove", "utils.make_ckpt_dir", "len", "len", "torch.utils.data.distributed.DistributedSampler", "log.make_logger.info", "log.make_logger.info", "worker.WORKER.evaluate", "cfgs.RUN.ckpt_dir.split.pop", "json.dumps", "os.path.join", "os.path.join", "worker.WORKER.train_discriminator", "worker.WORKER.train_generator", "worker.WORKER.train_generator", "worker.WORKER.train_discriminator", "worker.WORKER.log_train_statistics", "len", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "print", "log.make_logger.info", "vars", "utils.adjust_k", "worker.WORKER.visualize_fake_images", "worker.WORKER.evaluate", "worker.WORKER.save", "torch.barrier", "print", "log.make_logger.info", "len", "cfgs.RUN.ckpt_dir.split.pop", "len", "len", "int"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.fix_seed", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.model.load_generator_discriminator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.config.Configurations.define_optimizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.setup", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.log.make_logger", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_StudioGAN_ckpts", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_log_dicts", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_log_dicts", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.model.prepare_parallel_training", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.prepare_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.prepare_real_feats", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.calculate_ins", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.prepare_train_iter", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_best_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save_real_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save_fake_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.visualize_fake_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_k_nearest_neighbor", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_linear_interpolation", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_linear_interpolation", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_frequency_analysis", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_tsne", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.calculate_intra_class_fid", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.run_semantic_factorization", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.compute_GAN_train_or_test_classifier_accuracy_score", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.compute_GAN_train_or_test_classifier_accuracy_score", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.make_ckpt_dir", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.evaluate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_discriminator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_generator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.train_discriminator", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.log_train_statistics", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.adjust_k", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.visualize_fake_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.evaluate.evaluate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save"], ["def", "load_worker", "(", "local_rank", ",", "cfgs", ",", "gpus_per_node", ",", "run_name", ",", "hdf5_path", ")", ":", "\n", "# -----------------------------------------------------------------------------", "\n", "# define default variables for loading ckpt or evaluating the trained GAN model.", "\n", "# -----------------------------------------------------------------------------", "\n", "\n", "    ", "load_train_dataset", "=", "cfgs", ".", "RUN", ".", "train", "+", "cfgs", ".", "RUN", ".", "GAN_train", "+", "cfgs", ".", "RUN", ".", "GAN_test", "\n", "load_eval_dataset", "=", "len", "(", "cfgs", ".", "RUN", ".", "eval_metrics", ")", "+", "cfgs", ".", "RUN", ".", "save_real_images", "+", "cfgs", ".", "RUN", ".", "k_nearest_neighbor", "+", "cfgs", ".", "RUN", ".", "frequency_analysis", "+", "cfgs", ".", "RUN", ".", "tsne_analysis", "+", "cfgs", ".", "RUN", ".", "intra_class_fid", "\n", "train_sampler", ",", "eval_sampler", "=", "None", ",", "None", "\n", "step", ",", "epoch", ",", "topk", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", ",", "is_best", "=", "0", ",", "0", ",", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "0", ",", "None", ",", "None", ",", "None", ",", "False", "\n", "mu", ",", "sigma", ",", "real_feats", ",", "eval_model", ",", "num_rows", ",", "num_cols", "=", "None", ",", "None", ",", "None", ",", "None", ",", "10", ",", "8", "\n", "aa_p", "=", "cfgs", ".", "AUG", ".", "ada_initial_augment_p", "\n", "if", "cfgs", ".", "AUG", ".", "ada_initial_augment_p", "!=", "\"N/A\"", ":", "\n", "        ", "aa_p", "=", "cfgs", ".", "AUG", ".", "ada_initial_augment_p", "\n", "", "else", ":", "\n", "        ", "aa_p", "=", "cfgs", ".", "AUG", ".", "apa_initial_augment_p", "\n", "\n", "", "loss_list_dict", "=", "{", "\"gen_loss\"", ":", "[", "]", ",", "\"dis_loss\"", ":", "[", "]", ",", "\"cls_loss\"", ":", "[", "]", "}", "\n", "num_eval", "=", "{", "}", "\n", "metric_dict_during_train", "=", "{", "}", "\n", "if", "\"none\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "cfgs", ".", "RUN", ".", "eval_metrics", "=", "[", "]", "\n", "", "if", "\"is\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "metric_dict_during_train", ".", "update", "(", "{", "\"IS\"", ":", "[", "]", ",", "\"Top1_acc\"", ":", "[", "]", ",", "\"Top5_acc\"", ":", "[", "]", "}", ")", "\n", "", "if", "\"fid\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "metric_dict_during_train", ".", "update", "(", "{", "\"FID\"", ":", "[", "]", "}", ")", "\n", "", "if", "\"prdc\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "metric_dict_during_train", ".", "update", "(", "{", "\"Improved_Precision\"", ":", "[", "]", ",", "\"Improved_Recall\"", ":", "[", "]", ",", "\"Density\"", ":", "[", "]", ",", "\"Coverage\"", ":", "[", "]", "}", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# determine cuda, cudnn, and backends settings.", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "cfgs", ".", "RUN", ".", "fix_seed", ":", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "False", ",", "True", "\n", "", "else", ":", "\n", "        ", "cudnn", ".", "benchmark", ",", "cudnn", ".", "deterministic", "=", "True", ",", "False", "\n", "\n", "", "if", "cfgs", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "# Improves training speed", "\n", "        ", "conv2d_gradfix", ".", "enabled", "=", "True", "\n", "# Avoids errors with the augmentation pipe", "\n", "grid_sample_gradfix", ".", "enabled", "=", "True", "\n", "if", "cfgs", ".", "RUN", ".", "mixed_precision", ":", "\n", "# Allow PyTorch to internally use tf32 for matmul", "\n", "            ", "torch", ".", "backends", ".", "cuda", ".", "matmul", ".", "allow_tf32", "=", "False", "\n", "# Allow PyTorch to internally use tf32 for convolutions", "\n", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "=", "False", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# initialize all processes and fix seed of each process", "\n", "# -----------------------------------------------------------------------------", "\n", "", "", "if", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ":", "\n", "        ", "global_rank", "=", "cfgs", ".", "RUN", ".", "current_node", "*", "(", "gpus_per_node", ")", "+", "local_rank", "\n", "print", "(", "\"Use GPU: {global_rank} for training.\"", ".", "format", "(", "global_rank", "=", "global_rank", ")", ")", "\n", "misc", ".", "setup", "(", "global_rank", ",", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "cfgs", ".", "RUN", ".", "backend", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "global_rank", "=", "local_rank", "\n", "\n", "", "misc", ".", "fix_seed", "(", "cfgs", ".", "RUN", ".", "seed", "+", "global_rank", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# Intialize python logger.", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "logger", "=", "log", ".", "make_logger", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "run_name", ",", "None", ")", "\n", "if", "cfgs", ".", "RUN", ".", "ckpt_dir", "is", "not", "None", "and", "cfgs", ".", "RUN", ".", "freezeD", "==", "-", "1", ":", "\n", "            ", "folder_hier", "=", "cfgs", ".", "RUN", ".", "ckpt_dir", ".", "split", "(", "\"/\"", ")", "\n", "if", "folder_hier", "[", "-", "1", "]", "==", "\"\"", ":", "\n", "                ", "folder_hier", ".", "pop", "(", ")", "\n", "", "logger", ".", "info", "(", "\"Run name : {run_name}\"", ".", "format", "(", "run_name", "=", "folder_hier", ".", "pop", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"Run name : {run_name}\"", ".", "format", "(", "run_name", "=", "run_name", ")", ")", "\n", "", "for", "k", ",", "v", "in", "cfgs", ".", "super_cfgs", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"cfgs.\"", "+", "k", "+", "\" =\"", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "v", ")", ",", "indent", "=", "2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", "=", "None", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load train and evaluation datasets.", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "load_train_dataset", ":", "\n", "        ", "if", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load {name} train dataset for training.\"", ".", "format", "(", "name", "=", "cfgs", ".", "DATA", ".", "name", ")", ")", "\n", "", "train_dataset", "=", "Dataset_", "(", "data_name", "=", "cfgs", ".", "DATA", ".", "name", ",", "\n", "data_dir", "=", "cfgs", ".", "RUN", ".", "data_dir", ",", "\n", "train", "=", "True", ",", "\n", "crop_long_edge", "=", "cfgs", ".", "PRE", ".", "crop_long_edge", ",", "\n", "resize_size", "=", "cfgs", ".", "PRE", ".", "resize_size", ",", "\n", "resizer", "=", "None", "if", "hdf5_path", "is", "not", "None", "else", "cfgs", ".", "RUN", ".", "pre_resizer", ",", "\n", "random_flip", "=", "cfgs", ".", "PRE", ".", "apply_rflip", ",", "\n", "normalize", "=", "True", ",", "\n", "hdf5_path", "=", "hdf5_path", ",", "\n", "load_data_in_memory", "=", "cfgs", ".", "RUN", ".", "load_data_in_memory", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Train dataset size: {dataset_size}\"", ".", "format", "(", "dataset_size", "=", "len", "(", "train_dataset", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "train_dataset", "=", "None", "\n", "\n", "", "if", "load_eval_dataset", ":", "\n", "        ", "if", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load {name} {ref} dataset for evaluation.\"", ".", "format", "(", "name", "=", "cfgs", ".", "DATA", ".", "name", ",", "ref", "=", "cfgs", ".", "RUN", ".", "ref_dataset", ")", ")", "\n", "", "eval_dataset", "=", "Dataset_", "(", "data_name", "=", "cfgs", ".", "DATA", ".", "name", ",", "\n", "data_dir", "=", "cfgs", ".", "RUN", ".", "data_dir", ",", "\n", "train", "=", "True", "if", "cfgs", ".", "RUN", ".", "ref_dataset", "==", "\"train\"", "else", "False", ",", "\n", "crop_long_edge", "=", "False", "if", "cfgs", ".", "DATA", ".", "name", "in", "cfgs", ".", "MISC", ".", "no_proc_data", "else", "True", ",", "\n", "resize_size", "=", "None", "if", "cfgs", ".", "DATA", ".", "name", "in", "cfgs", ".", "MISC", ".", "no_proc_data", "else", "cfgs", ".", "DATA", ".", "img_size", ",", "\n", "resizer", "=", "cfgs", ".", "RUN", ".", "pre_resizer", ",", "\n", "random_flip", "=", "False", ",", "\n", "hdf5_path", "=", "None", ",", "\n", "normalize", "=", "True", ",", "\n", "load_data_in_memory", "=", "False", ")", "\n", "if", "local_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Eval dataset size: {dataset_size}\"", ".", "format", "(", "dataset_size", "=", "len", "(", "eval_dataset", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "eval_dataset", "=", "None", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# define a distributed sampler for DDP train and evaluation.", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ":", "\n", "        ", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "//", "cfgs", ".", "OPTIMIZATION", ".", "world_size", "\n", "if", "cfgs", ".", "RUN", ".", "train", ":", "\n", "            ", "train_sampler", "=", "DistributedSampler", "(", "train_dataset", ",", "\n", "num_replicas", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "rank", "=", "local_rank", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "topk", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "\n", "\n", "", "if", "load_eval_dataset", ":", "\n", "            ", "eval_sampler", "=", "DistributedSampler", "(", "eval_dataset", ",", "\n", "num_replicas", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "rank", "=", "local_rank", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "", "", "cfgs", ".", "OPTIMIZATION", ".", "basket_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "*", "cfgs", ".", "OPTIMIZATION", ".", "acml_steps", "*", "cfgs", ".", "OPTIMIZATION", ".", "d_updates_per_step", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# define dataloaders for train and evaluation.", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "load_train_dataset", ":", "\n", "        ", "train_dataloader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "basket_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "RUN", ".", "num_workers", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ",", "\n", "persistent_workers", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_dataloader", "=", "None", "\n", "\n", "", "if", "load_eval_dataset", ":", "\n", "        ", "eval_dataloader", "=", "DataLoader", "(", "dataset", "=", "eval_dataset", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "RUN", ".", "num_workers", ",", "\n", "sampler", "=", "eval_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "eval_dataloader", "=", "None", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load a generator and a discriminator", "\n", "# if cfgs.MODEL.apply_g_ema is True, load an exponential moving average generator (Gen_ema).", "\n", "# -----------------------------------------------------------------------------", "\n", "", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "ema", "=", "model", ".", "load_generator_discriminator", "(", "DATA", "=", "cfgs", ".", "DATA", ",", "\n", "OPTIMIZATION", "=", "cfgs", ".", "OPTIMIZATION", ",", "\n", "MODEL", "=", "cfgs", ".", "MODEL", ",", "\n", "STYLEGAN", "=", "cfgs", ".", "STYLEGAN", ",", "\n", "MODULES", "=", "cfgs", ".", "MODULES", ",", "\n", "RUN", "=", "cfgs", ".", "RUN", ",", "\n", "device", "=", "local_rank", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "if", "local_rank", "!=", "0", ":", "\n", "        ", "custom_ops", ".", "verbosity", "=", "\"none\"", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# define optimizers for adversarial training", "\n", "# -----------------------------------------------------------------------------", "\n", "", "cfgs", ".", "define_optimizer", "(", "Gen", ",", "Dis", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load the generator and the discriminator from a checkpoint if possible", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "cfgs", ".", "RUN", ".", "ckpt_dir", "is", "not", "None", ":", "\n", "        ", "if", "local_rank", "==", "0", ":", "\n", "            ", "os", ".", "remove", "(", "join", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "\"logs\"", ",", "run_name", "+", "\".log\"", ")", ")", "\n", "", "run_name", ",", "step", ",", "epoch", ",", "topk", ",", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", ",", "logger", "=", "ckpt", ".", "load_StudioGAN_ckpts", "(", "ckpt_dir", "=", "cfgs", ".", "RUN", ".", "ckpt_dir", ",", "\n", "load_best", "=", "cfgs", ".", "RUN", ".", "load_best", ",", "\n", "Gen", "=", "Gen", ",", "\n", "Dis", "=", "Dis", ",", "\n", "g_optimizer", "=", "cfgs", ".", "OPTIMIZATION", ".", "g_optimizer", ",", "\n", "d_optimizer", "=", "cfgs", ".", "OPTIMIZATION", ".", "d_optimizer", ",", "\n", "run_name", "=", "run_name", ",", "\n", "apply_g_ema", "=", "cfgs", ".", "MODEL", ".", "apply_g_ema", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "ema", "=", "ema", ",", "\n", "is_train", "=", "cfgs", ".", "RUN", ".", "train", ",", "\n", "RUN", "=", "cfgs", ".", "RUN", ",", "\n", "logger", "=", "logger", ",", "\n", "global_rank", "=", "global_rank", ",", "\n", "device", "=", "local_rank", ",", "\n", "cfg_file", "=", "cfgs", ".", "RUN", ".", "cfg_file", ")", "\n", "\n", "if", "topk", "==", "\"initialize\"", ":", "\n", "            ", "topk", "==", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "\n", "", "if", "cfgs", ".", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "ema", ".", "ema_rampup", "=", "\"N/A\"", "# disable EMA rampup", "\n", "if", "cfgs", ".", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "and", "cfgs", ".", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", ":", "\n", "                ", "cfgs", ".", "STYLEGAN", ".", "blur_init_sigma", "=", "\"N/A\"", "# disable blur rampup", "\n", "", "", "if", "cfgs", ".", "AUG", ".", "apply_ada", ":", "\n", "            ", "cfgs", ".", "AUG", ".", "ada_kimg", "=", "100", "# make ADA react faster at the beginning", "\n", "\n", "", "", "if", "cfgs", ".", "RUN", ".", "ckpt_dir", "is", "None", "or", "cfgs", ".", "RUN", ".", "freezeD", "!=", "-", "1", ":", "\n", "        ", "if", "local_rank", "==", "0", ":", "\n", "            ", "cfgs", ".", "RUN", ".", "ckpt_dir", "=", "ckpt", ".", "make_ckpt_dir", "(", "join", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "\"checkpoints\"", ",", "run_name", ")", ")", "\n", "", "dict_dir", "=", "join", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "\"statistics\"", ",", "run_name", ")", "\n", "loss_list_dict", "=", "misc", ".", "load_log_dicts", "(", "directory", "=", "dict_dir", ",", "file_name", "=", "\"losses.npy\"", ",", "ph", "=", "loss_list_dict", ")", "\n", "metric_dict_during_train", "=", "misc", ".", "load_log_dicts", "(", "directory", "=", "dict_dir", ",", "file_name", "=", "\"metrics.npy\"", ",", "ph", "=", "metric_dict_during_train", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# prepare parallel training", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ">", "1", ":", "\n", "        ", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", "=", "model", ".", "prepare_parallel_training", "(", "Gen", "=", "Gen", ",", "\n", "Gen_mapping", "=", "Gen_mapping", ",", "\n", "Gen_synthesis", "=", "Gen_synthesis", ",", "\n", "Dis", "=", "Dis", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "Gen_ema_mapping", "=", "Gen_ema_mapping", ",", "\n", "Gen_ema_synthesis", "=", "Gen_ema_synthesis", ",", "\n", "MODEL", "=", "cfgs", ".", "MODEL", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "distributed_data_parallel", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "synchronized_bn", "=", "cfgs", ".", "RUN", ".", "synchronized_bn", ",", "\n", "apply_g_ema", "=", "cfgs", ".", "MODEL", ".", "apply_g_ema", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# load a pre-trained network (InceptionV3, SwAV, DINO, or Swin-T)", "\n", "# -----------------------------------------------------------------------------", "\n", "", "if", "cfgs", ".", "DATA", ".", "name", "in", "[", "\"ImageNet\"", ",", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", ":", "\n", "        ", "num_eval", "=", "{", "\"train\"", ":", "50000", ",", "\"valid\"", ":", "len", "(", "eval_dataloader", ".", "dataset", ")", "}", "\n", "", "else", ":", "\n", "        ", "if", "eval_dataloader", "is", "not", "None", ":", "\n", "            ", "num_eval", "[", "cfgs", ".", "RUN", ".", "ref_dataset", "]", "=", "len", "(", "eval_dataloader", ".", "dataset", ")", "\n", "\n", "", "", "if", "len", "(", "cfgs", ".", "RUN", ".", "eval_metrics", ")", "or", "cfgs", ".", "RUN", ".", "intra_class_fid", ":", "\n", "        ", "eval_model", "=", "pp", ".", "LoadEvalModel", "(", "eval_backbone", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ",", "\n", "post_resizer", "=", "cfgs", ".", "RUN", ".", "post_resizer", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "distributed_data_parallel", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "", "if", "\"fid\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "mu", ",", "sigma", "=", "pp", ".", "prepare_moments", "(", "data_loader", "=", "eval_dataloader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "quantize", "=", "True", ",", "\n", "cfgs", "=", "cfgs", ",", "\n", "logger", "=", "logger", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "", "if", "\"prdc\"", "in", "cfgs", ".", "RUN", ".", "eval_metrics", ":", "\n", "        ", "if", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ":", "\n", "            ", "prdc_sampler", "=", "DistributedSampler", "(", "eval_dataset", ",", "\n", "num_replicas", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "rank", "=", "local_rank", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "prdc_sampler", "=", "None", "\n", "\n", "", "prdc_dataloader", "=", "DataLoader", "(", "dataset", "=", "eval_dataset", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "prdc_sampler", "is", "None", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "cfgs", ".", "RUN", ".", "num_workers", ",", "\n", "sampler", "=", "prdc_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "real_feats", "=", "pp", ".", "prepare_real_feats", "(", "data_loader", "=", "prdc_dataloader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "num_feats", "=", "num_eval", "[", "cfgs", ".", "RUN", ".", "ref_dataset", "]", ",", "\n", "quantize", "=", "True", ",", "\n", "cfgs", "=", "cfgs", ",", "\n", "logger", "=", "logger", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "calc_is_ref_dataset", ":", "\n", "        ", "pp", ".", "calculate_ins", "(", "data_loader", "=", "eval_dataloader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "quantize", "=", "True", ",", "\n", "splits", "=", "1", ",", "\n", "cfgs", "=", "cfgs", ",", "\n", "logger", "=", "logger", ",", "\n", "device", "=", "local_rank", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# initialize WORKER for training and evaluating GAN", "\n", "# -----------------------------------------------------------------------------", "\n", "", "worker", "=", "WORKER", "(", "\n", "cfgs", "=", "cfgs", ",", "\n", "run_name", "=", "run_name", ",", "\n", "Gen", "=", "Gen", ",", "\n", "Gen_mapping", "=", "Gen_mapping", ",", "\n", "Gen_synthesis", "=", "Gen_synthesis", ",", "\n", "Dis", "=", "Dis", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "Gen_ema_mapping", "=", "Gen_ema_mapping", ",", "\n", "Gen_ema_synthesis", "=", "Gen_ema_synthesis", ",", "\n", "ema", "=", "ema", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "train_dataloader", "=", "train_dataloader", ",", "\n", "eval_dataloader", "=", "eval_dataloader", ",", "\n", "global_rank", "=", "global_rank", ",", "\n", "local_rank", "=", "local_rank", ",", "\n", "mu", "=", "mu", ",", "\n", "sigma", "=", "sigma", ",", "\n", "real_feats", "=", "real_feats", ",", "\n", "logger", "=", "logger", ",", "\n", "aa_p", "=", "aa_p", ",", "\n", "best_step", "=", "best_step", ",", "\n", "best_fid", "=", "best_fid", ",", "\n", "best_ckpt_path", "=", "best_ckpt_path", ",", "\n", "lecam_emas", "=", "lecam_emas", ",", "\n", "num_eval", "=", "num_eval", ",", "\n", "loss_list_dict", "=", "loss_list_dict", ",", "\n", "metric_dict_during_train", "=", "metric_dict_during_train", ",", "\n", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# train GAN until \"total_steps\" generator updates", "\n", "# -----------------------------------------------------------------------------", "\n", "if", "cfgs", ".", "RUN", ".", "train", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Start training!\"", ")", "\n", "\n", "", "worker", ".", "training", ",", "worker", ".", "topk", "=", "True", ",", "topk", "\n", "worker", ".", "prepare_train_iter", "(", "epoch_counter", "=", "epoch", ")", "\n", "while", "step", "<=", "cfgs", ".", "OPTIMIZATION", ".", "total_steps", ":", "\n", "            ", "if", "cfgs", ".", "OPTIMIZATION", ".", "d_first", ":", "\n", "                ", "real_cond_loss", ",", "dis_acml_loss", "=", "worker", ".", "train_discriminator", "(", "current_step", "=", "step", ")", "\n", "gen_acml_loss", "=", "worker", ".", "train_generator", "(", "current_step", "=", "step", ")", "\n", "", "else", ":", "\n", "                ", "gen_acml_loss", "=", "worker", ".", "train_generator", "(", "current_step", "=", "step", ")", "\n", "real_cond_loss", ",", "dis_acml_loss", "=", "worker", ".", "train_discriminator", "(", "current_step", "=", "step", ")", "\n", "\n", "", "if", "global_rank", "==", "0", "and", "(", "step", "+", "1", ")", "%", "cfgs", ".", "RUN", ".", "print_freq", "==", "0", ":", "\n", "                ", "worker", ".", "log_train_statistics", "(", "current_step", "=", "step", ",", "\n", "real_cond_loss", "=", "real_cond_loss", ",", "\n", "gen_acml_loss", "=", "gen_acml_loss", ",", "\n", "dis_acml_loss", "=", "dis_acml_loss", ")", "\n", "", "step", "+=", "1", "\n", "\n", "if", "cfgs", ".", "LOSS", ".", "apply_topk", ":", "\n", "                ", "if", "(", "epoch", "+", "1", ")", "==", "worker", ".", "epoch_counter", ":", "\n", "                    ", "epoch", "+=", "1", "\n", "worker", ".", "topk", "=", "losses", ".", "adjust_k", "(", "current_k", "=", "worker", ".", "topk", ",", "\n", "topk_gamma", "=", "cfgs", ".", "LOSS", ".", "topk_gamma", ",", "\n", "sup_k", "=", "int", "(", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", "*", "cfgs", ".", "LOSS", ".", "topk_nu", ")", ")", "\n", "\n", "", "", "if", "step", "%", "cfgs", ".", "RUN", ".", "save_freq", "==", "0", ":", "\n", "# visuailize fake images", "\n", "                ", "if", "global_rank", "==", "0", ":", "\n", "                   ", "worker", ".", "visualize_fake_images", "(", "num_cols", "=", "num_cols", ",", "current_step", "=", "step", ")", "\n", "\n", "# evaluate GAN for monitoring purpose", "\n", "", "if", "len", "(", "cfgs", ".", "RUN", ".", "eval_metrics", ")", ":", "\n", "                    ", "is_best", "=", "worker", ".", "evaluate", "(", "step", "=", "step", ",", "metrics", "=", "cfgs", ".", "RUN", ".", "eval_metrics", ",", "writing", "=", "True", ",", "training", "=", "True", ")", "\n", "\n", "# save GAN in \"./checkpoints/RUN_NAME/*\"", "\n", "", "if", "global_rank", "==", "0", ":", "\n", "                    ", "worker", ".", "save", "(", "step", "=", "step", ",", "is_best", "=", "is_best", ")", "\n", "\n", "# stop processes until all processes arrive", "\n", "", "if", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ":", "\n", "                    ", "dist", ".", "barrier", "(", "worker", ".", "group", ")", "\n", "\n", "", "", "", "if", "global_rank", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"End of training!\"", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# re-evaluate the best GAN and conduct ordered analyses", "\n", "# -----------------------------------------------------------------------------", "\n", "", "", "worker", ".", "training", ",", "worker", ".", "epoch_counter", "=", "False", ",", "epoch", "\n", "worker", ".", "gen_ctlr", ".", "standing_statistics", "=", "cfgs", ".", "RUN", ".", "standing_statistics", "\n", "worker", ".", "gen_ctlr", ".", "standing_max_batch", "=", "cfgs", ".", "RUN", ".", "standing_max_batch", "\n", "worker", ".", "gen_ctlr", ".", "standing_step", "=", "cfgs", ".", "RUN", ".", "standing_step", "\n", "\n", "if", "global_rank", "==", "0", ":", "\n", "        ", "best_step", "=", "ckpt", ".", "load_best_model", "(", "ckpt_dir", "=", "cfgs", ".", "RUN", ".", "ckpt_dir", ",", "\n", "Gen", "=", "Gen", ",", "\n", "Dis", "=", "Dis", ",", "\n", "apply_g_ema", "=", "cfgs", ".", "MODEL", ".", "apply_g_ema", ",", "\n", "Gen_ema", "=", "Gen_ema", ",", "\n", "ema", "=", "ema", ")", "\n", "", "if", "len", "(", "cfgs", ".", "RUN", ".", "eval_metrics", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "cfgs", ".", "RUN", ".", "num_eval", ")", ":", "\n", "            ", "if", "global_rank", "==", "0", ":", "\n", "                ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "_", "=", "worker", ".", "evaluate", "(", "step", "=", "best_step", ",", "metrics", "=", "cfgs", ".", "RUN", ".", "eval_metrics", ",", "writing", "=", "False", ",", "training", "=", "False", ")", "\n", "\n", "", "", "if", "cfgs", ".", "RUN", ".", "save_real_images", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "worker", ".", "save_real_images", "(", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "save_fake_images", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "save_fake_images", "(", "num_images", "=", "cfgs", ".", "RUN", ".", "save_fake_images_num", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "vis_fake_images", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "visualize_fake_images", "(", "num_cols", "=", "num_cols", ",", "current_step", "=", "best_step", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "k_nearest_neighbor", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "run_k_nearest_neighbor", "(", "dataset", "=", "eval_dataset", ",", "num_rows", "=", "num_rows", ",", "num_cols", "=", "num_cols", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "interpolation", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "run_linear_interpolation", "(", "num_rows", "=", "num_rows", ",", "num_cols", "=", "num_cols", ",", "fix_z", "=", "True", ",", "fix_y", "=", "False", ")", "\n", "worker", ".", "run_linear_interpolation", "(", "num_rows", "=", "num_rows", ",", "num_cols", "=", "num_cols", ",", "fix_z", "=", "False", ",", "fix_y", "=", "True", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "frequency_analysis", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "run_frequency_analysis", "(", "dataloader", "=", "eval_dataloader", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "tsne_analysis", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "run_tsne", "(", "dataloader", "=", "eval_dataloader", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "intra_class_fid", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "calculate_intra_class_fid", "(", "dataset", "=", "eval_dataset", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "semantic_factorization", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "run_semantic_factorization", "(", "num_rows", "=", "cfgs", ".", "RUN", ".", "num_semantic_axis", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "maximum_variations", "=", "cfgs", ".", "RUN", ".", "maximum_variations", ")", "\n", "", "if", "cfgs", ".", "RUN", ".", "GAN_train", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "compute_GAN_train_or_test_classifier_accuracy_score", "(", "GAN_train", "=", "True", ",", "GAN_test", "=", "False", ")", "\n", "\n", "", "if", "cfgs", ".", "RUN", ".", "GAN_test", ":", "\n", "        ", "if", "global_rank", "==", "0", ":", "\n", "            ", "print", "(", "\"\"", ")", ",", "logger", ".", "info", "(", "\"-\"", "*", "80", ")", "\n", "", "worker", ".", "compute_GAN_train_or_test_classifier_accuracy_score", "(", "GAN_train", "=", "False", ",", "GAN_test", "=", "True", ")", "\n", "\n", "", "if", "global_rank", "==", "0", ":", "\n", "        ", "wandb", ".", "finish", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.suppress_tracer_warnings.__enter__": [[72, 76], ["super().__enter__", "warnings.simplefilter"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.__enter__"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__enter__", "(", ")", "\n", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "torch", ".", "jit", ".", "TracerWarning", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant": [[24, 44], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape": [[82, 96], ["enumerate", "len", "AssertionError", "zip", "isinstance", "isinstance", "len", "style_misc.suppress_tracer_warnings", "symbolic_assert", "torch.equal", "style_misc.suppress_tracer_warnings", "symbolic_assert", "AssertionError", "torch.as_tensor", "torch.equal", "torch.as_tensor"], "function", ["None"], ["", "", "def", "assert_shape", "(", "tensor", ",", "ref_shape", ")", ":", "\n", "    ", "if", "tensor", ".", "ndim", "!=", "len", "(", "ref_shape", ")", ":", "\n", "        ", "raise", "AssertionError", "(", "f\"Wrong number of dimensions: got {tensor.ndim}, expected {len(ref_shape)}\"", ")", "\n", "", "for", "idx", ",", "(", "size", ",", "ref_size", ")", "in", "enumerate", "(", "zip", "(", "tensor", ".", "shape", ",", "ref_shape", ")", ")", ":", "\n", "        ", "if", "ref_size", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "ref_size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "torch", ".", "as_tensor", "(", "size", ")", ",", "ref_size", ")", ",", "f\"Wrong size for dimension {idx}\"", ")", "\n", "", "", "elif", "isinstance", "(", "size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "size", ",", "torch", ".", "as_tensor", "(", "ref_size", ")", ")", ",", "f\"Wrong size for dimension {idx}: expected {ref_size}\"", ")", "\n", "", "", "elif", "size", "!=", "ref_size", ":", "\n", "            ", "raise", "AssertionError", "(", "f\"Wrong size for dimension {idx}: got {size}, expected {ref_size}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.cr.apply_cr_aug": [[13, 21], ["cr.random_flip", "cr.random_translation", "x.contiguous.contiguous"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.cr.random_flip", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.cr.random_translation"], ["def", "apply_cr_aug", "(", "x", ",", "flip", "=", "True", ",", "translation", "=", "True", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "x", "=", "random_flip", "(", "x", ",", "0.5", ")", "\n", "", "if", "translation", ":", "\n", "        ", "x", "=", "random_translation", "(", "x", ",", "1", "/", "8", ")", "\n", "", "if", "flip", "or", "translation", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.cr.random_flip": [[23, 31], ["x.clone", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "flip_mask.type().view().repeat.type().view().repeat", "torch.flip().view", "torch.flip().view", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "flip_mask.type().view().repeat.type().view", "torch.flip", "torch.flip", "x[].view", "torch.FloatTensor", "torch.FloatTensor", "flip_mask.type().view().repeat.type"], "function", ["None"], ["", "def", "random_flip", "(", "x", ",", "p", ")", ":", "\n", "    ", "x_out", "=", "x", ".", "clone", "(", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "flip_prob", "=", "torch", ".", "FloatTensor", "(", "n", ",", "1", ")", ".", "uniform_", "(", "0.0", ",", "1.0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "flip_mask", "=", "flip_prob", "<", "p", "\n", "flip_mask", "=", "flip_mask", ".", "type", "(", "torch", ".", "bool", ")", ".", "view", "(", "n", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "x_out", "[", "flip_mask", "]", "=", "torch", ".", "flip", "(", "x", "[", "flip_mask", "]", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", ",", "[", "3", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.cr.random_translation": [[33, 49], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "F.pad.permute().contiguous", "F.pad.permute"], "function", ["None"], ["", "def", "random_translation", "(", "x", ",", "ratio", ")", ":", "\n", "    ", "max_t_x", ",", "max_t_y", "=", "int", "(", "x", ".", "shape", "[", "2", "]", "*", "ratio", ")", ",", "int", "(", "x", ".", "shape", "[", "3", "]", "*", "ratio", ")", "\n", "t_x", "=", "torch", ".", "randint", "(", "-", "max_t_x", ",", "max_t_x", "+", "1", ",", "size", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "t_y", "=", "torch", ".", "randint", "(", "-", "max_t_y", ",", "max_t_y", "+", "1", ",", "size", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "shape", "[", "3", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "\n", "grid_x", "=", "(", "grid_x", "+", "t_x", ")", "+", "max_t_x", "\n", "grid_y", "=", "(", "grid_y", "+", "t_y", ")", "+", "max_t_y", "\n", "x_pad", "=", "F", ".", "pad", "(", "input", "=", "x", ",", "pad", "=", "[", "max_t_y", ",", "max_t_y", ",", "max_t_x", ",", "max_t_x", "]", ",", "mode", "=", "'reflect'", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.AdaAugment.__init__": [[116, 178], ["super().__init__", "ada_aug.AdaAugment.register_buffer", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "list", "float", "float", "float", "float", "float", "ada_aug.AdaAugment.register_buffer", "numpy.asarray", "numpy.eye", "range", "ada_aug.AdaAugment.register_buffer", "torch.ones", "utils.style_ops.upfirdn2d.setup_filter", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "xflip", "=", "0", ",", "rotate90", "=", "0", ",", "xint", "=", "0", ",", "xint_max", "=", "0.125", ",", "\n", "scale", "=", "0", ",", "rotate", "=", "0", ",", "aniso", "=", "0", ",", "xfrac", "=", "0", ",", "scale_std", "=", "0.2", ",", "rotate_max", "=", "1", ",", "aniso_std", "=", "0.2", ",", "xfrac_std", "=", "0.125", ",", "\n", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "lumaflip", "=", "0", ",", "hue", "=", "0", ",", "saturation", "=", "0", ",", "brightness_std", "=", "0.2", ",", "contrast_std", "=", "0.5", ",", "hue_max", "=", "1", ",", "saturation_std", "=", "1", ",", "\n", "imgfilter", "=", "0", ",", "imgfilter_bands", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "imgfilter_std", "=", "1", ",", "\n", "noise", "=", "0", ",", "cutout", "=", "0", ",", "noise_std", "=", "0.1", ",", "cutout_size", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'p'", ",", "torch", ".", "ones", "(", "[", "]", ")", ")", "# Overall multiplier for augmentation probability.", "\n", "\n", "# Pixel blitting.", "\n", "self", ".", "xflip", "=", "float", "(", "xflip", ")", "# Probability multiplier for x-flip.", "\n", "self", ".", "rotate90", "=", "float", "(", "rotate90", ")", "# Probability multiplier for 90 degree rotations.", "\n", "self", ".", "xint", "=", "float", "(", "xint", ")", "# Probability multiplier for integer translation.", "\n", "self", ".", "xint_max", "=", "float", "(", "xint_max", ")", "# Range of integer translation, relative to image dimensions.", "\n", "\n", "# General geometric transformations.", "\n", "self", ".", "scale", "=", "float", "(", "scale", ")", "# Probability multiplier for isotropic scaling.", "\n", "self", ".", "rotate", "=", "float", "(", "rotate", ")", "# Probability multiplier for arbitrary rotation.", "\n", "self", ".", "aniso", "=", "float", "(", "aniso", ")", "# Probability multiplier for anisotropic scaling.", "\n", "self", ".", "xfrac", "=", "float", "(", "xfrac", ")", "# Probability multiplier for fractional translation.", "\n", "self", ".", "scale_std", "=", "float", "(", "scale_std", ")", "# Log2 standard deviation of isotropic scaling.", "\n", "self", ".", "rotate_max", "=", "float", "(", "rotate_max", ")", "# Range of arbitrary rotation, 1 = full circle.", "\n", "self", ".", "aniso_std", "=", "float", "(", "aniso_std", ")", "# Log2 standard deviation of anisotropic scaling.", "\n", "self", ".", "xfrac_std", "=", "float", "(", "xfrac_std", ")", "# Standard deviation of frational translation, relative to image dimensions.", "\n", "\n", "# Color transformations.", "\n", "self", ".", "brightness", "=", "float", "(", "brightness", ")", "# Probability multiplier for brightness.", "\n", "self", ".", "contrast", "=", "float", "(", "contrast", ")", "# Probability multiplier for contrast.", "\n", "self", ".", "lumaflip", "=", "float", "(", "lumaflip", ")", "# Probability multiplier for luma flip.", "\n", "self", ".", "hue", "=", "float", "(", "hue", ")", "# Probability multiplier for hue rotation.", "\n", "self", ".", "saturation", "=", "float", "(", "saturation", ")", "# Probability multiplier for saturation.", "\n", "self", ".", "brightness_std", "=", "float", "(", "brightness_std", ")", "# Standard deviation of brightness.", "\n", "self", ".", "contrast_std", "=", "float", "(", "contrast_std", ")", "# Log2 standard deviation of contrast.", "\n", "self", ".", "hue_max", "=", "float", "(", "hue_max", ")", "# Range of hue rotation, 1 = full circle.", "\n", "self", ".", "saturation_std", "=", "float", "(", "saturation_std", ")", "# Log2 standard deviation of saturation.", "\n", "\n", "# Image-space filtering.", "\n", "self", ".", "imgfilter", "=", "float", "(", "imgfilter", ")", "# Probability multiplier for image-space filtering.", "\n", "self", ".", "imgfilter_bands", "=", "list", "(", "imgfilter_bands", ")", "# Probability multipliers for individual frequency bands.", "\n", "self", ".", "imgfilter_std", "=", "float", "(", "imgfilter_std", ")", "# Log2 standard deviation of image-space filter amplification.", "\n", "\n", "# Image-space corruptions.", "\n", "self", ".", "noise", "=", "float", "(", "noise", ")", "# Probability multiplier for additive RGB noise.", "\n", "self", ".", "cutout", "=", "float", "(", "cutout", ")", "# Probability multiplier for cutout.", "\n", "self", ".", "noise_std", "=", "float", "(", "noise_std", ")", "# Standard deviation of additive RGB noise.", "\n", "self", ".", "cutout_size", "=", "float", "(", "cutout_size", ")", "# Size of the cutout rectangle, relative to image dimensions.", "\n", "\n", "# Setup orthogonal lowpass filter for geometric augmentations.", "\n", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "\n", "# Construct filter bank for image-space filtering.", "\n", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.AdaAugment.forward": [[179, 428], ["torch.eye", "torch.eye", "utils.constant", "isinstance", "torch.as_tensor", "torch.floor", "torch.where", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.where", "torch.sqrt", "torch.where", "torch.exp2", "torch.where", "torch.where", "torch.where", "ada_aug.matrix", "cp[].permute().flatten", "margin.min.min.max", "margin.min.min.min", "margin.min.min.ceil().to", "torch.nn.functional.pad", "utils.style_ops.upfirdn2d.upsample2d", "torch.nn.functional.affine_grid", "utils.style_ops.grid_sample_gradfix.grid_sample", "utils.style_ops.upfirdn2d.downsample2d", "torch.where", "torch.exp2", "torch.where", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.where", "images.reshape.reshape.reshape", "images.reshape.reshape.reshape", "utils.constant", "torch.ones", "enumerate", "Hz_prime.reshape.reshape.unsqueeze().repeat", "Hz_prime.reshape.reshape.reshape", "images.reshape.reshape.reshape", "torch.nn.functional.pad", "utils.style_ops.conv2d_gradfix.conv2d", "utils.style_ops.conv2d_gradfix.conv2d", "images.reshape.reshape.reshape", "torch.where", "torch.full", "torch.where", "torch.rand", "torch.arange().reshape", "torch.arange().reshape", "torch.logical_or().to", "torch.zeros_like", "torch.full_like", "ada_aug.scale2d_inv", "torch.zeros_like", "torch.full_like", "ada_aug.rotate2d_inv", "torch.zeros_like", "torch.full_like", "ada_aug.translate2d_inv", "torch.ones_like", "torch.full_like", "ada_aug.scale2d_inv", "torch.zeros_like", "torch.full_like", "ada_aug.rotate2d_inv", "torch.ones_like", "torch.full_like", "ada_aug.scale2d_inv", "torch.zeros_like", "torch.zeros_like", "ada_aug.rotate2d_inv", "torch.randn", "torch.zeros_like", "torch.full_like", "ada_aug.translate2d_inv", "matrix.t", "torch.cat().max", "utils.constant", "utils.constant", "utils.constant", "ada_aug.translate2d", "ada_aug.scale2d_inv", "ada_aug.translate2d_inv", "ada_aug.scale2d_inv", "torch.randn", "torch.zeros_like", "torch.full_like", "ada_aug.translate3d", "torch.ones_like", "torch.full_like", "ada_aug.scale3d", "numpy.asarray", "numpy.sqrt", "torch.zeros_like", "torch.full_like", "torch.zeros_like", "torch.full_like", "ada_aug.rotate3d", "torch.ones_like", "torch.full_like", "len", "torch.exp2", "torch.where", "torch.ones", "torch.randn().abs", "torch.zeros_like", "torch.full_like", "torch.zeros_like", "torch.full_like", "torch.full_like", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.round", "torch.round", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.rand", "cp[].permute", "margin.min.min.ceil", "ada_aug.scale2d", "ada_aug.translate2d", "ada_aug.scale2d", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "torch.rand", "torch.rand", "torch.floor", "torch.rand", "torch.randn", "torch.rand", "torch.exp2", "utils.constant.ger", "C[].mean", "ValueError", "numpy.array", "torch.ones_like", "Hz_prime.reshape.reshape.unsqueeze", "Hz_prime.reshape.reshape.unsqueeze", "Hz_prime.reshape.reshape.unsqueeze", "torch.rand", "torch.randn", "torch.rand", "torch.arange", "torch.arange", "torch.logical_or", "torch.rand", "torch.erfinv", "torch.cat", "torch.erfinv", "torch.randn", "torch.rand", "torch.full_like", "torch.ones_like", "torch.randn", "torch.erfinv", "torch.erfinv", "torch.rand", "torch.erfinv", "torch.rand", "torch.erfinv", "utils.constant.ger", "torch.rand", "torch.erfinv", "utils.constant.ger", "C[].sum", "torch.exp2", "torch.erfinv", "torch.ones.square"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upsample2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.downsample2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate3d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale3d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate3d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d"], ["", "def", "forward", "(", "self", ",", "images", ",", "debug_percentile", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "images", ",", "torch", ".", "Tensor", ")", "and", "images", ".", "ndim", "==", "4", "\n", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "            ", "debug_percentile", "=", "torch", ".", "as_tensor", "(", "debug_percentile", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "# -------------------------------------", "\n", "# Select parameters for pixel blitting.", "\n", "# -------------------------------------", "\n", "\n", "# Initialize inverse homogeneous 2D transform: G_inv @ pixel_out ==> pixel_in", "\n", "", "I_3", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "I_3", "\n", "\n", "# Apply x-flip with probability (xflip * strength).", "\n", "if", "self", ".", "xflip", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xflip", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "2", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "1", "-", "2", "*", "i", ",", "1", ")", "\n", "\n", "# Apply 90 degree rotations with probability (rotate90 * strength).", "\n", "", "if", "self", ".", "rotate90", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "4", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "rotate90", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "4", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "np", ".", "pi", "/", "2", "*", "i", ")", "\n", "\n", "# Apply integer translation with probability (xint * strength).", "\n", "", "if", "self", ".", "xint", ">", "0", ":", "\n", "            ", "t", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "self", ".", "xint_max", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xint", "*", "self", ".", "p", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "t", "=", "torch", ".", "full_like", "(", "t", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "xint_max", ")", "\n", "", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "torch", ".", "round", "(", "t", "[", ":", ",", "0", "]", "*", "width", ")", ",", "torch", ".", "round", "(", "t", "[", ":", ",", "1", "]", "*", "height", ")", ")", "\n", "\n", "# --------------------------------------------------------", "\n", "# Select parameters for general geometric transformations.", "\n", "# --------------------------------------------------------", "\n", "\n", "# Apply isotropic scaling with probability (scale * strength).", "\n", "", "if", "self", ".", "scale", ">", "0", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "scale_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "scale", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "scale_std", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "s", ")", "\n", "\n", "# Apply pre-rotation with probability p_rot.", "\n", "", "p_rot", "=", "1", "-", "torch", ".", "sqrt", "(", "(", "1", "-", "self", ".", "rotate", "*", "self", ".", "p", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", "# P(pre OR post) = p", "\n", "if", "self", ".", "rotate", ">", "0", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "p_rot", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "full_like", "(", "theta", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "theta", ")", "# Before anisotropic scaling.", "\n", "\n", "# Apply anisotropic scaling with probability (aniso * strength).", "\n", "", "if", "self", ".", "aniso", ">", "0", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "aniso_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "aniso", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "aniso_std", ")", ")", "\n", "", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "1", "/", "s", ")", "\n", "\n", "# Apply post-rotation with probability p_rot.", "\n", "", "if", "self", ".", "rotate", ">", "0", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "rotate_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "p_rot", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "G_inv", "=", "G_inv", "@", "rotate2d_inv", "(", "-", "theta", ")", "# After anisotropic scaling.", "\n", "\n", "# Apply fractional translation with probability (xfrac * strength).", "\n", "", "if", "self", ".", "xfrac", ">", "0", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "self", ".", "xfrac_std", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "xfrac", "*", "self", ".", "p", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "t", "=", "torch", ".", "full_like", "(", "t", ",", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "xfrac_std", ")", "\n", "", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "t", "[", ":", ",", "0", "]", "*", "width", ",", "t", "[", ":", ",", "1", "]", "*", "height", ")", "\n", "\n", "# ----------------------------------", "\n", "# Execute geometric transformations.", "\n", "# ----------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "G_inv", "is", "not", "I_3", ":", "\n", "\n", "# Calculate padding.", "\n", "            ", "cx", "=", "(", "width", "-", "1", ")", "/", "2", "\n", "cy", "=", "(", "height", "-", "1", ")", "/", "2", "\n", "cp", "=", "matrix", "(", "[", "-", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "cy", ",", "1", "]", ",", "[", "-", "cx", ",", "cy", ",", "1", "]", ",", "device", "=", "device", ")", "# [idx, xyz]", "\n", "cp", "=", "G_inv", "@", "cp", ".", "t", "(", ")", "# [batch, xyz, idx]", "\n", "Hz_pad", "=", "self", ".", "Hz_geom", ".", "shape", "[", "0", "]", "//", "4", "\n", "margin", "=", "cp", "[", ":", ",", ":", "2", ",", ":", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "1", ")", "# [xy, batch * idx]", "\n", "margin", "=", "torch", ".", "cat", "(", "[", "-", "margin", ",", "margin", "]", ")", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "# [x0, y0, x1, y1]", "\n", "margin", "=", "margin", "+", "misc", ".", "constant", "(", "[", "Hz_pad", "*", "2", "-", "cx", ",", "Hz_pad", "*", "2", "-", "cy", "]", "*", "2", ",", "device", "=", "device", ")", "\n", "margin", "=", "margin", ".", "max", "(", "misc", ".", "constant", "(", "[", "0", ",", "0", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "margin", "=", "margin", ".", "min", "(", "misc", ".", "constant", "(", "[", "width", "-", "1", ",", "height", "-", "1", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "mx0", ",", "my0", ",", "mx1", ",", "my1", "=", "margin", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n", "# Pad image and adjust origin.", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "mx0", ",", "mx1", ",", "my0", ",", "my1", "]", ",", "mode", "=", "'reflect'", ")", "\n", "G_inv", "=", "translate2d", "(", "(", "mx0", "-", "mx1", ")", "/", "2", ",", "(", "my0", "-", "my1", ")", "/", "2", ")", "@", "G_inv", "\n", "\n", "# Upsample.", "\n", "images", "=", "upfirdn2d", ".", "upsample2d", "(", "x", "=", "images", ",", "f", "=", "self", ".", "Hz_geom", ",", "up", "=", "2", ")", "\n", "G_inv", "=", "scale2d", "(", "2", ",", "2", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", ",", "2", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "translate2d", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "@", "G_inv", "@", "translate2d_inv", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "\n", "\n", "# Execute transformation.", "\n", "shape", "=", "[", "batch_size", ",", "num_channels", ",", "(", "height", "+", "Hz_pad", "*", "2", ")", "*", "2", ",", "(", "width", "+", "Hz_pad", "*", "2", ")", "*", "2", "]", "\n", "G_inv", "=", "scale2d", "(", "2", "/", "images", ".", "shape", "[", "3", "]", ",", "2", "/", "images", ".", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", "/", "shape", "[", "3", "]", ",", "2", "/", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", "=", "G_inv", "[", ":", ",", ":", "2", ",", ":", "]", ",", "size", "=", "shape", ",", "align_corners", "=", "False", ")", "\n", "images", "=", "grid_sample_gradfix", ".", "grid_sample", "(", "images", ",", "grid", ")", "\n", "\n", "# Downsample and crop.", "\n", "images", "=", "upfirdn2d", ".", "downsample2d", "(", "x", "=", "images", ",", "f", "=", "self", ".", "Hz_geom", ",", "down", "=", "2", ",", "padding", "=", "-", "Hz_pad", "*", "2", ",", "flip_filter", "=", "True", ")", "\n", "\n", "# --------------------------------------------", "\n", "# Select parameters for color transformations.", "\n", "# --------------------------------------------", "\n", "\n", "# Initialize homogeneous 3D transformation matrix: C @ color_in ==> color_out", "\n", "", "I_4", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", "\n", "C", "=", "I_4", "\n", "\n", "# Apply brightness with probability (brightness * strength).", "\n", "if", "self", ".", "brightness", ">", "0", ":", "\n", "            ", "b", "=", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "brightness_std", "\n", "b", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "brightness", "*", "self", ".", "p", ",", "b", ",", "torch", ".", "zeros_like", "(", "b", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "b", "=", "torch", ".", "full_like", "(", "b", ",", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "brightness_std", ")", "\n", "", "C", "=", "translate3d", "(", "b", ",", "b", ",", "b", ")", "@", "C", "\n", "\n", "# Apply contrast with probability (contrast * strength).", "\n", "", "if", "self", ".", "contrast", ">", "0", ":", "\n", "            ", "c", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "contrast_std", ")", "\n", "c", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "contrast", "*", "self", ".", "p", ",", "c", ",", "torch", ".", "ones_like", "(", "c", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "c", "=", "torch", ".", "full_like", "(", "c", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "contrast_std", ")", ")", "\n", "", "C", "=", "scale3d", "(", "c", ",", "c", ",", "c", ")", "@", "C", "\n", "\n", "# Apply luma flip with probability (lumaflip * strength).", "\n", "", "v", "=", "misc", ".", "constant", "(", "np", ".", "asarray", "(", "[", "1", ",", "1", ",", "1", ",", "0", "]", ")", "/", "np", ".", "sqrt", "(", "3", ")", ",", "device", "=", "device", ")", "# Luma axis.", "\n", "if", "self", ".", "lumaflip", ">", "0", ":", "\n", "            ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "lumaflip", "*", "self", ".", "p", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "i", "=", "torch", ".", "full_like", "(", "i", ",", "torch", ".", "floor", "(", "debug_percentile", "*", "2", ")", ")", "\n", "", "C", "=", "(", "I_4", "-", "2", "*", "v", ".", "ger", "(", "v", ")", "*", "i", ")", "@", "C", "# Householder reflection.", "\n", "\n", "# Apply hue rotation with probability (hue * strength).", "\n", "", "if", "self", ".", "hue", ">", "0", "and", "num_channels", ">", "1", ":", "\n", "            ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "hue_max", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "hue", "*", "self", ".", "p", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "theta", "=", "torch", ".", "full_like", "(", "theta", ",", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "self", ".", "hue_max", ")", "\n", "", "C", "=", "rotate3d", "(", "v", ",", "theta", ")", "@", "C", "# Rotate around v.", "\n", "\n", "# Apply saturation with probability (saturation * strength).", "\n", "", "if", "self", ".", "saturation", ">", "0", "and", "num_channels", ">", "1", ":", "\n", "            ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "*", "self", ".", "saturation_std", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "saturation", "*", "self", ".", "p", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "s", "=", "torch", ".", "full_like", "(", "s", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "saturation_std", ")", ")", "\n", "", "C", "=", "(", "v", ".", "ger", "(", "v", ")", "+", "(", "I_4", "-", "v", ".", "ger", "(", "v", ")", ")", "*", "s", ")", "@", "C", "\n", "\n", "# ------------------------------", "\n", "# Execute color transformations.", "\n", "# ------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "C", "is", "not", "I_4", ":", "\n", "            ", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", "*", "width", "]", ")", "\n", "if", "num_channels", "==", "3", ":", "\n", "                ", "images", "=", "C", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "images", "+", "C", "[", ":", ",", ":", "3", ",", "3", ":", "]", "\n", "", "elif", "num_channels", "==", "1", ":", "\n", "                ", "C", "=", "C", "[", ":", ",", ":", "3", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "images", "=", "images", "*", "C", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "2", ",", "keepdims", "=", "True", ")", "+", "C", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Image must be RGB (3 channels) or L (1 channel)'", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "\n", "# ----------------------", "\n", "# Image-space filtering.", "\n", "# ----------------------", "\n", "\n", "", "if", "self", ".", "imgfilter", ">", "0", ":", "\n", "            ", "num_bands", "=", "self", ".", "Hz_fbank", ".", "shape", "[", "0", "]", "\n", "assert", "len", "(", "self", ".", "imgfilter_bands", ")", "==", "num_bands", "\n", "expected_power", "=", "misc", ".", "constant", "(", "np", ".", "array", "(", "[", "10", ",", "1", ",", "1", ",", "1", "]", ")", "/", "13", ",", "device", "=", "device", ")", "# Expected power spectrum (1/f).", "\n", "\n", "# Apply amplification for each band with probability (imgfilter * strength * band_strength).", "\n", "g", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Global gain vector (identity).", "\n", "for", "i", ",", "band_strength", "in", "enumerate", "(", "self", ".", "imgfilter_bands", ")", ":", "\n", "                ", "t_i", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "self", ".", "imgfilter_std", ")", "\n", "t_i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "self", ".", "imgfilter", "*", "self", ".", "p", "*", "band_strength", ",", "t_i", ",", "torch", ".", "ones_like", "(", "t_i", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                    ", "t_i", "=", "torch", ".", "full_like", "(", "t_i", ",", "torch", ".", "exp2", "(", "torch", ".", "erfinv", "(", "debug_percentile", "*", "2", "-", "1", ")", "*", "self", ".", "imgfilter_std", ")", ")", "if", "band_strength", ">", "0", "else", "torch", ".", "ones_like", "(", "t_i", ")", "\n", "", "t", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Temporary gain vector.", "\n", "t", "[", ":", ",", "i", "]", "=", "t_i", "# Replace i'th element.", "\n", "t", "=", "t", "/", "(", "expected_power", "*", "t", ".", "square", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ".", "sqrt", "(", ")", "# Normalize power.", "\n", "g", "=", "g", "*", "t", "# Accumulate into global gain.", "\n", "\n", "# Construct combined amplification filter.", "\n", "", "Hz_prime", "=", "g", "@", "self", ".", "Hz_fbank", "# [batch, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "num_channels", ",", "1", "]", ")", "# [batch, channels, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "reshape", "(", "[", "batch_size", "*", "num_channels", ",", "1", ",", "-", "1", "]", ")", "# [batch * channels, 1, tap]", "\n", "\n", "# Apply filter.", "\n", "p", "=", "self", ".", "Hz_fbank", ".", "shape", "[", "1", "]", "//", "2", "\n", "images", "=", "images", ".", "reshape", "(", "[", "1", ",", "batch_size", "*", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "p", ",", "p", ",", "p", ",", "p", "]", ",", "mode", "=", "'reflect'", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "\n", "# ------------------------", "\n", "# Image-space corruptions.", "\n", "# ------------------------", "\n", "\n", "# Apply additive RGB noise with probability (noise * strength).", "\n", "", "if", "self", ".", "noise", ">", "0", ":", "\n", "            ", "sigma", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", ".", "abs", "(", ")", "*", "self", ".", "noise_std", "\n", "sigma", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "noise", "*", "self", ".", "p", ",", "sigma", ",", "torch", ".", "zeros_like", "(", "sigma", ")", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "sigma", "=", "torch", ".", "full_like", "(", "sigma", ",", "torch", ".", "erfinv", "(", "debug_percentile", ")", "*", "self", ".", "noise_std", ")", "\n", "", "images", "=", "images", "+", "torch", ".", "randn", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ",", "device", "=", "device", ")", "*", "sigma", "\n", "\n", "# Apply cutout with probability (cutout * strength).", "\n", "", "if", "self", ".", "cutout", ">", "0", ":", "\n", "            ", "size", "=", "torch", ".", "full", "(", "[", "batch_size", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "self", ".", "cutout_size", ",", "device", "=", "device", ")", "\n", "size", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "<", "self", ".", "cutout", "*", "self", ".", "p", ",", "size", ",", "torch", ".", "zeros_like", "(", "size", ")", ")", "\n", "center", "=", "torch", ".", "rand", "(", "[", "batch_size", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "device", ")", "\n", "if", "debug_percentile", "is", "not", "None", ":", "\n", "                ", "size", "=", "torch", ".", "full_like", "(", "size", ",", "self", ".", "cutout_size", ")", "\n", "center", "=", "torch", ".", "full_like", "(", "center", ",", "debug_percentile", ")", "\n", "", "coord_x", "=", "torch", ".", "arange", "(", "width", ",", "device", "=", "device", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "coord_y", "=", "torch", ".", "arange", "(", "height", ",", "device", "=", "device", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "mask_x", "=", "(", "(", "(", "coord_x", "+", "0.5", ")", "/", "width", "-", "center", "[", ":", ",", "0", "]", ")", ".", "abs", "(", ")", ">=", "size", "[", ":", ",", "0", "]", "/", "2", ")", "\n", "mask_y", "=", "(", "(", "(", "coord_y", "+", "0.5", ")", "/", "height", "-", "center", "[", ":", ",", "1", "]", ")", ".", "abs", "(", ")", ">=", "size", "[", ":", ",", "1", "]", "/", "2", ")", "\n", "mask", "=", "torch", ".", "logical_or", "(", "mask_x", ",", "mask_y", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "images", "=", "images", "*", "mask", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix": [[42, 51], ["all", "torch.stack().reshape", "len", "utils.constant", "isinstance", "numpy.asarray", "isinstance", "utils.constant", "torch.stack", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.constant"], ["def", "matrix", "(", "*", "rows", ",", "device", "=", "None", ")", ":", "\n", "    ", "assert", "all", "(", "len", "(", "row", ")", "==", "len", "(", "rows", "[", "0", "]", ")", "for", "row", "in", "rows", ")", "\n", "elems", "=", "[", "x", "for", "row", "in", "rows", "for", "x", "in", "row", "]", "\n", "ref", "=", "[", "x", "for", "x", "in", "elems", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "]", "\n", "if", "len", "(", "ref", ")", "==", "0", ":", "\n", "        ", "return", "misc", ".", "constant", "(", "np", ".", "asarray", "(", "rows", ")", ",", "device", "=", "device", ")", "\n", "", "assert", "device", "is", "None", "or", "device", "==", "ref", "[", "0", "]", ".", "device", "\n", "elems", "=", "[", "x", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "misc", ".", "constant", "(", "x", ",", "shape", "=", "ref", "[", "0", "]", ".", "shape", ",", "device", "=", "ref", "[", "0", "]", ".", "device", ")", "for", "x", "in", "elems", "]", "\n", "return", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "ref", "[", "0", "]", ".", "shape", "+", "(", "len", "(", "rows", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d": [[52, 58], ["ada_aug.matrix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "translate2d", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate3d": [[59, 66], ["ada_aug.matrix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "translate3d", "(", "tx", ",", "ty", ",", "tz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "tz", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d": [[67, 73], ["ada_aug.matrix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "scale2d", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale3d": [[74, 81], ["ada_aug.matrix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "scale3d", "(", "sx", ",", "sy", ",", "sz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "sz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d": [[82, 88], ["ada_aug.matrix", "torch.cos", "torch.sin", "torch.sin", "torch.cos"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "rotate2d", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "torch", ".", "cos", "(", "theta", ")", ",", "torch", ".", "sin", "(", "-", "theta", ")", ",", "0", "]", ",", "\n", "[", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate3d": [[89, 98], ["torch.sin", "torch.cos", "ada_aug.matrix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.matrix"], ["", "def", "rotate3d", "(", "v", ",", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "vx", "=", "v", "[", "...", ",", "0", "]", ";", "vy", "=", "v", "[", "...", ",", "1", "]", ";", "vz", "=", "v", "[", "...", ",", "2", "]", "\n", "s", "=", "torch", ".", "sin", "(", "theta", ")", ";", "c", "=", "torch", ".", "cos", "(", "theta", ")", ";", "cc", "=", "1", "-", "c", "\n", "return", "matrix", "(", "\n", "[", "vx", "*", "vx", "*", "cc", "+", "c", ",", "vx", "*", "vy", "*", "cc", "-", "vz", "*", "s", ",", "vx", "*", "vz", "*", "cc", "+", "vy", "*", "s", ",", "0", "]", ",", "\n", "[", "vy", "*", "vx", "*", "cc", "+", "vz", "*", "s", ",", "vy", "*", "vy", "*", "cc", "+", "c", ",", "vy", "*", "vz", "*", "cc", "-", "vx", "*", "s", ",", "0", "]", ",", "\n", "[", "vz", "*", "vx", "*", "cc", "-", "vy", "*", "s", ",", "vz", "*", "vy", "*", "cc", "+", "vx", "*", "s", ",", "vz", "*", "vz", "*", "cc", "+", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d_inv": [[99, 101], ["ada_aug.translate2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.translate2d"], ["", "def", "translate2d_inv", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "translate2d", "(", "-", "tx", ",", "-", "ty", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d_inv": [[102, 104], ["ada_aug.scale2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.scale2d"], ["", "def", "scale2d_inv", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "scale2d", "(", "1", "/", "sx", ",", "1", "/", "sy", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d_inv": [[105, 107], ["ada_aug.rotate2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ada_aug.rotate2d"], ["", "def", "rotate2d_inv", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "rotate2d", "(", "-", "theta", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.ConditionalBatchNorm2d.__init__": [[16, 23], ["torch.Module.__init__", "ops.batchnorm_2d", "MODULES.g_linear", "MODULES.g_linear"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "bn", "=", "batchnorm_2d", "(", "out_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "False", ")", "\n", "\n", "self", ".", "gain", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.ConditionalBatchNorm2d.forward": [[24, 29], ["ops.ConditionalBatchNorm2d.bias().view", "ops.ConditionalBatchNorm2d.bn", "y.size", "y.size", "ops.ConditionalBatchNorm2d.bias", "ops.ConditionalBatchNorm2d.gain"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "gain", "=", "(", "1", "+", "self", ".", "gain", "(", "y", ")", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "self", ".", "bias", "(", "y", ")", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "out", "*", "gain", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.SelfAttention.__init__": [[56, 82], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Softmax", "torch.Softmax", "torch.Parameter", "torch.Parameter", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "is_generator", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "if", "is_generator", ":", "\n", "            ", "self", ".", "conv1x1_theta", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_phi", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_g", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1x1_theta", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_phi", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "8", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_g", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "in_channels", "//", "2", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1x1_attn", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", "//", "2", ",", "out_channels", "=", "in_channels", ",", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.SelfAttention.forward": [[83, 104], ["x.size", "ops.SelfAttention.conv1x1_theta", "theta.view.view.view", "ops.SelfAttention.conv1x1_phi", "ops.SelfAttention.maxpool", "phi.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ops.SelfAttention.softmax", "ops.SelfAttention.conv1x1_g", "ops.SelfAttention.maxpool", "g.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ops.SelfAttention.view", "ops.SelfAttention.conv1x1_attn", "theta.view.view.permute", "ops.SelfAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "# Theta path", "\n", "theta", "=", "self", ".", "conv1x1_theta", "(", "x", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", ")", "\n", "# Phi path", "\n", "phi", "=", "self", ".", "conv1x1_phi", "(", "x", ")", "\n", "phi", "=", "self", ".", "maxpool", "(", "phi", ")", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "ch", "//", "8", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn map", "\n", "attn", "=", "torch", ".", "bmm", "(", "theta", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "phi", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "# g path", "\n", "g", "=", "self", ".", "conv1x1_g", "(", "x", ")", "\n", "g", "=", "self", ".", "maxpool", "(", "g", ")", "\n", "g", "=", "g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", "*", "w", "//", "4", ")", "\n", "# Attn_g", "\n", "attn_g", "=", "torch", ".", "bmm", "(", "g", ",", "attn", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "attn_g", "=", "attn_g", ".", "view", "(", "-", "1", ",", "ch", "//", "2", ",", "h", ",", "w", ")", "\n", "attn_g", "=", "self", ".", "conv1x1_attn", "(", "attn_g", ")", "\n", "return", "x", "+", "self", ".", "sigma", "*", "attn_g", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.LeCamEMA.__init__": [[109, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "init", "=", "7777", ",", "decay", "=", "0.9", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "G_loss", "=", "init", "\n", "self", ".", "D_loss_real", "=", "init", "\n", "self", ".", "D_loss_fake", "=", "init", "\n", "self", ".", "D_real", "=", "init", "\n", "self", ".", "D_fake", "=", "init", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "start_itr", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.LeCamEMA.update": [[118, 133], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "cur", ",", "mode", ",", "itr", ")", ":", "\n", "        ", "if", "itr", "<", "self", ".", "start_itr", ":", "\n", "            ", "decay", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "decay", "=", "self", ".", "decay", "\n", "", "if", "mode", "==", "\"G_loss\"", ":", "\n", "          ", "self", ".", "G_loss", "=", "self", ".", "G_loss", "*", "decay", "+", "cur", "*", "(", "1", "-", "decay", ")", "\n", "", "elif", "mode", "==", "\"D_loss_real\"", ":", "\n", "          ", "self", ".", "D_loss_real", "=", "self", ".", "D_loss_real", "*", "decay", "+", "cur", "*", "(", "1", "-", "decay", ")", "\n", "", "elif", "mode", "==", "\"D_loss_fake\"", ":", "\n", "          ", "self", ".", "D_loss_fake", "=", "self", ".", "D_loss_fake", "*", "decay", "+", "cur", "*", "(", "1", "-", "decay", ")", "\n", "", "elif", "mode", "==", "\"D_real\"", ":", "\n", "          ", "self", ".", "D_real", "=", "self", ".", "D_real", "*", "decay", "+", "cur", "*", "(", "1", "-", "decay", ")", "\n", "", "elif", "mode", "==", "\"D_fake\"", ":", "\n", "          ", "self", ".", "D_fake", "=", "self", ".", "D_fake", "*", "decay", "+", "cur", "*", "(", "1", "-", "decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights": [[135, 163], ["modules", "isinstance", "isinstance", "isinstance", "isinstance", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.normal_", "torch.nn.init.orthogonal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_", "torch.nn.init.normal_", "module.bias.data.fill_", "torch.nn.init.xavier_uniform_"], "function", ["None"], ["", "", "", "def", "init_weights", "(", "modules", ",", "initialize", ")", ":", "\n", "    ", "for", "module", "in", "modules", "(", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "if", "initialize", "==", "\"ortho\"", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "==", "\"N02\"", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "elif", "initialize", "in", "[", "\"glorot\"", ",", "\"xavier\"", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "fill_", "(", "0.", ")", "\n", "", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "initialize", "==", "\"ortho\"", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "module", ".", "weight", ")", "\n", "", "elif", "initialize", "==", "\"N02\"", ":", "\n", "                ", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "0.02", ")", "\n", "", "elif", "initialize", "in", "[", "\"glorot\"", ",", "\"xavier\"", "]", ":", "\n", "                ", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.conv2d": [[165, 174], ["torch.Conv2d"], "function", ["None"], ["", "", "", "def", "conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.deconv2d": [[176, 185], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "deconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.linear": [[187, 189], ["torch.Linear"], "function", ["None"], ["", "def", "linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding": [[191, 193], ["torch.Embedding"], "function", ["None"], ["", "def", "embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.snconv2d": [[195, 205], ["torch.nn.utils.spectral_norm", "torch.Conv2d"], "function", ["None"], ["", "def", "snconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", ",", "\n", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.sndeconv2d": [[207, 217], ["torch.nn.utils.spectral_norm", "torch.ConvTranspose2d"], "function", ["None"], ["", "def", "sndeconv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", ",", "\n", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.snlinear": [[219, 221], ["torch.nn.utils.spectral_norm", "torch.Linear"], "function", ["None"], ["", "def", "snlinear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Linear", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "bias", "=", "bias", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.sn_embedding": [[223, 225], ["torch.nn.utils.spectral_norm", "torch.Embedding"], "function", ["None"], ["", "def", "sn_embedding", "(", "num_embeddings", ",", "embedding_dim", ")", ":", "\n", "    ", "return", "spectral_norm", "(", "nn", ".", "Embedding", "(", "num_embeddings", "=", "num_embeddings", ",", "embedding_dim", "=", "embedding_dim", ")", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d": [[227, 229], ["torch.BatchNorm2d"], "function", ["None"], ["", "def", "batchnorm_2d", "(", "in_features", ",", "eps", "=", "1e-4", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "in_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.conv3x3": [[231, 235], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.adjust_learning_rate": [[237, 249], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "lr_org", ",", "epoch", ",", "total_epoch", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "dataset", "in", "[", "\"CIFAR10\"", ",", "\"CIFAR100\"", "]", ":", "\n", "        ", "lr", "=", "lr_org", "*", "(", "0.1", "**", "(", "epoch", "//", "(", "total_epoch", "*", "0.5", ")", ")", ")", "*", "(", "0.1", "**", "(", "epoch", "//", "(", "total_epoch", "*", "0.75", ")", ")", ")", "\n", "", "elif", "dataset", "in", "[", "\"Tiny_ImageNet\"", ",", "\"ImageNet\"", "]", ":", "\n", "        ", "if", "total_epoch", "==", "300", ":", "\n", "            ", "lr", "=", "lr_org", "*", "(", "0.1", "**", "(", "epoch", "//", "75", ")", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "lr_org", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images": [[251, 256], ["x.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "x.detach().cpu().numpy().astype.detach().cpu().numpy", "x.detach().cpu().numpy().astype.detach().cpu", "x.detach().cpu().numpy().astype.detach"], "function", ["None"], ["", "", "def", "quantize_images", "(", "x", ")", ":", "\n", "    ", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "x", "=", "(", "255.0", "*", "x", "+", "0.5", ")", ".", "clamp", "(", "0.0", ",", "255.0", ")", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images": [[258, 264], ["torch.stack().to.transpose", "list", "torch.stack().to", "torch.stack().to", "map", "list", "torch.stack", "torch.stack", "ToTensor", "resizer"], "function", ["None"], ["", "def", "resize_images", "(", "x", ",", "resizer", ",", "ToTensor", ",", "mean", ",", "std", ",", "device", ")", ":", "\n", "    ", "x", "=", "x", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "x", "=", "list", "(", "map", "(", "lambda", "x", ":", "ToTensor", "(", "resizer", "(", "x", ")", ")", ",", "list", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "stack", "(", "x", ",", "0", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "(", "x", "/", "255.0", "-", "mean", ")", "/", "std", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.hdf5.make_hdf5": [[35, 98], ["os.path.join", "os.path.dirname", "os.path.isfile", "os.path.exists", "os.makedirs", "print", "data_util.Dataset_", "torch.utils.data.DataLoader", "print", "enumerate", "tqdm.tqdm", "numpy.transpose", "y.numpy.numpy", "np.transpose.numpy", "h5py.File", "print", "f.create_dataset", "print", "f.create_dataset", "print", "h5py.File", "f[].resize", "f[].resize", "len", "len", "str", "len", "str"], "function", ["None"], ["def", "make_hdf5", "(", "name", ",", "img_size", ",", "crop_long_edge", ",", "resize_size", ",", "data_dir", ",", "resizer", ",", "DATA", ",", "RUN", ")", ":", "\n", "    ", "if", "resize_size", "is", "not", "None", ":", "\n", "        ", "file_name", "=", "\"{dataset_name}_{size}_{resizer}_train.hdf5\"", ".", "format", "(", "dataset_name", "=", "name", ",", "size", "=", "img_size", ",", "resizer", "=", "resizer", ")", "\n", "", "else", ":", "\n", "        ", "file_name", "=", "\"{dataset_name}_{size}_train.hdf5\"", ".", "format", "(", "dataset_name", "=", "name", ",", "size", "=", "img_size", ")", "\n", "", "file_path", "=", "join", "(", "data_dir", ",", "file_name", ")", "\n", "hdf5_dir", "=", "dirname", "(", "file_path", ")", "\n", "if", "not", "exists", "(", "hdf5_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "hdf5_dir", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "print", "(", "\"{file_name} exist!\\nThe file are located in the {file_path}.\"", ".", "format", "(", "file_name", "=", "file_name", ",", "\n", "file_path", "=", "file_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "Dataset_", "(", "data_name", "=", "DATA", ".", "name", ",", "\n", "data_dir", "=", "RUN", ".", "data_dir", ",", "\n", "train", "=", "True", ",", "\n", "crop_long_edge", "=", "crop_long_edge", ",", "\n", "resize_size", "=", "resize_size", ",", "\n", "resizer", "=", "resizer", ",", "\n", "random_flip", "=", "False", ",", "\n", "normalize", "=", "False", ",", "\n", "hdf5_path", "=", "None", ",", "\n", "load_data_in_memory", "=", "False", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "500", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "False", ",", "\n", "num_workers", "=", "RUN", ".", "num_workers", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "print", "(", "\"Start to load {name} into an HDF5 file with chunk size 500.\"", ".", "format", "(", "name", "=", "name", ")", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "tqdm", "(", "dataloader", ")", ")", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ".", "numpy", "(", ")", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "y", "=", "y", ".", "numpy", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "with", "h5", ".", "File", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "print", "(", "\"Produce dataset of len {num_dataset}\"", ".", "format", "(", "num_dataset", "=", "len", "(", "dataset", ")", ")", ")", "\n", "imgs_dset", "=", "f", ".", "create_dataset", "(", "\"imgs\"", ",", "\n", "x", ".", "shape", ",", "\n", "dtype", "=", "\"uint8\"", ",", "\n", "maxshape", "=", "(", "len", "(", "dataset", ")", ",", "img_size", ",", "img_size", ",", "3", ")", ",", "\n", "chunks", "=", "(", "500", ",", "img_size", ",", "img_size", ",", "3", ")", ",", "\n", "compression", "=", "False", ")", "\n", "print", "(", "\"Image chunks chosen as {chunk}\"", ".", "format", "(", "chunk", "=", "str", "(", "imgs_dset", ".", "chunks", ")", ")", ")", "\n", "imgs_dset", "[", "...", "]", "=", "x", "\n", "\n", "labels_dset", "=", "f", ".", "create_dataset", "(", "\"labels\"", ",", "\n", "y", ".", "shape", ",", "\n", "dtype", "=", "\"int64\"", ",", "\n", "maxshape", "=", "(", "len", "(", "dataloader", ".", "dataset", ")", ",", ")", ",", "\n", "chunks", "=", "(", "500", ",", ")", ",", "\n", "compression", "=", "False", ")", "\n", "print", "(", "\"Label chunks chosen as {chunk}\"", ".", "format", "(", "chunk", "=", "str", "(", "labels_dset", ".", "chunks", ")", ")", ")", "\n", "labels_dset", "[", "...", "]", "=", "y", "\n", "", "", "else", ":", "\n", "                ", "with", "h5", ".", "File", "(", "file_path", ",", "\"a\"", ")", "as", "f", ":", "\n", "                    ", "f", "[", "\"imgs\"", "]", ".", "resize", "(", "f", "[", "\"imgs\"", "]", ".", "shape", "[", "0", "]", "+", "x", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "f", "[", "\"imgs\"", "]", "[", "-", "x", ".", "shape", "[", "0", "]", ":", "]", "=", "x", "\n", "f", "[", "\"labels\"", "]", ".", "resize", "(", "f", "[", "\"labels\"", "]", ".", "shape", "[", "0", "]", "+", "y", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "f", "[", "\"labels\"", "]", "[", "-", "y", ".", "shape", "[", "0", "]", ":", "]", "=", "y", "\n", "", "", "", "", "return", "file_path", ",", "False", ",", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.truncated_normal": [[28, 31], ["scipy.stats.truncnorm.rvs"], "function", ["None"], ["", "def", "truncated_normal", "(", "size", ",", "threshold", "=", "1.", ")", ":", "\n", "    ", "values", "=", "truncnorm", ".", "rvs", "(", "-", "threshold", ",", "threshold", ",", "size", "=", "size", ")", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_normal": [[33, 41], ["torch.randn", "torch.randn", "torch.randn", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sample.truncated_normal"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.truncated_normal"], ["", "def", "sample_normal", "(", "batch_size", ",", "z_dim", ",", "truncation_factor", ",", "device", ")", ":", "\n", "    ", "if", "truncation_factor", "==", "-", "1.0", ":", "\n", "        ", "latents", "=", "torch", ".", "randn", "(", "batch_size", ",", "z_dim", ",", "device", "=", "device", ")", "\n", "", "elif", "truncation_factor", ">", "0", ":", "\n", "        ", "latents", "=", "torch", ".", "FloatTensor", "(", "truncated_normal", "(", "[", "batch_size", ",", "z_dim", "]", ",", "truncation_factor", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"truncated_factor must be positive.\"", ")", "\n", "", "return", "latents", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_y": [[43, 67], ["torch.randint", "torch.randint", "torch.randint", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.random.permutation", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "range", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "sample_y", "(", "y_sampler", ",", "batch_size", ",", "num_classes", ",", "device", ")", ":", "\n", "    ", "if", "y_sampler", "==", "\"totally_random\"", ":", "\n", "        ", "y_fake", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_classes", ",", "size", "=", "(", "batch_size", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "", "elif", "y_sampler", "==", "\"acending_some\"", ":", "\n", "        ", "assert", "batch_size", "%", "8", "==", "0", ",", "\"The size of batches should be a multiple of 8.\"", "\n", "num_classes_plot", "=", "batch_size", "//", "8", "\n", "indices", "=", "np", ".", "random", ".", "permutation", "(", "num_classes", ")", "[", ":", "num_classes_plot", "]", "\n", "\n", "", "elif", "y_sampler", "==", "\"acending_all\"", ":", "\n", "        ", "batch_size", "=", "num_classes", "*", "8", "\n", "indices", "=", "[", "c", "for", "c", "in", "range", "(", "num_classes", ")", "]", "\n", "\n", "", "elif", "isinstance", "(", "y_sampler", ",", "int", ")", ":", "\n", "        ", "y_fake", "=", "torch", ".", "tensor", "(", "[", "y_sampler", "]", "*", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "y_fake", "=", "None", "\n", "\n", "", "if", "y_sampler", "in", "[", "\"acending_some\"", ",", "\"acending_all\"", "]", ":", "\n", "        ", "y_fake", "=", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "            ", "y_fake", "+=", "[", "idx", "]", "*", "8", "\n", "", "y_fake", "=", "torch", ".", "tensor", "(", "y_fake", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "return", "y_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy": [[69, 88], ["sample.sample_y", "sample.sample_normal", "isinstance", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "sample.sample_normal", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_y", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_normal", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_normal"], ["", "def", "sample_zy", "(", "z_prior", ",", "batch_size", ",", "z_dim", ",", "num_classes", ",", "truncation_factor", ",", "y_sampler", ",", "radius", ",", "device", ")", ":", "\n", "    ", "fake_labels", "=", "sample_y", "(", "y_sampler", "=", "y_sampler", ",", "batch_size", "=", "batch_size", ",", "num_classes", "=", "num_classes", ",", "device", "=", "device", ")", "\n", "batch_size", "=", "fake_labels", ".", "shape", "[", "0", "]", "\n", "\n", "if", "z_prior", "==", "\"gaussian\"", ":", "\n", "        ", "zs", "=", "sample_normal", "(", "batch_size", "=", "batch_size", ",", "z_dim", "=", "z_dim", ",", "truncation_factor", "=", "truncation_factor", ",", "device", "=", "device", ")", "\n", "", "elif", "z_prior", "==", "\"uniform\"", ":", "\n", "        ", "zs", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "z_dim", ")", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "isinstance", "(", "radius", ",", "float", ")", "and", "radius", ">", "0.0", ":", "\n", "        ", "if", "z_prior", "==", "\"gaussian\"", ":", "\n", "            ", "zs_eps", "=", "zs", "+", "radius", "*", "sample_normal", "(", "batch_size", ",", "z_dim", ",", "-", "1.0", ",", "device", ")", "\n", "", "elif", "z_prior", "==", "\"uniform\"", ":", "\n", "            ", "zs_eps", "=", "zs", "+", "radius", "*", "torch", ".", "FloatTensor", "(", "batch_size", ",", "z_dim", ")", ".", "uniform_", "(", "-", "1.0", ",", "1.0", ")", ".", "to", "(", "device", ")", "\n", "", "", "else", ":", "\n", "        ", "zs_eps", "=", "None", "\n", "", "return", "zs", ",", "fake_labels", ",", "zs_eps", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images": [[90, 179], ["sample.sample_zy", "torch.randint", "torch.randint", "torch.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.latent_optimise", "sample.langevin_sampling", "sample.stylegan_generate_images", "generator", "sample.stylegan_generate_images", "generator", "torch.one_hot().view", "torch.rand", "torch.rand", "torch.rand", "torch.one_hot"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_zy", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.latent_optimise", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.langevin_sampling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.stylegan_generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.stylegan_generate_images"], ["", "def", "generate_images", "(", "z_prior", ",", "truncation_factor", ",", "batch_size", ",", "z_dim", ",", "num_classes", ",", "y_sampler", ",", "radius", ",", "generator", ",", "discriminator", ",", "\n", "is_train", ",", "LOSS", ",", "RUN", ",", "MODEL", ",", "device", ",", "is_stylegan", ",", "generator_mapping", ",", "generator_synthesis", ",", "style_mixing_p", ",", "\n", "stylegan_update_emas", ",", "cal_trsp_cost", ")", ":", "\n", "    ", "if", "is_train", ":", "\n", "        ", "truncation_factor", "=", "-", "1.0", "\n", "lo_steps", "=", "LOSS", ".", "lo_steps4train", "\n", "apply_langevin", "=", "False", "\n", "", "else", ":", "\n", "        ", "lo_steps", "=", "LOSS", ".", "lo_steps4eval", "\n", "if", "truncation_factor", "!=", "-", "1", ":", "\n", "            ", "if", "is_stylegan", ":", "\n", "                ", "assert", "0", "<=", "truncation_factor", "<=", "1", ",", "\"Stylegan truncation_factor must lie btw 0(strong truncation) ~ 1(no truncation)\"", "\n", "", "else", ":", "\n", "                ", "assert", "0", "<=", "truncation_factor", ",", "\"truncation_factor must lie btw 0(strong truncation) ~ inf(no truncation)\"", "\n", "\n", "", "", "", "zs", ",", "fake_labels", ",", "zs_eps", "=", "sample_zy", "(", "z_prior", "=", "z_prior", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "z_dim", "=", "z_dim", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "truncation_factor", "=", "-", "1", "if", "is_stylegan", "else", "truncation_factor", ",", "\n", "y_sampler", "=", "y_sampler", ",", "\n", "radius", "=", "radius", ",", "\n", "device", "=", "device", ")", "\n", "batch_size", "=", "fake_labels", ".", "shape", "[", "0", "]", "\n", "info_discrete_c", ",", "info_conti_c", "=", "None", ",", "None", "\n", "if", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "        ", "info_discrete_c", "=", "torch", ".", "randint", "(", "MODEL", ".", "info_dim_discrete_c", ",", "(", "batch_size", ",", "MODEL", ".", "info_num_discrete_c", ")", ",", "device", "=", "device", ")", "\n", "zs", "=", "torch", ".", "cat", "(", "(", "zs", ",", "F", ".", "one_hot", "(", "info_discrete_c", ",", "MODEL", ".", "info_dim_discrete_c", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "        ", "info_conti_c", "=", "torch", ".", "rand", "(", "batch_size", ",", "MODEL", ".", "info_num_conti_c", ",", "device", "=", "device", ")", "*", "2", "-", "1", "\n", "zs", "=", "torch", ".", "cat", "(", "(", "zs", ",", "info_conti_c", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "trsp_cost", "=", "None", "\n", "if", "LOSS", ".", "apply_lo", ":", "\n", "        ", "zs", ",", "trsp_cost", "=", "losses", ".", "latent_optimise", "(", "zs", "=", "zs", ",", "\n", "fake_labels", "=", "fake_labels", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "lo_rate", "=", "LOSS", ".", "lo_rate", ",", "\n", "lo_steps", "=", "lo_steps", ",", "\n", "lo_alpha", "=", "LOSS", ".", "lo_alpha", ",", "\n", "lo_beta", "=", "LOSS", ".", "lo_beta", ",", "\n", "eval", "=", "not", "is_train", ",", "\n", "cal_trsp_cost", "=", "cal_trsp_cost", ",", "\n", "device", "=", "device", ")", "\n", "", "if", "not", "is_train", "and", "RUN", ".", "langevin_sampling", ":", "\n", "        ", "zs", "=", "langevin_sampling", "(", "zs", "=", "zs", ",", "\n", "z_dim", "=", "z_dim", ",", "\n", "fake_labels", "=", "fake_labels", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "langevin_rate", "=", "RUN", ".", "langevin_rate", ",", "\n", "langevin_noise_std", "=", "RUN", ".", "langevin_noise_std", ",", "\n", "langevin_decay", "=", "RUN", ".", "langevin_decay", ",", "\n", "langevin_decay_steps", "=", "RUN", ".", "langevin_decay_steps", ",", "\n", "langevin_steps", "=", "RUN", ".", "langevin_steps", ",", "\n", "device", "=", "device", ")", "\n", "", "if", "is_stylegan", ":", "\n", "        ", "ws", ",", "fake_images", "=", "stylegan_generate_images", "(", "zs", "=", "zs", ",", "\n", "fake_labels", "=", "fake_labels", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "style_mixing_p", "=", "style_mixing_p", ",", "\n", "update_emas", "=", "stylegan_update_emas", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "truncation_psi", "=", "truncation_factor", ",", "\n", "truncation_cutoff", "=", "RUN", ".", "truncation_cutoff", ")", "\n", "", "else", ":", "\n", "        ", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "eval", "=", "not", "is_train", ")", "\n", "ws", "=", "None", "\n", "\n", "", "if", "zs_eps", "is", "not", "None", ":", "\n", "        ", "if", "is_stylegan", ":", "\n", "            ", "ws_eps", ",", "fake_images_eps", "=", "stylegan_generate_images", "(", "zs", "=", "zs_eps", ",", "\n", "fake_labels", "=", "fake_labels", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "style_mixing_p", "=", "style_mixing_p", ",", "\n", "update_emas", "=", "stylegan_update_emas", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "truncation_psi", "=", "truncation_factor", ",", "\n", "truncation_cutoff", "=", "RUN", ".", "truncation_cutoff", ")", "\n", "", "else", ":", "\n", "            ", "fake_images_eps", "=", "generator", "(", "zs_eps", ",", "fake_labels", ",", "eval", "=", "not", "is_train", ")", "\n", "", "", "else", ":", "\n", "        ", "fake_images_eps", "=", "None", "\n", "", "return", "fake_images", ",", "fake_labels", ",", "fake_images_eps", ",", "trsp_cost", ",", "ws", ",", "info_discrete_c", ",", "info_conti_c", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.stylegan_generate_images": [[180, 193], ["torch.one_hot", "generator_synthesis", "generator_mapping", "generator_mapping", "torch.empty().random_", "torch.empty().random_", "torch.empty().random_", "torch.where", "torch.where", "torch.where", "torch.full_like", "torch.full_like", "torch.full_like", "generator_mapping", "torch.empty", "torch.empty", "torch.empty", "torch.rand", "torch.rand", "torch.rand", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "function", ["None"], ["", "def", "stylegan_generate_images", "(", "zs", ",", "fake_labels", ",", "num_classes", ",", "style_mixing_p", ",", "update_emas", ",", "\n", "generator_mapping", ",", "generator_synthesis", ",", "truncation_psi", ",", "truncation_cutoff", ")", ":", "\n", "    ", "one_hot_fake_labels", "=", "F", ".", "one_hot", "(", "fake_labels", ",", "num_classes", "=", "num_classes", ")", "\n", "if", "truncation_psi", "==", "-", "1", ":", "\n", "        ", "ws", "=", "generator_mapping", "(", "zs", ",", "one_hot_fake_labels", ",", "truncation_psi", "=", "1", ",", "update_emas", "=", "update_emas", ")", "\n", "", "else", ":", "\n", "        ", "ws", "=", "generator_mapping", "(", "zs", ",", "one_hot_fake_labels", ",", "truncation_psi", "=", "truncation_psi", ",", "truncation_cutoff", "=", "truncation_cutoff", ",", "update_emas", "=", "update_emas", ")", "\n", "", "if", "style_mixing_p", ">", "0", ":", "\n", "        ", "cutoff", "=", "torch", ".", "empty", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "ws", ".", "device", ")", ".", "random_", "(", "1", ",", "ws", ".", "shape", "[", "1", "]", ")", "\n", "cutoff", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "]", ",", "device", "=", "ws", ".", "device", ")", "<", "style_mixing_p", ",", "cutoff", ",", "torch", ".", "full_like", "(", "cutoff", ",", "ws", ".", "shape", "[", "1", "]", ")", ")", "\n", "ws", "[", ":", ",", "cutoff", ":", "]", "=", "generator_mapping", "(", "torch", ".", "randn_like", "(", "zs", ")", ",", "one_hot_fake_labels", ",", "update_emas", "=", "False", ")", "[", ":", ",", "cutoff", ":", "]", "\n", "", "fake_images", "=", "generator_synthesis", "(", "ws", ",", "update_emas", "=", "update_emas", ")", "\n", "return", "ws", ",", "fake_images", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.langevin_sampling": [[195, 217], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.MultivariateNormal", "torch.MultivariateNormal", "range", "torch.autograd.Variable", "generator", "discriminator", "utils.cal_deriv", "MN.MultivariateNormal.log_prob", "MN.MultivariateNormal.sample"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "def", "langevin_sampling", "(", "zs", ",", "z_dim", ",", "fake_labels", ",", "generator", ",", "discriminator", ",", "batch_size", ",", "langevin_rate", ",", "langevin_noise_std", ",", "\n", "langevin_decay", ",", "langevin_decay_steps", ",", "langevin_steps", ",", "device", ")", ":", "\n", "    ", "scaler", "=", "1.0", "\n", "apply_decay", "=", "langevin_decay", ">", "0", "and", "langevin_decay_steps", ">", "0", "\n", "mean", "=", "torch", ".", "zeros", "(", "z_dim", ",", "device", "=", "device", ")", "\n", "prior_std", "=", "torch", ".", "eye", "(", "z_dim", ",", "device", "=", "device", ")", "\n", "lgv_std", "=", "prior_std", "*", "langevin_noise_std", "\n", "prior", "=", "MN", ".", "MultivariateNormal", "(", "loc", "=", "mean", ",", "covariance_matrix", "=", "prior_std", ")", "\n", "lgv_prior", "=", "MN", ".", "MultivariateNormal", "(", "loc", "=", "mean", ",", "covariance_matrix", "=", "lgv_std", ")", "\n", "for", "i", "in", "range", "(", "langevin_steps", ")", ":", "\n", "        ", "zs", "=", "autograd", ".", "Variable", "(", "zs", ",", "requires_grad", "=", "True", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "eval", "=", "True", ")", "\n", "fake_dict", "=", "discriminator", "(", "fake_images", ",", "fake_labels", ",", "eval", "=", "True", ")", "\n", "\n", "energy", "=", "-", "prior", ".", "log_prob", "(", "zs", ")", "-", "fake_dict", "[", "\"adv_output\"", "]", "\n", "z_grads", "=", "losses", ".", "cal_deriv", "(", "inputs", "=", "zs", ",", "outputs", "=", "energy", ",", "device", "=", "device", ")", "\n", "\n", "zs", "=", "zs", "-", "0.5", "*", "langevin_rate", "*", "z_grads", "+", "(", "langevin_rate", "**", "0.5", ")", "*", "lgv_prior", ".", "sample", "(", "[", "batch_size", "]", ")", "*", "scaler", "\n", "if", "apply_decay", "and", "(", "i", "+", "1", ")", "%", "langevin_decay_steps", "==", "0", ":", "\n", "            ", "langevin_rate", "*=", "langevin_decay", "\n", "scaler", "*=", "langevin_decay", "\n", "", "", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.sample_onehot": [[219, 226], ["torch.randint", "torch.randint", "torch.randint"], "function", ["None"], ["", "def", "sample_onehot", "(", "batch_size", ",", "num_classes", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "    ", "return", "torch", ".", "randint", "(", "low", "=", "0", ",", "\n", "high", "=", "num_classes", ",", "\n", "size", "=", "(", "batch_size", ",", ")", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_mask": [[228, 240], ["labels.detach().cpu().numpy.detach().cpu().numpy", "range", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "numpy.where", "labels.detach().cpu().numpy.detach().cpu", "numpy.zeros", "numpy.ones", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "labels.detach().cpu().numpy.detach", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "make_mask", "(", "labels", ",", "num_classes", ",", "mask_negatives", ",", "device", ")", ":", "\n", "    ", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_samples", "=", "labels", ".", "shape", "[", "0", "]", "\n", "if", "mask_negatives", ":", "\n", "        ", "mask_multi", ",", "target", "=", "np", ".", "zeros", "(", "[", "num_classes", ",", "n_samples", "]", ")", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "mask_multi", ",", "target", "=", "np", ".", "ones", "(", "[", "num_classes", ",", "n_samples", "]", ")", ",", "0.0", "\n", "\n", "", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "c_indices", "=", "np", ".", "where", "(", "labels", "==", "c", ")", "\n", "mask_multi", "[", "c", ",", "c_indices", "]", "=", "target", "\n", "", "return", "torch", ".", "tensor", "(", "mask_multi", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.make_target_cls_sampler": [[242, 254], ["range", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "label_indices.append"], "function", ["None"], ["", "def", "make_target_cls_sampler", "(", "dataset", ",", "target_class", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "targets", "=", "dataset", ".", "data", ".", "targets", "\n", "", "except", ":", "\n", "        ", "targets", "=", "dataset", ".", "labels", "\n", "", "label_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "if", "targets", "[", "i", "]", "==", "target_class", ":", "\n", "            ", "label_indices", ".", "append", "(", "i", ")", "\n", "", "", "num_samples", "=", "len", "(", "label_indices", ")", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "label_indices", ")", "\n", "return", "num_samples", ",", "sampler", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.make_ckpt_dir": [[23, 27], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "make_ckpt_dir", "(", "ckpt_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "", "return", "ckpt_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt": [[29, 75], ["torch.load", "optimizer.load_state_dict", "optimizer.state.values", "misc.load_parameters", "print", "model.load_state_dict", "state.items", "isinstance", "model.state_dict", "v.cuda"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_parameters"], ["", "def", "load_ckpt", "(", "model", ",", "optimizer", ",", "ckpt_path", ",", "load_model", "=", "False", ",", "load_opt", "=", "False", ",", "load_misc", "=", "False", ",", "is_freezeD", "=", "False", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "if", "load_model", ":", "\n", "        ", "if", "is_freezeD", ":", "\n", "            ", "mismatch_names", "=", "misc", ".", "load_parameters", "(", "src", "=", "ckpt", "[", "\"state_dict\"", "]", ",", "\n", "dst", "=", "model", ".", "state_dict", "(", ")", ",", "\n", "strict", "=", "False", ")", "\n", "print", "(", "\"The following parameters/buffers do not match with the ones of the pre-trained model:\"", ",", "mismatch_names", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"state_dict\"", "]", ",", "strict", "=", "True", ")", "\n", "\n", "", "", "if", "load_opt", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optimizer\"", "]", ")", "\n", "for", "state", "in", "optimizer", ".", "state", ".", "values", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "state", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "", "if", "load_misc", ":", "\n", "        ", "seed", "=", "ckpt", "[", "\"seed\"", "]", "\n", "run_name", "=", "ckpt", "[", "\"run_name\"", "]", "\n", "step", "=", "ckpt", "[", "\"step\"", "]", "\n", "try", ":", "\n", "            ", "aa_p", "=", "ckpt", "[", "\"aa_p\"", "]", "\n", "", "except", ":", "\n", "            ", "aa_p", "=", "ckpt", "[", "\"ada_p\"", "]", "\n", "", "best_step", "=", "ckpt", "[", "\"best_step\"", "]", "\n", "best_fid", "=", "ckpt", "[", "\"best_fid\"", "]", "\n", "\n", "try", ":", "\n", "            ", "epoch", "=", "ckpt", "[", "\"epoch\"", "]", "\n", "", "except", ":", "\n", "            ", "epoch", "=", "0", "\n", "", "try", ":", "\n", "            ", "topk", "=", "ckpt", "[", "\"topk\"", "]", "\n", "", "except", ":", "\n", "            ", "topk", "=", "\"initialize\"", "\n", "", "try", ":", "\n", "            ", "best_ckpt_path", "=", "ckpt", "[", "\"best_fid_checkpoint_path\"", "]", "\n", "", "except", ":", "\n", "            ", "best_ckpt_path", "=", "ckpt", "[", "\"best_fid_ckpt\"", "]", "\n", "", "try", ":", "\n", "            ", "lecam_emas", "=", "ckpt", "[", "\"lecam_emas\"", "]", "\n", "", "except", ":", "\n", "            ", "lecam_emas", "=", "None", "\n", "", "return", "seed", ",", "run_name", ",", "step", ",", "epoch", ",", "topk", ",", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_StudioGAN_ckpts": [[77, 131], ["ckpt.load_ckpt", "ckpt.load_ckpt", "glob.glob", "glob.glob", "torch.load", "ckpt.load_ckpt", "misc.fix_seed", "log.make_logger.info", "log.make_logger.info", "os.path.join", "os.path.join", "glob.glob", "utils.make_logger", "log.make_logger.info", "os.path.join"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.fix_seed", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.log.make_logger"], ["", "", "def", "load_StudioGAN_ckpts", "(", "ckpt_dir", ",", "load_best", ",", "Gen", ",", "Dis", ",", "g_optimizer", ",", "d_optimizer", ",", "run_name", ",", "apply_g_ema", ",", "Gen_ema", ",", "ema", ",", "\n", "is_train", ",", "RUN", ",", "logger", ",", "global_rank", ",", "device", ",", "cfg_file", ")", ":", "\n", "    ", "when", "=", "\"best\"", "if", "load_best", "is", "True", "else", "\"current\"", "\n", "Gen_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=G-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "Dis_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=D-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "prev_run_name", "=", "torch", ".", "load", "(", "Dis_ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "[", "\"run_name\"", "]", "\n", "is_freezeD", "=", "True", "if", "RUN", ".", "freezeD", ">", "-", "1", "else", "False", "\n", "\n", "load_ckpt", "(", "model", "=", "Gen", ",", "\n", "optimizer", "=", "g_optimizer", ",", "\n", "ckpt_path", "=", "Gen_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", "if", "prev_run_name", "in", "blacklist", "or", "is_freezeD", "or", "not", "is_train", "else", "True", ",", "\n", "load_misc", "=", "False", ",", "\n", "is_freezeD", "=", "is_freezeD", ")", "\n", "\n", "seed", ",", "prev_run_name", ",", "step", ",", "epoch", ",", "topk", ",", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", "=", "load_ckpt", "(", "model", "=", "Dis", ",", "\n", "optimizer", "=", "d_optimizer", ",", "\n", "ckpt_path", "=", "Dis_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", "if", "prev_run_name", "in", "blacklist", "or", "is_freezeD", "or", "not", "is_train", "else", "True", ",", "\n", "load_misc", "=", "True", ",", "\n", "is_freezeD", "=", "is_freezeD", ")", "\n", "\n", "if", "apply_g_ema", ":", "\n", "        ", "Gen_ema_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=G_ema-{when}-weights-step*.pth\"", ".", "format", "(", "when", "=", "when", ")", ")", ")", "[", "0", "]", "\n", "load_ckpt", "(", "model", "=", "Gen_ema", ",", "\n", "optimizer", "=", "None", ",", "\n", "ckpt_path", "=", "Gen_ema_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", ",", "\n", "load_misc", "=", "False", ",", "\n", "is_freezeD", "=", "is_freezeD", ")", "\n", "\n", "ema", ".", "source", ",", "ema", ".", "target", "=", "Gen", ",", "Gen_ema", "\n", "\n", "", "if", "is_train", "and", "RUN", ".", "seed", "!=", "seed", ":", "\n", "        ", "RUN", ".", "seed", "=", "seed", "+", "global_rank", "\n", "misc", ".", "fix_seed", "(", "RUN", ".", "seed", ")", "\n", "\n", "", "if", "device", "==", "0", ":", "\n", "        ", "if", "not", "is_freezeD", ":", "\n", "            ", "logger", "=", "log", ".", "make_logger", "(", "RUN", ".", "save_dir", ",", "prev_run_name", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Generator checkpoint is {}\"", ".", "format", "(", "Gen_ckpt_path", ")", ")", "\n", "if", "apply_g_ema", ":", "\n", "            ", "logger", ".", "info", "(", "\"EMA_Generator checkpoint is {}\"", ".", "format", "(", "Gen_ema_ckpt_path", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Discriminator checkpoint is {}\"", ".", "format", "(", "Dis_ckpt_path", ")", ")", "\n", "\n", "", "if", "is_freezeD", ":", "\n", "        ", "prev_run_name", ",", "step", ",", "epoch", ",", "topk", ",", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", "=", "run_name", ",", "0", ",", "0", ",", "\"initialize\"", ",", "None", ",", "0", ",", "None", ",", "None", "\n", "", "return", "prev_run_name", ",", "step", ",", "epoch", ",", "topk", ",", "aa_p", ",", "best_step", ",", "best_fid", ",", "best_ckpt_path", ",", "lecam_emas", ",", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_best_model": [[133, 167], ["misc.peel_models", "ckpt.load_ckpt", "ckpt.load_ckpt", "glob.glob", "glob.glob", "ckpt.load_ckpt", "os.path.join", "os.path.join", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_ckpt"], ["", "def", "load_best_model", "(", "ckpt_dir", ",", "Gen", ",", "Dis", ",", "apply_g_ema", ",", "Gen_ema", ",", "ema", ")", ":", "\n", "    ", "Gen", ",", "Dis", ",", "Gen_ema", "=", "misc", ".", "peel_models", "(", "Gen", ",", "Dis", ",", "Gen_ema", ")", "\n", "Gen_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=G-best-weights-step*.pth\"", ")", ")", "[", "0", "]", "\n", "Dis_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=D-best-weights-step*.pth\"", ")", ")", "[", "0", "]", "\n", "\n", "load_ckpt", "(", "model", "=", "Gen", ",", "\n", "optimizer", "=", "None", ",", "\n", "ckpt_path", "=", "Gen_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", ",", "\n", "load_misc", "=", "False", ",", "\n", "is_freezeD", "=", "False", ")", "\n", "\n", "\n", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "best_step", ",", "_", ",", "_", ",", "_", "=", "load_ckpt", "(", "model", "=", "Dis", ",", "\n", "optimizer", "=", "None", ",", "\n", "ckpt_path", "=", "Dis_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", ",", "\n", "load_misc", "=", "True", ",", "\n", "is_freezeD", "=", "False", ")", "\n", "\n", "if", "apply_g_ema", ":", "\n", "        ", "Gen_ema_ckpt_path", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=G_ema-best-weights-step*.pth\"", ")", ")", "[", "0", "]", "\n", "load_ckpt", "(", "model", "=", "Gen_ema", ",", "\n", "optimizer", "=", "None", ",", "\n", "ckpt_path", "=", "Gen_ema_ckpt_path", ",", "\n", "load_model", "=", "True", ",", "\n", "load_opt", "=", "False", ",", "\n", "load_misc", "=", "False", ",", "\n", "is_freezeD", "=", "False", ")", "\n", "\n", "ema", ".", "source", ",", "ema", ".", "target", "=", "Gen", ",", "Gen_ema", "\n", "", "return", "best_step", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_prev_dict": [[169, 171], ["numpy.load().item", "numpy.load", "os.path.join"], "function", ["None"], ["", "def", "load_prev_dict", "(", "directory", ",", "file_name", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "join", "(", "directory", ",", "file_name", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.check_is_pre_trained_model": [[173, 186], ["glob.glob", "os.path.join", "len"], "function", ["None"], ["", "def", "check_is_pre_trained_model", "(", "ckpt_dir", ",", "GAN_train", ",", "GAN_test", ")", ":", "\n", "    ", "assert", "GAN_train", "*", "GAN_test", "==", "0", ",", "\"cannot conduct GAN_train and GAN_test togather.\"", "\n", "if", "GAN_train", ":", "\n", "        ", "mode", "=", "\"fake_trained\"", "\n", "", "else", ":", "\n", "        ", "mode", "=", "\"real_trained\"", "\n", "\n", "", "ckpt_list", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "\"model=C-{mode}-best-weights.pth\"", ".", "format", "(", "mode", "=", "mode", ")", ")", ")", "\n", "if", "len", "(", "ckpt_list", ")", "==", "0", ":", "\n", "        ", "is_pre_train_model", "=", "False", "\n", "", "else", ":", "\n", "        ", "is_pre_train_model", "=", "True", "\n", "", "return", "is_pre_train_model", ",", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_GAN_train_test_model": [[188, 199], ["os.path.join", "torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_GAN_train_test_model", "(", "model", ",", "mode", ",", "optimizer", ",", "RUN", ")", ":", "\n", "    ", "ckpt_path", "=", "join", "(", "RUN", ".", "ckpt_dir", ",", "\"model=C-{mode}-best-weights.pth\"", ".", "format", "(", "mode", "=", "mode", ")", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optimizer\"", "]", ")", "\n", "epoch_trained", "=", "ckpt", "[", "\"epoch\"", "]", "\n", "best_top1", "=", "ckpt", "[", "\"best_top1\"", "]", "\n", "best_top5", "=", "ckpt", "[", "\"best_top5\"", "]", "\n", "best_epoch", "=", "ckpt", "[", "\"best_epoch\"", "]", "\n", "return", "epoch_trained", ",", "best_top1", ",", "best_top5", ",", "best_epoch", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.apply_diffaug": [[35, 46], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "apply_diffaug", "(", "x", ",", "policy", "=", "\"color,translation,cutout\"", ",", "channels_first", "=", "True", ")", ":", "\n", "    ", "if", "policy", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.rand_brightness": [[48, 51], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.rand_saturation": [[53, 57], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_saturation", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.rand_contrast": [[59, 63], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_contrast", "(", "x", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.rand_translation": [[65, 79], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.125", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.diffaug.rand_cutout": [[81, 96], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ema.Ema.__init__": [[13, 26], ["ema.Ema.source.state_dict", "ema.Ema.target.state_dict", "print", "torch.no_grad", "zip", "zip", "ema.Ema.target.parameters", "ema.Ema.source.parameters", "p_ema.copy_", "ema.Ema.target.buffers", "ema.Ema.source.buffers", "b_ema.copy_"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target", ",", "decay", "=", "0.9999", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "self", ".", "source_dict", "=", "self", ".", "source", ".", "state_dict", "(", ")", "\n", "self", ".", "target_dict", "=", "self", ".", "target", ".", "state_dict", "(", ")", "\n", "print", "(", "\"Initialize the copied generator's parameters to be source parameters.\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p_ema", ",", "p", "in", "zip", "(", "self", ".", "target", ".", "parameters", "(", ")", ",", "self", ".", "source", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "p_ema", ".", "copy_", "(", "p", ")", "\n", "", "for", "b_ema", ",", "b", "in", "zip", "(", "self", ".", "target", ".", "buffers", "(", ")", ",", "self", ".", "source", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "b_ema", ".", "copy_", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ema.Ema.update": [[27, 41], ["torch.no_grad", "zip", "zip", "ema.Ema.target.parameters", "ema.Ema.source.parameters", "p_ema.copy_", "ema.Ema.target.named_buffers", "ema.Ema.source.named_buffers", "p.lerp", "b_ema.copy_", "b_ema.copy_", "b.lerp"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "iter", "=", "None", ")", ":", "\n", "        ", "if", "iter", ">=", "0", "and", "iter", "<", "self", ".", "start_iter", ":", "\n", "            ", "decay", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "decay", "=", "self", ".", "decay", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p_ema", ",", "p", "in", "zip", "(", "self", ".", "target", ".", "parameters", "(", ")", ",", "self", ".", "source", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "p_ema", ".", "copy_", "(", "p", ".", "lerp", "(", "p_ema", ",", "decay", ")", ")", "\n", "", "for", "(", "b_ema_name", ",", "b_ema", ")", ",", "(", "b_name", ",", "b", ")", "in", "zip", "(", "self", ".", "target", ".", "named_buffers", "(", ")", ",", "self", ".", "source", ".", "named_buffers", "(", ")", ")", ":", "\n", "                ", "if", "\"num_batches_tracked\"", "in", "b_ema_name", ":", "\n", "                    ", "b_ema", ".", "copy_", "(", "b", ")", "\n", "", "else", ":", "\n", "                    ", "b_ema", ".", "copy_", "(", "b", ".", "lerp", "(", "b_ema", ",", "decay", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ema.EmaStylegan2.__init__": [[44, 58], ["ema.EmaStylegan2.source.state_dict", "ema.EmaStylegan2.target.state_dict", "print", "torch.no_grad", "zip", "zip", "ema.EmaStylegan2.target.parameters", "ema.EmaStylegan2.source.parameters", "p_ema.copy_", "ema.EmaStylegan2.target.buffers", "ema.EmaStylegan2.source.buffers", "b_ema.copy_"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target", ",", "ema_kimg", ",", "ema_rampup", ",", "effective_batch_size", ")", ":", "\n", "        ", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "ema_nimg", "=", "ema_kimg", "*", "1000", "\n", "self", ".", "ema_rampup", "=", "ema_rampup", "\n", "self", ".", "batch_size", "=", "effective_batch_size", "\n", "self", ".", "source_dict", "=", "self", ".", "source", ".", "state_dict", "(", ")", "\n", "self", ".", "target_dict", "=", "self", ".", "target", ".", "state_dict", "(", ")", "\n", "print", "(", "\"Initialize the copied generator's parameters to be source parameters.\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p_ema", ",", "p", "in", "zip", "(", "self", ".", "target", ".", "parameters", "(", ")", ",", "self", ".", "source", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "p_ema", ".", "copy_", "(", "p", ")", "\n", "", "for", "b_ema", ",", "b", "in", "zip", "(", "self", ".", "target", ".", "buffers", "(", ")", ",", "self", ".", "source", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "b_ema", ".", "copy_", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ema.EmaStylegan2.update": [[59, 70], ["min", "torch.no_grad", "zip", "zip", "max", "ema.EmaStylegan2.target.parameters", "ema.EmaStylegan2.source.parameters", "p_ema.copy_", "ema.EmaStylegan2.target.buffers", "ema.EmaStylegan2.source.buffers", "b_ema.copy_", "p.lerp"], "methods", ["None"], ["", "", "", "def", "update", "(", "self", ",", "iter", "=", "None", ")", ":", "\n", "        ", "ema_nimg", "=", "self", ".", "ema_nimg", "\n", "if", "self", ".", "ema_rampup", "!=", "\"N/A\"", ":", "\n", "            ", "cur_nimg", "=", "self", ".", "batch_size", "*", "iter", "\n", "ema_nimg", "=", "min", "(", "self", ".", "ema_nimg", ",", "cur_nimg", "*", "self", ".", "ema_rampup", ")", "\n", "", "ema_beta", "=", "0.5", "**", "(", "self", ".", "batch_size", "/", "max", "(", "ema_nimg", ",", "1e-8", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p_ema", ",", "p", "in", "zip", "(", "self", ".", "target", ".", "parameters", "(", ")", ",", "self", ".", "source", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "p_ema", ".", "copy_", "(", "p", ".", "lerp", "(", "p_ema", ",", "ema_beta", ")", ")", "\n", "", "for", "b_ema", ",", "b", "in", "zip", "(", "self", ".", "target", ".", "buffers", "(", ")", ",", "self", ".", "source", ".", "buffers", "(", ")", ")", ":", "\n", "                ", "b_ema", ".", "copy_", "(", "b", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomApply.__init__": [[93, 97], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "p", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomApply.forward": [[98, 102], ["inputs.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "simclr_aug.RandomApply.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_prob", "=", "inputs", ".", "new_full", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "p", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "inputs", "*", "(", "1", "-", "_mask", ")", "+", "self", ".", "fn", "(", "inputs", ")", "*", "_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomResizeCropLayer.__init__": [[105, 117], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "simclr_aug.RandomResizeCropLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "'''\n            Inception Crop\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n        '''", "\n", "super", "(", "RandomResizeCropLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomResizeCropLayer.forward": [[118, 155], ["simclr_aug.RandomResizeCropLayer._eye.repeat", "numpy.exp", "numpy.round", "numpy.round", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "numpy.random.uniform", "math.log", "math.log", "numpy.random.uniform", "numpy.sqrt", "numpy.sqrt", "len", "numpy.random.choice", "numpy.random.randint", "numpy.random.randint", "inputs.size", "len"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", ",", "_", ",", "width", ",", "height", "=", "inputs", ".", "shape", "\n", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "# N * 10 trial", "\n", "area", "=", "height", "*", "width", "\n", "target_area", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "scale", ",", "N", "*", "10", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "self", ".", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "self", ".", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "*", "log_ratio", ",", "N", "*", "10", ")", ")", "\n", "\n", "# If doesn't satisfy ratio condition, then do central crop", "\n", "w", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", "\n", "cond", "=", "(", "0", "<", "w", ")", "*", "(", "w", "<=", "width", ")", "*", "(", "0", "<", "h", ")", "*", "(", "h", "<=", "height", ")", "\n", "w", "=", "w", "[", "cond", "]", "\n", "h", "=", "h", "[", "cond", "]", "\n", "if", "len", "(", "w", ")", ">", "N", ":", "\n", "            ", "inds", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "w", ")", ",", "N", ",", "replace", "=", "False", ")", "\n", "w", "=", "w", "[", "inds", "]", "\n", "h", "=", "h", "[", "inds", "]", "\n", "", "transform_len", "=", "len", "(", "w", ")", "\n", "\n", "r_w_bias", "=", "np", ".", "random", ".", "randint", "(", "w", "-", "width", ",", "width", "-", "w", "+", "1", ")", "/", "width", "\n", "r_h_bias", "=", "np", ".", "random", ".", "randint", "(", "h", "-", "height", ",", "height", "-", "h", "+", "1", ")", "/", "height", "\n", "w", "=", "w", "/", "width", "\n", "h", "=", "h", "/", "height", "\n", "\n", "_theta", "[", ":", "transform_len", ",", "0", ",", "0", "]", "=", "torch", ".", "tensor", "(", "w", ",", "device", "=", "_device", ")", "\n", "_theta", "[", ":", "transform_len", ",", "1", ",", "1", "]", "=", "torch", ".", "tensor", "(", "h", ",", "device", "=", "_device", ")", "\n", "_theta", "[", ":", "transform_len", ",", "0", ",", "2", "]", "=", "torch", ".", "tensor", "(", "r_w_bias", ",", "device", "=", "_device", ")", "\n", "_theta", "[", ":", "transform_len", ",", "1", ",", "2", "]", "=", "torch", ".", "tensor", "(", "r_h_bias", ",", "device", "=", "_device", ")", "\n", "\n", "grid", "=", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "align_corners", "=", "False", ")", "\n", "output", "=", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "align_corners", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.HorizontalFlipLayer.__init__": [[158, 169], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "simclr_aug.HorizontalFlipLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        img_size : (int, int, int)\n            Height and width must be powers of 2.  E.g. (32, 32, 1) or\n            (64, 128, 3). Last number indicates number of channels, e.g. 1 for\n            grayscale or 3 for RGB\n        \"\"\"", "\n", "super", "(", "HorizontalFlipLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.HorizontalFlipLayer.forward": [[170, 180], ["inputs.size", "simclr_aug.HorizontalFlipLayer._eye.repeat", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "\n", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "r_sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "_device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "r_sign", "\n", "grid", "=", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "align_corners", "=", "False", ")", "\n", "output", "=", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "align_corners", "=", "False", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomHSVFunction.forward": [[183, 197], ["simclr_aug.rgb2hsv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "simclr_aug.hsv2rgb"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.rgb2hsv", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.hsv2rgb"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", ":", "\n", "# ctx is a context object that can be used to stash information", "\n", "# for backward computation", "\n", "        ", "x", "=", "rgb2hsv", "(", "x", ")", "\n", "h", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "h", "+=", "(", "f_h", "*", "255.", "/", "360.", ")", "\n", "h", "=", "(", "h", "%", "1", ")", "\n", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "h", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "f_s", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "f_v", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "x", "=", "hsv2rgb", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomHSVFunction.backward": [[198, 206], ["grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# We return as many input gradients as there were arguments.", "\n", "# Gradients of non-Tensor arguments to forward must be None.", "\n", "        ", "grad_input", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.__init__": [[209, 215], ["torch.Module.__init__", "simclr_aug.ColorJitterLayer._check_input", "simclr_aug.ColorJitterLayer._check_input", "simclr_aug.ColorJitterLayer._check_input", "simclr_aug.ColorJitterLayer._check_input"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer._check_input"], ["    ", "def", "__init__", "(", "self", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "super", "(", "ColorJitterLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "hue", "=", "self", ".", "_check_input", "(", "hue", ",", "'hue'", ",", "center", "=", "0", ",", "bound", "=", "(", "-", "0.5", ",", "0.5", ")", ",", "clip_first_on_zero", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer._check_input": [[216, 234], ["isinstance", "float", "ValueError", "max", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ",", "clip_first_on_zero", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "if", "clip_first_on_zero", ":", "\n", "                ", "value", "[", "0", "]", "=", "max", "(", "value", "[", "0", "]", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.adjust_contrast": [[235, 241], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.new_empty().uniform_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.new_empty", "x.size"], "methods", ["None"], ["", "def", "adjust_contrast", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "contrast", ":", "\n", "            ", "factor", "=", "x", ".", "new_empty", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "uniform_", "(", "*", "self", ".", "contrast", ")", "\n", "means", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "means", ")", "*", "factor", "+", "means", "\n", "", "return", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.adjust_hsv": [[242, 255], ["x.new_zeros", "x.new_ones", "x.new_ones", "RandomHSVFunction.apply", "x.size", "x.size", "x.size", "x.new_zeros.uniform_", "f_s.uniform_.uniform_.uniform_", "f_v.uniform_.uniform_.uniform_"], "methods", ["None"], ["", "def", "adjust_hsv", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_h", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_s", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_v", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "hue", ":", "\n", "            ", "f_h", ".", "uniform_", "(", "*", "self", ".", "hue", ")", "\n", "", "if", "self", ".", "saturation", ":", "\n", "            ", "f_s", "=", "f_s", ".", "uniform_", "(", "*", "self", ".", "saturation", ")", "\n", "", "if", "self", ".", "brightness", ":", "\n", "            ", "f_v", "=", "f_v", ".", "uniform_", "(", "*", "self", ".", "brightness", ")", "\n", "\n", "", "return", "RandomHSVFunction", ".", "apply", "(", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.transform": [[256, 266], ["numpy.random.rand", "t"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "# Shuffle transform", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_contrast", ",", "self", ".", "adjust_hsv", "]", "\n", "", "else", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_hsv", ",", "self", ".", "adjust_contrast", "]", "\n", "\n", "", "for", "t", "in", "transforms", ":", "\n", "            ", "inputs", "=", "t", "(", "inputs", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.forward": [[267, 269], ["simclr_aug.ColorJitterLayer.transform"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.ColorJitterLayer.transform"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomColorGrayLayer.__init__": [[272, 276], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "simclr_aug.RandomColorGrayLayer.register_buffer", "torch.tensor.view", "torch.tensor.view"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RandomColorGrayLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "_weight", "=", "torch", ".", "tensor", "(", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", "]", ")", "\n", "self", ".", "register_buffer", "(", "'_weight'", ",", "_weight", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.RandomColorGrayLayer.forward": [[277, 281], ["torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "l", "=", "F", ".", "conv2d", "(", "inputs", ",", "self", ".", "_weight", ")", "\n", "gray", "=", "torch", ".", "cat", "(", "[", "l", ",", "l", ",", "l", "]", ",", "dim", "=", "1", ")", "\n", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.GaussianBlur.__init__": [[284, 291], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sigma_range", ")", ":", "\n", "        ", "\"\"\"Blurs the given image with separable convolution.\n        Args:\n            sigma_range: Range of sigma for being used in each gaussian kernel.\n        \"\"\"", "\n", "super", "(", "GaussianBlur", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma_range", "=", "sigma_range", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.GaussianBlur.forward": [[292, 305], ["inputs.size", "int", "numpy.random.uniform", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "kornia.filters.filter2d", "kornia.filters.get_gaussian_kernel2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "\n", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "kernel_size", "=", "height", "//", "10", "\n", "radius", "=", "int", "(", "kernel_size", "/", "2", ")", "\n", "kernel_size", "=", "radius", "*", "2", "+", "1", "\n", "\n", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "sigma_range", ")", "\n", "kernel", "=", "torch", ".", "unsqueeze", "(", "get_gaussian_kernel2d", "(", "(", "kernel_size", ",", "kernel_size", ")", ",", "(", "sigma", ",", "sigma", ")", ")", ",", "dim", "=", "0", ")", "\n", "blurred", "=", "filter2d", "(", "inputs", ",", "kernel", ",", "\"reflect\"", ")", "\n", "return", "blurred", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.CutOut.__init__": [[308, 317], ["torch.Module.__init__", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "simclr_aug.CutOut.register_buffer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "length", "%", "2", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Currently CutOut only accepts odd lengths: length % 2 == 1\"", ")", "\n", "", "self", ".", "length", "=", "length", "\n", "\n", "_weight", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "self", ".", "length", ")", "\n", "self", ".", "register_buffer", "(", "'_weight'", ",", "_weight", ")", "\n", "self", ".", "_padding", "=", "(", "length", "-", "1", ")", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.CutOut.forward": [[318, 337], ["inputs.new_zeros", "inputs.new_zeros", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.nn.functional.conv1d.scatter_().unsqueeze_", "torch.nn.functional.conv1d.scatter_().unsqueeze_", "torch.nn.functional.conv1d", "torch.nn.functional.conv1d", "torch.nn.functional.conv1d", "torch.nn.functional.conv1d", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.nn.functional.conv1d.scatter_", "torch.nn.functional.conv1d.scatter_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", ",", "_", ",", "h", ",", "w", "=", "inputs", ".", "shape", "\n", "\n", "mask_h", "=", "inputs", ".", "new_zeros", "(", "N", ",", "h", ")", "\n", "mask_w", "=", "inputs", ".", "new_zeros", "(", "N", ",", "w", ")", "\n", "\n", "h_center", "=", "torch", ".", "randint", "(", "h", ",", "(", "N", ",", "1", ")", ",", "device", "=", "_device", ")", "\n", "w_center", "=", "torch", ".", "randint", "(", "w", ",", "(", "N", ",", "1", ")", ",", "device", "=", "_device", ")", "\n", "\n", "mask_h", ".", "scatter_", "(", "1", ",", "h_center", ",", "1", ")", ".", "unsqueeze_", "(", "1", ")", "\n", "mask_w", ".", "scatter_", "(", "1", ",", "w_center", ",", "1", ")", ".", "unsqueeze_", "(", "1", ")", "\n", "\n", "mask_h", "=", "F", ".", "conv1d", "(", "mask_h", ",", "self", ".", "_weight", ",", "padding", "=", "self", ".", "_padding", ")", "\n", "mask_w", "=", "F", ".", "conv1d", "(", "mask_w", ",", "self", ".", "_weight", ",", "padding", "=", "self", ".", "_padding", ")", "\n", "\n", "mask", "=", "1.", "-", "torch", ".", "einsum", "(", "'bci,bcj->bcij'", ",", "mask_h", ",", "mask_w", ")", "\n", "outputs", "=", "inputs", "*", "mask", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.SimclrAugment.__init__": [[340, 359], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "simclr_aug.RandomResizeCropLayer", "simclr_aug.HorizontalFlipLayer", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "torch.Sequential", "torch.Sequential", "simclr_aug.ColorJitterLayer", "simclr_aug.RandomColorGrayLayer", "simclr_aug.RandomResizeCropLayer", "simclr_aug.HorizontalFlipLayer", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "torch.Sequential", "torch.Sequential", "simclr_aug.ColorJitterLayer", "simclr_aug.ColorJitterLayer", "simclr_aug.RandomColorGrayLayer", "simclr_aug.GaussianBlur", "simclr_aug.RandomResizeCropLayer", "simclr_aug.HorizontalFlipLayer", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "torch.Sequential", "torch.Sequential", "simclr_aug.ColorJitterLayer", "simclr_aug.RandomColorGrayLayer", "simclr_aug.GaussianBlur", "simclr_aug.CutOut", "simclr_aug.RandomResizeCropLayer", "simclr_aug.HorizontalFlipLayer", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "simclr_aug.RandomApply", "simclr_aug.ColorJitterLayer", "simclr_aug.RandomColorGrayLayer", "simclr_aug.GaussianBlur"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_type", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "aug_type", "==", "\"simclr_basic\"", ":", "\n", "            ", "self", ".", "pipeline", "=", "nn", ".", "Sequential", "(", "RandomResizeCropLayer", "(", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "HorizontalFlipLayer", "(", ")", ",", "\n", "RandomApply", "(", "ColorJitterLayer", "(", "ColorJitterLayer", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", ")", ",", "p", "=", "0.8", ")", ",", "\n", "RandomApply", "(", "RandomColorGrayLayer", "(", ")", ",", "p", "=", "0.2", ")", ")", "\n", "", "elif", "aug_type", "==", "\"simclr_hq\"", ":", "\n", "            ", "self", ".", "pipeline", "=", "nn", ".", "Sequential", "(", "RandomResizeCropLayer", "(", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "HorizontalFlipLayer", "(", ")", ",", "\n", "RandomApply", "(", "ColorJitterLayer", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", ",", "p", "=", "0.8", ")", ",", "\n", "RandomApply", "(", "RandomColorGrayLayer", "(", ")", ",", "p", "=", "0.2", ")", ",", "RandomApply", "(", "GaussianBlur", "(", "(", "0.1", ",", "2.0", ")", ")", ",", "p", "=", "0.5", ")", ")", "\n", "", "elif", "aug_type", "==", "\"simclr_hq_cutout\"", ":", "\n", "            ", "self", ".", "pipeline", "=", "nn", ".", "Sequential", "(", "RandomResizeCropLayer", "(", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "HorizontalFlipLayer", "(", ")", ",", "\n", "RandomApply", "(", "ColorJitterLayer", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", ",", "p", "=", "0.8", ")", ",", "\n", "RandomApply", "(", "RandomColorGrayLayer", "(", ")", ",", "p", "=", "0.2", ")", ",", "RandomApply", "(", "GaussianBlur", "(", "(", "0.1", ",", "2.0", ")", ")", ",", "p", "=", "0.5", ")", ",", "\n", "RandomApply", "(", "CutOut", "(", "15", ")", ",", "p", "=", "0.5", ")", ")", "\n", "", "elif", "aug_type", "==", "\"byol\"", ":", "\n", "            ", "self", ".", "pipeline", "=", "nn", ".", "Sequential", "(", "RandomResizeCropLayer", "(", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "HorizontalFlipLayer", "(", ")", ",", "\n", "RandomApply", "(", "ColorJitterLayer", "(", "0.4", ",", "0.4", ",", "0.2", ",", "0.1", ")", ",", "p", "=", "0.8", ")", ",", "\n", "RandomApply", "(", "RandomColorGrayLayer", "(", ")", ",", "p", "=", "0.2", ")", ",", "RandomApply", "(", "GaussianBlur", "(", "(", "0.1", ",", "2.0", ")", ")", ",", "p", "=", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.SimclrAugment.forward": [[360, 362], ["simclr_aug.SimclrAugment.pipeline"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "pipeline", "(", "images", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.rgb2hsv": [[38, 68], ["torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "rgb.max", "rgb.min", "math.sqrt", "torch.isfinite", "torch.isfinite"], "function", ["None"], ["def", "rgb2hsv", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d RGB tensor to the HSV counterpart.\n    Here, we compute hue using atan2() based on the definition in [1],\n    instead of using the common lookup table approach as in [2, 3].\n    Those values agree when the angle is a multiple of 30\u00b0,\n    otherwise they may differ at most ~1.2\u00b0.\n    >>> %timeit rgb2hsv_lookup(rgb)\n    1.07 ms \u00b1 2.96 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n    >>> %timeit rgb2hsv(rgb)\n    380 \u00b5s \u00b1 555 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n    >>> (rgb2hsv_lookup(rgb) - rgb2hsv(rgb)).abs().max()\n    tensor(0.0031, device='cuda:0')\n    References\n    [1] https://en.wikipedia.org/wiki/Hue\n    [2] https://www.rapidtables.com/convert/color/rgb-to-hsv.html\n    [3] https://github.com/scikit-image/scikit-image/blob/master/skimage/color/colorconv.py#L212\n    \"\"\"", "\n", "\n", "r", ",", "g", ",", "b", "=", "rgb", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "\n", "Cmax", "=", "rgb", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "Cmin", "=", "rgb", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "\n", "hue", "=", "torch", ".", "atan2", "(", "math", ".", "sqrt", "(", "3", ")", "*", "(", "g", "-", "b", ")", ",", "2", "*", "r", "-", "g", "-", "b", ")", "\n", "hue", "=", "(", "hue", "%", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "saturate", "=", "1", "-", "Cmin", "/", "(", "Cmax", "+", "1e-8", ")", "\n", "value", "=", "Cmax", "\n", "hsv", "=", "torch", ".", "stack", "(", "[", "hue", ",", "saturate", ",", "value", "]", ",", "dim", "=", "1", ")", "\n", "hsv", "[", "~", "torch", ".", "isfinite", "(", "hsv", ")", "]", "=", "0.", "\n", "return", "hsv", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.simclr_aug.hsv2rgb": [[70, 90], ["hsv.new_tensor().view", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "hsv.new_tensor"], "function", ["None"], ["", "def", "hsv2rgb", "(", "hsv", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d HSV tensor to the RGB counterpart.\n    >>> %timeit hsv2rgb_lookup(hsv)\n    2.37 ms \u00b1 13.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n    >>> %timeit hsv2rgb(rgb)\n    298 \u00b5s \u00b1 542 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n    >>> torch.allclose(hsv2rgb(hsv), hsv2rgb_lookup(hsv), atol=1e-6)\n    True\n    References\n    [1] https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative\n    \"\"\"", "\n", "\n", "h", ",", "s", ",", "v", "=", "hsv", "[", ":", ",", "[", "0", "]", "]", ",", "hsv", "[", ":", ",", "[", "1", "]", "]", ",", "hsv", "[", ":", ",", "[", "2", "]", "]", "\n", "c", "=", "v", "*", "s", "\n", "\n", "n", "=", "hsv", ".", "new_tensor", "(", "[", "5", ",", "3", ",", "1", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "k", "=", "(", "n", "+", "h", "*", "6", ")", "%", "6", "\n", "t", "=", "torch", ".", "min", "(", "k", ",", "4.", "-", "k", ")", "\n", "t", "=", "torch", ".", "clamp", "(", "t", ",", "0", ",", "1", ")", "\n", "return", "v", "-", "c", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.dummy_context_mgr.__enter__": [[45, 47], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.dummy_context_mgr.__exit__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.__init__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.__call__": [[56, 58], ["misc.SaveOutput.outputs.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "module", ",", "module_input", ")", ":", "\n", "        ", "self", ".", "outputs", ".", "append", "(", "module_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.clear": [[59, 61], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.__init__": [[64, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "generator_mapping", ",", "generator_synthesis", ",", "batch_statistics", ",", "standing_statistics", ",", "\n", "standing_max_batch", ",", "standing_step", ",", "cfgs", ",", "device", ",", "global_rank", ",", "logger", ",", "std_stat_counter", ")", ":", "\n", "        ", "self", ".", "generator", "=", "generator", "\n", "self", ".", "generator_mapping", "=", "generator_mapping", "\n", "self", ".", "generator_synthesis", "=", "generator_synthesis", "\n", "self", ".", "batch_statistics", "=", "batch_statistics", "\n", "self", ".", "standing_statistics", "=", "standing_statistics", "\n", "self", ".", "standing_max_batch", "=", "standing_max_batch", "\n", "self", ".", "standing_step", "=", "standing_step", "\n", "self", ".", "cfgs", "=", "cfgs", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "global_rank", "=", "global_rank", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "std_stat_counter", "=", "std_stat_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.GeneratorController.prepare_generator": [[79, 107], ["misc.GeneratorController.generator.eval", "misc.GeneratorController.generator.apply", "misc.GeneratorController.generator.eval", "misc.GeneratorController.generator.apply", "misc.GeneratorController.generator.train", "misc.apply_standing_statistics", "misc.GeneratorController.generator.eval", "misc.GeneratorController.generator.apply", "misc.GeneratorController.generator.apply", "misc.GeneratorController.generator.apply"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.apply_standing_statistics", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval"], ["", "def", "prepare_generator", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "standing_statistics", ":", "\n", "            ", "if", "self", ".", "std_stat_counter", ">", "1", ":", "\n", "                ", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "generator", ".", "train", "(", ")", "\n", "apply_standing_statistics", "(", "generator", "=", "self", ".", "generator", ",", "\n", "standing_max_batch", "=", "self", ".", "standing_max_batch", ",", "\n", "standing_step", "=", "self", ".", "standing_step", ",", "\n", "DATA", "=", "self", ".", "cfgs", ".", "DATA", ",", "\n", "MODEL", "=", "self", ".", "cfgs", ".", "MODEL", ",", "\n", "LOSS", "=", "self", ".", "cfgs", ".", "LOSS", ",", "\n", "OPTIMIZATION", "=", "self", ".", "cfgs", ".", "OPTIMIZATION", ",", "\n", "RUN", "=", "self", ".", "cfgs", ".", "RUN", ",", "\n", "STYLEGAN", "=", "self", ".", "cfgs", ".", "STYLEGAN", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", "global_rank", "=", "self", ".", "global_rank", ",", "\n", "logger", "=", "self", ".", "logger", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "generator", ".", "eval", "(", ")", "\n", "if", "self", ".", "batch_statistics", ":", "\n", "                ", "self", ".", "generator", ".", "apply", "(", "set_bn_trainable", ")", "\n", "self", ".", "generator", ".", "apply", "(", "untrack_bn_statistics", ")", "\n", "", "self", ".", "generator", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "", "return", "self", ".", "generator", ",", "self", ".", "generator_mapping", ",", "self", ".", "generator_synthesis", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.__init__": [[111, 113], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.reset": [[114, 119], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update": [[120, 125], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accuracy": [[127, 142], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "target.view", "correct[].reshape().float", "wrong_k.mul_", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "wrong_k", "=", "batch_size", "-", "correct_k", "\n", "res", ".", "append", "(", "100", "-", "wrong_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.prepare_folder": [[144, 149], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "prepare_folder", "(", "names", ",", "save_dir", ")", ":", "\n", "    ", "for", "name", "in", "names", ":", "\n", "        ", "folder_path", "=", "join", "(", "save_dir", ",", "name", ")", "\n", "if", "not", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.download_data_if_possible": [[151, 156], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR100"], "function", ["None"], ["", "", "", "def", "download_data_if_possible", "(", "data_name", ",", "data_dir", ")", ":", "\n", "    ", "if", "data_name", "==", "\"CIFAR10\"", ":", "\n", "        ", "data", "=", "CIFAR10", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "", "elif", "data_name", "==", "\"CIFAR100\"", ":", "\n", "        ", "data", "=", "CIFAR100", "(", "root", "=", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.fix_seed": [[158, 164], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed"], "function", ["None"], ["", "", "def", "fix_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.setup": [[166, 182], ["torch.init_process_group", "torch.init_process_group"], "function", ["None"], ["", "def", "setup", "(", "rank", ",", "world_size", ",", "backend", "=", "\"nccl\"", ")", ":", "\n", "    ", "if", "sys", ".", "platform", "==", "\"win32\"", ":", "\n", "# Distributed package only covers collective communications with Gloo", "\n", "# backend and FileStore on Windows platform. Set init_method parameter", "\n", "# in init_process_group to a local file.", "\n", "# Example init_method=\"file:///f:/libtmp/some_file\"", "\n", "        ", "init_method", "=", "\"file:///{your local file path}\"", "\n", "\n", "# initialize the process group", "\n", "dist", ".", "init_process_group", "(", "backend", ",", "init_method", "=", "init_method", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "", "else", ":", "\n", "# initialize the process group", "\n", "        ", "dist", ".", "init_process_group", "(", "backend", ",", "\n", "init_method", "=", "\"env://\"", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.cleanup": [[184, 186], ["torch.destroy_process_group"], "function", ["None"], ["", "", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.count_parameters": [[188, 190], ["sum", "p.data.nelement", "module.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "module", ")", ":", "\n", "    ", "return", "\"Number of parameters: {num}\"", ".", "format", "(", "num", "=", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.toggle_grad": [[192, 217], ["misc.peel_model", "peel_model.named_parameters", "len", "peel_model.named_parameters", "peel_model.named_parameters", "range"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model"], ["", "def", "toggle_grad", "(", "model", ",", "grad", ",", "num_freeze_layers", "=", "-", "1", ",", "is_stylegan", "=", "False", ")", ":", "\n", "    ", "model", "=", "peel_model", "(", "model", ")", "\n", "if", "is_stylegan", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "grad", "\n", "", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "num_blocks", "=", "len", "(", "model", ".", "in_dims", ")", "\n", "assert", "num_freeze_layers", "<", "num_blocks", ",", "\"cannot freeze the {nfl}th block > total {nb} blocks.\"", ".", "format", "(", "nfl", "=", "num_freeze_layers", ",", "\n", "nb", "=", "num_blocks", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "num_freeze_layers", "==", "-", "1", ":", "\n", "            ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "grad", "\n", "", "", "else", ":", "\n", "            ", "assert", "grad", ",", "\"cannot freeze the model when grad is False\"", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "for", "layer", "in", "range", "(", "num_freeze_layers", ")", ":", "\n", "                    ", "block_name", "=", "\"blocks.{layer}\"", ".", "format", "(", "layer", "=", "layer", ")", "\n", "if", "block_name", "in", "name", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_log_dicts": [[219, 225], ["utils.load_prev_dict"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ckpt.load_prev_dict"], ["", "", "", "", "", "", "def", "load_log_dicts", "(", "directory", ",", "file_name", ",", "ph", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "log_dict", "=", "ckpt", ".", "load_prev_dict", "(", "directory", "=", "directory", ",", "file_name", "=", "file_name", ")", "\n", "", "except", ":", "\n", "        ", "log_dict", "=", "ph", "\n", "", "return", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_model_require_grad": [[227, 233], ["model.named_parameters", "isinstance", "isinstance"], "function", ["None"], ["", "def", "make_model_require_grad", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.identity": [[235, 237], ["None"], "function", ["None"], ["", "", "def", "identity", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.set_bn_trainable": [[239, 242], ["isinstance", "m.train"], "function", ["None"], ["", "def", "set_bn_trainable", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.untrack_bn_statistics": [[244, 247], ["isinstance"], "function", ["None"], ["", "", "def", "untrack_bn_statistics", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "track_running_stats", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.track_bn_statistics": [[249, 252], ["isinstance"], "function", ["None"], ["", "", "def", "track_bn_statistics", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "track_running_stats", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.set_deterministic_op_trainable": [[254, 263], ["isinstance", "isinstance", "isinstance", "isinstance", "m.train", "m.train", "m.train", "m.train"], "function", ["None"], ["", "", "def", "set_deterministic_op_trainable", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "Conv2d", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "linear", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "Embedding", ")", ":", "\n", "        ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.reset_bn_statistics": [[265, 268], ["isinstance", "m.reset_running_stats"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "", "def", "reset_bn_statistics", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "m", ".", "reset_running_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.elapsed_time": [[270, 274], ["datetime.datetime.now", "str().split", "str"], "function", ["None"], ["", "", "def", "elapsed_time", "(", "start_time", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "elapsed", "=", "now", "-", "start_time", "\n", "return", "str", "(", "elapsed", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "# remove milliseconds", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.reshape_weight_to_matrix": [[276, 283], ["weight_mat.permute.size", "weight_mat.permute.reshape", "weight_mat.permute.permute", "range", "weight_mat.permute.dim"], "function", ["None"], ["", "def", "reshape_weight_to_matrix", "(", "weight", ")", ":", "\n", "    ", "weight_mat", "=", "weight", "\n", "dim", "=", "0", "\n", "if", "dim", "!=", "0", ":", "\n", "        ", "weight_mat", "=", "weight_mat", ".", "permute", "(", "dim", ",", "*", "[", "d", "for", "d", "in", "range", "(", "weight_mat", ".", "dim", "(", ")", ")", "if", "d", "!=", "dim", "]", ")", "\n", "", "height", "=", "weight_mat", ".", "size", "(", "0", ")", "\n", "return", "weight_mat", ".", "reshape", "(", "height", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.calculate_all_sn": [[285, 299], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.named_parameters", "name.split", "misc.reshape_weight_to_matrix", "torch.dot().item", "torch.dot().item", "torch.dot().item", "torch.dot().item", "getattr", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.mv", "torch.mv", "torch.mv", "torch.mv"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.reshape_weight_to_matrix"], ["", "def", "calculate_all_sn", "(", "model", ",", "prefix", ")", ":", "\n", "    ", "sigmas", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "operations", "=", "model", "\n", "if", "\"weight_orig\"", "in", "name", ":", "\n", "                ", "splited_name", "=", "name", ".", "split", "(", "\".\"", ")", "\n", "for", "name_element", "in", "splited_name", "[", ":", "-", "1", "]", ":", "\n", "                    ", "operations", "=", "getattr", "(", "operations", ",", "name_element", ")", "\n", "", "weight_orig", "=", "reshape_weight_to_matrix", "(", "operations", ".", "weight_orig", ")", "\n", "weight_u", "=", "operations", ".", "weight_u", "\n", "weight_v", "=", "operations", ".", "weight_v", "\n", "sigmas", "[", "prefix", "+", "\"_\"", "+", "name", "]", "=", "torch", ".", "dot", "(", "weight_u", ",", "torch", ".", "mv", "(", "weight_orig", ",", "weight_v", ")", ")", ".", "item", "(", ")", "\n", "", "", "", "return", "sigmas", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.apply_standing_statistics": [[301, 334], ["generator.train", "generator.apply", "tqdm.tqdm", "generator.eval", "logger.info", "range", "utils.generate_images", "random.randint", "random.randint"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "def", "apply_standing_statistics", "(", "generator", ",", "standing_max_batch", ",", "standing_step", ",", "DATA", ",", "MODEL", ",", "LOSS", ",", "OPTIMIZATION", ",", "RUN", ",", "STYLEGAN", ",", "\n", "device", ",", "global_rank", ",", "logger", ")", ":", "\n", "    ", "generator", ".", "train", "(", ")", "\n", "generator", ".", "apply", "(", "reset_bn_statistics", ")", "\n", "if", "global_rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Acuumulate statistics of batchnorm layers to improve generation performance.\"", ")", "\n", "", "for", "i", "in", "tqdm", "(", "range", "(", "standing_step", ")", ")", ":", "\n", "        ", "batch_size_per_gpu", "=", "standing_max_batch", "//", "OPTIMIZATION", ".", "world_size", "\n", "if", "RUN", ".", "distributed_data_parallel", ":", "\n", "            ", "rand_batch_size", "=", "random", ".", "randint", "(", "1", ",", "batch_size_per_gpu", ")", "\n", "", "else", ":", "\n", "            ", "rand_batch_size", "=", "random", ".", "randint", "(", "1", ",", "batch_size_per_gpu", ")", "*", "OPTIMIZATION", ".", "world_size", "\n", "", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "MODEL", ".", "z_prior", ",", "\n", "truncation_factor", "=", "-", "1", ",", "\n", "batch_size", "=", "rand_batch_size", ",", "\n", "z_dim", "=", "MODEL", ".", "z_dim", ",", "\n", "num_classes", "=", "DATA", ".", "num_classes", ",", "\n", "y_sampler", "=", "\"totally_random\"", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "None", ",", "\n", "is_train", "=", "True", ",", "\n", "LOSS", "=", "LOSS", ",", "\n", "RUN", "=", "RUN", ",", "\n", "MODEL", "=", "MODEL", ",", "\n", "is_stylegan", "=", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ",", "\n", "generator_mapping", "=", "None", ",", "\n", "generator_synthesis", "=", "None", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "device", "=", "device", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "", "generator", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.define_sampler": [[335, 344], ["None"], "function", ["None"], ["", "def", "define_sampler", "(", "dataset_name", ",", "dis_cond_mtd", ",", "batch_size", ",", "num_classes", ")", ":", "\n", "    ", "if", "dis_cond_mtd", "!=", "\"W/O\"", ":", "\n", "        ", "if", "dataset_name", "==", "\"CIFAR10\"", "or", "batch_size", ">=", "num_classes", "*", "8", ":", "\n", "            ", "sampler", "=", "\"acending_all\"", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "\"acending_some\"", "\n", "", "", "else", ":", "\n", "        ", "sampler", "=", "\"totally_random\"", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_trainable": [[345, 354], ["Gen.train", "Gen.apply", "Dis.train", "Dis.apply", "Gen_ema.train", "Gen_ema.apply"], "function", ["None"], ["", "def", "make_GAN_trainable", "(", "Gen", ",", "Gen_ema", ",", "Dis", ")", ":", "\n", "    ", "Gen", ".", "train", "(", ")", "\n", "Gen", ".", "apply", "(", "track_bn_statistics", ")", "\n", "if", "Gen_ema", "is", "not", "None", ":", "\n", "        ", "Gen_ema", ".", "train", "(", ")", "\n", "Gen_ema", ".", "apply", "(", "track_bn_statistics", ")", "\n", "\n", "", "Dis", ".", "train", "(", ")", "\n", "Dis", ".", "apply", "(", "track_bn_statistics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_GAN_untrainable": [[356, 365], ["Gen.eval", "Gen.apply", "Dis.eval", "Dis.apply", "Gen_ema.eval", "Gen_ema.apply"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval"], ["", "def", "make_GAN_untrainable", "(", "Gen", ",", "Gen_ema", ",", "Dis", ")", ":", "\n", "    ", "Gen", ".", "eval", "(", ")", "\n", "Gen", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "if", "Gen_ema", "is", "not", "None", ":", "\n", "        ", "Gen_ema", ".", "eval", "(", ")", "\n", "Gen_ema", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "\n", "", "Dis", ".", "eval", "(", ")", "\n", "Dis", ".", "apply", "(", "set_deterministic_op_trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_models": [[367, 386], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "peel_models", "(", "Gen", ",", "Gen_ema", ",", "Dis", ")", ":", "\n", "    ", "if", "isinstance", "(", "Dis", ",", "DataParallel", ")", "or", "isinstance", "(", "Dis", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "dis", "=", "Dis", ".", "module", "\n", "", "else", ":", "\n", "        ", "dis", "=", "Dis", "\n", "\n", "", "if", "isinstance", "(", "Gen", ",", "DataParallel", ")", "or", "isinstance", "(", "Gen", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "gen", "=", "Gen", ".", "module", "\n", "", "else", ":", "\n", "        ", "gen", "=", "Gen", "\n", "\n", "", "if", "Gen_ema", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "Gen_ema", ",", "DataParallel", ")", "or", "isinstance", "(", "Gen_ema", ",", "DistributedDataParallel", ")", ":", "\n", "            ", "gen_ema", "=", "Gen_ema", ".", "module", "\n", "", "else", ":", "\n", "            ", "gen_ema", "=", "Gen_ema", "\n", "", "", "else", ":", "\n", "        ", "gen_ema", "=", "None", "\n", "", "return", "gen", ",", "gen_ema", ",", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model": [[388, 392], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "peel_model", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "DataParallel", ")", "or", "isinstance", "(", "model", ",", "DistributedDataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model": [[394, 401], ["glob.glob", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "len", "misc.find_and_remove", "os.path.join", "model_tpl.format", "model_tpl.format"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.find_and_remove"], ["", "def", "save_model", "(", "model", ",", "when", ",", "step", ",", "ckpt_dir", ",", "states", ")", ":", "\n", "    ", "model_tpl", "=", "\"model={model}-{when}-weights-step={step}.pth\"", "\n", "model_ckpt_list", "=", "glob", ".", "glob", "(", "join", "(", "ckpt_dir", ",", "model_tpl", ".", "format", "(", "model", "=", "model", ",", "when", "=", "when", ",", "step", "=", "\"*\"", ")", ")", ")", "\n", "if", "len", "(", "model_ckpt_list", ")", ">", "0", ":", "\n", "        ", "find_and_remove", "(", "model_ckpt_list", "[", "0", "]", ")", "\n", "\n", "", "torch", ".", "save", "(", "states", ",", "join", "(", "ckpt_dir", ",", "model_tpl", ".", "format", "(", "model", "=", "model", ",", "when", "=", "when", ",", "step", "=", "step", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_model_c": [[403, 406], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save"], ["", "def", "save_model_c", "(", "states", ",", "mode", ",", "RUN", ")", ":", "\n", "    ", "ckpt_path", "=", "join", "(", "RUN", ".", "ckpt_dir", ",", "\"model=C-{mode}-best-weights.pth\"", ".", "format", "(", "mode", "=", "mode", ")", ")", "\n", "torch", ".", "save", "(", "states", ",", "ckpt_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.find_string": [[408, 412], ["enumerate"], "function", ["None"], ["", "def", "find_string", "(", "list_", ",", "string", ")", ":", "\n", "    ", "for", "i", ",", "s", "in", "enumerate", "(", "list_", ")", ":", "\n", "        ", "if", "string", "==", "s", ":", "\n", "            ", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.find_and_remove": [[414, 417], ["os.path.isfile", "os.remove"], "function", ["None"], ["", "", "", "def", "find_and_remove", "(", "path", ")", ":", "\n", "    ", "if", "isfile", "(", "path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_img_canvas": [[419, 430], ["os.path.dirname", "torchvision.utils.save_image", "os.path.exists", "os.makedirs", "logger.info"], "function", ["None"], ["", "", "def", "plot_img_canvas", "(", "images", ",", "save_path", ",", "num_cols", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logging", "=", "False", "\n", "", "directory", "=", "dirname", "(", "save_path", ")", "\n", "\n", "if", "not", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_image", "(", "(", "(", "images", "+", "1", ")", "/", "2", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", ",", "save_path", ",", "padding", "=", "0", ",", "nrow", "=", "num_cols", ")", "\n", "if", "logging", ":", "\n", "        ", "logger", ".", "info", "(", "\"Save image canvas to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_spectrum_image": [[432, 453], ["os.path.join", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.set_title", "fig.add_subplot.imshow", "fig.add_subplot.set_title", "plt.figure.savefig", "os.path.exists", "os.makedirs", "logger.info"], "function", ["None"], ["", "", "def", "plot_spectrum_image", "(", "real_spectrum", ",", "fake_spectrum", ",", "directory", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logging", "=", "False", "\n", "\n", "", "if", "not", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"dfft_spectrum.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "\n", "ax1", ".", "imshow", "(", "real_spectrum", ",", "cmap", "=", "\"viridis\"", ")", "\n", "ax1", ".", "set_title", "(", "\"Spectrum of real images\"", ")", "\n", "\n", "ax2", ".", "imshow", "(", "fake_spectrum", ",", "cmap", "=", "\"viridis\"", ")", "\n", "ax2", ".", "set_title", "(", "\"Spectrum of fake images\"", ")", "\n", "fig", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "\n", "        ", "logger", ".", "info", "(", "\"Save image to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.plot_tsne_scatter_plot": [[455, 480], ["os.path.join", "matplotlib.figure", "seaborn.scatterplot().legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "os.path.exists", "os.makedirs", "logger.info", "seaborn.scatterplot", "seaborn.color_palette"], "function", ["None"], ["", "", "def", "plot_tsne_scatter_plot", "(", "df", ",", "tsne_results", ",", "flag", ",", "directory", ",", "logger", ",", "logging", "=", "True", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logging", "=", "False", "\n", "\n", "", "if", "not", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "\"tsne_scatter_{flag}.png\"", ".", "format", "(", "flag", "=", "flag", ")", ")", "\n", "\n", "df", "[", "\"tsne-2d-one\"", "]", "=", "tsne_results", "[", ":", ",", "0", "]", "\n", "df", "[", "\"tsne-2d-two\"", "]", "=", "tsne_results", "[", ":", ",", "1", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "sns", ".", "scatterplot", "(", "x", "=", "\"tsne-2d-one\"", ",", "\n", "y", "=", "\"tsne-2d-two\"", ",", "\n", "hue", "=", "\"labels\"", ",", "\n", "palette", "=", "sns", ".", "color_palette", "(", "\"hls\"", ",", "10", ")", ",", "\n", "data", "=", "df", ",", "\n", "legend", "=", "\"full\"", ",", "\n", "alpha", "=", "0.5", ")", ".", "legend", "(", "fontsize", "=", "15", ",", "loc", "=", "\"upper right\"", ")", "\n", "plt", ".", "title", "(", "\"TSNE result of {flag} images\"", ".", "format", "(", "flag", "=", "flag", ")", ",", "fontsize", "=", "25", ")", "\n", "plt", ".", "xlabel", "(", "\"\"", ",", "fontsize", "=", "7", ")", "\n", "plt", ".", "ylabel", "(", "\"\"", ",", "fontsize", "=", "7", ")", "\n", "plt", ".", "savefig", "(", "save_path", ")", "\n", "if", "logging", ":", "\n", "        ", "logger", ".", "info", "(", "\"Save image to {path}\"", ".", "format", "(", "path", "=", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_images_png": [[482, 541], ["math.ceil", "print", "os.path.join", "os.path.exists", "os.makedirs", "range", "print", "iter", "shutil.rmtree", "os.makedirs", "tqdm.tqdm", "float", "float", "os.path.join", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "misc.dummy_context_mgr", "range", "enumerate", "str", "utils.generate_images", "images.detach", "next", "torchvision.utils.save_image", "os.path.join", "str", "labels[].item"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images"], ["", "", "def", "save_images_png", "(", "data_loader", ",", "generator", ",", "discriminator", ",", "is_generate", ",", "num_images", ",", "y_sampler", ",", "batch_size", ",", "z_prior", ",", "\n", "truncation_factor", ",", "z_dim", ",", "num_classes", ",", "LOSS", ",", "OPTIMIZATION", ",", "RUN", ",", "MODEL", ",", "is_stylegan", ",", "generator_mapping", ",", "\n", "generator_synthesis", ",", "directory", ",", "device", ")", ":", "\n", "    ", "num_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_images", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "if", "RUN", ".", "distributed_data_parallel", ":", "num_batches", "=", "num_batches", "//", "OPTIMIZATION", ".", "world_size", "+", "1", "\n", "if", "is_generate", ":", "\n", "        ", "image_type", "=", "\"fake\"", "\n", "", "else", ":", "\n", "        ", "image_type", "=", "\"real\"", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "", "print", "(", "\"Save {num_images} {image_type} images in png format.\"", ".", "format", "(", "num_images", "=", "num_images", ",", "image_type", "=", "image_type", ")", ")", "\n", "\n", "directory", "=", "join", "(", "directory", ",", "image_type", ")", "\n", "if", "exists", "(", "directory", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "directory", ")", "\n", "", "os", ".", "makedirs", "(", "directory", ")", "\n", "for", "f", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "join", "(", "directory", ",", "str", "(", "f", ")", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", "if", "not", "LOSS", ".", "apply_lo", "else", "dummy_context_mgr", "(", ")", "as", "mpc", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "num_batches", ")", ",", "disable", "=", "False", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "if", "is_generate", ":", "\n", "                ", "images", ",", "labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "z_prior", ",", "\n", "truncation_factor", "=", "truncation_factor", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "z_dim", "=", "z_dim", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "y_sampler", "=", "y_sampler", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "LOSS", ",", "\n", "RUN", "=", "RUN", ",", "\n", "MODEL", "=", "MODEL", ",", "\n", "is_stylegan", "=", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "device", "=", "device", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "break", "\n", "\n", "", "", "for", "idx", ",", "img", "in", "enumerate", "(", "images", ".", "detach", "(", ")", ")", ":", "\n", "                ", "if", "batch_size", "*", "i", "+", "idx", "<", "num_images", ":", "\n", "                    ", "save_image", "(", "(", "(", "img", "+", "1", ")", "/", "2", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", ",", "\n", "join", "(", "directory", ",", "str", "(", "labels", "[", "idx", "]", ".", "item", "(", ")", ")", ",", "\"{idx}.png\"", ".", "format", "(", "idx", "=", "batch_size", "*", "i", "+", "idx", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "print", "(", "\"Finish saving png images to {directory}/*/*.png\"", ".", "format", "(", "directory", "=", "directory", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.orthogonalize_model": [[543, 551], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.parameters", "param.view", "any", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "grad.view", "len", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "param.view.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "orthogonalize_model", "(", "model", ",", "strength", "=", "1e-4", ",", "blacklist", "=", "[", "]", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "len", "(", "param", ".", "shape", ")", "<", "2", "or", "any", "(", "[", "param", "is", "item", "for", "item", "in", "blacklist", "]", ")", ":", "\n", "                ", "continue", "\n", "", "w", "=", "param", ".", "view", "(", "param", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad", "=", "(", "2", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "w", ",", "w", ".", "t", "(", ")", ")", "*", "(", "1.", "-", "torch", ".", "eye", "(", "w", ".", "shape", "[", "0", "]", ",", "device", "=", "w", ".", "device", ")", ")", ",", "w", ")", ")", "\n", "param", ".", "grad", ".", "data", "+=", "strength", "*", "grad", ".", "view", "(", "param", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate": [[553, 556], ["torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().to.view", "torch.linspace().to.view"], "function", ["None"], ["", "", "", "def", "interpolate", "(", "x0", ",", "x1", ",", "num_midpoints", ")", ":", "\n", "    ", "lerp", "=", "torch", ".", "linspace", "(", "0", ",", "1.0", ",", "num_midpoints", "+", "2", ",", "device", "=", "\"cuda\"", ")", ".", "to", "(", "x0", ".", "dtype", ")", "\n", "return", "(", "(", "x0", "*", "(", "1", "-", "lerp", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", ")", "+", "(", "x1", "*", "lerp", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.accm_values_convert_dict": [[558, 572], ["list_dict.items"], "function", ["None"], ["", "def", "accm_values_convert_dict", "(", "list_dict", ",", "value_dict", ",", "step", ",", "interval", ")", ":", "\n", "    ", "for", "name", ",", "value_list", "in", "list_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "step", "is", "None", ":", "\n", "            ", "value_list", "+=", "[", "value_dict", "[", "name", "]", "]", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "value_list", "[", "step", "//", "interval", "-", "1", "]", "=", "value_dict", "[", "name", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "try", ":", "\n", "                    ", "value_list", "+=", "[", "value_dict", "[", "name", "]", "]", "\n", "", "except", ":", "\n", "                    ", "raise", "KeyError", "\n", "", "", "", "list_dict", "[", "name", "]", "=", "value_list", "\n", "", "return", "list_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.save_dict_npy": [[574, 580], ["os.path.join", "numpy.save", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.src.worker.WORKER.save"], ["", "def", "save_dict_npy", "(", "directory", ",", "name", ",", "dictionary", ")", ":", "\n", "    ", "if", "not", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "save_path", "=", "join", "(", "directory", ",", "name", "+", "\".npy\"", ")", "\n", "np", ".", "save", "(", "save_path", ",", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_ImageNet_label_dict": [[582, 596], ["open", "open", "json.load", "open.readline", "label_table.readline.split"], "function", ["None"], ["", "def", "load_ImageNet_label_dict", "(", "data_name", ",", "is_torch_backbone", ")", ":", "\n", "    ", "if", "data_name", "in", "[", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", "and", "is_torch_backbone", ":", "\n", "        ", "with", "open", "(", "\"./src/utils/pytorch_imagenet_folder_label_pairs.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "ImageNet_folder_label_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "label_table", "=", "open", "(", "\"./src/utils/tf_imagenet_folder_label_pairs.txt\"", ",", "'r'", ")", "\n", "ImageNet_folder_label_dict", ",", "label", "=", "{", "}", ",", "0", "\n", "while", "True", ":", "\n", "            ", "line", "=", "label_table", ".", "readline", "(", ")", "\n", "if", "not", "line", ":", "break", "\n", "folder", "=", "line", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "ImageNet_folder_label_dict", "[", "folder", "]", "=", "label", "\n", "label", "+=", "1", "\n", "", "", "return", "ImageNet_folder_label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.compute_gradient": [[598, 605], ["torch.one_hot", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "logits.detach().cpu", "fx.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "fx.unsqueeze", "oneMp.unsqueeze", "logits.detach"], "function", ["None"], ["", "def", "compute_gradient", "(", "fx", ",", "logits", ",", "label", ",", "num_classes", ")", ":", "\n", "    ", "probs", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "gt_prob", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", ")", "\n", "oneMp", "=", "gt_prob", "-", "probs", "\n", "preds", "=", "(", "probs", "*", "gt_prob", ")", ".", "sum", "(", "-", "1", ")", "\n", "grad", "=", "torch", ".", "mean", "(", "fx", ".", "unsqueeze", "(", "1", ")", "*", "oneMp", ".", "unsqueeze", "(", "2", ")", ",", "dim", "=", "0", ")", "\n", "return", "fx", ".", "norm", "(", "dim", "=", "1", ")", ",", "preds", ",", "torch", ".", "norm", "(", "grad", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_parameters": [[607, 622], ["dst.items", "mismatch_names.append", "dst[].copy_", "mismatch_names.append"], "function", ["None"], ["", "def", "load_parameters", "(", "src", ",", "dst", ",", "strict", "=", "True", ")", ":", "\n", "    ", "mismatch_names", "=", "[", "]", "\n", "for", "dst_key", ",", "dst_value", "in", "dst", ".", "items", "(", ")", ":", "\n", "        ", "if", "dst_key", "in", "src", ":", "\n", "            ", "if", "dst_value", ".", "shape", "==", "src", "[", "dst_key", "]", ".", "shape", ":", "\n", "                ", "dst", "[", "dst_key", "]", ".", "copy_", "(", "src", "[", "dst_key", "]", ")", "\n", "", "else", ":", "\n", "                ", "mismatch_names", ".", "append", "(", "dst_key", ")", "\n", "err", "=", "\"source tensor {key}({src}) does not match with destination tensor {key}({dst}).\"", ".", "format", "(", "key", "=", "dst_key", ",", "src", "=", "src", "[", "dst_key", "]", ".", "shape", ",", "dst", "=", "dst_value", ".", "shape", ")", "\n", "assert", "not", "strict", ",", "err", "\n", "", "", "else", ":", "\n", "            ", "mismatch_names", ".", "append", "(", "dst_key", ")", "\n", "assert", "not", "strict", ",", "\"dst_key is not in src_dict.\"", "\n", "", "", "return", "mismatch_names", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.enable_allreduce": [[624, 630], ["dict_.items", "value.mean"], "function", ["None"], ["", "def", "enable_allreduce", "(", "dict_", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "is", "not", "None", "and", "key", "!=", "\"label\"", ":", "\n", "            ", "loss", "+=", "value", ".", "mean", "(", ")", "*", "0", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_weights": [[632, 671], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "print", "print", "k.replace", "k.replace", "print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "model.load_state_dict", "print", "torch.hub.load_state_dict_from_url.items", "torch.hub.load_state_dict_from_url.items"], "function", ["None"], ["", "def", "load_pretrained_weights", "(", "model", ",", "pretrained_weights", ",", "checkpoint_key", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_weights", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "pretrained_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "checkpoint_key", "is", "not", "None", "and", "checkpoint_key", "in", "state_dict", ":", "\n", "            ", "print", "(", "f\"Take key {checkpoint_key} in provided checkpoint dict\"", ")", "\n", "state_dict", "=", "state_dict", "[", "checkpoint_key", "]", "\n", "# remove `module.` prefix", "\n", "", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "# remove `backbone.` prefix induced by multicrop wrapper", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Pretrained weights found at {} and loaded with msg: {}'", ".", "format", "(", "pretrained_weights", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Please use the `--pretrained_weights` argument to indicate the path of the checkpoint to evaluate.\"", ")", "\n", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "            ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "            ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_small_12_p16\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_small_12_p16_pretrain/dino_xcit_small_12_p16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_small_12_p8\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_small_12_p8_pretrain/dino_xcit_small_12_p8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_medium_24_p16\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_medium_24_p16_pretrain/dino_xcit_medium_24_p16_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"xcit_medium_24_p8\"", ":", "\n", "            ", "url", "=", "\"dino_xcit_medium_24_p8_pretrain/dino_xcit_medium_24_p8_pretrain.pth\"", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "            ", "url", "=", "\"dino_resnet50_pretrain/dino_resnet50_pretrain.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Since no pretrained weights have been provided, we load the reference pretrained DINO weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"There is no reference weights available for this model => We use random weights.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_linear_weights": [[673, 692], ["print", "linear_classifier.load_state_dict", "print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "k.replace", "state_dict.items"], "function", ["None"], ["", "", "", "def", "load_pretrained_linear_weights", "(", "linear_classifier", ",", "model_name", ",", "patch_size", ")", ":", "\n", "    ", "url", "=", "None", "\n", "if", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "16", ":", "\n", "        ", "url", "=", "\"dino_deitsmall16_pretrain/dino_deitsmall16_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_small\"", "and", "patch_size", "==", "8", ":", "\n", "        ", "url", "=", "\"dino_deitsmall8_pretrain/dino_deitsmall8_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "16", ":", "\n", "        ", "url", "=", "\"dino_vitbase16_pretrain/dino_vitbase16_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"vit_base\"", "and", "patch_size", "==", "8", ":", "\n", "        ", "url", "=", "\"dino_vitbase8_pretrain/dino_vitbase8_linearweights.pth\"", "\n", "", "elif", "model_name", "==", "\"resnet50\"", ":", "\n", "        ", "url", "=", "\"dino_resnet50_pretrain/dino_resnet50_linearweights.pth\"", "\n", "", "if", "url", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"We load the reference pretrained linear weights.\"", ")", "\n", "state_dict", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "\"https://dl.fbaipublicfiles.com/dino/\"", "+", "url", ")", "[", "\"state_dict\"", "]", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "\"module.linear.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "linear_classifier", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"We use random linear weights.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.log.make_run_name": [[14, 19], ["format.format", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "make_run_name", "(", "format", ",", "data_name", ",", "framework", ",", "phase", ")", ":", "\n", "    ", "return", "format", ".", "format", "(", "data_name", "=", "data_name", ",", "\n", "framework", "=", "framework", ",", "\n", "phase", "=", "phase", ",", "\n", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.log.make_logger": [[21, 45], ["logging.getLogger", "os.path.dirname", "os.path.join", "os.path.exists", "os.makedirs", "logging.FileHandler", "logging.StreamHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "[].split", "log_output.split"], "function", ["None"], ["", "def", "make_logger", "(", "save_dir", ",", "run_name", ",", "log_output", ")", ":", "\n", "    ", "if", "log_output", "is", "not", "None", ":", "\n", "        ", "run_name", "=", "log_output", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "run_name", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "log_filepath", "=", "log_output", "if", "log_output", "is", "not", "None", "else", "join", "(", "save_dir", ",", "\"logs\"", ",", "run_name", "+", "\".log\"", ")", "\n", "\n", "log_dir", "=", "dirname", "(", "log_filepath", ")", "\n", "if", "not", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "\n", "", "if", "not", "logger", ".", "handlers", ":", "# execute only if logger doesn't already exist", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_filepath", ",", "'a'", ",", "'utf-8'", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "os", ".", "sys", ".", "stdout", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(levelname)s] %(asctime)s > %(message)s'", ",", "datefmt", "=", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer": [[50, 70], ["resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "resize.make_resizer", "ValueError"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer"], ["def", "build_resizer", "(", "resizer", ",", "backbone", ",", "size", ")", ":", "\n", "    ", "if", "resizer", "==", "\"friendly\"", ":", "\n", "        ", "if", "backbone", "==", "\"InceptionV3_tf\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bilinear\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "backbone", "==", "\"InceptionV3_torch\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"lanczos\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "backbone", "==", "\"ResNet50_torch\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bilinear\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "backbone", "==", "\"SwAV_torch\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bilinear\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "backbone", "==", "\"DINO_torch\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bilinear\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "backbone", "==", "\"Swin-T_torch\"", ":", "\n", "            ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bicubic\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid resizer {resizer} specified\"", ")", "\n", "", "", "elif", "resizer", "==", "\"clean\"", ":", "\n", "        ", "return", "make_resizer", "(", "\"PIL\"", ",", "\"bicubic\"", ",", "(", "size", ",", "size", ")", ")", "\n", "", "elif", "resizer", "==", "\"legacy\"", ":", "\n", "        ", "return", "make_resizer", "(", "\"PyTorch\"", ",", "\"bilinear\"", ",", "(", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.make_resizer": [[72, 95], ["PIL.Image.fromarray", "img.resize.resize", "numpy.asarray().reshape", "numpy.concatenate().astype", "warnings.filterwarnings", "NotImplementedError", "x_np.astype", "resize.make_resizer.resize_single_channel"], "function", ["None"], ["", "", "def", "make_resizer", "(", "library", ",", "filter", ",", "output_size", ")", ":", "\n", "    ", "if", "library", "==", "\"PIL\"", ":", "\n", "        ", "s1", ",", "s2", "=", "output_size", "\n", "def", "resize_single_channel", "(", "x_np", ")", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "x_np", ".", "astype", "(", "np", ".", "float32", ")", ",", "mode", "=", "'F'", ")", "\n", "img", "=", "img", ".", "resize", "(", "output_size", ",", "resample", "=", "dict_name_to_filter", "[", "library", "]", "[", "filter", "]", ")", "\n", "return", "np", ".", "asarray", "(", "img", ")", ".", "reshape", "(", "s1", ",", "s2", ",", "1", ")", "\n", "", "def", "func", "(", "x", ")", ":", "\n", "            ", "x", "=", "[", "resize_single_channel", "(", "x", "[", ":", ",", ":", ",", "idx", "]", ")", "for", "idx", "in", "range", "(", "3", ")", "]", "\n", "x", "=", "np", ".", "concatenate", "(", "x", ",", "axis", "=", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "x", "\n", "", "", "elif", "library", "==", "\"PyTorch\"", ":", "\n", "        ", "import", "warnings", "\n", "# ignore the numpy warnings", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "def", "func", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "Tensor", "(", "x", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "[", "None", ",", "...", "]", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "output_size", ",", "mode", "=", "filter", ",", "align_corners", "=", "False", ")", "\n", "x", "=", "x", "[", "0", ",", "...", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ".", "clip", "(", "0", ",", "255", ")", "\n", "return", "x", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'library [%s] is not include'", "%", "library", ")", "\n", "", "return", "func", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sefa.apply_sefa": [[12, 30], ["utils.peel_model", "len", "z.repeat().view", "utils.interpolate().view", "misc.peel_model.", "torch.svd().V.to", "zs[].expand().repeat", "torch.cat", "torch.cat", "fake_label.repeat", "torch.split", "z.repeat", "utils.interpolate", "len", "zs[].expand", "torch.svd", "z.unsqueeze"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.peel_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["def", "apply_sefa", "(", "generator", ",", "backbone", ",", "z", ",", "fake_label", ",", "num_semantic_axis", ",", "maximum_variations", ",", "num_cols", ")", ":", "\n", "    ", "generator", "=", "misc", ".", "peel_model", "(", "generator", ")", "\n", "w", "=", "generator", ".", "linear0", ".", "weight", "\n", "if", "backbone", "==", "\"big_resnet\"", ":", "\n", "        ", "zs", "=", "z", "\n", "z", "=", "torch", ".", "split", "(", "zs", ",", "generator", ".", "chunk_size", ",", "0", ")", "[", "0", "]", "\n", "", "eigen_vectors", "=", "torch", ".", "svd", "(", "w", ")", ".", "V", ".", "to", "(", "z", ".", "device", ")", "[", ":", ",", ":", "num_semantic_axis", "]", "\n", "\n", "z_dim", "=", "len", "(", "z", ")", "\n", "zs_start", "=", "z", ".", "repeat", "(", "num_semantic_axis", ")", ".", "view", "(", "-", "1", ",", "1", ",", "z_dim", ")", "\n", "zs_end", "=", "(", "z", ".", "unsqueeze", "(", "1", ")", "+", "maximum_variations", "*", "eigen_vectors", ")", ".", "T", ".", "view", "(", "-", "1", ",", "1", ",", "z_dim", ")", "\n", "if", "backbone", "==", "\"big_resnet\"", ":", "\n", "        ", "zs_shard", "=", "zs", "[", "z_dim", ":", "]", ".", "expand", "(", "[", "1", ",", "1", ",", "-", "1", "]", ")", ".", "repeat", "(", "num_semantic_axis", ",", "1", ",", "1", ")", "\n", "zs_start", "=", "torch", ".", "cat", "(", "[", "zs_start", ",", "zs_shard", "]", ",", "axis", "=", "2", ")", "\n", "zs_end", "=", "torch", ".", "cat", "(", "[", "zs_end", ",", "zs_shard", "]", ",", "axis", "=", "2", ")", "\n", "", "zs_canvas", "=", "misc", ".", "interpolate", "(", "x0", "=", "zs_start", ",", "x1", "=", "zs_end", ",", "num_midpoints", "=", "num_cols", "-", "2", ")", ".", "view", "(", "-", "1", ",", "zs_start", ".", "shape", "[", "-", "1", "]", ")", "\n", "images_canvas", "=", "generator", "(", "zs_canvas", ",", "fake_label", ".", "repeat", "(", "len", "(", "zs_canvas", ")", ")", ",", "eval", "=", "True", ")", "\n", "return", "images_canvas", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops._find_compiler_bindir": [[29, 41], ["sorted", "len", "glob.glob"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "patterns", "=", "[", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Professional/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/BuildTools/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Community/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio */vc/bin'", ",", "\n", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "matches", "=", "sorted", "(", "glob", ".", "glob", "(", "pattern", ")", ")", "\n", "if", "len", "(", "matches", ")", ":", "\n", "            ", "return", "matches", "[", "-", "1", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops._get_mangled_gpu_name": [[44, 53], ["torch.cuda.get_device_name().lower", "torch.cuda.get_device_name().lower", "re.match", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "out.append", "out.append"], "function", ["None"], ["", "def", "_get_mangled_gpu_name", "(", ")", ":", "\n", "    ", "name", "=", "torch", ".", "cuda", ".", "get_device_name", "(", ")", ".", "lower", "(", ")", "\n", "out", "=", "[", "]", "\n", "for", "c", "in", "name", ":", "\n", "        ", "if", "re", ".", "match", "(", "'[a-z0-9_-]+'", ",", "c", ")", ":", "\n", "            ", "out", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "'-'", ")", "\n", "", "", "return", "''", ".", "join", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops.get_plugin": [[59, 156], ["print", "sorted", "set", "importlib.import_module", "print", "os.path.join", "os.path.join", "print", "custom_ops._find_compiler_bindir", "len", "hashlib.md5", "hashlib.md5.hexdigest", "torch.utils.cpp_extension._get_build_directory", "torch.utils.cpp_extension._get_build_directory", "os.path.join", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "print", "os.system", "RuntimeError", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.join", "print", "open", "hashlib.md5.update", "shutil.copyfile", "os.replace", "os.path.basename", "f.read", "custom_ops._get_mangled_gpu_name", "os.path.join", "shutil.rmtree", "uuid.uuid4", "os.path.basename", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops._find_compiler_bindir", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops._get_mangled_gpu_name"], ["def", "get_plugin", "(", "module_name", ",", "sources", ",", "headers", "=", "None", ",", "source_dir", "=", "None", ",", "**", "build_kwargs", ")", ":", "\n", "    ", "assert", "verbosity", "in", "[", "'none'", ",", "'brief'", ",", "'full'", "]", "\n", "if", "headers", "is", "None", ":", "\n", "        ", "headers", "=", "[", "]", "\n", "", "if", "source_dir", "is", "not", "None", ":", "\n", "        ", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "source_dir", ",", "fname", ")", "for", "fname", "in", "sources", "]", "\n", "headers", "=", "[", "os", ".", "path", ".", "join", "(", "source_dir", ",", "fname", ")", "for", "fname", "in", "headers", "]", "\n", "\n", "# Already cached?", "\n", "", "if", "module_name", "in", "_cached_plugins", ":", "\n", "        ", "return", "_cached_plugins", "[", "module_name", "]", "\n", "\n", "# Print status.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"...'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "verbose_build", "=", "(", "verbosity", "==", "'full'", ")", "\n", "\n", "# Compile and load.", "\n", "try", ":", "# pylint: disable=too-many-nested-blocks", "\n", "# Make sure we can find the necessary compiler binaries.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", "and", "os", ".", "system", "(", "\"where cl.exe >nul 2>nul\"", ")", "!=", "0", ":", "\n", "            ", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Could not find MSVC/GCC/CLANG installation on this computer. Check _find_compiler_bindir() in \"{__file__}\".'", ")", "\n", "", "os", ".", "environ", "[", "'PATH'", "]", "+=", "';'", "+", "compiler_bindir", "\n", "\n", "# Some containers set TORCH_CUDA_ARCH_LIST to a list that can either", "\n", "# break the build or unnecessarily restrict what's available to nvcc.", "\n", "# Unset it to let nvcc decide based on what's available on the", "\n", "# machine.", "\n", "", "os", ".", "environ", "[", "'TORCH_CUDA_ARCH_LIST'", "]", "=", "''", "\n", "\n", "# Incremental build md5sum trickery.  Copies all the input source files", "\n", "# into a cached build directory under a combined md5 digest of the input", "\n", "# source files.  Copying is done only if the combined digest has changed.", "\n", "# This keeps input file timestamps and filenames the same as in previous", "\n", "# extension builds, allowing for fast incremental rebuilds.", "\n", "#", "\n", "# This optimization is done only in case all the source files reside in", "\n", "# a single directory (just for simplicity) and if the TORCH_EXTENSIONS_DIR", "\n", "# environment variable is set (we take this as a signal that the user", "\n", "# actually cares about this.)", "\n", "#", "\n", "# EDIT: We now do it regardless of TORCH_EXTENSIOS_DIR, in order to work", "\n", "# around the *.cu dependency bug in ninja config.", "\n", "#", "\n", "all_source_files", "=", "sorted", "(", "sources", "+", "headers", ")", "\n", "all_source_dirs", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", "for", "fname", "in", "all_source_files", ")", "\n", "if", "len", "(", "all_source_dirs", ")", "==", "1", ":", "# and ('TORCH_EXTENSIONS_DIR' in os.environ):", "\n", "\n", "# Compute combined hash digest for all source files.", "\n", "            ", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "for", "src", "in", "all_source_files", ":", "\n", "                ", "with", "open", "(", "src", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "hash_md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "# Select cached build directory name.", "\n", "", "", "source_digest", "=", "hash_md5", ".", "hexdigest", "(", ")", "\n", "build_top_dir", "=", "torch", ".", "utils", ".", "cpp_extension", ".", "_get_build_directory", "(", "module_name", ",", "verbose", "=", "verbose_build", ")", "# pylint: disable=protected-access", "\n", "cached_build_dir", "=", "os", ".", "path", ".", "join", "(", "build_top_dir", ",", "f'{source_digest}-{_get_mangled_gpu_name()}'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cached_build_dir", ")", ":", "\n", "                ", "tmpdir", "=", "f'{build_top_dir}/srctmp-{uuid.uuid4().hex}'", "\n", "os", ".", "makedirs", "(", "tmpdir", ")", "\n", "for", "src", "in", "all_source_files", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "src", ",", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "os", ".", "path", ".", "basename", "(", "src", ")", ")", ")", "\n", "", "try", ":", "\n", "                    ", "os", ".", "replace", "(", "tmpdir", ",", "cached_build_dir", ")", "# atomic", "\n", "", "except", "OSError", ":", "\n", "# source directory already exists, delete tmpdir and its contents.", "\n", "                    ", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cached_build_dir", ")", ":", "raise", "\n", "\n", "# Compile.", "\n", "", "", "cached_sources", "=", "[", "os", ".", "path", ".", "join", "(", "cached_build_dir", ",", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", "for", "fname", "in", "sources", "]", "\n", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "build_directory", "=", "cached_build_dir", ",", "\n", "verbose", "=", "verbose_build", ",", "sources", "=", "cached_sources", ",", "**", "build_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "verbose", "=", "verbose_build", ",", "sources", "=", "sources", ",", "**", "build_kwargs", ")", "\n", "\n", "# Load.", "\n", "", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbosity", "==", "'brief'", ":", "\n", "            ", "print", "(", "'Failed!'", ")", "\n", "", "raise", "\n", "\n", "# Print status and add to cache dict.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Done setting up PyTorch plugin \"{module_name}\".'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "'Done.'", ")", "\n", "", "_cached_plugins", "[", "module_name", "]", "=", "module", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.apa_aug.apply_apa_aug": [[10, 22], ["torch.ones", "torch.where", "torch.allclose", "torch.zeros_like", "torch.zeros_like", "torch.rand"], "function", ["None"], ["def", "apply_apa_aug", "(", "real_images", ",", "fake_images", ",", "apa_p", ",", "local_rank", ")", ":", "\n", "# Apply Adaptive Pseudo Augmentation (APA)", "\n", "# https://github.com/EndlessSora/DeceiveD/blob/main/training/loss.py", "\n", "    ", "batch_size", "=", "real_images", ".", "shape", "[", "0", "]", "\n", "pseudo_flag", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "local_rank", ")", "\n", "pseudo_flag", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "local_rank", ")", "<", "apa_p", ",", "\n", "pseudo_flag", ",", "torch", ".", "zeros_like", "(", "pseudo_flag", ")", ")", "\n", "if", "torch", ".", "allclose", "(", "pseudo_flag", ",", "torch", ".", "zeros_like", "(", "pseudo_flag", ")", ")", ":", "\n", "        ", "return", "real_images", "\n", "", "else", ":", "\n", "        ", "assert", "fake_images", "is", "not", "None", "\n", "return", "fake_images", "*", "pseudo_flag", "+", "real_images", "*", "(", "1", "-", "pseudo_flag", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.GatherLayer.forward": [[25, 31], ["ctx.save_for_backward", "torch.all_gather", "torch.all_gather", "torch.all_gather", "torch.all_gather", "tuple", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ")", "\n", "output", "=", "[", "torch", ".", "zeros_like", "(", "input", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "output", ",", "input", ")", "\n", "return", "tuple", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.GatherLayer.backward": [[32, 38], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "grads", ")", ":", "\n", "        ", "input", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_out", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_out", "[", ":", "]", "=", "grads", "[", "dist", ".", "get_rank", "(", ")", "]", "\n", "return", "grad_out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.CrossEntropyLoss.__init__": [[41, 44], ["super().__init__", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ce_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.CrossEntropyLoss.forward": [[45, 47], ["losses.CrossEntropyLoss.ce_loss().mean", "losses.CrossEntropyLoss.ce_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cls_output", ",", "label", ",", "**", "_", ")", ":", "\n", "        ", "return", "self", ".", "ce_loss", "(", "cls_output", ",", "label", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss.__init__": [[50, 58], ["super().__init__", "losses.ConditionalContrastiveLoss._calculate_similarity_matrix", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss._calculate_similarity_matrix"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "temperature", ",", "master_rank", ",", "DDP", ")", ":", "\n", "        ", "super", "(", "ConditionalContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "master_rank", "=", "master_rank", "\n", "self", ".", "DDP", "=", "DDP", "\n", "self", ".", "calculate_similarity_matrix", "=", "self", ".", "_calculate_similarity_matrix", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._make_neg_removal_mask": [[59, 67], ["labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "range", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "numpy.zeros", "numpy.where", "labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "labels.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "_make_neg_removal_mask", "(", "self", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_samples", "=", "labels", ".", "shape", "[", "0", "]", "\n", "mask_multi", ",", "target", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_classes", ",", "n_samples", "]", ")", ",", "1.0", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "c_indices", "=", "np", ".", "where", "(", "labels", "==", "c", ")", "\n", "mask_multi", "[", "c", ",", "c_indices", "]", "=", "target", "\n", "", "return", "torch", ".", "tensor", "(", "mask_multi", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "master_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._calculate_similarity_matrix": [[68, 70], ["None"], "methods", ["None"], ["", "def", "_calculate_similarity_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cosine_simililarity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._remove_diag": [[71, 78], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.type().to.type().to.type().to", "M[].view", "numpy.ones", "numpy.eye", "mask.type().to.type().to.type"], "methods", ["None"], ["", "def", "_remove_diag", "(", "self", ",", "M", ")", ":", "\n", "        ", "h", ",", "w", "=", "M", ".", "shape", "\n", "assert", "h", "==", "w", ",", "\"h and w should be same\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "-", "np", ".", "eye", "(", "h", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "(", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", ".", "to", "(", "self", ".", "master_rank", ")", "\n", "return", "M", "[", "mask", "]", ".", "view", "(", "h", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._cosine_simililarity_matrix": [[79, 82], ["losses.ConditionalContrastiveLoss.cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity_matrix", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "self", ".", "cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss.forward": [[83, 99], ["losses.ConditionalContrastiveLoss.calculate_similarity_matrix", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "losses.ConditionalContrastiveLoss._remove_diag", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sim_pos_only.sum", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "GatherLayer.apply", "GatherLayer.apply", "GatherLayer.apply", "losses.ConditionalContrastiveLoss._remove_diag", "losses.ConditionalContrastiveLoss._make_neg_removal_mask", "losses.ConditionalContrastiveLoss.cosine_similarity", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._remove_diag", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._remove_diag", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.ConditionalContrastiveLoss._make_neg_removal_mask"], ["", "def", "forward", "(", "self", ",", "embed", ",", "proxy", ",", "label", ",", "**", "_", ")", ":", "\n", "        ", "if", "self", ".", "DDP", ":", "\n", "            ", "embed", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "embed", ")", ",", "dim", "=", "0", ")", "\n", "proxy", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "proxy", ")", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "label", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "sim_matrix", "=", "self", ".", "calculate_similarity_matrix", "(", "embed", ",", "embed", ")", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "self", ".", "_remove_diag", "(", "sim_matrix", ")", "/", "self", ".", "temperature", ")", "\n", "neg_removal_mask", "=", "self", ".", "_remove_diag", "(", "self", ".", "_make_neg_removal_mask", "(", "label", ")", "[", "label", "]", ")", "\n", "sim_pos_only", "=", "neg_removal_mask", "*", "sim_matrix", "\n", "\n", "emb2proxy", "=", "torch", ".", "exp", "(", "self", ".", "cosine_similarity", "(", "embed", ",", "proxy", ")", "/", "self", ".", "temperature", ")", "\n", "\n", "numerator", "=", "emb2proxy", "+", "sim_pos_only", ".", "sum", "(", "dim", "=", "1", ")", "\n", "denomerator", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "emb2proxy", ",", "dim", "=", "1", ")", ",", "sim_matrix", "]", ",", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "-", "torch", ".", "log", "(", "numerator", "/", "denomerator", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.__init__": [[102, 111], ["super().__init__", "losses.Data2DataCrossEntropyLoss._calculate_similarity_matrix", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss._calculate_similarity_matrix"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "temperature", ",", "m_p", ",", "master_rank", ",", "DDP", ")", ":", "\n", "        ", "super", "(", "Data2DataCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "m_p", "=", "m_p", "\n", "self", ".", "master_rank", "=", "master_rank", "\n", "self", ".", "DDP", "=", "DDP", "\n", "self", ".", "calculate_similarity_matrix", "=", "self", ".", "_calculate_similarity_matrix", "(", ")", "\n", "self", ".", "cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss._calculate_similarity_matrix": [[112, 114], ["None"], "methods", ["None"], ["", "def", "_calculate_similarity_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cosine_simililarity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss._cosine_simililarity_matrix": [[115, 118], ["losses.Data2DataCrossEntropyLoss.cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity_matrix", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "self", ".", "cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.make_index_matrix": [[119, 128], ["labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "range", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "torch.tensor().type().to", "numpy.ones", "numpy.where", "labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "labels.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "make_index_matrix", "(", "self", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "num_samples", "=", "labels", ".", "shape", "[", "0", "]", "\n", "mask_multi", ",", "target", "=", "np", ".", "ones", "(", "[", "self", ".", "num_classes", ",", "num_samples", "]", ")", ",", "0.0", "\n", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "c_indices", "=", "np", ".", "where", "(", "labels", "==", "c", ")", "\n", "mask_multi", "[", "c", ",", "c_indices", "]", "=", "target", "\n", "", "return", "torch", ".", "tensor", "(", "mask_multi", ")", ".", "type", "(", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "master_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.remove_diag": [[129, 136], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.type().to.type().to.type().to", "M[].view", "numpy.ones", "numpy.eye", "mask.type().to.type().to.type"], "methods", ["None"], ["", "def", "remove_diag", "(", "self", ",", "M", ")", ":", "\n", "        ", "h", ",", "w", "=", "M", ".", "shape", "\n", "assert", "h", "==", "w", ",", "\"h and w should be same\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "-", "np", ".", "eye", "(", "h", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "(", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", ".", "to", "(", "self", ".", "master_rank", ")", "\n", "return", "M", "[", "mask", "]", ".", "view", "(", "h", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.forward": [[137, 166], ["losses.Data2DataCrossEntropyLoss.remove_diag", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "losses.Data2DataCrossEntropyLoss.cosine_similarity", "losses.Data2DataCrossEntropyLoss.remove_diag", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "criterion.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "sim_max.detach", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "GatherLayer.apply", "GatherLayer.apply", "GatherLayer.apply", "losses.Data2DataCrossEntropyLoss.calculate_similarity_matrix", "losses.Data2DataCrossEntropyLoss.make_index_matrix", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "improved_sim_matrix.sum"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.remove_diag", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.remove_diag", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.Data2DataCrossEntropyLoss.make_index_matrix"], ["", "def", "forward", "(", "self", ",", "embed", ",", "proxy", ",", "label", ",", "**", "_", ")", ":", "\n", "# If train a GAN throuh DDP, gather all data on the master rank", "\n", "        ", "if", "self", ".", "DDP", ":", "\n", "            ", "embed", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "embed", ")", ",", "dim", "=", "0", ")", "\n", "proxy", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "proxy", ")", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "cat", "(", "GatherLayer", ".", "apply", "(", "label", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# calculate similarities between sample embeddings", "\n", "", "sim_matrix", "=", "self", ".", "calculate_similarity_matrix", "(", "embed", ",", "embed", ")", "+", "self", ".", "m_p", "-", "1", "\n", "# remove diagonal terms", "\n", "sim_matrix", "=", "self", ".", "remove_diag", "(", "sim_matrix", "/", "self", ".", "temperature", ")", "\n", "# for numerical stability", "\n", "sim_max", ",", "_", "=", "torch", ".", "max", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "F", ".", "relu", "(", "sim_matrix", ")", "-", "sim_max", ".", "detach", "(", ")", "\n", "\n", "# calculate similarities between sample embeddings and the corresponding proxies", "\n", "smp2proxy", "=", "self", ".", "cosine_similarity", "(", "embed", ",", "proxy", ")", "\n", "# make false negative removal", "\n", "removal_fn", "=", "self", ".", "remove_diag", "(", "self", ".", "make_index_matrix", "(", "label", ")", "[", "label", "]", ")", "\n", "# apply the negative removal to the similarity matrix", "\n", "improved_sim_matrix", "=", "removal_fn", "*", "torch", ".", "exp", "(", "sim_matrix", ")", "\n", "\n", "# compute positive attraction term", "\n", "pos_attr", "=", "F", ".", "relu", "(", "(", "self", ".", "m_p", "-", "smp2proxy", ")", "/", "self", ".", "temperature", ")", "\n", "# compute negative repulsion term", "\n", "neg_repul", "=", "torch", ".", "log", "(", "torch", ".", "exp", "(", "-", "pos_attr", ")", "+", "improved_sim_matrix", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "# compute data to data cross-entropy criterion", "\n", "criterion", "=", "pos_attr", "+", "neg_repul", "\n", "return", "criterion", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.PathLengthRegularizer.__init__": [[169, 174], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "pl_decay", "=", "0.01", ",", "pl_weight", "=", "2", ",", "pl_no_weight_grad", "=", "False", ")", ":", "\n", "        ", "self", ".", "pl_decay", "=", "pl_decay", "\n", "self", ".", "pl_weight", "=", "pl_weight", "\n", "self", ".", "pl_mean", "=", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "device", ")", "\n", "self", ".", "pl_no_weight_grad", "=", "pl_no_weight_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.PathLengthRegularizer.cal_pl_reg": [[175, 187], ["pl_grads.square().sum().mean().sqrt", "losses.PathLengthRegularizer.pl_mean.lerp", "losses.PathLengthRegularizer.pl_mean.copy_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "numpy.sqrt", "utils.style_ops.conv2d_gradfix.no_weight_gradients", "pl_grads.square().sum().mean().sqrt.mean", "losses.PathLengthRegularizer.detach", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "pl_grads.square().sum().mean", "pl_grads.square().sum", "pl_grads.square"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.no_weight_gradients"], ["", "def", "cal_pl_reg", "(", "self", ",", "fake_images", ",", "ws", ")", ":", "\n", "#ws refers to weight style", "\n", "#receives new fake_images of original batch (in original implementation, fakes_images used for calculating g_loss and pl_loss is generated independently)", "\n", "        ", "pl_noise", "=", "torch", ".", "randn_like", "(", "fake_images", ")", "/", "np", ".", "sqrt", "(", "fake_images", ".", "shape", "[", "2", "]", "*", "fake_images", ".", "shape", "[", "3", "]", ")", "\n", "with", "conv2d_gradfix", ".", "no_weight_gradients", "(", "self", ".", "pl_no_weight_grad", ")", ":", "\n", "            ", "pl_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "[", "(", "fake_images", "*", "pl_noise", ")", ".", "sum", "(", ")", "]", ",", "inputs", "=", "[", "ws", "]", ",", "create_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "pl_lengths", "=", "pl_grads", ".", "square", "(", ")", ".", "sum", "(", "2", ")", ".", "mean", "(", "1", ")", ".", "sqrt", "(", ")", "\n", "pl_mean", "=", "self", ".", "pl_mean", ".", "lerp", "(", "pl_lengths", ".", "mean", "(", ")", ",", "self", ".", "pl_decay", ")", "\n", "self", ".", "pl_mean", ".", "copy_", "(", "pl_mean", ".", "detach", "(", ")", ")", "\n", "pl_penalty", "=", "(", "pl_lengths", "-", "pl_mean", ")", ".", "square", "(", ")", "\n", "loss_Gpl", "=", "(", "pl_penalty", "*", "self", ".", "pl_weight", ")", ".", "mean", "(", "0", ")", "\n", "return", "loss_Gpl", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.enable_allreduce": [[189, 195], ["dict_.items", "value.mean"], "function", ["None"], ["", "", "def", "enable_allreduce", "(", "dict_", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "is", "not", "None", "and", "key", "!=", "\"label\"", ":", "\n", "            ", "loss", "+=", "value", ".", "mean", "(", ")", "*", "0", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.d_vanilla": [[197, 200], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softplus", "torch.softplus"], "function", ["None"], ["", "def", "d_vanilla", "(", "d_logit_real", ",", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "d_loss", "=", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "d_logit_real", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "d_logit_fake", ")", ")", "\n", "return", "d_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.g_vanilla": [[202, 204], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softplus"], "function", ["None"], ["", "def", "g_vanilla", "(", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "F", ".", "softplus", "(", "-", "d_logit_fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.d_logistic": [[206, 209], ["d_loss.mean", "torch.softplus", "torch.softplus"], "function", ["None"], ["", "def", "d_logistic", "(", "d_logit_real", ",", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "d_loss", "=", "F", ".", "softplus", "(", "-", "d_logit_real", ")", "+", "F", ".", "softplus", "(", "d_logit_fake", ")", "\n", "return", "d_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.g_logistic": [[211, 214], ["torch.softplus().mean", "torch.softplus"], "function", ["None"], ["", "def", "g_logistic", "(", "d_logit_fake", ",", "DDP", ")", ":", "\n", "# basically same as g_vanilla.", "\n", "    ", "return", "F", ".", "softplus", "(", "-", "d_logit_fake", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.d_ls": [[216, 219], ["d_loss.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "d_ls", "(", "d_logit_real", ",", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "d_loss", "=", "0.5", "*", "(", "d_logit_real", "-", "torch", ".", "ones_like", "(", "d_logit_real", ")", ")", "**", "2", "+", "0.5", "*", "(", "d_logit_fake", ")", "**", "2", "\n", "return", "d_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.g_ls": [[221, 224], ["gen_loss.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "g_ls", "(", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "gen_loss", "=", "0.5", "*", "(", "d_logit_fake", "-", "torch", ".", "ones_like", "(", "d_logit_fake", ")", ")", "**", "2", "\n", "return", "gen_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.d_hinge": [[226, 228], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "d_hinge", "(", "d_logit_real", ",", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "d_logit_real", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "d_logit_fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.g_hinge": [[230, 232], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "g_hinge", "(", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "return", "-", "torch", ".", "mean", "(", "d_logit_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.d_wasserstein": [[234, 236], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "d_wasserstein", "(", "d_logit_real", ",", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "d_logit_fake", "-", "d_logit_real", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.g_wasserstein": [[238, 240], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "g_wasserstein", "(", "d_logit_fake", ",", "DDP", ")", ":", "\n", "    ", "return", "-", "torch", ".", "mean", "(", "d_logit_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.crammer_singer_loss": [[242, 253], ["torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to.scatter_", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape", "torch.masked_select().reshape.max", "max_wrong.unsqueeze.unsqueeze", "adv_output.gather", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "label.unsqueeze", "label.unsqueeze", "torch.relu", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.ones_like().to.bool"], "function", ["None"], ["", "def", "crammer_singer_loss", "(", "adv_output", ",", "label", ",", "DDP", ",", "**", "_", ")", ":", "\n", "# https://github.com/ilyakava/BigGAN-PyTorch/blob/master/train_fns.py", "\n", "# crammer singer criterion", "\n", "    ", "num_real_classes", "=", "adv_output", ".", "shape", "[", "1", "]", "-", "1", "\n", "mask", "=", "torch", ".", "ones_like", "(", "adv_output", ")", ".", "to", "(", "adv_output", ".", "device", ")", "\n", "mask", ".", "scatter_", "(", "1", ",", "label", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "wrongs", "=", "torch", ".", "masked_select", "(", "adv_output", ",", "mask", ".", "bool", "(", ")", ")", ".", "reshape", "(", "adv_output", ".", "shape", "[", "0", "]", ",", "num_real_classes", ")", "\n", "max_wrong", ",", "_", "=", "wrongs", ".", "max", "(", "1", ")", "\n", "max_wrong", "=", "max_wrong", ".", "unsqueeze", "(", "-", "1", ")", "\n", "target", "=", "adv_output", ".", "gather", "(", "1", ",", "label", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "return", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1", "+", "max_wrong", "-", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.feature_matching_loss": [[255, 260], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "feature_matching_loss", "(", "real_embed", ",", "fake_embed", ")", ":", "\n", "# https://github.com/ilyakava/BigGAN-PyTorch/blob/master/train_fns.py", "\n", "# feature matching criterion", "\n", "    ", "fm_loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "fake_embed", ",", "0", ")", "-", "torch", ".", "mean", "(", "real_embed", ",", "0", ")", ")", ")", "\n", "return", "fm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.lecam_reg": [[262, 266], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().pow", "torch.relu().pow", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "lecam_reg", "(", "d_logit_real", ",", "d_logit_fake", ",", "ema", ")", ":", "\n", "    ", "reg", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "d_logit_real", "-", "ema", ".", "D_fake", ")", ".", "pow", "(", "2", ")", ")", "+", "torch", ".", "mean", "(", "F", ".", "relu", "(", "ema", ".", "D_real", "-", "d_logit_fake", ")", ".", "pow", "(", "2", ")", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv": [[268, 276], ["torch.autograd.grad", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "outputs.size"], "function", ["None"], ["", "def", "cal_deriv", "(", "inputs", ",", "outputs", ",", "device", ")", ":", "\n", "    ", "grads", "=", "autograd", ".", "grad", "(", "outputs", "=", "outputs", ",", "\n", "inputs", "=", "inputs", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "outputs", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.latent_optimise": [[278, 299], ["range", "torch.autograd.Variable", "generator", "discriminator", "losses.cal_deriv", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cal_deriv.norm", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "delta_z.norm", "delta_z.norm"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "def", "latent_optimise", "(", "zs", ",", "fake_labels", ",", "generator", ",", "discriminator", ",", "batch_size", ",", "lo_rate", ",", "lo_steps", ",", "lo_alpha", ",", "lo_beta", ",", "eval", ",", "\n", "cal_trsp_cost", ",", "device", ")", ":", "\n", "    ", "for", "step", "in", "range", "(", "lo_steps", "-", "1", ")", ":", "\n", "        ", "drop_mask", "=", "(", "torch", ".", "FloatTensor", "(", "batch_size", ",", "1", ")", ".", "uniform_", "(", ")", ">", "1", "-", "lo_rate", ")", ".", "to", "(", "device", ")", "\n", "\n", "zs", "=", "autograd", ".", "Variable", "(", "zs", ",", "requires_grad", "=", "True", ")", "\n", "fake_images", "=", "generator", "(", "zs", ",", "fake_labels", ",", "eval", "=", "eval", ")", "\n", "fake_dict", "=", "discriminator", "(", "fake_images", ",", "fake_labels", ",", "eval", "=", "eval", ")", "\n", "z_grads", "=", "cal_deriv", "(", "inputs", "=", "zs", ",", "outputs", "=", "fake_dict", "[", "\"adv_output\"", "]", ",", "device", "=", "device", ")", "\n", "z_grads_norm", "=", "torch", ".", "unsqueeze", "(", "(", "z_grads", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ",", "dim", "=", "1", ")", "\n", "delta_z", "=", "lo_alpha", "*", "z_grads", "/", "(", "lo_beta", "+", "z_grads_norm", ")", "\n", "zs", "=", "torch", ".", "clamp", "(", "zs", "+", "drop_mask", "*", "delta_z", ",", "-", "1.0", ",", "1.0", ")", "\n", "\n", "if", "cal_trsp_cost", ":", "\n", "            ", "if", "step", "==", "0", ":", "\n", "                ", "trsf_cost", "=", "(", "delta_z", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "trsf_cost", "+=", "(", "delta_z", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "trsf_cost", "=", "None", "\n", "", "return", "zs", ",", "trsf_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_grad_penalty": [[301, 317], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.to.expand().contiguous().view", "alpha.to.to", "real_images.to.to", "autograd.Variable.to", "torch.autograd.Variable", "discriminator", "losses.cal_deriv", "grads.view.view", "grads.view.size", "alpha.to.expand().contiguous", "interpolates[].mean", "alpha.to.expand", "grads.view.norm", "real_images.to.nelement"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "", "def", "cal_grad_penalty", "(", "real_images", ",", "real_labels", ",", "fake_images", ",", "discriminator", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "real_images", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "batch_size", ",", "real_images", ".", "nelement", "(", ")", "//", "batch_size", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "c", ",", "h", ",", "w", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "real_images", "=", "real_images", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "alpha", "*", "real_images", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_images", ")", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "fake_dict", "=", "discriminator", "(", "interpolates", ",", "real_labels", ",", "eval", "=", "False", ")", "\n", "grads", "=", "cal_deriv", "(", "inputs", "=", "interpolates", ",", "outputs", "=", "fake_dict", "[", "\"adv_output\"", "]", ",", "device", "=", "device", ")", "\n", "grads", "=", "grads", ".", "view", "(", "grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "grad_penalty", "=", "(", "(", "grads", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "+", "interpolates", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "mean", "(", ")", "*", "0", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_dra_penalty": [[319, 335], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.to.to", "real_images.to.to", "autograd.Variable.to", "torch.autograd.Variable", "discriminator", "losses.cal_deriv", "grads.view.view", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "grads.view.size", "real_images.to.std", "interpolates[].mean", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "real_images.to.size", "grads.view.norm"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "def", "cal_dra_penalty", "(", "real_images", ",", "real_labels", ",", "discriminator", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "real_images", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "real_images", "=", "real_images", ".", "to", "(", "device", ")", "\n", "differences", "=", "0.5", "*", "real_images", ".", "std", "(", ")", "*", "torch", ".", "rand", "(", "real_images", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "real_images", "+", "(", "alpha", "*", "differences", ")", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "fake_dict", "=", "discriminator", "(", "interpolates", ",", "real_labels", ",", "eval", "=", "False", ")", "\n", "grads", "=", "cal_deriv", "(", "inputs", "=", "interpolates", ",", "outputs", "=", "fake_dict", "[", "\"adv_output\"", "]", ",", "device", "=", "device", ")", "\n", "grads", "=", "grads", ".", "view", "(", "grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "grad_penalty", "=", "(", "(", "grads", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "+", "interpolates", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "mean", "(", ")", "*", "0", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_maxgrad_penalty": [[337, 353], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.to.expand().contiguous().view", "alpha.to.to", "real_images.to.to", "autograd.Variable.to", "torch.autograd.Variable", "discriminator", "losses.cal_deriv", "grads.view.view", "grads.view.size", "torch.max", "torch.max", "torch.max", "torch.max", "alpha.to.expand().contiguous", "interpolates[].mean", "grads.view.norm", "alpha.to.expand", "real_images.to.nelement"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "def", "cal_maxgrad_penalty", "(", "real_images", ",", "real_labels", ",", "fake_images", ",", "discriminator", ",", "device", ")", ":", "\n", "    ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "real_images", ".", "shape", "\n", "alpha", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "batch_size", ",", "real_images", ".", "nelement", "(", ")", "//", "batch_size", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "c", ",", "h", ",", "w", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "real_images", "=", "real_images", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "alpha", "*", "real_images", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_images", ")", "\n", "interpolates", "=", "interpolates", ".", "to", "(", "device", ")", "\n", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "fake_dict", "=", "discriminator", "(", "interpolates", ",", "real_labels", ",", "eval", "=", "False", ")", "\n", "grads", "=", "cal_deriv", "(", "inputs", "=", "interpolates", ",", "outputs", "=", "fake_dict", "[", "\"adv_output\"", "]", ",", "device", "=", "device", ")", "\n", "grads", "=", "grads", ".", "view", "(", "grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "maxgrad_penalty", "=", "torch", ".", "max", "(", "grads", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "**", "2", ")", "+", "interpolates", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "mean", "(", ")", "*", "0", "\n", "return", "maxgrad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_r1_reg": [[355, 362], ["images.size", "losses.cal_deriv", "cal_deriv.pow", "grad_dout.pow.size", "images.size", "adv_output.sum", "grad_dout.pow.contiguous().view().sum().mean", "images[].mean", "grad_dout.pow.contiguous().view().sum", "grad_dout.pow.contiguous().view", "grad_dout.pow.contiguous"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.cal_deriv"], ["", "def", "cal_r1_reg", "(", "adv_output", ",", "images", ",", "device", ")", ":", "\n", "    ", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "cal_deriv", "(", "inputs", "=", "images", ",", "outputs", "=", "adv_output", ".", "sum", "(", ")", ",", "device", "=", "device", ")", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "images", ".", "size", "(", ")", ")", "\n", "r1_reg", "=", "0.5", "*", "grad_dout2", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "+", "images", "[", ":", ",", "0", ",", "0", ",", "0", "]", ".", "mean", "(", ")", "*", "0", "\n", "return", "r1_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.adjust_k": [[364, 367], ["max"], "function", ["None"], ["", "def", "adjust_k", "(", "current_k", ",", "topk_gamma", ",", "sup_k", ")", ":", "\n", "    ", "current_k", "=", "max", "(", "current_k", "*", "topk_gamma", ",", "sup_k", ")", "\n", "return", "current_k", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.normal_nll_loss": [[369, 376], ["logli.sum().mean", "var.mul", "logli.sum", "var.mul"], "function", ["None"], ["", "def", "normal_nll_loss", "(", "x", ",", "mu", ",", "var", ")", ":", "\n", "# https://github.com/Natsu6767/InfoGAN-PyTorch/blob/master/utils.py", "\n", "# Calculate the negative log likelihood of normal distribution.", "\n", "# Needs to be minimized in InfoGAN. (Treats Q(c]x) as a factored Gaussian)", "\n", "    ", "logli", "=", "-", "0.5", "*", "(", "var", ".", "mul", "(", "2", "*", "np", ".", "pi", ")", "+", "1e-6", ")", ".", "log", "(", ")", "-", "(", "x", "-", "mu", ")", ".", "pow", "(", "2", ")", ".", "div", "(", "var", ".", "mul", "(", "2.0", ")", "+", "1e-6", ")", "\n", "nll", "=", "-", "(", "logli", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", ")", "\n", "return", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.losses.stylegan_cal_r1_reg": [[378, 383], ["r1_penalty.mean", "utils.style_ops.conv2d_gradfix.no_weight_gradients", "r1_grads.square().sum", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "r1_grads.square", "adv_output.sum"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.no_weight_gradients"], ["", "def", "stylegan_cal_r1_reg", "(", "adv_output", ",", "images", ")", ":", "\n", "    ", "with", "conv2d_gradfix", ".", "no_weight_gradients", "(", ")", ":", "\n", "        ", "r1_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "[", "adv_output", ".", "sum", "(", ")", "]", ",", "inputs", "=", "[", "images", "]", ",", "create_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "", "r1_penalty", "=", "r1_grads", ".", "square", "(", ")", ".", "sum", "(", "[", "1", ",", "2", ",", "3", "]", ")", "/", "2", "\n", "return", "r1_penalty", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act._init": [[37, 48], ["custom_ops.get_plugin", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_plugin", "\n", "if", "_plugin", "is", "None", ":", "\n", "        ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "\n", "module_name", "=", "'bias_act_plugin'", ",", "\n", "sources", "=", "[", "'bias_act.cpp'", ",", "'bias_act.cu'", "]", ",", "\n", "headers", "=", "[", "'bias_act.h'", "]", ",", "\n", "source_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ",", "\n", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act": [[51, 86], ["isinstance", "bias_act._bias_act_ref", "bias_act._init", "_bias_act_cuda().apply", "bias_act._bias_act_cuda"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act._bias_act_ref", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._init", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act._bias_act_cuda"], ["", "def", "bias_act", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can be of any shape.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `dim`.\n        dim:    The dimension in `x` corresponding to the elements of `b`.\n                The value of `dim` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying 1.\n        clamp:  Clamp the output values to `[-clamp, +clamp]`, or `None` to disable\n                the clamping (default).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_bias_act_cuda", "(", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", ".", "apply", "(", "x", ",", "b", ")", "\n", "", "return", "_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act._bias_act_ref": [[89, 119], ["isinstance", "float", "float", "float", "float", "spec.func", "float", "x.clamp.clamp", "isinstance", "b.reshape", "range"], "function", ["None"], ["", "def", "_bias_act_ref", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `bias_act()` using standard TensorFlow ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Add bias.", "\n", "if", "b", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "torch", ".", "Tensor", ")", "and", "b", ".", "ndim", "==", "1", "\n", "assert", "0", "<=", "dim", "<", "x", ".", "ndim", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "dim", "]", "\n", "x", "=", "x", "+", "b", ".", "reshape", "(", "[", "-", "1", "if", "i", "==", "dim", "else", "1", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "alpha", "=", "float", "(", "alpha", ")", "\n", "x", "=", "spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "gain", "=", "float", "(", "gain", ")", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "\n", "# Clamp.", "\n", "", "if", "clamp", ">=", "0", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "-", "clamp", ",", "clamp", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act._bias_act_cuda": [[124, 206], ["float", "float", "float", "x.contiguous.contiguous", "ctx.save_for_backward", "dy.contiguous.contiguous", "_plugin.bias_act", "ctx.save_for_backward", "d_dx.contiguous.contiguous", "b.contiguous", "_plugin.bias_act", "BiasActCudaGrad.apply.sum", "BiasActCudaGrad.apply", "_plugin.bias_act", "_plugin.bias_act.sum", "BiasActCudaGrad.apply", "x.contiguous.stride", "dy.contiguous.stride", "range", "range"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["def", "_bias_act_cuda", "(", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `bias_act()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "dim", ",", "act", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "if", "key", "in", "_bias_act_cuda_cache", ":", "\n", "        ", "return", "_bias_act_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "BiasActCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "b", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "x", ".", "ndim", ">", "2", "and", "x", ".", "stride", "(", "1", ")", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "x", "=", "x", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "b", "=", "b", ".", "contiguous", "(", ")", "if", "b", "is", "not", "None", "else", "_null_tensor", "\n", "y", "=", "x", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", "or", "b", "is", "not", "_null_tensor", ":", "\n", "                ", "y", "=", "_plugin", ".", "bias_act", "(", "x", ",", "b", ",", "_null_tensor", ",", "_null_tensor", ",", "_null_tensor", ",", "0", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "\n", "x", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "b", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "y", "if", "'y'", "in", "spec", ".", "ref", "else", "_null_tensor", ")", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "dy", "=", "dy", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "dx", "=", "None", "\n", "db", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "dx", "=", "dy", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", ":", "\n", "                    ", "dx", "=", "BiasActCudaGrad", ".", "apply", "(", "dy", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "db", "=", "dx", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "dx", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "dx", ",", "db", "\n", "\n", "# Backward op.", "\n", "", "", "class", "BiasActCudaGrad", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "dy", ",", "x", ",", "b", ",", "y", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "dy", ".", "ndim", ">", "2", "and", "dy", ".", "stride", "(", "1", ")", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "dx", "=", "_plugin", ".", "bias_act", "(", "dy", ",", "b", ",", "x", ",", "y", ",", "_null_tensor", ",", "1", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "ctx", ".", "save_for_backward", "(", "\n", "dy", "if", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "x", ",", "b", ",", "y", ")", "\n", "return", "dx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "d_dx", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "d_dx", "=", "d_dx", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "dy", ",", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "d_dy", "=", "None", "\n", "d_x", "=", "None", "\n", "d_b", "=", "None", "\n", "d_y", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "d_dy", "=", "BiasActCudaGrad", ".", "apply", "(", "d_dx", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", ":", "\n", "                ", "d_x", "=", "_plugin", ".", "bias_act", "(", "d_dx", ",", "b", ",", "x", ",", "y", ",", "dy", ",", "2", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "d_b", "=", "d_x", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "d_x", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "d_dy", ",", "d_x", ",", "d_b", ",", "d_y", "\n", "\n", "# Add to cache.", "\n", "", "", "_bias_act_cuda_cache", "[", "key", "]", "=", "BiasActCuda", "\n", "return", "BiasActCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._get_weight_shape": [[21, 26], ["style_misc.assert_shape", "style_misc.suppress_tracer_warnings", "int"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["def", "_get_weight_shape", "(", "w", ")", ":", "\n", "    ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "shape", "=", "[", "int", "(", "sz", ")", "for", "sz", "in", "w", ".", "shape", "]", "\n", "", "misc", ".", "assert_shape", "(", "w", ",", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper": [[29, 42], ["conv2d_resample._get_weight_shape", "op", "w.flip.flip"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._get_weight_shape"], ["", "def", "_conv2d_wrapper", "(", "x", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "transpose", "=", "False", ",", "flip_weight", "=", "True", ")", ":", "\n", "    ", "\"\"\"Wrapper for the underlying `conv2d()` and `conv_transpose2d()` implementations.\n    \"\"\"", "\n", "_out_channels", ",", "_in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "\n", "# Flip weight if requested.", "\n", "# Note: conv2d() actually performs correlation (flip_weight=True) not convolution (flip_weight=False).", "\n", "if", "not", "flip_weight", "and", "(", "kw", ">", "1", "or", "kh", ">", "1", ")", ":", "\n", "        ", "w", "=", "w", ".", "flip", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Execute using conv2d_gradfix.", "\n", "", "op", "=", "conv2d_gradfix", ".", "conv_transpose2d", "if", "transpose", "else", "conv2d_gradfix", ".", "conv2d", "\n", "return", "op", "(", "x", ",", "w", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample.conv2d_resample": [[45, 141], ["conv2d_resample._get_weight_shape", "upfirdn2d._get_filter_size", "upfirdn2d._parse_padding", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "max", "max", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "isinstance", "w.reshape.transpose", "w.reshape.reshape", "w.reshape.transpose", "w.reshape.reshape", "min", "min", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample._conv2d_wrapper"], ["", "def", "conv2d_resample", "(", "x", ",", "w", ",", "f", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "flip_weight", "=", "True", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "r\"\"\"2D convolution with optional up/downsampling.\n\n    Padding is performed only once at the beginning, not between the operations.\n\n    Args:\n        x:              Input tensor of shape\n                        `[batch_size, in_channels, in_height, in_width]`.\n        w:              Weight tensor of shape\n                        `[out_channels, in_channels//groups, kernel_height, kernel_width]`.\n        f:              Low-pass filter for up/downsampling. Must be prepared beforehand by\n                        calling upfirdn2d.setup_filter(). None = identity (default).\n        up:             Integer upsampling factor (default: 1).\n        down:           Integer downsampling factor (default: 1).\n        padding:        Padding with respect to the upsampled image. Can be a single number\n                        or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                        (default: 0).\n        groups:         Split input channels into N groups (default: 1).\n        flip_weight:    False = convolution, True = correlation (default: True).\n        flip_filter:    False = convolution, True = correlation (default: False).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "(", "x", ".", "ndim", "==", "4", ")", "\n", "assert", "isinstance", "(", "w", ",", "torch", ".", "Tensor", ")", "and", "(", "w", ".", "ndim", "==", "4", ")", "and", "(", "w", ".", "dtype", "==", "x", ".", "dtype", ")", "\n", "assert", "f", "is", "None", "or", "(", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "and", "f", ".", "dtype", "==", "torch", ".", "float32", ")", "\n", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "(", "up", ">=", "1", ")", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "(", "down", ">=", "1", ")", "\n", "assert", "isinstance", "(", "groups", ",", "int", ")", "and", "(", "groups", ">=", "1", ")", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Adjust padding to account for up/downsampling.", "\n", "if", "up", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "+", "up", "-", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "up", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "+", "up", "-", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "up", ")", "//", "2", "\n", "", "if", "down", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "-", "down", "+", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "down", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "-", "down", "+", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "down", ")", "//", "2", "\n", "\n", "# Fast path: 1x1 convolution with downsampling only => downsample first, then convolve.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "down", ">", "1", "and", "up", "==", "1", ")", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: 1x1 convolution with upsampling only => convolve first, then upsample.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "up", ">", "1", "and", "down", "==", "1", ")", ":", "\n", "        ", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "return", "x", "\n", "\n", "# Fast path: downsampling only => use strided convolution.", "\n", "", "if", "down", ">", "1", "and", "up", "==", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "down", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: upsampling with optional downsampling => use transpose strided convolution.", "\n", "", "if", "up", ">", "1", ":", "\n", "        ", "if", "groups", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "groups", ",", "out_channels", "//", "groups", ",", "in_channels_per_group", ",", "kh", ",", "kw", ")", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "2", ")", "\n", "w", "=", "w", ".", "reshape", "(", "groups", "*", "in_channels_per_group", ",", "out_channels", "//", "groups", ",", "kh", ",", "kw", ")", "\n", "", "px0", "-=", "kw", "-", "1", "\n", "px1", "-=", "kw", "-", "up", "\n", "py0", "-=", "kh", "-", "1", "\n", "py1", "-=", "kh", "-", "up", "\n", "pxt", "=", "max", "(", "min", "(", "-", "px0", ",", "-", "px1", ")", ",", "0", ")", "\n", "pyt", "=", "max", "(", "min", "(", "-", "py0", ",", "-", "py1", ")", ",", "0", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "up", ",", "padding", "=", "[", "pyt", ",", "pxt", "]", ",", "groups", "=", "groups", ",", "transpose", "=", "True", ",", "flip_weight", "=", "(", "not", "flip_weight", ")", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", "+", "pxt", ",", "px1", "+", "pxt", ",", "py0", "+", "pyt", ",", "py1", "+", "pyt", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "if", "down", ">", "1", ":", "\n", "            ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n", "# Fast path: no up/downsampling, padding supported by the underlying implementation => use plain conv2d.", "\n", "", "if", "up", "==", "1", "and", "down", "==", "1", ":", "\n", "        ", "if", "px0", "==", "px1", "and", "py0", "==", "py1", "and", "px0", ">=", "0", "and", "py0", ">=", "0", ":", "\n", "            ", "return", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "padding", "=", "[", "py0", ",", "px0", "]", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "\n", "# Fallback: Generic reference implementation.", "\n", "", "", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "(", "f", "if", "up", ">", "1", "else", "None", ")", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "down", ">", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.no_weight_gradients": [[24, 32], ["None"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "no_weight_gradients", "(", "disable", "=", "True", ")", ":", "\n", "    ", "global", "weight_gradients_disabled", "\n", "old", "=", "weight_gradients_disabled", "\n", "if", "disable", ":", "\n", "        ", "weight_gradients_disabled", "=", "True", "\n", "", "yield", "\n", "weight_gradients_disabled", "=", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d": [[35, 39], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "False", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv_transpose2d": [[40, 44], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv_transpose2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv_transpose2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "True", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._should_use_custom_op": [[47, 54], ["isinstance"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", "input", ")", ":", "\n", "    ", "assert", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", "\n", "if", "(", "not", "enabled", ")", "or", "(", "not", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "input", ".", "device", ".", "type", "!=", "'cuda'", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._tuple_of_ints": [[55, 60], ["all", "isinstance", "tuple", "len", "isinstance"], "function", ["None"], ["", "def", "_tuple_of_ints", "(", "xs", ",", "ndim", ")", ":", "\n", "    ", "xs", "=", "tuple", "(", "xs", ")", "if", "isinstance", "(", "xs", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "xs", ",", ")", "*", "ndim", "\n", "assert", "len", "(", "xs", ")", "==", "ndim", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "xs", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._conv2d_gradfix": [[66, 197], ["tuple", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "all", "all", "all", "dict", "len", "all", "all", "ctx.save_for_backward", "torch.nn.functional.conv2d", "ctx.save_for_backward", "range", "range", "range", "range", "weight.reshape", "input.reshape", "c.reshape().transpose.reshape().transpose", "c.reshape().transpose.contiguous", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix._conv2d_gradfix.calc_output_padding"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv_transpose2d"], ["def", "_conv2d_gradfix", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", ":", "\n", "# Parse arguments.", "\n", "    ", "ndim", "=", "2", "\n", "weight_shape", "=", "tuple", "(", "weight_shape", ")", "\n", "stride", "=", "_tuple_of_ints", "(", "stride", ",", "ndim", ")", "\n", "padding", "=", "_tuple_of_ints", "(", "padding", ",", "ndim", ")", "\n", "output_padding", "=", "_tuple_of_ints", "(", "output_padding", ",", "ndim", ")", "\n", "dilation", "=", "_tuple_of_ints", "(", "dilation", ",", "ndim", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", "\n", "if", "key", "in", "_conv2d_gradfix_cache", ":", "\n", "        ", "return", "_conv2d_gradfix_cache", "[", "key", "]", "\n", "\n", "# Validate arguments.", "\n", "", "assert", "groups", ">=", "1", "\n", "assert", "len", "(", "weight_shape", ")", "==", "ndim", "+", "2", "\n", "assert", "all", "(", "stride", "[", "i", "]", ">=", "1", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "padding", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "dilation", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "if", "not", "transpose", ":", "\n", "        ", "assert", "all", "(", "output_padding", "[", "i", "]", "==", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "", "else", ":", "# transpose", "\n", "        ", "assert", "all", "(", "0", "<=", "output_padding", "[", "i", "]", "<", "max", "(", "stride", "[", "i", "]", ",", "dilation", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "\n", "# Helpers.", "\n", "", "common_kwargs", "=", "dict", "(", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "def", "calc_output_padding", "(", "input_shape", ",", "output_shape", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "[", "0", ",", "0", "]", "\n", "", "return", "[", "\n", "input_shape", "[", "i", "+", "2", "]", "\n", "-", "(", "output_shape", "[", "i", "+", "2", "]", "-", "1", ")", "*", "stride", "[", "i", "]", "\n", "-", "(", "1", "-", "2", "*", "padding", "[", "i", "]", ")", "\n", "-", "dilation", "[", "i", "]", "*", "(", "weight_shape", "[", "i", "+", "2", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", "\n", "]", "\n", "\n", "# Forward & backward.", "\n", "", "class", "Conv2d", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "            ", "assert", "weight", ".", "shape", "==", "weight_shape", "\n", "ctx", ".", "save_for_backward", "(", "\n", "input", "if", "weight", ".", "requires_grad", "else", "_null_tensor", ",", "\n", "weight", "if", "input", ".", "requires_grad", "else", "_null_tensor", ",", "\n", ")", "\n", "ctx", ".", "input_shape", "=", "input", ".", "shape", "\n", "\n", "# Simple 1x1 convolution => cuBLAS (only on Volta, not on Ampere).", "\n", "if", "weight_shape", "[", "2", ":", "]", "==", "stride", "==", "dilation", "==", "(", "1", ",", "1", ")", "and", "padding", "==", "(", "0", ",", "0", ")", "and", "torch", ".", "cuda", ".", "get_device_capability", "(", "input", ".", "device", ")", "<", "(", "8", ",", "0", ")", ":", "\n", "                ", "a", "=", "weight", ".", "reshape", "(", "groups", ",", "weight_shape", "[", "0", "]", "//", "groups", ",", "weight_shape", "[", "1", "]", ")", "\n", "b", "=", "input", ".", "reshape", "(", "input", ".", "shape", "[", "0", "]", ",", "groups", ",", "input", ".", "shape", "[", "1", "]", "//", "groups", ",", "-", "1", ")", "\n", "c", "=", "(", "a", ".", "transpose", "(", "1", ",", "2", ")", "if", "transpose", "else", "a", ")", "@", "b", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "flatten", "(", "2", ")", "\n", "c", "=", "c", ".", "reshape", "(", "-", "1", ",", "input", ".", "shape", "[", "0", "]", ",", "*", "input", ".", "shape", "[", "2", ":", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "c", "=", "c", "if", "bias", "is", "None", "else", "c", "+", "bias", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "return", "c", ".", "contiguous", "(", "memory_format", "=", "(", "torch", ".", "channels_last", "if", "input", ".", "stride", "(", "1", ")", "==", "1", "else", "torch", ".", "contiguous_format", ")", ")", "\n", "\n", "# General case => cuDNN.", "\n", "", "if", "transpose", ":", "\n", "                ", "return", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "output_padding", "=", "output_padding", ",", "**", "common_kwargs", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "**", "common_kwargs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "input", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "input_shape", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "None", "\n", "grad_weight", "=", "None", "\n", "grad_bias", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input_shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "op", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", "\n", "grad_input", "=", "op", ".", "apply", "(", "grad_output", ",", "weight", ",", "None", ")", "\n", "assert", "grad_input", ".", "shape", "==", "input_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "and", "not", "weight_gradients_disabled", ":", "\n", "                ", "grad_weight", "=", "Conv2dGradWeight", ".", "apply", "(", "grad_output", ",", "input", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_bias", "=", "grad_output", ".", "sum", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "\n", "# Gradient with respect to the weights.", "\n", "", "", "class", "Conv2dGradWeight", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ")", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "\n", "grad_output", "if", "input", ".", "requires_grad", "else", "_null_tensor", ",", "\n", "input", "if", "grad_output", ".", "requires_grad", "else", "_null_tensor", ",", "\n", ")", "\n", "ctx", ".", "grad_output_shape", "=", "grad_output", ".", "shape", "\n", "ctx", ".", "input_shape", "=", "input", ".", "shape", "\n", "\n", "# Simple 1x1 convolution => cuBLAS (on both Volta and Ampere).", "\n", "if", "weight_shape", "[", "2", ":", "]", "==", "stride", "==", "dilation", "==", "(", "1", ",", "1", ")", "and", "padding", "==", "(", "0", ",", "0", ")", ":", "\n", "                ", "a", "=", "grad_output", ".", "reshape", "(", "grad_output", ".", "shape", "[", "0", "]", ",", "groups", ",", "grad_output", ".", "shape", "[", "1", "]", "//", "groups", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "flatten", "(", "2", ")", "\n", "b", "=", "input", ".", "reshape", "(", "input", ".", "shape", "[", "0", "]", ",", "groups", ",", "input", ".", "shape", "[", "1", "]", "//", "groups", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "flatten", "(", "2", ")", "\n", "c", "=", "(", "b", "@", "a", ".", "transpose", "(", "1", ",", "2", ")", "if", "transpose", "else", "a", "@", "b", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "reshape", "(", "weight_shape", ")", "\n", "return", "c", ".", "contiguous", "(", "memory_format", "=", "(", "torch", ".", "channels_last", "if", "input", ".", "stride", "(", "1", ")", "==", "1", "else", "torch", ".", "contiguous_format", ")", ")", "\n", "\n", "# General case => cuDNN.", "\n", "", "name", "=", "'aten::cudnn_convolution_transpose_backward_weight'", "if", "transpose", "else", "'aten::cudnn_convolution_backward_weight'", "\n", "flags", "=", "[", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", ",", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ",", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "]", "\n", "return", "torch", ".", "_C", ".", "_jit_get_operation", "(", "name", ")", "(", "weight_shape", ",", "grad_output", ",", "input", ",", "padding", ",", "stride", ",", "dilation", ",", "groups", ",", "*", "flags", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_weight", ")", ":", "\n", "            ", "grad_output", ",", "input", "=", "ctx", ".", "saved_tensors", "\n", "grad_output_shape", "=", "ctx", ".", "grad_output_shape", "\n", "input_shape", "=", "ctx", ".", "input_shape", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad2_grad_output", "=", "Conv2d", ".", "apply", "(", "input", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_grad_output", ".", "shape", "==", "grad_output_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input_shape", ",", "output_shape", "=", "grad_output_shape", ")", "\n", "op", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", "\n", "grad2_input", "=", "op", ".", "apply", "(", "grad_output", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_input", ".", "shape", "==", "input_shape", "\n", "\n", "", "return", "grad2_grad_output", ",", "grad2_input", "\n", "\n", "", "", "_conv2d_gradfix_cache", "[", "key", "]", "=", "Conv2d", "\n", "return", "Conv2d", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._GridSample2dForward.forward": [[39, 46], ["torch.nn.functional.grid_sample", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "grid", ")", ":", "\n", "        ", "assert", "input", ".", "ndim", "==", "4", "\n", "assert", "grid", ".", "ndim", "==", "4", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._GridSample2dForward.backward": [[47, 52], ["_GridSample2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "grid", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_grid", "=", "_GridSample2dBackward", ".", "apply", "(", "grad_output", ",", "input", ",", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._GridSample2dBackward.forward": [[56, 62], ["torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ",", "grid", ")", ":", "\n", "        ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::grid_sampler_2d_backward'", ")", "\n", "grad_input", ",", "grad_grid", "=", "op", "(", "grad_output", ",", "input", ",", "grid", ",", "0", ",", "0", ",", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._GridSample2dBackward.backward": [[63, 76], ["_GridSample2dForward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_input", ",", "grad2_grad_grid", ")", ":", "\n", "        ", "_", "=", "grad2_grad_grid", "# unused", "\n", "grid", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "grad2_grid", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad2_grad_output", "=", "_GridSample2dForward", ".", "apply", "(", "grad2_grad_input", ",", "grid", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", "\n", "return", "grad2_grad_output", ",", "grad2_input", ",", "grad2_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample": [[26, 30], ["grid_sample_gradfix._should_use_custom_op", "torch.nn.functional.grid_sample", "_GridSample2dForward.apply"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", ")", ":", "\n", "        ", "return", "_GridSample2dForward", ".", "apply", "(", "input", ",", "grid", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.grid_sample_gradfix._should_use_custom_op": [[33, 35], ["None"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", ")", ":", "\n", "    ", "return", "enabled", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.forward": [[21, 27], ["torch.addcmul", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "a", ",", "b", ",", "c", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "out", "=", "torch", ".", "addcmul", "(", "c", ",", "a", ",", "b", ")", "\n", "ctx", ".", "save_for_backward", "(", "a", ",", "b", ")", "\n", "ctx", ".", "c_shape", "=", "c", ".", "shape", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._FusedMultiplyAdd.backward": [[28, 46], ["fma._unbroadcast", "fma._unbroadcast", "fma._unbroadcast"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._unbroadcast", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._unbroadcast", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._unbroadcast"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dout", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "a", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "c_shape", "=", "ctx", ".", "c_shape", "\n", "da", "=", "None", "\n", "db", "=", "None", "\n", "dc", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "da", "=", "_unbroadcast", "(", "dout", "*", "b", ",", "a", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "db", "=", "_unbroadcast", "(", "dout", "*", "a", ",", "b", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "dc", "=", "_unbroadcast", "(", "dout", ",", "c_shape", ")", "\n", "\n", "", "return", "da", ",", "db", ",", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma.fma": [[15, 17], ["_FusedMultiplyAdd.apply"], "function", ["None"], ["def", "fma", "(", "a", ",", "b", ",", "c", ")", ":", "# => a * b + c", "\n", "    ", "return", "_FusedMultiplyAdd", ".", "apply", "(", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma._unbroadcast": [[49, 59], ["len", "len", "x.reshape.sum", "x.reshape.reshape", "range"], "function", ["None"], ["", "", "def", "_unbroadcast", "(", "x", ",", "shape", ")", ":", "\n", "    ", "extra_dims", "=", "x", ".", "ndim", "-", "len", "(", "shape", ")", "\n", "assert", "extra_dims", ">=", "0", "\n", "dim", "=", "[", "i", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "if", "x", ".", "shape", "[", "i", "]", ">", "1", "and", "(", "i", "<", "extra_dims", "or", "shape", "[", "i", "-", "extra_dims", "]", "==", "1", ")", "]", "\n", "if", "len", "(", "dim", ")", ":", "\n", "        ", "x", "=", "x", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "if", "extra_dims", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "extra_dims", "+", "1", ":", "]", ")", "\n", "", "assert", "x", ".", "shape", "==", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._init": [[23, 34], ["custom_ops.get_plugin", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_plugin", "\n", "if", "_plugin", "is", "None", ":", "\n", "        ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "\n", "module_name", "=", "'upfirdn2d_plugin'", ",", "\n", "sources", "=", "[", "'upfirdn2d.cpp'", ",", "'upfirdn2d.cu'", "]", ",", "\n", "headers", "=", "[", "'upfirdn2d.h'", "]", ",", "\n", "source_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ",", "\n", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling": [[35, 43], ["isinstance", "isinstance", "all", "isinstance"], "function", ["None"], ["", "def", "_parse_scaling", "(", "scaling", ")", ":", "\n", "    ", "if", "isinstance", "(", "scaling", ",", "int", ")", ":", "\n", "        ", "scaling", "=", "[", "scaling", ",", "scaling", "]", "\n", "", "assert", "isinstance", "(", "scaling", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "scaling", ")", "\n", "sx", ",", "sy", "=", "scaling", "\n", "assert", "sx", ">=", "1", "and", "sy", ">=", "1", "\n", "return", "sx", ",", "sy", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_padding": [[44, 54], ["isinstance", "isinstance", "all", "len", "isinstance"], "function", ["None"], ["", "def", "_parse_padding", "(", "padding", ")", ":", "\n", "    ", "if", "isinstance", "(", "padding", ",", "int", ")", ":", "\n", "        ", "padding", "=", "[", "padding", ",", "padding", "]", "\n", "", "assert", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "padding", ")", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "padx", ",", "pady", "=", "padding", "\n", "padding", "=", "[", "padx", ",", "padx", ",", "pady", ",", "pady", "]", "\n", "", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "padding", "\n", "return", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._get_filter_size": [[55, 67], ["style_misc.assert_shape", "isinstance", "style_misc.suppress_tracer_warnings", "int", "int"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "_get_filter_size", "(", "f", ")", ":", "\n", "    ", "if", "f", "is", "None", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "fw", "=", "f", ".", "shape", "[", "-", "1", "]", "\n", "fh", "=", "f", ".", "shape", "[", "0", "]", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "\n", "        ", "fw", "=", "int", "(", "fw", ")", "\n", "fh", "=", "int", "(", "fh", ")", "\n", "", "misc", ".", "assert_shape", "(", "f", ",", "[", "fh", ",", "fw", "]", "[", ":", "f", ".", "ndim", "]", ")", "\n", "assert", "fw", ">=", "1", "and", "fh", ">=", "1", "\n", "return", "fw", ",", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.setup_filter": [[70, 115], ["torch.device", "torch.as_tensor", "f.flip.to", "f.flip.numel", "f.flip.ger", "f.flip.sum", "f.flip.flip", "list", "f.flip.numel", "range"], "function", ["None"], ["", "def", "setup_filter", "(", "f", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "normalize", "=", "True", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "separable", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Convenience function to setup 2D FIR filter for `upfirdn2d()`.\n\n    Args:\n        f:           Torch tensor, numpy array, or python list of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable),\n                     `[]` (impulse), or\n                     `None` (identity).\n        device:      Result device (default: cpu).\n        normalize:   Normalize the filter so that it retains the magnitude\n                     for constant input signal (DC)? (default: True).\n        flip_filter: Flip the filter? (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        separable:   Return a separable filter? (default: select automatically).\n\n    Returns:\n        Float32 tensor of the shape\n        `[filter_height, filter_width]` (non-separable) or\n        `[filter_taps]` (separable).\n    \"\"\"", "\n", "# Validate.", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "f", "=", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "f", ".", "ndim", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "assert", "f", ".", "numel", "(", ")", ">", "0", "\n", "if", "f", ".", "ndim", "==", "0", ":", "\n", "        ", "f", "=", "f", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Separable?", "\n", "", "if", "separable", "is", "None", ":", "\n", "        ", "separable", "=", "(", "f", ".", "ndim", "==", "1", "and", "f", ".", "numel", "(", ")", ">=", "8", ")", "\n", "", "if", "f", ".", "ndim", "==", "1", "and", "not", "separable", ":", "\n", "        ", "f", "=", "f", ".", "ger", "(", "f", ")", "\n", "", "assert", "f", ".", "ndim", "==", "(", "1", "if", "separable", "else", "2", ")", "\n", "\n", "# Apply normalize, flip, gain, and device.", "\n", "if", "normalize", ":", "\n", "        ", "f", "/=", "f", ".", "sum", "(", ")", "\n", "", "if", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d": [[118, 163], ["isinstance", "upfirdn2d._upfirdn2d_ref", "upfirdn2d._init", "_upfirdn2d_cuda().apply", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._upfirdn2d_ref", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._init", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._upfirdn2d_cuda"], ["", "def", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, filter, and downsample a batch of 2D images.\n\n    Performs the following sequence of operations for each channel:\n\n    1. Upsample the image by inserting N-1 zeros after each pixel (`up`).\n\n    2. Pad the image with the specified number of zeros on each side (`padding`).\n       Negative padding corresponds to cropping the image.\n\n    3. Convolve the image with the specified 2D FIR filter (`f`), shrinking it\n       so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by keeping every Nth pixel (`down`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the upsampled image. Can be a single number\n                     or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_upfirdn2d_cuda", "(", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", ".", "apply", "(", "x", ",", "f", ")", "\n", "", "return", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._upfirdn2d_ref": [[166, 211], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "f.flip.to", "f[].repeat", "isinstance", "torch.ones", "isinstance", "f.flip.flip", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "max", "max", "max", "max", "list", "max", "max", "range", "f.flip.unsqueeze", "f.flip.unsqueeze", "max", "max"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d"], ["", "def", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn2d()` using standard PyTorch ops.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "assert", "f", ".", "dtype", "==", "torch", ".", "float32", "and", "not", "f", ".", "requires_grad", "\n", "batch_size", ",", "num_channels", ",", "in_height", ",", "in_width", "=", "x", ".", "shape", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Check that upsampled buffer is not smaller than the filter.", "\n", "upW", "=", "in_width", "*", "upx", "+", "padx0", "+", "padx1", "\n", "upH", "=", "in_height", "*", "upy", "+", "pady0", "+", "pady1", "\n", "assert", "upW", ">=", "f", ".", "shape", "[", "-", "1", "]", "and", "upH", ">=", "f", ".", "shape", "[", "0", "]", "\n", "\n", "# Upsample by inserting zeros.", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", ",", "1", ",", "in_width", ",", "1", "]", ")", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "0", ",", "upx", "-", "1", ",", "0", ",", "0", ",", "0", ",", "upy", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", "*", "upy", ",", "in_width", "*", "upx", "]", ")", "\n", "\n", "# Pad or crop.", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", ",", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "3", "]", "-", "max", "(", "-", "padx1", ",", "0", ")", "]", "\n", "\n", "# Setup filter.", "\n", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "not", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "\n", "# Convolve with the filter.", "\n", "", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "[", "num_channels", ",", "1", "]", "+", "[", "1", "]", "*", "f", ".", "ndim", ")", "\n", "if", "f", ".", "ndim", "==", "4", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ",", "groups", "=", "num_channels", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "num_channels", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "num_channels", ")", "\n", "\n", "# Downsample by throwing away pixels.", "\n", "", "x", "=", "x", "[", ":", ",", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._upfirdn2d_cuda": [[216, 273], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "ctx.save_for_backward", "upfirdn2d._get_filter_size", "isinstance", "torch.ones", "f.square().unsqueeze.square().unsqueeze", "isinstance", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_upfirdn2d_cuda().apply", "f.square().unsqueeze.unsqueeze", "f.square().unsqueeze.unsqueeze", "f.square().unsqueeze.square", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._upfirdn2d_cuda"], ["def", "_upfirdn2d_cuda", "(", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn2d()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "if", "key", "in", "_upfirdn2d_cuda_cache", ":", "\n", "        ", "return", "_upfirdn2d_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "Upfirdn2dCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "f", ".", "ndim", "==", "1", "and", "f", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "f", "=", "f", ".", "square", "(", ")", ".", "unsqueeze", "(", "0", ")", "# Convert separable-1 into full-1x1.", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "y", "=", "x", "\n", "if", "f", ".", "ndim", "==", "2", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "0", ")", ",", "upx", ",", "1", ",", "downx", ",", "1", ",", "padx0", ",", "padx1", ",", "0", ",", "0", ",", "flip_filter", ",", "1.0", ")", "\n", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "1", ")", ",", "1", ",", "upy", ",", "1", ",", "downy", ",", "0", ",", "0", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "f", ")", "\n", "ctx", ".", "x_shape", "=", "x", ".", "shape", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "f", ",", "=", "ctx", ".", "saved_tensors", "\n", "_", ",", "_", ",", "ih", ",", "iw", "=", "ctx", ".", "x_shape", "\n", "_", ",", "_", ",", "oh", ",", "ow", "=", "dy", ".", "shape", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "fw", "-", "padx0", "-", "1", ",", "\n", "iw", "*", "upx", "-", "ow", "*", "downx", "+", "padx0", "-", "upx", "+", "1", ",", "\n", "fh", "-", "pady0", "-", "1", ",", "\n", "ih", "*", "upy", "-", "oh", "*", "downy", "+", "pady0", "-", "upy", "+", "1", ",", "\n", "]", "\n", "dx", "=", "None", "\n", "df", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "dx", "=", "_upfirdn2d_cuda", "(", "up", "=", "down", ",", "down", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "(", "not", "flip_filter", ")", ",", "gain", "=", "gain", ")", ".", "apply", "(", "dy", ",", "f", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", "\n", "return", "dx", ",", "df", "\n", "\n", "# Add to cache.", "\n", "", "", "_upfirdn2d_cuda_cache", "[", "key", "]", "=", "Upfirdn2dCuda", "\n", "return", "Upfirdn2dCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.filter2d": [[276, 309], ["upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d"], ["", "def", "filter2d", "(", "x", ",", "f", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape matches the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "fw", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "1", ")", "//", "2", ",", "\n", "pady0", "+", "fh", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "1", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upsample2d": [[312, 348], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d"], ["", "def", "upsample2d", "(", "x", ",", "f", ",", "up", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a multiple of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "+", "upx", "-", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "upx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "+", "upy", "-", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "upy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", "*", "upx", "*", "upy", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.downsample2d": [[351, 387], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d"], ["", "def", "downsample2d", "(", "x", ",", "f", ",", "down", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a fraction of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the input. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "-", "downx", "+", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "downx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "-", "downy", "+", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "downy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "down", "=", "down", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._init": [[23, 34], ["custom_ops.get_plugin", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_plugin", "\n", "if", "_plugin", "is", "None", ":", "\n", "        ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "\n", "module_name", "=", "'filtered_lrelu_plugin'", ",", "\n", "sources", "=", "[", "'filtered_lrelu.cpp'", ",", "'filtered_lrelu_wr.cu'", ",", "'filtered_lrelu_rd.cu'", ",", "'filtered_lrelu_ns.cu'", "]", ",", "\n", "headers", "=", "[", "'filtered_lrelu.h'", ",", "'filtered_lrelu.cu'", "]", ",", "\n", "source_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ",", "\n", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size": [[35, 41], ["isinstance"], "function", ["None"], ["", "def", "_get_filter_size", "(", "f", ")", ":", "\n", "    ", "if", "f", "is", "None", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "\n", "assert", "1", "<=", "f", ".", "ndim", "<=", "2", "\n", "return", "f", ".", "shape", "[", "-", "1", "]", ",", "f", ".", "shape", "[", "0", "]", "# width, height", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding": [[42, 53], ["isinstance", "isinstance", "all", "int", "len", "isinstance"], "function", ["None"], ["", "def", "_parse_padding", "(", "padding", ")", ":", "\n", "    ", "if", "isinstance", "(", "padding", ",", "int", ")", ":", "\n", "        ", "padding", "=", "[", "padding", ",", "padding", "]", "\n", "", "assert", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "(", "int", ",", "np", ".", "integer", ")", ")", "for", "x", "in", "padding", ")", "\n", "padding", "=", "[", "int", "(", "x", ")", "for", "x", "in", "padding", "]", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "px", ",", "py", "=", "padding", "\n", "padding", "=", "[", "px", ",", "px", ",", "py", ",", "py", "]", "\n", "", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "padding", "\n", "return", "px0", ",", "px1", ",", "py0", ",", "py1", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu.filtered_lrelu": [[56, 117], ["numpy.sqrt", "isinstance", "filtered_lrelu._filtered_lrelu_ref", "filtered_lrelu._init", "_filtered_lrelu_cuda().apply", "filtered_lrelu._filtered_lrelu_cuda"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._filtered_lrelu_ref", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._init", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._filtered_lrelu_cuda"], ["", "def", "filtered_lrelu", "(", "x", ",", "fu", "=", "None", ",", "fd", "=", "None", ",", "b", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "slope", "=", "0.2", ",", "clamp", "=", "None", ",", "flip_filter", "=", "False", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filtered leaky ReLU for a batch of 2D images.\n\n    Performs the following sequence of operations for each channel:\n\n    1. Add channel-specific bias if provided (`b`).\n\n    2. Upsample the image by inserting N-1 zeros after each pixel (`up`).\n\n    3. Pad the image with the specified number of zeros on each side (`padding`).\n       Negative padding corresponds to cropping the image.\n\n    4. Convolve the image with the specified upsampling FIR filter (`fu`), shrinking it\n       so that the footprint of all output pixels lies within the input image.\n\n    5. Multiply each value by the provided gain factor (`gain`).\n\n    6. Apply leaky ReLU activation function to each value.\n\n    7. Clamp each value between -clamp and +clamp, if `clamp` parameter is provided.\n\n    8. Convolve the image with the specified downsampling FIR filter (`fd`), shrinking\n       it so that the footprint of all output pixels lies within the input image.\n\n    9. Downsample the image by keeping every Nth pixel (`down`).\n\n    The fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:           Float32/float16/float64 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        fu:          Float32 upsampling FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        fd:          Float32 downsampling FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        b:           Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                     as `x`. The length of vector must must match the channel dimension of `x`.\n        up:          Integer upsampling factor (default: 1).\n        down:        Integer downsampling factor. (default: 1).\n        padding:     Padding with respect to the upsampled image. Can be a single number\n                     or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        gain:        Overall scaling factor for signal magnitude (default: sqrt(2)).\n        slope:       Slope on the negative side of leaky ReLU (default: 0.2).\n        clamp:       Maximum magnitude for leaky ReLU output (default: None).\n        flip_filter: False = convolution, True = correlation (default: False).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_filtered_lrelu_cuda", "(", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "gain", "=", "gain", ",", "slope", "=", "slope", ",", "clamp", "=", "clamp", ",", "flip_filter", "=", "flip_filter", ")", ".", "apply", "(", "x", ",", "fu", ",", "fd", ",", "b", ",", "None", ",", "0", ",", "0", ")", "\n", "", "return", "_filtered_lrelu_ref", "(", "x", ",", "fu", "=", "fu", ",", "fd", "=", "fd", ",", "b", "=", "b", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "gain", "=", "gain", ",", "slope", "=", "slope", ",", "clamp", "=", "clamp", ",", "flip_filter", "=", "flip_filter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._filtered_lrelu_ref": [[120, 153], ["numpy.sqrt", "filtered_lrelu._get_filter_size", "filtered_lrelu._get_filter_size", "filtered_lrelu._parse_padding", "bias_act.bias_act", "upfirdn2d.upfirdn2d", "bias_act.bias_act", "upfirdn2d.upfirdn2d", "style_misc.assert_shape", "isinstance", "style_misc.assert_shape", "isinstance", "isinstance", "isinstance", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._get_filter_size", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "_filtered_lrelu_ref", "(", "x", ",", "fu", "=", "None", ",", "fd", "=", "None", ",", "b", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "slope", "=", "0.2", ",", "clamp", "=", "None", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "\"\"\"Slow and memory-inefficient reference implementation of `filtered_lrelu()` using\n    existing `upfirdn2n()` and `bias_act()` ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "fu_w", ",", "fu_h", "=", "_get_filter_size", "(", "fu", ")", "\n", "fd_w", ",", "fd_h", "=", "_get_filter_size", "(", "fd", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "torch", ".", "Tensor", ")", "and", "b", ".", "dtype", "==", "x", ".", "dtype", "\n", "misc", ".", "assert_shape", "(", "b", ",", "[", "x", ".", "shape", "[", "1", "]", "]", ")", "\n", "", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "up", ">=", "1", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "down", ">=", "1", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "assert", "gain", "==", "float", "(", "gain", ")", "and", "gain", ">", "0", "\n", "assert", "slope", "==", "float", "(", "slope", ")", "and", "slope", ">=", "0", "\n", "assert", "clamp", "is", "None", "or", "(", "clamp", "==", "float", "(", "clamp", ")", "and", "clamp", ">=", "0", ")", "\n", "\n", "# Calculate output size.", "\n", "batch_size", ",", "channels", ",", "in_h", ",", "in_w", "=", "x", ".", "shape", "\n", "in_dtype", "=", "x", ".", "dtype", "\n", "out_w", "=", "(", "in_w", "*", "up", "+", "(", "px0", "+", "px1", ")", "-", "(", "fu_w", "-", "1", ")", "-", "(", "fd_w", "-", "1", ")", "+", "(", "down", "-", "1", ")", ")", "//", "down", "\n", "out_h", "=", "(", "in_h", "*", "up", "+", "(", "py0", "+", "py1", ")", "-", "(", "fu_h", "-", "1", ")", "-", "(", "fd_h", "-", "1", ")", "+", "(", "down", "-", "1", ")", ")", "//", "down", "\n", "\n", "# Compute using existing ops.", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", "=", "x", ",", "b", "=", "b", ")", "# Apply bias.", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "fu", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "# Upsample.", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", "=", "x", ",", "act", "=", "'lrelu'", ",", "alpha", "=", "slope", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", "# Bias, leaky ReLU, clamp.", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "fd", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "# Downsample.", "\n", "\n", "# Check output shape & dtype.", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "channels", ",", "out_h", ",", "out_w", "]", ")", "\n", "assert", "x", ".", "dtype", "==", "in_dtype", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._filtered_lrelu_cuda": [[158, 272], ["numpy.sqrt", "filtered_lrelu._parse_padding", "float", "float", "float", "isinstance", "isinstance", "float", "float", "any", "ctx.save_for_backward", "float", "isinstance", "torch.ones", "torch.ones", "torch.empty", "torch.zeros", "x.stride", "warnings.warn", "_plugin.filtered_lrelu", "warnings.warn", "x.add", "upfirdn2d.upfirdn2d", "_plugin.filtered_lrelu_act_", "upfirdn2d.upfirdn2d", "_filtered_lrelu_cuda().apply", "_filtered_lrelu_cuda().apply.sum", "torch.ones.square", "torch.ones.square", "torch.empty.numel", "range", "torch.cuda.current_stream", "torch.cuda.default_stream", "warnings.warn", "torch.zeros.unsqueeze().unsqueeze", "torch.empty.numel", "x.size", "zip", "filtered_lrelu._filtered_lrelu_cuda", "torch.zeros.unsqueeze"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._parse_padding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu.filtered_lrelu", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu._filtered_lrelu_cuda"], ["def", "_filtered_lrelu_cuda", "(", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "slope", "=", "0.2", ",", "clamp", "=", "None", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `filtered_lrelu()` using custom ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "up", ">=", "1", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "down", ">=", "1", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "assert", "gain", "==", "float", "(", "gain", ")", "and", "gain", ">", "0", "\n", "gain", "=", "float", "(", "gain", ")", "\n", "assert", "slope", "==", "float", "(", "slope", ")", "and", "slope", ">=", "0", "\n", "slope", "=", "float", "(", "slope", ")", "\n", "assert", "clamp", "is", "None", "or", "(", "clamp", "==", "float", "(", "clamp", ")", "and", "clamp", ">=", "0", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "'inf'", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "up", ",", "down", ",", "px0", ",", "px1", ",", "py0", ",", "py1", ",", "gain", ",", "slope", ",", "clamp", ",", "flip_filter", ")", "\n", "if", "key", "in", "_filtered_lrelu_cuda_cache", ":", "\n", "        ", "return", "_filtered_lrelu_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "FilteredLReluCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "fu", ",", "fd", ",", "b", ",", "si", ",", "sx", ",", "sy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "\n", "# Replace empty up/downsample kernels with full 1x1 kernels (faster than separable).", "\n", "if", "fu", "is", "None", ":", "\n", "                ", "fu", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "fd", "is", "None", ":", "\n", "                ", "fd", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "1", "<=", "fu", ".", "ndim", "<=", "2", "\n", "assert", "1", "<=", "fd", ".", "ndim", "<=", "2", "\n", "\n", "# Replace separable 1x1 kernels with full 1x1 kernels when scale factor is 1.", "\n", "if", "up", "==", "1", "and", "fu", ".", "ndim", "==", "1", "and", "fu", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "fu", "=", "fu", ".", "square", "(", ")", "[", "None", "]", "\n", "", "if", "down", "==", "1", "and", "fd", ".", "ndim", "==", "1", "and", "fd", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "fd", "=", "fd", ".", "square", "(", ")", "[", "None", "]", "\n", "\n", "# Missing sign input tensor.", "\n", "", "if", "si", "is", "None", ":", "\n", "                ", "si", "=", "torch", ".", "empty", "(", "[", "0", "]", ")", "\n", "\n", "# Missing bias tensor.", "\n", "", "if", "b", "is", "None", ":", "\n", "                ", "b", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "# Construct internal sign tensor only if gradients are needed.", "\n", "", "write_signs", "=", "(", "si", ".", "numel", "(", ")", "==", "0", ")", "and", "(", "x", ".", "requires_grad", "or", "b", ".", "requires_grad", ")", "\n", "\n", "# Warn if input storage strides are not in decreasing order due to e.g. channels-last layout.", "\n", "strides", "=", "[", "x", ".", "stride", "(", "i", ")", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "if", "x", ".", "size", "(", "i", ")", ">", "1", "]", "\n", "if", "any", "(", "a", "<", "b", "for", "a", ",", "b", "in", "zip", "(", "strides", "[", ":", "-", "1", "]", ",", "strides", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"low-performance memory layout detected in filtered_lrelu input\"", ",", "RuntimeWarning", ")", "\n", "\n", "# Call C++/Cuda plugin if datatype is supported.", "\n", "", "if", "x", ".", "dtype", "in", "[", "torch", ".", "float16", ",", "torch", ".", "float32", "]", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "current_stream", "(", "x", ".", "device", ")", "!=", "torch", ".", "cuda", ".", "default_stream", "(", "x", ".", "device", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"filtered_lrelu called with non-default cuda stream but concurrent execution is not supported\"", ",", "RuntimeWarning", ")", "\n", "", "y", ",", "so", ",", "return_code", "=", "_plugin", ".", "filtered_lrelu", "(", "x", ",", "fu", ",", "fd", ",", "b", ",", "si", ",", "up", ",", "down", ",", "px0", ",", "px1", ",", "py0", ",", "py1", ",", "sx", ",", "sy", ",", "gain", ",", "slope", ",", "clamp", ",", "flip_filter", ",", "write_signs", ")", "\n", "", "else", ":", "\n", "                ", "return_code", "=", "-", "1", "\n", "\n", "# No Cuda kernel found? Fall back to generic implementation. Still more memory efficient than the reference implementation because", "\n", "# only the bit-packed sign tensor is retained for gradient computation.", "\n", "", "if", "return_code", "<", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"filtered_lrelu called with parameters that have no optimized CUDA kernel, using generic fallback\"", ",", "RuntimeWarning", ")", "\n", "\n", "y", "=", "x", ".", "add", "(", "b", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "# Add bias.", "\n", "y", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "y", ",", "f", "=", "fu", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "# Upsample.", "\n", "so", "=", "_plugin", ".", "filtered_lrelu_act_", "(", "y", ",", "si", ",", "sx", ",", "sy", ",", "gain", ",", "slope", ",", "clamp", ",", "write_signs", ")", "# Activation function and sign handling. Modifies y in-place.", "\n", "y", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "y", ",", "f", "=", "fd", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "# Downsample.", "\n", "\n", "# Prepare for gradient computation.", "\n", "", "ctx", ".", "save_for_backward", "(", "fu", ",", "fd", ",", "(", "si", "if", "si", ".", "numel", "(", ")", "else", "so", ")", ")", "\n", "ctx", ".", "x_shape", "=", "x", ".", "shape", "\n", "ctx", ".", "y_shape", "=", "y", ".", "shape", "\n", "ctx", ".", "s_ofs", "=", "sx", ",", "sy", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "fu", ",", "fd", ",", "si", "=", "ctx", ".", "saved_tensors", "\n", "_", ",", "_", ",", "xh", ",", "xw", "=", "ctx", ".", "x_shape", "\n", "_", ",", "_", ",", "yh", ",", "yw", "=", "ctx", ".", "y_shape", "\n", "sx", ",", "sy", "=", "ctx", ".", "s_ofs", "\n", "dx", "=", "None", "# 0", "\n", "dfu", "=", "None", ";", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", "\n", "dfd", "=", "None", ";", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", "\n", "db", "=", "None", "# 3", "\n", "dsi", "=", "None", ";", "assert", "not", "ctx", ".", "needs_input_grad", "[", "4", "]", "\n", "dsx", "=", "None", ";", "assert", "not", "ctx", ".", "needs_input_grad", "[", "5", "]", "\n", "dsy", "=", "None", ";", "assert", "not", "ctx", ".", "needs_input_grad", "[", "6", "]", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "                ", "pp", "=", "[", "\n", "(", "fu", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "+", "(", "fd", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "-", "px0", ",", "\n", "xw", "*", "up", "-", "yw", "*", "down", "+", "px0", "-", "(", "up", "-", "1", ")", ",", "\n", "(", "fu", ".", "shape", "[", "0", "]", "-", "1", ")", "+", "(", "fd", ".", "shape", "[", "0", "]", "-", "1", ")", "-", "py0", ",", "\n", "xh", "*", "up", "-", "yh", "*", "down", "+", "py0", "-", "(", "up", "-", "1", ")", ",", "\n", "]", "\n", "gg", "=", "gain", "*", "(", "up", "**", "2", ")", "/", "(", "down", "**", "2", ")", "\n", "ff", "=", "(", "not", "flip_filter", ")", "\n", "sx", "=", "sx", "-", "(", "fu", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "+", "px0", "\n", "sy", "=", "sy", "-", "(", "fu", ".", "shape", "[", "0", "]", "-", "1", ")", "+", "py0", "\n", "dx", "=", "_filtered_lrelu_cuda", "(", "up", "=", "down", ",", "down", "=", "up", ",", "padding", "=", "pp", ",", "gain", "=", "gg", ",", "slope", "=", "slope", ",", "clamp", "=", "None", ",", "flip_filter", "=", "ff", ")", ".", "apply", "(", "dy", ",", "fd", ",", "fu", ",", "None", ",", "si", ",", "sx", ",", "sy", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "                ", "db", "=", "dx", ".", "sum", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "dx", ",", "dfu", ",", "dfd", ",", "db", ",", "dsi", ",", "dsx", ",", "dsy", "\n", "\n", "# Add to cache.", "\n", "", "", "_filtered_lrelu_cuda_cache", "[", "key", "]", "=", "FilteredLReluCuda", "\n", "return", "FilteredLReluCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.EasyDict.__getattr__": [[43, 48], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.EasyDict.__setattr__": [[49, 51], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.EasyDict.__delattr__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.__init__": [[59, 71], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.__enter__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.__exit__": [[75, 77], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.write": [[78, 92], ["isinstance", "util.Logger.stdout.write", "text.decode.decode.decode", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.flush"], ["", "def", "write", "(", "self", ",", "text", ":", "Union", "[", "str", ",", "bytes", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "text", "=", "text", ".", "decode", "(", ")", "\n", "", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.flush": [[93, 99], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.close": [[100, 113], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.set_cache_dir": [[120, 123], ["None"], "function", ["None"], ["def", "set_cache_dir", "(", "path", ":", "str", ")", "->", "None", ":", "\n", "    ", "global", "_dnnlib_cache_dir", "\n", "_dnnlib_cache_dir", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.make_cache_dir_path": [[124, 134], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tempfile.gettempdir"], "function", ["None"], ["", "def", "make_cache_dir_path", "(", "*", "paths", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "_dnnlib_cache_dir", "is", "not", "None", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_dnnlib_cache_dir", ",", "*", "paths", ")", "\n", "", "if", "'DNNLIB_CACHE_DIR'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'DNNLIB_CACHE_DIR'", "]", ",", "*", "paths", ")", "\n", "", "if", "'HOME'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'HOME'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "if", "'USERPROFILE'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'USERPROFILE'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.format_time": [[139, 151], ["int", "numpy.rint"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.ask_yes_no": [[153, 161], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.tuple_product": [[163, 171], ["None"], "function", ["None"], ["", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_dtype_and_ctype": [[187, 208], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.is_pickleable": [[210, 217], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_module_from_obj_name": [[222, 261], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_from_module"], ["", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_from_module": [[263, 271], ["obj_name.split", "getattr"], "function", ["None"], ["", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_by_name": [[273, 277], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_from_module"], ["", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.call_func_by_name": [[279, 285], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_obj_by_name"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.construct_class_by_name": [[287, 290], ["util.call_func_by_name"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.call_func_by_name"], ["", "def", "construct_class_by_name", "(", "*", "args", ",", "class_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python class with the given name and constructs it with the given arguments.\"\"\"", "\n", "return", "call_func_by_name", "(", "*", "args", ",", "func_name", "=", "class_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_module_dir_by_obj_name": [[292, 296], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_module_from_obj_name"], ["", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.is_top_level_function": [[298, 301], ["callable"], "function", ["None"], ["", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.get_top_level_function_name": [[303, 310], ["util.is_top_level_function", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.is_top_level_function"], ["", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "module", "=", "obj", ".", "__module__", "\n", "if", "module", "==", "'__main__'", ":", "\n", "        ", "module", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "modules", "[", "module", "]", ".", "__file__", ")", ")", "[", "0", "]", "\n", "", "return", "module", "+", "\".\"", "+", "obj", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.list_dir_recursively_with_ignore": [[315, 346], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.copy_files_and_create_dirs": [[348, 359], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.is_url": [[364, 380], ["obj.startswith", "requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["", "", "def", "is_url", "(", "obj", ":", "Any", ",", "allow_file_urls", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "if", "allow_file_urls", "and", "obj", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "return", "True", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.open_url": [[382, 478], ["requests.compat.urljoin.startswith", "util.is_url", "hashlib.md5().hexdigest", "io.BytesIO", "re.match", "re.match", "util.make_cache_dir_path", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "open", "urllib.parse.urlparse", "urllib.parse.urlparse", "open", "hashlib.md5", "os.path.join", "len", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "open", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.make_cache_dir_path", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ",", "return_filename", ":", "bool", "=", "False", ",", "cache", ":", "bool", "=", "True", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "num_attempts", ">=", "1", "\n", "assert", "not", "(", "return_filename", "and", "(", "not", "cache", ")", ")", "\n", "\n", "# Doesn't look like an URL scheme so interpret it as a local filename.", "\n", "if", "not", "re", ".", "match", "(", "'^[a-z]+://'", ",", "url", ")", ":", "\n", "        ", "return", "url", "if", "return_filename", "else", "open", "(", "url", ",", "\"rb\"", ")", "\n", "\n", "# Handle file URLs.  This code handles unusual file:// patterns that", "\n", "# arise on Windows:", "\n", "#", "\n", "# file:///c:/foo.txt", "\n", "#", "\n", "# which would translate to a local '/c:/foo.txt' filename that's", "\n", "# invalid.  Drop the forward slash for such pathnames.", "\n", "#", "\n", "# If you touch this code path, you should test it on both Linux and", "\n", "# Windows.", "\n", "#", "\n", "# Some internet resources suggest using urllib.request.url2pathname() but", "\n", "# but that converts forward slashes to backslashes and this causes", "\n", "# its own set of problems.", "\n", "", "if", "url", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "filename", "=", "urllib", ".", "parse", ".", "urlparse", "(", "url", ")", ".", "path", "\n", "if", "re", ".", "match", "(", "r'^/[a-zA-Z]:'", ",", "filename", ")", ":", "\n", "            ", "filename", "=", "filename", "[", "1", ":", "]", "\n", "", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "", "assert", "is_url", "(", "url", ")", "\n", "\n", "# Lookup from cache.", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "make_cache_dir_path", "(", "'downloads'", ")", "\n", "\n", "", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "filename", "=", "cache_files", "[", "0", "]", "\n", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive download quota exceeded -- please try again later\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "raise", "\n", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "if", "return_filename", ":", "\n", "            ", "return", "cache_file", "\n", "\n", "# Return data as file object.", "\n", "", "", "assert", "not", "return_filename", "\n", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[82, 86], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.execute_replication_callbacks": [[46, 67], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.patch_replication_callback": [[88, 113], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.__init__": [[44, 48], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.put": [[49, 54], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get": [[55, 63], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SlavePipe.run_slave": [[71, 76], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.__init__": [[88, 98], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.__getstate__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.__setstate__": [[102, 104], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.register_slave": [[105, 122], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.clear"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.run_master": [[123, 155], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.nr_slaves": [[156, 159], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[40, 49], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "'Tensor close check failed\\n'", "'adiff={}\\n'", "'rdiff={}\\n'", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[75, 93], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "\n", "eps", "=", "eps", ",", "\n", "momentum", "=", "momentum", ",", "\n", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[94, 124], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "training", ",", "\n", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[125, 134], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[135, 157], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[158, 176], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[233, 236], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[293, 296], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[354, 357], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._sum_ft": [[60, 63], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm._unsqueeze_ft": [[65, 68], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[359, 372], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model": [[374, 414], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "\n", "]", ",", "[", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ",", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[51, 62], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[63, 66], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[67, 71], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[72, 91], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "\n", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.GenBlock.__init__": [[16, 48], ["torch.Module.__init__", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "affine_input_dim", ",", "upsample", ",", "\n", "MODULES", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "hidden_channels", "=", "self", ".", "in_channels", "//", "channel_ratio", "\n", "\n", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "in_channels", ",", "MODULES", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "self", ".", "bn3", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "self", ".", "bn4", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.GenBlock.forward": [[49, 74], ["big_resnet_deep_legacy.GenBlock.bn1", "big_resnet_deep_legacy.GenBlock.conv2d1", "big_resnet_deep_legacy.GenBlock.bn2", "big_resnet_deep_legacy.GenBlock.activation", "big_resnet_deep_legacy.GenBlock.conv2d2", "big_resnet_deep_legacy.GenBlock.bn3", "big_resnet_deep_legacy.GenBlock.conv2d3", "big_resnet_deep_legacy.GenBlock.bn4", "big_resnet_deep_legacy.GenBlock.conv2d4", "big_resnet_deep_legacy.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet_deep_legacy.GenBlock.activation", "big_resnet_deep_legacy.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "if", "self", ".", "in_channels", "!=", "self", ".", "out_channels", ":", "\n", "            ", "x0", "=", "x", "[", ":", ",", ":", "self", ".", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "x0", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "bn1", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "# upsample", "\n", "", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn3", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "bn4", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d4", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "# upsample", "\n", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.Generator.__init__": [[77, 152], ["torch.Module.__init__", "len", "MODULES.g_linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.batchnorm_2d", "utils.batchnorm_2d", "MODULES.g_conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "utils.init_weights", "utils.init_weights", "utils.embedding", "utils.embedding", "str", "str", "str", "MODULES.g_linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_linear", "big_resnet_deep_legacy.GenBlock", "range", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "g_shared_dim", "=", "g_shared_dim", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "num_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "affine_input_dim", "=", "self", ".", "z_dim", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "g_shared_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "shared", "=", "ops", ".", "embedding", "(", "num_embeddings", "=", "self", ".", "num_classes", ",", "embedding_dim", "=", "self", ".", "g_shared_dim", ")", "\n", "\n", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "affine_input_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "g_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "g_cond_mtd", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "upsample", "=", "True", "if", "g_index", "==", "(", "g_depth", "-", "1", ")", "else", "False", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "for", "g_index", "in", "range", "(", "g_depth", ")", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "ops", ".", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d5", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.Generator.forward": [[153, 185], ["big_resnet_deep_legacy.Generator.linear0", "block.view", "enumerate", "big_resnet_deep_legacy.Generator.bn4", "big_resnet_deep_legacy.Generator.activation", "big_resnet_deep_legacy.Generator.conv2d5", "big_resnet_deep_legacy.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "affine_list.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "big_resnet_deep_legacy.Generator.info_mix_linear", "big_resnet_deep_legacy.Generator.shared", "isinstance", "affine_list.append", "block", "block", "big_resnet_deep_legacy.Generator.info_proj_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "if", "shared_label", "is", "None", ":", "\n", "                    ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "affine_list", ".", "append", "(", "shared_label", ")", "\n", "", "if", "len", "(", "affine_list", ")", ">", "0", ":", "\n", "                ", "z", "=", "torch", ".", "cat", "(", "affine_list", "+", "[", "z", "]", ",", "1", ")", "\n", "\n", "", "affine", "=", "z", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affine", ")", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.DiscBlock.__init__": [[188, 209], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "MODULES", ",", "downsample", "=", "True", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "hidden_channels", "=", "out_channels", "//", "channel_ratio", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "hidden_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "learnable_sc", "=", "True", "if", "(", "in_channels", "!=", "out_channels", ")", "else", "False", "\n", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", "-", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.DiscBlock.forward": [[210, 230], ["big_resnet_deep_legacy.DiscBlock.conv2d1", "big_resnet_deep_legacy.DiscBlock.conv2d2", "big_resnet_deep_legacy.DiscBlock.conv2d3", "big_resnet_deep_legacy.DiscBlock.activation", "big_resnet_deep_legacy.DiscBlock.conv2d4", "big_resnet_deep_legacy.DiscBlock.activation", "big_resnet_deep_legacy.DiscBlock.activation", "big_resnet_deep_legacy.DiscBlock.activation", "big_resnet_deep_legacy.DiscBlock.average_pooling", "big_resnet_deep_legacy.DiscBlock.average_pooling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "big_resnet_deep_legacy.DiscBlock.conv2d0"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv2d1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2d4", "(", "x", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "x0", "=", "torch", ".", "cat", "(", "[", "x0", ",", "self", ".", "conv2d0", "(", "x0", ")", "]", ",", "1", ")", "\n", "\n", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.Discriminator.__init__": [[233, 333], ["torch.Module.__init__", "MODULES.d_conv2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "utils.init_weights", "utils.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "big_resnet_deep_legacy.DiscBlock", "range", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_embedding", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "apply_d_sn", ",", "apply_attn", ",", "attn_d_loc", ",", "d_cond_mtd", ",", "aux_cls_type", ",", "d_embed_dim", ",", "normalize_d_embed", ",", "\n", "num_classes", ",", "d_init", ",", "d_depth", ",", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_down", "=", "{", "\n", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "\n", "}", "\n", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "input_conv", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "self", ".", "in_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "d_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "downsample", "=", "True", "if", "down", "[", "index", "]", "and", "d_index", "==", "0", "else", "False", ")", "\n", "]", "for", "d_index", "in", "range", "(", "d_depth", ")", "]", "\n", "\n", "if", "(", "index", "+", "1", ")", "in", "attn_d_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "False", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "# linear layer for adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", "+", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "d_init", ":", "\n", "            ", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "d_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_legacy.Discriminator.forward": [[334, 413], ["big_resnet_deep_legacy.Discriminator.input_conv", "enumerate", "big_resnet_deep_legacy.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "big_resnet_deep_legacy.Discriminator.linear1", "big_resnet_deep_legacy.Discriminator.info_discrete_linear", "big_resnet_deep_legacy.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "big_resnet_deep_legacy.Discriminator.linear2", "block", "big_resnet_deep_legacy.Discriminator.info_conti_var_linear", "big_resnet_deep_legacy.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet_deep_legacy.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet_deep_legacy.Discriminator.linear2", "big_resnet_deep_legacy.Discriminator.embedding", "big_resnet_deep_legacy.Discriminator.linear_mi.parameters", "big_resnet_deep_legacy.Discriminator.linear_mi", "big_resnet_deep_legacy.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet_deep_legacy.Discriminator.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "h", "=", "self", ".", "input_conv", "(", "x", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "bottom_h", ",", "bottom_w", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "# adversarial training", "\n", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                ", "if", "adc_fake", ":", "\n", "                    ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "*", "2", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "                ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "                ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                    ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                            ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                    ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.GenBlock.__init__": [[16, 56], ["torch.Module.__init__", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "affine_input_dim", ",", "upsample", ",", "\n", "MODULES", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "hidden_channels", "=", "self", ".", "in_channels", "//", "channel_ratio", "\n", "\n", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "in_channels", ",", "MODULES", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "self", ".", "bn3", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "self", ".", "bn4", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "self", ".", "hidden_channels", ",", "MODULES", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "hidden_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.GenBlock.forward": [[57, 79], ["big_resnet_deep_studiogan.GenBlock.bn1", "big_resnet_deep_studiogan.GenBlock.conv2d1", "big_resnet_deep_studiogan.GenBlock.bn2", "big_resnet_deep_studiogan.GenBlock.activation", "big_resnet_deep_studiogan.GenBlock.conv2d2", "big_resnet_deep_studiogan.GenBlock.bn3", "big_resnet_deep_studiogan.GenBlock.conv2d3", "big_resnet_deep_studiogan.GenBlock.bn4", "big_resnet_deep_studiogan.GenBlock.conv2d4", "big_resnet_deep_studiogan.GenBlock.conv2d0", "big_resnet_deep_studiogan.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet_deep_studiogan.GenBlock.activation", "big_resnet_deep_studiogan.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "# upsample", "\n", "", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn3", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "bn4", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "conv2d4", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "# upsample", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.Generator.__init__": [[82, 157], ["torch.Module.__init__", "len", "MODULES.g_linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.batchnorm_2d", "utils.batchnorm_2d", "MODULES.g_conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "utils.init_weights", "utils.init_weights", "utils.embedding", "utils.embedding", "str", "str", "str", "MODULES.g_linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_linear", "big_resnet_deep_studiogan.GenBlock", "range", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "g_shared_dim", "=", "g_shared_dim", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "num_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "affine_input_dim", "=", "self", ".", "z_dim", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "g_shared_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "shared", "=", "ops", ".", "embedding", "(", "num_embeddings", "=", "self", ".", "num_classes", ",", "embedding_dim", "=", "self", ".", "g_shared_dim", ")", "\n", "\n", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "affine_input_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ",", "bias", "=", "True", ")", "\n", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "g_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "g_cond_mtd", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "upsample", "=", "True", "if", "g_index", "==", "(", "g_depth", "-", "1", ")", "else", "False", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "for", "g_index", "in", "range", "(", "g_depth", ")", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "ops", ".", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d5", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.Generator.forward": [[158, 190], ["big_resnet_deep_studiogan.Generator.linear0", "block.view", "enumerate", "big_resnet_deep_studiogan.Generator.bn4", "big_resnet_deep_studiogan.Generator.activation", "big_resnet_deep_studiogan.Generator.conv2d5", "big_resnet_deep_studiogan.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "affine_list.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "big_resnet_deep_studiogan.Generator.info_mix_linear", "big_resnet_deep_studiogan.Generator.shared", "isinstance", "affine_list.append", "block", "block", "big_resnet_deep_studiogan.Generator.info_proj_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "if", "shared_label", "is", "None", ":", "\n", "                    ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "affine_list", ".", "append", "(", "shared_label", ")", "\n", "", "if", "len", "(", "affine_list", ")", ">", "0", ":", "\n", "                ", "z", "=", "torch", ".", "cat", "(", "affine_list", "+", "[", "z", "]", ",", "1", ")", "\n", "\n", "", "affine", "=", "z", "\n", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affine", ")", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.DiscBlock.__init__": [[193, 232], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "MODULES", ",", "optblock", ",", "downsample", "=", "True", ",", "channel_ratio", "=", "4", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optblock", "=", "optblock", "\n", "self", ".", "downsample", "=", "downsample", "\n", "hidden_channels", "=", "out_channels", "//", "channel_ratio", "\n", "self", ".", "ch_mismatch", "=", "True", "if", "(", "in_channels", "!=", "out_channels", ")", "else", "False", "\n", "if", "self", ".", "optblock", ":", "assert", "self", ".", "downsample", "and", "self", ".", "ch_mismatch", ",", "\"downsample and ch_mismatch should be True.\"", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d3", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "conv2d4", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n", "if", "self", ".", "ch_mismatch", "or", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.DiscBlock.forward": [[233, 252], ["big_resnet_deep_studiogan.DiscBlock.conv2d1", "big_resnet_deep_studiogan.DiscBlock.conv2d2", "big_resnet_deep_studiogan.DiscBlock.conv2d3", "big_resnet_deep_studiogan.DiscBlock.conv2d4", "big_resnet_deep_studiogan.DiscBlock.activation", "big_resnet_deep_studiogan.DiscBlock.activation", "big_resnet_deep_studiogan.DiscBlock.activation", "big_resnet_deep_studiogan.DiscBlock.average_pooling", "big_resnet_deep_studiogan.DiscBlock.activation", "big_resnet_deep_studiogan.DiscBlock.average_pooling", "big_resnet_deep_studiogan.DiscBlock.conv2d0", "big_resnet_deep_studiogan.DiscBlock.conv2d0", "big_resnet_deep_studiogan.DiscBlock.average_pooling"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "conv2d3", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv2d4", "(", "self", ".", "activation", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "optblock", ":", "\n", "            ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "                ", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                    ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.Discriminator.__init__": [[255, 356], ["torch.Module.__init__", "MODULES.d_conv2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "utils.init_weights", "utils.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "big_resnet_deep_studiogan.DiscBlock", "range", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_embedding", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "apply_d_sn", ",", "apply_attn", ",", "attn_d_loc", ",", "d_cond_mtd", ",", "aux_cls_type", ",", "d_embed_dim", ",", "normalize_d_embed", ",", "\n", "num_classes", ",", "d_init", ",", "d_depth", ",", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "\n", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_down", "=", "{", "\n", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "\n", "}", "\n", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "input_conv", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "self", ".", "in_dims", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", "if", "d_index", "==", "0", "else", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "optblock", "=", "index", "==", "0", "and", "d_index", "==", "0", ",", "\n", "downsample", "=", "True", "if", "down", "[", "index", "]", "and", "d_index", "==", "0", "else", "False", ")", "\n", "]", "for", "d_index", "in", "range", "(", "d_depth", ")", "]", "\n", "\n", "if", "(", "index", "+", "1", ")", "in", "attn_d_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "False", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "# linear layer for adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", "+", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "d_init", ":", "\n", "            ", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "d_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet_deep_studiogan.Discriminator.forward": [[357, 436], ["big_resnet_deep_studiogan.Discriminator.input_conv", "enumerate", "big_resnet_deep_studiogan.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "big_resnet_deep_studiogan.Discriminator.linear1", "big_resnet_deep_studiogan.Discriminator.info_discrete_linear", "big_resnet_deep_studiogan.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "big_resnet_deep_studiogan.Discriminator.linear2", "block", "big_resnet_deep_studiogan.Discriminator.info_conti_var_linear", "big_resnet_deep_studiogan.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet_deep_studiogan.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet_deep_studiogan.Discriminator.linear2", "big_resnet_deep_studiogan.Discriminator.embedding", "big_resnet_deep_studiogan.Discriminator.linear_mi.parameters", "big_resnet_deep_studiogan.Discriminator.linear_mi", "big_resnet_deep_studiogan.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet_deep_studiogan.Discriminator.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "h", "=", "self", ".", "input_conv", "(", "x", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "bottom_h", ",", "bottom_w", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "# adversarial training", "\n", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                ", "if", "adc_fake", ":", "\n", "                    ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "*", "2", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "                ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "                ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                    ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                            ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                    ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.GenBlock.__init__": [[16, 31], ["torch.Module.__init__", "MODULES.g_deconv2d", "MODULES.g_bn", "MODULES.g_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "g_info_injection", ",", "affine_input_dim", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "g_info_injection", "=", "g_info_injection", "\n", "\n", "self", ".", "deconv0", "=", "MODULES", ".", "g_deconv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "self", ".", "bn0", "=", "MODULES", ".", "g_bn", "(", "in_features", "=", "out_channels", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "bn0", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "out_channels", ",", "MODULES", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.GenBlock.forward": [[32, 40], ["deep_conv.GenBlock.deconv0", "deep_conv.GenBlock.activation", "deep_conv.GenBlock.bn0", "deep_conv.GenBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "x", "=", "self", ".", "deconv0", "(", "x", ")", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ",", "affine", ")", "\n", "", "out", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.Generator.__init__": [[43, 95], ["torch.Module.__init__", "MODULES.g_linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "utils.init_weights", "utils.init_weights", "len", "MODULES.g_linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_linear", "deep_conv.GenBlock", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dims", "=", "[", "512", ",", "256", ",", "128", "]", "\n", "self", ".", "out_dims", "=", "[", "256", ",", "128", ",", "64", "]", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "affine_input_dim", "=", "0", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "self", ".", "g_info_injection", "=", "self", ".", "MODEL", ".", "g_info_injection", "\n", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "z_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", "and", "self", ".", "g_cond_mtd", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "num_classes", "\n", "\n", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "4", "*", "4", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "self", ".", "g_cond_mtd", ",", "\n", "g_info_injection", "=", "self", ".", "g_info_injection", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "conv4", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.Generator.forward": [[96, 127], ["torch.one_hot().to", "torch.one_hot().to", "torch.one_hot().to", "deep_conv.Generator.linear0", "block.view", "enumerate", "deep_conv.Generator.conv4", "deep_conv.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "affine_list.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.one_hot", "torch.one_hot", "torch.one_hot", "deep_conv.Generator.info_mix_linear", "isinstance", "affine_list.append", "block", "block", "deep_conv.Generator.info_proj_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "label", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "affine_list", ".", "append", "(", "label", ")", "\n", "", "if", "len", "(", "affine_list", ")", ">", "0", ":", "\n", "                ", "affines", "=", "torch", ".", "cat", "(", "affine_list", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "affines", "=", "None", "\n", "\n", "", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "4", ",", "4", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affines", ")", "\n", "\n", "", "", "", "act", "=", "self", ".", "conv4", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.DiscBlock.__init__": [[130, 142], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_bn", "MODULES.d_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "\n", "self", ".", "conv0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn0", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.DiscBlock.forward": [[143, 154], ["deep_conv.DiscBlock.conv0", "deep_conv.DiscBlock.activation", "deep_conv.DiscBlock.conv1", "deep_conv.DiscBlock.activation", "deep_conv.DiscBlock.bn0", "deep_conv.DiscBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "out", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.Discriminator.__init__": [[157, 232], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_conv2d", "len", "MODULES.d_bn", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "utils.init_weights", "utils.init_weights", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "deep_conv.DiscBlock", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_embedding", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "apply_d_sn", ",", "apply_attn", ",", "attn_d_loc", ",", "d_cond_mtd", ",", "aux_cls_type", ",", "d_embed_dim", ",", "normalize_d_embed", ",", "\n", "num_classes", ",", "d_init", ",", "d_depth", ",", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dims", "=", "[", "3", "]", "+", "[", "64", ",", "128", "]", "\n", "self", ".", "out_dims", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "apply_d_sn", "=", "self", ".", "apply_d_sn", ",", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_d_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "False", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "self", ".", "conv1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "512", ")", "\n", "\n", "# linear layer for adversarial training", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", "+", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "512", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "512", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "d_init", ":", "\n", "            ", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "d_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.deep_conv.Discriminator.forward": [[233, 315], ["enumerate", "deep_conv.Discriminator.conv1", "deep_conv.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "deep_conv.Discriminator.bn1", "deep_conv.Discriminator.linear1", "deep_conv.Discriminator.info_discrete_linear", "deep_conv.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "deep_conv.Discriminator.linear2", "block", "deep_conv.Discriminator.info_conti_var_linear", "deep_conv.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "torch.normalize", "deep_conv.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "deep_conv.Discriminator.linear2", "deep_conv.Discriminator.embedding", "deep_conv.Discriminator.linear_mi.parameters", "deep_conv.Discriminator.linear_mi", "deep_conv.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "deep_conv.Discriminator.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "h", "=", "self", ".", "conv1", "(", "h", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "                ", "h", "=", "self", ".", "bn1", "(", "h", ")", "\n", "", "bottom_h", ",", "bottom_w", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "# adversarial training", "\n", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                ", "if", "adc_fake", ":", "\n", "                    ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "*", "2", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "                ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "                ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                    ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                            ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                    ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.GenBlock.__init__": [[16, 34], ["torch.Module.__init__", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "g_info_injection", ",", "affine_input_dim", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "g_info_injection", "=", "g_info_injection", "\n", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "in_features", "=", "out_channels", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "in_channels", ",", "MODULES", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "out_channels", ",", "MODULES", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.GenBlock.forward": [[35, 60], ["resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet.GenBlock.conv2d1", "resnet.GenBlock.activation", "resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "resnet.GenBlock.conv2d0", "resnet.GenBlock.bn1", "resnet.GenBlock.bn2", "resnet.GenBlock.bn1", "resnet.GenBlock.bn2"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.Generator.__init__": [[63, 136], ["torch.Module.__init__", "len", "MODULES.g_linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.batchnorm_2d", "utils.batchnorm_2d", "MODULES.g_conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "utils.init_weights", "utils.init_weights", "str", "str", "str", "MODULES.g_linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_linear", "resnet.GenBlock", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "num_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "affine_input_dim", "=", "0", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "self", ".", "g_info_injection", "=", "self", ".", "MODEL", ".", "g_info_injection", "\n", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "z_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ",", "bias", "=", "True", ")", "\n", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", "and", "self", ".", "g_cond_mtd", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "num_classes", "\n", "\n", "", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "self", ".", "g_cond_mtd", ",", "\n", "g_info_injection", "=", "self", ".", "g_info_injection", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "ops", ".", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d5", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.Generator.forward": [[137, 170], ["torch.one_hot().to", "torch.one_hot().to", "torch.one_hot().to", "resnet.Generator.linear0", "block.view", "enumerate", "resnet.Generator.bn4", "resnet.Generator.activation", "resnet.Generator.conv2d5", "resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "affine_list.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.one_hot", "torch.one_hot", "torch.one_hot", "resnet.Generator.info_mix_linear", "isinstance", "affine_list.append", "block", "block", "resnet.Generator.info_proj_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "label", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "affine_list", ".", "append", "(", "label", ")", "\n", "", "if", "len", "(", "affine_list", ")", ">", "0", ":", "\n", "                ", "affines", "=", "torch", ".", "cat", "(", "affine_list", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "affines", "=", "None", "\n", "\n", "", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affines", ")", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.DiscOptBlock.__init__": [[173, 188], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "MODULES.d_bn", "MODULES.d_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn0", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.DiscOptBlock.forward": [[189, 205], ["resnet.DiscOptBlock.conv2d1", "resnet.DiscOptBlock.activation", "resnet.DiscOptBlock.conv2d2", "resnet.DiscOptBlock.average_pooling", "resnet.DiscOptBlock.average_pooling", "resnet.DiscOptBlock.conv2d0", "resnet.DiscOptBlock.bn1", "resnet.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.DiscBlock.__init__": [[208, 232], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "MODULES.d_conv2d", "MODULES.d_bn", "MODULES.d_bn", "MODULES.d_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ",", "downsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "            ", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "not", "apply_d_sn", ":", "\n", "                ", "self", ".", "bn0", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "\n", "", "", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.DiscBlock.forward": [[233, 255], ["resnet.DiscBlock.activation", "resnet.DiscBlock.conv2d1", "resnet.DiscBlock.activation", "resnet.DiscBlock.conv2d2", "resnet.DiscBlock.bn1", "resnet.DiscBlock.bn2", "resnet.DiscBlock.average_pooling", "resnet.DiscBlock.conv2d0", "resnet.DiscBlock.bn0", "resnet.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "            ", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "                ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.Discriminator.__init__": [[258, 362], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "utils.init_weights", "utils.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_embedding", "resnet.DiscOptBlock", "resnet.DiscBlock", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "apply_d_sn", ",", "apply_attn", ",", "attn_d_loc", ",", "d_cond_mtd", ",", "aux_cls_type", ",", "d_embed_dim", ",", "normalize_d_embed", ",", "\n", "num_classes", ",", "d_init", ",", "d_depth", ",", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "\n", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_down", "=", "{", "\n", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "\n", "}", "\n", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "apply_d_sn", "=", "apply_d_sn", ",", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "apply_d_sn", "=", "apply_d_sn", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "\n", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "in", "attn_d_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "False", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "# linear layer for adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", "+", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "d_init", ":", "\n", "            ", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "d_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.resnet.Discriminator.forward": [[363, 442], ["enumerate", "resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "resnet.Discriminator.linear1", "resnet.Discriminator.info_discrete_linear", "resnet.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "resnet.Discriminator.linear2", "block", "resnet.Discriminator.info_conti_var_linear", "resnet.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "torch.normalize", "resnet.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "resnet.Discriminator.linear2", "resnet.Discriminator.embedding", "resnet.Discriminator.linear_mi.parameters", "resnet.Discriminator.linear_mi", "resnet.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "resnet.Discriminator.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "bottom_h", ",", "bottom_w", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "# adversarial training", "\n", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                ", "if", "adc_fake", ":", "\n", "                    ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "*", "2", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "                ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "                ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                    ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                            ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                    ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.FullyConnectedLayer.__init__": [[68, 86], ["super().__init__", "torch.nn.Parameter", "numpy.broadcast_to", "numpy.asarray", "torch.nn.Parameter", "numpy.sqrt", "torch.randn", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_features", ",", "# Number of input features.", "\n", "out_features", ",", "# Number of output features.", "\n", "activation", "=", "'linear'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "bias", "=", "True", ",", "# Apply additive bias before the activation function?", "\n", "lr_multiplier", "=", "1", ",", "# Learning rate multiplier.", "\n", "weight_init", "=", "1", ",", "# Initial standard deviation of the weight tensor.", "\n", "bias_init", "=", "0", ",", "# Initial value of the additive bias.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_features", ",", "in_features", "]", ")", "*", "(", "weight_init", "/", "lr_multiplier", ")", ")", "\n", "bias_init", "=", "np", ".", "broadcast_to", "(", "np", ".", "asarray", "(", "bias_init", ",", "dtype", "=", "np", ".", "float32", ")", ",", "[", "out_features", "]", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "bias_init", "/", "lr_multiplier", ")", ")", "if", "bias", "else", "None", "\n", "self", ".", "weight_gain", "=", "lr_multiplier", "/", "np", ".", "sqrt", "(", "in_features", ")", "\n", "self", ".", "bias_gain", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.FullyConnectedLayer.forward": [[87, 100], ["stylegan3.FullyConnectedLayer.weight.to", "b.to.to.to", "torch.addmm", "utils.style_ops.bias_act.bias_act.matmul", "utils.style_ops.bias_act.bias_act", "b.to.to.unsqueeze", "w.t", "w.t"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "to", "(", "x", ".", "dtype", ")", "*", "self", ".", "weight_gain", "\n", "b", "=", "self", ".", "bias", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "b", "=", "b", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "self", ".", "bias_gain", "!=", "1", ":", "\n", "                ", "b", "=", "b", "*", "self", ".", "bias_gain", "\n", "", "", "if", "self", ".", "activation", "==", "'linear'", "and", "b", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "addmm", "(", "b", ".", "unsqueeze", "(", "0", ")", ",", "x", ",", "w", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "matmul", "(", "w", ".", "t", "(", ")", ")", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "b", ",", "act", "=", "self", ".", "activation", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.FullyConnectedLayer.extra_repr": [[101, 103], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'in_features={self.in_features:d}, out_features={self.out_features:d}, activation={self.activation:s}'", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.MappingNetwork.__init__": [[107, 131], ["super().__init__", "zip", "stylegan3.MappingNetwork.register_buffer", "stylegan3.FullyConnectedLayer", "range", "stylegan3.FullyConnectedLayer", "setattr", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality, 0 = no labels.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "num_ws", ",", "# Number of intermediate latents to output.", "\n", "num_layers", "=", "2", ",", "# Number of mapping layers.", "\n", "lr_multiplier", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "w_avg_beta", "=", "0.998", ",", "# Decay for tracking the moving average of W during training.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "num_ws", "=", "num_ws", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_avg_beta", "=", "w_avg_beta", "\n", "\n", "# Construct layers.", "\n", "self", ".", "embed", "=", "FullyConnectedLayer", "(", "self", ".", "c_dim", ",", "self", ".", "w_dim", ")", "if", "self", ".", "c_dim", ">", "0", "else", "None", "\n", "features", "=", "[", "self", ".", "z_dim", "+", "(", "self", ".", "w_dim", "if", "self", ".", "c_dim", ">", "0", "else", "0", ")", "]", "+", "[", "self", ".", "w_dim", "]", "*", "self", ".", "num_layers", "\n", "for", "idx", ",", "in_features", ",", "out_features", "in", "zip", "(", "range", "(", "num_layers", ")", ",", "features", "[", ":", "-", "1", "]", ",", "features", "[", "1", ":", "]", ")", ":", "\n", "            ", "layer", "=", "FullyConnectedLayer", "(", "in_features", ",", "out_features", ",", "activation", "=", "'lrelu'", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f'fc{idx}'", ",", "layer", ")", "\n", "", "self", ".", "register_buffer", "(", "'w_avg'", ",", "torch", ".", "zeros", "(", "[", "w_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.MappingNetwork.forward": [[132, 159], ["utils.assert_shape", "z.to", "range", "x.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "utils.assert_shape", "stylegan3.MappingNetwork.embed", "stylegan3.MappingNetwork.w_avg.copy_", "stylegan3.MappingNetwork.w_avg.lerp", "c.to", "torch.cat", "getattr", "x.unsqueeze().repeat.unsqueeze().repeat.detach().mean().lerp", "x.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "x.unsqueeze().repeat.unsqueeze().repeat.square().mean", "x.unsqueeze().repeat.unsqueeze().repeat.detach().mean", "stylegan3.MappingNetwork.square().mean", "x.unsqueeze().repeat.unsqueeze().repeat.square", "x.unsqueeze().repeat.unsqueeze().repeat.detach", "stylegan3.MappingNetwork.square"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "update_emas", "=", "False", ")", ":", "\n", "        ", "misc", ".", "assert_shape", "(", "z", ",", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "if", "truncation_cutoff", "is", "None", ":", "\n", "            ", "truncation_cutoff", "=", "self", ".", "num_ws", "\n", "\n", "# Embed, normalize, and concatenate inputs.", "\n", "", "x", "=", "z", ".", "to", "(", "torch", ".", "float32", ")", "\n", "x", "=", "x", "*", "(", "x", ".", "square", "(", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", ".", "rsqrt", "(", ")", "\n", "if", "self", ".", "c_dim", ">", "0", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "c", ",", "[", "None", ",", "self", ".", "c_dim", "]", ")", "\n", "y", "=", "self", ".", "embed", "(", "c", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "y", "=", "y", "*", "(", "y", ".", "square", "(", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", ".", "rsqrt", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "if", "x", "is", "not", "None", "else", "y", "\n", "\n", "# Execute layers.", "\n", "", "for", "idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "f'fc{idx}'", ")", "(", "x", ")", "\n", "\n", "# Update moving average of W.", "\n", "", "if", "update_emas", ":", "\n", "            ", "self", ".", "w_avg", ".", "copy_", "(", "x", ".", "detach", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "lerp", "(", "self", ".", "w_avg", ",", "self", ".", "w_avg_beta", ")", ")", "\n", "\n", "# Broadcast and apply truncation.", "\n", "", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "self", ".", "num_ws", ",", "1", "]", ")", "\n", "if", "truncation_psi", "!=", "1", ":", "\n", "            ", "x", "[", ":", ",", ":", "truncation_cutoff", "]", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", "[", ":", ",", ":", "truncation_cutoff", "]", ",", "truncation_psi", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.MappingNetwork.extra_repr": [[160, 162], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'z_dim={self.z_dim:d}, c_dim={self.c_dim:d}, w_dim={self.w_dim:d}, num_ws={self.num_ws:d}'", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisInput.__init__": [[166, 193], ["super().__init__", "numpy.broadcast_to", "torch.randn", "torch.randn.square().sum().sqrt", "torch.nn.Parameter", "stylegan3.FullyConnectedLayer", "stylegan3.SynthesisInput.register_buffer", "stylegan3.SynthesisInput.register_buffer", "stylegan3.SynthesisInput.register_buffer", "numpy.asarray", "torch.randn.square().sum().sqrt.square().exp().pow", "torch.rand", "torch.randn", "torch.eye", "torch.randn.square().sum", "torch.randn.square().sum().sqrt.square().exp", "torch.randn.square", "torch.randn.square().sum().sqrt.square"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "channels", ",", "# Number of output channels.", "\n", "size", ",", "# Output spatial size: int or [width, height].", "\n", "sampling_rate", ",", "# Output sampling rate.", "\n", "bandwidth", ",", "# Output bandwidth.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "size", "=", "np", ".", "broadcast_to", "(", "np", ".", "asarray", "(", "size", ")", ",", "[", "2", "]", ")", "\n", "self", ".", "sampling_rate", "=", "sampling_rate", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "\n", "# Draw random frequencies from uniform 2D disc.", "\n", "freqs", "=", "torch", ".", "randn", "(", "[", "self", ".", "channels", ",", "2", "]", ")", "\n", "radii", "=", "freqs", ".", "square", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "freqs", "/=", "radii", "*", "radii", ".", "square", "(", ")", ".", "exp", "(", ")", ".", "pow", "(", "0.25", ")", "\n", "freqs", "*=", "bandwidth", "\n", "phases", "=", "torch", ".", "rand", "(", "[", "self", ".", "channels", "]", ")", "-", "0.5", "\n", "\n", "# Setup parameters and buffers.", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "self", ".", "channels", ",", "self", ".", "channels", "]", ")", ")", "\n", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "4", ",", "weight_init", "=", "0", ",", "bias_init", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "register_buffer", "(", "'transform'", ",", "torch", ".", "eye", "(", "3", ",", "3", ")", ")", "# User-specified inverse transform wrt. resulting image.", "\n", "self", ".", "register_buffer", "(", "'freqs'", ",", "freqs", ")", "\n", "self", ".", "register_buffer", "(", "'phases'", ",", "phases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisInput.forward": [[194, 240], ["stylegan3.SynthesisInput.transform.unsqueeze", "stylegan3.SynthesisInput.freqs.unsqueeze", "stylegan3.SynthesisInput.phases.unsqueeze", "stylegan3.SynthesisInput.affine", "torch.eye().unsqueeze().repeat", "torch.eye().unsqueeze().repeat", "torch.eye", "torch.nn.functional.affine_grid", "torch.sin", "x.permute.permute.permute", "utils.assert_shape", "t[].norm", "torch.eye.unsqueeze", "stylegan3.SynthesisInput.unsqueeze().unsqueeze", "amplitudes.unsqueeze().unsqueeze", "numpy.sqrt", "weight.t", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "int", "int", "torch.nn.functional.affine_grid.unsqueeze", "stylegan3.SynthesisInput.permute().unsqueeze().unsqueeze", "stylegan3.SynthesisInput.unsqueeze", "amplitudes.unsqueeze", "torch.eye", "torch.eye", "stylegan3.SynthesisInput.norm", "stylegan3.SynthesisInput.permute().unsqueeze", "stylegan3.SynthesisInput.permute"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "forward", "(", "self", ",", "w", ")", ":", "\n", "# Introduce batch dimension.", "\n", "        ", "transforms", "=", "self", ".", "transform", ".", "unsqueeze", "(", "0", ")", "# [batch, row, col]", "\n", "freqs", "=", "self", ".", "freqs", ".", "unsqueeze", "(", "0", ")", "# [batch, channel, xy]", "\n", "phases", "=", "self", ".", "phases", ".", "unsqueeze", "(", "0", ")", "# [batch, channel]", "\n", "\n", "# Apply learned transformation.", "\n", "t", "=", "self", ".", "affine", "(", "w", ")", "# t = (r_c, r_s, t_x, t_y)", "\n", "t", "=", "t", "/", "t", "[", ":", ",", ":", "2", "]", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# t' = (r'_c, r'_s, t'_x, t'_y)", "\n", "m_r", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "w", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "w", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# Inverse rotation wrt. resulting image.", "\n", "m_r", "[", ":", ",", "0", ",", "0", "]", "=", "t", "[", ":", ",", "0", "]", "# r'_c", "\n", "m_r", "[", ":", ",", "0", ",", "1", "]", "=", "-", "t", "[", ":", ",", "1", "]", "# r'_s", "\n", "m_r", "[", ":", ",", "1", ",", "0", "]", "=", "t", "[", ":", ",", "1", "]", "# r'_s", "\n", "m_r", "[", ":", ",", "1", ",", "1", "]", "=", "t", "[", ":", ",", "0", "]", "# r'_c", "\n", "m_t", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "w", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "w", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "# Inverse translation wrt. resulting image.", "\n", "m_t", "[", ":", ",", "0", ",", "2", "]", "=", "-", "t", "[", ":", ",", "2", "]", "# t'_x", "\n", "m_t", "[", ":", ",", "1", ",", "2", "]", "=", "-", "t", "[", ":", ",", "3", "]", "# t'_y", "\n", "transforms", "=", "m_r", "@", "m_t", "@", "transforms", "# First rotate resulting image, then translate, and finally apply user-specified transform.", "\n", "\n", "# Transform frequencies.", "\n", "phases", "=", "phases", "+", "(", "freqs", "@", "transforms", "[", ":", ",", ":", "2", ",", "2", ":", "]", ")", ".", "squeeze", "(", "2", ")", "\n", "freqs", "=", "freqs", "@", "transforms", "[", ":", ",", ":", "2", ",", ":", "2", "]", "\n", "\n", "# Dampen out-of-band frequencies that may occur due to the user-specified transform.", "\n", "amplitudes", "=", "(", "1", "-", "(", "freqs", ".", "norm", "(", "dim", "=", "2", ")", "-", "self", ".", "bandwidth", ")", "/", "(", "self", ".", "sampling_rate", "/", "2", "-", "self", ".", "bandwidth", ")", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "# Construct sampling grid.", "\n", "theta", "=", "torch", ".", "eye", "(", "2", ",", "3", ",", "device", "=", "w", ".", "device", ")", "\n", "theta", "[", "0", ",", "0", "]", "=", "0.5", "*", "self", ".", "size", "[", "0", "]", "/", "self", ".", "sampling_rate", "\n", "theta", "[", "1", ",", "1", "]", "=", "0.5", "*", "self", ".", "size", "[", "1", "]", "/", "self", ".", "sampling_rate", "\n", "grids", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", ".", "unsqueeze", "(", "0", ")", ",", "[", "1", ",", "1", ",", "self", ".", "size", "[", "1", "]", ",", "self", ".", "size", "[", "0", "]", "]", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Compute Fourier features.", "\n", "x", "=", "(", "grids", ".", "unsqueeze", "(", "3", ")", "@", "freqs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "3", ")", "# [batch, height, width, channel]", "\n", "x", "=", "x", "+", "phases", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "torch", ".", "sin", "(", "x", "*", "(", "np", ".", "pi", "*", "2", ")", ")", "\n", "x", "=", "x", "*", "amplitudes", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Apply trainable mapping.", "\n", "weight", "=", "self", ".", "weight", "/", "np", ".", "sqrt", "(", "self", ".", "channels", ")", "\n", "x", "=", "x", "@", "weight", ".", "t", "(", ")", "\n", "\n", "# Ensure correct shape.", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [batch, channel, height, width]", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "w", ".", "shape", "[", "0", "]", ",", "self", ".", "channels", ",", "int", "(", "self", ".", "size", "[", "1", "]", ")", ",", "int", "(", "self", ".", "size", "[", "0", "]", ")", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisInput.extra_repr": [[241, 245], ["list"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "\n", "f'w_dim={self.w_dim:d}, channels={self.channels:d}, size={list(self.size)},'", ",", "\n", "f'sampling_rate={self.sampling_rate:g}, bandwidth={self.bandwidth:g}'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.__init__": [[249, 323], ["super().__init__", "numpy.broadcast_to", "numpy.broadcast_to", "stylegan3.FullyConnectedLayer", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan3.SynthesisLayer.register_buffer", "int", "stylegan3.SynthesisLayer.register_buffer", "int", "stylegan3.SynthesisLayer.register_buffer", "numpy.asarray", "numpy.asarray", "max", "torch.randn", "torch.zeros", "torch.ones", "numpy.rint", "stylegan3.SynthesisLayer.design_lowpass_filter", "numpy.rint", "stylegan3.SynthesisLayer.design_lowpass_filter", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.design_lowpass_filter", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.design_lowpass_filter"], ["    ", "def", "__init__", "(", "self", ",", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "is_torgb", ",", "# Is this the final ToRGB layer?", "\n", "is_critically_sampled", ",", "# Does this layer use critical sampling?", "\n", "use_fp16", ",", "# Does this layer use FP16?", "\n", "\n", "# Input & output specifications.", "\n", "in_channels", ",", "# Number of input channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "in_size", ",", "# Input spatial size: int or [width, height].", "\n", "out_size", ",", "# Output spatial size: int or [width, height].", "\n", "in_sampling_rate", ",", "# Input sampling rate (s).", "\n", "out_sampling_rate", ",", "# Output sampling rate (s).", "\n", "in_cutoff", ",", "# Input cutoff frequency (f_c).", "\n", "out_cutoff", ",", "# Output cutoff frequency (f_c).", "\n", "in_half_width", ",", "# Input transition band half-width (f_h).", "\n", "out_half_width", ",", "# Output Transition band half-width (f_h).", "\n", "\n", "# Hyperparameters.", "\n", "conv_kernel", "=", "3", ",", "# Convolution kernel size. Ignored for final the ToRGB layer.", "\n", "filter_size", "=", "6", ",", "# Low-pass filter size relative to the lower resolution when up/downsampling.", "\n", "lrelu_upsampling", "=", "2", ",", "# Relative sampling rate for leaky ReLU. Ignored for final the ToRGB layer.", "\n", "use_radial_filters", "=", "False", ",", "# Use radially symmetric downsampling filter? Ignored for critically sampled layers.", "\n", "conv_clamp", "=", "256", ",", "# Clamp the output to [-X, +X], None = disable clamping.", "\n", "magnitude_ema_beta", "=", "0.999", ",", "# Decay rate for the moving average of input magnitudes.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "is_torgb", "=", "is_torgb", "\n", "self", ".", "is_critically_sampled", "=", "is_critically_sampled", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "in_size", "=", "np", ".", "broadcast_to", "(", "np", ".", "asarray", "(", "in_size", ")", ",", "[", "2", "]", ")", "\n", "self", ".", "out_size", "=", "np", ".", "broadcast_to", "(", "np", ".", "asarray", "(", "out_size", ")", ",", "[", "2", "]", ")", "\n", "self", ".", "in_sampling_rate", "=", "in_sampling_rate", "\n", "self", ".", "out_sampling_rate", "=", "out_sampling_rate", "\n", "self", ".", "tmp_sampling_rate", "=", "max", "(", "in_sampling_rate", ",", "out_sampling_rate", ")", "*", "(", "1", "if", "is_torgb", "else", "lrelu_upsampling", ")", "\n", "self", ".", "in_cutoff", "=", "in_cutoff", "\n", "self", ".", "out_cutoff", "=", "out_cutoff", "\n", "self", ".", "in_half_width", "=", "in_half_width", "\n", "self", ".", "out_half_width", "=", "out_half_width", "\n", "self", ".", "conv_kernel", "=", "1", "if", "is_torgb", "else", "conv_kernel", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "magnitude_ema_beta", "=", "magnitude_ema_beta", "\n", "\n", "# Setup parameters and buffers.", "\n", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "self", ".", "w_dim", ",", "self", ".", "in_channels", ",", "bias_init", "=", "1", ")", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "conv_kernel", ",", "self", ".", "conv_kernel", "]", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "self", ".", "out_channels", "]", ")", ")", "\n", "self", ".", "register_buffer", "(", "'magnitude_ema'", ",", "torch", ".", "ones", "(", "[", "]", ")", ")", "\n", "\n", "# Design upsampling filter.", "\n", "self", ".", "up_factor", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "tmp_sampling_rate", "/", "self", ".", "in_sampling_rate", ")", ")", "\n", "assert", "self", ".", "in_sampling_rate", "*", "self", ".", "up_factor", "==", "self", ".", "tmp_sampling_rate", "\n", "self", ".", "up_taps", "=", "filter_size", "*", "self", ".", "up_factor", "if", "self", ".", "up_factor", ">", "1", "and", "not", "self", ".", "is_torgb", "else", "1", "\n", "self", ".", "register_buffer", "(", "'up_filter'", ",", "self", ".", "design_lowpass_filter", "(", "\n", "numtaps", "=", "self", ".", "up_taps", ",", "cutoff", "=", "self", ".", "in_cutoff", ",", "width", "=", "self", ".", "in_half_width", "*", "2", ",", "fs", "=", "self", ".", "tmp_sampling_rate", ")", ")", "\n", "\n", "# Design downsampling filter.", "\n", "self", ".", "down_factor", "=", "int", "(", "np", ".", "rint", "(", "self", ".", "tmp_sampling_rate", "/", "self", ".", "out_sampling_rate", ")", ")", "\n", "assert", "self", ".", "out_sampling_rate", "*", "self", ".", "down_factor", "==", "self", ".", "tmp_sampling_rate", "\n", "self", ".", "down_taps", "=", "filter_size", "*", "self", ".", "down_factor", "if", "self", ".", "down_factor", ">", "1", "and", "not", "self", ".", "is_torgb", "else", "1", "\n", "self", ".", "down_radial", "=", "use_radial_filters", "and", "not", "self", ".", "is_critically_sampled", "\n", "self", ".", "register_buffer", "(", "'down_filter'", ",", "self", ".", "design_lowpass_filter", "(", "\n", "numtaps", "=", "self", ".", "down_taps", ",", "cutoff", "=", "self", ".", "out_cutoff", ",", "width", "=", "self", ".", "out_half_width", "*", "2", ",", "fs", "=", "self", ".", "tmp_sampling_rate", ",", "radial", "=", "self", ".", "down_radial", ")", ")", "\n", "\n", "# Compute padding.", "\n", "pad_total", "=", "(", "self", ".", "out_size", "-", "1", ")", "*", "self", ".", "down_factor", "+", "1", "# Desired output size before downsampling.", "\n", "pad_total", "-=", "(", "self", ".", "in_size", "+", "self", ".", "conv_kernel", "-", "1", ")", "*", "self", ".", "up_factor", "# Input size after upsampling.", "\n", "pad_total", "+=", "self", ".", "up_taps", "+", "self", ".", "down_taps", "-", "2", "# Size reduction caused by the filters.", "\n", "pad_lo", "=", "(", "pad_total", "+", "self", ".", "up_factor", ")", "//", "2", "# Shift sample locations according to the symmetric interpretation (Appendix C.3).", "\n", "pad_hi", "=", "pad_total", "-", "pad_lo", "\n", "self", ".", "padding", "=", "[", "int", "(", "pad_lo", "[", "0", "]", ")", ",", "int", "(", "pad_hi", "[", "0", "]", ")", ",", "int", "(", "pad_lo", "[", "1", "]", ")", ",", "int", "(", "pad_hi", "[", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.forward": [[324, 357], ["utils.assert_shape", "utils.assert_shape", "stylegan3.SynthesisLayer.magnitude_ema.rsqrt", "stylegan3.SynthesisLayer.affine", "stylegan3.modulated_conv2d", "utils.style_ops.filtered_lrelu.filtered_lrelu", "utils.assert_shape", "numpy.sqrt", "int", "int", "torch.autograd.profiler.record_function", "utils.style_ops.filtered_lrelu.filtered_lrelu.detach().to().square().mean", "stylegan3.SynthesisLayer.magnitude_ema.copy_", "numpy.sqrt", "utils.style_ops.filtered_lrelu.filtered_lrelu.to", "stylegan3.SynthesisLayer.bias.to", "int", "int", "filtered_lrelu.filtered_lrelu.detach().to().square().mean.lerp", "utils.style_ops.filtered_lrelu.filtered_lrelu.detach().to().square", "utils.style_ops.filtered_lrelu.filtered_lrelu.detach().to", "utils.style_ops.filtered_lrelu.filtered_lrelu.detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.modulated_conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.filtered_lrelu.filtered_lrelu", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "noise_mode", "=", "'random'", ",", "force_fp32", "=", "False", ",", "update_emas", "=", "False", ")", ":", "\n", "        ", "assert", "noise_mode", "in", "[", "'random'", ",", "'const'", ",", "'none'", "]", "# unused", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "int", "(", "self", ".", "in_size", "[", "1", "]", ")", ",", "int", "(", "self", ".", "in_size", "[", "0", "]", ")", "]", ")", "\n", "misc", ".", "assert_shape", "(", "w", ",", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "w_dim", "]", ")", "\n", "\n", "# Track input magnitude.", "\n", "if", "update_emas", ":", "\n", "            ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "'update_magnitude_ema'", ")", ":", "\n", "                ", "magnitude_cur", "=", "x", ".", "detach", "(", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "square", "(", ")", ".", "mean", "(", ")", "\n", "self", ".", "magnitude_ema", ".", "copy_", "(", "magnitude_cur", ".", "lerp", "(", "self", ".", "magnitude_ema", ",", "self", ".", "magnitude_ema_beta", ")", ")", "\n", "", "", "input_gain", "=", "self", ".", "magnitude_ema", ".", "rsqrt", "(", ")", "\n", "\n", "# Execute affine layer.", "\n", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "if", "self", ".", "is_torgb", ":", "\n", "            ", "weight_gain", "=", "1", "/", "np", ".", "sqrt", "(", "self", ".", "in_channels", "*", "(", "self", ".", "conv_kernel", "**", "2", ")", ")", "\n", "styles", "=", "styles", "*", "weight_gain", "\n", "\n", "# Execute modulated conv2d.", "\n", "", "dtype", "=", "torch", ".", "float16", "if", "(", "self", ".", "use_fp16", "and", "not", "force_fp32", "and", "x", ".", "device", ".", "type", "==", "'cuda'", ")", "else", "torch", ".", "float32", "\n", "x", "=", "modulated_conv2d", "(", "x", "=", "x", ".", "to", "(", "dtype", ")", ",", "w", "=", "self", ".", "weight", ",", "s", "=", "styles", ",", "\n", "padding", "=", "self", ".", "conv_kernel", "-", "1", ",", "demodulate", "=", "(", "not", "self", ".", "is_torgb", ")", ",", "input_gain", "=", "input_gain", ")", "\n", "\n", "# Execute bias, filtered leaky ReLU, and clamping.", "\n", "gain", "=", "1", "if", "self", ".", "is_torgb", "else", "np", ".", "sqrt", "(", "2", ")", "\n", "slope", "=", "1", "if", "self", ".", "is_torgb", "else", "0.2", "\n", "x", "=", "filtered_lrelu", ".", "filtered_lrelu", "(", "x", "=", "x", ",", "fu", "=", "self", ".", "up_filter", ",", "fd", "=", "self", ".", "down_filter", ",", "b", "=", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", ",", "\n", "up", "=", "self", ".", "up_factor", ",", "down", "=", "self", ".", "down_factor", ",", "padding", "=", "self", ".", "padding", ",", "gain", "=", "gain", ",", "slope", "=", "slope", ",", "clamp", "=", "self", ".", "conv_clamp", ")", "\n", "\n", "# Ensure correct shape and dtype.", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "out_channels", ",", "int", "(", "self", ".", "out_size", "[", "1", "]", ")", ",", "int", "(", "self", ".", "out_size", "[", "0", "]", ")", "]", ")", "\n", "assert", "x", ".", "dtype", "==", "dtype", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.design_lowpass_filter": [[358, 380], ["numpy.hypot", "scipy.signal.kaiser_beta", "scipy.signal.kaiser_beta", "scipy.signal.kaiser_beta", "scipy.signal.kaiser_beta", "numpy.kaiser", "numpy.outer", "numpy.sum", "torch.as_tensor", "scipy.signal.firwin", "scipy.signal.firwin", "scipy.signal.firwin", "scipy.signal.firwin", "torch.as_tensor", "scipy.special.j1", "scipy.special.j1", "scipy.special.j1", "scipy.special.j1", "scipy.signal.kaiser_atten", "scipy.signal.kaiser_atten", "scipy.signal.kaiser_atten", "scipy.signal.kaiser_atten", "numpy.arange", "numpy.meshgrid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "design_lowpass_filter", "(", "numtaps", ",", "cutoff", ",", "width", ",", "fs", ",", "radial", "=", "False", ")", ":", "\n", "        ", "assert", "numtaps", ">=", "1", "\n", "\n", "# Identity filter.", "\n", "if", "numtaps", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "# Separable Kaiser low-pass filter.", "\n", "", "if", "not", "radial", ":", "\n", "            ", "f", "=", "scipy", ".", "signal", ".", "firwin", "(", "numtaps", "=", "numtaps", ",", "cutoff", "=", "cutoff", ",", "width", "=", "width", ",", "fs", "=", "fs", ")", "\n", "return", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Radially symmetric jinc-based filter.", "\n", "", "x", "=", "(", "np", ".", "arange", "(", "numtaps", ")", "-", "(", "numtaps", "-", "1", ")", "/", "2", ")", "/", "fs", "\n", "r", "=", "np", ".", "hypot", "(", "*", "np", ".", "meshgrid", "(", "x", ",", "x", ")", ")", "\n", "f", "=", "scipy", ".", "special", ".", "j1", "(", "2", "*", "cutoff", "*", "(", "np", ".", "pi", "*", "r", ")", ")", "/", "(", "np", ".", "pi", "*", "r", ")", "\n", "beta", "=", "scipy", ".", "signal", ".", "kaiser_beta", "(", "scipy", ".", "signal", ".", "kaiser_atten", "(", "numtaps", ",", "width", "/", "(", "fs", "/", "2", ")", ")", ")", "\n", "w", "=", "np", ".", "kaiser", "(", "numtaps", ",", "beta", ")", "\n", "f", "*=", "np", ".", "outer", "(", "w", ",", "w", ")", "\n", "f", "/=", "np", ".", "sum", "(", "f", ")", "\n", "return", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisLayer.extra_repr": [[381, 390], ["list", "list"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "\n", "f'w_dim={self.w_dim:d}, is_torgb={self.is_torgb},'", ",", "\n", "f'is_critically_sampled={self.is_critically_sampled}, use_fp16={self.use_fp16},'", ",", "\n", "f'in_sampling_rate={self.in_sampling_rate:g}, out_sampling_rate={self.out_sampling_rate:g},'", ",", "\n", "f'in_cutoff={self.in_cutoff:g}, out_cutoff={self.out_cutoff:g},'", ",", "\n", "f'in_half_width={self.in_half_width:g}, out_half_width={self.out_half_width:g},'", ",", "\n", "f'in_size={list(self.in_size)}, out_size={list(self.out_size)},'", ",", "\n", "f'in_channels={self.in_channels:d}, out_channels={self.out_channels:d}'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisNetwork.__init__": [[394, 457], ["super().__init__", "numpy.minimum", "numpy.exp2", "numpy.rint", "stylegan3.SynthesisInput", "range", "numpy.ceil", "numpy.maximum", "numpy.minimum", "max", "stylegan3.SynthesisLayer", "setattr", "stylegan3.SynthesisNetwork.layer_names.append", "numpy.arange", "numpy.log2", "int", "int", "numpy.minimum", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output image resolution.", "\n", "img_channels", ",", "# Number of color channels.", "\n", "channel_base", "=", "32768", ",", "# Overall multiplier for the number of channels.", "\n", "channel_max", "=", "512", ",", "# Maximum number of channels in any layer.", "\n", "num_layers", "=", "14", ",", "# Total number of layers, excluding Fourier features and ToRGB.", "\n", "num_critical", "=", "2", ",", "# Number of critically sampled layers at the end.", "\n", "first_cutoff", "=", "2", ",", "# Cutoff frequency of the first layer (f_{c,0}).", "\n", "first_stopband", "=", "2", "**", "2.1", ",", "# Minimum stopband of the first layer (f_{t,0}).", "\n", "last_stopband_rel", "=", "2", "**", "0.3", ",", "# Minimum stopband of the last layer, expressed relative to the cutoff.", "\n", "margin_size", "=", "10", ",", "# Number of additional pixels outside the image.", "\n", "output_scale", "=", "0.25", ",", "# Scale factor for the output image.", "\n", "num_fp16_res", "=", "4", ",", "# Use FP16 for the N highest resolutions.", "\n", "**", "layer_kwargs", ",", "# Arguments for SynthesisLayer.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "num_ws", "=", "num_layers", "+", "2", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_critical", "=", "num_critical", "\n", "self", ".", "margin_size", "=", "margin_size", "\n", "self", ".", "output_scale", "=", "output_scale", "\n", "self", ".", "num_fp16_res", "=", "num_fp16_res", "\n", "\n", "# Geometric progression of layer cutoffs and min. stopbands.", "\n", "last_cutoff", "=", "self", ".", "img_resolution", "/", "2", "# f_{c,N}", "\n", "last_stopband", "=", "last_cutoff", "*", "last_stopband_rel", "# f_{t,N}", "\n", "exponents", "=", "np", ".", "minimum", "(", "np", ".", "arange", "(", "self", ".", "num_layers", "+", "1", ")", "/", "(", "self", ".", "num_layers", "-", "self", ".", "num_critical", ")", ",", "1", ")", "\n", "cutoffs", "=", "first_cutoff", "*", "(", "last_cutoff", "/", "first_cutoff", ")", "**", "exponents", "# f_c[i]", "\n", "stopbands", "=", "first_stopband", "*", "(", "last_stopband", "/", "first_stopband", ")", "**", "exponents", "# f_t[i]", "\n", "\n", "# Compute remaining layer parameters.", "\n", "sampling_rates", "=", "np", ".", "exp2", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "np", ".", "minimum", "(", "stopbands", "*", "2", ",", "self", ".", "img_resolution", ")", ")", ")", ")", "# s[i]", "\n", "half_widths", "=", "np", ".", "maximum", "(", "stopbands", ",", "sampling_rates", "/", "2", ")", "-", "cutoffs", "# f_h[i]", "\n", "sizes", "=", "sampling_rates", "+", "self", ".", "margin_size", "*", "2", "\n", "sizes", "[", "-", "2", ":", "]", "=", "self", ".", "img_resolution", "\n", "channels", "=", "np", ".", "rint", "(", "np", ".", "minimum", "(", "(", "channel_base", "/", "2", ")", "/", "cutoffs", ",", "channel_max", ")", ")", "\n", "channels", "[", "-", "1", "]", "=", "self", ".", "img_channels", "\n", "\n", "# Construct layers.", "\n", "self", ".", "input", "=", "SynthesisInput", "(", "\n", "w_dim", "=", "self", ".", "w_dim", ",", "channels", "=", "int", "(", "channels", "[", "0", "]", ")", ",", "size", "=", "int", "(", "sizes", "[", "0", "]", ")", ",", "\n", "sampling_rate", "=", "sampling_rates", "[", "0", "]", ",", "bandwidth", "=", "cutoffs", "[", "0", "]", ")", "\n", "self", ".", "layer_names", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_layers", "+", "1", ")", ":", "\n", "            ", "prev", "=", "max", "(", "idx", "-", "1", ",", "0", ")", "\n", "is_torgb", "=", "(", "idx", "==", "self", ".", "num_layers", ")", "\n", "is_critically_sampled", "=", "(", "idx", ">=", "self", ".", "num_layers", "-", "self", ".", "num_critical", ")", "\n", "use_fp16", "=", "(", "sampling_rates", "[", "idx", "]", "*", "(", "2", "**", "self", ".", "num_fp16_res", ")", ">", "self", ".", "img_resolution", ")", "\n", "layer", "=", "SynthesisLayer", "(", "\n", "w_dim", "=", "self", ".", "w_dim", ",", "is_torgb", "=", "is_torgb", ",", "is_critically_sampled", "=", "is_critically_sampled", ",", "use_fp16", "=", "use_fp16", ",", "\n", "in_channels", "=", "int", "(", "channels", "[", "prev", "]", ")", ",", "out_channels", "=", "int", "(", "channels", "[", "idx", "]", ")", ",", "\n", "in_size", "=", "int", "(", "sizes", "[", "prev", "]", ")", ",", "out_size", "=", "int", "(", "sizes", "[", "idx", "]", ")", ",", "\n", "in_sampling_rate", "=", "int", "(", "sampling_rates", "[", "prev", "]", ")", ",", "out_sampling_rate", "=", "int", "(", "sampling_rates", "[", "idx", "]", ")", ",", "\n", "in_cutoff", "=", "cutoffs", "[", "prev", "]", ",", "out_cutoff", "=", "cutoffs", "[", "idx", "]", ",", "\n", "in_half_width", "=", "half_widths", "[", "prev", "]", ",", "out_half_width", "=", "half_widths", "[", "idx", "]", ",", "\n", "**", "layer_kwargs", ")", "\n", "name", "=", "f'L{idx}_{layer.out_size[0]}_{layer.out_channels}'", "\n", "setattr", "(", "self", ",", "name", ",", "layer", ")", "\n", "self", ".", "layer_names", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisNetwork.forward": [[458, 473], ["utils.assert_shape", "ws.to().unbind.to().unbind.to().unbind", "stylegan3.SynthesisNetwork.input", "zip", "utils.assert_shape", "x.to.to.to", "ws.to().unbind.to().unbind.to", "getattr"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "", "def", "forward", "(", "self", ",", "ws", ",", "**", "layer_kwargs", ")", ":", "\n", "        ", "misc", ".", "assert_shape", "(", "ws", ",", "[", "None", ",", "self", ".", "num_ws", ",", "self", ".", "w_dim", "]", ")", "\n", "ws", "=", "ws", ".", "to", "(", "torch", ".", "float32", ")", ".", "unbind", "(", "dim", "=", "1", ")", "\n", "\n", "# Execute layers.", "\n", "x", "=", "self", ".", "input", "(", "ws", "[", "0", "]", ")", "\n", "for", "name", ",", "w", "in", "zip", "(", "self", ".", "layer_names", ",", "ws", "[", "1", ":", "]", ")", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "w", ",", "**", "layer_kwargs", ")", "\n", "", "if", "self", ".", "output_scale", "!=", "1", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "output_scale", "\n", "\n", "# Ensure correct shape and dtype.", "\n", "", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "img_resolution", ",", "self", ".", "img_resolution", "]", ")", "\n", "x", "=", "x", ".", "to", "(", "torch", ".", "float32", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.SynthesisNetwork.extra_repr": [[474, 480], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "\n", "f'w_dim={self.w_dim:d}, num_ws={self.num_ws:d},'", ",", "\n", "f'img_resolution={self.img_resolution:d}, img_channels={self.img_channels:d},'", ",", "\n", "f'num_layers={self.num_layers:d}, num_critical={self.num_critical:d},'", ",", "\n", "f'margin_size={self.margin_size:d}, num_fp16_res={self.num_fp16_res:d}'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.Generator.__init__": [[484, 514], ["super().__init__", "stylegan3.SynthesisNetwork", "stylegan3.MappingNetwork"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output resolution.", "\n", "img_channels", ",", "# Number of output color channels.", "\n", "MODEL", ",", "# MODEL config required for infoGAN", "\n", "mapping_kwargs", "=", "{", "}", ",", "# Arguments for MappingNetwork.", "\n", "synthesis_kwargs", "=", "{", "}", ",", "# Arguments for SynthesisNetwork.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "\n", "z_extra_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "z_extra_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "z_extra_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "self", ".", "z_dim", "+=", "z_extra_dim", "\n", "\n", "", "self", ".", "synthesis", "=", "SynthesisNetwork", "(", "w_dim", "=", "w_dim", ",", "img_resolution", "=", "img_resolution", ",", "img_channels", "=", "img_channels", ",", "**", "synthesis_kwargs", ")", "\n", "self", ".", "num_ws", "=", "self", ".", "synthesis", ".", "num_ws", "\n", "self", ".", "mapping", "=", "MappingNetwork", "(", "z_dim", "=", "z_dim", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "w_dim", ",", "num_ws", "=", "self", ".", "num_ws", ",", "**", "mapping_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.Generator.forward": [[515, 519], ["stylegan3.Generator.mapping", "stylegan3.Generator.synthesis"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "eval", "=", "False", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "update_emas", "=", "False", ",", "**", "synthesis_kwargs", ")", ":", "\n", "        ", "ws", "=", "self", ".", "mapping", "(", "z", ",", "c", ",", "truncation_psi", "=", "truncation_psi", ",", "truncation_cutoff", "=", "truncation_cutoff", ",", "update_emas", "=", "update_emas", ")", "\n", "img", "=", "self", ".", "synthesis", "(", "ws", ",", "update_emas", "=", "update_emas", ",", "**", "synthesis_kwargs", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan3.modulated_conv2d": [[24, 64], ["utils.assert_shape", "utils.assert_shape", "utils.assert_shape", "w.reshape.unsqueeze", "x.reshape.reshape", "w.reshape.reshape", "utils.style_ops.conv2d_gradfix.conv2d", "x.reshape.reshape", "utils.suppress_tracer_warnings", "int", "s.unsqueeze().unsqueeze().unsqueeze", "input_gain.expand.expand", "w.reshape.square().mean().rsqrt", "s.square().mean().rsqrt", "dcoefs.unsqueeze().unsqueeze().unsqueeze", "input_gain.expand.unsqueeze().unsqueeze().unsqueeze", "w.reshape.to", "s.unsqueeze().unsqueeze", "w.reshape.square().mean", "s.square().mean", "w.reshape.square().sum", "dcoefs.unsqueeze().unsqueeze", "input_gain.expand.unsqueeze().unsqueeze", "s.unsqueeze", "w.reshape.square", "s.square", "w.reshape.square", "dcoefs.unsqueeze", "input_gain.expand.unsqueeze"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_gradfix.conv2d"], ["def", "modulated_conv2d", "(", "\n", "x", ",", "# Input tensor: [batch_size, in_channels, in_height, in_width]", "\n", "w", ",", "# Weight tensor: [out_channels, in_channels, kernel_height, kernel_width]", "\n", "s", ",", "# Style tensor: [batch_size, in_channels]", "\n", "demodulate", "=", "True", ",", "# Apply weight demodulation?", "\n", "padding", "=", "0", ",", "# Padding: int or [padH, padW]", "\n", "input_gain", "=", "None", ",", "# Optional scale factors for the input channels: [], [in_channels], or [batch_size, in_channels]", "\n", ")", ":", "\n", "    ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "batch_size", "=", "int", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "=", "w", ".", "shape", "\n", "misc", ".", "assert_shape", "(", "w", ",", "[", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "]", ")", "# [OIkk]", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "in_channels", ",", "None", ",", "None", "]", ")", "# [NIHW]", "\n", "misc", ".", "assert_shape", "(", "s", ",", "[", "batch_size", ",", "in_channels", "]", ")", "# [NI]", "\n", "\n", "# Pre-normalize inputs.", "\n", "if", "demodulate", ":", "\n", "        ", "w", "=", "w", "*", "w", ".", "square", "(", ")", ".", "mean", "(", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ".", "rsqrt", "(", ")", "\n", "s", "=", "s", "*", "s", ".", "square", "(", ")", ".", "mean", "(", ")", ".", "rsqrt", "(", ")", "\n", "\n", "# Modulate weights.", "\n", "", "w", "=", "w", ".", "unsqueeze", "(", "0", ")", "# [NOIkk]", "\n", "w", "=", "w", "*", "s", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", "# [NOIkk]", "\n", "\n", "# Demodulate weights.", "\n", "if", "demodulate", ":", "\n", "        ", "dcoefs", "=", "(", "w", ".", "square", "(", ")", ".", "sum", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", ".", "rsqrt", "(", ")", "# [NO]", "\n", "w", "=", "w", "*", "dcoefs", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", "# [NOIkk]", "\n", "\n", "# Apply input scaling.", "\n", "", "if", "input_gain", "is", "not", "None", ":", "\n", "        ", "input_gain", "=", "input_gain", ".", "expand", "(", "batch_size", ",", "in_channels", ")", "# [NI]", "\n", "w", "=", "w", "*", "input_gain", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", "# [NOIkk]", "\n", "\n", "# Execute as one fused op using grouped convolution.", "\n", "", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "w", "=", "w", ".", "reshape", "(", "-", "1", ",", "in_channels", ",", "kh", ",", "kw", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "w", ".", "to", "(", "x", ".", "dtype", ")", ",", "padding", "=", "padding", ",", "groups", "=", "batch_size", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.GenBlock.__init__": [[16, 27], ["torch.Module.__init__", "MODULES.g_bn", "MODULES.g_bn", "MODULES.g_conv2d", "MODULES.g_conv2d", "MODULES.g_conv2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "affine_input_dim", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "\n", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "in_channels", ",", "MODULES", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "out_channels", ",", "MODULES", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.GenBlock.forward": [[28, 43], ["big_resnet.GenBlock.bn1", "big_resnet.GenBlock.activation", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d1", "big_resnet.GenBlock.bn2", "big_resnet.GenBlock.activation", "big_resnet.GenBlock.conv2d2", "torch.interpolate", "torch.interpolate", "torch.interpolate", "big_resnet.GenBlock.conv2d0"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "bn1", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "x", ",", "affine", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.Generator.__init__": [[46, 121], ["torch.Module.__init__", "len", "MODULES.g_linear", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "utils.batchnorm_2d", "utils.batchnorm_2d", "MODULES.g_conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "utils.init_weights", "utils.init_weights", "utils.embedding", "utils.embedding", "str", "str", "str", "MODULES.g_linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.g_linear", "big_resnet.GenBlock", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.batchnorm_2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "g_shared_dim", "=", "g_shared_dim", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "num_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "chunk_size", "=", "z_dim", "//", "(", "self", ".", "num_blocks", "+", "1", ")", "\n", "self", ".", "affine_input_dim", "=", "self", ".", "chunk_size", "\n", "assert", "self", ".", "z_dim", "%", "(", "self", ".", "num_blocks", "+", "1", ")", "==", "0", ",", "\"z_dim should be divided by the number of blocks\"", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "g_shared_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "chunk_size", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ",", "bias", "=", "True", ")", "\n", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "g_shared_dim", "\n", "self", ".", "shared", "=", "ops", ".", "embedding", "(", "num_embeddings", "=", "self", ".", "num_classes", ",", "embedding_dim", "=", "self", ".", "g_shared_dim", ")", "\n", "\n", "", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "self", ".", "g_cond_mtd", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "ops", ".", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d5", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.Generator.forward": [[122, 159], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "big_resnet.Generator.linear0", "block.view", "enumerate", "big_resnet.Generator.bn4", "big_resnet.Generator.activation", "big_resnet.Generator.conv2d5", "big_resnet.Generator.tanh", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "affine_list.append", "len", "big_resnet.Generator.info_mix_linear", "big_resnet.Generator.shared", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "affine_list.append", "block", "block", "big_resnet.Generator.info_proj_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "MODEL", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "zs", "=", "torch", ".", "split", "(", "z", ",", "self", ".", "chunk_size", ",", "1", ")", "\n", "z", "=", "zs", "[", "0", "]", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "if", "shared_label", "is", "None", ":", "\n", "                    ", "shared_label", "=", "self", ".", "shared", "(", "label", ")", "\n", "", "affine_list", ".", "append", "(", "shared_label", ")", "\n", "", "if", "len", "(", "affine_list", ")", "==", "0", ":", "\n", "                ", "affines", "=", "[", "item", "for", "item", "in", "zs", "[", "1", ":", "]", "]", "\n", "", "else", ":", "\n", "                ", "affines", "=", "[", "torch", ".", "cat", "(", "affine_list", "+", "[", "item", "]", ",", "1", ")", "for", "item", "in", "zs", "[", "1", ":", "]", "]", "\n", "\n", "", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "counter", "=", "0", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affines", "[", "counter", "]", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.DiscOptBlock.__init__": [[162, 176], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "MODULES.d_bn", "MODULES.d_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "DiscOptBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn0", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.DiscOptBlock.forward": [[177, 193], ["big_resnet.DiscOptBlock.conv2d1", "big_resnet.DiscOptBlock.activation", "big_resnet.DiscOptBlock.conv2d2", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.average_pooling", "big_resnet.DiscOptBlock.conv2d0", "big_resnet.DiscOptBlock.bn1", "big_resnet.DiscOptBlock.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.DiscBlock.__init__": [[196, 220], ["torch.Module.__init__", "MODULES.d_conv2d", "MODULES.d_conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "MODULES.d_conv2d", "MODULES.d_bn", "MODULES.d_bn", "MODULES.d_bn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ",", "downsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiscBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_d_sn", "=", "apply_d_sn", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "self", ".", "ch_mismatch", "=", "False", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "ch_mismatch", "=", "True", "\n", "\n", "", "if", "self", ".", "ch_mismatch", "or", "downsample", ":", "\n", "            ", "self", ".", "conv2d0", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "not", "apply_d_sn", ":", "\n", "                ", "self", ".", "bn0", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "\n", "", "", "self", ".", "conv2d1", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "d_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "if", "not", "apply_d_sn", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "d_bn", "(", "in_features", "=", "out_channels", ")", "\n", "\n", "", "self", ".", "average_pooling", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.DiscBlock.forward": [[221, 243], ["big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d1", "big_resnet.DiscBlock.activation", "big_resnet.DiscBlock.conv2d2", "big_resnet.DiscBlock.bn1", "big_resnet.DiscBlock.bn2", "big_resnet.DiscBlock.average_pooling", "big_resnet.DiscBlock.conv2d0", "big_resnet.DiscBlock.bn0", "big_resnet.DiscBlock.average_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d1", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "self", ".", "average_pooling", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "downsample", "or", "self", ".", "ch_mismatch", ":", "\n", "            ", "if", "not", "self", ".", "apply_d_sn", ":", "\n", "                ", "x0", "=", "self", ".", "bn0", "(", "x0", ")", "\n", "", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "                ", "x0", "=", "self", ".", "average_pooling", "(", "x0", ")", "\n", "", "", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.Discriminator.__init__": [[246, 348], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_linear", "utils.init_weights", "utils.init_weights", "str", "str", "str", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_linear", "MODULES.d_embedding", "MODULES.d_linear", "MODULES.d_embedding", "big_resnet.DiscOptBlock", "big_resnet.DiscBlock", "utils.SelfAttention", "utils.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ",", "d_conv_dim", ",", "apply_d_sn", ",", "apply_attn", ",", "attn_d_loc", ",", "d_cond_mtd", ",", "aux_cls_type", ",", "d_embed_dim", ",", "normalize_d_embed", ",", "\n", "num_classes", ",", "d_init", ",", "d_depth", ",", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", "]", ",", "\n", "\"128\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "[", "3", "]", "+", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "2", "]", ",", "\n", "\"64\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"128\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"256\"", ":", "[", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", ",", "\n", "\"512\"", ":", "\n", "[", "d_conv_dim", ",", "d_conv_dim", ",", "d_conv_dim", "*", "2", ",", "d_conv_dim", "*", "4", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "8", ",", "d_conv_dim", "*", "16", ",", "d_conv_dim", "*", "16", "]", "\n", "}", "\n", "\n", "d_down", "=", "{", "\n", "\"32\"", ":", "[", "True", ",", "True", ",", "False", ",", "False", "]", ",", "\n", "\"64\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"128\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"256\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "\"512\"", ":", "[", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "False", "]", "\n", "}", "\n", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "in_dims", "=", "d_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "d_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "down", "=", "d_down", "[", "str", "(", "img_size", ")", "]", "\n", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "in_dims", ")", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscOptBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "apply_d_sn", "=", "apply_d_sn", ",", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "\n", "DiscBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "apply_d_sn", "=", "apply_d_sn", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "downsample", "=", "down", "[", "index", "]", ")", "\n", "]", "]", "\n", "\n", "", "if", "index", "+", "1", "in", "attn_d_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "False", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n", "", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "activation", "=", "MODULES", ".", "d_act_fn", "\n", "\n", "# linear layer for adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", "+", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MODULES", ".", "d_embedding", "(", "num_classes", ",", "d_embed_dim", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "MODULES", ".", "d_linear", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "if", "d_init", ":", "\n", "            ", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "d_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.big_resnet.Discriminator.forward": [[349, 428], ["enumerate", "big_resnet.Discriminator.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "utils.dummy_context_mgr", "utils.dummy_context_mgr", "big_resnet.Discriminator.linear1", "big_resnet.Discriminator.info_discrete_linear", "big_resnet.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "big_resnet.Discriminator.linear2", "block", "big_resnet.Discriminator.info_conti_var_linear", "big_resnet.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "big_resnet.Discriminator.linear2", "big_resnet.Discriminator.embedding", "big_resnet.Discriminator.linear_mi.parameters", "big_resnet.Discriminator.linear_mi", "big_resnet.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "big_resnet.Discriminator.embedding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "h", "=", "x", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "h", "=", "block", "(", "h", ")", "\n", "", "", "bottom_h", ",", "bottom_w", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "torch", ".", "sum", "(", "h", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "# adversarial training", "\n", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "                ", "if", "adc_fake", ":", "\n", "                    ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", "*", "2", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "                ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", "/", "(", "bottom_h", "*", "bottom_w", ")", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "                ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "                ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "                ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                    ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                            ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                    ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                        ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.model.load_generator_discriminator": [[19, 155], ["__import__", "logger.info", "logger.info", "__import__", "__import__.Discriminator().to", "__import__.Generator().to", "__import__.Discriminator().to", "logger.info", "logger.info", "logger.info", "logger.info", "__import__.Generator().to", "__import__.Generator().to", "copy.deepcopy", "utils.ema.EmaStylegan2", "copy.deepcopy", "utils.ema.Ema", "utils.count_parameters", "utils.count_parameters", "__import__.Discriminator", "logger.info", "__import__.Generator", "__import__.Discriminator", "logger.info", "__import__.Generator", "__import__.Generator"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.count_parameters", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.count_parameters"], ["def", "load_generator_discriminator", "(", "DATA", ",", "OPTIMIZATION", ",", "MODEL", ",", "STYLEGAN", ",", "MODULES", ",", "RUN", ",", "device", ",", "logger", ")", ":", "\n", "    ", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Build a Generative Adversarial Network.\"", ")", "\n", "", "module", "=", "__import__", "(", "\"models.{backbone}\"", ".", "format", "(", "backbone", "=", "MODEL", ".", "backbone", ")", ",", "fromlist", "=", "[", "\"something\"", "]", ")", "\n", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Modules are located on './src/models.{backbone}'.\"", ".", "format", "(", "backbone", "=", "MODEL", ".", "backbone", ")", ")", "\n", "\n", "", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "        ", "channel_base", ",", "channel_max", "=", "32768", "if", "MODEL", ".", "backbone", "==", "\"stylegan3\"", "or", "DATA", ".", "img_size", ">=", "512", "or", "DATA", ".", "name", "in", "[", "\"CIFAR10\"", ",", "\"CIFAR100\"", "]", "else", "16384", ",", "512", "\n", "gen_c_dim", "=", "DATA", ".", "num_classes", "if", "MODEL", ".", "g_cond_mtd", "==", "\"cAdaIN\"", "else", "0", "\n", "dis_c_dim", "=", "DATA", ".", "num_classes", "if", "MODEL", ".", "d_cond_mtd", "in", "STYLEGAN", ".", "cond_type", "else", "0", "\n", "if", "RUN", ".", "mixed_precision", ":", "\n", "            ", "num_fp16_res", "=", "4", "\n", "conv_clamp", "=", "256", "\n", "", "else", ":", "\n", "            ", "num_fp16_res", "=", "0", "\n", "conv_clamp", "=", "None", "\n", "", "if", "MODEL", ".", "backbone", "==", "\"stylegan2\"", ":", "\n", "            ", "Gen", "=", "module", ".", "Generator", "(", "z_dim", "=", "MODEL", ".", "z_dim", ",", "\n", "c_dim", "=", "gen_c_dim", ",", "\n", "w_dim", "=", "MODEL", ".", "w_dim", ",", "\n", "img_resolution", "=", "DATA", ".", "img_size", ",", "\n", "img_channels", "=", "DATA", ".", "img_channels", ",", "\n", "MODEL", "=", "MODEL", ",", "\n", "mapping_kwargs", "=", "{", "\"num_layers\"", ":", "STYLEGAN", ".", "mapping_network", "}", ",", "\n", "synthesis_kwargs", "=", "{", "\"channel_base\"", ":", "channel_base", ",", "\"channel_max\"", ":", "channel_max", ",", "\"num_fp16_res\"", ":", "num_fp16_res", ",", "\"conv_clamp\"", ":", "conv_clamp", "}", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "magnitude_ema_beta", "=", "0.5", "**", "(", "OPTIMIZATION", ".", "batch_size", "*", "OPTIMIZATION", ".", "acml_steps", "/", "(", "20", "*", "1e3", ")", ")", "\n", "g_channel_base", ",", "g_channel_max", ",", "conv_kernel", ",", "use_radial_filters", "=", "channel_base", ",", "channel_max", ",", "3", ",", "False", "\n", "if", "STYLEGAN", ".", "stylegan3_cfg", "==", "\"stylegan3-r\"", ":", "\n", "                ", "g_channel_base", ",", "g_channel_max", ",", "conv_kernel", ",", "use_radial_filters", "=", "channel_base", "*", "2", ",", "channel_max", "*", "2", ",", "1", ",", "True", "\n", "", "Gen", "=", "module", ".", "Generator", "(", "z_dim", "=", "MODEL", ".", "z_dim", ",", "\n", "c_dim", "=", "gen_c_dim", ",", "\n", "w_dim", "=", "MODEL", ".", "w_dim", ",", "\n", "img_resolution", "=", "DATA", ".", "img_size", ",", "\n", "img_channels", "=", "DATA", ".", "img_channels", ",", "\n", "MODEL", "=", "MODEL", ",", "\n", "mapping_kwargs", "=", "{", "\"num_layers\"", ":", "STYLEGAN", ".", "mapping_network", "}", ",", "\n", "synthesis_kwargs", "=", "{", "\"channel_base\"", ":", "g_channel_base", ",", "\"channel_max\"", ":", "g_channel_max", ",", "\"num_fp16_res\"", ":", "num_fp16_res", ",", "\"conv_clamp\"", ":", "conv_clamp", ",", "\"conv_kernel\"", ":", "conv_kernel", ",", "\"use_radial_filters\"", ":", "use_radial_filters", ",", "\"magnitude_ema_beta\"", ":", "magnitude_ema_beta", "}", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "Gen_mapping", ",", "Gen_synthesis", "=", "Gen", ".", "mapping", ",", "Gen", ".", "synthesis", "\n", "\n", "module", "=", "__import__", "(", "\"models.stylegan2\"", ",", "fromlist", "=", "[", "\"something\"", "]", ")", "# always use StyleGAN2 discriminator", "\n", "Dis", "=", "module", ".", "Discriminator", "(", "c_dim", "=", "dis_c_dim", ",", "\n", "img_resolution", "=", "DATA", ".", "img_size", ",", "\n", "img_channels", "=", "DATA", ".", "img_channels", ",", "\n", "architecture", "=", "STYLEGAN", ".", "d_architecture", ",", "\n", "channel_base", "=", "channel_base", ",", "\n", "channel_max", "=", "channel_max", ",", "\n", "num_fp16_res", "=", "num_fp16_res", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "cmap_dim", "=", "None", ",", "\n", "d_cond_mtd", "=", "MODEL", ".", "d_cond_mtd", ",", "\n", "aux_cls_type", "=", "MODEL", ".", "aux_cls_type", ",", "\n", "d_embed_dim", "=", "MODEL", ".", "d_embed_dim", ",", "\n", "num_classes", "=", "DATA", ".", "num_classes", ",", "\n", "normalize_d_embed", "=", "MODEL", ".", "normalize_d_embed", ",", "\n", "block_kwargs", "=", "{", "}", ",", "\n", "mapping_kwargs", "=", "{", "}", ",", "\n", "epilogue_kwargs", "=", "{", "\n", "\"mbstd_group_size\"", ":", "STYLEGAN", ".", "d_epilogue_mbstd_group_size", "\n", "}", ",", "\n", "MODEL", "=", "MODEL", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "MODEL", ".", "apply_g_ema", ":", "\n", "            ", "if", "device", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Prepare exponential moving average generator with decay rate of {decay}.\"", ".", "format", "(", "decay", "=", "MODEL", ".", "g_ema_decay", ")", ")", "\n", "", "Gen_ema", "=", "copy", ".", "deepcopy", "(", "Gen", ")", "\n", "Gen_ema_mapping", ",", "Gen_ema_synthesis", "=", "Gen_ema", ".", "mapping", ",", "Gen_ema", ".", "synthesis", "\n", "\n", "ema", "=", "EmaStylegan2", "(", "source", "=", "Gen", ",", "\n", "target", "=", "Gen_ema", ",", "\n", "ema_kimg", "=", "STYLEGAN", ".", "g_ema_kimg", ",", "\n", "ema_rampup", "=", "STYLEGAN", ".", "g_ema_rampup", ",", "\n", "effective_batch_size", "=", "OPTIMIZATION", ".", "batch_size", "*", "OPTIMIZATION", ".", "acml_steps", ")", "\n", "", "else", ":", "\n", "            ", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "ema", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "", "else", ":", "\n", "        ", "Gen", "=", "module", ".", "Generator", "(", "z_dim", "=", "MODEL", ".", "z_dim", ",", "\n", "g_shared_dim", "=", "MODEL", ".", "g_shared_dim", ",", "\n", "img_size", "=", "DATA", ".", "img_size", ",", "\n", "g_conv_dim", "=", "MODEL", ".", "g_conv_dim", ",", "\n", "apply_attn", "=", "MODEL", ".", "apply_attn", ",", "\n", "attn_g_loc", "=", "MODEL", ".", "attn_g_loc", ",", "\n", "g_cond_mtd", "=", "MODEL", ".", "g_cond_mtd", ",", "\n", "num_classes", "=", "DATA", ".", "num_classes", ",", "\n", "g_init", "=", "MODEL", ".", "g_init", ",", "\n", "g_depth", "=", "MODEL", ".", "g_depth", ",", "\n", "mixed_precision", "=", "RUN", ".", "mixed_precision", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "MODEL", "=", "MODEL", ")", ".", "to", "(", "device", ")", "\n", "\n", "Gen_mapping", ",", "Gen_synthesis", "=", "None", ",", "None", "\n", "\n", "Dis", "=", "module", ".", "Discriminator", "(", "img_size", "=", "DATA", ".", "img_size", ",", "\n", "d_conv_dim", "=", "MODEL", ".", "d_conv_dim", ",", "\n", "apply_d_sn", "=", "MODEL", ".", "apply_d_sn", ",", "\n", "apply_attn", "=", "MODEL", ".", "apply_attn", ",", "\n", "attn_d_loc", "=", "MODEL", ".", "attn_d_loc", ",", "\n", "d_cond_mtd", "=", "MODEL", ".", "d_cond_mtd", ",", "\n", "aux_cls_type", "=", "MODEL", ".", "aux_cls_type", ",", "\n", "d_embed_dim", "=", "MODEL", ".", "d_embed_dim", ",", "\n", "num_classes", "=", "DATA", ".", "num_classes", ",", "\n", "normalize_d_embed", "=", "MODEL", ".", "normalize_d_embed", ",", "\n", "d_init", "=", "MODEL", ".", "d_init", ",", "\n", "d_depth", "=", "MODEL", ".", "d_depth", ",", "\n", "mixed_precision", "=", "RUN", ".", "mixed_precision", ",", "\n", "MODULES", "=", "MODULES", ",", "\n", "MODEL", "=", "MODEL", ")", ".", "to", "(", "device", ")", "\n", "if", "MODEL", ".", "apply_g_ema", ":", "\n", "            ", "if", "device", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Prepare exponential moving average generator with decay rate of {decay}.\"", ".", "format", "(", "decay", "=", "MODEL", ".", "g_ema_decay", ")", ")", "\n", "", "Gen_ema", "=", "copy", ".", "deepcopy", "(", "Gen", ")", "\n", "Gen_ema_mapping", ",", "Gen_ema_synthesis", "=", "None", ",", "None", "\n", "\n", "ema", "=", "Ema", "(", "source", "=", "Gen", ",", "target", "=", "Gen_ema", ",", "decay", "=", "MODEL", ".", "g_ema_decay", ",", "start_iter", "=", "MODEL", ".", "g_ema_start", ")", "\n", "", "else", ":", "\n", "            ", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "ema", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "misc", ".", "count_parameters", "(", "Gen", ")", ")", "\n", "", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "Gen", ")", "\n", "\n", "", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "misc", ".", "count_parameters", "(", "Dis", ")", ")", "\n", "", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "Dis", ")", "\n", "", "return", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "ema", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.model.prepare_parallel_training": [[157, 201], ["torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.distributed.new_group", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "sync_batchnorm.batchnorm.convert_model().to", "sync_batchnorm.batchnorm.convert_model().to", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "sync_batchnorm.batchnorm.convert_model().to", "sync_batchnorm.batchnorm.convert_model", "sync_batchnorm.batchnorm.convert_model", "range", "sync_batchnorm.batchnorm.convert_model"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.sync_batchnorm.batchnorm.convert_model"], ["", "def", "prepare_parallel_training", "(", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", ",", "\n", "MODEL", ",", "world_size", ",", "distributed_data_parallel", ",", "synchronized_bn", ",", "apply_g_ema", ",", "device", ")", ":", "\n", "    ", "if", "distributed_data_parallel", ":", "\n", "        ", "if", "synchronized_bn", ":", "\n", "            ", "process_group", "=", "torch", ".", "distributed", ".", "new_group", "(", "[", "w", "for", "w", "in", "range", "(", "world_size", ")", "]", ")", "\n", "Gen", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen", ",", "process_group", ")", "\n", "Dis", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Dis", ",", "process_group", ")", "\n", "if", "apply_g_ema", ":", "\n", "                ", "Gen_ema", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "Gen_ema", ",", "process_group", ")", "\n", "\n", "", "", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "Gen_mapping", "=", "DDP", "(", "Gen", ".", "mapping", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "Gen_synthesis", "=", "DDP", "(", "Gen", ".", "synthesis", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "Gen", "=", "DDP", "(", "Gen", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "synchronized_bn", ")", "\n", "", "Dis", "=", "DDP", "(", "Dis", ",", "device_ids", "=", "[", "device", "]", ",", "\n", "broadcast_buffers", "=", "False", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", "else", "synchronized_bn", ",", "\n", "find_unused_parameters", "=", "True", "if", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"continuous\"", ",", "\"both\"", "]", "else", "False", ")", "\n", "if", "apply_g_ema", ":", "\n", "            ", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "                ", "Gen_ema_mapping", "=", "DDP", "(", "Gen_ema", ".", "mapping", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "Gen_ema_synthesis", "=", "DDP", "(", "Gen_ema", ".", "synthesis", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "Gen_ema", "=", "DDP", "(", "Gen_ema", ",", "device_ids", "=", "[", "device", "]", ",", "broadcast_buffers", "=", "synchronized_bn", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "            ", "Gen_mapping", "=", "DataParallel", "(", "Gen", ".", "mapping", ",", "output_device", "=", "device", ")", "\n", "Gen_synthesis", "=", "DataParallel", "(", "Gen", ".", "synthesis", ",", "output_device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "Gen", "=", "DataParallel", "(", "Gen", ",", "output_device", "=", "device", ")", "\n", "", "Dis", "=", "DataParallel", "(", "Dis", ",", "output_device", "=", "device", ")", "\n", "if", "apply_g_ema", ":", "\n", "            ", "if", "MODEL", ".", "backbone", "in", "[", "\"stylegan2\"", ",", "\"stylegan3\"", "]", ":", "\n", "                ", "Gen_ema_mapping", "=", "DataParallel", "(", "Gen_ema", ".", "mapping", ",", "output_device", "=", "device", ")", "\n", "Gen_ema_synthesis", "=", "DataParallel", "(", "Gen_ema", ".", "synthesis", ",", "output_device", "=", "device", ")", "\n", "", "else", ":", "\n", "                ", "Gen_ema", "=", "DataParallel", "(", "Gen_ema", ",", "output_device", "=", "device", ")", "\n", "\n", "", "", "if", "synchronized_bn", ":", "\n", "            ", "Gen", "=", "convert_model", "(", "Gen", ")", ".", "to", "(", "device", ")", "\n", "Dis", "=", "convert_model", "(", "Dis", ")", ".", "to", "(", "device", ")", "\n", "if", "apply_g_ema", ":", "\n", "                ", "Gen_ema", "=", "convert_model", "(", "Gen_ema", ")", ".", "to", "(", "device", ")", "\n", "", "", "", "return", "Gen", ",", "Gen_mapping", ",", "Gen_synthesis", ",", "Dis", ",", "Gen_ema", ",", "Gen_ema_mapping", ",", "Gen_ema_synthesis", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.FullyConnectedLayer.__init__": [[102, 117], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.full", "torch.full", "torch.full", "torch.full", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "# Number of input features.", "\n", "out_features", ",", "# Number of output features.", "\n", "bias", "=", "True", ",", "# Apply additive bias before the activation function?", "\n", "activation", "=", "\"linear\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "lr_multiplier", "=", "1", ",", "# Learning rate multiplier.", "\n", "bias_init", "=", "0", ",", "# Initial value for the additive bias.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_features", ",", "in_features", "]", ")", "/", "lr_multiplier", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "full", "(", "[", "out_features", "]", ",", "np", ".", "float32", "(", "bias_init", ")", ")", ")", "if", "bias", "else", "None", "\n", "self", ".", "weight_gain", "=", "lr_multiplier", "/", "np", ".", "sqrt", "(", "in_features", ")", "\n", "self", ".", "bias_gain", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.FullyConnectedLayer.forward": [[118, 132], ["stylegan2.FullyConnectedLayer.weight.to", "b.to.to.to", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "utils.style_ops.bias_act.bias_act.matmul", "utils.style_ops.bias_act.bias_act", "b.to.to.unsqueeze", "w.t", "w.t"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", ".", "to", "(", "x", ".", "dtype", ")", "*", "self", ".", "weight_gain", "\n", "b", "=", "self", ".", "bias", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "b", "=", "b", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "self", ".", "bias_gain", "!=", "1", ":", "\n", "                ", "b", "=", "b", "*", "self", ".", "bias_gain", "\n", "\n", "", "", "if", "self", ".", "activation", "==", "\"linear\"", "and", "b", "is", "not", "None", ":", "\n", "            ", "x", "=", "torch", ".", "addmm", "(", "b", ".", "unsqueeze", "(", "0", ")", ",", "x", ",", "w", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "matmul", "(", "w", ".", "t", "(", ")", ")", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "b", ",", "act", "=", "self", ".", "activation", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Conv2dLayer.__init__": [[135, 171], ["super().__init__", "stylegan2.Conv2dLayer.register_buffer", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "utils.style_ops.upfirdn2d.setup_filter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan2.Conv2dLayer.register_buffer", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan2.Conv2dLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "kernel_size", ",", "# Width and height of the convolution kernel.", "\n", "bias", "=", "True", ",", "# Apply additive bias before the activation function?", "\n", "activation", "=", "\"linear\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "down", "=", "1", ",", "# Integer downsampling factor.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output to +-X, None = disable clamping.", "\n", "channels_last", "=", "False", ",", "# Expect the input to have memory_format=channels_last?", "\n", "trainable", "=", "True", ",", "# Update the weights of this layer during training?", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "up", "=", "up", "\n", "self", ".", "down", "=", "down", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "register_buffer", "(", "\"resample_filter\"", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "weight_gain", "=", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "(", "kernel_size", "**", "2", ")", ")", "\n", "self", ".", "act_gain", "=", "bias_act", ".", "activation_funcs", "[", "activation", "]", ".", "def_gain", "\n", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "weight", "=", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", "\n", "bias", "=", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", "if", "bias", "else", "None", "\n", "if", "trainable", ":", "\n", "            ", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "weight", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "bias", ")", "if", "bias", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"weight\"", ",", "weight", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "register_buffer", "(", "\"bias\"", ",", "bias", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Conv2dLayer.forward": [[172, 188], ["utils.style_ops.conv2d_resample.conv2d_resample", "utils.style_ops.bias_act.bias_act", "stylegan2.Conv2dLayer.bias.to", "w.to"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "gain", "=", "1", ")", ":", "\n", "        ", "w", "=", "self", ".", "weight", "*", "self", ".", "weight_gain", "\n", "b", "=", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", "if", "self", ".", "bias", "is", "not", "None", "else", "None", "\n", "flip_weight", "=", "(", "self", ".", "up", "==", "1", ")", "# slightly faster", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "\n", "w", "=", "w", ".", "to", "(", "x", ".", "dtype", ")", ",", "\n", "f", "=", "self", ".", "resample_filter", ",", "\n", "up", "=", "self", ".", "up", ",", "\n", "down", "=", "self", ".", "down", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "flip_weight", "=", "flip_weight", ")", "\n", "\n", "act_gain", "=", "self", ".", "act_gain", "*", "gain", "\n", "act_clamp", "=", "self", ".", "conv_clamp", "*", "gain", "if", "self", ".", "conv_clamp", "is", "not", "None", "else", "None", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "b", ",", "act", "=", "self", ".", "activation", ",", "gain", "=", "act_gain", ",", "clamp", "=", "act_clamp", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.MappingNetwork.__init__": [[191, 230], ["super().__init__", "range", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "setattr", "stylegan2.MappingNetwork.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality, 0 = no latent.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality, 0 = no label.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "num_ws", ",", "# Number of intermediate latents to output, None = do not broadcast.", "\n", "num_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "embed_features", "=", "None", ",", "# Label embedding dimensionality, None = same as w_dim.", "\n", "layer_features", "=", "None", ",", "# Number of intermediate features in the mapping layers, None = same as w_dim.", "\n", "activation", "=", "\"lrelu\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "lr_multiplier", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "w_avg_beta", "=", "0.998", ",", "# Decay for tracking the moving average of W during training, None = do not track.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "num_ws", "=", "num_ws", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_avg_beta", "=", "w_avg_beta", "\n", "\n", "if", "embed_features", "is", "None", ":", "\n", "            ", "embed_features", "=", "w_dim", "\n", "", "if", "c_dim", "==", "0", ":", "\n", "            ", "embed_features", "=", "0", "\n", "", "if", "layer_features", "is", "None", ":", "\n", "            ", "layer_features", "=", "w_dim", "\n", "", "features_list", "=", "[", "z_dim", "+", "embed_features", "]", "+", "[", "layer_features", "]", "*", "(", "num_layers", "-", "1", ")", "+", "[", "w_dim", "]", "\n", "\n", "if", "c_dim", ">", "0", ":", "\n", "            ", "self", ".", "embed", "=", "FullyConnectedLayer", "(", "c_dim", ",", "embed_features", ")", "\n", "", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "in_features", "=", "features_list", "[", "idx", "]", "\n", "out_features", "=", "features_list", "[", "idx", "+", "1", "]", "\n", "layer", "=", "FullyConnectedLayer", "(", "in_features", ",", "out_features", ",", "activation", "=", "activation", ",", "lr_multiplier", "=", "lr_multiplier", ")", "\n", "setattr", "(", "self", ",", "f\"fc{idx}\"", ",", "layer", ")", "\n", "\n", "", "if", "num_ws", "is", "not", "None", "and", "w_avg_beta", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"w_avg\"", ",", "torch", ".", "zeros", "(", "[", "w_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.MappingNetwork.forward": [[231, 263], ["range", "utils.assert_shape", "stylegan2.normalize_2nd_moment", "utils.assert_shape", "stylegan2.normalize_2nd_moment", "getattr", "getattr.", "stylegan2.MappingNetwork.w_avg.copy_", "stylegan2.MappingNetwork.unsqueeze().repeat", "z.to", "stylegan2.MappingNetwork.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "stylegan2.MappingNetwork.detach().mean().lerp", "stylegan2.MappingNetwork.w_avg.lerp", "stylegan2.MappingNetwork.w_avg.lerp", "c.to", "stylegan2.MappingNetwork.unsqueeze", "stylegan2.MappingNetwork.detach().mean", "stylegan2.MappingNetwork.detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.normalize_2nd_moment", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.normalize_2nd_moment"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "update_emas", "=", "False", ")", ":", "\n", "# Embed, normalize, and concat inputs.", "\n", "        ", "x", "=", "None", "\n", "if", "self", ".", "z_dim", ">", "0", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "z", ",", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "x", "=", "normalize_2nd_moment", "(", "z", ".", "to", "(", "torch", ".", "float32", ")", ")", "\n", "", "if", "self", ".", "c_dim", ">", "0", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "c", ",", "[", "None", ",", "self", ".", "c_dim", "]", ")", "\n", "y", "=", "normalize_2nd_moment", "(", "self", ".", "embed", "(", "c", ".", "to", "(", "torch", ".", "float32", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "if", "x", "is", "not", "None", "else", "y", "\n", "\n", "# Main layers.", "\n", "", "for", "idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "f\"fc{idx}\"", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "\n", "# Update moving average of W.", "\n", "", "if", "update_emas", "and", "self", ".", "w_avg_beta", "is", "not", "None", ":", "\n", "            ", "self", ".", "w_avg", ".", "copy_", "(", "x", ".", "detach", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "lerp", "(", "self", ".", "w_avg", ",", "self", ".", "w_avg_beta", ")", ")", "\n", "\n", "# Broadcast.", "\n", "", "if", "self", ".", "num_ws", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "self", ".", "num_ws", ",", "1", "]", ")", "\n", "\n", "# Apply truncation.", "\n", "", "if", "truncation_psi", "!=", "1", ":", "\n", "            ", "assert", "self", ".", "w_avg_beta", "is", "not", "None", "\n", "if", "self", ".", "num_ws", "is", "None", "or", "truncation_cutoff", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", ",", "truncation_psi", ")", "\n", "", "else", ":", "\n", "                ", "x", "[", ":", ",", ":", "truncation_cutoff", "]", "=", "self", ".", "w_avg", ".", "lerp", "(", "x", "[", ":", ",", ":", "truncation_cutoff", "]", ",", "truncation_psi", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisLayer.__init__": [[266, 297], ["super().__init__", "stylegan2.SynthesisLayer.register_buffer", "stylegan2.FullyConnectedLayer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "utils.style_ops.upfirdn2d.setup_filter", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "stylegan2.SynthesisLayer.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "resolution", ",", "# Resolution of this layer.", "\n", "kernel_size", "=", "3", ",", "# Convolution kernel size.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "use_noise", "=", "True", ",", "# Enable noise input?", "\n", "activation", "=", "\"lrelu\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "channels_last", "=", "False", ",", "# Use channels_last format for the weights?", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "up", "=", "up", "\n", "self", ".", "use_noise", "=", "use_noise", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "register_buffer", "(", "\"resample_filter\"", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "padding", "=", "kernel_size", "//", "2", "\n", "self", ".", "act_gain", "=", "bias_act", ".", "activation_funcs", "[", "activation", "]", ".", "def_gain", "\n", "\n", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", ")", "\n", "if", "use_noise", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"noise_const\"", ",", "torch", ".", "randn", "(", "[", "resolution", ",", "resolution", "]", ")", ")", "\n", "self", ".", "noise_strength", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisLayer.forward": [[298, 325], ["utils.assert_shape", "stylegan2.SynthesisLayer.affine", "stylegan2.modulated_conv2d", "utils.style_ops.bias_act.bias_act", "stylegan2.SynthesisLayer.bias.to", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.modulated_conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "noise_mode", "=", "\"random\"", ",", "fused_modconv", "=", "True", ",", "gain", "=", "1", ")", ":", "\n", "        ", "assert", "noise_mode", "in", "[", "\"random\"", ",", "\"const\"", ",", "\"none\"", "]", "\n", "in_resolution", "=", "self", ".", "resolution", "//", "self", ".", "up", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "weight", ".", "shape", "[", "1", "]", ",", "in_resolution", ",", "in_resolution", "]", ")", "\n", "styles", "=", "self", ".", "affine", "(", "w", ")", "\n", "\n", "noise", "=", "None", "\n", "if", "self", ".", "use_noise", "and", "noise_mode", "==", "\"random\"", ":", "\n", "            ", "noise", "=", "torch", ".", "randn", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength", "\n", "", "if", "self", ".", "use_noise", "and", "noise_mode", "==", "\"const\"", ":", "\n", "            ", "noise", "=", "self", ".", "noise_const", "*", "self", ".", "noise_strength", "\n", "\n", "", "flip_weight", "=", "(", "self", ".", "up", "==", "1", ")", "# slightly faster", "\n", "x", "=", "modulated_conv2d", "(", "x", "=", "x", ",", "\n", "weight", "=", "self", ".", "weight", ",", "\n", "styles", "=", "styles", ",", "\n", "noise", "=", "noise", ",", "\n", "up", "=", "self", ".", "up", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "resample_filter", "=", "self", ".", "resample_filter", ",", "\n", "flip_weight", "=", "flip_weight", ",", "\n", "fused_modconv", "=", "fused_modconv", ")", "\n", "\n", "act_gain", "=", "self", ".", "act_gain", "*", "gain", "\n", "act_clamp", "=", "self", ".", "conv_clamp", "*", "gain", "if", "self", ".", "conv_clamp", "is", "not", "None", "else", "None", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", ",", "act", "=", "self", ".", "activation", ",", "gain", "=", "act_gain", ",", "clamp", "=", "act_clamp", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.ToRGBLayer.__init__": [[328, 336], ["super().__init__", "stylegan2.FullyConnectedLayer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "w_dim", ",", "kernel_size", "=", "1", ",", "conv_clamp", "=", "None", ",", "channels_last", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_clamp", "=", "conv_clamp", "\n", "self", ".", "affine", "=", "FullyConnectedLayer", "(", "w_dim", ",", "in_channels", ",", "bias_init", "=", "1", ")", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "channels_last", "else", "torch", ".", "contiguous_format", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "in_channels", ",", "kernel_size", ",", "kernel_size", "]", ")", ".", "to", "(", "memory_format", "=", "memory_format", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "out_channels", "]", ")", ")", "\n", "self", ".", "weight_gain", "=", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "(", "kernel_size", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.ToRGBLayer.forward": [[337, 342], ["stylegan2.modulated_conv2d", "utils.style_ops.bias_act.bias_act", "stylegan2.ToRGBLayer.affine", "stylegan2.ToRGBLayer.bias.to"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.modulated_conv2d", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.bias_act.bias_act"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "fused_modconv", "=", "True", ")", ":", "\n", "        ", "styles", "=", "self", ".", "affine", "(", "w", ")", "*", "self", ".", "weight_gain", "\n", "x", "=", "modulated_conv2d", "(", "x", "=", "x", ",", "weight", "=", "self", ".", "weight", ",", "styles", "=", "styles", ",", "demodulate", "=", "False", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "x", "=", "bias_act", ".", "bias_act", "(", "x", ",", "self", ".", "bias", ".", "to", "(", "x", ".", "dtype", ")", ",", "clamp", "=", "self", ".", "conv_clamp", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisBlock.__init__": [[345, 410], ["super().__init__", "stylegan2.SynthesisBlock.register_buffer", "stylegan2.SynthesisLayer", "utils.style_ops.upfirdn2d.setup_filter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "stylegan2.SynthesisLayer", "stylegan2.ToRGBLayer", "stylegan2.Conv2dLayer", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "# Number of input channels, 0 = first block.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of output color channels.", "\n", "is_last", ",", "# Is this the last block?", "\n", "architecture", "=", "\"skip\"", ",", "# Architecture: \"orig\", \"skip\", \"resnet\".", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "use_fp16", "=", "False", ",", "# Use FP16 for this block?", "\n", "fp16_channels_last", "=", "False", ",", "# Use channels-last memory format with FP16?", "\n", "**", "layer_kwargs", ",", "# Arguments for SynthesisLayer.", "\n", ")", ":", "\n", "        ", "assert", "architecture", "in", "[", "\"orig\"", ",", "\"skip\"", ",", "\"resnet\"", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "channels_last", "=", "(", "use_fp16", "and", "fp16_channels_last", ")", "\n", "self", ".", "register_buffer", "(", "\"resample_filter\"", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "self", ".", "num_conv", "=", "0", "\n", "self", ".", "num_torgb", "=", "0", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "            ", "self", ".", "const", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "[", "out_channels", ",", "resolution", ",", "resolution", "]", ")", ")", "\n", "\n", "", "if", "in_channels", "!=", "0", ":", "\n", "            ", "self", ".", "conv0", "=", "SynthesisLayer", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "w_dim", "=", "w_dim", ",", "\n", "resolution", "=", "resolution", ",", "\n", "up", "=", "2", ",", "\n", "resample_filter", "=", "resample_filter", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ",", "\n", "**", "layer_kwargs", ")", "\n", "self", ".", "num_conv", "+=", "1", "\n", "\n", "", "self", ".", "conv1", "=", "SynthesisLayer", "(", "out_channels", ",", "\n", "out_channels", ",", "\n", "w_dim", "=", "w_dim", ",", "\n", "resolution", "=", "resolution", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ",", "\n", "**", "layer_kwargs", ")", "\n", "self", ".", "num_conv", "+=", "1", "\n", "\n", "if", "is_last", "or", "architecture", "==", "\"skip\"", ":", "\n", "            ", "self", ".", "torgb", "=", "ToRGBLayer", "(", "out_channels", ",", "img_channels", ",", "w_dim", "=", "w_dim", ",", "conv_clamp", "=", "conv_clamp", ",", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "self", ".", "num_torgb", "+=", "1", "\n", "\n", "", "if", "in_channels", "!=", "0", "and", "architecture", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "skip", "=", "Conv2dLayer", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "up", "=", "2", ",", "\n", "resample_filter", "=", "resample_filter", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisBlock.forward": [[411, 453], ["utils.assert_shape", "iter", "ws.unbind", "stylegan2.SynthesisBlock.const.to", "stylegan2.SynthesisBlock.unsqueeze().repeat", "utils.assert_shape", "stylegan2.SynthesisBlock.to", "stylegan2.SynthesisBlock.conv1", "utils.assert_shape", "utils.style_ops.upfirdn2d.upsample2d", "stylegan2.SynthesisBlock.torgb", "stylegan2.SynthesisBlock.to", "utils.suppress_tracer_warnings", "next", "stylegan2.SynthesisBlock.skip", "stylegan2.SynthesisBlock.conv0", "stylegan2.SynthesisBlock.conv1", "stylegan2.SynthesisBlock.add_", "stylegan2.SynthesisBlock.conv0", "stylegan2.SynthesisBlock.conv1", "next", "utils.style_ops.upfirdn2d.upsample2d.add_", "stylegan2.SynthesisBlock.unsqueeze", "next", "next", "next", "next", "numpy.sqrt", "numpy.sqrt", "int"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.upsample2d"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "ws", ",", "force_fp32", "=", "False", ",", "fused_modconv", "=", "None", ",", "update_emas", "=", "False", ",", "**", "layer_kwargs", ")", ":", "\n", "        ", "_", "=", "update_emas", "# unused", "\n", "misc", ".", "assert_shape", "(", "ws", ",", "[", "None", ",", "self", ".", "num_conv", "+", "self", ".", "num_torgb", ",", "self", ".", "w_dim", "]", ")", "\n", "w_iter", "=", "iter", "(", "ws", ".", "unbind", "(", "dim", "=", "1", ")", ")", "\n", "dtype", "=", "torch", ".", "float16", "if", "self", ".", "use_fp16", "and", "not", "force_fp32", "else", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "self", ".", "channels_last", "and", "not", "force_fp32", "else", "torch", ".", "contiguous_format", "\n", "if", "fused_modconv", "is", "None", ":", "\n", "            ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "                ", "fused_modconv", "=", "(", "not", "self", ".", "training", ")", "and", "(", "dtype", "==", "torch", ".", "float32", "or", "int", "(", "x", ".", "shape", "[", "0", "]", ")", "==", "1", ")", "\n", "\n", "# Input.", "\n", "", "", "if", "self", ".", "in_channels", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "const", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "[", "ws", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", "//", "2", ",", "self", ".", "resolution", "//", "2", "]", ")", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "\n", "# Main layers.", "\n", "", "if", "self", ".", "in_channels", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "", "elif", "self", ".", "architecture", "==", "\"resnet\"", ":", "\n", "            ", "y", "=", "self", ".", "skip", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", "=", "self", ".", "conv0", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ",", "**", "layer_kwargs", ")", "\n", "x", "=", "y", ".", "add_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv0", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ",", "**", "layer_kwargs", ")", "\n", "\n", "# ToRGB.", "\n", "", "if", "img", "is", "not", "None", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", "//", "2", ",", "self", ".", "resolution", "//", "2", "]", ")", "\n", "img", "=", "upfirdn2d", ".", "upsample2d", "(", "img", ",", "self", ".", "resample_filter", ")", "\n", "", "if", "self", ".", "is_last", "or", "self", ".", "architecture", "==", "\"skip\"", ":", "\n", "            ", "y", "=", "self", ".", "torgb", "(", "x", ",", "next", "(", "w_iter", ")", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "y", "=", "y", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ",", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "img", "=", "img", ".", "add_", "(", "y", ")", "if", "img", "is", "not", "None", "else", "y", "\n", "\n", "", "assert", "x", ".", "dtype", "==", "dtype", "\n", "assert", "img", "is", "None", "or", "img", ".", "dtype", "==", "torch", ".", "float32", "\n", "return", "x", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisNetwork.__init__": [[456, 494], ["super().__init__", "int", "max", "numpy.log2", "min", "stylegan2.SynthesisBlock", "setattr", "range"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output image resolution.", "\n", "img_channels", ",", "# Number of color channels.", "\n", "channel_base", "=", "32768", ",", "# Overall multiplier for the number of channels.", "\n", "channel_max", "=", "512", ",", "# Maximum number of channels in any layer.", "\n", "num_fp16_res", "=", "0", ",", "# Use FP16 for the N highest resolutions.", "\n", "**", "block_kwargs", ",", "# Arguments for SynthesisBlock.", "\n", ")", ":", "\n", "        ", "assert", "img_resolution", ">=", "4", "and", "img_resolution", "&", "(", "img_resolution", "-", "1", ")", "==", "0", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "img_resolution", ")", ")", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "block_resolutions", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "2", ",", "self", ".", "img_resolution_log2", "+", "1", ")", "]", "\n", "channels_dict", "=", "{", "res", ":", "min", "(", "channel_base", "//", "res", ",", "channel_max", ")", "for", "res", "in", "self", ".", "block_resolutions", "}", "\n", "fp16_resolution", "=", "max", "(", "2", "**", "(", "self", ".", "img_resolution_log2", "+", "1", "-", "num_fp16_res", ")", ",", "8", ")", "\n", "\n", "self", ".", "num_ws", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "in_channels", "=", "channels_dict", "[", "res", "//", "2", "]", "if", "res", ">", "4", "else", "0", "\n", "out_channels", "=", "channels_dict", "[", "res", "]", "\n", "use_fp16", "=", "(", "res", ">=", "fp16_resolution", ")", "\n", "is_last", "=", "(", "res", "==", "self", ".", "img_resolution", ")", "\n", "block", "=", "SynthesisBlock", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "w_dim", "=", "w_dim", ",", "\n", "resolution", "=", "res", ",", "\n", "img_channels", "=", "img_channels", ",", "\n", "is_last", "=", "is_last", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "**", "block_kwargs", ")", "\n", "self", ".", "num_ws", "+=", "block", ".", "num_conv", "\n", "if", "is_last", ":", "\n", "                ", "self", ".", "num_ws", "+=", "block", ".", "num_torgb", "\n", "", "setattr", "(", "self", ",", "f\"b{res}\"", ",", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.SynthesisNetwork.forward": [[495, 510], ["utils.assert_shape", "ws.to.to.to", "zip", "getattr", "block_ws.append", "getattr", "getattr.", "ws.to.to.narrow"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "", "def", "forward", "(", "self", ",", "ws", ",", "**", "block_kwargs", ")", ":", "\n", "        ", "block_ws", "=", "[", "]", "\n", "misc", ".", "assert_shape", "(", "ws", ",", "[", "None", ",", "self", ".", "num_ws", ",", "self", ".", "w_dim", "]", ")", "\n", "ws", "=", "ws", ".", "to", "(", "torch", ".", "float32", ")", "\n", "w_idx", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "block", "=", "getattr", "(", "self", ",", "f\"b{res}\"", ")", "\n", "block_ws", ".", "append", "(", "ws", ".", "narrow", "(", "1", ",", "w_idx", ",", "block", ".", "num_conv", "+", "block", ".", "num_torgb", ")", ")", "\n", "w_idx", "+=", "block", ".", "num_conv", "\n", "\n", "", "x", "=", "img", "=", "None", "\n", "for", "res", ",", "cur_ws", "in", "zip", "(", "self", ".", "block_resolutions", ",", "block_ws", ")", ":", "\n", "            ", "block", "=", "getattr", "(", "self", ",", "f\"b{res}\"", ")", "\n", "x", ",", "img", "=", "block", "(", "x", ",", "img", ",", "cur_ws", ",", "**", "block_kwargs", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Generator.__init__": [[513, 544], ["super().__init__", "stylegan2.SynthesisNetwork", "stylegan2.MappingNetwork"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "z_dim", ",", "# Input latent (Z) dimensionality.", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality.", "\n", "w_dim", ",", "# Intermediate latent (W) dimensionality.", "\n", "img_resolution", ",", "# Output resolution.", "\n", "img_channels", ",", "# Number of output color channels.", "\n", "MODEL", ",", "# MODEL config required for applying infoGAN", "\n", "mapping_kwargs", "=", "{", "}", ",", "# Arguments for MappingNetwork.", "\n", "synthesis_kwargs", "=", "{", "}", ",", "# Arguments for SynthesisNetwork.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "w_dim", "=", "w_dim", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "\n", "z_extra_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "z_extra_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "z_extra_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "self", ".", "z_dim", "+=", "z_extra_dim", "\n", "\n", "", "self", ".", "synthesis", "=", "SynthesisNetwork", "(", "w_dim", "=", "w_dim", ",", "img_resolution", "=", "img_resolution", ",", "img_channels", "=", "img_channels", ",", "**", "synthesis_kwargs", ")", "\n", "self", ".", "num_ws", "=", "self", ".", "synthesis", ".", "num_ws", "\n", "self", ".", "mapping", "=", "MappingNetwork", "(", "z_dim", "=", "self", ".", "z_dim", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "w_dim", ",", "num_ws", "=", "self", ".", "num_ws", ",", "**", "mapping_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Generator.forward": [[545, 549], ["stylegan2.Generator.mapping", "stylegan2.Generator.synthesis"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "c", ",", "eval", "=", "False", ",", "truncation_psi", "=", "1", ",", "truncation_cutoff", "=", "None", ",", "update_emas", "=", "False", ",", "**", "synthesis_kwargs", ")", ":", "\n", "        ", "ws", "=", "self", ".", "mapping", "(", "z", ",", "c", ",", "truncation_psi", "=", "truncation_psi", ",", "truncation_cutoff", "=", "truncation_cutoff", ",", "update_emas", "=", "update_emas", ")", "\n", "img", "=", "self", ".", "synthesis", "(", "ws", ",", "update_emas", "=", "update_emas", ",", "**", "synthesis_kwargs", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.DiscriminatorBlock.__init__": [[552, 627], ["super().__init__", "stylegan2.DiscriminatorBlock.register_buffer", "stylegan2.DiscriminatorBlock.__init__.trainable_gen"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "# Number of input channels, 0 = first block.", "\n", "tmp_channels", ",", "# Number of intermediate channels.", "\n", "out_channels", ",", "# Number of output channels.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "first_layer_idx", ",", "# Index of the first layer.", "\n", "architecture", "=", "\"resnet\"", ",", "# Architecture: \"orig\", \"skip\", \"resnet\".", "\n", "activation", "=", "\"lrelu\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "resample_filter", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "use_fp16", "=", "False", ",", "# Use FP16 for this block?", "\n", "fp16_channels_last", "=", "False", ",", "# Use channels-last memory format with FP16?", "\n", "freeze_layers", "=", "0", ",", "# Freeze-D: Number of layers to freeze.", "\n", ")", ":", "\n", "        ", "assert", "in_channels", "in", "[", "0", ",", "tmp_channels", "]", "\n", "assert", "architecture", "in", "[", "\"orig\"", ",", "\"skip\"", ",", "\"resnet\"", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "first_layer_idx", "=", "first_layer_idx", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "self", ".", "channels_last", "=", "(", "use_fp16", "and", "fp16_channels_last", ")", "\n", "self", ".", "register_buffer", "(", "\"resample_filter\"", ",", "upfirdn2d", ".", "setup_filter", "(", "resample_filter", ")", ")", "\n", "\n", "self", ".", "num_layers", "=", "0", "\n", "\n", "def", "trainable_gen", "(", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "layer_idx", "=", "self", ".", "first_layer_idx", "+", "self", ".", "num_layers", "\n", "trainable", "=", "(", "layer_idx", ">=", "freeze_layers", ")", "\n", "self", ".", "num_layers", "+=", "1", "\n", "yield", "trainable", "\n", "\n", "", "", "trainable_iter", "=", "trainable_gen", "(", ")", "\n", "\n", "if", "in_channels", "==", "0", "or", "architecture", "==", "\"skip\"", ":", "\n", "            ", "self", ".", "fromrgb", "=", "Conv2dLayer", "(", "img_channels", ",", "\n", "tmp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "activation", "=", "activation", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "", "self", ".", "conv0", "=", "Conv2dLayer", "(", "tmp_channels", ",", "\n", "tmp_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "activation", "=", "activation", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2dLayer", "(", "tmp_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "activation", "=", "activation", ",", "\n", "down", "=", "2", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "\n", "resample_filter", "=", "resample_filter", ",", "\n", "conv_clamp", "=", "conv_clamp", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n", "if", "architecture", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "skip", "=", "Conv2dLayer", "(", "tmp_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "down", "=", "2", ",", "\n", "trainable", "=", "next", "(", "trainable_iter", ")", ",", "\n", "resample_filter", "=", "resample_filter", ",", "\n", "channels_last", "=", "self", ".", "channels_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.DiscriminatorBlock.forward": [[628, 657], ["utils.assert_shape", "stylegan2.DiscriminatorBlock.to", "utils.assert_shape", "img.to.to.to", "stylegan2.DiscriminatorBlock.fromrgb", "stylegan2.DiscriminatorBlock.skip", "stylegan2.DiscriminatorBlock.conv0", "stylegan2.DiscriminatorBlock.conv1", "stylegan2.DiscriminatorBlock.add_", "stylegan2.DiscriminatorBlock.conv0", "stylegan2.DiscriminatorBlock.conv1", "utils.style_ops.upfirdn2d.downsample2d", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.upfirdn2d.downsample2d"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "force_fp32", "=", "False", ")", ":", "\n", "        ", "dtype", "=", "torch", ".", "float16", "if", "self", ".", "use_fp16", "and", "not", "force_fp32", "else", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "channels_last", "if", "self", ".", "channels_last", "and", "not", "force_fp32", "else", "torch", ".", "contiguous_format", "\n", "\n", "# Input.", "\n", "if", "x", "is", "not", "None", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "\n", "# FromRGB.", "\n", "", "if", "self", ".", "in_channels", "==", "0", "or", "self", ".", "architecture", "==", "\"skip\"", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "img", "=", "img", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "y", "=", "self", ".", "fromrgb", "(", "img", ")", "\n", "x", "=", "x", "+", "y", "if", "x", "is", "not", "None", "else", "y", "\n", "img", "=", "upfirdn2d", ".", "downsample2d", "(", "img", ",", "self", ".", "resample_filter", ")", "if", "self", ".", "architecture", "==", "\"skip\"", "else", "None", "\n", "\n", "# Main layers.", "\n", "", "if", "self", ".", "architecture", "==", "\"resnet\"", ":", "\n", "            ", "y", "=", "self", ".", "skip", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ",", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", ")", "\n", "x", "=", "y", ".", "add_", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "", "assert", "x", ".", "dtype", "==", "dtype", "\n", "return", "x", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.MinibatchStdLayer.__init__": [[660, 664], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "group_size", ",", "num_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.MinibatchStdLayer.forward": [[665, 681], ["torch.cat.reshape", "torch.cat.reshape", "y.repeat.repeat.square().mean", "y.repeat.repeat.mean", "y.repeat.repeat.reshape", "y.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.suppress_tracer_warnings", "y.repeat.repeat.mean", "torch.min", "torch.min", "torch.min", "torch.min", "y.repeat.repeat.square", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "            ", "G", "=", "torch", ".", "min", "(", "torch", ".", "as_tensor", "(", "self", ".", "group_size", ")", ",", "torch", ".", "as_tensor", "(", "N", ")", ")", "if", "self", ".", "group_size", "is", "not", "None", "else", "N", "\n", "", "F", "=", "self", ".", "num_channels", "\n", "c", "=", "C", "//", "F", "\n", "\n", "y", "=", "x", ".", "reshape", "(", "G", ",", "-", "1", ",", "F", ",", "c", ",", "H", ",", "W", ")", "# [GnFcHW] Split minibatch N into n groups of size G, and channels C into F groups of size c.", "\n", "y", "=", "y", "-", "y", ".", "mean", "(", "dim", "=", "0", ")", "# [GnFcHW] Subtract mean over group.", "\n", "y", "=", "y", ".", "square", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "# [nFcHW]  Calc variance over group.", "\n", "y", "=", "(", "y", "+", "1e-8", ")", ".", "sqrt", "(", ")", "# [nFcHW]  Calc stddev over group.", "\n", "y", "=", "y", ".", "mean", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "# [nF]     Take average over channels and pixels.", "\n", "y", "=", "y", ".", "reshape", "(", "-", "1", ",", "F", ",", "1", ",", "1", ")", "# [nF11]   Add missing dimensions.", "\n", "y", "=", "y", ".", "repeat", "(", "G", ",", "1", ",", "H", ",", "W", ")", "# [NFHW]   Replicate over group and pixels.", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "# [NCHW]   Append to input as new channels.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.DiscriminatorEpilogue.__init__": [[684, 709], ["super().__init__", "stylegan2.Conv2dLayer", "stylegan2.FullyConnectedLayer", "stylegan2.Conv2dLayer", "stylegan2.MinibatchStdLayer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "# Number of input channels.", "\n", "cmap_dim", ",", "# Dimensionality of mapped conditioning label, 0 = no label.", "\n", "resolution", ",", "# Resolution of this block.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "architecture", "=", "\"resnet\"", ",", "# Architecture: \"orig\", \"skip\", \"resnet\".", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, None = entire minibatch.", "\n", "mbstd_num_channels", "=", "1", ",", "# Number of features for the minibatch standard deviation layer, 0 = disable.", "\n", "activation", "=", "\"lrelu\"", ",", "# Activation function: \"relu\", \"lrelu\", etc.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", ")", ":", "\n", "        ", "assert", "architecture", "in", "[", "\"orig\"", ",", "\"skip\"", ",", "\"resnet\"", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "cmap_dim", "=", "cmap_dim", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "architecture", "=", "architecture", "\n", "\n", "if", "architecture", "==", "\"skip\"", ":", "\n", "            ", "self", ".", "fromrgb", "=", "Conv2dLayer", "(", "img_channels", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "activation", "=", "activation", ")", "\n", "", "self", ".", "mbstd", "=", "MinibatchStdLayer", "(", "group_size", "=", "mbstd_group_size", ",", "num_channels", "=", "mbstd_num_channels", ")", "if", "mbstd_num_channels", ">", "0", "else", "None", "\n", "self", ".", "conv", "=", "Conv2dLayer", "(", "in_channels", "+", "mbstd_num_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "activation", ",", "conv_clamp", "=", "conv_clamp", ")", "\n", "self", ".", "fc", "=", "FullyConnectedLayer", "(", "in_channels", "*", "(", "resolution", "**", "2", ")", ",", "in_channels", ",", "activation", "=", "activation", ")", "\n", "# self.out = FullyConnectedLayer(in_channels, 1 if cmap_dim == 0 else cmap_dim)", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.DiscriminatorEpilogue.forward": [[711, 732], ["utils.assert_shape", "stylegan2.DiscriminatorEpilogue.to", "stylegan2.DiscriminatorEpilogue.conv", "stylegan2.DiscriminatorEpilogue.fc", "utils.assert_shape", "img.to.to.to", "stylegan2.DiscriminatorEpilogue.mbstd", "stylegan2.DiscriminatorEpilogue.flatten", "stylegan2.DiscriminatorEpilogue.fromrgb"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape"], ["", "def", "forward", "(", "self", ",", "x", ",", "img", ",", "force_fp32", "=", "False", ")", ":", "\n", "        ", "misc", ".", "assert_shape", "(", "x", ",", "[", "None", ",", "self", ".", "in_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "# [NCHW]", "\n", "_", "=", "force_fp32", "# unused", "\n", "dtype", "=", "torch", ".", "float32", "\n", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "# FromRGB.", "\n", "x", "=", "x", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "if", "self", ".", "architecture", "==", "\"skip\"", ":", "\n", "            ", "misc", ".", "assert_shape", "(", "img", ",", "[", "None", ",", "self", ".", "img_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", ")", "\n", "img", "=", "img", ".", "to", "(", "dtype", "=", "dtype", ",", "memory_format", "=", "memory_format", ")", "\n", "x", "=", "x", "+", "self", ".", "fromrgb", "(", "img", ")", "\n", "\n", "# Main layers.", "\n", "", "if", "self", ".", "mbstd", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "mbstd", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ".", "flatten", "(", "1", ")", ")", "\n", "# x = self.out(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Discriminator.__init__": [[735, 841], ["super().__init__", "int", "max", "dict", "stylegan2.DiscriminatorEpilogue", "numpy.log2", "min", "stylegan2.DiscriminatorBlock", "setattr", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "range", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.FullyConnectedLayer", "stylegan2.MappingNetwork", "stylegan2.FullyConnectedLayer", "stylegan2.MappingNetwork", "stylegan2.FullyConnectedLayer", "stylegan2.MappingNetwork"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_dim", ",", "# Conditioning label (C) dimensionality.", "\n", "img_resolution", ",", "# Input resolution.", "\n", "img_channels", ",", "# Number of input color channels.", "\n", "architecture", "=", "\"resnet\"", ",", "# Architecture: \"orig\", \"skip\", \"resnet\".", "\n", "channel_base", "=", "32768", ",", "# Overall multiplier for the number of channels.", "\n", "channel_max", "=", "512", ",", "# Maximum number of channels in any layer.", "\n", "num_fp16_res", "=", "0", ",", "# Use FP16 for the N highest resolutions.", "\n", "conv_clamp", "=", "None", ",", "# Clamp the output of convolution layers to +-X, None = disable clamping.", "\n", "cmap_dim", "=", "None", ",", "# Dimensionality of mapped conditioning label, None = default.", "\n", "d_cond_mtd", "=", "None", ",", "# conditioning method of the discriminator", "\n", "aux_cls_type", "=", "None", ",", "# type of auxiliary classifier", "\n", "d_embed_dim", "=", "None", ",", "# dimension of feature maps after convolution operations", "\n", "num_classes", "=", "None", ",", "# number of classes", "\n", "normalize_d_embed", "=", "None", ",", "# whether to normalize the feature maps or not", "\n", "block_kwargs", "=", "{", "}", ",", "# Arguments for DiscriminatorBlock.", "\n", "mapping_kwargs", "=", "{", "}", ",", "# Arguments for MappingNetwork.", "\n", "epilogue_kwargs", "=", "{", "}", ",", "# Arguments for DiscriminatorEpilogue.", "\n", "MODEL", "=", "None", ",", "# needed to check options for infoGAN", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_dim", "=", "c_dim", "\n", "self", ".", "img_resolution", "=", "img_resolution", "\n", "self", ".", "img_channels", "=", "img_channels", "\n", "self", ".", "cmap_dim", "=", "cmap_dim", "\n", "self", ".", "d_cond_mtd", "=", "d_cond_mtd", "\n", "self", ".", "aux_cls_type", "=", "aux_cls_type", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "normalize_d_embed", "=", "normalize_d_embed", "\n", "self", ".", "img_resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "img_resolution", ")", ")", "\n", "self", ".", "block_resolutions", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "self", ".", "img_resolution_log2", ",", "2", ",", "-", "1", ")", "]", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "channels_dict", "=", "{", "res", ":", "min", "(", "channel_base", "//", "res", ",", "channel_max", ")", "for", "res", "in", "self", ".", "block_resolutions", "+", "[", "4", "]", "}", "\n", "fp16_resolution", "=", "max", "(", "2", "**", "(", "self", ".", "img_resolution_log2", "+", "1", "-", "num_fp16_res", ")", ",", "8", ")", "\n", "\n", "if", "self", ".", "cmap_dim", "is", "None", ":", "\n", "            ", "self", ".", "cmap_dim", "=", "channels_dict", "[", "4", "]", "\n", "", "if", "c_dim", "==", "0", ":", "\n", "            ", "self", ".", "cmap_dim", "=", "0", "\n", "\n", "", "common_kwargs", "=", "dict", "(", "img_channels", "=", "img_channels", ",", "architecture", "=", "architecture", ",", "conv_clamp", "=", "conv_clamp", ")", "\n", "cur_layer_idx", "=", "0", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "in_channels", "=", "channels_dict", "[", "res", "]", "if", "res", "<", "img_resolution", "else", "0", "\n", "tmp_channels", "=", "channels_dict", "[", "res", "]", "\n", "out_channels", "=", "channels_dict", "[", "res", "//", "2", "]", "\n", "use_fp16", "=", "(", "res", ">=", "fp16_resolution", ")", "\n", "block", "=", "DiscriminatorBlock", "(", "in_channels", ",", "\n", "tmp_channels", ",", "\n", "out_channels", ",", "\n", "resolution", "=", "res", ",", "\n", "first_layer_idx", "=", "cur_layer_idx", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "**", "block_kwargs", ",", "\n", "**", "common_kwargs", ")", "\n", "setattr", "(", "self", ",", "f\"b{res}\"", ",", "block", ")", "\n", "cur_layer_idx", "+=", "block", ".", "num_layers", "\n", "\n", "", "self", ".", "b4", "=", "DiscriminatorEpilogue", "(", "channels_dict", "[", "4", "]", ",", "cmap_dim", "=", "self", ".", "cmap_dim", ",", "resolution", "=", "4", ",", "**", "epilogue_kwargs", ",", "**", "common_kwargs", ")", "\n", "\n", "# linear layer for adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "==", "\"MH\"", ":", "\n", "            ", "self", ".", "linear1", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "1", "+", "self", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "self", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"SPD\"", ":", "\n", "            ", "self", ".", "linear1", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "1", "if", "self", ".", "cmap_dim", "==", "0", "else", "self", ".", "cmap_dim", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# double num_classes for Auxiliary Discriminative Classifier", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "num_classes", ",", "c_dim", "=", "num_classes", "*", "2", ",", "c_dim", "*", "2", "\n", "\n", "# linear and embedding layers for discriminator conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "self", ".", "linear2", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "self", ".", "linear2", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "self", ".", "cmap_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"SPD\"", ":", "\n", "            ", "self", ".", "mapping", "=", "MappingNetwork", "(", "z_dim", "=", "0", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "self", ".", "cmap_dim", ",", "num_ws", "=", "None", ",", "w_avg_beta", "=", "None", ",", "**", "mapping_kwargs", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "self", ".", "linear2", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding", "=", "MappingNetwork", "(", "z_dim", "=", "0", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "d_embed_dim", ",", "num_ws", "=", "None", ",", "w_avg_beta", "=", "None", ",", "num_layers", "=", "1", ",", "**", "mapping_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "# linear and embedding layers for evolved classifier-based GAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "self", ".", "linear_mi", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "self", ".", "linear_mi", "=", "FullyConnectedLayer", "(", "channels_dict", "[", "4", "]", ",", "d_embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "embedding_mi", "=", "MappingNetwork", "(", "z_dim", "=", "0", ",", "c_dim", "=", "c_dim", ",", "w_dim", "=", "d_embed_dim", ",", "num_ws", "=", "None", ",", "w_avg_beta", "=", "None", ",", "num_layers", "=", "1", ",", "**", "mapping_kwargs", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "# Q head network for infoGAN", "\n", "", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "self", ".", "info_discrete_linear", "=", "FullyConnectedLayer", "(", "in_features", "=", "channels_dict", "[", "4", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "out_features", "=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "self", ".", "info_conti_mu_linear", "=", "FullyConnectedLayer", "(", "in_features", "=", "channels_dict", "[", "4", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "self", ".", "info_conti_var_linear", "=", "FullyConnectedLayer", "(", "in_features", "=", "channels_dict", "[", "4", "]", ",", "out_features", "=", "out_features", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.Discriminator.forward": [[842, 924], ["stylegan2.Discriminator.b4", "torch.one_hot", "torch.one_hot", "getattr", "getattr.", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "stylegan2.Discriminator.info_discrete_linear", "stylegan2.Discriminator.info_conti_mu_linear", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "stylegan2.Discriminator.linear2", "stylegan2.Discriminator.linear1", "stylegan2.Discriminator.info_conti_var_linear", "stylegan2.Discriminator.linear2.parameters", "torch.normalize", "torch.normalize", "stylegan2.Discriminator.linear_mi", "torch.normalize", "torch.normalize", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "stylegan2.Discriminator.linear1", "stylegan2.Discriminator.mapping", "stylegan2.Discriminator.linear_mi.parameters", "stylegan2.Discriminator.linear_mi", "stylegan2.Discriminator.embedding_mi", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "stylegan2.Discriminator.linear2", "stylegan2.Discriminator.embedding", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "stylegan2.Discriminator.embedding", "numpy.sqrt", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "label.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.embedding"], ["", "", "def", "forward", "(", "self", ",", "img", ",", "label", ",", "eval", "=", "False", ",", "adc_fake", "=", "False", ",", "update_emas", "=", "False", ",", "**", "block_kwargs", ")", ":", "\n", "        ", "_", "=", "update_emas", "# unused", "\n", "x", ",", "embed", ",", "proxy", ",", "cls_output", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "mi_embed", ",", "mi_proxy", ",", "mi_cls_output", "=", "None", ",", "None", ",", "None", "\n", "info_discrete_c_logits", ",", "info_conti_mu", ",", "info_conti_var", "=", "None", ",", "None", ",", "None", "\n", "for", "res", "in", "self", ".", "block_resolutions", ":", "\n", "            ", "block", "=", "getattr", "(", "self", ",", "f\"b{res}\"", ")", "\n", "x", ",", "img", "=", "block", "(", "x", ",", "img", ",", "**", "block_kwargs", ")", "\n", "", "h", "=", "self", ".", "b4", "(", "x", ",", "img", ")", "\n", "\n", "# adversarial training", "\n", "if", "self", ".", "d_cond_mtd", "!=", "\"SPD\"", ":", "\n", "            ", "adv_output", "=", "torch", ".", "squeeze", "(", "self", ".", "linear1", "(", "h", ")", ")", "\n", "\n", "# make class labels odd (for fake) or even (for real) for ADC", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", ":", "\n", "            ", "if", "adc_fake", ":", "\n", "                ", "label", "=", "label", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "label", "*", "2", "\n", "", "", "oh_label", "=", "F", ".", "one_hot", "(", "label", ",", "self", ".", "num_classes", "*", "2", "if", "self", ".", "aux_cls_type", "==", "\"ADC\"", "else", "self", ".", "num_classes", ")", "\n", "\n", "# forward pass through InfoGAN Q head", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_discrete_c_logits", "=", "self", ".", "info_discrete_linear", "(", "h", ")", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_conti_mu", "=", "self", ".", "info_conti_mu_linear", "(", "h", ")", "\n", "info_conti_var", "=", "torch", ".", "exp", "(", "self", ".", "info_conti_var_linear", "(", "h", ")", ")", "\n", "\n", "# class conditioning", "\n", "", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "            ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                ", "for", "W", "in", "self", ".", "linear2", ".", "parameters", "(", ")", ":", "\n", "                    ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "h", "=", "F", ".", "normalize", "(", "h", ",", "dim", "=", "1", ")", "\n", "", "cls_output", "=", "self", ".", "linear2", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"PD\"", ":", "\n", "            ", "adv_output", "=", "adv_output", "+", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "self", ".", "embedding", "(", "None", ",", "oh_label", ")", ",", "h", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "==", "\"SPD\"", ":", "\n", "            ", "embed", "=", "self", ".", "linear1", "(", "h", ")", "\n", "cmap", "=", "self", ".", "mapping", "(", "None", ",", "oh_label", ")", "\n", "adv_output", "=", "(", "embed", "*", "cmap", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "self", ".", "cmap_dim", ")", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "            ", "embed", "=", "self", ".", "linear2", "(", "h", ")", "\n", "proxy", "=", "self", ".", "embedding", "(", "None", ",", "oh_label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "normalize", "(", "embed", ",", "dim", "=", "1", ")", "\n", "proxy", "=", "F", ".", "normalize", "(", "proxy", ",", "dim", "=", "1", ")", "\n", "", "", "elif", "self", ".", "d_cond_mtd", "==", "\"MD\"", ":", "\n", "            ", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "label", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "adv_output", "=", "adv_output", "[", "idx", ",", "label", "]", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"W/O\"", ",", "\"MH\"", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# extra conditioning for TACGAN and ADCGAN", "\n", "", "if", "self", ".", "aux_cls_type", "==", "\"TAC\"", ":", "\n", "            ", "if", "self", ".", "d_cond_mtd", "==", "\"AC\"", ":", "\n", "                ", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "for", "W", "in", "self", ".", "linear_mi", ".", "parameters", "(", ")", ":", "\n", "                        ", "W", "=", "F", ".", "normalize", "(", "W", ",", "dim", "=", "1", ")", "\n", "", "", "mi_cls_output", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "", "elif", "self", ".", "d_cond_mtd", "in", "[", "\"2C\"", ",", "\"D2DCE\"", "]", ":", "\n", "                ", "mi_embed", "=", "self", ".", "linear_mi", "(", "h", ")", "\n", "mi_proxy", "=", "self", ".", "embedding_mi", "(", "None", ",", "oh_label", ")", "\n", "if", "self", ".", "normalize_d_embed", ":", "\n", "                    ", "mi_embed", "=", "F", ".", "normalize", "(", "mi_embed", ",", "dim", "=", "1", ")", "\n", "mi_proxy", "=", "F", ".", "normalize", "(", "mi_proxy", ",", "dim", "=", "1", ")", "\n", "", "", "", "return", "{", "\n", "\"h\"", ":", "h", ",", "\n", "\"adv_output\"", ":", "adv_output", ",", "\n", "\"embed\"", ":", "embed", ",", "\n", "\"proxy\"", ":", "proxy", ",", "\n", "\"cls_output\"", ":", "cls_output", ",", "\n", "\"label\"", ":", "label", ",", "\n", "\"mi_embed\"", ":", "mi_embed", ",", "\n", "\"mi_proxy\"", ":", "mi_proxy", ",", "\n", "\"mi_cls_output\"", ":", "mi_cls_output", ",", "\n", "\"info_discrete_c_logits\"", ":", "info_discrete_c_logits", ",", "\n", "\"info_conti_mu\"", ":", "info_conti_mu", ",", "\n", "\"info_conti_var\"", ":", "info_conti_var", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.normalize_2nd_moment": [[24, 26], ["x.square().mean", "x.square"], "function", ["None"], ["def", "normalize_2nd_moment", "(", "x", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "x", "*", "(", "x", ".", "square", "(", ")", ".", "mean", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "eps", ")", ".", "rsqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.models.stylegan2.modulated_conv2d": [[28, 99], ["utils.assert_shape", "utils.assert_shape", "utils.assert_shape", "utils.assert_shape", "x.add_.reshape", "weight.unsqueeze.reshape", "utils.style_ops.conv2d_resample.conv2d_resample", "x.add_.reshape", "weight.unsqueeze", "utils.style_ops.conv2d_resample.conv2d_resample", "utils.suppress_tracer_warnings", "int", "x.add_.add_", "styles.norm", "styles.reshape", "dcoefs.reshape", "styles.to().reshape", "utils.style_ops.fma.fma", "weight.unsqueeze.to", "weight.norm", "float", "weight.to", "dcoefs.to().reshape", "noise.to", "numpy.sqrt", "float", "weight.unsqueeze.square().sum", "styles.to", "dcoefs.to().reshape", "x.add_.add_", "dcoefs.to", "noise.to", "weight.unsqueeze.square", "dcoefs.to"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.style_misc.assert_shape", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.conv2d_resample.conv2d_resample", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.style_ops.fma.fma"], ["", "def", "modulated_conv2d", "(", "\n", "x", ",", "# Input tensor of shape [batch_size, in_channels, in_height, in_width].", "\n", "weight", ",", "# Weight tensor of shape [out_channels, in_channels, kernel_height, kernel_width].", "\n", "styles", ",", "# Modulation coefficients of shape [batch_size, in_channels].", "\n", "noise", "=", "None", ",", "# Optional noise tensor to add to the output activations.", "\n", "up", "=", "1", ",", "# Integer upsampling factor.", "\n", "down", "=", "1", ",", "# Integer downsampling factor.", "\n", "padding", "=", "0", ",", "# Padding with respect to the upsampled image.", "\n", "resample_filter", "=", "None", ",", "# Low-pass filter to apply when resampling activations. Must be prepared beforehand by calling upfirdn2d.setup_filter().", "\n", "demodulate", "=", "True", ",", "# Apply weight demodulation?", "\n", "flip_weight", "=", "True", ",", "# False = convolution, True = correlation (matches torch.nn.functional.conv2d).", "\n", "fused_modconv", "=", "True", ",", "# Perform modulation, convolution, and demodulation as a single fused operation?", "\n", ")", ":", "\n", "    ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "=", "weight", ".", "shape", "\n", "misc", ".", "assert_shape", "(", "weight", ",", "[", "out_channels", ",", "in_channels", ",", "kh", ",", "kw", "]", ")", "# [OIkk]", "\n", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "in_channels", ",", "None", ",", "None", "]", ")", "# [NIHW]", "\n", "misc", ".", "assert_shape", "(", "styles", ",", "[", "batch_size", ",", "in_channels", "]", ")", "# [NI]", "\n", "\n", "# Pre-normalize inputs to avoid FP16 overflow.", "\n", "if", "x", ".", "dtype", "==", "torch", ".", "float16", "and", "demodulate", ":", "\n", "        ", "weight", "=", "weight", "*", "(", "1", "/", "np", ".", "sqrt", "(", "in_channels", "*", "kh", "*", "kw", ")", "/", "weight", ".", "norm", "(", "float", "(", "\"inf\"", ")", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", ")", "# max_Ikk", "\n", "styles", "=", "styles", "/", "styles", ".", "norm", "(", "float", "(", "\"inf\"", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# max_I", "\n", "\n", "# Calculate per-sample weights and demodulation coefficients.", "\n", "", "w", "=", "None", "\n", "dcoefs", "=", "None", "\n", "if", "demodulate", "or", "fused_modconv", ":", "\n", "        ", "w", "=", "weight", ".", "unsqueeze", "(", "0", ")", "# [NOIkk]", "\n", "w", "=", "w", "*", "styles", ".", "reshape", "(", "batch_size", ",", "1", ",", "-", "1", ",", "1", ",", "1", ")", "# [NOIkk]", "\n", "", "if", "demodulate", ":", "\n", "        ", "dcoefs", "=", "(", "w", ".", "square", "(", ")", ".", "sum", "(", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ")", "+", "1e-8", ")", ".", "rsqrt", "(", ")", "# [NO]", "\n", "", "if", "demodulate", "and", "fused_modconv", ":", "\n", "        ", "w", "=", "w", "*", "dcoefs", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "# [NOIkk]", "\n", "\n", "# Execute by scaling the activations before and after the convolution.", "\n", "", "if", "not", "fused_modconv", ":", "\n", "        ", "x", "=", "x", "*", "styles", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "\n", "w", "=", "weight", ".", "to", "(", "x", ".", "dtype", ")", ",", "\n", "f", "=", "resample_filter", ",", "\n", "up", "=", "up", ",", "\n", "down", "=", "down", ",", "\n", "padding", "=", "padding", ",", "\n", "flip_weight", "=", "flip_weight", ")", "\n", "if", "demodulate", "and", "noise", "is", "not", "None", ":", "\n", "            ", "x", "=", "fma", ".", "fma", "(", "x", ",", "dcoefs", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", ",", "noise", ".", "to", "(", "x", ".", "dtype", ")", ")", "\n", "", "elif", "demodulate", ":", "\n", "            ", "x", "=", "x", "*", "dcoefs", ".", "to", "(", "x", ".", "dtype", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "elif", "noise", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "add_", "(", "noise", ".", "to", "(", "x", ".", "dtype", ")", ")", "\n", "", "return", "x", "\n", "\n", "# Execute as one fused op using grouped convolution.", "\n", "", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "batch_size", "=", "int", "(", "batch_size", ")", "\n", "", "misc", ".", "assert_shape", "(", "x", ",", "[", "batch_size", ",", "in_channels", ",", "None", ",", "None", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "1", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "w", "=", "w", ".", "reshape", "(", "-", "1", ",", "in_channels", ",", "kh", ",", "kw", ")", "\n", "x", "=", "conv2d_resample", ".", "conv2d_resample", "(", "x", "=", "x", ",", "\n", "w", "=", "w", ".", "to", "(", "x", ".", "dtype", ")", ",", "\n", "f", "=", "resample_filter", ",", "\n", "up", "=", "up", ",", "\n", "down", "=", "down", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "batch_size", ",", "\n", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "if", "noise", "is", "not", "None", ":", "\n", "        ", "x", "=", "x", ".", "add_", "(", "noise", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.__init__": [[44, 99], ["object.__init__", "utils.SaveOutput", "utils.SaveOutput", "utils.SaveOutput", "utils.build_resizer", "utils.build_resizer", "utils.build_resizer", "torchvision.ToTensor", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "metrics.inception_net.InceptionV3().to", "metrics.inception_net.InceptionV3().to", "metrics.inception_net.InceptionV3().to", "metrics.inception_net.InceptionV3().to", "utils.make_model_require_grad", "utils.make_model_require_grad", "utils.make_model_require_grad", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "torch.hub.load", "preparation.LoadEvalModel.model.to", "preparation.LoadEvalModel.model.named_children", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "metrics.inception_net.InceptionV3", "metrics.inception_net.InceptionV3", "metrics.inception_net.InceptionV3", "metrics.inception_net.InceptionV3", "preparation.LoadEvalModel.model.fc.load_state_dict", "utils.load_pretrained_weights", "utils.load_pretrained_weights", "utils.load_pretrained_weights", "utils.load_pretrained_linear_weights", "utils.load_pretrained_linear_weights", "utils.load_pretrained_linear_weights", "preparation.LoadEvalModel.model.to", "load_state_dict_from_url", "k.replace", "layer.register_forward_pre_hook", "hook_handles.append", "metrics.swin_transformer.SwinTransformer", "metrics.swin_transformer.SwinTransformer", "metrics.swin_transformer.SwinTransformer", "metrics.swin_transformer.SwinTransformer", "preparation.LoadEvalModel.model.load_state_dict", "preparation.LoadEvalModel.model.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "linear_state_dict.items", "load_state_dict_from_url"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.resize.build_resizer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_model_require_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_model_require_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.make_model_require_grad", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_linear_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_linear_weights", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_pretrained_linear_weights"], ["    ", "def", "__init__", "(", "self", ",", "eval_backbone", ",", "post_resizer", ",", "world_size", ",", "distributed_data_parallel", ",", "device", ")", ":", "\n", "        ", "super", "(", "LoadEvalModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eval_backbone", "=", "eval_backbone", "\n", "self", ".", "post_resizer", "=", "post_resizer", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "save_output", "=", "misc", ".", "SaveOutput", "(", ")", "\n", "\n", "if", "self", ".", "eval_backbone", "==", "\"InceptionV3_tf\"", ":", "\n", "            ", "self", ".", "res", ",", "mean", ",", "std", "=", "299", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "self", ".", "model", "=", "InceptionV3", "(", "resize_input", "=", "False", ",", "normalize_input", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "self", ".", "eval_backbone", "in", "[", "\"InceptionV3_torch\"", ",", "\"ResNet50_torch\"", ",", "\"SwAV_torch\"", "]", ":", "\n", "            ", "self", ".", "res", "=", "299", "if", "\"InceptionV3\"", "in", "self", ".", "eval_backbone", "else", "224", "\n", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "self", ".", "model", "=", "torch", ".", "hub", ".", "load", "(", "model_versions", "[", "self", ".", "eval_backbone", "]", ",", "\n", "model_names", "[", "self", ".", "eval_backbone", "]", ",", "\n", "pretrained", "=", "True", ")", "\n", "if", "self", ".", "eval_backbone", "==", "\"SwAV_torch\"", ":", "\n", "                ", "linear_state_dict", "=", "load_state_dict_from_url", "(", "SWAV_CLASSIFIER_URL", ",", "progress", "=", "True", ")", "[", "\"state_dict\"", "]", "\n", "linear_state_dict", "=", "{", "k", ".", "replace", "(", "\"module.linear.\"", ",", "\"\"", ")", ":", "v", "for", "k", ",", "v", "in", "linear_state_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "model", ".", "fc", ".", "load_state_dict", "(", "linear_state_dict", ",", "strict", "=", "True", ")", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "hook_handles", "=", "[", "]", "\n", "for", "name", ",", "layer", "in", "self", ".", "model", ".", "named_children", "(", ")", ":", "\n", "                ", "if", "name", "==", "\"fc\"", ":", "\n", "                    ", "handle", "=", "layer", ".", "register_forward_pre_hook", "(", "self", ".", "save_output", ")", "\n", "hook_handles", ".", "append", "(", "handle", ")", "\n", "", "", "", "elif", "self", ".", "eval_backbone", "==", "\"DINO_torch\"", ":", "\n", "            ", "self", ".", "res", ",", "mean", ",", "std", "=", "224", ",", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "self", ".", "model", "=", "vits", ".", "__dict__", "[", "\"vit_small\"", "]", "(", "patch_size", "=", "8", ",", "num_classes", "=", "1000", ",", "num_last_blocks", "=", "4", ")", "\n", "misc", ".", "load_pretrained_weights", "(", "self", ".", "model", ",", "\"\"", ",", "\"teacher\"", ",", "\"vit_small\"", ",", "8", ")", "\n", "misc", ".", "load_pretrained_linear_weights", "(", "self", ".", "model", ".", "linear", ",", "\"vit_small\"", ",", "8", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "self", ".", "eval_backbone", "==", "\"Swin-T_torch\"", ":", "\n", "            ", "self", ".", "res", ",", "mean", ",", "std", "=", "224", ",", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "self", ".", "model", "=", "SwinTransformer", "(", ")", "\n", "model_state_dict", "=", "load_state_dict_from_url", "(", "SWIN_URL", ",", "progress", "=", "True", ")", "[", "\"model\"", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "model_state_dict", ",", "strict", "=", "True", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "resizer", "=", "resize", ".", "build_resizer", "(", "resizer", "=", "self", ".", "post_resizer", ",", "backbone", "=", "self", ".", "eval_backbone", ",", "size", "=", "self", ".", "res", ")", "\n", "self", ".", "totensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "std", "=", "torch", ".", "Tensor", "(", "std", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "world_size", ">", "1", "and", "distributed_data_parallel", ":", "\n", "            ", "misc", ".", "make_model_require_grad", "(", "self", ".", "model", ")", "\n", "self", ".", "model", "=", "DDP", "(", "self", ".", "model", ",", "\n", "device_ids", "=", "[", "self", ".", "device", "]", ",", "\n", "broadcast_buffers", "=", "False", "if", "self", ".", "eval_backbone", "==", "\"Swin-T_torch\"", "else", "True", ")", "\n", "", "elif", "world_size", ">", "1", "and", "distributed_data_parallel", "is", "False", ":", "\n", "            ", "self", ".", "model", "=", "DataParallel", "(", "self", ".", "model", ",", "output_device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval": [[100, 102], ["preparation.LoadEvalModel.model.eval"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs": [[103, 123], ["utils.resize_images", "utils.resize_images", "utils.resize_images", "utils.quantize_images", "utils.quantize_images", "utils.quantize_images", "x.detach().cpu().numpy().astype.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "preparation.LoadEvalModel.model", "preparation.LoadEvalModel.model", "preparation.LoadEvalModel.save_output.clear", "x.detach().cpu().numpy().astype.detach().cpu().numpy().astype.detach().cpu().numpy", "len", "range", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "[].to", "len", "[].to.append", "x.detach().cpu().numpy().astype.detach().cpu().numpy().astype.detach().cpu", "[].detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.detach().cpu().numpy().astype.detach().cpu().numpy().astype.detach", "[].detach"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.resize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.quantize_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.SaveOutput.clear"], ["", "def", "get_outputs", "(", "self", ",", "x", ",", "quantize", "=", "False", ")", ":", "\n", "        ", "if", "quantize", ":", "\n", "            ", "x", "=", "ops", ".", "quantize_images", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "x", "=", "ops", ".", "resize_images", "(", "x", ",", "self", ".", "resizer", ",", "self", ".", "totensor", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "eval_backbone", "in", "[", "\"InceptionV3_tf\"", ",", "\"DINO_torch\"", ",", "\"Swin-T_torch\"", "]", ":", "\n", "            ", "repres", ",", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "", "elif", "self", ".", "eval_backbone", "in", "[", "\"InceptionV3_torch\"", ",", "\"ResNet50_torch\"", ",", "\"SwAV_torch\"", "]", ":", "\n", "            ", "logits", "=", "self", ".", "model", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "save_output", ".", "outputs", ")", ">", "1", ":", "\n", "                ", "repres", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "len", "(", "self", ".", "save_output", ".", "outputs", ")", ")", ":", "\n", "                    ", "repres", ".", "append", "(", "self", ".", "save_output", ".", "outputs", "[", "rank", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "repres", "=", "torch", ".", "cat", "(", "repres", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "repres", "=", "self", ".", "save_output", ".", "outputs", "[", "0", "]", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "self", ".", "save_output", ".", "clear", "(", ")", "\n", "", "return", "repres", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.prepare_moments": [[125, 156], ["eval_model.eval", "os.path.join", "os.path.join", "os.path.isfile", "os.path.exists", "os.makedirs", "metrics.calculate_moments", "numpy.savez", "numpy.load", "numpy.load", "logger.info", "logger.info", "str"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments"], ["", "", "def", "prepare_moments", "(", "data_loader", ",", "eval_model", ",", "quantize", ",", "cfgs", ",", "logger", ",", "device", ")", ":", "\n", "    ", "disable_tqdm", "=", "device", "!=", "0", "\n", "eval_model", ".", "eval", "(", ")", "\n", "moment_dir", "=", "join", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "\"moments\"", ")", "\n", "if", "not", "exists", "(", "moment_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "moment_dir", ")", "\n", "", "moment_path", "=", "join", "(", "moment_dir", ",", "cfgs", ".", "DATA", ".", "name", "+", "\"_\"", "+", "str", "(", "cfgs", ".", "DATA", ".", "img_size", ")", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "pre_resizer", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "ref_dataset", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "post_resizer", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "eval_backbone", "+", "\"_moments.npz\"", ")", "\n", "\n", "is_file", "=", "os", ".", "path", ".", "isfile", "(", "moment_path", ")", "\n", "if", "is_file", ":", "\n", "        ", "mu", "=", "np", ".", "load", "(", "moment_path", ")", "[", "\"mu\"", "]", "\n", "sigma", "=", "np", ".", "load", "(", "moment_path", ")", "[", "\"sigma\"", "]", "\n", "", "else", ":", "\n", "        ", "if", "device", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Calculate moments of {ref} dataset using {eval_backbone} model.\"", ".", "format", "(", "ref", "=", "cfgs", ".", "RUN", ".", "ref_dataset", ",", "eval_backbone", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ")", ")", "\n", "", "mu", ",", "sigma", "=", "fid", ".", "calculate_moments", "(", "data_loader", "=", "data_loader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "num_generate", "=", "\"N/A\"", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "quantize", "=", "quantize", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ",", "\n", "fake_feats", "=", "None", ")", "\n", "\n", "if", "device", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Save calculated means and covariances to disk.\"", ")", "\n", "", "np", ".", "savez", "(", "moment_path", ",", "**", "{", "\"mu\"", ":", "mu", ",", "\"sigma\"", ":", "sigma", "}", ")", "\n", "", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.prepare_real_feats": [[158, 189], ["eval_model.eval", "os.path.join", "os.path.join", "os.path.isfile", "os.path.exists", "os.makedirs", "metrics.stack_features", "numpy.load", "logger.info", "logger.info", "numpy.savez", "str"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.stack_features"], ["", "def", "prepare_real_feats", "(", "data_loader", ",", "eval_model", ",", "num_feats", ",", "quantize", ",", "cfgs", ",", "logger", ",", "device", ")", ":", "\n", "    ", "disable_tqdm", "=", "device", "!=", "0", "\n", "eval_model", ".", "eval", "(", ")", "\n", "feat_dir", "=", "join", "(", "cfgs", ".", "RUN", ".", "save_dir", ",", "\"feats\"", ")", "\n", "if", "not", "exists", "(", "feat_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "feat_dir", ")", "\n", "", "feat_path", "=", "join", "(", "feat_dir", ",", "cfgs", ".", "DATA", ".", "name", "+", "\"_\"", "+", "str", "(", "cfgs", ".", "DATA", ".", "img_size", ")", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "pre_resizer", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "ref_dataset", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "post_resizer", "+", "\"_\"", "+", "cfgs", ".", "RUN", ".", "eval_backbone", "+", "\"_feats.npz\"", ")", "\n", "\n", "is_file", "=", "os", ".", "path", ".", "isfile", "(", "feat_path", ")", "\n", "if", "is_file", ":", "\n", "        ", "real_feats", "=", "np", ".", "load", "(", "feat_path", ")", "[", "\"real_feats\"", "]", "\n", "", "else", ":", "\n", "        ", "if", "device", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Calculate features of {ref} dataset using {eval_backbone} model.\"", ".", "format", "(", "ref", "=", "cfgs", ".", "RUN", ".", "ref_dataset", ",", "eval_backbone", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ")", ")", "\n", "", "real_feats", ",", "real_probs", ",", "real_labels", "=", "features", ".", "stack_features", "(", "data_loader", "=", "data_loader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "num_feats", "=", "num_feats", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "quantize", "=", "quantize", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "device", "=", "device", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ")", "\n", "if", "device", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Save real_features to disk.\"", ")", "\n", "np", ".", "savez", "(", "feat_path", ",", "**", "{", "\"real_feats\"", ":", "real_feats", ",", "\n", "\"real_probs\"", ":", "real_probs", ",", "\n", "\"real_labels\"", ":", "real_labels", "}", ")", "\n", "", "", "return", "real_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.calculate_ins": [[191, 214], ["metrics.eval_dataset", "logger.info", "logger.info", "logger.info", "logger.info", "str", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_dataset"], ["", "def", "calculate_ins", "(", "data_loader", ",", "eval_model", ",", "quantize", ",", "splits", ",", "cfgs", ",", "logger", ",", "device", ")", ":", "\n", "    ", "disable_tqdm", "=", "device", "!=", "0", "\n", "is_acc", "=", "True", "if", "\"ImageNet\"", "in", "cfgs", ".", "DATA", ".", "name", "and", "\"Tiny\"", "not", "in", "cfgs", ".", "DATA", ".", "name", "else", "False", "\n", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Calculate inception score of the {ref} dataset uisng pre-trained {eval_backbone} model.\"", ".", "format", "(", "ref", "=", "cfgs", ".", "RUN", ".", "ref_dataset", ",", "eval_backbone", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ")", ")", "\n", "", "is_score", ",", "is_std", ",", "top1", ",", "top5", "=", "ins", ".", "eval_dataset", "(", "data_loader", "=", "data_loader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "quantize", "=", "quantize", ",", "\n", "splits", "=", "splits", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "is_acc", "=", "is_acc", ",", "\n", "is_torch_backbone", "=", "True", "if", "\"torch\"", "in", "cfgs", ".", "RUN", ".", "eval_backbone", "else", "False", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ")", "\n", "if", "device", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Inception score={is_score}-Inception_std={is_std}\"", ".", "format", "(", "is_score", "=", "is_score", ",", "is_std", "=", "is_std", ")", ")", "\n", "if", "is_acc", ":", "\n", "            ", "logger", ".", "info", "(", "\"{eval_model} Top1 acc: ({num} images): {Top1}\"", ".", "format", "(", "\n", "eval_model", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ",", "num", "=", "str", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", ",", "Top1", "=", "top1", ")", ")", "\n", "logger", ".", "info", "(", "\"{eval_model} Top5 acc: ({num} images): {Top5}\"", ".", "format", "(", "\n", "eval_model", "=", "cfgs", ".", "RUN", ".", "eval_backbone", ",", "num", "=", "str", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", ",", "Top5", "=", "top5", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.InceptionV3.__init__": [[21, 80], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "inception_net.fid_inception_v3", "inception_net.InceptionV3.blocks.append", "inception_net.InceptionV3.blocks.append", "inception_net.InceptionV3.blocks.append", "inception_net.InceptionV3.blocks.append", "inception_net.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.Linear", "torch.Linear", "torch.Linear", "inception_net.InceptionV3.fc.weight.copy_", "inception_net.InceptionV3.fc.bias.copy_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "resize_input", "=", "True", ",", "normalize_input", "=", "False", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "state_dict", ",", "inception", "=", "fid_inception_v3", "(", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "inception", ".", "Conv2d_2a_3x3", ",", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "block1", "=", "[", "inception", ".", "Conv2d_3b_1x1", ",", "inception", ".", "Conv2d_4a_3x3", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "block3", "=", "[", "inception", ".", "Mixed_7a", ",", "inception", ".", "Mixed_7b", ",", "inception", ".", "Mixed_7c", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "1008", ",", "bias", "=", "True", ")", "\n", "self", ".", "fc", ".", "weight", ".", "copy_", "(", "state_dict", "[", "'fc.weight'", "]", ")", "\n", "self", ".", "fc", ".", "bias", ".", "copy_", "(", "state_dict", "[", "'fc.bias'", "]", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.InceptionV3.forward": [[81, 108], ["enumerate", "torch.dropout", "torch.dropout", "torch.dropout", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "inception_net.InceptionV3.fc", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "training", "=", "False", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "logit", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionA.__init__": [[137, 139], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionA.forward": [[140, 157], ["inception_net.FIDInceptionA.branch1x1", "inception_net.FIDInceptionA.branch5x5_1", "inception_net.FIDInceptionA.branch5x5_2", "inception_net.FIDInceptionA.branch3x3dbl_1", "inception_net.FIDInceptionA.branch3x3dbl_2", "inception_net.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_net.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionC.__init__": [[161, 163], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionC.forward": [[164, 184], ["inception_net.FIDInceptionC.branch1x1", "inception_net.FIDInceptionC.branch7x7_1", "inception_net.FIDInceptionC.branch7x7_2", "inception_net.FIDInceptionC.branch7x7_3", "inception_net.FIDInceptionC.branch7x7dbl_1", "inception_net.FIDInceptionC.branch7x7dbl_2", "inception_net.FIDInceptionC.branch7x7dbl_3", "inception_net.FIDInceptionC.branch7x7dbl_4", "inception_net.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_net.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionE_1.__init__": [[188, 190], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionE_1.forward": [[191, 216], ["inception_net.FIDInceptionE_1.branch1x1", "inception_net.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_net.FIDInceptionE_1.branch3x3dbl_1", "inception_net.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_net.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_net.FIDInceptionE_1.branch3x3_2a", "inception_net.FIDInceptionE_1.branch3x3_2b", "inception_net.FIDInceptionE_1.branch3x3dbl_3a", "inception_net.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionE_2.__init__": [[220, 222], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.FIDInceptionE_2.forward": [[223, 250], ["inception_net.FIDInceptionE_2.branch1x1", "inception_net.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_net.FIDInceptionE_2.branch3x3dbl_1", "inception_net.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception_net.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_net.FIDInceptionE_2.branch3x3_2a", "inception_net.FIDInceptionE_2.branch3x3_2b", "inception_net.FIDInceptionE_2.branch3x3dbl_3a", "inception_net.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.inception_net.fid_inception_v3": [[110, 133], ["torchvision.models.inception_v3", "inception_net.FIDInceptionA", "inception_net.FIDInceptionA", "inception_net.FIDInceptionA", "inception_net.FIDInceptionC", "inception_net.FIDInceptionC", "inception_net.FIDInceptionC", "inception_net.FIDInceptionC", "inception_net.FIDInceptionE_1", "inception_net.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "aux_logits", "=", "False", ",", "pretrained", "=", "False", ")", "\n", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "# inception.fc = nn.Linear(2048, 1008, bias=False)", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "state_dict", ",", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins_tf13.prepare_parser": [[30, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "prepare_parser", "(", ")", ":", "\n", "    ", "usage", "=", "'Parser for TF1.3- Inception Score scripts.'", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "usage", ")", "\n", "parser", ".", "add_argument", "(", "'--run_name'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "''", ",", "\n", "help", "=", "'Which experiment'", "\n", "'s samples.npz file to pull and evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'[real, fake]'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'Default overall batchsize (default: %(default)s)'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins_tf13.run": [[43, 129], ["ins_tf13.run._init_inception"], "function", ["None"], ["", "def", "run", "(", "config", ")", ":", "\n", "# Inception with TF1.3 or earlier.", "\n", "# Call this function with list of images. Each of elements should be a", "\n", "# numpy array with values ranging from 0 to 255.", "\n", "    ", "def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "        ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "config", "[", "'batch_size'", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "preds", ",", "pools", "=", "[", "]", ",", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "trange", "(", "n_batches", ")", ":", "\n", "                ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", ",", "pool", "=", "sess", ".", "run", "(", "[", "softmax", ",", "pool3", "]", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "pools", ".", "append", "(", "pool", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "                ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", ",", "np", ".", "squeeze", "(", "np", ".", "concatenate", "(", "pools", ",", "0", ")", ")", "\n", "\n", "# Init inception", "\n", "", "", "def", "_init_inception", "(", ")", ":", "\n", "        ", "global", "softmax", ",", "pool3", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "\n", "            ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "\n", "(", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "                ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "                    ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                        ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                            ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                            ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "# if softmax is None: # No need to functionalize like this.", "\n", "", "", "_init_inception", "(", ")", "\n", "\n", "fname", "=", "'%s/%s/%s/%s/samples.npz'", "%", "(", "\"samples\"", ",", "config", "[", "'run_name'", "]", ",", "config", "[", "'type'", "]", ",", "\"npz\"", ")", "\n", "print", "(", "'loading %s ...'", "%", "fname", ")", "\n", "ims", "=", "np", ".", "load", "(", "fname", ")", "[", "'x'", "]", "\n", "import", "time", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "inc_mean", ",", "inc_std", ",", "pool_activations", "=", "get_inception_score", "(", "list", "(", "ims", ".", "swapaxes", "(", "1", ",", "2", ")", ".", "swapaxes", "(", "2", ",", "3", ")", ")", ",", "splits", "=", "1", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Inception took %3f seconds, score of %3f +/- %3f.'", "%", "(", "t1", "-", "t0", ",", "inc_mean", ",", "inc_std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins_tf13.main": [[131, 137], ["ins_tf13.prepare_parser", "vars", "print", "ins_tf13.run", "prepare_parser.parse_args"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins_tf13.prepare_parser", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins_tf13.run"], ["", "def", "main", "(", ")", ":", "\n", "# parse command line and run", "\n", "    ", "parser", "=", "prepare_parser", "(", ")", "\n", "config", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "print", "(", "config", ")", "\n", "run", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_real_embeddings": [[41, 63], ["iter", "int", "tqdm.tqdm", "torch.cat", "numpy.array", "math.ceil", "int", "range", "torch.cat", "torch.cat.detach().cpu().numpy", "math.ceil", "next", "real_images.to", "real_labels.to", "torch.no_grad", "eval_model.get_outputs", "torch.cat.append", "utils.GatherLayer.apply", "len", "float", "float", "torch.cat.detach().cpu", "len", "float", "float", "len", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["def", "compute_real_embeddings", "(", "data_loader", ",", "batch_size", ",", "eval_model", ",", "quantize", ",", "world_size", ",", "DDP", ",", "disable_tqdm", ")", ":", "\n", "    ", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "/", "float", "(", "batch_size", "*", "world_size", ")", ")", ")", "\n", "\n", "real_embeds", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "real_images", ",", "real_labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "\"cuda\"", ")", ",", "real_labels", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "real_embeddings", ",", "_", "=", "eval_model", ".", "get_outputs", "(", "real_images", ",", "quantize", "=", "quantize", ")", "\n", "real_embeds", ".", "append", "(", "real_embeddings", ")", "\n", "\n", "", "", "real_embeds", "=", "torch", ".", "cat", "(", "real_embeds", ",", "dim", "=", "0", ")", "\n", "if", "DDP", ":", "real_embeds", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "real_embeds", ")", ",", "dim", "=", "0", ")", "\n", "real_embeds", "=", "np", ".", "array", "(", "real_embeds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "real_embeds", "[", ":", "len", "(", "data_loader", ".", "dataset", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.calculate_pr_dc": [[65, 85], ["eval_model.eval", "prdc.compute_prdc", "prdc.compute_real_embeddings", "numpy.array", "fake_feats.detach().cpu().numpy", "fake_feats.detach().cpu", "fake_feats.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_prdc", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_real_embeddings"], ["", "def", "calculate_pr_dc", "(", "real_feats", ",", "fake_feats", ",", "data_loader", ",", "eval_model", ",", "num_generate", ",", "cfgs", ",", "quantize", ",", "nearest_k", ",", "\n", "world_size", ",", "DDP", ",", "disable_tqdm", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "\n", "if", "real_feats", "is", "None", ":", "\n", "        ", "real_embeds", "=", "compute_real_embeddings", "(", "data_loader", "=", "data_loader", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "quantize", "=", "quantize", ",", "\n", "world_size", "=", "world_size", ",", "\n", "DDP", "=", "DDP", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ")", "\n", "\n", "", "real_embeds", "=", "real_feats", "\n", "fake_embeds", "=", "np", ".", "array", "(", "fake_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "float64", ")", "[", ":", "num_generate", "]", "\n", "\n", "metrics", "=", "compute_prdc", "(", "real_features", "=", "real_embeds", ",", "fake_features", "=", "fake_embeds", ",", "nearest_k", "=", "nearest_k", ")", "\n", "\n", "prc", ",", "rec", ",", "dns", ",", "cvg", "=", "metrics", "[", "\"precision\"", "]", ",", "metrics", "[", "\"recall\"", "]", ",", "metrics", "[", "\"density\"", "]", ",", "metrics", "[", "\"coverage\"", "]", "\n", "return", "prc", ",", "rec", ",", "dns", ",", "cvg", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_pairwise_distance": [[87, 100], ["sklearn.metrics.pairwise_distances"], "function", ["None"], ["", "def", "compute_pairwise_distance", "(", "data_x", ",", "data_y", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        data_x: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        data_y: numpy.ndarray([N, feature_dim], dtype=np.float32)\n    Returns:\n        numpy.ndarray([N, N], dtype=np.float32) of pairwise distances.\n    \"\"\"", "\n", "if", "data_y", "is", "None", ":", "\n", "        ", "data_y", "=", "data_x", "\n", "", "dists", "=", "sklearn", ".", "metrics", ".", "pairwise_distances", "(", "\n", "data_x", ",", "data_y", ",", "metric", "=", "'euclidean'", ",", "n_jobs", "=", "8", ")", "\n", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.get_kth_value": [[102, 114], ["numpy.take_along_axis", "np.take_along_axis.max", "numpy.argpartition"], "function", ["None"], ["", "def", "get_kth_value", "(", "unsorted", ",", "k", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        unsorted: numpy.ndarray of any dimensionality.\n        k: int\n    Returns:\n        kth values along the designated axis.\n    \"\"\"", "\n", "indices", "=", "np", ".", "argpartition", "(", "unsorted", ",", "k", ",", "axis", "=", "axis", ")", "[", "...", ",", ":", "k", "]", "\n", "k_smallests", "=", "np", ".", "take_along_axis", "(", "unsorted", ",", "indices", ",", "axis", "=", "axis", ")", "\n", "kth_values", "=", "k_smallests", ".", "max", "(", "axis", "=", "axis", ")", "\n", "return", "kth_values", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_nearest_neighbour_distances": [[116, 127], ["prdc.compute_pairwise_distance", "prdc.get_kth_value"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_pairwise_distance", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.get_kth_value"], ["", "def", "compute_nearest_neighbour_distances", "(", "input_features", ",", "nearest_k", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        nearest_k: int\n    Returns:\n        Distances to kth nearest neighbours.\n    \"\"\"", "\n", "distances", "=", "compute_pairwise_distance", "(", "input_features", ")", "\n", "radii", "=", "get_kth_value", "(", "distances", ",", "k", "=", "nearest_k", "+", "1", ",", "axis", "=", "-", "1", ")", "\n", "return", "radii", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_prdc": [[129, 169], ["prdc.compute_nearest_neighbour_distances", "prdc.compute_nearest_neighbour_distances", "prdc.compute_pairwise_distance", "dict", "float", "compute_pairwise_distance.min", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_nearest_neighbour_distances", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_nearest_neighbour_distances", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.prdc.compute_pairwise_distance"], ["", "def", "compute_prdc", "(", "real_features", ",", "fake_features", ",", "nearest_k", ")", ":", "\n", "    ", "\"\"\"\n    Computes precision, recall, density, and coverage given two manifolds.\n    Args:\n        real_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        fake_features: numpy.ndarray([N, feature_dim], dtype=np.float32)\n        nearest_k: int.\n    Returns:\n        dict of precision, recall, density, and coverage.\n    \"\"\"", "\n", "\n", "real_nearest_neighbour_distances", "=", "compute_nearest_neighbour_distances", "(", "\n", "real_features", ",", "nearest_k", ")", "\n", "fake_nearest_neighbour_distances", "=", "compute_nearest_neighbour_distances", "(", "\n", "fake_features", ",", "nearest_k", ")", "\n", "distance_real_fake", "=", "compute_pairwise_distance", "(", "\n", "real_features", ",", "fake_features", ")", "\n", "\n", "precision", "=", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "real_nearest_neighbour_distances", ",", "axis", "=", "1", ")", "\n", ")", ".", "any", "(", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n", "recall", "=", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "fake_nearest_neighbour_distances", ",", "axis", "=", "0", ")", "\n", ")", ".", "any", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "density", "=", "(", "1.", "/", "float", "(", "nearest_k", ")", ")", "*", "(", "\n", "distance_real_fake", "<", "\n", "np", ".", "expand_dims", "(", "real_nearest_neighbour_distances", ",", "axis", "=", "1", ")", "\n", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "\n", "coverage", "=", "(", "\n", "distance_real_fake", ".", "min", "(", "axis", "=", "1", ")", "<", "\n", "real_nearest_neighbour_distances", "\n", ")", ".", "mean", "(", ")", "\n", "\n", "return", "dict", "(", "precision", "=", "precision", ",", "recall", "=", "recall", ",", "\n", "density", "=", "density", ",", "coverage", "=", "coverage", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.inception_softmax": [[21, 26], ["torch.no_grad", "eval_model.get_outputs", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["def", "inception_softmax", "(", "eval_model", ",", "images", ",", "quantize", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "embeddings", ",", "logits", "=", "eval_model", ".", "get_outputs", "(", "images", ",", "quantize", "=", "quantize", ")", "\n", "ps", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.calculate_kl_div": [[28, 43], ["torch.no_grad", "range", "torch.cat", "torch.mean().detach().cpu().numpy", "torch.std().detach().cpu().numpy", "torch.mean", "torch.exp", "torch.cat.append", "torch.sum", "torch.exp.unsqueeze", "torch.mean().detach().cpu", "torch.std().detach().cpu", "torch.log", "torch.log", "torch.unsqueeze", "torch.mean().detach", "torch.std().detach", "torch.mean", "torch.mean", "torch.std"], "function", ["None"], ["", "def", "calculate_kl_div", "(", "ps", ",", "splits", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "num_samples", "=", "ps", ".", "shape", "[", "0", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "splits", ")", ":", "\n", "            ", "part", "=", "ps", "[", "(", "j", "*", "num_samples", "//", "splits", ")", ":", "(", "(", "j", "+", "1", ")", "*", "num_samples", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "torch", ".", "log", "(", "part", ")", "-", "torch", ".", "log", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "kl", "=", "torch", ".", "exp", "(", "kl", ")", "\n", "scores", ".", "append", "(", "kl", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "scores", "=", "torch", ".", "cat", "(", "scores", ",", "0", ")", "\n", "m_scores", "=", "torch", ".", "mean", "(", "scores", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "m_std", "=", "torch", ".", "std", "(", "scores", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "m_scores", ",", "m_std", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_features": [[45, 80], ["ins.calculate_kl_div", "utils.load_ImageNet_label_dict", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "data_loader.dataset.data.class_to_idx.items", "converted_labels.append", "probs.detach().cpu().numpy", "probs.detach().cpu().numpy", "probs.detach().cpu().numpy", "probs.detach().cpu().numpy", "converted_labels.append", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "range", "range", "probs[].detach().cpu().numpy", "probs[].detach().cpu().numpy", "probs[].detach().cpu().numpy", "probs[].detach().cpu().numpy", "probs.detach().cpu", "probs.detach().cpu", "probs.detach().cpu", "probs.detach().cpu", "range", "range", "probs[].detach().cpu", "probs[].detach().cpu", "probs[].detach().cpu", "probs[].detach().cpu", "probs.detach", "probs.detach", "probs.detach", "probs.detach", "probs[].detach", "probs[].detach", "probs[].detach", "probs[].detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.calculate_kl_div", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_ImageNet_label_dict"], ["", "def", "eval_features", "(", "probs", ",", "labels", ",", "data_loader", ",", "num_features", ",", "split", ",", "is_acc", ",", "is_torch_backbone", "=", "False", ")", ":", "\n", "    ", "if", "is_acc", ":", "\n", "        ", "ImageNet_folder_label_dict", "=", "misc", ".", "load_ImageNet_label_dict", "(", "data_name", "=", "data_loader", ".", "dataset", ".", "data_name", ",", "\n", "is_torch_backbone", "=", "is_torch_backbone", ")", "\n", "loader_label_folder_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", ",", "in", "data_loader", ".", "dataset", ".", "data", ".", "class_to_idx", ".", "items", "(", ")", "}", "\n", "loader_label_holder", "=", "labels", "\n", "", "else", ":", "\n", "        ", "top1", ",", "top5", "=", "\"N/A\"", ",", "\"N/A\"", "\n", "\n", "", "probs", ",", "labels", "=", "probs", "[", ":", "num_features", "]", ",", "labels", "[", ":", "num_features", "]", "\n", "m_scores", ",", "m_std", "=", "calculate_kl_div", "(", "probs", ",", "splits", "=", "split", ")", "\n", "\n", "if", "is_acc", "and", "is_torch_backbone", ":", "\n", "        ", "if", "data_loader", ".", "dataset", ".", "data_name", "in", "[", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", ":", "\n", "            ", "converted_labels", "=", "[", "]", "\n", "for", "loader_label", "in", "labels", ":", "\n", "                ", "converted_labels", ".", "append", "(", "ImageNet_folder_label_dict", "[", "loader_label_folder_dict", "[", "loader_label", "]", "]", ")", "\n", "", "top1", "=", "top_k_accuracy_score", "(", "converted_labels", ",", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ",", "labels", "=", "range", "(", "1000", ")", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "converted_labels", ",", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ",", "labels", "=", "range", "(", "1000", ")", ")", "\n", "", "else", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "labels", ",", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "labels", ",", "probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ")", "\n", "", "", "elif", "is_acc", "and", "not", "is_torch_backbone", ":", "\n", "        ", "converted_labels", "=", "[", "]", "\n", "for", "loader_label", "in", "labels", ":", "\n", "            ", "converted_labels", ".", "append", "(", "ImageNet_folder_label_dict", "[", "loader_label_folder_dict", "[", "loader_label", "]", "]", ")", "\n", "", "if", "data_loader", ".", "dataset", ".", "data_name", "in", "[", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "probs", "[", ":", ",", "0", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ",", "labels", "=", "range", "(", "1001", ")", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "probs", "[", ":", ",", "0", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ",", "labels", "=", "range", "(", "1001", ")", ")", "\n", "", "else", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "probs", "[", ":", ",", "1", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "probs", "[", ":", ",", "1", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ")", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "", "return", "m_scores", ",", "m_std", ",", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.eval_dataset": [[82, 144], ["eval_model.eval", "len", "int", "iter", "tqdm.tqdm", "torch.cat", "torch.cat", "list", "ins.calculate_kl_div", "math.ceil", "int", "utils.load_ImageNet_label_dict", "range", "torch.cat", "torch.cat", "torch.cat.detach().cpu().numpy", "math.ceil", "next", "real_images.to", "real_labels.to", "torch.no_grad", "ins.inception_softmax", "torch.cat.append", "torch.cat.append", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "float", "float", "data_loader.dataset.data.class_to_idx.items", "torch.cat.detach().cpu", "len", "converted_labels.append", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "converted_labels.append", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "sklearn.metrics.top_k_accuracy_score", "float", "float", "range", "range", "ps_holder[].detach().cpu().numpy", "ps_holder[].detach().cpu().numpy", "ps_holder[].detach().cpu().numpy", "ps_holder[].detach().cpu().numpy", "torch.cat.detach", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "range", "range", "ps_holder[].detach().cpu", "ps_holder[].detach().cpu", "ps_holder[].detach().cpu", "ps_holder[].detach().cpu", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "ps_holder[].detach", "ps_holder[].detach", "ps_holder[].detach", "ps_holder[].detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.calculate_kl_div", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.load_ImageNet_label_dict", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.ins.inception_softmax"], ["", "def", "eval_dataset", "(", "data_loader", ",", "eval_model", ",", "quantize", ",", "splits", ",", "batch_size", ",", "world_size", ",", "DDP", ",", "\n", "is_acc", ",", "is_torch_backbone", "=", "False", ",", "disable_tqdm", "=", "False", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "num_samples", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "num_samples", ")", "/", "float", "(", "batch_size", "*", "world_size", ")", ")", ")", "\n", "dataset_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "if", "is_acc", ":", "\n", "        ", "ImageNet_folder_label_dict", "=", "misc", ".", "load_ImageNet_label_dict", "(", "data_name", "=", "data_loader", ".", "dataset", ".", "data_name", ",", "\n", "is_torch_backbone", "=", "is_torch_backbone", ")", "\n", "loader_label_folder_dict", "=", "{", "v", ":", "k", "for", "k", ",", "v", ",", "in", "data_loader", ".", "dataset", ".", "data", ".", "class_to_idx", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "top1", ",", "top5", "=", "\"N/A\"", ",", "\"N/A\"", "\n", "\n", "", "ps_holder", "=", "[", "]", "\n", "labels_holder", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "real_images", ",", "real_labels", "=", "next", "(", "dataset_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "\n", "", "real_images", ",", "real_labels", "=", "real_images", ".", "to", "(", "\"cuda\"", ")", ",", "real_labels", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "ps", "=", "inception_softmax", "(", "eval_model", ",", "real_images", ",", "quantize", ")", "\n", "ps_holder", ".", "append", "(", "ps", ")", "\n", "labels_holder", ".", "append", "(", "real_labels", ")", "\n", "\n", "", "", "ps_holder", "=", "torch", ".", "cat", "(", "ps_holder", ",", "0", ")", "\n", "labels_holder", "=", "torch", ".", "cat", "(", "labels_holder", ",", "0", ")", "\n", "if", "DDP", ":", "\n", "        ", "ps_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "ps_holder", ")", ",", "dim", "=", "0", ")", "\n", "labels_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "labels_holder", ")", ",", "dim", "=", "0", ")", "\n", "", "labels_holder", "=", "list", "(", "labels_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "m_scores", ",", "m_std", "=", "calculate_kl_div", "(", "ps_holder", "[", ":", "len", "(", "data_loader", ".", "dataset", ")", "]", ",", "splits", "=", "splits", ")", "\n", "\n", "if", "is_acc", "and", "is_torch_backbone", ":", "\n", "        ", "if", "data_loader", ".", "dataset", ".", "data_name", "in", "[", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", ":", "\n", "            ", "converted_labels", "=", "[", "]", "\n", "for", "loader_label", "in", "labels_holder", ":", "\n", "                ", "converted_labels", ".", "append", "(", "ImageNet_folder_label_dict", "[", "loader_label_folder_dict", "[", "loader_label", "]", "]", ")", "\n", "", "top1", "=", "top_k_accuracy_score", "(", "converted_labels", ",", "ps_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ",", "labels", "=", "range", "(", "1000", ")", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "converted_labels", ",", "ps_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ",", "labels", "=", "range", "(", "1000", ")", ")", "\n", "", "else", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "labels_holder", ",", "ps_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "labels_holder", ",", "ps_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ")", "\n", "", "", "elif", "is_acc", "and", "not", "is_torch_backbone", ":", "\n", "        ", "converted_labels", "=", "[", "]", "\n", "for", "loader_label", "in", "labels_holder", ":", "\n", "            ", "converted_labels", ".", "append", "(", "ImageNet_folder_label_dict", "[", "loader_label_folder_dict", "[", "loader_label", "]", "]", ")", "\n", "", "if", "data_loader", ".", "dataset", ".", "data_name", "in", "[", "\"Baby_ImageNet\"", ",", "\"Papa_ImageNet\"", ",", "\"Grandpa_ImageNet\"", "]", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "ps_holder", "[", ":", ",", "0", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ",", "labels", "=", "range", "(", "1001", ")", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "ps_holder", "[", ":", ",", "0", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ",", "labels", "=", "range", "(", "1001", ")", ")", "\n", "", "else", ":", "\n", "            ", "top1", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "ps_holder", "[", ":", ",", "1", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "1", ")", "\n", "top5", "=", "top_k_accuracy_score", "(", "[", "i", "+", "1", "for", "i", "in", "converted_labels", "]", ",", "ps_holder", "[", ":", ",", "1", ":", "1001", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k", "=", "5", ")", "\n", "", "", "else", ":", "\n", "        ", "pass", "\n", "", "return", "m_scores", ",", "m_std", ",", "top1", ",", "top5", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.DropPath.__init__": [[28, 31], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.DropPath.forward": [[32, 34], ["vit.drop_path"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Mlp.__init__": [[37, 45], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Mlp.forward": [[46, 53], ["vit.Mlp.fc1", "vit.Mlp.act", "vit.Mlp.drop", "vit.Mlp.fc2", "vit.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Attention.__init__": [[56, 66], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Attention.forward": [[67, 80], ["vit.Attention.qkv().reshape().permute", "vit.Attention.softmax", "vit.Attention.attn_drop", "vit.Attention.proj", "vit.Attention.proj_drop", "vit.Attention.qkv().reshape", "k.transpose", "vit.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Block.__init__": [[83, 93], ["torch.Module.__init__", "norm_layer", "vit.Attention", "norm_layer", "int", "vit.Mlp", "vit.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.Block.forward": [[94, 101], ["vit.Block.attn", "vit.Block.norm1", "vit.Block.drop_path", "vit.Block.drop_path", "vit.Block.mlp", "vit.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "y", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "x", "=", "x", "+", "self", ".", "drop_path", "(", "y", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.PatchEmbed.__init__": [[106, 114], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_patches", "=", "(", "img_size", "//", "patch_size", ")", "*", "(", "img_size", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.PatchEmbed.forward": [[115, 119], ["vit.PatchEmbed.proj().flatten().transpose", "vit.PatchEmbed.proj().flatten", "vit.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.__init__": [[123, 152], ["torch.Module.__init__", "vit.PatchEmbed", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "norm_layer", "vit.trunc_normal_", "vit.trunc_normal_", "vit.VisionTransformer.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "vit.Block", "range"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["def", "__init__", "(", "self", ",", "img_size", "=", "[", "224", "]", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "0", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "num_last_blocks", "=", "4", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_last_blocks", "=", "num_last_blocks", "\n", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", "[", "0", "]", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "i", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Classifier head", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "embed_dim", "*", "self", ".", "num_last_blocks", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer._init_weights": [[153, 161], ["isinstance", "vit.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.interpolate_pos_encoding": [[162, 183], ["torch.functional.interpolate", "torch.functional.interpolate", "patch_pos_embed.permute().view.permute().view.permute().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "patch_pos_embed.permute().view.permute().view.reshape().permute", "int", "int", "patch_pos_embed.permute().view.permute().view.permute", "class_pos_embed.unsqueeze", "patch_pos_embed.permute().view.permute().view.reshape", "int", "int", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.misc.interpolate"], ["", "", "def", "interpolate_pos_encoding", "(", "self", ",", "x", ",", "w", ",", "h", ")", ":", "\n", "        ", "npatch", "=", "x", ".", "shape", "[", "1", "]", "-", "1", "\n", "N", "=", "self", ".", "pos_embed", ".", "shape", "[", "1", "]", "-", "1", "\n", "if", "npatch", "==", "N", "and", "w", "==", "h", ":", "\n", "            ", "return", "self", ".", "pos_embed", "\n", "", "class_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "0", "]", "\n", "patch_pos_embed", "=", "self", ".", "pos_embed", "[", ":", ",", "1", ":", "]", "\n", "dim", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "w0", "=", "w", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "h0", "=", "h", "//", "self", ".", "patch_embed", ".", "patch_size", "\n", "# we add a small number to avoid floating point error in the interpolation", "\n", "# see discussion at https://github.com/facebookresearch/dino/issues/8", "\n", "w0", ",", "h0", "=", "w0", "+", "0.1", ",", "h0", "+", "0.1", "\n", "patch_pos_embed", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "patch_pos_embed", ".", "reshape", "(", "1", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", ",", "dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "\n", "scale_factor", "=", "(", "w0", "/", "math", ".", "sqrt", "(", "N", ")", ",", "h0", "/", "math", ".", "sqrt", "(", "N", ")", ")", ",", "\n", "mode", "=", "'bicubic'", ",", "\n", ")", "\n", "assert", "int", "(", "w0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "2", "]", "and", "int", "(", "h0", ")", "==", "patch_pos_embed", ".", "shape", "[", "-", "1", "]", "\n", "patch_pos_embed", "=", "patch_pos_embed", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "return", "torch", ".", "cat", "(", "(", "class_pos_embed", ".", "unsqueeze", "(", "0", ")", ",", "patch_pos_embed", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.prepare_tokens": [[184, 196], ["vit.VisionTransformer.patch_embed", "vit.VisionTransformer.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit.VisionTransformer.pos_drop", "vit.VisionTransformer.interpolate_pos_encoding"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.interpolate_pos_encoding"], ["", "def", "prepare_tokens", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "nc", ",", "w", ",", "h", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "# patch linear embedding", "\n", "\n", "# add the [CLS] token to the embed patch tokens", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# add positional encoding to each token", "\n", "x", "=", "x", "+", "self", ".", "interpolate_pos_encoding", "(", "x", ",", "w", ",", "h", ")", "\n", "\n", "return", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.get_logits": [[197, 200], ["x.view.view.view", "vit.VisionTransformer.linear", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.linear"], ["", "def", "get_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "linear", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.get_last_selfattention": [[201, 209], ["vit.VisionTransformer.prepare_tokens", "enumerate", "blk", "blk", "len"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.prepare_tokens"], ["", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "# return attention of the last block", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.get_intermediate_layers": [[210, 219], ["vit.VisionTransformer.prepare_tokens", "enumerate", "blk", "output.append", "len", "vit.VisionTransformer.norm"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.prepare_tokens"], ["", "", "", "def", "get_intermediate_layers", "(", "self", ",", "x", ",", "n", "=", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "prepare_tokens", "(", "x", ")", "\n", "# we return the output tokens from the `n` last blocks", "\n", "output", "=", "[", "]", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "if", "len", "(", "self", ".", "blocks", ")", "-", "i", "<=", "n", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.forward": [[220, 225], ["vit.VisionTransformer.get_intermediate_layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit.VisionTransformer.get_logits"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.get_intermediate_layers", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.VisionTransformer.get_logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "intermediate_output", "=", "self", ".", "get_intermediate_layers", "(", "x", ",", "self", ".", "num_last_blocks", ")", "\n", "embed", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", "0", "]", "for", "x", "in", "intermediate_output", "]", ",", "dim", "=", "-", "1", ")", "\n", "output", "=", "self", ".", "get_logits", "(", "embed", ")", "\n", "return", "embed", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.DINOHead.__init__": [[249, 271], ["torch.Module.__init__", "max", "vit.DINOHead.apply", "torch.utils.weight_norm", "torch.utils.weight_norm", "vit.DINOHead.last_layer.weight_g.data.fill_", "torch.Linear", "torch.Linear", "layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "layers.append", "torch.GELU", "torch.GELU", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "use_bn", "=", "False", ",", "norm_last_layer", "=", "True", ",", "nlayers", "=", "3", ",", "hidden_dim", "=", "2048", ",", "bottleneck_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "nlayers", "=", "max", "(", "nlayers", ",", "1", ")", "\n", "if", "nlayers", "==", "1", ":", "\n", "            ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "in_dim", ",", "bottleneck_dim", ")", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "]", "\n", "if", "use_bn", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "for", "_", "in", "range", "(", "nlayers", "-", "2", ")", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "if", "use_bn", ":", "\n", "                    ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "GELU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "bottleneck_dim", ")", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "last_layer", ".", "weight_g", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "norm_last_layer", ":", "\n", "            ", "self", ".", "last_layer", ".", "weight_g", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.DINOHead._init_weights": [[272, 277], ["isinstance", "vit.trunc_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.DINOHead.forward": [[278, 283], ["vit.DINOHead.mlp", "torch.functional.normalize", "torch.functional.normalize", "vit.DINOHead.last_layer"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "-", "1", ",", "p", "=", "2", ")", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.vit_tiny": [[227, 232], ["vit.VisionTransformer", "functools.partial"], "function", ["None"], ["", "", "def", "vit_tiny", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.vit_small": [[234, 239], ["vit.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_small", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.vit_base": [[241, 246], ["vit.VisionTransformer", "functools.partial"], "function", ["None"], ["", "def", "vit_base", "(", "patch_size", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VisionTransformer", "(", "\n", "patch_size", "=", "patch_size", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path": [[285, 294], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit._no_grad_trunc_normal_": [[296, 325], ["torch.no_grad", "torch.no_grad", "vit._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["", "def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_": [[327, 330], ["vit._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.Mlp.__init__": [[39, 47], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.Mlp.forward": [[48, 55], ["swin_transformer.Mlp.fc1", "swin_transformer.Mlp.act", "swin_transformer.Mlp.drop", "swin_transformer.Mlp.fc2", "swin_transformer.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.WindowAttention.__init__": [[100, 133], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "swin_transformer.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.WindowAttention.forward": [[134, 166], ["swin_transformer.WindowAttention.qkv().reshape().permute", "swin_transformer.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_transformer.WindowAttention.attn_drop", "swin_transformer.WindowAttention.proj", "swin_transformer.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "swin_transformer.WindowAttention.view", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.softmax", "swin_transformer.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "swin_transformer.WindowAttention.view", "mask.unsqueeze().unsqueeze", "swin_transformer.WindowAttention.qkv", "swin_transformer.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.WindowAttention.extra_repr": [[167, 169], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'dim={self.dim}, window_size={self.window_size}, num_heads={self.num_heads}'", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.WindowAttention.flops": [[170, 182], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ",", "N", ")", ":", "\n", "# calculate flops for 1 window with token length of N", "\n", "        ", "flops", "=", "0", "\n", "# qkv = self.qkv(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "3", "*", "self", ".", "dim", "\n", "# attn = (q @ k.transpose(-2, -1))", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "*", "N", "\n", "#  x = (attn @ v)", "\n", "flops", "+=", "self", ".", "num_heads", "*", "N", "*", "N", "*", "(", "self", ".", "dim", "//", "self", ".", "num_heads", ")", "\n", "# x = self.proj(x)", "\n", "flops", "+=", "N", "*", "self", ".", "dim", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformerBlock.__init__": [[202, 252], ["torch.Module.__init__", "norm_layer", "swin_transformer.WindowAttention", "norm_layer", "int", "swin_transformer.Mlp", "swin_transformer.SwinTransformerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_transformer.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "timm.models.layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.window_partition"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "if", "min", "(", "self", ".", "input_resolution", ")", "<=", "self", ".", "window_size", ":", "\n", "# if window size is larger than input resolution, we don't partition windows", "\n", "            ", "self", ".", "shift_size", "=", "0", "\n", "self", ".", "window_size", "=", "min", "(", "self", ".", "input_resolution", ")", "\n", "", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "# calculate attention mask for SW-MSA", "\n", "            ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "# 1 H W 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "                ", "for", "w", "in", "w_slices", ":", "\n", "                    ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "\n", "", "self", ".", "register_buffer", "(", "\"attn_mask\"", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformerBlock.forward": [[253, 291], ["swin_transformer.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "torch.roll.view", "swin_transformer.window_partition", "x_windows.view.view.view", "swin_transformer.SwinTransformerBlock.attn", "attn_windows.view.view.view", "swin_transformer.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.drop_path", "swin_transformer.SwinTransformerBlock.mlp", "swin_transformer.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.window_partition", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.window_reverse", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "self", ".", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformerBlock.extra_repr": [[292, 294], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, num_heads={self.num_heads}, \"", "f\"window_size={self.window_size}, shift_size={self.shift_size}, mlp_ratio={self.mlp_ratio}\"", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformerBlock.flops": [[296, 309], ["swin_transformer.SwinTransformerBlock.attn.flops"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "# norm1", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "# W-MSA/SW-MSA", "\n", "nW", "=", "H", "*", "W", "/", "self", ".", "window_size", "/", "self", ".", "window_size", "\n", "flops", "+=", "nW", "*", "self", ".", "attn", ".", "flops", "(", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "# mlp", "\n", "flops", "+=", "2", "*", "H", "*", "W", "*", "self", ".", "dim", "*", "self", ".", "dim", "*", "self", ".", "mlp_ratio", "\n", "# norm2", "\n", "flops", "+=", "self", ".", "dim", "*", "H", "*", "W", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchMerging.__init__": [[319, 325], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "input_resolution", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchMerging.forward": [[326, 348], ["swin_transformer.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "swin_transformer.PatchMerging.view", "swin_transformer.PatchMerging.norm", "swin_transformer.PatchMerging.reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        x: B, H*W, C\n        \"\"\"", "\n", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "assert", "H", "%", "2", "==", "0", "and", "W", "%", "2", "==", "0", ",", "f\"x size ({H}*{W}) are not even.\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchMerging.extra_repr": [[349, 351], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"input_resolution={self.input_resolution}, dim={self.dim}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchMerging.flops": [[352, 357], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "input_resolution", "\n", "flops", "=", "H", "*", "W", "*", "self", ".", "dim", "\n", "flops", "+=", "(", "H", "//", "2", ")", "*", "(", "W", "//", "2", ")", "*", "4", "*", "self", ".", "dim", "*", "2", "*", "self", ".", "dim", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.BasicLayer.__init__": [[378, 405], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "swin_transformer.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "input_resolution", ",", "depth", ",", "num_heads", ",", "window_size", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "downsample", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "dim", "=", "dim", ",", "input_resolution", "=", "input_resolution", ",", "\n", "num_heads", "=", "num_heads", ",", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "input_resolution", ",", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.BasicLayer.forward": [[406, 415], ["swin_transformer.BasicLayer.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.BasicLayer.extra_repr": [[416, 418], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"dim={self.dim}, input_resolution={self.input_resolution}, depth={self.depth}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.BasicLayer.flops": [[419, 426], ["blk.flops", "swin_transformer.BasicLayer.downsample.flops"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "flops", "+=", "blk", ".", "flops", "(", ")", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "self", ".", "downsample", ".", "flops", "(", ")", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchEmbed.__init__": [[438, 456], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "patches_resolution", "=", "[", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "]", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "self", ".", "num_patches", "=", "patches_resolution", "[", "0", "]", "*", "patches_resolution", "[", "1", "]", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchEmbed.forward": [[457, 466], ["swin_transformer.PatchEmbed.proj().flatten().transpose", "swin_transformer.PatchEmbed.norm", "swin_transformer.PatchEmbed.proj().flatten", "swin_transformer.PatchEmbed.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "# FIXME look at relaxing size constraints", "\n", "assert", "H", "==", "self", ".", "img_size", "[", "0", "]", "and", "W", "==", "self", ".", "img_size", "[", "1", "]", ",", "f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B Ph*Pw C", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.PatchEmbed.flops": [[467, 473], ["None"], "methods", ["None"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "Ho", ",", "Wo", "=", "self", ".", "patches_resolution", "\n", "flops", "=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "*", "self", ".", "in_chans", "*", "(", "self", ".", "patch_size", "[", "0", "]", "*", "self", ".", "patch_size", "[", "1", "]", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "flops", "+=", "Ho", "*", "Wo", "*", "self", ".", "embed_dim", "\n", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.__init__": [[500, 557], ["torch.Module.__init__", "len", "int", "swin_transformer.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "swin_transformer.SwinTransformer.apply", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "swin_transformer.BasicLayer", "swin_transformer.SwinTransformer.layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.2", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "\n", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "num_features", "=", "int", "(", "embed_dim", "*", "2", "**", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "patches_resolution", "=", "self", ".", "patch_embed", ".", "patches_resolution", "\n", "self", ".", "patches_resolution", "=", "patches_resolution", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", ",", "embed_dim", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "input_resolution", "=", "(", "patches_resolution", "[", "0", "]", "//", "(", "2", "**", "i_layer", ")", ",", "\n", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "i_layer", ")", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "self", ".", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "norm", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer._init_weights": [[558, 566], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.vit.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.no_weight_decay": [[567, 570], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'absolute_pos_embed'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.no_weight_decay_keywords": [[571, 574], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'relative_position_bias_table'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.forward_features": [[575, 588], ["swin_transformer.SwinTransformer.patch_embed", "swin_transformer.SwinTransformer.pos_drop", "swin_transformer.SwinTransformer.norm", "swin_transformer.SwinTransformer.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "layer", "layer.transpose"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "absolute_pos_embed", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "# B L C", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "# B C 1", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.forward": [[589, 593], ["swin_transformer.SwinTransformer.forward_features", "swin_transformer.SwinTransformer.head"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "h", ")", "\n", "return", "h", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops": [[594, 602], ["swin_transformer.SwinTransformer.patch_embed.flops", "enumerate", "layer.flops"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.SwinTransformer.flops"], ["", "def", "flops", "(", "self", ")", ":", "\n", "        ", "flops", "=", "0", "\n", "flops", "+=", "self", ".", "patch_embed", ".", "flops", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "flops", "+=", "layer", ".", "flops", "(", ")", "\n", "", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "patches_resolution", "[", "0", "]", "*", "self", ".", "patches_resolution", "[", "1", "]", "//", "(", "2", "**", "self", ".", "num_layers", ")", "\n", "flops", "+=", "self", ".", "num_features", "*", "self", ".", "num_classes", "\n", "return", "flops", "\n", "", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.window_partition": [[57, 69], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.swin_transformer.window_reverse": [[71, 85], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.BasicBlock.__init__": [[16, 26], ["torch.Module.__init__", "utils.conv3x3", "torch.BatchNorm2d", "utils.conv3x3", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.conv3x3", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.ops.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "g_cond_mtd", ",", "g_info_injection", ",", "affine_input_dim", ",", "MODULES", ")", ":", "\n", "        ", "super", "(", "GenBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "g_info_injection", "=", "g_info_injection", "\n", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "in_features", "=", "in_channels", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "in_features", "=", "out_channels", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "bn1", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "in_channels", ",", "MODULES", ")", "\n", "self", ".", "bn2", "=", "MODULES", ".", "g_bn", "(", "affine_input_dim", ",", "out_channels", ",", "MODULES", ")", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.BasicBlock.forward": [[27, 43], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d0", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2d1", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2d2", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "affine", ")", ":", "\n", "        ", "x0", "=", "x", "\n", "if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.Bottleneck.__init__": [[47, 60], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__"], ["if", "self", ".", "g_cond_mtd", "==", "\"W/O\"", "and", "self", ".", "g_info_injection", "in", "[", "\"N/A\"", ",", "\"concat\"", "]", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "", "elif", "self", ".", "g_cond_mtd", "==", "\"cBN\"", "or", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "            ", "x", "=", "self", ".", "bn2", "(", "x", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2d2", "(", "x", ")", "\n", "\n", "x0", "=", "F", ".", "interpolate", "(", "x0", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "x0", "=", "self", ".", "conv2d0", "(", "x0", ")", "\n", "out", "=", "x", "+", "x0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.Bottleneck.forward": [[61, 80], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["\n", "", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "g_shared_dim", ",", "img_size", ",", "g_conv_dim", ",", "apply_attn", ",", "attn_g_loc", ",", "g_cond_mtd", ",", "num_classes", ",", "g_init", ",", "g_depth", ",", "\n", "mixed_precision", ",", "MODULES", ",", "MODEL", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "g_in_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", "\n", "}", "\n", "\n", "g_out_dims_collection", "=", "{", "\n", "\"32\"", ":", "[", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "4", "]", ",", "\n", "\"64\"", ":", "[", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"128\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"256\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", "]", ",", "\n", "\"512\"", ":", "[", "g_conv_dim", "*", "16", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "8", ",", "g_conv_dim", "*", "4", ",", "g_conv_dim", "*", "2", ",", "g_conv_dim", ",", "g_conv_dim", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__": [[82, 127], ["torch.Module.__init__", "resnet.ResNet.dataset.startswith", "resnet.ResNet.modules", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.Linear", "isinstance", "int", "int", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.Linear", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer"], ["bottom_collection", "=", "{", "\"32\"", ":", "4", ",", "\"64\"", ":", "4", ",", "\"128\"", ":", "4", ",", "\"256\"", ":", "4", ",", "\"512\"", ":", "4", "}", "\n", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "g_cond_mtd", "=", "g_cond_mtd", "\n", "self", ".", "mixed_precision", "=", "mixed_precision", "\n", "self", ".", "MODEL", "=", "MODEL", "\n", "self", ".", "in_dims", "=", "g_in_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "out_dims", "=", "g_out_dims_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "bottom", "=", "bottom_collection", "[", "str", "(", "img_size", ")", "]", "\n", "self", ".", "num_blocks", "=", "len", "(", "self", ".", "in_dims", ")", "\n", "self", ".", "affine_input_dim", "=", "0", "\n", "\n", "info_dim", "=", "0", "\n", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"discrete\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_discrete_c", "*", "self", ".", "MODEL", ".", "info_dim_discrete_c", "\n", "", "if", "self", ".", "MODEL", ".", "info_type", "in", "[", "\"continuous\"", ",", "\"both\"", "]", ":", "\n", "            ", "info_dim", "+=", "self", ".", "MODEL", ".", "info_num_conti_c", "\n", "\n", "", "self", ".", "g_info_injection", "=", "self", ".", "MODEL", ".", "g_info_injection", "\n", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "            ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n", "                ", "self", ".", "info_mix_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", "+", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                ", "self", ".", "affine_input_dim", "+=", "self", ".", "z_dim", "\n", "self", ".", "info_proj_linear", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "info_dim", ",", "out_features", "=", "self", ".", "z_dim", ",", "bias", "=", "True", ")", "\n", "\n", "", "", "self", ".", "linear0", "=", "MODULES", ".", "g_linear", "(", "in_features", "=", "self", ".", "z_dim", ",", "out_features", "=", "self", ".", "in_dims", "[", "0", "]", "*", "self", ".", "bottom", "*", "self", ".", "bottom", ",", "bias", "=", "True", ")", "\n", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", "and", "self", ".", "g_cond_mtd", "==", "\"cBN\"", ":", "\n", "            ", "self", ".", "affine_input_dim", "+=", "self", ".", "num_classes", "\n", "\n", "", "self", ".", "blocks", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "            ", "self", ".", "blocks", "+=", "[", "[", "\n", "GenBlock", "(", "in_channels", "=", "self", ".", "in_dims", "[", "index", "]", ",", "\n", "out_channels", "=", "self", ".", "out_dims", "[", "index", "]", ",", "\n", "g_cond_mtd", "=", "self", ".", "g_cond_mtd", ",", "\n", "g_info_injection", "=", "self", ".", "g_info_injection", ",", "\n", "affine_input_dim", "=", "self", ".", "affine_input_dim", ",", "\n", "MODULES", "=", "MODULES", ")", "\n", "]", "]", "\n", "\n", "if", "index", "+", "1", "in", "attn_g_loc", "and", "apply_attn", ":", "\n", "                ", "self", ".", "blocks", "+=", "[", "[", "ops", ".", "SelfAttention", "(", "self", ".", "out_dims", "[", "index", "]", ",", "is_generator", "=", "True", ",", "MODULES", "=", "MODULES", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet._make_layer": [[128, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "ModuleList", "(", "block", ")", "for", "block", "in", "self", ".", "blocks", "]", ")", "\n", "\n", "self", ".", "bn4", "=", "ops", ".", "batchnorm_2d", "(", "in_features", "=", "self", ".", "out_dims", "[", "-", "1", "]", ")", "\n", "self", ".", "activation", "=", "MODULES", ".", "g_act_fn", "\n", "self", ".", "conv2d5", "=", "MODULES", ".", "g_conv2d", "(", "in_channels", "=", "self", ".", "out_dims", "[", "-", "1", "]", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "ops", ".", "init_weights", "(", "self", ".", "modules", ",", "g_init", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "z", ",", "label", ",", "shared_label", "=", "None", ",", "eval", "=", "False", ")", ":", "\n", "        ", "affine_list", "=", "[", "]", "\n", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "            ", "label", "=", "F", ".", "one_hot", "(", "label", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", "if", "self", ".", "mixed_precision", "and", "not", "eval", "else", "misc", ".", "dummy_context_mgr", "(", ")", "as", "mp", ":", "\n", "            ", "if", "self", ".", "MODEL", ".", "info_type", "!=", "\"N/A\"", ":", "\n", "                ", "if", "self", ".", "g_info_injection", "==", "\"concat\"", ":", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.resnet.ResNet.forward": [[144, 173], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["                    ", "z", "=", "self", ".", "info_mix_linear", "(", "z", ")", "\n", "", "elif", "self", ".", "g_info_injection", "==", "\"cBN\"", ":", "\n", "                    ", "z", ",", "z_info", "=", "z", "[", ":", ",", ":", "self", ".", "z_dim", "]", ",", "z", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "affine_list", ".", "append", "(", "self", ".", "info_proj_linear", "(", "z_info", ")", ")", "\n", "\n", "", "", "if", "self", ".", "g_cond_mtd", "!=", "\"W/O\"", ":", "\n", "                ", "affine_list", ".", "append", "(", "label", ")", "\n", "", "if", "len", "(", "affine_list", ")", ">", "0", ":", "\n", "                ", "affines", "=", "torch", ".", "cat", "(", "affine_list", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "affines", "=", "None", "\n", "\n", "", "act", "=", "self", ".", "linear0", "(", "z", ")", "\n", "act", "=", "act", ".", "view", "(", "-", "1", ",", "self", ".", "in_dims", "[", "0", "]", ",", "self", ".", "bottom", ",", "self", ".", "bottom", ")", "\n", "for", "index", ",", "blocklist", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "for", "block", "in", "blocklist", ":", "\n", "                    ", "if", "isinstance", "(", "block", ",", "ops", ".", "SelfAttention", ")", ":", "\n", "                        ", "act", "=", "block", "(", "act", ")", "\n", "", "else", ":", "\n", "                        ", "act", "=", "block", "(", "act", ",", "affines", ")", "\n", "\n", "", "", "", "act", "=", "self", ".", "bn4", "(", "act", ")", "\n", "act", "=", "self", ".", "activation", "(", "act", ")", "\n", "act", "=", "self", ".", "conv2d5", "(", "act", ")", "\n", "out", "=", "self", ".", "tanh", "(", "act", ")", "\n", "", "return", "out", "\n", "\n", "\n", "", "", "class", "DiscOptBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "apply_d_sn", ",", "MODULES", ")", ":", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.generate_images_and_stack_features": [[17, 65], ["eval_model.eval", "int", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "logger.info", "math.ceil", "range", "utils.generate_images", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "list", "torch.no_grad", "eval_model.get_outputs", "torch.nn.functional.softmax", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "torch.cat.detach().cpu().numpy", "float", "float", "torch.cat.detach().cpu", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.utils.sample.generate_images", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["def", "generate_images_and_stack_features", "(", "generator", ",", "discriminator", ",", "eval_model", ",", "num_generate", ",", "y_sampler", ",", "batch_size", ",", "z_prior", ",", "\n", "truncation_factor", ",", "z_dim", ",", "num_classes", ",", "LOSS", ",", "RUN", ",", "MODEL", ",", "is_stylegan", ",", "generator_mapping", ",", "\n", "generator_synthesis", ",", "quantize", ",", "world_size", ",", "DDP", ",", "device", ",", "logger", ",", "disable_tqdm", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "feature_holder", ",", "prob_holder", ",", "fake_label_holder", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "device", "==", "0", "and", "not", "disable_tqdm", ":", "\n", "        ", "logger", ".", "info", "(", "\"generate images and stack features ({} images).\"", ".", "format", "(", "num_generate", ")", ")", "\n", "", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "num_generate", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "num_batches", "//", "world_size", "+", "1", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "fake_images", ",", "fake_labels", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "sample", ".", "generate_images", "(", "z_prior", "=", "z_prior", ",", "\n", "truncation_factor", "=", "truncation_factor", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "z_dim", "=", "z_dim", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "y_sampler", "=", "y_sampler", ",", "\n", "radius", "=", "\"N/A\"", ",", "\n", "generator", "=", "generator", ",", "\n", "discriminator", "=", "discriminator", ",", "\n", "is_train", "=", "False", ",", "\n", "LOSS", "=", "LOSS", ",", "\n", "RUN", "=", "RUN", ",", "\n", "MODEL", "=", "MODEL", ",", "\n", "is_stylegan", "=", "is_stylegan", ",", "\n", "generator_mapping", "=", "generator_mapping", ",", "\n", "generator_synthesis", "=", "generator_synthesis", ",", "\n", "style_mixing_p", "=", "0.0", ",", "\n", "device", "=", "device", ",", "\n", "stylegan_update_emas", "=", "False", ",", "\n", "cal_trsp_cost", "=", "False", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "features", ",", "logits", "=", "eval_model", ".", "get_outputs", "(", "fake_images", ",", "quantize", "=", "quantize", ")", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "", "feature_holder", ".", "append", "(", "features", ")", "\n", "prob_holder", ".", "append", "(", "probs", ")", "\n", "fake_label_holder", ".", "append", "(", "fake_labels", ")", "\n", "\n", "", "feature_holder", "=", "torch", ".", "cat", "(", "feature_holder", ",", "0", ")", "\n", "prob_holder", "=", "torch", ".", "cat", "(", "prob_holder", ",", "0", ")", "\n", "fake_label_holder", "=", "torch", ".", "cat", "(", "fake_label_holder", ",", "0", ")", "\n", "\n", "if", "DDP", ":", "\n", "        ", "feature_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "feature_holder", ")", ",", "dim", "=", "0", ")", "\n", "prob_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "prob_holder", ")", ",", "dim", "=", "0", ")", "\n", "fake_label_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "fake_label_holder", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "feature_holder", ",", "prob_holder", ",", "list", "(", "fake_label_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.sample_images_from_loader_and_stack_features": [[67, 104], ["eval_model.eval", "len", "math.ceil", "iter", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "int", "print", "range", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "list", "float", "float", "math.ceil", "next", "images.to", "labels.to", "torch.no_grad", "eval_model.get_outputs", "torch.nn.functional.softmax", "labels.to", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "torch.cat.detach().cpu().numpy", "float", "float", "torch.cat.detach().cpu", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["", "def", "sample_images_from_loader_and_stack_features", "(", "dataloader", ",", "eval_model", ",", "batch_size", ",", "quantize", ",", "\n", "world_size", ",", "DDP", ",", "device", ",", "disable_tqdm", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "total_instance", "=", "len", "(", "dataloader", ".", "dataset", ")", "\n", "num_batches", "=", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", "*", "world_size", ")", ")", ")", "\n", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "\n", "if", "device", "==", "0", "and", "not", "disable_tqdm", ":", "\n", "        ", "print", "(", "\"Sample images and stack features ({} images).\"", ".", "format", "(", "total_instance", ")", ")", "\n", "\n", "", "feature_holder", ",", "prob_holder", ",", "label_holder", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "features", ",", "logits", "=", "eval_model", ".", "get_outputs", "(", "images", ",", "quantize", "=", "quantize", ")", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "", "feature_holder", ".", "append", "(", "features", ")", "\n", "prob_holder", ".", "append", "(", "probs", ")", "\n", "label_holder", ".", "append", "(", "labels", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "\n", "", "feature_holder", "=", "torch", ".", "cat", "(", "feature_holder", ",", "0", ")", "\n", "prob_holder", "=", "torch", ".", "cat", "(", "prob_holder", ",", "0", ")", "\n", "label_holder", "=", "torch", ".", "cat", "(", "label_holder", ",", "0", ")", "\n", "\n", "if", "DDP", ":", "\n", "        ", "feature_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "feature_holder", ")", ",", "dim", "=", "0", ")", "\n", "prob_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "prob_holder", ")", ",", "dim", "=", "0", ")", "\n", "label_holder", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "label_holder", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "feature_holder", ",", "prob_holder", ",", "list", "(", "label_holder", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.features.stack_features": [[106, 142], ["eval_model.eval", "iter", "math.ceil", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat.detach().cpu().numpy().astype", "torch.cat.detach().cpu().numpy().astype", "torch.cat.detach().cpu().numpy", "range", "torch.cat", "torch.cat", "torch.cat", "float", "float", "next", "images.to", "labels.to", "torch.no_grad", "eval_model.get_outputs", "torch.nn.functional.softmax", "torch.cat.append", "torch.cat.append", "torch.cat.append", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "utils.GatherLayer.apply", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu().numpy", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach().cpu", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["", "def", "stack_features", "(", "data_loader", ",", "eval_model", ",", "num_feats", ",", "batch_size", ",", "quantize", ",", "world_size", ",", "DDP", ",", "device", ",", "disable_tqdm", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "num_batches", "=", "math", ".", "ceil", "(", "float", "(", "num_feats", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "num_batches", "//", "world_size", "+", "1", "\n", "\n", "real_feats", ",", "real_probs", ",", "real_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "try", ":", "\n", "            ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embeddings", ",", "logits", "=", "eval_model", ".", "get_outputs", "(", "images", ",", "quantize", "=", "quantize", ")", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "real_feats", ".", "append", "(", "embeddings", ")", "\n", "real_probs", ".", "append", "(", "probs", ")", "\n", "real_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "", "real_feats", "=", "torch", ".", "cat", "(", "real_feats", ",", "dim", "=", "0", ")", "\n", "real_probs", "=", "torch", ".", "cat", "(", "real_probs", ",", "dim", "=", "0", ")", "\n", "real_labels", "=", "torch", ".", "cat", "(", "real_labels", ",", "dim", "=", "0", ")", "\n", "if", "DDP", ":", "\n", "        ", "real_feats", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "real_feats", ")", ",", "dim", "=", "0", ")", "\n", "real_probs", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "real_probs", ")", ",", "dim", "=", "0", ")", "\n", "real_labels", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "real_labels", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "real_feats", "=", "real_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "real_probs", "=", "real_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "real_labels", "=", "real_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "real_feats", ",", "real_probs", ",", "real_labels", "\n", "", ""]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.frechet_inception_distance": [[34, 63], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["def", "frechet_inception_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "\"Training and test mean vectors have different lengths.\"", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "\"Training and test covariances have different dimensions.\"", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "\"Imaginary component {}\"", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments": [[65, 99], ["numpy.mean", "numpy.cov", "eval_model.eval", "len", "iter", "math.ceil", "tqdm.tqdm", "torch.cat", "[].astype", "fake_feats.detach().cpu().numpy", "int", "range", "torch.cat", "float", "float", "math.ceil", "next", "images.to", "labels.to", "torch.no_grad", "eval_model.get_outputs", "torch.cat.append", "utils.GatherLayer.apply", "fake_feats.detach().cpu", "torch.cat.detach().cpu().numpy", "float", "float", "fake_feats.detach", "torch.cat.detach().cpu", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.get_outputs"], ["", "def", "calculate_moments", "(", "data_loader", ",", "eval_model", ",", "num_generate", ",", "batch_size", ",", "quantize", ",", "world_size", ",", "\n", "DDP", ",", "disable_tqdm", ",", "fake_feats", "=", "None", ")", ":", "\n", "    ", "if", "fake_feats", "is", "not", "None", ":", "\n", "        ", "total_instance", "=", "num_generate", "\n", "acts", "=", "fake_feats", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "num_generate", "]", "\n", "", "else", ":", "\n", "        ", "eval_model", ".", "eval", "(", ")", "\n", "total_instance", "=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "num_batches", "=", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", ")", ")", "\n", "if", "DDP", ":", "num_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "total_instance", ")", "/", "float", "(", "batch_size", "*", "world_size", ")", ")", ")", "\n", "\n", "acts", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "num_batches", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "            ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "try", ":", "\n", "                ", "images", ",", "labels", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "break", "\n", "\n", "", "images", ",", "labels", "=", "images", ".", "to", "(", "\"cuda\"", ")", ",", "labels", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "embeddings", ",", "logits", "=", "eval_model", ".", "get_outputs", "(", "images", ",", "quantize", "=", "quantize", ")", "\n", "acts", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "", "acts", "=", "torch", ".", "cat", "(", "acts", ",", "dim", "=", "0", ")", "\n", "if", "DDP", ":", "acts", "=", "torch", ".", "cat", "(", "losses", ".", "GatherLayer", ".", "apply", "(", "acts", ")", ",", "dim", "=", "0", ")", "\n", "acts", "=", "acts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", "total_instance", "]", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "", "mu", "=", "np", ".", "mean", "(", "acts", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "acts", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_fid": [[101, 137], ["eval_model.eval", "fid.calculate_moments", "fid.frechet_inception_distance", "fid.calculate_moments"], "function", ["home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.preparation.LoadEvalModel.eval", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.frechet_inception_distance", "home.repos.pwc.inspect_result.POSTECH-CVLab_PyTorch-StudioGAN.metrics.fid.calculate_moments"], ["", "def", "calculate_fid", "(", "data_loader", ",", "\n", "eval_model", ",", "\n", "num_generate", ",", "\n", "cfgs", ",", "\n", "pre_cal_mean", "=", "None", ",", "\n", "pre_cal_std", "=", "None", ",", "\n", "quantize", "=", "True", ",", "\n", "fake_feats", "=", "None", ",", "\n", "disable_tqdm", "=", "False", ")", ":", "\n", "    ", "eval_model", ".", "eval", "(", ")", "\n", "\n", "if", "pre_cal_mean", "is", "not", "None", "and", "pre_cal_std", "is", "not", "None", ":", "\n", "        ", "m1", ",", "s1", "=", "pre_cal_mean", ",", "pre_cal_std", "\n", "", "else", ":", "\n", "        ", "m1", ",", "s1", "=", "calculate_moments", "(", "data_loader", "=", "data_loader", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "num_generate", "=", "\"N/A\"", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "quantize", "=", "quantize", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ",", "\n", "fake_feats", "=", "None", ")", "\n", "\n", "", "m2", ",", "s2", "=", "calculate_moments", "(", "data_loader", "=", "\"N/A\"", ",", "\n", "eval_model", "=", "eval_model", ",", "\n", "num_generate", "=", "num_generate", ",", "\n", "batch_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "batch_size", ",", "\n", "quantize", "=", "quantize", ",", "\n", "world_size", "=", "cfgs", ".", "OPTIMIZATION", ".", "world_size", ",", "\n", "DDP", "=", "cfgs", ".", "RUN", ".", "distributed_data_parallel", ",", "\n", "disable_tqdm", "=", "disable_tqdm", ",", "\n", "fake_feats", "=", "fake_feats", ")", "\n", "\n", "fid_value", "=", "frechet_inception_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "return", "fid_value", ",", "m1", ",", "s1", "\n", "", ""]]}