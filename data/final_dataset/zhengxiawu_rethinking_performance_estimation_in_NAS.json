{"home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.NASCifar10.__init__": [[187, 193], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_acc", "=", "[", "]", "\n", "self", ".", "best_acc", "=", "0.0", "\n", "self", ".", "genotypes", "=", "[", "]", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "best_geno", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.NASCifar10.get_results": [[194, 203], ["dict"], "methods", ["None"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "res", "=", "dict", "(", ")", "\n", "res", "[", "'val_acc'", "]", "=", "self", ".", "val_acc", "\n", "res", "[", "'genotype'", "]", "=", "self", ".", "genotypes", "\n", "res", "[", "'sample'", "]", "=", "self", ".", "samples", "\n", "res", "[", "'best_val_acc'", "]", "=", "[", "self", ".", "best_acc", "]", "\n", "res", "[", "'best_genotype'", "]", "=", "[", "self", ".", "best_geno", "]", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.NASCifar10.objective_function": [[204, 218], ["run_evolution.evaluation", "run_evolution.NASCifar10.val_acc.append", "run_evolution.NASCifar10.genotypes.append", "run_evolution.NASCifar10.samples.append", "isinstance", "float", "str", "float", "str", "int", "s.numpy"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.evaluation"], ["", "def", "objective_function", "(", "self", ",", "sample", ",", "name", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sample", "[", "0", "]", ",", "int", ")", ":", "\n", "            ", "sample", "=", "[", "s", ".", "numpy", "(", ")", "[", "0", "]", "for", "s", "in", "sample", "]", "\n", "\n", "", "acc", ",", "geno", "=", "evaluation", "(", "sample", ",", "name", ")", "\n", "\n", "self", ".", "val_acc", ".", "append", "(", "float", "(", "acc", ")", ")", "\n", "self", ".", "genotypes", ".", "append", "(", "str", "(", "geno", ")", ")", "\n", "self", ".", "samples", ".", "append", "(", "[", "int", "(", "s", ")", "for", "s", "in", "sample", "]", ")", "\n", "if", "acc", ">", "self", ".", "best_acc", ":", "\n", "            ", "self", ".", "best_acc", "=", "float", "(", "acc", ")", "\n", "self", ".", "best_geno", "=", "str", "(", "geno", ")", "\n", "\n", "", "return", "1", "-", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.NASCifar10.get_configuration_space": [[219, 228], ["ConfigSpace.ConfigurationSpace", "range", "range", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.CategoricalHyperparameter"], "methods", ["None"], ["", "def", "get_configuration_space", "(", "self", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "OPS", "=", "PRIMITIVES", "[", "0", ":", "-", "1", "]", "\n", "for", "cell", "in", "[", "'normal'", ",", "'reduce'", "]", ":", "\n", "            ", "for", "node", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "                ", "for", "prev", "in", "range", "(", "0", ",", "node", ")", ":", "\n", "                    ", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"{}_{}_{}\"", ".", "format", "(", "cell", ",", "node", ",", "prev", ")", ",", "OPS", ")", ")", "\n", "\n", "", "", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.Model.__init__": [[231, 234], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "arch", "=", "None", "\n", "self", ".", "accuracy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.Model.__str__": [[235, 237], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{0:b}'", ".", "format", "(", "self", ".", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.train": [[57, 96], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "model.train", "enumerate", "logger.info", "X.size", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "run_evolution.train.train_iter"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update"], ["def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "def", "train_iter", "(", "X", ",", "y", ")", ":", "\n", "        ", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "aux_logits", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "loss", "+=", "0.4", "*", "criterion", "(", "aux_logits", ",", "y", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# gradient clipping", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "200", "==", "0", "or", "step", "==", "len_train_loader", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Train: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "step", ",", "len_train_loader", "-", "1", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "len_train_loader", "=", "len", "(", "train_loader", ")", "\n", "cur_step", "=", "epoch", "*", "len_train_loader", "\n", "cur_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "train_iter", "(", "X", ",", "y", ")", "\n", "cur_step", "+=", "1", "\n", "", "logger", ".", "info", "(", "\"Train: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "top1", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.validate": [[98, 127], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "model.eval", "logger.info", "X.size", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.no_grad", "enumerate", "criterion.item", "prec1.item", "prec5.item", "logger.info", "run_evolution.validate.val_iter"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "len_val_loader", "=", "len", "(", "valid_loader", ")", "\n", "\n", "def", "val_iter", "(", "X", ",", "y", ")", ":", "\n", "        ", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "200", "==", "0", "or", "step", "==", "len_val_loader", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Valid: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "step", ",", "len_val_loader", "-", "1", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "val_iter", "(", "X", ",", "y", ")", "\n", "", "", "logger", ".", "info", "(", "\"Valid: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "top1", ".", "avg", ")", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.evaluation": [[129, 184], ["eval", "logger.info", "logger.info", "utils.get_data", "torch.CrossEntropyLoss().to", "models.augment_cnn.AugmentCNN", "utils.param_size", "logger.info", "torch.DataParallel().to", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "len", "range", "logger.info", "utils.convert_sample_to_genotype", "nn.DataParallel().to.parameters", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nn.DataParallel().to.module.drop_path_prob", "run_evolution.train", "run_evolution.validate", "str", "torch.CrossEntropyLoss", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.get_data", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.param_size", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.convert_sample_to_genotype", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AugmentCNN.drop_path_prob", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.validate"], ["", "def", "evaluation", "(", "sample", ",", "name", ")", ":", "\n", "    ", "geno", "=", "eval", "(", "convert_sample_to_genotype", "(", "sample", ")", ")", "\n", "logger", ".", "info", "(", "'Model sample: {}'", ".", "format", "(", "sample", ")", ")", "\n", "logger", ".", "info", "(", "'Genotype: {}'", ".", "format", "(", "str", "(", "geno", ")", ")", ")", "\n", "\n", "# get data with meta info    ", "\n", "input_size", ",", "input_channels", ",", "n_classes", ",", "train_data", ",", "valid_data", "=", "utils", ".", "get_data", "(", "\n", "'cifar10'", ",", "args", ".", "data_path", ",", "config", "[", "'imagesize'", "]", ",", "config", "[", "'cutout'", "]", ",", "validation", "=", "True", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "use_aux", "=", "True", "\n", "\n", "# change size of input image ", "\n", "input_size", "=", "config", "[", "'imagesize'", "]", "\n", "\n", "model", "=", "AugmentCNN", "(", "input_size", ",", "input_channels", ",", "config", "[", "'channel'", "]", ",", "10", ",", "config", "[", "'layers'", "]", ",", "True", ",", "geno", ")", "\n", "mb_params", "=", "utils", ".", "param_size", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"Model size = {:.3f} MB\"", ".", "format", "(", "mb_params", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# weights optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "config", "[", "'lr'", "]", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "3e-4", ")", "\n", "\n", "# get data loader", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "config", "[", "'batchsize'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "config", "[", "'batchsize'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# lr scheduler", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "config", "[", "'epochs'", "]", ")", "\n", "\n", "best_top1", "=", "0.", "\n", "len_train_loader", "=", "len", "(", "train_loader", ")", "\n", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "drop_prob", "=", "0.2", "*", "epoch", "/", "config", "[", "'epochs'", "]", "\n", "model", ".", "module", ".", "drop_path_prob", "(", "drop_prob", ",", "config", "[", "'fp'", "]", ")", "\n", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", "\n", "\n", "cur_step", "=", "(", "epoch", "+", "1", ")", "*", "len_train_loader", "\n", "top1", "=", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", "\n", "\n", "if", "best_top1", "<", "top1", ":", "\n", "            ", "best_top1", "=", "top1", "\n", "is_best", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "# utils.save_checkpoint(model, config.path, is_best)", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Final best Prec@1 = {:.4%}\"", ".", "format", "(", "best_top1", ")", ")", "\n", "return", "best_top1", ",", "geno", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.train_and_eval": [[239, 242], ["b.objective_function"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.objective_function"], ["", "", "def", "train_and_eval", "(", "config", ",", "name", ")", ":", "\n", "    ", "error", "=", "b", ".", "objective_function", "(", "config", ",", "name", ")", "\n", "return", "1", "-", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.arch_to_sample": [[244, 251], ["range", "range", "sample.append", "int", "PRIMITIVES.index"], "function", ["None"], ["", "def", "arch_to_sample", "(", "config", ")", ":", "\n", "    ", "sample", "=", "[", "]", "\n", "for", "cell", "in", "[", "'normal'", ",", "'reduce'", "]", ":", "\n", "        ", "for", "node", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "            ", "for", "prev", "in", "range", "(", "0", ",", "node", ")", ":", "\n", "                ", "sample", ".", "append", "(", "int", "(", "PRIMITIVES", ".", "index", "(", "config", "[", "'{}_{}_{}'", ".", "format", "(", "cell", ",", "node", ",", "prev", ")", "]", ")", ")", ")", "\n", "", "", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.random_architecture": [[253, 256], ["cs.sample_configuration"], "function", ["None"], ["", "def", "random_architecture", "(", ")", ":", "\n", "    ", "config", "=", "cs", ".", "sample_configuration", "(", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.mutate_arch": [[258, 271], ["numpy.random.randint", "list.remove", "numpy.random.randint", "copy.deepcopy", "len", "cs.get_hyperparameters", "type", "list", "list", "len", "cs.get_hyperparameters"], "function", ["None"], ["", "def", "mutate_arch", "(", "parent_arch", ")", ":", "\n", "    ", "dim", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "cs", ".", "get_hyperparameters", "(", ")", ")", ")", "\n", "hyper", "=", "cs", ".", "get_hyperparameters", "(", ")", "[", "dim", "]", "\n", "\n", "if", "type", "(", "hyper", ")", "==", "ConfigSpace", ".", "OrdinalHyperparameter", ":", "\n", "        ", "choices", "=", "list", "(", "hyper", ".", "sequence", ")", "\n", "", "else", ":", "\n", "        ", "choices", "=", "list", "(", "hyper", ".", "choices", ")", "\n", "", "choices", ".", "remove", "(", "parent_arch", "[", "hyper", ".", "name", "]", ")", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "choices", ")", ")", "\n", "child_arch", "=", "deepcopy", "(", "parent_arch", ")", "\n", "child_arch", "[", "hyper", ".", "name", "]", "=", "choices", "[", "idx", "]", "\n", "return", "child_arch", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.regularized_evolution": [[273, 312], ["collections.deque", "logger.info", "logger.info", "logger.info", "len", "logger.info", "run_evolution.Model", "run_evolution.random_architecture", "run_evolution.train_and_eval", "collections.deque.append", "history.append", "len", "logger.info", "max", "run_evolution.Model", "run_evolution.mutate_arch", "run_evolution.train_and_eval", "collections.deque.append", "history.append", "collections.deque.popleft", "run_evolution.arch_to_sample", "len", "random.choice", "sample.append", "run_evolution.arch_to_sample", "list"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.random_architecture", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.train_and_eval", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.mutate_arch", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.train_and_eval", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.arch_to_sample", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_evolution.arch_to_sample"], ["", "def", "regularized_evolution", "(", "cycles", ",", "population_size", ",", "sample_size", ")", ":", "\n", "\n", "    ", "population", "=", "collections", ".", "deque", "(", ")", "\n", "\n", "history", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "'Initialize the population with random models'", ")", "\n", "logger", ".", "info", "(", "'population_size: {}'", ".", "format", "(", "population_size", ")", ")", "\n", "pop_n", "=", "0", "\n", "while", "len", "(", "population", ")", "<", "population_size", ":", "# 100", "\n", "        ", "logger", ".", "info", "(", "'population {}'", ".", "format", "(", "pop_n", ")", ")", "\n", "model", "=", "Model", "(", ")", "\n", "model", ".", "arch", "=", "random_architecture", "(", ")", "\n", "model", ".", "accuracy", "=", "train_and_eval", "(", "arch_to_sample", "(", "model", ".", "arch", ")", ",", "name", "=", "'population_%03d'", "%", "pop_n", ")", "\n", "population", ".", "append", "(", "model", ")", "\n", "history", ".", "append", "(", "model", ")", "\n", "pop_n", "+=", "1", "\n", "", "logger", ".", "info", "(", "'Initialized {} populations with random models'", ".", "format", "(", "population_size", ")", ")", "\n", "\n", "iter_n", "=", "0", "\n", "while", "len", "(", "history", ")", "<", "cycles", ":", "\n", "        ", "logger", ".", "info", "(", "'Cycles %d'", "%", "iter_n", ")", "\n", "sample", "=", "[", "]", "\n", "while", "len", "(", "sample", ")", "<", "sample_size", ":", "\n", "            ", "candidate", "=", "random", ".", "choice", "(", "list", "(", "population", ")", ")", "\n", "sample", ".", "append", "(", "candidate", ")", "\n", "\n", "", "parent", "=", "max", "(", "sample", ",", "key", "=", "lambda", "i", ":", "i", ".", "accuracy", ")", "\n", "\n", "child", "=", "Model", "(", ")", "\n", "child", ".", "arch", "=", "mutate_arch", "(", "parent", ".", "arch", ")", "\n", "child", ".", "accuracy", "=", "train_and_eval", "(", "arch_to_sample", "(", "child", ".", "arch", ")", ",", "name", "=", "'cycles_%03d'", "%", "iter_n", ")", "\n", "population", ".", "append", "(", "child", ")", "\n", "history", ".", "append", "(", "child", ")", "\n", "\n", "population", ".", "popleft", "(", ")", "\n", "iter_n", "+=", "1", "\n", "\n", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.to_dag": [[41, 59], ["torch.ModuleList", "torch.ModuleList", "nn.ModuleList.append", "nn.ModuleList.append", "isinstance", "torch.Sequential", "models.ops.DropPath_"], "function", ["None"], ["def", "to_dag", "(", "C_in", ",", "gene", ",", "reduction", ")", ":", "\n", "    ", "\"\"\" generate discrete ops from gene \"\"\"", "\n", "dag", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "edges", "in", "gene", ":", "\n", "        ", "row", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "op_name", ",", "s_idx", "in", "edges", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "s_idx", "<", "2", "else", "1", "\n", "op", "=", "ops", ".", "OPS", "[", "op_name", "]", "(", "C_in", ",", "stride", ",", "True", ")", "\n", "if", "not", "isinstance", "(", "op", ",", "ops", ".", "Identity", ")", ":", "\n", "                ", "op", "=", "nn", ".", "Sequential", "(", "\n", "op", ",", "\n", "ops", ".", "DropPath_", "(", ")", "\n", ")", "\n", "", "op", ".", "s_idx", "=", "s_idx", "\n", "row", ".", "append", "(", "op", ")", "\n", "", "dag", ".", "append", "(", "row", ")", "\n", "\n", "", "return", "dag", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.from_str": [[61, 63], ["eval"], "function", ["None"], ["", "def", "from_str", "(", "s", ")", ":", "\n", "    ", "return", "eval", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse": [[65, 81], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "gene.append", "edge_max.view", "node_gene.append", "edge_idx.item"], "function", ["None"], ["", "def", "parse", "(", "alpha", ",", "k", ")", ":", "\n", "    ", "gene", "=", "[", "]", "\n", "assert", "PRIMITIVES", "[", "-", "1", "]", "==", "'none'", "\n", "\n", "for", "edges", "in", "alpha", ":", "\n", "        ", "edge_max", ",", "primitive_indices", "=", "torch", ".", "topk", "(", "edges", "[", ":", ",", ":", "-", "1", "]", ",", "1", ")", "# ignore 'none'", "\n", "topk_edge_values", ",", "topk_edge_indices", "=", "torch", ".", "topk", "(", "edge_max", ".", "view", "(", "-", "1", ")", ",", "k", ")", "\n", "node_gene", "=", "[", "]", "\n", "for", "edge_idx", "in", "topk_edge_indices", ":", "\n", "            ", "prim_idx", "=", "primitive_indices", "[", "edge_idx", "]", "\n", "prim", "=", "PRIMITIVES", "[", "prim_idx", "]", "\n", "node_gene", ".", "append", "(", "(", "prim", ",", "edge_idx", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "gene", ".", "append", "(", "node_gene", ")", "\n", "\n", "", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse_numpy": [[83, 120], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "gene.append", "torch.tensor", "torch.tensor", "edge_max.view", "node_gene.append", "edge_idx.item"], "function", ["None"], ["", "def", "parse_numpy", "(", "alpha", ",", "k", ")", ":", "\n", "    ", "\"\"\"\n    parse continuous alpha to discrete gene.\n    alpha is ParameterList:\n    ParameterList [\n        Parameter(n_edges1, n_ops),\n        Parameter(n_edges2, n_ops),\n        ...\n    ]\n\n    gene is list:\n    [\n        [('node1_ops_1', node_idx), ..., ('node1_ops_k', node_idx)],\n        [('node2_ops_1', node_idx), ..., ('node2_ops_k', node_idx)],\n        ...\n    ]\n    each node has two edges (k=2) in CNN.\n    \"\"\"", "\n", "\n", "gene", "=", "[", "]", "\n", "assert", "PRIMITIVES", "[", "-", "1", "]", "==", "'none'", "# assume last PRIMITIVE is 'none'", "\n", "\n", "# 1) Convert the mixed op to discrete edge (single op) by choosing top-1 weight edge", "\n", "# 2) Choose top-k edges per node by edge score (top-1 weight in edge)", "\n", "for", "edges", "in", "alpha", ":", "\n", "# edges: Tensor(n_edges, n_ops)", "\n", "        ", "edge_max", ",", "primitive_indices", "=", "torch", ".", "topk", "(", "torch", ".", "tensor", "(", "edges", "[", ":", ",", ":", "-", "1", "]", ")", ",", "1", ")", "# ignore 'none'", "\n", "topk_edge_values", ",", "topk_edge_indices", "=", "torch", ".", "topk", "(", "edge_max", ".", "view", "(", "-", "1", ")", ",", "k", ")", "\n", "node_gene", "=", "[", "]", "\n", "for", "edge_idx", "in", "topk_edge_indices", ":", "\n", "            ", "prim_idx", "=", "primitive_indices", "[", "edge_idx", "]", "\n", "prim", "=", "PRIMITIVES", "[", "prim_idx", "]", "\n", "node_gene", ".", "append", "(", "(", "prim", ",", "edge_idx", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "gene", ".", "append", "(", "node_gene", ")", "\n", "\n", "", "return", "gene", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.BaseConfig.print_params": [[25, 31], ["prtf", "prtf", "sorted", "prtf", "vars().items", "prtf", "vars", "attr.upper"], "methods", ["None"], ["    ", "def", "print_params", "(", "self", ",", "prtf", "=", "print", ")", ":", "\n", "        ", "prtf", "(", "\"\"", ")", "\n", "prtf", "(", "\"Parameters:\"", ")", "\n", "for", "attr", ",", "value", "in", "sorted", "(", "vars", "(", "self", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "prtf", "(", "\"{}={}\"", ".", "format", "(", "attr", ".", "upper", "(", ")", ",", "value", ")", ")", "\n", "", "prtf", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.BaseConfig.as_markdown": [[32, 38], ["sorted", "vars().items", "vars"], "methods", ["None"], ["", "def", "as_markdown", "(", "self", ")", ":", "\n", "        ", "text", "=", "\"|name|value|  \\n|-|-|  \\n\"", "\n", "for", "attr", ",", "value", "in", "sorted", "(", "vars", "(", "self", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "text", "+=", "\"|{}|{}|  \\n\"", ".", "format", "(", "attr", ",", "value", ")", "\n", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.SearchConfig.build_parser": [[41, 67], ["config.get_parser", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.get_parser"], ["    ", "def", "build_parser", "(", "self", ")", ":", "\n", "        ", "parser", "=", "get_parser", "(", "\"Search config\"", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'CIFAR10'", ",", "help", "=", "'CIFAR10'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_lr'", ",", "type", "=", "float", ",", "default", "=", "0.025", ",", "help", "=", "'lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_lr_min'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'minimum lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "\n", "help", "=", "'weight decay for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--w_grad_clip'", ",", "type", "=", "float", ",", "default", "=", "5.", ",", "\n", "help", "=", "'gradient clipping for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device ids separated by comma. '", "\n", "'`all` indicates use all gpus.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'# of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'# of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_lr'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "'lr for alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'weight decay for alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'the size of input images'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'cutout length'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.SearchConfig.__init__": [[68, 77], ["config.SearchConfig.build_parser", "config.SearchConfig.parse_args", "argparse.Namespace.__init__", "os.path.join", "os.path.join", "config.parse_gpus", "vars"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.AugmentConfig.build_parser", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.parse_gpus"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "self", ".", "build_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "self", ".", "data_path", "=", "'data'", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "'experiment/searchs'", ",", "self", ".", "name", ")", "\n", "self", ".", "plot_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'plots'", ")", "\n", "self", ".", "gpus", "=", "parse_gpus", "(", "self", ".", "gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.AugmentConfig.build_parser": [[80, 110], ["config.get_parser", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument", "get_parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.get_parser"], ["    ", "def", "build_parser", "(", "self", ")", ":", "\n", "        ", "parser", "=", "get_parser", "(", "\"Augment config\"", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'CIFAR10'", ",", "help", "=", "'CIFAR10'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "help", "=", "'data_path'", ",", "default", "=", "'data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_loader_type'", ",", "required", "=", "False", ",", "help", "=", "'Torch / DALI'", ",", "default", "=", "'Torch'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "96", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.025", ",", "help", "=", "'lr for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "5.", ",", "help", "=", "'gradient clipping for weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device ids separated by comma. `all` indicates use all gpus.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "600", ",", "help", "=", "'# of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "36", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--aux_weight'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "'auxiliary loss weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'cutout length'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_path_prob'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'drop path prob'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'the width and height of input images'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'flag of using 16bit or not'", ")", "\n", "parser", ".", "add_argument", "(", "'--genotype'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Cell genotype'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "default", "=", "None", ",", "help", "=", "'save_path'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "default", "=", "'experiment/'", ",", "help", "=", "'save_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--file'", ",", "default", "=", "''", ",", "help", "=", "'file_save_'", ")", "\n", "parser", ".", "add_argument", "(", "'--i'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.AugmentConfig.__init__": [[111, 142], ["config.AugmentConfig.build_parser", "config.AugmentConfig.parse_args", "argparse.Namespace.__init__", "time.asctime().replace", "config.parse_gpus", "os.path.join", "os.path.join", "print", "genotypes.from_str", "os.path.join", "print", "open", "open.readlines", "enumerate", "vars", "time.asctime", "random.choice", "os.path.join", "os.path.isdir", "time.localtime", "range", "str", "print"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.AugmentConfig.build_parser", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.parse_gpus", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.from_str"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "self", ".", "build_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "vars", "(", "args", ")", ")", "\n", "time_str", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", ")", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "random_str", "=", "''", ".", "join", "(", "random", ".", "choice", "(", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", ")", "for", "_", "in", "range", "(", "8", ")", ")", "\n", "if", "self", ".", "save_path", ":", "\n", "            ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "name", ",", "self", ".", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "name", ",", "time_str", "+", "random_str", ")", "\n", "\n", "", "if", "args", ".", "genotype", ":", "\n", "            ", "print", "(", "'Using single genotype'", ")", "\n", "self", ".", "genotype", "=", "gt", ".", "from_str", "(", "self", ".", "genotype", ")", "\n", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'rl'", ",", "self", ".", "name", ")", "\n", "\n", "", "if", "self", ".", "file", ":", "\n", "            ", "print", "(", "'Using multi genotypes from file'", ")", "\n", "file_", "=", "open", "(", "self", ".", "file", ")", "\n", "lines", "=", "file_", ".", "readlines", "(", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "name", ",", "str", "(", "i", ")", ")", "\n", "if", "i", "<", "self", ".", "i", ":", "\n", "                    ", "continue", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "path", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "self", ".", "genotype", "=", "line", "\n", "print", "(", "line", ")", "\n", "break", "\n", "", "", "", "self", ".", "gpus", "=", "parse_gpus", "(", "self", ".", "gpus", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.get_parser": [[11, 15], ["argparse.ArgumentParser", "functools.partial"], "function", ["None"], ["def", "get_parser", "(", "name", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "name", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "=", "partial", "(", "parser", ".", "add_argument", ",", "help", "=", "' '", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.config.parse_gpus": [[17, 22], ["list", "range", "int", "torch.cuda.device_count", "gpus.split"], "function", ["None"], ["", "def", "parse_gpus", "(", "gpus", ")", ":", "\n", "    ", "if", "gpus", "==", "'all'", ":", "\n", "        ", "return", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "int", "(", "s", ")", "for", "s", "in", "gpus", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.random_darts_generator.generate_random_structure": [[7, 18], ["int", "len", "numpy.random.randn", "utils.darts_weight_unpack", "utils.darts_weight_unpack", "genotypes.parse_numpy", "genotypes.parse_numpy", "range", "genotypes.Genotype", "sum", "list", "range"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.darts_weight_unpack", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.darts_weight_unpack", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse_numpy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse_numpy"], ["def", "generate_random_structure", "(", "node", "=", "4", ",", "k", "=", "2", ")", ":", "\n", "    ", "total_edge", "=", "sum", "(", "list", "(", "range", "(", "2", ",", "node", "+", "2", ")", ")", ")", "*", "2", "\n", "cell_edge", "=", "int", "(", "total_edge", "/", "2", ")", "\n", "num_ops", "=", "len", "(", "gt", ".", "PRIMITIVES", ")", "\n", "weight", "=", "np", ".", "random", ".", "randn", "(", "total_edge", ",", "num_ops", ")", "\n", "theta_norm", "=", "utils", ".", "darts_weight_unpack", "(", "weight", "[", "0", ":", "cell_edge", "]", ",", "node", ")", "\n", "theta_reduce", "=", "utils", ".", "darts_weight_unpack", "(", "weight", "[", "cell_edge", ":", "]", ",", "node", ")", "\n", "gene_normal", "=", "gt", ".", "parse_numpy", "(", "theta_norm", ",", "k", "=", "k", ")", "\n", "gene_reduce", "=", "gt", ".", "parse_numpy", "(", "theta_reduce", ",", "k", "=", "k", ")", "\n", "concat", "=", "range", "(", "2", ",", "2", "+", "node", ")", "\n", "return", "gt", ".", "Genotype", "(", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.preproc.Cutout.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.preproc.Cutout.__call__": [[11, 28], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.preproc.data_transforms": [[30, 71], ["dataset.lower.lower", "torchvision.Compose", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "preproc.Cutout", "torchvision.RandomAffine", "ValueError", "torchvision.RandomAffine", "torchvision.RandomVerticalFlip"], "function", ["None"], ["", "", "def", "data_transforms", "(", "dataset", ",", "input_size", ",", "cutout_length", ")", ":", "\n", "    ", "dataset", "=", "dataset", ".", "lower", "(", ")", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", "\n", "", "elif", "dataset", "==", "'mnist'", ":", "\n", "        ", "MEAN", "=", "[", "0.13066051707548254", "]", "\n", "STD", "=", "[", "0.30810780244715075", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomAffine", "(", "degrees", "=", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ",", "scale", "=", "(", "0.9", ",", "1.1", ")", ",", "shear", "=", "0.1", ")", "\n", "]", "\n", "", "elif", "dataset", "==", "'fashionmnist'", ":", "\n", "        ", "MEAN", "=", "[", "0.28604063146254594", "]", "\n", "STD", "=", "[", "0.35302426207299326", "]", "\n", "transf", "=", "[", "\n", "transforms", ".", "RandomAffine", "(", "degrees", "=", "15", ",", "translate", "=", "(", "0.1", ",", "0.1", ")", ",", "scale", "=", "(", "0.9", ",", "1.1", ")", ",", "shear", "=", "0.1", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not expected dataset = {}'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "normalize", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", "\n", "]", "\n", "\n", "resize", "=", "[", "\n", "transforms", ".", "Resize", "(", "(", "input_size", ",", "input_size", ")", ")", "\n", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "transf", "+", "resize", "+", "normalize", ")", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "resize", "+", "normalize", ")", "\n", "\n", "if", "cutout_length", ">", "0", ":", "\n", "        ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "return", "train_transform", ",", "valid_transform", "\n", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.__init__": [[6, 11], ["copy.deepcopy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "net", ",", "w_momentum", ",", "w_weight_decay", ")", ":", "\n", "        ", "self", ".", "net", "=", "net", "\n", "self", ".", "v_net", "=", "copy", ".", "deepcopy", "(", "net", ")", "\n", "self", ".", "w_momentum", "=", "w_momentum", "\n", "self", ".", "w_weight_decay", "=", "w_weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.virtual_step": [[12, 27], ["architect.Architect.net.loss", "torch.autograd.grad", "architect.Architect.net.weights", "torch.no_grad", "zip", "zip", "architect.Architect.net.weights", "architect.Architect.v_net.weights", "vw.copy_", "architect.Architect.net.alphas", "architect.Architect.v_net.alphas", "va.copy_", "w_optim.state[].get"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.loss", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas"], ["", "def", "virtual_step", "(", "self", ",", "trn_X", ",", "trn_y", ",", "xi", ",", "w_optim", ")", ":", "\n", "        ", "\"\"\"\n        Compute unrolled weight w' (virtual step)\n        \"\"\"", "\n", "loss", "=", "self", ".", "net", ".", "loss", "(", "trn_X", ",", "trn_y", ")", "\n", "\n", "# compute gradient", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "net", ".", "weights", "(", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "w", ",", "vw", ",", "g", "in", "zip", "(", "self", ".", "net", ".", "weights", "(", ")", ",", "self", ".", "v_net", ".", "weights", "(", ")", ",", "gradients", ")", ":", "\n", "                ", "m", "=", "w_optim", ".", "state", "[", "w", "]", ".", "get", "(", "'momentum_buffer'", ",", "0.", ")", "*", "self", ".", "w_momentum", "\n", "vw", ".", "copy_", "(", "w", "-", "xi", "*", "(", "m", "+", "g", "+", "self", ".", "w_weight_decay", "*", "w", ")", ")", "\n", "", "for", "a", ",", "va", "in", "zip", "(", "self", ".", "net", ".", "alphas", "(", ")", ",", "self", ".", "v_net", ".", "alphas", "(", ")", ")", ":", "\n", "                ", "va", ".", "copy_", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.unrolled_backward": [[28, 46], ["architect.Architect.virtual_step", "architect.Architect.v_net.loss", "tuple", "tuple", "torch.autograd.grad", "torch.nn.utils.clip_grad_norm_", "architect.Architect.compute_hessian", "architect.Architect.v_net.alphas", "architect.Architect.v_net.weights", "torch.no_grad", "zip", "len", "len", "architect.Architect.net.alphas"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.virtual_step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.loss", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.compute_hessian", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas"], ["", "", "", "def", "unrolled_backward", "(", "self", ",", "trn_X", ",", "trn_y", ",", "val_X", ",", "val_y", ",", "xi", ",", "w_optim", ")", ":", "\n", "        ", "\"\"\" Compute unrolled loss and backward its gradients\"\"\"", "\n", "self", ".", "virtual_step", "(", "trn_X", ",", "trn_y", ",", "xi", ",", "w_optim", ")", "\n", "loss", "=", "self", ".", "v_net", ".", "loss", "(", "val_X", ",", "val_y", ")", "\n", "\n", "# compute gradient", "\n", "v_alphas", "=", "tuple", "(", "self", ".", "v_net", ".", "alphas", "(", ")", ")", "\n", "v_weights", "=", "tuple", "(", "self", ".", "v_net", ".", "weights", "(", ")", ")", "\n", "v_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "v_alphas", "+", "v_weights", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "v_grads", ",", "5.", ")", "\n", "dalpha", "=", "v_grads", "[", ":", "len", "(", "v_alphas", ")", "]", "\n", "dw", "=", "v_grads", "[", "len", "(", "v_alphas", ")", ":", "]", "\n", "\n", "hessian", "=", "self", ".", "compute_hessian", "(", "dw", ",", "trn_X", ",", "trn_y", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "alpha", ",", "da", ",", "h", "in", "zip", "(", "self", ".", "net", ".", "alphas", "(", ")", ",", "dalpha", ",", "hessian", ")", ":", "\n", "                ", "alpha", ".", "grad", "=", "da", "-", "xi", "*", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.compute_hessian": [[47, 70], ["torch.cat().norm", "architect.Architect.net.loss", "torch.autograd.grad", "architect.Architect.net.loss", "torch.autograd.grad", "torch.no_grad", "zip", "architect.Architect.net.alphas", "torch.no_grad", "zip", "architect.Architect.net.alphas", "torch.no_grad", "zip", "torch.cat", "architect.Architect.net.weights", "architect.Architect.net.weights", "architect.Architect.net.weights", "zip", "w.view"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.loss", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.loss", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights"], ["", "", "", "def", "compute_hessian", "(", "self", ",", "dw", ",", "trn_X", ",", "trn_y", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "cat", "(", "[", "w", ".", "view", "(", "-", "1", ")", "for", "w", "in", "dw", "]", ")", ".", "norm", "(", ")", "\n", "eps", "=", "0.01", "/", "norm", "\n", "\n", "# w+ = w + eps*dw`", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p", ",", "d", "in", "zip", "(", "self", ".", "net", ".", "weights", "(", ")", ",", "dw", ")", ":", "\n", "                ", "p", "+=", "eps", "*", "d", "\n", "", "", "loss", "=", "self", ".", "net", ".", "loss", "(", "trn_X", ",", "trn_y", ")", "\n", "dalpha_pos", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "net", ".", "alphas", "(", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p", ",", "d", "in", "zip", "(", "self", ".", "net", ".", "weights", "(", ")", ",", "dw", ")", ":", "\n", "                ", "p", "-=", "2.", "*", "eps", "*", "d", "\n", "", "", "loss", "=", "self", ".", "net", ".", "loss", "(", "trn_X", ",", "trn_y", ")", "\n", "dalpha_neg", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "net", ".", "alphas", "(", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "p", ",", "d", "in", "zip", "(", "self", ".", "net", ".", "weights", "(", ")", ",", "dw", ")", ":", "\n", "                ", "p", "+=", "eps", "*", "d", "\n", "\n", "", "", "hessian", "=", "[", "(", "p", "-", "n", ")", "/", "2.", "*", "eps", "for", "p", ",", "n", "in", "zip", "(", "dalpha_pos", ",", "dalpha_neg", ")", "]", "\n", "return", "hessian", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.__init__": [[57, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val_acc", "=", "[", "]", "\n", "self", ".", "best_acc", "=", "0.0", "\n", "self", ".", "genotypes", "=", "[", "]", "\n", "self", ".", "samples", "=", "[", "]", "\n", "self", ".", "best_geno", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.get_results": [[64, 73], ["dict"], "methods", ["None"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "res", "=", "dict", "(", ")", "\n", "res", "[", "'val_acc'", "]", "=", "self", ".", "val_acc", "\n", "res", "[", "'genotype'", "]", "=", "self", ".", "genotypes", "\n", "res", "[", "'sample'", "]", "=", "self", ".", "samples", "\n", "res", "[", "'best_val_acc'", "]", "=", "[", "self", ".", "best_acc", "]", "\n", "res", "[", "'best_genotype'", "]", "=", "[", "self", ".", "best_geno", "]", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.objective_function": [[74, 88], ["run_rl.evaluation", "run_rl.NASCifar10.val_acc.append", "run_rl.NASCifar10.genotypes.append", "run_rl.NASCifar10.samples.append", "isinstance", "float", "str", "float", "str", "int", "s.numpy"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.evaluation"], ["", "def", "objective_function", "(", "self", ",", "sample", ",", "name", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sample", "[", "0", "]", ",", "int", ")", ":", "\n", "            ", "sample", "=", "[", "s", ".", "numpy", "(", ")", "[", "0", "]", "for", "s", "in", "sample", "]", "\n", "\n", "", "acc", ",", "geno", "=", "evaluation", "(", "sample", ",", "name", ")", "\n", "\n", "self", ".", "val_acc", ".", "append", "(", "float", "(", "acc", ")", ")", "\n", "self", ".", "genotypes", ".", "append", "(", "str", "(", "geno", ")", ")", "\n", "self", ".", "samples", ".", "append", "(", "[", "int", "(", "s", ")", "for", "s", "in", "sample", "]", ")", "\n", "if", "acc", ">", "self", ".", "best_acc", ":", "\n", "            ", "self", ".", "best_acc", "=", "float", "(", "acc", ")", "\n", "self", ".", "best_geno", "=", "str", "(", "geno", ")", "\n", "\n", "", "return", "1", "-", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.get_configuration_space": [[89, 98], ["ConfigSpace.ConfigurationSpace", "range", "range", "ConfigSpace.ConfigurationSpace.add_hyperparameter", "ConfigSpace.CategoricalHyperparameter"], "methods", ["None"], ["", "def", "get_configuration_space", "(", "self", ")", ":", "\n", "        ", "cs", "=", "ConfigSpace", ".", "ConfigurationSpace", "(", ")", "\n", "OPS", "=", "PRIMITIVES", "[", "0", ":", "-", "1", "]", "\n", "for", "cell", "in", "[", "'normal'", ",", "'reduce'", "]", ":", "\n", "            ", "for", "node", "in", "range", "(", "2", ",", "6", ")", ":", "\n", "                ", "for", "prev", "in", "range", "(", "0", ",", "node", ")", ":", "\n", "                    ", "cs", ".", "add_hyperparameter", "(", "ConfigSpace", ".", "CategoricalHyperparameter", "(", "\"{}_{}_{}\"", ".", "format", "(", "cell", ",", "node", ",", "prev", ")", ",", "OPS", ")", ")", "\n", "\n", "", "", "", "return", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.ExponentialMovingAverage.__init__": [[103, 107], ["tensorflow.Variable", "tensorflow.Variable"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "_numerator", "=", "tf", ".", "Variable", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_denominator", "=", "tf", ".", "Variable", "(", "0.0", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_momentum", "=", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.ExponentialMovingAverage.update": [[108, 114], ["run_rl.ExponentialMovingAverage._numerator.assign", "run_rl.ExponentialMovingAverage._denominator.assign"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Update the moving average with a new sample.\"\"\"", "\n", "self", ".", "_numerator", ".", "assign", "(", "\n", "self", ".", "_momentum", "*", "self", ".", "_numerator", "+", "(", "1", "-", "self", ".", "_momentum", ")", "*", "value", ")", "\n", "self", ".", "_denominator", ".", "assign", "(", "\n", "self", ".", "_momentum", "*", "self", ".", "_denominator", "+", "(", "1", "-", "self", ".", "_momentum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.ExponentialMovingAverage.value": [[115, 118], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the current value of the moving average\"\"\"", "\n", "return", "self", ".", "_numerator", "/", "self", ".", "_denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.Reward.__init__": [[123, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bench", ")", ":", "\n", "        ", "self", ".", "bench", "=", "bench", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.Reward.compute_reward": [[126, 130], ["run_rl.Reward.bench.objective_function", "float"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.NASCifar10.objective_function"], ["", "def", "compute_reward", "(", "self", ",", "sample", ",", "name", ")", ":", "\n", "        ", "error", "=", "self", ".", "bench", ".", "objective_function", "(", "sample", ",", "name", ")", "\n", "fitness", "=", "1", "-", "float", "(", "error", ")", "\n", "return", "fitness", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.__init__": [[133, 140], ["len", "run_rl.ExponentialMovingAverage", "tensorflow.Variable", "tensorflow.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reward", ",", "cat_variables", ",", "momentum", ")", ":", "\n", "        ", "self", ".", "_num_variables", "=", "len", "(", "cat_variables", ")", "\n", "self", ".", "_logits", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "ci", "]", ")", ")", "for", "ci", "in", "cat_variables", "]", "\n", "self", ".", "_baseline", "=", "ExponentialMovingAverage", "(", "momentum", "=", "momentum", ")", "\n", "self", ".", "_reward", "=", "reward", "\n", "self", ".", "_last_reward", "=", "0.0", "\n", "self", ".", "_test_acc", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step": [[141, 161], ["tensorflow.reduce_sum", "run_rl.REINFORCEOptimizer._baseline.update", "tensorflow_probability.distributions.Categorical", "run_rl.REINFORCEOptimizer._reward.compute_reward", "run_rl.REINFORCEOptimizer._baseline.value", "tensorflow.stop_gradient", "di.sample", "dists[].log_prob", "range", "len"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.Reward.compute_reward", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.ExponentialMovingAverage.value"], ["", "def", "step", "(", "self", ",", "name", ")", ":", "\n", "        ", "dists", "=", "[", "tfp", ".", "distributions", ".", "Categorical", "(", "logits", "=", "li", ")", "for", "li", "in", "self", ".", "_logits", "]", "\n", "attempts", "=", "0", "\n", "while", "True", ":", "\n", "            ", "sample", "=", "[", "di", ".", "sample", "(", ")", "for", "di", "in", "dists", "]", "# 28", "\n", "# Compute the sample reward. Larger rewards are better.", "\n", "reward", "=", "self", ".", "_reward", ".", "compute_reward", "(", "sample", ",", "name", ")", "\n", "attempts", "+=", "1", "\n", "if", "reward", ">", "0.001", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "_last_reward", "=", "reward", "\n", "\n", "# Compute the log-likelihood the sample.", "\n", "log_prob", "=", "tf", ".", "reduce_sum", "(", "[", "dists", "[", "i", "]", ".", "log_prob", "(", "sample", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "sample", ")", ")", "]", ")", "\n", "self", ".", "_baseline", ".", "update", "(", "reward", ")", "\n", "advantage", "=", "reward", "-", "self", ".", "_baseline", ".", "value", "(", ")", "\n", "objective", "=", "tf", ".", "stop_gradient", "(", "advantage", ")", "*", "log_prob", "\n", "\n", "return", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.trainable_variables": [[162, 164], ["None"], "methods", ["None"], ["", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.baseline": [[165, 167], ["run_rl.REINFORCEOptimizer._baseline.value"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.ExponentialMovingAverage.value"], ["", "def", "baseline", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_baseline", ".", "value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.last_reward": [[168, 170], ["None"], "methods", ["None"], ["", "def", "last_reward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_last_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.test_acc": [[171, 173], ["None"], "methods", ["None"], ["", "def", "test_acc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.probabilities": [[174, 176], ["tensorflow.nn.softmax().numpy", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "probabilities", "(", "self", ")", ":", "\n", "        ", "return", "[", "tf", ".", "nn", ".", "softmax", "(", "li", ")", ".", "numpy", "(", ")", "for", "li", "in", "self", ".", "_logits", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.train": [[178, 217], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "model.train", "enumerate", "logger.info", "X.size", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "run_rl.train.train_iter"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "def", "train_iter", "(", "X", ",", "y", ")", ":", "\n", "        ", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "aux_logits", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "loss", "+=", "0.4", "*", "criterion", "(", "aux_logits", ",", "y", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# gradient clipping", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "5", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "200", "==", "0", "or", "step", "==", "len_train_loader", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Train: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "step", ",", "len_train_loader", "-", "1", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "len_train_loader", "=", "len", "(", "train_loader", ")", "\n", "cur_step", "=", "epoch", "*", "len_train_loader", "\n", "cur_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "train_iter", "(", "X", ",", "y", ")", "\n", "cur_step", "+=", "1", "\n", "", "logger", ".", "info", "(", "\"Train: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "top1", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.validate": [[219, 248], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len", "model.eval", "logger.info", "X.size", "model", "criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.no_grad", "enumerate", "criterion.item", "prec1.item", "prec5.item", "logger.info", "run_rl.validate.val_iter"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "len_val_loader", "=", "len", "(", "valid_loader", ")", "\n", "\n", "def", "val_iter", "(", "X", ",", "y", ")", ":", "\n", "        ", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "X", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "y", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "200", "==", "0", "or", "step", "==", "len_val_loader", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"Valid: [{:3d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "step", ",", "len_val_loader", "-", "1", ",", "losses", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "val_iter", "(", "X", ",", "y", ")", "\n", "", "", "logger", ".", "info", "(", "\"Valid: [{:3d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ",", "top1", ".", "avg", ")", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.evaluation": [[250, 308], ["eval", "logger.info", "logger.info", "utils.get_data", "torch.CrossEntropyLoss().to", "models.augment_cnn.AugmentCNN", "utils.param_size", "logger.info", "torch.DataParallel().to", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "len", "range", "logger.info", "utils.convert_sample_to_genotype", "nn.DataParallel().to.parameters", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "nn.DataParallel().to.module.drop_path_prob", "run_rl.train", "run_rl.validate", "str", "torch.CrossEntropyLoss", "torch.DataParallel"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.get_data", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.param_size", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.convert_sample_to_genotype", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AugmentCNN.drop_path_prob", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.validate"], ["", "def", "evaluation", "(", "sample", ",", "name", ")", ":", "\n", "    ", "geno", "=", "eval", "(", "convert_sample_to_genotype", "(", "sample", ")", ")", "\n", "logger", ".", "info", "(", "'Model sample: {}'", ".", "format", "(", "sample", ")", ")", "\n", "logger", ".", "info", "(", "'Genotype: {}'", ".", "format", "(", "str", "(", "geno", ")", ")", ")", "\n", "\n", "# get data with meta info    ", "\n", "input_size", ",", "input_channels", ",", "n_classes", ",", "train_data", ",", "valid_data", "=", "utils", ".", "get_data", "(", "\n", "'cifar10'", ",", "args", ".", "data_path", ",", "config", "[", "'imagesize'", "]", ",", "config", "[", "'cutout'", "]", ",", "validation", "=", "True", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "use_aux", "=", "True", "\n", "\n", "# change size of input image ", "\n", "input_size", "=", "config", "[", "'imagesize'", "]", "\n", "\n", "model", "=", "AugmentCNN", "(", "input_size", ",", "input_channels", ",", "config", "[", "'channel'", "]", ",", "10", ",", "config", "[", "'layers'", "]", ",", "True", ",", "geno", ")", "\n", "mb_params", "=", "utils", ".", "param_size", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"Model size = {:.3f} MB\"", ".", "format", "(", "mb_params", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# weights optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "config", "[", "'lr'", "]", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "3e-4", ")", "\n", "\n", "# get data loader", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "config", "[", "'batchsize'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "config", "[", "'batchsize'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# lr scheduler", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "config", "[", "'epochs'", "]", ")", "\n", "\n", "best_top1", "=", "0.", "\n", "len_train_loader", "=", "len", "(", "train_loader", ")", "\n", "\n", "# training loop", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "drop_prob", "=", "0.2", "*", "epoch", "/", "config", "[", "'epochs'", "]", "\n", "model", ".", "module", ".", "drop_path_prob", "(", "drop_prob", ",", "config", "[", "'fp'", "]", ")", "\n", "\n", "# training", "\n", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "criterion", ",", "epoch", ")", "\n", "\n", "# validation", "\n", "cur_step", "=", "(", "epoch", "+", "1", ")", "*", "len_train_loader", "\n", "top1", "=", "validate", "(", "valid_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "cur_step", ")", "\n", "\n", "# save", "\n", "if", "best_top1", "<", "top1", ":", "\n", "            ", "best_top1", "=", "top1", "\n", "is_best", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "# utils.save_checkpoint(model, config.path, is_best)", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Final best Prec@1 = {:.4%}\"", ".", "format", "(", "best_top1", ")", ")", "\n", "return", "best_top1", ",", "geno", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.run_reinforce": [[310, 326], ["optimizer.trainable_variables", "range", "tape.gradient", "zip", "trace.append", "logger.info", "tensorflow.GradientTape", "optimizer.step", "var.assign_add", "optimizer.probabilities", "optimizer.baseline().numpy", "optimizer.baseline"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.trainable_variables", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.probabilities", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.baseline"], ["", "def", "run_reinforce", "(", "optimizer", ",", "learning_rate", ",", "max_time", ",", "bench", ",", "num_steps", ",", "log_every_n_steps", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Run multiple steps of REINFORCE to optimize a fixed reward function.\"\"\"", "\n", "trainable_variables", "=", "optimizer", ".", "trainable_variables", "(", ")", "\n", "trace", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "            ", "objective", "=", "optimizer", ".", "step", "(", "name", "=", "'%03d'", "%", "step", ")", "\n", "\n", "# Update the logits using gradient ascent.", "\n", "", "gradients", "=", "tape", ".", "gradient", "(", "objective", ",", "trainable_variables", ")", "\n", "for", "grad", ",", "var", "in", "zip", "(", "gradients", ",", "trainable_variables", ")", ":", "\n", "            ", "var", ".", "assign_add", "(", "learning_rate", "*", "grad", ")", "\n", "\n", "", "trace", ".", "append", "(", "optimizer", ".", "probabilities", "(", ")", ")", "\n", "logger", ".", "info", "(", "'step = {:d}, baseline reward = {:.5f}'", ".", "format", "(", "step", ",", "optimizer", ".", "baseline", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "", "return", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.main": [[25, 124], ["logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "utils.get_data", "torch.CrossEntropyLoss().to", "models.search_cnn.SearchCNNController", "model.to.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "len", "list", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "architect.Architect", "range", "logger.info", "logger.info", "model.to.weights", "model.to.alphas", "range", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "model.to.print_alphas", "search.train", "model.to.print_alphas", "search.validate", "model.to.genotype", "logger.info", "os.path.join", "visualize.plot", "visualize.plot", "utils.save_checkpoint", "print", "torch.CrossEntropyLoss", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "len"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.get_data", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.print_alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.print_alphas", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.validate", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.genotype", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.visualize.plot", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.visualize.plot", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Logger is set - training start\"", ")", "\n", "\n", "# set default gpu device id", "\n", "torch", ".", "cuda", ".", "set_device", "(", "config", ".", "gpus", "[", "0", "]", ")", "\n", "\n", "# set seed", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "config", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "config", ".", "seed", ")", "\n", "\n", "cudnn", "=", "False", "\n", "if", "cudnn", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "else", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# get data with meta info", "\n", "", "input_size", ",", "input_channels", ",", "n_classes", ",", "train_data", "=", "utils", ".", "get_data", "(", "\n", "config", ".", "dataset", ",", "config", ".", "data_path", ",", "config", ".", "image_size", ",", "cutout_length", "=", "0", ",", "validation", "=", "False", ")", "\n", "input_size", "=", "config", ".", "image_size", "\n", "\n", "net_crit", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "SearchCNNController", "(", "input_channels", ",", "config", ".", "init_channels", ",", "n_classes", ",", "config", ".", "layers", ",", "\n", "net_crit", ",", "device_ids", "=", "config", ".", "gpus", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# weights optimizer", "\n", "w_optim", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "weights", "(", ")", ",", "config", ".", "w_lr", ",", "momentum", "=", "config", ".", "w_momentum", ",", "\n", "weight_decay", "=", "config", ".", "w_weight_decay", ")", "\n", "# alphas optimizer", "\n", "alpha_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "alphas", "(", ")", ",", "config", ".", "alpha_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "config", ".", "alpha_weight_decay", ")", "\n", "\n", "# split data to train/validation", "\n", "n_train", "=", "len", "(", "train_data", ")", "\n", "split", "=", "n_train", "//", "2", "\n", "indices", "=", "list", "(", "range", "(", "n_train", ")", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", ":", "split", "]", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "indices", "[", "split", ":", "]", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "config", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "\n", "batch_size", "=", "config", ".", "batch_size", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "num_workers", "=", "config", ".", "workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "w_optim", ",", "config", ".", "epochs", ",", "eta_min", "=", "config", ".", "w_lr_min", ")", "\n", "architect", "=", "Architect", "(", "model", ",", "config", ".", "w_momentum", ",", "config", ".", "w_weight_decay", ")", "\n", "\n", "# training loop", "\n", "best_top1", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "config", ".", "epochs", ")", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "# confirm initialization of alpha", "\n", "model", ".", "print_alphas", "(", "logger", ")", "\n", "\n", "# training", "\n", "train", "(", "train_loader", ",", "valid_loader", ",", "model", ",", "architect", ",", "w_optim", ",", "alpha_optim", ",", "lr", ",", "epoch", ")", "\n", "\n", "# DEBUG for visualize alpha", "\n", "model", ".", "print_alphas", "(", "logger", ")", "\n", "\n", "# validation", "\n", "cur_step", "=", "(", "epoch", "+", "1", ")", "*", "len", "(", "train_loader", ")", "\n", "top1", "=", "validate", "(", "valid_loader", ",", "model", ",", "epoch", ",", "cur_step", ")", "\n", "\n", "# log", "\n", "# genotype", "\n", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "logger", ".", "info", "(", "\"genotype = {}\"", ".", "format", "(", "genotype", ")", ")", "\n", "\n", "# genotype as a image", "\n", "plot_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "plot_path", ",", "\"EP{:02d}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "caption", "=", "\"Epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", "plot", "(", "genotype", ".", "normal", ",", "plot_path", "+", "\"-normal\"", ",", "caption", ")", "\n", "plot", "(", "genotype", ".", "reduce", ",", "plot_path", "+", "\"-reduce\"", ",", "caption", ")", "\n", "\n", "# save", "\n", "if", "best_top1", "<", "top1", ":", "\n", "            ", "best_top1", "=", "top1", "\n", "best_genotype", "=", "genotype", "\n", "is_best", "=", "True", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "", "utils", ".", "save_checkpoint", "(", "model", ",", "config", ".", "path", ",", "is_best", ")", "\n", "print", "(", "\"\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Final best Prec@1 = {:.4%}\"", ".", "format", "(", "best_top1", ")", ")", "\n", "logger", ".", "info", "(", "\"Best Genotype = {}\"", ".", "format", "(", "best_genotype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train": [[126, 174], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "writer.add_scalar", "model.train", "enumerate", "logger.info", "len", "zip", "trn_X.size", "alpha_optim.zero_grad", "architect.unrolled_backward", "alpha_optim.step", "w_optim.zero_grad", "model", "model.criterion", "model.criterion.backward", "torch.utils.clip_grad_norm_", "w_optim.step", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "trn_X.to", "trn_y.to", "val_X.to", "val_y.to", "model.weights", "model.criterion.item", "prec1.item", "prec5.item", "logger.info", "model.criterion.item", "prec1.item", "prec5.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.train", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.architect.Architect.unrolled_backward", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.run_rl.REINFORCEOptimizer.step", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights"], ["", "def", "train", "(", "train_loader", ",", "valid_loader", ",", "model", ",", "architect", ",", "w_optim", ",", "alpha_optim", ",", "lr", ",", "epoch", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "cur_step", "=", "epoch", "*", "len", "(", "train_loader", ")", "\n", "writer", ".", "add_scalar", "(", "'train/lr'", ",", "lr", ",", "cur_step", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "(", "trn_X", ",", "trn_y", ")", ",", "(", "val_X", ",", "val_y", ")", ")", "in", "enumerate", "(", "zip", "(", "train_loader", ",", "valid_loader", ")", ")", ":", "\n", "        ", "trn_X", ",", "trn_y", "=", "trn_X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "trn_y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "val_X", ",", "val_y", "=", "val_X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "val_y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "N", "=", "trn_X", ".", "size", "(", "0", ")", "\n", "\n", "# phase 2. architect step (alpha)", "\n", "alpha_optim", ".", "zero_grad", "(", ")", "\n", "architect", ".", "unrolled_backward", "(", "trn_X", ",", "trn_y", ",", "val_X", ",", "val_y", ",", "lr", ",", "w_optim", ")", "\n", "alpha_optim", ".", "step", "(", ")", "\n", "\n", "# phase 1. child network step (w)", "\n", "w_optim", ".", "zero_grad", "(", ")", "\n", "logits", "=", "model", "(", "trn_X", ")", "\n", "loss", "=", "model", ".", "criterion", "(", "logits", ",", "trn_y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# gradient clipping", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "weights", "(", ")", ",", "config", ".", "w_grad_clip", ")", "\n", "w_optim", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "trn_y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "config", ".", "print_freq", "==", "0", "or", "step", "==", "len", "(", "train_loader", ")", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Train: [{:2d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "step", ",", "len", "(", "train_loader", ")", "-", "1", ",", "losses", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top1'", ",", "prec1", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'train/top5'", ",", "prec5", ".", "item", "(", ")", ",", "cur_step", ")", "\n", "cur_step", "+=", "1", "\n", "\n", "", "logger", ".", "info", "(", "\"Train: [{:2d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "top1", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.search.validate": [[176, 210], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.eval", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "logger.info", "torch.no_grad", "torch.no_grad", "enumerate", "X.size", "model", "model.criterion", "utils.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "X.to", "y.to", "model.criterion.item", "prec1.item", "prec5.item", "logger.info", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update"], ["", "def", "validate", "(", "valid_loader", ",", "model", ",", "epoch", ",", "cur_step", ")", ":", "\n", "    ", "top1", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "X", ",", "y", ")", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "            ", "X", ",", "y", "=", "X", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", ",", "y", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "N", "=", "X", ".", "size", "(", "0", ")", "\n", "\n", "logits", "=", "model", "(", "X", ")", "\n", "loss", "=", "model", ".", "criterion", "(", "logits", ",", "y", ")", "\n", "\n", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "logits", ",", "y", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "N", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "N", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "N", ")", "\n", "\n", "if", "step", "%", "config", ".", "print_freq", "==", "0", "or", "step", "==", "len", "(", "valid_loader", ")", "-", "1", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"Valid: [{:2d}/{}] Step {:03d}/{:03d} Loss {losses.avg:.3f} \"", "\n", "\"Prec@(1,5) ({top1.avg:.1%}, {top5.avg:.1%})\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "step", ",", "len", "(", "valid_loader", ")", "-", "1", ",", "losses", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "losses", ".", "avg", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'val/top1'", ",", "top1", ".", "avg", ",", "cur_step", ")", "\n", "writer", ".", "add_scalar", "(", "'val/top5'", ",", "top5", ".", "avg", ",", "cur_step", ")", "\n", "\n", "logger", ".", "info", "(", "\"Valid: [{:2d}/{}] Final Prec@1 {:.4%}\"", ".", "format", "(", "epoch", "+", "1", ",", "config", ".", "epochs", ",", "top1", ".", "avg", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.visualize.plot": [[6, 60], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "len", "range", "enumerate", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "graphviz.Digraph.node", "graphviz.Digraph.edge", "graphviz.Digraph.attr", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot", "(", "genotype", ",", "file_path", ",", "caption", "=", "None", ")", ":", "\n", "    ", "\"\"\" make DAG plot and save to file_path as .png \"\"\"", "\n", "edge_attr", "=", "{", "\n", "'fontsize'", ":", "'20'", ",", "\n", "'fontname'", ":", "'times'", "\n", "}", "\n", "node_attr", "=", "{", "\n", "'style'", ":", "'filled'", ",", "\n", "'shape'", ":", "'rect'", ",", "\n", "'align'", ":", "'center'", ",", "\n", "'fontsize'", ":", "'20'", ",", "\n", "'height'", ":", "'0.5'", ",", "\n", "'width'", ":", "'0.5'", ",", "\n", "'penwidth'", ":", "'2'", ",", "\n", "'fontname'", ":", "'times'", "\n", "}", "\n", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "edge_attr", ",", "\n", "node_attr", "=", "node_attr", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "# input nodes", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "\n", "# intermediate nodes", "\n", "n_nodes", "=", "len", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", ",", "edges", "in", "enumerate", "(", "genotype", ")", ":", "\n", "        ", "for", "op", ",", "j", "in", "edges", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "                ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "                ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "# output node", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "# add image caption", "\n", "", "if", "caption", ":", "\n", "        ", "g", ".", "attr", "(", "label", "=", "caption", ",", "overlap", "=", "'false'", ",", "fontsize", "=", "'20'", ",", "fontname", "=", "'times'", ")", "\n", "\n", "", "g", ".", "render", "(", "file_path", ",", "view", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.visualize.convert_genotype_to_sample": [[62, 89], ["print", "print", "print", "enumerate", "samples.append", "str", "result.extend", "genotypes.PRIMITIVES.index", "ValueError"], "function", ["None"], ["", "def", "convert_genotype_to_sample", "(", "geno", ")", ":", "\n", "    ", "\"\"\"\n    geno is a genotypes.Genotype\n    output the samples of normal and reduce cell\n    \"\"\"", "\n", "\n", "normal", "=", "geno", ".", "normal", "# list", "\n", "reduce", "=", "geno", ".", "reduce", "# list", "\n", "\n", "samples", "=", "[", "]", "\n", "\n", "for", "cell", "in", "[", "normal", ",", "reduce", "]", ":", "\n", "        ", "sample", "=", "[", "[", "7", ",", "7", "]", ",", "[", "7", ",", "7", ",", "7", "]", ",", "[", "7", ",", "7", ",", "7", ",", "7", "]", ",", "[", "7", ",", "7", ",", "7", ",", "7", ",", "7", "]", "]", "# all ops are initialized to none", "\n", "for", "i", ",", "edges", "in", "enumerate", "(", "cell", ")", ":", "\n", "            ", "for", "op", ",", "j", "in", "edges", ":", "\n", "                ", "try", ":", "\n", "                    ", "sample", "[", "i", "]", "[", "j", "]", "=", "gt", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "", "except", ":", "\n", "                    ", "raise", "ValueError", "(", "'op {} can not be parsed'", ".", "format", "(", "op", ")", ")", "\n", "", "", "", "result", "=", "[", "]", "\n", "for", "node_s", "in", "sample", ":", "\n", "            ", "result", ".", "extend", "(", "node_s", ")", "\n", "\n", "", "samples", ".", "append", "(", "result", ")", "\n", "", "print", "(", "'sample for normal:'", ",", "samples", "[", "0", "]", ")", "\n", "print", "(", "'sample for reduce:'", ",", "samples", "[", "1", "]", ")", "\n", "print", "(", "'sample for genotype:'", ",", "str", "(", "samples", "[", "0", "]", "+", "samples", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.parse_json.RL_choose_by_prob": [[9, 48], ["print", "max", "val_acc.index", "numpy.max().reshape", "numpy.array().reshape", "range", "numpy.array", "enumerate", "utils.convert_sample_to_genotype", "print", "print", "print", "print", "print", "print", "range", "numpy.zeros_like", "range", "numpy.int8().reshape().tolist", "numpy.max", "numpy.array", "np.array.append", "range", "numpy.array", "numpy.int8", "numpy.argmax", "numpy.int8().reshape", "numpy.int8"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.convert_sample_to_genotype"], ["def", "RL_choose_by_prob", "(", "data", ",", "node", "=", "4", ")", ":", "\n", "    ", "val_acc", "=", "data", "[", "'val_acc'", "]", "\n", "print", "(", "val_acc", ")", "\n", "samples", "=", "data", "[", "'sample'", "]", "\n", "optim_prob", "=", "data", "[", "'optim_prob'", "]", "\n", "\n", "# remove the invalid value", "\n", "val_acc", "[", "0", "]", "=", "0", "\n", "best_val_acc", "=", "max", "(", "val_acc", ")", "\n", "index", "=", "val_acc", ".", "index", "(", "best_val_acc", ")", "\n", "prob", "=", "np", ".", "max", "(", "np", ".", "array", "(", "optim_prob", "[", "index", "]", ")", ",", "axis", "=", "1", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", "\n", "sample", "=", "np", ".", "array", "(", "samples", "[", "index", "]", ")", ".", "reshape", "(", "2", ",", "-", "1", ")", "\n", "\n", "mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "node", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "2", ")", ":", "\n", "            ", "mask", ".", "append", "(", "i", ")", "\n", "", "", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "new_sample", "=", "np", ".", "zeros_like", "(", "prob", ")", "+", "7", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "[", "'normal'", ",", "'reduce'", "]", ")", ":", "\n", "        ", "prob_c", "=", "prob", "[", "i", ",", ":", "]", "\n", "for", "j", "in", "range", "(", "node", ")", ":", "\n", "            ", "prob_c_masked", "=", "np", ".", "int8", "(", "mask", "==", "j", ")", "*", "prob_c", "\n", "for", "keep", "in", "range", "(", "2", ")", ":", "\n", "                ", "ind", "=", "np", ".", "argmax", "(", "prob_c_masked", ")", "\n", "new_sample", "[", "i", "]", "[", "ind", "]", "=", "sample", "[", "i", "]", "[", "ind", "]", "\n", "prob_c_masked", "[", "ind", "]", "=", "0", "\n", "", "", "", "new_sample", "=", "np", ".", "int8", "(", "new_sample", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "new_geno", "=", "convert_sample_to_genotype", "(", "new_sample", ")", "\n", "\n", "print", "(", "'# index: {}'", ".", "format", "(", "index", ")", ")", "\n", "print", "(", "'# sample: {}'", ".", "format", "(", "samples", "[", "index", "]", ")", ")", "\n", "print", "(", "'# best genotype: {}'", ".", "format", "(", "data", "[", "'best_genotype'", "]", ")", ")", "\n", "print", "(", "'# new sample: {}'", ".", "format", "(", "new_sample", ")", ")", "\n", "print", "(", "'# new genotype:'", ")", "\n", "print", "(", "new_geno", ")", "\n", "\n", "return", "new_geno", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.parse_json.Evolution_choose_randomly": [[50, 91], ["max", "val_acc.index", "numpy.array", "print", "print", "print", "print", "range", "range", "parse_json.Evolution_choose_randomly.get_mask_for_cell"], "function", ["None"], ["", "def", "Evolution_choose_randomly", "(", "data", ",", "node", "=", "4", ",", "number", "=", "10", ")", ":", "\n", "    ", "val_acc", "=", "data", "[", "'val_acc'", "]", "\n", "samples", "=", "data", "[", "'sample'", "]", "\n", "best_val_acc", "=", "max", "(", "val_acc", ")", "\n", "index", "=", "val_acc", ".", "index", "(", "best_val_acc", ")", "# index of net with heightest acc", "\n", "sample", "=", "np", ".", "array", "(", "samples", "[", "index", "]", ")", "# best sample", "\n", "\n", "def", "get_mask_for_cell", "(", "node", ")", ":", "\n", "        ", "mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "node", ")", ":", "\n", "            ", "mask_n", "=", "[", "1", "for", "n", "in", "range", "(", "i", "+", "2", ")", "]", "# for each node", "\n", "index_list", "=", "list", "(", "range", "(", "i", "+", "2", ")", ")", "# index of mask_n", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "ind", "=", "random", ".", "sample", "(", "index_list", ",", "1", ")", "[", "0", "]", "\n", "mask_n", "[", "ind", "]", "=", "0", "# remove this edge", "\n", "index_list", ".", "remove", "(", "ind", ")", "# remove the one has been choosen", "\n", "", "mask", ".", "extend", "(", "mask_n", ")", "\n", "", "return", "mask", "\n", "\n", "", "new_genotypes", "=", "[", "]", "\n", "print", "(", "'# index: {}'", ".", "format", "(", "index", ")", ")", "\n", "print", "(", "'# sample: {}'", ".", "format", "(", "sample", ".", "tolist", "(", ")", ")", ")", "\n", "print", "(", "'# best acc: {}'", ".", "format", "(", "best_val_acc", ")", ")", "\n", "print", "(", "'# best genotype: {}'", ".", "format", "(", "data", "[", "'best_genotype'", "]", ")", ")", "\n", "\n", "for", "num", "in", "range", "(", "number", ")", ":", "\n", "        ", "mask", "=", "get_mask_for_cell", "(", "node", ")", "\n", "mask", ".", "extend", "(", "get_mask_for_cell", "(", "node", ")", ")", "\n", "inverse_mask", "=", "np", ".", "int8", "(", "[", "0", "if", "m", "==", "1", "else", "1", "for", "m", "in", "mask", "]", ")", "*", "7", "\n", "mask", "=", "np", ".", "int8", "(", "mask", ")", "\n", "new_sample", "=", "sample", "*", "mask", "+", "inverse_mask", "\n", "new_geno", "=", "convert_sample_to_genotype", "(", "new_sample", ".", "tolist", "(", ")", ")", "\n", "new_genotypes", ".", "append", "(", "new_geno", ")", "\n", "\n", "print", "(", "'# sample: {}'", ".", "format", "(", "sample", ".", "tolist", "(", ")", ")", ")", "\n", "print", "(", "'# keep mask: {}'", ".", "format", "(", "mask", ".", "tolist", "(", ")", ")", ")", "\n", "print", "(", "'# new_sample: {}'", ".", "format", "(", "new_sample", ".", "tolist", "(", ")", ")", ")", "\n", "print", "(", "'# new genotype:'", ")", "\n", "print", "(", "new_geno", ")", "\n", "\n", "", "return", "new_genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.parse_json.plt_reward_of_RL": [[93, 119], ["list", "os.access", "ValueError", "open", "f.readlines", "len", "ValueError", "range", "matplotlib.use", "plt.plot", "[].split", "plt.savefig", "len", "ValueError", "reward.append", "float", "os.path.basename().split", "line.strip", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.visualize.plot"], ["", "def", "plt_reward_of_RL", "(", "logger", ")", ":", "\n", "    ", "reward", "=", "[", "]", "\n", "\n", "if", "not", "os", ".", "access", "(", "logger", ",", "os", ".", "R_OK", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'%s not exists'", "%", "logger", ")", "\n", "", "with", "open", "(", "logger", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "data", ":", "\n", "            ", "if", "'baseline reward'", "in", "line", ":", "\n", "                ", "reward", ".", "append", "(", "float", "(", "line", ".", "strip", "(", ")", "[", "-", "7", ":", "-", "1", "]", ")", ")", "\n", "", "", "", "if", "len", "(", "reward", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'key word not found'", ")", "\n", "", "step", "=", "list", "(", "range", "(", "len", "(", "reward", ")", ")", ")", "\n", "try", ":", "\n", "        ", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'Agg'", ")", "\n", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "\n", "plt", ".", "plot", "(", "step", ",", "reward", ")", "\n", "s", "=", "os", ".", "path", ".", "basename", "(", "logger", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "saveto", "=", "'experiment/RL/reward_{}_{}.png'", ".", "format", "(", "s", "[", "1", "]", ",", "s", "[", "2", "]", ")", "\n", "plt", ".", "savefig", "(", "saveto", ",", "format", "=", "'png'", ",", "dip", "=", "300", ")", "\n", "", "except", ":", "\n", "        ", "raise", "ValueError", "(", "'can not plot figs'", ")", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.__init__": [[71, 73], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.reset": [[74, 80], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\" Reset all statistics \"\"\"", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.AverageMeter.update": [[81, 87], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\" Update statistics \"\"\"", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.get_data": [[11, 42], ["dataset.lower.lower", "preproc.data_transforms", "dset_cls", "ret.append", "len", "dset_cls", "ValueError"], "function", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.preproc.data_transforms"], ["def", "get_data", "(", "dataset", ",", "data_path", ",", "input_size", ",", "cutout_length", ",", "validation", ")", ":", "\n", "    ", "\"\"\" Get torchvision dataset \"\"\"", "\n", "dataset", "=", "dataset", ".", "lower", "(", ")", "\n", "\n", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "CIFAR10", "\n", "n_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'mnist'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "MNIST", "\n", "n_classes", "=", "10", "\n", "", "elif", "dataset", "==", "'fashionmnist'", ":", "\n", "        ", "dset_cls", "=", "dset", ".", "FashionMNIST", "\n", "n_classes", "=", "10", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "dataset", ")", "\n", "\n", "", "trn_transform", ",", "val_transform", "=", "preproc", ".", "data_transforms", "(", "dataset", ",", "input_size", ",", "cutout_length", ")", "\n", "trn_data", "=", "dset_cls", "(", "root", "=", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "trn_transform", ")", "\n", "\n", "# assuming shape is NHW or NHWC", "\n", "shape", "=", "trn_data", ".", "train_data", ".", "shape", "\n", "\n", "input_channels", "=", "3", "if", "len", "(", "shape", ")", "==", "4", "else", "1", "\n", "assert", "shape", "[", "1", "]", "==", "shape", "[", "2", "]", ",", "\"not expected shape = {}\"", ".", "format", "(", "shape", ")", "\n", "input_size", "=", "shape", "[", "1", "]", "\n", "\n", "ret", "=", "[", "input_size", ",", "input_channels", ",", "n_classes", ",", "trn_data", "]", "\n", "if", "validation", ":", "# append validation data", "\n", "        ", "ret", ".", "append", "(", "dset_cls", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "val_transform", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.get_logger": [[44, 60], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "get_logger", "(", "file_path", ")", ":", "\n", "    ", "\"\"\" Make python logger \"\"\"", "\n", "# [!] Since tensorboardX use default logger (e.g. logging.info()), we should use custom logger", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'darts'", ")", "\n", "log_format", "=", "'%(asctime)s | %(message)s'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.param_size": [[62, 67], ["sum", "numpy.prod", "v.size", "model.named_parameters", "k.startswith"], "function", ["None"], ["", "def", "param_size", "(", "model", ")", ":", "\n", "    ", "\"\"\" Compute parameter size in MB \"\"\"", "\n", "n_params", "=", "sum", "(", "\n", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "k", ".", "startswith", "(", "'aux_head'", ")", ")", "\n", "return", "n_params", "/", "1024.", "/", "1024.", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.accuracy": [[89, 108], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.ndimension", "target.view().expand_as", "correct[].view().float().sum", "res.append", "target.max", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\" Computes the precision@k for the specified values of k \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "# one-hot case", "\n", "if", "target", ".", "ndimension", "(", ")", ">", "1", ":", "\n", "        ", "target", "=", "target", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "\n", "", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.0", "/", "batch_size", ")", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.save_checkpoint": [[110, 116], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "ckpt_dir", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.convert_sample_to_genotype": [[118, 169], ["isinstance", "range", "range", "range", "numpy.array", "isinstance", "index.extend", "zip", "geno_normal.append", "zip", "geno_reduce.append", "np.array.split", "len", "numpy.array", "ValueError", "geno_curr.append", "geno_curr.append", "len", "int", "int", "range", "int", "int"], "function", ["None"], ["", "", "def", "convert_sample_to_genotype", "(", "array", ",", "l", "=", "28", ")", ":", "\n", "    ", "\"\"\"\n    array is an array with shape [1, 28]\n    return the Genotype of sample\n    \"\"\"", "\n", "if", "isinstance", "(", "array", ",", "str", ")", ":", "\n", "        ", "array", "=", "np", ".", "array", "(", "array", ".", "split", "(", ")", ")", "\n", "assert", "len", "(", "array", ")", "==", "l", "\n", "", "elif", "isinstance", "(", "array", ",", "list", ")", ":", "\n", "        ", "assert", "len", "(", "array", ")", "==", "l", "\n", "array", "=", "np", ".", "array", "(", "array", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'error type of sample'", ")", "\n", "\n", "", "index", "=", "[", "]", "# index of input nodes for current node", "\n", "# None ops if index is 7", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "index", ".", "extend", "(", "[", "j", "for", "j", "in", "range", "(", "i", "+", "2", ")", "]", ")", "\n", "\n", "", "geno_normal", "=", "[", "]", "\n", "geno_reduce", "=", "[", "]", "\n", "ops_normal", "=", "array", "[", "0", ":", "l", "//", "2", "]", "\n", "ops_reduce", "=", "array", "[", "l", "//", "2", ":", "]", "\n", "\n", "flag", "=", "0", "\n", "for", "node", "in", "range", "(", "4", ")", ":", "\n", "        ", "geno_curr", "=", "[", "]", "\n", "op_ind", "=", "ops_normal", "[", "flag", ":", "flag", "+", "node", "+", "2", "]", "\n", "in_ind", "=", "index", "[", "flag", ":", "flag", "+", "node", "+", "2", "]", "\n", "for", "op", ",", "in_node", "in", "zip", "(", "op_ind", ",", "in_ind", ")", ":", "\n", "            ", "if", "int", "(", "op", ")", "==", "7", ":", "continue", "\n", "geno_curr", ".", "append", "(", "(", "'%s'", "%", "PRIMITIVES", "[", "int", "(", "op", ")", "]", ",", "in_node", ")", ")", "\n", "", "flag", "=", "flag", "+", "node", "+", "2", "\n", "geno_normal", ".", "append", "(", "geno_curr", ")", "\n", "\n", "", "flag", "=", "0", "\n", "for", "node", "in", "range", "(", "4", ")", ":", "\n", "        ", "geno_curr", "=", "[", "]", "\n", "op_ind", "=", "ops_reduce", "[", "flag", ":", "flag", "+", "node", "+", "2", "]", "\n", "in_ind", "=", "index", "[", "flag", ":", "flag", "+", "node", "+", "2", "]", "\n", "for", "op", ",", "in_node", "in", "zip", "(", "op_ind", ",", "in_ind", ")", ":", "\n", "            ", "if", "int", "(", "op", ")", "==", "7", ":", "continue", "\n", "geno_curr", ".", "append", "(", "(", "'{}'", ".", "format", "(", "PRIMITIVES", "[", "int", "(", "op", ")", "]", ")", ",", "in_node", ")", ")", "\n", "", "flag", "=", "flag", "+", "node", "+", "2", "\n", "geno_reduce", ".", "append", "(", "geno_curr", ")", "\n", "\n", "", "genotype_str", "=", "\"Genotype(normal=[{}, {}, {}, {}], normal_concat=range(2, 6), reduce=[{}, {}, {}, {}], reduce_concat=range(2, 6))\"", ".", "format", "(", "geno_normal", "[", "0", "]", ",", "geno_normal", "[", "1", "]", ",", "geno_normal", "[", "2", "]", ",", "geno_normal", "[", "3", "]", ",", "geno_reduce", "[", "0", "]", ",", "geno_reduce", "[", "1", "]", ",", "geno_reduce", "[", "2", "]", ",", "geno_reduce", "[", "3", "]", ")", "\n", "\n", "return", "genotype_str", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.darts_weight_unpack": [[171, 180], ["range", "w_dag.append"], "function", ["None"], ["", "def", "darts_weight_unpack", "(", "weight", ",", "n_nodes", ")", ":", "\n", "    ", "w_dag", "=", "[", "]", "\n", "start_index", "=", "0", "\n", "end_index", "=", "2", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "        ", "w_dag", ".", "append", "(", "weight", "[", "start_index", ":", "end_index", "]", ")", "\n", "start_index", "=", "end_index", "\n", "end_index", "+=", "3", "+", "i", "\n", "", "return", "w_dag", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.one_hot_to_index": [[182, 184], ["numpy.array", "numpy.where"], "function", ["None"], ["", "def", "one_hot_to_index", "(", "one_hot_matrix", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "np", ".", "where", "(", "r", "==", "1", ")", "[", "0", "]", "[", "0", "]", "for", "r", "in", "one_hot_matrix", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.index_to_one_hot": [[186, 188], ["numpy.eye", "index_vector.reshape"], "function", ["None"], ["", "def", "index_to_one_hot", "(", "index_vector", ",", "C", ")", ":", "\n", "    ", "return", "np", ".", "eye", "(", "C", ")", "[", "index_vector", ".", "reshape", "(", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.utils.netParams": [[190, 200], ["model.parameters", "len", "range", "parameter.size", "parameter.size"], "function", ["None"], ["", "def", "netParams", "(", "model", ")", ":", "\n", "    ", "total_paramters", "=", "0", "\n", "for", "parameter", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "i", "=", "len", "(", "parameter", ".", "size", "(", ")", ")", "\n", "p", "=", "1", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "p", "*=", "parameter", ".", "size", "(", "j", ")", "\n", "", "total_paramters", "+=", "p", "\n", "\n", "", "return", "total_paramters", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cells.AugmentCell.__init__": [[12, 32], ["torch.Module.__init__", "len", "models.ops.StdConv", "genotypes.to_dag", "models.ops.FactorizedReduce", "models.ops.StdConv"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.to_dag"], ["def", "__init__", "(", "self", ",", "genotype", ",", "C_pp", ",", "C_p", ",", "C", ",", "reduction_p", ",", "reduction", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "n_nodes", "=", "len", "(", "genotype", ".", "normal", ")", "\n", "\n", "if", "reduction_p", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "FactorizedReduce", "(", "C_pp", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "StdConv", "(", "C_pp", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preproc1", "=", "ops", ".", "StdConv", "(", "C_p", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# generate dag", "\n", "if", "reduction", ":", "\n", "            ", "gene", "=", "genotype", ".", "reduce", "\n", "self", ".", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "gene", "=", "genotype", ".", "normal", "\n", "self", ".", "concat", "=", "genotype", ".", "normal_concat", "\n", "\n", "", "self", ".", "dag", "=", "gt", ".", "to_dag", "(", "C", ",", "gene", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cells.AugmentCell.forward": [[33, 45], ["augment_cells.AugmentCell.preproc0", "augment_cells.AugmentCell.preproc1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "states.append", "op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preproc0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preproc1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "edges", "in", "self", ".", "dag", ":", "\n", "            ", "s_cur", "=", "sum", "(", "op", "(", "states", "[", "op", ".", "s_idx", "]", ")", "for", "op", "in", "edges", ")", "\n", "states", ".", "append", "(", "s_cur", ")", "\n", "\n", "", "s_out", "=", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "concat", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "s_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.DropPath_.__init__": [[38, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fp", "=", "32", ",", "p", "=", "0.", ")", ":", "\n", "        ", "\"\"\" [!] DropPath is inplace module\n        Args:\n            fp: half-float or full float, default is 32, or defined to 16\n            p: probability of an path to be zeroed.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "fp", "=", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.DropPath_.extra_repr": [[48, 50], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'p={}, inplace'", ".", "format", "(", "self", ".", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.DropPath_.forward": [[51, 55], ["ops.drop_path_"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.drop_path_"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "drop_path_", "(", "x", ",", "self", ".", "p", ",", "self", ".", "fp", ",", "self", ".", "training", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.PoolBN.__init__": [[61, 75], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "pool_type.lower", "torch.MaxPool2d", "torch.MaxPool2d", "pool_type.lower", "torch.AvgPool2d", "torch.AvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "pool_type", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pool_type: 'max' or 'avg'\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "pool_type", ".", "lower", "(", ")", "==", "'max'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "elif", "pool_type", ".", "lower", "(", ")", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ",", "count_include_pad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.PoolBN.forward": [[76, 80], ["ops.PoolBN.pool", "ops.PoolBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pool", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.StdConv.__init__": [[86, 92], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.StdConv.forward": [[94, 96], ["ops.StdConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.FacConv.__init__": [[102, 109], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_length", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "(", "kernel_length", ",", "1", ")", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "(", "1", ",", "kernel_length", ")", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.FacConv.forward": [[111, 113], ["ops.FacConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.DilConv.__init__": [[122, 130], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.DilConv.forward": [[132, 134], ["ops.DilConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.SepConv.__init__": [[140, 145], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "ops.DilConv", "ops.DilConv"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "DilConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "affine", "=", "affine", ")", ",", "\n", "DilConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", "=", "1", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.SepConv.forward": [[147, 149], ["ops.SepConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.Identity.__init__": [[152, 154], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.Identity.forward": [[155, 157], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.Zero.__init__": [[160, 163], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.Zero.forward": [[164, 170], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", "*", "0.", "\n", "\n", "# re-sizing by stride", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", "*", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.FactorizedReduce.__init__": [[176, 182], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.FactorizedReduce.forward": [[183, 188], ["ops.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ops.FactorizedReduce.bn", "ops.FactorizedReduce.conv1", "ops.FactorizedReduce.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.MixedOp.__init__": [[192, 198], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "ops.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "gt", ".", "PRIMITIVES", ":", "\n", "            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "affine", "=", "False", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.MixedOp.forward": [[199, 206], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: input\n            weights: weight for each operation\n        \"\"\"", "\n", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.ops.drop_path_": [[22, 35], ["x.div_().mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.HalfTensor().bernoulli_", "torch.cuda.HalfTensor().bernoulli_", "x.div_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.HalfTensor", "torch.cuda.HalfTensor", "x.size", "x.size"], "function", ["None"], ["def", "drop_path_", "(", "x", ",", "drop_prob", ",", "fp", ",", "training", ")", ":", "\n", "    ", "if", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "assert", "fp", "in", "[", "16", ",", "32", "]", "\n", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "\n", "# per data point mask; assuming x in cuda.", "\n", "if", "fp", "==", "32", ":", "\n", "                ", "mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "torch", ".", "cuda", ".", "HalfTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "", "x", ".", "div_", "(", "keep_prob", ")", ".", "mul_", "(", "mask", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AuxiliaryHead.__init__": [[9, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "C", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "input_size", "in", "[", "7", ",", "8", "]", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "input_size", "-", "5", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# 2x2 out", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "# 1x1 out", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "# 1x1 out", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "768", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AuxiliaryHead.forward": [[33, 39], ["augment_cnn.AuxiliaryHead.net", "out.view.view.view", "augment_cnn.AuxiliaryHead.linear", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print('auxiliary x:', x.size())", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AugmentCNN.__init__": [[68, 115], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.augment_cells.AugmentCell", "augment_cnn.AugmentCNN.cells.append", "len", "augment_cnn.AuxiliaryHead"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "auxiliary", ",", "genotype", ",", "\n", "stem_multiplier", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size: size of height and width (assuming height = width)\n            C_in: # of input channels\n            C: # of starting model channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "genotype", "=", "genotype", "\n", "# aux head position", "\n", "self", ".", "aux_pos", "=", "2", "*", "n_layers", "//", "3", "if", "auxiliary", "else", "-", "1", "\n", "\n", "C_cur", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_cur", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_cur", ")", "\n", ")", "\n", "\n", "C_pp", ",", "C_p", ",", "C_cur", "=", "C_cur", ",", "C_cur", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_p", "=", "False", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "n_layers", "//", "3", ",", "2", "*", "n_layers", "//", "3", "]", ":", "\n", "                ", "C_cur", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "AugmentCell", "(", "genotype", ",", "C_pp", ",", "C_p", ",", "C_cur", ",", "reduction_p", ",", "reduction", ")", "\n", "reduction_p", "=", "reduction", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_cur_out", "=", "C_cur", "*", "len", "(", "cell", ".", "concat", ")", "\n", "C_pp", ",", "C_p", "=", "C_p", ",", "C_cur_out", "\n", "\n", "if", "i", "==", "self", ".", "aux_pos", ":", "\n", "# [!] this auxiliary head is ignored in computing parameter size", "\n", "#     by the name 'aux_head'", "\n", "                ", "self", ".", "aux_head", "=", "AuxiliaryHead", "(", "input_size", "//", "4", ",", "C_p", ",", "n_classes", ")", "\n", "\n", "", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "C_p", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AugmentCNN.forward": [[116, 129], ["augment_cnn.AugmentCNN.stem", "enumerate", "augment_cnn.AugmentCNN.gap", "out.view.view.view", "augment_cnn.AugmentCNN.linear", "out.view.view.size", "cell", "augment_cnn.AugmentCNN.aux_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "aux_logits", "=", "None", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "if", "i", "==", "self", ".", "aux_pos", "and", "self", ".", "training", ":", "\n", "                ", "aux_logits", "=", "self", ".", "aux_head", "(", "s1", ")", "\n", "\n", "", "", "out", "=", "self", ".", "gap", "(", "s1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", ",", "aux_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.augment_cnn.AugmentCNN.drop_path_prob": [[130, 136], ["augment_cnn.AugmentCNN.modules", "isinstance"], "methods", ["None"], ["", "def", "drop_path_prob", "(", "self", ",", "p", ",", "fp", ")", ":", "\n", "        ", "\"\"\" Set drop path probability \"\"\"", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "ops", ".", "DropPath_", ")", ":", "\n", "                ", "module", ".", "p", "=", "p", "\n", "module", ".", "fp", "=", "fp", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cells.SearchCell.__init__": [[11, 42], ["torch.Module.__init__", "models.ops.StdConv", "torch.ModuleList", "torch.ModuleList", "range", "models.ops.FactorizedReduce", "models.ops.StdConv", "search_cells.SearchCell.dag.append", "range", "torch.ModuleList", "torch.ModuleList", "models.ops.MixedOp", "search_cells.SearchCell.dag[].append"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "n_nodes", ",", "C_pp", ",", "C_p", ",", "C", ",", "reduction_p", ",", "reduction", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_nodes: # of intermediate n_nodes\n            C_pp: C_out[k-2]\n            C_p : C_out[k-1]\n            C   : C_in[k] (current)\n            reduction_p: flag for whether the previous cell is reduction cell or not\n            reduction: flag for whether the current cell is reduction cell or not\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "\n", "# If previous cell is reduction cell, current input size does not match with", "\n", "# output size of cell[k-2]. So the output[k-2] should be reduced by preprocessing.", "\n", "if", "reduction_p", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "FactorizedReduce", "(", "C_pp", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "ops", ".", "StdConv", "(", "C_pp", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preproc1", "=", "ops", ".", "StdConv", "(", "C_p", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "\n", "# generate dag", "\n", "self", ".", "dag", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_nodes", ")", ":", "\n", "            ", "self", ".", "dag", ".", "append", "(", "nn", ".", "ModuleList", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "# include 2 input nodes", "\n", "# reduction should be used only for input node", "\n", "                ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "ops", ".", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "dag", "[", "i", "]", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cells.SearchCell.forward": [[43, 54], ["search_cells.SearchCell.preproc0", "search_cells.SearchCell.preproc1", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "states.append", "enumerate", "zip"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "w_dag", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preproc0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preproc1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "edges", ",", "w_list", "in", "zip", "(", "self", ".", "dag", ",", "w_dag", ")", ":", "\n", "            ", "s_cur", "=", "sum", "(", "edges", "[", "i", "]", "(", "s", ",", "w", ")", "for", "i", ",", "(", "s", ",", "w", ")", "in", "enumerate", "(", "zip", "(", "states", ",", "w_list", ")", ")", ")", "\n", "states", ".", "append", "(", "s_cur", ")", "\n", "\n", "", "s_out", "=", "torch", ".", "cat", "(", "states", "[", "2", ":", "]", ",", "dim", "=", "1", ")", "\n", "return", "s_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNN.__init__": [[21, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.search_cells.SearchCell", "search_cnn.SearchCNN.cells.append"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "n_nodes", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            C_in: # of input channels\n            C: # of starting model channels\n            n_classes: # of classes\n            n_layers: # of layers\n            n_nodes: # of intermediate nodes in Cell\n            stem_multiplier\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "\n", "C_cur", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_cur", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_cur", ")", "\n", ")", "\n", "\n", "# for the first cell, stem is used for both s0 and s1", "\n", "# [!] C_pp and C_p is output channel size, but C_cur is input channel size.", "\n", "C_pp", ",", "C_p", ",", "C_cur", "=", "C_cur", ",", "C_cur", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_p", "=", "False", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "# Reduce featuremap size and double channels in 1/3 and 2/3 layer.", "\n", "            ", "if", "i", "in", "[", "n_layers", "//", "3", ",", "2", "*", "n_layers", "//", "3", "]", ":", "\n", "                ", "C_cur", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "SearchCell", "(", "n_nodes", ",", "C_pp", ",", "C_p", ",", "C_cur", ",", "reduction_p", ",", "reduction", ")", "\n", "reduction_p", "=", "reduction", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_cur_out", "=", "C_cur", "*", "n_nodes", "\n", "C_pp", ",", "C_p", "=", "C_p", ",", "C_cur_out", "\n", "\n", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "C_p", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNN.forward": [[66, 77], ["search_cnn.SearchCNN.stem", "search_cnn.SearchCNN.gap", "out.view.view.view", "search_cnn.SearchCNN.linear", "out.view.view.size", "cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "weights_normal", ",", "weights_reduce", ")", ":", "\n", "        ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "            ", "weights", "=", "weights_reduce", "if", "cell", ".", "reduction", "else", "weights_normal", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "\n", "", "out", "=", "self", ".", "gap", "(", "s1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__": [[81, 107], ["torch.Module.__init__", "len", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "range", "search_cnn.SearchCNNController.named_parameters", "search_cnn.SearchCNN", "list", "search_cnn.SearchCNNController.alpha_normal.append", "search_cnn.SearchCNNController.alpha_reduce.append", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "search_cnn.SearchCNNController._alphas.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "criterion", ",", "n_nodes", "=", "4", ",", "stem_multiplier", "=", "3", ",", "\n", "device_ids", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_nodes", "=", "n_nodes", "\n", "self", ".", "criterion", "=", "criterion", "\n", "if", "device_ids", "is", "None", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "self", ".", "device_ids", "=", "device_ids", "\n", "\n", "# initialize architect parameters: alphas", "\n", "n_ops", "=", "len", "(", "gt", ".", "PRIMITIVES", ")", "\n", "\n", "self", ".", "alpha_normal", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "alpha_reduce", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_nodes", ")", ":", "\n", "            ", "self", ".", "alpha_normal", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "i", "+", "2", ",", "n_ops", ")", ")", ")", "\n", "self", ".", "alpha_reduce", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "i", "+", "2", ",", "n_ops", ")", ")", ")", "\n", "\n", "# setup alphas list", "\n", "", "self", ".", "_alphas", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'alpha'", "in", "n", ":", "\n", "                ", "self", ".", "_alphas", ".", "append", "(", "(", "n", ",", "p", ")", ")", "\n", "\n", "", "", "self", ".", "net", "=", "SearchCNN", "(", "C_in", ",", "C", ",", "n_classes", ",", "n_layers", ",", "n_nodes", ",", "stem_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.forward": [[108, 137], ["torch.parallel.scatter", "torch.parallel.scatter", "torch.parallel.scatter", "search_cnn.broadcast_list", "search_cnn.broadcast_list", "torch.parallel.replicate", "torch.parallel.replicate", "torch.parallel.replicate", "torch.parallel.parallel_apply", "torch.parallel.parallel_apply", "torch.parallel.parallel_apply", "torch.parallel.gather", "torch.parallel.gather", "torch.parallel.gather", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "len", "search_cnn.SearchCNNController.net", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.broadcast_list", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.broadcast_list"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "weights_normal", "=", "[", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", "for", "alpha", "in", "self", ".", "alpha_normal", "]", "\n", "weights_reduce", "=", "[", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", "for", "alpha", "in", "self", ".", "alpha_reduce", "]", "\n", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "\"\"\"DEBUG\"\"\"", "\n", "\n", "\"\"\"print('\\n'*2)\n            print('-'*100)\n            print(weights_normal)\n            print('\\n')\n            print(weights_reduce)\n            print('*'*100)\n            print(self.net(x, weights_normal, weights_reduce))\"\"\"", "\n", "\n", "return", "self", ".", "net", "(", "x", ",", "weights_normal", ",", "weights_reduce", ")", "\n", "\n", "# scatter x", "\n", "", "xs", "=", "nn", ".", "parallel", ".", "scatter", "(", "x", ",", "self", ".", "device_ids", ")", "\n", "# broadcast weights", "\n", "wnormal_copies", "=", "broadcast_list", "(", "weights_normal", ",", "self", ".", "device_ids", ")", "\n", "wreduce_copies", "=", "broadcast_list", "(", "weights_reduce", ",", "self", ".", "device_ids", ")", "\n", "\n", "# replicate modules", "\n", "replicas", "=", "nn", ".", "parallel", ".", "replicate", "(", "self", ".", "net", ",", "self", ".", "device_ids", ")", "\n", "outputs", "=", "nn", ".", "parallel", ".", "parallel_apply", "(", "replicas", ",", "\n", "list", "(", "zip", "(", "xs", ",", "wnormal_copies", ",", "wreduce_copies", ")", ")", ",", "\n", "devices", "=", "self", ".", "device_ids", ")", "\n", "return", "nn", ".", "parallel", ".", "gather", "(", "outputs", ",", "self", ".", "device_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.loss": [[138, 141], ["search_cnn.SearchCNNController.forward", "search_cnn.SearchCNNController.criterion"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.forward"], ["", "def", "loss", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "logits", "=", "self", ".", "forward", "(", "X", ")", "\n", "return", "self", ".", "criterion", "(", "logits", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.print_alphas": [[142, 162], ["logger.info", "logger.info", "logger.info", "logger.info", "zip", "org_formatters.append", "handler.setFormatter", "logger.info", "logger.info", "handler.setFormatter", "logging.Formatter", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "print_alphas", "(", "self", ",", "logger", ")", ":", "\n", "# remove formats", "\n", "        ", "org_formatters", "=", "[", "]", "\n", "for", "handler", "in", "logger", ".", "handlers", ":", "\n", "            ", "org_formatters", ".", "append", "(", "handler", ".", "formatter", ")", "\n", "handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "\"%(message)s\"", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"####### ALPHA #######\"", ")", "\n", "logger", ".", "info", "(", "\"# Alpha - normal\"", ")", "\n", "for", "alpha", "in", "self", ".", "alpha_normal", ":", "\n", "            ", "logger", ".", "info", "(", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\\n# Alpha - reduce\"", ")", "\n", "for", "alpha", "in", "self", ".", "alpha_reduce", ":", "\n", "            ", "logger", ".", "info", "(", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "logger", ".", "info", "(", "\"#####################\"", ")", "\n", "\n", "# restore formats", "\n", "for", "handler", ",", "formatter", "in", "zip", "(", "logger", ".", "handlers", ",", "org_formatters", ")", ":", "\n", "            ", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.genotype": [[163, 170], ["genotypes.parse", "genotypes.parse", "range", "genotypes.Genotype"], "methods", ["home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse", "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.None.genotypes.parse"], ["", "", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "gene_normal", "=", "gt", ".", "parse", "(", "self", ".", "alpha_normal", ",", "k", "=", "2", ")", "\n", "gene_reduce", "=", "gt", ".", "parse", "(", "self", ".", "alpha_reduce", ",", "k", "=", "2", ")", "\n", "concat", "=", "range", "(", "2", ",", "2", "+", "self", ".", "n_nodes", ")", "# concat all intermediate nodes", "\n", "\n", "return", "gt", ".", "Genotype", "(", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.weights": [[171, 173], ["search_cnn.SearchCNNController.net.parameters"], "methods", ["None"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.named_weights": [[174, 176], ["search_cnn.SearchCNNController.net.named_parameters"], "methods", ["None"], ["", "def", "named_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "named_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.alphas": [[177, 180], ["None"], "methods", ["None"], ["", "def", "alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.SearchCNNController.named_alphas": [[181, 184], ["None"], "methods", ["None"], ["", "", "def", "named_alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "n", ",", "p", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhengxiawu_rethinking_performance_estimation_in_NAS.models.search_cnn.broadcast_list": [[11, 17], ["torch.nn.parallel._functions.Broadcast.apply", "range", "len", "len", "len"], "function", ["None"], ["def", "broadcast_list", "(", "l", ",", "device_ids", ")", ":", "\n", "    ", "\"\"\" Broadcasting list \"\"\"", "\n", "l_copies", "=", "Broadcast", ".", "apply", "(", "device_ids", ",", "*", "l", ")", "\n", "l_copies", "=", "[", "l_copies", "[", "i", ":", "i", "+", "len", "(", "l", ")", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l_copies", ")", ",", "len", "(", "l", ")", ")", "]", "\n", "\n", "return", "l_copies", "\n", "\n"]]}