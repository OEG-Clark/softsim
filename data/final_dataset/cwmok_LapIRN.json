{"home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Test_LapIRN_diff_resize.test": [[40, 83], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3().cuda", "miccai2020_model_stage.SpatialTransform_unit().cuda", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.load_state_dict", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.eval", "SpatialTransform_unit().cuda.eval", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.device", "torch.device", "Functions.load_4D", "Functions.load_4D", "torch.from_numpy().float().to().unsqueeze", "torch.from_numpy().float().to().unsqueeze", "torch.from_numpy().float().to().unsqueeze", "torch.from_numpy().float().to().unsqueeze", "print", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.", "torch.interpolate", "[].transpose", "Functions.transform_unit_flow_to_flow", "Functions.save_flow", "Functions.save_img", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "SpatialTransform_unit().cuda.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "SpatialTransform_unit().cuda.data.cpu", "F.interpolate.data.cpu().numpy", "numpy.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.interpolate.data.cpu", "SpatialTransform_unit().cuda.", "F.interpolate.permute"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_img"], ["def", "test", "(", ")", ":", "\n", "    ", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "cuda", "(", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "False", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "cuda", "(", ")", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "modelpath", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "transform", ".", "eval", "(", ")", "\n", "\n", "grid", "=", "generate_grid_unit", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "use_cuda", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "fixed_img", "=", "load_4D", "(", "fixed_path", ")", "\n", "moving_img", "=", "load_4D", "(", "moving_path", ")", "\n", "\n", "fixed_img", "=", "torch", ".", "from_numpy", "(", "fixed_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "moving_img", "=", "torch", ".", "from_numpy", "(", "moving_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "moving_img_down", "=", "F", ".", "interpolate", "(", "moving_img", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "fixed_img_down", "=", "F", ".", "interpolate", "(", "fixed_img", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "F_X_Y", "=", "model", "(", "moving_img_down", ",", "fixed_img_down", ")", "\n", "F_X_Y", "=", "F", ".", "interpolate", "(", "F_X_Y", ",", "size", "=", "ori_imgshape", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "X_Y", "=", "transform", "(", "moving_img", ",", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "grid", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "F_X_Y_cpu", "=", "F_X_Y", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "F_X_Y_cpu", "=", "transform_unit_flow_to_flow", "(", "F_X_Y_cpu", ")", "\n", "\n", "save_flow", "(", "F_X_Y_cpu", ",", "savepath", "+", "'/warpped_flow.nii.gz'", ")", "\n", "save_img", "(", "X_Y", ",", "savepath", "+", "'/warpped_moving.nii.gz'", ")", "\n", "\n", "", "print", "(", "\"Finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Test_LapIRN_diff.test": [[39, 81], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3().cuda", "miccai2020_model_stage.SpatialTransform_unit().cuda", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.load_state_dict", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.eval", "SpatialTransform_unit().cuda.eval", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.device", "Functions.load_4D", "Functions.load_4D", "torch.from_numpy().float().to().unsqueeze", "torch.from_numpy().float().to().unsqueeze", "print", "torch.load", "torch.no_grad", "Miccai2020_LDR_laplacian_unit_add_lvl3().cuda.", "[].transpose", "Functions.transform_unit_flow_to_flow", "Functions.save_flow", "Functions.save_img", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().cuda", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "SpatialTransform_unit().cuda.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "SpatialTransform_unit().cuda.data.cpu", "model.data.cpu().numpy", "numpy.reshape", "torch.from_numpy", "torch.from_numpy", "model.data.cpu", "SpatialTransform_unit().cuda.", "model.permute"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_img"], ["def", "test", "(", ")", ":", "\n", "    ", "imgshape_4", "=", "(", "160", "/", "4", ",", "192", "/", "4", ",", "144", "/", "4", ")", "\n", "imgshape_2", "=", "(", "160", "/", "2", ",", "192", "/", "2", ",", "144", "/", "2", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "cuda", "(", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "False", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "cuda", "(", ")", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "modelpath", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "transform", ".", "eval", "(", ")", "\n", "\n", "grid", "=", "generate_grid_unit", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "use_cuda", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "fixed_img", "=", "load_4D", "(", "fixed_path", ")", "\n", "moving_img", "=", "load_4D", "(", "moving_path", ")", "\n", "\n", "fixed_img", "=", "torch", ".", "from_numpy", "(", "fixed_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "moving_img", "=", "torch", ".", "from_numpy", "(", "moving_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "F_X_Y", "=", "model", "(", "moving_img", ",", "fixed_img", ")", "\n", "\n", "X_Y", "=", "transform", "(", "moving_img", ",", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "grid", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "F_X_Y_cpu", "=", "F_X_Y", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "F_X_Y_cpu", "=", "transform_unit_flow_to_flow", "(", "F_X_Y_cpu", ")", "\n", "\n", "save_flow", "(", "F_X_Y_cpu", ",", "savepath", "+", "'/warpped_flow.nii.gz'", ")", "\n", "save_img", "(", "X_Y", ",", "savepath", "+", "'/warpped_moving.nii.gz'", ")", "\n", "\n", "", "print", "(", "\"Finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.count_parameters.count_parameters": [[50, 52], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Test_LapIRN_disp.test": [[38, 80], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3().cuda", "miccai2020_model_stage.SpatialTransform_unit().cuda", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().cuda.load_state_dict", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().cuda.eval", "SpatialTransform_unit().cuda.eval", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.device", "Functions.load_4D", "Functions.load_4D", "torch.from_numpy().float().to().unsqueeze", "torch.from_numpy().float().to().unsqueeze", "print", "torch.load", "torch.no_grad", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().cuda.", "[].transpose", "Functions.transform_unit_flow_to_flow", "Functions.save_flow", "Functions.save_img", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().cuda", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "SpatialTransform_unit().cuda.data.cpu().numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "SpatialTransform_unit().cuda.data.cpu", "model.data.cpu().numpy", "numpy.reshape", "torch.from_numpy", "torch.from_numpy", "model.data.cpu", "SpatialTransform_unit().cuda.", "model.permute"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_flow", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_img"], ["def", "test", "(", ")", ":", "\n", "    ", "imgshape_4", "=", "(", "160", "/", "4", ",", "192", "/", "4", ",", "144", "/", "4", ")", "\n", "imgshape_2", "=", "(", "160", "/", "2", ",", "192", "/", "2", ",", "144", "/", "2", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "cuda", "(", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "False", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "cuda", "(", ")", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "modelpath", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "transform", ".", "eval", "(", ")", "\n", "\n", "grid", "=", "generate_grid_unit", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "use_cuda", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "fixed_img", "=", "load_4D", "(", "fixed_path", ")", "\n", "moving_img", "=", "load_4D", "(", "moving_path", ")", "\n", "\n", "fixed_img", "=", "torch", ".", "from_numpy", "(", "fixed_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "moving_img", "=", "torch", ".", "from_numpy", "(", "moving_img", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "F_X_Y", "=", "model", "(", "moving_img", ",", "fixed_img", ")", "\n", "\n", "X_Y", "=", "transform", "(", "moving_img", ",", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "grid", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "F_X_Y_cpu", "=", "F_X_Y", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", ":", ",", ":", ",", ":", ",", ":", "]", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "F_X_Y_cpu", "=", "transform_unit_flow_to_flow", "(", "F_X_Y_cpu", ")", "\n", "\n", "save_flow", "(", "F_X_Y_cpu", ",", "savepath", "+", "'/warpped_flow.nii.gz'", ")", "\n", "save_img", "(", "X_Y", ",", "savepath", "+", "'/warpped_moving.nii.gz'", ")", "\n", "\n", "", "print", "(", "\"Finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff.train_lvl1": [[67, 160], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "miccai2020_model_stage.NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.", "miccai2020_model_stage.NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda"], ["def", "train_lvl1", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl1...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "NCC", "(", "win", "=", "3", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid_4", "=", "generate_grid", "(", "imgshape_4", ")", "\n", "grid_4", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_4", ",", "(", "1", ",", ")", "+", "grid_4", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl1", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl1", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_4", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "# loss = loss_multiNCC + smooth * loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl1", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl1.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff.train_lvl2": [[162, 268], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.unfreeze_modellvl1", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.unfreeze_modellvl1"], ["", "def", "train_lvl2", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl2...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "# model_path = \"../Model/Stage/LDR_LPBA_NCC_1_1_stagelvl1_1500.pth\"", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl1_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl1...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl1", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "5", ",", "scale", "=", "2", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid_2", "=", "generate_grid", "(", "imgshape_2", ")", "\n", "grid_2", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_2", ",", "(", "1", ",", ")", "+", "grid_2", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl2", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl2", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, y_down, compose_field_e0_lvl1v, lvl1_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_2", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl1", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl2", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl2.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff.train_lvl3": [[270, 382], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().to", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "miccai2020_model_stage.SpatialTransformNearest_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "miccai2020_model_stage.SpatialTransformNearest_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.unfreeze_modellvl2", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.unfreeze_modellvl2"], ["", "def", "train_lvl3", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl3...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl2_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl2...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl2", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "7", ",", "scale", "=", "3", ")", "\n", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "transform_nearest", "=", "SpatialTransformNearest_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid", "=", "generate_grid", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl3", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_OASIS_NCC_unit_add_reg_3_anti_1_stagelvl3_10000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "10000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/lossLDR_OASIS_NCC_unit_add_reg_3_anti_1_stagelvl3_10000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "10000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "10000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl3", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, y, compose_field_e0_lvl2_compose, lvl1_v, compose_lvl2_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "F_xy_lvl2", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "# Validation", "\n", "\n", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl2", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl3", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl3.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff_resize.dice": [[69, 83], ["numpy.unique", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "dice", "(", "im1", ",", "atlas", ")", ":", "\n", "    ", "unique_class", "=", "np", ".", "unique", "(", "atlas", ")", "\n", "dice", "=", "0", "\n", "num_count", "=", "0", "\n", "for", "i", "in", "unique_class", ":", "\n", "        ", "if", "(", "i", "==", "0", ")", "or", "(", "(", "im1", "==", "i", ")", ".", "sum", "(", ")", "==", "0", ")", "or", "(", "(", "atlas", "==", "i", ")", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "sub_dice", "=", "np", ".", "sum", "(", "atlas", "[", "im1", "==", "i", "]", "==", "i", ")", "*", "2.0", "/", "(", "np", ".", "sum", "(", "im1", "==", "i", ")", "+", "np", ".", "sum", "(", "atlas", "==", "i", ")", ")", "\n", "dice", "+=", "sub_dice", "\n", "num_count", "+=", "1", "\n", "# print(sub_dice)", "\n", "# print(num_count, len(unique_class)-1)", "\n", "", "return", "dice", "/", "num_count", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff_resize.train_lvl1": [[85, 181], ["print", "torch.device", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "miccai2020_model_stage.NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "torch.load", "F.interpolate.to().float", "F.interpolate.to().float", "torch.interpolate", "torch.interpolate", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.", "miccai2020_model_stage.NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "torch.save", "numpy.save", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.interpolate.to", "F.interpolate.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda"], ["", "def", "train_lvl1", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl1...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "NCC", "(", "win", "=", "3", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/OASIS_OAS1_*_MR1/aligned_norm.nii.gz'", ")", ")", "\n", "\n", "grid_4", "=", "generate_grid", "(", "imgshape_4", ")", "\n", "grid_4", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_4", ",", "(", "1", ",", ")", "+", "grid_4", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl1", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "True", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl1", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "X", "=", "F", ".", "interpolate", "(", "X", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "Y", "=", "F", ".", "interpolate", "(", "Y", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_4", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "# loss = loss_multiNCC + smooth * loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl1", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl1.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff_resize.train_lvl2": [[183, 292], ["print", "torch.device", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_add_lvl1().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "torch.load", "F.interpolate.to().float", "F.interpolate.to().float", "torch.interpolate", "torch.interpolate", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "torch.save", "numpy.save", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.unfreeze_modellvl1", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.interpolate.to", "F.interpolate.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.unfreeze_modellvl1"], ["", "def", "train_lvl2", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl2...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "# model_path = \"../Model/Stage/LDR_LPBA_NCC_1_1_stagelvl1_1500.pth\"", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl1_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl1...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl1", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "5", ",", "scale", "=", "2", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/OASIS_OAS1_*_MR1/aligned_norm.nii.gz'", ")", ")", "\n", "\n", "grid_2", "=", "generate_grid", "(", "imgshape_2", ")", "\n", "grid_2", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_2", ",", "(", "1", ",", ")", "+", "grid_2", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl2", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "True", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl2", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "X", "=", "F", ".", "interpolate", "(", "X", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "Y", "=", "F", ".", "interpolate", "(", "Y", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, y_down, compose_field_e0_lvl1v, lvl1_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_2", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl1", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl2", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl2.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff_resize.train_lvl3": [[294, 446], ["print", "torch.device", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1().to", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2().to", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_add_lvl2().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "miccai2020_model_stage.SpatialTransformNearest_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "miccai2020_model_stage.SpatialTransformNearest_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.load", "torch.load", "torch.load", "F.interpolate.to().float", "F.interpolate.to().float", "torch.interpolate", "torch.interpolate", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F.interpolate.permute().clone", "torch.save", "torch.save", "torch.save", "numpy.save", "torch.DataLoader", "torch.device", "torch.device", "torch.device", "print", "enumerate", "print", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.unfreeze_modellvl2", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.interpolate.to", "F.interpolate.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.state_dict", "sorted", "sorted", "Functions.Dataset_epoch_validation", "torch.interpolate", "torch.interpolate", "numpy.mean", "open", "log.write", "numpy.reshape", "numpy.reshape", "F.interpolate.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "glob.glob", "glob.glob", "data[].to", "data[].to", "data[].to", "data[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Miccai2020_LDR_laplacian_unit_add_lvl3().to.", "torch.interpolate", "Train_LapIRN_diff_resize.dice", "dice_total.append", "str", "SpatialTransformNearest_unit().to.cpu().numpy", "Y_label.cpu().numpy", "numpy.floor", "numpy.floor", "str", "SpatialTransformNearest_unit().to.cpu", "Y_label.cpu", "str", "numpy.mean", "SpatialTransformNearest_unit().to.", "F.interpolate.permute"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.unfreeze_modellvl2", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_diff_resize.dice"], ["", "def", "train_lvl3", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl3...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl2_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl2...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl2", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "7", ",", "scale", "=", "3", ")", "\n", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "transform_nearest", "=", "SpatialTransformNearest_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/OASIS_OAS1_*_MR1/aligned_norm.nii.gz'", ")", ")", "\n", "\n", "grid", "=", "generate_grid", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "grid_unit", "=", "generate_grid_unit", "(", "ori_imgshape", ")", "\n", "grid_unit", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_unit", ",", "(", "1", ",", ")", "+", "grid_unit", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl3", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "True", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_OASIS_NCC_unit_add_reg_3_anti_1_stagelvl3_10000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "10000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/lossLDR_OASIS_NCC_unit_add_reg_3_anti_1_stagelvl3_10000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "10000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "10000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl3", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "X", "=", "F", ".", "interpolate", "(", "X", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "Y", "=", "F", ".", "interpolate", "(", "Y", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, y, compose_field_e0_lvl2_compose, lvl1_v, compose_lvl2_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "F_xy_lvl2", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_xy", ".", "shape", "\n", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_xy", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_xy", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "# Validation", "\n", "# Put your validation code here", "\n", "# ---------------------------------------", "\n", "# OASIS (Validation)", "\n", "imgs", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/OASIS_OAS1_*_MR1/aligned_norm.nii.gz'", ")", ")", "[", "-", "4", ":", "]", "\n", "labels", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/OASIS_OAS1_*_MR1/aligned_seg35.nii.gz'", ")", ")", "[", "-", "4", ":", "]", "\n", "\n", "valid_generator", "=", "Data", ".", "DataLoader", "(", "\n", "Dataset_epoch_validation", "(", "imgs", ",", "labels", ",", "norm", "=", "True", ")", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "dice_total", "=", "[", "]", "\n", "use_cuda", "=", "True", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "print", "(", "\"\\nValiding...\"", ")", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "valid_generator", ")", ":", "\n", "                    ", "X", ",", "Y", ",", "X_label", ",", "Y_label", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", ",", "data", "[", "2", "]", ".", "to", "(", "\n", "device", ")", ",", "data", "[", "3", "]", ".", "to", "(", "device", ")", "\n", "\n", "X", "=", "F", ".", "interpolate", "(", "X", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "Y", "=", "F", ".", "interpolate", "(", "Y", ",", "size", "=", "imgshape", ",", "mode", "=", "'trilinear'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "F_xy_lvl2", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "F_X_Y", "=", "F", ".", "interpolate", "(", "F_X_Y", ",", "size", "=", "ori_imgshape", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "X_Y_label", "=", "transform_nearest", "(", "X_label", ",", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "grid_unit", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "\n", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "Y_label", "=", "Y_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "dice_score", "=", "dice", "(", "np", ".", "floor", "(", "X_Y_label", ")", ",", "np", ".", "floor", "(", "Y_label", ")", ")", "\n", "dice_total", ".", "append", "(", "dice_score", ")", "\n", "\n", "", "", "print", "(", "\"Dice mean: \"", ",", "np", ".", "mean", "(", "dice_total", ")", ")", "\n", "with", "open", "(", "log_dir", ",", "\"a\"", ")", "as", "log", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "step", ")", "+", "\":\"", "+", "str", "(", "np", ".", "mean", "(", "dice_total", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl2", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl3", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl3.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset.__init__": [[89, 94], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "names", ",", "iterations", ",", "norm", "=", "False", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "iterations", "=", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset.__len__": [[95, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "self", ".", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset.__getitem__": [[99, 109], ["Functions.load_4D", "Functions.load_4D", "numpy.random.permutation", "len", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Functions.imgnorm", "Functions.imgnorm"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm"], ["", "def", "__getitem__", "(", "self", ",", "step", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "index_pair", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "names", ")", ")", "[", "0", ":", "2", "]", "\n", "img_A", "=", "load_4D", "(", "self", ".", "names", "[", "index_pair", "[", "0", "]", "]", ")", "\n", "img_B", "=", "load_4D", "(", "self", ".", "names", "[", "index_pair", "[", "1", "]", "]", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_A", ")", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_B", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "img_A", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "img_B", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch.__init__": [[114, 119], ["list", "itertools.permutations"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "names", ",", "norm", "=", "False", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "index_pair", "=", "list", "(", "itertools", ".", "permutations", "(", "names", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch.__len__": [[120, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "index_pair", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch.__getitem__": [[124, 134], ["Functions.load_4D", "Functions.load_4D", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Functions.imgnorm", "Functions.imgnorm"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm"], ["", "def", "__getitem__", "(", "self", ",", "step", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "img_A", "=", "load_4D", "(", "self", ".", "index_pair", "[", "step", "]", "[", "0", "]", ")", "\n", "img_B", "=", "load_4D", "(", "self", ".", "index_pair", "[", "step", "]", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_A", ")", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_B", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "img_A", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "img_B", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch_validation.__init__": [[138, 147], ["torch.Dataset.__init__", "list", "list", "itertools.permutations", "itertools.permutations"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["def", "__init__", "(", "self", ",", "imgs", ",", "labels", ",", "norm", "=", "False", ")", ":", "\n", "        ", "'Initialization'", "\n", "super", "(", "Dataset_epoch_validation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "imgs_pair", "=", "list", "(", "itertools", ".", "permutations", "(", "imgs", ",", "2", ")", ")", "\n", "self", ".", "labels_pair", "=", "list", "(", "itertools", ".", "permutations", "(", "labels", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch_validation.__len__": [[148, 151], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "imgs_pair", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Dataset_epoch_validation.__getitem__": [[152, 168], ["Functions.load_4D", "Functions.load_4D", "Functions.load_4D", "Functions.load_4D", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Functions.imgnorm", "Functions.imgnorm"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm"], ["", "def", "__getitem__", "(", "self", ",", "step", ")", ":", "\n", "        ", "'Generates one sample of data'", "\n", "# Select sample", "\n", "img_A", "=", "load_4D", "(", "self", ".", "imgs_pair", "[", "step", "]", "[", "0", "]", ")", "\n", "img_B", "=", "load_4D", "(", "self", ".", "imgs_pair", "[", "step", "]", "[", "1", "]", ")", "\n", "\n", "label_A", "=", "load_4D", "(", "self", ".", "labels_pair", "[", "step", "]", "[", "0", "]", ")", "\n", "label_B", "=", "load_4D", "(", "self", ".", "labels_pair", "[", "step", "]", "[", "1", "]", ")", "\n", "\n", "# print(self.index_pair[step][0])", "\n", "# print(self.index_pair[step][1])", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_A", ")", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "imgnorm", "(", "img_B", ")", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label_A", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label_B", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "img_A", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "img_B", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label_A", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label_B", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Predict_dataset.__init__": [[171, 178], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fixed_list", ",", "move_list", ",", "fixed_label_list", ",", "move_label_list", ",", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "Predict_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fixed_list", "=", "fixed_list", "\n", "self", ".", "move_list", "=", "move_list", "\n", "self", ".", "fixed_label_list", "=", "fixed_label_list", "\n", "self", ".", "move_label_list", "=", "move_label_list", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Predict_dataset.__len__": [[179, 182], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the total number of samples'", "\n", "return", "len", "(", "self", ".", "move_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.Predict_dataset.__getitem__": [[183, 206], ["Functions.load_4D", "Functions.load_4D", "Functions.load_4D", "Functions.load_4D", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Functions.imgnorm", "Functions.imgnorm", "imgnorm.float", "imgnorm.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "imgnorm.float", "imgnorm.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fixed_img", "=", "load_4D", "(", "self", ".", "fixed_list", ")", "\n", "moved_img", "=", "load_4D", "(", "self", ".", "move_list", "[", "index", "]", ")", "\n", "fixed_label", "=", "load_4D", "(", "self", ".", "fixed_label_list", ")", "\n", "moved_label", "=", "load_4D", "(", "self", ".", "move_label_list", "[", "index", "]", ")", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "fixed_img", "=", "imgnorm", "(", "fixed_img", ")", "\n", "moved_img", "=", "imgnorm", "(", "moved_img", ")", "\n", "\n", "", "fixed_img", "=", "torch", ".", "from_numpy", "(", "fixed_img", ")", "\n", "moved_img", "=", "torch", ".", "from_numpy", "(", "moved_img", ")", "\n", "fixed_label", "=", "torch", ".", "from_numpy", "(", "fixed_label", ")", "\n", "moved_label", "=", "torch", ".", "from_numpy", "(", "moved_label", ")", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "output", "=", "{", "'fixed'", ":", "fixed_img", ".", "float", "(", ")", ",", "'move'", ":", "moved_img", ".", "float", "(", ")", ",", "\n", "'fixed_label'", ":", "fixed_label", ".", "float", "(", ")", ",", "'move_label'", ":", "moved_label", ".", "float", "(", ")", ",", "'index'", ":", "index", "}", "\n", "return", "output", "\n", "", "else", ":", "\n", "            ", "output", "=", "{", "'fixed'", ":", "fixed_img", ".", "float", "(", ")", ",", "'move'", ":", "moved_img", ".", "float", "(", ")", ",", "\n", "'fixed_label'", ":", "fixed_label", ".", "float", "(", ")", ",", "'move_label'", ":", "moved_label", ".", "float", "(", ")", ",", "'index'", ":", "index", "}", "\n", "return", "output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid": [[8, 16], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.rollaxis", "numpy.swapaxes", "numpy.swapaxes", "numpy.array", "numpy.meshgrid"], "function", ["None"], ["def", "generate_grid", "(", "imgshape", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "imgshape", "[", "0", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "imgshape", "[", "1", "]", ")", "\n", "z", "=", "np", ".", "arange", "(", "imgshape", "[", "2", "]", ")", "\n", "grid", "=", "np", ".", "rollaxis", "(", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "z", ",", "y", ",", "x", ")", ")", ",", "0", ",", "4", ")", "\n", "grid", "=", "np", ".", "swapaxes", "(", "grid", ",", "0", ",", "2", ")", "\n", "grid", "=", "np", ".", "swapaxes", "(", "grid", ",", "1", ",", "2", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit": [[18, 26], ["numpy.rollaxis", "numpy.swapaxes", "numpy.swapaxes", "numpy.array", "numpy.meshgrid", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "generate_grid_unit", "(", "imgshape", ")", ":", "\n", "    ", "x", "=", "(", "np", ".", "arange", "(", "imgshape", "[", "0", "]", ")", "-", "(", "(", "imgshape", "[", "0", "]", "-", "1", ")", "/", "2", ")", ")", "/", "(", "imgshape", "[", "0", "]", "-", "1", ")", "*", "2", "\n", "y", "=", "(", "np", ".", "arange", "(", "imgshape", "[", "1", "]", ")", "-", "(", "(", "imgshape", "[", "1", "]", "-", "1", ")", "/", "2", ")", ")", "/", "(", "imgshape", "[", "1", "]", "-", "1", ")", "*", "2", "\n", "z", "=", "(", "np", ".", "arange", "(", "imgshape", "[", "2", "]", ")", "-", "(", "(", "imgshape", "[", "2", "]", "-", "1", ")", "/", "2", ")", ")", "/", "(", "imgshape", "[", "2", "]", "-", "1", ")", "*", "2", "\n", "grid", "=", "np", ".", "rollaxis", "(", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "z", ",", "y", ",", "x", ")", ")", ",", "0", ",", "4", ")", "\n", "grid", "=", "np", ".", "swapaxes", "(", "grid", ",", "0", ",", "2", ")", "\n", "grid", "=", "np", ".", "swapaxes", "(", "grid", ",", "1", ",", "2", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow": [[28, 35], ["None"], "function", ["None"], ["", "def", "transform_unit_flow_to_flow", "(", "flow", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "_", "=", "flow", ".", "shape", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "(", "z", "-", "1", ")", "/", "2", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "(", "y", "-", "1", ")", "/", "2", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "(", "x", "-", "1", ")", "/", "2", "\n", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda": [[37, 44], ["None"], "function", ["None"], ["", "def", "transform_unit_flow_to_flow_cuda", "(", "flow", ")", ":", "\n", "    ", "b", ",", "x", ",", "y", ",", "z", ",", "c", "=", "flow", ".", "shape", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "*", "(", "z", "-", "1", ")", "/", "2", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "(", "y", "-", "1", ")", "/", "2", "\n", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "=", "flow", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "(", "x", "-", "1", ")", "/", "2", "\n", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_4D": [[46, 51], ["nibabel.load", "np.reshape.get_fdata", "numpy.reshape"], "function", ["None"], ["", "def", "load_4D", "(", "name", ")", ":", "\n", "    ", "X", "=", "nib", ".", "load", "(", "name", ")", "\n", "X", "=", "X", ".", "get_fdata", "(", ")", "\n", "X", "=", "np", ".", "reshape", "(", "X", ",", "(", "1", ",", ")", "+", "X", ".", "shape", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.load_5D": [[53, 58], ["nibabel.load", "np.reshape.get_fdata", "numpy.reshape"], "function", ["None"], ["", "def", "load_5D", "(", "name", ")", ":", "\n", "    ", "X", "=", "fixed_nii", "=", "nib", ".", "load", "(", "name", ")", "\n", "X", "=", "X", ".", "get_fdata", "(", ")", "\n", "X", "=", "np", ".", "reshape", "(", "X", ",", "(", "1", ",", ")", "+", "(", "1", ",", ")", "+", "X", ".", "shape", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.imgnorm": [[60, 66], ["numpy.max", "numpy.min"], "function", ["None"], ["", "def", "imgnorm", "(", "img", ")", ":", "\n", "    ", "max_v", "=", "np", ".", "max", "(", "img", ")", "\n", "min_v", "=", "np", ".", "min", "(", "img", ")", "\n", "\n", "norm_img", "=", "(", "img", "-", "min_v", ")", "/", "(", "max_v", "-", "min_v", ")", "\n", "return", "norm_img", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_img": [[68, 72], ["numpy.diag", "nibabel.nifti1.Nifti1Image", "nibabel.save"], "function", ["None"], ["", "def", "save_img", "(", "I_img", ",", "savename", ")", ":", "\n", "    ", "affine", "=", "np", ".", "diag", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "new_img", "=", "nib", ".", "nifti1", ".", "Nifti1Image", "(", "I_img", ",", "affine", ",", "header", "=", "None", ")", "\n", "nib", ".", "save", "(", "new_img", ",", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_img_nii": [[74, 78], ["numpy.diag", "nibabel.nifti1.Nifti1Image", "nibabel.save"], "function", ["None"], ["", "def", "save_img_nii", "(", "I_img", ",", "savename", ")", ":", "\n", "    ", "affine", "=", "np", ".", "diag", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "new_img", "=", "nib", ".", "nifti1", ".", "Nifti1Image", "(", "I_img", ",", "affine", ",", "header", "=", "None", ")", "\n", "nib", ".", "save", "(", "new_img", ",", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.save_flow": [[80, 84], ["numpy.diag", "nibabel.nifti1.Nifti1Image", "nibabel.save"], "function", ["None"], ["", "def", "save_flow", "(", "I_img", ",", "savename", ")", ":", "\n", "    ", "affine", "=", "np", ".", "diag", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "new_img", "=", "nib", ".", "nifti1", ".", "Nifti1Image", "(", "I_img", ",", "affine", ",", "header", "=", "None", ")", "\n", "nib", ".", "save", "(", "new_img", ",", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_disp.train_lvl1": [[67, 160], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to", "miccai2020_model_stage.NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "glob.glob", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.", "miccai2020_model_stage.NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda"], ["def", "train_lvl1", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl1...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "NCC", "(", "win", "=", "3", ")", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "loss_smooth", "=", "smoothloss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid_4", "=", "generate_grid", "(", "imgshape_4", ")", "\n", "grid_4", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_4", ",", "(", "1", ",", ")", "+", "grid_4", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl1", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl1", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_4", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_X_Y", ".", "shape", "\n", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_X_Y", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl1_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl1", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl1.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_disp.train_lvl2": [[162, 269], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.unfreeze_modellvl1", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.unfreeze_modellvl1"], ["", "def", "train_lvl2", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl2...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "\n", "# model_path = \"../Model/Stage/LDR_LPBA_NCC_1_1_stagelvl1_1500.pth\"", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl1_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl1...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl1", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "5", ",", "scale", "=", "2", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid_2", "=", "generate_grid", "(", "imgshape_2", ")", "\n", "grid_2", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid_2", ",", "(", "1", ",", ")", "+", "grid_2", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model/Stage'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl2", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl2", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# compose_field_e0_lvl1, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, lvl1_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid_2", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_X_Y", ".", "shape", "\n", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_X_Y", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl2_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl1", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl2", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl2.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Train_LapIRN_disp.train_lvl3": [[271, 382], ["print", "torch.device", "torch.device", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1().to", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.load_state_dict", "print", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2().to.parameters", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to", "miccai2020_model_stage.multi_resolution_NCC", "miccai2020_model_stage.SpatialTransform_unit().to", "SpatialTransform_unit().to.parameters", "sorted", "Functions.generate_grid", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.optim.Adam", "torch.optim.Adam", "numpy.zeros", "torch.DataLoader", "numpy.save", "sorted", "torch.load", "torch.load", "glob.glob", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to.parameters", "os.path.isdir", "os.mkdir", "Functions.Dataset_epoch", "print", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to.load_state_dict", "numpy.load", "print", "torch.cuda.is_available", "torch.cuda.is_available", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "glob.glob", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy().to", "torch.from_numpy().to", "torch.load", "torch.load", "X.to().float.to().float", "Y.to().float.to().float", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to.", "miccai2020_model_stage.multi_resolution_NCC.", "Functions.transform_unit_flow_to_flow_cuda", "loss_Jdet", "loss_smooth", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "numpy.array", "sys.stdout.write", "sys.stdout.flush", "F_X_Y.permute().clone", "torch.save", "torch.save", "numpy.save", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to.unfreeze_modellvl2", "torch.from_numpy", "torch.from_numpy", "X.to().float.to", "Y.to().float.to", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3().to.state_dict", "numpy.reshape", "F_X_Y.permute", "loss.item", "loss_similarity.item", "loss_Jdet.item", "loss_smooth.item", "str", "str"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.transform_unit_flow_to_flow_cuda", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.unfreeze_modellvl2"], ["", "def", "train_lvl3", "(", ")", ":", "\n", "    ", "print", "(", "\"Training lvl3...\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model_lvl1", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_4", ",", "\n", "range_flow", "=", "range_flow", ")", ".", "to", "(", "device", ")", "\n", "model_lvl2", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape_2", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl1", "=", "model_lvl1", ")", ".", "to", "(", "device", ")", "\n", "\n", "model_path", "=", "sorted", "(", "glob", ".", "glob", "(", "\"../Model/Stage/\"", "+", "model_name", "+", "\"stagelvl2_?????.pth\"", ")", ")", "[", "-", "1", "]", "\n", "model_lvl2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "print", "(", "\"Loading weight for model_lvl2...\"", ",", "model_path", ")", "\n", "\n", "# Freeze model_lvl1 weight", "\n", "for", "param", "in", "model_lvl2", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "model", "=", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3", "(", "2", ",", "3", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "imgshape", ",", "\n", "range_flow", "=", "range_flow", ",", "model_lvl2", "=", "model_lvl2", ")", ".", "to", "(", "device", ")", "\n", "\n", "loss_similarity", "=", "multi_resolution_NCC", "(", "win", "=", "7", ",", "scale", "=", "3", ")", "\n", "loss_smooth", "=", "smoothloss", "\n", "loss_Jdet", "=", "neg_Jdet_loss", "\n", "\n", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "to", "(", "device", ")", "\n", "# transform_nearest = SpatialTransformNearest_unit().to(device)", "\n", "\n", "for", "param", "in", "transform", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "param", ".", "volatile", "=", "True", "\n", "\n", "# OASIS", "\n", "", "names", "=", "sorted", "(", "glob", ".", "glob", "(", "datapath", "+", "'/*.nii'", ")", ")", "\n", "\n", "grid", "=", "generate_grid", "(", "imgshape", ")", "\n", "grid", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "grid", ",", "(", "1", ",", ")", "+", "grid", ".", "shape", ")", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# optimizer = torch.optim.SGD(model.parameters(), lr=lr, momentum=0.9)", "\n", "model_dir", "=", "'../Model'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "model_dir", ")", "\n", "\n", "", "lossall", "=", "np", ".", "zeros", "(", "(", "4", ",", "iteration_lvl3", "+", "1", ")", ")", "\n", "\n", "training_generator", "=", "Data", ".", "DataLoader", "(", "Dataset_epoch", "(", "names", ",", "norm", "=", "False", ")", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "step", "=", "0", "\n", "load_model", "=", "False", "\n", "if", "load_model", "is", "True", ":", "\n", "        ", "model_path", "=", "\"../Model/LDR_LPBA_NCC_lap_share_preact_1_05_3000.pth\"", "\n", "print", "(", "\"Loading weight: \"", ",", "model_path", ")", "\n", "step", "=", "3000", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "temp_lossall", "=", "np", ".", "load", "(", "\"../Model/loss_LDR_LPBA_NCC_lap_share_preact_1_05_3000.npy\"", ")", "\n", "lossall", "[", ":", ",", "0", ":", "3000", "]", "=", "temp_lossall", "[", ":", ",", "0", ":", "3000", "]", "\n", "\n", "", "while", "step", "<=", "iteration_lvl3", ":", "\n", "        ", "for", "X", ",", "Y", "in", "training_generator", ":", "\n", "\n", "            ", "X", "=", "X", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "# compose_field_e0_lvl1, warpped_inputx_lvl1_out, y, output_disp_e0_v, lvl1_v, lvl2_v, e0", "\n", "F_X_Y", ",", "X_Y", ",", "Y_4x", ",", "F_xy", ",", "F_xy_lvl1", ",", "F_xy_lvl2", ",", "_", "=", "model", "(", "X", ",", "Y", ")", "\n", "\n", "# 3 level deep supervision NCC", "\n", "loss_multiNCC", "=", "loss_similarity", "(", "X_Y", ",", "Y_4x", ")", "\n", "\n", "F_X_Y_norm", "=", "transform_unit_flow_to_flow_cuda", "(", "F_X_Y", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ".", "clone", "(", ")", ")", "\n", "\n", "loss_Jacobian", "=", "loss_Jdet", "(", "F_X_Y_norm", ",", "grid", ")", "\n", "\n", "# reg2 - use velocity", "\n", "_", ",", "_", ",", "x", ",", "y", ",", "z", "=", "F_X_Y", ".", "shape", "\n", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "*", "(", "z", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", "*", "(", "y", "-", "1", ")", "\n", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "=", "F_X_Y", "[", ":", ",", "2", ",", ":", ",", ":", ",", ":", "]", "*", "(", "x", "-", "1", ")", "\n", "loss_regulation", "=", "loss_smooth", "(", "F_X_Y", ")", "\n", "\n", "loss", "=", "loss_multiNCC", "+", "antifold", "*", "loss_Jacobian", "+", "smooth", "*", "loss_regulation", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# clear gradients for this training step", "\n", "loss", ".", "backward", "(", ")", "# backpropagation, compute gradients", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "\n", "lossall", "[", ":", ",", "step", "]", "=", "np", ".", "array", "(", "\n", "[", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", "]", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "\"\\r\"", "+", "'step \"{0}\" -> training loss \"{1:.4f}\" - sim_NCC \"{2:4f}\" - Jdet \"{3:.10f}\" -smo \"{4:.4f}\"'", ".", "format", "(", "\n", "step", ",", "loss", ".", "item", "(", ")", ",", "loss_multiNCC", ".", "item", "(", ")", ",", "loss_Jacobian", ".", "item", "(", ")", ",", "loss_regulation", ".", "item", "(", ")", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# with lr 1e-3 + with bias", "\n", "if", "(", "step", "%", "n_checkpoint", "==", "0", ")", ":", "\n", "                ", "modelname", "=", "model_dir", "+", "'/'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "modelname", ")", "\n", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "\"stagelvl3_\"", "+", "str", "(", "step", ")", "+", "'.npy'", ",", "lossall", ")", "\n", "\n", "# Validation", "\n", "\n", "", "if", "step", "==", "freeze_step", ":", "\n", "                ", "model", ".", "unfreeze_modellvl2", "(", ")", "\n", "\n", "", "step", "+=", "1", "\n", "\n", "if", "step", ">", "iteration_lvl3", ":", "\n", "                ", "break", "\n", "", "", "print", "(", "\"one epoch pass\"", ")", "\n", "", "np", ".", "save", "(", "model_dir", "+", "'/loss'", "+", "model_name", "+", "'stagelvl3.npy'", ",", "lossall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.__init__": [[11, 42], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "DiffeomorphicTransform_unit().cuda", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.resblock_seq", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.DiffeomorphicTransform_unit", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_add_lvl1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "diff_transform", "=", "DiffeomorphicTransform_unit", "(", "time_step", "=", "7", ")", ".", "cuda", "(", ")", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_avg", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.resblock_seq": [[44, 58], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.input_feature_extract": [[60, 73], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.decoder": [[74, 81], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.outputs": [[82, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.forward": [[97, 118], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.diff_transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.output_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl1.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "cat_input", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", "\n", "cat_input", "=", "self", ".", "down_avg", "(", "cat_input", ")", "\n", "cat_input_lvl1", "=", "self", ".", "down_avg", "(", "cat_input", ")", "\n", "\n", "down_y", "=", "cat_input_lvl1", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input_lvl1", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "output_disp_e0", "=", "self", ".", "diff_transform", "(", "output_disp_e0_v", ",", "self", ".", "grid_1", ")", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "output_disp_e0", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "output_disp_e0", ",", "warpped_inputx_lvl1_out", ",", "down_y", ",", "output_disp_e0_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "output_disp_e0", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.__init__": [[121, 155], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "DiffeomorphicTransform_unit().cuda", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.resblock_seq", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.DiffeomorphicTransform_unit", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ",", "model_lvl1", "=", "None", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_add_lvl2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "model_lvl1", "=", "model_lvl1", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "diff_transform", "=", "DiffeomorphicTransform_unit", "(", "time_step", "=", "7", ")", ".", "cuda", "(", ")", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", "+", "3", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up_tri", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_avg", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.unfreeze_modellvl1": [[156, 161], ["print", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.model_lvl1.parameters"], "methods", ["None"], ["", "def", "unfreeze_modellvl1", "(", "self", ")", ":", "\n", "# unFreeze model_lvl1 weight", "\n", "        ", "print", "(", "\"\\nunfreeze model_lvl1 parameter\"", ")", "\n", "for", "param", "in", "self", ".", "model_lvl1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.resblock_seq": [[162, 176], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.input_feature_extract": [[177, 190], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.decoder": [[191, 198], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.outputs": [[199, 213], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.forward": [[214, 242], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.model_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.diff_transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.permute", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.output_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl2.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "lvl1_disp", ",", "_", ",", "_", ",", "lvl1_v", ",", "lvl1_embedding", "=", "self", ".", "model_lvl1", "(", "x", ",", "y", ")", "\n", "lvl1_disp_up", "=", "self", ".", "up_tri", "(", "lvl1_disp", ")", "\n", "lvl1_v_up", "=", "self", ".", "up_tri", "(", "lvl1_v", ")", "\n", "\n", "x_down", "=", "self", ".", "down_avg", "(", "x", ")", "\n", "y_down", "=", "self", ".", "down_avg", "(", "y", ")", "\n", "\n", "warpped_x", "=", "self", ".", "transform", "(", "x_down", ",", "lvl1_disp_up", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "cat_input_lvl2", "=", "torch", ".", "cat", "(", "(", "warpped_x", ",", "y_down", ",", "lvl1_v_up", ")", ",", "1", ")", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input_lvl2", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "\n", "e0", "=", "e0", "+", "lvl1_embedding", "\n", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "compose_field_e0_lvl1v", "=", "output_disp_e0_v", "+", "lvl1_v_up", "\n", "output_disp_e0", "=", "self", ".", "diff_transform", "(", "compose_field_e0_lvl1v", ",", "self", ".", "grid_1", ")", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "output_disp_e0", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "output_disp_e0", ",", "warpped_inputx_lvl1_out", ",", "y_down", ",", "compose_field_e0_lvl1v", ",", "lvl1_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "output_disp_e0", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.__init__": [[245, 278], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "DiffeomorphicTransform_unit().cuda", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.resblock_seq", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.DiffeomorphicTransform_unit", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ",", "\n", "model_lvl2", "=", "None", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_add_lvl3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "model_lvl2", "=", "model_lvl2", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "diff_transform", "=", "DiffeomorphicTransform_unit", "(", "time_step", "=", "7", ")", ".", "cuda", "(", ")", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", "+", "3", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up_tri", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.unfreeze_modellvl2": [[280, 285], ["print", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.model_lvl2.parameters"], "methods", ["None"], ["", "def", "unfreeze_modellvl2", "(", "self", ")", ":", "\n", "# unFreeze model_lvl1 weight", "\n", "        ", "print", "(", "\"\\nunfreeze model_lvl2 parameter\"", ")", "\n", "for", "param", "in", "self", ".", "model_lvl2", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.resblock_seq": [[286, 300], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.input_feature_extract": [[301, 314], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.decoder": [[315, 322], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.outputs": [[323, 337], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.forward": [[338, 363], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.model_lvl2", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.diff_transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.permute", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.output_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_add_lvl3.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, y_down, compose_field_e0_lvl1v, lvl1_v, e0", "\n", "        ", "lvl2_disp", ",", "_", ",", "_", ",", "compose_lvl2_v", ",", "lvl1_v", ",", "lvl2_embedding", "=", "self", ".", "model_lvl2", "(", "x", ",", "y", ")", "\n", "lvl2_disp_up", "=", "self", ".", "up_tri", "(", "lvl2_disp", ")", "\n", "compose_lvl2_v_up", "=", "self", ".", "up_tri", "(", "compose_lvl2_v", ")", "\n", "warpped_x", "=", "self", ".", "transform", "(", "x", ",", "lvl2_disp_up", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "cat_input", "=", "torch", ".", "cat", "(", "(", "warpped_x", ",", "y", ",", "compose_lvl2_v_up", ")", ",", "1", ")", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "\n", "e0", "=", "e0", "+", "lvl2_embedding", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "compose_field_e0_lvl2_compose", "=", "output_disp_e0_v", "+", "compose_lvl2_v_up", "\n", "output_disp_e0", "=", "self", ".", "diff_transform", "(", "compose_field_e0_lvl2_compose", ",", "self", ".", "grid_1", ")", "\n", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "output_disp_e0", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "output_disp_e0", ",", "warpped_inputx_lvl1_out", ",", "y", ",", "compose_field_e0_lvl2_compose", ",", "lvl1_v", ",", "compose_lvl2_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "output_disp_e0", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.__init__": [[366, 396], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.resblock_seq", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_disp_add_lvl1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_avg", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.resblock_seq": [[398, 412], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.input_feature_extract": [[414, 427], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.decoder": [[428, 435], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.outputs": [[436, 450], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.forward": [[451, 471], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl1.output_lvl1", "output_disp_e0_v.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "cat_input", "=", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", "\n", "cat_input", "=", "self", ".", "down_avg", "(", "cat_input", ")", "\n", "cat_input_lvl1", "=", "self", ".", "down_avg", "(", "cat_input", ")", "\n", "\n", "down_y", "=", "cat_input_lvl1", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input_lvl1", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "output_disp_e0_v", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "output_disp_e0_v", ",", "warpped_inputx_lvl1_out", ",", "down_y", ",", "output_disp_e0_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "output_disp_e0_v", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.__init__": [[474, 507], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.resblock_seq", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ",", "model_lvl1", "=", "None", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_disp_add_lvl2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "model_lvl1", "=", "model_lvl1", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", "+", "3", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up_tri", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_avg", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.unfreeze_modellvl1": [[508, 513], ["print", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.model_lvl1.parameters"], "methods", ["None"], ["", "def", "unfreeze_modellvl1", "(", "self", ")", ":", "\n", "# unFreeze model_lvl1 weight", "\n", "        ", "print", "(", "\"\\nunfreeze model_lvl1 parameter\"", ")", "\n", "for", "param", "in", "self", ".", "model_lvl1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.resblock_seq": [[514, 528], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.input_feature_extract": [[529, 542], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.decoder": [[543, 550], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.outputs": [[551, 565], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.forward": [[566, 593], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.model_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.down_avg", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.permute", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl2.output_lvl1", "compose_field_e0_lvl1.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# output_disp_e0, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, e0", "\n", "        ", "lvl1_disp", ",", "_", ",", "_", ",", "lvl1_v", ",", "lvl1_embedding", "=", "self", ".", "model_lvl1", "(", "x", ",", "y", ")", "\n", "lvl1_disp_up", "=", "self", ".", "up_tri", "(", "lvl1_disp", ")", "\n", "\n", "x_down", "=", "self", ".", "down_avg", "(", "x", ")", "\n", "y_down", "=", "self", ".", "down_avg", "(", "y", ")", "\n", "\n", "warpped_x", "=", "self", ".", "transform", "(", "x_down", ",", "lvl1_disp_up", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "cat_input_lvl2", "=", "torch", ".", "cat", "(", "(", "warpped_x", ",", "y_down", ",", "lvl1_disp_up", ")", ",", "1", ")", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input_lvl2", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "\n", "e0", "=", "e0", "+", "lvl1_embedding", "\n", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "compose_field_e0_lvl1", "=", "lvl1_disp_up", "+", "output_disp_e0_v", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "compose_field_e0_lvl1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "compose_field_e0_lvl1", ",", "warpped_inputx_lvl1_out", ",", "y_down", ",", "output_disp_e0_v", ",", "lvl1_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "compose_field_e0_lvl1", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.__init__": [[596, 628], ["torch.Module.__init__", "Functions.generate_grid_unit", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "torch.from_numpy().cuda().float", "SpatialTransform_unit().cuda", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "miccai2020_model_stage.SpatialTransform_unit", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.Functions.generate_grid_unit", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq", "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "n_classes", ",", "start_channel", ",", "is_train", "=", "True", ",", "imgshape", "=", "(", "160", ",", "192", ",", "144", ")", ",", "range_flow", "=", "0.4", ",", "\n", "model_lvl2", "=", "None", ")", ":", "\n", "        ", "super", "(", "Miccai2020_LDR_laplacian_unit_disp_add_lvl3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "start_channel", "=", "start_channel", "\n", "\n", "self", ".", "range_flow", "=", "range_flow", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "self", ".", "imgshape", "=", "imgshape", "\n", "\n", "self", ".", "model_lvl2", "=", "model_lvl2", "\n", "\n", "self", ".", "grid_1", "=", "generate_grid_unit", "(", "self", ".", "imgshape", ")", "\n", "self", ".", "grid_1", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "self", ".", "grid_1", ",", "(", "1", ",", ")", "+", "self", ".", "grid_1", ".", "shape", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "transform", "=", "SpatialTransform_unit", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "bias_opt", "=", "False", "\n", "\n", "self", ".", "input_encoder_lvl1", "=", "self", ".", "input_feature_extract", "(", "self", ".", "in_channel", "+", "3", ",", "self", ".", "start_channel", "*", "4", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "down_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "resblock_group_lvl1", "=", "self", ".", "resblock_seq", "(", "self", ".", "start_channel", "*", "4", ",", "bias_opt", "=", "bias_opt", ")", "\n", "\n", "self", ".", "up_tri", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"trilinear\"", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose3d", "(", "self", ".", "start_channel", "*", "4", ",", "self", ".", "start_channel", "*", "4", ",", "2", ",", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "bias", "=", "bias_opt", ")", "\n", "\n", "self", ".", "output_lvl1", "=", "self", ".", "outputs", "(", "self", ".", "start_channel", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.unfreeze_modellvl2": [[630, 635], ["print", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.model_lvl2.parameters"], "methods", ["None"], ["", "def", "unfreeze_modellvl2", "(", "self", ")", ":", "\n", "# unFreeze model_lvl1 weight", "\n", "        ", "print", "(", "\"\\nunfreeze model_lvl2 parameter\"", ")", "\n", "for", "param", "in", "self", ".", "model_lvl2", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_seq": [[636, 650], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "miccai2020_model_stage.PreActBlock", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "", "def", "resblock_seq", "(", "self", ",", "in_channels", ",", "bias_opt", "=", "False", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "PreActBlock", "(", "in_channels", ",", "in_channels", ",", "bias", "=", "bias_opt", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_feature_extract": [[651, 664], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "input_feature_extract", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.decoder": [[665, 672], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "\n", "output_padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.outputs": [[673, 687], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Softsign", "torch.Softsign", "torch.Softsign", "int", "int"], "methods", ["None"], ["", "def", "outputs", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "batchnorm", "=", "False", ")", ":", "\n", "        ", "if", "batchnorm", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "int", "(", "in_channels", "/", "2", ")", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "int", "(", "in_channels", "/", "2", ")", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "Softsign", "(", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.forward": [[688, 711], ["miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.model_lvl2", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.up_tri", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.transform", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.input_encoder_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.down_conv", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.resblock_group_lvl1", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.up", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.transform", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.permute", "miccai2020_model_stage.Miccai2020_LDR_laplacian_unit_disp_add_lvl3.output_lvl1", "compose_field_e0_lvl1.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# compose_field_e0_lvl1, warpped_inputx_lvl1_out, down_y, output_disp_e0_v, lvl1_v, e0", "\n", "        ", "lvl2_disp", ",", "_", ",", "_", ",", "lvl2_v", ",", "lvl1_v", ",", "lvl2_embedding", "=", "self", ".", "model_lvl2", "(", "x", ",", "y", ")", "\n", "lvl2_disp_up", "=", "self", ".", "up_tri", "(", "lvl2_disp", ")", "\n", "warpped_x", "=", "self", ".", "transform", "(", "x", ",", "lvl2_disp_up", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "cat_input", "=", "torch", ".", "cat", "(", "(", "warpped_x", ",", "y", ",", "lvl2_disp_up", ")", ",", "1", ")", "\n", "\n", "fea_e0", "=", "self", ".", "input_encoder_lvl1", "(", "cat_input", ")", "\n", "e0", "=", "self", ".", "down_conv", "(", "fea_e0", ")", "\n", "\n", "e0", "=", "e0", "+", "lvl2_embedding", "\n", "e0", "=", "self", ".", "resblock_group_lvl1", "(", "e0", ")", "\n", "e0", "=", "self", ".", "up", "(", "e0", ")", "\n", "output_disp_e0_v", "=", "self", ".", "output_lvl1", "(", "torch", ".", "cat", "(", "[", "e0", ",", "fea_e0", "]", ",", "dim", "=", "1", ")", ")", "*", "self", ".", "range_flow", "\n", "compose_field_e0_lvl1", "=", "output_disp_e0_v", "+", "lvl2_disp_up", "\n", "\n", "warpped_inputx_lvl1_out", "=", "self", ".", "transform", "(", "x", ",", "compose_field_e0_lvl1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ",", "self", ".", "grid_1", ")", "\n", "\n", "if", "self", ".", "is_train", "is", "True", ":", "\n", "            ", "return", "compose_field_e0_lvl1", ",", "warpped_inputx_lvl1_out", ",", "y", ",", "output_disp_e0_v", ",", "lvl1_v", ",", "lvl2_v", ",", "e0", "\n", "", "else", ":", "\n", "            ", "return", "compose_field_e0_lvl1", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.PreActBlock.__init__": [[717, 725], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "num_group", "=", "4", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.PreActBlock.forward": [[728, 739], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "miccai2020_model_stage.PreActBlock.conv1", "miccai2020_model_stage.PreActBlock.conv2", "hasattr", "miccai2020_model_stage.PreActBlock.shortcut", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "0.2", ")", "\n", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "leaky_relu", "(", "out", ",", "negative_slope", "=", "0.2", ")", ")", "\n", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.SpatialTransform_unit.__init__": [[742, 744], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpatialTransform_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.SpatialTransform_unit.forward": [[745, 749], ["torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "flow", ",", "sample_grid", ")", ":", "\n", "        ", "sample_grid", "=", "sample_grid", "+", "flow", "\n", "flow", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "sample_grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "\"border\"", ",", "align_corners", "=", "True", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.SpatialTransformNearest_unit.__init__": [[752, 754], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpatialTransformNearest_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.SpatialTransformNearest_unit.forward": [[755, 759], ["torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "flow", ",", "sample_grid", ")", ":", "\n", "        ", "sample_grid", "=", "sample_grid", "+", "flow", "\n", "flow", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "sample_grid", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "\"border\"", ",", "align_corners", "=", "True", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.DiffeomorphicTransform_unit.__init__": [[762, 765], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["    ", "def", "__init__", "(", "self", ",", "time_step", "=", "7", ")", ":", "\n", "        ", "super", "(", "DiffeomorphicTransform_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "time_step", "=", "time_step", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.DiffeomorphicTransform_unit.forward": [[766, 772], ["range", "flow.permute", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "velocity", ",", "sample_grid", ")", ":", "\n", "        ", "flow", "=", "velocity", "/", "(", "2.0", "**", "self", ".", "time_step", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "time_step", ")", ":", "\n", "            ", "grid", "=", "sample_grid", "+", "flow", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "flow", "=", "flow", "+", "F", ".", "grid_sample", "(", "flow", ",", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "\"border\"", ",", "align_corners", "=", "True", ")", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.NCC.__init__": [[807, 812], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["def", "__init__", "(", "self", ",", "win", "=", "5", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "NCC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "win", "=", "win", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "w_temp", "=", "win", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.NCC.forward": [[813, 853], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "conv_fn", "conv_fn", "conv_fn", "conv_fn", "conv_fn", "numpy.prod", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "ndims", "=", "3", "\n", "win_size", "=", "self", ".", "w_temp", "\n", "\n", "# set window size", "\n", "if", "self", ".", "win", "is", "None", ":", "\n", "            ", "self", ".", "win", "=", "[", "5", "]", "*", "ndims", "\n", "", "else", ":", "\n", "            ", "self", ".", "win", "=", "[", "self", ".", "w_temp", "]", "*", "ndims", "\n", "\n", "", "weight_win_size", "=", "self", ".", "w_temp", "\n", "weight", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "weight_win_size", ",", "weight_win_size", ",", "weight_win_size", ")", ",", "device", "=", "I", ".", "device", ",", "requires_grad", "=", "False", ")", "\n", "conv_fn", "=", "F", ".", "conv3d", "\n", "\n", "# compute CC squares", "\n", "I2", "=", "I", "*", "I", "\n", "J2", "=", "J", "*", "J", "\n", "IJ", "=", "I", "*", "J", "\n", "\n", "# compute filters", "\n", "# compute local sums via convolution", "\n", "I_sum", "=", "conv_fn", "(", "I", ",", "weight", ",", "padding", "=", "int", "(", "win_size", "/", "2", ")", ")", "\n", "J_sum", "=", "conv_fn", "(", "J", ",", "weight", ",", "padding", "=", "int", "(", "win_size", "/", "2", ")", ")", "\n", "I2_sum", "=", "conv_fn", "(", "I2", ",", "weight", ",", "padding", "=", "int", "(", "win_size", "/", "2", ")", ")", "\n", "J2_sum", "=", "conv_fn", "(", "J2", ",", "weight", ",", "padding", "=", "int", "(", "win_size", "/", "2", ")", ")", "\n", "IJ_sum", "=", "conv_fn", "(", "IJ", ",", "weight", ",", "padding", "=", "int", "(", "win_size", "/", "2", ")", ")", "\n", "\n", "# compute cross correlation", "\n", "win_size", "=", "np", ".", "prod", "(", "self", ".", "win", ")", "\n", "u_I", "=", "I_sum", "/", "win_size", "\n", "u_J", "=", "J_sum", "/", "win_size", "\n", "\n", "cross", "=", "IJ_sum", "-", "u_J", "*", "I_sum", "-", "u_I", "*", "J_sum", "+", "u_I", "*", "u_J", "*", "win_size", "\n", "I_var", "=", "I2_sum", "-", "2", "*", "u_I", "*", "I_sum", "+", "u_I", "*", "u_I", "*", "win_size", "\n", "J_var", "=", "J2_sum", "-", "2", "*", "u_J", "*", "J_sum", "+", "u_J", "*", "u_J", "*", "win_size", "\n", "\n", "cc", "=", "cross", "*", "cross", "/", "(", "I_var", "*", "J_var", "+", "self", ".", "eps", ")", "\n", "\n", "# return negative cc.", "\n", "return", "-", "1.0", "*", "torch", ".", "mean", "(", "cc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__": [[859, 866], ["super().__init__", "range", "miccai2020_model_stage.multi_resolution_NCC.similarity_metric.append", "miccai2020_model_stage.NCC"], "methods", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.__init__"], ["def", "__init__", "(", "self", ",", "win", "=", "None", ",", "eps", "=", "1e-5", ",", "scale", "=", "3", ")", ":", "\n", "        ", "super", "(", "multi_resolution_NCC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_scale", "=", "scale", "\n", "self", ".", "similarity_metric", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "scale", ")", ":", "\n", "            ", "self", ".", "similarity_metric", ".", "append", "(", "NCC", "(", "win", "=", "win", "-", "(", "i", "*", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.multi_resolution_NCC.forward": [[867, 878], ["range", "sum", "total_NCC.append", "torch.functional.avg_pool3d", "torch.functional.avg_pool3d", "torch.functional.avg_pool3d", "torch.functional.avg_pool3d", "torch.functional.avg_pool3d", "torch.functional.avg_pool3d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "total_NCC", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_scale", ")", ":", "\n", "            ", "current_NCC", "=", "self", ".", "similarity_metric", "[", "i", "]", "(", "I", ",", "J", ")", "\n", "total_NCC", ".", "append", "(", "current_NCC", "/", "(", "2", "**", "i", ")", ")", "\n", "\n", "I", "=", "nn", ".", "functional", ".", "avg_pool3d", "(", "I", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "J", "=", "nn", ".", "functional", ".", "avg_pool3d", "(", "J", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "\n", "", "return", "sum", "(", "total_NCC", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.smoothloss": [[774, 779], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "smoothloss", "(", "y_pred", ")", ":", "\n", "    ", "dy", "=", "torch", ".", "abs", "(", "y_pred", "[", ":", ",", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "y_pred", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ")", "\n", "dx", "=", "torch", ".", "abs", "(", "y_pred", "[", ":", ",", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "y_pred", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "dz", "=", "torch", ".", "abs", "(", "y_pred", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "y_pred", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", "\n", "return", "(", "torch", ".", "mean", "(", "dx", "*", "dx", ")", "+", "torch", ".", "mean", "(", "dy", "*", "dy", ")", "+", "torch", ".", "mean", "(", "dz", "*", "dz", ")", ")", "/", "3.0", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.JacboianDet": [[781, 794], ["None"], "function", ["None"], ["", "def", "JacboianDet", "(", "y_pred", ",", "sample_grid", ")", ":", "\n", "    ", "J", "=", "y_pred", "+", "sample_grid", "\n", "dy", "=", "J", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "-", "J", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "dx", "=", "J", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "-", "J", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "dz", "=", "J", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "-", "J", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "\n", "Jdet0", "=", "dx", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "*", "(", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "-", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ")", "\n", "Jdet1", "=", "dx", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "(", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "-", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "Jdet2", "=", "dx", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", "*", "(", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "-", "dy", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", "*", "dz", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "\n", "Jdet", "=", "Jdet0", "-", "Jdet1", "+", "Jdet2", "\n", "\n", "return", "Jdet", "\n", "\n"]], "home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.neg_Jdet_loss": [[796, 801], ["torch.relu", "torch.mean", "torch.mean", "torch.mean", "miccai2020_model_stage.JacboianDet"], "function", ["home.repos.pwc.inspect_result.cwmok_LapIRN.Code.miccai2020_model_stage.JacboianDet"], ["", "def", "neg_Jdet_loss", "(", "y_pred", ",", "sample_grid", ")", ":", "\n", "    ", "neg_Jdet", "=", "-", "1.0", "*", "JacboianDet", "(", "y_pred", ",", "sample_grid", ")", "\n", "selected_neg_Jdet", "=", "F", ".", "relu", "(", "neg_Jdet", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "selected_neg_Jdet", ")", "\n", "\n"]]}