{"home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.generate_top.Dataset.__init__": [[15, 35], ["generate_top.Dataset.documents.sort", "range", "kwargs[].split", "len", "generate_top.Dataset.documents.pop", "line.split", "len", "tokens[].split", "range", "generate_top.Dataset.documents.append", "tokens[].split", "vector.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "documents", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "lable", "=", "tokens", "[", "0", "]", "\n", "index", "=", "tokens", "[", "1", "]", ".", "split", "(", "\":\"", ")", "\n", "self", ".", "name", "=", "index", "[", "0", "]", "+", "index", "[", "1", "]", "\n", "vector", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "size", ")", ":", "\n", "                        ", "index", "=", "tokens", "[", "i", "]", ".", "split", "(", "\":\"", ")", "\n", "vector", ".", "append", "(", "index", "[", "1", "]", ")", "\n", "", "tup", "=", "(", "lable", ",", "vector", ")", "\n", "self", ".", "documents", ".", "append", "(", "tup", ")", "\n", "", "", "", "self", ".", "top", "=", "kwargs", "[", "\"items\"", "]", "\n", "self", ".", "documents", ".", "sort", "(", "key", "=", "self", ".", "takeLable", ",", "reverse", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "top", ",", "len", "(", "self", ".", "documents", ")", ")", ":", "\n", "            ", "self", ".", "documents", ".", "pop", "(", "self", ".", "top", ")", "\n", "", "", "def", "takeLable", "(", "self", ",", "elem", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.generate_top.Dataset.takeLable": [[35, 37], ["None"], "methods", ["None"], ["", "", "def", "takeLable", "(", "self", ",", "elem", ")", ":", "\n", "        ", "return", "elem", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.generate_top.output": [[38, 52], ["open", "print", "open.close", "os.path.exists", "os.makedirs", "open.write", "open.write", "open.write", "open.write"], "function", ["None"], ["", "", "def", "output", "(", "data", ",", "address", ")", ":", "\n", "    ", "save_address", "=", "address", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "name", "=", "\"instance_\"", "+", "data", ".", "name", "+", "\".txt\"", "\n", "log", "=", "open", "(", "save_address", "+", "name", ",", "\"w\"", ")", "\n", "print", "(", "\"write:\"", "+", "save_address", "+", "name", ")", "\n", "for", "d", "in", "data", ".", "documents", ":", "\n", "        ", "log", ".", "write", "(", "d", "[", "0", "]", "+", "\" \"", ")", "\n", "log", ".", "write", "(", "data", ".", "name", "+", "\" \"", ")", "\n", "for", "item", "in", "d", "[", "1", "]", ":", "\n", "            ", "log", ".", "write", "(", "item", "+", "\" \"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.generate_top.generate": [[56, 77], ["open", "open.read", "open.close", "f.read.split", "line.split", "len", "qid.split", "open", "open.read", "generate_top.Dataset", "open.close", "generate_top.output", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.output"], ["", "def", "generate", "(", "args", ")", ":", "\n", "    ", "str", "=", "args", ".", "read", "\n", "f", "=", "open", "(", "str", ",", "\"r\"", ")", "\n", "instance", "=", "f", ".", "read", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "for", "line", "in", "instance", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "        ", "pair", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "pair", ")", "==", "2", ":", "\n", "            ", "qid", "=", "pair", "[", "0", "]", "\n", "num", "=", "pair", "[", "1", "]", "\n", "read_address", "=", "args", ".", "file", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "read_address", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "read_address", ")", "\n", "", "index", "=", "qid", ".", "split", "(", "\":\"", ")", "\n", "name", "=", "index", "[", "0", "]", "+", "index", "[", "1", "]", "\n", "read_address", "=", "read_address", "+", "name", "+", "\".txt\"", "\n", "f", "=", "open", "(", "read_address", ",", "\"r\"", ")", "\n", "instance", "=", "f", ".", "read", "(", ")", "\n", "data", "=", "Dataset", "(", "text", "=", "instance", ",", "items", "=", "args", ".", "top", ")", "\n", "f", ".", "close", "(", ")", "\n", "output", "(", "data", ",", "args", ".", "save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "weight", "=", "kwargs", "[", "\"w\"", "]", "\n", "self", ".", "distance", "=", "kwargs", "[", "\"dis\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.setIterationTime": [[12, 14], ["None"], "methods", ["None"], ["", "def", "setIterationTime", "(", "self", ",", "time", ")", ":", "\n", "        ", "self", ".", "iterationTime", "=", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.mutation": [[15, 19], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.Calucalate_true_value": [[20, 38], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "# print(self.weight[i[1]])", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.doGSEMO": [[39, 115], ["numpy.mat", "numpy.mat", "int", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n", "population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.GSEMO.GSEMO.evaluateObjective": [[116, 133], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.main.Problem.__init__": [[10, 37], ["range", "kwargs[].split", "len", "range", "line.split", "len", "range", "len", "main.Problem.weight.append", "main.Problem.vector.append", "range", "float", "float", "main.Problem.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.cosine_similarity"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.main.Problem.Gsemo": [[38, 43], ["GSEMO.GSEMO", "GSEMO.GSEMO.setIterationTime", "GSEMO.GSEMO.doGSEMO", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.doGSEMO"], ["", "", "", "", "def", "Gsemo", "(", "self", ",", "path", ")", ":", "\n", "        ", "gesmo", "=", "gsm", ".", "GSEMO", "(", "k", "=", "self", ".", "k", ",", "n", "=", "self", ".", "n", ",", "w", "=", "self", ".", "weight", ",", "dis", "=", "self", ".", "distance", ",", "mylambda", "=", "self", ".", "mylambda", ")", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "gesmo", ".", "setIterationTime", "(", "iterationoTime", ")", "\n", "return", "gesmo", ".", "doGSEMO", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.main.Problem.bit_product_sum": [[44, 46], ["sum", "zip"], "methods", ["None"], ["", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.main.Problem.cosine_similarity": [[47, 56], ["numpy.array", "len", "len", "len", "sum", "float", "float", "numpy.sqrt", "numpy.sqrt", "range", "sum", "sum", "len"], "methods", ["None"], ["", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.main.run_experiments": [[57, 71], ["print", "open", "open.read", "main.Problem", "main.Problem.Gsemo", "os.listdir", "os.path.isfile", "str", "os.path.exists", "os.makedirs", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.Gsemo"], ["", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "path", "=", "save_address", "+", "\"/Result_\"", "+", "file", "\n", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "result", "=", "problem", ".", "Gsemo", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.__init__": [[16, 43], ["range", "kwargs[].split", "len", "range", "line.split", "len", "range", "len", "greedy_ls.Problem.weight.append", "greedy_ls.Problem.vector.append", "range", "float", "float", "greedy_ls.Problem.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.cosine_similarity"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.bit_product_sum": [[44, 46], ["sum", "zip"], "methods", ["None"], ["", "", "", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.cosine_similarity": [[47, 56], ["numpy.array", "len", "len", "len", "sum", "float", "float", "numpy.sqrt", "numpy.sqrt", "range", "sum", "sum", "len"], "methods", ["None"], ["", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.evaluateObjective": [[58, 67], ["len", "range"], "methods", ["None"], ["", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "size", "=", "len", "(", "temp", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "f", "=", "self", ".", "weight", "[", "new_item", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "div", "+=", "self", ".", "distance", "[", "temp", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.select_best_item": [[68, 72], ["numpy.argmax", "greedy_ls.Problem.evaluateObjective", "items.pop"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "for", "s", "in", "items", "]", "\n", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "res", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.greedy": [[73, 83], ["range", "items.append", "len", "greedy_ls.Problem.select_best_item"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", ")", "<", "self", ".", "k", ":", "\n", "            ", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.exchange": [[84, 105], ["copy.deepcopy", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.append", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", ".", "pop", "(", "temp_solution", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.LocalSearch": [[106, 123], ["range", "items.append", "items.pop", "greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "# start with greedy solution", "\n", "", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# delete exchange_item[0] from V\\X", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "# add exchang_item[1] in V\\X", "\n", "", "", "return", "res", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.Problem.Calculate_true_value": [[124, 135], ["len", "range", "range"], "methods", ["None"], ["", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "res", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "res", "[", "i", "]", "]", "[", "res", "[", "j", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.OutputResult": [[136, 144], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], ["", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.OutputAvg": [[145, 153], ["log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str", "numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"Greedy: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_greedy", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"LocalSearch: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_ls", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.greedy_ls.run_experiments": [[154, 195], ["greedy_ls.OutputAvg", "print", "open", "open.read", "greedy_ls.Problem", "print", "greedy_ls.Problem.greedy", "greedy_ls.Problem.Calculate_true_value", "all_greedy.append", "print", "open", "greedy_ls.OutputResult", "print", "greedy_ls.Problem.LocalSearch", "all_ls.append", "print", "open", "greedy_ls.OutputResult", "str", "os.path.exists", "os.makedirs", "open", "os.listdir", "os.path.isfile", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputAvg", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], ["", "def", "run_experiments", "(", "args", ")", ":", "\n", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "all_greedy", "=", "[", "]", "\n", "all_ls", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res", ")", "\n", "all_greedy", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/greedy_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res", ")", "\n", "all_ls", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/LS_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "\n", "", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/Average.txt\"", ",", "\"w\"", ")", "if", "args", ".", "save_file", "else", "sys", ".", "stdout", "\n", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.Dataset.__init__": [[15, 29], ["kwargs[].split", "len", "line.split", "len", "operate_data.Dataset.dic[].append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dic", "=", "{", "}", "\n", "self", ".", "distance", "=", "[", "]", "\n", "self", ".", "pair", "=", "{", "}", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "tokens", ")", ">=", "2", ":", "\n", "                    ", "if", "tokens", "[", "1", "]", "in", "self", ".", "dic", ":", "\n", "                        ", "self", ".", "dic", "[", "tokens", "[", "1", "]", "]", ".", "append", "(", "line", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "dic", "[", "tokens", "[", "1", "]", "]", "=", "[", "line", "]", "\n", "", "", "", "", "for", "d", "in", "self", ".", "dic", ":", "\n", "            ", "self", ".", "pair", "[", "d", "]", "=", "len", "(", "self", ".", "dic", "[", "d", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.output": [[30, 66], ["print", "open", "open.close", "print", "open", "sorted", "open.close", "d.split", "open", "print", "open.close", "os.path.exists", "os.makedirs", "open.write", "os.path.exists", "os.makedirs", "data.pair.items", "print", "print", "open.write", "os.path.exists", "os.makedirs", "open.write", "open.write", "str", "str"], "function", ["None"], ["", "", "", "def", "output", "(", "data", ",", "address", ")", ":", "\n", "    ", "for", "d", "in", "data", ".", "dic", ":", "\n", "        ", "index", "=", "d", ".", "split", "(", "\":\"", ")", "\n", "save_address", "=", "address", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "name", "=", "index", "[", "0", "]", "+", "index", "[", "1", "]", "+", "\".txt\"", "\n", "log", "=", "open", "(", "save_address", "+", "name", ",", "\"w\"", ")", "\n", "print", "(", "\"write:\"", "+", "save_address", "+", "name", ")", "\n", "for", "line", "in", "data", ".", "dic", "[", "d", "]", ":", "\n", "            ", "log", ".", "write", "(", "line", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n", "", "save_address", "=", "address", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "save_address", "=", "save_address", "+", "\"info.txt\"", "\n", "print", "(", "\"write:\"", "+", "save_address", ")", "\n", "log", "=", "open", "(", "save_address", ",", "\"w\"", ")", "\n", "for", "d", "in", "data", ".", "pair", ":", "\n", "        ", "log", ".", "write", "(", "d", "+", "\" \"", "+", "str", "(", "data", ".", "pair", "[", "d", "]", ")", "+", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n", "save_address", "=", "address", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "save_address", "=", "save_address", "+", "\"info_sort.txt\"", "\n", "print", "(", "\"write:\"", "+", "save_address", ")", "\n", "log", "=", "open", "(", "save_address", ",", "\"w\"", ")", "\n", "pair_sort", "=", "sorted", "(", "data", ".", "pair", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "(", "kv", "[", "1", "]", ",", "kv", "[", "0", "]", ")", ")", "\n", "for", "d", "in", "pair_sort", ":", "\n", "        ", "print", "(", "\"----------------------\"", ")", "\n", "print", "(", "d", ")", "\n", "log", ".", "write", "(", "d", "[", "0", "]", "+", "\" \"", "+", "str", "(", "d", "[", "1", "]", ")", "+", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.readData": [[69, 75], ["open", "open.read", "operate_data.Dataset", "open.close"], "function", ["None"], ["", "def", "readData", "(", "str", ")", ":", "\n", "    ", "f", "=", "open", "(", "str", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "data", "=", "Dataset", "(", "text", "=", "instance", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "data", "\n", "", "def", "operate", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.operate": [[75, 78], ["operate_data.readData", "operate_data.output"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.readData", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_letor.operate_data.output"], ["", "def", "operate", "(", "args", ")", ":", "\n", "    ", "data", "=", "readData", "(", "args", ".", "read", ")", "\n", "output", "(", "data", ",", "args", ".", "save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.__init__": [[282, 293], ["medical_GSEMO.readNMI", "medical_GSEMO.readDis", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readNMI", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readDis"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "self", ".", "top", "=", "kwargs", "[", "\"top\"", "]", "\n", "self", ".", "l", "=", "kwargs", "[", "\"l\"", "]", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "self", ".", "iterationTime", "=", "iterationoTime", "\n", "\n", "self", ".", "NMI", "=", "readNMI", "(", "kwargs", "[", "\"NMI\"", "]", ",", "kwargs", "[", "\"n\"", "]", ",", "kwargs", "[", "\"l\"", "]", ")", "\n", "self", ".", "dis", "=", "readDis", "(", "kwargs", "[", "\"dis\"", "]", ",", "kwargs", "[", "\"n\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.mutation": [[296, 300], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.doGSEMO": [[301, 379], ["numpy.mat", "numpy.mat", "int", "float", "range", "medical_GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "medical_GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "medical_GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "medical_GSEMO.GSEMO.tempOptimum.append", "medical_GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "sum", "=", "0", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n", "population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.sum_of_top": [[380, 389], ["range", "values.sort", "range", "values.append", "min"], "methods", ["None"], ["", "def", "sum_of_top", "(", "self", ",", "linklist", ",", "size", ",", "l", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "values", ".", "append", "(", "self", ".", "NMI", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "l", "]", ")", "\n", "", "values", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "top", ",", "size", ")", ")", ":", "\n", "            ", "value", "+=", "values", "[", "i", "]", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.metric": [[390, 392], ["None"], "methods", ["None"], ["", "def", "metric", "(", "self", ",", "linklist", ",", "i", ",", "j", ")", ":", "\n", "        ", "return", "self", ".", "dis", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.evaluateObjective": [[394, 412], ["numpy.nonzero", "zip", "range", "range", "numpy.shape", "linklist.append", "medical_GSEMO.GSEMO.sum_of_top", "range", "medical_GSEMO.GSEMO.metric"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.metric"], ["", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "g", "=", "0", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "linklist", ",", "size", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "metric", "(", "linklist", ",", "i", ",", "j", ")", "\n", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.GSEMO.Calucalate_true_value": [[414, 432], ["numpy.nonzero", "zip", "range", "range", "numpy.shape", "linklist.append", "medical_GSEMO.GSEMO.sum_of_top", "range", "medical_GSEMO.GSEMO.metric"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.metric"], ["", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "g", "=", "0", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "linklist", ",", "size", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "metric", "(", "linklist", ",", "i", ",", "j", ")", "\n", "\n", "", "", "res", "=", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.read_sparse_arff": [[17, 56], ["open", "open.read().split", "open.close", "enumerate", "eval", "col.extend", "data.extend", "label_indptr.append", "label_col.extend", "label_data.extend", "label_row.extend", "feature_indptr.append", "feature_col.extend", "feature_data.extend", "feature_row.extend", "open.read", "i.split", "f_data[].replace().split", "eval.keys", "eval.values", "len", "f_data[].split", "f_data[].replace", "range", "range", "len"], "function", ["None"], ["def", "read_sparse_arff", "(", "f_path", ",", "xml_path", ")", ":", "\n", "    ", "global", "feature_item", "\n", "f", "=", "open", "(", "f_path", ")", "\n", "f_data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'@data'", ")", "\n", "f", ".", "close", "(", ")", "\n", "column", "=", "[", "i", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "i", "in", "f_data", "[", "0", "]", ".", "split", "(", "'@attribute'", ")", "[", "1", ":", "]", "]", "\n", "label_row", ",", "label_col", ",", "label_data", ",", "label_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feature_row", ",", "feature_col", ",", "feature_data", ",", "feature_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "inil", "=", "0", "\n", "inil_label", "=", "0", "\n", "for", "l", "in", "enumerate", "(", "f_data", "[", "1", "]", ".", "replace", "(", "' '", ",", "':'", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "        ", "l_v_dict", "=", "eval", "(", "l", "[", "1", "]", ")", "\n", "col", ",", "data", "=", "[", "]", ",", "[", "]", "\n", "col", ".", "extend", "(", "l_v_dict", ".", "keys", "(", ")", ")", "\n", "data", ".", "extend", "(", "l_v_dict", ".", "values", "(", ")", ")", "\n", "index", "=", "0", "\n", "feature_num", "=", "0", "\n", "for", "item", "in", "col", ":", "\n", "            ", "if", "item", "<", "feature_item", ":", "\n", "                ", "index", "+=", "1", "\n", "feature_num", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "inil_label", "+=", "len", "(", "l_v_dict", ")", "-", "feature_num", "\n", "label_indptr", ".", "append", "(", "inil_label", ")", "\n", "label_col", ".", "extend", "(", "col", "[", "index", ":", "]", ")", "\n", "label_data", ".", "extend", "(", "data", "[", "index", ":", "]", ")", "\n", "label_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "l_v_dict", ")", "-", "feature_num", ")", "]", ")", "\n", "\n", "inil", "+=", "feature_num", "\n", "feature_indptr", ".", "append", "(", "inil", ")", "\n", "feature_col", ".", "extend", "(", "col", "[", "0", ":", "index", "]", ")", "\n", "feature_data", ".", "extend", "(", "data", "[", "0", ":", "index", "]", ")", "\n", "feature_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "feature_num", ")", "]", ")", "\n", "\n", "", "sparse_feature", "=", "(", "feature_data", ",", "feature_row", ",", "feature_col", ",", "feature_indptr", ")", "\n", "sparse_label", "=", "(", "label_data", ",", "label_row", ",", "label_col", ",", "label_indptr", ")", "\n", "\n", "return", "sparse_feature", ",", "sparse_label", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.NMI": [[57, 145], ["numpy.zeros", "zip", "len", "len", "medical_GSEMO.JointEntropy", "medical_GSEMO.DataEntropy", "medical_GSEMO.DataEntropy", "math.sqrt", "col_f.count", "col_l.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col_f.index", "col_l.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "NMI", "(", "feature", ",", "label", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "feature_item", "\n", "add", "=", "feature_item", "\n", "j", "=", "j", "+", "add", "\n", "global", "H_feature", ",", "H_label", ",", "H_feature_lable", "\n", "if", "(", "i", ",", "j", ")", "in", "H_feature_lable", ":", "\n", "        ", "je", "=", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before_f", "=", "0", "\n", "before_l", "=", "0", "\n", "indptr_f", "=", "feature", "[", "3", "]", "\n", "indptr_l", "=", "label", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "diffDataY", "=", "[", "]", "\n", "for", "(", "index_f", ",", "index_l", ")", "in", "zip", "(", "indptr_f", ",", "indptr_l", ")", ":", "\n", "\n", "            ", "data_f", "=", "feature", "[", "0", "]", "[", "before_f", ":", "index_f", "]", "\n", "col_f", "=", "feature", "[", "2", "]", "[", "before_f", ":", "index_f", "]", "\n", "before_f", "=", "index_f", "\n", "\n", "data_l", "=", "label", "[", "0", "]", "[", "before_l", ":", "index_l", "]", "\n", "col_l", "=", "label", "[", "2", "]", "[", "before_l", ":", "index_l", "]", "\n", "\n", "before_l", "=", "index_l", "\n", "i_exit", "=", "col_f", ".", "count", "(", "i", ")", "# i\u662ffeature", "\n", "j_exit", "=", "col_l", ".", "count", "(", "j", ")", "# j\u662flabel", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data_f", "[", "col_f", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data_l", "[", "col_l", ".", "index", "(", "j", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_label", ":", "\n", "        ", "HY", "=", "H_label", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_label", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "(", "HX", "==", "0.0", "or", "HY", "==", "0.0", ")", ":", "\n", "        ", "return", "0", "\n", "", "mi", "=", "HX", "+", "HY", "-", "je", "\n", "res", "=", "mi", "/", "math", ".", "sqrt", "(", "HX", "*", "HY", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.JointEntropy": [[146, 154], ["numpy.shape", "range", "range", "math.log2"], "function", ["None"], ["", "def", "JointEntropy", "(", "distributionXY", ")", ":", "\n", "    ", "je", "=", "0", "\n", "[", "lenY", ",", "lenX", "]", "=", "np", ".", "shape", "(", "distributionXY", ")", "\n", "for", "i", "in", "range", "(", "lenY", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lenX", ")", ":", "\n", "            ", "if", "(", "distributionXY", "[", "i", "]", "[", "j", "]", "!=", "0", ")", ":", "\n", "                ", "je", "=", "je", "-", "distributionXY", "[", "i", "]", "[", "j", "]", "*", "math", ".", "log2", "(", "distributionXY", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "return", "je", "\n", "", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.DataEntropy": [[154, 164], ["len", "p.append", "math.log2"], "function", ["None"], ["", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n", "    ", "diffDataArrayLen", "=", "len", "(", "diffDataNum", ")", "\n", "entropyVal", "=", "0", ";", "\n", "p", "=", "[", "]", "\n", "for", "i", "in", "diffDataNum", ":", "\n", "        ", "proptyVal", "=", "diffDataNum", "[", "i", "]", "/", "dataArrayLen", "\n", "p", ".", "append", "(", "proptyVal", ")", "\n", "if", "(", "proptyVal", "!=", "0", ")", ":", "\n", "            ", "entropyVal", "=", "entropyVal", "-", "proptyVal", "*", "math", ".", "log2", "(", "proptyVal", ")", "\n", "", "", "return", "entropyVal", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.distance": [[165, 246], ["numpy.zeros", "len", "len", "medical_GSEMO.JointEntropy", "medical_GSEMO.DataEntropy", "medical_GSEMO.DataEntropy", "col.count", "col.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col.index", "col.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "distance", "(", "feature", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "H_feature", ",", "H_featureS", "\n", "\n", "if", "(", "i", ",", "j", ")", "in", "H_featureS", ":", "\n", "        ", "je", "=", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before", "=", "0", "\n", "indptr", "=", "feature", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataY", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "for", "index", "in", "indptr", ":", "\n", "            ", "data", "=", "feature", "[", "0", "]", "[", "before", ":", "index", "]", "\n", "# row = feature[1][before:index]", "\n", "col", "=", "feature", "[", "2", "]", "[", "before", ":", "index", "]", "\n", "before", "=", "index", "\n", "\n", "i_exit", "=", "col", ".", "count", "(", "i", ")", "\n", "j_exit", "=", "col", ".", "count", "(", "j", ")", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data", "[", "col", ".", "index", "(", "i", ")", "]", "\n", "# distribution_x=diffData1.index(data_i)", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "# distribution_x=diffDataCount_X-1", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data", "[", "col", ".", "index", "(", "j", ")", "]", "\n", "# distribution_y=diffData2.index(data_j)", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "# distribution_y=diffDataCount_Y-1", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_feature", ":", "\n", "        ", "HY", "=", "H_feature", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_feature", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "je", "==", "0.0", ":", "\n", "        ", "return", "1", "\n", "", "return", "2", "-", "(", "HX", "+", "HY", ")", "/", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.readNMI": [[247, 262], ["open", "numpy.zeros", "open.read", "f.read.split", "line.split", "range", "float", "len"], "function", ["None"], ["", "def", "readNMI", "(", "address", ",", "row", ",", "col", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "nmi", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "nmi", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "j", "=", "0", "\n", "", "return", "nmi", "\n", "", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_GSEMO.readDis": [[262, 280], ["open", "numpy.zeros", "open.read", "f.read.split", "range", "line.split", "range", "range", "float", "len"], "function", ["None"], ["", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "dis", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "j", "=", "i", "+", "1", "\n", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "dis", "[", "j", "]", "[", "i", "]", "\n", "", "", "return", "dis", "\n", "", "class", "GSEMO", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.read_sparse_arff": [[18, 57], ["open", "open.read().split", "open.close", "enumerate", "eval", "col.extend", "data.extend", "label_indptr.append", "label_col.extend", "label_data.extend", "label_row.extend", "feature_indptr.append", "feature_col.extend", "feature_data.extend", "feature_row.extend", "open.read", "i.split", "f_data[].replace().split", "eval.keys", "eval.values", "len", "f_data[].split", "f_data[].replace", "range", "range", "len"], "function", ["None"], ["def", "read_sparse_arff", "(", "f_path", ",", "xml_path", ")", ":", "\n", "    ", "global", "feature_item", "\n", "f", "=", "open", "(", "f_path", ")", "\n", "f_data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'@data'", ")", "\n", "f", ".", "close", "(", ")", "\n", "column", "=", "[", "i", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "i", "in", "f_data", "[", "0", "]", ".", "split", "(", "'@attribute'", ")", "[", "1", ":", "]", "]", "\n", "label_row", ",", "label_col", ",", "label_data", ",", "label_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feature_row", ",", "feature_col", ",", "feature_data", ",", "feature_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "inil", "=", "0", "\n", "inil_label", "=", "0", "\n", "for", "l", "in", "enumerate", "(", "f_data", "[", "1", "]", ".", "replace", "(", "' '", ",", "':'", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "        ", "l_v_dict", "=", "eval", "(", "l", "[", "1", "]", ")", "\n", "col", ",", "data", "=", "[", "]", ",", "[", "]", "\n", "col", ".", "extend", "(", "l_v_dict", ".", "keys", "(", ")", ")", "\n", "data", ".", "extend", "(", "l_v_dict", ".", "values", "(", ")", ")", "\n", "index", "=", "0", "\n", "feature_num", "=", "0", "\n", "for", "item", "in", "col", ":", "\n", "            ", "if", "item", "<", "feature_item", ":", "\n", "                ", "index", "+=", "1", "\n", "feature_num", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "inil_label", "+=", "len", "(", "l_v_dict", ")", "-", "feature_num", "\n", "label_indptr", ".", "append", "(", "inil_label", ")", "\n", "label_col", ".", "extend", "(", "col", "[", "index", ":", "]", ")", "\n", "label_data", ".", "extend", "(", "data", "[", "index", ":", "]", ")", "\n", "label_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "l_v_dict", ")", "-", "feature_num", ")", "]", ")", "\n", "\n", "inil", "+=", "feature_num", "\n", "feature_indptr", ".", "append", "(", "inil", ")", "\n", "feature_col", ".", "extend", "(", "col", "[", "0", ":", "index", "]", ")", "\n", "feature_data", ".", "extend", "(", "data", "[", "0", ":", "index", "]", ")", "\n", "feature_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "feature_num", ")", "]", ")", "\n", "\n", "", "sparse_feature", "=", "(", "feature_data", ",", "feature_row", ",", "feature_col", ",", "feature_indptr", ")", "\n", "sparse_label", "=", "(", "label_data", ",", "label_row", ",", "label_col", ",", "label_indptr", ")", "\n", "\n", "return", "sparse_feature", ",", "sparse_label", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.JointEntropy": [[58, 66], ["numpy.shape", "range", "range", "math.log2"], "function", ["None"], ["", "def", "JointEntropy", "(", "distributionXY", ")", ":", "\n", "    ", "je", "=", "0", "\n", "[", "lenY", ",", "lenX", "]", "=", "np", ".", "shape", "(", "distributionXY", ")", "\n", "for", "i", "in", "range", "(", "lenY", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lenX", ")", ":", "\n", "            ", "if", "(", "distributionXY", "[", "i", "]", "[", "j", "]", "!=", "0", ")", ":", "\n", "                ", "je", "=", "je", "-", "distributionXY", "[", "i", "]", "[", "j", "]", "*", "math", ".", "log2", "(", "distributionXY", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "return", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.OutputNMI": [[67, 80], ["print", "range", "log.close", "range", "log.write", "print", "enron_NMI.NMI", "float", "print", "log.write", "log.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.NMI"], ["", "def", "OutputNMI", "(", "feature", ",", "label", ",", "log", ")", ":", "\n", "    ", "global", "feature_item", ",", "label_num", "\n", "print", "(", "\"computing and saving NMI(feature,lable):\"", ")", "\n", "for", "i", "in", "range", "(", "feature_item", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "label_num", ")", ":", "\n", "            ", "print", "(", "\"i = \"", "+", "str", "(", "i", ")", "+", "\" l = \"", "+", "str", "(", "l", ")", ")", "\n", "nmi", "=", "NMI", "(", "feature", ",", "label", ",", "i", ",", "l", ",", "args", ".", "dim", ")", "\n", "nmi", "=", "float", "(", "'%.5f'", "%", "nmi", ")", "\n", "print", "(", "nmi", ")", "\n", "log", ".", "write", "(", "str", "(", "nmi", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.DataEntropy": [[81, 91], ["len", "p.append", "math.log2"], "function", ["None"], ["", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n", "    ", "diffDataArrayLen", "=", "len", "(", "diffDataNum", ")", "\n", "entropyVal", "=", "0", ";", "\n", "p", "=", "[", "]", "\n", "for", "i", "in", "diffDataNum", ":", "\n", "        ", "proptyVal", "=", "diffDataNum", "[", "i", "]", "/", "dataArrayLen", "\n", "p", ".", "append", "(", "proptyVal", ")", "\n", "if", "(", "proptyVal", "!=", "0", ")", ":", "\n", "            ", "entropyVal", "=", "entropyVal", "-", "proptyVal", "*", "math", ".", "log2", "(", "proptyVal", ")", "\n", "", "", "return", "entropyVal", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.NMI": [[92, 180], ["numpy.zeros", "zip", "len", "len", "enron_NMI.JointEntropy", "enron_NMI.DataEntropy", "enron_NMI.DataEntropy", "math.sqrt", "col_f.count", "col_l.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col_f.index", "col_l.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "NMI", "(", "feature", ",", "label", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "feature_item", "\n", "add", "=", "feature_item", "\n", "j", "=", "j", "+", "add", "\n", "global", "H_feature", ",", "H_label", ",", "H_feature_lable", "\n", "if", "(", "i", ",", "j", ")", "in", "H_feature_lable", ":", "\n", "        ", "je", "=", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before_f", "=", "0", "\n", "before_l", "=", "0", "\n", "indptr_f", "=", "feature", "[", "3", "]", "\n", "indptr_l", "=", "label", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "diffDataY", "=", "[", "]", "\n", "for", "(", "index_f", ",", "index_l", ")", "in", "zip", "(", "indptr_f", ",", "indptr_l", ")", ":", "\n", "\n", "            ", "data_f", "=", "feature", "[", "0", "]", "[", "before_f", ":", "index_f", "]", "\n", "col_f", "=", "feature", "[", "2", "]", "[", "before_f", ":", "index_f", "]", "\n", "before_f", "=", "index_f", "\n", "\n", "data_l", "=", "label", "[", "0", "]", "[", "before_l", ":", "index_l", "]", "\n", "col_l", "=", "label", "[", "2", "]", "[", "before_l", ":", "index_l", "]", "\n", "\n", "before_l", "=", "index_l", "\n", "i_exit", "=", "col_f", ".", "count", "(", "i", ")", "#feature i", "\n", "j_exit", "=", "col_l", ".", "count", "(", "j", ")", "#label j", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data_f", "[", "col_f", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data_l", "[", "col_l", ".", "index", "(", "j", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_label", ":", "\n", "        ", "HY", "=", "H_label", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_label", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "(", "HX", "==", "0.0", "or", "HY", "==", "0.0", ")", ":", "\n", "        ", "return", "0", "\n", "", "mi", "=", "HX", "+", "HY", "-", "je", "\n", "res", "=", "mi", "/", "math", ".", "sqrt", "(", "HX", "*", "HY", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_NMI.operate": [[181, 193], ["enron_NMI.read_sparse_arff", "enron_NMI.read_sparse_arff", "open", "enron_NMI.OutputNMI", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.OutputNMI"], ["", "def", "operate", "(", "args", ")", ":", "\n", "    ", "feature", ",", "label", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "feature", ",", "lable", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/NMI.txt\"", ",", "\"w\"", ")", "\n", "OutputNMI", "(", "feature", ",", "lable", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.read_sparse_arff": [[11, 51], ["open", "open.read().split", "open.close", "enumerate", "eval", "col.extend", "data.extend", "label_indptr.append", "label_col.extend", "label_data.extend", "label_row.extend", "feature_indptr.append", "feature_col.extend", "feature_data.extend", "feature_row.extend", "open.read", "i.split", "f_data[].replace().split", "eval.keys", "eval.values", "len", "f_data[].split", "f_data[].replace", "range", "range", "len"], "function", ["None"], ["def", "read_sparse_arff", "(", "f_path", ",", "xml_path", ")", ":", "\n", "    ", "global", "feature_item", "\n", "#read data", "\n", "f", "=", "open", "(", "f_path", ")", "\n", "f_data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'@data'", ")", "\n", "f", ".", "close", "(", ")", "\n", "column", "=", "[", "i", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "i", "in", "f_data", "[", "0", "]", ".", "split", "(", "'@attribute'", ")", "[", "1", ":", "]", "]", "\n", "label_row", ",", "label_col", ",", "label_data", ",", "label_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feature_row", ",", "feature_col", ",", "feature_data", ",", "feature_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "inil", "=", "0", "\n", "inil_label", "=", "0", "\n", "for", "l", "in", "enumerate", "(", "f_data", "[", "1", "]", ".", "replace", "(", "' '", ",", "':'", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "        ", "l_v_dict", "=", "eval", "(", "l", "[", "1", "]", ")", "\n", "col", ",", "data", "=", "[", "]", ",", "[", "]", "\n", "col", ".", "extend", "(", "l_v_dict", ".", "keys", "(", ")", ")", "\n", "data", ".", "extend", "(", "l_v_dict", ".", "values", "(", ")", ")", "\n", "index", "=", "0", "\n", "feature_num", "=", "0", "\n", "for", "item", "in", "col", ":", "\n", "            ", "if", "item", "<", "feature_item", ":", "\n", "                ", "index", "+=", "1", "\n", "feature_num", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "inil_label", "+=", "len", "(", "l_v_dict", ")", "-", "feature_num", "\n", "label_indptr", ".", "append", "(", "inil_label", ")", "\n", "label_col", ".", "extend", "(", "col", "[", "index", ":", "]", ")", "\n", "label_data", ".", "extend", "(", "data", "[", "index", ":", "]", ")", "\n", "label_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "l_v_dict", ")", "-", "feature_num", ")", "]", ")", "\n", "\n", "inil", "+=", "feature_num", "\n", "feature_indptr", ".", "append", "(", "inil", ")", "\n", "feature_col", ".", "extend", "(", "col", "[", "0", ":", "index", "]", ")", "\n", "feature_data", ".", "extend", "(", "data", "[", "0", ":", "index", "]", ")", "\n", "feature_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "feature_num", ")", "]", ")", "\n", "\n", "", "sparse_feature", "=", "(", "feature_data", ",", "feature_row", ",", "feature_col", ",", "feature_indptr", ")", "\n", "sparse_label", "=", "(", "label_data", ",", "label_row", ",", "label_col", ",", "label_indptr", ")", "\n", "\n", "return", "sparse_feature", ",", "sparse_label", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.JointEntropy": [[52, 60], ["numpy.shape", "range", "range", "math.log2"], "function", ["None"], ["", "def", "JointEntropy", "(", "distributionXY", ")", ":", "\n", "    ", "je", "=", "0", "\n", "[", "lenY", ",", "lenX", "]", "=", "np", ".", "shape", "(", "distributionXY", ")", "\n", "for", "i", "in", "range", "(", "lenY", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lenX", ")", ":", "\n", "            ", "if", "(", "distributionXY", "[", "i", "]", "[", "j", "]", "!=", "0", ")", ":", "\n", "                ", "je", "=", "je", "-", "distributionXY", "[", "i", "]", "[", "j", "]", "*", "math", ".", "log2", "(", "distributionXY", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "return", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.OutputDis": [[61, 74], ["print", "range", "log.close", "range", "log.write", "print", "enron_distance.distance", "float", "print", "log.write", "log.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.distance"], ["", "def", "OutputDis", "(", "feature", ",", "log", ")", ":", "\n", "    ", "print", "(", "\"computing and saving dis(feature,feature):\"", ")", "\n", "global", "feature_item", "\n", "for", "i", "in", "range", "(", "feature_item", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "feature_item", ")", ":", "\n", "            ", "print", "(", "\"i=\"", "+", "str", "(", "i", ")", "+", "\" j=\"", "+", "str", "(", "j", ")", ")", "\n", "dis", "=", "distance", "(", "feature", ",", "i", ",", "j", ",", "args", ".", "dim", ")", "\n", "dis", "=", "float", "(", "'%.5f'", "%", "dis", ")", "\n", "print", "(", "dis", ")", "\n", "log", ".", "write", "(", "str", "(", "dis", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.distance": [[75, 150], ["numpy.zeros", "len", "len", "enron_distance.JointEntropy", "enron_distance.DataEntropy", "enron_distance.DataEntropy", "col.count", "col.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col.index", "col.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "distance", "(", "feature", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "H_feature", ",", "H_featureS", "\n", "if", "(", "i", ",", "j", ")", "in", "H_featureS", ":", "\n", "        ", "je", "=", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before", "=", "0", "\n", "indptr", "=", "feature", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataY", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "for", "index", "in", "indptr", ":", "\n", "            ", "data", "=", "feature", "[", "0", "]", "[", "before", ":", "index", "]", "\n", "col", "=", "feature", "[", "2", "]", "[", "before", ":", "index", "]", "\n", "before", "=", "index", "\n", "\n", "i_exit", "=", "col", ".", "count", "(", "i", ")", "\n", "j_exit", "=", "col", ".", "count", "(", "j", ")", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data", "[", "col", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data", "[", "col", ".", "index", "(", "j", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_feature", ":", "\n", "        ", "HY", "=", "H_feature", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_feature", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "je", "==", "0.0", ":", "\n", "        ", "return", "1", "\n", "", "return", "2", "-", "(", "HX", "+", "HY", ")", "/", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.DataEntropy": [[151, 161], ["len", "p.append", "math.log2"], "function", ["None"], ["", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n", "    ", "diffDataArrayLen", "=", "len", "(", "diffDataNum", ")", "\n", "entropyVal", "=", "0", ";", "\n", "p", "=", "[", "]", "\n", "for", "i", "in", "diffDataNum", ":", "\n", "        ", "proptyVal", "=", "diffDataNum", "[", "i", "]", "/", "dataArrayLen", "\n", "p", ".", "append", "(", "proptyVal", ")", "\n", "if", "(", "proptyVal", "!=", "0", ")", ":", "\n", "            ", "entropyVal", "=", "entropyVal", "-", "proptyVal", "*", "math", ".", "log2", "(", "proptyVal", ")", "\n", "", "", "return", "entropyVal", "\n", "", "def", "operate", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_distance.operate": [[161, 174], ["enron_distance.read_sparse_arff", "enron_distance.read_sparse_arff", "open", "enron_distance.OutputDis", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.OutputDis"], ["", "def", "operate", "(", "args", ")", ":", "\n", "#compute the distance data", "\n", "    ", "feature", ",", "label", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "feature", ",", "lable", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/dis_.txt\"", ",", "\"w\"", ")", "\n", "OutputDis", "(", "feature", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.__init__": [[39, 48], ["enron_greedy_ls.readNMI", "enron_greedy_ls.readDis"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readNMI", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readDis"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "self", ".", "top", "=", "kwargs", "[", "\"top\"", "]", "\n", "self", ".", "l", "=", "kwargs", "[", "\"l\"", "]", "\n", "\n", "self", ".", "NMI", "=", "readNMI", "(", "kwargs", "[", "\"NMI\"", "]", ",", "kwargs", "[", "\"n\"", "]", ",", "kwargs", "[", "\"l\"", "]", ")", "\n", "self", ".", "dis", "=", "readDis", "(", "kwargs", "[", "\"dis\"", "]", ",", "kwargs", "[", "\"n\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.sum_of_top": [[50, 60], ["len", "range", "values.sort", "range", "values.append", "min"], "methods", ["None"], ["", "def", "sum_of_top", "(", "self", ",", "new", ",", "l", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "size", "=", "len", "(", "new", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "values", ".", "append", "(", "self", ".", "NMI", "[", "i", "]", "[", "l", "]", ")", "\n", "", "values", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "top", ",", "size", ")", ")", ":", "\n", "            ", "value", "+=", "values", "[", "i", "]", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.evaluateObjective": [[61, 73], ["range", "range", "enron_greedy_ls.Problem.sum_of_top", "len"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top"], ["", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "g_old", "=", "temp", "[", "1", "]", "\n", "g_new", "=", "0", "\n", "new", "=", "temp", "[", "0", "]", "+", "[", "new_item", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g_new", "+=", "self", ".", "sum_of_top", "(", "new", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "temp", "[", "0", "]", ")", ")", ":", "\n", "             ", "div", "+=", "self", ".", "dis", "[", "temp", "[", "0", "]", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "(", "g_new", "-", "g_old", ")", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", ",", "g_new", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.select_best_item": [[74, 84], ["numpy.argmax", "print", "enron_greedy_ls.Problem.evaluateObjective", "str", "items.pop", "str", "len"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "]", "\n", "gs", "=", "[", "]", "\n", "for", "s", "in", "items", ":", "\n", "            ", "print", "(", "\"len:\"", "+", "str", "(", "len", "(", "res", "[", "0", "]", ")", ")", "+", "\" new item:\"", "+", "str", "(", "s", ")", ")", "\n", "res1", ",", "g", "=", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "\n", "evaluations", "+=", "[", "res1", "]", "\n", "gs", "+=", "[", "g", "]", "\n", "", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "(", "res", "[", "0", "]", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "gs", "[", "index", "]", ")", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.greedy": [[85, 96], ["range", "items.append", "len", "print", "enron_greedy_ls.Problem.select_best_item", "str", "len", "str"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "(", "[", "]", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", "[", "0", "]", ")", "<", "self", ".", "k", ":", "\n", "            ", "print", "(", "\"constraint=\"", "+", "str", "(", "self", ".", "k", ")", "+", "\" len(res)=\"", "+", "str", "(", "len", "(", "res", "[", "0", "]", ")", ")", ")", "\n", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.Calculate_true_value": [[97, 111], ["len", "range", "range", "enron_greedy_ls.Problem.sum_of_top", "range"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top"], ["", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", "[", "0", "]", ")", "\n", "g", "=", "0", "\n", "new", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "new", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "dis", "[", "res", "[", "0", "]", "[", "i", "]", "]", "[", "res", "[", "0", "]", "[", "j", "]", "]", "\n", "", "", "res", "=", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.exchange": [[112, 133], ["copy.deepcopy", "enron_greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "temp_solution[].pop", "temp_solution[].append", "enron_greedy_ls.Problem.Calculate_true_value", "temp_solution[].index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", "[", "0", "]", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", "[", "0", "]", ".", "pop", "(", "temp_solution", "[", "0", "]", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", "[", "0", "]", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.Problem.LocalSearch": [[134, 150], ["range", "items.append", "items.pop", "enron_greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", "[", "0", "]", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "# start with greedy solution", "\n", "", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# delete exchange_item[0] from V\\X", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "# add exchang_item[1] in V\\X", "\n", "", "", "return", "res", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.readNMI": [[5, 20], ["open", "numpy.zeros", "open.read", "f.read.split", "line.split", "range", "float", "len"], "function", ["None"], ["def", "readNMI", "(", "address", ",", "row", ",", "col", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "nmi", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "nmi", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "j", "=", "0", "\n", "", "return", "nmi", "\n", "", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.readDis": [[20, 38], ["open", "numpy.zeros", "open.read", "f.read.split", "range", "line.split", "range", "range", "float", "len"], "function", ["None"], ["", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "dis", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "j", "=", "i", "+", "1", "\n", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "dis", "[", "j", "]", "[", "i", "]", "\n", "", "", "return", "dis", "\n", "", "class", "Problem", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.OutputResult": [[151, 159], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], ["", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_greedy_ls.run_experiments": [[161, 181], ["enron_greedy_ls.Problem", "print", "enron_greedy_ls.Problem.greedy", "enron_greedy_ls.Problem.Calculate_true_value", "print", "open", "enron_greedy_ls.OutputResult", "print", "enron_greedy_ls.Problem.LocalSearch", "print", "open", "enron_greedy_ls.OutputResult", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], ["", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "problem", "=", "Problem", "(", "NMI", "=", "args", ".", "NMI", ",", "dis", "=", "args", ".", "dis", ",", "n", "=", "args", ".", "n_items", ",", "k", "=", "args", ".", "constraint", ",", "mylambda", "=", "args", ".", "mylambda", ",", "\n", "top", "=", "args", ".", "top", ",", "l", "=", "args", ".", "l", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res_greedy", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res_greedy", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/Result_greedy_\"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res_greedy", "[", "0", "]", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res_ls", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res_greedy", ")", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/Result_LS_\"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res_ls", "[", "0", "]", ",", "value", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.__init__": [[39, 49], ["medical_greedy_ls.readNMI", "medical_greedy_ls.readDis"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readNMI", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readDis"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "self", ".", "top", "=", "kwargs", "[", "\"top\"", "]", "\n", "self", ".", "l", "=", "kwargs", "[", "\"l\"", "]", "\n", "\n", "\n", "self", ".", "NMI", "=", "readNMI", "(", "kwargs", "[", "\"NMI\"", "]", ",", "kwargs", "[", "\"n\"", "]", ",", "kwargs", "[", "\"l\"", "]", ")", "\n", "self", ".", "dis", "=", "readDis", "(", "kwargs", "[", "\"dis\"", "]", ",", "kwargs", "[", "\"n\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.sum_of_top": [[51, 61], ["len", "range", "values.sort", "range", "values.append", "min"], "methods", ["None"], ["", "def", "sum_of_top", "(", "self", ",", "new", ",", "l", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "size", "=", "len", "(", "new", ")", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "values", ".", "append", "(", "self", ".", "NMI", "[", "i", "]", "[", "l", "]", ")", "\n", "", "values", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "top", ",", "size", ")", ")", ":", "\n", "            ", "value", "+=", "values", "[", "i", "]", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.evaluateObjective": [[62, 74], ["range", "range", "medical_greedy_ls.Problem.sum_of_top", "len"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top"], ["", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "g_old", "=", "temp", "[", "1", "]", "\n", "g_new", "=", "0", "\n", "new", "=", "temp", "[", "0", "]", "+", "[", "new_item", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g_new", "+=", "self", ".", "sum_of_top", "(", "new", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "temp", "[", "0", "]", ")", ")", ":", "\n", "             ", "div", "+=", "self", ".", "dis", "[", "temp", "[", "0", "]", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "(", "g_new", "-", "g_old", ")", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", ",", "g_new", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.select_best_item": [[75, 85], ["numpy.argmax", "print", "medical_greedy_ls.Problem.evaluateObjective", "str", "items.pop", "str", "len"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "]", "\n", "gs", "=", "[", "]", "\n", "for", "s", "in", "items", ":", "\n", "            ", "print", "(", "\"len:\"", "+", "str", "(", "len", "(", "res", "[", "0", "]", ")", ")", "+", "\" new item:\"", "+", "str", "(", "s", ")", ")", "\n", "res1", ",", "g", "=", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "\n", "evaluations", "+=", "[", "res1", "]", "\n", "gs", "+=", "[", "g", "]", "\n", "", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "(", "res", "[", "0", "]", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "gs", "[", "index", "]", ")", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.greedy": [[86, 97], ["range", "items.append", "len", "print", "medical_greedy_ls.Problem.select_best_item", "str", "len", "str"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "(", "[", "]", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", "[", "0", "]", ")", "<", "self", ".", "k", ":", "\n", "            ", "print", "(", "\"constraint=\"", "+", "str", "(", "self", ".", "k", ")", "+", "\" len(res)=\"", "+", "str", "(", "len", "(", "res", "[", "0", "]", ")", ")", ")", "\n", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.Calculate_true_value": [[98, 111], ["len", "range", "range", "medical_greedy_ls.Problem.sum_of_top", "range"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top"], ["", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", "[", "0", "]", ")", "\n", "g", "=", "0", "\n", "new", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "new", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "dis", "[", "res", "[", "0", "]", "[", "i", "]", "]", "[", "res", "[", "0", "]", "[", "j", "]", "]", "\n", "", "", "v", "=", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.exchange": [[112, 133], ["copy.deepcopy", "medical_greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "temp_solution[].pop", "temp_solution[].append", "medical_greedy_ls.Problem.Calculate_true_value", "temp_solution[].index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", "[", "0", "]", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", "[", "0", "]", ".", "pop", "(", "temp_solution", "[", "0", "]", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", "[", "0", "]", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.Problem.LocalSearch": [[134, 152], ["range", "items.append", "items.pop", "medical_greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", "[", "0", "]", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# exchange_item[0]\u5143\u7d20\u52a0\u8fdb\u4e86\u7ed3\u679c\u4e2d\uff0c\u9700\u8981\u4eceitem\u4e2d\u5220\u9664", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "\n", "\n", "", "", "return", "res", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.readNMI": [[5, 20], ["open", "numpy.zeros", "open.read", "f.read.split", "line.split", "range", "float", "len"], "function", ["None"], ["def", "readNMI", "(", "address", ",", "row", ",", "col", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "nmi", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "nmi", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "j", "=", "0", "\n", "", "return", "nmi", "\n", "", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.readDis": [[20, 38], ["open", "numpy.zeros", "open.read", "f.read.split", "range", "line.split", "range", "range", "float", "len"], "function", ["None"], ["", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "dis", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "j", "=", "i", "+", "1", "\n", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "dis", "[", "j", "]", "[", "i", "]", "\n", "", "", "return", "dis", "\n", "", "class", "Problem", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.OutputResult": [[153, 161], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], ["", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_greedy_ls.run_experiments": [[164, 184], ["medical_greedy_ls.Problem", "print", "medical_greedy_ls.Problem.greedy", "medical_greedy_ls.Problem.Calculate_true_value", "print", "open", "medical_greedy_ls.OutputResult", "print", "medical_greedy_ls.Problem.LocalSearch", "print", "open", "medical_greedy_ls.OutputResult", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], ["", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "problem", "=", "Problem", "(", "NMI", "=", "args", ".", "NMI", ",", "dis", "=", "args", ".", "dis", ",", "n", "=", "args", ".", "n_items", ",", "k", "=", "args", ".", "constraint", ",", "mylambda", "=", "args", ".", "mylambda", ",", "\n", "top", "=", "args", ".", "top", ",", "l", "=", "args", ".", "l", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res_greedy", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res_greedy", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/Result_greedy_\"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res_greedy", "[", "0", "]", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res_ls", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res_greedy", ")", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/Result_LS_\"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res_ls", "[", "0", "]", ",", "value", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_main.OutputResult": [[7, 26], ["log.close", "p.Calucalate_true_value", "log.write", "log.write", "numpy.nonzero", "zip", "log.write", "str", "linklist.append", "log.write", "log.write", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["def", "OutputResult", "(", "p", ",", "res", ",", "log", ")", ":", "\n", "    ", "final_value", "=", "0", "\n", "for", "info", "in", "res", ":", "\n", "        ", "final_value", "=", "p", ".", "Calucalate_true_value", "(", "info", ")", "\n", "log", ".", "write", "(", "str", "(", "final_value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "info", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "return", "final_value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_main.OutputAvg": [[27, 30], ["log.write", "log.close", "str", "numpy.mean"], "function", ["None"], ["", "def", "OutputAvg", "(", "all_value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_value", ")", ")", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_main.run_experiments": [[32, 41], ["medical_GSEMO.GSEMO", "range", "str", "os.path.exists", "os.makedirs", "prd.GSEMO.doPORD", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO"], ["", "def", "run_experiments", "(", "args", ")", ":", "\n", "        ", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "prd", ".", "GSEMO", "(", "NMI", "=", "args", ".", "NMI", ",", "dis", "=", "args", ".", "dis", ",", "n", "=", "args", ".", "n_items", ",", "k", "=", "args", ".", "constraint", ",", "mylambda", "=", "args", ".", "mylambda", ",", "\n", "top", "=", "args", ".", "top", ",", "l", "=", "args", ".", "l", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "times", ")", ":", "\n", "            ", "path", "=", "save_address", "+", "\"/Result_\"", "+", "str", "(", "time", ".", "time", "(", ")", ")", "+", "\".txt\"", "\n", "result", "=", "problem", ".", "doPORD", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_main.OutputResult": [[9, 28], ["log.close", "p.Calucalate_true_value", "log.write", "log.write", "numpy.nonzero", "zip", "log.write", "str", "linklist.append", "log.write", "log.write", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["def", "OutputResult", "(", "p", ",", "res", ",", "log", ")", ":", "\n", "    ", "final_value", "=", "0", "\n", "for", "info", "in", "res", ":", "\n", "        ", "final_value", "=", "p", ".", "Calucalate_true_value", "(", "info", ")", "\n", "log", ".", "write", "(", "str", "(", "final_value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "info", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "return", "final_value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_main.OutputAvg": [[29, 32], ["log.write", "log.close", "str", "numpy.mean"], "function", ["None"], ["", "def", "OutputAvg", "(", "all_value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_value", ")", ")", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_main.run_experiments": [[34, 43], ["enron_GSEMO.GSEMO", "range", "str", "os.path.exists", "os.makedirs", "prd.GSEMO.doPORD", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO"], ["", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "prd", ".", "GSEMO", "(", "NMI", "=", "args", ".", "NMI", ",", "dis", "=", "args", ".", "dis", ",", "n", "=", "args", ".", "n_items", ",", "k", "=", "args", ".", "constraint", ",", "mylambda", "=", "args", ".", "mylambda", ",", "\n", "top", "=", "args", ".", "top", ",", "l", "=", "args", ".", "l", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "times", ")", ":", "\n", "        ", "path", "=", "save_address", "+", "\"/Result_\"", "+", "str", "(", "time", ".", "time", "(", ")", ")", "+", "\".txt\"", "\n", "result", "=", "problem", ".", "doPORD", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.read_sparse_arff": [[14, 53], ["open", "open.read().split", "open.close", "enumerate", "eval", "col.extend", "data.extend", "label_indptr.append", "label_col.extend", "label_data.extend", "label_row.extend", "feature_indptr.append", "feature_col.extend", "feature_data.extend", "feature_row.extend", "open.read", "i.split", "f_data[].replace().split", "eval.keys", "eval.values", "len", "f_data[].split", "f_data[].replace", "range", "range", "len"], "function", ["None"], ["def", "read_sparse_arff", "(", "f_path", ",", "xml_path", ")", ":", "\n", "    ", "global", "feature_item", "\n", "f", "=", "open", "(", "f_path", ")", "\n", "f_data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'@data'", ")", "\n", "f", ".", "close", "(", ")", "\n", "column", "=", "[", "i", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "i", "in", "f_data", "[", "0", "]", ".", "split", "(", "'@attribute'", ")", "[", "1", ":", "]", "]", "\n", "label_row", ",", "label_col", ",", "label_data", ",", "label_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feature_row", ",", "feature_col", ",", "feature_data", ",", "feature_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "inil", "=", "0", "\n", "inil_label", "=", "0", "\n", "for", "l", "in", "enumerate", "(", "f_data", "[", "1", "]", ".", "replace", "(", "' '", ",", "':'", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "        ", "l_v_dict", "=", "eval", "(", "l", "[", "1", "]", ")", "\n", "col", ",", "data", "=", "[", "]", ",", "[", "]", "\n", "col", ".", "extend", "(", "l_v_dict", ".", "keys", "(", ")", ")", "\n", "data", ".", "extend", "(", "l_v_dict", ".", "values", "(", ")", ")", "\n", "index", "=", "0", "\n", "feature_num", "=", "0", "\n", "for", "item", "in", "col", ":", "\n", "            ", "if", "item", "<", "feature_item", ":", "\n", "                ", "index", "+=", "1", "\n", "feature_num", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "inil_label", "+=", "len", "(", "l_v_dict", ")", "-", "feature_num", "\n", "label_indptr", ".", "append", "(", "inil_label", ")", "\n", "label_col", ".", "extend", "(", "col", "[", "index", ":", "]", ")", "\n", "label_data", ".", "extend", "(", "data", "[", "index", ":", "]", ")", "\n", "label_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "l_v_dict", ")", "-", "feature_num", ")", "]", ")", "\n", "\n", "inil", "+=", "feature_num", "\n", "feature_indptr", ".", "append", "(", "inil", ")", "\n", "feature_col", ".", "extend", "(", "col", "[", "0", ":", "index", "]", ")", "\n", "feature_data", ".", "extend", "(", "data", "[", "0", ":", "index", "]", ")", "\n", "feature_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "feature_num", ")", "]", ")", "\n", "\n", "", "sparse_feature", "=", "(", "feature_data", ",", "feature_row", ",", "feature_col", ",", "feature_indptr", ")", "\n", "sparse_label", "=", "(", "label_data", ",", "label_row", ",", "label_col", ",", "label_indptr", ")", "\n", "\n", "return", "sparse_feature", ",", "sparse_label", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.JointEntropy": [[54, 62], ["numpy.shape", "range", "range", "math.log2"], "function", ["None"], ["", "def", "JointEntropy", "(", "distributionXY", ")", ":", "\n", "    ", "je", "=", "0", "\n", "[", "lenY", ",", "lenX", "]", "=", "np", ".", "shape", "(", "distributionXY", ")", "\n", "for", "i", "in", "range", "(", "lenY", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lenX", ")", ":", "\n", "            ", "if", "(", "distributionXY", "[", "i", "]", "[", "j", "]", "!=", "0", ")", ":", "\n", "                ", "je", "=", "je", "-", "distributionXY", "[", "i", "]", "[", "j", "]", "*", "math", ".", "log2", "(", "distributionXY", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "return", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.OutputDis": [[63, 76], ["print", "range", "log.close", "range", "log.write", "print", "medical_distance.distance", "float", "print", "log.write", "log.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.distance"], ["", "def", "OutputDis", "(", "feature", ",", "log", ")", ":", "\n", "    ", "print", "(", "\"computing and saving dis(feature,feature):\"", ")", "\n", "global", "feature_item", "\n", "for", "i", "in", "range", "(", "feature_item", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "feature_item", ")", ":", "\n", "            ", "print", "(", "\"i=\"", "+", "str", "(", "i", ")", "+", "\" j=\"", "+", "str", "(", "j", ")", ")", "\n", "dis", "=", "distance", "(", "feature", ",", "i", ",", "j", ",", "args", ".", "dim", ")", "\n", "dis", "=", "float", "(", "'%.5f'", "%", "dis", ")", "\n", "print", "(", "dis", ")", "\n", "log", ".", "write", "(", "str", "(", "dis", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.distance": [[77, 153], ["numpy.zeros", "len", "len", "medical_distance.JointEntropy", "medical_distance.DataEntropy", "medical_distance.DataEntropy", "col.count", "col.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col.index", "col.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "distance", "(", "feature", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "H_feature", ",", "H_featureS", "\n", "\n", "if", "(", "i", ",", "j", ")", "in", "H_featureS", ":", "\n", "        ", "je", "=", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before", "=", "0", "\n", "indptr", "=", "feature", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataY", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "for", "index", "in", "indptr", ":", "\n", "            ", "data", "=", "feature", "[", "0", "]", "[", "before", ":", "index", "]", "\n", "col", "=", "feature", "[", "2", "]", "[", "before", ":", "index", "]", "\n", "before", "=", "index", "\n", "\n", "i_exit", "=", "col", ".", "count", "(", "i", ")", "\n", "j_exit", "=", "col", ".", "count", "(", "j", ")", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data", "[", "col", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data", "[", "col", ".", "index", "(", "j", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_featureS", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_feature", ":", "\n", "        ", "HY", "=", "H_feature", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_feature", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "je", "==", "0.0", ":", "\n", "        ", "return", "1", "\n", "", "return", "2", "-", "(", "HX", "+", "HY", ")", "/", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.DataEntropy": [[154, 164], ["len", "p.append", "math.log2"], "function", ["None"], ["", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n", "    ", "diffDataArrayLen", "=", "len", "(", "diffDataNum", ")", "\n", "entropyVal", "=", "0", ";", "\n", "p", "=", "[", "]", "\n", "for", "i", "in", "diffDataNum", ":", "\n", "        ", "proptyVal", "=", "diffDataNum", "[", "i", "]", "/", "dataArrayLen", "\n", "p", ".", "append", "(", "proptyVal", ")", "\n", "if", "(", "proptyVal", "!=", "0", ")", ":", "\n", "            ", "entropyVal", "=", "entropyVal", "-", "proptyVal", "*", "math", ".", "log2", "(", "proptyVal", ")", "\n", "", "", "return", "entropyVal", "\n", "", "def", "operate", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.operate": [[164, 176], ["medical_distance.read_sparse_arff", "medical_distance.read_sparse_arff", "open", "medical_distance.OutputDis", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_distance.OutputDis"], ["", "def", "operate", "(", "args", ")", ":", "\n", "    ", "feature", ",", "label", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "feature", ",", "lable", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/dis.txt\"", ",", "\"w\"", ")", "\n", "OutputDis", "(", "feature", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff": [[17, 56], ["open", "open.read().split", "open.close", "enumerate", "eval", "col.extend", "data.extend", "label_indptr.append", "label_col.extend", "label_data.extend", "label_row.extend", "feature_indptr.append", "feature_col.extend", "feature_data.extend", "feature_row.extend", "open.read", "i.split", "f_data[].replace().split", "eval.keys", "eval.values", "len", "f_data[].split", "f_data[].replace", "range", "range", "len"], "function", ["None"], ["def", "read_sparse_arff", "(", "f_path", ",", "xml_path", ")", ":", "\n", "    ", "global", "feature_item", "\n", "f", "=", "open", "(", "f_path", ")", "\n", "f_data", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'@data'", ")", "\n", "f", ".", "close", "(", ")", "\n", "column", "=", "[", "i", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "i", "in", "f_data", "[", "0", "]", ".", "split", "(", "'@attribute'", ")", "[", "1", ":", "]", "]", "\n", "label_row", ",", "label_col", ",", "label_data", ",", "label_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feature_row", ",", "feature_col", ",", "feature_data", ",", "feature_indptr", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "inil", "=", "0", "\n", "inil_label", "=", "0", "\n", "for", "l", "in", "enumerate", "(", "f_data", "[", "1", "]", ".", "replace", "(", "' '", ",", "':'", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "        ", "l_v_dict", "=", "eval", "(", "l", "[", "1", "]", ")", "\n", "col", ",", "data", "=", "[", "]", ",", "[", "]", "\n", "col", ".", "extend", "(", "l_v_dict", ".", "keys", "(", ")", ")", "\n", "data", ".", "extend", "(", "l_v_dict", ".", "values", "(", ")", ")", "\n", "index", "=", "0", "\n", "feature_num", "=", "0", "\n", "for", "item", "in", "col", ":", "\n", "            ", "if", "item", "<", "feature_item", ":", "\n", "                ", "index", "+=", "1", "\n", "feature_num", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "inil_label", "+=", "len", "(", "l_v_dict", ")", "-", "feature_num", "\n", "label_indptr", ".", "append", "(", "inil_label", ")", "\n", "label_col", ".", "extend", "(", "col", "[", "index", ":", "]", ")", "\n", "label_data", ".", "extend", "(", "data", "[", "index", ":", "]", ")", "\n", "label_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "l_v_dict", ")", "-", "feature_num", ")", "]", ")", "\n", "\n", "inil", "+=", "feature_num", "\n", "feature_indptr", ".", "append", "(", "inil", ")", "\n", "feature_col", ".", "extend", "(", "col", "[", "0", ":", "index", "]", ")", "\n", "feature_data", ".", "extend", "(", "data", "[", "0", ":", "index", "]", ")", "\n", "feature_row", ".", "extend", "(", "[", "l", "[", "0", "]", "for", "i", "in", "range", "(", "feature_num", ")", "]", ")", "\n", "\n", "", "sparse_feature", "=", "(", "feature_data", ",", "feature_row", ",", "feature_col", ",", "feature_indptr", ")", "\n", "sparse_label", "=", "(", "label_data", ",", "label_row", ",", "label_col", ",", "label_indptr", ")", "\n", "\n", "return", "sparse_feature", ",", "sparse_label", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy": [[58, 66], ["numpy.shape", "range", "range", "math.log2"], "function", ["None"], ["", "def", "JointEntropy", "(", "distributionXY", ")", ":", "\n", "    ", "je", "=", "0", "\n", "[", "lenY", ",", "lenX", "]", "=", "np", ".", "shape", "(", "distributionXY", ")", "\n", "for", "i", "in", "range", "(", "lenY", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lenX", ")", ":", "\n", "            ", "if", "(", "distributionXY", "[", "i", "]", "[", "j", "]", "!=", "0", ")", ":", "\n", "                ", "je", "=", "je", "-", "distributionXY", "[", "i", "]", "[", "j", "]", "*", "math", ".", "log2", "(", "distributionXY", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "return", "je", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.OutputNMI": [[67, 80], ["print", "range", "log.close", "range", "log.write", "print", "medical_NMI.NMI", "float", "print", "log.write", "log.write", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.NMI"], ["", "def", "OutputNMI", "(", "feature", ",", "label", ",", "log", ")", ":", "\n", "    ", "global", "feature_item", ",", "label_num", "\n", "print", "(", "\"computing and saving NMI(feature,lable):\"", ")", "\n", "for", "i", "in", "range", "(", "feature_item", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "label_num", ")", ":", "\n", "            ", "print", "(", "\"i = \"", "+", "str", "(", "i", ")", "+", "\" l = \"", "+", "str", "(", "l", ")", ")", "\n", "nmi", "=", "NMI", "(", "feature", ",", "label", ",", "i", ",", "l", ",", "args", ".", "dim", ")", "\n", "nmi", "=", "float", "(", "'%.5f'", "%", "nmi", ")", "\n", "print", "(", "nmi", ")", "\n", "log", ".", "write", "(", "str", "(", "nmi", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy": [[81, 91], ["len", "p.append", "math.log2"], "function", ["None"], ["", "def", "DataEntropy", "(", "dataArrayLen", ",", "diffDataNum", ")", ":", "\n", "    ", "diffDataArrayLen", "=", "len", "(", "diffDataNum", ")", "\n", "entropyVal", "=", "0", ";", "\n", "p", "=", "[", "]", "\n", "for", "i", "in", "diffDataNum", ":", "\n", "        ", "proptyVal", "=", "diffDataNum", "[", "i", "]", "/", "dataArrayLen", "\n", "p", ".", "append", "(", "proptyVal", ")", "\n", "if", "(", "proptyVal", "!=", "0", ")", ":", "\n", "            ", "entropyVal", "=", "entropyVal", "-", "proptyVal", "*", "math", ".", "log2", "(", "proptyVal", ")", "\n", "", "", "return", "entropyVal", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.NMI": [[92, 180], ["numpy.zeros", "zip", "len", "len", "medical_NMI.JointEntropy", "medical_NMI.DataEntropy", "medical_NMI.DataEntropy", "math.sqrt", "col_f.count", "col_l.count", "diffDataX.count", "diffDataX.index", "diffDataX.append", "diffDataY.count", "diffDataY.index", "diffDataY.append", "len", "len", "col_f.index", "col_l.index"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.JointEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.DataEntropy"], ["", "def", "NMI", "(", "feature", ",", "label", ",", "i", ",", "j", ",", "true_len", ")", ":", "\n", "    ", "global", "feature_item", "\n", "add", "=", "feature_item", "\n", "j", "=", "j", "+", "add", "\n", "global", "H_feature", ",", "H_label", ",", "H_feature_lable", "\n", "if", "(", "i", ",", "j", ")", "in", "H_feature_lable", ":", "\n", "        ", "je", "=", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "\n", "", "else", ":", "\n", "# diffDataCount_X is the horizontal component is distribution table", "\n", "        ", "diffDataCount_X", "=", "true_len", "\n", "\n", "# diffDataCount_Y is the vertical component is distribution table", "\n", "diffDataCount_Y", "=", "true_len", "\n", "\n", "distributionXY", "=", "np", ".", "zeros", "(", "(", "diffDataCount_Y", ",", "diffDataCount_X", ")", ")", "\n", "\n", "before_f", "=", "0", "\n", "before_l", "=", "0", "\n", "indptr_f", "=", "feature", "[", "3", "]", "\n", "indptr_l", "=", "label", "[", "3", "]", "\n", "diffDataX", "=", "[", "]", "\n", "diffDataNumX", "=", "{", "}", "\n", "diffDataNumY", "=", "{", "}", "\n", "diffDataY", "=", "[", "]", "\n", "for", "(", "index_f", ",", "index_l", ")", "in", "zip", "(", "indptr_f", ",", "indptr_l", ")", ":", "\n", "\n", "            ", "data_f", "=", "feature", "[", "0", "]", "[", "before_f", ":", "index_f", "]", "\n", "col_f", "=", "feature", "[", "2", "]", "[", "before_f", ":", "index_f", "]", "\n", "before_f", "=", "index_f", "\n", "\n", "data_l", "=", "label", "[", "0", "]", "[", "before_l", ":", "index_l", "]", "\n", "col_l", "=", "label", "[", "2", "]", "[", "before_l", ":", "index_l", "]", "\n", "\n", "before_l", "=", "index_l", "\n", "i_exit", "=", "col_f", ".", "count", "(", "i", ")", "\n", "j_exit", "=", "col_l", ".", "count", "(", "j", ")", "\n", "\n", "if", "(", "i_exit", ">", "0", ")", ":", "\n", "                ", "data_i", "=", "data_f", "[", "col_f", ".", "index", "(", "i", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_i", "=", "0", "\n", "\n", "", "if", "diffDataX", ".", "count", "(", "data_i", ")", ">", "0", ":", "\n", "                ", "distribution_x", "=", "diffDataX", ".", "index", "(", "data_i", ")", "\n", "diffDataNumX", "[", "data_i", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataX", ".", "append", "(", "data_i", ")", "\n", "distribution_x", "=", "len", "(", "diffDataX", ")", "-", "1", "\n", "diffDataNumX", "[", "data_i", "]", "=", "1", "\n", "\n", "", "if", "(", "j_exit", ">", "0", ")", ":", "\n", "                ", "data_j", "=", "data_l", "[", "col_l", ".", "index", "(", "j", ")", "]", "\n", "", "else", ":", "\n", "                ", "data_j", "=", "0", "\n", "\n", "", "if", "diffDataY", ".", "count", "(", "data_j", ")", ">", "0", ":", "\n", "                ", "distribution_y", "=", "diffDataY", ".", "index", "(", "data_j", ")", "\n", "diffDataNumY", "[", "data_j", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "diffDataY", ".", "append", "(", "data_j", ")", "\n", "distribution_y", "=", "len", "(", "diffDataY", ")", "-", "1", "\n", "diffDataNumY", "[", "data_j", "]", "=", "1", "\n", "\n", "", "distributionXY", "[", "distribution_x", "]", "[", "distribution_y", "]", "+=", "1", "\n", "\n", "", "diffDataCount_X", "=", "len", "(", "diffDataX", ")", "\n", "diffDataCount_Y", "=", "len", "(", "diffDataY", ")", "\n", "\n", "distributionXY", "=", "distributionXY", "[", ":", "diffDataCount_X", ",", ":", "diffDataCount_Y", "]", "\n", "distributionXY", "=", "distributionXY", "/", "true_len", "\n", "je", "=", "JointEntropy", "(", "distributionXY", ")", "\n", "H_feature_lable", "[", "(", "i", ",", "j", ")", "]", "=", "je", "\n", "", "if", "i", "in", "H_feature", ":", "\n", "        ", "HX", "=", "H_feature", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "HX", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumX", ")", "\n", "H_feature", "[", "i", "]", "=", "HX", "\n", "", "if", "j", "in", "H_label", ":", "\n", "        ", "HY", "=", "H_label", "[", "j", "]", "\n", "", "else", ":", "\n", "        ", "HY", "=", "DataEntropy", "(", "true_len", ",", "diffDataNumY", ")", "\n", "H_label", "[", "j", "]", "=", "HY", "\n", "\n", "", "if", "(", "HX", "==", "0.0", "or", "HY", "==", "0.0", ")", ":", "\n", "        ", "return", "0", "\n", "", "mi", "=", "HX", "+", "HY", "-", "je", "\n", "res", "=", "mi", "/", "math", ".", "sqrt", "(", "HX", "*", "HY", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.operate": [[181, 193], ["medical_NMI.read_sparse_arff", "medical_NMI.read_sparse_arff", "open", "medical_NMI.OutputNMI", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.read_sparse_arff", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.medical_NMI.OutputNMI"], ["", "def", "operate", "(", "args", ")", ":", "\n", "    ", "feature", ",", "label", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "feature", ",", "lable", "=", "read_sparse_arff", "(", "args", ".", "arff", ",", "args", ".", "xml", ")", "\n", "save_address", "=", "args", ".", "s", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/NMI.txt\"", ",", "\"w\"", ")", "\n", "OutputNMI", "(", "feature", ",", "lable", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.__init__": [[49, 60], ["enron_GSEMO.readNMI", "enron_GSEMO.readDis", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readNMI", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readDis"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "self", ".", "top", "=", "kwargs", "[", "\"top\"", "]", "\n", "self", ".", "l", "=", "kwargs", "[", "\"l\"", "]", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "self", ".", "iterationTime", "=", "iterationoTime", "\n", "\n", "self", ".", "NMI", "=", "readNMI", "(", "kwargs", "[", "\"NMI\"", "]", ",", "kwargs", "[", "\"n\"", "]", ",", "kwargs", "[", "\"l\"", "]", ")", "\n", "self", ".", "dis", "=", "readDis", "(", "kwargs", "[", "\"dis\"", "]", ",", "kwargs", "[", "\"n\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.mutation": [[61, 65], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.doGSEMO": [[66, 142], ["numpy.mat", "numpy.mat", "int", "float", "range", "enron_GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "enron_GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "enron_GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "enron_GSEMO.GSEMO.tempOptimum.append", "enron_GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n", "population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top": [[143, 152], ["range", "values.sort", "range", "values.append", "min"], "methods", ["None"], ["", "def", "sum_of_top", "(", "self", ",", "linklist", ",", "size", ",", "l", ")", ":", "\n", "        ", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "values", ".", "append", "(", "self", ".", "NMI", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "l", "]", ")", "\n", "", "values", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "min", "(", "self", ".", "top", ",", "size", ")", ")", ":", "\n", "            ", "value", "+=", "values", "[", "i", "]", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.metric": [[153, 155], ["None"], "methods", ["None"], ["", "def", "metric", "(", "self", ",", "linklist", ",", "i", ",", "j", ")", ":", "\n", "        ", "return", "self", ".", "dis", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.evaluateObjective": [[158, 176], ["numpy.nonzero", "zip", "range", "range", "numpy.shape", "linklist.append", "enron_GSEMO.GSEMO.sum_of_top", "range", "enron_GSEMO.GSEMO.metric"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.metric"], ["", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "g", "=", "0", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "linklist", ",", "size", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "metric", "(", "linklist", ",", "i", ",", "j", ")", "\n", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.Calucalate_true_value": [[178, 196], ["numpy.nonzero", "zip", "range", "range", "numpy.shape", "linklist.append", "enron_GSEMO.GSEMO.sum_of_top", "range", "enron_GSEMO.GSEMO.metric"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.sum_of_top", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.GSEMO.metric"], ["", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "g", "=", "0", "\n", "for", "l", "in", "range", "(", "self", ".", "l", ")", ":", "\n", "            ", "g", "+=", "self", ".", "sum_of_top", "(", "linklist", ",", "size", ",", "l", ")", "\n", "\n", "", "div", "=", "0", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "metric", "(", "linklist", ",", "i", ",", "j", ")", "\n", "\n", "", "", "res", "=", "g", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readNMI": [[16, 30], ["open", "numpy.zeros", "open.read", "f.read.split", "line.split", "range", "float", "len"], "function", ["None"], ["def", "readNMI", "(", "address", ",", "row", ",", "col", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "nmi", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "nmi", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "j", "=", "0", "\n", "", "return", "nmi", "\n", "", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_enron_medical.enron_GSEMO.readDis": [[30, 47], ["open", "numpy.zeros", "open.read", "f.read.split", "range", "line.split", "range", "range", "float", "len"], "function", ["None"], ["", "def", "readDis", "(", "address", ",", "n", ")", ":", "\n", "    ", "f", "=", "open", "(", "address", ")", "\n", "dis", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "text", "=", "f", ".", "read", "(", ")", "\n", "lines", "=", "text", ".", "split", "(", "\"\\n\"", ")", "\n", "i", ",", "j", "=", "0", ",", "0", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "j", "=", "i", "+", "1", "\n", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "for", "v", "in", "range", "(", "len", "(", "tokens", ")", "-", "1", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "float", "(", "tokens", "[", "v", "]", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "dis", "[", "i", "]", "[", "j", "]", "=", "dis", "[", "j", "]", "[", "i", "]", "\n", "", "", "return", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.__init__": [[5, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "weight", "=", "kwargs", "[", "\"w\"", "]", "\n", "self", ".", "distance", "=", "kwargs", "[", "\"dis\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "", "def", "setIterationTime", "(", "self", ",", "time", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.setIterationTime": [[13, 15], ["None"], "methods", ["None"], ["        ", "self", ".", "iterationTime", "=", "time", "\n", "\n", "", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.mutation": [[16, 20], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n", "\n", "", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.setInilSolution": [[21, 28], ["numpy.mat", "numpy.mat", "GSEMO.GSEMO.population[].sum", "GSEMO.GSEMO.evaluateObjective", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.updateFitness": [[28, 32], ["range", "GSEMO.GSEMO.evaluateObjective"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "# print(self.weight[i[1]])", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.GSEMO": [[32, 77], ["GSEMO.GSEMO.updateFitness", "float", "range", "GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "GSEMO.GSEMO.evaluateObjective", "range", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.updateFitness", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.evaluateObjective": [[78, 95], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.change_weight": [[96, 98], ["None"], "methods", ["None"], ["                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.change_distance": [[98, 101], ["None"], "methods", ["None"], ["", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.__init__": [[13, 39], ["GSEMO.GSEMO", "dynamic.Problem.pord.setIterationTime", "kwargs[].split", "line.split", "line.split", "dynamic.Problem.distance.append", "dynamic.Problem.weight.append", "b.append", "math.exp", "float", "float"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "distance", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "if", "line", "!=", "\"\"", ":", "\n", "                    ", "if", "it", "==", "-", "1", ":", "\n", "                        ", "for", "w", "in", "line", ".", "split", "(", ")", ":", "\n", "                            ", "self", ".", "weight", ".", "append", "(", "float", "(", "w", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "b", "=", "[", "]", "\n", "for", "value", "in", "line", ".", "split", "(", ")", ":", "\n", "                            ", "b", ".", "append", "(", "float", "(", "value", ")", ")", "\n", "", "self", ".", "distance", ".", "append", "(", "b", ")", "\n", "", "it", "+=", "1", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "self", ".", "iteration", "=", "kwargs", "[", "\"iteration\"", "]", "\n", "self", ".", "changes_per_time", "=", "kwargs", "[", "\"changes_per_time\"", "]", "\n", "\n", "self", ".", "pord", "=", "prd", ".", "GSEMO", "(", "k", "=", "self", ".", "k", ",", "n", "=", "self", ".", "n", ",", "w", "=", "self", ".", "weight", ",", "dis", "=", "self", ".", "distance", ",", "mylambda", "=", "self", ".", "mylambda", ",", "\n", "iteration", "=", "self", ".", "iteration", ")", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "self", ".", "pord", ".", "setIterationTime", "(", "iterationoTime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO": [[40, 42], ["dynamic.Problem.pord.GSEMO"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO"], ["", "def", "GSEMO", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pord", ".", "GSEMO", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.Calucalate_true_value_pord": [[43, 60], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["", "def", "Calucalate_true_value_pord", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.Calculate_true_value_ls": [[61, 72], ["len", "range", "range"], "methods", ["None"], ["", "def", "Calculate_true_value_ls", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "res", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "res", "[", "i", "]", "]", "[", "res", "[", "j", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.evaluateObjective": [[73, 82], ["len", "range"], "methods", ["None"], ["", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "size", "=", "len", "(", "temp", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "f", "=", "self", ".", "weight", "[", "new_item", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "div", "+=", "self", ".", "distance", "[", "temp", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.select_best_item": [[83, 87], ["numpy.argmax", "dynamic.Problem.evaluateObjective", "items.pop"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "for", "s", "in", "items", "]", "\n", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "res", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.greedy": [[88, 99], ["range", "items.append", "len", "dynamic.Problem.select_best_item"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "[", "]", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", ")", "<", "self", ".", "k", ":", "\n", "            ", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.exchange": [[100, 121], ["copy.deepcopy", "dynamic.Problem.Calculate_true_value_ls", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.append", "dynamic.Problem.Calculate_true_value_ls", "copy.deepcopy.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.Calculate_true_value_ls", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.Calculate_true_value_ls"], ["", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value_ls", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", ".", "pop", "(", "temp_solution", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value_ls", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.LocalSearch": [[122, 141], ["range", "items.append", "items.pop", "dynamic.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "\n", "#start with greedy algorithm solution", "\n", "", "sum_iteration", "=", "0", "\n", "while", "sum_iteration", "<", "self", ".", "iteration", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "True", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "\n", "", "sum_iteration", "+=", "self", ".", "k", "*", "(", "self", ".", "n", "-", "self", ".", "k", ")", "\n", "\n", "", "return", "res", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.change": [[142, 152], ["range", "dynamic.Problem.MPERTURBATION", "range", "dynamic.Problem.VPERTURBATION", "range", "dynamic.Problem.EPERTURBATION"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.MPERTURBATION", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.VPERTURBATION", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.EPERTURBATION"], ["", "def", "change", "(", "self", ",", "change_type", ")", ":", "\n", "        ", "if", "change_type", "==", "\"MPERTURBATION\"", ":", "\n", "            ", "for", "step", "in", "range", "(", "self", ".", "changes_per_time", ")", ":", "\n", "                ", "self", ".", "MPERTURBATION", "(", ")", "\n", "", "", "elif", "change_type", "==", "\"VPERTURBATION\"", ":", "\n", "            ", "for", "step", "in", "range", "(", "self", ".", "changes_per_time", ")", ":", "\n", "                ", "self", ".", "VPERTURBATION", "(", ")", "\n", "", "", "elif", "change_type", "==", "\"EPERTURBATION\"", ":", "\n", "            ", "for", "step", "in", "range", "(", "self", ".", "changes_per_time", ")", ":", "\n", "                ", "self", ".", "EPERTURBATION", "(", ")", "\n", "", "", "", "def", "MPERTURBATION", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.MPERTURBATION": [[152, 158], ["random.random", "dynamic.Problem.VPERTURBATION", "dynamic.Problem.EPERTURBATION"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.VPERTURBATION", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.EPERTURBATION"], ["", "", "", "def", "MPERTURBATION", "(", "self", ")", ":", "\n", "        ", "p", "=", "random", ".", "random", "(", ")", "\n", "if", "p", "<", "0.5", ":", "\n", "            ", "self", ".", "VPERTURBATION", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "EPERTURBATION", "(", ")", "\n", "", "", "def", "VPERTURBATION", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.VPERTURBATION": [[158, 163], ["random.random", "dynamic.Problem.pord.change_weight", "random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.change_weight"], ["", "", "def", "VPERTURBATION", "(", "self", ")", ":", "\n", "        ", "index", "=", "randint", "(", "1", ",", "self", ".", "n", ")", "-", "1", "\n", "w", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "weight", "[", "index", "]", "=", "w", "\n", "self", ".", "pord", ".", "change_weight", "(", "index", ",", "w", ")", "\n", "", "def", "EPERTURBATION", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.EPERTURBATION": [[163, 173], ["dynamic.Problem.pord.change_distance", "random.randint", "random.random", "random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.change_distance"], ["", "def", "EPERTURBATION", "(", "self", ")", ":", "\n", "        ", "u", "=", "randint", "(", "1", ",", "self", ".", "n", ")", "-", "1", "\n", "while", "True", ":", "\n", "            ", "v", "=", "randint", "(", "1", ",", "self", ".", "n", ")", "-", "1", "\n", "if", "u", "!=", "v", ":", "\n", "                ", "break", "\n", "", "", "w", "=", "random", ".", "random", "(", ")", "+", "1", "\n", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "w", "\n", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "=", "w", "\n", "self", ".", "pord", ".", "change_distance", "(", "u", ",", "v", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Output_Avg_Ratio": [[174, 188], ["log.write", "matrix_ls.mean", "log.write", "log.write", "log.write", "matrix_pord.mean", "log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str", "str"], "function", ["None"], ["", "", "def", "Output_Avg_Ratio", "(", "matrix_ls", ",", "matrix_pord", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"Local Search: \"", ")", "\n", "ls_mean", "=", "matrix_ls", ".", "mean", "(", "axis", "=", "0", ")", "\n", "log", ".", "write", "(", "str", "(", "ls_mean", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"GSEMO: \"", ")", "\n", "gsemo_mean", "=", "matrix_pord", ".", "mean", "(", "axis", "=", "0", ")", "\n", "log", ".", "write", "(", "str", "(", "gsemo_mean", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"---------------------------------\"", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "write", "(", "str", "(", "ls_mean", "/", "gsemo_mean", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.output_SigleResult": [[190, 199], ["log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str"], "function", ["None"], ["", "def", "output_SigleResult", "(", "pord", ",", "ls", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"LocalSearch: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "ls", ")", ")", "\n", "log", ".", "write", "(", "\" GSEMO: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "pord", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"------------------------------------------------\"", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.generate_data": [[200, 231], ["range", "print", "open", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "random.random", "range", "open.write", "str", "str", "range", "open.write", "str", "range", "str", "random.random"], "function", ["None"], ["", "def", "generate_data", "(", "n_instances", ",", "address", ",", "n_items", ")", ":", "\n", "    ", "txt_id", "=", "0", "\n", "for", "i", "in", "range", "(", "n_instances", ")", ":", "\n", "        ", "print", "(", "\"generate \"", "+", "str", "(", "i", ")", ")", "\n", "txt_id", "=", "txt_id", "+", "1", "\n", "\n", "directory", "=", "address", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "name", "=", "\"instance_\"", "+", "str", "(", "txt_id", ")", "+", "\".txt\"", "\n", "f", "=", "open", "(", "directory", "+", "name", ",", "\"w\"", ")", "\n", "\n", "text", "=", "\"\"", "\n", "for", "n", "in", "range", "(", "n_items", ")", ":", "\n", "            ", "weight", "=", "random", ".", "random", "(", ")", "\n", "text", "=", "text", "+", "str", "(", "weight", ")", "+", "\" \"", "\n", "", "text", "=", "text", "+", "'\\n'", "\n", "f", ".", "write", "(", "text", ")", "\n", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "n_items", ")", "]", "for", "row", "in", "range", "(", "n_items", ")", "]", "\n", "for", "u", "in", "range", "(", "n_items", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "n_items", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "distance", "[", "u", "]", "[", "v", "]", "=", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "distance", "[", "u", "]", "[", "v", "]", "=", "1", "+", "random", ".", "random", "(", ")", "\n", "", "f", ".", "write", "(", "str", "(", "distance", "[", "u", "]", "[", "v", "]", ")", "+", "\" \"", ")", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.run_experiments": [[232, 268], ["print", "int", "open", "open.read", "dynamic.Problem", "dynamic.Problem.greedy", "numpy.zeros", "numpy.mat", "Problem.pord.setInilSolution", "range", "os.path.exists", "os.makedirs", "dynamic.Problem.change", "dynamic.Problem.GSEMO", "Problem.Calucalate_true_value_gsemo", "dynamic.Problem.LocalSearch", "open", "dynamic.output_SigleResult", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.GSEMO.GSEMO.setInilSolution", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.change", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.output_SigleResult"], ["", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "\n", "    ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "args", ".", "file", ")", "\n", "args", ".", "iteration", "=", "int", "(", "args", ".", "iteration", ")", "\n", "\n", "#load file", "\n", "f", "=", "open", "(", "args", ".", "folder", "+", "\"/\"", "+", "args", ".", "file", ",", "\"r\"", ")", "\n", "instance", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "#initial Problem", "\n", "", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ",", "iteration", "=", "args", ".", "iteration", ",", "changes_per_time", "=", "args", ".", "changes_per_time", ")", "\n", "#do greedy solution", "\n", "init_solution", "=", "problem", ".", "greedy", "(", ")", "\n", "\n", "#format convert", "\n", "zero_solution", "=", "np", ".", "zeros", "(", "[", "1", ",", "args", ".", "n_items", "]", ",", "'int8'", ")", "\n", "for", "i", "in", "init_solution", ":", "\n", "        ", "zero_solution", "[", "0", "]", "[", "i", "]", "=", "1", "\n", "", "res_gsemo", "=", "np", ".", "mat", "(", "zero_solution", ")", "\n", "#set pord's initial solution", "\n", "problem", ".", "pord", ".", "setInilSolution", "(", "res_gsemo", ")", "\n", "#set ls's initial solution", "\n", "res_ls", "=", "init_solution", "\n", "\n", "for", "change_time", "in", "range", "(", "args", ".", "change_times", ")", ":", "\n", "        ", "problem", ".", "change", "(", "args", ".", "change_type", ")", "\n", "\n", "res_pord", "=", "problem", ".", "GSEMO", "(", ")", "\n", "vaule_pord", "=", "problem", ".", "Calucalate_true_value_gsemo", "(", "res_gsemo", ")", "\n", "\n", "res_ls", ",", "value_ls", "=", "problem", ".", "LocalSearch", "(", "res_ls", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/Result_\"", "+", "args", ".", "file", ",", "'a'", ")", "\n", "output_SigleResult", "(", "vaule_pord", ",", "value_ls", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.__init__": [[6, 16], ["None"], "methods", ["None"], ["        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "weight", "=", "kwargs", "[", "\"w\"", "]", "\n", "self", ".", "distance", "=", "kwargs", "[", "\"dis\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "", "def", "setIterationTime", "(", "self", ",", "time", ")", ":", "\n", "        ", "self", ".", "iterationTime", "=", "time", "\n", "\n", "", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.setIterationTime": [[16, 18], ["None"], "methods", ["None"], ["        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.mutation": [[19, 23], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["\n", "", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.Calucalate_true_value": [[24, 67], ["numpy.nonzero", "zip", "dic.values", "range", "numpy.shape", "linklist.append", "math.sqrt", "subset.append", "range", "min", "range", "len"], "methods", ["None"], ["linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "# print(self.weight[i[1]])", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.doGSEMO": [[68, 145], ["numpy.mat", "numpy.mat", "int", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n", "population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n", "", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.GSEMO.GSEMO.evaluateObjective": [[146, 188], ["numpy.nonzero", "zip", "dic.values", "range", "numpy.shape", "linklist.append", "math.sqrt", "subset.append", "range", "min", "range", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.main.Rel.__init__": [[8, 12], ["None"], "methods", ["None"], ["from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "class", "Problem", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.main.Node.__init__": [[13, 18], ["main.Node.relations.append"], "methods", ["None"], ["if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.main.Problem.__init__": [[19, 54], ["kwargs[].split", "len", "kwargs[].split", "kwargs[].split", "line.split", "main.Problem.distance.append", "line.split", "main.Problem.similarity.append", "len", "line.split", "tokens[].split", "float", "main.Problem.weight.append", "main.Node", "main.Problem.nodes.append", "d.append", "s.append", "float", "float"], "methods", ["None"], ["                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "Gsemo", "(", "self", ",", "path", ")", ":", "\n", "        ", "gesmo", "=", "gsm", ".", "GSEMO", "(", "k", "=", "self", ".", "k", ",", "n", "=", "self", ".", "n", ",", "w", "=", "self", ".", "weight", ",", "dis", "=", "self", ".", "distance", ",", "mylambda", "=", "self", ".", "mylambda", ")", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "gesmo", ".", "setIterationTime", "(", "iterationoTime", ")", "\n", "return", "gesmo", ".", "doGSEMO", "(", "path", ")", "\n", "\n", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.main.Problem.Gsemo": [[54, 59], ["GSEMO.GSEMO", "GSEMO.GSEMO.setIterationTime", "GSEMO.GSEMO.doGSEMO", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.doGSEMO"], ["cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.main.run_experiments": [[62, 87], ["print", "open", "open.read", "open", "open.read", "open", "open.read", "main.Problem", "main.Problem.Gsemo", "os.listdir", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.Gsemo"], ["f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "path", "=", "save_address", "+", "\"/Result_\"", "+", "file", "\n", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "result", "=", "problem", ".", "Gsemo", "(", "path", ")", "\n", "\n", "# Press the green button in the gutter to run the script.", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n", "argparser", ".", "add_argument", "(", "'-p'", ",", "'--save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'Result_Gsemo/370'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_instances'", ",", "help", "=", "\"number of instances\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_Gsemo/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Rel.__init__": [[11, 15], ["None"], "methods", ["None"], ["import", "copy", "\n", "\n", "from", "os", "import", "listdir", "\n", "from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "class", "Problem", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Node.__init__": [[16, 21], ["greedy_ls.Node.relations.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.__init__": [[22, 57], ["kwargs[].split", "len", "kwargs[].split", "kwargs[].split", "line.split", "greedy_ls.Problem.distance.append", "line.split", "greedy_ls.Problem.similarity.append", "len", "line.split", "tokens[].split", "float", "greedy_ls.Problem.weight.append", "greedy_ls.Node", "greedy_ls.Problem.nodes.append", "d.append", "s.append", "float", "float"], "methods", ["None"], ["                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.evaluateObjective": [[57, 93], ["dic.values", "range", "math.sqrt", "range", "min", "len", "len"], "methods", ["None"], ["\n", "", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "size", "=", "len", "(", "temp", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "f", "=", "self", ".", "weight", "[", "new_item", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "div", "+=", "self", ".", "distance", "[", "temp", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "for", "s", "in", "items", "]", "\n", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "res", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "items", "\n", "\n", "", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", ")", "<", "self", ".", "k", ":", "\n", "            ", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n", "", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", ".", "pop", "(", "temp_solution", ".", "index", "(", "del_item", ")", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.select_best_item": [[94, 103], ["numpy.argmax", "greedy_ls.Problem.evaluateObjective", "items.pop"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["temp_solution", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.greedy": [[104, 114], ["range", "items.append", "len", "greedy_ls.Problem.select_best_item"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n", "", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "# start with greedy solution", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.exchange": [[115, 136], ["copy.deepcopy", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "temp_solution[].pop", "temp_solution[].append", "greedy_ls.Problem.Calculate_true_value", "temp_solution[].index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# delete exchange_item[0] from V\\X", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "# add exchang_item[1] in V\\X", "\n", "", "", "return", "res", ",", "value", "\n", "\n", "", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "res", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "res", "[", "i", "]", "]", "[", "res", "[", "j", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.LocalSearch": [[137, 155], ["range", "items.append", "items.pop", "greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"Greedy: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_greedy", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"LocalSearch: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_ls", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.Problem.Calculate_true_value": [[156, 192], ["len", "dic.values", "range", "math.sqrt", "range", "min", "range", "len"], "methods", ["None"], ["    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "all_greedy", "=", "[", "]", "\n", "all_ls", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res", ")", "\n", "all_greedy", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/greedy_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res", ")", "\n", "all_ls", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/LS_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "\n", "", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.generate_data": [[193, 224], ["range", "print", "open", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "random.random", "range", "open.write", "str", "str", "range", "open.write", "str", "range", "str", "random.random"], "function", ["None"], ["", "log", "=", "open", "(", "save_address", "+", "\"/Average.txt\"", ",", "\"w\"", ")", "if", "args", ".", "save_file", "else", "sys", ".", "stdout", "\n", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", "\n", "\n", "# Press the green button in the gutter to run the script.", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n", "argparser", ".", "add_argument", "(", "'-p'", ",", "'--save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'Result_GreedyLS/370'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_instances'", ",", "help", "=", "\"number of instances\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_GreedyLS/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n", "# See PyCharm help at https://www.jetbrains.com/help/pycharm/", "\n", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.OutputResult": [[225, 233], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.OutputAvg": [[234, 242], ["log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str", "numpy.mean", "numpy.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.greedy_ls.run_experiments": [[244, 295], ["greedy_ls.OutputAvg", "print", "open", "open.read", "open", "open.read", "open", "open.read", "greedy_ls.Problem", "print", "greedy_ls.Problem.greedy", "greedy_ls.Problem.Calculate_true_value", "all_greedy.append", "print", "open", "greedy_ls.OutputResult", "print", "greedy_ls.Problem.LocalSearch", "all_ls.append", "print", "open", "greedy_ls.OutputResult", "open", "os.listdir", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputAvg", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.Rel.__init__": [[21, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "id", "=", "kwargs", "[", "\"id\"", "]", "\n", "self", ".", "id_text", "=", "kwargs", "[", "\"id_text\"", "]", "\n", "self", ".", "head", "=", "kwargs", "[", "\"head\"", "]", "\n", "self", ".", "head_text", "=", "kwargs", "[", "\"head_text\"", "]", "\n", "self", ".", "deprel", "=", "kwargs", "[", "\"deprel\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.Node.__init__": [[30, 35], ["operate.Node.relations.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "relations", "=", "[", "]", "\n", "for", "item", "in", "kwargs", "[", "\"relations\"", "]", ":", "\n", "            ", "self", ".", "relations", ".", "append", "(", "item", ")", "\n", "", "self", ".", "document_id", "=", "kwargs", "[", "\"document_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.Node.judgeRel": [[36, 41], ["None"], "methods", ["None"], ["", "def", "judgeRel", "(", "self", ",", "rel", ")", ":", "\n", "        ", "for", "r", "in", "self", ".", "relations", ":", "\n", "            ", "if", "r", "==", "rel", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.num_of_document": [[43, 57], ["node.judgeRel"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.Node.judgeRel"], ["", "", "def", "num_of_document", "(", "node", ",", "C", ",", "list", ")", ":", "\n", "    ", "res", "=", "0", "\n", "for", "c", "in", "list", ":", "\n", "        ", "if", "c", "!=", "C", ":", "\n", "            ", "flag", "=", "False", "\n", "for", "n", "in", "c", ":", "\n", "                ", "for", "rel", "in", "n", ".", "relations", ":", "\n", "                    ", "if", "node", ".", "judgeRel", "(", "rel", ")", ":", "\n", "                        ", "res", "+=", "1", "\n", "flag", "=", "True", "\n", "break", "\n", "", "", "if", "flag", "==", "True", ":", "\n", "                    ", "break", "\n", "", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.compute_popularity": [[59, 71], ["popularity.keys", "operate.num_of_document"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.num_of_document"], ["", "def", "compute_popularity", "(", "list", ")", ":", "\n", "    ", "global", "popularity", "\n", "sum", "=", "0", "\n", "for", "c", "in", "list", ":", "\n", "        ", "for", "node", "in", "c", ":", "\n", "            ", "if", "node", "not", "in", "popularity", ":", "\n", "                ", "popularity", "[", "node", "]", "=", "num_of_document", "(", "node", ",", "c", ",", "list", ")", "\n", "sum", "+=", "popularity", "[", "node", "]", "\n", "# normalize", "\n", "", "", "", "if", "sum", "!=", "0", ":", "\n", "        ", "for", "k", "in", "popularity", ".", "keys", "(", ")", ":", "\n", "            ", "popularity", "[", "k", "]", "/=", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.compute_edgeWeight": [[73, 94], ["range", "len", "range", "similarity.append", "edgeWeight.append", "len", "random.random", "row_list.append", "row_list.append"], "function", ["None"], ["", "", "", "def", "compute_edgeWeight", "(", "nodes", ")", ":", "\n", "    ", "global", "edgeWeight", ",", "similarity", "\n", "edgeWeight", "=", "[", "]", "\n", "similarity", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "nodes", ")", ")", ":", "\n", "        ", "row_list", "=", "[", "]", "\n", "max", "=", "0", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "nodes", ")", ")", ":", "\n", "            ", "sim", "=", "random", ".", "random", "(", ")", "\n", "row_list", ".", "append", "(", "sim", ")", "\n", "if", "sim", ">", "max", ":", "\n", "                ", "max", "=", "sim", "\n", "", "", "similarity", ".", "append", "(", "row_list", ")", "\n", "\n", "", "for", "list", "in", "similarity", ":", "\n", "        ", "row_list", "=", "[", "]", "\n", "for", "v", "in", "list", ":", "\n", "            ", "v", "=", "1", "-", "v", "\n", "row_list", ".", "append", "(", "v", ")", "\n", "", "edgeWeight", ".", "append", "(", "row_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.compute_similarity": [[97, 104], ["operate.WN", "operate.WN"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.WN", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.WN"], ["", "", "def", "compute_similarity", "(", "node1", ",", "node2", ")", ":", "\n", "    ", "sim", "=", "0", "\n", "for", "rel1", "in", "node1", ".", "relations", ":", "\n", "        ", "for", "rel2", "in", "node2", ".", "relations", ":", "\n", "            ", "if", "rel1", ".", "deprel", "==", "rel2", ".", "deprel", ":", "\n", "                ", "sim", "+=", "WN", "(", "rel1", ".", "id_text", ",", "rel2", ".", "id_text", ")", "*", "WN", "(", "rel1", ".", "head_text", ",", "rel2", ".", "head_text", ")", "\n", "", "", "", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.WN": [[106, 116], ["nltk.corpus.wordnet.synsets", "nltk.corpus.wordnet.synsets", "len", "len", "i.path_similarity"], "function", ["None"], ["", "def", "WN", "(", "w1", ",", "w2", ")", ":", "\n", "    ", "a", "=", "wn", ".", "synsets", "(", "w1", ")", "\n", "b", "=", "wn", ".", "synsets", "(", "w2", ")", "\n", "if", "len", "(", "a", ")", ">", "0", "and", "len", "(", "b", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "a", ":", "\n", "            ", "for", "j", "in", "b", ":", "\n", "                ", "sim", "=", "i", ".", "path_similarity", "(", "j", ")", "\n", "return", "sim", "\n", "", "", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.compute_distance": [[118, 148], ["range", "range", "range", "range", "log.close", "range", "range", "range", "range", "log.write", "range", "range", "range", "log.write", "log.write", "str"], "function", ["None"], ["", "", "def", "compute_distance", "(", "sentences_num", ",", "log", ")", ":", "\n", "    ", "NUMBER", "=", "sentences_num", "\n", "Graph_Matrix", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "distance", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "elif", "i", "<", "j", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "edgeWeight", "[", "i", "]", "[", "j", "-", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "Graph_Matrix", "[", "j", "]", "[", "i", "]", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "distance", "[", "i", "]", "[", "j", "]", "=", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "\n", "distance", "[", "j", "]", "[", "i", "]", "=", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "", "for", "k", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "                ", "if", "distance", "[", "i", "]", "[", "k", "]", "+", "distance", "[", "k", "]", "[", "j", "]", "<", "distance", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "distance", "[", "i", "]", "[", "j", "]", "=", "distance", "[", "i", "]", "[", "k", "]", "+", "distance", "[", "k", "]", "[", "j", "]", "\n", "", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "distance", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.save_weight": [[150, 165], ["popularity.keys", "log.close", "log.write", "log.write", "log.write", "log.write", "log.write", "str", "log.write", "log.write", "log.write", "log.write", "log.write", "log.write"], "function", ["None"], ["", "def", "save_weight", "(", "log", ")", ":", "\n", "    ", "for", "k", "in", "popularity", ".", "keys", "(", ")", ":", "\n", "        ", "log", ".", "write", "(", "k", ".", "document_id", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "str", "(", "popularity", "[", "k", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "for", "rel", "in", "k", ".", "relations", ":", "\n", "            ", "log", ".", "write", "(", "rel", ".", "id_text", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "rel", ".", "head_text", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "rel", ".", "deprel", ")", "\n", "log", ".", "write", "(", "\";\"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.save_sim": [[166, 184], ["range", "range", "log.close", "range", "range", "log.write", "range", "log.write", "log.write", "str"], "function", ["None"], ["", "def", "save_sim", "(", "sentences_num", ",", "log", ")", ":", "\n", "    ", "NUMBER", "=", "sentences_num", "\n", "sim", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "elif", "i", "<", "j", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "similarity", "[", "i", "]", "[", "j", "-", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "sim", "[", "j", "]", "[", "i", "]", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "sim", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_DUC2004.operate.operateData": [[185, 238], ["re.compile", "stanza.download", "stanza.Pipeline", "operate.compute_popularity", "open", "operate.save_weight", "popularity.keys", "operate.compute_edgeWeight", "open", "operate.compute_distance", "open", "operate.save_sim", "os.listdir", "open", "open.read", "re.compile.finditer", "all_rel_list.append", "os.path.exists", "os.makedirs", "nodes.append", "len", "len", "os.listdir", "os.path.isfile", "stanza.Pipeline.", "operate.Node", "rel_list.append", "os.path.join", "i.span", "operate.Rel", "relations.append", "i.span"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_popularity", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_weight", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_edgeWeight", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_distance", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_sim"], ["", "def", "operateData", "(", "args", ")", ":", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "folders", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "]", "\n", "s", "=", "re", ".", "compile", "(", "\n", "'(?<!\\w\\.\\w.)(?<![A-Z]\\.)(?<![A-Z][a-z]\\.)(?<! [a-z]\\.)(?<![A-Z][a-z][a-z]\\.)(?<=\\.|\\?|\\!)\\\"*\\s*\\s*(?:\\W*)([A-Z])'", ")", "\n", "stanza", ".", "download", "(", "'en'", ")", "\n", "en_nlp", "=", "stanza", ".", "Pipeline", "(", "'en'", ")", "\n", "for", "folder", "in", "folders", ":", "\n", "        ", "global", "popularity", "\n", "popularity", "=", "{", "}", "\n", "address", "=", "new_address", "+", "\"/\"", "+", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "address", ")", "if", "isfile", "(", "join", "(", "address", ",", "f", ")", ")", "]", "\n", "all_rel_list", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "            ", "rel_list", "=", "[", "]", "\n", "f", "=", "open", "(", "address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "f", ".", "read", "(", ")", "\n", "a", "=", "s", ".", "finditer", "(", "instance", ")", "\n", "pre", "=", "0", "\n", "for", "i", "in", "a", ":", "\n", "                ", "sen", "=", "instance", "[", "pre", ":", "i", ".", "span", "(", ")", "[", "0", "]", "]", "\n", "pre", "=", "i", ".", "span", "(", ")", "[", "0", "]", "+", "1", "\n", "doc", "=", "en_nlp", "(", "sen", ")", "\n", "relations", "=", "[", "]", "\n", "for", "sent", "in", "doc", ".", "sentences", ":", "\n", "                    ", "for", "word", "in", "sent", ".", "words", ":", "\n", "                        ", "rel", "=", "Rel", "(", "id", "=", "word", ".", "id", ",", "id_text", "=", "word", ".", "text", ",", "head", "=", "word", ".", "head", ",", "\n", "head_text", "=", "sent", ".", "words", "[", "word", ".", "head", "-", "1", "]", ".", "text", "if", "word", ".", "head", ">", "0", "else", "\"root\"", ",", "\n", "deprel", "=", "word", ".", "deprel", ")", "\n", "relations", ".", "append", "(", "rel", ")", "\n", "", "", "node", "=", "Node", "(", "relations", "=", "relations", ",", "document_id", "=", "file", ")", "\n", "rel_list", ".", "append", "(", "node", ")", "\n", "", "all_rel_list", ".", "append", "(", "rel_list", ")", "\n", "\n", "", "compute_popularity", "(", "all_rel_list", ")", "\n", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "folder", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_weight.txt\"", ",", "\"w\"", ")", "\n", "save_weight", "(", "log", ")", "\n", "\n", "nodes", "=", "[", "]", "\n", "for", "k", "in", "popularity", ".", "keys", "(", ")", ":", "\n", "            ", "nodes", ".", "append", "(", "k", ")", "\n", "\n", "", "compute_edgeWeight", "(", "nodes", ")", "\n", "\n", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_distance.txt\"", ",", "\"w\"", ")", "\n", "compute_distance", "(", "len", "(", "nodes", ")", ",", "log", ")", "\n", "\n", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_similarity.txt\"", ",", "\"w\"", ")", "\n", "save_sim", "(", "len", "(", "nodes", ")", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.__init__": [[6, 16], ["None"], "methods", ["None"], ["        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "weight", "=", "kwargs", "[", "\"w\"", "]", "\n", "self", ".", "distance", "=", "kwargs", "[", "\"dis\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "", "def", "setIterationTime", "(", "self", ",", "time", ")", ":", "\n", "        ", "self", ".", "iterationTime", "=", "time", "\n", "\n", "", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.setIterationTime": [[16, 18], ["None"], "methods", ["None"], ["        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.mutation": [[19, 23], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["\n", "", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.doGSEMO": [[24, 101], ["numpy.mat", "numpy.mat", "int", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "# print(self.weight[i[1]])", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.Calucalate_true_value": [[102, 145], ["numpy.nonzero", "zip", "dic.values", "range", "numpy.shape", "linklist.append", "math.sqrt", "subset.append", "range", "min", "range", "len"], "methods", ["None"], ["population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n", "", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.GSEMO.GSEMO.evaluateObjective": [[146, 188], ["numpy.nonzero", "zip", "dic.values", "range", "numpy.shape", "linklist.append", "math.sqrt", "subset.append", "range", "min", "range", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.main.Rel.__init__": [[8, 12], ["None"], "methods", ["None"], ["from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "class", "Problem", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.main.Node.__init__": [[13, 18], ["main.Node.relations.append"], "methods", ["None"], ["if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.main.Problem.__init__": [[19, 71], ["kwargs[].split", "len", "kwargs[].split", "kwargs[].split", "line.split", "main.Problem.distance.append", "line.split", "main.Problem.similarity.append", "len", "line.split", "tokens[].split", "float", "main.Problem.weight.append", "main.Node", "main.Problem.nodes.append", "d.append", "s.append", "float", "float"], "methods", ["None"], ["                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "Gsemo", "(", "self", ",", "path", ")", ":", "\n", "        ", "gesmo", "=", "gsm", ".", "GSEMO", "(", "k", "=", "self", ".", "k", ",", "n", "=", "self", ".", "n", ",", "w", "=", "self", ".", "weight", ",", "dis", "=", "self", ".", "distance", ",", "mylambda", "=", "self", ".", "mylambda", ")", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "gesmo", ".", "setIterationTime", "(", "iterationoTime", ")", "\n", "return", "gesmo", ".", "doGSEMO", "(", "path", ")", "\n", "\n", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "path", "=", "save_address", "+", "\"/Result_\"", "+", "file", "\n", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "result", "=", "problem", ".", "Gsemo", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.main.Problem.Gsemo": [[71, 76], ["GSEMO.GSEMO", "GSEMO.GSEMO.setIterationTime", "GSEMO.GSEMO.doGSEMO", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.doGSEMO"], ["\n", "# Press the green button in the gutter to run the script.", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.main.run_experiments": [[79, 105], ["print", "open", "open.read", "open", "open.read", "open", "open.read", "main.Problem", "main.Problem.Gsemo", "os.listdir", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.Gsemo"], ["argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_Gsemo/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n", "\n", "\n", "\n", "\n", "\n", "# See PyCharm help at https://www.jetbrains.com/help/pycharm/", "\n", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Rel.__init__": [[12, 16], ["None"], "methods", ["None"], ["\n", "from", "os", "import", "listdir", "\n", "from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "class", "Problem", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Node.__init__": [[17, 22], ["greedy_ls.Node.relations.append"], "methods", ["None"], ["        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.__init__": [[23, 59], ["kwargs[].split", "len", "kwargs[].split", "kwargs[].split", "line.split", "greedy_ls.Problem.distance.append", "line.split", "greedy_ls.Problem.similarity.append", "len", "line.split", "tokens[].split", "float", "greedy_ls.Problem.weight.append", "greedy_ls.Node", "greedy_ls.Problem.nodes.append", "d.append", "s.append", "float", "float"], "methods", ["None"], ["size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "\n", "", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "size", "=", "len", "(", "temp", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.evaluateObjective": [[59, 95], ["dic.values", "range", "math.sqrt", "range", "min", "len", "len"], "methods", ["None"], ["        ", "size", "=", "len", "(", "temp", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "f", "=", "self", ".", "weight", "[", "new_item", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "div", "+=", "self", ".", "distance", "[", "temp", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "for", "s", "in", "items", "]", "\n", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "res", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "items", "\n", "\n", "", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", ")", "<", "self", ".", "k", ":", "\n", "            ", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n", "items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n", "", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", ".", "pop", "(", "temp_solution", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.select_best_item": [[96, 105], ["numpy.argmax", "greedy_ls.Problem.evaluateObjective", "items.pop"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n", "if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.greedy": [[106, 116], ["range", "items.append", "len", "greedy_ls.Problem.select_best_item"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n", "value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "# start with greedy solution", "\n", "", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.exchange": [[117, 138], ["copy.deepcopy", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "temp_solution[].pop", "temp_solution[].append", "greedy_ls.Problem.Calculate_true_value", "temp_solution[].index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# delete exchange_item[0] from V\\X", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "# add exchang_item[1] in V\\X", "\n", "", "", "return", "res", ",", "value", "\n", "\n", "", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "res", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "res", "[", "i", "]", "]", "[", "res", "[", "j", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.LocalSearch": [[139, 158], ["range", "items.append", "items.pop", "greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"Greedy: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_greedy", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"LocalSearch: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_ls", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "all_greedy", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.Problem.Calculate_true_value": [[159, 195], ["len", "dic.values", "range", "math.sqrt", "range", "min", "range", "len"], "methods", ["None"], ["all_ls", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res", ")", "\n", "all_greedy", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/greedy_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res", ")", "\n", "all_ls", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/LS_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "\n", "", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/Average.txt\"", ",", "\"w\"", ")", "if", "args", ".", "save_file", "else", "sys", ".", "stdout", "\n", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.OutputResult": [[197, 205], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], ["", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n", "argparser", ".", "add_argument", "(", "'-p'", ",", "'--save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'Result_GreedyLS/370'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_instances'", ",", "help", "=", "\"number of instances\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.OutputAvg": [[206, 214], ["log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str", "numpy.mean", "numpy.mean"], "function", ["None"], ["\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_GreedyLS/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n", "# See PyCharm help at https://www.jetbrains.com/help/pycharm/", "\n", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.greedy_ls.run_experiments": [[215, 265], ["greedy_ls.OutputAvg", "print", "open", "open.read", "open", "open.read", "open", "open.read", "greedy_ls.Problem", "print", "greedy_ls.Problem.greedy", "greedy_ls.Problem.Calculate_true_value", "all_greedy.append", "print", "open", "greedy_ls.OutputResult", "print", "greedy_ls.Problem.LocalSearch", "all_ls.append", "print", "open", "greedy_ls.OutputResult", "open", "os.listdir", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputAvg", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], []], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.Rel.__init__": [[15, 21], ["None"], "methods", ["None"], ["popularity", "=", "{", "}", "\n", "edgeWeight", "=", "[", "]", "\n", "similarity", "=", "[", "]", "\n", "\n", "\n", "class", "Rel", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.Node.__init__": [[24, 29], ["operate.Node.relations.append"], "methods", ["None"], ["self", ".", "head", "=", "kwargs", "[", "\"head\"", "]", "\n", "self", ".", "head_text", "=", "kwargs", "[", "\"head_text\"", "]", "\n", "self", ".", "deprel", "=", "kwargs", "[", "\"deprel\"", "]", "\n", "\n", "\n", "", "", "class", "Node", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.Node.judgeRel": [[30, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "relations", "=", "[", "]", "\n", "for", "item", "in", "kwargs", "[", "\"relations\"", "]", ":", "\n", "            ", "self", ".", "relations", ".", "append", "(", "item", ")", "\n", "", "self", ".", "document_id", "=", "kwargs", "[", "\"document_id\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.num_of_document": [[37, 51], ["node.judgeRel"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.Node.judgeRel"], ["        ", "for", "r", "in", "self", ".", "relations", ":", "\n", "            ", "if", "r", "==", "rel", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "\n", "", "", "def", "num_of_document", "(", "node", ",", "C", ",", "list", ")", ":", "\n", "    ", "res", "=", "0", "\n", "for", "c", "in", "list", ":", "\n", "        ", "if", "c", "!=", "C", ":", "\n", "            ", "flag", "=", "False", "\n", "for", "n", "in", "c", ":", "\n", "                ", "for", "rel", "in", "n", ".", "relations", ":", "\n", "                    ", "if", "node", ".", "judgeRel", "(", "rel", ")", ":", "\n", "                        ", "res", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_popularity": [[53, 65], ["popularity.keys", "operate.num_of_document"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.num_of_document"], ["break", "\n", "", "", "if", "flag", "==", "True", ":", "\n", "                    ", "break", "\n", "", "", "", "", "return", "res", "\n", "\n", "\n", "", "def", "compute_popularity", "(", "list", ")", ":", "\n", "    ", "global", "popularity", "\n", "sum", "=", "0", "\n", "for", "c", "in", "list", ":", "\n", "        ", "for", "node", "in", "c", ":", "\n", "            ", "if", "node", "not", "in", "popularity", ":", "\n", "                ", "popularity", "[", "node", "]", "=", "num_of_document", "(", "node", ",", "c", ",", "list", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_edgeWeight": [[67, 95], ["range", "print", "len", "range", "similarity.append", "edgeWeight.append", "len", "operate.compute_similarity", "row_list.append", "range", "row_list.append", "len"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_similarity"], ["# normalize", "\n", "", "", "", "if", "sum", "!=", "0", ":", "\n", "        ", "for", "k", "in", "popularity", ".", "keys", "(", ")", ":", "\n", "            ", "popularity", "[", "k", "]", "/=", "sum", "\n", "\n", "\n", "", "", "", "def", "compute_edgeWeight", "(", "nodes", ")", ":", "\n", "    ", "global", "edgeWeight", ",", "similarity", "\n", "edgeWeight", "=", "[", "]", "\n", "similarity", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "nodes", ")", ")", ":", "\n", "        ", "row_list", "=", "[", "]", "\n", "max", "=", "0", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "nodes", ")", ")", ":", "\n", "            ", "sim", "=", "random", ".", "random", "(", ")", "\n", "row_list", ".", "append", "(", "sim", ")", "\n", "if", "sim", ">", "max", ":", "\n", "                ", "max", "=", "sim", "\n", "", "", "similarity", ".", "append", "(", "row_list", ")", "\n", "\n", "", "for", "list", "in", "similarity", ":", "\n", "        ", "row_list", "=", "[", "]", "\n", "for", "v", "in", "list", ":", "\n", "            ", "v", "=", "1", "-", "v", "\n", "row_list", ".", "append", "(", "v", ")", "\n", "", "edgeWeight", ".", "append", "(", "row_list", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_similarity": [[97, 104], ["operate.WN", "operate.WN"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.WN", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.WN"], ["", "", "def", "compute_similarity", "(", "node1", ",", "node2", ")", ":", "\n", "    ", "sim", "=", "0", "\n", "for", "rel1", "in", "node1", ".", "relations", ":", "\n", "        ", "for", "rel2", "in", "node2", ".", "relations", ":", "\n", "            ", "if", "rel1", ".", "deprel", "==", "rel2", ".", "deprel", ":", "\n", "                ", "sim", "+=", "WN", "(", "rel1", ".", "id_text", ",", "rel2", ".", "id_text", ")", "*", "WN", "(", "rel1", ".", "head_text", ",", "rel2", ".", "head_text", ")", "\n", "", "", "", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.WN": [[106, 116], ["nltk.corpus.wordnet.synsets", "nltk.corpus.wordnet.synsets", "len", "len", "i.path_similarity"], "function", ["None"], ["", "def", "WN", "(", "w1", ",", "w2", ")", ":", "\n", "    ", "a", "=", "wn", ".", "synsets", "(", "w1", ")", "\n", "b", "=", "wn", ".", "synsets", "(", "w2", ")", "\n", "if", "len", "(", "a", ")", ">", "0", "and", "len", "(", "b", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "a", ":", "\n", "            ", "for", "j", "in", "b", ":", "\n", "                ", "sim", "=", "i", ".", "path_similarity", "(", "j", ")", "\n", "return", "sim", "\n", "", "", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_distance": [[118, 150], ["range", "range", "range", "range", "log.close", "range", "range", "range", "range", "log.write", "range", "range", "range", "log.write", "log.write", "str"], "function", ["None"], ["", "", "def", "compute_distance", "(", "sentences_num", ",", "log", ")", ":", "\n", "    ", "NUMBER", "=", "sentences_num", "\n", "Graph_Matrix", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "distance", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "elif", "i", "<", "j", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "edgeWeight", "[", "i", "]", "[", "j", "-", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "=", "Graph_Matrix", "[", "j", "]", "[", "i", "]", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "distance", "[", "i", "]", "[", "j", "]", "=", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "\n", "distance", "[", "j", "]", "[", "i", "]", "=", "Graph_Matrix", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "", "for", "k", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "                ", "if", "distance", "[", "i", "]", "[", "k", "]", "+", "distance", "[", "k", "]", "[", "j", "]", "<", "distance", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "distance", "[", "i", "]", "[", "j", "]", "=", "distance", "[", "i", "]", "[", "k", "]", "+", "distance", "[", "k", "]", "[", "j", "]", "\n", "", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "distance", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "save_weight", "(", "log", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_weight": [[152, 167], ["popularity.keys", "log.close", "log.write", "log.write", "log.write", "log.write", "log.write", "str", "log.write", "log.write", "log.write", "log.write", "log.write", "log.write"], "function", ["None"], ["        ", "log", ".", "write", "(", "k", ".", "document_id", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "str", "(", "popularity", "[", "k", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "for", "rel", "in", "k", ".", "relations", ":", "\n", "            ", "log", ".", "write", "(", "rel", ".", "id_text", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "rel", ".", "head_text", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "log", ".", "write", "(", "rel", ".", "deprel", ")", "\n", "log", ".", "write", "(", "\";\"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "save_sim", "(", "sentences_num", ",", "log", ")", ":", "\n", "    ", "NUMBER", "=", "sentences_num", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_sim": [[168, 185], ["range", "range", "log.close", "range", "range", "log.write", "range", "log.write", "log.write", "str"], "function", ["None"], ["sim", "=", "[", "[", "0", "]", "*", "NUMBER", "for", "row", "in", "range", "(", "NUMBER", ")", "]", "\n", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "elif", "i", "<", "j", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "similarity", "[", "i", "]", "[", "j", "-", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "sim", "[", "i", "]", "[", "j", "]", "=", "sim", "[", "j", "]", "[", "i", "]", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "NUMBER", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "NUMBER", ")", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "sim", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "log", ".", "write", "(", "\" \"", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "operateData", "(", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.operateData": [[186, 259], ["open", "csv.reader.read", "f.read.split", "csv.reader", "re.compile", "stanza.download", "stanza.Pipeline", "line.split", "open", "operate.compute_popularity", "open", "operate.save_weight", "popularity.keys", "operate.compute_edgeWeight", "open", "operate.compute_distance", "open", "operate.save_sim", "len", "re.compile.finditer", "all_rel_list.append", "os.path.exists", "os.makedirs", "nodes.append", "len", "len", "cluster[].append", "cluster[].append", "stanza.Pipeline.", "operate.Node", "rel_list.append", "i.span", "operate.Rel", "relations.append", "i.span"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_popularity", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_weight", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_edgeWeight", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.compute_distance", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_comments.operate.save_sim"], ["    ", "new_address", "=", "args", ".", "folder", "\n", "folders", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "]", "\n", "s", "=", "re", ".", "compile", "(", "\n", "'(?<!\\w\\.\\w.)(?<![A-Z]\\.)(?<![A-Z][a-z]\\.)(?<! [a-z]\\.)(?<![A-Z][a-z][a-z]\\.)(?<=\\.|\\?|\\!)\\\"*\\s*\\s*(?:\\W*)([A-Z])'", ")", "\n", "stanza", ".", "download", "(", "'en'", ")", "\n", "en_nlp", "=", "stanza", ".", "Pipeline", "(", "'en'", ")", "\n", "for", "folder", "in", "folders", ":", "\n", "        ", "global", "popularity", "\n", "popularity", "=", "{", "}", "\n", "address", "=", "new_address", "+", "\"/\"", "+", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "address", ")", "if", "isfile", "(", "join", "(", "address", ",", "f", ")", ")", "]", "\n", "all_rel_list", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "            ", "rel_list", "=", "[", "]", "\n", "f", "=", "open", "(", "address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "f", ".", "read", "(", ")", "\n", "a", "=", "s", ".", "finditer", "(", "instance", ")", "\n", "pre", "=", "0", "\n", "for", "i", "in", "a", ":", "\n", "                ", "sen", "=", "instance", "[", "pre", ":", "i", ".", "span", "(", ")", "[", "0", "]", "]", "\n", "pre", "=", "i", ".", "span", "(", ")", "[", "0", "]", "+", "1", "\n", "doc", "=", "en_nlp", "(", "sen", ")", "\n", "relations", "=", "[", "]", "\n", "for", "sent", "in", "doc", ".", "sentences", ":", "\n", "                    ", "for", "word", "in", "sent", ".", "words", ":", "\n", "                        ", "rel", "=", "Rel", "(", "id", "=", "word", ".", "id", ",", "id_text", "=", "word", ".", "text", ",", "head", "=", "word", ".", "head", ",", "\n", "head_text", "=", "sent", ".", "words", "[", "word", ".", "head", "-", "1", "]", ".", "text", "if", "word", ".", "head", ">", "0", "else", "\"root\"", ",", "\n", "deprel", "=", "word", ".", "deprel", ")", "\n", "relations", ".", "append", "(", "rel", ")", "\n", "", "", "node", "=", "Node", "(", "relations", "=", "relations", ",", "document_id", "=", "file", ")", "\n", "rel_list", ".", "append", "(", "node", ")", "\n", "", "all_rel_list", ".", "append", "(", "rel_list", ")", "\n", "\n", "", "compute_popularity", "(", "all_rel_list", ")", "\n", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "folder", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_weight.txt\"", ",", "\"w\"", ")", "\n", "save_weight", "(", "log", ")", "\n", "\n", "nodes", "=", "[", "]", "\n", "for", "k", "in", "popularity", ".", "keys", "(", ")", ":", "\n", "            ", "nodes", ".", "append", "(", "k", ")", "\n", "\n", "", "compute_edgeWeight", "(", "nodes", ")", "\n", "\n", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_distance.txt\"", ",", "\"w\"", ")", "\n", "compute_distance", "(", "len", "(", "nodes", ")", ",", "log", ")", "\n", "\n", "log", "=", "open", "(", "save_address", "+", "\"/\"", "+", "folder", "+", "\"_similarity.txt\"", ",", "\"w\"", ")", "\n", "save_sim", "(", "len", "(", "nodes", ")", ",", "log", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-folder'", ",", "default", "=", "'DUC_2004'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'data'", ",", "type", "=", "str", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "\n", "operateData", "(", "args", ")", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "weight", "=", "kwargs", "[", "\"w\"", "]", "\n", "self", ".", "distance", "=", "kwargs", "[", "\"dis\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime": [[12, 14], ["None"], "methods", ["None"], ["", "def", "setIterationTime", "(", "self", ",", "time", ")", ":", "\n", "        ", "self", ".", "iterationTime", "=", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation": [[15, 19], ["numpy.random.binomial", "numpy.abs"], "methods", ["None"], ["", "def", "mutation", "(", "self", ",", "s", ")", ":", "\n", "        ", "rand_rate", "=", "1.0", "/", "(", "self", ".", "n", ")", "\n", "change", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "rand_rate", ",", "self", ".", "n", ")", "\n", "return", "np", ".", "abs", "(", "s", "-", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value": [[20, 38], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["", "def", "Calucalate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "# print(self.weight[i[1]])", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.doGSEMO": [[39, 115], ["numpy.mat", "numpy.mat", "int", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "numpy.zeros", "numpy.zeros", "GSEMO.GSEMO.mutation", "numpy.mat", "offSpring[].sum", "GSEMO.GSEMO.evaluateObjective", "range", "open", "float", "range", "GSEMO.GSEMO.tempOptimum.append", "GSEMO.GSEMO.Calucalate_true_value", "open.write", "open.write", "numpy.nonzero", "zip", "open.write", "open.close", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.shape", "str", "linklist.append", "open.write", "open.write", "str", "Q.append", "random.random.randint"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.mutation", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.Calucalate_true_value"], ["", "def", "doGSEMO", "(", "self", ",", "path", ")", ":", "\n", "        ", "population", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "self", ".", "n", "]", ",", "'int8'", ")", ")", "# initiate the population", "\n", "self", ".", "tempOptimum", "=", "[", "]", "\n", "fitness", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "\n", "popSize", "=", "1", "\n", "t", "=", "0", "# the current iterate count j", "\n", "iter", "=", "0", "\n", "kn", "=", "int", "(", "self", ".", "k", "*", "self", ".", "n", ")", "\n", "while", "t", "<", "self", ".", "iterationTime", ":", "\n", "            ", "if", "iter", "==", "kn", ":", "\n", "                ", "log", "=", "open", "(", "path", ",", "'a'", ")", "\n", "iter", "=", "0", "\n", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                        ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "res", "=", "population", "[", "resultIndex", "]", "\n", "f", "=", "self", ".", "Calucalate_true_value", "(", "res", ")", "\n", "log", ".", "write", "(", "str", "(", "f", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "index", "=", "np", ".", "nonzero", "(", "res", ")", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "                    ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "for", "item", "in", "linklist", ":", "\n", "                    ", "log", ".", "write", "(", "str", "(", "item", "[", "1", "]", "+", "1", ")", ")", "\n", "log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "iter", "+=", "1", "\n", "s", "=", "population", "[", "randint", "(", "1", ",", "popSize", ")", "-", "1", ",", ":", "]", "# choose a individual from population randomly \u53d6\u67d0\u4e00\u884c", "\n", "offSpring", "=", "self", ".", "mutation", "(", "s", ")", "# every bit will be flipped with probability 1/n", "\n", "offSpringFit", "=", "np", ".", "mat", "(", "np", ".", "zeros", "(", "[", "1", ",", "2", "]", ")", ")", "# value, size", "\n", "\n", "offSpringFit", "[", "0", ",", "1", "]", "=", "offSpring", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "\n", "if", "offSpringFit", "[", "0", ",", "1", "]", "==", "0", "or", "offSpringFit", "[", "0", ",", "1", "]", ">", "self", ".", "k", ":", "\n", "                ", "t", "+=", "1", "\n", "continue", "\n", "", "offSpringFit", "[", "0", ",", "0", "]", "=", "self", ".", "evaluateObjective", "(", "offSpring", ")", "\n", "\n", "isDominate", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                ", "if", "(", "fitness", "[", "i", ",", "0", "]", ">", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<=", "offSpringFit", "[", "0", ",", "1", "]", ")", "or", "(", "\n", "fitness", "[", "i", ",", "0", "]", ">=", "offSpringFit", "[", "0", ",", "0", "]", "and", "fitness", "[", "i", ",", "1", "]", "<", "offSpringFit", "[", "0", ",", "1", "]", ")", ":", "\n", "                    ", "isDominate", "=", "True", "\n", "break", "\n", "", "", "if", "isDominate", "==", "False", ":", "# there is no better individual than offSpring", "\n", "                ", "Q", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "                    ", "if", "offSpringFit", "[", "0", ",", "0", "]", ">=", "fitness", "[", "j", ",", "0", "]", "and", "offSpringFit", "[", "0", ",", "1", "]", "<=", "fitness", "[", "j", ",", "1", "]", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "Q", ".", "append", "(", "j", ")", "\n", "\n", "", "", "fitness", "=", "np", ".", "vstack", "(", "(", "offSpringFit", ",", "fitness", "[", "Q", ",", ":", "]", ")", ")", "# update fitness", "\n", "population", "=", "np", ".", "vstack", "(", "(", "offSpring", ",", "population", "[", "Q", ",", ":", "]", ")", ")", "# update population", "\n", "", "t", "=", "t", "+", "1", "\n", "popSize", "=", "np", ".", "shape", "(", "fitness", ")", "[", "0", "]", "\n", "\n", "", "resultIndex", "=", "-", "1", "\n", "maxValue", "=", "float", "(", "\"-inf\"", ")", "\n", "for", "p", "in", "range", "(", "0", ",", "popSize", ")", ":", "\n", "            ", "if", "fitness", "[", "p", ",", "1", "]", "<=", "self", ".", "k", "and", "fitness", "[", "p", ",", "0", "]", ">", "maxValue", ":", "\n", "                ", "maxValue", "=", "fitness", "[", "p", ",", "0", "]", "\n", "resultIndex", "=", "p", "\n", "\n", "", "", "self", ".", "tempOptimum", ".", "append", "(", "population", "[", "resultIndex", "]", ")", "\n", "return", "self", ".", "tempOptimum", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.evaluateObjective": [[116, 133], ["numpy.nonzero", "zip", "range", "numpy.shape", "linklist.append", "range"], "methods", ["None"], ["", "def", "evaluateObjective", "(", "self", ",", "offSpring", ")", ":", "\n", "        ", "index", "=", "np", ".", "nonzero", "(", "offSpring", ")", "\n", "size", "=", "np", ".", "shape", "(", "index", ")", "[", "1", "]", "\n", "\n", "linklist", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ")", ":", "\n", "            ", "linklist", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "linklist", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "[", "1", "]", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "linklist", "[", "i", "]", "[", "1", "]", "]", "[", "linklist", "[", "j", "]", "[", "1", "]", "]", "\n", "", "", "res", "=", "0.5", "*", "(", "1", "+", "size", "/", "self", ".", "k", ")", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.__init__": [[9, 28], ["kwargs[].split", "line.split", "line.split", "main.Problem.distance.append", "main.Problem.weight.append", "b.append", "float", "float"], "methods", ["None"], ["class", "Problem", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n", "self", ".", "n", "=", "kwargs", "[", "\"n\"", "]", "\n", "self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.Gsemo": [[29, 34], ["GSEMO.GSEMO", "GSEMO.GSEMO.setIterationTime", "GSEMO.GSEMO.doGSEMO", "math.exp"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_dynamic.dynamic.Problem.GSEMO", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.setIterationTime", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.GSEMO.GSEMO.doGSEMO"], ["for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.generate_data": [[35, 66], ["range", "print", "open", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "random.random", "range", "open.write", "str", "str", "range", "open.write", "str", "range", "str", "random.random"], "function", ["None"], ["", "else", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "Gsemo", "(", "self", ",", "path", ")", ":", "\n", "        ", "gesmo", "=", "gsm", ".", "GSEMO", "(", "k", "=", "self", ".", "k", ",", "n", "=", "self", ".", "n", ",", "w", "=", "self", ".", "weight", ",", "dis", "=", "self", ".", "distance", ",", "mylambda", "=", "self", ".", "mylambda", ")", "\n", "iterationoTime", "=", "math", ".", "exp", "(", "1", ")", "*", "self", ".", "n", "*", "self", ".", "k", "*", "self", ".", "k", "*", "self", ".", "k", "/", "2", "\n", "gesmo", ".", "setIterationTime", "(", "iterationoTime", ")", "\n", "return", "gesmo", ".", "doGSEMO", "(", "path", ")", "\n", "\n", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.run_experiments": [[67, 89], ["args.new.lower", "print", "main.generate_data", "print", "os.path.exists", "os.makedirs", "print", "open", "open.read", "main.Problem", "main.Problem.Gsemo", "os.listdir", "os.path.isfile", "str", "os.path.exists", "os.makedirs", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.generate_data", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.main.Problem.Gsemo"], ["\n", "", "path", "=", "save_address", "+", "\"/Result_\"", "+", "file", "\n", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "result", "=", "problem", ".", "Gsemo", "(", "path", ")", "\n", "\n", "# Press the green button in the gutter to run the script.", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n", "argparser", ".", "add_argument", "(", "'-p'", ",", "'--save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'Result_Gsemo/370'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_instances'", ",", "help", "=", "\"number of instances\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_Gsemo/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.__init__": [[11, 30], ["kwargs[].split", "line.split", "line.split", "greedy_ls.Problem.distance.append", "greedy_ls.Problem.weight.append", "b.append", "float", "float"], "methods", ["None"], ["import", "copy", "\n", "\n", "from", "os", "import", "listdir", "\n", "from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "class", "Problem", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "weight", "=", "[", "]", "\n", "self", ".", "vector", "=", "[", "]", "\n", "if", "\"text\"", "in", "kwargs", ":", "\n", "            ", "it", "=", "-", "1", "\n", "for", "line", "in", "kwargs", "[", "\"text\"", "]", ".", "split", "(", "\"\\n\"", ")", ":", "\n", "                ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "size", "=", "len", "(", "tokens", ")", "\n", "if", "size", ">=", "3", ":", "\n", "                    ", "self", ".", "weight", ".", "append", "(", "float", "(", "tokens", "[", "0", "]", ")", ")", "\n", "self", ".", "name", "=", "tokens", "[", "1", "]", "\n", "change", "=", "tokens", "[", "2", ":", "]", "\n", "f_vector", "=", "[", "float", "(", "i", ")", "for", "i", "in", "change", "]", "\n", "self", ".", "vector", ".", "append", "(", "f_vector", ")", "\n", "", "", "", "self", ".", "k", "=", "kwargs", "[", "\"k\"", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective": [[32, 41], ["len", "range"], "methods", ["None"], ["self", ".", "mylambda", "=", "kwargs", "[", "\"mylambda\"", "]", "\n", "\n", "self", ".", "distance", "=", "[", "[", "0", "for", "col", "in", "range", "(", "self", ".", "n", ")", "]", "for", "row", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "            ", "for", "v", "in", "range", "(", "len", "(", "self", ".", "vector", ")", ")", ":", "\n", "                ", "if", "u", "==", "v", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "0", "\n", "", "elif", "v", "<", "u", ":", "\n", "                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "distance", "[", "v", "]", "[", "u", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item": [[42, 46], ["numpy.argmax", "greedy_ls.Problem.evaluateObjective", "items.pop"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.evaluateObjective"], ["                    ", "self", ".", "distance", "[", "u", "]", "[", "v", "]", "=", "self", ".", "cosine_similarity", "(", "self", ".", "vector", "[", "u", "]", ",", "self", ".", "vector", "[", "v", "]", ")", "\n", "\n", "", "", "", "", "def", "bit_product_sum", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "[", "item", "[", "0", "]", "*", "item", "[", "1", "]", "for", "item", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy": [[47, 57], ["range", "items.append", "len", "greedy_ls.Problem.select_best_item"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.select_best_item"], ["", "def", "cosine_similarity", "(", "self", ",", "x", ",", "y", ",", "norm", "=", "False", ")", ":", "\n", "# compute cosine similarity of vector x and vector y", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"len(x) != len(y)\"", "\n", "zero_list", "=", "[", "0", "]", "*", "len", "(", "x", ")", "\n", "if", "x", "==", "zero_list", "or", "y", "==", "zero_list", ":", "\n", "            ", "return", "float", "(", "1", ")", "if", "x", "==", "y", "else", "float", "(", "0", ")", "\n", "", "res", "=", "np", ".", "array", "(", "[", "[", "x", "[", "i", "]", "*", "y", "[", "i", "]", ",", "x", "[", "i", "]", "*", "x", "[", "i", "]", ",", "y", "[", "i", "]", "*", "y", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", ")", "\n", "cos", "=", "sum", "(", "res", "[", ":", ",", "0", "]", ")", "/", "(", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "1", "]", ")", ")", "*", "np", ".", "sqrt", "(", "sum", "(", "res", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "return", "0.5", "*", "cos", "+", "0.5", "if", "norm", "else", "cos", "# Normalized to the interval [0, 1]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange": [[58, 79], ["copy.deepcopy", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.append", "greedy_ls.Problem.Calculate_true_value", "copy.deepcopy.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value"], ["", "def", "evaluateObjective", "(", "self", ",", "temp", ",", "new_item", ")", ":", "\n", "        ", "size", "=", "len", "(", "temp", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "f", "=", "self", ".", "weight", "[", "new_item", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "div", "+=", "self", ".", "distance", "[", "temp", "[", "i", "]", "]", "[", "new_item", "]", "\n", "", "res", "=", "0.5", "*", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "def", "select_best_item", "(", "self", ",", "res", ",", "items", ")", ":", "\n", "        ", "evaluations", "=", "[", "self", ".", "evaluateObjective", "(", "res", ",", "s", ")", "for", "s", "in", "items", "]", "\n", "index", "=", "np", ".", "argmax", "(", "evaluations", ")", "\n", "return", "res", "+", "[", "items", ".", "pop", "(", "index", ")", "]", ",", "items", "\n", "\n", "", "def", "greedy", "(", "self", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "while", "len", "(", "res", ")", "<", "self", ".", "k", ":", "\n", "            ", "new_res", ",", "left_items", "=", "self", ".", "select_best_item", "(", "res", ",", "items", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch": [[80, 96], ["range", "items.append", "items.pop", "greedy_ls.Problem.exchange", "items.index", "items.pop", "items.append", "items.index"], "methods", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.exchange"], ["items", "=", "left_items", "\n", "res", "=", "new_res", "\n", "", "return", "res", "\n", "\n", "", "def", "exchange", "(", "self", ",", "solution", ",", "items", ")", ":", "\n", "        ", "exits", "=", "False", "\n", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "max_fitness", "=", "self", ".", "Calculate_true_value", "(", "temp_solution", ")", "\n", "max_solution", "=", "solution", "\n", "exchang_item", "=", "[", "0", ",", "0", "]", "\n", "for", "add_item", "in", "items", ":", "\n", "            ", "for", "del_item", "in", "solution", ":", "\n", "                ", "temp_solution", "=", "copy", ".", "deepcopy", "(", "solution", ")", "\n", "temp_solution", ".", "pop", "(", "temp_solution", ".", "index", "(", "del_item", ")", ")", "\n", "temp_solution", ".", "append", "(", "add_item", ")", "\n", "new_solution", "=", "temp_solution", "\n", "new_fitness", "=", "self", ".", "Calculate_true_value", "(", "new_solution", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value": [[97, 108], ["len", "range", "range"], "methods", ["None"], ["if", "(", "new_fitness", ">", "max_fitness", ")", ":", "\n", "                    ", "exits", "=", "True", "\n", "max_fitness", "=", "new_fitness", "\n", "max_solution", "=", "new_solution", "\n", "exchang_item", "[", "0", "]", "=", "add_item", "\n", "exchang_item", "[", "1", "]", "=", "del_item", "\n", "\n", "", "", "", "return", "exits", ",", "max_fitness", ",", "max_solution", ",", "exchang_item", "\n", "\n", "", "def", "LocalSearch", "(", "self", ",", "init_res", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "res", "=", "init_res", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.generate_data": [[109, 140], ["range", "print", "open", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "random.random", "range", "open.write", "str", "str", "range", "open.write", "str", "range", "str", "random.random"], "function", ["None"], ["value", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "items", ".", "append", "(", "i", ")", "\n", "", "for", "i", "in", "init_res", ":", "\n", "            ", "items", ".", "pop", "(", "items", ".", "index", "(", "i", ")", ")", "\n", "# start with greedy solution", "\n", "", "while", "True", ":", "\n", "            ", "flag", ",", "value", ",", "res", ",", "exchang_item", "=", "self", ".", "exchange", "(", "res", ",", "items", ")", "\n", "if", "flag", "==", "False", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "items", ".", "pop", "(", "items", ".", "index", "(", "exchang_item", "[", "0", "]", ")", ")", "# delete exchange_item[0] from V\\X", "\n", "items", ".", "append", "(", "exchang_item", "[", "1", "]", ")", "# add exchang_item[1] in V\\X", "\n", "", "", "return", "res", ",", "value", "\n", "\n", "", "def", "Calculate_true_value", "(", "self", ",", "res", ")", ":", "\n", "        ", "size", "=", "len", "(", "res", ")", "\n", "f", "=", "0", "\n", "div", "=", "0", "\n", "for", "i", "in", "res", ":", "\n", "            ", "f", "+=", "self", ".", "weight", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "size", ")", ":", "\n", "                ", "div", "+=", "self", ".", "distance", "[", "res", "[", "i", "]", "]", "[", "res", "[", "j", "]", "]", "\n", "", "", "res", "=", "f", "+", "self", ".", "mylambda", "*", "div", "\n", "return", "res", "\n", "\n", "", "", "def", "OutputResult", "(", "res", ",", "value", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "str", "(", "value", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "item", "in", "res", ":", "\n", "        ", "log", ".", "write", "(", "str", "(", "item", "+", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult": [[141, 149], ["log.write", "log.write", "log.write", "log.close", "str", "log.write", "log.write", "str"], "function", ["None"], ["log", ".", "write", "(", "' '", ")", "\n", "", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", ":", "\n", "    ", "log", ".", "write", "(", "\"Greedy: \"", ")", "\n", "log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_greedy", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "write", "(", "\"LocalSearch: \"", ")", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputAvg": [[150, 158], ["log.write", "log.write", "log.write", "log.write", "log.write", "log.write", "log.close", "str", "str", "numpy.mean", "numpy.mean"], "function", ["None"], ["log", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "all_ls", ")", ")", ")", "\n", "log", ".", "write", "(", "\"\\n\"", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "def", "run_experiments", "(", "args", ")", ":", "\n", "\n", "    ", "new_address", "=", "args", ".", "folder", "\n", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "new_address", ")", "if", "isfile", "(", "join", "(", "new_address", ",", "f", ")", ")", "]", "\n", "all_greedy", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.run_experiments": [[159, 210], ["args.new.lower", "print", "greedy_ls.generate_data", "print", "greedy_ls.OutputAvg", "os.path.exists", "os.makedirs", "print", "open", "open.read", "greedy_ls.Problem", "print", "greedy_ls.Problem.greedy", "greedy_ls.Problem.Calculate_true_value", "all_greedy.append", "print", "open", "greedy_ls.OutputResult", "print", "greedy_ls.Problem.LocalSearch", "all_ls.append", "print", "open", "greedy_ls.OutputResult", "str", "os.path.exists", "os.makedirs", "open", "os.listdir", "os.path.isfile", "str", "os.path.exists", "os.makedirs", "str", "os.path.exists", "os.makedirs", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.generate_data", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputAvg", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.greedy", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.Calculate_true_value", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.Problem.LocalSearch", "home.repos.pwc.inspect_result.paper-submission-rafa_diversification-code.Experiment_synthetic.greedy_ls.OutputResult"], ["all_ls", "=", "[", "]", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"run \"", "+", "str", "(", "args", ".", "constraint", ")", "+", "\":\"", "+", "str", "(", "file", ")", ")", "\n", "f", "=", "open", "(", "new_address", "+", "\"/\"", "+", "file", ",", "\"r\"", ")", "\n", "instance", "=", "text", "=", "f", ".", "read", "(", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "problem", "=", "Problem", "(", "text", "=", "instance", ",", "k", "=", "args", ".", "constraint", ",", "n", "=", "args", ".", "n_items", ",", "mylambda", "=", "args", ".", "mylambda", ")", "\n", "print", "(", "\"doing greedy...\"", ")", "\n", "res", "=", "problem", ".", "greedy", "(", ")", "\n", "value", "=", "problem", ".", "Calculate_true_value", "(", "res", ")", "\n", "all_greedy", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving greedy...\"", ")", "\n", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/greedy_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "print", "(", "\"doing LS...\"", ")", "\n", "res", ",", "value", "=", "problem", ".", "LocalSearch", "(", "res", ")", "\n", "all_ls", ".", "append", "(", "value", ")", "\n", "\n", "print", "(", "\"saving LS...\"", ")", "\n", "log", "=", "open", "(", "save_address", "+", "\"/LS_\"", "+", "file", "+", "\".txt\"", ",", "\"w\"", ")", "\n", "OutputResult", "(", "res", ",", "value", ",", "log", ")", "\n", "\n", "\n", "", "save_address", "=", "args", ".", "save_file", "+", "\"/\"", "+", "str", "(", "args", ".", "constraint", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_address", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_address", ")", "\n", "", "log", "=", "open", "(", "save_address", "+", "\"/Average.txt\"", ",", "\"w\"", ")", "if", "args", ".", "save_file", "else", "sys", ".", "stdout", "\n", "OutputAvg", "(", "all_greedy", ",", "all_ls", ",", "log", ")", "\n", "\n", "# Press the green button in the gutter to run the script.", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "default", "=", "'Experiment_Data/370'", ")", "\n", "argparser", ".", "add_argument", "(", "'-n'", ",", "'--new'", ",", "help", "=", "\"create new dataset\"", ",", "default", "=", "\"false\"", ")", "\n", "argparser", ".", "add_argument", "(", "'-p'", ",", "'--save_file'", ",", "help", "=", "\"save_result\"", ",", "default", "=", "'Result_GreedyLS/370'", ",", "type", "=", "str", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_instances'", ",", "help", "=", "\"number of instances\"", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-n_items'", ",", "help", "=", "\"number of items\"", ",", "default", "=", "370", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-constraint'", ",", "help", "=", "\"max size of subset\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "argparser", ".", "add_argument", "(", "'-mylambda'", ",", "help", "=", "\"trade_off\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "args", ".", "save_file", "=", "f'Result_GreedyLS/{args.mylambda}'", "\n", "args", ".", "folder", "=", "f'Experiment_Data/{args.n_items}'", "\n", "run_experiments", "(", "args", ")", "\n"]]}