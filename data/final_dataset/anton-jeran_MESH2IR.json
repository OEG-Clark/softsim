{"home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.evaluate.weights_init": [[41, 52], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.evaluate.load_network_stageI": [[53, 84], ["STAGE1_G", "STAGE1_G.apply", "print", "MESH_NET", "STAGE1_G.cuda", "MESH_NET.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "STAGE1_G.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "MESH_NET.load_state_dict", "print"], "function", ["None"], ["", "", "", "def", "load_network_stageI", "(", "netG_path", ",", "mesh_net_path", ")", ":", "\n", "        ", "from", "model", "import", "STAGE1_G", ",", "STAGE1_D", ",", "MESH_NET", "\n", "netG", "=", "STAGE1_G", "(", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "\n", "print", "(", "netG", ")", "\n", "\n", "\n", "mesh_net", "=", "MESH_NET", "(", ")", "\n", "\n", "\n", "\n", "if", "netG_path", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "netG_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netG", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "netG_path", ")", "\n", "\n", "", "if", "mesh_net_path", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "mesh_net_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "mesh_net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "mesh_net_path", ")", "\n", "\n", "\n", "\n", "", "netG", ".", "cuda", "(", ")", "\n", "mesh_net", ".", "cuda", "(", ")", "\n", "return", "netG", ",", "mesh_net", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.evaluate.get_graph": [[85, 91], ["open", "pickle.load"], "function", ["None"], ["", "def", "get_graph", "(", "full_graph_path", ")", ":", "\n", "\n", "    ", "with", "open", "(", "full_graph_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "graph", "#edge_index, vertex_position", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.evaluate.load_embedding": [[92, 97], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_embedding", "(", "data_dir", ")", ":", "\n", "# embedding_filename   = '/embeddings.pickle'  ", "\n", "    ", "with", "open", "(", "data_dir", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "embeddings", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.evaluate.evaluate": [[99, 190], ["evaluate.load_network_stageI", "netG.eval", "mesh_net.eval", "netG.to", "mesh_net.to", "os.listdir", "os.path.exists", "os.mkdir", "evaluate.load_embedding", "print", "evaluate.get_graph", "torch_geometric.loader.DataLoader", "next", "torch.autograd.Variable", "torch.autograd.Variable", "data.cuda.cuda", "torch.parallel.data_parallel", "int", "six.moves.range", "os.path.exists", "os.mkdir", "iter", "len", "six.moves.range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "txt_embedding.cuda.cuda", "torch.parallel.data_parallel", "six.moves.range", "numpy.array().astype", "txt_embedding_list.append", "folder_name_list.append", "wave_name_list.append", "numpy.array", "len", "numpy.array", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "len", "os.path.exists", "os.mkdir", "fake[].to().detach", "numpy.median", "numpy.array", "numpy.array", "fake[].to"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.load_embedding", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.get_graph"], ["", "def", "evaluate", "(", ")", ":", "\n", "\n", "    ", "embedding_directory", "=", "\"Embeddings/\"", "\n", "graph_directory", "=", "\"Mesh_Graphs/\"", "\n", "output_directory", "=", "\"Output/\"", "\n", "\n", "netG_path", "=", "\"Models/MESH2IR/netG_epoch_175.pth\"", "\n", "mesh_net_path", "=", "\"Models/MESH2IR/mesh_net_epoch_175.pth\"", "\n", "gpus", "=", "[", "0", ",", "1", "]", "\n", "\n", "batch_size", "=", "256", "\n", "fs", "=", "16000", "\n", "\n", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "output_directory", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_directory", ")", "\n", "\n", "", "netG", ",", "mesh_net", "=", "load_network_stageI", "(", "netG_path", ",", "mesh_net_path", ")", "\n", "netG", ".", "eval", "(", ")", "\n", "mesh_net", ".", "eval", "(", ")", "\n", "\n", "\n", "netG", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "mesh_net", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "\n", "embedding_list", "=", "os", ".", "listdir", "(", "embedding_directory", ")", "\n", "\n", "for", "embed", "in", "embedding_list", ":", "\n", "        ", "embed_path", "=", "embedding_directory", "+", "\"/\"", "+", "embed", "\n", "embeddings", "=", "load_embedding", "(", "embed_path", ")", "\n", "embed_name", "=", "embed", "[", "0", ":", "len", "(", "embed", ")", "-", "7", "]", "\n", "output_embed", "=", "output_directory", "+", "embed_name", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "output_embed", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "output_embed", ")", "\n", "\n", "", "print", "(", "\"embed_name   \"", ",", "output_embed", ")", "\n", "\n", "graph_path", ",", "folder_name", ",", "wave_name", ",", "source_location", ",", "receiver_location", "=", "embeddings", "[", "0", "]", "\n", "\n", "full_graph_path", "=", "graph_directory", "+", "graph_path", "\n", "\n", "data_single", "=", "get_graph", "(", "full_graph_path", ")", "\n", "data_list", "=", "[", "data_single", "]", "*", "batch_size", "\n", "loader", "=", "DataLoader", "(", "data_list", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "data", "=", "next", "(", "iter", "(", "loader", ")", ")", "\n", "data", "[", "'edge_index'", "]", "=", "Variable", "(", "data", "[", "'edge_index'", "]", ")", "\n", "data", "[", "'pos'", "]", "=", "Variable", "(", "data", "[", "'pos'", "]", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "mesh_embed", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "mesh_net", ",", "data", ",", "[", "gpus", "[", "0", "]", "]", ")", "\n", "\n", "embed_sets", "=", "len", "(", "embeddings", ")", "/", "batch_size", "\n", "embed_sets", "=", "int", "(", "embed_sets", ")", "\n", "for", "i", "in", "range", "(", "embed_sets", ")", ":", "\n", "            ", "txt_embedding_list", "=", "[", "]", "\n", "folder_name_list", "=", "[", "]", "\n", "wave_name_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "graph_path", ",", "folder_name", ",", "wave_name", ",", "source_location", ",", "receiver_location", "=", "embeddings", "[", "(", "(", "i", "*", "batch_size", ")", "+", "j", ")", "]", "\n", "\n", "source_receiver", "=", "source_location", "+", "receiver_location", "\n", "txt_embedding_single", "=", "np", ".", "array", "(", "source_receiver", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "txt_embedding_list", ".", "append", "(", "txt_embedding_single", ")", "\n", "folder_name_list", ".", "append", "(", "folder_name", ")", "\n", "wave_name_list", ".", "append", "(", "wave_name", ")", "\n", "\n", "\n", "", "txt_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "txt_embedding_list", ")", ")", "\n", "txt_embedding", "=", "Variable", "(", "txt_embedding", ")", "\n", "txt_embedding", "=", "txt_embedding", ".", "cuda", "(", ")", "\n", "\n", "\n", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "lr_fake", ",", "fake", ",", "_", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "gpus", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "fake", ")", ")", ":", "\n", "                ", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "output_embed", "+", "\"/\"", "+", "folder_name_list", "[", "i", "]", ")", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "output_embed", "+", "\"/\"", "+", "folder_name_list", "[", "i", "]", ")", "\n", "\n", "", "fake_RIR_path", "=", "output_embed", "+", "\"/\"", "+", "folder_name_list", "[", "i", "]", "+", "\"/\"", "+", "wave_name_list", "[", "i", "]", "\n", "fake_IR", "=", "np", ".", "array", "(", "fake", "[", "i", "]", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ")", "\n", "\n", "fake_IR_only", "=", "fake_IR", "[", ":", ",", "0", ":", "(", "4096", "-", "128", ")", "]", "\n", "fake_energy", "=", "np", ".", "median", "(", "fake_IR", "[", ":", ",", "(", "4096", "-", "128", ")", ":", "4096", "]", ")", "*", "10", "\n", "fake_IR", "=", "fake_IR_only", "*", "fake_energy", "\n", "f", "=", "WaveWriter", "(", "fake_RIR_path", ",", "channels", "=", "1", ",", "samplerate", "=", "fs", ")", "\n", "f", ".", "write", "(", "np", ".", "array", "(", "fake_IR", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.ResBlock.__init__": [[62, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ",", "\n", "# nn.ReLU(True),", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "#nn.ReLU(inplace=True)", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.ResBlock.forward": [[73, 79], ["model.ResBlock.block", "model.ResBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.COND_NET.__init__": [[85, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "COND_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_dim", "=", "14", "\n", "self", ".", "c_dim", "=", "10", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "t_dim", ",", "self", ".", "c_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "#nn.ReLU()", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.COND_NET.encode": [[92, 97], ["model.COND_NET.relu", "model.COND_NET.fc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "full_embed", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "full_embed", ")", ")", "\n", "# mu = x[:, :self.c_dim]", "\n", "# logvar = x[:, self.c_dim:]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.COND_NET.forward": [[107, 111], ["model.COND_NET.encode"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.encode"], ["", "def", "forward", "(", "self", ",", "full_embed", ")", ":", "\n", "        ", "c_code", "=", "self", ".", "encode", "(", "full_embed", ")", "\n", "# c_code = self.reparametrize(mu, logvar)", "\n", "return", "c_code", "#, mu, logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.MESH_NET.__init__": [[113, 129], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MESH_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_dim", "=", "3", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "self", ".", "feature_dim", ",", "32", ")", "\n", "self", ".", "pool1", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "32", ",", "32", ")", "#(32, 64)", "\n", "self", ".", "pool2", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#64, ratio=0.6)", "\n", "self", ".", "conv3", "=", "GCNConv", "(", "32", ",", "32", ")", "#(64, 128)", "\n", "self", ".", "pool3", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#(128, ratio=0.6)", "\n", "# self.item_embedding = torch.nn.Embedding(num_embeddings=df.item_id.max() +1, embedding_dim=self.feature_dim)", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "16", ")", "#(256, 128)", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "16", ",", "8", ")", "#(128, 64)", "\n", "# self.lin3 = torch.nn.Linear(8, 1) #(64, 1)", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "16", ")", "#(128)", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "8", ")", "#(64)", "\n", "self", ".", "act1", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "# self.act2 = torch.nn.ReLU()        ", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.MESH_NET.forward": [[131, 164], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MESH_NET.lin1", "model.MESH_NET.act1", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "model.MESH_NET.conv1", "model.MESH_NET.conv2", "model.MESH_NET.conv3", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.MESH_NET.lin2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "x", ",", "edge_index", ",", "batch", "=", "data", ".", "pos", ",", "data", ".", "edge_index", ",", "data", ".", "batch", "\n", "# x = self.item_embedding(x)", "\n", "# x = x.squeeze(1)        ", "\n", "# print(\"batch \",batch)", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool1", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool2", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool3", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "# print(\"x1 shape \", x1.shape)", "\n", "# print(\"x2 shape \", x2.shape)", "\n", "# print(\"x3 shape \", x3.shape)", "\n", "x", "=", "x1", "+", "x2", "+", "x3", "\n", "\n", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "# print(\"x shape1 \", x.shape)", "\n", "# x = self.lin2(x)", "\n", "# x = self.act2(x)      ", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "# print(\"x shape2 \", x.shape)", "\n", "x", "=", "torch", ".", "sigmoid", "(", "self", ".", "lin2", "(", "x", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# print(\"x shape3 \", x.shape)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.D_GET_LOGITS.__init__": [[168, 202], ["torch.Module.__init__", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.old_conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.old_conv3x1"], ["    ", "def", "__init__", "(", "self", ",", "ndf", ",", "nef", ",", "bcondition", "=", "True", ")", ":", "\n", "        ", "super", "(", "D_GET_LOGITS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "ndf", "\n", "self", ".", "ef_dim", "=", "nef", "\n", "self", ".", "bcondition", "=", "bcondition", "\n", "kernel_length", "=", "41", "\n", "if", "bcondition", ":", "\n", "            ", "self", ".", "convd1d", "=", "nn", ".", "ConvTranspose1d", "(", "ndf", "*", "8", ",", "ndf", "//", "2", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     old_conv3x1(ndf * 8 + nef, ndf * 8),", "\n", "#     nn.BatchNorm1d(ndf * 8),", "\n", "#     nn.LeakyReLU(0.2, inplace=True),", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n", "#     # nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "#     nn.Sigmoid()", "\n", "#     )", "\n", "self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "old_conv3x1", "(", "ndf", "//", "2", "+", "nef", ",", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n", "#     # nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "#     nn.Sigmoid())", "\n", "            ", "self", ".", "convd1d", "=", "nn", ".", "ConvTranspose1d", "(", "ndf", "*", "8", ",", "ndf", "//", "2", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", "\n", "self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.D_GET_LOGITS.forward": [[203, 223], ["model.D_GET_LOGITS.convd1d", "model.D_GET_LOGITS.outlogits", "model.D_GET_LOGITS.view", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", "=", "None", ")", ":", "\n", "# conditioning output", "\n", "        ", "h_code", "=", "self", ".", "convd1d", "(", "h_code", ")", "\n", "if", "self", ".", "bcondition", "and", "c_code", "is", "not", "None", ":", "\n", "#print(\"mode c_code1 \",c_code.size())", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ")", "\n", "#print(\"mode c_code2 \",c_code.size())", "\n", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "16", ")", "\n", "# state size (ngf+egf) x 16", "\n", "#print(\"mode c_code \",c_code.size())", "\n", "#print(\"mode h_code \",h_code.size())", "\n", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "h_code", ",", "c_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "h_code", "\n", "\n", "", "output", "=", "self", ".", "outlogits", "(", "h_c_code", ")", "\n", "\n", "return", "output", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_G.__init__": [[229, 235], ["torch.Module.__init__", "model.STAGE1_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "256", "*", "8", "\n", "self", ".", "ef_dim", "=", "10", "\n", "# self.z_dim = cfg.Z_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_G.define_module": [[236, 265], ["model.COND_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.upBlock4", "model.upBlock4", "model.upBlock4", "model.upBlock2", "model.upBlock2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "kernel_length", "=", "41", "\n", "ninput", "=", "self", ".", "ef_dim", "#self.z_dim + self.ef_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "# TEXT.DIMENSION -> GAN.CONDITION_DIM", "\n", "# self.ca_net = CA_NET()", "\n", "self", ".", "cond_net", "=", "COND_NET", "(", ")", "\n", "# self.mesh_net = MESH_NET()", "\n", "# -> ngf x 16", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ninput", ",", "ngf", "*", "16", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "16", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "\n", "# ngf x 16 -> ngf/2 x 64", "\n", "self", ".", "upsample1", "=", "upBlock4", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "# -> ngf/4 x 256", "\n", "self", ".", "upsample2", "=", "upBlock4", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "# -> ngf/8 x 1024", "\n", "self", ".", "upsample3", "=", "upBlock4", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "# -> ngf/16 x 4096", "\n", "self", ".", "upsample4", "=", "upBlock2", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "self", ".", "upsample5", "=", "upBlock2", "(", "ngf", "//", "16", ",", "ngf", "//", "16", ")", "\n", "# -> 1 x 4096", "\n", "self", ".", "RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose1d", "(", "ngf", "//", "16", ",", "1", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", ",", "\n", "# old_conv3x1(ngf // 16, 1), # conv3x3(ngf // 16, 3),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_G.forward": [[266, 297], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.STAGE1_G.cond_net", "model.STAGE1_G.fc", "model.STAGE1_G.view", "model.STAGE1_G.upsample1", "model.STAGE1_G.upsample2", "model.STAGE1_G.upsample3", "model.STAGE1_G.upsample4", "model.STAGE1_G.upsample5", "model.STAGE1_G.RIR"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text_embedding", ",", "mesh_embed", ")", ":", "\n", "# mesh_embed = self.mesh_net(data)", "\n", "\n", "\n", "# c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "# c_code = self.cond_net(text_embedding)", "\n", "# print(\"mesh_embed \", mesh_embed.shape)", "\n", "# print(\"text_embedding \", text_embedding.shape)", "\n", "        ", "full_embed", "=", "torch", ".", "cat", "(", "(", "mesh_embed", ",", "text_embedding", ")", ",", "1", ")", "\n", "c_code", "=", "self", ".", "cond_net", "(", "full_embed", ")", "\n", "\n", "h_code", "=", "self", ".", "fc", "(", "c_code", ")", "\n", "\n", "h_code", "=", "h_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "16", ")", "\n", "# print(\"h_code 1 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample1", "(", "h_code", ")", "\n", "# print(\"h_code 2 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample2", "(", "h_code", ")", "\n", "# print(\"h_code 3 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample3", "(", "h_code", ")", "\n", "# print(\"h_code 4 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample4", "(", "h_code", ")", "\n", "h_code", "=", "self", ".", "upsample5", "(", "h_code", ")", "\n", "# print(\"h_code 5 \",h_code.size())", "\n", "# # state size 3 x 64 x 64", "\n", "fake_RIR", "=", "self", ".", "RIR", "(", "h_code", ")", "\n", "# print(\"fake_RIR \",fake_RIR.size())", "\n", "# # return None, fake_RIR, mu, logvar", "\n", "# #print(\"generator \", text_embedding.size())", "\n", "# return None, fake_RIR, text_embedding #c_code", "\n", "return", "None", ",", "fake_RIR", ",", "c_code", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_D.__init__": [[300, 305], ["torch.Module.__init__", "model.STAGE1_D.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "96", "\n", "self", ".", "ef_dim", "=", "256", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_D.define_module": [[306, 329], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.D_GET_LOGITS", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", ",", "nef", "=", "self", ".", "df_dim", ",", "self", ".", "ef_dim", "\n", "kernel_length", "=", "41", "\n", "self", ".", "encode_RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "6", ",", "ndf", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 1024", "\n", "nn", ".", "Conv1d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size (ndf*2) x 256", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# # state size (ndf*4) x 64", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "8", ")", ",", "\n", "# state size (ndf * 8) x 16)", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "get_cond_logits", "=", "D_GET_LOGITS", "(", "ndf", ",", "nef", ")", "\n", "self", ".", "get_uncond_logits", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.STAGE1_D.forward": [[330, 336], ["model.STAGE1_D.encode_RIR"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "RIRs", ")", ":", "\n", "#print(\"model RIRs \",RIRs.size())", "\n", "        ", "RIR_embedding", "=", "self", ".", "encode_RIR", "(", "RIRs", ")", "\n", "#print(\"models RIR_embedding \",RIR_embedding.size())", "\n", "\n", "return", "RIR_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.conv3x1": [[10, 15], ["torch.Conv1d"], "function", ["None"], ["def", "conv3x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "41", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "20", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.old_conv3x1": [[16, 21], ["torch.Conv1d"], "function", ["None"], ["", "def", "old_conv3x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "3", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# def convn3x1(in_planes, out_planes, stride=1):", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.upBlock4": [[28, 39], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["", "def", "upBlock4", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "kernel_length", "=", "41", "\n", "stride", "=", "4", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "19", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "", "def", "upBlock2", "(", "in_planes", ",", "out_planes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.upBlock2": [[39, 50], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["", "def", "upBlock2", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "kernel_length", "=", "41", "\n", "stride", "=", "2", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "20", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.evaluate.model.sameBlock": [[51, 59], ["torch.Sequential", "model.conv3x1", "torch.BatchNorm1d", "torch.PReLU"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["", "def", "sameBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "conv3x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.main.parse_args": [[25, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.main.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a GAN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "'birds_stage1.yml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "dest", "=", "'data_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--manualSeed'", ",", "type", "=", "int", ",", "help", "=", "'manual seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.trainer.GANTrainer.__init__": [[37, 58], ["miscc.config.cfg.GPU_ID.split", "len", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "int"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "FLAG", ":", "\n", "            ", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Model'", ")", "\n", "self", ".", "model_dir_RT", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Model_RT'", ")", "\n", "self", ".", "RIR_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'RIR'", ")", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Log'", ")", "\n", "mkdir_p", "(", "self", ".", "model_dir", ")", "\n", "mkdir_p", "(", "self", ".", "model_dir_RT", ")", "\n", "mkdir_p", "(", "self", ".", "RIR_dir", ")", "\n", "mkdir_p", "(", "self", ".", "log_dir", ")", "\n", "# self.summary_writer = FileWriter(self.log_dir)", "\n", "\n", "", "self", ".", "max_epoch", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCH", "\n", "self", ".", "snapshot_interval", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_INTERVAL", "\n", "\n", "s_gpus", "=", "cfg", ".", "GPU_ID", ".", "split", "(", "','", ")", "\n", "self", ".", "gpus", "=", "[", "int", "(", "ix", ")", "for", "ix", "in", "s_gpus", "]", "\n", "self", ".", "num_gpus", "=", "len", "(", "self", ".", "gpus", ")", "\n", "self", ".", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "self", ".", "num_gpus", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.trainer.GANTrainer.load_network_stageI": [[60, 99], ["STAGE1_G", "STAGE1_G.apply", "print", "STAGE1_D", "STAGE1_D.apply", "print", "MESH_NET", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "STAGE1_G.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "STAGE1_D.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "MESH_NET.load_state_dict", "print", "STAGE1_G.cuda", "STAGE1_D.cuda", "MESH_NET.cuda"], "methods", ["None"], ["", "def", "load_network_stageI", "(", "self", ")", ":", "\n", "        ", "from", "model", "import", "STAGE1_G", ",", "STAGE1_D", ",", "MESH_NET", "\n", "netG", "=", "STAGE1_G", "(", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "\n", "print", "(", "netG", ")", "\n", "netD", "=", "STAGE1_D", "(", ")", "\n", "netD", ".", "apply", "(", "weights_init", ")", "\n", "print", "(", "netD", ")", "\n", "\n", "mesh_net", "=", "MESH_NET", "(", ")", "\n", "\n", "\n", "\n", "if", "cfg", ".", "NET_G", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "NET_G", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netG", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "NET_G", ")", "\n", "", "if", "cfg", ".", "NET_D", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "NET_D", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netD", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "NET_D", ")", "\n", "", "if", "cfg", ".", "MESH_NET", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "MESH_NET", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "mesh_net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "MESH_NET", ")", "\n", "\n", "\n", "", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "netG", ".", "cuda", "(", ")", "\n", "netD", ".", "cuda", "(", ")", "\n", "mesh_net", ".", "cuda", "(", ")", "\n", "", "return", "netG", ",", "netD", ",", "mesh_net", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.trainer.GANTrainer.train": [[139, 373], ["netG.to", "mesh_net.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "netG.parameters", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "miscc.utils.generate_complementary_filterbank", "cupy.asarray", "six.moves.range", "miscc.utils.save_model", "trainer.GANTrainer.load_network_stageI", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "netD.parameters", "mesh_net.parameters", "time.time", "time.time", "time.time", "time.time", "enumerate", "time.time", "time.time", "time.time", "time.time", "print", "print", "print", "print", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "netG_para.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data.cuda.cuda.pop", "data.cuda.cuda.pop", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "netD.zero_grad", "miscc.utils.compute_discriminator_loss", "errD_total.backward", "torch.RMSprop.step", "netG.zero_grad", "mesh_net.zero_grad", "miscc.utils.compute_generator_loss", "errG_total.backward", "torch.RMSprop.step", "torch.RMSprop.step", "six.moves.range", "len", "open", "myfile.write", "miscc.utils.save_model", "miscc.utils.save_model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.array", "numpy.array", "real_RIRs.cuda.cuda.cuda", "txt_embedding.cuda.cuda.cuda", "data.cuda.cuda.cuda", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "netG.zero_grad", "mesh_net.zero_grad", "miscc.utils.compute_generator_loss", "errG_total.backward", "torch.RMSprop.step", "torch.RMSprop.step", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "miscc.utils.save_RIR_results", "len", "miscc.utils.save_RIR_results"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.generate_complementary_filterbank", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_discriminator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_generator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_generator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results"], ["", "def", "train", "(", "self", ",", "data_loader", ",", "stage", "=", "1", ")", ":", "\n", "        ", "if", "stage", "==", "1", ":", "\n", "            ", "netG", ",", "netD", ",", "mesh_net", "=", "self", ".", "load_network_stageI", "(", ")", "\n", "# else:", "\n", "#     netG, netD = self.load_network_stageII()", "\n", "\n", "", "netG", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "mesh_net", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "# nz = cfg.Z_DIM", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", "# noise = Variable(torch.FloatTensor(batch_size, nz))", "\n", "# fixed_noise = \\", "\n", "#     Variable(torch.FloatTensor(batch_size, nz).normal_(0, 1),", "\n", "#              volatile=True)", "\n", "real_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "1", ")", ")", "\n", "fake_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "0", ")", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "# noise, fixed_noise = noise.cuda(), fixed_noise.cuda()", "\n", "            ", "real_labels", ",", "fake_labels", "=", "real_labels", ".", "cuda", "(", ")", ",", "fake_labels", ".", "cuda", "(", ")", "\n", "\n", "", "generator_lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", "\n", "mesh_lr", "=", "cfg", ".", "TRAIN", ".", "MESH_LR", "\n", "discriminator_lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", "\n", "lr_decay_step", "=", "cfg", ".", "TRAIN", ".", "LR_DECAY_EPOCH", "\n", "# optimizerD = \\", "\n", "#     optim.Adam(netD.parameters(),", "\n", "#                lr=cfg.TRAIN.DISCRIMINATOR_LR, betas=(0.5, 0.999))", "\n", "optimizerD", "=", "optim", ".", "RMSprop", "(", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", ")", "\n", "# optimizerD =optim.Adadelta(netD.parameters())", "\n", "# optimizerD = optim.Adagrad(netD.parameters(),lr=cfg.TRAIN.DISCRIMINATOR_LR)", "\n", "netG_para", "=", "[", "]", "\n", "for", "p", "in", "netG", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "netG_para", ".", "append", "(", "p", ")", "\n", "# optimizerG = optim.Adam(netG_para,", "\n", "#                         lr=cfg.TRAIN.GENERATOR_LR,", "\n", "#                         betas=(0.5, 0.999))", "\n", "", "", "optimizerG", "=", "optim", ".", "RMSprop", "(", "netG_para", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", ")", "\n", "\n", "optimizerM", "=", "optim", ".", "RMSprop", "(", "mesh_net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "MESH_LR", ")", "\n", "# optimizerG = optim.Adadelta(netG_para)", "\n", "\n", "# optimizerM = optim.Adadelta(mesh_net.parameters())", "\n", "# optimizerG = optim.Adagrad(netG_para,lr=cfg.TRAIN.GENERATOR_LR)", "\n", "# optimizerM =optim.Adagrad(mesh_net.parameters(),lr=cfg.TRAIN.MESH_LR)", "\n", "count", "=", "0", "\n", "least_RT", "=", "10", "\n", "L1_error_temp", "=", "150", "/", "4096", "\n", "bands", "=", "[", "125", ",", "250", ",", "500", ",", "1000", ",", "2000", ",", "4000", "]", "# which frequency bands are we interested in", "\n", "filter_length", "=", "16384", "# a magic number, not need to tweak this much", "\n", "fs", "=", "16000", "\n", "# only generate filters once and keep using them, that means you need to know the samplerate beforehand or convert to a fixed samplerate", "\n", "filters", "=", "generate_complementary_filterbank", "(", "fc", "=", "bands", ",", "fs", "=", "fs", ",", "filter_order", "=", "4", ",", "filter_length", "=", "filter_length", ",", "power", "=", "True", ")", "\n", "filters", "=", "cp", ".", "asarray", "(", "[", "[", "filters", "]", "]", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "max_epoch", ")", ":", "\n", "            ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch", "%", "lr_decay_step", "==", "0", "and", "epoch", ">", "0", ":", "\n", "                ", "generator_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerG", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "generator_lr", "\n", "", "discriminator_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerD", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "discriminator_lr", "\n", "\n", "", "mesh_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerM", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "mesh_lr", "\n", "\n", "# b1=0", "\n", "# b2=0", "\n", "# b3=0", "\n", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ",", "0", ")", ":", "\n", "######################################################", "\n", "# (1) Prepare training data", "\n", "######################################################", "\n", "# real_RIR_cpu, txt_embedding = data", "\n", "# b1 = time.time()", "\n", "# print(\"Time 1   \",(b1-b3))", "\n", "                ", "real_RIR_cpu", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", "[", "'RIR'", "]", ")", ")", "\n", "txt_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", "[", "'embeddings'", "]", ")", ")", "\n", "\n", "data", ".", "pop", "(", "'RIR'", ")", "\n", "data", ".", "pop", "(", "'embeddings'", ")", "\n", "\n", "\n", "real_RIRs", "=", "Variable", "(", "real_RIR_cpu", ")", "\n", "txt_embedding", "=", "Variable", "(", "txt_embedding", ")", "\n", "data", "[", "'edge_index'", "]", "=", "Variable", "(", "data", "[", "'edge_index'", "]", ")", "\n", "data", "[", "'pos'", "]", "=", "Variable", "(", "data", "[", "'pos'", "]", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "                    ", "real_RIRs", "=", "real_RIRs", ".", "cuda", "(", ")", "\n", "txt_embedding", "=", "txt_embedding", ".", "cuda", "(", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "#######################################################", "\n", "# (2) Generate fake images (have to modify)", "\n", "######################################################", "\n", "# noise.data.normal_(0, 1)", "\n", "# inputs = (txt_embedding, noise)", "\n", "# b2 = time.time()", "\n", "#mesh_net", "\n", "# print(\"Time 2   \",(b2-b1))", "\n", "", "mesh_embed", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "mesh_net", ",", "data", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "# print(\"came here\")", "\n", "# b3 = time.time()", "\n", "# print(\"Time 3   \",(b3-b2))", "\n", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "# _, fake_RIRs, mu, logvar = \\", "\n", "#     nn.parallel.data_parallel(netG, inputs, self.gpus)", "\n", "\n", "# print(\"self.gpus \", [self.gpus[0]])", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "# input(\"AAA \")", "\n", "\n", "############################", "\n", "# (3) Update D network", "\n", "###########################", "\n", "netD", ".", "zero_grad", "(", ")", "\n", "errD", ",", "errD_real", ",", "errD_wrong", ",", "errD_fake", "=", "compute_discriminator_loss", "(", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "fake_labels", ",", "\n", "c_code", ",", "self", ".", "gpus", ")", "\n", "\n", "errD_total", "=", "errD", "*", "5", "\n", "errD_total", ".", "backward", "(", ")", "\n", "optimizerD", ".", "step", "(", ")", "\n", "############################", "\n", "# (2) Update G network", "\n", "###########################", "\n", "# kl_loss = KL_loss(mu, logvar)", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "mesh_net", ".", "zero_grad", "(", ")", "\n", "errG", ",", "L1_error", ",", "divergence_loss0", ",", "divergence_loss1", ",", "divergence_loss2", ",", "divergence_loss3", ",", "divergence_loss4", ",", "divergence_loss5", ",", "MSE_error1", ",", "MSE_error2", ",", "criterion_loss", "=", "compute_generator_loss", "(", "epoch", ",", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "c_code", ",", "filters", ",", "self", ".", "gpus", ")", "\n", "errG_total", "=", "errG", "*", "5", "#+ kl_loss * cfg.TRAIN.COEFF.KL", "\n", "\n", "errG_total", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "# errG_total.backward()", "\n", "optimizerM", ".", "step", "(", ")", "\n", "for", "p", "in", "range", "(", "2", ")", ":", "\n", "\n", "# _, fake_RIRs, mu, logvar = \\", "\n", "#     nn.parallel.data_parallel(netG, inputs, self.gpus)", "\n", "                    ", "mesh_embed", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "mesh_net", ",", "data", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "mesh_net", ".", "zero_grad", "(", ")", "\n", "errG", ",", "L1_error", ",", "divergence_loss0", ",", "divergence_loss1", ",", "divergence_loss2", ",", "divergence_loss3", ",", "divergence_loss4", ",", "divergence_loss5", ",", "MSE_error1", ",", "MSE_error2", ",", "criterion_loss", "=", "compute_generator_loss", "(", "epoch", ",", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "c_code", ",", "filters", ",", "self", ".", "gpus", ")", "\n", "# kl_loss = KL_loss(mu, logvar)", "\n", "errG_total", "=", "errG", "*", "5", "#+ kl_loss * cfg.TRAIN.COEFF.KL", "\n", "errG_total", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "# errG_total.backward()", "\n", "optimizerM", ".", "step", "(", ")", "\n", "\n", "", "count", "=", "count", "+", "1", "\n", "# print(\"count \",count)", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "# summary_D = summary.scalar('D_loss', errD.data[0])", "\n", "# summary_D_r = summary.scalar('D_loss_real', errD_real)", "\n", "# summary_D_w = summary.scalar('D_loss_wrong', errD_wrong)", "\n", "# summary_D_f = summary.scalar('D_loss_fake', errD_fake)", "\n", "# summary_G = summary.scalar('G_loss', errG.data[0])", "\n", "# summary_KL = summary.scalar('KL_loss', kl_loss.data[0])", "\n", "# summary_D = summary.scalar('D_loss', errD.data)", "\n", "# summary_D_r = summary.scalar('D_loss_real', errD_real)", "\n", "# summary_D_w = summary.scalar('D_loss_wrong', errD_wrong)", "\n", "# summary_D_f = summary.scalar('D_loss_fake', errD_fake)", "\n", "# summary_G = summary.scalar('G_loss', errG.data)", "\n", "# summary_KL = summary.scalar('KL_loss', kl_loss.data)", "\n", "\n", "# self.summary_writer.add_summary(summary_D, count)", "\n", "# self.summary_writer.add_summary(summary_D_r, count)", "\n", "# self.summary_writer.add_summary(summary_D_w, count)", "\n", "# self.summary_writer.add_summary(summary_D_f, count)", "\n", "# self.summary_writer.add_summary(summary_G, count)", "\n", "# self.summary_writer.add_summary(summary_KL, count)", "\n", "\n", "# save the image result for each epoch", "\n", "                    ", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "lr_fake", ",", "fake", ",", "_", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "if", "(", "epoch", "%", "self", ".", "snapshot_interval", "==", "0", ")", ":", "\n", "                        ", "save_RIR_results", "(", "real_RIR_cpu", ",", "fake", ",", "epoch", ",", "self", ".", "RIR_dir", ")", "\n", "if", "lr_fake", "is", "not", "None", ":", "\n", "                            ", "save_RIR_results", "(", "None", ",", "lr_fake", ",", "epoch", ",", "self", ".", "RIR_dir", ")", "\n", "", "", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "# print('''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f Loss_KL: %.4f", "\n", "#          Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f", "\n", "#          Total Time: %.2fsec", "\n", "#       '''", "\n", "#       % (epoch, self.max_epoch, i, len(data_loader),", "\n", "#          errD.data[0], errG.data[0], kl_loss.data[0],", "\n", "#          errD_real, errD_wrong, errD_fake, (end_t - start_t)))", "\n", "# print('''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f Loss_KL: %.4f", "\n", "#          Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f", "\n", "#          Total Time: %.2fsec", "\n", "#       '''", "\n", "#       % (epoch, self.max_epoch, i, len(data_loader),", "\n", "#          errD.data, errG.data, kl_loss.data,", "\n", "#          errD_real, errD_wrong, errD_fake, (end_t - start_t)))", "\n", "print", "(", "'''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f\n                     Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f   L1_error  %.4f \n                     Total Time: %.2fsec\n                  '''", "\n", "%", "(", "epoch", ",", "self", ".", "max_epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "\n", "errD", ".", "data", ",", "errG", ".", "data", ",", "\n", "errD_real", ",", "errD_wrong", ",", "errD_fake", ",", "L1_error", "*", "4096", ",", "(", "end_t", "-", "start_t", ")", ")", ")", "\n", "print", "(", "\"Divergence errors \"", ",", "divergence_loss0", ",", "\"  \"", ",", "divergence_loss1", ",", "\"  \"", ",", "divergence_loss2", ",", "\"  \"", ",", "divergence_loss3", ",", "\"  \"", ",", "divergence_loss4", ",", "\"  \"", ",", "divergence_loss5", ",", "\"  \"", ")", "\n", "print", "(", "\"MSE error1  \"", ",", "MSE_error1", ")", "\n", "print", "(", "\"MSE error2 \"", ",", "MSE_error2", ")", "\n", "print", "(", "\"criterion_loss  \"", ",", "criterion_loss", ")", "\n", "\n", "store_to_file", "=", "\"[{}/{}][{}/{}] Loss_D: {:.4f} Loss_G: {:.4f} Loss_real: {:.4f} Loss_wrong:{:.4f} Loss_fake {:.4f}  MSE Error:{:.4f} Total Time: {:.2f}sec\"", ".", "format", "(", "epoch", ",", "self", ".", "max_epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "\n", "errD", ".", "data", ",", "errG", ".", "data", ",", "errD_real", ",", "errD_wrong", ",", "errD_fake", ",", "L1_error", "*", "4096", ",", "(", "end_t", "-", "start_t", ")", ")", "\n", "store_to_file", "=", "store_to_file", "+", "\"\\n\"", "\n", "with", "open", "(", "\"errors.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "store_to_file", ")", "\n", "\n", "", "if", "(", "L1_error", "<", "L1_error_temp", ")", ":", "\n", "                ", "L1_error_temp", "=", "L1_error", "\n", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "epoch", ",", "self", ".", "model_dir_RT", ")", "\n", "", "if", "epoch", "%", "self", ".", "snapshot_interval", "==", "0", ":", "\n", "                ", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "epoch", ",", "self", ".", "model_dir", ")", "\n", "#", "\n", "", "", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "self", ".", "max_epoch", ",", "self", ".", "model_dir", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.trainer.GANTrainer.sample": [[377, 469], ["netG.eval", "len", "six.moves.range", "numpy.array", "miscc.utils.mkdir_p", "numpy.minimum", "trainer.GANTrainer.load_network_stageI", "trainer.GANTrainer.load_network_stageII", "open", "pickle.load", "embeddings_list.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "time.time", "time.time", "time.time", "time.time", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "time.time", "time.time", "time.time", "time.time", "time_list.append", "print", "six.moves.range", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "txt_embedding.cuda.cuda.cuda", "print", "fake_RIRs[].data.cpu().numpy", "numpy.array", "res_buffer.append", "numpy.zeros", "enumerate", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "numpy.array", "str", "fake_RIRs[].data.cpu", "len", "numpy.max", "int", "numpy.shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI"], ["", "def", "sample", "(", "self", ",", "file_path", ",", "stage", "=", "1", ")", ":", "\n", "        ", "if", "stage", "==", "1", ":", "\n", "            ", "netG", ",", "_", "=", "self", ".", "load_network_stageI", "(", ")", "\n", "", "else", ":", "\n", "            ", "netG", ",", "_", "=", "self", ".", "load_network_stageII", "(", ")", "\n", "", "netG", ".", "eval", "(", ")", "\n", "\n", "time_list", "=", "[", "]", "\n", "\n", "\n", "\n", "\n", "embedding_path", "=", "file_path", "\n", "with", "open", "(", "embedding_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "embeddings_pickle", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "\n", "", "embeddings_list", "=", "[", "]", "\n", "num_embeddings", "=", "len", "(", "embeddings_pickle", ")", "\n", "for", "b", "in", "range", "(", "num_embeddings", ")", ":", "\n", "            ", "embeddings_list", ".", "append", "(", "embeddings_pickle", "[", "b", "]", ")", "\n", "\n", "", "embeddings", "=", "np", ".", "array", "(", "embeddings_list", ")", "\n", "\n", "save_dir_GAN", "=", "\"Generated_RIRs\"", "\n", "mkdir_p", "(", "save_dir_GAN", ")", "\n", "\n", "\n", "\n", "normalize_embedding", "=", "[", "]", "\n", "\n", "\n", "batch_size", "=", "np", ".", "minimum", "(", "num_embeddings", ",", "self", ".", "batch_size", ")", "\n", "\n", "\n", "count", "=", "0", "\n", "count_this", "=", "0", "\n", "while", "count", "<", "num_embeddings", ":", "\n", "\n", "            ", "iend", "=", "count", "+", "batch_size", "\n", "if", "iend", ">", "num_embeddings", ":", "\n", "                ", "iend", "=", "num_embeddings", "\n", "count", "=", "num_embeddings", "-", "batch_size", "\n", "", "embeddings_batch", "=", "embeddings", "[", "count", ":", "iend", "]", "\n", "\n", "\n", "\n", "txt_embedding", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "embeddings_batch", ")", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "                ", "txt_embedding", "=", "txt_embedding", ".", "cuda", "(", ")", "\n", "\n", "#######################################################", "\n", "# (2) Generate fake images", "\n", "######################################################", "\n", "", "start_t", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "(", "txt_embedding", ",", "data", ")", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "end_t", "=", "time", ".", "time", "(", ")", "\n", "diff_t", "=", "end_t", "-", "start_t", "\n", "time_list", ".", "append", "(", "diff_t", ")", "\n", "\n", "RIR_batch_size", "=", "batch_size", "#int(batch_size/2)", "\n", "print", "(", "\"batch_size \"", ",", "RIR_batch_size", ")", "\n", "channel_size", "=", "64", "\n", "\n", "for", "i", "in", "range", "(", "channel_size", ")", ":", "\n", "                ", "fs", "=", "16000", "\n", "wave_name", "=", "\"RIR-\"", "+", "str", "(", "count", "+", "i", ")", "+", "\".wav\"", "\n", "save_name_GAN", "=", "'%s/%s'", "%", "(", "save_dir_GAN", ",", "wave_name", ")", "\n", "print", "(", "\"wave : \"", ",", "save_name_GAN", ")", "\n", "res", "=", "{", "}", "\n", "res_buffer", "=", "[", "]", "\n", "rate", "=", "16000", "\n", "res", "[", "'rate'", "]", "=", "rate", "\n", "\n", "wave_GAN", "=", "fake_RIRs", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wave_GAN", "=", "np", ".", "array", "(", "wave_GAN", "[", "0", "]", ")", "\n", "\n", "\n", "res_buffer", ".", "append", "(", "wave_GAN", ")", "\n", "res", "[", "'samples'", "]", "=", "np", ".", "zeros", "(", "(", "len", "(", "res_buffer", ")", ",", "np", ".", "max", "(", "[", "len", "(", "ps", ")", "for", "ps", "in", "res_buffer", "]", ")", ")", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "res_buffer", ")", ":", "\n", "                    ", "res", "[", "'samples'", "]", "[", "i", ",", ":", "len", "(", "c", ")", "]", "=", "c", "\n", "\n", "", "w", "=", "WaveWriter", "(", "save_name_GAN", ",", "channels", "=", "np", ".", "shape", "(", "res", "[", "'samples'", "]", ")", "[", "0", "]", ",", "samplerate", "=", "int", "(", "res", "[", "'rate'", "]", ")", ")", "\n", "w", ".", "write", "(", "np", ".", "array", "(", "res", "[", "'samples'", "]", ")", ")", "\n", "\n", "", "print", "(", "\"counter = \"", ",", "count", ")", "\n", "count", "=", "count", "+", "64", "\n", "count_this", "=", "count_this", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.ResBlock.__init__": [[63, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ",", "\n", "# nn.ReLU(True),", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "#nn.ReLU(inplace=True)", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.ResBlock.forward": [[74, 80], ["model.ResBlock.block", "model.ResBlock.relu"], "methods", ["None"], ["        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.COND_NET.__init__": [[115, 121], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["self", ".", "feature_dim", "=", "3", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "self", ".", "feature_dim", ",", "32", ")", "\n", "self", ".", "pool1", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "32", ",", "32", ")", "#(32, 64)", "\n", "self", ".", "pool2", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#64, ratio=0.6)", "\n", "self", ".", "conv3", "=", "GCNConv", "(", "32", ",", "32", ")", "#(64, 128)", "\n", "self", ".", "pool3", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#(128, ratio=0.6)", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.COND_NET.encode": [[122, 127], ["model.COND_NET.relu", "model.COND_NET.fc"], "methods", ["None"], ["# self.item_embedding = torch.nn.Embedding(num_embeddings=df.item_id.max() +1, embedding_dim=self.feature_dim)", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "16", ")", "#(256, 128)", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "16", ",", "8", ")", "#(128, 64)", "\n", "# self.lin3 = torch.nn.Linear(8, 1) #(64, 1)", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "16", ")", "#(128)", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "8", ")", "#(64)", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.COND_NET.forward": [[137, 141], ["model.COND_NET.encode"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.encode"], ["x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool1", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.MESH_NET.__init__": [[143, 159], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["x2", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool3", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "# print(\"x1 shape \", x1.shape)", "\n", "# print(\"x2 shape \", x2.shape)", "\n", "# print(\"x3 shape \", x3.shape)", "\n", "x", "=", "x1", "+", "x2", "+", "x3", "\n", "\n", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "# print(\"x shape1 \", x.shape)", "\n", "# x = self.lin2(x)", "\n", "# x = self.act2(x)      ", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.MESH_NET.forward": [[161, 194], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MESH_NET.lin1", "model.MESH_NET.act1", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "model.MESH_NET.conv1", "model.MESH_NET.conv2", "model.MESH_NET.conv3", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.MESH_NET.lin2"], "methods", ["None"], ["x", "=", "torch", ".", "sigmoid", "(", "self", ".", "lin2", "(", "x", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# print(\"x shape3 \", x.shape)", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "class", "D_GET_LOGITS", "(", "nn", ".", "Module", ")", ":", "#not chnaged yet", "\n", "    ", "def", "__init__", "(", "self", ",", "ndf", ",", "nef", ",", "bcondition", "=", "True", ")", ":", "\n", "        ", "super", "(", "D_GET_LOGITS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "ndf", "\n", "self", ".", "ef_dim", "=", "nef", "\n", "self", ".", "bcondition", "=", "bcondition", "\n", "kernel_length", "=", "41", "\n", "if", "bcondition", ":", "\n", "            ", "self", ".", "convd1d", "=", "nn", ".", "ConvTranspose1d", "(", "ndf", "*", "8", ",", "ndf", "//", "2", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     old_conv3x1(ndf * 8 + nef, ndf * 8),", "\n", "#     nn.BatchNorm1d(ndf * 8),", "\n", "#     nn.LeakyReLU(0.2, inplace=True),", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n", "#     # nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "#     nn.Sigmoid()", "\n", "#     )", "\n", "self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "old_conv3x1", "(", "ndf", "//", "2", "+", "nef", ",", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.D_GET_LOGITS.__init__": [[198, 232], ["torch.Module.__init__", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.old_conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.old_conv3x1"], ["self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", "=", "None", ")", ":", "\n", "# conditioning output", "\n", "        ", "h_code", "=", "self", ".", "convd1d", "(", "h_code", ")", "\n", "if", "self", ".", "bcondition", "and", "c_code", "is", "not", "None", ":", "\n", "#print(\"mode c_code1 \",c_code.size())", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ")", "\n", "#print(\"mode c_code2 \",c_code.size())", "\n", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "16", ")", "\n", "# state size (ngf+egf) x 16", "\n", "#print(\"mode c_code \",c_code.size())", "\n", "#print(\"mode h_code \",h_code.size())", "\n", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "h_code", ",", "c_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "h_code", "\n", "\n", "", "output", "=", "self", ".", "outlogits", "(", "h_c_code", ")", "\n", "\n", "return", "output", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "# ############# Networks for stageI GAN #############", "\n", "\n", "\n", "", "", "class", "STAGE1_G", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "256", "*", "8", "\n", "self", ".", "ef_dim", "=", "10", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.D_GET_LOGITS.forward": [[233, 253], ["model.D_GET_LOGITS.convd1d", "model.D_GET_LOGITS.outlogits", "model.D_GET_LOGITS.view", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["# self.z_dim = cfg.Z_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "kernel_length", "=", "41", "\n", "ninput", "=", "self", ".", "ef_dim", "#self.z_dim + self.ef_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "# TEXT.DIMENSION -> GAN.CONDITION_DIM", "\n", "# self.ca_net = CA_NET()", "\n", "self", ".", "cond_net", "=", "COND_NET", "(", ")", "\n", "# self.mesh_net = MESH_NET()", "\n", "# -> ngf x 16", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ninput", ",", "ngf", "*", "16", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "16", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "\n", "# ngf x 16 -> ngf/2 x 64", "\n", "self", ".", "upsample1", "=", "upBlock4", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "# -> ngf/4 x 256", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_G.__init__": [[259, 265], ["torch.Module.__init__", "model.STAGE1_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["self", ".", "upsample5", "=", "upBlock2", "(", "ngf", "//", "16", ",", "ngf", "//", "16", ")", "\n", "# -> 1 x 4096", "\n", "self", ".", "RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose1d", "(", "ngf", "//", "16", ",", "1", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", ",", "\n", "# old_conv3x1(ngf // 16, 1), # conv3x3(ngf // 16, 3),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_G.define_module": [[266, 295], ["model.COND_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.upBlock4", "model.upBlock4", "model.upBlock4", "model.upBlock2", "model.upBlock2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2"], ["", "def", "forward", "(", "self", ",", "text_embedding", ",", "mesh_embed", ")", ":", "\n", "# mesh_embed = self.mesh_net(data)", "\n", "\n", "\n", "# c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "# c_code = self.cond_net(text_embedding)", "\n", "# print(\"mesh_embed \", mesh_embed.shape)", "\n", "# print(\"text_embedding \", text_embedding.shape)", "\n", "        ", "full_embed", "=", "torch", ".", "cat", "(", "(", "mesh_embed", ",", "text_embedding", ")", ",", "1", ")", "\n", "c_code", "=", "self", ".", "cond_net", "(", "full_embed", ")", "\n", "\n", "h_code", "=", "self", ".", "fc", "(", "c_code", ")", "\n", "\n", "h_code", "=", "h_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "16", ")", "\n", "# print(\"h_code 1 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample1", "(", "h_code", ")", "\n", "# print(\"h_code 2 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample2", "(", "h_code", ")", "\n", "# print(\"h_code 3 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample3", "(", "h_code", ")", "\n", "# print(\"h_code 4 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample4", "(", "h_code", ")", "\n", "h_code", "=", "self", ".", "upsample5", "(", "h_code", ")", "\n", "# print(\"h_code 5 \",h_code.size())", "\n", "# # state size 3 x 64 x 64", "\n", "fake_RIR", "=", "self", ".", "RIR", "(", "h_code", ")", "\n", "# print(\"fake_RIR \",fake_RIR.size())", "\n", "# # return None, fake_RIR, mu, logvar", "\n", "# #print(\"generator \", text_embedding.size())", "\n", "# return None, fake_RIR, text_embedding #c_code", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_G.forward": [[296, 327], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.STAGE1_G.cond_net", "model.STAGE1_G.fc", "model.STAGE1_G.view", "model.STAGE1_G.upsample1", "model.STAGE1_G.upsample2", "model.STAGE1_G.upsample3", "model.STAGE1_G.upsample4", "model.STAGE1_G.upsample5", "model.STAGE1_G.RIR"], "methods", ["None"], ["return", "None", ",", "fake_RIR", ",", "c_code", "\n", "\n", "\n", "", "", "class", "STAGE1_D", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "96", "\n", "self", ".", "ef_dim", "=", "256", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", ",", "nef", "=", "self", ".", "df_dim", ",", "self", ".", "ef_dim", "\n", "kernel_length", "=", "41", "\n", "self", ".", "encode_RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "6", ",", "ndf", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 1024", "\n", "nn", ".", "Conv1d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size (ndf*2) x 256", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# # state size (ndf*4) x 64", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "8", ")", ",", "\n", "# state size (ndf * 8) x 16)", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "get_cond_logits", "=", "D_GET_LOGITS", "(", "ndf", ",", "nef", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_D.__init__": [[330, 335], ["torch.Module.__init__", "model.STAGE1_D.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["", "def", "forward", "(", "self", ",", "RIRs", ")", ":", "\n", "#print(\"model RIRs \",RIRs.size())", "\n", "        ", "RIR_embedding", "=", "self", ".", "encode_RIR", "(", "RIRs", ")", "\n", "#print(\"models RIR_embedding \",RIR_embedding.size())", "\n", "\n", "return", "RIR_embedding", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_D.define_module": [[336, 359], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.D_GET_LOGITS", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE1_D.forward": [[360, 366], ["model.STAGE1_D.encode_RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_G.__init__": [[370, 380], ["torch.Module.__init__", "model.STAGE2_G.STAGE1_G.parameters", "model.STAGE2_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_G._make_layer": [[381, 386], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_G.define_module": [[387, 419], ["model.COND_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.STAGE2_G._make_layer", "model.upBlock4", "model.upBlock4", "model.upBlock4", "model.sameBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.conv3x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.conv3x1", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G._make_layer", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.sameBlock", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_G.forward": [[420, 440], ["model.STAGE2_G.STAGE1_G", "stage1_RIR.detach.detach.detach", "model.STAGE2_G.encoder", "model.STAGE2_G.cond_net", "model.STAGE2_G.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.STAGE2_G.hr_joint", "model.STAGE2_G.residual", "model.STAGE2_G.upsample1", "model.STAGE2_G.upsample2", "model.STAGE2_G.upsample3", "model.STAGE2_G.upsample4", "model.STAGE2_G.RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_D.__init__": [[443, 448], ["torch.Module.__init__", "model.STAGE2_D.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_D.define_module": [[449, 479], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.D_GET_LOGITS", "model.D_GET_LOGITS", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.STAGE2_D.forward": [[480, 483], ["model.STAGE2_D.encode_RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.conv3x1": [[11, 16], ["torch.Conv1d"], "function", ["None"], ["    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "41", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "20", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "old_conv3x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.old_conv3x1": [[17, 22], ["torch.Conv1d"], "function", ["None"], ["    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "3", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# def convn3x1(in_planes, out_planes, stride=1):", "\n", "#     \"3x1 convolution with padding\"", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.upBlock4": [[29, 40], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["    ", "kernel_length", "=", "41", "\n", "stride", "=", "4", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "19", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "", "def", "upBlock2", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "kernel_length", "=", "41", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.upBlock2": [[40, 51], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["    ", "kernel_length", "=", "41", "\n", "stride", "=", "2", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "20", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n", "", "def", "sameBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR.model.sameBlock": [[52, 60], ["torch.Sequential", "model.conv3x1", "torch.BatchNorm1d", "torch.PReLU"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "conv3x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.config._merge_a_into_b": [[60, 91], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.config._merge_a_into_b"], ["def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "k", "not", "in", "b", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.config.cfg_from_file": [[93, 100], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.KL_loss": [[20, 25], ["mu.pow().add_().mul_().add_().add_", "torch.mean().mul_", "torch.mean().mul_", "mu.pow().add_().mul_().add_", "torch.mean", "torch.mean", "mu.pow().add_().mul_", "mu.pow().add_", "logvar.exp", "mu.pow"], "function", ["None"], ["def", "KL_loss", "(", "mu", ",", "logvar", ")", ":", "\n", "# -0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)", "\n", "    ", "KLD_element", "=", "mu", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "KLD", "=", "torch", ".", "mean", "(", "KLD_element", ")", ".", "mul_", "(", "-", "0.5", ")", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_discriminator_loss": [[27, 73], ["torch.BCELoss", "real_RIRs.size", "conditions.detach", "utils.convert_IR2EC_batch", "utils.convert_IR2EC_batch", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "nn.BCELoss.", "torch.parallel.data_parallel", "nn.BCELoss.", "torch.parallel.data_parallel", "nn.BCELoss.", "cupy.asarray", "cupy.asarray", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "nn.BCELoss.", "nn.BCELoss.", "fake_RIRs.to().detach", "fake_RIRs.to"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch"], ["", "def", "compute_discriminator_loss", "(", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "fake_labels", ",", "\n", "conditions", ",", "gpus", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "batch_size", "=", "real_RIRs", ".", "size", "(", "0", ")", "\n", "cond", "=", "conditions", ".", "detach", "(", ")", "\n", "fake", "=", "fake_RIRs", ".", "detach", "(", ")", "\n", "real_features", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ",", "(", "real_RIRs", ")", ",", "gpus", ")", "\n", "fake_features", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ",", "(", "fake", ")", ",", "gpus", ")", "\n", "# real pairs", "\n", "#print(\"util conditions \",cond.size())", "\n", "inputs", "=", "(", "real_features", ",", "cond", ")", "\n", "real_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_cond_logits", ",", "inputs", ",", "gpus", ")", "\n", "errD_real", "=", "criterion", "(", "real_logits", ",", "real_labels", ")", "\n", "# wrong pairs", "\n", "inputs", "=", "(", "real_features", "[", ":", "(", "batch_size", "-", "1", ")", "]", ",", "cond", "[", "1", ":", "]", ")", "\n", "wrong_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_cond_logits", ",", "inputs", ",", "gpus", ")", "\n", "errD_wrong", "=", "criterion", "(", "wrong_logits", ",", "fake_labels", "[", "1", ":", "]", ")", "\n", "# fake pairs", "\n", "inputs", "=", "(", "fake_features", ",", "cond", ")", "\n", "fake_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_cond_logits", ",", "inputs", ",", "gpus", ")", "\n", "errD_fake", "=", "criterion", "(", "fake_logits", ",", "fake_labels", ")", "\n", "\n", "if", "netD", ".", "get_uncond_logits", "is", "not", "None", ":", "\n", "        ", "real_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_uncond_logits", ",", "\n", "(", "real_features", ")", ",", "gpus", ")", "\n", "fake_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_uncond_logits", ",", "\n", "(", "fake_features", ")", ",", "gpus", ")", "\n", "uncond_errD_real", "=", "criterion", "(", "real_logits", ",", "real_labels", ")", "\n", "uncond_errD_fake", "=", "criterion", "(", "fake_logits", ",", "fake_labels", ")", "\n", "#", "\n", "errD", "=", "(", "(", "errD_real", "+", "uncond_errD_real", ")", "/", "2.", "+", "\n", "(", "errD_fake", "+", "errD_wrong", "+", "uncond_errD_fake", ")", "/", "3.", ")", "\n", "errD_real", "=", "(", "errD_real", "+", "uncond_errD_real", ")", "/", "2.", "\n", "errD_fake", "=", "(", "errD_fake", "+", "uncond_errD_fake", ")", "/", "2.", "\n", "", "else", ":", "\n", "        ", "errD", "=", "errD_real", "+", "(", "errD_fake", "+", "errD_wrong", ")", "*", "0.5", "\n", "", "return", "errD", ",", "errD_real", ".", "data", ",", "errD_wrong", ".", "data", ",", "errD_fake", ".", "data", "\n", "# return errD, errD_real.data[0], errD_wrong.data[0], errD_fake.data[0]", "\n", "\n", "\n", "\n", "", "def", "compute_generator_loss", "(", "epoch", ",", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "real_labels", ",", "conditions", ",", "filters", ",", "gpus", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_generator_loss": [[77, 195], ["torch.BCELoss", "torch.L1Loss", "torch.MSELoss", "conditions.detach", "utils.convert_IR2EC_batch", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "nn.L1Loss.", "nn.MSELoss.", "nn.MSELoss.", "utils.convert_IR2EC_batch", "utils.convert_IR2EC_batch", "nn.BCELoss.", "cupy.asarray", "cupy.asarray", "cupy.asarray", "nn.MSELoss.", "nn.MSELoss.", "nn.MSELoss.", "nn.MSELoss.", "nn.MSELoss.", "nn.MSELoss.", "torch.parallel.data_parallel", "nn.BCELoss.", "fake_RIRs.to().detach", "fake_RIRs.to().detach", "fake_RIRs.to", "fake_RIRs.to"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch"], ["# print(\"num\", real_RIRs.size(),real_RIRs.size()[0])", "\n", "# input(\"kk\")", "\n", "# print(\"real_RIRs \", real_RIRs.shape)", "\n", "# print(\"fake_RIRs \", fake_RIRs.shape)", "\n", "\n", "cond", "=", "conditions", ".", "detach", "(", ")", "\n", "fake_features", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ",", "(", "fake_RIRs", ")", ",", "gpus", ")", "\n", "# fake pairs", "\n", "inputs", "=", "(", "fake_features", ",", "cond", ")", "\n", "fake_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_cond_logits", ",", "inputs", ",", "gpus", ")", "\n", "L1_error", "=", "loss", "(", "real_RIRs", ",", "fake_RIRs", ")", "\n", "MSE_error1", "=", "loss1", "(", "real_RIRs", "[", ":", ",", ":", ",", "0", ":", "3968", "]", ",", "fake_RIRs", "[", ":", ",", ":", ",", "0", ":", "3968", "]", ")", "\n", "MSE_error2", "=", "loss1", "(", "real_RIRs", "[", ":", ",", ":", ",", "3968", ":", "4096", "]", ",", "fake_RIRs", "[", ":", ",", ":", ",", "3968", ":", "4096", "]", ")", "\n", "\n", "\n", "######################Energy Decay Start############################", "\n", "filter_length", "=", "16384", "# a magic number, not need to tweak this much", "\n", "mult1", "=", "10", "\n", "mult2", "=", "1", "\n", "\n", "real_ec", "=", "convert_IR2EC_batch", "(", "cp", ".", "asarray", "(", "real_RIRs", ")", ",", "filters", ",", "filter_length", ")", "\n", "fake_ec", "=", "convert_IR2EC_batch", "(", "cp", ".", "asarray", "(", "fake_RIRs", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ")", ",", "filters", ",", "filter_length", ")", "\n", "divergence_loss0", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "*", "mult1", "\n", "divergence_loss1", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "*", "mult1", "\n", "divergence_loss2", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "2", "]", ")", "*", "mult1", "\n", "divergence_loss3", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "3", "]", ")", "*", "mult1", "\n", "divergence_loss4", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "4", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "4", "]", ")", "*", "mult1", "\n", "divergence_loss5", "=", "loss1", "(", "real_ec", "[", ":", ",", ":", ",", ":", ",", "5", "]", ",", "fake_ec", "[", ":", ",", ":", ",", ":", ",", "5", "]", ")", "*", "mult2", "\n", "\n", "# print(\"divergence_loss0   \", divergence_loss0)", "\n", "# print(\"divergence_loss1   \", divergence_loss1)", "\n", "# print(\"divergence_loss2   \", divergence_loss2)", "\n", "# print(\"divergence_loss3   \", divergence_loss3)", "\n", "# print(\"divergence_loss4   \", divergence_loss4)", "\n", "# print(\"divergence_loss5   \", divergence_loss5)", "\n", "divergence_loss", "=", "divergence_loss0", "+", "divergence_loss1", "+", "divergence_loss2", "+", "divergence_loss3", "+", "divergence_loss4", "+", "divergence_loss5", "\n", "######################Energy Decay End############################", "\n", "\n", "\n", "\n", "# real_RIR_part_1 =real_RIRs[:,:,0:512]", "\n", "# real_RIR_part_2 =real_RIRs[:,:,512:1024]", "\n", "# real_RIR_part_3 =real_RIRs[:,:,1024:1536]", "\n", "# real_RIR_part_4 =real_RIRs[:,:,1536:2048]", "\n", "# real_RIR_part_5 =real_RIRs[:,:,2048:2560]", "\n", "# real_RIR_part_6 =real_RIRs[:,:,2560:3072]", "\n", "# real_RIR_part_7 =real_RIRs[:,:,3072:3584]", "\n", "# real_RIR_part_8 =real_RIRs[:,:,3584:4096]", "\n", "\n", "# mean_real_RIR_part_1 = torch.reshape(torch.mean(abs(real_RIR_part_1),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001 ", "\n", "# mean_real_RIR_part_2 = torch.reshape(torch.mean(abs(real_RIR_part_2),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_3 = torch.reshape(torch.mean(abs(real_RIR_part_3),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_4 = torch.reshape(torch.mean(abs(real_RIR_part_4),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_5 = torch.reshape(torch.mean(abs(real_RIR_part_5),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_6 = torch.reshape(torch.mean(abs(real_RIR_part_6),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_7 = torch.reshape(torch.mean(abs(real_RIR_part_7),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "# mean_real_RIR_part_8 = torch.reshape(torch.mean(abs(real_RIR_part_8),dim=2),[real_RIRs.shape[0],1,1]) + 0.00001", "\n", "\n", "# normalize_real_RIR_part_1 = real_RIR_part_1 / mean_real_RIR_part_1", "\n", "# normalize_real_RIR_part_2 = real_RIR_part_2 / mean_real_RIR_part_2", "\n", "# normalize_real_RIR_part_3 = real_RIR_part_3 / mean_real_RIR_part_3", "\n", "# normalize_real_RIR_part_4 = real_RIR_part_4 / mean_real_RIR_part_4", "\n", "# normalize_real_RIR_part_5 = real_RIR_part_5 / mean_real_RIR_part_5", "\n", "# normalize_real_RIR_part_6 = real_RIR_part_6 / mean_real_RIR_part_6", "\n", "# normalize_real_RIR_part_7 = real_RIR_part_7 / mean_real_RIR_part_7", "\n", "# normalize_real_RIR_part_8 = real_RIR_part_8 / mean_real_RIR_part_8", "\n", "\n", "\n", "# normalize_fake_RIR_part_1 = fake_RIRs[:,:,0:512]     / mean_real_RIR_part_1", "\n", "# normalize_fake_RIR_part_2 = fake_RIRs[:,:,512:1024]  / mean_real_RIR_part_2", "\n", "# normalize_fake_RIR_part_3 = fake_RIRs[:,:,1024:1536] / mean_real_RIR_part_3", "\n", "# normalize_fake_RIR_part_4 = fake_RIRs[:,:,1536:2048] / mean_real_RIR_part_4", "\n", "# normalize_fake_RIR_part_5 = fake_RIRs[:,:,2048:2560] / mean_real_RIR_part_5", "\n", "# normalize_fake_RIR_part_6 = fake_RIRs[:,:,2560:3072] / mean_real_RIR_part_6", "\n", "# normalize_fake_RIR_part_7 = fake_RIRs[:,:,3072:3584] / mean_real_RIR_part_7", "\n", "# normalize_fake_RIR_part_8 = fake_RIRs[:,:,3584:4096] / mean_real_RIR_part_8 ", "\n", "\n", "# MSE_error_part_1 = loss1(normalize_real_RIR_part_1,normalize_fake_RIR_part_1) ", "\n", "# MSE_error_part_2 = loss1(normalize_real_RIR_part_2,normalize_fake_RIR_part_2) ", "\n", "# MSE_error_part_3 = loss1(normalize_real_RIR_part_3,normalize_fake_RIR_part_3) ", "\n", "# MSE_error_part_4 = loss1(normalize_real_RIR_part_4,normalize_fake_RIR_part_4) ", "\n", "# MSE_error_part_5 = loss1(normalize_real_RIR_part_5,normalize_fake_RIR_part_5) ", "\n", "# MSE_error_part_6 = loss1(normalize_real_RIR_part_6,normalize_fake_RIR_part_6) ", "\n", "# MSE_error_part_7 = loss1(normalize_real_RIR_part_7,normalize_fake_RIR_part_7) ", "\n", "# MSE_error_part_8 = loss1(normalize_real_RIR_part_8,normalize_fake_RIR_part_8) ", "\n", "\n", "\n", "# print(\"MSE_error_part_1   \", MSE_error_part_1)", "\n", "# print(\"MSE_error_part_2   \", MSE_error_part_2)", "\n", "# print(\"MSE_error_part_3   \", MSE_error_part_3)", "\n", "# print(\"MSE_error_part_4   \", MSE_error_part_4)", "\n", "# print(\"MSE_error_part_5   \", MSE_error_part_5)", "\n", "# print(\"MSE_error_part_6   \", MSE_error_part_6)", "\n", "# print(\"MSE_error_part_7   \", MSE_error_part_7)", "\n", "# print(\"MSE_error_part_8   \", MSE_error_part_8)", "\n", "\n", "# print(\"criterion loss \",criterion(fake_logits, real_labels))", "\n", "MSE_ERROR11", "=", "MSE_error1", "*", "4096", "*", "10", "\n", "MSE_ERROR21", "=", "MSE_error2", "*", "128", "*", "10000", "\n", "MSE_ERROR", "=", "MSE_ERROR11", "+", "MSE_ERROR21", "\n", "criterion_loss", "=", "criterion", "(", "fake_logits", ",", "real_labels", ")", "\n", "# errD_fake = criterion(fake_logits, real_labels) + 5* 4096 * MSE_error1 #+ 40 * RT_error", "\n", "errD_fake", "=", "2", "*", "criterion_loss", "+", "divergence_loss", "+", "(", "MSE_ERROR", ")", "#+ 5* 4096*MSE_error1", "\n", "if", "netD", ".", "get_uncond_logits", "is", "not", "None", ":", "\n", "        ", "fake_logits", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netD", ".", "get_uncond_logits", ",", "\n", "(", "fake_features", ")", ",", "gpus", ")", "\n", "uncond_errD_fake", "=", "criterion", "(", "fake_logits", ",", "real_labels", ")", "\n", "errD_fake", "+=", "uncond_errD_fake", "\n", "", "return", "errD_fake", ",", "L1_error", ",", "divergence_loss0", ",", "divergence_loss1", ",", "divergence_loss2", ",", "divergence_loss3", ",", "divergence_loss4", ",", "divergence_loss5", ",", "MSE_ERROR11", ",", "MSE_ERROR21", ",", "criterion_loss", "#,RT_error", "\n", "\n", "\n", "#############################", "\n", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.weights_init": [[198, 209], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n", "\n", "#############################", "\n", "", "", "", "def", "save_RIR_results", "(", "data_RIR", ",", "fake", ",", "epoch", ",", "RIR_dir", ")", ":", "\n", "    ", "num", "=", "64", "# cfg.VIS_COUNT", "\n", "fake", "=", "fake", "[", "0", ":", "num", "]", "\n", "# data_RIR is changed to [0,1]", "\n", "if", "data_RIR", "is", "not", "None", ":", "\n", "        ", "data_RIR", "=", "data_RIR", "[", "0", ":", "num", "]", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results": [[212, 256], ["range", "range", "numpy.array", "numpy.array", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "numpy.array", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "data_RIR[].to().detach", "fake[].to().detach", "numpy.array", "numpy.array", "fake[].to().detach", "numpy.array", "str", "str", "str", "data_RIR[].to", "fake[].to", "fake[].to", "str", "str", "str"], "function", ["None"], ["            ", "real_RIR_path", "=", "RIR_dir", "+", "\"/real_sample\"", "+", "str", "(", "i", ")", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".wav\"", "\n", "fake_RIR_path", "=", "RIR_dir", "+", "\"/fake_sample\"", "+", "str", "(", "i", ")", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".wav\"", "\n", "fs", "=", "16000", "\n", "\n", "real_IR", "=", "np", ".", "array", "(", "data_RIR", "[", "i", "]", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ")", "\n", "fake_IR", "=", "np", ".", "array", "(", "fake", "[", "i", "]", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ")", "\n", "\n", "r", "=", "WaveWriter", "(", "real_RIR_path", ",", "channels", "=", "1", ",", "samplerate", "=", "fs", ")", "\n", "r", ".", "write", "(", "np", ".", "array", "(", "real_IR", ")", ")", "\n", "f", "=", "WaveWriter", "(", "fake_RIR_path", ",", "channels", "=", "1", ",", "samplerate", "=", "fs", ")", "\n", "f", ".", "write", "(", "np", ".", "array", "(", "fake_IR", ")", ")", "\n", "\n", "\n", "# write(real_RIR_path,fs,real_IR)", "\n", "# write(fake_RIR_path,fs,fake_IR)", "\n", "\n", "\n", "# write(real_RIR_path,fs,real_IR)", "\n", "# write(fake_RIR_path,fs,fake_IR)", "\n", "\n", "# vutils.save_image(", "\n", "#     data_RIR, '%s/real_samples.png' % RIR_dir,", "\n", "#     normalize=True)", "\n", "# # fake.data is still [-1, 1]", "\n", "# vutils.save_image(", "\n", "#     fake.data, '%s/fake_samples_epoch_%03d.png' %", "\n", "#     (RIR_dir, epoch), normalize=True)", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "# #print(\"came 2\")", "\n", "            ", "fake_RIR_path", "=", "RIR_dir", "+", "\"/small_fake_sample\"", "+", "str", "(", "i", ")", "+", "\"_epoch_\"", "+", "str", "(", "epoch", ")", "+", "\".wav\"", "\n", "fs", "=", "16000", "\n", "fake_IR", "=", "np", ".", "array", "(", "fake", "[", "i", "]", ".", "to", "(", "\"cpu\"", ")", ".", "detach", "(", ")", ")", "\n", "f", "=", "WaveWriter", "(", "fake_RIR_path", ",", "channels", "=", "1", ",", "samplerate", "=", "fs", ")", "\n", "f", ".", "write", "(", "np", ".", "array", "(", "fake_IR", ")", ")", "\n", "\n", "# write(fake_RIR_path,fs,fake[i].astype(np.float32))", "\n", "\n", "# vutils.save_image(", "\n", "#     fake.data, '%s/lr_fake_samples_epoch_%03d.png' %", "\n", "#     (RIR_dir, epoch), normalize=True)", "\n", "\n", "\n", "", "", "", "def", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "epoch", ",", "model_dir", ")", ":", "\n", "    ", "torch", ".", "save", "(", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model": [[299, 309], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "netG.state_dict", "mesh_net.state_dict", "netD.state_dict"], "function", ["None"], ["\n", "", "def", "generate_complementary_filterbank", "(", "\n", "fc", "=", "[", "125.0", ",", "250.0", ",", "500.0", ",", "1000.0", ",", "2000.0", ",", "4000.0", ",", "8000.0", "]", ",", "\n", "fs", "=", "16000", ",", "\n", "filter_order", "=", "4", ",", "\n", "filter_length", "=", "16384", ",", "\n", "power", "=", "True", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p": [[312, 320], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["\n", "\n", "# sort in increasing cutoff", "\n", "fc", "=", "np", ".", "sort", "(", "fc", ")", "\n", "\n", "assert", "fc", "[", "-", "1", "]", "<=", "fs", "/", "2", "\n", "\n", "numFilts", "=", "len", "(", "fc", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC": [[321, 329], ["numpy.zeros", "range", "scipy.signal.fftconvolve", "numpy.square", "len", "numpy.cumsum", "len"], "function", ["None"], ["nbins", "=", "filter_length", "\n", "signal_z1", "=", "np", ".", "zeros", "(", "2", "*", "nbins", ")", "\n", "signal_z1", "[", "0", "]", "=", "1", "\n", "irBands", "=", "np", ".", "zeros", "(", "(", "2", "*", "nbins", ",", "numFilts", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "numFilts", "-", "1", ")", ":", "\n", "        ", "wc", "=", "fc", "[", "i", "]", "/", "(", "fs", "/", "2.0", ")", "\n", "# if wc >= 1:", "\n", "#     wc = .999999", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.convert_IR2EC_batch": [[330, 345], ["cupy.zeros", "range", "cupy.concatenate", "torch.tensor", "torch.tensor", "cupyx.scipy.signal.fftconvolve", "cupy.square", "[].reshape", "cupy.cumsum"], "function", ["None"], ["\n", "B_low", ",", "A_low", "=", "scipy", ".", "signal", ".", "butter", "(", "filter_order", ",", "wc", ",", "btype", "=", "'low'", ")", "\n", "B_high", ",", "A_high", "=", "scipy", ".", "signal", ".", "butter", "(", "filter_order", ",", "wc", ",", "btype", "=", "'high'", ")", "\n", "\n", "\n", "# Store the low band", "\n", "irBands", "[", ":", ",", "i", "]", "=", "scipy", ".", "signal", ".", "lfilter", "(", "B_low", ",", "A_low", ",", "signal_z1", ")", "\n", "\n", "# Store the high", "\n", "signal_z1", "=", "scipy", ".", "signal", ".", "lfilter", "(", "B_high", ",", "A_high", ",", "signal_z1", ")", "\n", "\n", "# Repeat for the last band of the filter bank", "\n", "", "irBands", "[", ":", ",", "-", "1", "]", "=", "signal_z1", "\n", "\n", "# Compute power complementary filters", "\n", "if", "power", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.generate_complementary_filterbank": [[348, 401], ["numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "scipy.signal.butter", "scipy.signal.butter", "scipy.signal.lfilter", "scipy.signal.lfilter", "numpy.real", "numpy.real", "numpy.fft.ifft", "numpy.fft.ifft", "numpy.square", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.fft.fft", "numpy.fft.fft"], "function", ["None"], ["        ", "ir2Bands", "=", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft", "(", "np", ".", "abs", "(", "np", ".", "abs", "(", "np", ".", "fft", ".", "fft", "(", "irBands", ",", "axis", "=", "0", ")", ")", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "ir2Bands", "=", "np", ".", "concatenate", "(", "(", "ir2Bands", "[", "nbins", ":", "(", "2", "*", "nbins", ")", ",", ":", "]", ",", "ir2Bands", "[", "0", ":", "nbins", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "ir2Bands", "\n", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.__init__": [[31, 40], ["datasets.TextDataset.load_embedding"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.load_embedding"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "split", "=", "'train'", ",", "rirsize", "=", "4096", ")", ":", "#, transform=None, target_transform=None):", "\n", "\n", "        ", "self", ".", "rirsize", "=", "rirsize", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "bbox", "=", "None", "\n", "\n", "\n", "self", ".", "embeddings", "=", "self", ".", "load_embedding", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.get_RIR": [[41, 71], ["librosa.load", "librosa.resample", "int", "numpy.array().astype", "numpy.zeros", "numpy.repeat", "numpy.concatenate", "numpy.repeat", "numpy.concatenate", "numpy.std", "numpy.concatenate", "numpy.std", "numpy.array"], "methods", ["None"], ["", "def", "get_RIR", "(", "self", ",", "full_RIR_path", ")", ":", "\n", "# wav,fs = sf.read(full_RIR_path) ", "\n", "        ", "wav", ",", "fs", "=", "librosa", ".", "load", "(", "full_RIR_path", ")", "\n", "\n", "# wav_resample = librosa.resample(wav,16000,fs)", "\n", "wav_resample", "=", "librosa", ".", "resample", "(", "wav", ",", "orig_sr", "=", "fs", ",", "target_sr", "=", "16000", ")", "\n", "\n", "length", "=", "wav_resample", ".", "size", "\n", "\n", "crop_length", "=", "3968", "#int(16384)", "\n", "if", "(", "length", "<", "crop_length", ")", ":", "\n", "            ", "zeros", "=", "np", ".", "zeros", "(", "crop_length", "-", "length", ")", "\n", "std_value", "=", "np", ".", "std", "(", "wav_resample", ")", "*", "10", "\n", "std_array", "=", "np", ".", "repeat", "(", "std_value", ",", "128", ")", "\n", "wav_resample_new", "=", "np", ".", "concatenate", "(", "[", "wav_resample", ",", "zeros", "]", ")", "/", "std_value", "\n", "RIR_original", "=", "np", ".", "concatenate", "(", "[", "wav_resample_new", ",", "std_array", "]", ")", "\n", "", "else", ":", "\n", "            ", "wav_resample_new", "=", "wav_resample", "[", "0", ":", "crop_length", "]", "\n", "std_value", "=", "np", ".", "std", "(", "wav_resample_new", ")", "*", "10", "\n", "std_array", "=", "np", ".", "repeat", "(", "std_value", ",", "128", ")", "\n", "wav_resample_new", "=", "wav_resample_new", "/", "std_value", "\n", "RIR_original", "=", "np", ".", "concatenate", "(", "[", "wav_resample_new", ",", "std_array", "]", ")", "\n", "\n", "", "resample_length", "=", "int", "(", "self", ".", "rirsize", ")", "\n", "\n", "RIR", "=", "RIR_original", "\n", "\n", "RIR", "=", "np", ".", "array", "(", "[", "RIR", "]", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "RIR", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.get_graph": [[83, 89], ["open", "pickle.load"], "methods", ["None"], ["", "def", "get_graph", "(", "self", ",", "full_graph_path", ")", ":", "\n", "\n", "        ", "with", "open", "(", "full_graph_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "graph", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "graph", "#edge_index, vertex_position", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.load_embedding": [[90, 95], ["open", "pickle.load"], "methods", ["None"], ["", "def", "load_embedding", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "embedding_directory", "=", "'../embeddings.pickle'", "\n", "with", "open", "(", "embedding_directory", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "embeddings", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.__getitem__": [[97, 118], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array().astype", "datasets.TextDataset.get_RIR", "datasets.TextDataset.get_graph", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.get_RIR", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.get_graph"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\n", "        ", "graph_path", ",", "RIR_path", ",", "source_location", ",", "receiver_location", "=", "self", ".", "embeddings", "[", "index", "]", "\n", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "full_graph_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "graph_path", ")", "\n", "full_RIR_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "RIR_path", ")", "\n", "source_receiver", "=", "source_location", "+", "receiver_location", "\n", "embedding", "=", "np", ".", "array", "(", "source_receiver", ")", ".", "astype", "(", "'float32'", ")", "\n", "RIR", "=", "self", ".", "get_RIR", "(", "full_RIR_path", ")", "\n", "\n", "graph", "=", "self", ".", "get_graph", "(", "full_graph_path", ")", ";", "\n", "graph", ".", "RIR", "=", "RIR", "\n", "graph", ".", "embeddings", "=", "embedding", "\n", "\n", "\n", "\n", "# print(\"shape \", transpose_edge_index.shape)", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.datasets.TextDataset.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "embeddings", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results_eval": [[264, 297], ["len", "os.path.exists", "os.mkdir", "os.mkdir", "range", "str", "print", "numpy.array", "numpy.array", "data_RIR[].to().detach", "fake[].to().detach", "numpy.median", "numpy.median", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "str.find", "numpy.array", "numpy.array", "str", "data_RIR[].to", "fake[].to", "str", "str", "str", "str", "str"], "function", ["None"], ["'%s/netD_epoch_last.pth'", "%", "(", "model_dir", ")", ")", "\n", "#print('Save G/D models')", "\n", "\n", "\n", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n", "", "", "", "def", "convert_IR2EC", "(", "rir", ",", "filters", ",", "filter_length", ")", ":", "\n", "    ", "subband_ECs", "=", "np", ".", "zeros", "(", "(", "len", "(", "rir", ")", ",", "filters", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "filters", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "subband_ir", "=", "scipy", ".", "signal", ".", "fftconvolve", "(", "rir", ",", "filters", "[", ":", ",", "i", "]", ")", "\n", "subband_ir", "=", "subband_ir", "[", "(", "filter_length", "-", "1", ")", ":", "]", "\n", "squared", "=", "np", ".", "square", "(", "subband_ir", "[", ":", "len", "(", "rir", ")", "]", ")", "\n", "subband_ECs", "[", ":", ",", "i", "]", "=", "np", ".", "cumsum", "(", "squared", "[", ":", ":", "-", "1", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "", "return", "subband_ECs", "\n", "\n", "", "def", "convert_IR2EC_batch", "(", "rir", ",", "filters", ",", "filter_length", ")", ":", "\n", "# filters = cp.asarray([[filters]])", "\n", "    ", "rir", "=", "rir", "[", ":", ",", ":", ",", "0", ":", "3968", "]", "\n", "subband_ECs", "=", "cp", ".", "zeros", "(", "(", "rir", ".", "shape", "[", "0", "]", ",", "rir", ".", "shape", "[", "1", "]", ",", "rir", ".", "shape", "[", "2", "]", ",", "filters", ".", "shape", "[", "3", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "filters", ".", "shape", "[", "3", "]", ")", ":", "\n", "        ", "subband_ir", "=", "fftconvolve", "(", "rir", ",", "filters", "[", ":", ",", ":", ",", ":", ",", "i", "]", ")", "\n", "subband_ir", "=", "subband_ir", "[", ":", ",", ":", ",", "(", "filter_length", "-", "1", ")", ":", "]", "\n", "squared", "=", "cp", ".", "square", "(", "subband_ir", "[", ":", ",", ":", ",", ":", "rir", ".", "shape", "[", "2", "]", "]", ")", "\n", "subband_ECs", "[", ":", ",", ":", ",", ":", ",", "i", "]", "=", "cp", ".", "cumsum", "(", "squared", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "subband_ECs", "=", "torch", ".", "tensor", "(", "subband_ECs", ",", "device", "=", "'cuda'", ")", "\n", "return", "subband_ECs", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.main.parse_args": [[26, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.main.parse_args"], ["    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a GAN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "'birds_stage1.yml'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "dest", "=", "'data_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--manualSeed'", ",", "type", "=", "int", ",", "help", "=", "'manual seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.__init__": [[37, 64], ["miscc.config.cfg.GPU_ID.split", "len", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "miscc.utils.mkdir_p", "os.path.join", "miscc.utils.mkdir_p", "int"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p"], ["    ", "def", "__init__", "(", "self", ",", "output_dir", ")", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "FLAG", ":", "\n", "            ", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Model'", ")", "\n", "self", ".", "model_dir_RT", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Model_RT'", ")", "\n", "self", ".", "RIR_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'RIR'", ")", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'Log'", ")", "\n", "mkdir_p", "(", "self", ".", "model_dir", ")", "\n", "mkdir_p", "(", "self", ".", "model_dir_RT", ")", "\n", "mkdir_p", "(", "self", ".", "RIR_dir", ")", "\n", "mkdir_p", "(", "self", ".", "log_dir", ")", "\n", "# self.summary_writer = FileWriter(self.log_dir)", "\n", "\n", "", "self", ".", "max_epoch", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCH", "\n", "self", ".", "snapshot_interval", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_INTERVAL", "\n", "\n", "s_gpus", "=", "cfg", ".", "GPU_ID", ".", "split", "(", "','", ")", "\n", "self", ".", "gpus", "=", "[", "int", "(", "ix", ")", "for", "ix", "in", "s_gpus", "]", "\n", "self", ".", "num_gpus", "=", "len", "(", "self", ".", "gpus", ")", "\n", "self", ".", "batch_size", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "*", "self", ".", "num_gpus", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "gpus", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# ############# For training stageI GAN #############", "\n", "", "def", "load_network_stageI", "(", "self", ")", ":", "\n", "        ", "from", "model", "import", "STAGE1_G", ",", "STAGE1_D", ",", "MESH_NET", "\n", "netG", "=", "STAGE1_G", "(", ")", "\n", "netG", ".", "apply", "(", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI": [[66, 105], ["STAGE1_G", "STAGE1_G.apply", "print", "STAGE1_D", "STAGE1_D.apply", "print", "MESH_NET", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "STAGE1_G.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "STAGE1_D.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "MESH_NET.load_state_dict", "print", "STAGE1_G.cuda", "STAGE1_D.cuda", "MESH_NET.cuda"], "methods", ["None"], ["netD", "=", "STAGE1_D", "(", ")", "\n", "netD", ".", "apply", "(", "weights_init", ")", "\n", "print", "(", "netD", ")", "\n", "\n", "mesh_net", "=", "MESH_NET", "(", ")", "\n", "\n", "\n", "\n", "if", "cfg", ".", "NET_G", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "NET_G", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netG", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "NET_G", ")", "\n", "", "if", "cfg", ".", "NET_D", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "NET_D", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "netD", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "NET_D", ")", "\n", "", "if", "cfg", ".", "MESH_NET", "!=", "''", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "MESH_NET", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "mesh_net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "'Load from: '", ",", "cfg", ".", "MESH_NET", ")", "\n", "\n", "\n", "", "if", "cfg", ".", "CUDA", ":", "\n", "            ", "netG", ".", "cuda", "(", ")", "\n", "netD", ".", "cuda", "(", ")", "\n", "mesh_net", ".", "cuda", "(", ")", "\n", "", "return", "netG", ",", "netD", ",", "mesh_net", "\n", "\n", "# # ############# For training stageII GAN  #############", "\n", "# def load_network_stageII(self):", "\n", "#     from model import STAGE1_G, STAGE2_G, STAGE2_D", "\n", "\n", "#     Stage1_G = STAGE1_G()", "\n", "#     netG = STAGE2_G(Stage1_G)", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.train": [[145, 375], ["netG.to", "mesh_net.to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "netG.parameters", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "miscc.utils.generate_complementary_filterbank", "cupy.asarray", "six.moves.range", "miscc.utils.save_model", "trainer.GANTrainer.load_network_stageI", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "netD.parameters", "mesh_net.parameters", "time.time", "time.time", "time.time", "time.time", "enumerate", "time.time", "time.time", "time.time", "time.time", "print", "print", "print", "print", "print", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "netG_para.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data.cuda.cuda.pop", "data.cuda.cuda.pop", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "netD.zero_grad", "miscc.utils.compute_discriminator_loss", "errD_total.backward", "torch.RMSprop.step", "netG.zero_grad", "mesh_net.zero_grad", "miscc.utils.compute_generator_loss", "errG_total.backward", "torch.RMSprop.step", "torch.RMSprop.step", "six.moves.range", "len", "open", "myfile.write", "miscc.utils.save_model", "miscc.utils.save_model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.array", "numpy.array", "real_RIRs.cuda.cuda.cuda", "txt_embedding.cuda.cuda.cuda", "data.cuda.cuda.cuda", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "netG.zero_grad", "mesh_net.zero_grad", "miscc.utils.compute_generator_loss", "errG_total.backward", "torch.RMSprop.step", "torch.RMSprop.step", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "miscc.utils.save_RIR_results", "len", "miscc.utils.save_RIR_results"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.generate_complementary_filterbank", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_discriminator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_generator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_model", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.compute_generator_loss", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results"], ["", "netG", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "mesh_net", ".", "to", "(", "device", "=", "'cuda'", ")", "\n", "# nz = cfg.Z_DIM", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", "# noise = Variable(torch.FloatTensor(batch_size, nz))", "\n", "# fixed_noise = \\", "\n", "#     Variable(torch.FloatTensor(batch_size, nz).normal_(0, 1),", "\n", "#              volatile=True)", "\n", "real_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "1", ")", ")", "\n", "fake_labels", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "0", ")", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "# noise, fixed_noise = noise.cuda(), fixed_noise.cuda()", "\n", "            ", "real_labels", ",", "fake_labels", "=", "real_labels", ".", "cuda", "(", ")", ",", "fake_labels", ".", "cuda", "(", ")", "\n", "\n", "", "generator_lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", "\n", "mesh_lr", "=", "cfg", ".", "TRAIN", ".", "MESH_LR", "\n", "discriminator_lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", "\n", "lr_decay_step", "=", "cfg", ".", "TRAIN", ".", "LR_DECAY_EPOCH", "\n", "# optimizerD = \\", "\n", "#     optim.Adam(netD.parameters(),", "\n", "#                lr=cfg.TRAIN.DISCRIMINATOR_LR, betas=(0.5, 0.999))", "\n", "optimizerD", "=", "optim", ".", "RMSprop", "(", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "DISCRIMINATOR_LR", ")", "\n", "# optimizerD =optim.Adadelta(netD.parameters())", "\n", "# optimizerD = optim.Adagrad(netD.parameters(),lr=cfg.TRAIN.DISCRIMINATOR_LR)", "\n", "netG_para", "=", "[", "]", "\n", "for", "p", "in", "netG", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "netG_para", ".", "append", "(", "p", ")", "\n", "# optimizerG = optim.Adam(netG_para,", "\n", "#                         lr=cfg.TRAIN.GENERATOR_LR,", "\n", "#                         betas=(0.5, 0.999))", "\n", "", "", "optimizerG", "=", "optim", ".", "RMSprop", "(", "netG_para", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "GENERATOR_LR", ")", "\n", "\n", "optimizerM", "=", "optim", ".", "RMSprop", "(", "mesh_net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "MESH_LR", ")", "\n", "# optimizerG = optim.Adadelta(netG_para)", "\n", "\n", "# optimizerM = optim.Adadelta(mesh_net.parameters())", "\n", "# optimizerG = optim.Adagrad(netG_para,lr=cfg.TRAIN.GENERATOR_LR)", "\n", "# optimizerM =optim.Adagrad(mesh_net.parameters(),lr=cfg.TRAIN.MESH_LR)", "\n", "count", "=", "0", "\n", "least_RT", "=", "10", "\n", "L1_error_temp", "=", "150", "/", "4096", "\n", "bands", "=", "[", "125", ",", "250", ",", "500", ",", "1000", ",", "2000", ",", "4000", "]", "# which frequency bands are we interested in", "\n", "filter_length", "=", "16384", "# a magic number, not need to tweak this much", "\n", "fs", "=", "16000", "\n", "# only generate filters once and keep using them, that means you need to know the samplerate beforehand or convert to a fixed samplerate", "\n", "filters", "=", "generate_complementary_filterbank", "(", "fc", "=", "bands", ",", "fs", "=", "fs", ",", "filter_order", "=", "4", ",", "filter_length", "=", "filter_length", ",", "power", "=", "True", ")", "\n", "filters", "=", "cp", ".", "asarray", "(", "[", "[", "filters", "]", "]", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "max_epoch", ")", ":", "\n", "            ", "start_t", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch", "%", "lr_decay_step", "==", "0", "and", "epoch", ">", "0", ":", "\n", "                ", "generator_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerG", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "generator_lr", "\n", "", "discriminator_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerD", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "discriminator_lr", "\n", "\n", "", "mesh_lr", "*=", "0.85", "#0.5", "\n", "for", "param_group", "in", "optimizerM", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "mesh_lr", "\n", "\n", "# b1=0", "\n", "# b2=0", "\n", "# b3=0", "\n", "", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ",", "0", ")", ":", "\n", "######################################################", "\n", "# (1) Prepare training data", "\n", "######################################################", "\n", "# real_RIR_cpu, txt_embedding = data", "\n", "# b1 = time.time()", "\n", "# print(\"Time 1   \",(b1-b3))", "\n", "                ", "real_RIR_cpu", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", "[", "'RIR'", "]", ")", ")", "\n", "txt_embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", "[", "'embeddings'", "]", ")", ")", "\n", "\n", "data", ".", "pop", "(", "'RIR'", ")", "\n", "data", ".", "pop", "(", "'embeddings'", ")", "\n", "\n", "\n", "real_RIRs", "=", "Variable", "(", "real_RIR_cpu", ")", "\n", "txt_embedding", "=", "Variable", "(", "txt_embedding", ")", "\n", "data", "[", "'edge_index'", "]", "=", "Variable", "(", "data", "[", "'edge_index'", "]", ")", "\n", "data", "[", "'pos'", "]", "=", "Variable", "(", "data", "[", "'pos'", "]", ")", "\n", "if", "cfg", ".", "CUDA", ":", "\n", "                    ", "real_RIRs", "=", "real_RIRs", ".", "cuda", "(", ")", "\n", "txt_embedding", "=", "txt_embedding", ".", "cuda", "(", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "#######################################################", "\n", "# (2) Generate fake images (have to modify)", "\n", "######################################################", "\n", "# noise.data.normal_(0, 1)", "\n", "# inputs = (txt_embedding, noise)", "\n", "# b2 = time.time()", "\n", "#mesh_net", "\n", "# print(\"Time 2   \",(b2-b1))", "\n", "", "mesh_embed", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "mesh_net", ",", "data", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "# print(\"came here\")", "\n", "# b3 = time.time()", "\n", "# print(\"Time 3   \",(b3-b2))", "\n", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "# _, fake_RIRs, mu, logvar = \\", "\n", "#     nn.parallel.data_parallel(netG, inputs, self.gpus)", "\n", "\n", "# print(\"self.gpus \", [self.gpus[0]])", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "# input(\"AAA \")", "\n", "\n", "############################", "\n", "# (3) Update D network", "\n", "###########################", "\n", "netD", ".", "zero_grad", "(", ")", "\n", "errD", ",", "errD_real", ",", "errD_wrong", ",", "errD_fake", "=", "compute_discriminator_loss", "(", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "fake_labels", ",", "\n", "c_code", ",", "self", ".", "gpus", ")", "\n", "\n", "errD_total", "=", "errD", "*", "5", "\n", "errD_total", ".", "backward", "(", ")", "\n", "optimizerD", ".", "step", "(", ")", "\n", "############################", "\n", "# (2) Update G network", "\n", "###########################", "\n", "# kl_loss = KL_loss(mu, logvar)", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "mesh_net", ".", "zero_grad", "(", ")", "\n", "errG", ",", "L1_error", ",", "divergence_loss0", ",", "divergence_loss1", ",", "divergence_loss2", ",", "divergence_loss3", ",", "divergence_loss4", ",", "divergence_loss5", ",", "MSE_error1", ",", "MSE_error2", ",", "criterion_loss", "=", "compute_generator_loss", "(", "epoch", ",", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "c_code", ",", "filters", ",", "self", ".", "gpus", ")", "\n", "errG_total", "=", "errG", "*", "5", "#+ kl_loss * cfg.TRAIN.COEFF.KL", "\n", "\n", "errG_total", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "\n", "# errG_total.backward()", "\n", "optimizerM", ".", "step", "(", ")", "\n", "for", "p", "in", "range", "(", "2", ")", ":", "\n", "\n", "# _, fake_RIRs, mu, logvar = \\", "\n", "#     nn.parallel.data_parallel(netG, inputs, self.gpus)", "\n", "                    ", "mesh_embed", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "mesh_net", ",", "data", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "netG", ".", "zero_grad", "(", ")", "\n", "mesh_net", ".", "zero_grad", "(", ")", "\n", "errG", ",", "L1_error", ",", "divergence_loss0", ",", "divergence_loss1", ",", "divergence_loss2", ",", "divergence_loss3", ",", "divergence_loss4", ",", "divergence_loss5", ",", "MSE_error1", ",", "MSE_error2", ",", "criterion_loss", "=", "compute_generator_loss", "(", "epoch", ",", "netD", ",", "real_RIRs", ",", "fake_RIRs", ",", "\n", "real_labels", ",", "c_code", ",", "filters", ",", "self", ".", "gpus", ")", "\n", "# kl_loss = KL_loss(mu, logvar)", "\n", "errG_total", "=", "errG", "*", "5", "#+ kl_loss * cfg.TRAIN.COEFF.KL", "\n", "errG_total", ".", "backward", "(", ")", "\n", "optimizerG", ".", "step", "(", ")", "\n", "# errG_total.backward()", "\n", "optimizerM", ".", "step", "(", ")", "\n", "\n", "", "count", "=", "count", "+", "1", "\n", "# print(\"count \",count)", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "# summary_D = summary.scalar('D_loss', errD.data[0])", "\n", "# summary_D_r = summary.scalar('D_loss_real', errD_real)", "\n", "# summary_D_w = summary.scalar('D_loss_wrong', errD_wrong)", "\n", "# summary_D_f = summary.scalar('D_loss_fake', errD_fake)", "\n", "# summary_G = summary.scalar('G_loss', errG.data[0])", "\n", "# summary_KL = summary.scalar('KL_loss', kl_loss.data[0])", "\n", "# summary_D = summary.scalar('D_loss', errD.data)", "\n", "# summary_D_r = summary.scalar('D_loss_real', errD_real)", "\n", "# summary_D_w = summary.scalar('D_loss_wrong', errD_wrong)", "\n", "# summary_D_f = summary.scalar('D_loss_fake', errD_fake)", "\n", "# summary_G = summary.scalar('G_loss', errG.data)", "\n", "# summary_KL = summary.scalar('KL_loss', kl_loss.data)", "\n", "\n", "# self.summary_writer.add_summary(summary_D, count)", "\n", "# self.summary_writer.add_summary(summary_D_r, count)", "\n", "# self.summary_writer.add_summary(summary_D_w, count)", "\n", "# self.summary_writer.add_summary(summary_D_f, count)", "\n", "# self.summary_writer.add_summary(summary_G, count)", "\n", "# self.summary_writer.add_summary(summary_KL, count)", "\n", "\n", "# save the image result for each epoch", "\n", "                    ", "inputs", "=", "(", "txt_embedding", ",", "mesh_embed", ")", "\n", "lr_fake", ",", "fake", ",", "_", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "self", ".", "gpus", ")", "\n", "if", "(", "epoch", "%", "self", ".", "snapshot_interval", "==", "0", ")", ":", "\n", "                        ", "save_RIR_results", "(", "real_RIR_cpu", ",", "fake", ",", "epoch", ",", "self", ".", "RIR_dir", ")", "\n", "if", "lr_fake", "is", "not", "None", ":", "\n", "                            ", "save_RIR_results", "(", "None", ",", "lr_fake", ",", "epoch", ",", "self", ".", "RIR_dir", ")", "\n", "", "", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "# print('''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f Loss_KL: %.4f", "\n", "#          Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f", "\n", "#          Total Time: %.2fsec", "\n", "#       '''", "\n", "#       % (epoch, self.max_epoch, i, len(data_loader),", "\n", "#          errD.data[0], errG.data[0], kl_loss.data[0],", "\n", "#          errD_real, errD_wrong, errD_fake, (end_t - start_t)))", "\n", "# print('''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f Loss_KL: %.4f", "\n", "#          Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f", "\n", "#          Total Time: %.2fsec", "\n", "#       '''", "\n", "#       % (epoch, self.max_epoch, i, len(data_loader),", "\n", "#          errD.data, errG.data, kl_loss.data,", "\n", "#          errD_real, errD_wrong, errD_fake, (end_t - start_t)))", "\n", "print", "(", "'''[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f\n                     Loss_real: %.4f Loss_wrong:%.4f Loss_fake %.4f   L1_error  %.4f \n                     Total Time: %.2fsec\n                  '''", "\n", "%", "(", "epoch", ",", "self", ".", "max_epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "\n", "errD", ".", "data", ",", "errG", ".", "data", ",", "\n", "errD_real", ",", "errD_wrong", ",", "errD_fake", ",", "L1_error", "*", "4096", ",", "(", "end_t", "-", "start_t", ")", ")", ")", "\n", "print", "(", "\"Divergence errors \"", ",", "divergence_loss0", ",", "\"  \"", ",", "divergence_loss1", ",", "\"  \"", ",", "divergence_loss2", ",", "\"  \"", ",", "divergence_loss3", ",", "\"  \"", ",", "divergence_loss4", ",", "\"  \"", ",", "divergence_loss5", ",", "\"  \"", ")", "\n", "print", "(", "\"MSE error1  \"", ",", "MSE_error1", ")", "\n", "print", "(", "\"MSE error2 \"", ",", "MSE_error2", ")", "\n", "print", "(", "\"criterion_loss  \"", ",", "criterion_loss", ")", "\n", "\n", "store_to_file", "=", "\"[{}/{}][{}/{}] Loss_D: {:.4f} Loss_G: {:.4f} Loss_real: {:.4f} Loss_wrong:{:.4f} Loss_fake {:.4f}  MSE Error:{:.4f} Total Time: {:.2f}sec\"", ".", "format", "(", "epoch", ",", "self", ".", "max_epoch", ",", "i", ",", "len", "(", "data_loader", ")", ",", "\n", "errD", ".", "data", ",", "errG", ".", "data", ",", "errD_real", ",", "errD_wrong", ",", "errD_fake", ",", "L1_error", "*", "4096", ",", "(", "end_t", "-", "start_t", ")", ")", "\n", "store_to_file", "=", "store_to_file", "+", "\"\\n\"", "\n", "with", "open", "(", "\"errors.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "store_to_file", ")", "\n", "\n", "", "if", "(", "L1_error", "<", "L1_error_temp", ")", ":", "\n", "                ", "L1_error_temp", "=", "L1_error", "\n", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "epoch", ",", "self", ".", "model_dir_RT", ")", "\n", "", "if", "epoch", "%", "self", ".", "snapshot_interval", "==", "0", ":", "\n", "                ", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "epoch", ",", "self", ".", "model_dir", ")", "\n", "#", "\n", "", "", "save_model", "(", "netG", ",", "netD", ",", "mesh_net", ",", "self", ".", "max_epoch", ",", "self", ".", "model_dir", ")", "\n", "#", "\n", "# self.summary_writer.close()", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.evaluate": [[379, 425], ["netG.eval", "mesh_net.eval", "netG.to", "mesh_net.to", "time.time", "time.time", "time.time", "time.time", "enumerate", "time.time", "time.time", "time.time", "time.time", "print", "trainer.GANTrainer.load_network_stageI", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "data.cuda.cuda.pop", "data.cuda.cuda.pop", "data.cuda.cuda.pop", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "miscc.utils.save_RIR_results_eval", "numpy.array", "numpy.array", "txt_embedding.cuda.cuda.cuda", "data.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.save_RIR_results_eval"], ["            ", "netG", ",", "_", "=", "self", ".", "load_network_stageI", "(", ")", "\n", "", "else", ":", "\n", "            ", "netG", ",", "_", "=", "self", ".", "load_network_stageII", "(", ")", "\n", "", "netG", ".", "eval", "(", ")", "\n", "\n", "time_list", "=", "[", "]", "\n", "\n", "\n", "\n", "\n", "embedding_path", "=", "file_path", "\n", "with", "open", "(", "embedding_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "embeddings_pickle", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "\n", "\n", "", "embeddings_list", "=", "[", "]", "\n", "num_embeddings", "=", "len", "(", "embeddings_pickle", ")", "\n", "for", "b", "in", "range", "(", "num_embeddings", ")", ":", "\n", "            ", "embeddings_list", ".", "append", "(", "embeddings_pickle", "[", "b", "]", ")", "\n", "\n", "", "embeddings", "=", "np", ".", "array", "(", "embeddings_list", ")", "\n", "\n", "save_dir_GAN", "=", "\"Generated_RIRs\"", "\n", "mkdir_p", "(", "save_dir_GAN", ")", "\n", "\n", "\n", "\n", "normalize_embedding", "=", "[", "]", "\n", "\n", "\n", "batch_size", "=", "np", ".", "minimum", "(", "num_embeddings", ",", "self", ".", "batch_size", ")", "\n", "\n", "\n", "count", "=", "0", "\n", "count_this", "=", "0", "\n", "while", "count", "<", "num_embeddings", ":", "\n", "\n", "            ", "iend", "=", "count", "+", "batch_size", "\n", "if", "iend", ">", "num_embeddings", ":", "\n", "                ", "iend", "=", "num_embeddings", "\n", "count", "=", "num_embeddings", "-", "batch_size", "\n", "", "embeddings_batch", "=", "embeddings", "[", "count", ":", "iend", "]", "\n", "\n", "\n", "\n", "txt_embedding", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "embeddings_batch", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.sample": [[426, 518], ["netG.eval", "len", "six.moves.range", "numpy.array", "miscc.utils.mkdir_p", "numpy.minimum", "trainer.GANTrainer.load_network_stageI", "trainer.GANTrainer.load_network_stageII", "open", "pickle.load", "embeddings_list.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "time.time", "time.time", "time.time", "time.time", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "time.time", "time.time", "time.time", "time.time", "time_list.append", "print", "six.moves.range", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "txt_embedding.cuda.cuda.cuda", "print", "fake_RIRs[].data.cpu().numpy", "numpy.array", "res_buffer.append", "numpy.zeros", "enumerate", "wavefile.WaveWriter", "wavefile.WaveWriter.write", "numpy.array", "str", "fake_RIRs[].data.cpu", "len", "numpy.max", "int", "numpy.shape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.miscc.utils.mkdir_p", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.trainer.GANTrainer.load_network_stageI"], ["if", "cfg", ".", "CUDA", ":", "\n", "                ", "txt_embedding", "=", "txt_embedding", ".", "cuda", "(", ")", "\n", "\n", "#######################################################", "\n", "# (2) Generate fake images", "\n", "######################################################", "\n", "", "start_t", "=", "time", ".", "time", "(", ")", "\n", "inputs", "=", "(", "txt_embedding", ",", "data", ")", "\n", "_", ",", "fake_RIRs", ",", "c_code", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "netG", ",", "inputs", ",", "[", "self", ".", "gpus", "[", "0", "]", "]", ")", "\n", "end_t", "=", "time", ".", "time", "(", ")", "\n", "diff_t", "=", "end_t", "-", "start_t", "\n", "time_list", ".", "append", "(", "diff_t", ")", "\n", "\n", "RIR_batch_size", "=", "batch_size", "#int(batch_size/2)", "\n", "print", "(", "\"batch_size \"", ",", "RIR_batch_size", ")", "\n", "channel_size", "=", "64", "\n", "\n", "for", "i", "in", "range", "(", "channel_size", ")", ":", "\n", "                ", "fs", "=", "16000", "\n", "wave_name", "=", "\"RIR-\"", "+", "str", "(", "count", "+", "i", ")", "+", "\".wav\"", "\n", "save_name_GAN", "=", "'%s/%s'", "%", "(", "save_dir_GAN", ",", "wave_name", ")", "\n", "print", "(", "\"wave : \"", ",", "save_name_GAN", ")", "\n", "res", "=", "{", "}", "\n", "res_buffer", "=", "[", "]", "\n", "rate", "=", "16000", "\n", "res", "[", "'rate'", "]", "=", "rate", "\n", "\n", "wave_GAN", "=", "fake_RIRs", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wave_GAN", "=", "np", ".", "array", "(", "wave_GAN", "[", "0", "]", ")", "\n", "\n", "\n", "res_buffer", ".", "append", "(", "wave_GAN", ")", "\n", "res", "[", "'samples'", "]", "=", "np", ".", "zeros", "(", "(", "len", "(", "res_buffer", ")", ",", "np", ".", "max", "(", "[", "len", "(", "ps", ")", "for", "ps", "in", "res_buffer", "]", ")", ")", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "res_buffer", ")", ":", "\n", "                    ", "res", "[", "'samples'", "]", "[", "i", ",", ":", "len", "(", "c", ")", "]", "=", "c", "\n", "\n", "", "w", "=", "WaveWriter", "(", "save_name_GAN", ",", "channels", "=", "np", ".", "shape", "(", "res", "[", "'samples'", "]", ")", "[", "0", "]", ",", "samplerate", "=", "int", "(", "res", "[", "'rate'", "]", ")", ")", "\n", "w", ".", "write", "(", "np", ".", "array", "(", "res", "[", "'samples'", "]", ")", ")", "\n", "\n", "", "print", "(", "\"counter = \"", ",", "count", ")", "\n", "count", "=", "count", "+", "64", "\n", "count_this", "=", "count_this", "+", "1", "\n", "\n", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.ResBlock.__init__": [[63, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ",", "\n", "# nn.ReLU(True),", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "conv3x1", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "channel_num", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "PReLU", "(", ")", "#nn.ReLU(inplace=True)", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.ResBlock.forward": [[74, 80], ["model.ResBlock.block", "model.ResBlock.relu"], "methods", ["None"], ["        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.__init__": [[115, 121], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["self", ".", "feature_dim", "=", "3", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "self", ".", "feature_dim", ",", "32", ")", "\n", "self", ".", "pool1", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "\n", "self", ".", "conv2", "=", "GCNConv", "(", "32", ",", "32", ")", "#(32, 64)", "\n", "self", ".", "pool2", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#64, ratio=0.6)", "\n", "self", ".", "conv3", "=", "GCNConv", "(", "32", ",", "32", ")", "#(64, 128)", "\n", "self", ".", "pool3", "=", "TopKPooling", "(", "32", ",", "ratio", "=", "0.6", ")", "#(128, ratio=0.6)", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.encode": [[122, 127], ["model.COND_NET.relu", "model.COND_NET.fc"], "methods", ["None"], ["# self.item_embedding = torch.nn.Embedding(num_embeddings=df.item_id.max() +1, embedding_dim=self.feature_dim)", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "64", ",", "16", ")", "#(256, 128)", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "16", ",", "8", ")", "#(128, 64)", "\n", "# self.lin3 = torch.nn.Linear(8, 1) #(64, 1)", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "16", ")", "#(128)", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "8", ")", "#(64)", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.forward": [[137, 141], ["model.COND_NET.encode"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.COND_NET.encode"], ["x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool1", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x1", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ",", "edge_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.MESH_NET.__init__": [[143, 159], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch_geometric.nn.GCNConv", "torch_geometric.nn.TopKPooling", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__"], ["x2", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "x", ",", "edge_index", ",", "_", ",", "batch", ",", "_", ",", "_", "=", "self", ".", "pool3", "(", "x", ",", "edge_index", ",", "None", ",", "batch", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "[", "gmp", "(", "x", ",", "batch", ")", ",", "gap", "(", "x", ",", "batch", ")", "]", ",", "dim", "=", "1", ")", "\n", "# print(\"x1 shape \", x1.shape)", "\n", "# print(\"x2 shape \", x2.shape)", "\n", "# print(\"x3 shape \", x3.shape)", "\n", "x", "=", "x1", "+", "x2", "+", "x3", "\n", "\n", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "# print(\"x shape1 \", x.shape)", "\n", "# x = self.lin2(x)", "\n", "# x = self.act2(x)      ", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.MESH_NET.forward": [[161, 194], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model.MESH_NET.pool3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MESH_NET.lin1", "model.MESH_NET.act1", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "model.MESH_NET.conv1", "model.MESH_NET.conv2", "model.MESH_NET.conv3", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch_geometric.nn.global_mean_pool", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.MESH_NET.lin2"], "methods", ["None"], ["x", "=", "torch", ".", "sigmoid", "(", "self", ".", "lin2", "(", "x", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "# print(\"x shape3 \", x.shape)", "\n", "return", "x", "\n", "\n", "\n", "\n", "", "", "class", "D_GET_LOGITS", "(", "nn", ".", "Module", ")", ":", "#not chnaged yet", "\n", "    ", "def", "__init__", "(", "self", ",", "ndf", ",", "nef", ",", "bcondition", "=", "True", ")", ":", "\n", "        ", "super", "(", "D_GET_LOGITS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "ndf", "\n", "self", ".", "ef_dim", "=", "nef", "\n", "self", ".", "bcondition", "=", "bcondition", "\n", "kernel_length", "=", "41", "\n", "if", "bcondition", ":", "\n", "            ", "self", ".", "convd1d", "=", "nn", ".", "ConvTranspose1d", "(", "ndf", "*", "8", ",", "ndf", "//", "2", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     old_conv3x1(ndf * 8 + nef, ndf * 8),", "\n", "#     nn.BatchNorm1d(ndf * 8),", "\n", "#     nn.LeakyReLU(0.2, inplace=True),", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n", "#     # nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "#     nn.Sigmoid()", "\n", "#     )", "\n", "self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "old_conv3x1", "(", "ndf", "//", "2", "+", "nef", ",", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "# self.outlogits = nn.Sequential(", "\n", "#     nn.Conv1d(ndf * 8, 1, kernel_size=16, stride=4),", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.D_GET_LOGITS.__init__": [[198, 232], ["torch.Module.__init__", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.old_conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.old_conv3x1"], ["self", ".", "outlogits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "ndf", "//", "2", ",", "1", ",", "kernel_size", "=", "16", ",", "stride", "=", "4", ")", ",", "\n", "# nn.Conv1d(1, 1, kernel_size=16, stride=4),", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", "=", "None", ")", ":", "\n", "# conditioning output", "\n", "        ", "h_code", "=", "self", ".", "convd1d", "(", "h_code", ")", "\n", "if", "self", ".", "bcondition", "and", "c_code", "is", "not", "None", ":", "\n", "#print(\"mode c_code1 \",c_code.size())", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ")", "\n", "#print(\"mode c_code2 \",c_code.size())", "\n", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "16", ")", "\n", "# state size (ngf+egf) x 16", "\n", "#print(\"mode c_code \",c_code.size())", "\n", "#print(\"mode h_code \",h_code.size())", "\n", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "h_code", ",", "c_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "h_code", "\n", "\n", "", "output", "=", "self", ".", "outlogits", "(", "h_c_code", ")", "\n", "\n", "return", "output", ".", "view", "(", "-", "1", ")", "\n", "\n", "\n", "# ############# Networks for stageI GAN #############", "\n", "\n", "\n", "", "", "class", "STAGE1_G", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "256", "*", "8", "\n", "self", ".", "ef_dim", "=", "10", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.D_GET_LOGITS.forward": [[233, 253], ["model.D_GET_LOGITS.convd1d", "model.D_GET_LOGITS.outlogits", "model.D_GET_LOGITS.view", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["# self.z_dim = cfg.Z_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "kernel_length", "=", "41", "\n", "ninput", "=", "self", ".", "ef_dim", "#self.z_dim + self.ef_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "# TEXT.DIMENSION -> GAN.CONDITION_DIM", "\n", "# self.ca_net = CA_NET()", "\n", "self", ".", "cond_net", "=", "COND_NET", "(", ")", "\n", "# self.mesh_net = MESH_NET()", "\n", "# -> ngf x 16", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ninput", ",", "ngf", "*", "16", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "16", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "\n", "# ngf x 16 -> ngf/2 x 64", "\n", "self", ".", "upsample1", "=", "upBlock4", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "# -> ngf/4 x 256", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_G.__init__": [[259, 265], ["torch.Module.__init__", "model.STAGE1_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["self", ".", "upsample5", "=", "upBlock2", "(", "ngf", "//", "16", ",", "ngf", "//", "16", ")", "\n", "# -> 1 x 4096", "\n", "self", ".", "RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose1d", "(", "ngf", "//", "16", ",", "1", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "1", ",", "padding", "=", "20", ")", ",", "\n", "# old_conv3x1(ngf // 16, 1), # conv3x3(ngf // 16, 3),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_G.define_module": [[266, 295], ["model.COND_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.upBlock4", "model.upBlock4", "model.upBlock4", "model.upBlock2", "model.upBlock2", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2"], ["", "def", "forward", "(", "self", ",", "text_embedding", ",", "mesh_embed", ")", ":", "\n", "# mesh_embed = self.mesh_net(data)", "\n", "\n", "\n", "# c_code, mu, logvar = self.ca_net(text_embedding)", "\n", "# c_code = self.cond_net(text_embedding)", "\n", "# print(\"mesh_embed \", mesh_embed.shape)", "\n", "# print(\"text_embedding \", text_embedding.shape)", "\n", "        ", "full_embed", "=", "torch", ".", "cat", "(", "(", "mesh_embed", ",", "text_embedding", ")", ",", "1", ")", "\n", "c_code", "=", "self", ".", "cond_net", "(", "full_embed", ")", "\n", "\n", "h_code", "=", "self", ".", "fc", "(", "c_code", ")", "\n", "\n", "h_code", "=", "h_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "16", ")", "\n", "# print(\"h_code 1 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample1", "(", "h_code", ")", "\n", "# print(\"h_code 2 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample2", "(", "h_code", ")", "\n", "# print(\"h_code 3 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample3", "(", "h_code", ")", "\n", "# print(\"h_code 4 \",h_code.size())", "\n", "h_code", "=", "self", ".", "upsample4", "(", "h_code", ")", "\n", "h_code", "=", "self", ".", "upsample5", "(", "h_code", ")", "\n", "# print(\"h_code 5 \",h_code.size())", "\n", "# # state size 3 x 64 x 64", "\n", "fake_RIR", "=", "self", ".", "RIR", "(", "h_code", ")", "\n", "# print(\"fake_RIR \",fake_RIR.size())", "\n", "# # return None, fake_RIR, mu, logvar", "\n", "# #print(\"generator \", text_embedding.size())", "\n", "# return None, fake_RIR, text_embedding #c_code", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_G.forward": [[296, 327], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.STAGE1_G.cond_net", "model.STAGE1_G.fc", "model.STAGE1_G.view", "model.STAGE1_G.upsample1", "model.STAGE1_G.upsample2", "model.STAGE1_G.upsample3", "model.STAGE1_G.upsample4", "model.STAGE1_G.upsample5", "model.STAGE1_G.RIR"], "methods", ["None"], ["return", "None", ",", "fake_RIR", ",", "c_code", "\n", "\n", "\n", "", "", "class", "STAGE1_D", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STAGE1_D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "96", "\n", "self", ".", "ef_dim", "=", "256", "\n", "self", ".", "define_module", "(", ")", "\n", "\n", "", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", ",", "nef", "=", "self", ".", "df_dim", ",", "self", ".", "ef_dim", "\n", "kernel_length", "=", "41", "\n", "self", ".", "encode_RIR", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "6", ",", "ndf", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 1024", "\n", "nn", ".", "Conv1d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size (ndf*2) x 256", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# # state size (ndf*4) x 64", "\n", "nn", ".", "Conv1d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_length", ",", "4", ",", "20", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ndf", "*", "8", ")", ",", "\n", "# state size (ndf * 8) x 16)", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "get_cond_logits", "=", "D_GET_LOGITS", "(", "ndf", ",", "nef", ")", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_D.__init__": [[330, 335], ["torch.Module.__init__", "model.STAGE1_D.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], ["", "def", "forward", "(", "self", ",", "RIRs", ")", ":", "\n", "#print(\"model RIRs \",RIRs.size())", "\n", "        ", "RIR_embedding", "=", "self", ".", "encode_RIR", "(", "RIRs", ")", "\n", "#print(\"models RIR_embedding \",RIR_embedding.size())", "\n", "\n", "return", "RIR_embedding", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_D.define_module": [[336, 359], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.D_GET_LOGITS", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE1_D.forward": [[360, 366], ["model.STAGE1_D.encode_RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G.__init__": [[370, 380], ["torch.Module.__init__", "model.STAGE2_G.STAGE1_G.parameters", "model.STAGE2_G.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G._make_layer": [[381, 386], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G.define_module": [[387, 419], ["model.COND_NET", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.STAGE2_G._make_layer", "model.upBlock4", "model.upBlock4", "model.upBlock4", "model.sameBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.conv3x1", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.conv3x1", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G._make_layer", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.sameBlock", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_G.forward": [[420, 440], ["model.STAGE2_G.STAGE1_G", "stage1_RIR.detach.detach.detach", "model.STAGE2_G.encoder", "model.STAGE2_G.cond_net", "model.STAGE2_G.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.STAGE2_G.hr_joint", "model.STAGE2_G.residual", "model.STAGE2_G.upsample1", "model.STAGE2_G.upsample2", "model.STAGE2_G.upsample3", "model.STAGE2_G.upsample4", "model.STAGE2_G.RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__": [[443, 448], ["torch.Module.__init__", "model.STAGE2_D.define_module"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.__init__", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.define_module": [[449, 479], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.D_GET_LOGITS", "model.D_GET_LOGITS", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "model.conv3x1", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1", "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.STAGE2_D.forward": [[480, 483], ["model.STAGE2_D.encode_RIR"], "methods", ["None"], []], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1": [[11, 16], ["torch.Conv1d"], "function", ["None"], ["    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "41", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "20", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "old_conv3x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.old_conv3x1": [[17, 22], ["torch.Conv1d"], "function", ["None"], ["    ", "\"3x1 convolution with padding\"", "\n", "kernel_length", "=", "3", "\n", "return", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# def convn3x1(in_planes, out_planes, stride=1):", "\n", "#     \"3x1 convolution with padding\"", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock4": [[29, 40], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["    ", "kernel_length", "=", "41", "\n", "stride", "=", "4", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "19", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "", "def", "upBlock2", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "kernel_length", "=", "41", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.upBlock2": [[40, 51], ["torch.Sequential", "torch.ConvTranspose1d", "torch.BatchNorm1d", "torch.PReLU"], "function", ["None"], ["    ", "kernel_length", "=", "41", "\n", "stride", "=", "2", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "# conv3x1(in_planes, out_planes),", "\n", "nn", ".", "ConvTranspose1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_length", ",", "stride", "=", "stride", ",", "padding", "=", "20", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n", "", "def", "sameBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.sameBlock": [[52, 60], ["torch.Sequential", "model.conv3x1", "torch.BatchNorm1d", "torch.PReLU"], "function", ["home.repos.pwc.inspect_result.anton-jeran_MESH2IR.MESH2IR-D-EDR.model.conv3x1"], ["    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=4, mode='nearest'),", "\n", "conv3x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ",", "\n", "# nn.ReLU(True)", "\n", "nn", ".", "PReLU", "(", ")", ")", "\n", "return", "block", "\n", "\n", "\n"]]}