{"home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.parse_args": [[6, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "ValueError"], "function", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.parse_args"], ["def", "parse_args", "(", "script", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'few-shot script %s'", "%", "(", "script", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'miniImagenet'", ",", "help", "=", "'miniImagenet/cub'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'ResNet18'", ",", "help", "=", "'model: Conv{4|6} / ResNet{10|18|34|50|101}'", ")", "# we use ResNet18 in the paper", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'maml_approx'", ",", "help", "=", "'maml{_approx}'", ")", "#maml_approx use first-order approximation in the gradient for efficiency", "\n", "parser", ".", "add_argument", "(", "'--train_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_n_way'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'class num to classify for testing (validation) '", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shot'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'number of labeled data in each class, same as n_support'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_aug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'perform data augmentation or not during training '", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'tmp'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "default", "=", "'./output'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "default", "=", "'./filelists'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "\n", "if", "script", "==", "'train'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "help", "=", "'total number of classes in softmax, only used in baseline'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Starting epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_epoch'", ",", "default", "=", "400", ",", "type", "=", "int", ",", "help", "=", "'Stopping epoch'", ")", "# for meta-learning methods, each epoch contains 100 episodes", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'continue from previous trained model with largest epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "'gg3b0'", ",", "type", "=", "str", ",", "help", "=", "'continue from baseline, neglected if resume is true'", ")", "#never used in the paper", "\n", "parser", ".", "add_argument", "(", "'--dropout_method'", ",", "default", "=", "'none'", ",", "help", "=", "'none/binary/gaussian'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_rate'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'dropout rate, recommend [0.1, 0.2]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout_schedule'", ",", "default", "=", "'constant'", ",", "help", "=", "'constant/linear'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "41608", ",", "type", "=", "int", ",", "help", "=", "'random seed'", ")", "\n", "", "elif", "script", "==", "'test'", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--split'", ",", "default", "=", "'novel'", ",", "help", "=", "'base/val/novel'", ")", "#default novel, but you can also test base/val class accuracy if you want", "\n", "parser", ".", "add_argument", "(", "'--save_iter'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "'save feature from the model trained in x epoch, use the best model if x is -1'", ")", "\n", "", "else", ":", "\n", "       ", "raise", "ValueError", "(", "'Unknown script'", ")", "\n", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.get_assigned_file": [[38, 41], ["os.path.join"], "function", ["None"], ["", "def", "get_assigned_file", "(", "checkpoint_dir", ",", "num", ")", ":", "\n", "    ", "assign_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "num", ")", ")", "\n", "return", "assign_file", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.get_resume_file": [[42, 52], ["glob.glob", "numpy.array", "numpy.max", "os.path.join", "os.path.join", "len", "int", "os.path.basename", "os.path.splitext", "os.path.basename"], "function", ["None"], ["", "def", "get_resume_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "filelist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'*.tar'", ")", ")", "\n", "if", "len", "(", "filelist", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "basename", "(", "x", ")", "!=", "'best_model.tar'", "]", "\n", "epochs", "=", "np", ".", "array", "(", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ")", "for", "x", "in", "filelist", "]", ")", "\n", "max_epoch", "=", "np", ".", "max", "(", "epochs", ")", "\n", "resume_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "max_epoch", ")", ")", "\n", "return", "resume_file", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.get_best_file": [[53, 59], ["os.path.join", "os.path.isfile", "options.get_resume_file"], "function", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.options.get_resume_file"], ["", "def", "get_best_file", "(", "checkpoint_dir", ")", ":", "\n", "    ", "best_file", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'best_model.tar'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "best_file", ")", ":", "\n", "        ", "return", "best_file", "\n", "", "else", ":", "\n", "        ", "return", "get_resume_file", "(", "checkpoint_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.train.train": [[12, 40], ["range", "model.update_lr", "model.train", "model.train_loop", "model.eval", "model.test_loop", "print", "os.path.join", "torch.save", "print", "os.path.join", "torch.save", "model.state_dict", "model.optimizer.state_dict", "model.state_dict", "model.optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.update_lr", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.None.train.train", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.train_loop", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.test_loop"], ["def", "train", "(", "base_loader", ",", "val_loader", ",", "model", ",", "max_acc", ",", "total_it", ",", "start_epoch", ",", "stop_epoch", ",", "params", ")", ":", "\n", "\n", "  ", "for", "epoch", "in", "range", "(", "start_epoch", ",", "stop_epoch", ")", ":", "\n", "\n", "# update lr", "\n", "    ", "model", ".", "update_lr", "(", ")", "\n", "\n", "# train", "\n", "model", ".", "train", "(", ")", "\n", "total_it", "=", "model", ".", "train_loop", "(", "epoch", ",", "stop_epoch", ",", "base_loader", ",", "total_it", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# validate", "\n", "acc", "=", "model", ".", "test_loop", "(", "val_loader", ",", "epoch", "=", "epoch", ")", "\n", "if", "acc", ">", "max_acc", ":", "\n", "      ", "print", "(", "\"best model! save...\"", ")", "\n", "max_acc", "=", "acc", "\n", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'best_model.tar'", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'total_it'", ":", "total_it", ",", "'max_acc'", ":", "max_acc", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "model", ".", "optimizer", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "\"QQ! best accuracy {:f}\"", ".", "format", "(", "max_acc", ")", ")", "\n", "\n", "# save model", "\n", "", "if", "(", "epoch", "%", "params", ".", "save_freq", "==", "0", ")", "or", "(", "epoch", "==", "stop_epoch", "-", "1", ")", ":", "\n", "      ", "outfile", "=", "os", ".", "path", ".", "join", "(", "params", ".", "checkpoint_dir", ",", "'{:d}.tar'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "'epoch'", ":", "epoch", ",", "'total_it'", ":", "total_it", ",", "'max_acc'", ":", "max_acc", ",", "'state'", ":", "model", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "model", ".", "optimizer", ".", "state_dict", "(", ")", "}", ",", "outfile", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.additional_transforms.ImageJitter.__init__": [[12, 14], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "    ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.additional_transforms.ImageJitter.__call__": [[14, 23], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "      ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SimpleDataset.__init__": [[12, 17], ["open", "json.load"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_file", ",", "transform", ",", "target_transform", "=", "identity", ")", ":", "\n", "    ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SimpleDataset.__getitem__": [[18, 24], ["os.path.join", "PIL.Image.open().convert", "dataset.SimpleDataset.transform", "dataset.SimpleDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "meta", "[", "'image_names'", "]", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "meta", "[", "'image_labels'", "]", "[", "i", "]", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SimpleDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta", "[", "'image_names'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SetDataset.__init__": [[29, 49], ["numpy.unique().tolist", "zip", "dict", "open", "json.load", "dataset.SetDataset.sub_meta[].append", "dataset.SubDataset", "dataset.SetDataset.sub_dataloader.append", "numpy.unique", "torch.utils.data.DataLoader"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "data_file", ",", "batch_size", ",", "transform", ")", ":", "\n", "    ", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "meta", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "cl_list", "=", "np", ".", "unique", "(", "self", ".", "meta", "[", "'image_labels'", "]", ")", ".", "tolist", "(", ")", "\n", "self", ".", "sub_meta", "=", "{", "}", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "      ", "self", ".", "sub_meta", "[", "cl", "]", "=", "[", "]", "\n", "\n", "", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "meta", "[", "'image_names'", "]", ",", "self", ".", "meta", "[", "'image_labels'", "]", ")", ":", "\n", "      ", "self", ".", "sub_meta", "[", "y", "]", ".", "append", "(", "x", ")", "\n", "\n", "", "self", ".", "sub_dataloader", "=", "[", "]", "\n", "sub_data_loader_params", "=", "dict", "(", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "0", ",", "#use main thread only or may receive multiple batches", "\n", "pin_memory", "=", "False", ")", "\n", "for", "cl", "in", "self", ".", "cl_list", ":", "\n", "      ", "sub_dataset", "=", "SubDataset", "(", "self", ".", "sub_meta", "[", "cl", "]", ",", "cl", ",", "transform", "=", "transform", ")", "\n", "self", ".", "sub_dataloader", ".", "append", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sub_dataset", ",", "**", "sub_data_loader_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SetDataset.__getitem__": [[50, 52], ["next", "iter"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "return", "next", "(", "iter", "(", "self", ".", "sub_dataloader", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SetDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "cl_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SubDataset.__init__": [[57, 65], ["torchvision.ToTensor", "len", "[].tolist", "len", "range", "numpy.array"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sub_meta", ",", "cl", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "target_transform", "=", "identity", ",", "min_size", "=", "50", ")", ":", "\n", "    ", "self", ".", "sub_meta", "=", "sub_meta", "\n", "self", ".", "cl", "=", "cl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "if", "len", "(", "self", ".", "sub_meta", ")", "<", "min_size", ":", "\n", "      ", "idxs", "=", "[", "i", "%", "len", "(", "self", ".", "sub_meta", ")", "for", "i", "in", "range", "(", "min_size", ")", "]", "\n", "self", ".", "sub_meta", "=", "np", ".", "array", "(", "self", ".", "sub_meta", ")", "[", "idxs", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SubDataset.__getitem__": [[66, 72], ["os.path.join", "PIL.Image.open().convert", "dataset.SubDataset.transform", "dataset.SubDataset.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sub_meta", "[", "i", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "target_transform", "(", "self", ".", "cl", ")", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.SubDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "sub_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.EpisodicBatchSampler.__init__": [[77, 81], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "n_classes", ",", "n_way", ",", "n_episodes", ")", ":", "\n", "    ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_episodes", "=", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.EpisodicBatchSampler.__len__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "n_episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.dataset.EpisodicBatchSampler.__iter__": [[85, 88], ["range", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "n_episodes", ")", ":", "\n", "      ", "yield", "torch", ".", "randperm", "(", "self", ".", "n_classes", ")", "[", ":", "self", ".", "n_way", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.__init__": [[10, 16], ["dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "\n", "normalize_param", "=", "dict", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "jitter_param", "=", "dict", "(", "Brightness", "=", "0.4", ",", "Contrast", "=", "0.4", ",", "Color", "=", "0.4", ")", ")", ":", "\n", "    ", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "normalize_param", "=", "normalize_param", "\n", "self", ".", "jitter_param", "=", "jitter_param", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.parse_transform": [[17, 32], ["getattr", "data.ImageJitter", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "data.ImageJitter.", "int", "int"], "methods", ["None"], ["", "def", "parse_transform", "(", "self", ",", "transform_type", ")", ":", "\n", "    ", "if", "transform_type", "==", "'ImageJitter'", ":", "\n", "      ", "method", "=", "add_transforms", ".", "ImageJitter", "(", "self", ".", "jitter_param", ")", "\n", "return", "method", "\n", "", "method", "=", "getattr", "(", "transforms", ",", "transform_type", ")", "\n", "if", "transform_type", "==", "'RandomResizedCrop'", ":", "\n", "      ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'CenterCrop'", ":", "\n", "      ", "return", "method", "(", "self", ".", "image_size", ")", "\n", "", "elif", "transform_type", "==", "'Resize'", ":", "\n", "      ", "return", "method", "(", "[", "int", "(", "self", ".", "image_size", "*", "1.15", ")", ",", "int", "(", "self", ".", "image_size", "*", "1.15", ")", "]", ")", "\n", "", "elif", "transform_type", "==", "'Normalize'", ":", "\n", "      ", "return", "method", "(", "**", "self", ".", "normalize_param", ")", "\n", "", "else", ":", "\n", "      ", "return", "method", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.get_composed_transform": [[33, 42], ["torchvision.Compose", "datamgr.TransformLoader.parse_transform"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.parse_transform"], ["", "", "def", "get_composed_transform", "(", "self", ",", "aug", "=", "False", ")", ":", "\n", "    ", "if", "aug", ":", "\n", "      ", "transform_list", "=", "[", "'RandomResizedCrop'", ",", "'ImageJitter'", ",", "'RandomHorizontalFlip'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "", "else", ":", "\n", "      ", "transform_list", "=", "[", "'Resize'", ",", "'CenterCrop'", ",", "'ToTensor'", ",", "'Normalize'", "]", "\n", "\n", "", "transform_funcs", "=", "[", "self", ".", "parse_transform", "(", "x", ")", "for", "x", "in", "transform_list", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.DataManager.get_data_loader": [[44, 47], ["None"], "methods", ["None"], ["  ", "@", "abstractmethod", "\n", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.SimpleDataManager.__init__": [[49, 53], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "batch_size", ")", ":", "\n", "    ", "super", "(", "SimpleDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.SimpleDataManager.get_data_loader": [[54, 60], ["datamgr.SimpleDataManager.trans_loader.get_composed_transform", "data.dataset.SimpleDataset", "dict", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "    ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SimpleDataset", "(", "data_file", ",", "transform", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.SetDataManager.__init__": [[62, 70], ["super().__init__", "datamgr.TransformLoader"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "image_size", ",", "n_way", ",", "n_support", ",", "n_query", ",", "n_eposide", "=", "100", ")", ":", "\n", "    ", "super", "(", "SetDataManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "batch_size", "=", "n_support", "+", "n_query", "\n", "self", ".", "n_eposide", "=", "n_eposide", "\n", "\n", "self", ".", "trans_loader", "=", "TransformLoader", "(", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.SetDataManager.get_data_loader": [[71, 78], ["datamgr.SetDataManager.trans_loader.get_composed_transform", "data.dataset.SetDataset", "data.dataset.EpisodicBatchSampler", "dict", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.data.datamgr.TransformLoader.get_composed_transform"], ["", "def", "get_data_loader", "(", "self", ",", "data_file", ",", "aug", ")", ":", "#parameters that would change on train/val set", "\n", "    ", "transform", "=", "self", ".", "trans_loader", ".", "get_composed_transform", "(", "aug", ")", "\n", "dataset", "=", "SetDataset", "(", "data_file", ",", "self", ".", "batch_size", ",", "transform", ")", "\n", "sampler", "=", "EpisodicBatchSampler", "(", "len", "(", "dataset", ")", ",", "self", ".", "n_way", ",", "self", ".", "n_eposide", ")", "\n", "data_loader_params", "=", "dict", "(", "batch_sampler", "=", "sampler", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "data_loader_params", ")", "\n", "return", "data_loader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.drop_grad.DropGrad.__init__": [[5, 10], ["super().__init__", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "method", "=", "'gaussian'", ",", "rate", "=", "0.1", ",", "schedule", "=", "'constant'", ")", ":", "\n", "    ", "super", "(", "DropGrad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "rate", "=", "rate", "if", "self", ".", "method", "!=", "'gaussian'", "else", "np", ".", "sqrt", "(", "rate", "/", "(", "1", "-", "rate", ")", ")", "\n", "self", ".", "schedule", "=", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.drop_grad.DropGrad.update_rate": [[11, 18], ["Exception"], "methods", ["None"], ["", "def", "update_rate", "(", "self", ",", "epoch", ",", "stop_epoch", ")", ":", "\n", "    ", "if", "self", ".", "schedule", "==", "'constant'", ":", "\n", "      ", "self", ".", "cur_rate", "=", "self", ".", "rate", "\n", "", "elif", "self", ".", "schedule", "==", "'linear'", ":", "\n", "      ", "self", ".", "cur_rate", "=", "self", ".", "rate", "*", "epoch", "/", "(", "stop_epoch", "-", "1", ")", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "'no such DropGrad schedule'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.drop_grad.DropGrad.forward": [[19, 29], ["torch.gt().float", "torch.normal", "Exception", "torch.gt", "torch.ones_like", "torch.rand_like", "torch.ones_like"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "if", "self", ".", "method", "==", "'binary'", ":", "\n", "      ", "output", "=", "input", "*", "(", "torch", ".", "gt", "(", "torch", ".", "rand_like", "(", "input", ")", ",", "self", ".", "cur_rate", ")", ".", "float", "(", ")", "*", "(", "1", "/", "(", "1", "-", "self", ".", "cur_rate", ")", ")", ")", "\n", "", "elif", "self", ".", "method", "==", "'gaussian'", ":", "\n", "      ", "output", "=", "input", "*", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "ones_like", "(", "input", ")", ",", "std", "=", "torch", ".", "ones_like", "(", "input", ")", "*", "self", ".", "cur_rate", ")", "\n", "", "elif", "self", ".", "method", "==", "'none'", ":", "\n", "      ", "output", "=", "input", "\n", "", "else", ":", "\n", "      ", "raise", "Exception", "(", "'no such DropGrad method'", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.__init__": [[11, 25], ["methods.meta_template.MetaTemplate.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "methods.backbone.Linear_fw", "maml.MAML.classifier.bias.data.fill_", "methods.drop_grad.DropGrad", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "maml.MAML.parameters"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "None", ",", "approx", "=", "False", ",", "dropout_method", "=", "'none'", ",", "dropout_rate", "=", "0.", ",", "dropout_schedule", "=", "'constant'", ")", ":", "\n", "    ", "super", "(", "MAML", ",", "self", ")", ".", "__init__", "(", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "tf_path", ",", "change_way", "=", "False", ")", "\n", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "classifier", "=", "backbone", ".", "Linear_fw", "(", "self", ".", "feat_dim", ",", "n_way", ")", "\n", "self", ".", "classifier", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "self", ".", "batch_size", "=", "4", "\n", "self", ".", "task_update_num", "=", "5", "\n", "self", ".", "train_lr", "=", "0.01", "\n", "self", ".", "approx", "=", "approx", "#first order approx.", "\n", "\n", "self", ".", "dropout", "=", "DropGrad", "(", "dropout_method", ",", "dropout_rate", ",", "dropout_schedule", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.forward": [[26, 30], ["maml.MAML.feature.forward", "maml.MAML.classifier.forward"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "scores", "=", "self", ".", "classifier", ".", "forward", "(", "out", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.set_forward": [[31, 71], ["x.cuda.cuda.cuda", "x[].contiguous().view", "x[].contiguous().view", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "list", "maml.MAML.parameters", "maml.MAML.zero_grad", "range", "maml.MAML.forward", "maml.MAML.parameters", "maml.MAML.forward", "maml.MAML.loss_fn", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "enumerate", "x[].contiguous", "x[].contiguous", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "maml.MAML.named_parameters", "list.append", "x.cuda.cuda.size", "x.cuda.cuda.size", "numpy.repeat", "g.detach", "maml.MAML.dropout", "range"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "def", "set_forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "x_a_i", "=", "x", "[", ":", ",", ":", "self", ".", "n_support", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "x_b_i", "=", "x", "[", ":", ",", "self", ".", "n_support", ":", ",", ":", ",", ":", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "y_a_i", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "fast_parameters", "=", "list", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "weight", "in", "self", ".", "parameters", "(", ")", ":", "\n", "      ", "weight", ".", "fast", "=", "None", "\n", "", "self", ".", "zero_grad", "(", ")", "\n", "\n", "for", "task_step", "in", "range", "(", "self", ".", "task_update_num", ")", ":", "\n", "\n", "# forward and get grad on support data", "\n", "      ", "scores", "=", "self", ".", "forward", "(", "x_a_i", ")", "\n", "set_loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_a_i", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "set_loss", ",", "fast_parameters", ",", "create_graph", "=", "True", ")", "\n", "\n", "# first order approx", "\n", "if", "self", ".", "approx", ":", "\n", "        ", "grad", "=", "[", "g", ".", "detach", "(", ")", "for", "g", "in", "grad", "]", "\n", "\n", "# update", "\n", "", "fast_parameters", "=", "[", "]", "\n", "for", "k", ",", "(", "name", ",", "weight", ")", "in", "enumerate", "(", "self", ".", "named_parameters", "(", ")", ")", ":", "\n", "\n", "# regularization", "\n", "        ", "if", "self", ".", "training", ":", "\n", "          ", "grad", "[", "k", "]", "=", "self", ".", "dropout", "(", "grad", "[", "k", "]", ")", "\n", "\n", "# update", "\n", "", "if", "weight", ".", "fast", "is", "None", ":", "\n", "          ", "weight", ".", "fast", "=", "weight", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "#link fast weight to weight", "\n", "", "else", ":", "\n", "          ", "weight", ".", "fast", "=", "weight", ".", "fast", "-", "self", ".", "train_lr", "*", "grad", "[", "k", "]", "\n", "", "fast_parameters", ".", "append", "(", "weight", ".", "fast", ")", "\n", "\n", "# forward and get loss on query data", "\n", "", "", "scores", "=", "self", ".", "forward", "(", "x_b_i", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.set_forward_adaptation": [[72, 74], ["ValueError"], "methods", ["None"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "False", ")", ":", "#overwrite parrent function", "\n", "    ", "raise", "ValueError", "(", "'MAML performs further adapation simply by increasing task_upate_num'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.set_forward_loss": [[75, 80], ["maml.MAML.set_forward", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "maml.MAML.loss_fn", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.repeat", "range"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward"], ["", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "    ", "scores", "=", "self", ".", "set_forward", "(", "x", ")", "\n", "y_b_i", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "scores", ",", "y_b_i", ")", "\n", "return", "scores", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.train_loop": [[81, 119], ["maml.MAML.optimizer.zero_grad", "maml.MAML.dropout.update_rate", "enumerate", "len", "maml.MAML.optimizer.zero_grad", "maml.MAML.set_forward_loss", "loss_all.append", "x.size", "x.size", "loss.item", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum.backward", "torch.stack().sum.backward", "maml.MAML.optimizer.step", "print", "maml.MAML.tf_writer.add_scalar", "loss.item", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "float"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.drop_grad.DropGrad.update_rate", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "stop_epoch", ",", "train_loader", ",", "total_it", ")", ":", "#overwrite parrent function", "\n", "    ", "print_freq", "=", "len", "(", "train_loader", ")", "//", "5", "\n", "avg_loss", "=", "0", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# update dropout rate", "\n", "self", ".", "dropout", ".", "update_rate", "(", "epoch", ",", "stop_epoch", ")", "## epoch / (stop_epoch - 1) * self.dropout_p", "\n", "\n", "# train loop", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "      ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "(", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "# get loss", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "\n", "loss_all", ".", "append", "(", "loss", ")", "\n", "\n", "# batch update", "\n", "task_count", "+=", "1", "\n", "if", "task_count", "==", "self", ".", "batch_size", ":", "\n", "        ", "loss_q", "=", "torch", ".", "stack", "(", "loss_all", ")", ".", "sum", "(", "0", ")", "\n", "loss_q", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "task_count", "=", "0", "\n", "loss_all", "=", "[", "]", "\n", "\n", "# print out", "\n", "", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "        ", "print", "(", "'Epoch {:d}/{:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", "+", "1", ",", "stop_epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "", "if", "(", "total_it", "+", "1", ")", "%", "10", "==", "0", "and", "self", ".", "tf_writer", "is", "not", "None", ":", "\n", "        ", "self", ".", "tf_writer", ".", "add_scalar", "(", "'maml/query_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "", "total_it", "+=", "1", "\n", "\n", "", "return", "total_it", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.maml.MAML.test_loop": [[120, 148], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "print", "maml.MAML.correct", "numpy.asarray.append", "maml.MAML.tf_writer.add_scalar", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.correct"], ["", "def", "test_loop", "(", "self", ",", "test_loader", ",", "epoch", "=", "None", ",", "return_std", "=", "False", ")", ":", "#overwrite parrent function", "\n", "    ", "loss", "=", "0.", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "      ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "assert", "(", "self", ".", "n_way", "==", "x", ".", "size", "(", "0", ")", ")", "\n", "correct_this", ",", "count_this", ",", "loss_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "loss", "+=", "loss_this", "\n", "count", "+=", "count_this", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'--- %d Loss = %.6f ---'", "%", "(", "iter_num", ",", "loss", "/", "count", ")", ")", "\n", "print", "(", "'--- %d Test Acc = %4.2f%% +- %4.2f%% ---'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "if", "self", ".", "tf_writer", "is", "not", "None", ":", "\n", "      ", "assert", "(", "epoch", "is", "not", "None", ")", "\n", "self", ".", "tf_writer", ".", "add_scalar", "(", "'maml/val_loss'", ",", "loss", "/", "count", ",", "epoch", ")", "\n", "\n", "", "if", "return_std", ":", "\n", "      ", "return", "acc_mean", ",", "acc_std", "\n", "", "else", ":", "\n", "      ", "return", "acc_mean", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.__init__": [[8, 17], ["torch.Module.__init__", "model_func", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_func", ",", "n_way", ",", "n_support", ",", "tf_path", "=", "None", ",", "change_way", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTemplate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_support", "=", "n_support", "\n", "self", ".", "n_query", "=", "-", "1", "#(change depends on input)", "\n", "self", ".", "feature", "=", "model_func", "(", ")", "\n", "self", ".", "feat_dim", "=", "self", ".", "feature", ".", "final_feat_dim", "\n", "self", ".", "change_way", "=", "change_way", "#some methods allow different_way classification during training and test", "\n", "self", ".", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "tf_path", ")", "if", "tf_path", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward": [[18, 21], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward_loss": [[22, 25], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_forward_loss", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.forward": [[26, 29], ["meta_template.MetaTemplate.feature.forward"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.parse_feature": [[30, 42], ["x.contiguous().view.contiguous().view.cuda", "x.contiguous().view.contiguous().view.contiguous().view", "meta_template.MetaTemplate.feature.forward", "z_all.view.view.view", "x.contiguous().view.contiguous().view.contiguous", "x.contiguous().view.contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "def", "parse_feature", "(", "self", ",", "x", ",", "is_feature", ")", ":", "\n", "        ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "if", "is_feature", ":", "\n", "            ", "z_all", "=", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "(", "self", ".", "n_support", "+", "self", ".", "n_query", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "z_all", "=", "self", ".", "feature", ".", "forward", "(", "x", ")", "\n", "z_all", "=", "z_all", ".", "view", "(", "self", ".", "n_way", ",", "self", ".", "n_support", "+", "self", ".", "n_query", ",", "-", "1", ")", "\n", "", "z_support", "=", "z_all", "[", ":", ",", ":", "self", ".", "n_support", "]", "\n", "z_query", "=", "z_all", "[", ":", ",", "self", ".", "n_support", ":", "]", "\n", "\n", "return", "z_support", ",", "z_query", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.correct": [[43, 51], ["meta_template.MetaTemplate.set_forward_loss", "numpy.repeat", "scores.data.topk", "topk_labels.cpu().numpy", "numpy.sum", "range", "float", "len", "topk_labels.cpu", "loss.item", "len"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward_loss"], ["", "def", "correct", "(", "self", ",", "x", ")", ":", "\n", "        ", "scores", ",", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "y_query", "=", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_query", ")", "\n", "\n", "topk_scores", ",", "topk_labels", "=", "scores", ".", "data", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "np", ".", "sum", "(", "topk_ind", "[", ":", ",", "0", "]", "==", "y_query", ")", "\n", "return", "float", "(", "top1_correct", ")", ",", "len", "(", "y_query", ")", ",", "loss", ".", "item", "(", ")", "*", "len", "(", "y_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.train_loop": [[52, 71], ["enumerate", "len", "optimizer.zero_grad", "meta_template.MetaTemplate.set_forward_loss", "loss.backward", "optimizer.step", "x.size", "x.size", "loss.item", "print", "meta_template.MetaTemplate.tf_writer.add_scalar", "loss.item", "len", "float"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward_loss"], ["", "def", "train_loop", "(", "self", ",", "epoch", ",", "train_loader", ",", "optimizer", ",", "total_it", ")", ":", "\n", "        ", "print_freq", "=", "len", "(", "train_loader", ")", "//", "10", "#10", "\n", "avg_loss", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "loss", "=", "self", ".", "set_forward_loss", "(", "x", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_loss", "=", "avg_loss", "+", "loss", ".", "item", "(", ")", "#.data[0]", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'", ".", "format", "(", "epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "avg_loss", "/", "float", "(", "i", "+", "1", ")", ")", ")", "\n", "", "if", "(", "total_it", "+", "1", ")", "%", "10", "==", "0", "and", "self", ".", "tf_writer", "is", "not", "None", ":", "\n", "                ", "self", ".", "tf_writer", ".", "add_scalar", "(", "self", ".", "method", "+", "'/query_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_it", "+", "1", ")", "\n", "", "total_it", "+=", "1", "\n", "", "return", "total_it", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.test_loop": [[72, 95], ["len", "enumerate", "numpy.asarray", "numpy.mean", "numpy.std", "print", "print", "meta_template.MetaTemplate.correct", "numpy.asarray.append", "x.size", "x.size", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.correct"], ["", "def", "test_loop", "(", "self", ",", "epoch", ",", "test_loader", ")", ":", "\n", "#correct =0", "\n", "        ", "loss", "=", "0.", "\n", "count", "=", "0", "\n", "acc_all", "=", "[", "]", "\n", "\n", "iter_num", "=", "len", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "x", ",", "_", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "self", ".", "n_query", "=", "x", ".", "size", "(", "1", ")", "-", "self", ".", "n_support", "\n", "if", "self", ".", "change_way", ":", "\n", "                ", "self", ".", "n_way", "=", "x", ".", "size", "(", "0", ")", "\n", "", "correct_this", ",", "count_this", ",", "loss_this", "=", "self", ".", "correct", "(", "x", ")", "\n", "acc_all", ".", "append", "(", "correct_this", "/", "count_this", "*", "100", ")", "\n", "loss", "+=", "loss_this", "\n", "count", "+=", "count_this", "\n", "\n", "", "acc_all", "=", "np", ".", "asarray", "(", "acc_all", ")", "\n", "acc_mean", "=", "np", ".", "mean", "(", "acc_all", ")", "\n", "acc_std", "=", "np", ".", "std", "(", "acc_all", ")", "\n", "print", "(", "'--- %d Loss = %.6f ---'", "%", "(", "iter_num", ",", "loss", "/", "count", ")", ")", "\n", "print", "(", "'--- %d Test Acc = %4.2f%% +- %4.2f%% ---'", "%", "(", "iter_num", ",", "acc_mean", ",", "1.96", "*", "acc_std", "/", "np", ".", "sqrt", "(", "iter_num", ")", ")", ")", "\n", "\n", "return", "acc_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_forward_adaptation": [[96, 130], ["meta_template.MetaTemplate.parse_feature", "z_support.contiguous().view.contiguous().view.contiguous().view", "z_query.contiguous().view.contiguous().view.contiguous().view", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y_support.cuda.cuda.cuda", "torch.Linear", "torch.Linear", "linear_clf.cuda.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "loss_function.cuda.cuda.cuda", "range", "linear_clf.cuda.cuda.", "numpy.repeat", "linear_clf.cuda.cuda.parameters", "numpy.random.permutation", "range", "z_support.contiguous().view.contiguous().view.contiguous", "z_query.contiguous().view.contiguous().view.contiguous", "range", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "linear_clf.cuda.cuda.", "loss_function.cuda.cuda.", "loss_function.cuda.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.parse_feature"], ["", "def", "set_forward_adaptation", "(", "self", ",", "x", ",", "is_feature", "=", "True", ")", ":", "#further adaptation, default is fixing feature and train a new softmax clasifier", "\n", "        ", "assert", "is_feature", "==", "True", ",", "'Feature is fixed in further adaptation'", "\n", "z_support", ",", "z_query", "=", "self", ".", "parse_feature", "(", "x", ",", "is_feature", ")", "\n", "\n", "z_support", "=", "z_support", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_support", ",", "-", "1", ")", "\n", "z_query", "=", "z_query", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "n_way", "*", "self", ".", "n_query", ",", "-", "1", ")", "\n", "\n", "y_support", "=", "torch", ".", "from_numpy", "(", "np", ".", "repeat", "(", "range", "(", "self", ".", "n_way", ")", ",", "self", ".", "n_support", ")", ")", "\n", "y_support", "=", "y_support", ".", "cuda", "(", ")", "\n", "\n", "linear_clf", "=", "nn", ".", "Linear", "(", "self", ".", "feat_dim", ",", "self", ".", "n_way", ")", "\n", "linear_clf", "=", "linear_clf", ".", "cuda", "(", ")", "\n", "\n", "set_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "linear_clf", ".", "parameters", "(", ")", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "dampening", "=", "0.9", ",", "weight_decay", "=", "0.001", ")", "\n", "\n", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss_function", "=", "loss_function", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "4", "\n", "support_size", "=", "self", ".", "n_way", "*", "self", ".", "n_support", "\n", "for", "epoch", "in", "range", "(", "100", ")", ":", "\n", "            ", "rand_id", "=", "np", ".", "random", ".", "permutation", "(", "support_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "support_size", ",", "batch_size", ")", ":", "\n", "                ", "set_optimizer", ".", "zero_grad", "(", ")", "\n", "selected_id", "=", "torch", ".", "from_numpy", "(", "rand_id", "[", "i", ":", "min", "(", "i", "+", "batch_size", ",", "support_size", ")", "]", ")", ".", "cuda", "(", ")", "\n", "z_batch", "=", "z_support", "[", "selected_id", "]", "\n", "y_batch", "=", "y_support", "[", "selected_id", "]", "\n", "scores", "=", "linear_clf", "(", "z_batch", ")", "\n", "loss", "=", "loss_function", "(", "scores", ",", "y_batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "set_optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "scores", "=", "linear_clf", "(", "z_query", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.set_scheduler": [[131, 133], ["None"], "methods", ["None"], ["", "def", "set_scheduler", "(", "self", ",", "cur_ep", ",", "stop_ep", ")", ":", "\n", "      ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.meta_template.MetaTemplate.update_lr": [[134, 136], ["None"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ")", ":", "\n", "      ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.distLinear.__init__": [[21, 25], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ")", ":", "\n", "        ", "super", "(", "distLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "indim", ",", "outdim", ",", "bias", "=", "False", ")", ",", "name", "=", "'weight'", ",", "dim", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.distLinear.forward": [[26, 35], ["torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "x.div", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "torch.norm().unsqueeze().expand_as", "backbone.distLinear.L.weight.data.div", "backbone.distLinear.L", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "x_normalized", "=", "x", ".", "div", "(", "x_norm", "+", "0.00001", ")", "\n", "L_norm", "=", "torch", ".", "norm", "(", "self", ".", "L", ".", "weight", ".", "data", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "self", ".", "L", ".", "weight", ".", "data", ")", "\n", "self", ".", "L", ".", "weight", ".", "data", "=", "self", ".", "L", ".", "weight", ".", "data", ".", "div", "(", "L_norm", "+", "0.00001", ")", "\n", "cos_dist", "=", "self", ".", "L", "(", "x_normalized", ")", "#matrix product by forward function", "\n", "scores", "=", "10", "*", "cos_dist", "#a fixed scale factor to scale the output of cos value into a reasonably large input for softmax", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Flatten.__init__": [[37, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Flatten.forward": [[40, 42], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Linear_fw.__init__": [[45, 49], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "Linear_fw", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "#Lazy hack to add fast weight link", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Linear_fw.forward": [[50, 56], ["torch.linear", "torch.linear", "torch.linear", "super().forward"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "super", "(", "Linear_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Conv2d_fw.__init__": [[58, 63], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "if", "not", "self", ".", "bias", "is", "None", ":", "\n", "            ", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Conv2d_fw.forward": [[64, 77], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward", "torch.conv2d", "torch.conv2d", "torch.conv2d", "super().forward"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "                ", "out", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "super", "(", "Conv2d_fw", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.BatchNorm2d_fw.__init__": [[79, 83], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "BatchNorm2d_fw", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "weight", ".", "fast", "=", "None", "\n", "self", ".", "bias", ".", "fast", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.BatchNorm2d_fw.forward": [[84, 93], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.data.size", "x.data.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "running_mean", "=", "torch", ".", "zeros", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "x", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "weight", ".", "fast", "is", "not", "None", "and", "self", ".", "bias", ".", "fast", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ".", "fast", ",", "self", ".", "bias", ".", "fast", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "#batch_norm momentum hack: follow hack of Kate Rakelly in pytorch-maml/src/layers.py", "\n", "", "else", ":", "\n", "            ", "out", "=", "F", ".", "batch_norm", "(", "x", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "training", "=", "True", ",", "momentum", "=", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ConvBlock.__init__": [[97, 118], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.ConvBlock.parametrized_layers.append", "backbone.init_layer"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "pool", "=", "True", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "3", ",", "padding", "=", "padding", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C", ",", "self", ".", "BN", ",", "self", ".", "relu", "]", "\n", "if", "pool", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "pool", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "parametrized_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ConvBlock.forward": [[120, 123], ["backbone.ConvBlock.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.SimpleBlock.__init__": [[127, 166], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.SimpleBlock.parametrized_layers.append", "backbone.SimpleBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.SimpleBlock.forward": [[167, 178], ["backbone.SimpleBlock.C1", "backbone.SimpleBlock.BN1", "backbone.SimpleBlock.relu1", "backbone.SimpleBlock.C2", "backbone.SimpleBlock.BN2", "backbone.SimpleBlock.relu2", "backbone.SimpleBlock.BNshortcut", "backbone.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.BottleneckBlock.__init__": [[182, 220], ["torch.Module.__init__", "int", "torch.ReLU", "torch.ReLU", "torch.ReLU", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "backbone.BottleneckBlock.parametrized_layers.append", "backbone.init_layer", "backbone.Conv2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "self", ".", "C1", "=", "Conv2d_fw", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "BatchNorm2d_fw", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "Conv2d_fw", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "BatchNorm2d_fw", "(", "outdim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "if", "self", ".", "maml", ":", "\n", "                ", "self", ".", "shortcut", "=", "Conv2d_fw", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.BottleneckBlock.forward": [[221, 236], ["backbone.BottleneckBlock.C1", "backbone.BottleneckBlock.BN1", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C2", "backbone.BottleneckBlock.BN2", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.C3", "backbone.BottleneckBlock.BN3", "backbone.BottleneckBlock.relu", "backbone.BottleneckBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ConvNet.__init__": [[238, 257], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "backbone.ConvBlock", "trunk.append", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "trunk", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "indim", "=", "3", "if", "i", "==", "0", "else", "64", "\n", "outdim", "=", "64", "\n", "B", "=", "ConvBlock", "(", "indim", ",", "outdim", ",", "pool", "=", "(", "i", "<", "4", ")", ")", "#only pooling for fist 4 layers", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "\n", "", "if", "flatten", ":", "\n", "            ", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "if", "flatten", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "1600", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "64", ",", "5", ",", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ConvNet.forward": [[258, 261], ["backbone.ConvNet.trunk"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__": [[264, 306], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "backbone.init_layer", "backbone.init_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "backbone.Conv2d_fw", "backbone.BatchNorm2d_fw", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "trunk.append", "trunk.append", "block", "trunk.append", "backbone.Flatten"], "methods", ["home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.__init__", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer", "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "flatten", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "\n", "# initial layers", "\n", "if", "self", ".", "maml", ":", "\n", "            ", "conv1", "=", "Conv2d_fw", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "BatchNorm2d_fw", "(", "64", ")", "\n", "", "else", ":", "\n", "            ", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "# residual blocks", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "\n", "# final pooling", "\n", "", "", "if", "flatten", ":", "\n", "            ", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "trunk", ".", "append", "(", "avgpool", ")", "\n", "trunk", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_feat_dim", "=", "[", "indim", ",", "7", ",", "7", "]", "\n", "\n", "", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet.forward": [[307, 310], ["backbone.ResNet.trunk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.init_layer": [[11, 19], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Conv4": [[311, 313], ["backbone.ConvNet"], "function", ["None"], ["", "", "def", "Conv4", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ConvNet", "(", "4", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.Conv6": [[314, 316], ["backbone.ConvNet"], "function", ["None"], ["", "def", "Conv6", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ConvNet", "(", "6", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet10": [[317, 319], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet10", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet18": [[320, 322], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet18", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet34": [[323, 325], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "SimpleBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet50": [[326, 328], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hytseng0509_DropGrad.methods.backbone.ResNet101": [[329, 331], ["backbone.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "flatten", "=", "True", ")", ":", "\n", "    ", "return", "ResNet", "(", "BottleneckBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "flatten", ")", "\n", "\n"]]}