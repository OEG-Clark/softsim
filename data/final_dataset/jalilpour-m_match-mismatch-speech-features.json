{"home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.PhonemeEmbeddedLayer.__init__": [[7, 18], ["tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.CuDNNLSTM", "util.SqueezeLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.backend.expand_dims"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "units_embedded", "=", "64", ",", "units_lstm", "=", "32", ")", ":", "\n", "# layer", "\n", "        ", "self", ".", "max_pool", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPool2D", "(", "pool_size", "=", "(", "3", ",", "1", ")", ",", "strides", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "'same'", ")", "\n", "\n", "self", ".", "layer_exp1", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", ")", "\n", "self", ".", "embedding_layer", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_embedded", ",", "use_bias", "=", "False", ")", ")", "\n", "\n", "# self.lstm_layer = tf.keras.layers.LSTM(units_lstm, return_sequences=True)", "\n", "self", ".", "lstm_layer", "=", "tf", ".", "keras", ".", "layers", ".", "CuDNNLSTM", "(", "units_lstm", ",", "return_sequences", "=", "True", ")", "\n", "\n", "self", ".", "squeeze_layer", "=", "util", ".", "SqueezeLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.PhonemeEmbeddedLayer.get_config": [[20, 27], ["super().get_config().copy", "super().get_config().copy.update", "super().get_config"], "methods", ["home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.PhonemeEmbeddedLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get_config", "(", ")", ".", "copy", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'units_embedded'", ":", "self", ".", "units_embedded", ",", "\n", "'units_lstm'", ":", "self", ".", "units_lstm", ",", "\n", "}", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.PhonemeEmbeddedLayer.__call__": [[29, 45], ["single_feature.PhonemeEmbeddedLayer.layer_exp1", "single_feature.PhonemeEmbeddedLayer.max_pool", "single_feature.PhonemeEmbeddedLayer.squeeze_layer", "single_feature.PhonemeEmbeddedLayer.embedding_layer", "single_feature.PhonemeEmbeddedLayer.lstm_layer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input_phoneme", ")", ":", "\n", "        ", "phoneme_proj", "=", "input_phoneme", "\n", "\n", "phoneme_out", "=", "self", ".", "layer_exp1", "(", "phoneme_proj", ")", "\n", "# layer", "\n", "phoneme_out", "=", "self", ".", "max_pool", "(", "phoneme_out", ")", "\n", "\n", "phoneme_out", "=", "self", ".", "squeeze_layer", "(", "phoneme_out", ")", "\n", "# layer", "\n", "phoneme_out", "=", "self", ".", "embedding_layer", "(", "phoneme_out", ")", "\n", "# layer", "\n", "\n", "phoneme_out", "=", "self", ".", "lstm_layer", "(", "phoneme_out", ")", "# size = (210,16)", "\n", "\n", "\n", "return", "phoneme_out", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.lstm_mel": [[47, 174], ["tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Permute", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tensorflow.keras.layers.Conv1D", "tf.keras.layers.Conv1D.", "tf.keras.layers.Conv1D.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Convolution2D", "tf.keras.layers.Convolution2D.", "tf.keras.layers.Convolution2D.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.Permute.", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tf.keras.layers.Reshape.", "tensorflow.compat.v1.keras.layers.CuDNNLSTM", "tf.compat.v1.keras.layers.CuDNNLSTM.", "tf.compat.v1.keras.layers.CuDNNLSTM.", "util.DotLayer", "util.DotLayer.", "util.DotLayer.", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.Model", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Convolution2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "util.SqueezeLayer", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.expand_dims", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.reduce_mean", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape"], "function", ["None"], ["", "", "def", "lstm_mel", "(", "shape_eeg", ",", "shape_spch", ",", "units_lstm", "=", "32", ",", "filters_cnn_eeg", "=", "16", ",", "filters_cnn_env", "=", "16", ",", "\n", "units_hidden", "=", "128", ",", "\n", "stride_temporal", "=", "3", ",", "kerSize_temporal", "=", "9", ",", "spatial_filters_eeg", "=", "32", ",", "\n", "spatial_filters_mel", "=", "8", ",", "fun_act", "=", "'tanh'", ")", ":", "\n", "    ", "\"\"\"\n    Return an LSTM based model where batch normalization is applied to input of each layer.\n\n    :param shape_eeg: a numpy array, shape of EEG signal (time, channel)\n    :param shape_spch: a numpy array, shape of speech signal (time, feature_dim)\n    :param units_lstm: an int, number of units in LSTM\n    :param filters_cnn_eeg: an int, number of CNN filters applied on EEG\n    :param filters_cnn_env: an int, number of CNN filters applied on envelope\n    :param units_hidden: an int, number of units in the first time_distributed layer\n    :param stride_temporal: an int, amount of stride in the temporal direction\n    :param kerSize_temporal: an int, size of CNN filter kernel in the temporal direction\n    :param fun_act: activation function used in layers\n    :return: LSTM-based model\n    \"\"\"", "\n", "\n", "############", "\n", "input_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_eeg", ")", "\n", "input_spch1", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "input_spch2", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "\n", "############", "\n", "#### upper part of network dealing with EEG.", "\n", "\n", "layer_exp1", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", ")", "\n", "eeg_proj", "=", "input_eeg", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "eeg_proj", ")", "# batch normalization", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_eeg", ",", "kernel_size", "=", "1", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "output_eeg", "=", "layer_exp1", "(", "output_eeg", ")", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_eeg", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "layer_permute", "=", "tf", ".", "keras", ".", "layers", ".", "Permute", "(", "(", "1", ",", "3", ",", "2", ")", ")", "\n", "output_eeg", "=", "layer_permute", "(", "output_eeg", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "3", "]", ")", ")", "\n", "output_eeg", "=", "layer_reshape", "(", "output_eeg", ")", "\n", "\n", "layer2_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_hidden", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer2_timeDis", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "layer3_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_lstm", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer3_timeDis", "(", "output_eeg", ")", "\n", "\n", "##############", "\n", "#### Bottom part of the network dealing with Speech.", "\n", "\n", "spch1_proj", "=", "input_spch1", "\n", "spch2_proj", "=", "input_spch2", "\n", "\n", "# layer", "\n", "BN_layer", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_spch1", "=", "BN_layer", "(", "spch1_proj", ")", "\n", "output_spch2", "=", "BN_layer", "(", "spch2_proj", ")", "\n", "\n", "env_spatial_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_mel", ",", "kernel_size", "=", "1", ")", "\n", "output_spch1", "=", "env_spatial_layer", "(", "output_spch1", ")", "\n", "output_spch2", "=", "env_spatial_layer", "(", "output_spch2", ")", "\n", "\n", "# layer", "\n", "BN_layer1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_spch1", "=", "BN_layer1", "(", "output_spch1", ")", "\n", "output_spch2", "=", "BN_layer1", "(", "output_spch2", ")", "\n", "\n", "output_spch1", "=", "layer_exp1", "(", "output_spch1", ")", "\n", "output_spch2", "=", "layer_exp1", "(", "output_spch2", ")", "\n", "\n", "conv_env_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_env", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ")", "\n", "output_spch1", "=", "conv_env_layer", "(", "output_spch1", ")", "\n", "output_spch2", "=", "conv_env_layer", "(", "output_spch2", ")", "\n", "\n", "# layer", "\n", "BN_layer2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_spch1", "=", "BN_layer2", "(", "output_spch1", ")", "\n", "output_spch2", "=", "BN_layer2", "(", "output_spch2", ")", "\n", "\n", "output_spch1", "=", "layer_permute", "(", "output_spch1", ")", "\n", "output_spch2", "=", "layer_permute", "(", "output_spch2", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "3", "]", ")", ")", "\n", "output_spch1", "=", "layer_reshape", "(", "output_spch1", ")", "# size = (210,32)", "\n", "output_spch2", "=", "layer_reshape", "(", "output_spch2", ")", "\n", "\n", "# lstm_spch = tf.keras.layers.LSTM(units_lstm, return_sequences=True, activation= fun_act)", "\n", "lstm_spch", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "layers", ".", "CuDNNLSTM", "(", "units_lstm", ",", "return_sequences", "=", "True", ")", "\n", "output_spch1", "=", "lstm_spch", "(", "output_spch1", ")", "\n", "output_spch2", "=", "lstm_spch", "(", "output_spch2", ")", "\n", "\n", "##############", "\n", "#### last common layers", "\n", "# layer", "\n", "layer_dot", "=", "util", ".", "DotLayer", "(", ")", "\n", "cos_scores", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch1", "]", ")", "\n", "cos_scores2", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch2", "]", ")", "\n", "\n", "# layer", "\n", "layer_expand", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", ")", "\n", "layer_sigmoid", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "cos_scores_mix", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "layer_expand", "(", "cos_scores", ")", ",", "layer_expand", "(", "cos_scores2", ")", "]", ")", "\n", "\n", "cos_scores_sig", "=", "layer_sigmoid", "(", "cos_scores_mix", ")", "\n", "\n", "# layer", "\n", "layer_ave", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "cos_scores_sig", "=", "util", ".", "SqueezeLayer", "(", ")", "(", "cos_scores_sig", ",", "axis", "=", "2", ")", "\n", "y_out", "=", "layer_ave", "(", "cos_scores_sig", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "input_eeg", ",", "input_spch1", ",", "input_spch2", "]", ",", "outputs", "=", "[", "y_out", ",", "cos_scores_sig", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.lstm_phoneme": [[179, 255], ["tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Permute", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "single_feature.PhonemeEmbeddedLayer", "PhonemeEmbeddedLayer.", "PhonemeEmbeddedLayer.", "util.DotLayer", "util.DotLayer.", "util.DotLayer.", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.Model", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Convolution2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "util.SqueezeLayer", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.expand_dims", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.reduce_mean", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape"], "function", ["None"], ["", "def", "lstm_phoneme", "(", "shape_eeg", ",", "shape_spch", ",", "units_lstm", "=", "32", ",", "filters_cnn_eeg", "=", "16", ",", "\n", "units_hidden", "=", "128", ",", "\n", "stride_temporal", "=", "3", ",", "kerSize_temporal", "=", "9", ",", "spatial_filters_eeg", "=", "32", ",", "\n", "units_embedded", "=", "64", ",", "fun_act", "=", "'tanh'", ")", ":", "\n", "\n", "############", "\n", "    ", "input_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_eeg", ")", "\n", "phoneme1", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "phoneme2", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "\n", "############", "\n", "#### upper part of network dealing with EEG.", "\n", "\n", "layer_exp1", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", ")", "\n", "eeg_proj", "=", "input_eeg", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "eeg_proj", ")", "# batch normalization", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_eeg", ",", "kernel_size", "=", "1", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "output_eeg", "=", "layer_exp1", "(", "output_eeg", ")", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_eeg", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ",", "padding", "=", "'same'", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "layer_permute", "=", "tf", ".", "keras", ".", "layers", ".", "Permute", "(", "(", "1", ",", "3", ",", "2", ")", ")", "\n", "output_eeg", "=", "layer_permute", "(", "output_eeg", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "3", "]", ")", ")", "\n", "output_eeg", "=", "layer_reshape", "(", "output_eeg", ")", "\n", "\n", "layer2_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_hidden", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer2_timeDis", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "layer3_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_lstm", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer3_timeDis", "(", "output_eeg", ")", "\n", "\n", "##############", "\n", "#### Bottom part of the network dealing with Envelope.", "\n", "\n", "phoneme1_proj", "=", "phoneme1", "\n", "phoneme2_proj", "=", "phoneme2", "\n", "\n", "phoneme_layer", "=", "PhonemeEmbeddedLayer", "(", "units_embedded", "=", "units_embedded", ",", "units_lstm", "=", "units_lstm", ")", "\n", "phoneme1_out", "=", "phoneme_layer", "(", "phoneme1_proj", ")", "\n", "phoneme2_out", "=", "phoneme_layer", "(", "phoneme2_proj", ")", "\n", "\n", "##############", "\n", "#### last common layers", "\n", "# layer", "\n", "layer_dot", "=", "util", ".", "DotLayer", "(", ")", "\n", "cos_scores", "=", "layer_dot", "(", "[", "output_eeg", ",", "phoneme1_out", "]", ")", "\n", "cos_scores2", "=", "layer_dot", "(", "[", "output_eeg", ",", "phoneme2_out", "]", ")", "\n", "\n", "# layer", "\n", "layer_expand", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", ")", "\n", "layer_sigmoid", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "cos_scores_mix", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "layer_expand", "(", "cos_scores", ")", ",", "layer_expand", "(", "cos_scores2", ")", "]", ")", "\n", "\n", "cos_scores_sig", "=", "layer_sigmoid", "(", "cos_scores_mix", ")", "\n", "\n", "# layer", "\n", "layer_ave", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "cos_scores_sig", "=", "util", ".", "SqueezeLayer", "(", ")", "(", "cos_scores_sig", ",", "axis", "=", "2", ")", "\n", "y_out", "=", "layer_ave", "(", "cos_scores_sig", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "input_eeg", ",", "phoneme1", ",", "phoneme2", "]", ",", "outputs", "=", "[", "y_out", ",", "cos_scores_sig", "]", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.single_feature.lstm_spch_pooling": [[260, 360], ["tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Permute", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.MaxPool2D", "tf.keras.layers.MaxPool2D.", "tf.keras.layers.MaxPool2D.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.Permute.", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tf.keras.layers.Reshape.", "tensorflow.compat.v1.keras.layers.CuDNNLSTM", "tf.compat.v1.keras.layers.CuDNNLSTM.", "tf.compat.v1.keras.layers.CuDNNLSTM.", "util.DotLayer", "util.DotLayer.", "util.DotLayer.", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.Model", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Convolution2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "util.SqueezeLayer", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.expand_dims", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.reduce_mean", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape"], "function", ["None"], ["", "def", "lstm_spch_pooling", "(", "shape_eeg", ",", "shape_spch", ",", "units_lstm", "=", "32", ",", "filters_cnn_eeg", "=", "16", ",", "filters_cnn_env", "=", "16", ",", "\n", "units_hidden", "=", "128", ",", "\n", "stride_temporal", "=", "3", ",", "kerSize_temporal", "=", "9", ",", "spatial_filters_eeg", "=", "32", ",", "fun_act", "=", "'tanh'", ")", ":", "\n", "\n", "############", "\n", "    ", "input_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_eeg", ")", "\n", "input_spch1", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "input_spch2", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_spch", ")", "\n", "\n", "############", "\n", "#### upper part of network dealing with EEG.", "\n", "\n", "layer_exp1", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", ")", "\n", "eeg_proj", "=", "input_eeg", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "eeg_proj", ")", "# batch normalization", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_eeg", ",", "kernel_size", "=", "1", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "output_eeg", "=", "layer_exp1", "(", "output_eeg", ")", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_eeg", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ",", "padding", "=", "'same'", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "layer_permute", "=", "tf", ".", "keras", ".", "layers", ".", "Permute", "(", "(", "1", ",", "3", ",", "2", ")", ")", "\n", "output_eeg", "=", "layer_permute", "(", "output_eeg", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "3", "]", ")", ")", "\n", "output_eeg", "=", "layer_reshape", "(", "output_eeg", ")", "\n", "\n", "layer2_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_hidden", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer2_timeDis", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "layer3_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_lstm", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer3_timeDis", "(", "output_eeg", ")", "\n", "\n", "##############", "\n", "#### Bottom part of the network dealing with Speech.", "\n", "\n", "spch1_proj", "=", "input_spch1", "\n", "spch2_proj", "=", "input_spch2", "\n", "\n", "\n", "# layer", "\n", "\n", "output_spch1", "=", "layer_exp1", "(", "spch1_proj", ")", "\n", "output_spch2", "=", "layer_exp1", "(", "spch2_proj", ")", "\n", "\n", "max_pool", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPool2D", "(", "pool_size", "=", "(", "3", ",", "1", ")", ",", "strides", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "'same'", ")", "\n", "output_spch1", "=", "max_pool", "(", "output_spch1", ")", "\n", "output_spch2", "=", "max_pool", "(", "output_spch2", ")", "\n", "\n", "# layer", "\n", "BN_layer2", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_spch1", "=", "BN_layer2", "(", "output_spch1", ")", "\n", "output_spch2", "=", "BN_layer2", "(", "output_spch2", ")", "\n", "\n", "output_spch1", "=", "layer_permute", "(", "output_spch1", ")", "\n", "output_spch2", "=", "layer_permute", "(", "output_spch2", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_spch1", ")", "[", "3", "]", ")", ")", "\n", "output_spch1", "=", "layer_reshape", "(", "output_spch1", ")", "\n", "output_spch2", "=", "layer_reshape", "(", "output_spch2", ")", "\n", "\n", "# lstm_spch = tf.keras.layers.LSTM(units_lstm, return_sequences=True, activation= fun_act)", "\n", "lstm_spch", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "layers", ".", "CuDNNLSTM", "(", "units_lstm", ",", "return_sequences", "=", "True", ")", "\n", "output_spch1", "=", "lstm_spch", "(", "output_spch1", ")", "\n", "output_spch2", "=", "lstm_spch", "(", "output_spch2", ")", "\n", "\n", "##############", "\n", "#### last common layers", "\n", "# layer", "\n", "layer_dot", "=", "util", ".", "DotLayer", "(", ")", "\n", "cos_scores", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch1", "]", ")", "\n", "cos_scores2", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch2", "]", ")", "\n", "\n", "# layer", "\n", "layer_expand", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", ")", "\n", "layer_sigmoid", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "cos_scores_mix", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "layer_expand", "(", "cos_scores", ")", ",", "layer_expand", "(", "cos_scores2", ")", "]", ")", "\n", "\n", "cos_scores_sig", "=", "layer_sigmoid", "(", "cos_scores_mix", ")", "\n", "\n", "# layer", "\n", "layer_ave", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "cos_scores_sig", "=", "util", ".", "SqueezeLayer", "(", ")", "(", "cos_scores_sig", ",", "axis", "=", "2", ")", "\n", "y_out", "=", "layer_ave", "(", "cos_scores_sig", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "input_eeg", ",", "input_spch1", ",", "input_spch2", "]", ",", "outputs", "=", "[", "y_out", ",", "cos_scores_sig", "]", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.concatenating_features.lstm_env_mel_spatial_filter": [[8, 159], ["tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Permute", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Convolution2D", "tf.keras.layers.Convolution2D.", "tf.keras.layers.Convolution2D.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tensorflow.keras.layers.Conv1D", "tf.keras.layers.Conv1D.", "tf.keras.layers.Conv1D.", "tensorflow.keras.layers.BatchNormalization", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.BatchNormalization.", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.keras.layers.Convolution2D", "tf.keras.layers.Convolution2D.", "tf.keras.layers.Convolution2D.", "tensorflow.keras.layers.Permute", "tf.keras.layers.Permute.", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tf.keras.layers.Reshape.", "tf.keras.layers.Permute.", "tf.keras.layers.Permute.", "tensorflow.keras.layers.Reshape", "tf.keras.layers.Reshape.", "tf.keras.layers.Reshape.", "tensorflow.keras.layers.CuDNNLSTM", "tf.keras.layers.CuDNNLSTM.", "tf.keras.layers.CuDNNLSTM.", "util.DotLayer", "util.DotLayer.", "util.DotLayer.", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.TimeDistributed", "tf.keras.layers.TimeDistributed.", "tensorflow.keras.layers.Lambda", "tf.keras.layers.Lambda.", "tensorflow.keras.Model", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv1D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Convolution2D", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Concatenate", "util.SqueezeLayer", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.expand_dims", "tf.keras.layers.Lambda.", "tf.keras.layers.Lambda.", "tensorflow.reduce_mean", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.int_shape"], "function", ["None"], ["def", "lstm_env_mel_spatial_filter", "(", "shape_eeg", ",", "shape_feature1", ",", "shape_feature2", ",", "units_lstm", "=", "32", ",", "filters_cnn_eeg", "=", "16", ",", "filters_cnn_env", "=", "16", ",", "\n", "units_hidden", "=", "128", ",", "\n", "stride_temporal", "=", "3", ",", "kerSize_temporal", "=", "9", ",", "spatial_filters_eeg", "=", "32", ",", "\n", "spatial_filters_mel", "=", "8", ",", "fun_act", "=", "'tanh'", ")", ":", "\n", "\n", "############", "\n", "    ", "input_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_eeg", ")", "\n", "env1", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_feature1", ")", "\n", "env2", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_feature1", ")", "\n", "mel1", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_feature2", ")", "\n", "mel2", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "shape_feature2", ")", "\n", "\n", "############", "\n", "#### upper part of network dealing with EEG.", "\n", "\n", "layer_exp1", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "3", ")", ")", "\n", "eeg_proj", "=", "input_eeg", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "eeg_proj", ")", "# batch normalization", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_eeg", ",", "kernel_size", "=", "1", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "output_eeg", "=", "layer_exp1", "(", "output_eeg", ")", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_eeg", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ")", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "layer_permute", "=", "tf", ".", "keras", ".", "layers", ".", "Permute", "(", "(", "1", ",", "3", ",", "2", ")", ")", "\n", "output_eeg", "=", "layer_permute", "(", "output_eeg", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_eeg", ")", "[", "3", "]", ")", ")", "\n", "output_eeg", "=", "layer_reshape", "(", "output_eeg", ")", "\n", "\n", "layer2_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_hidden", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer2_timeDis", "(", "output_eeg", ")", "\n", "\n", "# layer", "\n", "output_eeg", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "(", "output_eeg", ")", "\n", "layer3_timeDis", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units_lstm", ",", "activation", "=", "fun_act", ")", ")", "\n", "output_eeg", "=", "layer3_timeDis", "(", "output_eeg", ")", "\n", "\n", "##############", "\n", "#### Bottom part of the network dealing with Speech.", "\n", "\n", "\n", "env1_proj", "=", "env1", "\n", "env2_proj", "=", "env2", "\n", "\n", "# layer", "\n", "BN_layer", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_env1", "=", "BN_layer", "(", "env1_proj", ")", "\n", "output_env2", "=", "BN_layer", "(", "env2_proj", ")", "\n", "\n", "output_env1", "=", "layer_exp1", "(", "output_env1", ")", "\n", "output_env2", "=", "layer_exp1", "(", "output_env2", ")", "\n", "\n", "conv_env_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_env", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ")", "\n", "output_env1", "=", "conv_env_layer", "(", "output_env1", ")", "\n", "output_env2", "=", "conv_env_layer", "(", "output_env2", ")", "\n", "\n", "\n", "\n", "\n", "## speech feature 2", "\n", "\n", "mel1_proj", "=", "mel1", "\n", "mel2_proj", "=", "mel2", "\n", "\n", "# layer", "\n", "BN_layer", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_mel1", "=", "BN_layer", "(", "mel1_proj", ")", "\n", "output_mel2", "=", "BN_layer", "(", "mel2_proj", ")", "\n", "\n", "env_spatial_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Conv1D", "(", "spatial_filters_mel", ",", "kernel_size", "=", "1", ")", "\n", "output_mel1", "=", "env_spatial_layer", "(", "output_mel1", ")", "\n", "output_mel2", "=", "env_spatial_layer", "(", "output_mel2", ")", "\n", "\n", "# layer", "\n", "BN_layer1", "=", "tf", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", ")", "\n", "output_mel1", "=", "BN_layer1", "(", "output_mel1", ")", "\n", "output_mel2", "=", "BN_layer1", "(", "output_mel2", ")", "\n", "\n", "output_mel1", "=", "layer_exp1", "(", "output_mel1", ")", "\n", "output_mel2", "=", "layer_exp1", "(", "output_mel2", ")", "\n", "\n", "conv_env_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Convolution2D", "(", "filters_cnn_env", ",", "(", "kerSize_temporal", ",", "1", ")", ",", "\n", "strides", "=", "(", "stride_temporal", ",", "1", ")", ",", "activation", "=", "\"relu\"", ")", "\n", "output_mel1", "=", "conv_env_layer", "(", "output_mel1", ")", "\n", "output_mel2", "=", "conv_env_layer", "(", "output_mel2", ")", "\n", "\n", "\n", "\n", "# layer: combine two features", "\n", "\n", "layer_permute", "=", "tf", ".", "keras", ".", "layers", ".", "Permute", "(", "(", "1", ",", "3", ",", "2", ")", ")", "\n", "output_env1", "=", "layer_permute", "(", "output_env1", ")", "\n", "output_env2", "=", "layer_permute", "(", "output_env2", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_env1", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_env1", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_env1", ")", "[", "3", "]", ")", ")", "\n", "output_env1", "=", "layer_reshape", "(", "output_env1", ")", "# size = (210,32)", "\n", "output_env2", "=", "layer_reshape", "(", "output_env2", ")", "\n", "\n", "\n", "output_mel1", "=", "layer_permute", "(", "output_mel1", ")", "\n", "output_mel2", "=", "layer_permute", "(", "output_mel2", ")", "\n", "\n", "layer_reshape", "=", "tf", ".", "keras", ".", "layers", ".", "Reshape", "(", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_mel1", ")", "[", "1", "]", ",", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_mel1", ")", "[", "2", "]", "*", "\n", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "output_mel1", ")", "[", "3", "]", ")", ")", "\n", "output_mel1", "=", "layer_reshape", "(", "output_mel1", ")", "\n", "output_mel2", "=", "layer_reshape", "(", "output_mel2", ")", "\n", "\n", "output_spch1", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "output_env1", ",", "output_mel1", "]", ")", "\n", "output_spch2", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "output_env2", ",", "output_mel2", "]", ")", "\n", "\n", "\n", "# lstm_spch = tf.keras.layers.LSTM(units_lstm, return_sequences=True, activation= fun_act)", "\n", "lstm_spch", "=", "tf", ".", "keras", ".", "layers", ".", "CuDNNLSTM", "(", "units_lstm", ",", "return_sequences", "=", "True", ")", "\n", "output_spch1", "=", "lstm_spch", "(", "output_spch1", ")", "\n", "output_spch2", "=", "lstm_spch", "(", "output_spch2", ")", "\n", "\n", "##############", "\n", "#### last common layers", "\n", "# layer", "\n", "layer_dot", "=", "util", ".", "DotLayer", "(", ")", "\n", "cos_scores", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch1", "]", ")", "\n", "cos_scores2", "=", "layer_dot", "(", "[", "output_eeg", ",", "output_spch2", "]", ")", "\n", "\n", "# layer", "\n", "layer_expand", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "keras", ".", "backend", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", ")", "\n", "layer_sigmoid", "=", "tf", ".", "keras", ".", "layers", ".", "TimeDistributed", "(", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "\n", "cos_scores_mix", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "layer_expand", "(", "cos_scores", ")", ",", "layer_expand", "(", "cos_scores2", ")", "]", ")", "\n", "\n", "cos_scores_sig", "=", "layer_sigmoid", "(", "cos_scores_mix", ")", "\n", "\n", "# layer", "\n", "layer_ave", "=", "tf", ".", "keras", ".", "layers", ".", "Lambda", "(", "lambda", "x", ":", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "cos_scores_sig", "=", "util", ".", "SqueezeLayer", "(", ")", "(", "cos_scores_sig", ",", "axis", "=", "2", ")", "\n", "y_out", "=", "layer_ave", "(", "cos_scores_sig", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "input_eeg", ",", "env1", ",", "env2", ",", "mel1", ",", "mel2", "]", ",", "outputs", "=", "[", "y_out", ",", "cos_scores_sig", "]", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.SqueezeLayer.__init__": [[7, 9], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DownsampleLayer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SqueezeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.SqueezeLayer.call": [[10, 16], ["tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input_tensor", ",", "axis", "=", "3", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "output", "=", "tf", ".", "squeeze", "(", "input_tensor", ",", "axis", ")", "\n", "", "except", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DotLayer.__init__": [[21, 23], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DownsampleLayer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DotLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DotLayer.call": [[24, 29], ["tensorflow.keras.layers.Dot", "tensorflow.keras.layers.Dot.", "tensorflow.matrix_diag_part"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "list_tensors", ")", ":", "\n", "        ", "layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dot", "(", "axes", "=", "[", "2", ",", "2", "]", ",", "normalize", "=", "True", ")", "\n", "output_dot", "=", "layer", "(", "list_tensors", ")", "\n", "output_diag", "=", "tf", ".", "matrix_diag_part", "(", "output_dot", ")", "\n", "return", "output_diag", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DownsampleLayer.__init__": [[34, 36], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DownsampleLayer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DownsampleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.DownsampleLayer.call": [[37, 41], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input_tensor", ",", "rate", "=", "3", ")", ":", "\n", "        ", "output", "=", "input_tensor", "[", ":", ",", "0", ":", ":", "rate", ",", ":", ",", ":", "]", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.jalilpour-m_match-mismatch-speech-features.None.util.loss_BCE_custom": [[44, 60], ["print", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.int_shape", "tensorflow.keras.backend.log", "tensorflow.keras.backend.log", "tensorflow.keras.backend.int_shape"], "function", ["None"], ["", "", "def", "loss_BCE_custom", "(", ")", ":", "\n", "    ", "\"\"\"\n    Return binary cross entropy loss for cosine similarity layer.\n\n    :param cos_scores_sig: array of float numbers, output of the cosine similarity\n        layer followed by sigmoid function.\n    :return: a function, which will be used as a loss function in model.compile.\n    \"\"\"", "\n", "\n", "def", "loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "print", "(", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "y_pred", ")", ")", "\n", "part_pos", "=", "tf", ".", "keras", ".", "backend", ".", "sum", "(", "-", "y_true", "*", "tf", ".", "keras", ".", "backend", ".", "log", "(", "y_pred", ")", ",", "axis", "=", "-", "1", ")", "\n", "part_neg", "=", "tf", ".", "keras", ".", "backend", ".", "sum", "(", "(", "y_true", "-", "1", ")", "*", "tf", ".", "keras", ".", "backend", ".", "log", "(", "1", "-", "y_pred", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "(", "part_pos", "+", "part_neg", ")", "/", "tf", ".", "keras", ".", "backend", ".", "int_shape", "(", "y_pred", ")", "[", "-", "1", "]", "\n", "\n", "", "return", "loss", "", "", ""]]}