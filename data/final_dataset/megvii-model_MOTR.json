{"home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.LoadVideo.__init__": [[116, 134], ["cv2.VideoCapture", "int", "int", "int", "int", "print", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "round", "demo.LoadVideo.cap.get", "demo.LoadVideo.cap.get", "demo.LoadVideo.cap.get", "demo.LoadVideo.cap.get"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "img_size", "=", "(", "1536", ",", "800", ")", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "raise", "FileExistsError", "\n", "\n", "", "self", ".", "cap", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "self", ".", "frame_rate", "=", "int", "(", "round", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", ")", ")", "\n", "self", ".", "seq_w", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "self", ".", "seq_h", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "self", ".", "vn", "=", "int", "(", "self", ".", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "\n", "self", ".", "width", "=", "img_size", "[", "0", "]", "\n", "self", ".", "height", "=", "img_size", "[", "1", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "print", "(", "'Lenth of the video: {:d} frames'", ".", "format", "(", "self", ".", "vn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.LoadVideo.__iter__": [[135, 138], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "-", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.LoadVideo.__next__": [[139, 150], ["demo.LoadVideo.cap.read", "cv2.cvtColor", "demo.LoadVideo.init_img", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.init_img"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "==", "len", "(", "self", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "# Read image", "\n", "", "res", ",", "img", "=", "self", ".", "cap", ".", "read", "(", ")", "# BGR", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "# RGB", "\n", "assert", "img", "is", "not", "None", ",", "'Failed to load frame {:d}'", ".", "format", "(", "self", ".", "count", ")", "\n", "\n", "cur_img", ",", "ori_img", "=", "self", ".", "init_img", "(", "img", ")", "\n", "return", "self", ".", "count", ",", "cur_img", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.LoadVideo.init_img": [[151, 163], ["img.unsqueeze.unsqueeze.copy", "int", "int", "cv2.resize", "torchvision.normalize", "torchvision.normalize", "img.unsqueeze.unsqueeze.unsqueeze", "min", "torchvision.to_tensor", "torchvision.to_tensor", "max", "max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "init_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "ori_img", "=", "img", ".", "copy", "(", ")", "\n", "self", ".", "seq_h", ",", "self", ".", "seq_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "self", ".", "height", "/", "min", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "if", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "*", "scale", ">", "self", ".", "width", ":", "\n", "            ", "scale", "=", "self", ".", "width", "/", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "", "target_h", "=", "int", "(", "self", ".", "seq_h", "*", "scale", ")", "\n", "target_w", "=", "int", "(", "self", ".", "seq_w", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "target_w", ",", "target_h", ")", ")", "\n", "img", "=", "F", ".", "normalize", "(", "F", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.LoadVideo.__len__": [[164, 166], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vn", "# number of files", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.MOTR.update": [[168, 179], ["range", "numpy.empty", "len", "len", "numpy.concatenate", "numpy.concatenate", "ret.append", "numpy.concatenate().reshape", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "update", "(", "self", ",", "dt_instances", ":", "Instances", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "                ", "id", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "box_with_score", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "ret", ".", "append", "(", "np", ".", "concatenate", "(", "(", "box_with_score", ",", "[", "id", "+", "1", "]", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# +1 as MOT benchmark requires positive", "\n", "", "", "if", "len", "(", "ret", ")", ">", "0", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "ret", ")", "\n", "", "return", "np", ".", "empty", "(", "(", "0", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.__init__": [[181, 204], ["models.build_model", "torch.load", "util.tool.load_model", "demo.Detector.model.cuda", "demo.Detector.model.eval", "[].split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "demo.LoadVideo", "demo.MOTR", "pathlib.Path", "pathlib.Path", "args.input_video.split", "args.input_video.split"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.__init__.build_model", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.tool.load_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "# build model and load weights", "\n", "self", ".", "model", ",", "_", ",", "_", "=", "build_model", "(", "args", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "args", ".", "resume", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# mkidr save_dir", "\n", "vid_name", ",", "prefix", "=", "args", ".", "input_video", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "\n", "self", ".", "save_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'results'", ",", "vid_name", ")", "\n", "Path", "(", "self", ".", "save_root", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "save_img_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_root", ",", "'imgs'", ")", "\n", "Path", "(", "self", ".", "save_img_root", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "txt_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_root", ",", "f'{vid_name}.txt'", ")", "\n", "self", ".", "vid_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_root", ",", "args", ".", "input_video", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "# build dataloader and tracker", "\n", "self", ".", "dataloader", "=", "LoadVideo", "(", "args", ".", "input_video", ")", "\n", "self", ".", "tr_tracker", "=", "MOTR", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.filter_dt_by_score": [[205, 209], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_score", "(", "dt_instances", ":", "Instances", ",", "prob_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "keep", "=", "dt_instances", ".", "scores", ">", "prob_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.filter_dt_by_area": [[210, 216], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_area", "(", "dt_instances", ":", "Instances", ",", "area_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "wh", "=", "dt_instances", ".", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "dt_instances", ".", "boxes", "[", ":", ",", "0", ":", "2", "]", "\n", "areas", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "keep", "=", "areas", ">", "area_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.write_results": [[217, 228], ["open", "zip", "save_format.format", "f.write", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_results", "(", "txt_path", ",", "frame_id", ",", "bbox_xyxy", ",", "identities", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "with", "open", "(", "txt_path", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "for", "xyxy", ",", "track_id", "in", "zip", "(", "bbox_xyxy", ",", "identities", ")", ":", "\n", "                ", "if", "track_id", "<", "0", "or", "track_id", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "xyxy", "\n", "w", ",", "h", "=", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "int", "(", "frame_id", ")", ",", "id", "=", "int", "(", "track_id", ")", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "w", "=", "w", ",", "h", "=", "h", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.visualize_img_with_bbox": [[229, 242], ["cv2.cvtColor", "dt_instances.has", "cv2.imwrite", "demo.draw_bboxes", "demo.draw_bboxes", "demo.draw_points", "demo.draw_bboxes", "numpy.concatenate", "dt_instances.scores.reshape", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.has", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_points", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes"], ["", "", "", "@", "staticmethod", "\n", "def", "visualize_img_with_bbox", "(", "img_path", ",", "img", ",", "dt_instances", ":", "Instances", ",", "ref_pts", "=", "None", ",", "gt_boxes", "=", "None", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "if", "dt_instances", ".", "has", "(", "'scores'", ")", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "scores", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "else", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "if", "ref_pts", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_points", "(", "img_show", ",", "ref_pts", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img_show", ",", "gt_boxes", ",", "identities", "=", "np", ".", "ones", "(", "(", "len", "(", "gt_boxes", ")", ",", ")", ")", "*", "-", "1", ")", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img_show", ")", "\n", "return", "img_show", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.Detector.run": [[243, 275], ["cv2.VideoWriter", "tqdm.tqdm.tqdm", "cv2.VideoWriter.release", "cv2.VideoWriter_fourcc", "demo.Detector.model.inference_single_image", "track_instances.to", "demo.Detector.filter_dt_by_score", "demo.Detector.filter_dt_by_area", "track_instances.remove", "track_instances.remove", "cur_img.cuda().float", "torch.device", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "demo.Detector.visualize_img_with_bbox", "cv2.VideoWriter.write", "demo.Detector.tr_tracker.update", "demo.Detector.write_results", "cur_img.cuda"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.inference_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_score", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_area", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.visualize_img_with_bbox", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.write_results"], ["", "def", "run", "(", "self", ",", "prob_threshold", "=", "0.7", ",", "area_threshold", "=", "100", ",", "vis", "=", "True", ",", "dump", "=", "True", ")", ":", "\n", "# save as video", "\n", "        ", "fps", "=", "self", ".", "dataloader", ".", "frame_rate", "\n", "videowriter", "=", "cv2", ".", "VideoWriter", "(", "self", ".", "vid_root", ",", "cv2", ".", "VideoWriter_fourcc", "(", "'M'", ",", "'J'", ",", "'P'", ",", "'G'", ")", ",", "fps", ",", "(", "self", ".", "dataloader", ".", "seq_w", ",", "self", ".", "dataloader", ".", "seq_h", ")", ")", "\n", "track_instances", "=", "None", "\n", "fid", "=", "0", "\n", "for", "_", ",", "cur_img", ",", "ori_img", "in", "tqdm", "(", "self", ".", "dataloader", ")", ":", "\n", "            ", "if", "track_instances", "is", "not", "None", ":", "\n", "                ", "track_instances", ".", "remove", "(", "'boxes'", ")", "\n", "track_instances", ".", "remove", "(", "'labels'", ")", "\n", "\n", "", "res", "=", "self", ".", "model", ".", "inference_single_image", "(", "cur_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "(", "self", ".", "dataloader", ".", "seq_h", ",", "self", ".", "dataloader", ".", "seq_w", ")", ",", "track_instances", ")", "\n", "track_instances", "=", "res", "[", "'track_instances'", "]", "\n", "dt_instances", "=", "track_instances", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "# filter det instances by score.", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_score", "(", "dt_instances", ",", "prob_threshold", ")", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_area", "(", "dt_instances", ",", "area_threshold", ")", "\n", "\n", "if", "vis", ":", "\n", "                ", "vis_img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_img_root", ",", "'{:06d}.jpg'", ".", "format", "(", "fid", ")", ")", "\n", "vis_img", "=", "self", ".", "visualize_img_with_bbox", "(", "vis_img_path", ",", "ori_img", ",", "dt_instances", ")", "\n", "videowriter", ".", "write", "(", "vis_img", ")", "\n", "\n", "", "if", "dump", ":", "\n", "                ", "tracker_outputs", "=", "self", ".", "tr_tracker", ".", "update", "(", "dt_instances", ")", "\n", "self", ".", "write_results", "(", "txt_path", "=", "self", ".", "txt_root", ",", "\n", "frame_id", "=", "(", "fid", "+", "1", ")", ",", "\n", "bbox_xyxy", "=", "tracker_outputs", "[", ":", ",", ":", "4", "]", ",", "\n", "identities", "=", "tracker_outputs", "[", ":", ",", "5", "]", ")", "\n", "", "fid", "+=", "1", "\n", "", "videowriter", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.plot_one_box": [[59, 82], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "cv2.putText", "range"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "score", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "\n", "# tl = line_thickness or round(", "\n", "#     0.002 * max(img.shape[0:2])) + 1  # line thickness", "\n", "    ", "tl", "=", "2", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "\n", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "\n", "0", ",", "\n", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "\n", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "img", ",", "score", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "30", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.draw_bboxes": [[84, 105], ["enumerate", "cv2.cvtColor", "demo.plot_one_box", "numpy.asarray", "int", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.plot_one_box"], ["", "def", "draw_bboxes", "(", "ori_img", ",", "bbox", ",", "identities", "=", "None", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "cvt_color", "=", "False", ")", ":", "\n", "    ", "if", "cvt_color", ":", "\n", "        ", "ori_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "ori_img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "img", "=", "ori_img", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "bbox", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "int", "(", "i", ")", "for", "i", "in", "box", "[", ":", "4", "]", "]", "\n", "x1", "+=", "offset", "[", "0", "]", "\n", "x2", "+=", "offset", "[", "0", "]", "\n", "y1", "+=", "offset", "[", "1", "]", "\n", "y2", "+=", "offset", "[", "1", "]", "\n", "if", "len", "(", "box", ")", ">", "4", ":", "\n", "            ", "score", "=", "'{:.2f}'", ".", "format", "(", "box", "[", "4", "]", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "None", "\n", "# box text and bar", "\n", "", "id", "=", "int", "(", "identities", "[", "i", "]", ")", "if", "identities", "is", "not", "None", "else", "0", "\n", "color", "=", "COLORS_10", "[", "id", "%", "len", "(", "COLORS_10", ")", "]", "\n", "label", "=", "'{:d}'", ".", "format", "(", "id", ")", "\n", "# t_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_PLAIN, 2 , 2)[0]", "\n", "img", "=", "plot_one_box", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "img", ",", "color", ",", "label", ",", "score", "=", "score", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.demo.draw_points": [[107, 114], ["enumerate", "cv2.circle", "len", "int", "int"], "function", ["None"], ["", "def", "draw_points", "(", "img", ":", "np", ".", "ndarray", ",", "points", ":", "np", ".", "ndarray", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "1", "]", "==", "2", ",", "'invalid points shape: {}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "i", ">=", "300", ":", "\n", "            ", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "2", ",", "color", "=", "color", ",", "thickness", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Track.__init__": [[139, 145], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "time_since_update", "=", "0", "\n", "self", ".", "id", "=", "Track", ".", "track_cnt", "\n", "Track", ".", "track_cnt", "+=", "1", "\n", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Track.miss_one_frame": [[146, 148], ["None"], "methods", ["None"], ["", "def", "miss_one_frame", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Track.clear_miss": [[149, 151], ["None"], "methods", ["None"], ["", "def", "clear_miss", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Track.update": [[152, 155], ["submit_dance.Track.clear_miss"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.clear_miss"], ["", "def", "update", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "clear_miss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.MOTR.__init__": [[158, 170], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_age", "=", "1", ",", "min_hits", "=", "3", ",", "iou_threshold", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"\n        Sets key parameters for SORT\n        \"\"\"", "\n", "self", ".", "max_age", "=", "max_age", "\n", "self", ".", "min_hits", "=", "min_hits", "\n", "self", ".", "iou_threshold", "=", "iou_threshold", "\n", "self", ".", "trackers", "=", "[", "]", "\n", "self", ".", "frame_count", "=", "0", "\n", "self", ".", "active_trackers", "=", "{", "}", "\n", "self", ".", "inactive_trackers", "=", "{", "}", "\n", "self", ".", "disappeared_tracks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.MOTR._remove_track": [[171, 174], ["submit_dance.MOTR.inactive_trackers.pop", "submit_dance.MOTR.disappeared_tracks.append"], "methods", ["None"], ["", "def", "_remove_track", "(", "self", ",", "slot_id", ")", ":", "\n", "        ", "self", ".", "inactive_trackers", ".", "pop", "(", "slot_id", ")", "\n", "self", ".", "disappeared_tracks", ".", "append", "(", "slot_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.MOTR.clear_disappeared_track": [[175, 177], ["None"], "methods", ["None"], ["", "def", "clear_disappeared_track", "(", "self", ")", ":", "\n", "        ", "self", ".", "disappeared_tracks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.MOTR.update": [[178, 238], ["set", "set().union", "set.intersection", "range", "range", "numpy.empty", "dt_instances.obj_idxes.tolist", "set", "submit_dance.MOTR.inactive_trackers[].miss_one_frame", "len", "numpy.concatenate", "len", "len", "numpy.concatenate", "set", "submit_dance.MOTR.inactive_trackers.keys", "submit_dance.MOTR.active_trackers.pop", "submit_dance.MOTR._remove_track", "submit_dance.MOTR.active_trackers[].update", "numpy.concatenate", "ret.append", "submit_dance.MOTR.active_trackers.keys", "submit_dance.MOTR.inactive_trackers.pop", "submit_dance.Track", "submit_dance.MOTR.inactive_trackers[].miss_one_frame", "numpy.concatenate().reshape", "submit_dance.MOTR.active_trackers.pop", "submit_dance.Track", "submit_dance.MOTR._remove_track", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.miss_one_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR._remove_track", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.miss_one_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR._remove_track"], ["", "def", "update", "(", "self", ",", "dt_instances", ":", "Instances", ")", ":", "\n", "        ", "\"\"\"\n        Params:\n          dets - a numpy array of detections in the format [[x1,y1,x2,y2,score],[x1,y1,x2,y2,score],...]\n        Requires: this method must be called once for each frame even with empty detections (use np.empty((0, 5)) for frames without detections).\n        Returns the a similar array, where the last column is the object ID.\n        NOTE: The number of objects returned may differ from the number of detections provided.\n        \"\"\"", "\n", "self", ".", "frame_count", "+=", "1", "\n", "# get predicted locations from existing trackers.", "\n", "dt_idxes", "=", "set", "(", "dt_instances", ".", "obj_idxes", ".", "tolist", "(", ")", ")", "\n", "track_idxes", "=", "set", "(", "self", ".", "active_trackers", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "self", ".", "inactive_trackers", ".", "keys", "(", ")", ")", ")", "\n", "matched_idxes", "=", "dt_idxes", ".", "intersection", "(", "track_idxes", ")", "\n", "\n", "unmatched_tracker", "=", "track_idxes", "-", "matched_idxes", "\n", "for", "track_id", "in", "unmatched_tracker", ":", "\n", "# miss in this frame, move to inactive_trackers.", "\n", "            ", "if", "track_id", "in", "self", ".", "active_trackers", ":", "\n", "                ", "self", ".", "inactive_trackers", "[", "track_id", "]", "=", "self", ".", "active_trackers", ".", "pop", "(", "track_id", ")", "\n", "", "self", ".", "inactive_trackers", "[", "track_id", "]", ".", "miss_one_frame", "(", ")", "\n", "if", "self", ".", "inactive_trackers", "[", "track_id", "]", ".", "miss", ">", "10", ":", "\n", "                ", "self", ".", "_remove_track", "(", "track_id", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "idx", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "bbox", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "# get a positive track.", "\n", "                ", "if", "idx", "in", "self", ".", "inactive_trackers", ":", "\n", "# set state of track active.", "\n", "                    ", "self", ".", "active_trackers", "[", "idx", "]", "=", "self", ".", "inactive_trackers", ".", "pop", "(", "idx", ")", "\n", "", "if", "idx", "not", "in", "self", ".", "active_trackers", ":", "\n", "# create a new track.", "\n", "                    ", "self", ".", "active_trackers", "[", "idx", "]", "=", "Track", "(", "idx", ")", "\n", "", "self", ".", "active_trackers", "[", "idx", "]", ".", "update", "(", "bbox", ")", "\n", "", "elif", "label", "==", "1", ":", "\n", "# get an occluded track.", "\n", "                ", "if", "idx", "in", "self", ".", "active_trackers", ":", "\n", "# set state of track inactive.", "\n", "                    ", "self", ".", "inactive_trackers", "[", "idx", "]", "=", "self", ".", "active_trackers", ".", "pop", "(", "idx", ")", "\n", "", "if", "idx", "not", "in", "self", ".", "inactive_trackers", ":", "\n", "# It's strange to obtain a new occluded track.", "\n", "# TODO: think more rational disposal.", "\n", "                    ", "self", ".", "inactive_trackers", "[", "idx", "]", "=", "Track", "(", "idx", ")", "\n", "", "self", ".", "inactive_trackers", "[", "idx", "]", ".", "miss_one_frame", "(", ")", "\n", "if", "self", ".", "inactive_trackers", "[", "idx", "]", ".", "miss", ">", "10", ":", "\n", "                    ", "self", ".", "_remove_track", "(", "idx", ")", "\n", "\n", "", "", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "                ", "id", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "box_with_score", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "ret", ".", "append", "(", "np", ".", "concatenate", "(", "(", "box_with_score", ",", "[", "id", "+", "1", "]", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# +1 as MOT benchmark requires positive", "\n", "\n", "", "", "if", "len", "(", "ret", ")", ">", "0", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "ret", ")", "\n", "", "return", "np", ".", "empty", "(", "(", "0", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.ListImgDataset.__init__": [[333, 344], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_list", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_list", "=", "img_list", "\n", "\n", "'''\n        common settings\n        '''", "\n", "self", ".", "img_height", "=", "800", "\n", "self", ".", "img_width", "=", "1536", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.ListImgDataset.load_img_from_file": [[345, 352], ["f_path.replace().replace().replace", "cv2.imread", "cv2.cvtColor", "os.path.exists", "submit_dance.load_label", "f_path.replace().replace", "f_path.replace"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.load_label"], ["", "def", "load_img_from_file", "(", "self", ",", "f_path", ")", ":", "\n", "        ", "label_path", "=", "f_path", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "cur_img", "=", "cv2", ".", "imread", "(", "f_path", ")", "\n", "assert", "cur_img", "is", "not", "None", ",", "f_path", "\n", "cur_img", "=", "cv2", ".", "cvtColor", "(", "cur_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "targets", "=", "load_label", "(", "label_path", ",", "cur_img", ".", "shape", "[", ":", "2", "]", ")", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", "else", "None", "\n", "return", "cur_img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.ListImgDataset.init_img": [[353, 365], ["img.unsqueeze.unsqueeze.copy", "int", "int", "cv2.resize", "torchvision.normalize", "img.unsqueeze.unsqueeze.unsqueeze", "min", "torchvision.to_tensor", "max", "max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "init_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "ori_img", "=", "img", ".", "copy", "(", ")", "\n", "self", ".", "seq_h", ",", "self", ".", "seq_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "self", ".", "img_height", "/", "min", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "if", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "*", "scale", ">", "self", ".", "img_width", ":", "\n", "            ", "scale", "=", "self", ".", "img_width", "/", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "", "target_h", "=", "int", "(", "self", ".", "seq_h", "*", "scale", ")", "\n", "target_w", "=", "int", "(", "self", ".", "seq_w", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "target_w", ",", "target_h", ")", ")", "\n", "img", "=", "F", ".", "normalize", "(", "F", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.ListImgDataset.__len__": [[366, 368], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.ListImgDataset.__getitem__": [[369, 372], ["submit_dance.ListImgDataset.load_img_from_file", "submit_dance.ListImgDataset.init_img"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.load_img_from_file", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.init_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "targets", "=", "self", ".", "load_img_from_file", "(", "self", ".", "img_list", "[", "index", "]", ")", "\n", "return", "self", ".", "init_img", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.__init__": [[375, 396], ["os.listdir", "sorted", "len", "submit_dance.MOTR", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", "=", "None", ",", "seq_num", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "detr", "=", "model", "\n", "\n", "self", ".", "seq_num", "=", "seq_num", "\n", "img_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'DanceTrack/test'", ",", "self", ".", "seq_num", ",", "'img1'", ")", ")", "\n", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'DanceTrack/test'", ",", "self", ".", "seq_num", ",", "'img1'", ",", "_", ")", "for", "_", "in", "img_list", "if", "\n", "(", "'jpg'", "in", "_", ")", "or", "(", "'png'", "in", "_", ")", "]", "\n", "\n", "self", ".", "img_list", "=", "sorted", "(", "img_list", ")", "\n", "self", ".", "img_len", "=", "len", "(", "self", ".", "img_list", ")", "\n", "self", ".", "tr_tracker", "=", "MOTR", "(", ")", "\n", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "'results/{}'", ".", "format", "(", "seq_num", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "predict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "args", ".", "exp_name", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "predict_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.filter_dt_by_score": [[397, 401], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "filter_dt_by_score", "(", "dt_instances", ":", "Instances", ",", "prob_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "keep", "=", "dt_instances", ".", "scores", ">", "prob_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.filter_dt_by_area": [[402, 408], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_area", "(", "dt_instances", ":", "Instances", ",", "area_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "wh", "=", "dt_instances", ".", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "dt_instances", ".", "boxes", "[", ":", ",", "0", ":", "2", "]", "\n", "areas", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "keep", "=", "areas", ">", "area_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.write_results": [[409, 420], ["open", "zip", "save_format.format", "f.write", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_results", "(", "txt_path", ",", "frame_id", ",", "bbox_xyxy", ",", "identities", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "with", "open", "(", "txt_path", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "for", "xyxy", ",", "track_id", "in", "zip", "(", "bbox_xyxy", ",", "identities", ")", ":", "\n", "                ", "if", "track_id", "<", "0", "or", "track_id", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "xyxy", "\n", "w", ",", "h", "=", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "int", "(", "frame_id", ")", ",", "id", "=", "int", "(", "track_id", ")", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "w", "=", "w", ",", "h", "=", "h", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.eval_seq": [[421, 427], ["os.path.join", "os.path.join", "util.evaluation.Evaluator", "util.evaluation.Evaluator.eval_file"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_file"], ["", "", "", "def", "eval_seq", "(", "self", ")", ":", "\n", "        ", "data_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT15/images/train'", ")", "\n", "result_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", "\n", "evaluator", "=", "Evaluator", "(", "data_root", ",", "self", ".", "seq_num", ")", "\n", "accs", "=", "evaluator", ".", "eval_file", "(", "result_filename", ")", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.visualize_img_with_bbox": [[428, 439], ["dt_instances.has", "cv2.imwrite", "submit_dance.draw_bboxes", "submit_dance.draw_bboxes", "submit_dance.draw_points", "submit_dance.draw_bboxes", "numpy.concatenate", "dt_instances.scores.reshape", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.has", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_points", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes"], ["", "@", "staticmethod", "\n", "def", "visualize_img_with_bbox", "(", "img_path", ",", "img", ",", "dt_instances", ":", "Instances", ",", "ref_pts", "=", "None", ",", "gt_boxes", "=", "None", ")", ":", "\n", "        ", "if", "dt_instances", ".", "has", "(", "'scores'", ")", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "scores", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "else", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "if", "ref_pts", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_points", "(", "img_show", ",", "ref_pts", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img_show", ",", "gt_boxes", ",", "identities", "=", "np", ".", "ones", "(", "(", "len", "(", "gt_boxes", ")", ",", ")", ")", "*", "-", "1", ")", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img_show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.Detector.detect": [[440, 482], ["torch.utils.data.DataLoader", "enumerate", "print", "submit_dance.ListImgDataset", "open", "tqdm.tqdm.tqdm", "submit_dance.Detector.detr.inference_single_image", "submit_dance.tensor_to_numpy", "track_instances.to", "submit_dance.Detector.filter_dt_by_score", "submit_dance.Detector.filter_dt_by_area", "len", "submit_dance.Detector.tr_tracker.update", "submit_dance.Detector.write_results", "os.path.join", "track_instances.remove", "track_instances.remove", "cur_img.cuda().float", "torch.device", "os.path.join", "submit_dance.Detector.visualize_img_with_bbox", "os.path.join", "cur_img.cuda"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.inference_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.tensor_to_numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_score", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_area", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.write_results", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.visualize_img_with_bbox"], ["", "def", "detect", "(", "self", ",", "prob_threshold", "=", "0.7", ",", "area_threshold", "=", "100", ",", "vis", "=", "False", ")", ":", "\n", "        ", "last_dt_embedding", "=", "None", "\n", "total_dts", "=", "0", "\n", "total_occlusion_dts", "=", "0", "\n", "\n", "track_instances", "=", "None", "\n", "loader", "=", "DataLoader", "(", "ListImgDataset", "(", "self", ".", "img_list", ")", ",", "1", ",", "num_workers", "=", "2", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", ",", "'w'", ")", ":", "\n", "            ", "pass", "\n", "", "for", "i", ",", "(", "cur_img", ",", "ori_img", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "            ", "cur_img", ",", "ori_img", "=", "cur_img", "[", "0", "]", ",", "ori_img", "[", "0", "]", "\n", "\n", "# track_instances = None", "\n", "if", "track_instances", "is", "not", "None", ":", "\n", "                ", "track_instances", ".", "remove", "(", "'boxes'", ")", "\n", "track_instances", ".", "remove", "(", "'labels'", ")", "\n", "", "seq_h", ",", "seq_w", ",", "_", "=", "ori_img", ".", "shape", "\n", "\n", "res", "=", "self", ".", "detr", ".", "inference_single_image", "(", "cur_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "(", "seq_h", ",", "seq_w", ")", ",", "track_instances", ")", "\n", "track_instances", "=", "res", "[", "'track_instances'", "]", "\n", "\n", "all_ref_pts", "=", "tensor_to_numpy", "(", "res", "[", "'ref_pts'", "]", "[", "0", ",", ":", ",", ":", "2", "]", ")", "\n", "dt_instances", "=", "track_instances", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "# filter det instances by score.", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_score", "(", "dt_instances", ",", "prob_threshold", ")", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_area", "(", "dt_instances", ",", "area_threshold", ")", "\n", "\n", "total_dts", "+=", "len", "(", "dt_instances", ")", "\n", "\n", "if", "vis", ":", "\n", "# for visual", "\n", "                ", "cur_vis_img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'frame_{}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "gt_boxes", "=", "None", "\n", "self", ".", "visualize_img_with_bbox", "(", "cur_vis_img_path", ",", "ori_img", ",", "dt_instances", ",", "ref_pts", "=", "all_ref_pts", ",", "gt_boxes", "=", "gt_boxes", ")", "\n", "", "tracker_outputs", "=", "self", ".", "tr_tracker", ".", "update", "(", "dt_instances", ")", "\n", "\n", "self", ".", "write_results", "(", "txt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ",", "\n", "frame_id", "=", "(", "i", "+", "1", ")", ",", "\n", "bbox_xyxy", "=", "tracker_outputs", "[", ":", ",", ":", "4", "]", ",", "\n", "identities", "=", "tracker_outputs", "[", ":", ",", "5", "]", ")", "\n", "", "print", "(", "\"totally {} dts {} occlusion dts\"", ".", "format", "(", "total_dts", ",", "total_occlusion_dts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.plot_one_box": [[72, 95], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "cv2.putText", "range"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "score", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "\n", "# tl = line_thickness or round(", "\n", "#     0.002 * max(img.shape[0:2])) + 1  # line thickness", "\n", "    ", "tl", "=", "2", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "\n", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "\n", "0", ",", "\n", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "\n", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "img", ",", "score", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "30", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.draw_bboxes": [[100, 121], ["enumerate", "cv2.cvtColor", "submit_dance.plot_one_box", "numpy.asarray", "int", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.plot_one_box"], ["def", "draw_bboxes", "(", "ori_img", ",", "bbox", ",", "identities", "=", "None", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "cvt_color", "=", "False", ")", ":", "\n", "    ", "if", "cvt_color", ":", "\n", "        ", "ori_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "ori_img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "img", "=", "ori_img", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "bbox", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "int", "(", "i", ")", "for", "i", "in", "box", "[", ":", "4", "]", "]", "\n", "x1", "+=", "offset", "[", "0", "]", "\n", "x2", "+=", "offset", "[", "0", "]", "\n", "y1", "+=", "offset", "[", "1", "]", "\n", "y2", "+=", "offset", "[", "1", "]", "\n", "if", "len", "(", "box", ")", ">", "4", ":", "\n", "            ", "score", "=", "'{:.2f}'", ".", "format", "(", "box", "[", "4", "]", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "None", "\n", "# box text and bar", "\n", "", "id", "=", "int", "(", "identities", "[", "i", "]", ")", "if", "identities", "is", "not", "None", "else", "0", "\n", "color", "=", "COLORS_10", "[", "id", "%", "len", "(", "COLORS_10", ")", "]", "\n", "label", "=", "'{:d}'", ".", "format", "(", "id", ")", "\n", "# t_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_PLAIN, 2 , 2)[0]", "\n", "img", "=", "plot_one_box", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "img", ",", "color", ",", "label", ",", "score", "=", "score", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.draw_points": [[123, 130], ["enumerate", "cv2.circle", "len", "int", "int"], "function", ["None"], ["", "def", "draw_points", "(", "img", ":", "np", ".", "ndarray", ",", "points", ":", "np", ".", "ndarray", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "1", "]", "==", "2", ",", "'invalid points shape: {}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "i", ">=", "300", ":", "\n", "            ", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "2", ",", "color", "=", "color", ",", "thickness", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.tensor_to_numpy": [[132, 134], ["tensor.detach().cpu().numpy", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "def", "tensor_to_numpy", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.load_label": [[240, 265], ["numpy.loadtxt().reshape", "np.loadtxt().reshape.copy", "len", "set", "numpy.asarray", "numpy.asarray", "numpy.asarray", "set.add", "targets[].append", "targets[].append", "targets[].append", "numpy.loadtxt", "label[].tolist"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "", "def", "load_label", "(", "label_path", ":", "str", ",", "img_size", ":", "tuple", ")", "->", "dict", ":", "\n", "    ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "h", ",", "w", "=", "img_size", "\n", "# Normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "targets", "=", "{", "'boxes'", ":", "[", "]", ",", "'labels'", ":", "[", "]", ",", "'area'", ":", "[", "]", "}", "\n", "num_boxes", "=", "len", "(", "labels", ")", "\n", "\n", "visited_ids", "=", "set", "(", ")", "\n", "for", "label", "in", "labels", "[", ":", "num_boxes", "]", ":", "\n", "        ", "obj_id", "=", "label", "[", "1", "]", "\n", "if", "obj_id", "in", "visited_ids", ":", "\n", "            ", "continue", "\n", "", "visited_ids", ".", "add", "(", "obj_id", ")", "\n", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "", "targets", "[", "'boxes'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'boxes'", "]", ")", "\n", "targets", "[", "'area'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'labels'", "]", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit_dance.filter_pub_det": [[267, 331], ["frame_boxes.items", "print", "open", "f.readlines", "numpy.array", "open", "f.readlines", "open", "line.strip().split", "int", "frame_boxes[].append", "line.strip().split", "int", "int", "f.write", "len", "float", "float", "float", "float", "len", "float", "float", "float", "float", "numpy.array", "print", "line.strip", "line.strip", "print", "bbox_iou().max", "print", "center_inside.any", "print", "bbox_iou"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou"], ["", "def", "filter_pub_det", "(", "res_file", ",", "pub_det_file", ",", "filter_iou", "=", "False", ")", ":", "\n", "    ", "frame_boxes", "=", "{", "}", "\n", "with", "open", "(", "pub_det_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", "=", "int", "(", "elements", "[", "0", "]", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                ", "frame_boxes", "[", "frame_id", "]", "=", "[", "]", "\n", "", "frame_boxes", "[", "frame_id", "]", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "", "for", "frame", ",", "boxes", "in", "frame_boxes", ".", "items", "(", ")", ":", "\n", "        ", "frame_boxes", "[", "frame", "]", "=", "np", ".", "array", "(", "boxes", ")", "\n", "\n", "", "ids", "=", "{", "}", "\n", "num_filter_box", "=", "0", "\n", "with", "open", "(", "res_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", ",", "obj_id", "=", "elements", "[", ":", "2", "]", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "obj_id", "=", "int", "(", "obj_id", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "obj_id", "not", "in", "ids", ":", "\n", "# track initialization.", "\n", "                ", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                    ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "pub_dt_boxes", "=", "frame_boxes", "[", "frame_id", "]", "\n", "dt_box", "=", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "]", ")", "\n", "if", "filter_iou", ":", "\n", "                    ", "max_iou", "=", "bbox_iou", "(", "dt_box", ",", "pub_dt_boxes", ")", ".", "max", "(", ")", "\n", "if", "max_iou", "<", "0.5", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "pub_dt_centers", "=", "(", "pub_dt_boxes", "[", ":", ",", ":", "2", "]", "+", "pub_dt_boxes", "[", ":", ",", "2", ":", "4", "]", ")", "*", "0.5", "\n", "x_inside", "=", "(", "dt_box", "[", "0", ",", "0", "]", "<=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "&", "(", "dt_box", "[", "0", ",", "2", "]", ">=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "\n", "y_inside", "=", "(", "dt_box", "[", "0", ",", "1", "]", "<=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "&", "(", "dt_box", "[", "0", ",", "3", "]", ">=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "\n", "center_inside", ":", "np", ".", "ndarray", "=", "x_inside", "&", "y_inside", "\n", "if", "not", "center_inside", ".", "any", "(", ")", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "print", "(", "\"save init track {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "ids", "[", "obj_id", "]", "=", "True", "\n", "", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "print", "(", "\"totally {} boxes are filtered.\"", ".", "format", "(", "num_filter_box", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.engine.train_one_epoch": [[33, 89], ["model.train", "criterion.train", "util.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.add_meter", "utils.MetricLogger.add_meter", "datasets.data_prefetcher.data_prefetcher", "datasets.data_prefetcher.data_prefetcher.next", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "util.SmoothedValue", "util.SmoothedValue", "util.SmoothedValue", "range", "model", "criterion", "sum", "util.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "datasets.data_prefetcher.data_prefetcher.next", "len", "loss_dict_reduced_scaled.values", "math.isfinite", "print", "print", "sys.exit", "torch.nn.utils.clip_grad_norm_", "util.get_total_grad_norm", "utils.MetricLogger.meters.items", "utils.reduce_dict.items", "utils.reduce_dict.items", "model.parameters", "model.parameters", "criterion.keys"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.reduce_dict", "home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.MSDeformAttnFunction.backward", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_total_grad_norm"], ["def", "train_one_epoch", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "device", ":", "torch", ".", "device", ",", "epoch", ":", "int", ",", "max_norm", ":", "float", "=", "0", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "'class_error'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "'grad_norm'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "10", "\n", "\n", "prefetcher", "=", "data_prefetcher", "(", "data_loader", ",", "device", ",", "prefetch", "=", "True", ")", "\n", "samples", ",", "targets", "=", "prefetcher", ".", "next", "(", ")", "\n", "\n", "# for samples, targets in metric_logger.log_every(data_loader, print_freq, header):", "\n", "for", "_", "in", "metric_logger", ".", "log_every", "(", "range", "(", "len", "(", "data_loader", ")", ")", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "outputs", "=", "model", "(", "samples", ")", "\n", "\n", "loss_dict", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "weight_dict", "=", "criterion", ".", "weight_dict", "\n", "losses", "=", "sum", "(", "loss_dict", "[", "k", "]", "*", "weight_dict", "[", "k", "]", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", "if", "k", "in", "weight_dict", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "loss_dict_reduced_unscaled", "=", "{", "f'{k}_unscaled'", ":", "v", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "}", "\n", "loss_dict_reduced_scaled", "=", "{", "k", ":", "v", "*", "weight_dict", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "if", "k", "in", "weight_dict", "}", "\n", "losses_reduced_scaled", "=", "sum", "(", "loss_dict_reduced_scaled", ".", "values", "(", ")", ")", "\n", "\n", "loss_value", "=", "losses_reduced_scaled", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "grad_total_norm", "=", "utils", ".", "get_total_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ",", "**", "loss_dict_reduced_scaled", ",", "**", "loss_dict_reduced_unscaled", ")", "\n", "metric_logger", ".", "update", "(", "class_error", "=", "loss_dict_reduced", "[", "'class_error'", "]", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "update", "(", "grad_norm", "=", "grad_total_norm", ")", "\n", "\n", "samples", ",", "targets", "=", "prefetcher", ".", "next", "(", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.engine.train_one_epoch_mot": [[91, 147], ["model.train", "criterion.train", "util.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.add_meter", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "util.SmoothedValue", "util.SmoothedValue", "datasets.data_prefetcher.data_dict_to_cuda", "model", "criterion", "sum", "util.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "loss_dict_reduced_scaled.values", "math.isfinite", "print", "print", "sys.exit", "torch.nn.utils.clip_grad_norm_", "util.get_total_grad_norm", "utils.MetricLogger.meters.items", "utils.reduce_dict.items", "model.parameters", "model.parameters", "criterion.keys"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_dict_to_cuda", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.reduce_dict", "home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.MSDeformAttnFunction.backward", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_total_grad_norm"], ["", "def", "train_one_epoch_mot", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "device", ":", "torch", ".", "device", ",", "epoch", ":", "int", ",", "max_norm", ":", "float", "=", "0", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "criterion", ".", "train", "(", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "# metric_logger.add_meter('class_error', utils.SmoothedValue(window_size=1, fmt='{value:.2f}'))", "\n", "metric_logger", ".", "add_meter", "(", "'grad_norm'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "10", "\n", "\n", "# for samples, targets in metric_logger.log_every(data_loader, print_freq, header):", "\n", "for", "data_dict", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ":", "\n", "        ", "data_dict", "=", "data_dict_to_cuda", "(", "data_dict", ",", "device", ")", "\n", "outputs", "=", "model", "(", "data_dict", ")", "\n", "\n", "\n", "loss_dict", "=", "criterion", "(", "outputs", ",", "data_dict", ")", "\n", "# print(\"iter {} after model\".format(cnt-1))", "\n", "weight_dict", "=", "criterion", ".", "weight_dict", "\n", "losses", "=", "sum", "(", "loss_dict", "[", "k", "]", "*", "weight_dict", "[", "k", "]", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", "if", "k", "in", "weight_dict", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "# loss_dict_reduced_unscaled = {f'{k}_unscaled': v", "\n", "#                               for k, v in loss_dict_reduced.items()}", "\n", "loss_dict_reduced_scaled", "=", "{", "k", ":", "v", "*", "weight_dict", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "if", "k", "in", "weight_dict", "}", "\n", "losses_reduced_scaled", "=", "sum", "(", "loss_dict_reduced_scaled", ".", "values", "(", ")", ")", "\n", "\n", "loss_value", "=", "losses_reduced_scaled", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "grad_total_norm", "=", "utils", ".", "get_total_grad_norm", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# metric_logger.update(loss=loss_value, **loss_dict_reduced_scaled, **loss_dict_reduced_unscaled)", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ",", "**", "loss_dict_reduced_scaled", ")", "\n", "# metric_logger.update(class_error=loss_dict_reduced['class_error'])", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "metric_logger", ".", "update", "(", "grad_norm", "=", "grad_total_norm", ")", "\n", "# gather the stats from all processes", "\n", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.engine.evaluate": [[149, 237], ["torch.no_grad", "model.eval", "criterion.eval", "util.MetricLogger", "utils.MetricLogger.add_meter", "tuple", "datasets.coco_eval.CocoEvaluator", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "util.SmoothedValue", "postprocessors.keys", "datasets.panoptic_eval.PanopticEvaluator", "samples.to.to", "model", "criterion", "util.reduce_dict", "utils.MetricLogger.update", "utils.MetricLogger.update", "torch.stack", "datasets.coco_eval.CocoEvaluator.synchronize_between_processes", "datasets.panoptic_eval.PanopticEvaluator.synchronize_between_processes", "datasets.coco_eval.CocoEvaluator.accumulate", "datasets.coco_eval.CocoEvaluator.summarize", "datasets.panoptic_eval.PanopticEvaluator.summarize", "postprocessors.keys", "torch.stack", "target[].item", "datasets.coco_eval.CocoEvaluator.update", "enumerate", "datasets.panoptic_eval.PanopticEvaluator.update", "utils.MetricLogger.meters.items", "postprocessors.keys", "datasets.coco_eval.CocoEvaluator.coco_eval[].stats.tolist", "postprocessors.keys", "datasets.coco_eval.CocoEvaluator.coco_eval[].stats.tolist", "os.path.join", "v.to", "utils.reduce_dict.items", "sum", "zip", "target[].item", "postprocessors.keys", "t.items", "loss_dict_reduced_scaled.values"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.log_every", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.reduce_dict", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.accumulate", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.summarize", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.summarize", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "model", ",", "criterion", ",", "postprocessors", ",", "data_loader", ",", "base_ds", ",", "device", ",", "output_dir", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "criterion", ".", "eval", "(", ")", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'class_error'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.2f}'", ")", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "iou_types", "=", "tuple", "(", "k", "for", "k", "in", "(", "'segm'", ",", "'bbox'", ")", "if", "k", "in", "postprocessors", ".", "keys", "(", ")", ")", "\n", "coco_evaluator", "=", "CocoEvaluator", "(", "base_ds", ",", "iou_types", ")", "\n", "# coco_evaluator.coco_eval[iou_types[0]].params.iouThrs = [0, 0.1, 0.5, 0.75]", "\n", "\n", "panoptic_evaluator", "=", "None", "\n", "if", "'panoptic'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "        ", "panoptic_evaluator", "=", "PanopticEvaluator", "(", "\n", "data_loader", ".", "dataset", ".", "ann_file", ",", "\n", "data_loader", ".", "dataset", ".", "ann_folder", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"panoptic_eval\"", ")", ",", "\n", ")", "\n", "\n", "", "for", "samples", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "        ", "samples", "=", "samples", ".", "to", "(", "device", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "outputs", "=", "model", "(", "samples", ")", "\n", "loss_dict", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "weight_dict", "=", "criterion", ".", "weight_dict", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "utils", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "loss_dict_reduced_scaled", "=", "{", "k", ":", "v", "*", "weight_dict", "[", "k", "]", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", "if", "k", "in", "weight_dict", "}", "\n", "# loss_dict_reduced_unscaled = {f'{k}_unscaled': v", "\n", "#                               for k, v in loss_dict_reduced.items()}", "\n", "# metric_logger.update(loss=sum(loss_dict_reduced_scaled.values()),", "\n", "#                      **loss_dict_reduced_scaled,", "\n", "#                      **loss_dict_reduced_unscaled)", "\n", "metric_logger", ".", "update", "(", "loss", "=", "sum", "(", "loss_dict_reduced_scaled", ".", "values", "(", ")", ")", ",", "\n", "**", "loss_dict_reduced_scaled", ",", "\n", ")", "\n", "metric_logger", ".", "update", "(", "class_error", "=", "loss_dict_reduced", "[", "'class_error'", "]", ")", "\n", "\n", "orig_target_sizes", "=", "torch", ".", "stack", "(", "[", "t", "[", "\"orig_size\"", "]", "for", "t", "in", "targets", "]", ",", "dim", "=", "0", ")", "\n", "results", "=", "postprocessors", "[", "'bbox'", "]", "(", "outputs", ",", "orig_target_sizes", ")", "\n", "if", "'segm'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "target_sizes", "=", "torch", ".", "stack", "(", "[", "t", "[", "\"size\"", "]", "for", "t", "in", "targets", "]", ",", "dim", "=", "0", ")", "\n", "results", "=", "postprocessors", "[", "'segm'", "]", "(", "results", ",", "outputs", ",", "orig_target_sizes", ",", "target_sizes", ")", "\n", "", "res", "=", "{", "target", "[", "'image_id'", "]", ".", "item", "(", ")", ":", "output", "for", "target", ",", "output", "in", "zip", "(", "targets", ",", "results", ")", "}", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "            ", "coco_evaluator", ".", "update", "(", "res", ")", "\n", "\n", "", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "            ", "res_pano", "=", "postprocessors", "[", "\"panoptic\"", "]", "(", "outputs", ",", "target_sizes", ",", "orig_target_sizes", ")", "\n", "for", "i", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "image_id", "=", "target", "[", "\"image_id\"", "]", ".", "item", "(", ")", "\n", "file_name", "=", "f\"{image_id:012d}.png\"", "\n", "res_pano", "[", "i", "]", "[", "\"image_id\"", "]", "=", "image_id", "\n", "res_pano", "[", "i", "]", "[", "\"file_name\"", "]", "=", "file_name", "\n", "\n", "", "panoptic_evaluator", ".", "update", "(", "res_pano", ")", "\n", "\n", "# gather the stats from all processes", "\n", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "coco_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "        ", "panoptic_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "# accumulate predictions from all images", "\n", "", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "coco_evaluator", ".", "accumulate", "(", ")", "\n", "coco_evaluator", ".", "summarize", "(", ")", "\n", "", "panoptic_res", "=", "None", "\n", "if", "panoptic_evaluator", "is", "not", "None", ":", "\n", "        ", "panoptic_res", "=", "panoptic_evaluator", ".", "summarize", "(", ")", "\n", "", "stats", "=", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "        ", "if", "'bbox'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'coco_eval_bbox'", "]", "=", "coco_evaluator", ".", "coco_eval", "[", "'bbox'", "]", ".", "stats", ".", "tolist", "(", ")", "\n", "", "if", "'segm'", "in", "postprocessors", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'coco_eval_masks'", "]", "=", "coco_evaluator", ".", "coco_eval", "[", "'segm'", "]", ".", "stats", ".", "tolist", "(", ")", "\n", "", "", "if", "panoptic_res", "is", "not", "None", ":", "\n", "        ", "stats", "[", "'PQ_all'", "]", "=", "panoptic_res", "[", "\"All\"", "]", "\n", "stats", "[", "'PQ_th'", "]", "=", "panoptic_res", "[", "\"Things\"", "]", "\n", "stats", "[", "'PQ_st'", "]", "=", "panoptic_res", "[", "\"Stuff\"", "]", "\n", "", "return", "stats", ",", "coco_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.main.get_args_parser": [[34, 181], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Deformable DETR Detector'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "2e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_backbone_names'", ",", "default", "=", "[", "\"backbone.0\"", "]", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_backbone'", ",", "default", "=", "2e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_linear_proj_names'", ",", "default", "=", "[", "'reference_points'", ",", "'sampling_offsets'", ",", "]", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_linear_proj_mult'", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_drop'", ",", "default", "=", "40", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_period'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_drop_epochs'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_max_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--meta_arch'", ",", "default", "=", "'deformable_detr'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sgd'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Variants of Deformable DETR", "\n", "parser", ".", "add_argument", "(", "'--with_box_refine'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--two_stage'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--accurate_ratio'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--frozen_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to the pretrained model. If set, only the mask head will be trained\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_anchors'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n", "# * Backbone", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Name of the convolutional backbone to use\"", ")", "\n", "parser", ".", "add_argument", "(", "'--enable_fpn'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--dilation'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"If true, we replace stride with dilation in the last convolutional block (DC5)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--position_embedding'", ",", "default", "=", "'sine'", ",", "type", "=", "str", ",", "choices", "=", "(", "'sine'", ",", "'learned'", ")", ",", "\n", "help", "=", "\"Type of positional embedding to use on top of the image features\"", ")", "\n", "parser", ".", "add_argument", "(", "'--position_embedding_scale'", ",", "default", "=", "2", "*", "np", ".", "pi", ",", "type", "=", "float", ",", "\n", "help", "=", "\"position / size * scale\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_feature_levels'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'number of feature levels'", ")", "\n", "\n", "# * Transformer", "\n", "parser", ".", "add_argument", "(", "'--enc_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of encoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of decoding layers in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Intermediate size of the feedforward layers in the transformer blocks\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Size of the embeddings (dimension of the transformer)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Dropout applied in the transformer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--nheads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of attention heads inside the transformer's attentions\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_queries'", ",", "default", "=", "300", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of query slots\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_n_points'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--enc_n_points'", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_cross_self'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--sigmoid_attn'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--cj'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_track_attn'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_normalizer'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_size'", ",", "default", "=", "1333", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--val_width'", ",", "default", "=", "800", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_ignore'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# * Segmentation", "\n", "parser", ".", "add_argument", "(", "'--masks'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Train segmentation head if the flag is provided\"", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--no_aux_loss'", ",", "dest", "=", "'aux_loss'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "\"Disables auxiliary decoding losses (loss at each layer)\"", ")", "\n", "\n", "# * Matcher", "\n", "parser", ".", "add_argument", "(", "'--mix_match'", ",", "action", "=", "'store_true'", ",", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_class'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Class coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_bbox'", ",", "default", "=", "5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"L1 box coefficient in the matching cost\"", ")", "\n", "parser", ".", "add_argument", "(", "'--set_cost_giou'", ",", "default", "=", "2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"giou box coefficient in the matching cost\"", ")", "\n", "\n", "# * Loss coefficients", "\n", "parser", ".", "add_argument", "(", "'--mask_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--dice_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--cls_loss_coef'", ",", "default", "=", "2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--bbox_loss_coef'", ",", "default", "=", "5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--giou_loss_coef'", ",", "default", "=", "2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--focal_alpha'", ",", "default", "=", "0.25", ",", "type", "=", "float", ")", "\n", "\n", "# dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset_file'", ",", "default", "=", "'coco'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_file_train'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_file_val'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--coco_path'", ",", "default", "=", "'/data/workspace/detectron2/datasets/coco/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--coco_panoptic_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_difficult'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "default", "=", "None", ",", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--cache_mode'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to cache images on memory'", ")", "\n", "\n", "# end-to-end mot settings.", "\n", "parser", ".", "add_argument", "(", "'--mot_path'", ",", "default", "=", "'/data/Dataset/mot'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--input_video'", ",", "default", "=", "'figs/demo.mp4'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--data_txt_path_train'", ",", "\n", "default", "=", "'./datasets/data_path/detmot17.train'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"path to dataset txt split\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_txt_path_val'", ",", "\n", "default", "=", "'./datasets/data_path/detmot17.train'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"path to dataset txt split\"", ")", "\n", "parser", ".", "add_argument", "(", "'--img_path'", ",", "default", "=", "'data/valid/JPEGImages/'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--query_interaction_layer'", ",", "default", "=", "'QIM'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_mode'", ",", "type", "=", "str", ",", "default", "=", "'fixed_interval'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--random_drop'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--fp_ratio'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--merger_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--update_query_pos'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sampler_steps'", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--sampler_lengths'", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "default", "=", "'submit'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--memory_bank_score_thresh'", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "'--memory_bank_len'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--memory_bank_type'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--memory_bank_with_self_attn'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use_checkpoint'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.main.main": [[183, 379], ["util.init_distributed_mode", "print", "print", "torch.device", "torch.manual_seed", "numpy.random.seed", "random.seed", "models.build_model", "torch.nn.parallel.DistributedDataParallel.to", "sum", "print", "datasets.build_dataset", "datasets.build_dataset", "torch.utils.data.BatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.StepLR", "pathlib.Path", "print", "time.time", "range", "str", "print", "util.get_rank", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torch.optim.SGD", "torch.optim.AdamW", "torch.nn.parallel.DistributedDataParallel", "datasets.coco.build", "datasets.coco.build", "datasets.get_coco_api_from_dataset", "datasets.get_coco_api_from_dataset", "torch.load", "util.tool.load_model.detr.load_state_dict", "util.tool.load_model", "args.resume.startswith", "util.tool.load_model.load_state_dict", "engine.evaluate", "datasets.build_dataset.set_epoch", "datasets.build_dataset.set_epoch", "train_func", "torch.optim.lr_scheduler.StepLR.step", "time.time", "datetime.timedelta", "util.get_sha", "p.numel", "datasets.NodeDistributedSampler", "datasets.NodeDistributedSampler", "datasets.DistributedSampler", "datasets.DistributedSampler", "torch.hub.load_state_dict_from_url", "torch.load", "len", "print", "len", "print", "copy.deepcopy", "torch.optim.AdamW.load_state_dict", "zip", "torch.optim.lr_scheduler.StepLR.load_state_dict", "torch.optim.lr_scheduler.StepLR.step", "util.save_on_master", "samplers.DistributedSampler.set_epoch", "engine.evaluate", "datasets.build_dataset.step_epoch", "datasets.build_dataset.step_epoch", "torch.nn.parallel.DistributedDataParallel.parameters", "print", "list", "checkpoint_paths.append", "util.save_on_master", "util.is_main_process", "int", "util.tool.load_model.named_parameters", "util.tool.load_model.named_parameters", "util.tool.load_model.named_parameters", "map", "f.write", "main.main.match_name_keywords"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.init_distributed_mode", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.__init__.build_model", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.tool.load_model", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.evaluate", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_sha", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.save_on_master", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.evaluate", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.step_epoch", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.step_epoch", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.save_on_master", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "print", "(", "\"git:\\n  {}\\n\"", ".", "format", "(", "utils", ".", "get_sha", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "frozen_weights", "is", "not", "None", ":", "\n", "        ", "assert", "args", ".", "masks", ",", "\"Frozen training is meant for segmentation only\"", "\n", "", "print", "(", "args", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# fix the seed for reproducibility", "\n", "seed", "=", "args", ".", "seed", "+", "utils", ".", "get_rank", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "model", ",", "criterion", ",", "postprocessors", "=", "build_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_without_ddp", "=", "model", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "\n", "dataset_train", "=", "build_dataset", "(", "image_set", "=", "'train'", ",", "args", "=", "args", ")", "\n", "dataset_val", "=", "build_dataset", "(", "image_set", "=", "'val'", ",", "args", "=", "args", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "cache_mode", ":", "\n", "            ", "sampler_train", "=", "samplers", ".", "NodeDistributedSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "samplers", ".", "NodeDistributedSampler", "(", "dataset_val", ",", "shuffle", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "sampler_train", "=", "samplers", ".", "DistributedSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "samplers", ".", "DistributedSampler", "(", "dataset_val", ",", "shuffle", "=", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset_train", ")", "\n", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "", "batch_sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "sampler_train", ",", "args", ".", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "if", "args", ".", "dataset_file", "in", "[", "'e2e_mot'", ",", "'e2e_dance'", ",", "'mot'", ",", "'ori_mot'", ",", "'e2e_static_mot'", ",", "'e2e_joint'", "]", ":", "\n", "        ", "collate_fn", "=", "utils", ".", "mot_collate_fn", "\n", "", "else", ":", "\n", "        ", "collate_fn", "=", "utils", ".", "collate_fn", "\n", "", "data_loader_train", "=", "DataLoader", "(", "dataset_train", ",", "batch_sampler", "=", "batch_sampler_train", ",", "\n", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "data_loader_val", "=", "DataLoader", "(", "dataset_val", ",", "args", ".", "batch_size", ",", "sampler", "=", "sampler_val", ",", "\n", "drop_last", "=", "False", ",", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "def", "match_name_keywords", "(", "n", ",", "name_keywords", ")", ":", "\n", "        ", "out", "=", "False", "\n", "for", "b", "in", "name_keywords", ":", "\n", "            ", "if", "b", "in", "n", ":", "\n", "                ", "out", "=", "True", "\n", "break", "\n", "", "", "return", "out", "\n", "\n", "", "param_dicts", "=", "[", "\n", "{", "\n", "\"params\"", ":", "\n", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "\n", "if", "not", "match_name_keywords", "(", "n", ",", "args", ".", "lr_backbone_names", ")", "and", "not", "match_name_keywords", "(", "n", ",", "args", ".", "lr_linear_proj_names", ")", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "lr", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "match_name_keywords", "(", "n", ",", "args", ".", "lr_backbone_names", ")", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "lr_backbone", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model_without_ddp", ".", "named_parameters", "(", ")", "if", "match_name_keywords", "(", "n", ",", "args", ".", "lr_linear_proj_names", ")", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "lr", "*", "args", ".", "lr_linear_proj_mult", ",", "\n", "}", "\n", "]", "\n", "if", "args", ".", "sgd", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "param_dicts", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "param_dicts", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_drop", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "\n", "", "if", "args", ".", "dataset_file", "==", "\"coco_panoptic\"", ":", "\n", "# We also evaluate AP during panoptic training, on original coco DS", "\n", "        ", "coco_val", "=", "datasets", ".", "coco", ".", "build", "(", "\"val\"", ",", "args", ")", "\n", "base_ds", "=", "get_coco_api_from_dataset", "(", "coco_val", ")", "\n", "", "else", ":", "\n", "        ", "base_ds", "=", "get_coco_api_from_dataset", "(", "dataset_val", ")", "\n", "\n", "", "if", "args", ".", "frozen_weights", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "frozen_weights", ",", "map_location", "=", "'cpu'", ")", "\n", "model_without_ddp", ".", "detr", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "model_without_ddp", "=", "load_model", "(", "model_without_ddp", ",", "args", ".", "pretrained", ")", "\n", "\n", "", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "resume", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "", "missing_keys", ",", "unexpected_keys", "=", "model_without_ddp", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "unexpected_keys", "=", "[", "k", "for", "k", "in", "unexpected_keys", "if", "not", "(", "k", ".", "endswith", "(", "'total_params'", ")", "or", "k", ".", "endswith", "(", "'total_ops'", ")", ")", "]", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "print", "(", "'Missing Keys: {}'", ".", "format", "(", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "print", "(", "'Unexpected Keys: {}'", ".", "format", "(", "unexpected_keys", ")", ")", "\n", "", "if", "not", "args", ".", "eval", "and", "'optimizer'", "in", "checkpoint", "and", "'lr_scheduler'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "import", "copy", "\n", "p_groups", "=", "copy", ".", "deepcopy", "(", "optimizer", ".", "param_groups", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "for", "pg", ",", "pg_old", "in", "zip", "(", "optimizer", ".", "param_groups", ",", "p_groups", ")", ":", "\n", "                ", "pg", "[", "'lr'", "]", "=", "pg_old", "[", "'lr'", "]", "\n", "pg", "[", "'initial_lr'", "]", "=", "pg_old", "[", "'initial_lr'", "]", "\n", "# print(optimizer.param_groups)", "\n", "", "lr_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'lr_scheduler'", "]", ")", "\n", "# todo: this is a hack for doing experiment that resume from checkpoint and also modify lr scheduler (e.g., decrease lr in advance).", "\n", "args", ".", "override_resumed_lr_drop", "=", "True", "\n", "if", "args", ".", "override_resumed_lr_drop", ":", "\n", "                ", "print", "(", "'Warning: (hack) args.override_resumed_lr_drop is set to True, so args.lr_drop would override lr_drop in resumed lr_scheduler.'", ")", "\n", "lr_scheduler", ".", "step_size", "=", "args", ".", "lr_drop", "\n", "lr_scheduler", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "", "lr_scheduler", ".", "step", "(", "lr_scheduler", ".", "last_epoch", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "", "if", "args", ".", "eval", ":", "\n", "        ", "test_stats", ",", "coco_evaluator", "=", "evaluate", "(", "model", ",", "criterion", ",", "postprocessors", ",", "\n", "data_loader_val", ",", "base_ds", ",", "device", ",", "args", ".", "output_dir", ")", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "utils", ".", "save_on_master", "(", "coco_evaluator", ".", "coco_eval", "[", "\"bbox\"", "]", ".", "eval", ",", "output_dir", "/", "\"eval.pth\"", ")", "\n", "", "return", "\n", "\n", "", "print", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_func", "=", "train_one_epoch", "\n", "if", "args", ".", "dataset_file", "in", "[", "'e2e_mot'", ",", "'e2e_dance'", ",", "'mot'", ",", "'ori_mot'", ",", "'e2e_static_mot'", ",", "'e2e_joint'", "]", ":", "\n", "        ", "train_func", "=", "train_one_epoch_mot", "\n", "dataset_train", ".", "set_epoch", "(", "args", ".", "start_epoch", ")", "\n", "dataset_val", ".", "set_epoch", "(", "args", ".", "start_epoch", ")", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "sampler_train", ".", "set_epoch", "(", "epoch", ")", "\n", "", "train_stats", "=", "train_func", "(", "\n", "model", ",", "criterion", ",", "data_loader_train", ",", "optimizer", ",", "device", ",", "epoch", ",", "args", ".", "clip_max_norm", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "checkpoint_paths", "=", "[", "output_dir", "/", "'checkpoint.pth'", "]", "\n", "# extra checkpoint before LR drop and every 5 epochs", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "lr_drop", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_period", "==", "0", "or", "(", "(", "(", "args", ".", "epochs", ">=", "100", "and", "(", "epoch", "+", "1", ")", ">", "100", ")", "or", "args", ".", "epochs", "<", "100", ")", "and", "(", "epoch", "+", "1", ")", "%", "5", "==", "0", ")", ":", "\n", "                ", "checkpoint_paths", ".", "append", "(", "output_dir", "/", "f'checkpoint{epoch:04}.pth'", ")", "\n", "", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "                ", "utils", ".", "save_on_master", "(", "{", "\n", "'model'", ":", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "", "", "if", "args", ".", "dataset_file", "not", "in", "[", "'e2e_mot'", ",", "'e2e_dance'", ",", "'mot'", ",", "'ori_mot'", ",", "'e2e_static_mot'", ",", "'e2e_joint'", "]", ":", "\n", "            ", "test_stats", ",", "coco_evaluator", "=", "evaluate", "(", "\n", "model", ",", "criterion", ",", "postprocessors", ",", "data_loader_val", ",", "base_ds", ",", "device", ",", "args", ".", "output_dir", "\n", ")", "\n", "\n", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "                ", "with", "(", "output_dir", "/", "\"log.txt\"", ")", ".", "open", "(", "\"a\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "# for evaluation logs", "\n", "", "if", "coco_evaluator", "is", "not", "None", ":", "\n", "                    ", "(", "output_dir", "/", "'eval'", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "if", "\"bbox\"", "in", "coco_evaluator", ".", "coco_eval", ":", "\n", "                        ", "filenames", "=", "[", "'latest.pth'", "]", "\n", "if", "epoch", "%", "50", "==", "0", ":", "\n", "                            ", "filenames", ".", "append", "(", "f'{epoch:03}.pth'", ")", "\n", "", "for", "name", "in", "filenames", ":", "\n", "                            ", "torch", ".", "save", "(", "coco_evaluator", ".", "coco_eval", "[", "\"bbox\"", "]", ".", "eval", ",", "\n", "output_dir", "/", "\"eval\"", "/", "name", ")", "\n", "", "", "", "", "", "if", "args", ".", "dataset_file", "in", "[", "'e2e_mot'", ",", "'e2e_dance'", ",", "'mot'", ",", "'ori_mot'", ",", "'e2e_static_mot'", ",", "'e2e_joint'", "]", ":", "\n", "            ", "dataset_train", ".", "step_epoch", "(", ")", "\n", "dataset_val", ".", "step_epoch", "(", ")", "\n", "", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Track.__init__": [[135, 141], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "time_since_update", "=", "0", "\n", "self", ".", "id", "=", "Track", ".", "track_cnt", "\n", "Track", ".", "track_cnt", "+=", "1", "\n", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Track.miss_one_frame": [[142, 144], ["None"], "methods", ["None"], ["", "def", "miss_one_frame", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Track.clear_miss": [[145, 147], ["None"], "methods", ["None"], ["", "def", "clear_miss", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Track.update": [[148, 151], ["eval.Track.clear_miss"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.clear_miss"], ["", "def", "update", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "clear_miss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.MOTR.__init__": [[154, 156], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_age", "=", "1", ",", "min_hits", "=", "3", ",", "iou_threshold", "=", "0.3", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.MOTR.update": [[157, 169], ["range", "numpy.empty", "len", "len", "numpy.concatenate", "numpy.concatenate", "ret.append", "numpy.concatenate().reshape", "numpy.concatenate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dt_instances", ":", "Instances", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "                ", "id", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "box_with_score", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "ret", ".", "append", "(", "np", ".", "concatenate", "(", "(", "box_with_score", ",", "[", "id", "+", "1", "]", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# +1 as MOT benchmark requires positive", "\n", "\n", "", "", "if", "len", "(", "ret", ")", ">", "0", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "ret", ")", "\n", "", "return", "np", ".", "empty", "(", "(", "0", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.__init__": [[265, 294], ["os.listdir", "sorted", "len", "eval.MOTR", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", "=", "None", ",", "seq_num", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "detr", "=", "model", "\n", "\n", "self", ".", "seq_num", "=", "seq_num", "\n", "img_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT15/images/train'", ",", "self", ".", "seq_num", ",", "'img1'", ")", ")", "\n", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT15/images/train'", ",", "self", ".", "seq_num", ",", "'img1'", ",", "_", ")", "for", "_", "in", "img_list", "if", "\n", "(", "'jpg'", "in", "_", ")", "or", "(", "'png'", "in", "_", ")", "]", "\n", "\n", "self", ".", "img_list", "=", "sorted", "(", "img_list", ")", "\n", "self", ".", "img_len", "=", "len", "(", "self", ".", "img_list", ")", "\n", "self", ".", "tr_tracker", "=", "MOTR", "(", ")", "\n", "\n", "'''\n        common settings\n        '''", "\n", "self", ".", "img_height", "=", "800", "\n", "self", ".", "img_width", "=", "1536", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "'results/{}'", ".", "format", "(", "seq_num", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "predict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "'preds'", ",", "self", ".", "seq_num", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "predict_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.load_img_from_file": [[295, 301], ["f_path.replace().replace().replace", "cv2.imread", "cv2.cvtColor", "os.path.exists", "eval.load_label", "f_path.replace().replace", "f_path.replace"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.load_label"], ["", "", "def", "load_img_from_file", "(", "self", ",", "f_path", ")", ":", "\n", "        ", "label_path", "=", "f_path", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "cur_img", "=", "cv2", ".", "imread", "(", "f_path", ")", "\n", "cur_img", "=", "cv2", ".", "cvtColor", "(", "cur_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "targets", "=", "load_label", "(", "label_path", ",", "cur_img", ".", "shape", "[", ":", "2", "]", ")", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", "else", "None", "\n", "return", "cur_img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.init_img": [[302, 314], ["img.unsqueeze.unsqueeze.copy", "int", "int", "cv2.resize", "torchvision.normalize", "img.unsqueeze.unsqueeze.unsqueeze", "min", "torchvision.to_tensor", "max", "max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "init_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "ori_img", "=", "img", ".", "copy", "(", ")", "\n", "self", ".", "seq_h", ",", "self", ".", "seq_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "self", ".", "img_height", "/", "min", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "if", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "*", "scale", ">", "self", ".", "img_width", ":", "\n", "            ", "scale", "=", "self", ".", "img_width", "/", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "", "target_h", "=", "int", "(", "self", ".", "seq_h", "*", "scale", ")", "\n", "target_w", "=", "int", "(", "self", ".", "seq_w", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "target_w", ",", "target_h", ")", ")", "\n", "img", "=", "F", ".", "normalize", "(", "F", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.filter_dt_by_score": [[315, 319], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_score", "(", "dt_instances", ":", "Instances", ",", "prob_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "keep", "=", "dt_instances", ".", "scores", ">", "prob_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.filter_dt_by_area": [[320, 326], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_area", "(", "dt_instances", ":", "Instances", ",", "area_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "wh", "=", "dt_instances", ".", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "dt_instances", ".", "boxes", "[", ":", ",", "0", ":", "2", "]", "\n", "areas", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "keep", "=", "areas", ">", "area_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.write_results": [[327, 338], ["open", "zip", "save_format.format", "f.write", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_results", "(", "txt_path", ",", "frame_id", ",", "bbox_xyxy", ",", "identities", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "with", "open", "(", "txt_path", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "for", "xyxy", ",", "track_id", "in", "zip", "(", "bbox_xyxy", ",", "identities", ")", ":", "\n", "                ", "if", "track_id", "<", "0", "or", "track_id", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "xyxy", "\n", "w", ",", "h", "=", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "int", "(", "frame_id", ")", ",", "id", "=", "int", "(", "track_id", ")", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "w", "=", "w", ",", "h", "=", "h", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.eval_seq": [[339, 345], ["os.path.join", "os.path.join", "util.evaluation.Evaluator", "util.evaluation.Evaluator.eval_file"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_file"], ["", "", "", "def", "eval_seq", "(", "self", ")", ":", "\n", "        ", "data_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT15/images/train'", ")", "\n", "result_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", "\n", "evaluator", "=", "Evaluator", "(", "data_root", ",", "self", ".", "seq_num", ")", "\n", "accs", "=", "evaluator", ".", "eval_file", "(", "result_filename", ")", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.visualize_img_with_bbox": [[346, 358], ["cv2.cvtColor", "dt_instances.has", "cv2.imwrite", "eval.draw_bboxes", "eval.draw_bboxes", "eval.draw_points", "eval.draw_bboxes", "numpy.concatenate", "dt_instances.scores.reshape", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.has", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_points", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes"], ["", "@", "staticmethod", "\n", "def", "visualize_img_with_bbox", "(", "img_path", ",", "img", ",", "dt_instances", ":", "Instances", ",", "ref_pts", "=", "None", ",", "gt_boxes", "=", "None", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "if", "dt_instances", ".", "has", "(", "'scores'", ")", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "scores", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "else", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "if", "ref_pts", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_points", "(", "img_show", ",", "ref_pts", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img_show", ",", "gt_boxes", ",", "identities", "=", "np", ".", "ones", "(", "(", "len", "(", "gt_boxes", ")", ",", ")", ")", "*", "-", "1", ")", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img_show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.Detector.detect": [[359, 397], ["tqdm.tqdm.tqdm", "print", "range", "eval.Detector.load_img_from_file", "eval.Detector.init_img", "eval.Detector.detr.inference_single_image", "max", "eval.tensor_to_numpy", "track_instances.to", "eval.Detector.filter_dt_by_score", "eval.Detector.filter_dt_by_area", "len", "eval.Detector.tr_tracker.update", "eval.Detector.write_results", "track_instances.remove", "track_instances.remove", "cur_img.cuda().float", "track_instances.obj_idxes.max().item", "torch.device", "os.path.join", "eval.Detector.visualize_img_with_bbox", "os.path.join", "cur_img.cuda", "track_instances.obj_idxes.max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.load_img_from_file", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.init_img", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.inference_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.tensor_to_numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_score", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_area", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.write_results", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.visualize_img_with_bbox", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "detect", "(", "self", ",", "prob_threshold", "=", "0.7", ",", "area_threshold", "=", "100", ",", "vis", "=", "False", ")", ":", "\n", "        ", "total_dts", "=", "0", "\n", "track_instances", "=", "None", "\n", "max_id", "=", "0", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "self", ".", "img_len", ")", ")", ":", "\n", "            ", "img", ",", "targets", "=", "self", ".", "load_img_from_file", "(", "self", ".", "img_list", "[", "i", "]", ")", "\n", "cur_img", ",", "ori_img", "=", "self", ".", "init_img", "(", "img", ")", "\n", "\n", "# track_instances = None", "\n", "if", "track_instances", "is", "not", "None", ":", "\n", "                ", "track_instances", ".", "remove", "(", "'boxes'", ")", "\n", "track_instances", ".", "remove", "(", "'labels'", ")", "\n", "\n", "", "res", "=", "self", ".", "detr", ".", "inference_single_image", "(", "cur_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", ",", "track_instances", ")", "\n", "track_instances", "=", "res", "[", "'track_instances'", "]", "\n", "max_id", "=", "max", "(", "max_id", ",", "track_instances", ".", "obj_idxes", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "all_ref_pts", "=", "tensor_to_numpy", "(", "res", "[", "'ref_pts'", "]", "[", "0", ",", ":", ",", ":", "2", "]", ")", "\n", "dt_instances", "=", "track_instances", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "# filter det instances by score.", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_score", "(", "dt_instances", ",", "prob_threshold", ")", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_area", "(", "dt_instances", ",", "area_threshold", ")", "\n", "\n", "total_dts", "+=", "len", "(", "dt_instances", ")", "\n", "\n", "if", "vis", ":", "\n", "# for visual", "\n", "                ", "cur_vis_img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "'frame_{}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "gt_boxes", "=", "None", "\n", "self", ".", "visualize_img_with_bbox", "(", "cur_vis_img_path", ",", "ori_img", ",", "dt_instances", ",", "ref_pts", "=", "all_ref_pts", ",", "gt_boxes", "=", "gt_boxes", ")", "\n", "\n", "", "tracker_outputs", "=", "self", ".", "tr_tracker", ".", "update", "(", "dt_instances", ")", "\n", "self", ".", "write_results", "(", "txt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", ",", "\n", "frame_id", "=", "(", "i", "+", "1", ")", ",", "\n", "bbox_xyxy", "=", "tracker_outputs", "[", ":", ",", ":", "4", "]", ",", "\n", "identities", "=", "tracker_outputs", "[", ":", ",", "5", "]", ")", "\n", "", "print", "(", "\"totally {} dts max_id={}\"", ".", "format", "(", "total_dts", ",", "max_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.plot_one_box": [[71, 94], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "cv2.putText", "range"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "score", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "\n", "# tl = line_thickness or round(", "\n", "#     0.002 * max(img.shape[0:2])) + 1  # line thickness", "\n", "    ", "tl", "=", "2", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "\n", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "\n", "0", ",", "\n", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "\n", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "img", ",", "score", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "30", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.draw_bboxes": [[96, 117], ["enumerate", "cv2.cvtColor", "eval.plot_one_box", "numpy.asarray", "int", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.plot_one_box"], ["", "def", "draw_bboxes", "(", "ori_img", ",", "bbox", ",", "identities", "=", "None", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "cvt_color", "=", "False", ")", ":", "\n", "    ", "if", "cvt_color", ":", "\n", "        ", "ori_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "ori_img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "img", "=", "ori_img", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "bbox", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "int", "(", "i", ")", "for", "i", "in", "box", "[", ":", "4", "]", "]", "\n", "x1", "+=", "offset", "[", "0", "]", "\n", "x2", "+=", "offset", "[", "0", "]", "\n", "y1", "+=", "offset", "[", "1", "]", "\n", "y2", "+=", "offset", "[", "1", "]", "\n", "if", "len", "(", "box", ")", ">", "4", ":", "\n", "            ", "score", "=", "'{:.2f}'", ".", "format", "(", "box", "[", "4", "]", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "None", "\n", "# box text and bar", "\n", "", "id", "=", "int", "(", "identities", "[", "i", "]", ")", "if", "identities", "is", "not", "None", "else", "0", "\n", "color", "=", "COLORS_10", "[", "id", "%", "len", "(", "COLORS_10", ")", "]", "\n", "label", "=", "'{:d}'", ".", "format", "(", "id", ")", "\n", "# t_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_PLAIN, 2 , 2)[0]", "\n", "img", "=", "plot_one_box", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "img", ",", "color", ",", "label", ",", "score", "=", "score", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.draw_points": [[119, 126], ["enumerate", "cv2.circle", "len", "int", "int"], "function", ["None"], ["", "def", "draw_points", "(", "img", ":", "np", ".", "ndarray", ",", "points", ":", "np", ".", "ndarray", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "1", "]", "==", "2", ",", "'invalid points shape: {}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "i", ">=", "300", ":", "\n", "            ", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "2", ",", "color", "=", "color", ",", "thickness", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.tensor_to_numpy": [[128, 130], ["tensor.detach().cpu().numpy", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "def", "tensor_to_numpy", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.load_label": [[171, 196], ["numpy.loadtxt().reshape", "np.loadtxt().reshape.copy", "len", "set", "numpy.asarray", "numpy.asarray", "numpy.asarray", "set.add", "targets[].append", "targets[].append", "targets[].append", "numpy.loadtxt", "label[].tolist"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "", "def", "load_label", "(", "label_path", ":", "str", ",", "img_size", ":", "tuple", ")", "->", "dict", ":", "\n", "    ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "h", ",", "w", "=", "img_size", "\n", "# Normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "targets", "=", "{", "'boxes'", ":", "[", "]", ",", "'labels'", ":", "[", "]", ",", "'area'", ":", "[", "]", "}", "\n", "num_boxes", "=", "len", "(", "labels", ")", "\n", "\n", "visited_ids", "=", "set", "(", ")", "\n", "for", "label", "in", "labels", "[", ":", "num_boxes", "]", ":", "\n", "        ", "obj_id", "=", "label", "[", "1", "]", "\n", "if", "obj_id", "in", "visited_ids", ":", "\n", "            ", "continue", "\n", "", "visited_ids", ".", "add", "(", "obj_id", ")", "\n", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "", "targets", "[", "'boxes'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'boxes'", "]", ")", "\n", "targets", "[", "'area'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'labels'", "]", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.eval.filter_pub_det": [[198, 262], ["frame_boxes.items", "print", "open", "f.readlines", "numpy.array", "open", "list", "open", "line.strip().split", "int", "frame_boxes[].append", "f.readlines", "line.strip().split", "int", "int", "f.write", "len", "float", "float", "float", "float", "len", "float", "float", "float", "float", "numpy.array", "print", "line.strip", "line.strip", "print", "bbox_iou().max", "print", "center_inside.any", "print", "bbox_iou"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou"], ["", "def", "filter_pub_det", "(", "res_file", ",", "pub_det_file", ",", "filter_iou", "=", "False", ")", ":", "\n", "    ", "frame_boxes", "=", "{", "}", "\n", "with", "open", "(", "pub_det_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", "=", "int", "(", "elements", "[", "0", "]", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                ", "frame_boxes", "[", "frame_id", "]", "=", "[", "]", "\n", "", "frame_boxes", "[", "frame_id", "]", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "", "for", "frame", ",", "boxes", "in", "frame_boxes", ".", "items", "(", ")", ":", "\n", "        ", "frame_boxes", "[", "frame", "]", "=", "np", ".", "array", "(", "boxes", ")", "\n", "\n", "", "ids", "=", "{", "}", "\n", "num_filter_box", "=", "0", "\n", "with", "open", "(", "res_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "list", "(", "f", ".", "readlines", "(", ")", ")", "\n", "", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", ",", "obj_id", "=", "elements", "[", ":", "2", "]", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "obj_id", "=", "int", "(", "obj_id", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "obj_id", "not", "in", "ids", ":", "\n", "# track initialization.", "\n", "                ", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                    ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "pub_dt_boxes", "=", "frame_boxes", "[", "frame_id", "]", "\n", "dt_box", "=", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "]", ")", "\n", "if", "filter_iou", ":", "\n", "                    ", "max_iou", "=", "bbox_iou", "(", "dt_box", ",", "pub_dt_boxes", ")", ".", "max", "(", ")", "\n", "if", "max_iou", "<", "0.5", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "pub_dt_centers", "=", "(", "pub_dt_boxes", "[", ":", ",", ":", "2", "]", "+", "pub_dt_boxes", "[", ":", ",", "2", ":", "4", "]", ")", "*", "0.5", "\n", "x_inside", "=", "(", "dt_box", "[", "0", ",", "0", "]", "<=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "&", "(", "dt_box", "[", "0", ",", "2", "]", ">=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "\n", "y_inside", "=", "(", "dt_box", "[", "0", ",", "1", "]", "<=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "&", "(", "dt_box", "[", "0", ",", "3", "]", ">=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "\n", "center_inside", ":", "np", ".", "ndarray", "=", "x_inside", "&", "y_inside", "\n", "if", "not", "center_inside", ".", "any", "(", ")", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "print", "(", "\"save init track {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "ids", "[", "obj_id", "]", "=", "True", "\n", "", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "print", "(", "\"totally {} boxes are filtered.\"", ".", "format", "(", "num_filter_box", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.benchmark.get_benckmark_arg_parser": [[27, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_benckmark_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'Benchmark inference speed of Deformable DETR.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iters'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'total iters to benchmark speed'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_iters'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'ignore first several iters that are very slow'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'batch size in inference'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'load the pre-trained checkpoint'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.benchmark.measure_average_inference_time": [[36, 49], ["torch.no_grad", "range", "print", "torch.cuda.synchronize", "time.perf_counter", "model", "torch.cuda.synchronize", "sum", "len", "time.perf_counter", "ts.append"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "measure_average_inference_time", "(", "model", ",", "inputs", ",", "num_iters", "=", "100", ",", "warm_iters", "=", "5", ")", ":", "\n", "    ", "ts", "=", "[", "]", "\n", "for", "iter_", "in", "range", "(", "num_iters", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t_", "=", "time", ".", "perf_counter", "(", ")", "\n", "model", "(", "inputs", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "t", "=", "time", ".", "perf_counter", "(", ")", "-", "t_", "\n", "if", "iter_", ">=", "warm_iters", ":", "\n", "          ", "ts", ".", "append", "(", "t", ")", "\n", "", "", "print", "(", "ts", ")", "\n", "return", "sum", "(", "ts", ")", "/", "len", "(", "ts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.benchmark.benchmark": [[51, 67], ["get_benckmark_arg_parser().parse_known_args", "main.get_args_parser.parse_args", "datasets.build_dataset", "models.build_model", "model.cuda", "model.eval", "util.misc.nested_tensor_from_tensor_list", "benchmark.measure_average_inference_time", "os.path.exists", "torch.load", "model.load_state_dict", "benchmark.get_benckmark_arg_parser", "main.get_args_parser", "[].cuda", "range", "datasets.build_dataset.__getitem__"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.tools.launch.parse_args", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.build_dataset", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.__init__.build_model", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.benchmark.measure_average_inference_time", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.benchmark.get_benckmark_arg_parser", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.main.get_args_parser", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__getitem__"], ["", "def", "benchmark", "(", ")", ":", "\n", "    ", "args", ",", "_", "=", "get_benckmark_arg_parser", "(", ")", ".", "parse_known_args", "(", ")", "\n", "main_args", "=", "get_main_args_parser", "(", ")", ".", "parse_args", "(", "_", ")", "\n", "assert", "args", ".", "warm_iters", "<", "args", ".", "num_iters", "and", "args", ".", "num_iters", ">", "0", "and", "args", ".", "warm_iters", ">=", "0", "\n", "assert", "args", ".", "batch_size", ">", "0", "\n", "assert", "args", ".", "resume", "is", "None", "or", "os", ".", "path", ".", "exists", "(", "args", ".", "resume", ")", "\n", "dataset", "=", "build_dataset", "(", "'val'", ",", "main_args", ")", "\n", "model", ",", "_", ",", "_", "=", "build_model", "(", "main_args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "", "inputs", "=", "nested_tensor_from_tensor_list", "(", "[", "dataset", ".", "__getitem__", "(", "0", ")", "[", "0", "]", ".", "cuda", "(", ")", "for", "_", "in", "range", "(", "args", ".", "batch_size", ")", "]", ")", "\n", "t", "=", "measure_average_inference_time", "(", "model", ",", "inputs", ",", "args", ".", "num_iters", ",", "args", ".", "warm_iters", ")", "\n", "return", "1.0", "/", "t", "*", "args", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.__init__": [[139, 145], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "time_since_update", "=", "0", "\n", "self", ".", "id", "=", "Track", ".", "track_cnt", "\n", "Track", ".", "track_cnt", "+=", "1", "\n", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.miss_one_frame": [[146, 148], ["None"], "methods", ["None"], ["", "def", "miss_one_frame", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.clear_miss": [[149, 151], ["None"], "methods", ["None"], ["", "def", "clear_miss", "(", "self", ")", ":", "\n", "        ", "self", ".", "miss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.update": [[152, 155], ["submit.Track.clear_miss"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.clear_miss"], ["", "def", "update", "(", "self", ",", "box", ")", ":", "\n", "        ", "self", ".", "box", "=", "box", "\n", "self", ".", "clear_miss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR.__init__": [[158, 170], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_age", "=", "1", ",", "min_hits", "=", "3", ",", "iou_threshold", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"\n        Sets key parameters for SORT\n        \"\"\"", "\n", "self", ".", "max_age", "=", "max_age", "\n", "self", ".", "min_hits", "=", "min_hits", "\n", "self", ".", "iou_threshold", "=", "iou_threshold", "\n", "self", ".", "trackers", "=", "[", "]", "\n", "self", ".", "frame_count", "=", "0", "\n", "self", ".", "active_trackers", "=", "{", "}", "\n", "self", ".", "inactive_trackers", "=", "{", "}", "\n", "self", ".", "disappeared_tracks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR._remove_track": [[171, 174], ["submit.MOTR.inactive_trackers.pop", "submit.MOTR.disappeared_tracks.append"], "methods", ["None"], ["", "def", "_remove_track", "(", "self", ",", "slot_id", ")", ":", "\n", "        ", "self", ".", "inactive_trackers", ".", "pop", "(", "slot_id", ")", "\n", "self", ".", "disappeared_tracks", ".", "append", "(", "slot_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR.clear_disappeared_track": [[175, 177], ["None"], "methods", ["None"], ["", "def", "clear_disappeared_track", "(", "self", ")", ":", "\n", "        ", "self", ".", "disappeared_tracks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR.update": [[178, 238], ["set", "set().union", "set.intersection", "range", "range", "numpy.empty", "dt_instances.obj_idxes.tolist", "set", "submit.MOTR.inactive_trackers[].miss_one_frame", "len", "numpy.concatenate", "len", "len", "numpy.concatenate", "set", "submit.MOTR.inactive_trackers.keys", "submit.MOTR.active_trackers.pop", "submit.MOTR._remove_track", "submit.MOTR.active_trackers[].update", "numpy.concatenate", "ret.append", "submit.MOTR.active_trackers.keys", "submit.MOTR.inactive_trackers.pop", "submit.Track", "submit.MOTR.inactive_trackers[].miss_one_frame", "numpy.concatenate().reshape", "submit.MOTR.active_trackers.pop", "submit.Track", "submit.MOTR._remove_track", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.miss_one_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR._remove_track", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Track.miss_one_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.MOTR._remove_track"], ["", "def", "update", "(", "self", ",", "dt_instances", ":", "Instances", ")", ":", "\n", "        ", "\"\"\"\n        Params:\n          dets - a numpy array of detections in the format [[x1,y1,x2,y2,score],[x1,y1,x2,y2,score],...]\n        Requires: this method must be called once for each frame even with empty detections (use np.empty((0, 5)) for frames without detections).\n        Returns the a similar array, where the last column is the object ID.\n        NOTE: The number of objects returned may differ from the number of detections provided.\n        \"\"\"", "\n", "self", ".", "frame_count", "+=", "1", "\n", "# get predicted locations from existing trackers.", "\n", "dt_idxes", "=", "set", "(", "dt_instances", ".", "obj_idxes", ".", "tolist", "(", ")", ")", "\n", "track_idxes", "=", "set", "(", "self", ".", "active_trackers", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "self", ".", "inactive_trackers", ".", "keys", "(", ")", ")", ")", "\n", "matched_idxes", "=", "dt_idxes", ".", "intersection", "(", "track_idxes", ")", "\n", "\n", "unmatched_tracker", "=", "track_idxes", "-", "matched_idxes", "\n", "for", "track_id", "in", "unmatched_tracker", ":", "\n", "# miss in this frame, move to inactive_trackers.", "\n", "            ", "if", "track_id", "in", "self", ".", "active_trackers", ":", "\n", "                ", "self", ".", "inactive_trackers", "[", "track_id", "]", "=", "self", ".", "active_trackers", ".", "pop", "(", "track_id", ")", "\n", "", "self", ".", "inactive_trackers", "[", "track_id", "]", ".", "miss_one_frame", "(", ")", "\n", "if", "self", ".", "inactive_trackers", "[", "track_id", "]", ".", "miss", ">", "10", ":", "\n", "                ", "self", ".", "_remove_track", "(", "track_id", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "idx", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "bbox", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "# get a positive track.", "\n", "                ", "if", "idx", "in", "self", ".", "inactive_trackers", ":", "\n", "# set state of track active.", "\n", "                    ", "self", ".", "active_trackers", "[", "idx", "]", "=", "self", ".", "inactive_trackers", ".", "pop", "(", "idx", ")", "\n", "", "if", "idx", "not", "in", "self", ".", "active_trackers", ":", "\n", "# create a new track.", "\n", "                    ", "self", ".", "active_trackers", "[", "idx", "]", "=", "Track", "(", "idx", ")", "\n", "", "self", ".", "active_trackers", "[", "idx", "]", ".", "update", "(", "bbox", ")", "\n", "", "elif", "label", "==", "1", ":", "\n", "# get an occluded track.", "\n", "                ", "if", "idx", "in", "self", ".", "active_trackers", ":", "\n", "# set state of track inactive.", "\n", "                    ", "self", ".", "inactive_trackers", "[", "idx", "]", "=", "self", ".", "active_trackers", ".", "pop", "(", "idx", ")", "\n", "", "if", "idx", "not", "in", "self", ".", "inactive_trackers", ":", "\n", "# It's strange to obtain a new occluded track.", "\n", "# TODO: think more rational disposal.", "\n", "                    ", "self", ".", "inactive_trackers", "[", "idx", "]", "=", "Track", "(", "idx", ")", "\n", "", "self", ".", "inactive_trackers", "[", "idx", "]", ".", "miss_one_frame", "(", ")", "\n", "if", "self", ".", "inactive_trackers", "[", "idx", "]", ".", "miss", ">", "10", ":", "\n", "                    ", "self", ".", "_remove_track", "(", "idx", ")", "\n", "\n", "", "", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dt_instances", ")", ")", ":", "\n", "            ", "label", "=", "dt_instances", ".", "labels", "[", "i", "]", "\n", "if", "label", "==", "0", ":", "\n", "                ", "id", "=", "dt_instances", ".", "obj_idxes", "[", "i", "]", "\n", "box_with_score", "=", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", "[", "i", "]", ",", "dt_instances", ".", "scores", "[", "i", ":", "i", "+", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "ret", ".", "append", "(", "np", ".", "concatenate", "(", "(", "box_with_score", ",", "[", "id", "+", "1", "]", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "# +1 as MOT benchmark requires positive", "\n", "\n", "", "", "if", "len", "(", "ret", ")", ">", "0", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "ret", ")", "\n", "", "return", "np", ".", "empty", "(", "(", "0", ",", "6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.__init__": [[333, 344], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_list", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_list", "=", "img_list", "\n", "\n", "'''\n        common settings\n        '''", "\n", "self", ".", "img_height", "=", "800", "\n", "self", ".", "img_width", "=", "1536", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.load_img_from_file": [[345, 352], ["f_path.replace().replace().replace", "cv2.imread", "cv2.cvtColor", "os.path.exists", "submit.load_label", "f_path.replace().replace", "f_path.replace"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.load_label"], ["", "def", "load_img_from_file", "(", "self", ",", "f_path", ")", ":", "\n", "        ", "label_path", "=", "f_path", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", "\n", "cur_img", "=", "cv2", ".", "imread", "(", "f_path", ")", "\n", "assert", "cur_img", "is", "not", "None", ",", "f_path", "\n", "cur_img", "=", "cv2", ".", "cvtColor", "(", "cur_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "targets", "=", "load_label", "(", "label_path", ",", "cur_img", ".", "shape", "[", ":", "2", "]", ")", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", "else", "None", "\n", "return", "cur_img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.init_img": [[353, 365], ["img.unsqueeze.unsqueeze.copy", "int", "int", "cv2.resize", "torchvision.normalize", "img.unsqueeze.unsqueeze.unsqueeze", "min", "torchvision.to_tensor", "max", "max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "init_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "ori_img", "=", "img", ".", "copy", "(", ")", "\n", "self", ".", "seq_h", ",", "self", ".", "seq_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "scale", "=", "self", ".", "img_height", "/", "min", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "if", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "*", "scale", ">", "self", ".", "img_width", ":", "\n", "            ", "scale", "=", "self", ".", "img_width", "/", "max", "(", "self", ".", "seq_h", ",", "self", ".", "seq_w", ")", "\n", "", "target_h", "=", "int", "(", "self", ".", "seq_h", "*", "scale", ")", "\n", "target_w", "=", "int", "(", "self", ".", "seq_w", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "target_w", ",", "target_h", ")", ")", "\n", "img", "=", "F", ".", "normalize", "(", "F", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.__len__": [[366, 368], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.__getitem__": [[369, 372], ["submit.ListImgDataset.load_img_from_file", "submit.ListImgDataset.init_img"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.load_img_from_file", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.ListImgDataset.init_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "targets", "=", "self", ".", "load_img_from_file", "(", "self", ".", "img_list", "[", "index", "]", ")", "\n", "return", "self", ".", "init_img", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.__init__": [[375, 396], ["os.listdir", "sorted", "len", "submit.MOTR", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", "=", "None", ",", "seq_num", "=", "2", ")", ":", "\n", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "detr", "=", "model", "\n", "\n", "self", ".", "seq_num", "=", "seq_num", "\n", "img_list", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT17/images/test'", ",", "self", ".", "seq_num", ",", "'img1'", ")", ")", "\n", "img_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT17/images/test'", ",", "self", ".", "seq_num", ",", "'img1'", ",", "_", ")", "for", "_", "in", "img_list", "if", "\n", "(", "'jpg'", "in", "_", ")", "or", "(", "'png'", "in", "_", ")", "]", "\n", "\n", "self", ".", "img_list", "=", "sorted", "(", "img_list", ")", "\n", "self", ".", "img_len", "=", "len", "(", "self", ".", "img_list", ")", "\n", "self", ".", "tr_tracker", "=", "MOTR", "(", ")", "\n", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "'results/{}'", ".", "format", "(", "seq_num", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "predict_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "args", ".", "exp_name", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "predict_path", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ")", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_score": [[397, 401], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "filter_dt_by_score", "(", "dt_instances", ":", "Instances", ",", "prob_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "keep", "=", "dt_instances", ".", "scores", ">", "prob_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_area": [[402, 408], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_dt_by_area", "(", "dt_instances", ":", "Instances", ",", "area_threshold", ":", "float", ")", "->", "Instances", ":", "\n", "        ", "wh", "=", "dt_instances", ".", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "dt_instances", ".", "boxes", "[", ":", ",", "0", ":", "2", "]", "\n", "areas", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "keep", "=", "areas", ">", "area_threshold", "\n", "return", "dt_instances", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.write_results": [[409, 420], ["open", "zip", "save_format.format", "f.write", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "write_results", "(", "txt_path", ",", "frame_id", ",", "bbox_xyxy", ",", "identities", ")", ":", "\n", "        ", "save_format", "=", "'{frame},{id},{x1},{y1},{w},{h},1,-1,-1,-1\\n'", "\n", "with", "open", "(", "txt_path", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "for", "xyxy", ",", "track_id", "in", "zip", "(", "bbox_xyxy", ",", "identities", ")", ":", "\n", "                ", "if", "track_id", "<", "0", "or", "track_id", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "xyxy", "\n", "w", ",", "h", "=", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "line", "=", "save_format", ".", "format", "(", "frame", "=", "int", "(", "frame_id", ")", ",", "id", "=", "int", "(", "track_id", ")", ",", "x1", "=", "x1", ",", "y1", "=", "y1", ",", "w", "=", "w", ",", "h", "=", "h", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.eval_seq": [[421, 427], ["os.path.join", "os.path.join", "util.evaluation.Evaluator", "util.evaluation.Evaluator.eval_file"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_file"], ["", "", "", "def", "eval_seq", "(", "self", ")", ":", "\n", "        ", "data_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "mot_path", ",", "'MOT15/images/train'", ")", "\n", "result_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "'gt.txt'", ")", "\n", "evaluator", "=", "Evaluator", "(", "data_root", ",", "self", ".", "seq_num", ")", "\n", "accs", "=", "evaluator", ".", "eval_file", "(", "result_filename", ")", "\n", "return", "accs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.visualize_img_with_bbox": [[428, 439], ["dt_instances.has", "cv2.imwrite", "submit.draw_bboxes", "submit.draw_bboxes", "submit.draw_points", "submit.draw_bboxes", "numpy.concatenate", "dt_instances.scores.reshape", "numpy.ones", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.has", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_points", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes"], ["", "@", "staticmethod", "\n", "def", "visualize_img_with_bbox", "(", "img_path", ",", "img", ",", "dt_instances", ":", "Instances", ",", "ref_pts", "=", "None", ",", "gt_boxes", "=", "None", ")", ":", "\n", "        ", "if", "dt_instances", ".", "has", "(", "'scores'", ")", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "np", ".", "concatenate", "(", "[", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "scores", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "-", "1", ")", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "else", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img", ",", "dt_instances", ".", "boxes", ",", "dt_instances", ".", "obj_idxes", ")", "\n", "", "if", "ref_pts", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_points", "(", "img_show", ",", "ref_pts", ")", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "            ", "img_show", "=", "draw_bboxes", "(", "img_show", ",", "gt_boxes", ",", "identities", "=", "np", ".", "ones", "(", "(", "len", "(", "gt_boxes", ")", ",", ")", ")", "*", "-", "1", ")", "\n", "", "cv2", ".", "imwrite", "(", "img_path", ",", "img_show", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.detect": [[440, 480], ["torch.utils.data.DataLoader", "enumerate", "print", "submit.ListImgDataset", "tqdm.tqdm.tqdm", "submit.Detector.detr.inference_single_image", "submit.tensor_to_numpy", "track_instances.to", "submit.Detector.filter_dt_by_score", "submit.Detector.filter_dt_by_area", "len", "submit.Detector.tr_tracker.update", "submit.Detector.write_results", "track_instances.remove", "track_instances.remove", "cur_img.cuda().float", "torch.device", "os.path.join", "cur_img.cuda"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.inference_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.tensor_to_numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_score", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.filter_dt_by_area", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.Detector.write_results", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device"], ["", "def", "detect", "(", "self", ",", "prob_threshold", "=", "0.7", ",", "area_threshold", "=", "100", ")", ":", "\n", "        ", "last_dt_embedding", "=", "None", "\n", "total_dts", "=", "0", "\n", "total_occlusion_dts", "=", "0", "\n", "\n", "track_instances", "=", "None", "\n", "loader", "=", "DataLoader", "(", "ListImgDataset", "(", "self", ".", "img_list", ")", ",", "1", ",", "num_workers", "=", "2", ")", "\n", "for", "i", ",", "(", "cur_img", ",", "ori_img", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "            ", "cur_img", ",", "ori_img", "=", "cur_img", "[", "0", "]", ",", "ori_img", "[", "0", "]", "\n", "\n", "# track_instances = None", "\n", "if", "track_instances", "is", "not", "None", ":", "\n", "                ", "track_instances", ".", "remove", "(", "'boxes'", ")", "\n", "track_instances", ".", "remove", "(", "'labels'", ")", "\n", "", "seq_h", ",", "seq_w", ",", "_", "=", "ori_img", ".", "shape", "\n", "\n", "res", "=", "self", ".", "detr", ".", "inference_single_image", "(", "cur_img", ".", "cuda", "(", ")", ".", "float", "(", ")", ",", "(", "seq_h", ",", "seq_w", ")", ",", "track_instances", ")", "\n", "track_instances", "=", "res", "[", "'track_instances'", "]", "\n", "\n", "all_ref_pts", "=", "tensor_to_numpy", "(", "res", "[", "'ref_pts'", "]", "[", "0", ",", ":", ",", ":", "2", "]", ")", "\n", "dt_instances", "=", "track_instances", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "# filter det instances by score.", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_score", "(", "dt_instances", ",", "prob_threshold", ")", "\n", "dt_instances", "=", "self", ".", "filter_dt_by_area", "(", "dt_instances", ",", "area_threshold", ")", "\n", "\n", "num_occlusion", "=", "(", "dt_instances", ".", "labels", "==", "1", ")", ".", "sum", "(", ")", "\n", "dt_instances", ".", "scores", "[", "dt_instances", ".", "labels", "==", "1", "]", "*=", "-", "1", "\n", "total_dts", "+=", "len", "(", "dt_instances", ")", "\n", "total_occlusion_dts", "+=", "num_occlusion", "\n", "\n", "tracker_outputs", "=", "self", ".", "tr_tracker", ".", "update", "(", "dt_instances", ")", "\n", "\n", "self", ".", "write_results", "(", "txt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "predict_path", ",", "f'{self.seq_num}.txt'", ")", ",", "\n", "frame_id", "=", "(", "i", "+", "1", ")", ",", "\n", "bbox_xyxy", "=", "tracker_outputs", "[", ":", ",", ":", "4", "]", ",", "\n", "identities", "=", "tracker_outputs", "[", ":", ",", "5", "]", ")", "\n", "# filter_pub_det(os.path.join(self.predict_path, f'{self.seq_num}.txt'),", "\n", "#                 f'/data/Dataset/mot/MOT17/images/test/{self.seq_num}/det/det.txt')", "\n", "", "print", "(", "\"totally {} dts {} occlusion dts\"", ".", "format", "(", "total_dts", ",", "total_occlusion_dts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.plot_one_box": [[72, 95], ["cv2.rectangle", "max", "cv2.rectangle", "cv2.putText", "random.randint", "int", "int", "int", "int", "cv2.getTextSize", "cv2.putText", "range"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["def", "plot_one_box", "(", "x", ",", "img", ",", "color", "=", "None", ",", "label", "=", "None", ",", "score", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "# Plots one bounding box on image img", "\n", "\n", "# tl = line_thickness or round(", "\n", "#     0.002 * max(img.shape[0:2])) + 1  # line thickness", "\n", "    ", "tl", "=", "2", "\n", "color", "=", "color", "or", "[", "random", ".", "randint", "(", "0", ",", "255", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "c1", ",", "c2", "=", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ",", "(", "int", "(", "x", "[", "2", "]", ")", ",", "int", "(", "x", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "# font thickness", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "tl", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "\n", "label", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "\n", "0", ",", "\n", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "\n", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "if", "score", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "img", ",", "score", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "+", "30", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_bboxes": [[100, 121], ["enumerate", "cv2.cvtColor", "submit.plot_one_box", "numpy.asarray", "int", "len", "int", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.plot_one_box"], ["def", "draw_bboxes", "(", "ori_img", ",", "bbox", ",", "identities", "=", "None", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "cvt_color", "=", "False", ")", ":", "\n", "    ", "if", "cvt_color", ":", "\n", "        ", "ori_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "asarray", "(", "ori_img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "", "img", "=", "ori_img", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "bbox", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "[", "int", "(", "i", ")", "for", "i", "in", "box", "[", ":", "4", "]", "]", "\n", "x1", "+=", "offset", "[", "0", "]", "\n", "x2", "+=", "offset", "[", "0", "]", "\n", "y1", "+=", "offset", "[", "1", "]", "\n", "y2", "+=", "offset", "[", "1", "]", "\n", "if", "len", "(", "box", ")", ">", "4", ":", "\n", "            ", "score", "=", "'{:.2f}'", ".", "format", "(", "box", "[", "4", "]", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "None", "\n", "# box text and bar", "\n", "", "id", "=", "int", "(", "identities", "[", "i", "]", ")", "if", "identities", "is", "not", "None", "else", "0", "\n", "color", "=", "COLORS_10", "[", "id", "%", "len", "(", "COLORS_10", ")", "]", "\n", "label", "=", "'{:d}'", ".", "format", "(", "id", ")", "\n", "# t_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_PLAIN, 2 , 2)[0]", "\n", "img", "=", "plot_one_box", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "img", ",", "color", ",", "label", ",", "score", "=", "score", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.draw_points": [[123, 130], ["enumerate", "cv2.circle", "len", "int", "int"], "function", ["None"], ["", "def", "draw_points", "(", "img", ":", "np", ".", "ndarray", ",", "points", ":", "np", ".", "ndarray", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "1", "]", "==", "2", ",", "'invalid points shape: {}'", ".", "format", "(", "points", ".", "shape", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "i", ">=", "300", ":", "\n", "            ", "color", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "2", ",", "color", "=", "color", ",", "thickness", "=", "2", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.tensor_to_numpy": [[132, 134], ["tensor.detach().cpu().numpy", "tensor.detach().cpu", "tensor.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "def", "tensor_to_numpy", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "tensor", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.load_label": [[240, 265], ["numpy.loadtxt().reshape", "np.loadtxt().reshape.copy", "len", "set", "numpy.asarray", "numpy.asarray", "numpy.asarray", "set.add", "targets[].append", "targets[].append", "targets[].append", "numpy.loadtxt", "label[].tolist"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "", "def", "load_label", "(", "label_path", ":", "str", ",", "img_size", ":", "tuple", ")", "->", "dict", ":", "\n", "    ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "h", ",", "w", "=", "img_size", "\n", "# Normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "targets", "=", "{", "'boxes'", ":", "[", "]", ",", "'labels'", ":", "[", "]", ",", "'area'", ":", "[", "]", "}", "\n", "num_boxes", "=", "len", "(", "labels", ")", "\n", "\n", "visited_ids", "=", "set", "(", ")", "\n", "for", "label", "in", "labels", "[", ":", "num_boxes", "]", ":", "\n", "        ", "obj_id", "=", "label", "[", "1", "]", "\n", "if", "obj_id", "in", "visited_ids", ":", "\n", "            ", "continue", "\n", "", "visited_ids", ".", "add", "(", "obj_id", ")", "\n", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "", "targets", "[", "'boxes'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'boxes'", "]", ")", "\n", "targets", "[", "'area'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "np", ".", "asarray", "(", "targets", "[", "'labels'", "]", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.None.submit.filter_pub_det": [[267, 331], ["frame_boxes.items", "print", "open", "f.readlines", "numpy.array", "open", "f.readlines", "open", "line.strip().split", "int", "frame_boxes[].append", "line.strip().split", "int", "int", "f.write", "len", "float", "float", "float", "float", "len", "float", "float", "float", "float", "numpy.array", "print", "line.strip", "line.strip", "print", "bbox_iou().max", "print", "center_inside.any", "print", "bbox_iou"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou"], ["", "def", "filter_pub_det", "(", "res_file", ",", "pub_det_file", ",", "filter_iou", "=", "False", ")", ":", "\n", "    ", "frame_boxes", "=", "{", "}", "\n", "with", "open", "(", "pub_det_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", "=", "int", "(", "elements", "[", "0", "]", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                ", "frame_boxes", "[", "frame_id", "]", "=", "[", "]", "\n", "", "frame_boxes", "[", "frame_id", "]", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ")", "\n", "\n", "", "", "for", "frame", ",", "boxes", "in", "frame_boxes", ".", "items", "(", ")", ":", "\n", "        ", "frame_boxes", "[", "frame", "]", "=", "np", ".", "array", "(", "boxes", ")", "\n", "\n", "", "ids", "=", "{", "}", "\n", "num_filter_box", "=", "0", "\n", "with", "open", "(", "res_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "frame_id", ",", "obj_id", "=", "elements", "[", ":", "2", "]", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "obj_id", "=", "int", "(", "obj_id", ")", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "elements", "[", "2", ":", "6", "]", "\n", "x1", ",", "y1", ",", "w", ",", "h", "=", "float", "(", "x1", ")", ",", "float", "(", "y1", ")", ",", "float", "(", "w", ")", ",", "float", "(", "h", ")", "\n", "x2", "=", "x1", "+", "w", "-", "1", "\n", "y2", "=", "y1", "+", "h", "-", "1", "\n", "if", "obj_id", "not", "in", "ids", ":", "\n", "# track initialization.", "\n", "                ", "if", "frame_id", "not", "in", "frame_boxes", ":", "\n", "                    ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "pub_dt_boxes", "=", "frame_boxes", "[", "frame_id", "]", "\n", "dt_box", "=", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "]", ")", "\n", "if", "filter_iou", ":", "\n", "                    ", "max_iou", "=", "bbox_iou", "(", "dt_box", ",", "pub_dt_boxes", ")", ".", "max", "(", ")", "\n", "if", "max_iou", "<", "0.5", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "pub_dt_centers", "=", "(", "pub_dt_boxes", "[", ":", ",", ":", "2", "]", "+", "pub_dt_boxes", "[", ":", ",", "2", ":", "4", "]", ")", "*", "0.5", "\n", "x_inside", "=", "(", "dt_box", "[", "0", ",", "0", "]", "<=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "&", "(", "dt_box", "[", "0", ",", "2", "]", ">=", "pub_dt_centers", "[", ":", ",", "0", "]", ")", "\n", "y_inside", "=", "(", "dt_box", "[", "0", ",", "1", "]", "<=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "&", "(", "dt_box", "[", "0", ",", "3", "]", ">=", "pub_dt_centers", "[", ":", ",", "1", "]", ")", "\n", "center_inside", ":", "np", ".", "ndarray", "=", "x_inside", "&", "y_inside", "\n", "if", "not", "center_inside", ".", "any", "(", ")", ":", "\n", "                        ", "num_filter_box", "+=", "1", "\n", "print", "(", "\"filter init box {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "continue", "\n", "", "", "print", "(", "\"save init track {} {}\"", ".", "format", "(", "frame_id", ",", "obj_id", ")", ")", "\n", "ids", "[", "obj_id", "]", "=", "True", "\n", "", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "print", "(", "\"totally {} boxes are filtered.\"", ".", "format", "(", "num_filter_box", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.__init__": [[32, 74], ["max", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "collections.defaultdict", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "list", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "dance.DetMOTDetection.labels_full.keys", "len", "min", "range", "collections.defaultdict", "print", "map", "map", "[].append", "dance.DetMOTDetection.labels_full[].keys", "max", "dance.DetMOTDetection.indices.append", "l.strip().split", "dance.DetMOTDetection.labels_full[].keys", "l.strip"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_txt_path", ":", "str", ",", "seqs_folder", ",", "dataset2transform", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "dataset2transform", "=", "dataset2transform", "\n", "self", ".", "num_frames_per_batch", "=", "max", "(", "args", ".", "sampler_lengths", ")", "\n", "self", ".", "sample_mode", "=", "args", ".", "sample_mode", "\n", "self", ".", "sample_interval", "=", "args", ".", "sample_interval", "\n", "self", ".", "video_dict", "=", "{", "}", "\n", "self", ".", "split_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "mot_path", ",", "\"DanceTrack\"", ",", "\"train\"", ")", "\n", "\n", "self", ".", "labels_full", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "for", "vid", "in", "os", ".", "listdir", "(", "self", ".", "split_dir", ")", ":", "\n", "            ", "if", "'DPM'", "in", "vid", "or", "'FRCNN'", "in", "vid", ":", "\n", "                ", "print", "(", "f'filter {vid}'", ")", "\n", "continue", "\n", "", "gt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "vid", ",", "'gt'", ",", "'gt.txt'", ")", "\n", "for", "l", "in", "open", "(", "gt_path", ")", ":", "\n", "                ", "t", ",", "i", ",", "*", "xywh", ",", "mark", ",", "label", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "[", ":", "8", "]", "\n", "t", ",", "i", ",", "mark", ",", "label", "=", "map", "(", "int", ",", "(", "t", ",", "i", ",", "mark", ",", "label", ")", ")", "\n", "if", "mark", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "label", "in", "[", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "11", "]", ":", "# Non-person", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "crowd", "=", "False", "\n", "", "x", ",", "y", ",", "w", ",", "h", "=", "map", "(", "float", ",", "(", "xywh", ")", ")", "\n", "self", ".", "labels_full", "[", "vid", "]", "[", "t", "]", ".", "append", "(", "[", "x", ",", "y", ",", "w", ",", "h", ",", "i", ",", "crowd", "]", ")", "\n", "", "", "vid_files", "=", "list", "(", "self", ".", "labels_full", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "indices", "=", "[", "]", "\n", "self", ".", "vid_tmax", "=", "{", "}", "\n", "for", "vid", "in", "vid_files", ":", "\n", "            ", "self", ".", "video_dict", "[", "vid", "]", "=", "len", "(", "self", ".", "video_dict", ")", "\n", "t_min", "=", "min", "(", "self", ".", "labels_full", "[", "vid", "]", ".", "keys", "(", ")", ")", "\n", "t_max", "=", "max", "(", "self", ".", "labels_full", "[", "vid", "]", ".", "keys", "(", ")", ")", "+", "1", "\n", "self", ".", "vid_tmax", "[", "vid", "]", "=", "t_max", "-", "1", "\n", "for", "t", "in", "range", "(", "t_min", ",", "t_max", "-", "self", ".", "num_frames_per_batch", ")", ":", "\n", "                ", "self", ".", "indices", ".", "append", "(", "(", "vid", ",", "t", ")", ")", "\n", "\n", "", "", "self", ".", "sampler_steps", ":", "list", "=", "args", ".", "sampler_steps", "\n", "self", ".", "lengths", ":", "list", "=", "args", ".", "sampler_lengths", "\n", "print", "(", "\"sampler_steps={} lenghts={}\"", ".", "format", "(", "self", ".", "sampler_steps", ",", "self", ".", "lengths", ")", ")", "\n", "self", ".", "period_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.set_epoch": [[75, 86], ["range", "print", "len", "len"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "current_epoch", "=", "epoch", "\n", "if", "self", ".", "sampler_steps", "is", "None", "or", "len", "(", "self", ".", "sampler_steps", ")", "==", "0", ":", "\n", "# fixed sampling length.", "\n", "            ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", ")", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "sampler_steps", "[", "i", "]", ":", "\n", "                ", "self", ".", "period_idx", "=", "i", "+", "1", "\n", "", "", "print", "(", "\"set epoch: epoch {} period_idx={}\"", ".", "format", "(", "epoch", ",", "self", ".", "period_idx", ")", ")", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "self", ".", "period_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.step_epoch": [[87, 91], ["print", "dance.DetMOTDetection.set_epoch"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch"], ["", "def", "step_epoch", "(", "self", ")", ":", "\n", "# one epoch finishes.", "\n", "        ", "print", "(", "\"Dataset: epoch {} finishes\"", ".", "format", "(", "self", ".", "current_epoch", ")", ")", "\n", "self", ".", "set_epoch", "(", "self", ".", "current_epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection._targets_to_instances": [[92, 100], ["models.structures.Instances", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_targets_to_instances", "(", "targets", ":", "dict", ",", "img_shape", ")", "->", "Instances", ":", "\n", "        ", "gt_instances", "=", "Instances", "(", "tuple", "(", "img_shape", ")", ")", "\n", "gt_instances", ".", "boxes", "=", "targets", "[", "'boxes'", "]", "\n", "gt_instances", ".", "labels", "=", "targets", "[", "'labels'", "]", "\n", "gt_instances", ".", "obj_ids", "=", "targets", "[", "'obj_ids'", "]", "\n", "gt_instances", ".", "area", "=", "targets", "[", "'area'", "]", "\n", "return", "gt_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.load_crowd": [[101, 121], ["random.choice", "PIL.Image.open", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "boxes[].prod", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "len", "len"], "methods", ["None"], ["", "def", "load_crowd", "(", "self", ")", ":", "\n", "        ", "path", ",", "boxes", ",", "crowd", "=", "choice", "(", "self", ".", "crowd_gts", ")", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "\n", "w", ",", "h", "=", "img", ".", "_size", "\n", "boxes", "=", "torch", ".", "tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "areas", "=", "boxes", "[", "...", ",", "2", ":", "]", ".", "prod", "(", "-", "1", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "target", "=", "{", "\n", "'boxes'", ":", "boxes", ",", "\n", "'labels'", ":", "torch", ".", "zeros", "(", "(", "len", "(", "boxes", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "'iscrowd'", ":", "torch", ".", "as_tensor", "(", "crowd", ")", ",", "\n", "'image_id'", ":", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "\n", "'area'", ":", "areas", ",", "\n", "'obj_ids'", ":", "torch", ".", "arange", "(", "len", "(", "boxes", ")", ")", ",", "\n", "'size'", ":", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", ",", "\n", "'orig_size'", ":", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", ",", "\n", "'dataset'", ":", "\"CrowdHuman\"", ",", "\n", "}", "\n", "return", "[", "img", "]", ",", "[", "target", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection._pre_single_frame": [[122, 153], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "_pre_single_frame", "(", "self", ",", "vid", ",", "idx", ":", "int", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "split_dir", ",", "vid", ",", "'img1'", ",", "f'{idx:08d}.jpg'", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "targets", "=", "{", "}", "\n", "w", ",", "h", "=", "img", ".", "_size", "\n", "assert", "w", ">", "0", "and", "h", ">", "0", ",", "\"invalid image {} with shape {} {}\"", ".", "format", "(", "img_path", ",", "w", ",", "h", ")", "\n", "obj_idx_offset", "=", "self", ".", "video_dict", "[", "vid", "]", "*", "100000", "# 100000 unique ids is enough for a video.", "\n", "\n", "targets", "[", "'dataset'", "]", "=", "'MOT17'", "\n", "targets", "[", "'boxes'", "]", "=", "[", "]", "\n", "targets", "[", "'area'", "]", "=", "[", "]", "\n", "targets", "[", "'iscrowd'", "]", "=", "[", "]", "\n", "targets", "[", "'labels'", "]", "=", "[", "]", "\n", "targets", "[", "'obj_ids'", "]", "=", "[", "]", "\n", "targets", "[", "'image_id'", "]", "=", "torch", ".", "as_tensor", "(", "idx", ")", "\n", "targets", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "targets", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "for", "*", "xywh", ",", "id", ",", "crowd", "in", "self", ".", "labels_full", "[", "vid", "]", "[", "idx", "]", ":", "\n", "            ", "targets", "[", "'boxes'", "]", ".", "append", "(", "xywh", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "xywh", "[", "2", "]", "*", "xywh", "[", "3", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", ".", "append", "(", "crowd", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "targets", "[", "'obj_ids'", "]", ".", "append", "(", "id", "+", "obj_idx_offset", ")", "\n", "\n", "", "targets", "[", "'area'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'iscrowd'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'labels'", "]", ")", "\n", "targets", "[", "'obj_ids'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'obj_ids'", "]", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "targets", "[", "'boxes'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'boxes'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "targets", "[", "'boxes'", "]", "[", ":", ",", "2", ":", "]", "+=", "targets", "[", "'boxes'", "]", "[", ":", ",", ":", "2", "]", "\n", "return", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection._get_sample_range": [[154, 164], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_get_sample_range", "(", "self", ",", "start_idx", ")", ":", "\n", "\n", "# take default sampling method for normal dataset.", "\n", "        ", "assert", "self", ".", "sample_mode", "in", "[", "'fixed_interval'", ",", "'random_interval'", "]", ",", "'invalid sample mode: {}'", ".", "format", "(", "self", ".", "sample_mode", ")", "\n", "if", "self", ".", "sample_mode", "==", "'fixed_interval'", ":", "\n", "            ", "sample_interval", "=", "self", ".", "sample_interval", "\n", "", "elif", "self", ".", "sample_mode", "==", "'random_interval'", ":", "\n", "            ", "sample_interval", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "sample_interval", "+", "1", ")", "\n", "", "default_range", "=", "start_idx", ",", "start_idx", "+", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "sample_interval", "+", "1", ",", "sample_interval", "\n", "return", "default_range", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.pre_continuous_frames": [[165, 167], ["zip", "dance.DetMOTDetection._pre_single_frame"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._pre_single_frame"], ["", "def", "pre_continuous_frames", "(", "self", ",", "vid", ",", "indices", ")", ":", "\n", "        ", "return", "zip", "(", "*", "[", "self", ".", "_pre_single_frame", "(", "vid", ",", "i", ")", "for", "i", "in", "indices", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.sample_indices": [[168, 174], ["random.randint", "min", "range"], "methods", ["None"], ["", "def", "sample_indices", "(", "self", ",", "vid", ",", "f_index", ")", ":", "\n", "        ", "assert", "self", ".", "sample_mode", "==", "'random_interval'", "\n", "rate", "=", "randint", "(", "1", ",", "self", ".", "sample_interval", "+", "1", ")", "\n", "tmax", "=", "self", ".", "vid_tmax", "[", "vid", "]", "\n", "ids", "=", "[", "f_index", "+", "rate", "*", "i", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_batch", ")", "]", "\n", "return", "[", "min", "(", "i", ",", "tmax", ")", "for", "i", "in", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.__getitem__": [[175, 190], ["dance.DetMOTDetection.sample_indices", "dance.DetMOTDetection.pre_continuous_frames", "zip", "transform", "dance.DetMOTDetection._targets_to_instances", "gt_instances.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.sample_indices", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.pre_continuous_frames", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._targets_to_instances"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "vid", ",", "f_index", "=", "self", ".", "indices", "[", "idx", "]", "\n", "indices", "=", "self", ".", "sample_indices", "(", "vid", ",", "f_index", ")", "\n", "images", ",", "targets", "=", "self", ".", "pre_continuous_frames", "(", "vid", ",", "indices", ")", "\n", "dataset_name", "=", "targets", "[", "0", "]", "[", "'dataset'", "]", "\n", "transform", "=", "self", ".", "dataset2transform", "[", "dataset_name", "]", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "images", ",", "targets", "=", "transform", "(", "images", ",", "targets", ")", "\n", "", "gt_instances", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "images", ",", "targets", ")", ":", "\n", "            ", "gt_instances_i", "=", "self", ".", "_targets_to_instances", "(", "targets_i", ",", "img_i", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "gt_instances", ".", "append", "(", "gt_instances_i", ")", "\n", "", "return", "{", "\n", "'imgs'", ":", "images", ",", "\n", "'gt_instances'", ":", "gt_instances", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetection.__len__": [[192, 194], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.DetMOTDetectionValidation.__init__": [[197, 200], ["dance.DetMOTDetection.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seqs_folder", ",", "dataset2transform", ")", ":", "\n", "        ", "args", ".", "data_txt_path", "=", "args", ".", "val_data_txt_path", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "seqs_folder", ",", "dataset2transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.make_transforms_for_mot17": [[202, 231], ["datasets.MotCompose", "ValueError", "datasets.MotCompose", "datasets.MotCompose", "datasets.MotToTensor", "datasets.MotNormalize", "datasets.MotRandomHorizontalFlip", "datasets.MotRandomSelect", "datasets.MotRandomResize", "datasets.MotRandomResize", "datasets.MotCompose", "datasets.MotRandomResize", "datasets.FixedMotRandomCrop", "datasets.MotRandomResize"], "function", ["None"], ["", "", "def", "make_transforms_for_mot17", "(", "image_set", ",", "args", "=", "None", ")", ":", "\n", "\n", "    ", "normalize", "=", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotToTensor", "(", ")", ",", "\n", "T", ".", "MotNormalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "scales", "=", "[", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ",", "832", ",", "864", ",", "896", ",", "928", ",", "960", ",", "992", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "MotRandomSelect", "(", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", ",", "1000", ",", "1200", "]", ")", ",", "\n", "T", ".", "FixedMotRandomCrop", "(", "800", ",", "1200", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.build_dataset2transform": [[233, 245], ["dance.make_transforms_for_mot17", "dance.make_transforms_for_mot17", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_mot17", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_mot17"], ["", "def", "build_dataset2transform", "(", "args", ",", "image_set", ")", ":", "\n", "    ", "mot17_train", "=", "make_transforms_for_mot17", "(", "'train'", ",", "args", ")", "\n", "mot17_test", "=", "make_transforms_for_mot17", "(", "'val'", ",", "args", ")", "\n", "\n", "dataset2transform_train", "=", "{", "'MOT17'", ":", "mot17_train", "}", "\n", "dataset2transform_val", "=", "{", "'MOT17'", ":", "mot17_test", "}", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "dataset2transform_train", "\n", "", "elif", "image_set", "==", "'val'", ":", "\n", "        ", "return", "dataset2transform_val", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.dance.build": [[247, 258], ["pathlib.Path", "pathlib.Path.exists", "dance.build_dataset2transform", "dance.DetMOTDetection", "dance.DetMOTDetection"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.build_dataset2transform"], ["", "", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "mot_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided MOT path {root} does not exist'", "\n", "dataset2transform", "=", "build_dataset2transform", "(", "args", ",", "image_set", ")", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_train", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "dataset2transform", "=", "dataset2transform", ")", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_val", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "dataset2transform", "=", "dataset2transform", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.__init__": [[33, 45], ["isinstance", "copy.deepcopy", "pycocotools.cocoeval.COCOeval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coco_gt", ",", "iou_types", ")", ":", "\n", "        ", "assert", "isinstance", "(", "iou_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "coco_gt", "=", "copy", ".", "deepcopy", "(", "coco_gt", ")", "\n", "self", ".", "coco_gt", "=", "coco_gt", "\n", "\n", "self", ".", "iou_types", "=", "iou_types", "\n", "self", ".", "coco_eval", "=", "{", "}", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "self", ".", "coco_eval", "[", "iou_type", "]", "=", "COCOeval", "(", "coco_gt", ",", "iouType", "=", "iou_type", ")", "\n", "\n", "", "self", ".", "img_ids", "=", "[", "]", "\n", "self", ".", "eval_imgs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "iou_types", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.update": [[46, 65], ["list", "coco_eval.CocoEvaluator.img_ids.extend", "numpy.unique", "coco_eval.CocoEvaluator.prepare", "list", "coco_eval.evaluate", "coco_eval.CocoEvaluator.eval_imgs[].append", "list", "open", "print", "predictions.keys", "contextlib.redirect_stdout", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.evaluate"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "img_ids", "=", "list", "(", "np", ".", "unique", "(", "list", "(", "predictions", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "img_ids", ".", "extend", "(", "img_ids", ")", "\n", "\n", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "results", "=", "self", ".", "prepare", "(", "predictions", ",", "iou_type", ")", "\n", "\n", "# suppress pycocotools prints", "\n", "with", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "as", "devnull", ":", "\n", "                ", "print", "(", "\"self.coco_gt={}\"", ".", "format", "(", "self", ".", "coco_gt", ")", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "devnull", ")", ":", "\n", "                    ", "coco_dt", "=", "COCO", ".", "loadRes", "(", "self", ".", "coco_gt", ",", "results", ")", "if", "results", "else", "COCO", "(", ")", "\n", "", "", "coco_eval", "=", "self", ".", "coco_eval", "[", "iou_type", "]", "\n", "\n", "coco_eval", ".", "cocoDt", "=", "coco_dt", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "list", "(", "img_ids", ")", "\n", "img_ids", ",", "eval_imgs", "=", "evaluate", "(", "coco_eval", ")", "\n", "\n", "self", ".", "eval_imgs", "[", "iou_type", "]", ".", "append", "(", "eval_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.synchronize_between_processes": [[66, 70], ["numpy.concatenate", "coco_eval.create_common_coco_eval"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.create_common_coco_eval"], ["", "", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "self", ".", "eval_imgs", "[", "iou_type", "]", "=", "np", ".", "concatenate", "(", "self", ".", "eval_imgs", "[", "iou_type", "]", ",", "2", ")", "\n", "create_common_coco_eval", "(", "self", ".", "coco_eval", "[", "iou_type", "]", ",", "self", ".", "img_ids", ",", "self", ".", "eval_imgs", "[", "iou_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.accumulate": [[71, 74], ["coco_eval.CocoEvaluator.coco_eval.values", "coco_eval.accumulate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.accumulate"], ["", "", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "for", "coco_eval", "in", "self", ".", "coco_eval", ".", "values", "(", ")", ":", "\n", "            ", "coco_eval", ".", "accumulate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.summarize": [[75, 79], ["coco_eval.CocoEvaluator.coco_eval.items", "print", "coco_eval.summarize"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.summarize"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", ",", "coco_eval", "in", "self", ".", "coco_eval", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"IoU metric: {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare": [[80, 89], ["coco_eval.CocoEvaluator.prepare_for_coco_detection", "coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "coco_eval.CocoEvaluator.prepare_for_coco_keypoint", "ValueError"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_detection", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_keypoint"], ["", "", "def", "prepare", "(", "self", ",", "predictions", ",", "iou_type", ")", ":", "\n", "        ", "if", "iou_type", "==", "\"bbox\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_detection", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_segmentation", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"keypoints\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_keypoint", "(", "predictions", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown iou type {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_detection": [[90, 113], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "enumerate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.convert_to_xywh"], ["", "", "def", "prepare_for_coco_detection", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_segmentation": [[114, 148], ["predictions.items", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "rle[].decode", "pycocotools.encode", "numpy.array", "enumerate"], "methods", ["None"], ["", "def", "prepare_for_coco_segmentation", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "scores", "=", "prediction", "[", "\"scores\"", "]", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", "\n", "masks", "=", "prediction", "[", "\"masks\"", "]", "\n", "\n", "masks", "=", "masks", ">", "0.5", "\n", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "dtype", "=", "np", ".", "uint8", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "                ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare_for_coco_keypoint": [[149, 174], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "keypoints.flatten().tolist.flatten().tolist.flatten().tolist", "coco_results.extend", "len", "coco_eval.convert_to_xywh", "keypoints.flatten().tolist.flatten().tolist.flatten", "enumerate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.convert_to_xywh"], ["", "def", "prepare_for_coco_keypoint", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "keypoints", "=", "prediction", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "keypoints", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "'keypoints'", ":", "keypoint", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "keypoint", "in", "enumerate", "(", "keypoints", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.convert_to_xywh": [[176, 179], ["boxes.unbind", "torch.stack"], "function", ["None"], ["", "", "def", "convert_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", ".", "unbind", "(", "1", ")", "\n", "return", "torch", ".", "stack", "(", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.merge": [[181, 201], ["util.misc.all_gather", "util.misc.all_gather", "numpy.array", "numpy.concatenate", "numpy.unique", "np.array.extend", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather"], ["", "def", "merge", "(", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "all_img_ids", "=", "all_gather", "(", "img_ids", ")", "\n", "all_eval_imgs", "=", "all_gather", "(", "eval_imgs", ")", "\n", "\n", "merged_img_ids", "=", "[", "]", "\n", "for", "p", "in", "all_img_ids", ":", "\n", "        ", "merged_img_ids", ".", "extend", "(", "p", ")", "\n", "\n", "", "merged_eval_imgs", "=", "[", "]", "\n", "for", "p", "in", "all_eval_imgs", ":", "\n", "        ", "merged_eval_imgs", ".", "append", "(", "p", ")", "\n", "\n", "", "merged_img_ids", "=", "np", ".", "array", "(", "merged_img_ids", ")", "\n", "merged_eval_imgs", "=", "np", ".", "concatenate", "(", "merged_eval_imgs", ",", "2", ")", "\n", "\n", "# keep only unique (and in sorted order) images", "\n", "merged_img_ids", ",", "idx", "=", "np", ".", "unique", "(", "merged_img_ids", ",", "return_index", "=", "True", ")", "\n", "merged_eval_imgs", "=", "merged_eval_imgs", "[", "...", ",", "idx", "]", "\n", "\n", "return", "merged_img_ids", ",", "merged_eval_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.create_common_coco_eval": [[203, 211], ["coco_eval.merge", "list", "list", "copy.deepcopy", "list.flatten"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.merge"], ["", "def", "create_common_coco_eval", "(", "coco_eval", ",", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "img_ids", ",", "eval_imgs", "=", "merge", "(", "img_ids", ",", "eval_imgs", ")", "\n", "img_ids", "=", "list", "(", "img_ids", ")", "\n", "eval_imgs", "=", "list", "(", "eval_imgs", ".", "flatten", "(", ")", ")", "\n", "\n", "coco_eval", ".", "evalImgs", "=", "eval_imgs", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "coco_eval", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "coco_eval", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.evaluate": [[219, 265], ["list", "sorted", "coco_eval.._prepare", "numpy.asarray().reshape", "copy.deepcopy", "print", "numpy.unique", "list", "computeIoU", "evaluateImg", "len", "len", "len", "numpy.unique", "numpy.asarray"], "function", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "    ", "'''\n    Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n    :return: None\n    '''", "\n", "# tic = time.time()", "\n", "# print('Running per image evaluation...')", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "p", ".", "useSegm", "is", "not", "None", ":", "\n", "        ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "# print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "        ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "\n", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "evalImgs", "=", "[", "\n", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "# this is NOT in the pycocotools code, but could be done outside", "\n", "evalImgs", "=", "np", ".", "asarray", "(", "evalImgs", ")", ".", "reshape", "(", "len", "(", "catIds", ")", ",", "len", "(", "p", ".", "areaRng", ")", ",", "len", "(", "p", ".", "imgIds", ")", ")", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "# toc = time.time()", "\n", "# print('DONE (t={:0.2f}s).'.format(toc-tic))", "\n", "return", "p", ".", "imgIds", ",", "evalImgs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.__init__": [[27, 62], ["max", "detmot.DetMOTDetection._register_videos", "print", "open", "file.readlines", "list", "x.replace().replace().replace", "len", "range", "os.join", "filter", "len", "len", "len", "len", "[].strip", "x.replace().replace", "len", "len", "len", "x.replace", "x.split"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._register_videos"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_txt_path", ":", "str", ",", "seqs_folder", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "_transforms", "=", "transforms", "\n", "self", ".", "num_frames_per_batch", "=", "max", "(", "args", ".", "sampler_lengths", ")", "\n", "self", ".", "sample_mode", "=", "args", ".", "sample_mode", "\n", "self", ".", "sample_interval", "=", "args", ".", "sample_interval", "\n", "self", ".", "vis", "=", "args", ".", "vis", "\n", "self", ".", "video_dict", "=", "{", "}", "\n", "\n", "with", "open", "(", "data_txt_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "img_files", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "=", "[", "osp", ".", "join", "(", "seqs_folder", ",", "x", ".", "split", "(", "','", ")", "[", "0", "]", ".", "strip", "(", ")", ")", "for", "x", "in", "self", ".", "img_files", "]", "\n", "self", ".", "img_files", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", ")", ")", "\n", "", "self", ".", "label_files", "=", "[", "(", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", ")", "\n", "for", "x", "in", "self", ".", "img_files", "]", "\n", "# The number of images per sample: 1 + (num_frames - 1) * interval.", "\n", "# The number of valid samples: num_images - num_image_per_sample + 1.", "\n", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "\n", "self", ".", "_register_videos", "(", ")", "\n", "\n", "# video sampler.", "\n", "self", ".", "sampler_steps", ":", "list", "=", "args", ".", "sampler_steps", "\n", "self", ".", "lengths", ":", "list", "=", "args", ".", "sampler_lengths", "\n", "print", "(", "\"sampler_steps={} lenghts={}\"", ".", "format", "(", "self", ".", "sampler_steps", ",", "self", ".", "lengths", ")", ")", "\n", "if", "self", ".", "sampler_steps", "is", "not", "None", "and", "len", "(", "self", ".", "sampler_steps", ")", ">", "0", ":", "\n", "# Enable sampling length adjustment.", "\n", "            ", "assert", "len", "(", "self", ".", "lengths", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "lengths", ")", "==", "len", "(", "self", ".", "sampler_steps", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", "-", "1", ")", ":", "\n", "                ", "assert", "self", ".", "sampler_steps", "[", "i", "]", "<", "self", ".", "sampler_steps", "[", "i", "+", "1", "]", "\n", "", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "lengths", "[", "-", "1", "]", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "self", ".", "period_idx", "=", "0", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "0", "]", "\n", "self", ".", "current_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection._register_videos": [[63, 70], ["print", "len", "label_name.split", "len", "len"], "methods", ["None"], ["", "", "def", "_register_videos", "(", "self", ")", ":", "\n", "        ", "for", "label_name", "in", "self", ".", "label_files", ":", "\n", "            ", "video_name", "=", "'/'", ".", "join", "(", "label_name", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "video_name", "not", "in", "self", ".", "video_dict", ":", "\n", "                ", "print", "(", "\"register {}-th video: {} \"", ".", "format", "(", "len", "(", "self", ".", "video_dict", ")", "+", "1", ",", "video_name", ")", ")", "\n", "self", ".", "video_dict", "[", "video_name", "]", "=", "len", "(", "self", ".", "video_dict", ")", "\n", "assert", "len", "(", "self", ".", "video_dict", ")", "<=", "300", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.set_epoch": [[71, 82], ["range", "print", "len", "len"], "methods", ["None"], ["", "", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "current_epoch", "=", "epoch", "\n", "if", "self", ".", "sampler_steps", "is", "None", "or", "len", "(", "self", ".", "sampler_steps", ")", "==", "0", ":", "\n", "# fixed sampling length.", "\n", "            ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", ")", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "sampler_steps", "[", "i", "]", ":", "\n", "                ", "self", ".", "period_idx", "=", "i", "+", "1", "\n", "", "", "print", "(", "\"set epoch: epoch {} period_idx={}\"", ".", "format", "(", "epoch", ",", "self", ".", "period_idx", ")", ")", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "self", ".", "period_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.step_epoch": [[83, 87], ["print", "detmot.DetMOTDetection.set_epoch"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch"], ["", "def", "step_epoch", "(", "self", ")", ":", "\n", "# one epoch finishes.", "\n", "        ", "print", "(", "\"Dataset: epoch {} finishes\"", ".", "format", "(", "self", ".", "current_epoch", ")", ")", "\n", "self", ".", "set_epoch", "(", "self", ".", "current_epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection._targets_to_instances": [[88, 96], ["models.structures.Instances", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_targets_to_instances", "(", "targets", ":", "dict", ",", "img_shape", ")", "->", "Instances", ":", "\n", "        ", "gt_instances", "=", "Instances", "(", "tuple", "(", "img_shape", ")", ")", "\n", "gt_instances", ".", "boxes", "=", "targets", "[", "'boxes'", "]", "\n", "gt_instances", ".", "labels", "=", "targets", "[", "'labels'", "]", "\n", "gt_instances", ".", "obj_ids", "=", "targets", "[", "'obj_ids'", "]", "\n", "gt_instances", ".", "area", "=", "targets", "[", "'area'", "]", "\n", "return", "gt_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection._pre_single_frame": [[97, 141], ["PIL.Image.open", "os.isfile", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "[].clamp_", "[].clamp_", "numpy.loadtxt().reshape", "numpy.loadtxt().reshape.copy", "ValueError", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "label_path.split", "label[].tolist", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.loadtxt"], "methods", ["None"], ["", "def", "_pre_single_frame", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "img_files", "[", "idx", "]", "\n", "label_path", "=", "self", ".", "label_files", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "targets", "=", "{", "}", "\n", "w", ",", "h", "=", "img", ".", "_size", "\n", "assert", "w", ">", "0", "and", "h", ">", "0", ",", "\"invalid image {} with shape {} {}\"", ".", "format", "(", "img_path", ",", "w", ",", "h", ")", "\n", "if", "osp", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "\n", "# normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid label path: {}'", ".", "format", "(", "label_path", ")", ")", "\n", "", "video_name", "=", "'/'", ".", "join", "(", "label_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "obj_idx_offset", "=", "self", ".", "video_dict", "[", "video_name", "]", "*", "100000", "# 100000 unique ids is enough for a video.", "\n", "targets", "[", "'boxes'", "]", "=", "[", "]", "\n", "targets", "[", "'area'", "]", "=", "[", "]", "\n", "targets", "[", "'iscrowd'", "]", "=", "[", "]", "\n", "targets", "[", "'labels'", "]", "=", "[", "]", "\n", "targets", "[", "'obj_ids'", "]", "=", "[", "]", "\n", "targets", "[", "'image_id'", "]", "=", "torch", ".", "as_tensor", "(", "idx", ")", "\n", "targets", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "targets", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", ".", "append", "(", "0", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "obj_id", "=", "label", "[", "1", "]", "+", "obj_idx_offset", "if", "label", "[", "1", "]", ">=", "0", "else", "label", "[", "1", "]", "\n", "targets", "[", "'obj_ids'", "]", ".", "append", "(", "obj_id", ")", "# relative id", "\n", "\n", "", "targets", "[", "'area'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'iscrowd'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'labels'", "]", ")", "\n", "targets", "[", "'obj_ids'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'obj_ids'", "]", ")", "\n", "targets", "[", "'boxes'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'boxes'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "targets", "[", "'boxes'", "]", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "targets", "[", "'boxes'", "]", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "return", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection._get_sample_range": [[142, 152], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_get_sample_range", "(", "self", ",", "start_idx", ")", ":", "\n", "\n", "# take default sampling method for normal dataset.", "\n", "        ", "assert", "self", ".", "sample_mode", "in", "[", "'fixed_interval'", ",", "'random_interval'", "]", ",", "'invalid sample mode: {}'", ".", "format", "(", "self", ".", "sample_mode", ")", "\n", "if", "self", ".", "sample_mode", "==", "'fixed_interval'", ":", "\n", "            ", "sample_interval", "=", "self", ".", "sample_interval", "\n", "", "elif", "self", ".", "sample_mode", "==", "'random_interval'", ":", "\n", "            ", "sample_interval", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "sample_interval", "+", "1", ")", "\n", "", "default_range", "=", "start_idx", ",", "start_idx", "+", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "sample_interval", "+", "1", ",", "sample_interval", "\n", "return", "default_range", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.pre_continuous_frames": [[153, 161], ["range", "detmot.DetMOTDetection._pre_single_frame", "images.append", "targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._pre_single_frame"], ["", "def", "pre_continuous_frames", "(", "self", ",", "start", ",", "end", ",", "interval", "=", "1", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "start", ",", "end", ",", "interval", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "self", ".", "_pre_single_frame", "(", "i", ")", "\n", "images", ".", "append", "(", "img_i", ")", "\n", "targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "images", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.__getitem__": [[162, 179], ["detmot.DetMOTDetection._get_sample_range", "detmot.DetMOTDetection.pre_continuous_frames", "zip", "data.update", "detmot.DetMOTDetection._transforms", "detmot.DetMOTDetection._targets_to_instances", "gt_instances.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._get_sample_range", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.pre_continuous_frames", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._targets_to_instances"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_start", ",", "sample_end", ",", "sample_interval", "=", "self", ".", "_get_sample_range", "(", "idx", ")", "\n", "images", ",", "targets", "=", "self", ".", "pre_continuous_frames", "(", "sample_start", ",", "sample_end", ",", "sample_interval", ")", "\n", "data", "=", "{", "}", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "images", ",", "targets", "=", "self", ".", "_transforms", "(", "images", ",", "targets", ")", "\n", "", "gt_instances", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "images", ",", "targets", ")", ":", "\n", "            ", "gt_instances_i", "=", "self", ".", "_targets_to_instances", "(", "targets_i", ",", "img_i", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "gt_instances", ".", "append", "(", "gt_instances_i", ")", "\n", "", "data", ".", "update", "(", "{", "\n", "'imgs'", ":", "images", ",", "\n", "'gt_instances'", ":", "gt_instances", ",", "\n", "}", ")", "\n", "if", "self", ".", "args", ".", "vis", ":", "\n", "            ", "data", "[", "'ori_img'", "]", "=", "[", "target_i", "[", "'ori_img'", "]", "for", "target_i", "in", "targets", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetection.__len__": [[180, 182], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "item_num", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.DetMOTDetectionValidation.__init__": [[185, 188], ["detmot.DetMOTDetection.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seqs_folder", ",", "transforms", ")", ":", "\n", "        ", "args", ".", "data_txt_path", "=", "args", ".", "val_data_txt_path", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "seqs_folder", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.make_detmot_transforms": [[190, 215], ["datasets.MotCompose", "ValueError", "datasets.MotCompose", "datasets.MotCompose", "datasets.MotToTensor", "datasets.MotNormalize", "datasets.MotRandomHorizontalFlip", "datasets.MotRandomResize", "datasets.MotRandomResize"], "function", ["None"], ["", "", "def", "make_detmot_transforms", "(", "image_set", ",", "args", "=", "None", ")", ":", "\n", "    ", "normalize", "=", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotToTensor", "(", ")", ",", "\n", "T", ".", "MotNormalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "scales", "=", "[", "480", ",", "512", ",", "544", ",", "576", ",", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "color_transforms", "=", "[", "]", "\n", "scale_transforms", "=", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "\n", "return", "T", ".", "MotCompose", "(", "color_transforms", "+", "scale_transforms", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.detmot.build": [[217, 228], ["pathlib.Path", "pathlib.Path.exists", "detmot.make_detmot_transforms", "detmot.DetMOTDetection", "detmot.DetMOTDetection"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.make_detmot_transforms"], ["", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "mot_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided MOT path {root} does not exist'", "\n", "transforms", "=", "make_detmot_transforms", "(", "image_set", ",", "args", ")", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_train", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "transforms", "=", "transforms", ")", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_val", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "transforms", "=", "transforms", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomCrop.__init__": [[250, 252], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomCrop.__call__": [[253, 256], ["torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomCrop.__call__": [[259, 268], ["torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "zip", "transforms.crop", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ":", "list", ",", "targets", ":", "list", ")", ":", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "imgs", "[", "0", "]", ",", "self", ".", "size", ")", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "crop", "(", "img_i", ",", "targets_i", ",", "region", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.FixedMotRandomCrop.__init__": [[270, 273], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ":", "int", ",", "max_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.FixedMotRandomCrop.__call__": [[274, 285], ["random.randint", "random.randint", "torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "zip", "min", "min", "transforms.crop_mot", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop_mot"], ["", "def", "__call__", "(", "self", ",", "imgs", ":", "list", ",", "targets", ":", "list", ")", ":", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "w", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "imgs", "[", "0", "]", ".", "width", ",", "self", ".", "max_size", ")", ")", "\n", "h", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "imgs", "[", "0", "]", ".", "height", ",", "self", ".", "max_size", ")", ")", "\n", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "imgs", "[", "0", "]", ",", "[", "h", ",", "w", "]", ")", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "crop_mot", "(", "img_i", ",", "targets_i", ",", "region", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomShift.__init__": [[287, 289], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bs", "=", "1", ")", ":", "\n", "        ", "self", ".", "bs", "=", "bs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomShift.__call__": [[290, 311], ["copy.deepcopy", "copy.deepcopy", "len", "random.choice", "max", "min", "max", "min", "transforms.random_shift", "list", "int", "int", "int", "int", "range", "torch.rand", "torch.rand", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.random_shift"], ["", "def", "__call__", "(", "self", ",", "imgs", ":", "list", ",", "targets", ":", "list", ")", ":", "\n", "        ", "ret_imgs", "=", "copy", ".", "deepcopy", "(", "imgs", ")", "\n", "ret_targets", "=", "copy", ".", "deepcopy", "(", "targets", ")", "\n", "\n", "n_frames", "=", "len", "(", "imgs", ")", "\n", "select_i", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "n_frames", ")", ")", ")", "\n", "w", ",", "h", "=", "imgs", "[", "select_i", "]", ".", "size", "\n", "\n", "xshift", "=", "(", "100", "*", "torch", ".", "rand", "(", "self", ".", "bs", ")", ")", ".", "int", "(", ")", "\n", "xshift", "*=", "(", "torch", ".", "randn", "(", "self", ".", "bs", ")", ">", "0.0", ")", ".", "int", "(", ")", "*", "2", "-", "1", "\n", "yshift", "=", "(", "100", "*", "torch", ".", "rand", "(", "self", ".", "bs", ")", ")", ".", "int", "(", ")", "\n", "yshift", "*=", "(", "torch", ".", "randn", "(", "self", ".", "bs", ")", ">", "0.0", ")", ".", "int", "(", ")", "*", "2", "-", "1", "\n", "ymin", "=", "max", "(", "0", ",", "-", "yshift", "[", "0", "]", ")", "\n", "ymax", "=", "min", "(", "h", ",", "h", "-", "yshift", "[", "0", "]", ")", "\n", "xmin", "=", "max", "(", "0", ",", "-", "xshift", "[", "0", "]", ")", "\n", "xmax", "=", "min", "(", "w", ",", "w", "-", "xshift", "[", "0", "]", ")", "\n", "\n", "region", "=", "(", "int", "(", "ymin", ")", ",", "int", "(", "xmin", ")", ",", "int", "(", "ymax", "-", "ymin", ")", ",", "int", "(", "xmax", "-", "xmin", ")", ")", "\n", "ret_imgs", "[", "select_i", "]", ",", "ret_targets", "[", "select_i", "]", "=", "random_shift", "(", "imgs", "[", "select_i", "]", ",", "targets", "[", "select_i", "]", ",", "region", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.FixedMotRandomShift.__init__": [[314, 317], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bs", "=", "1", ",", "padding", "=", "50", ")", ":", "\n", "        ", "self", ".", "bs", "=", "bs", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.FixedMotRandomShift.__call__": [[318, 343], ["len", "ret_imgs.append", "ret_targets.append", "range", "max", "min", "max", "min", "ret_imgs[].copy", "copy.deepcopy", "transforms.random_shift", "ret_imgs.append", "ret_targets.append", "int", "int", "int", "int", "torch.rand", "torch.rand", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.random_shift"], ["", "def", "__call__", "(", "self", ",", "imgs", ":", "list", ",", "targets", ":", "list", ")", ":", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "\n", "n_frames", "=", "len", "(", "imgs", ")", "\n", "w", ",", "h", "=", "imgs", "[", "0", "]", ".", "size", "\n", "xshift", "=", "(", "self", ".", "padding", "*", "torch", ".", "rand", "(", "self", ".", "bs", ")", ")", ".", "int", "(", ")", "+", "1", "\n", "xshift", "*=", "(", "torch", ".", "randn", "(", "self", ".", "bs", ")", ">", "0.0", ")", ".", "int", "(", ")", "*", "2", "-", "1", "\n", "yshift", "=", "(", "self", ".", "padding", "*", "torch", ".", "rand", "(", "self", ".", "bs", ")", ")", ".", "int", "(", ")", "+", "1", "\n", "yshift", "*=", "(", "torch", ".", "randn", "(", "self", ".", "bs", ")", ">", "0.0", ")", ".", "int", "(", ")", "*", "2", "-", "1", "\n", "ret_imgs", ".", "append", "(", "imgs", "[", "0", "]", ")", "\n", "ret_targets", ".", "append", "(", "targets", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n_frames", ")", ":", "\n", "            ", "ymin", "=", "max", "(", "0", ",", "-", "yshift", "[", "0", "]", ")", "\n", "ymax", "=", "min", "(", "h", ",", "h", "-", "yshift", "[", "0", "]", ")", "\n", "xmin", "=", "max", "(", "0", ",", "-", "xshift", "[", "0", "]", ")", "\n", "xmax", "=", "min", "(", "w", ",", "w", "-", "xshift", "[", "0", "]", ")", "\n", "prev_img", "=", "ret_imgs", "[", "i", "-", "1", "]", ".", "copy", "(", ")", "\n", "prev_target", "=", "copy", ".", "deepcopy", "(", "ret_targets", "[", "i", "-", "1", "]", ")", "\n", "region", "=", "(", "int", "(", "ymin", ")", ",", "int", "(", "xmin", ")", ",", "int", "(", "ymax", "-", "ymin", ")", ",", "int", "(", "xmax", "-", "xmin", ")", ")", "\n", "img_i", ",", "target_i", "=", "random_shift", "(", "prev_img", ",", "prev_target", ",", "region", ",", "(", "h", ",", "w", ")", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "target_i", ")", "\n", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomSizeCrop.__init__": [[346, 349], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ":", "int", ",", "max_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomSizeCrop.__call__": [[350, 355], ["random.randint", "random.randint", "torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "transforms.crop", "min", "min"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ":", "PIL", ".", "Image", ".", "Image", ",", "target", ":", "dict", ")", ":", "\n", "        ", "w", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "img", ".", "width", ",", "self", ".", "max_size", ")", ")", "\n", "h", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "img", ".", "height", ",", "self", ".", "max_size", ")", ")", "\n", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "img", ",", "[", "h", ",", "w", "]", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomSizeCrop.__call__": [[358, 369], ["random.randint", "random.randint", "torchvision.RandomCrop.get_params", "torchvision.RandomCrop.get_params", "zip", "min", "min", "transforms.crop", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "w", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "imgs", "[", "0", "]", ".", "width", ",", "self", ".", "max_size", ")", ")", "\n", "h", "=", "random", ".", "randint", "(", "self", ".", "min_size", ",", "min", "(", "imgs", "[", "0", "]", ".", "height", ",", "self", ".", "max_size", ")", ")", "\n", "region", "=", "T", ".", "RandomCrop", ".", "get_params", "(", "imgs", "[", "0", "]", ",", "[", "h", ",", "w", "]", ")", "\n", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "crop", "(", "img_i", ",", "targets_i", ",", "region", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.CenterCrop.__init__": [[372, 374], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.CenterCrop.__call__": [[375, 381], ["int", "int", "transforms.crop", "round", "round"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "crop_height", ",", "crop_width", "=", "self", ".", "size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "return", "crop", "(", "img", ",", "target", ",", "(", "crop_top", ",", "crop_left", ",", "crop_height", ",", "crop_width", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotCenterCrop.__call__": [[384, 396], ["int", "int", "zip", "round", "round", "transforms.crop", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "imgs", "[", "0", "]", ".", "size", "\n", "crop_height", ",", "crop_width", "=", "self", ".", "size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "crop", "(", "img_i", ",", "targets_i", ",", "(", "crop_top", ",", "crop_left", ",", "crop_height", ",", "crop_width", ")", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomHorizontalFlip.__init__": [[399, 401], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomHorizontalFlip.__call__": [[402, 406], ["random.random", "transforms.hflip"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.hflip"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "hflip", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomHorizontalFlip.__call__": [[409, 419], ["random.random", "zip", "transforms.hflip", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.hflip"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "                ", "img_i", ",", "targets_i", "=", "hflip", "(", "img_i", ",", "targets_i", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "", "return", "imgs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomResize.__init__": [[422, 426], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sizes", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sizes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomResize.__call__": [[427, 430], ["random.choice", "transforms.resize"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", "=", "None", ")", ":", "\n", "        ", "size", "=", "random", ".", "choice", "(", "self", ".", "sizes", ")", "\n", "return", "resize", "(", "img", ",", "target", ",", "size", ",", "self", ".", "max_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomResize.__call__": [[433, 442], ["random.choice", "zip", "transforms.resize", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "size", "=", "random", ".", "choice", "(", "self", ".", "sizes", ")", "\n", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "resize", "(", "img_i", ",", "targets_i", ",", "size", ",", "self", ".", "max_size", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomPad.__init__": [[445, 447], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_pad", ")", ":", "\n", "        ", "self", ".", "max_pad", "=", "max_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomPad.__call__": [[448, 452], ["random.randint", "random.randint", "transforms.pad"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "pad_x", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "pad_y", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "return", "pad", "(", "img", ",", "target", ",", "(", "pad_x", ",", "pad_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomPad.__call__": [[455, 465], ["random.randint", "random.randint", "zip", "transforms.pad", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.pad"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "pad_x", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "pad_y", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "max_pad", ")", "\n", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "img_i", ",", "target_i", "=", "pad", "(", "img_i", ",", "targets_i", ",", "(", "pad_x", ",", "pad_y", ")", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomSelect.__init__": [[472, 476], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms1", ",", "transforms2", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "transforms1", "=", "transforms1", "\n", "self", ".", "transforms2", "=", "transforms2", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomSelect.__call__": [[477, 481], ["transforms.RandomSelect.transforms2", "random.random", "transforms.RandomSelect.transforms1"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "self", ".", "transforms1", "(", "img", ",", "target", ")", "\n", "", "return", "self", ".", "transforms2", "(", "img", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomSelect.__call__": [[488, 492], ["transforms.MotRandomSelect.transforms2", "random.random", "transforms.MotRandomSelect.transforms1"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "self", ".", "transforms1", "(", "imgs", ",", "targets", ")", "\n", "", "return", "self", ".", "transforms2", "(", "imgs", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.ToTensor.__call__": [[495, 497], ["torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotToTensor.__call__": [[500, 505], ["ret_imgs.append", "torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "ret_imgs", ".", "append", "(", "F", ".", "to_tensor", "(", "img", ")", ")", "\n", "", "return", "ret_imgs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomErasing.__init__": [[509, 511], ["torchvision.RandomErasing", "torchvision.RandomErasing"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "eraser", "=", "T", ".", "RandomErasing", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.RandomErasing.__call__": [[512, 514], ["transforms.RandomErasing.eraser"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "eraser", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotRandomErasing.__call__": [[517, 523], ["zip", "ret_imgs.append", "transforms.MotRandomErasing.eraser"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "# TODO: Rewrite this part to ensure the data augmentation is same to each image.", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "ret_imgs", ".", "append", "(", "self", ".", "eraser", "(", "img_i", ")", ")", "\n", "", "return", "ret_imgs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MoTColorJitter.__call__": [[526, 533], ["transforms.MoTColorJitter.get_params", "zip", "ret_imgs.append", "transforms.MoTColorJitter."], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "ret_imgs", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "imgs", ",", "targets", ")", ":", "\n", "            ", "ret_imgs", ".", "append", "(", "transform", "(", "img_i", ")", ")", "\n", "", "return", "ret_imgs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.Normalize.__init__": [[536, 539], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.Normalize.__call__": [[540, 554], ["torchvision.normalize", "torchvision.normalize", "target.copy.copy.copy", "torchvision.normalize.clone", "util.box_ops.box_xyxy_to_cxcywh", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_xyxy_to_cxcywh"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "[", "'ori_img'", "]", "=", "image", ".", "clone", "(", ")", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", ",", "None", "\n", "", "target", "=", "target", ".", "copy", "(", ")", "\n", "h", ",", "w", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "boxes", "=", "box_xyxy_to_cxcywh", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "/", "torch", ".", "tensor", "(", "[", "w", ",", "h", ",", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotNormalize.__call__": [[557, 567], ["range", "len", "transforms.Normalize.__call__", "ret_imgs.append", "ret_targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.ConvertCocoPolysToMask.__call__"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", "=", "None", ")", ":", "\n", "        ", "ret_imgs", "=", "[", "]", "\n", "ret_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "img_i", "=", "imgs", "[", "i", "]", "\n", "targets_i", "=", "targets", "[", "i", "]", "if", "targets", "is", "not", "None", "else", "None", "\n", "img_i", ",", "targets_i", "=", "super", "(", ")", ".", "__call__", "(", "img_i", ",", "targets_i", ")", "\n", "ret_imgs", ".", "append", "(", "img_i", ")", "\n", "ret_targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "ret_imgs", ",", "ret_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.Compose.__init__": [[570, 572], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.Compose.__call__": [[573, 577], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.Compose.__repr__": [[578, 585], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.MotCompose.__call__": [[588, 592], ["t"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "imgs", ",", "targets", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "imgs", ",", "targets", "=", "t", "(", "imgs", ",", "targets", ")", "\n", "", "return", "imgs", ",", "targets", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop_mot": [[28, 67], ["torchvision.crop", "target.copy.copy", "torch.tensor", "cropped_boxes.clamp.reshape", "fields.append", "fields.append", "torch.as_tensor", "target[].reshape", "torch.as_tensor", "torch.min", "cropped_boxes.clamp.clamp", "torch.all", "target[].flatten().any", "cropped_boxes.clamp.reshape", "target[].flatten"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["def", "crop_mot", "(", "image", ",", "target", ",", "region", ")", ":", "\n", "    ", "cropped_image", "=", "F", ".", "crop", "(", "image", ",", "*", "region", ")", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "region", "\n", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "fields", "=", "[", "\"labels\"", ",", "\"area\"", ",", "\"iscrowd\"", ",", "\"obj_ids\"", "]", "\n", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "cropped_boxes", "=", "boxes", "-", "torch", ".", "as_tensor", "(", "[", "j", ",", "i", ",", "j", ",", "i", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "fields", ".", "append", "(", "\"boxes\"", ")", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "# FIXME should we update the area here if there are no boxes?", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "fields", ".", "append", "(", "\"masks\"", ")", "\n", "\n", "# remove elements for which the boxes or masks that have zero area", "\n", "", "if", "\"boxes\"", "in", "target", "or", "\"masks\"", "in", "target", ":", "\n", "# favor boxes selection when defining which elements to keep", "\n", "# this is compatible with previous implementation", "\n", "        ", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "cropped_boxes", "=", "target", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", "\n", "max_size", "=", "torch", ".", "as_tensor", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "cropped_boxes", "=", "torch", ".", "min", "(", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", ",", "max_size", ")", "\n", "cropped_boxes", "=", "cropped_boxes", ".", "clamp", "(", "min", "=", "0", ")", "\n", "keep", "=", "torch", ".", "all", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", ">", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "keep", "=", "target", "[", "'masks'", "]", ".", "flatten", "(", "1", ")", ".", "any", "(", "1", ")", "\n", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "target", "[", "field", "]", "=", "target", "[", "field", "]", "[", "keep", "]", "\n", "\n", "", "", "return", "cropped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.random_shift": [[69, 112], ["torchvision.crop", "torchvision.resize", "target.copy.copy", "torch.tensor", "torch.as_tensor", "cropped_boxes.clamp.reshape", "fields.append", "fields.append", "torch.as_tensor", "target[].reshape", "torch.as_tensor", "torch.min", "cropped_boxes.clamp.clamp", "torch.all", "target[].flatten().any", "cropped_boxes.clamp.reshape", "target[].flatten"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize"], ["", "def", "random_shift", "(", "image", ",", "target", ",", "region", ",", "sizes", ")", ":", "\n", "    ", "oh", ",", "ow", "=", "sizes", "\n", "# step 1, shift crop and re-scale image firstly", "\n", "cropped_image", "=", "F", ".", "crop", "(", "image", ",", "*", "region", ")", "\n", "cropped_image", "=", "F", ".", "resize", "(", "cropped_image", ",", "sizes", ")", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "region", "\n", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "fields", "=", "[", "\"labels\"", ",", "\"area\"", ",", "\"iscrowd\"", ",", "\"obj_ids\"", "]", "\n", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "cropped_boxes", "=", "boxes", "-", "torch", ".", "as_tensor", "(", "[", "j", ",", "i", ",", "j", ",", "i", "]", ")", "\n", "cropped_boxes", "*=", "torch", ".", "as_tensor", "(", "[", "ow", "/", "w", ",", "oh", "/", "h", ",", "ow", "/", "w", ",", "oh", "/", "h", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "fields", ".", "append", "(", "\"boxes\"", ")", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "# FIXME should we update the area here if there are no boxes?", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "fields", ".", "append", "(", "\"masks\"", ")", "\n", "\n", "# remove elements for which the boxes or masks that have zero area", "\n", "", "if", "\"boxes\"", "in", "target", "or", "\"masks\"", "in", "target", ":", "\n", "# favor boxes selection when defining which elements to keep", "\n", "# this is compatible with previous implementation", "\n", "        ", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "cropped_boxes", "=", "target", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", "\n", "max_size", "=", "torch", ".", "as_tensor", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "cropped_boxes", "=", "torch", ".", "min", "(", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", ",", "max_size", ")", "\n", "cropped_boxes", "=", "cropped_boxes", ".", "clamp", "(", "min", "=", "0", ")", "\n", "keep", "=", "torch", ".", "all", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", ">", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "keep", "=", "target", "[", "'masks'", "]", ".", "flatten", "(", "1", ")", ".", "any", "(", "1", ")", "\n", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "target", "[", "field", "]", "=", "target", "[", "field", "]", "[", "keep", "]", "\n", "\n", "", "", "return", "cropped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop": [[114, 158], ["torchvision.crop", "target.copy.copy", "torch.tensor", "fields.append", "torch.as_tensor", "torch.min", "target[].reshape.clamp", "target[].reshape.reshape", "fields.append", "fields.append", "torch.as_tensor", "target[].reshape.reshape", "target[].reshape", "torch.all", "target[].flatten().any", "target[].flatten"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.crop"], ["", "def", "crop", "(", "image", ",", "target", ",", "region", ")", ":", "\n", "    ", "cropped_image", "=", "F", ".", "crop", "(", "image", ",", "*", "region", ")", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "region", "\n", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "fields", "=", "[", "\"labels\"", ",", "\"area\"", ",", "\"iscrowd\"", "]", "\n", "if", "'obj_ids'", "in", "target", ":", "\n", "        ", "fields", ".", "append", "(", "'obj_ids'", ")", "\n", "\n", "", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "max_size", "=", "torch", ".", "as_tensor", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "cropped_boxes", "=", "boxes", "-", "torch", ".", "as_tensor", "(", "[", "j", ",", "i", ",", "j", ",", "i", "]", ")", "\n", "cropped_boxes", "=", "torch", ".", "min", "(", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", ",", "max_size", ")", "\n", "cropped_boxes", "=", "cropped_boxes", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "area", "=", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", "-", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ")", ".", "prod", "(", "dim", "=", "1", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "cropped_boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "target", "[", "\"area\"", "]", "=", "area", "\n", "fields", ".", "append", "(", "\"boxes\"", ")", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "# FIXME should we update the area here if there are no boxes?", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", "[", ":", ",", "i", ":", "i", "+", "h", ",", "j", ":", "j", "+", "w", "]", "\n", "fields", ".", "append", "(", "\"masks\"", ")", "\n", "\n", "# remove elements for which the boxes or masks that have zero area", "\n", "", "if", "\"boxes\"", "in", "target", "or", "\"masks\"", "in", "target", ":", "\n", "# favor boxes selection when defining which elements to keep", "\n", "# this is compatible with previous implementation", "\n", "        ", "if", "\"boxes\"", "in", "target", ":", "\n", "            ", "cropped_boxes", "=", "target", "[", "'boxes'", "]", ".", "reshape", "(", "-", "1", ",", "2", ",", "2", ")", "\n", "keep", "=", "torch", ".", "all", "(", "cropped_boxes", "[", ":", ",", "1", ",", ":", "]", ">", "cropped_boxes", "[", ":", ",", "0", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "keep", "=", "target", "[", "'masks'", "]", ".", "flatten", "(", "1", ")", ".", "any", "(", "1", ")", "\n", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "target", "[", "field", "]", "=", "target", "[", "field", "]", "[", "keep", "]", "\n", "\n", "", "", "return", "cropped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.hflip": [[160, 175], ["torchvision.hflip", "target.copy.copy", "target[].flip", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.hflip"], ["", "def", "hflip", "(", "image", ",", "target", ")", ":", "\n", "    ", "flipped_image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "boxes", "=", "boxes", "[", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "*", "torch", ".", "as_tensor", "(", "[", "-", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "+", "torch", ".", "as_tensor", "(", "[", "w", ",", "0", ",", "w", ",", "0", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "\n", "", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", ".", "flip", "(", "-", "1", ")", "\n", "\n", "", "return", "flipped_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.resize": [[177, 234], ["transforms.resize.get_size"], "function", ["None"], ["", "def", "resize", "(", "image", ",", "target", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "# size can be min_size (scalar) or (w, h) tuple", "\n", "\n", "    ", "def", "get_size_with_aspect_ratio", "(", "image_size", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n", "", "def", "get_size", "(", "image_size", ",", "size", ",", "max_size", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "size", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "get_size_with_aspect_ratio", "(", "image_size", ",", "size", ",", "max_size", ")", "\n", "\n", "", "", "size", "=", "get_size", "(", "image", ".", "size", ",", "size", ",", "max_size", ")", "\n", "rescaled_image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "rescaled_image", ",", "None", "\n", "\n", "", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "rescaled_image", ".", "size", ",", "image", ".", "size", ")", ")", "\n", "ratio_width", ",", "ratio_height", "=", "ratios", "\n", "\n", "target", "=", "target", ".", "copy", "(", ")", "\n", "if", "\"boxes\"", "in", "target", ":", "\n", "        ", "boxes", "=", "target", "[", "\"boxes\"", "]", "\n", "scaled_boxes", "=", "boxes", "*", "torch", ".", "as_tensor", "(", "[", "ratio_width", ",", "ratio_height", ",", "ratio_width", ",", "ratio_height", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "scaled_boxes", "\n", "\n", "", "if", "\"area\"", "in", "target", ":", "\n", "        ", "area", "=", "target", "[", "\"area\"", "]", "\n", "scaled_area", "=", "area", "*", "(", "ratio_width", "*", "ratio_height", ")", "\n", "target", "[", "\"area\"", "]", "=", "scaled_area", "\n", "\n", "", "h", ",", "w", "=", "size", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "interpolate", "(", "\n", "target", "[", "'masks'", "]", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "size", ",", "mode", "=", "\"nearest\"", ")", "[", ":", ",", "0", "]", ">", "0.5", "\n", "\n", "", "return", "rescaled_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.pad": [[236, 247], ["torchvision.pad", "target.copy.copy", "torch.tensor", "torch.nn.functional.pad"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.pad", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.transforms.pad"], ["", "def", "pad", "(", "image", ",", "target", ",", "padding", ")", ":", "\n", "# assumes that we only pad on the bottom right corners", "\n", "    ", "padded_image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "0", ",", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ")", ")", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "padded_image", ",", "None", "\n", "", "target", "=", "target", ".", "copy", "(", ")", "\n", "# should we do something wrt the original size?", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "tensor", "(", "padded_image", "[", ":", ":", "-", "1", "]", ")", "\n", "if", "\"masks\"", "in", "target", ":", "\n", "        ", "target", "[", "'masks'", "]", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "target", "[", "'masks'", "]", ",", "(", "0", ",", "padding", "[", "0", "]", ",", "0", ",", "padding", "[", "1", "]", ")", ")", "\n", "", "return", "padded_image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.CocoDetection.__init__": [[29, 34], ["torchvision_datasets.CocoDetection.__init__", "coco.ConvertCocoPolysToMask"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_file", ",", "transforms", ",", "return_masks", ",", "cache_mode", "=", "False", ",", "local_rank", "=", "0", ",", "local_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "CocoDetection", ",", "self", ")", ".", "__init__", "(", "img_folder", ",", "ann_file", ",", "\n", "cache_mode", "=", "cache_mode", ",", "local_rank", "=", "local_rank", ",", "local_size", "=", "local_size", ")", "\n", "self", ".", "_transforms", "=", "transforms", "\n", "self", ".", "prepare", "=", "ConvertCocoPolysToMask", "(", "return_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.CocoDetection.__getitem__": [[35, 43], ["torchvision_datasets.CocoDetection.__getitem__", "coco.CocoDetection.prepare", "coco.CocoDetection._transforms"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__getitem__", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_eval.CocoEvaluator.prepare"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "target", "=", "super", "(", "CocoDetection", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "image_id", "=", "self", ".", "ids", "[", "idx", "]", "\n", "target", "=", "{", "'image_id'", ":", "image_id", ",", "'annotations'", ":", "target", "}", "\n", "img", ",", "target", "=", "self", ".", "prepare", "(", "img", ",", "target", ")", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.ConvertCocoPolysToMask.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "return_masks", "=", "False", ")", ":", "\n", "        ", "self", ".", "return_masks", "=", "return_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.ConvertCocoPolysToMask.__call__": [[66, 125], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "boxes[].clamp_", "boxes[].clamp_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "coco.convert_coco_poly_to_mask", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "keypoints.view.view.view", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.convert_coco_poly_to_mask"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "image_id", "=", "target", "[", "\"image_id\"", "]", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "image_id", "]", ")", "\n", "\n", "anno", "=", "target", "[", "\"annotations\"", "]", "\n", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "'iscrowd'", "not", "in", "obj", "or", "obj", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "# guard against no boxes via resizing", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "boxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "segmentations", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "convert_coco_poly_to_mask", "(", "segmentations", ",", "h", ",", "w", ")", "\n", "\n", "", "keypoints", "=", "None", "\n", "if", "anno", "and", "\"keypoints\"", "in", "anno", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "[", "obj", "[", "\"keypoints\"", "]", "for", "obj", "in", "anno", "]", "\n", "keypoints", "=", "torch", ".", "as_tensor", "(", "keypoints", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "num_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "if", "num_keypoints", ":", "\n", "                ", "keypoints", "=", "keypoints", ".", "view", "(", "num_keypoints", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "", "keep", "=", "(", "boxes", "[", ":", ",", "3", "]", ">", "boxes", "[", ":", ",", "1", "]", ")", "&", "(", "boxes", "[", ":", ",", "2", "]", ">", "boxes", "[", ":", ",", "0", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", "]", "\n", "classes", "=", "classes", "[", "keep", "]", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "masks", "=", "masks", "[", "keep", "]", "\n", "", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "keypoints", "=", "keypoints", "[", "keep", "]", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "\"boxes\"", "]", "=", "boxes", "\n", "target", "[", "\"labels\"", "]", "=", "classes", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "target", "[", "\"masks\"", "]", "=", "masks", "\n", "", "target", "[", "\"image_id\"", "]", "=", "image_id", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "target", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "\n", "# for conversion to coco api", "\n", "", "area", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "]", ")", "\n", "iscrowd", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "\"iscrowd\"", "]", "if", "\"iscrowd\"", "in", "obj", "else", "0", "for", "obj", "in", "anno", "]", ")", "\n", "target", "[", "\"area\"", "]", "=", "area", "[", "keep", "]", "\n", "target", "[", "\"iscrowd\"", "]", "=", "iscrowd", "[", "keep", "]", "\n", "\n", "target", "[", "\"orig_size\"", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "target", "[", "\"size\"", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.convert_coco_poly_to_mask": [[45, 60], ["pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "torch.as_tensor", "torch.as_tensor", "mask.any.any", "torch.zeros.append", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "len"], "function", ["None"], ["", "", "def", "convert_coco_poly_to_mask", "(", "segmentations", ",", "height", ",", "width", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "polygons", "in", "segmentations", ":", "\n", "        ", "rles", "=", "coco_mask", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "coco_mask", ".", "decode", "(", "rles", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "<", "3", ":", "\n", "            ", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "", "mask", "=", "torch", ".", "as_tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask", "=", "mask", ".", "any", "(", "dim", "=", "2", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "if", "masks", ":", "\n", "        ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "masks", "=", "torch", ".", "zeros", "(", "(", "0", ",", "height", ",", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.make_coco_transforms": [[127, 157], ["datasets.Compose", "ValueError", "datasets.Compose", "datasets.Compose", "datasets.ToTensor", "datasets.Normalize", "datasets.RandomHorizontalFlip", "datasets.RandomSelect", "datasets.RandomResize", "datasets.RandomResize", "datasets.Compose", "datasets.RandomResize", "datasets.RandomSizeCrop", "datasets.RandomResize"], "function", ["None"], ["", "", "def", "make_coco_transforms", "(", "image_set", ")", ":", "\n", "\n", "    ", "normalize", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "scales", "=", "[", "480", ",", "512", ",", "544", ",", "576", ",", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "RandomSelect", "(", "\n", "T", ".", "RandomResize", "(", "scales", ",", "max_size", "=", "1333", ")", ",", "\n", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResize", "(", "[", "400", ",", "500", ",", "600", "]", ")", ",", "\n", "T", ".", "RandomSizeCrop", "(", "384", ",", "600", ")", ",", "\n", "T", ".", "RandomResize", "(", "scales", ",", "max_size", "=", "1333", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "Compose", "(", "[", "\n", "T", ".", "RandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.build": [[159, 172], ["pathlib.Path", "pathlib.Path.exists", "coco.CocoDetection", "coco.make_coco_transforms", "util.misc.get_local_rank", "util.misc.get_local_size"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.make_coco_transforms", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_local_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_local_size"], ["", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "coco_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided COCO path {root} does not exist'", "\n", "mode", "=", "'instances'", "\n", "PATHS", "=", "{", "\n", "\"train\"", ":", "(", "root", "/", "\"train2017\"", ",", "root", "/", "\"annotations\"", "/", "f'{mode}_train2017.json'", ")", ",", "\n", "\"val\"", ":", "(", "root", "/", "\"val2017\"", ",", "root", "/", "\"annotations\"", "/", "f'{mode}_val2017.json'", ")", ",", "\n", "}", "\n", "\n", "img_folder", ",", "ann_file", "=", "PATHS", "[", "image_set", "]", "\n", "dataset", "=", "CocoDetection", "(", "img_folder", ",", "ann_file", ",", "transforms", "=", "make_coco_transforms", "(", "image_set", ")", ",", "return_masks", "=", "args", ".", "masks", ",", "\n", "cache_mode", "=", "args", ".", "cache_mode", ",", "local_rank", "=", "get_local_rank", "(", ")", ",", "local_size", "=", "get_local_size", "(", ")", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.__init__": [[24, 32], ["util.is_main_process", "os.path.exists", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "ann_folder", ",", "output_dir", "=", "\"panoptic_eval\"", ")", ":", "\n", "        ", "self", ".", "gt_json", "=", "ann_file", "\n", "self", ".", "gt_folder", "=", "ann_folder", "\n", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "predictions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.update": [[33, 39], ["open", "f.write", "os.path.join", "p.pop"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "for", "p", "in", "predictions", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "p", "[", "\"file_name\"", "]", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "p", ".", "pop", "(", "\"png_string\"", ")", ")", "\n", "\n", "", "", "self", ".", "predictions", "+=", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.synchronize_between_processes": [[40, 46], ["util.all_gather"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "all_predictions", "=", "utils", ".", "all_gather", "(", "self", ".", "predictions", ")", "\n", "merged_predictions", "=", "[", "]", "\n", "for", "p", "in", "all_predictions", ":", "\n", "            ", "merged_predictions", "+=", "p", "\n", "", "self", ".", "predictions", "=", "merged_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.panoptic_eval.PanopticEvaluator.summarize": [[47, 55], ["util.is_main_process", "os.path.join", "pq_compute", "open", "f.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process"], ["", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "if", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "json_data", "=", "{", "\"annotations\"", ":", "self", ".", "predictions", "}", "\n", "predictions_json", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\"predictions.json\"", ")", "\n", "with", "open", "(", "predictions_json", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "json_data", ")", ")", "\n", "", "return", "pq_compute", "(", "self", ".", "gt_json", ",", "predictions_json", ",", "gt_folder", "=", "self", ".", "gt_folder", ",", "pred_folder", "=", "self", ".", "output_dir", ")", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.DistributedSampler.__init__": [[34, 50], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "local_rank", "=", "None", ",", "local_size", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.DistributedSampler.__iter__": [[51, 70], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.DistributedSampler.__len__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.DistributedSampler.set_epoch": [[74, 76], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.NodeDistributedSampler.__init__": [[93, 117], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "int", "int", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "os.environ.get", "os.environ.get", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "local_rank", "=", "None", ",", "local_size", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "if", "local_rank", "is", "None", ":", "\n", "            ", "local_rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'LOCAL_RANK'", ",", "0", ")", ")", "\n", "", "if", "local_size", "is", "None", ":", "\n", "            ", "local_size", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'LOCAL_SIZE'", ",", "1", ")", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "num_parts", "=", "local_size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n", "self", ".", "total_size_parts", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "//", "self", ".", "num_parts", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.NodeDistributedSampler.__iter__": [[118, 137], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "", "indices", "=", "[", "i", "for", "i", "in", "indices", "if", "i", "%", "self", ".", "num_parts", "==", "self", ".", "local_rank", "]", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size_parts", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size_parts", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", "//", "self", ".", "num_parts", ":", "self", ".", "total_size_parts", ":", "self", ".", "num_replicas", "//", "self", ".", "num_parts", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.NodeDistributedSampler.__len__": [[138, 140], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.samplers.NodeDistributedSampler.set_epoch": [[141, 143], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.__init__": [[57, 64], ["iter", "torch.cuda.Stream", "data_prefetcher.data_prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ",", "device", ",", "prefetch", "=", "True", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "loader", ")", "\n", "self", ".", "prefetch", "=", "prefetch", "\n", "self", ".", "device", "=", "device", "\n", "if", "prefetch", ":", "\n", "            ", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.preload": [[65, 81], ["data_prefetcher.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next"], ["", "", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_samples", ",", "self", ".", "next_targets", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_samples", "=", "None", "\n", "self", ".", "next_targets", "=", "None", "\n", "return", "\n", "# if record_stream() doesn't work, another option is to make sure device inputs are created", "\n", "# on the main stream.", "\n", "# self.next_input_gpu = torch.empty_like(self.next_input, device='cuda')", "\n", "# self.next_target_gpu = torch.empty_like(self.next_target, device='cuda')", "\n", "# Need to make sure the memory allocated for next_* is not still in use by the main stream", "\n", "# at the time we start copying to next_*:", "\n", "# self.stream.wait_stream(torch.cuda.current_stream())", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_samples", ",", "self", ".", "next_targets", "=", "to_cuda", "(", "self", ".", "next_samples", ",", "self", ".", "next_targets", ",", "self", ".", "device", ")", "\n", "# more code for the alternative if record_stream() doesn't work:", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next": [[93, 115], ["torch.cuda.current_stream().wait_stream", "data_prefetcher.data_prefetcher.preload", "samples.record_stream", "data_prefetcher.data_prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.preload", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.record_stream", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "prefetch", ":", "\n", "            ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "samples", "=", "self", ".", "next_samples", "\n", "targets", "=", "self", ".", "next_targets", "\n", "if", "samples", "is", "not", "None", ":", "\n", "                ", "samples", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "if", "targets", "is", "not", "None", ":", "\n", "                ", "for", "t", "in", "targets", ":", "\n", "                    ", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", ":", "\n", "                        ", "v", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "", "", "self", ".", "preload", "(", ")", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "samples", ",", "targets", "=", "next", "(", "self", ".", "loader", ")", "\n", "samples", ",", "targets", "=", "to_cuda", "(", "samples", ",", "targets", ",", "self", ".", "device", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "print", "(", "\"catch_stop_iter\"", ")", "\n", "samples", "=", "None", "\n", "targets", "=", "None", "\n", "\n", "", "", "return", "samples", ",", "targets", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.to_cuda": [[16, 20], ["samples.to.to", "v.to", "t.items"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["def", "to_cuda", "(", "samples", ",", "targets", ",", "device", ")", ":", "\n", "    ", "samples", "=", "samples", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "return", "samples", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.tensor_to_cuda": [[22, 24], ["tensor.to"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "def", "tensor_to_cuda", "(", "tensor", ":", "torch", ".", "Tensor", ",", "device", ")", ":", "\n", "    ", "return", "tensor", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.is_tensor_or_instances": [[26, 28], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "is_tensor_or_instances", "(", "data", ")", ":", "\n", "    ", "return", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", "or", "isinstance", "(", "data", ",", "Instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_apply": [[30, 50], ["isinstance", "data.keys", "isinstance", "range", "ValueError", "apply_func", "len", "isinstance", "isinstance", "data_prefetcher.data_apply", "ValueError", "apply_func", "type", "isinstance", "isinstance", "data_prefetcher.data_apply", "ValueError", "type", "data_prefetcher.is_tensor_or_instances"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_apply", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_apply", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.is_tensor_or_instances"], ["", "def", "data_apply", "(", "data", ",", "check_func", ",", "apply_func", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "        ", "for", "k", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "check_func", "(", "data", "[", "k", "]", ")", ":", "\n", "                ", "data", "[", "k", "]", "=", "apply_func", "(", "data", "[", "k", "]", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "k", "]", ",", "dict", ")", "or", "isinstance", "(", "data", "[", "k", "]", ",", "list", ")", ":", "\n", "                ", "data_apply", "(", "data", "[", "k", "]", ",", "check_func", ",", "apply_func", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "", "", "elif", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "if", "check_func", "(", "data", "[", "i", "]", ")", ":", "\n", "                ", "data", "[", "i", "]", "=", "apply_func", "(", "data", "[", "i", "]", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "i", "]", ",", "dict", ")", "or", "isinstance", "(", "data", "[", "i", "]", ",", "list", ")", ":", "\n", "                ", "data_apply", "(", "data", "[", "i", "]", ",", "check_func", ",", "apply_func", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"invalid type {}\"", ".", "format", "(", "type", "(", "data", "[", "i", "]", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid type {}\"", ".", "format", "(", "type", "(", "data", ")", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_dict_to_cuda": [[52, 54], ["data_prefetcher.data_apply", "functools.partial"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_apply"], ["", "def", "data_dict_to_cuda", "(", "data_dict", ",", "device", ")", ":", "\n", "    ", "return", "data_apply", "(", "data_dict", ",", "is_tensor_or_instances", ",", "partial", "(", "tensor_to_cuda", ",", "device", "=", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_panoptic.CocoPanoptic.__init__": [[26, 43], ["sorted", "open", "json.load", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_folder", ",", "ann_file", ",", "transforms", "=", "None", ",", "return_masks", "=", "True", ")", ":", "\n", "        ", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "coco", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# sort 'images' field so that they are aligned with 'annotations'", "\n", "# i.e., in alphabetical order", "\n", "", "self", ".", "coco", "[", "'images'", "]", "=", "sorted", "(", "self", ".", "coco", "[", "'images'", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "'id'", "]", ")", "\n", "# sanity check", "\n", "if", "\"annotations\"", "in", "self", ".", "coco", ":", "\n", "            ", "for", "img", ",", "ann", "in", "zip", "(", "self", ".", "coco", "[", "'images'", "]", ",", "self", ".", "coco", "[", "'annotations'", "]", ")", ":", "\n", "                ", "assert", "img", "[", "'file_name'", "]", "[", ":", "-", "4", "]", "==", "ann", "[", "'file_name'", "]", "[", ":", "-", "4", "]", "\n", "\n", "", "", "self", ".", "img_folder", "=", "img_folder", "\n", "self", ".", "ann_folder", "=", "ann_folder", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "return_masks", "=", "return_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_panoptic.CocoPanoptic.__getitem__": [[44, 79], ["PIL.Image.open().convert", "torch.tensor", "util.box_ops.masks_to_boxes", "torch.as_tensor", "torch.as_tensor", "pathlib.Path", "ann_info[].replace", "pathlib.Path", "numpy.asarray", "panopticapi.utils.rgb2id", "numpy.array", "torch.as_tensor", "torch.tensor", "coco_panoptic.CocoPanoptic.transforms", "PIL.Image.open", "PIL.Image.open", "int", "int", "int", "int", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.BoxMode.convert", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.masks_to_boxes"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "ann_info", "=", "self", ".", "coco", "[", "'annotations'", "]", "[", "idx", "]", "if", "\"annotations\"", "in", "self", ".", "coco", "else", "self", ".", "coco", "[", "'images'", "]", "[", "idx", "]", "\n", "img_path", "=", "Path", "(", "self", ".", "img_folder", ")", "/", "ann_info", "[", "'file_name'", "]", ".", "replace", "(", "'.png'", ",", "'.jpg'", ")", "\n", "ann_path", "=", "Path", "(", "self", ".", "ann_folder", ")", "/", "ann_info", "[", "'file_name'", "]", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "\"segments_info\"", "in", "ann_info", ":", "\n", "            ", "masks", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "ann_path", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "masks", "=", "rgb2id", "(", "masks", ")", "\n", "\n", "ids", "=", "np", ".", "array", "(", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ")", "\n", "masks", "=", "masks", "==", "ids", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "masks", "=", "torch", ".", "as_tensor", "(", "masks", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "[", "ann", "[", "'category_id'", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "'image_id'", "]", "=", "torch", ".", "tensor", "(", "[", "ann_info", "[", "'image_id'", "]", "if", "\"image_id\"", "in", "ann_info", "else", "ann_info", "[", "\"id\"", "]", "]", ")", "\n", "if", "self", ".", "return_masks", ":", "\n", "            ", "target", "[", "'masks'", "]", "=", "masks", "\n", "", "target", "[", "'labels'", "]", "=", "labels", "\n", "\n", "target", "[", "\"boxes\"", "]", "=", "masks_to_boxes", "(", "masks", ")", "\n", "\n", "target", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "target", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "int", "(", "h", ")", ",", "int", "(", "w", ")", "]", ")", "\n", "if", "\"segments_info\"", "in", "ann_info", ":", "\n", "            ", "for", "name", "in", "[", "'iscrowd'", ",", "'area'", "]", ":", "\n", "                ", "target", "[", "name", "]", "=", "torch", ".", "tensor", "(", "[", "ann", "[", "name", "]", "for", "ann", "in", "ann_info", "[", "'segments_info'", "]", "]", ")", "\n", "\n", "", "", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_panoptic.CocoPanoptic.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "coco", "[", "'images'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_panoptic.CocoPanoptic.get_height_and_width": [[83, 88], ["None"], "methods", ["None"], ["", "def", "get_height_and_width", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "coco", "[", "'images'", "]", "[", "idx", "]", "\n", "height", "=", "img_info", "[", "'height'", "]", "\n", "width", "=", "img_info", "[", "'width'", "]", "\n", "return", "height", ",", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco_panoptic.build": [[90, 110], ["pathlib.Path", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.exists", "coco_panoptic.CocoPanoptic", "coco.make_coco_transforms", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.coco.make_coco_transforms"], ["", "", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "img_folder_root", "=", "Path", "(", "args", ".", "coco_path", ")", "\n", "ann_folder_root", "=", "Path", "(", "args", ".", "coco_panoptic_path", ")", "\n", "assert", "img_folder_root", ".", "exists", "(", ")", ",", "f'provided COCO path {img_folder_root} does not exist'", "\n", "assert", "ann_folder_root", ".", "exists", "(", ")", ",", "f'provided COCO path {ann_folder_root} does not exist'", "\n", "mode", "=", "'panoptic'", "\n", "PATHS", "=", "{", "\n", "\"train\"", ":", "(", "\"train2017\"", ",", "Path", "(", "\"annotations\"", ")", "/", "f'{mode}_train2017.json'", ")", ",", "\n", "\"val\"", ":", "(", "\"val2017\"", ",", "Path", "(", "\"annotations\"", ")", "/", "f'{mode}_val2017.json'", ")", ",", "\n", "}", "\n", "\n", "img_folder", ",", "ann_file", "=", "PATHS", "[", "image_set", "]", "\n", "img_folder_path", "=", "img_folder_root", "/", "img_folder", "\n", "ann_folder", "=", "ann_folder_root", "/", "f'{mode}_{img_folder}'", "\n", "ann_file", "=", "ann_folder_root", "/", "ann_file", "\n", "\n", "dataset", "=", "CocoPanoptic", "(", "img_folder_path", ",", "ann_folder", ",", "ann_file", ",", "\n", "transforms", "=", "make_coco_transforms", "(", "image_set", ")", ",", "return_masks", "=", "args", ".", "masks", ")", "\n", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.__init__": [[27, 62], ["max", "static_detmot.DetMOTDetection._register_videos", "print", "open", "file.readlines", "list", "x.replace().replace().replace", "len", "range", "os.join", "filter", "len", "len", "len", "len", "x.strip", "x.replace().replace", "len", "len", "len", "x.replace"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._register_videos"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_txt_path", ":", "str", ",", "seqs_folder", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "_transforms", "=", "transforms", "\n", "self", ".", "num_frames_per_batch", "=", "max", "(", "args", ".", "sampler_lengths", ")", "\n", "self", ".", "sample_mode", "=", "args", ".", "sample_mode", "\n", "self", ".", "sample_interval", "=", "args", ".", "sample_interval", "\n", "self", ".", "vis", "=", "args", ".", "vis", "\n", "self", ".", "video_dict", "=", "{", "}", "\n", "\n", "with", "open", "(", "data_txt_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "img_files", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "=", "[", "osp", ".", "join", "(", "seqs_folder", ",", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "self", ".", "img_files", "]", "\n", "self", ".", "img_files", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", ")", ")", "\n", "", "self", ".", "label_files", "=", "[", "(", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", ")", "\n", "for", "x", "in", "self", ".", "img_files", "]", "\n", "# The number of images per sample: 1 + (num_frames - 1) * interval.", "\n", "# The number of valid samples: num_images - num_image_per_sample + 1.", "\n", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "\n", "self", ".", "_register_videos", "(", ")", "\n", "\n", "# video sampler.", "\n", "self", ".", "sampler_steps", ":", "list", "=", "args", ".", "sampler_steps", "\n", "self", ".", "lengths", ":", "list", "=", "args", ".", "sampler_lengths", "\n", "print", "(", "\"sampler_steps={} lenghts={}\"", ".", "format", "(", "self", ".", "sampler_steps", ",", "self", ".", "lengths", ")", ")", "\n", "if", "self", ".", "sampler_steps", "is", "not", "None", "and", "len", "(", "self", ".", "sampler_steps", ")", ">", "0", ":", "\n", "# Enable sampling length adjustment.", "\n", "            ", "assert", "len", "(", "self", ".", "lengths", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "lengths", ")", "==", "len", "(", "self", ".", "sampler_steps", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", "-", "1", ")", ":", "\n", "                ", "assert", "self", ".", "sampler_steps", "[", "i", "]", "<", "self", ".", "sampler_steps", "[", "i", "+", "1", "]", "\n", "", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "lengths", "[", "-", "1", "]", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "self", ".", "period_idx", "=", "0", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "0", "]", "\n", "self", ".", "current_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection._register_videos": [[63, 70], ["print", "len", "label_name.split", "len", "len"], "methods", ["None"], ["", "", "def", "_register_videos", "(", "self", ")", ":", "\n", "        ", "for", "label_name", "in", "self", ".", "label_files", ":", "\n", "            ", "video_name", "=", "'/'", ".", "join", "(", "label_name", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "video_name", "not", "in", "self", ".", "video_dict", ":", "\n", "                ", "print", "(", "\"register {}-th video: {} \"", ".", "format", "(", "len", "(", "self", ".", "video_dict", ")", "+", "1", ",", "video_name", ")", ")", "\n", "self", ".", "video_dict", "[", "video_name", "]", "=", "len", "(", "self", ".", "video_dict", ")", "\n", "assert", "len", "(", "self", ".", "video_dict", ")", "<=", "300", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.set_epoch": [[71, 82], ["range", "print", "len", "len"], "methods", ["None"], ["", "", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "current_epoch", "=", "epoch", "\n", "if", "self", ".", "sampler_steps", "is", "None", "or", "len", "(", "self", ".", "sampler_steps", ")", "==", "0", ":", "\n", "# fixed sampling length.", "\n", "            ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", ")", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "sampler_steps", "[", "i", "]", ":", "\n", "                ", "self", ".", "period_idx", "=", "i", "+", "1", "\n", "", "", "print", "(", "\"set epoch: epoch {} period_idx={}\"", ".", "format", "(", "epoch", ",", "self", ".", "period_idx", ")", ")", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "self", ".", "period_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.step_epoch": [[83, 87], ["print", "static_detmot.DetMOTDetection.set_epoch"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch"], ["", "def", "step_epoch", "(", "self", ")", ":", "\n", "# one epoch finishes.", "\n", "        ", "print", "(", "\"Dataset: epoch {} finishes\"", ".", "format", "(", "self", ".", "current_epoch", ")", ")", "\n", "self", ".", "set_epoch", "(", "self", ".", "current_epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection._targets_to_instances": [[88, 96], ["models.structures.Instances", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_targets_to_instances", "(", "targets", ":", "dict", ",", "img_shape", ")", "->", "Instances", ":", "\n", "        ", "gt_instances", "=", "Instances", "(", "tuple", "(", "img_shape", ")", ")", "\n", "gt_instances", ".", "boxes", "=", "targets", "[", "'boxes'", "]", "\n", "gt_instances", ".", "labels", "=", "targets", "[", "'labels'", "]", "\n", "gt_instances", ".", "obj_ids", "=", "targets", "[", "'obj_ids'", "]", "\n", "gt_instances", ".", "area", "=", "targets", "[", "'area'", "]", "\n", "return", "gt_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection._pre_single_frame": [[97, 141], ["static_detmot.DetMOTDetection.img_files[].replace", "PIL.Image.open", "os.isfile", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "[].clamp_", "[].clamp_", "numpy.loadtxt().reshape", "numpy.loadtxt().reshape.copy", "ValueError", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "label_path.split", "label[].tolist", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.loadtxt"], "methods", ["None"], ["", "def", "_pre_single_frame", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "img_files", "[", "idx", "]", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "label_path", "=", "self", ".", "label_files", "[", "idx", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "targets", "=", "{", "}", "\n", "w", ",", "h", "=", "img", ".", "_size", "\n", "assert", "w", ">", "0", "and", "h", ">", "0", ",", "\"invalid image {} with shape {} {}\"", ".", "format", "(", "img_path", ",", "w", ",", "h", ")", "\n", "if", "osp", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "\n", "# normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid label path: {}'", ".", "format", "(", "label_path", ")", ")", "\n", "", "video_name", "=", "'/'", ".", "join", "(", "label_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "obj_idx_offset", "=", "self", ".", "video_dict", "[", "video_name", "]", "*", "100000", "# 100000 unique ids is enough for a video.", "\n", "targets", "[", "'boxes'", "]", "=", "[", "]", "\n", "targets", "[", "'area'", "]", "=", "[", "]", "\n", "targets", "[", "'iscrowd'", "]", "=", "[", "]", "\n", "targets", "[", "'labels'", "]", "=", "[", "]", "\n", "targets", "[", "'obj_ids'", "]", "=", "[", "]", "\n", "targets", "[", "'image_id'", "]", "=", "torch", ".", "as_tensor", "(", "idx", ")", "\n", "targets", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "targets", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", ".", "append", "(", "0", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "obj_id", "=", "label", "[", "1", "]", "+", "obj_idx_offset", "if", "label", "[", "1", "]", ">=", "0", "else", "label", "[", "1", "]", "\n", "targets", "[", "'obj_ids'", "]", ".", "append", "(", "obj_id", ")", "# relative id", "\n", "\n", "", "targets", "[", "'area'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'iscrowd'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'labels'", "]", ")", "\n", "targets", "[", "'obj_ids'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'obj_ids'", "]", ")", "\n", "targets", "[", "'boxes'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'boxes'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "targets", "[", "'boxes'", "]", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "targets", "[", "'boxes'", "]", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "return", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection._get_sample_range": [[142, 152], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_get_sample_range", "(", "self", ",", "start_idx", ")", ":", "\n", "\n", "# take default sampling method for normal dataset.", "\n", "        ", "assert", "self", ".", "sample_mode", "in", "[", "'fixed_interval'", ",", "'random_interval'", "]", ",", "'invalid sample mode: {}'", ".", "format", "(", "self", ".", "sample_mode", ")", "\n", "if", "self", ".", "sample_mode", "==", "'fixed_interval'", ":", "\n", "            ", "sample_interval", "=", "self", ".", "sample_interval", "\n", "", "elif", "self", ".", "sample_mode", "==", "'random_interval'", ":", "\n", "            ", "sample_interval", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "sample_interval", "+", "1", ")", "\n", "", "default_range", "=", "start_idx", ",", "start_idx", "+", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "sample_interval", "+", "1", ",", "sample_interval", "\n", "return", "default_range", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.pre_continuous_frames": [[153, 162], ["range", "static_detmot.DetMOTDetection._pre_single_frame", "images.append", "targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._pre_single_frame"], ["", "def", "pre_continuous_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "# repeat current img and target for twice", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_batch", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "self", ".", "_pre_single_frame", "(", "idx", ")", "\n", "images", ".", "append", "(", "img_i", ")", "\n", "targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "images", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.__getitem__": [[163, 179], ["static_detmot.DetMOTDetection.pre_continuous_frames", "zip", "data.update", "static_detmot.DetMOTDetection._transforms", "static_detmot.DetMOTDetection._targets_to_instances", "gt_instances.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.pre_continuous_frames", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._targets_to_instances"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "images", ",", "targets", "=", "self", ".", "pre_continuous_frames", "(", "idx", ")", "\n", "data", "=", "{", "}", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "images", ",", "targets", "=", "self", ".", "_transforms", "(", "images", ",", "targets", ")", "\n", "", "gt_instances", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "images", ",", "targets", ")", ":", "\n", "            ", "gt_instances_i", "=", "self", ".", "_targets_to_instances", "(", "targets_i", ",", "img_i", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "gt_instances", ".", "append", "(", "gt_instances_i", ")", "\n", "", "data", ".", "update", "(", "{", "\n", "'imgs'", ":", "images", ",", "\n", "'gt_instances'", ":", "gt_instances", ",", "\n", "}", ")", "\n", "if", "self", ".", "args", ".", "vis", ":", "\n", "            ", "data", "[", "'ori_img'", "]", "=", "[", "target_i", "[", "'ori_img'", "]", "for", "target_i", "in", "targets", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetection.__len__": [[180, 182], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "item_num", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.DetMOTDetectionValidation.__init__": [[185, 188], ["static_detmot.DetMOTDetection.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seqs_folder", ",", "transforms", ")", ":", "\n", "        ", "args", ".", "data_txt_path", "=", "args", ".", "val_data_txt_path", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "seqs_folder", ",", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.make_detmot_transforms": [[191, 236], ["datasets.MotCompose", "ValueError", "datasets.MotCompose", "datasets.MotCompose", "datasets.MotToTensor", "datasets.MotNormalize", "print", "color_transforms.append", "print", "datasets.MoTColorJitter", "datasets.MotRandomHorizontalFlip", "datasets.FixedMotRandomShift", "datasets.MotRandomResize", "datasets.MotRandomHorizontalFlip", "datasets.FixedMotRandomShift", "datasets.MotRandomSelect", "datasets.MotRandomResize", "datasets.MotRandomResize", "datasets.MotCompose", "datasets.MotRandomResize", "datasets.FixedMotRandomCrop", "datasets.MotRandomResize"], "function", ["None"], ["", "", "def", "make_detmot_transforms", "(", "image_set", ",", "args", "=", "None", ")", ":", "\n", "    ", "normalize", "=", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotToTensor", "(", ")", ",", "\n", "T", ".", "MotNormalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "scales", "=", "[", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ",", "832", ",", "864", ",", "896", ",", "928", ",", "960", ",", "992", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "color_transforms", "=", "[", "]", "\n", "if", "args", ".", "cj", ":", "\n", "            ", "print", "(", "'Training with RandomColorJitter.'", ")", "\n", "color_transforms", ".", "append", "(", "T", ".", "MoTColorJitter", "(", "brightness", "=", "0.5", ",", "contrast", "=", "0.5", ",", "saturation", "=", "0.5", ",", "hue", "=", "0", ")", ")", "\n", "", "if", "not", "args", ".", "crop", ":", "\n", "            ", "scale_transforms", "=", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "FixedMotRandomShift", "(", "bs", "=", "1", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Training with RandomCrop.'", ")", "\n", "scale_transforms", "=", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "FixedMotRandomShift", "(", "bs", "=", "1", ")", ",", "\n", "T", ".", "MotRandomSelect", "(", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "400", ",", "500", ",", "600", "]", ")", ",", "\n", "T", ".", "FixedMotRandomCrop", "(", "384", ",", "600", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "\n", "", "return", "T", ".", "MotCompose", "(", "color_transforms", "+", "scale_transforms", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1536", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.build": [[238, 249], ["pathlib.Path", "pathlib.Path.exists", "static_detmot.make_detmot_transforms", "static_detmot.DetMOTDetection", "static_detmot.DetMOTDetection"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.static_detmot.make_detmot_transforms"], ["", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "mot_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided MOT path {root} does not exist'", "\n", "transforms", "=", "make_detmot_transforms", "(", "image_set", ",", "args", ")", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_train", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "transforms", "=", "transforms", ")", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_val", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "transforms", "=", "transforms", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.get_coco_api_from_dataset": [[21, 29], ["range", "isinstance", "isinstance"], "function", ["None"], ["def", "get_coco_api_from_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "# if isinstance(dataset, torchvision.datasets.CocoDetection):", "\n", "#     break", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "dataset", "\n", "", "", "if", "isinstance", "(", "dataset", ",", "CocoDetection", ")", ":", "\n", "        ", "return", "dataset", ".", "coco", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.__init__.build_dataset": [[31, 47], ["ValueError", "coco.build", "build_coco_panoptic", "joint.build", "static_detmot.build", "detmot.build", "dance.build"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build"], ["", "", "def", "build_dataset", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset_file", "==", "'coco'", ":", "\n", "        ", "return", "build_coco", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'coco_panoptic'", ":", "\n", "# to avoid making panopticapi required for coco", "\n", "        ", "from", ".", "coco_panoptic", "import", "build", "as", "build_coco_panoptic", "\n", "return", "build_coco_panoptic", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_joint'", ":", "\n", "        ", "return", "build_e2e_joint", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_static_mot'", ":", "\n", "        ", "return", "build_e2e_static_mot", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_mot'", ":", "\n", "        ", "return", "build_e2e_mot", "(", "image_set", ",", "args", ")", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_dance'", ":", "\n", "        ", "return", "build_e2e_dance", "(", "image_set", ",", "args", ")", "\n", "", "raise", "ValueError", "(", "f'dataset {args.dataset_file} not supported'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.__init__": [[27, 63], ["max", "joint.DetMOTDetection._register_videos", "print", "open", "file.readlines", "list", "x.replace().replace().replace", "len", "range", "os.join", "filter", "len", "len", "len", "len", "x.strip", "x.replace().replace", "len", "len", "len", "x.replace"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._register_videos"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data_txt_path", ":", "str", ",", "seqs_folder", ",", "dataset2transform", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "dataset2transform", "=", "dataset2transform", "\n", "self", ".", "num_frames_per_batch", "=", "max", "(", "args", ".", "sampler_lengths", ")", "\n", "self", ".", "sample_mode", "=", "args", ".", "sample_mode", "\n", "self", ".", "sample_interval", "=", "args", ".", "sample_interval", "\n", "self", ".", "vis", "=", "args", ".", "vis", "\n", "self", ".", "video_dict", "=", "{", "}", "\n", "\n", "with", "open", "(", "data_txt_path", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "img_files", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "img_files", "=", "[", "osp", ".", "join", "(", "seqs_folder", ",", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "self", ".", "img_files", "]", "\n", "self", ".", "img_files", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "self", ".", "img_files", ")", ")", "\n", "\n", "", "self", ".", "label_files", "=", "[", "(", "x", ".", "replace", "(", "'images'", ",", "'labels_with_ids'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", ")", "\n", "for", "x", "in", "self", ".", "img_files", "]", "\n", "# The number of images per sample: 1 + (num_frames - 1) * interval.", "\n", "# The number of valid samples: num_images - num_image_per_sample + 1.", "\n", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "\n", "self", ".", "_register_videos", "(", ")", "\n", "\n", "# video sampler.", "\n", "self", ".", "sampler_steps", ":", "list", "=", "args", ".", "sampler_steps", "\n", "self", ".", "lengths", ":", "list", "=", "args", ".", "sampler_lengths", "\n", "print", "(", "\"sampler_steps={} lenghts={}\"", ".", "format", "(", "self", ".", "sampler_steps", ",", "self", ".", "lengths", ")", ")", "\n", "if", "self", ".", "sampler_steps", "is", "not", "None", "and", "len", "(", "self", ".", "sampler_steps", ")", ">", "0", ":", "\n", "# Enable sampling length adjustment.", "\n", "            ", "assert", "len", "(", "self", ".", "lengths", ")", ">", "0", "\n", "assert", "len", "(", "self", ".", "lengths", ")", "==", "len", "(", "self", ".", "sampler_steps", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", "-", "1", ")", ":", "\n", "                ", "assert", "self", ".", "sampler_steps", "[", "i", "]", "<", "self", ".", "sampler_steps", "[", "i", "+", "1", "]", "\n", "", "self", ".", "item_num", "=", "len", "(", "self", ".", "img_files", ")", "-", "(", "self", ".", "lengths", "[", "-", "1", "]", "-", "1", ")", "*", "self", ".", "sample_interval", "\n", "self", ".", "period_idx", "=", "0", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "0", "]", "\n", "self", ".", "current_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._register_videos": [[64, 70], ["print", "len", "label_name.split", "len"], "methods", ["None"], ["", "", "def", "_register_videos", "(", "self", ")", ":", "\n", "        ", "for", "label_name", "in", "self", ".", "label_files", ":", "\n", "            ", "video_name", "=", "'/'", ".", "join", "(", "label_name", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "video_name", "not", "in", "self", ".", "video_dict", ":", "\n", "                ", "print", "(", "\"register {}-th video: {} \"", ".", "format", "(", "len", "(", "self", ".", "video_dict", ")", "+", "1", ",", "video_name", ")", ")", "\n", "self", ".", "video_dict", "[", "video_name", "]", "=", "len", "(", "self", ".", "video_dict", ")", "\n", "# assert len(self.video_dict) <= 300", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch": [[72, 83], ["range", "print", "len", "len"], "methods", ["None"], ["", "", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "current_epoch", "=", "epoch", "\n", "if", "self", ".", "sampler_steps", "is", "None", "or", "len", "(", "self", ".", "sampler_steps", ")", "==", "0", ":", "\n", "# fixed sampling length.", "\n", "            ", "return", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sampler_steps", ")", ")", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "sampler_steps", "[", "i", "]", ":", "\n", "                ", "self", ".", "period_idx", "=", "i", "+", "1", "\n", "", "", "print", "(", "\"set epoch: epoch {} period_idx={}\"", ".", "format", "(", "epoch", ",", "self", ".", "period_idx", ")", ")", "\n", "self", ".", "num_frames_per_batch", "=", "self", ".", "lengths", "[", "self", ".", "period_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.step_epoch": [[84, 88], ["print", "joint.DetMOTDetection.set_epoch"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.set_epoch"], ["", "def", "step_epoch", "(", "self", ")", ":", "\n", "# one epoch finishes.", "\n", "        ", "print", "(", "\"Dataset: epoch {} finishes\"", ".", "format", "(", "self", ".", "current_epoch", ")", ")", "\n", "self", ".", "set_epoch", "(", "self", ".", "current_epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._targets_to_instances": [[89, 97], ["models.structures.Instances", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_targets_to_instances", "(", "targets", ":", "dict", ",", "img_shape", ")", "->", "Instances", ":", "\n", "        ", "gt_instances", "=", "Instances", "(", "tuple", "(", "img_shape", ")", ")", "\n", "gt_instances", ".", "boxes", "=", "targets", "[", "'boxes'", "]", "\n", "gt_instances", ".", "labels", "=", "targets", "[", "'labels'", "]", "\n", "gt_instances", ".", "obj_ids", "=", "targets", "[", "'obj_ids'", "]", "\n", "gt_instances", ".", "area", "=", "targets", "[", "'area'", "]", "\n", "return", "gt_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._pre_single_frame": [[98, 148], ["PIL.Image.open", "os.isfile", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "img_path.replace.replace.replace", "numpy.loadtxt().reshape", "numpy.loadtxt().reshape.copy", "ValueError", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "targets[].append", "label_path.split", "NotImplementedError", "label[].tolist", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.loadtxt"], "methods", ["None"], ["", "def", "_pre_single_frame", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "img_path", "=", "self", ".", "img_files", "[", "idx", "]", "\n", "label_path", "=", "self", ".", "label_files", "[", "idx", "]", "\n", "if", "'crowdhuman'", "in", "img_path", ":", "\n", "            ", "img_path", "=", "img_path", ".", "replace", "(", "'.jpg'", ",", "'.png'", ")", "\n", "", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "targets", "=", "{", "}", "\n", "w", ",", "h", "=", "img", ".", "_size", "\n", "assert", "w", ">", "0", "and", "h", ">", "0", ",", "\"invalid image {} with shape {} {}\"", ".", "format", "(", "img_path", ",", "w", ",", "h", ")", "\n", "if", "osp", ".", "isfile", "(", "label_path", ")", ":", "\n", "            ", "labels0", "=", "np", ".", "loadtxt", "(", "label_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "6", ")", "\n", "\n", "# normalized cewh to pixel xyxy format", "\n", "labels", "=", "labels0", ".", "copy", "(", ")", "\n", "labels", "[", ":", ",", "2", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "-", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "3", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "-", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "4", "]", "=", "w", "*", "(", "labels0", "[", ":", ",", "2", "]", "+", "labels0", "[", ":", ",", "4", "]", "/", "2", ")", "\n", "labels", "[", ":", ",", "5", "]", "=", "h", "*", "(", "labels0", "[", ":", ",", "3", "]", "+", "labels0", "[", ":", ",", "5", "]", "/", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid label path: {}'", ".", "format", "(", "label_path", ")", ")", "\n", "", "video_name", "=", "'/'", ".", "join", "(", "label_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "obj_idx_offset", "=", "self", ".", "video_dict", "[", "video_name", "]", "*", "1000000", "# 1000000 unique ids is enough for a video.", "\n", "if", "'crowdhuman'", "in", "img_path", ":", "\n", "            ", "targets", "[", "'dataset'", "]", "=", "'CrowdHuman'", "\n", "", "elif", "'MOT17'", "in", "img_path", ":", "\n", "            ", "targets", "[", "'dataset'", "]", "=", "'MOT17'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "targets", "[", "'boxes'", "]", "=", "[", "]", "\n", "targets", "[", "'area'", "]", "=", "[", "]", "\n", "targets", "[", "'iscrowd'", "]", "=", "[", "]", "\n", "targets", "[", "'labels'", "]", "=", "[", "]", "\n", "targets", "[", "'obj_ids'", "]", "=", "[", "]", "\n", "targets", "[", "'image_id'", "]", "=", "torch", ".", "as_tensor", "(", "idx", ")", "\n", "targets", "[", "'size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "targets", "[", "'orig_size'", "]", "=", "torch", ".", "as_tensor", "(", "[", "h", ",", "w", "]", ")", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "targets", "[", "'boxes'", "]", ".", "append", "(", "label", "[", "2", ":", "6", "]", ".", "tolist", "(", ")", ")", "\n", "targets", "[", "'area'", "]", ".", "append", "(", "label", "[", "4", "]", "*", "label", "[", "5", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", ".", "append", "(", "0", ")", "\n", "targets", "[", "'labels'", "]", ".", "append", "(", "0", ")", "\n", "obj_id", "=", "label", "[", "1", "]", "+", "obj_idx_offset", "if", "label", "[", "1", "]", ">=", "0", "else", "label", "[", "1", "]", "\n", "targets", "[", "'obj_ids'", "]", ".", "append", "(", "obj_id", ")", "# relative id", "\n", "\n", "", "targets", "[", "'area'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'area'", "]", ")", "\n", "targets", "[", "'iscrowd'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'iscrowd'", "]", ")", "\n", "targets", "[", "'labels'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'labels'", "]", ")", "\n", "targets", "[", "'obj_ids'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'obj_ids'", "]", ")", "\n", "targets", "[", "'boxes'", "]", "=", "torch", ".", "as_tensor", "(", "targets", "[", "'boxes'", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "img", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._get_sample_range": [[149, 159], ["numpy.random.randint"], "methods", ["None"], ["", "def", "_get_sample_range", "(", "self", ",", "start_idx", ")", ":", "\n", "\n", "# take default sampling method for normal dataset.", "\n", "        ", "assert", "self", ".", "sample_mode", "in", "[", "'fixed_interval'", ",", "'random_interval'", "]", ",", "'invalid sample mode: {}'", ".", "format", "(", "self", ".", "sample_mode", ")", "\n", "if", "self", ".", "sample_mode", "==", "'fixed_interval'", ":", "\n", "            ", "sample_interval", "=", "self", ".", "sample_interval", "\n", "", "elif", "self", ".", "sample_mode", "==", "'random_interval'", ":", "\n", "            ", "sample_interval", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "self", ".", "sample_interval", "+", "1", ")", "\n", "", "default_range", "=", "start_idx", ",", "start_idx", "+", "(", "self", ".", "num_frames_per_batch", "-", "1", ")", "*", "sample_interval", "+", "1", ",", "sample_interval", "\n", "return", "default_range", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.pre_continuous_frames": [[160, 168], ["range", "joint.DetMOTDetection._pre_single_frame", "images.append", "targets.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._pre_single_frame"], ["", "def", "pre_continuous_frames", "(", "self", ",", "start", ",", "end", ",", "interval", "=", "1", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "start", ",", "end", ",", "interval", ")", ":", "\n", "            ", "img_i", ",", "targets_i", "=", "self", ".", "_pre_single_frame", "(", "i", ")", "\n", "images", ".", "append", "(", "img_i", ")", "\n", "targets", ".", "append", "(", "targets_i", ")", "\n", "", "return", "images", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.__getitem__": [[169, 188], ["joint.DetMOTDetection._get_sample_range", "joint.DetMOTDetection.pre_continuous_frames", "zip", "data.update", "transform", "joint.DetMOTDetection._targets_to_instances", "gt_instances.append"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._get_sample_range", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.pre_continuous_frames", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection._targets_to_instances"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_start", ",", "sample_end", ",", "sample_interval", "=", "self", ".", "_get_sample_range", "(", "idx", ")", "\n", "images", ",", "targets", "=", "self", ".", "pre_continuous_frames", "(", "sample_start", ",", "sample_end", ",", "sample_interval", ")", "\n", "data", "=", "{", "}", "\n", "dataset_name", "=", "targets", "[", "0", "]", "[", "'dataset'", "]", "\n", "transform", "=", "self", ".", "dataset2transform", "[", "dataset_name", "]", "\n", "if", "transform", "is", "not", "None", ":", "\n", "            ", "images", ",", "targets", "=", "transform", "(", "images", ",", "targets", ")", "\n", "", "gt_instances", "=", "[", "]", "\n", "for", "img_i", ",", "targets_i", "in", "zip", "(", "images", ",", "targets", ")", ":", "\n", "            ", "gt_instances_i", "=", "self", ".", "_targets_to_instances", "(", "targets_i", ",", "img_i", ".", "shape", "[", "1", ":", "3", "]", ")", "\n", "gt_instances", ".", "append", "(", "gt_instances_i", ")", "\n", "", "data", ".", "update", "(", "{", "\n", "'imgs'", ":", "images", ",", "\n", "'gt_instances'", ":", "gt_instances", ",", "\n", "}", ")", "\n", "if", "self", ".", "args", ".", "vis", ":", "\n", "            ", "data", "[", "'ori_img'", "]", "=", "[", "target_i", "[", "'ori_img'", "]", "for", "target_i", "in", "targets", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetection.__len__": [[189, 191], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "item_num", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.DetMOTDetectionValidation.__init__": [[194, 197], ["joint.DetMOTDetection.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "seqs_folder", ",", "dataset2transform", ")", ":", "\n", "        ", "args", ".", "data_txt_path", "=", "args", ".", "val_data_txt_path", "\n", "super", "(", ")", ".", "__init__", "(", "args", ",", "seqs_folder", ",", "dataset2transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_mot17": [[200, 229], ["datasets.MotCompose", "ValueError", "datasets.MotCompose", "datasets.MotCompose", "datasets.MotToTensor", "datasets.MotNormalize", "datasets.MotRandomHorizontalFlip", "datasets.MotRandomSelect", "datasets.MotRandomResize", "datasets.MotRandomResize", "datasets.MotCompose", "datasets.MotRandomResize", "datasets.FixedMotRandomCrop", "datasets.MotRandomResize"], "function", ["None"], ["", "", "def", "make_transforms_for_mot17", "(", "image_set", ",", "args", "=", "None", ")", ":", "\n", "\n", "    ", "normalize", "=", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotToTensor", "(", ")", ",", "\n", "T", ".", "MotNormalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "scales", "=", "[", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ",", "832", ",", "864", ",", "896", ",", "928", ",", "960", ",", "992", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "MotRandomSelect", "(", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "400", ",", "500", ",", "600", "]", ")", ",", "\n", "T", ".", "FixedMotRandomCrop", "(", "384", ",", "600", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_crowdhuman": [[231, 262], ["datasets.MotCompose", "ValueError", "datasets.MotCompose", "datasets.MotCompose", "datasets.MotToTensor", "datasets.MotNormalize", "datasets.MotRandomHorizontalFlip", "datasets.FixedMotRandomShift", "datasets.MotRandomSelect", "datasets.MotRandomResize", "datasets.MotRandomResize", "datasets.MotCompose", "datasets.MotRandomResize", "datasets.FixedMotRandomCrop", "datasets.MotRandomResize"], "function", ["None"], ["", "def", "make_transforms_for_crowdhuman", "(", "image_set", ",", "args", "=", "None", ")", ":", "\n", "\n", "    ", "normalize", "=", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotToTensor", "(", ")", ",", "\n", "T", ".", "MotNormalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "scales", "=", "[", "608", ",", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ",", "832", ",", "864", ",", "896", ",", "928", ",", "960", ",", "992", "]", "\n", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "FixedMotRandomShift", "(", "bs", "=", "1", ")", ",", "\n", "T", ".", "MotRandomSelect", "(", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "400", ",", "500", ",", "600", "]", ")", ",", "\n", "T", ".", "FixedMotRandomCrop", "(", "384", ",", "600", ")", ",", "\n", "T", ".", "MotRandomResize", "(", "scales", ",", "max_size", "=", "1536", ")", ",", "\n", "]", ")", "\n", ")", ",", "\n", "normalize", ",", "\n", "\n", "]", ")", "\n", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "return", "T", ".", "MotCompose", "(", "[", "\n", "T", ".", "MotRandomResize", "(", "[", "800", "]", ",", "max_size", "=", "1333", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'unknown {image_set}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.build_dataset2transform": [[264, 277], ["joint.make_transforms_for_mot17", "joint.make_transforms_for_mot17", "joint.make_transforms_for_crowdhuman", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_mot17", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_mot17", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.make_transforms_for_crowdhuman"], ["", "def", "build_dataset2transform", "(", "args", ",", "image_set", ")", ":", "\n", "    ", "mot17_train", "=", "make_transforms_for_mot17", "(", "'train'", ",", "args", ")", "\n", "mot17_test", "=", "make_transforms_for_mot17", "(", "'val'", ",", "args", ")", "\n", "\n", "crowdhuman_train", "=", "make_transforms_for_crowdhuman", "(", "'train'", ",", "args", ")", "\n", "dataset2transform_train", "=", "{", "'MOT17'", ":", "mot17_train", ",", "'CrowdHuman'", ":", "crowdhuman_train", "}", "\n", "dataset2transform_val", "=", "{", "'MOT17'", ":", "mot17_test", ",", "'CrowdHuman'", ":", "mot17_test", "}", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "return", "dataset2transform_train", "\n", "", "elif", "image_set", "==", "'val'", ":", "\n", "        ", "return", "dataset2transform_val", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.build": [[279, 290], ["pathlib.Path", "pathlib.Path.exists", "joint.build_dataset2transform", "joint.DetMOTDetection", "joint.DetMOTDetection"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.joint.build_dataset2transform"], ["", "", "def", "build", "(", "image_set", ",", "args", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "mot_path", ")", "\n", "assert", "root", ".", "exists", "(", ")", ",", "f'provided MOT path {root} does not exist'", "\n", "dataset2transform", "=", "build_dataset2transform", "(", "args", ",", "image_set", ")", "\n", "if", "image_set", "==", "'train'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_train", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "dataset2transform", "=", "dataset2transform", ")", "\n", "", "if", "image_set", "==", "'val'", ":", "\n", "        ", "data_txt_path", "=", "args", ".", "data_txt_path_val", "\n", "dataset", "=", "DetMOTDetection", "(", "args", ",", "data_txt_path", "=", "data_txt_path", ",", "seqs_folder", "=", "root", ",", "dataset2transform", "=", "dataset2transform", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.gen_labels_15.mkdirs": [[7, 10], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.gen_bdd100k_mot.convert": [[9, 71], ["collections.defaultdict", "set", "os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm", "os.path.join", "os.makedirs", "json.load", "open", "cv2.imread", "os.path.join", "os.path.join", "len", "open", "os.path.join", "f.write", "name.replace", "int", "attr_id_dict.keys"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["def", "convert", "(", "img_dir", ",", "split", ",", "label_dir", ",", "save_label_dir", ",", "filter_crowd", "=", "False", ",", "filter_ignore", "=", "False", ")", ":", "\n", "    ", "cat2id", "=", "{", "'train'", ":", "6", ",", "'car'", ":", "3", ",", "'bus'", ":", "5", ",", "'other person'", ":", "1", ",", "'rider'", ":", "2", ",", "'pedestrian'", ":", "1", ",", "'other vehicle'", ":", "3", ",", "'motorcycle'", ":", "7", ",", "'bicycle'", ":", "8", ",", "'trailer'", ":", "4", ",", "'truck'", ":", "4", "}", "\n", "\n", "coco", "=", "defaultdict", "(", "list", ")", "\n", "coco", "[", "\"categories\"", "]", "=", "[", "\n", "{", "\"supercategory\"", ":", "\"human\"", ",", "\"id\"", ":", "1", ",", "\"name\"", ":", "\"pedestrian\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"human\"", ",", "\"id\"", ":", "2", ",", "\"name\"", ":", "\"rider\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"vehicle\"", ",", "\"id\"", ":", "3", ",", "\"name\"", ":", "\"car\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"vehicle\"", ",", "\"id\"", ":", "4", ",", "\"name\"", ":", "\"truck\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"vehicle\"", ",", "\"id\"", ":", "5", ",", "\"name\"", ":", "\"bus\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"vehicle\"", ",", "\"id\"", ":", "6", ",", "\"name\"", ":", "\"train\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"bike\"", ",", "\"id\"", ":", "7", ",", "\"name\"", ":", "\"motorcycle\"", "}", ",", "\n", "{", "\"supercategory\"", ":", "\"bike\"", ",", "\"id\"", ":", "8", ",", "\"name\"", ":", "\"bicycle\"", "}", ",", "\n", "]", "\n", "attr_id_dict", "=", "{", "\n", "frame", "[", "\"name\"", "]", ":", "frame", "[", "\"id\"", "]", "for", "frame", "in", "coco", "[", "\"categories\"", "]", "\n", "}", "\n", "\n", "all_categories", "=", "set", "(", ")", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "split", ")", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "label_dir", ",", "split", ")", "\n", "vids", "=", "os", ".", "listdir", "(", "img_dir", ")", "\n", "for", "vid", "in", "tqdm", "(", "vids", ")", ":", "\n", "        ", "txt_label_dir", "=", "os", ".", "path", ".", "join", "(", "save_label_dir", ",", "split", ",", "vid", ")", "\n", "os", ".", "makedirs", "(", "txt_label_dir", ",", "exist_ok", "=", "True", ")", "\n", "annos", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "label_dir", ",", "vid", "+", "'.json'", ")", ",", "'r'", ")", ")", "\n", "for", "anno", "in", "annos", ":", "\n", "            ", "name", "=", "anno", "[", "'name'", "]", "\n", "labels", "=", "anno", "[", "'labels'", "]", "\n", "videoName", "=", "anno", "[", "'videoName'", "]", "\n", "frameIndex", "=", "anno", "[", "'frameIndex'", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "vid", ",", "name", ")", ")", "\n", "seq_height", ",", "seq_width", ",", "_", "=", "img", ".", "shape", "\n", "if", "len", "(", "labels", ")", "<", "1", ":", "\n", "                ", "continue", "\n", "# for label in labels:", "\n", "#     category = label['category']", "\n", "#     all_categories.add(category)", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "txt_label_dir", ",", "name", ".", "replace", "(", "'jpg'", ",", "'txt'", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "label", "in", "labels", ":", "\n", "                    ", "obj_id", "=", "label", "[", "'id'", "]", "\n", "category", "=", "label", "[", "'category'", "]", "\n", "attributes", "=", "label", "[", "'attributes'", "]", "\n", "is_crowd", "=", "attributes", "[", "'crowd'", "]", "\n", "\n", "if", "filter_crowd", "and", "is_crowd", ":", "\n", "                        ", "continue", "\n", "", "if", "filter_ignore", "and", "(", "category", "not", "in", "attr_id_dict", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "box2d", "=", "label", "[", "'box2d'", "]", "\n", "x1", "=", "box2d", "[", "'x1'", "]", "\n", "x2", "=", "box2d", "[", "'x2'", "]", "\n", "y1", "=", "box2d", "[", "'y1'", "]", "\n", "y2", "=", "box2d", "[", "'y2'", "]", "\n", "w", "=", "x2", "-", "x1", "\n", "h", "=", "y2", "-", "y1", "\n", "cx", "=", "(", "x1", "+", "x2", ")", "/", "2", "\n", "cy", "=", "(", "y1", "+", "y2", ")", "/", "2", "\n", "label_str", "=", "'{:d} {:d} {:.6f} {:.6f} {:.6f} {:.6f}\\n'", ".", "format", "(", "\n", "cat2id", "[", "category", "]", ",", "int", "(", "obj_id", ")", ",", "cx", "/", "seq_width", ",", "cy", "/", "seq_height", ",", "w", "/", "seq_width", ",", "h", "/", "seq_height", ")", "\n", "f", ".", "write", "(", "label_str", ")", "\n", "# print(f'all categories are {all_categories}.')", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.gen_bdd100k_mot.generate_txt": [[73, 87], ["os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm", "os.listdir", "os.listdir.sort", "open", "os.path.join", "os.path.exists", "f.write", "os.path.join", "all_frames.append", "fid.replace"], "function", ["None"], ["", "", "", "", "", "def", "generate_txt", "(", "img_dir", ",", "label_dir", ",", "txt_path", "=", "'bdd100k.train'", ",", "split", "=", "'train'", ")", ":", "\n", "    ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "split", ")", "\n", "label_dir", "=", "os", ".", "path", ".", "join", "(", "label_dir", ",", "split", ")", "\n", "all_vids", "=", "os", ".", "listdir", "(", "img_dir", ")", "\n", "all_frames", "=", "[", "]", "\n", "for", "vid", "in", "tqdm", "(", "all_vids", ")", ":", "\n", "        ", "fids", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "vid", ")", ")", "\n", "fids", ".", "sort", "(", ")", "\n", "for", "fid", "in", "fids", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "label_dir", ",", "vid", ",", "fid", ".", "replace", "(", "'jpg'", ",", "'txt'", ")", ")", ")", ":", "\n", "                ", "all_frames", ".", "append", "(", "f'images/track/{split}/{vid}/{fid}'", ")", "\n", "", "", "", "with", "open", "(", "txt_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "frame", "in", "all_frames", ":", "\n", "            ", "f", ".", "write", "(", "frame", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.prepare.solve_MOT_train": [[6, 25], ["os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir.sort", "range", "os.path.join", "frames.append", "os.listdir.append", "len", "os.path.join"], "function", ["None"], ["def", "solve_MOT_train", "(", "root", ",", "year", ")", ":", "\n", "    ", "assert", "year", "in", "[", "15", ",", "16", ",", "17", "]", "\n", "dataset_path", "=", "'MOT{}/images/train'", ".", "format", "(", "year", ")", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset_path", ")", "\n", "if", "year", "==", "17", ":", "\n", "        ", "video_paths", "=", "[", "]", "\n", "for", "video_name", "in", "os", ".", "listdir", "(", "data_root", ")", ":", "\n", "            ", "if", "'SDP'", "in", "video_name", ":", "\n", "                ", "video_paths", ".", "append", "(", "video_name", ")", "\n", "", "", "", "else", ":", "\n", "        ", "video_paths", "=", "os", ".", "listdir", "(", "data_root", ")", "\n", "\n", "", "frames", "=", "[", "]", "\n", "for", "video_name", "in", "video_paths", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "video_name", ",", "'img1'", ")", ")", "\n", "files", ".", "sort", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "files", ")", "+", "1", ")", ":", "\n", "            ", "frames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "video_name", ",", "'img1'", ",", "'%06d.jpg'", "%", "i", ")", ")", "\n", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.prepare.solve_CUHK": [[27, 39], ["os.path.join", "os.listdir", "os.listdir.sort", "range", "os.path.join", "len", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "frames.append", "os.path.join"], "function", ["None"], ["", "def", "solve_CUHK", "(", "root", ")", ":", "\n", "    ", "dataset_path", "=", "'ethz/CUHK-SYSU'", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset_path", ")", "\n", "file_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'images'", ")", ")", "\n", "file_names", ".", "sort", "(", ")", "\n", "\n", "frames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "file_names", ")", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'ethz/CUHK-SYSU/labels_with_ids'", ",", "f's{i + 1}.txt'", ")", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'ethz/CUHK-SYSU/images'", ",", "f's{i + 1}.jpg'", ")", ")", ":", "\n", "                ", "frames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'ethz/CUHK-SYSU/images'", ",", "f's{i + 1}.jpg'", ")", ")", "\n", "", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.prepare.solve_ETHZ": [[40, 57], ["os.path.join", "os.listdir", "os.listdir", "os.listdir.sort", "video_paths.append", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "img_name.replace", "os.path.join", "frames.append", "os.path.join"], "function", ["None"], ["", "def", "solve_ETHZ", "(", "root", ")", ":", "\n", "    ", "dataset_path", "=", "'ethz/ETHZ'", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset_path", ")", "\n", "video_paths", "=", "[", "]", "\n", "for", "name", "in", "os", ".", "listdir", "(", "data_root", ")", ":", "\n", "        ", "if", "name", "not", "in", "[", "'eth01'", ",", "'eth03'", "]", ":", "\n", "            ", "video_paths", ".", "append", "(", "name", ")", "\n", "\n", "", "", "frames", "=", "[", "]", "\n", "for", "video_path", "in", "video_paths", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "video_path", ",", "'images'", ")", ")", "\n", "files", ".", "sort", "(", ")", "\n", "for", "img_name", "in", "files", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "video_path", ",", "'labels_with_ids'", ",", "img_name", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ")", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "video_path", ",", "'images'", ",", "img_name", ")", ")", ":", "\n", "                    ", "frames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "'ethz/ETHZ'", ",", "video_path", ",", "'images'", ",", "img_name", ")", ")", "\n", "", "", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.prepare.solve_PRW": [[59, 70], ["os.path.join", "os.listdir", "os.listdir.sort", "range", "os.path.join", "len", "os.path.exists", "os.path.join", "os.path.exists", "os.path.join", "frames.append", "os.path.join", "frame_paths[].split"], "function", ["None"], ["", "def", "solve_PRW", "(", "root", ")", ":", "\n", "    ", "dataset_path", "=", "'ethz/PRW'", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset_path", ")", "\n", "frame_paths", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'images'", ")", ")", "\n", "frame_paths", ".", "sort", "(", ")", "\n", "frames", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "frame_paths", ")", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'labels_with_ids'", ",", "frame_paths", "[", "i", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.txt'", ")", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'images'", ",", "frame_paths", "[", "i", "]", ")", ")", ":", "\n", "                ", "frames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'images'", ",", "frame_paths", "[", "i", "]", ")", ")", "\n", "", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.prepare.solve": [[82, 93], ["print", "print", "all_frames.extend", "open", "len", "f.writelines", "len"], "function", ["None"], ["def", "solve", "(", "dataset_list", ":", "List", "[", "str", "]", ",", "root", ",", "save_path", ")", ":", "\n", "    ", "all_frames", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "        ", "dataset_frames", "=", "dataset_catalog", "[", "dataset_name", "]", "(", "root", ")", "\n", "print", "(", "\"solve {} frames from dataset:{} \"", ".", "format", "(", "len", "(", "dataset_frames", ")", ",", "dataset_name", ")", ")", "\n", "all_frames", ".", "extend", "(", "dataset_frames", ")", "\n", "", "print", "(", "\"totally {} frames are solved.\"", ".", "format", "(", "len", "(", "all_frames", ")", ")", ")", "\n", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "u", "in", "all_frames", ":", "\n", "            ", "line", "=", "'{}'", ".", "format", "(", "u", ")", "+", "'\\n'", "\n", "f", ".", "writelines", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.data_path.gen_labels_16.mkdirs": [[4, 7], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdirs", "(", "d", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.__init__": [[36, 48], ["torchvision.datasets.vision.VisionDataset.__init__", "COCO", "list", "sorted", "coco.CocoDetection.cache_images", "coco.CocoDetection.coco.imgs.keys"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.cache_images"], ["        ", "img", ",", "target", "=", "super", "(", "CocoDetection", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "image_id", "=", "self", ".", "ids", "[", "idx", "]", "\n", "target", "=", "{", "'image_id'", ":", "image_id", ",", "'annotations'", ":", "target", "}", "\n", "img", ",", "target", "=", "self", ".", "prepare", "(", "img", ",", "target", ")", "\n", "if", "self", ".", "_transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "_transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n", "\n", "", "", "def", "convert_coco_poly_to_mask", "(", "segmentations", ",", "height", ",", "width", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "polygons", "in", "segmentations", ":", "\n", "        ", "rles", "=", "coco_mask", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.cache_images": [[49, 57], ["zip", "tqdm.trange", "len", "open", "f.read", "coco.CocoDetection.coco.loadImgs", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["mask", "=", "coco_mask", ".", "decode", "(", "rles", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "<", "3", ":", "\n", "            ", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "", "mask", "=", "torch", ".", "as_tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask", "=", "mask", ".", "any", "(", "dim", "=", "2", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "if", "masks", ":", "\n", "        ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.get_image": [[58, 65], ["PIL.Image.open().convert", "PIL.Image.open().convert", "coco.CocoDetection.cache.keys", "PIL.Image.open", "open", "f.read", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "io.BytesIO"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.BoxMode.convert", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.BoxMode.convert"], ["        ", "masks", "=", "torch", ".", "zeros", "(", "(", "0", ",", "height", ",", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "masks", "\n", "\n", "\n", "", "class", "ConvertCocoPolysToMask", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "return_masks", "=", "False", ")", ":", "\n", "        ", "self", ".", "return_masks", "=", "return_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.__getitem__": [[66, 85], ["coco.getAnnIds", "coco.loadAnns", "coco.CocoDetection.get_image", "coco.CocoDetection.transforms", "coco.loadImgs"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.get_image"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "image_id", "=", "target", "[", "\"image_id\"", "]", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "image_id", "]", ")", "\n", "\n", "anno", "=", "target", "[", "\"annotations\"", "]", "\n", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "'iscrowd'", "not", "in", "obj", "or", "obj", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "# guard against no boxes via resizing", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "boxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.torchvision_datasets.coco.CocoDetection.__len__": [[86, 88], ["len"], "methods", ["None"], ["if", "self", ".", "return_masks", ":", "\n", "            ", "segmentations", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "convert_coco_poly_to_mask", "(", "segmentations", ",", "h", ",", "w", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.tools.launch.parse_args": [[119, 160], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.tools.launch.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function parsing the command line options\n    @retval ArgumentParser\n    \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "\"PyTorch distributed training launch \"", "\n", "\"helper utilty that will spawn up \"", "\n", "\"multiple distributed processes\"", ")", "\n", "\n", "# Optional arguments for the launch helper", "\n", "parser", ".", "add_argument", "(", "\"--nnodes\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"The number of nodes to use for distributed \"", "\n", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--node_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"The rank of the node for multi-node distributed \"", "\n", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nproc_per_node\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"The number of processes to launch on each node, \"", "\n", "\"for GPU training, this is recommended to be set \"", "\n", "\"to the number of GPUs in your system so that \"", "\n", "\"each process can be bound to a single GPU.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_addr\"", ",", "default", "=", "\"127.0.0.1\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Master node (rank 0)'s address, should be either \"", "\n", "\"the IP address or the hostname of node 0, for \"", "\n", "\"single node multi-proc training, the \"", "\n", "\"--master_addr can simply be 127.0.0.1\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_port\"", ",", "default", "=", "29500", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Master node (rank 0)'s free port that needs to \"", "\n", "\"be used for communciation during distributed \"", "\n", "\"training\"", ")", "\n", "\n", "# positional", "\n", "parser", ".", "add_argument", "(", "\"training_script\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The full path to the single GPU training \"", "\n", "\"program/script to be launched in parallel, \"", "\n", "\"followed by all the arguments for the \"", "\n", "\"training script\"", ")", "\n", "\n", "# rest from the training program", "\n", "parser", ".", "add_argument", "(", "'training_script_args'", ",", "nargs", "=", "REMAINDER", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.tools.launch.main": [[162, 192], ["launch.parse_args", "os.environ.copy", "str", "str", "range", "str", "str", "subprocess.Popen", "processes.append", "subprocess.Popen.wait", "subprocess.CalledProcessError"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.tools.launch.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "# world size in terms of number of processes", "\n", "dist_world_size", "=", "args", ".", "nproc_per_node", "*", "args", ".", "nnodes", "\n", "\n", "# set PyTorch distributed related environmental variables", "\n", "current_env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "current_env", "[", "\"MASTER_ADDR\"", "]", "=", "args", ".", "master_addr", "\n", "current_env", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "args", ".", "master_port", ")", "\n", "current_env", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "dist_world_size", ")", "\n", "\n", "processes", "=", "[", "]", "\n", "\n", "for", "local_rank", "in", "range", "(", "0", ",", "args", ".", "nproc_per_node", ")", ":", "\n", "# each process's rank", "\n", "        ", "dist_rank", "=", "args", ".", "nproc_per_node", "*", "args", ".", "node_rank", "+", "local_rank", "\n", "current_env", "[", "\"RANK\"", "]", "=", "str", "(", "dist_rank", ")", "\n", "current_env", "[", "\"LOCAL_RANK\"", "]", "=", "str", "(", "local_rank", ")", "\n", "\n", "cmd", "=", "[", "args", ".", "training_script", "]", "+", "args", ".", "training_script_args", "\n", "\n", "process", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "env", "=", "current_env", ")", "\n", "processes", ".", "append", "(", "process", ")", "\n", "\n", "", "for", "process", "in", "processes", ":", "\n", "        ", "process", ".", "wait", "(", ")", "\n", "if", "process", ".", "returncode", "!=", "0", ":", "\n", "            ", "raise", "subprocess", ".", "CalledProcessError", "(", "returncode", "=", "process", ".", "returncode", ",", "\n", "cmd", "=", "process", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.plot_utils.plot_logs": [[27, 81], ["enumerate", "matplotlib.subplots", "zip", "zip", "isinstance", "isinstance", "dir.exists", "ValueError", "pandas.read_json", "seaborn.color_palette", "enumerate", "ax.legend", "ax.set_title", "print", "ValueError", "isinstance", "ValueError", "len", "pathlib.Path", "len", "pandas.DataFrame().ewm().mean", "axs[].plot", "df.interpolate().ewm().mean().plot", "pathlib.Path", "type", "type", "pandas.DataFrame().ewm", "df.interpolate().ewm().mean", "pandas.DataFrame", "df.interpolate().ewm", "pandas.np.stack", "df.interpolate", "df.test_coco_eval.dropna"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["def", "plot_logs", "(", "logs", ",", "fields", "=", "(", "'class_error'", ",", "'loss_bbox_unscaled'", ",", "'mAP'", ")", ",", "ewm_col", "=", "0", ",", "log_name", "=", "'log.txt'", ")", ":", "\n", "    ", "'''\n    Function to plot specific fields from training log(s). Plots both training and test results.\n\n    :: Inputs - logs = list containing Path objects, each pointing to individual dir with a log file\n              - fields = which results to plot from each log file - plots both training and test for each field.\n              - ewm_col = optional, which column to use as the exponential weighted smoothing of the plots\n              - log_name = optional, name of log file if different than default 'log.txt'.\n\n    :: Outputs - matplotlib plots of results in fields, color coded for each log file.\n               - solid lines are training results, dashed lines are test results.\n\n    '''", "\n", "func_name", "=", "\"plot_utils.py::plot_logs\"", "\n", "\n", "# verify logs is a list of Paths (list[Paths]) or single Pathlib object Path,", "\n", "# convert single Path to list to avoid 'not iterable' error", "\n", "\n", "if", "not", "isinstance", "(", "logs", ",", "list", ")", ":", "\n", "        ", "if", "isinstance", "(", "logs", ",", "PurePath", ")", ":", "\n", "            ", "logs", "=", "[", "logs", "]", "\n", "print", "(", "f\"{func_name} info: logs param expects a list argument, converted to list[Path].\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{func_name} - invalid argument for logs parameter.\\n \\\n            Expect list[Path] or single Path obj, received {type(logs)}\"", ")", "\n", "\n", "# verify valid dir(s) and that every item in list is Path object", "\n", "", "", "for", "i", ",", "dir", "in", "enumerate", "(", "logs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dir", ",", "PurePath", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{func_name} - non-Path object in logs argument of {type(dir)}: \\n{dir}\"", ")", "\n", "", "if", "dir", ".", "exists", "(", ")", ":", "\n", "            ", "continue", "\n", "", "raise", "ValueError", "(", "f\"{func_name} - invalid directory in logs argument:\\n{dir}\"", ")", "\n", "\n", "# load log file(s) and plot", "\n", "", "dfs", "=", "[", "pd", ".", "read_json", "(", "Path", "(", "p", ")", "/", "log_name", ",", "lines", "=", "True", ")", "for", "p", "in", "logs", "]", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "ncols", "=", "len", "(", "fields", ")", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "\n", "for", "df", ",", "color", "in", "zip", "(", "dfs", ",", "sns", ".", "color_palette", "(", "n_colors", "=", "len", "(", "logs", ")", ")", ")", ":", "\n", "        ", "for", "j", ",", "field", "in", "enumerate", "(", "fields", ")", ":", "\n", "            ", "if", "field", "==", "'mAP'", ":", "\n", "                ", "coco_eval", "=", "pd", ".", "DataFrame", "(", "pd", ".", "np", ".", "stack", "(", "df", ".", "test_coco_eval", ".", "dropna", "(", ")", ".", "values", ")", "[", ":", ",", "1", "]", ")", ".", "ewm", "(", "com", "=", "ewm_col", ")", ".", "mean", "(", ")", "\n", "axs", "[", "j", "]", ".", "plot", "(", "coco_eval", ",", "c", "=", "color", ")", "\n", "", "else", ":", "\n", "                ", "df", ".", "interpolate", "(", ")", ".", "ewm", "(", "com", "=", "ewm_col", ")", ".", "mean", "(", ")", ".", "plot", "(", "\n", "y", "=", "[", "f'train_{field}'", ",", "f'test_{field}'", "]", ",", "\n", "ax", "=", "axs", "[", "j", "]", ",", "\n", "color", "=", "[", "color", "]", "*", "2", ",", "\n", "style", "=", "[", "'-'", ",", "'--'", "]", "\n", ")", "\n", "", "", "", "for", "ax", ",", "field", "in", "zip", "(", "axs", ",", "fields", ")", ":", "\n", "        ", "ax", ".", "legend", "(", "[", "Path", "(", "p", ")", ".", "name", "for", "p", "in", "logs", "]", ")", "\n", "ax", ".", "set_title", "(", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.plot_utils.plot_precision_recall": [[83, 115], ["matplotlib.subplots", "zip", "axs[].set_title", "axs[].legend", "axs[].set_title", "axs[].legend", "seaborn.color_palette", "torch.load", "precision[].mean", "scores[].mean", "precision[].mean.mean", "[].mean", "print", "axs[].plot", "axs[].plot", "ValueError", "len", "scores[].mean.mean"], "function", ["None"], ["", "", "def", "plot_precision_recall", "(", "files", ",", "naming_scheme", "=", "'iter'", ")", ":", "\n", "    ", "if", "naming_scheme", "==", "'exp_id'", ":", "\n", "# name becomes exp_id", "\n", "        ", "names", "=", "[", "f", ".", "parts", "[", "-", "3", "]", "for", "f", "in", "files", "]", "\n", "", "elif", "naming_scheme", "==", "'iter'", ":", "\n", "        ", "names", "=", "[", "f", ".", "stem", "for", "f", "in", "files", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'not supported {naming_scheme}'", ")", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "ncols", "=", "2", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "for", "f", ",", "color", ",", "name", "in", "zip", "(", "files", ",", "sns", ".", "color_palette", "(", "\"Blues\"", ",", "n_colors", "=", "len", "(", "files", ")", ")", ",", "names", ")", ":", "\n", "        ", "data", "=", "torch", ".", "load", "(", "f", ")", "\n", "# precision is n_iou, n_points, n_cat, n_area, max_det", "\n", "precision", "=", "data", "[", "'precision'", "]", "\n", "recall", "=", "data", "[", "'params'", "]", ".", "recThrs", "\n", "scores", "=", "data", "[", "'scores'", "]", "\n", "# take precision for all classes, all areas and 100 detections", "\n", "precision", "=", "precision", "[", "0", ",", ":", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", "1", ")", "\n", "scores", "=", "scores", "[", "0", ",", ":", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", "1", ")", "\n", "prec", "=", "precision", ".", "mean", "(", ")", "\n", "rec", "=", "data", "[", "'recall'", "]", "[", "0", ",", ":", ",", "0", ",", "-", "1", "]", ".", "mean", "(", ")", "\n", "print", "(", "f'{naming_scheme} {name}: mAP@50={prec * 100: 05.1f}, '", "+", "\n", "f'score={scores.mean():0.3f}, '", "+", "\n", "f'f1={2 * prec * rec / (prec + rec + 1e-8):0.3f}'", "\n", ")", "\n", "axs", "[", "0", "]", ".", "plot", "(", "recall", ",", "precision", ",", "c", "=", "color", ")", "\n", "axs", "[", "1", "]", ".", "plot", "(", "recall", ",", "scores", ",", "c", "=", "color", ")", "\n", "\n", "", "axs", "[", "0", "]", ".", "set_title", "(", "'Precision / Recall'", ")", "\n", "axs", "[", "0", "]", ".", "legend", "(", "names", ")", "\n", "axs", "[", "1", "]", ".", "set_title", "(", "'Scores / Recall'", ")", "\n", "axs", "[", "1", "]", ".", "legend", "(", "names", ")", "\n", "return", "fig", ",", "axs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.plot_utils.draw_boxes": [[117, 139], ["isinstance", "isinstance", "max", "range", "image.detach().cpu().numpy", "boxes.detach().cpu().numpy", "round", "len", "cv2.rectangle", "cv2.putText", "image.detach().cpu", "boxes.detach().cpu", "max", "int", "int", "int", "int", "int", "int", "image.detach", "boxes.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "draw_boxes", "(", "image", ":", "Tensor", ",", "boxes", ":", "Tensor", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "texts", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "isinstance", "(", "image", ",", "Tensor", ")", ":", "\n", "        ", "cv_image", "=", "image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "cv_image", "=", "image", "\n", "", "if", "isinstance", "(", "boxes", ",", "Tensor", ")", ":", "\n", "        ", "cv_boxes", "=", "boxes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "cv_boxes", "=", "boxes", "\n", "\n", "", "tl", "=", "round", "(", "0.002", "*", "max", "(", "image", ".", "shape", "[", "0", ":", "2", "]", ")", ")", "+", "1", "# line thickness", "\n", "tf", "=", "max", "(", "tl", "-", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "box", "=", "cv_boxes", "[", "i", "]", "\n", "x1", ",", "y1", "=", "box", "[", "0", ":", "2", "]", "\n", "x2", ",", "y2", "=", "box", "[", "2", ":", "4", "]", "\n", "cv2", ".", "rectangle", "(", "cv_image", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", ")", ")", ",", "(", "int", "(", "x2", ")", ",", "int", "(", "y2", ")", ")", ",", "color", "=", "color", ")", "\n", "if", "texts", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "cv_image", ",", "texts", "[", "i", "]", ",", "(", "int", "(", "x1", ")", ",", "int", "(", "y1", "+", "10", ")", ")", ",", "0", ",", "tl", "/", "3", ",", "[", "225", ",", "255", ",", "255", "]", ",", "\n", "thickness", "=", "tf", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "cv_image", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.plot_utils.draw_ref_pts": [[141, 155], ["isinstance", "isinstance", "range", "image.detach().cpu().numpy", "ref_pts.detach().cpu().numpy", "len", "cv2.circle", "image.detach().cpu", "ref_pts.detach().cpu", "int", "int", "image.detach", "ref_pts.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "def", "draw_ref_pts", "(", "image", ":", "Tensor", ",", "ref_pts", ":", "Tensor", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "if", "isinstance", "(", "image", ",", "Tensor", ")", ":", "\n", "        ", "cv_image", "=", "image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "cv_image", "=", "image", "\n", "", "if", "isinstance", "(", "ref_pts", ",", "Tensor", ")", ":", "\n", "        ", "cv_pts", "=", "ref_pts", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "cv_pts", "=", "ref_pts", "\n", "", "for", "i", "in", "range", "(", "len", "(", "cv_pts", ")", ")", ":", "\n", "        ", "x", ",", "y", ",", "is_pos", "=", "cv_pts", "[", "i", "]", "\n", "color", "=", "(", "0", ",", "1", ",", "0", ")", "if", "is_pos", "else", "(", "1", ",", "1", ",", "1", ")", "\n", "cv2", ".", "circle", "(", "cv_image", ",", "(", "int", "(", "x", ")", ",", "int", "(", "y", ")", ")", ",", "2", ",", "color", ")", "\n", "", "return", "cv_image", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.plot_utils.image_hwc2chw": [[157, 160], ["numpy.ascontiguousarray", "np.ascontiguousarray.transpose"], "function", ["None"], ["", "def", "image_hwc2chw", "(", "image", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "image", "=", "np", ".", "ascontiguousarray", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.tool.load_model": [[15, 71], ["torch.load", "print", "model.state_dict", "model.load_state_dict", "print", "print", "optimizer.load_state_dict", "print", "print", "print", "print", "NotImplementedError"], "function", ["None"], ["def", "load_model", "(", "model", ",", "model_path", ",", "optimizer", "=", "None", ",", "resume", "=", "False", ",", "\n", "lr", "=", "None", ",", "lr_step", "=", "None", ")", ":", "\n", "    ", "start_epoch", "=", "0", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "print", "(", "f'loaded {model_path}'", ")", "\n", "state_dict", "=", "checkpoint", "[", "'model'", "]", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# check loaded parameters and created model parameters", "\n", "msg", "=", "'If you see this, your model does not fully load the '", "+", "'pre-trained weight. Please make sure '", "+", "'you set the correct --num_classes for your own dataset.'", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "if", "k", "in", "model_state_dict", ":", "\n", "            ", "if", "state_dict", "[", "k", "]", ".", "shape", "!=", "model_state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "'Skip loading parameter {}, required shape{}, '", "'loaded shape{}. {}'", ".", "format", "(", "\n", "k", ",", "model_state_dict", "[", "k", "]", ".", "shape", ",", "state_dict", "[", "k", "]", ".", "shape", ",", "msg", ")", ")", "\n", "if", "'class_embed'", "in", "k", ":", "\n", "                    ", "print", "(", "\"load class_embed: {} shape={}\"", ".", "format", "(", "k", ",", "state_dict", "[", "k", "]", ".", "shape", ")", ")", "\n", "if", "model_state_dict", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                        ", "state_dict", "[", "k", "]", "=", "state_dict", "[", "k", "]", "[", "1", ":", "2", "]", "\n", "", "elif", "model_state_dict", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "2", ":", "\n", "                        ", "state_dict", "[", "k", "]", "=", "state_dict", "[", "k", "]", "[", "1", ":", "3", "]", "\n", "", "elif", "model_state_dict", "[", "k", "]", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "                        ", "state_dict", "[", "k", "]", "=", "state_dict", "[", "k", "]", "[", "1", ":", "4", "]", "\n", "", "else", ":", "\n", "                        ", "raise", "NotImplementedError", "(", "'invalid shape: {}'", ".", "format", "(", "model_state_dict", "[", "k", "]", ".", "shape", ")", ")", "\n", "", "continue", "\n", "", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Drop parameter {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "", "", "for", "k", "in", "model_state_dict", ":", "\n", "        ", "if", "not", "(", "k", "in", "state_dict", ")", ":", "\n", "            ", "print", "(", "'No param {}.'", ".", "format", "(", "k", ")", "+", "msg", ")", "\n", "state_dict", "[", "k", "]", "=", "model_state_dict", "[", "k", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "# resume optimizer parameters", "\n", "if", "optimizer", "is", "not", "None", "and", "resume", ":", "\n", "        ", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "start_lr", "=", "lr", "\n", "for", "step", "in", "lr_step", ":", "\n", "                ", "if", "start_epoch", ">=", "step", ":", "\n", "                    ", "start_lr", "*=", "0.1", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "start_lr", "\n", "", "print", "(", "'Resumed optimizer with start lr'", ",", "start_lr", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No optimizer parameters in checkpoint.'", ")", "\n", "", "", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "return", "model", ",", "optimizer", ",", "start_epoch", "\n", "", "else", ":", "\n", "        ", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.ap_per_class": [[16, 68], ["numpy.argsort", "numpy.unique", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "sum", "sum", "numpy.array", "np.unique.astype", "numpy.array", "numpy.array", "ap.append", "r.append", "p.append", "numpy.cumsum", "numpy.cumsum", "r.append", "p.append", "ap.append", "motdet_eval.compute_ap"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.compute_ap"], ["def", "ap_per_class", "(", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Method originally from https://github.com/rafaelpadilla/Object-Detection-Metrics.\n    # Arguments\n        tp:    True positives (list).\n        conf:  Objectness value from 0-1 (list).\n        pred_cls: Predicted object classes (list).\n        target_cls: True object classes (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "\n", "# lists/pytorch to numpy", "\n", "tp", ",", "conf", ",", "pred_cls", ",", "target_cls", "=", "np", ".", "array", "(", "tp", ")", ",", "np", ".", "array", "(", "conf", ")", ",", "np", ".", "array", "(", "pred_cls", ")", ",", "np", ".", "array", "(", "target_cls", ")", "\n", "\n", "# Sort by objectness", "\n", "i", "=", "np", ".", "argsort", "(", "-", "conf", ")", "\n", "tp", ",", "conf", ",", "pred_cls", "=", "tp", "[", "i", "]", ",", "conf", "[", "i", "]", ",", "pred_cls", "[", "i", "]", "\n", "\n", "# Find unique classes", "\n", "unique_classes", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_cls", ",", "target_cls", ")", ",", "0", ")", ")", "\n", "\n", "# Create Precision-Recall curve and compute AP for each class", "\n", "ap", ",", "p", ",", "r", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "unique_classes", ":", "\n", "        ", "i", "=", "pred_cls", "==", "c", "\n", "n_gt", "=", "sum", "(", "target_cls", "==", "c", ")", "# Number of ground truth objects", "\n", "n_p", "=", "sum", "(", "i", ")", "# Number of predicted objects", "\n", "\n", "if", "(", "n_p", "==", "0", ")", "and", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "elif", "(", "n_p", "==", "0", ")", "or", "(", "n_gt", "==", "0", ")", ":", "\n", "            ", "ap", ".", "append", "(", "0", ")", "\n", "r", ".", "append", "(", "0", ")", "\n", "p", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "# Accumulate FPs and TPs", "\n", "            ", "fpc", "=", "np", ".", "cumsum", "(", "1", "-", "tp", "[", "i", "]", ")", "\n", "tpc", "=", "np", ".", "cumsum", "(", "tp", "[", "i", "]", ")", "\n", "\n", "# Recall", "\n", "recall_curve", "=", "tpc", "/", "(", "n_gt", "+", "1e-16", ")", "\n", "r", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "n_gt", "+", "1e-16", ")", ")", "\n", "\n", "# Precision", "\n", "precision_curve", "=", "tpc", "/", "(", "tpc", "+", "fpc", ")", "\n", "p", ".", "append", "(", "tpc", "[", "-", "1", "]", "/", "(", "tpc", "[", "-", "1", "]", "+", "fpc", "[", "-", "1", "]", ")", ")", "\n", "\n", "# AP from recall-precision curve", "\n", "ap", ".", "append", "(", "compute_ap", "(", "recall_curve", ",", "precision_curve", ")", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "ap", ")", ",", "unique_classes", ".", "astype", "(", "'int32'", ")", ",", "np", ".", "array", "(", "r", ")", ",", "np", ".", "array", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.compute_ap": [[69, 95], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where"], "function", ["None"], ["", "def", "compute_ap", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "\"\"\" Compute the average precision, given the recall and precision curves.\n    Code originally from https://github.com/rbgirshick/py-faster-rcnn.\n    # Arguments\n        recall:    The recall curve (list).\n        precision: The precision curve (list).\n    # Returns\n        The average precision as computed in py-faster-rcnn.\n    \"\"\"", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recall", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precision", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou": [[97, 125], ["torch.max", "torch.max", "torch.min", "torch.min", "len", "len", "b1_x1.unsqueeze", "b1_y1.unsqueeze", "b1_x2.unsqueeze", "b1_y2.unsqueeze", "torch.clamp", "torch.clamp"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the IoU of two bounding boxes\n    \"\"\"", "\n", "N", ",", "M", "=", "len", "(", "box1", ")", ",", "len", "(", "box2", ")", "\n", "if", "x1y1x2y2", ":", "\n", "# Get the coordinates of bounding boxes", "\n", "        ", "b1_x1", ",", "b1_y1", ",", "b1_x2", ",", "b1_y2", "=", "box1", "[", ":", ",", "0", "]", ",", "box1", "[", ":", ",", "1", "]", ",", "box1", "[", ":", ",", "2", "]", ",", "box1", "[", ":", ",", "3", "]", "\n", "b2_x1", ",", "b2_y1", ",", "b2_x2", ",", "b2_y2", "=", "box2", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "# Transform from center and width to exact coordinates", "\n", "        ", "b1_x1", ",", "b1_x2", "=", "box1", "[", ":", ",", "0", "]", "-", "box1", "[", ":", ",", "2", "]", "/", "2", ",", "box1", "[", ":", ",", "0", "]", "+", "box1", "[", ":", ",", "2", "]", "/", "2", "\n", "b1_y1", ",", "b1_y2", "=", "box1", "[", ":", ",", "1", "]", "-", "box1", "[", ":", ",", "3", "]", "/", "2", ",", "box1", "[", ":", ",", "1", "]", "+", "box1", "[", ":", ",", "3", "]", "/", "2", "\n", "b2_x1", ",", "b2_x2", "=", "box2", "[", ":", ",", "0", "]", "-", "box2", "[", ":", ",", "2", "]", "/", "2", ",", "box2", "[", ":", ",", "0", "]", "+", "box2", "[", ":", ",", "2", "]", "/", "2", "\n", "b2_y1", ",", "b2_y2", "=", "box2", "[", ":", ",", "1", "]", "-", "box2", "[", ":", ",", "3", "]", "/", "2", ",", "box2", "[", ":", ",", "1", "]", "+", "box2", "[", ":", ",", "3", "]", "/", "2", "\n", "\n", "# get the coordinates of the intersection rectangle", "\n", "", "inter_rect_x1", "=", "torch", ".", "max", "(", "b1_x1", ".", "unsqueeze", "(", "1", ")", ",", "b2_x1", ")", "\n", "inter_rect_y1", "=", "torch", ".", "max", "(", "b1_y1", ".", "unsqueeze", "(", "1", ")", ",", "b2_y1", ")", "\n", "inter_rect_x2", "=", "torch", ".", "min", "(", "b1_x2", ".", "unsqueeze", "(", "1", ")", ",", "b2_x2", ")", "\n", "inter_rect_y2", "=", "torch", ".", "min", "(", "b1_y2", ".", "unsqueeze", "(", "1", ")", ",", "b2_y2", ")", "\n", "# Intersection area", "\n", "inter_area", "=", "torch", ".", "clamp", "(", "inter_rect_x2", "-", "inter_rect_x1", ",", "0", ")", "*", "torch", ".", "clamp", "(", "inter_rect_y2", "-", "inter_rect_y1", ",", "0", ")", "\n", "# Union Area", "\n", "b1_area", "=", "(", "(", "b1_x2", "-", "b1_x1", ")", "*", "(", "b1_y2", "-", "b1_y1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "b2_area", "=", "(", "(", "b2_x2", "-", "b2_x1", ")", "*", "(", "b2_y2", "-", "b2_y1", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "N", ",", "M", ")", "\n", "\n", "return", "inter_area", "/", "(", "b1_area", "+", "b2_area", "-", "inter_area", "+", "1e-16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xyxy2xywh": [[126, 134], ["torch.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "y", "[", ":", ",", "2", "]", "=", "x", "[", ":", ",", "2", "]", "-", "x", "[", ":", ",", "0", "]", "\n", "y", "[", ":", ",", "3", "]", "=", "x", "[", ":", ",", "3", "]", "-", "x", "[", ":", ",", "1", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xywh2xyxy": [[136, 144], ["torch.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "xywh2xyxy", "(", "x", ")", ":", "\n", "# Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "    ", "y", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ")", "if", "x", ".", "dtype", "is", "torch", ".", "float32", "else", "np", ".", "zeros", "(", "x", ".", "shape", ")", "\n", "y", "[", ":", ",", "0", "]", "=", "(", "x", "[", ":", ",", "0", "]", "-", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "1", "]", "=", "(", "x", "[", ":", ",", "1", "]", "-", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "2", "]", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "2", "]", "/", "2", ")", "\n", "y", "[", ":", ",", "3", "]", "=", "(", "x", "[", ":", ",", "1", "]", "+", "x", "[", ":", ",", "3", "]", "/", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.motdet_evaluate": [[146, 257], ["torch.no_grad", "model.eval", "print", "enumerate", "print", "print", "numpy.zeros", "numpy.zeros", "data[].decompose", "targets[].cpu().numpy().tolist", "time.time", "model", "output[].squeeze", "output[].squeeze", "motdet_eval.ap_per_class", "numpy.bincount", "numpy.bincount", "mAPs.append", "mR.append", "mP.append", "imgs.cuda", "outputs_class.unsqueeze.unsqueeze", "xywh2xyxy.size", "motdet_eval.xywh2xyxy", "motdet_eval.xywh2xyxy", "set", "print", "print", "zip", "print", "AP.mean", "R.mean", "P.mean", "numpy.sum", "numpy.sum", "numpy.sum", "print", "targets[].cpu().numpy", "xywh2xyxy.size", "mAPs.append", "mR.append", "mP.append", "torch.FloatTensor().view", "numpy.argmax", "outputs_class[].cpu", "numpy.zeros_like", "mAPs.append", "mR.append", "mP.append", "conf.sigmoid", "motdet_eval.bbox_iou", "correct.append", "set.add", "correct.append", "outputs_class[].cpu", "targets[].cpu", "torch.FloatTensor", "int", "np.argmax.item", "conf.sigmoid", "np.argmax.item", "max", "max", "outputs_class.unsqueeze.sigmoid", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.ap_per_class", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xywh2xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xywh2xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "motdet_evaluate", "(", "model", ",", "data_loader", ",", "iou_thres", "=", "0.5", ",", "print_interval", "=", "10", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "mean_mAP", ",", "mean_R", ",", "mean_P", ",", "seen", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0", "\n", "print", "(", "'%11s'", "*", "5", "%", "(", "'Image'", ",", "'Total'", ",", "'P'", ",", "'R'", ",", "'mAP'", ")", ")", "\n", "outputs", ",", "mAPs", ",", "mR", ",", "mP", ",", "TP", ",", "confidence", ",", "pred_class", ",", "target_class", ",", "jdict", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "AP_accum", ",", "AP_accum_count", "=", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "1", ")", "\n", "for", "batch_i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "seen", "+=", "1", "\n", "if", "(", "batch_i", ">", "300", ")", ":", "\n", "            ", "break", "\n", "# [batch_size x 3 x H x W]", "\n", "", "imgs", ",", "_", "=", "data", "[", "0", "]", ".", "decompose", "(", ")", "\n", "# print(\"imgs.shape={}\".format(imgs.shape))", "\n", "#dict{'boxes':cxcywh_norm 'labels', size, orig_size}", "\n", "targets", "=", "data", "[", "1", "]", "[", "0", "]", "\n", "# img_path = data[2]", "\n", "height", ",", "width", "=", "targets", "[", "'orig_size'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "output", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "\n", "outputs_class", "=", "output", "[", "'pred_logits'", "]", ".", "squeeze", "(", ")", "\n", "if", "outputs_class", ".", "ndim", "==", "1", ":", "\n", "# focal_loss", "\n", "            ", "outputs_class", "=", "outputs_class", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "outputs_boxes", "=", "output", "[", "'pred_boxes'", "]", ".", "squeeze", "(", ")", "\n", "target_boxes", "=", "targets", "[", "'boxes'", "]", "\n", "\n", "# Compute average precision", "\n", "if", "target_boxes", "is", "None", ":", "\n", "# If there are labels but no detections mark as zero AP", "\n", "            ", "if", "target_boxes", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "                ", "mAPs", ".", "append", "(", "0", ")", ",", "mR", ".", "append", "(", "0", ")", ",", "mP", ".", "append", "(", "0", ")", "\n", "", "continue", "\n", "\n", "# If no labels add number of detections as incorrect", "\n", "", "correct", "=", "[", "]", "\n", "if", "target_boxes", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "# correct.extend([0 for _ in range(len(detections))])", "\n", "            ", "mAPs", ".", "append", "(", "0", ")", ",", "mR", ".", "append", "(", "0", ")", ",", "mP", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "target_cls", "=", "targets", "[", "'labels'", "]", "\n", "# Extract target boxes as (x1, y1, x2, y2)", "\n", "target_boxes", "=", "xywh2xyxy", "(", "target_boxes", ")", "\n", "target_boxes", "[", ":", ",", "0", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "2", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "1", "]", "*=", "height", "\n", "target_boxes", "[", ":", ",", "3", "]", "*=", "height", "\n", "\n", "outputs_boxes", "=", "xywh2xyxy", "(", "outputs_boxes", ")", "\n", "outputs_boxes", "[", ":", ",", "0", "]", "*=", "width", "\n", "outputs_boxes", "[", ":", ",", "2", "]", "*=", "width", "\n", "outputs_boxes", "[", ":", ",", "1", "]", "*=", "height", "\n", "outputs_boxes", "[", ":", ",", "3", "]", "*=", "height", "\n", "\n", "detected", "=", "set", "(", ")", "\n", "print", "(", "\"output_boxes.shape={} class.shape={}\"", ".", "format", "(", "outputs_boxes", ".", "shape", ",", "outputs_class", ".", "shape", ")", ")", "\n", "print", "(", "(", "outputs_class", ".", "sigmoid", "(", ")", ">", "0.5", ")", ".", "sum", "(", ")", ")", "\n", "num_dt", "=", "0", "\n", "num_tp", "=", "0", "\n", "for", "*", "pred_bbox", ",", "conf", "in", "zip", "(", "outputs_boxes", ",", "outputs_class", ")", ":", "\n", "                ", "obj_pred", "=", "0", "\n", "pred_bbox", "=", "torch", ".", "FloatTensor", "(", "pred_bbox", "[", "0", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "if", "conf", ".", "sigmoid", "(", ")", ">", "0.5", ":", "\n", "                    ", "num_dt", "+=", "1", "\n", "\n", "# Compute iou with target boxes", "\n", "", "iou", "=", "bbox_iou", "(", "pred_bbox", ",", "target_boxes", ",", "x1y1x2y2", "=", "True", ")", "[", "0", "]", "\n", "# Extract index of largest overlap", "\n", "best_i", "=", "np", ".", "argmax", "(", "iou", ")", "\n", "# If overlap exceeds threshold and classification is correct mark as correct", "\n", "if", "iou", "[", "best_i", "]", ">", "iou_thres", "and", "obj_pred", "==", "int", "(", "target_cls", "[", "best_i", "]", ")", "and", "best_i", ".", "item", "(", ")", "not", "in", "detected", ":", "\n", "                    ", "correct", ".", "append", "(", "1", ")", "\n", "if", "conf", ".", "sigmoid", "(", ")", ">", "0.5", ":", "\n", "                        ", "num_tp", "+=", "1", "\n", "", "detected", ".", "add", "(", "best_i", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "correct", ".", "append", "(", "0", ")", "\n", "", "", "print", "(", "\"precision={} recall={}\"", ".", "format", "(", "num_tp", "/", "max", "(", "1.0", ",", "num_dt", ")", ",", "num_tp", "/", "max", "(", "1.0", ",", "len", "(", "target_boxes", ")", ")", ")", ")", "\n", "# Compute Average Precision (AP) per class", "\n", "", "AP", ",", "AP_class", ",", "R", ",", "P", "=", "ap_per_class", "(", "tp", "=", "correct", ",", "\n", "conf", "=", "outputs_class", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ",", "\n", "pred_cls", "=", "np", ".", "zeros_like", "(", "outputs_class", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ",", "\n", "target_cls", "=", "target_cls", ")", "\n", "\n", "# Accumulate AP per class", "\n", "AP_accum_count", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "1", ")", "\n", "AP_accum", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "1", ",", "weights", "=", "AP", ")", "\n", "\n", "# Compute mean AP across all classes in this image, and append to image list", "\n", "mAPs", ".", "append", "(", "AP", ".", "mean", "(", ")", ")", "\n", "mR", ".", "append", "(", "R", ".", "mean", "(", ")", ")", "\n", "mP", ".", "append", "(", "P", ".", "mean", "(", ")", ")", "\n", "\n", "# Means of all images", "\n", "mean_mAP", "=", "np", ".", "sum", "(", "mAPs", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "mean_R", "=", "np", ".", "sum", "(", "mR", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "mean_P", "=", "np", ".", "sum", "(", "mP", ")", "/", "(", "AP_accum_count", "+", "1E-16", ")", "\n", "\n", "if", "batch_i", "%", "print_interval", "==", "0", ":", "\n", "# Print image mAP and running mean mAP", "\n", "            ", "print", "(", "(", "'%11s%11s'", "+", "'%11.3g'", "*", "4", "+", "'s'", ")", "%", "\n", "(", "seen", ",", "100", ",", "mean_P", ",", "mean_R", ",", "mean_mAP", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "# Print mAP per class", "\n", "", "", "print", "(", "'%11s'", "*", "5", "%", "(", "'Image'", ",", "'Total'", ",", "'P'", ",", "'R'", ",", "'mAP'", ")", ")", "\n", "\n", "print", "(", "'AP: %-.4f\\n\\n'", "%", "(", "AP_accum", "[", "0", "]", "/", "(", "AP_accum_count", "[", "0", "]", "+", "1E-16", ")", ")", ")", "\n", "\n", "# Return mAP", "\n", "return", "mean_mAP", ",", "mean_R", ",", "mean_P", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.init_metrics": [[259, 278], ["numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "init_metrics", "(", ")", ":", "\n", "    ", "mean_mAP", ",", "mean_R", ",", "mean_P", ",", "seen", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0", "\n", "outputs", ",", "mAPs", ",", "mR", ",", "mP", ",", "TP", ",", "confidence", ",", "pred_class", ",", "target_class", ",", "jdict", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "AP_accum", ",", "AP_accum_count", "=", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "1", ")", "\n", "return", "{", "'mean_mAP'", ":", "mean_mAP", ",", "\n", "'mean_R'", ":", "mean_R", ",", "\n", "'mean_P'", ":", "mean_P", ",", "\n", "'seen'", ":", "seen", ",", "\n", "'outputs'", ":", "outputs", ",", "\n", "'mAPs'", ":", "mAPs", ",", "\n", "'mR'", ":", "mR", ",", "\n", "'mP'", ":", "mP", ",", "\n", "'TP'", ":", "TP", ",", "\n", "'confidence'", ":", "confidence", ",", "\n", "'pred_class'", ":", "pred_class", ",", "\n", "'target_class'", ":", "target_class", ",", "\n", "'jdict'", ":", "jdict", ",", "\n", "'AP_accum'", ":", "AP_accum", ",", "\n", "'AP_accum_count'", ":", "AP_accum_count", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.detmotdet_evaluate": [[281, 403], ["torch.no_grad", "model.eval", "print", "enumerate", "range", "motdet_eval.init_metrics", "list", "model", "len", "range", "ret.append", "ret.append", "ret.append", "range", "data.keys", "isinstance", "[].to", "time.time", "[].squeeze", "[].squeeze", "motdet_eval.ap_per_class", "numpy.bincount", "numpy.bincount", "metrics_i[].append", "metrics_i[].append", "metrics_i[].append", "data[].to", "torch.device", "outputs_class.unsqueeze.unsqueeze", "xywh2xyxy.size", "metrics_i[].append", "metrics_i[].append", "metrics_i[].apppend", "print", "motdet_eval.xywh2xyxy", "motdet_eval.xywh2xyxy", "zip", "AP.mean", "R.mean", "P.mean", "numpy.sum", "numpy.sum", "numpy.sum", "print", "print", "img_info.to", "xywh2xyxy.size", "metrics_i[].append", "metrics_i[].append", "metrics_i[].append", "print", "torch.FloatTensor().view", "numpy.argmax", "outputs_class[].cpu", "numpy.zeros_like", "motdet_eval.bbox_iou", "correct.append", "detected.append", "correct.append", "outputs_class[].cpu", "torch.FloatTensor", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.init_metrics", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.ap_per_class", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xywh2xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.xywh2xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.motdet_eval.bbox_iou"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "detmotdet_evaluate", "(", "model", ",", "data_loader", ",", "device", ",", "iou_thres", "=", "0.5", ",", "print_interval", "=", "10", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "print", "(", "'%11s'", "*", "5", "%", "(", "'Cur Image'", ",", "'Total'", ",", "'P'", ",", "'R'", ",", "'mAP'", ")", ")", "\n", "# TODO: Remove the hard-code 3.", "\n", "metrics_list", "=", "[", "init_metrics", "(", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "for", "batch_i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "if", "(", "batch_i", ">", "100", ")", ":", "\n", "            ", "break", "\n", "\n", "", "for", "key", "in", "list", "(", "data", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "data", "[", "key", "]", ",", "list", ")", ":", "\n", "                ", "data", "[", "key", "]", "=", "[", "img_info", ".", "to", "(", "device", ")", "for", "img_info", "in", "data", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "data", "[", "key", "]", "=", "data", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "", "output", "=", "model", "(", "data", ")", "\n", "num_frames", "=", "len", "(", "data", "[", "'gt_instances'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_frames", ")", ":", "\n", "            ", "metrics_i", "=", "metrics_list", "[", "i", "]", "\n", "metrics_i", "[", "'seen'", "]", "+=", "1", "\n", "gt_instances", "=", "data", "[", "'gt_instances'", "]", "[", "i", "]", ".", "to", "(", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "height", ",", "width", "=", "gt_instances", ".", "image_size", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "outputs_class", "=", "output", "[", "'pred_logits'", "]", "[", "i", "]", ".", "squeeze", "(", ")", "\n", "outputs_boxes", "=", "output", "[", "'pred_boxes'", "]", "[", "i", "]", ".", "squeeze", "(", ")", "\n", "\n", "if", "outputs_class", ".", "ndim", "==", "1", ":", "\n", "# focal_loss", "\n", "                ", "outputs_class", "=", "outputs_class", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "target_boxes", "=", "gt_instances", ".", "boxes", "\n", "\n", "# Compute average precision", "\n", "if", "target_boxes", "is", "None", ":", "\n", "# If there are labels but no detections mark as zero AP", "\n", "                ", "if", "target_boxes", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "                    ", "metrics_i", "[", "'mAPs'", "]", ".", "append", "(", "0", ")", "\n", "metrics_i", "[", "'mR'", "]", ".", "append", "(", "0", ")", "\n", "metrics_i", "[", "'mP'", "]", ".", "append", "(", "0", ")", "\n", "print", "(", "'cur_target_boxes is None'", ")", "\n", "", "continue", "\n", "\n", "# for cur frame", "\n", "# If no labels add number of detections as incorrect", "\n", "", "correct", "=", "[", "]", "\n", "if", "target_boxes", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "# correct.extend([0 for _ in range(len(detections))])", "\n", "                ", "metrics_i", "[", "'mAP'", "]", ".", "append", "(", "0", ")", "\n", "metrics_i", "[", "'mR'", "]", ".", "append", "(", "0", ")", "\n", "metrics_i", "[", "'mP'", "]", ".", "apppend", "(", "0", ")", "\n", "print", "(", "'cur_target_boxes.size(0) == 0'", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "target_cls", "=", "gt_instances", ".", "labels", "\n", "# Extract target boxes as (x1, y1, x2, y2)", "\n", "target_boxes", "=", "xywh2xyxy", "(", "target_boxes", ")", "\n", "target_boxes", "[", ":", ",", "0", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "2", "]", "*=", "width", "\n", "target_boxes", "[", ":", ",", "1", "]", "*=", "height", "\n", "target_boxes", "[", ":", ",", "3", "]", "*=", "height", "\n", "\n", "outputs_boxes", "=", "xywh2xyxy", "(", "outputs_boxes", ")", "\n", "outputs_boxes", "[", ":", ",", "0", "]", "*=", "width", "\n", "outputs_boxes", "[", ":", ",", "2", "]", "*=", "width", "\n", "outputs_boxes", "[", ":", ",", "1", "]", "*=", "height", "\n", "outputs_boxes", "[", ":", ",", "3", "]", "*=", "height", "\n", "\n", "detected", "=", "[", "]", "\n", "for", "*", "pred_bbox", ",", "conf", "in", "zip", "(", "outputs_boxes", ",", "outputs_class", ")", ":", "\n", "                    ", "obj_pred", "=", "0", "\n", "pred_bbox", "=", "torch", ".", "FloatTensor", "(", "pred_bbox", "[", "0", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "# Compute iou with target boxes", "\n", "iou", "=", "bbox_iou", "(", "pred_bbox", ",", "target_boxes", ",", "x1y1x2y2", "=", "True", ")", "[", "0", "]", "\n", "# Extract index of largest overlap", "\n", "best_i", "=", "np", ".", "argmax", "(", "iou", ")", "\n", "# If overlap exceeds threshold and classification is correct mark as correct", "\n", "if", "iou", "[", "best_i", "]", ">", "iou_thres", "and", "obj_pred", "==", "int", "(", "target_cls", "[", "best_i", "]", ")", "and", "best_i", "not", "in", "detected", ":", "\n", "                        ", "correct", ".", "append", "(", "1", ")", "\n", "detected", ".", "append", "(", "best_i", ")", "\n", "", "else", ":", "\n", "                        ", "correct", ".", "append", "(", "0", ")", "\n", "\n", "# Compute Average Precision (AP) per class", "\n", "", "", "", "AP", ",", "AP_class", ",", "R", ",", "P", "=", "ap_per_class", "(", "tp", "=", "correct", ",", "\n", "conf", "=", "outputs_class", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ",", "\n", "pred_cls", "=", "np", ".", "zeros_like", "(", "outputs_class", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ",", "\n", "target_cls", "=", "target_cls", ")", "\n", "\n", "# Accumulate AP per class", "\n", "metrics_i", "[", "'AP_accum_count'", "]", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "1", ")", "\n", "metrics_i", "[", "'AP_accum'", "]", "+=", "np", ".", "bincount", "(", "AP_class", ",", "minlength", "=", "1", ",", "weights", "=", "AP", ")", "\n", "\n", "# Compute mean AP across all classes in this image, and append to image list", "\n", "metrics_i", "[", "'mAPs'", "]", ".", "append", "(", "AP", ".", "mean", "(", ")", ")", "\n", "metrics_i", "[", "'mR'", "]", ".", "append", "(", "R", ".", "mean", "(", ")", ")", "\n", "metrics_i", "[", "'mP'", "]", ".", "append", "(", "P", ".", "mean", "(", ")", ")", "\n", "\n", "# Means of all images", "\n", "metrics_i", "[", "'mean_mAP'", "]", "=", "np", ".", "sum", "(", "metrics_i", "[", "'mAPs'", "]", ")", "/", "(", "metrics_i", "[", "'AP_accum_count'", "]", "+", "1E-16", ")", "\n", "metrics_i", "[", "'mean_R'", "]", "=", "np", ".", "sum", "(", "metrics_i", "[", "'mR'", "]", ")", "/", "(", "metrics_i", "[", "'AP_accum_count'", "]", "+", "1E-16", ")", "\n", "metrics_i", "[", "'mean_P'", "]", "=", "np", ".", "sum", "(", "metrics_i", "[", "'mP'", "]", ")", "/", "(", "metrics_i", "[", "'AP_accum_count'", "]", "+", "1E-16", ")", "\n", "\n", "if", "batch_i", "%", "print_interval", "==", "0", ":", "\n", "# Print image mAP and running mean mAP", "\n", "                ", "seen", "=", "metrics_i", "[", "'seen'", "]", "\n", "mean_P", "=", "metrics_i", "[", "'mean_P'", "]", "\n", "mean_R", "=", "metrics_i", "[", "'mean_R'", "]", "\n", "mean_mAP", "=", "metrics_i", "[", "'mean_mAP'", "]", "\n", "print", "(", "\"res_frame_{}\"", ".", "format", "(", "i", ")", ")", "\n", "print", "(", "(", "'%11s%11s'", "+", "'%11.3g'", "*", "4", "+", "'s'", ")", "%", "(", "seen", ",", "100", ",", "mean_P", ",", "mean_R", ",", "mean_mAP", ",", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n", "# Return mAP", "\n", "", "", "", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "mean_mAP", "=", "metrics_list", "[", "i", "]", "[", "'mean_mAP'", "]", "\n", "mean_R", "=", "metrics_list", "[", "i", "]", "[", "'mean_R'", "]", "\n", "mean_P", "=", "metrics_list", "[", "i", "]", "[", "'mean_P'", "]", "\n", "ret", ".", "append", "(", "mean_mAP", ")", "\n", "ret", ".", "append", "(", "mean_R", ")", "\n", "ret", ".", "append", "(", "mean_P", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy": [[19, 24], ["x.unbind", "torch.stack"], "function", ["None"], ["def", "box_cxcywh_to_xyxy", "(", "x", ")", ":", "\n", "    ", "x_c", ",", "y_c", ",", "w", ",", "h", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x_c", "-", "0.5", "*", "w", ")", ",", "(", "y_c", "-", "0.5", "*", "h", ")", ",", "\n", "(", "x_c", "+", "0.5", "*", "w", ")", ",", "(", "y_c", "+", "0.5", "*", "h", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_xyxy_to_cxcywh": [[26, 31], ["x.unbind", "torch.stack"], "function", ["None"], ["", "def", "box_xyxy_to_cxcywh", "(", "x", ")", ":", "\n", "    ", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "x", ".", "unbind", "(", "-", "1", ")", "\n", "b", "=", "[", "(", "x0", "+", "x1", ")", "/", "2", ",", "(", "y0", "+", "y1", ")", "/", "2", ",", "\n", "(", "x1", "-", "x0", ")", ",", "(", "y1", "-", "y0", ")", "]", "\n", "return", "torch", ".", "stack", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_iou": [[34, 48], ["torchvision.ops.boxes.box_area", "torchvision.ops.boxes.box_area", "torch.max", "torch.min"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "area1", "=", "box_area", "(", "boxes1", ")", "\n", "area2", "=", "box_area", "(", "boxes2", ")", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "\n", "union", "=", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", "\n", "\n", "iou", "=", "inter", "/", "union", "\n", "return", "iou", ",", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.generalized_box_iou": [[50, 72], ["box_ops.box_iou", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "generalized_box_iou", "(", "boxes1", ",", "boxes2", ")", ":", "\n", "    ", "\"\"\"\n    Generalized IoU from https://giou.stanford.edu/\n\n    The boxes should be in [x0, y0, x1, y1] format\n\n    Returns a [N, M] pairwise matrix, where N = len(boxes1)\n    and M = len(boxes2)\n    \"\"\"", "\n", "# degenerate boxes gives inf / nan results", "\n", "# so do an early check", "\n", "assert", "(", "boxes1", "[", ":", ",", "2", ":", "]", ">=", "boxes1", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "assert", "(", "boxes2", "[", ":", ",", "2", ":", "]", ">=", "boxes2", "[", ":", ",", ":", "2", "]", ")", ".", "all", "(", ")", "\n", "iou", ",", "union", "=", "box_iou", "(", "boxes1", ",", "boxes2", ")", "\n", "\n", "lt", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", ")", "\n", "rb", "=", "torch", ".", "max", "(", "boxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "area", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "return", "iou", "-", "(", "area", "-", "union", ")", "/", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.masks_to_boxes": [[74, 99], ["torch.arange", "torch.arange", "torch.meshgrid", "torch.stack", "masks.numel", "torch.zeros", "torch.arange.unsqueeze", "x_mask.flatten().max", "x_mask.masked_fill().flatten().min", "torch.arange.unsqueeze", "y_mask.flatten().max", "y_mask.masked_fill().flatten().min", "x_mask.flatten", "x_mask.masked_fill().flatten", "y_mask.flatten", "y_mask.masked_fill().flatten", "x_mask.masked_fill", "y_mask.masked_fill", "masks.bool", "masks.bool"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "masks_to_boxes", "(", "masks", ")", ":", "\n", "    ", "\"\"\"Compute the bounding boxes around the provided masks\n\n    The masks should be in format [N, H, W] where N is the number of masks, (H, W) are the spatial dimensions.\n\n    Returns a [N, 4] tensors, with the boxes in xyxy format\n    \"\"\"", "\n", "if", "masks", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "device", "=", "masks", ".", "device", ")", "\n", "\n", "", "h", ",", "w", "=", "masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "y", "=", "torch", ".", "arange", "(", "0", ",", "h", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "x", "=", "torch", ".", "arange", "(", "0", ",", "w", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y", ",", "x", ")", "\n", "\n", "x_mask", "=", "(", "masks", "*", "x", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x_max", "=", "x_mask", ".", "flatten", "(", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "x_min", "=", "x_mask", ".", "masked_fill", "(", "~", "(", "masks", ".", "bool", "(", ")", ")", ",", "1e8", ")", ".", "flatten", "(", "1", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", "\n", "\n", "y_mask", "=", "(", "masks", "*", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "y_max", "=", "y_mask", ".", "flatten", "(", "1", ")", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "y_min", "=", "y_mask", ".", "masked_fill", "(", "~", "(", "masks", ".", "bool", "(", ")", ")", ",", "1e8", ")", ".", "flatten", "(", "1", ")", ".", "min", "(", "-", "1", ")", "[", "0", "]", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", "]", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.__init__": [[69, 76], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.update": [[77, 81], ["misc.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.synchronize_between_processes": [[82, 94], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "misc.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.median": [[95, 99], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.median", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.avg": [[100, 104], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.global_avg": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max": [[109, 112], ["misc.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.value": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.__str__": [[117, 124], ["misc.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.__init__": [[197, 200], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.update": [[201, 207], ["kwargs.items", "isinstance", "isinstance", "misc.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.__getattr__": [[208, 215], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.__str__": [[216, 223], ["misc.MetricLogger.meters.items", "misc.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes": [[224, 227], ["misc.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.add_meter": [[228, 230], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.MetricLogger.log_every": [[231, 284], ["time.time", "time.time", "misc.SmoothedValue", "misc.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc.MetricLogger.delimiter.join", "misc.MetricLogger.delimiter.join", "misc.SmoothedValue.update", "misc.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc.MetricLogger.format", "misc.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.__init__": [[359, 362], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensors", ",", "mask", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.to": [[363, 373], ["misc.NestedTensor.tensors.to", "misc.NestedTensor", "mask.to"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "def", "to", "(", "self", ",", "device", ",", "non_blocking", "=", "False", ")", ":", "\n", "# type: (Device) -> NestedTensor # noqa", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "mask", "=", "self", ".", "mask", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "mask", "is", "not", "None", "\n", "cast_mask", "=", "mask", ".", "to", "(", "device", ",", "non_blocking", "=", "non_blocking", ")", "\n", "", "else", ":", "\n", "            ", "cast_mask", "=", "None", "\n", "", "return", "NestedTensor", "(", "cast_tensor", ",", "cast_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.record_stream": [[374, 378], ["misc.NestedTensor.tensors.record_stream", "misc.NestedTensor.mask.record_stream"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.record_stream", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.record_stream"], ["", "def", "record_stream", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "tensors", ".", "record_stream", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "self", ".", "mask", "is", "not", "None", ":", "\n", "            ", "self", ".", "mask", ".", "record_stream", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose": [[379, 381], ["None"], "methods", ["None"], ["", "", "def", "decompose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tensors", ",", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.__repr__": [[382, 384], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather": [[126, 167], ["misc.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.all_gather", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.reduce_dict": [[169, 194], ["misc.get_world_size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_sha": [[286, 304], ["os.path.dirname", "os.path.abspath", "subprocess.check_output().decode().strip", "misc.get_sha._run"], "function", ["None"], ["", "", "def", "get_sha", "(", ")", ":", "\n", "    ", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "\n", "def", "_run", "(", "command", ")", ":", "\n", "        ", "return", "subprocess", ".", "check_output", "(", "command", ",", "cwd", "=", "cwd", ")", ".", "decode", "(", "'ascii'", ")", ".", "strip", "(", ")", "\n", "", "sha", "=", "'N/A'", "\n", "diff", "=", "\"clean\"", "\n", "branch", "=", "'N/A'", "\n", "try", ":", "\n", "        ", "sha", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'diff'", "]", ",", "cwd", "=", "cwd", ")", "\n", "diff", "=", "_run", "(", "[", "'git'", ",", "'diff-index'", ",", "'HEAD'", "]", ")", "\n", "diff", "=", "\"has uncommited changes\"", "if", "diff", "else", "\"clean\"", "\n", "branch", "=", "_run", "(", "[", "'git'", ",", "'rev-parse'", ",", "'--abbrev-ref'", ",", "'HEAD'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "", "message", "=", "f\"sha: {sha}, status: {diff}, branch: {branch}\"", "\n", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.collate_fn": [[306, 310], ["list", "misc.nested_tensor_from_tensor_list", "tuple", "zip"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "batch", "[", "0", "]", "=", "nested_tensor_from_tensor_list", "(", "batch", "[", "0", "]", ",", "size_divisibility", "=", "32", ")", "\n", "return", "tuple", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.mot_collate_fn": [[312, 320], ["list", "batch[].keys", "isinstance", "len"], "function", ["None"], ["", "def", "mot_collate_fn", "(", "batch", ":", "List", "[", "dict", "]", ")", "->", "dict", ":", "\n", "    ", "ret_dict", "=", "{", "}", "\n", "for", "key", "in", "list", "(", "batch", "[", "0", "]", ".", "keys", "(", ")", ")", ":", "\n", "        ", "assert", "not", "isinstance", "(", "batch", "[", "0", "]", "[", "key", "]", ",", "Tensor", ")", "\n", "ret_dict", "[", "key", "]", "=", "[", "img_info", "[", "key", "]", "for", "img_info", "in", "batch", "]", "\n", "if", "len", "(", "ret_dict", "[", "key", "]", ")", "==", "1", ":", "\n", "            ", "ret_dict", "[", "key", "]", "=", "ret_dict", "[", "key", "]", "[", "0", "]", "\n", "", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc._max_by_axis": [[322, 329], ["enumerate", "max"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "_max_by_axis", "(", "the_list", ")", ":", "\n", "# type: (List[List[int]]) -> List[int]", "\n", "    ", "maxes", "=", "the_list", "[", "0", "]", "\n", "for", "sublist", "in", "the_list", "[", "1", ":", "]", ":", "\n", "        ", "for", "index", ",", "item", "in", "enumerate", "(", "sublist", ")", ":", "\n", "            ", "maxes", "[", "index", "]", "=", "max", "(", "maxes", "[", "index", "]", ",", "item", ")", "\n", "", "", "return", "maxes", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list": [[331, 356], ["misc.NestedTensor", "misc._max_by_axis", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "zip", "ValueError", "pad_img[].copy_", "list", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc._max_by_axis"], ["", "def", "nested_tensor_from_tensor_list", "(", "tensor_list", ":", "List", "[", "Tensor", "]", ",", "size_divisibility", ":", "int", "=", "0", ")", ":", "\n", "# TODO make this more general", "\n", "    ", "if", "tensor_list", "[", "0", "]", ".", "ndim", "==", "3", ":", "\n", "# TODO make it support different-sized images", "\n", "\n", "        ", "max_size", "=", "_max_by_axis", "(", "[", "list", "(", "img", ".", "shape", ")", "for", "img", "in", "tensor_list", "]", ")", "\n", "if", "size_divisibility", ">", "0", ":", "\n", "            ", "stride", "=", "size_divisibility", "\n", "# the last two dims are H,W, both subject to divisibility requirement", "\n", "max_size", "[", "-", "1", "]", "=", "(", "max_size", "[", "-", "1", "]", "+", "(", "stride", "-", "1", ")", ")", "//", "stride", "*", "stride", "\n", "max_size", "[", "-", "2", "]", "=", "(", "max_size", "[", "-", "2", "]", "+", "(", "stride", "-", "1", ")", ")", "//", "stride", "*", "stride", "\n", "\n", "# min_size = tuple(min(s) for s in zip(*[img.shape for img in tensor_list]))", "\n", "", "batch_shape", "=", "[", "len", "(", "tensor_list", ")", "]", "+", "max_size", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "batch_shape", "\n", "dtype", "=", "tensor_list", "[", "0", "]", ".", "dtype", "\n", "device", "=", "tensor_list", "[", "0", "]", ".", "device", "\n", "tensor", "=", "torch", ".", "zeros", "(", "batch_shape", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "b", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "for", "img", ",", "pad_img", ",", "m", "in", "zip", "(", "tensor_list", ",", "tensor", ",", "mask", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "m", "[", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'not supported'", ")", "\n", "", "return", "NestedTensor", "(", "tensor", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.setup_for_distributed": [[386, 399], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized": [[401, 407], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size": [[409, 413], ["torch.get_world_size", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank": [[415, 419], ["torch.get_rank", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_local_size": [[421, 425], ["int", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_local_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "int", "(", "os", ".", "environ", "[", "'LOCAL_SIZE'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_local_rank": [[427, 431], ["int", "misc.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized"], ["", "def", "get_local_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process": [[433, 435], ["misc.get_rank"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.save_on_master": [[437, 440], ["misc.is_main_process", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.init_distributed_mode": [[442, 481], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "misc.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "misc.setup_for_distributed", "int", "int", "int", "str", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "subprocess.getoutput", "os.environ.get", "str", "str", "str", "str", "misc.setup_for_distributed.print"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.setup_for_distributed", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "args", ".", "dist_url", "=", "'env://'", "\n", "os", ".", "environ", "[", "'LOCAL_SIZE'", "]", "=", "str", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "os", ".", "environ", ".", "get", "(", "'MASTER_PORT'", ",", "'29500'", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "proc_id", "%", "num_gpus", ")", "\n", "os", ".", "environ", "[", "'LOCAL_SIZE'", "]", "=", "str", "(", "num_gpus", ")", "\n", "args", ".", "dist_url", "=", "'env://'", "\n", "args", ".", "world_size", "=", "ntasks", "\n", "args", ".", "rank", "=", "proc_id", "\n", "args", ".", "gpu", "=", "proc_id", "%", "num_gpus", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.accuracy": [[483, 500], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.numel", "target.view().expand_as", "correct[].view().float().sum", "res.append", "torch.zeros", "torch.zeros", "torch.zeros", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "if", "target", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "[", "torch", ".", "zeros", "(", "[", "]", ",", "device", "=", "output", ".", "device", ")", "]", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate": [[502, 522], ["float", "_output_size", "_new_empty_tensor", "torchvision.ops.misc.interpolate", "input.numel", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "list", "list", "float", "_NewEmptyTensorOp.apply"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["", "def", "interpolate", "(", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", ":", "\n", "# type: (Tensor, Optional[List[int]], Optional[float], str, Optional[bool]) -> Tensor", "\n", "    ", "\"\"\"\n    Equivalent to nn.functional.interpolate, but with support for empty batch sizes.\n    This will eventually be supported natively by PyTorch, and this\n    class can go away.\n    \"\"\"", "\n", "if", "float", "(", "torchvision", ".", "__version__", "[", ":", "3", "]", ")", "<", "0.7", ":", "\n", "        ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "output_shape", "=", "_output_size", "(", "2", ",", "input", ",", "size", ",", "scale_factor", ")", "\n", "output_shape", "=", "list", "(", "input", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "list", "(", "output_shape", ")", "\n", "if", "float", "(", "torchvision", ".", "__version__", "[", ":", "3", "]", ")", "<", "0.5", ":", "\n", "            ", "return", "_NewEmptyTensorOp", ".", "apply", "(", "input", ",", "output_shape", ")", "\n", "", "return", "_new_empty_tensor", "(", "input", ",", "output_shape", ")", "\n", "", "else", ":", "\n", "        ", "return", "torchvision", ".", "ops", ".", "misc", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_total_grad_norm": [[524, 531], ["list", "float", "torch.norm", "torch.norm", "torch.norm", "filter", "torch.stack", "torch.stack", "torch.stack", "torch.norm().to", "torch.norm().to", "torch.norm().to", "torch.norm", "torch.norm", "torch.norm", "p.grad.detach"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "", "def", "get_total_grad_norm", "(", "parameters", ",", "norm_type", "=", "2", ")", ":", "\n", "    ", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "grad", "is", "not", "None", ",", "parameters", ")", ")", "\n", "norm_type", "=", "float", "(", "norm_type", ")", "\n", "device", "=", "parameters", "[", "0", "]", ".", "grad", ".", "device", "\n", "total_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "[", "torch", ".", "norm", "(", "p", ".", "grad", ".", "detach", "(", ")", ",", "norm_type", ")", ".", "to", "(", "device", ")", "for", "p", "in", "parameters", "]", ")", ",", "\n", "norm_type", ")", "\n", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid": [[532, 537], ["x.clamp.clamp", "x.clamp.clamp", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "inverse_sigmoid", "(", "x", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "x", "=", "x", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "x1", "=", "x", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "x2", "=", "(", "1", "-", "x", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "return", "torch", ".", "log", "(", "x1", "/", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.checkpoint.CheckpointFunction.forward": [[26, 34], ["list", "list", "torch.no_grad", "ctx.run_function"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "run_function", ",", "length", ",", "*", "args", ")", ":", "\n", "        ", "ctx", ".", "run_function", "=", "run_function", "\n", "ctx", ".", "input_tensors", "=", "list", "(", "args", "[", ":", "length", "]", ")", "\n", "ctx", ".", "input_params", "=", "list", "(", "args", "[", "length", ":", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_tensors", "=", "ctx", ".", "run_function", "(", "*", "ctx", ".", "input_tensors", ")", "\n", "", "return", "output_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.checkpoint.CheckpointFunction.backward": [[35, 54], ["range", "range", "zip", "torch.autograd.grad", "list", "range", "len", "temp.detach", "torch.enable_grad", "ctx.run_function", "len", "len", "tuple", "to_autograd.append", "filter", "list.insert", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "*", "output_grads", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ctx", ".", "input_tensors", ")", ")", ":", "\n", "            ", "temp", "=", "ctx", ".", "input_tensors", "[", "i", "]", "\n", "ctx", ".", "input_tensors", "[", "i", "]", "=", "temp", ".", "detach", "(", ")", "\n", "ctx", ".", "input_tensors", "[", "i", "]", ".", "requires_grad", "=", "temp", ".", "requires_grad", "\n", "", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "output_tensors", "=", "ctx", ".", "run_function", "(", "*", "ctx", ".", "input_tensors", ")", "\n", "", "to_autograd", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "ctx", ".", "input_tensors", ")", ")", ":", "\n", "            ", "if", "ctx", ".", "input_tensors", "[", "i", "]", ".", "requires_grad", ":", "\n", "                ", "to_autograd", ".", "append", "(", "ctx", ".", "input_tensors", "[", "i", "]", ")", "\n", "", "", "output_tensors", ",", "output_grads", "=", "zip", "(", "*", "filter", "(", "lambda", "t", ":", "t", "[", "0", "]", ".", "requires_grad", ",", "zip", "(", "output_tensors", ",", "output_grads", ")", ")", ")", "\n", "input_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "output_tensors", ",", "to_autograd", "+", "ctx", ".", "input_params", ",", "output_grads", ",", "allow_unused", "=", "True", ")", "\n", "input_grads", "=", "list", "(", "input_grads", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ctx", ".", "input_tensors", ")", ")", ":", "\n", "            ", "if", "not", "ctx", ".", "input_tensors", "[", "i", "]", ".", "requires_grad", ":", "\n", "                ", "input_grads", ".", "insert", "(", "i", ",", "None", ")", "\n", "", "", "return", "(", "None", ",", "None", ")", "+", "tuple", "(", "input_grads", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.checkpoint.detach_variable": [[7, 18], ["isinstance", "tuple", "RuntimeError", "inp.detach", "out.append", "type"], "function", ["None"], ["def", "detach_variable", "(", "inputs", ")", ":", "\n", "    ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "inp", "in", "inputs", ":", "\n", "            ", "x", "=", "inp", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad", "=", "inp", ".", "requires_grad", "\n", "out", ".", "append", "(", "x", ")", "\n", "", "return", "tuple", "(", "out", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Only tuple of tensors is supported. Got Unsupported input type: \"", ",", "type", "(", "inputs", ")", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.checkpoint.check_backward_validity": [[20, 23], ["any", "warnings.warn"], "function", ["None"], ["", "", "def", "check_backward_validity", "(", "inputs", ")", ":", "\n", "    ", "if", "not", "any", "(", "inp", ".", "requires_grad", "for", "inp", "in", "inputs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"None of the inputs have requires_grad=True. Gradients will be None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.__init__": [[114, 122], ["evaluation.Evaluator.load_annotations", "evaluation.Evaluator.reset_accumulator"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.load_annotations", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.reset_accumulator"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "seq_name", ",", "data_type", "=", "'mot'", ")", ":", "\n", "\n", "        ", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "seq_name", "=", "seq_name", "\n", "self", ".", "data_type", "=", "data_type", "\n", "\n", "self", ".", "load_annotations", "(", ")", "\n", "self", ".", "reset_accumulator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.load_annotations": [[123, 129], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "evaluation.read_results", "evaluation.read_results"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.read_results", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.read_results"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "data_type", "==", "'mot'", "\n", "\n", "gt_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "seq_name", ",", "'gt'", ",", "'gt.txt'", ")", "\n", "self", ".", "gt_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "True", ")", "\n", "self", ".", "gt_ignore_frame_dict", "=", "read_results", "(", "gt_filename", ",", "self", ".", "data_type", ",", "is_ignore", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.reset_accumulator": [[130, 132], ["motmetrics.MOTAccumulator"], "methods", ["None"], ["", "def", "reset_accumulator", "(", "self", ")", ":", "\n", "        ", "self", ".", "acc", "=", "mm", ".", "MOTAccumulator", "(", "auto_id", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_frame": [[133, 170], ["numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "evaluation.Evaluator.gt_frame_dict.get", "evaluation.Evaluator.gt_ignore_frame_dict.get", "numpy.ones", "numpy.ones", "motmetrics.distances.iou_matrix", "motmetrics.distances.iou_matrix", "evaluation.Evaluator.acc.update", "evaluation.unzip_objs", "evaluation.unzip_objs", "len", "len", "motmetrics.lap.linear_sum_assignment", "map", "numpy.asarray", "numpy.asarray", "hasattr", "numpy.asarray", "numpy.asarray", "numpy.logical_not", "numpy.logical_not", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.unzip_objs", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.unzip_objs"], ["", "def", "eval_frame", "(", "self", ",", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", ":", "\n", "# results", "\n", "        ", "trk_tlwhs", "=", "np", ".", "copy", "(", "trk_tlwhs", ")", "\n", "trk_ids", "=", "np", ".", "copy", "(", "trk_ids", ")", "\n", "\n", "# gts", "\n", "gt_objs", "=", "self", ".", "gt_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "gt_tlwhs", ",", "gt_ids", "=", "unzip_objs", "(", "gt_objs", ")", "[", ":", "2", "]", "\n", "\n", "# ignore boxes", "\n", "ignore_objs", "=", "self", ".", "gt_ignore_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "ignore_tlwhs", "=", "unzip_objs", "(", "ignore_objs", ")", "[", "0", "]", "\n", "# remove ignored results", "\n", "keep", "=", "np", ".", "ones", "(", "len", "(", "trk_tlwhs", ")", ",", "dtype", "=", "bool", ")", "\n", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "ignore_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "if", "len", "(", "iou_distance", ")", ">", "0", ":", "\n", "            ", "match_is", ",", "match_js", "=", "mm", ".", "lap", ".", "linear_sum_assignment", "(", "iou_distance", ")", "\n", "match_is", ",", "match_js", "=", "map", "(", "lambda", "a", ":", "np", ".", "asarray", "(", "a", ",", "dtype", "=", "int", ")", ",", "[", "match_is", ",", "match_js", "]", ")", "\n", "match_ious", "=", "iou_distance", "[", "match_is", ",", "match_js", "]", "\n", "\n", "match_js", "=", "np", ".", "asarray", "(", "match_js", ",", "dtype", "=", "int", ")", "\n", "match_js", "=", "match_js", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "match_ious", ")", ")", "]", "\n", "keep", "[", "match_js", "]", "=", "False", "\n", "trk_tlwhs", "=", "trk_tlwhs", "[", "keep", "]", "\n", "trk_ids", "=", "trk_ids", "[", "keep", "]", "\n", "\n", "# get distance matrix", "\n", "", "iou_distance", "=", "mm", ".", "distances", ".", "iou_matrix", "(", "gt_tlwhs", ",", "trk_tlwhs", ",", "max_iou", "=", "0.5", ")", "\n", "\n", "# acc", "\n", "self", ".", "acc", ".", "update", "(", "gt_ids", ",", "trk_ids", ",", "iou_distance", ")", "\n", "\n", "if", "rtn_events", "and", "iou_distance", ".", "size", ">", "0", "and", "hasattr", "(", "self", ".", "acc", ",", "'last_mot_events'", ")", ":", "\n", "            ", "events", "=", "self", ".", "acc", ".", "last_mot_events", "# only supported by https://github.com/longcw/py-motmetrics", "\n", "", "else", ":", "\n", "            ", "events", "=", "None", "\n", "", "return", "events", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_file": [[171, 182], ["evaluation.Evaluator.reset_accumulator", "evaluation.read_results", "sorted", "list", "read_results.get", "evaluation.Evaluator.eval_frame", "evaluation.unzip_objs", "set", "set", "evaluation.Evaluator.gt_frame_dict.keys", "read_results.keys"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.reset_accumulator", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.read_results", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.eval_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.unzip_objs", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "def", "eval_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "reset_accumulator", "(", ")", "\n", "\n", "result_frame_dict", "=", "read_results", "(", "filename", ",", "self", ".", "data_type", ",", "is_gt", "=", "False", ")", "\n", "frames", "=", "sorted", "(", "list", "(", "set", "(", "self", ".", "gt_frame_dict", ".", "keys", "(", ")", ")", "|", "set", "(", "result_frame_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "frame_id", "in", "frames", ":", "\n", "            ", "trk_objs", "=", "result_frame_dict", ".", "get", "(", "frame_id", ",", "[", "]", ")", "\n", "trk_tlwhs", ",", "trk_ids", "=", "unzip_objs", "(", "trk_objs", ")", "[", ":", "2", "]", "\n", "self", ".", "eval_frame", "(", "frame_id", ",", "trk_tlwhs", ",", "trk_ids", ",", "rtn_events", "=", "False", ")", "\n", "\n", "", "return", "self", ".", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.get_summary": [[183, 199], ["copy.deepcopy", "copy.deepcopy", "motmetrics.metrics.create", "motmetrics.metrics.create.compute_many"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_summary", "(", "accs", ",", "names", ",", "metrics", "=", "(", "'mota'", ",", "'num_switches'", ",", "'idp'", ",", "'idr'", ",", "'idf1'", ",", "'precision'", ",", "'recall'", ")", ")", ":", "\n", "        ", "names", "=", "copy", ".", "deepcopy", "(", "names", ")", "\n", "if", "metrics", "is", "None", ":", "\n", "            ", "metrics", "=", "mm", ".", "metrics", ".", "motchallenge_metrics", "\n", "", "metrics", "=", "copy", ".", "deepcopy", "(", "metrics", ")", "\n", "\n", "mh", "=", "mm", ".", "metrics", ".", "create", "(", ")", "\n", "summary", "=", "mh", ".", "compute_many", "(", "\n", "accs", ",", "\n", "metrics", "=", "metrics", ",", "\n", "names", "=", "names", ",", "\n", "generate_overall", "=", "True", "\n", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.Evaluator.save_summary": [[200, 206], ["pd.ExcelWriter", "summary.to_excel", "pd.ExcelWriter.save"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_summary", "(", "summary", ",", "filename", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "filename", ")", "\n", "summary", ".", "to_excel", "(", "writer", ")", "\n", "writer", ".", "save", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.read_results": [[22, 29], ["read_fun", "ValueError"], "function", ["None"], ["def", "read_results", "(", "filename", ",", "data_type", ":", "str", ",", "is_gt", "=", "False", ",", "is_ignore", "=", "False", ")", ":", "\n", "    ", "if", "data_type", "in", "(", "'mot'", ",", "'lab'", ")", ":", "\n", "        ", "read_fun", "=", "read_mot_results", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown data type: {}'", ".", "format", "(", "data_type", ")", ")", "\n", "\n", "", "return", "read_fun", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.read_mot_results": [[59, 103], ["dict", "os.path.isfile", "os.path.isfile", "open", "f.readlines", "line.split", "int", "dict.setdefault", "tuple", "int", "results_dict[].append", "len", "list", "map", "int", "int", "float", "float", "float", "int", "float", "float", "int", "float"], "function", ["None"], ["", "def", "read_mot_results", "(", "filename", ",", "is_gt", ",", "is_ignore", ")", ":", "\n", "    ", "valid_labels", "=", "{", "1", "}", "\n", "ignore_labels", "=", "{", "0", ",", "2", ",", "7", ",", "8", ",", "12", "}", "\n", "results_dict", "=", "dict", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "linelist", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "linelist", ")", "<", "7", ":", "\n", "                    ", "continue", "\n", "", "fid", "=", "int", "(", "linelist", "[", "0", "]", ")", "\n", "if", "fid", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "results_dict", ".", "setdefault", "(", "fid", ",", "list", "(", ")", ")", "\n", "\n", "if", "is_gt", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "mark", "=", "int", "(", "float", "(", "linelist", "[", "6", "]", ")", ")", "\n", "if", "mark", "==", "0", "or", "label", "not", "in", "valid_labels", ":", "\n", "                            ", "continue", "\n", "", "", "score", "=", "1", "\n", "", "elif", "is_ignore", ":", "\n", "                    ", "if", "'MOT16-'", "in", "filename", "or", "'MOT17-'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "7", "]", ")", ")", "\n", "vis_ratio", "=", "float", "(", "linelist", "[", "8", "]", ")", "\n", "if", "label", "not", "in", "ignore_labels", "and", "vis_ratio", ">=", "0", ":", "\n", "                            ", "continue", "\n", "", "", "elif", "'MOT15'", "in", "filename", ":", "\n", "                        ", "label", "=", "int", "(", "float", "(", "linelist", "[", "6", "]", ")", ")", "\n", "if", "label", "not", "in", "ignore_labels", ":", "\n", "                            ", "continue", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "score", "=", "1", "\n", "", "else", ":", "\n", "                    ", "score", "=", "float", "(", "linelist", "[", "6", "]", ")", "\n", "\n", "", "tlwh", "=", "tuple", "(", "map", "(", "float", ",", "linelist", "[", "2", ":", "6", "]", ")", ")", "\n", "target_id", "=", "int", "(", "linelist", "[", "1", "]", ")", "\n", "\n", "results_dict", "[", "fid", "]", ".", "append", "(", "(", "tlwh", ",", "target_id", ",", "score", ")", ")", "\n", "\n", "", "", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.util.evaluation.unzip_objs": [[104, 111], ["numpy.asarray().reshape", "len", "zip", "numpy.asarray"], "function", ["None"], ["", "def", "unzip_objs", "(", "objs", ")", ":", "\n", "    ", "if", "len", "(", "objs", ")", ">", "0", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "zip", "(", "*", "objs", ")", "\n", "", "else", ":", "\n", "        ", "tlwhs", ",", "ids", ",", "scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "tlwhs", "=", "np", ".", "asarray", "(", "tlwhs", ",", "dtype", "=", "float", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "tlwhs", ",", "ids", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.DeformableDETR.__init__": [[39, 116], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "deformable_detr.MLP", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Embedding", "torch.nn.Embedding", "len", "range", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "math.log", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "deformable_detr._get_clones", "deformable_detr._get_clones", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "input_proj_list.append", "input_proj_list.append", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "range", "range"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["def", "__init__", "(", "self", ",", "backbone", ",", "transformer", ",", "num_classes", ",", "num_queries", ",", "num_feature_levels", ",", "\n", "aux_loss", "=", "True", ",", "with_box_refine", "=", "False", ",", "two_stage", "=", "False", ",", "accurate_ratio", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initializes the model.\n        Parameters:\n            backbone: torch module of the backbone to be used. See backbone.py\n            transformer: torch module of the transformer architecture. See transformer.py\n            num_classes: number of object classes\n            num_queries: number of object queries, ie detection slot. This is the maximal number of objects\n                         DETR can detect in a single image. For COCO, we recommend 100 queries.\n            aux_loss: True if auxiliary decoding losses (loss at each decoder layer) are to be used.\n            with_box_refine: iterative bounding box refinement\n            two_stage: two-stage Deformable DETR\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_queries", "=", "num_queries", "\n", "self", ".", "transformer", "=", "transformer", "\n", "hidden_dim", "=", "transformer", ".", "d_model", "\n", "self", ".", "class_embed", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", ")", "\n", "self", ".", "bbox_embed", "=", "MLP", "(", "hidden_dim", ",", "hidden_dim", ",", "4", ",", "3", ")", "\n", "self", ".", "num_feature_levels", "=", "num_feature_levels", "\n", "self", ".", "accurate_ratio", "=", "accurate_ratio", "\n", "if", "not", "two_stage", ":", "\n", "            ", "self", ".", "query_embed", "=", "nn", ".", "Embedding", "(", "num_queries", ",", "hidden_dim", "*", "2", ")", "\n", "", "if", "num_feature_levels", ">", "1", ":", "\n", "            ", "num_backbone_outs", "=", "len", "(", "backbone", ".", "strides", ")", "\n", "input_proj_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_backbone_outs", ")", ":", "\n", "                ", "in_channels", "=", "backbone", ".", "num_channels", "[", "_", "]", "\n", "input_proj_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", ")", "\n", "", "for", "_", "in", "range", "(", "num_feature_levels", "-", "num_backbone_outs", ")", ":", "\n", "                ", "input_proj_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", ")", "\n", "in_channels", "=", "hidden_dim", "\n", "", "self", ".", "input_proj", "=", "nn", ".", "ModuleList", "(", "input_proj_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_proj", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone", ".", "num_channels", "[", "0", "]", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", "]", ")", "\n", "", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "aux_loss", "=", "aux_loss", "\n", "self", ".", "with_box_refine", "=", "with_box_refine", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "\n", "prior_prob", "=", "0.01", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "self", ".", "class_embed", ".", "bias", ".", "data", "=", "torch", ".", "ones", "(", "num_classes", ")", "*", "bias_value", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "weight", ".", "data", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", ",", "0", ")", "\n", "for", "proj", "in", "self", ".", "input_proj", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "proj", "[", "0", "]", ".", "weight", ",", "gain", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "proj", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n", "# if two-stage, the last class_embed and bbox_embed is for region proposal generation", "\n", "", "num_pred", "=", "(", "transformer", ".", "decoder", ".", "num_layers", "+", "1", ")", "if", "two_stage", "else", "transformer", ".", "decoder", ".", "num_layers", "\n", "if", "with_box_refine", ":", "\n", "            ", "self", ".", "class_embed", "=", "_get_clones", "(", "self", ".", "class_embed", ",", "num_pred", ")", "\n", "self", ".", "bbox_embed", "=", "_get_clones", "(", "self", ".", "bbox_embed", ",", "num_pred", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", "[", "0", "]", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "-", "2.0", ")", "\n", "# hack implementation for iterative bounding box refinement", "\n", "self", ".", "transformer", ".", "decoder", ".", "bbox_embed", "=", "self", ".", "bbox_embed", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "-", "2.0", ")", "\n", "self", ".", "class_embed", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "class_embed", "for", "_", "in", "range", "(", "num_pred", ")", "]", ")", "\n", "self", ".", "bbox_embed", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "bbox_embed", "for", "_", "in", "range", "(", "num_pred", ")", "]", ")", "\n", "self", ".", "transformer", ".", "decoder", ".", "bbox_embed", "=", "None", "\n", "", "if", "two_stage", ":", "\n", "# hack implementation for two-stage", "\n", "            ", "self", ".", "transformer", ".", "decoder", ".", "class_embed", "=", "self", ".", "class_embed", "\n", "for", "box_embed", "in", "self", ".", "bbox_embed", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "box_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.DeformableDETR._get_valid_ratio": [[117, 126], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum.float", "torch.sum.float", "torch.sum.float", "torch.sum.float"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_get_valid_ratio", "(", "mask", ")", ":", "\n", "        ", "_", ",", "H", ",", "W", "=", "mask", ".", "shape", "\n", "valid_H", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", ":", ",", "0", "]", ",", "1", ")", "\n", "valid_W", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", "0", ",", ":", "]", ",", "1", ")", "\n", "valid_ratio_h", "=", "valid_H", ".", "float", "(", ")", "/", "H", "\n", "valid_ratio_w", "=", "valid_W", ".", "float", "(", ")", "/", "W", "\n", "valid_ratio", "=", "torch", ".", "stack", "(", "[", "valid_ratio_w", ",", "valid_ratio_h", "]", ",", "-", "1", ")", "\n", "return", "valid_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.DeformableDETR.forward": [[127, 210], ["deformable_detr.DeformableDETR.backbone", "enumerate", "deformable_detr.DeformableDETR.transformer", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "isinstance", "util.misc.nested_tensor_from_tensor_list", "feat.decompose", "srcs.append", "masks.append", "len", "len", "range", "deformable_detr.DeformableDETR._get_valid_ratio", "util.misc.inverse_sigmoid", "tmp.sigmoid", "outputs_classes.append", "outputs_coords.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deformable_detr.DeformableDETR._set_aux_loss", "enc_outputs_coord_unact.sigmoid", "srcs.append", "masks.append", "pos.append", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate", "torch.interpolate", "util.misc.NestedTensor", "m[].float"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.DeformableDETR._get_valid_ratio", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._set_aux_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "samples", ":", "NestedTensor", ")", ":", "\n", "        ", "\"\"\"\u00a0The forward expects a NestedTensor, which consists of:\n               - samples.tensor: batched images, of shape [batch_size x 3 x H x W]\n               - samples.mask: a binary mask of shape [batch_size x H x W], containing 1 on padded pixels\n\n            It returns a dict with the following elements:\n               - \"pred_logits\": the classification logits (including no-object) for all queries.\n                                Shape= [batch_size x num_queries x (num_classes + 1)]\n               - \"pred_boxes\": The normalized boxes coordinates for all queries, represented as\n                               (center_x, center_y, height, width). These values are normalized in [0, 1],\n                               relative to the size of each individual image (disregarding possible padding).\n                               See PostProcess for information on how to retrieve the unnormalized bounding box.\n               - \"aux_outputs\": Optional, only returned when auxilary losses are activated. It is a list of\n                                dictionnaries containing the two above keys for each decoder layer.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "samples", ",", "NestedTensor", ")", ":", "\n", "            ", "samples", "=", "nested_tensor_from_tensor_list", "(", "samples", ")", "\n", "\n", "", "features", ",", "pos", "=", "self", ".", "backbone", "(", "samples", ")", "\n", "\n", "srcs", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "for", "l", ",", "feat", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "src", ",", "mask", "=", "feat", ".", "decompose", "(", ")", "\n", "srcs", ".", "append", "(", "self", ".", "input_proj", "[", "l", "]", "(", "src", ")", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "", "if", "self", ".", "num_feature_levels", ">", "len", "(", "srcs", ")", ":", "\n", "            ", "_len_srcs", "=", "len", "(", "srcs", ")", "\n", "for", "l", "in", "range", "(", "_len_srcs", ",", "self", ".", "num_feature_levels", ")", ":", "\n", "                ", "if", "l", "==", "_len_srcs", ":", "\n", "                    ", "src", "=", "self", ".", "input_proj", "[", "l", "]", "(", "features", "[", "-", "1", "]", ".", "tensors", ")", "\n", "", "else", ":", "\n", "                    ", "src", "=", "self", ".", "input_proj", "[", "l", "]", "(", "srcs", "[", "-", "1", "]", ")", "\n", "", "m", "=", "samples", ".", "mask", "\n", "mask", "=", "F", ".", "interpolate", "(", "m", "[", "None", "]", ".", "float", "(", ")", ",", "size", "=", "src", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "pos_l", "=", "self", ".", "backbone", "[", "1", "]", "(", "NestedTensor", "(", "src", ",", "mask", ")", ")", ".", "to", "(", "src", ".", "dtype", ")", "\n", "srcs", ".", "append", "(", "src", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "pos", ".", "append", "(", "pos_l", ")", "\n", "\n", "", "", "query_embeds", "=", "None", "\n", "if", "not", "self", ".", "two_stage", ":", "\n", "            ", "query_embeds", "=", "self", ".", "query_embed", ".", "weight", "\n", "", "valid_ratio", "=", "None", "\n", "if", "self", ".", "accurate_ratio", ":", "\n", "            ", "valid_ratio", "=", "self", ".", "_get_valid_ratio", "(", "samples", ".", "mask", ")", "\n", "\n", "", "hs", ",", "init_reference", ",", "inter_references", ",", "enc_outputs_class", ",", "enc_outputs_coord_unact", "=", "self", ".", "transformer", "(", "srcs", ",", "masks", ",", "pos", ",", "query_embeds", ",", "valid_ratio", "=", "valid_ratio", "\n", ")", "\n", "\n", "outputs_classes", "=", "[", "]", "\n", "outputs_coords", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "hs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "lvl", "==", "0", ":", "\n", "                ", "reference", "=", "init_reference", "\n", "", "else", ":", "\n", "                ", "reference", "=", "inter_references", "[", "lvl", "-", "1", "]", "\n", "", "reference", "=", "inverse_sigmoid", "(", "reference", ")", "\n", "outputs_class", "=", "self", ".", "class_embed", "[", "lvl", "]", "(", "hs", "[", "lvl", "]", ")", "\n", "tmp", "=", "self", ".", "bbox_embed", "[", "lvl", "]", "(", "hs", "[", "lvl", "]", ")", "\n", "if", "reference", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                ", "tmp", "+=", "reference", "\n", "", "else", ":", "\n", "                ", "assert", "reference", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "tmp", "[", "...", ",", ":", "2", "]", "+=", "reference", "\n", "", "outputs_coord", "=", "tmp", ".", "sigmoid", "(", ")", "\n", "outputs_classes", ".", "append", "(", "outputs_class", ")", "\n", "outputs_coords", ".", "append", "(", "outputs_coord", ")", "\n", "", "outputs_class", "=", "torch", ".", "stack", "(", "outputs_classes", ")", "\n", "outputs_coord", "=", "torch", ".", "stack", "(", "outputs_coords", ")", "\n", "if", "not", "self", ".", "two_stage", ":", "\n", "            ", "ref_pts", "=", "torch", ".", "cat", "(", "[", "init_reference", "[", "None", "]", ",", "inter_references", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "]", ")", "\n", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", ",", "'ref_pts'", ":", "ref_pts", ",", "'logits_all'", ":", "outputs_class", ",", "'boxes_all'", ":", "outputs_coord", "}", "\n", "", "else", ":", "\n", "            ", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "", "if", "self", ".", "aux_loss", ":", "\n", "            ", "out", "[", "'aux_outputs'", "]", "=", "self", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ")", "\n", "\n", "", "if", "self", ".", "two_stage", ":", "\n", "            ", "enc_outputs_coord", "=", "enc_outputs_coord_unact", ".", "sigmoid", "(", ")", "\n", "out", "[", "'enc_outputs'", "]", "=", "{", "'pred_logits'", ":", "enc_outputs_class", ",", "'pred_boxes'", ":", "enc_outputs_coord", "}", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.DeformableDETR._set_aux_loss": [[211, 218], ["zip"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_set_aux_loss", "(", "self", ",", "outputs_class", ",", "outputs_coord", ")", ":", "\n", "# this is a workaround to make torchscript happy, as torchscript", "\n", "# doesn't support dictionary with non-homogeneous values, such", "\n", "# as a dict having both a Tensor and a list.", "\n", "        ", "return", "[", "{", "'pred_logits'", ":", "a", ",", "'pred_boxes'", ":", "b", "}", "\n", "for", "a", ",", "b", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.__init__": [[226, 241], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "matcher", ",", "weight_dict", ",", "losses", ",", "focal_alpha", "=", "0.25", ")", ":", "\n", "        ", "\"\"\" Create the criterion.\n        Parameters:\n            num_classes: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            weight_dict: dict containing as key the names of the losses and as values their relative weight.\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n            focal_alpha: alpha in Focal Loss\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "matcher", "=", "matcher", "\n", "self", ".", "weight_dict", "=", "weight_dict", "\n", "self", ".", "losses", "=", "losses", "\n", "self", ".", "focal_alpha", "=", "focal_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.loss_labels": [[242, 267], ["deformable_detr.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "torch.full.unsqueeze", "torch.full.unsqueeze", "segmentation.sigmoid_focal_loss", "zip", "util.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.sigmoid_focal_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.accuracy"], ["", "def", "loss_labels", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "log", "=", "True", ")", ":", "\n", "        ", "\"\"\"Classification loss (NLL)\n        targets dicts must contain the key \"labels\" containing a tensor of dim [nb_target_boxes]\n        \"\"\"", "\n", "assert", "'pred_logits'", "in", "outputs", "\n", "src_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "target_classes_o", "=", "torch", ".", "cat", "(", "[", "t", "[", "\"labels\"", "]", "[", "J", "]", "for", "t", ",", "(", "_", ",", "J", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ")", "\n", "target_classes", "=", "torch", ".", "full", "(", "src_logits", ".", "shape", "[", ":", "2", "]", ",", "self", ".", "num_classes", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "target_classes", "[", "idx", "]", "=", "target_classes_o", "\n", "\n", "target_classes_onehot", "=", "torch", ".", "zeros", "(", "[", "src_logits", ".", "shape", "[", "0", "]", ",", "src_logits", ".", "shape", "[", "1", "]", ",", "src_logits", ".", "shape", "[", "2", "]", "+", "1", "]", ",", "\n", "dtype", "=", "src_logits", ".", "dtype", ",", "layout", "=", "src_logits", ".", "layout", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "target_classes_onehot", ".", "scatter_", "(", "2", ",", "target_classes", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "\n", "\n", "target_classes_onehot", "=", "target_classes_onehot", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "loss_ce", "=", "sigmoid_focal_loss", "(", "src_logits", ",", "target_classes_onehot", ",", "num_boxes", ",", "alpha", "=", "self", ".", "focal_alpha", ",", "gamma", "=", "2", ")", "*", "src_logits", ".", "shape", "[", "1", "]", "\n", "losses", "=", "{", "'loss_ce'", ":", "loss_ce", "}", "\n", "\n", "if", "log", ":", "\n", "# TODO this should probably be a separate loss, not hacked in this one here", "\n", "            ", "losses", "[", "'class_error'", "]", "=", "100", "-", "accuracy", "(", "src_logits", "[", "idx", "]", ",", "target_classes_o", ")", "[", "0", "]", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.loss_cardinality": [[268, 281], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.l1_loss", "torch.l1_loss", "card_pred.float", "torch.as_tensor.float", "torch.as_tensor.float", "len", "pred_logits.argmax"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "loss_cardinality", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\" Compute the cardinality error, ie the absolute error in the number of predicted non-empty boxes\n        This is not really a loss, it is intended for logging purposes only. It doesn't propagate gradients\n        \"\"\"", "\n", "pred_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "device", "=", "pred_logits", ".", "device", "\n", "tgt_lengths", "=", "torch", ".", "as_tensor", "(", "[", "len", "(", "v", "[", "\"labels\"", "]", ")", "for", "v", "in", "targets", "]", ",", "device", "=", "device", ")", "\n", "# Count the number of predictions that are NOT \"no-object\" (which is the last class)", "\n", "card_pred", "=", "(", "pred_logits", ".", "argmax", "(", "-", "1", ")", "!=", "pred_logits", ".", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "card_err", "=", "F", ".", "l1_loss", "(", "card_pred", ".", "float", "(", ")", ",", "tgt_lengths", ".", "float", "(", ")", ")", "\n", "losses", "=", "{", "'cardinality_error'", ":", "card_err", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.loss_boxes": [[282, 302], ["deformable_detr.SetCriterion._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.l1_loss", "torch.l1_loss", "torch.l1_loss.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "loss_giou.sum", "util.box_ops.generalized_box_iou", "zip", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "loss_boxes", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the bounding boxes, the L1 regression loss and the GIoU loss\n           targets dicts must contain the key \"boxes\" containing a tensor of dim [nb_target_boxes, 4]\n           The target boxes are expected in format (center_x, center_y, h, w), normalized by the image size.\n        \"\"\"", "\n", "assert", "'pred_boxes'", "in", "outputs", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "src_boxes", "=", "outputs", "[", "'pred_boxes'", "]", "[", "idx", "]", "\n", "target_boxes", "=", "torch", ".", "cat", "(", "[", "t", "[", "'boxes'", "]", "[", "i", "]", "for", "t", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "targets", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "loss_bbox", "=", "F", ".", "l1_loss", "(", "src_boxes", ",", "target_boxes", ",", "reduction", "=", "'none'", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", "[", "'loss_bbox'", "]", "=", "loss_bbox", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n", "loss_giou", "=", "1", "-", "torch", ".", "diag", "(", "box_ops", ".", "generalized_box_iou", "(", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "src_boxes", ")", ",", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "target_boxes", ")", ")", ")", "\n", "losses", "[", "'loss_giou'", "]", "=", "loss_giou", ".", "sum", "(", ")", "/", "num_boxes", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.loss_masks": [[303, 331], ["deformable_detr.SetCriterion._get_src_permutation_idx", "deformable_detr.SetCriterion._get_tgt_permutation_idx", "util.misc.nested_tensor_from_tensor_list().decompose", "target_masks[].flatten.to", "util.misc.interpolate", "src_masks[].flatten", "target_masks[].flatten", "segmentation.sigmoid_focal_loss", "segmentation.dice_loss", "util.misc.nested_tensor_from_tensor_list"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_tgt_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.sigmoid_focal_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.dice_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list"], ["", "def", "loss_masks", "(", "self", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the masks: the focal loss and the dice loss.\n           targets dicts must contain the key \"masks\" containing a tensor of dim [nb_target_boxes, h, w]\n        \"\"\"", "\n", "assert", "\"pred_masks\"", "in", "outputs", "\n", "\n", "src_idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "tgt_idx", "=", "self", ".", "_get_tgt_permutation_idx", "(", "indices", ")", "\n", "\n", "src_masks", "=", "outputs", "[", "\"pred_masks\"", "]", "\n", "\n", "# TODO use valid to mask invalid areas due to padding in loss", "\n", "target_masks", ",", "valid", "=", "nested_tensor_from_tensor_list", "(", "[", "t", "[", "\"masks\"", "]", "for", "t", "in", "targets", "]", ")", ".", "decompose", "(", ")", "\n", "target_masks", "=", "target_masks", ".", "to", "(", "src_masks", ")", "\n", "\n", "src_masks", "=", "src_masks", "[", "src_idx", "]", "\n", "# upsample predictions to the target size", "\n", "src_masks", "=", "interpolate", "(", "src_masks", "[", ":", ",", "None", "]", ",", "size", "=", "target_masks", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "src_masks", "=", "src_masks", "[", ":", ",", "0", "]", ".", "flatten", "(", "1", ")", "\n", "\n", "target_masks", "=", "target_masks", "[", "tgt_idx", "]", ".", "flatten", "(", "1", ")", "\n", "\n", "losses", "=", "{", "\n", "\"loss_mask\"", ":", "sigmoid_focal_loss", "(", "src_masks", ",", "target_masks", ",", "num_boxes", ")", ",", "\n", "\"loss_dice\"", ":", "dice_loss", "(", "src_masks", ",", "target_masks", ",", "num_boxes", ")", ",", "\n", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx": [[332, 337], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "_get_src_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute predictions following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "src", ",", "i", ")", "for", "i", ",", "(", "src", ",", "_", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "src_idx", "=", "torch", ".", "cat", "(", "[", "src", "for", "(", "src", ",", "_", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "src_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_tgt_permutation_idx": [[338, 343], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "enumerate"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "_get_tgt_permutation_idx", "(", "self", ",", "indices", ")", ":", "\n", "# permute targets following indices", "\n", "        ", "batch_idx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "tgt", ",", "i", ")", "for", "i", ",", "(", "_", ",", "tgt", ")", "in", "enumerate", "(", "indices", ")", "]", ")", "\n", "tgt_idx", "=", "torch", ".", "cat", "(", "[", "tgt", "for", "(", "_", ",", "tgt", ")", "in", "indices", "]", ")", "\n", "return", "batch_idx", ",", "tgt_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.get_loss": [[344, 353], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_map", "=", "{", "\n", "'labels'", ":", "self", ".", "loss_labels", ",", "\n", "'cardinality'", ":", "self", ".", "loss_cardinality", ",", "\n", "'boxes'", ":", "self", ".", "loss_boxes", ",", "\n", "'masks'", ":", "self", ".", "loss_masks", "\n", "}", "\n", "assert", "loss", "in", "loss_map", ",", "f'do you really want to compute {loss} loss?'", "\n", "return", "loss_map", "[", "loss", "]", "(", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion.forward": [[354, 414], ["deformable_detr.SetCriterion.matcher", "sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "util.misc.is_dist_avail_and_initialized", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "losses.update", "enumerate", "copy.deepcopy", "deformable_detr.SetCriterion.matcher", "outputs.items", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "deformable_detr.SetCriterion.get_loss", "deformable_detr.SetCriterion.matcher", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deformable_detr.SetCriterion.get_loss", "losses.update", "next", "deformable_detr.SetCriterion.get_loss", "losses.update", "iter", "util.misc.get_world_size", "deformable_detr.SetCriterion.items", "outputs.values", "deformable_detr.SetCriterion.items"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.datasets.data_prefetcher.data_prefetcher.next", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\" This performs the loss computation.\n        Parameters:\n             outputs: dict of tensors, see the output specification of the model for the format\n             targets: list of dicts, such that len(targets) == batch_size.\n                      The expected keys in each dict depends on the losses applied, see each loss' doc\n        \"\"\"", "\n", "outputs_without_aux", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "if", "k", "!=", "'aux_outputs'", "and", "k", "!=", "'enc_outputs'", "}", "\n", "\n", "# Retrieve the matching between the outputs of the last layer and the targets", "\n", "indices", "=", "self", ".", "matcher", "(", "outputs_without_aux", ",", "targets", ")", "\n", "\n", "# Compute the average number of target boxes accross all nodes, for normalization purposes", "\n", "num_boxes", "=", "sum", "(", "len", "(", "t", "[", "\"labels\"", "]", ")", "for", "t", "in", "targets", ")", "\n", "num_boxes", "=", "torch", ".", "as_tensor", "(", "[", "num_boxes", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "next", "(", "iter", "(", "outputs", ".", "values", "(", ")", ")", ")", ".", "device", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "torch", ".", "distributed", ".", "all_reduce", "(", "num_boxes", ")", "\n", "", "num_boxes", "=", "torch", ".", "clamp", "(", "num_boxes", "/", "get_world_size", "(", ")", ",", "min", "=", "1", ")", ".", "item", "(", ")", "\n", "\n", "# Compute all the requested losses", "\n", "losses", "=", "{", "}", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "kwargs", "=", "{", "}", "\n", "losses", ".", "update", "(", "self", ".", "get_loss", "(", "loss", ",", "outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", ")", "\n", "\n", "# In case of auxiliary losses, we repeat this process with the output of each intermediate layer.", "\n", "", "if", "'aux_outputs'", "in", "outputs", ":", "\n", "            ", "for", "i", ",", "aux_outputs", "in", "enumerate", "(", "outputs", "[", "'aux_outputs'", "]", ")", ":", "\n", "                ", "indices", "=", "self", ".", "matcher", "(", "aux_outputs", ",", "targets", ")", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "                    ", "if", "loss", "==", "'masks'", ":", "\n", "# Intermediate masks losses are too costly to compute, we ignore them.", "\n", "                        ", "continue", "\n", "", "kwargs", "=", "{", "}", "\n", "if", "loss", "==", "'labels'", ":", "\n", "# Logging is enabled only for the last layer", "\n", "                        ", "kwargs", "[", "'log'", "]", "=", "False", "\n", "", "l_dict", "=", "self", ".", "get_loss", "(", "loss", ",", "aux_outputs", ",", "targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "l_dict", "=", "{", "k", "+", "f'_{i}'", ":", "v", "for", "k", ",", "v", "in", "l_dict", ".", "items", "(", ")", "}", "\n", "losses", ".", "update", "(", "l_dict", ")", "\n", "\n", "", "", "", "if", "'enc_outputs'", "in", "outputs", ":", "\n", "            ", "enc_outputs", "=", "outputs", "[", "'enc_outputs'", "]", "\n", "bin_targets", "=", "copy", ".", "deepcopy", "(", "targets", ")", "\n", "for", "bt", "in", "bin_targets", ":", "\n", "                ", "bt", "[", "'labels'", "]", "=", "torch", ".", "zeros_like", "(", "bt", "[", "'labels'", "]", ")", "\n", "", "indices", "=", "self", ".", "matcher", "(", "enc_outputs", ",", "bin_targets", ")", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "                ", "if", "loss", "==", "'masks'", ":", "\n", "# Intermediate masks losses are too costly to compute, we ignore them.", "\n", "                    ", "continue", "\n", "", "kwargs", "=", "{", "}", "\n", "if", "loss", "==", "'labels'", ":", "\n", "# Logging is enabled only for the last layer", "\n", "                    ", "kwargs", "[", "'log'", "]", "=", "False", "\n", "", "l_dict", "=", "self", ".", "get_loss", "(", "loss", ",", "enc_outputs", ",", "bin_targets", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "l_dict", "=", "{", "k", "+", "f'_enc'", ":", "v", "for", "k", ",", "v", "in", "l_dict", ".", "items", "(", ")", "}", "\n", "losses", ".", "update", "(", "l_dict", ")", "\n", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.PostProcess.forward": [[419, 449], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "out_logits.sigmoid", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "util.box_ops.box_cxcywh_to_xyxy", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "target_sizes.unbind", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "out_logits.sigmoid.view", "topk_boxes.unsqueeze().repeat", "zip", "topk_boxes.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "outputs", ",", "target_sizes", ")", ":", "\n", "        ", "\"\"\" Perform the computation\n        Parameters:\n            outputs: raw outputs of the model\n            target_sizes: tensor of dimension [batch_size x 2] containing the size of each images of the batch\n                          For evaluation, this must be the original image size (before any data augmentation)\n                          For visualization, this should be the image size after data augment, but before padding\n        \"\"\"", "\n", "out_logits", ",", "out_bbox", "=", "outputs", "[", "'pred_logits'", "]", ",", "outputs", "[", "'pred_boxes'", "]", "\n", "\n", "assert", "len", "(", "out_logits", ")", "==", "len", "(", "target_sizes", ")", "\n", "assert", "target_sizes", ".", "shape", "[", "1", "]", "==", "2", "\n", "\n", "prob", "=", "out_logits", ".", "sigmoid", "(", ")", "\n", "topk_values", ",", "topk_indexes", "=", "torch", ".", "topk", "(", "prob", ".", "view", "(", "out_logits", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "100", ",", "dim", "=", "1", ")", "\n", "scores", "=", "topk_values", "\n", "topk_boxes", "=", "topk_indexes", "//", "out_logits", ".", "shape", "[", "2", "]", "\n", "labels", "=", "topk_indexes", "%", "out_logits", ".", "shape", "[", "2", "]", "\n", "boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "out_bbox", ")", "\n", "boxes", "=", "torch", ".", "gather", "(", "boxes", ",", "1", ",", "topk_boxes", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "4", ")", ")", "\n", "\n", "# and from relative [0, 1] to absolute [0, height] coordinates", "\n", "img_h", ",", "img_w", "=", "target_sizes", ".", "unbind", "(", "1", ")", "\n", "scale_fct", "=", "torch", ".", "stack", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ",", "dim", "=", "1", ")", "\n", "boxes", "=", "boxes", "*", "scale_fct", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "results", "=", "[", "{", "'scores'", ":", "s", ",", "'labels'", ":", "l", ",", "'boxes'", ":", "b", "}", "for", "s", ",", "l", ",", "b", "in", "zip", "(", "scores", ",", "labels", ",", "boxes", ")", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.MLP.__init__": [[454, 459], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "zip"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "h", "=", "[", "hidden_dim", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "[", "input_dim", "]", "+", "h", ",", "h", "+", "[", "output_dim", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.MLP.forward": [[460, 464], ["enumerate", "torch.relu", "torch.relu", "layer", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ")", ")", "if", "i", "<", "self", ".", "num_layers", "-", "1", "else", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr._get_clones": [[33, 35], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.build": [[466, 524], ["torch.device", "torch.device", "backbone.build_backbone", "deformable_transformer.build_deforamble_transformer", "deformable_detr.DeformableDETR", "matcher.build_matcher", "SetCriterion.to", "segmentation.DETRsegm", "range", "aux_weight_dict.update", "weight_dict.update", "MixSetCriterion", "deformable_detr.SetCriterion", "deformable_detr.PostProcess", "segmentation.PostProcessSegm", "aux_weight_dict.update", "segmentation.PostProcessPanoptic", "weight_dict.items", "range", "weight_dict.items"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.build_backbone", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.build_deforamble_transformer", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.matcher.build_matcher", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update"], ["", "", "def", "build", "(", "args", ")", ":", "\n", "    ", "num_classes", "=", "20", "if", "args", ".", "dataset_file", "!=", "'coco'", "else", "91", "\n", "if", "args", ".", "dataset_file", "==", "\"coco_panoptic\"", ":", "\n", "        ", "num_classes", "=", "250", "\n", "", "if", "args", ".", "dataset_file", "==", "'mot'", "or", "args", ".", "dataset_file", "==", "'mot_ori'", ":", "\n", "        ", "num_classes", "=", "1", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_mot'", ":", "\n", "        ", "num_classes", "=", "1", "\n", "", "if", "args", ".", "dataset_file", "==", "'e2e_dance'", ":", "\n", "        ", "num_classes", "=", "1", "\n", "", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "backbone", "=", "build_backbone", "(", "args", ")", "\n", "transformer", "=", "build_deforamble_transformer", "(", "args", ")", "\n", "model", "=", "DeformableDETR", "(", "\n", "backbone", ",", "\n", "transformer", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_queries", "=", "args", ".", "num_queries", ",", "\n", "num_feature_levels", "=", "args", ".", "num_feature_levels", ",", "\n", "aux_loss", "=", "args", ".", "aux_loss", ",", "\n", "with_box_refine", "=", "args", ".", "with_box_refine", ",", "\n", "two_stage", "=", "args", ".", "two_stage", ",", "\n", "accurate_ratio", "=", "args", ".", "accurate_ratio", ",", "\n", ")", "\n", "if", "args", ".", "masks", ":", "\n", "        ", "model", "=", "DETRsegm", "(", "model", ",", "freeze_detr", "=", "(", "args", ".", "frozen_weights", "is", "not", "None", ")", ")", "\n", "", "matcher", "=", "build_matcher", "(", "args", ")", "\n", "weight_dict", "=", "{", "'loss_ce'", ":", "args", ".", "cls_loss_coef", ",", "'loss_bbox'", ":", "args", ".", "bbox_loss_coef", "}", "\n", "weight_dict", "[", "'loss_giou'", "]", "=", "args", ".", "giou_loss_coef", "\n", "if", "args", ".", "masks", ":", "\n", "        ", "weight_dict", "[", "\"loss_mask\"", "]", "=", "args", ".", "mask_loss_coef", "\n", "weight_dict", "[", "\"loss_dice\"", "]", "=", "args", ".", "dice_loss_coef", "\n", "# TODO this is a hack", "\n", "", "if", "args", ".", "aux_loss", ":", "\n", "        ", "aux_weight_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "args", ".", "dec_layers", "-", "1", ")", ":", "\n", "            ", "aux_weight_dict", ".", "update", "(", "{", "k", "+", "f'_{i}'", ":", "v", "for", "k", ",", "v", "in", "weight_dict", ".", "items", "(", ")", "}", ")", "\n", "", "aux_weight_dict", ".", "update", "(", "{", "k", "+", "f'_enc'", ":", "v", "for", "k", ",", "v", "in", "weight_dict", ".", "items", "(", ")", "}", ")", "\n", "weight_dict", ".", "update", "(", "aux_weight_dict", ")", "\n", "\n", "", "losses", "=", "[", "'labels'", ",", "'boxes'", ",", "'cardinality'", "]", "\n", "if", "args", ".", "masks", ":", "\n", "        ", "losses", "+=", "[", "\"masks\"", "]", "\n", "# num_classes, matcher, weight_dict, losses, focal_alpha=0.25", "\n", "", "if", "args", ".", "mix_match", ":", "\n", "        ", "criterion", "=", "MixSetCriterion", "(", "num_classes", ",", "matcher", ",", "weight_dict", ",", "losses", ",", "focal_alpha", "=", "args", ".", "focal_alpha", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "SetCriterion", "(", "num_classes", ",", "matcher", ",", "weight_dict", ",", "losses", ",", "focal_alpha", "=", "args", ".", "focal_alpha", ")", "\n", "", "criterion", ".", "to", "(", "device", ")", "\n", "postprocessors", "=", "{", "'bbox'", ":", "PostProcess", "(", ")", "}", "\n", "if", "args", ".", "masks", ":", "\n", "        ", "postprocessors", "[", "'segm'", "]", "=", "PostProcessSegm", "(", ")", "\n", "if", "args", ".", "dataset_file", "==", "\"coco_panoptic\"", ":", "\n", "            ", "is_thing_map", "=", "{", "i", ":", "i", "<=", "90", "for", "i", "in", "range", "(", "201", ")", "}", "\n", "postprocessors", "[", "\"panoptic\"", "]", "=", "PostProcessPanoptic", "(", "is_thing_map", ",", "threshold", "=", "0.85", ")", "\n", "\n", "", "", "return", "model", ",", "criterion", ",", "postprocessors", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer.__init__": [[29, 66], ["torch.nn.Module.__init__", "deformable_transformer_plus.DeformableTransformerEncoderLayer", "deformable_transformer_plus.DeformableTransformerEncoder", "deformable_transformer_plus.DeformableTransformerDecoderLayer", "deformable_transformer_plus.DeformableTransformerDecoder", "torch.nn.Parameter", "torch.nn.Parameter", "deformable_transformer_plus.DeformableTransformer._reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "256", ",", "nhead", "=", "8", ",", "\n", "num_encoder_layers", "=", "6", ",", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "1024", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "return_intermediate_dec", "=", "False", ",", "\n", "num_feature_levels", "=", "4", ",", "dec_n_points", "=", "4", ",", "enc_n_points", "=", "4", ",", "\n", "two_stage", "=", "False", ",", "two_stage_num_proposals", "=", "300", ",", "decoder_self_cross", "=", "True", ",", "sigmoid_attn", "=", "False", ",", "\n", "extra_track_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "new_frame_adaptor", "=", "None", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "self", ".", "two_stage_num_proposals", "=", "two_stage_num_proposals", "\n", "\n", "encoder_layer", "=", "DeformableTransformerEncoderLayer", "(", "d_model", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "\n", "num_feature_levels", ",", "nhead", ",", "enc_n_points", ",", "\n", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "encoder", "=", "DeformableTransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ")", "\n", "\n", "decoder_layer", "=", "DeformableTransformerDecoderLayer", "(", "d_model", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "\n", "num_feature_levels", ",", "nhead", ",", "dec_n_points", ",", "decoder_self_cross", ",", "\n", "sigmoid_attn", "=", "sigmoid_attn", ",", "extra_track_attn", "=", "extra_track_attn", ")", "\n", "self", ".", "decoder", "=", "DeformableTransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "return_intermediate_dec", ")", "\n", "\n", "self", ".", "level_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_feature_levels", ",", "d_model", ")", ")", "\n", "\n", "if", "two_stage", ":", "\n", "            ", "self", ".", "enc_output", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "enc_output_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "pos_trans", "=", "nn", ".", "Linear", "(", "d_model", "*", "2", ",", "d_model", "*", "2", ")", "\n", "self", ".", "pos_trans_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", "*", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reference_points", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer._reset_parameters": [[67, 78], ["deformable_transformer_plus.DeformableTransformer.parameters", "deformable_transformer_plus.DeformableTransformer.modules", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "MSDeformAttn", ")", ":", "\n", "                ", "m", ".", "_reset_parameters", "(", ")", "\n", "", "", "if", "not", "self", ".", "two_stage", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "reference_points", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "constant_", "(", "self", ".", "reference_points", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "normal_", "(", "self", ".", "level_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer.get_proposal_pos_embed": [[79, 93], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "proposals.sigmoid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pos[].sin", "pos[].cos"], "methods", ["None"], ["", "def", "get_proposal_pos_embed", "(", "self", ",", "proposals", ")", ":", "\n", "        ", "num_pos_feats", "=", "128", "\n", "temperature", "=", "10000", "\n", "scale", "=", "2", "*", "math", ".", "pi", "\n", "\n", "dim_t", "=", "torch", ".", "arange", "(", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "proposals", ".", "device", ")", "\n", "dim_t", "=", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "num_pos_feats", ")", "\n", "# N, L, 4", "\n", "proposals", "=", "proposals", ".", "sigmoid", "(", ")", "*", "scale", "\n", "# N, L, 4, 128", "\n", "pos", "=", "proposals", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "# N, L, 4, 64, 2", "\n", "pos", "=", "torch", ".", "stack", "(", "(", "pos", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "2", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer.gen_encoder_output_proposals": [[94, 125], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "output_proposals.masked_fill.masked_fill.masked_fill", "output_proposals.masked_fill.masked_fill.masked_fill", "deformable_transformer_plus.DeformableTransformer.masked_fill", "deformable_transformer_plus.DeformableTransformer.masked_fill", "deformable_transformer_plus.DeformableTransformer.enc_output_norm", "memory_padding_mask[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "proposals.append", "memory_padding_mask.unsqueeze", "float", "float", "memory_padding_mask.unsqueeze", "float", "float", "deformable_transformer_plus.DeformableTransformer.enc_output", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid_x.unsqueeze", "grid_y.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "gen_encoder_output_proposals", "(", "self", ",", "memory", ",", "memory_padding_mask", ",", "spatial_shapes", ")", ":", "\n", "        ", "N_", ",", "S_", ",", "C_", "=", "memory", ".", "shape", "\n", "base_scale", "=", "4.0", "\n", "proposals", "=", "[", "]", "\n", "_cur", "=", "0", "\n", "for", "lvl", ",", "(", "H_", ",", "W_", ")", "in", "enumerate", "(", "spatial_shapes", ")", ":", "\n", "            ", "mask_flatten_", "=", "memory_padding_mask", "[", ":", ",", "_cur", ":", "(", "_cur", "+", "H_", "*", "W_", ")", "]", ".", "view", "(", "N_", ",", "H_", ",", "W_", ",", "1", ")", "\n", "valid_H", "=", "torch", ".", "sum", "(", "~", "mask_flatten_", "[", ":", ",", ":", ",", "0", ",", "0", "]", ",", "1", ")", "\n", "valid_W", "=", "torch", ".", "sum", "(", "~", "mask_flatten_", "[", ":", ",", "0", ",", ":", ",", "0", "]", ",", "1", ")", "\n", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0", ",", "H_", "-", "1", ",", "H_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "memory", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "W_", "-", "1", ",", "W_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "memory", ".", "device", ")", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "grid_x", ".", "unsqueeze", "(", "-", "1", ")", ",", "grid_y", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "\n", "\n", "scale", "=", "torch", ".", "cat", "(", "[", "valid_W", ".", "unsqueeze", "(", "-", "1", ")", ",", "valid_H", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "1", ")", ".", "view", "(", "N_", ",", "1", ",", "1", ",", "2", ")", "\n", "grid", "=", "(", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N_", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "+", "0.5", ")", "/", "scale", "\n", "wh", "=", "torch", ".", "ones_like", "(", "grid", ")", "*", "0.05", "*", "(", "2.0", "**", "lvl", ")", "\n", "proposal", "=", "torch", ".", "cat", "(", "(", "grid", ",", "wh", ")", ",", "-", "1", ")", ".", "view", "(", "N_", ",", "-", "1", ",", "4", ")", "\n", "proposals", ".", "append", "(", "proposal", ")", "\n", "_cur", "+=", "(", "H_", "*", "W_", ")", "\n", "", "output_proposals", "=", "torch", ".", "cat", "(", "proposals", ",", "1", ")", "\n", "output_proposals_valid", "=", "(", "(", "output_proposals", ">", "0.01", ")", "&", "(", "output_proposals", "<", "0.99", ")", ")", ".", "all", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "output_proposals", "=", "torch", ".", "log", "(", "output_proposals", "/", "(", "1", "-", "output_proposals", ")", ")", "\n", "output_proposals", "=", "output_proposals", ".", "masked_fill", "(", "memory_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "output_proposals", "=", "output_proposals", ".", "masked_fill", "(", "~", "output_proposals_valid", ",", "float", "(", "'inf'", ")", ")", "\n", "\n", "output_memory", "=", "memory", "\n", "output_memory", "=", "output_memory", ".", "masked_fill", "(", "memory_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "0", ")", ")", "\n", "output_memory", "=", "output_memory", ".", "masked_fill", "(", "~", "output_proposals_valid", ",", "float", "(", "0", ")", ")", "\n", "output_memory", "=", "self", ".", "enc_output_norm", "(", "self", ".", "enc_output", "(", "output_memory", ")", ")", "\n", "return", "output_memory", ",", "output_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer.get_valid_ratio": [[126, 134], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum.float", "torch.sum.float", "torch.sum.float", "torch.sum.float"], "methods", ["None"], ["", "def", "get_valid_ratio", "(", "self", ",", "mask", ")", ":", "\n", "        ", "_", ",", "H", ",", "W", "=", "mask", ".", "shape", "\n", "valid_H", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", ":", ",", "0", "]", ",", "1", ")", "\n", "valid_W", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", "0", ",", ":", "]", ",", "1", ")", "\n", "valid_ratio_h", "=", "valid_H", ".", "float", "(", ")", "/", "H", "\n", "valid_ratio_w", "=", "valid_W", ".", "float", "(", ")", "/", "W", "\n", "valid_ratio", "=", "torch", ".", "stack", "(", "[", "valid_ratio_w", ",", "valid_ratio_h", "]", ",", "-", "1", ")", "\n", "return", "valid_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformer.forward": [[135, 198], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "deformable_transformer_plus.DeformableTransformer.encoder", "deformable_transformer_plus.DeformableTransformer.decoder", "zip", "torch.as_tensor.append", "torch.as_tensor.append", "src.flatten().transpose.flatten().transpose.flatten().transpose", "mask.flatten.flatten.flatten", "pos_embed.flatten().transpose.flatten().transpose.flatten().transpose", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "deformable_transformer_plus.DeformableTransformer.gen_encoder_output_proposals", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "topk_coords_unact.detach.detach.detach", "topk_coords_unact.detach.detach.sigmoid", "deformable_transformer_plus.DeformableTransformer.pos_trans_norm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "query_embed.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "tgt.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "deformable_transformer_plus.DeformableTransformer.level_embed[].view", "torch.as_tensor.new_zeros", "torch.as_tensor.new_zeros", "deformable_transformer_plus.DeformableTransformer.get_valid_ratio", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "topk_proposals.unsqueeze().repeat", "deformable_transformer_plus.DeformableTransformer.pos_trans", "deformable_transformer_plus.DeformableTransformer.reference_points().sigmoid", "ref_pts.unsqueeze().repeat().sigmoid", "src.flatten().transpose.flatten().transpose.flatten", "pos_embed.flatten().transpose.flatten().transpose.flatten", "torch.as_tensor.prod().cumsum", "torch.as_tensor.prod().cumsum", "deformable_transformer_plus.DeformableTransformer.get_proposal_pos_embed", "query_embed.unsqueeze().expand.unsqueeze().expand.unsqueeze", "tgt.unsqueeze().expand.unsqueeze().expand.unsqueeze", "topk_proposals.unsqueeze", "deformable_transformer_plus.DeformableTransformer.reference_points", "ref_pts.unsqueeze().repeat", "torch.as_tensor.prod", "torch.as_tensor.prod", "ref_pts.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.gen_encoder_output_proposals", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_valid_ratio", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_proposal_pos_embed"], ["", "def", "forward", "(", "self", ",", "srcs", ",", "masks", ",", "pos_embeds", ",", "query_embed", "=", "None", ",", "ref_pts", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "two_stage", "or", "query_embed", "is", "not", "None", "\n", "\n", "# prepare input for encoder", "\n", "src_flatten", "=", "[", "]", "\n", "mask_flatten", "=", "[", "]", "\n", "lvl_pos_embed_flatten", "=", "[", "]", "\n", "spatial_shapes", "=", "[", "]", "\n", "for", "lvl", ",", "(", "src", ",", "mask", ",", "pos_embed", ")", "in", "enumerate", "(", "zip", "(", "srcs", ",", "masks", ",", "pos_embeds", ")", ")", ":", "\n", "            ", "bs", ",", "c", ",", "h", ",", "w", "=", "src", ".", "shape", "\n", "spatial_shape", "=", "(", "h", ",", "w", ")", "\n", "spatial_shapes", ".", "append", "(", "spatial_shape", ")", "\n", "src", "=", "src", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "mask", "=", "mask", ".", "flatten", "(", "1", ")", "\n", "pos_embed", "=", "pos_embed", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "lvl_pos_embed", "=", "pos_embed", "+", "self", ".", "level_embed", "[", "lvl", "]", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "lvl_pos_embed_flatten", ".", "append", "(", "lvl_pos_embed", ")", "\n", "src_flatten", ".", "append", "(", "src", ")", "\n", "mask_flatten", ".", "append", "(", "mask", ")", "\n", "", "src_flatten", "=", "torch", ".", "cat", "(", "src_flatten", ",", "1", ")", "\n", "mask_flatten", "=", "torch", ".", "cat", "(", "mask_flatten", ",", "1", ")", "\n", "lvl_pos_embed_flatten", "=", "torch", ".", "cat", "(", "lvl_pos_embed_flatten", ",", "1", ")", "\n", "spatial_shapes", "=", "torch", ".", "as_tensor", "(", "spatial_shapes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "src_flatten", ".", "device", ")", "\n", "level_start_index", "=", "torch", ".", "cat", "(", "(", "spatial_shapes", ".", "new_zeros", "(", "(", "1", ",", ")", ")", ",", "spatial_shapes", ".", "prod", "(", "1", ")", ".", "cumsum", "(", "0", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "valid_ratios", "=", "torch", ".", "stack", "(", "[", "self", ".", "get_valid_ratio", "(", "m", ")", "for", "m", "in", "masks", "]", ",", "1", ")", "\n", "\n", "# encoder", "\n", "memory", "=", "self", ".", "encoder", "(", "src_flatten", ",", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "lvl_pos_embed_flatten", ",", "mask_flatten", ")", "\n", "# prepare input for decoder", "\n", "bs", ",", "_", ",", "c", "=", "memory", ".", "shape", "\n", "if", "self", ".", "two_stage", ":", "\n", "            ", "output_memory", ",", "output_proposals", "=", "self", ".", "gen_encoder_output_proposals", "(", "memory", ",", "mask_flatten", ",", "spatial_shapes", ")", "\n", "\n", "# hack implementation for two-stage Deformable DETR", "\n", "enc_outputs_class", "=", "self", ".", "decoder", ".", "class_embed", "[", "self", ".", "decoder", ".", "num_layers", "]", "(", "output_memory", ")", "\n", "enc_outputs_coord_unact", "=", "self", ".", "decoder", ".", "bbox_embed", "[", "self", ".", "decoder", ".", "num_layers", "]", "(", "output_memory", ")", "+", "output_proposals", "\n", "\n", "topk", "=", "self", ".", "two_stage_num_proposals", "\n", "topk_proposals", "=", "torch", ".", "topk", "(", "enc_outputs_class", "[", "...", ",", "0", "]", ",", "topk", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "topk_coords_unact", "=", "torch", ".", "gather", "(", "enc_outputs_coord_unact", ",", "1", ",", "topk_proposals", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "4", ")", ")", "\n", "topk_coords_unact", "=", "topk_coords_unact", ".", "detach", "(", ")", "\n", "reference_points", "=", "topk_coords_unact", ".", "sigmoid", "(", ")", "\n", "init_reference_out", "=", "reference_points", "\n", "pos_trans_out", "=", "self", ".", "pos_trans_norm", "(", "self", ".", "pos_trans", "(", "self", ".", "get_proposal_pos_embed", "(", "topk_coords_unact", ")", ")", ")", "\n", "query_embed", ",", "tgt", "=", "torch", ".", "split", "(", "pos_trans_out", ",", "c", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "query_embed", ",", "tgt", "=", "torch", ".", "split", "(", "query_embed", ",", "c", ",", "dim", "=", "1", ")", "\n", "query_embed", "=", "query_embed", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", "\n", "tgt", "=", "tgt", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "if", "ref_pts", "is", "None", ":", "\n", "                ", "reference_points", "=", "self", ".", "reference_points", "(", "query_embed", ")", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "reference_points", "=", "ref_pts", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ")", ".", "sigmoid", "(", ")", "\n", "", "init_reference_out", "=", "reference_points", "\n", "# decoder", "\n", "", "hs", ",", "inter_references", "=", "self", ".", "decoder", "(", "tgt", ",", "reference_points", ",", "memory", ",", "\n", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "query_embed", ",", "mask_flatten", ")", "\n", "\n", "inter_references_out", "=", "inter_references", "\n", "if", "self", ".", "two_stage", ":", "\n", "            ", "return", "hs", ",", "init_reference_out", ",", "inter_references_out", ",", "enc_outputs_class", ",", "enc_outputs_coord_unact", "\n", "", "return", "hs", ",", "init_reference_out", ",", "inter_references_out", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoderLayer.__init__": [[201, 219], ["torch.nn.Module.__init__", "models.ops.modules.MSDeformAttn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "deformable_transformer_plus._get_activation_fn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "\n", "d_model", "=", "256", ",", "d_ffn", "=", "1024", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "n_levels", "=", "4", ",", "n_heads", "=", "8", ",", "n_points", "=", "4", ",", "sigmoid_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self attention", "\n", "self", ".", "self_attn", "=", "MSDeformAttn", "(", "d_model", ",", "n_levels", ",", "n_heads", ",", "n_points", ",", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# ffn", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ffn", ")", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_ffn", ",", "d_model", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoderLayer.with_pos_embed": [[220, 223], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_pos_embed", "(", "tensor", ",", "pos", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoderLayer.forward_ffn": [[224, 229], ["deformable_transformer_plus.DeformableTransformerEncoderLayer.linear2", "deformable_transformer_plus.DeformableTransformerEncoderLayer.norm2", "deformable_transformer_plus.DeformableTransformerEncoderLayer.dropout2", "deformable_transformer_plus.DeformableTransformerEncoderLayer.dropout3", "deformable_transformer_plus.DeformableTransformerEncoderLayer.activation", "deformable_transformer_plus.DeformableTransformerEncoderLayer.linear1"], "methods", ["None"], ["", "def", "forward_ffn", "(", "self", ",", "src", ")", ":", "\n", "        ", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout2", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout3", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoderLayer.forward": [[230, 239], ["deformable_transformer_plus.DeformableTransformerEncoderLayer.self_attn", "deformable_transformer_plus.DeformableTransformerEncoderLayer.norm1", "deformable_transformer_plus.DeformableTransformerEncoderLayer.forward_ffn", "deformable_transformer_plus.DeformableTransformerEncoderLayer.with_pos_embed", "deformable_transformer_plus.DeformableTransformerEncoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "src", ",", "pos", ",", "reference_points", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", "=", "None", ")", ":", "\n", "# self attention", "\n", "        ", "src2", "=", "self", ".", "self_attn", "(", "self", ".", "with_pos_embed", "(", "src", ",", "pos", ")", ",", "reference_points", ",", "src", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "\n", "# ffn", "\n", "src", "=", "self", ".", "forward_ffn", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoder.__init__": [[242, 246], ["torch.nn.Module.__init__", "deformable_transformer_plus._get_clones"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoder.get_reference_points": [[247, 261], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "reference_points_list.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ref_y.reshape", "ref_x.reshape"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "@", "staticmethod", "\n", "def", "get_reference_points", "(", "spatial_shapes", ",", "valid_ratios", ",", "device", ")", ":", "\n", "        ", "reference_points_list", "=", "[", "]", "\n", "for", "lvl", ",", "(", "H_", ",", "W_", ")", "in", "enumerate", "(", "spatial_shapes", ")", ":", "\n", "\n", "            ", "ref_y", ",", "ref_x", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0.5", ",", "H_", "-", "0.5", ",", "H_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "0.5", ",", "W_", "-", "0.5", ",", "W_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ")", "\n", "ref_y", "=", "ref_y", ".", "reshape", "(", "-", "1", ")", "[", "None", "]", "/", "(", "valid_ratios", "[", ":", ",", "None", ",", "lvl", ",", "1", "]", "*", "H_", ")", "\n", "ref_x", "=", "ref_x", ".", "reshape", "(", "-", "1", ")", "[", "None", "]", "/", "(", "valid_ratios", "[", ":", ",", "None", ",", "lvl", ",", "0", "]", "*", "W_", ")", "\n", "ref", "=", "torch", ".", "stack", "(", "(", "ref_x", ",", "ref_y", ")", ",", "-", "1", ")", "\n", "reference_points_list", ".", "append", "(", "ref", ")", "\n", "", "reference_points", "=", "torch", ".", "cat", "(", "reference_points_list", ",", "1", ")", "\n", "reference_points", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "valid_ratios", "[", ":", ",", "None", "]", "\n", "return", "reference_points", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerEncoder.forward": [[262, 269], ["deformable_transformer_plus.DeformableTransformerEncoder.get_reference_points", "enumerate", "layer"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoder.get_reference_points"], ["", "def", "forward", "(", "self", ",", "src", ",", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "pos", "=", "None", ",", "padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "src", "\n", "reference_points", "=", "self", ".", "get_reference_points", "(", "spatial_shapes", ",", "valid_ratios", ",", "device", "=", "src", ".", "device", ")", "\n", "for", "_", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "output", "=", "layer", "(", "output", ",", "pos", ",", "reference_points", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer.__init__": [[272, 309], ["torch.nn.Module.__init__", "models.ops.modules.MSDeformAttn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "deformable_transformer_plus._get_activation_fn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "print", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "print", "print"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "256", ",", "d_ffn", "=", "1024", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "n_levels", "=", "4", ",", "n_heads", "=", "8", ",", "n_points", "=", "4", ",", "self_cross", "=", "True", ",", "sigmoid_attn", "=", "False", ",", "extra_track_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "self_cross", "=", "self_cross", "\n", "self", ".", "num_head", "=", "n_heads", "\n", "\n", "# cross attention", "\n", "self", ".", "cross_attn", "=", "MSDeformAttn", "(", "d_model", ",", "n_levels", ",", "n_heads", ",", "n_points", ",", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_heads", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# ffn", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ffn", ")", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_ffn", ",", "d_model", ")", "\n", "self", ".", "dropout4", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# update track query_embed", "\n", "self", ".", "extra_track_attn", "=", "extra_track_attn", "\n", "if", "self", ".", "extra_track_attn", ":", "\n", "            ", "print", "(", "'Training with Extra Self Attention in Every Decoder.'", ",", "flush", "=", "True", ")", "\n", "self", ".", "update_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_heads", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "dropout5", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm4", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "", "if", "self_cross", ":", "\n", "            ", "print", "(", "'Training with Self-Cross Attention.'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Training with Cross-Self Attention.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer.with_pos_embed": [[310, 313], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "with_pos_embed", "(", "tensor", ",", "pos", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer.forward_ffn": [[314, 319], ["deformable_transformer_plus.DeformableTransformerDecoderLayer.linear2", "deformable_transformer_plus.DeformableTransformerDecoderLayer.norm3", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout3", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout4", "deformable_transformer_plus.DeformableTransformerDecoderLayer.activation", "deformable_transformer_plus.DeformableTransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward_ffn", "(", "self", ",", "tgt", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout3", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout4", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_self_attn": [[320, 332], ["deformable_transformer_plus.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer_plus.DeformableTransformerDecoderLayer.norm2", "deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_track_attn", "[].transpose", "[].transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout2", "deformable_transformer_plus.DeformableTransformerDecoderLayer.self_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.self_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.transpose"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_track_attn"], ["", "def", "_forward_self_attn", "(", "self", ",", "tgt", ",", "query_pos", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "extra_track_attn", ":", "\n", "            ", "tgt", "=", "self", ".", "_forward_track_attn", "(", "tgt", ",", "query_pos", ")", "\n", "\n", "", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "tgt2", "=", "self", ".", "self_attn", "(", "q", ".", "transpose", "(", "0", ",", "1", ")", ",", "k", ".", "transpose", "(", "0", ",", "1", ")", ",", "tgt", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "attn_mask", "=", "attn_mask", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "tgt2", "=", "self", ".", "self_attn", "(", "q", ".", "transpose", "(", "0", ",", "1", ")", ",", "k", ".", "transpose", "(", "0", ",", "1", ")", ",", "tgt", ".", "transpose", "(", "0", ",", "1", ")", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "return", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_track_attn": [[333, 341], ["deformable_transformer_plus.DeformableTransformerDecoderLayer.with_pos_embed", "[].transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deformable_transformer_plus.DeformableTransformerDecoderLayer.norm4", "deformable_transformer_plus.DeformableTransformerDecoderLayer.update_attn", "q[].transpose", "k[].transpose", "tgt[].transpose", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout5"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "_forward_track_attn", "(", "self", ",", "tgt", ",", "query_pos", ")", ":", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "if", "q", ".", "shape", "[", "1", "]", ">", "300", ":", "\n", "            ", "tgt2", "=", "self", ".", "update_attn", "(", "q", "[", ":", ",", "300", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "k", "[", ":", ",", "300", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "tgt", "[", ":", ",", "300", ":", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tgt", "=", "torch", ".", "cat", "(", "[", "tgt", "[", ":", ",", ":", "300", "]", ",", "self", ".", "norm4", "(", "tgt", "[", ":", ",", "300", ":", "]", "+", "self", ".", "dropout5", "(", "tgt2", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_self_cross": [[342, 358], ["deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_self_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.cross_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.norm1", "deformable_transformer_plus.DeformableTransformerDecoderLayer.forward_ffn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "_forward_self_cross", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ")", ":", "\n", "\n", "# self attention", "\n", "        ", "tgt", "=", "self", ".", "_forward_self_attn", "(", "tgt", ",", "query_pos", ",", "attn_mask", ")", "\n", "# cross attention", "\n", "tgt2", "=", "self", ".", "cross_attn", "(", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "reference_points", ",", "\n", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "\n", "# ffn", "\n", "tgt", "=", "self", ".", "forward_ffn", "(", "tgt", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_cross_self": [[359, 373], ["deformable_transformer_plus.DeformableTransformerDecoderLayer.cross_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.norm1", "deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_self_attn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.forward_ffn", "deformable_transformer_plus.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer_plus.DeformableTransformerDecoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "_forward_cross_self", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ")", ":", "\n", "# cross attention", "\n", "        ", "tgt2", "=", "self", ".", "cross_attn", "(", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "reference_points", ",", "\n", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "# self attention", "\n", "tgt", "=", "self", ".", "_forward_self_attn", "(", "tgt", ",", "query_pos", ",", "attn_mask", ")", "\n", "# ffn", "\n", "tgt", "=", "self", ".", "forward_ffn", "(", "tgt", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoderLayer.forward": [[374, 381], ["deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_cross_self", "deformable_transformer_plus.DeformableTransformerDecoderLayer._forward_self_cross"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_cross_self", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_cross"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", "=", "None", ")", ":", "\n", "        ", "attn_mask", "=", "None", "\n", "if", "self", ".", "self_cross", ":", "\n", "            ", "return", "self", ".", "_forward_self_cross", "(", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "\n", "level_start_index", ",", "src_padding_mask", ",", "attn_mask", ")", "\n", "", "return", "self", ".", "_forward_cross_self", "(", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoder.__init__": [[384, 392], ["torch.nn.Module.__init__", "deformable_transformer_plus._get_clones"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "# hack implementation for iterative bounding box refinement and two-stage Deformable DETR", "\n", "self", ".", "bbox_embed", "=", "None", "\n", "self", ".", "class_embed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.DeformableTransformerDecoder.forward": [[393, 429], ["enumerate", "layer", "new_reference_points.sigmoid.sigmoid.detach", "intermediate.append", "intermediate_reference_points.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "new_reference_points.sigmoid.sigmoid.sigmoid", "new_reference_points.sigmoid.sigmoid.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "util.misc.inverse_sigmoid", "util.misc.inverse_sigmoid"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "src_level_start_index", ",", "src_valid_ratios", ",", "\n", "query_pos", "=", "None", ",", "src_padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "intermediate", "=", "[", "]", "\n", "intermediate_reference_points", "=", "[", "]", "\n", "for", "lid", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                ", "reference_points_input", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "torch", ".", "cat", "(", "[", "src_valid_ratios", ",", "src_valid_ratios", "]", ",", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "assert", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "reference_points_input", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "src_valid_ratios", "[", ":", ",", "None", "]", "\n", "", "output", "=", "layer", "(", "output", ",", "query_pos", ",", "reference_points_input", ",", "src", ",", "src_spatial_shapes", ",", "src_level_start_index", ",", "src_padding_mask", ")", "\n", "\n", "# hack implementation for iterative bounding box refinement", "\n", "if", "self", ".", "bbox_embed", "is", "not", "None", ":", "\n", "                ", "tmp", "=", "self", ".", "bbox_embed", "[", "lid", "]", "(", "output", ")", "\n", "if", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                    ", "new_reference_points", "=", "tmp", "+", "inverse_sigmoid", "(", "reference_points", ")", "\n", "new_reference_points", "=", "new_reference_points", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "new_reference_points", "=", "tmp", "\n", "new_reference_points", "[", "...", ",", ":", "2", "]", "=", "tmp", "[", "...", ",", ":", "2", "]", "+", "inverse_sigmoid", "(", "reference_points", ")", "\n", "new_reference_points", "=", "new_reference_points", ".", "sigmoid", "(", ")", "\n", "", "reference_points", "=", "new_reference_points", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "append", "(", "output", ")", "\n", "intermediate_reference_points", ".", "append", "(", "reference_points", ")", "\n", "\n", "", "", "if", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "intermediate", ")", ",", "torch", ".", "stack", "(", "intermediate_reference_points", ")", "\n", "\n", "", "return", "output", ",", "reference_points", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus._get_clones": [[431, 433], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus._get_activation_fn": [[435, 444], ["RuntimeError", "torch.nn.ReLU"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer_plus.build_deforamble_transformer": [[447, 465], ["deformable_transformer_plus.DeformableTransformer"], "function", ["None"], ["", "def", "build_deforamble_transformer", "(", "args", ")", ":", "\n", "    ", "return", "DeformableTransformer", "(", "\n", "d_model", "=", "args", ".", "hidden_dim", ",", "\n", "nhead", "=", "args", ".", "nheads", ",", "\n", "num_encoder_layers", "=", "args", ".", "enc_layers", ",", "\n", "num_decoder_layers", "=", "args", ".", "dec_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "return_intermediate_dec", "=", "True", ",", "\n", "num_feature_levels", "=", "args", ".", "num_feature_levels", ",", "\n", "dec_n_points", "=", "args", ".", "dec_n_points", ",", "\n", "enc_n_points", "=", "args", ".", "enc_n_points", ",", "\n", "two_stage", "=", "args", ".", "two_stage", ",", "\n", "two_stage_num_proposals", "=", "args", ".", "num_queries", ",", "\n", "decoder_self_cross", "=", "not", "args", ".", "decoder_cross_self", ",", "\n", "sigmoid_attn", "=", "args", ".", "sigmoid_attn", ",", "\n", "extra_track_attn", "=", "args", ".", "extra_track_attn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.DETRsegm.__init__": [[33, 44], ["torch.Module.__init__", "segmentation.MHAttentionMap", "segmentation.MaskHeadSmallConv", "segmentation.DETRsegm.parameters", "p.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "detr", ",", "freeze_detr", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "detr", "=", "detr", "\n", "\n", "if", "freeze_detr", ":", "\n", "            ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "hidden_dim", ",", "nheads", "=", "detr", ".", "transformer", ".", "d_model", ",", "detr", ".", "transformer", ".", "nhead", "\n", "self", ".", "bbox_attention", "=", "MHAttentionMap", "(", "hidden_dim", ",", "hidden_dim", ",", "nheads", ",", "dropout", "=", "0", ")", "\n", "self", ".", "mask_head", "=", "MaskHeadSmallConv", "(", "hidden_dim", "+", "nheads", ",", "[", "1024", ",", "512", ",", "256", "]", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.DETRsegm.forward": [[45, 72], ["segmentation.DETRsegm.detr.backbone", "features[].decompose", "segmentation.DETRsegm.detr.input_proj", "segmentation.DETRsegm.detr.transformer", "segmentation.DETRsegm.detr.class_embed", "segmentation.DETRsegm.detr.bbox_embed().sigmoid", "segmentation.DETRsegm.bbox_attention", "segmentation.DETRsegm.mask_head", "segmentation.DETRsegm.view", "isinstance", "util.misc.nested_tensor_from_tensor_list", "segmentation.DETRsegm.detr.bbox_embed", "zip"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list"], ["", "def", "forward", "(", "self", ",", "samples", ":", "NestedTensor", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "samples", ",", "NestedTensor", ")", ":", "\n", "            ", "samples", "=", "nested_tensor_from_tensor_list", "(", "samples", ")", "\n", "", "features", ",", "pos", "=", "self", ".", "detr", ".", "backbone", "(", "samples", ")", "\n", "\n", "bs", "=", "features", "[", "-", "1", "]", ".", "tensors", ".", "shape", "[", "0", "]", "\n", "\n", "src", ",", "mask", "=", "features", "[", "-", "1", "]", ".", "decompose", "(", ")", "\n", "src_proj", "=", "self", ".", "detr", ".", "input_proj", "(", "src", ")", "\n", "hs", ",", "memory", "=", "self", ".", "detr", ".", "transformer", "(", "src_proj", ",", "mask", ",", "self", ".", "detr", ".", "query_embed", ".", "weight", ",", "pos", "[", "-", "1", "]", ")", "\n", "\n", "outputs_class", "=", "self", ".", "detr", ".", "class_embed", "(", "hs", ")", "\n", "outputs_coord", "=", "self", ".", "detr", ".", "bbox_embed", "(", "hs", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "{", "\"pred_logits\"", ":", "outputs_class", "[", "-", "1", "]", ",", "\"pred_boxes\"", ":", "outputs_coord", "[", "-", "1", "]", "}", "\n", "if", "self", ".", "detr", ".", "aux_loss", ":", "\n", "            ", "out", "[", "\"aux_outputs\"", "]", "=", "[", "\n", "{", "\"pred_logits\"", ":", "a", ",", "\"pred_boxes\"", ":", "b", "}", "for", "a", ",", "b", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ")", "\n", "]", "\n", "\n", "# FIXME h_boxes takes the last one computed, keep this in mind", "\n", "", "bbox_mask", "=", "self", ".", "bbox_attention", "(", "hs", "[", "-", "1", "]", ",", "memory", ",", "mask", "=", "mask", ")", "\n", "\n", "seg_masks", "=", "self", ".", "mask_head", "(", "src_proj", ",", "bbox_mask", ",", "[", "features", "[", "2", "]", ".", "tensors", ",", "features", "[", "1", "]", ".", "tensors", ",", "features", "[", "0", "]", ".", "tensors", "]", ")", "\n", "outputs_seg_masks", "=", "seg_masks", ".", "view", "(", "bs", ",", "self", ".", "detr", ".", "num_queries", ",", "seg_masks", ".", "shape", "[", "-", "2", "]", ",", "seg_masks", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "out", "[", "\"pred_masks\"", "]", "=", "outputs_seg_masks", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.MaskHeadSmallConv.__init__": [[80, 106], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "segmentation.MaskHeadSmallConv.modules", "isinstance", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "fpn_dims", ",", "context_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "inter_dims", "=", "[", "dim", ",", "context_dim", "//", "2", ",", "context_dim", "//", "4", ",", "context_dim", "//", "8", ",", "context_dim", "//", "16", ",", "context_dim", "//", "64", "]", "\n", "self", ".", "lay1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn1", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "dim", ")", "\n", "self", ".", "lay2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "dim", ",", "inter_dims", "[", "1", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn2", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "1", "]", ")", "\n", "self", ".", "lay3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "1", "]", ",", "inter_dims", "[", "2", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn3", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "2", "]", ")", "\n", "self", ".", "lay4", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "2", "]", ",", "inter_dims", "[", "3", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn4", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "3", "]", ")", "\n", "self", ".", "lay5", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "3", "]", ",", "inter_dims", "[", "4", "]", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "gn5", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "inter_dims", "[", "4", "]", ")", "\n", "self", ".", "out_lay", "=", "torch", ".", "nn", ".", "Conv2d", "(", "inter_dims", "[", "4", "]", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "self", ".", "adapter1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "0", "]", ",", "inter_dims", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "adapter2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "1", "]", ",", "inter_dims", "[", "2", "]", ",", "1", ")", "\n", "self", ".", "adapter3", "=", "torch", ".", "nn", ".", "Conv2d", "(", "fpn_dims", "[", "2", "]", ",", "inter_dims", "[", "3", "]", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.MaskHeadSmallConv.forward": [[107, 146], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segmentation.MaskHeadSmallConv.lay1", "segmentation.MaskHeadSmallConv.gn1", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.lay2", "segmentation.MaskHeadSmallConv.gn2", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter1", "segmentation.MaskHeadSmallConv.lay3", "segmentation.MaskHeadSmallConv.gn3", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter2", "segmentation.MaskHeadSmallConv.lay4", "segmentation.MaskHeadSmallConv.gn4", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.adapter3", "segmentation.MaskHeadSmallConv.lay5", "segmentation.MaskHeadSmallConv.gn5", "torch.relu", "torch.relu", "torch.relu", "segmentation.MaskHeadSmallConv.out_lay", "tensor.unsqueeze().repeat().flatten", "expand.size", "segmentation.MaskHeadSmallConv.size", "segmentation.MaskHeadSmallConv.forward.expand"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "bbox_mask", ",", "fpns", ")", ":", "\n", "        ", "def", "expand", "(", "tensor", ",", "length", ")", ":", "\n", "            ", "return", "tensor", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "int", "(", "length", ")", ",", "1", ",", "1", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "expand", "(", "x", ",", "bbox_mask", ".", "shape", "[", "1", "]", ")", ",", "bbox_mask", ".", "flatten", "(", "0", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "lay1", "(", "x", ")", "\n", "x", "=", "self", ".", "gn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "lay2", "(", "x", ")", "\n", "x", "=", "self", ".", "gn2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter1", "(", "fpns", "[", "0", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "/", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay3", "(", "x", ")", "\n", "x", "=", "self", ".", "gn3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter2", "(", "fpns", "[", "1", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "/", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay4", "(", "x", ")", "\n", "x", "=", "self", ".", "gn4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "cur_fpn", "=", "self", ".", "adapter3", "(", "fpns", "[", "2", "]", ")", "\n", "if", "cur_fpn", ".", "size", "(", "0", ")", "!=", "x", ".", "size", "(", "0", ")", ":", "\n", "            ", "cur_fpn", "=", "expand", "(", "cur_fpn", ",", "x", ".", "size", "(", "0", ")", "/", "cur_fpn", ".", "size", "(", "0", ")", ")", "\n", "", "x", "=", "cur_fpn", "+", "F", ".", "interpolate", "(", "x", ",", "size", "=", "cur_fpn", ".", "shape", "[", "-", "2", ":", "]", ",", "mode", "=", "\"nearest\"", ")", "\n", "x", "=", "self", ".", "lay5", "(", "x", ")", "\n", "x", "=", "self", ".", "gn5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_lay", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.MHAttentionMap.__init__": [[151, 165], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "float"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "query_dim", ",", "hidden_dim", ",", "num_heads", ",", "dropout", "=", "0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "q_linear", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "k_linear", "=", "nn", ".", "Linear", "(", "query_dim", ",", "hidden_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "k_linear", ".", "bias", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "q_linear", ".", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "k_linear", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "q_linear", ".", "weight", ")", "\n", "self", ".", "normalize_fact", "=", "float", "(", "hidden_dim", "/", "self", ".", "num_heads", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.MHAttentionMap.forward": [[166, 178], ["segmentation.MHAttentionMap.q_linear", "torch.conv2d", "torch.conv2d", "torch.conv2d", "segmentation.MHAttentionMap.view", "torch.conv2d.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax().view_as", "torch.softmax().view_as", "torch.softmax().view_as", "segmentation.MHAttentionMap.dropout", "segmentation.MHAttentionMap.k_linear.weight.unsqueeze().unsqueeze", "segmentation.MHAttentionMap.masked_fill_", "mask.unsqueeze().unsqueeze", "float", "torch.softmax", "torch.softmax", "torch.softmax", "segmentation.MHAttentionMap.k_linear.weight.unsqueeze", "segmentation.MHAttentionMap.flatten", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "mask", "=", "None", ")", ":", "\n", "        ", "q", "=", "self", ".", "q_linear", "(", "q", ")", "\n", "k", "=", "F", ".", "conv2d", "(", "k", ",", "self", ".", "k_linear", ".", "weight", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "k_linear", ".", "bias", ")", "\n", "qh", "=", "q", ".", "view", "(", "q", ".", "shape", "[", "0", "]", ",", "q", ".", "shape", "[", "1", "]", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ")", "\n", "kh", "=", "k", ".", "view", "(", "k", ".", "shape", "[", "0", "]", ",", "self", ".", "num_heads", ",", "self", ".", "hidden_dim", "//", "self", ".", "num_heads", ",", "k", ".", "shape", "[", "-", "2", "]", ",", "k", ".", "shape", "[", "-", "1", "]", ")", "\n", "weights", "=", "torch", ".", "einsum", "(", "\"bqnc,bnchw->bqnhw\"", ",", "qh", "*", "self", ".", "normalize_fact", ",", "kh", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "weights", ".", "masked_fill_", "(", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "float", "(", "\"-inf\"", ")", ")", "\n", "", "weights", "=", "F", ".", "softmax", "(", "weights", ".", "flatten", "(", "2", ")", ",", "dim", "=", "-", "1", ")", ".", "view_as", "(", "weights", ")", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.PostProcessSegm.__init__": [[229, 232], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.PostProcessSegm.forward": [[233, 249], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].tolist", "outputs[].squeeze", "torch.interpolate", "torch.interpolate", "torch.interpolate", "enumerate", "len", "len", "zip", "cur_mask[].unsqueeze", "torch.interpolate().byte", "torch.interpolate().byte", "torch.interpolate().byte", "max_target_sizes.max", "torch.interpolate.sigmoid", "torch.interpolate", "torch.interpolate", "torch.interpolate", "[].float", "tuple", "tt.tolist"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "results", ",", "outputs", ",", "orig_target_sizes", ",", "max_target_sizes", ")", ":", "\n", "        ", "assert", "len", "(", "orig_target_sizes", ")", "==", "len", "(", "max_target_sizes", ")", "\n", "max_h", ",", "max_w", "=", "max_target_sizes", ".", "max", "(", "0", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "outputs_masks", "=", "outputs", "[", "\"pred_masks\"", "]", ".", "squeeze", "(", "2", ")", "\n", "outputs_masks", "=", "F", ".", "interpolate", "(", "outputs_masks", ",", "size", "=", "(", "max_h", ",", "max_w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "outputs_masks", "=", "(", "outputs_masks", ".", "sigmoid", "(", ")", ">", "self", ".", "threshold", ")", ".", "cpu", "(", ")", "\n", "\n", "for", "i", ",", "(", "cur_mask", ",", "t", ",", "tt", ")", "in", "enumerate", "(", "zip", "(", "outputs_masks", ",", "max_target_sizes", ",", "orig_target_sizes", ")", ")", ":", "\n", "            ", "img_h", ",", "img_w", "=", "t", "[", "0", "]", ",", "t", "[", "1", "]", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", "=", "cur_mask", "[", ":", ",", ":", "img_h", ",", ":", "img_w", "]", ".", "unsqueeze", "(", "1", ")", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", "=", "F", ".", "interpolate", "(", "\n", "results", "[", "i", "]", "[", "\"masks\"", "]", ".", "float", "(", ")", ",", "size", "=", "tuple", "(", "tt", ".", "tolist", "(", ")", ")", ",", "mode", "=", "\"nearest\"", "\n", ")", ".", "byte", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.PostProcessPanoptic.__init__": [[255, 265], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "is_thing_map", ",", "threshold", "=", "0.85", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n           is_thing_map: This is a whose keys are the class ids, and the values a boolean indicating whether\n                          the class is  a thing (True) or a stuff (False) class\n           threshold: confidence threshold: segments with confidence lower than this will be deleted\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "is_thing_map", "=", "is_thing_map", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.PostProcessPanoptic.forward": [[266, 374], ["zip", "len", "len", "len", "len", "len", "isinstance", "tuple", "cur_logits.softmax().max", "cur_logits.softmax().max", "util.misc.interpolate().squeeze", "util.box_cxcywh_to_xyxy", "cur_masks.flatten.flatten.flatten", "collections.defaultdict", "enumerate", "segmentation.PostProcessPanoptic.forward.get_ids_area"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "processed_sizes", ",", "target_sizes", "=", "None", ")", ":", "\n", "        ", "\"\"\" This function computes the panoptic prediction from the model's predictions.\n        Parameters:\n            outputs: This is a dict coming directly from the model. See the model doc for the content.\n            processed_sizes: This is a list of tuples (or torch tensors) of sizes of the images that were passed to the\n                             model, ie the size after data augmentation but before batching.\n            target_sizes: This is a list of tuples (or torch tensors) corresponding to the requested final size\n                          of each prediction. If left to None, it will default to the processed_sizes\n            \"\"\"", "\n", "if", "target_sizes", "is", "None", ":", "\n", "            ", "target_sizes", "=", "processed_sizes", "\n", "", "assert", "len", "(", "processed_sizes", ")", "==", "len", "(", "target_sizes", ")", "\n", "out_logits", ",", "raw_masks", ",", "raw_boxes", "=", "outputs", "[", "\"pred_logits\"", "]", ",", "outputs", "[", "\"pred_masks\"", "]", ",", "outputs", "[", "\"pred_boxes\"", "]", "\n", "assert", "len", "(", "out_logits", ")", "==", "len", "(", "raw_masks", ")", "==", "len", "(", "target_sizes", ")", "\n", "preds", "=", "[", "]", "\n", "\n", "def", "to_tuple", "(", "tup", ")", ":", "\n", "            ", "if", "isinstance", "(", "tup", ",", "tuple", ")", ":", "\n", "                ", "return", "tup", "\n", "", "return", "tuple", "(", "tup", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "for", "cur_logits", ",", "cur_masks", ",", "cur_boxes", ",", "size", ",", "target_size", "in", "zip", "(", "\n", "out_logits", ",", "raw_masks", ",", "raw_boxes", ",", "processed_sizes", ",", "target_sizes", "\n", ")", ":", "\n", "# we filter empty queries and detection below threshold", "\n", "            ", "scores", ",", "labels", "=", "cur_logits", ".", "softmax", "(", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "keep", "=", "labels", ".", "ne", "(", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "&", "(", "scores", ">", "self", ".", "threshold", ")", "\n", "cur_scores", ",", "cur_classes", "=", "cur_logits", ".", "softmax", "(", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "cur_scores", "=", "cur_scores", "[", "keep", "]", "\n", "cur_classes", "=", "cur_classes", "[", "keep", "]", "\n", "cur_masks", "=", "cur_masks", "[", "keep", "]", "\n", "cur_masks", "=", "interpolate", "(", "cur_masks", "[", "None", "]", ",", "to_tuple", "(", "size", ")", ",", "mode", "=", "\"bilinear\"", ")", ".", "squeeze", "(", "0", ")", "\n", "cur_boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "cur_boxes", "[", "keep", "]", ")", "\n", "\n", "h", ",", "w", "=", "cur_masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "assert", "len", "(", "cur_boxes", ")", "==", "len", "(", "cur_classes", ")", "\n", "\n", "# It may be that we have several predicted masks for the same stuff class.", "\n", "# In the following, we track the list of masks ids for each stuff class (they are merged later on)", "\n", "cur_masks", "=", "cur_masks", ".", "flatten", "(", "1", ")", "\n", "stuff_equiv_classes", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "k", ",", "label", "in", "enumerate", "(", "cur_classes", ")", ":", "\n", "                ", "if", "not", "self", ".", "is_thing_map", "[", "label", ".", "item", "(", ")", "]", ":", "\n", "                    ", "stuff_equiv_classes", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "k", ")", "\n", "\n", "", "", "def", "get_ids_area", "(", "masks", ",", "scores", ",", "dedup", "=", "False", ")", ":", "\n", "# This helper function creates the final panoptic segmentation image", "\n", "# It also returns the area of the masks that appears on the image", "\n", "\n", "                ", "m_id", "=", "masks", ".", "transpose", "(", "0", ",", "1", ")", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "if", "m_id", ".", "shape", "[", "-", "1", "]", "==", "0", ":", "\n", "# We didn't detect any mask :(", "\n", "                    ", "m_id", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "m_id", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "m_id", "=", "m_id", ".", "argmax", "(", "-", "1", ")", ".", "view", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "dedup", ":", "\n", "# Merge the masks corresponding to the same stuff class", "\n", "                    ", "for", "equiv", "in", "stuff_equiv_classes", ".", "values", "(", ")", ":", "\n", "                        ", "if", "len", "(", "equiv", ")", ">", "1", ":", "\n", "                            ", "for", "eq_id", "in", "equiv", ":", "\n", "                                ", "m_id", ".", "masked_fill_", "(", "m_id", ".", "eq", "(", "eq_id", ")", ",", "equiv", "[", "0", "]", ")", "\n", "\n", "", "", "", "", "final_h", ",", "final_w", "=", "to_tuple", "(", "target_size", ")", "\n", "\n", "seg_img", "=", "Image", ".", "fromarray", "(", "id2rgb", "(", "m_id", ".", "view", "(", "h", ",", "w", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "seg_img", "=", "seg_img", ".", "resize", "(", "size", "=", "(", "final_w", ",", "final_h", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", "\n", "\n", "np_seg_img", "=", "(", "\n", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "seg_img", ".", "tobytes", "(", ")", ")", ")", ".", "view", "(", "final_h", ",", "final_w", ",", "3", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "m_id", "=", "torch", ".", "from_numpy", "(", "rgb2id", "(", "np_seg_img", ")", ")", "\n", "\n", "area", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "                    ", "area", ".", "append", "(", "m_id", ".", "eq", "(", "i", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "return", "area", ",", "seg_img", "\n", "\n", "", "area", ",", "seg_img", "=", "get_ids_area", "(", "cur_masks", ",", "cur_scores", ",", "dedup", "=", "True", ")", "\n", "if", "cur_classes", ".", "numel", "(", ")", ">", "0", ":", "\n", "# We know filter empty masks as long as we find some", "\n", "                ", "while", "True", ":", "\n", "                    ", "filtered_small", "=", "torch", ".", "as_tensor", "(", "\n", "[", "area", "[", "i", "]", "<=", "4", "for", "i", ",", "c", "in", "enumerate", "(", "cur_classes", ")", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "keep", ".", "device", "\n", ")", "\n", "if", "filtered_small", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "                        ", "cur_scores", "=", "cur_scores", "[", "~", "filtered_small", "]", "\n", "cur_classes", "=", "cur_classes", "[", "~", "filtered_small", "]", "\n", "cur_masks", "=", "cur_masks", "[", "~", "filtered_small", "]", "\n", "area", ",", "seg_img", "=", "get_ids_area", "(", "cur_masks", ",", "cur_scores", ")", "\n", "", "else", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "cur_classes", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "cur_classes", ".", "device", ")", "\n", "\n", "", "segments_info", "=", "[", "]", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "area", ")", ":", "\n", "                ", "cat", "=", "cur_classes", "[", "i", "]", ".", "item", "(", ")", "\n", "segments_info", ".", "append", "(", "{", "\"id\"", ":", "i", ",", "\"isthing\"", ":", "self", ".", "is_thing_map", "[", "cat", "]", ",", "\"category_id\"", ":", "cat", ",", "\"area\"", ":", "a", "}", ")", "\n", "", "del", "cur_classes", "\n", "\n", "with", "io", ".", "BytesIO", "(", ")", "as", "out", ":", "\n", "                ", "seg_img", ".", "save", "(", "out", ",", "format", "=", "\"PNG\"", ")", "\n", "predictions", "=", "{", "\"png_string\"", ":", "out", ".", "getvalue", "(", ")", ",", "\"segments_info\"", ":", "segments_info", "}", "\n", "", "preds", ".", "append", "(", "predictions", ")", "\n", "", "return", "preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.dice_loss": [[180, 196], ["inputs.flatten.sigmoid", "inputs.flatten.flatten", "inputs.flatten.sum", "targets.sum", "loss.sum"], "function", ["None"], ["", "", "def", "dice_loss", "(", "inputs", ",", "targets", ",", "num_boxes", ")", ":", "\n", "    ", "\"\"\"\n    Compute the DICE loss, similar to generalized IOU for masks\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n    \"\"\"", "\n", "inputs", "=", "inputs", ".", "sigmoid", "(", ")", "\n", "inputs", "=", "inputs", ".", "flatten", "(", "1", ")", "\n", "numerator", "=", "2", "*", "(", "inputs", "*", "targets", ")", ".", "sum", "(", "1", ")", "\n", "denominator", "=", "inputs", ".", "sum", "(", "-", "1", ")", "+", "targets", ".", "sum", "(", "-", "1", ")", "\n", "loss", "=", "1", "-", "(", "numerator", "+", "1", ")", "/", "(", "denominator", "+", "1", ")", "\n", "return", "loss", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.sigmoid_focal_loss": [[198, 226], ["inputs.sigmoid", "torch.binary_cross_entropy_with_logits", "loss.mean().sum", "loss.sum", "loss.mean"], "function", ["None"], ["", "def", "sigmoid_focal_loss", "(", "inputs", ",", "targets", ",", "num_boxes", ",", "alpha", ":", "float", "=", "0.25", ",", "gamma", ":", "float", "=", "2", ",", "mean_in_dim1", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Loss used in RetinaNet for dense detection: https://arxiv.org/abs/1708.02002.\n    Args:\n        inputs: A float tensor of arbitrary shape.\n                The predictions for each example.\n        targets: A float tensor with the same shape as inputs. Stores the binary\n                 classification label for each element in inputs\n                (0 for the negative class and 1 for the positive class).\n        alpha: (optional) Weighting factor in range (0,1) to balance\n                positive vs negative examples. Default = -1 (no weighting).\n        gamma: Exponent of the modulating factor (1 - p_t) to\n               balance easy vs hard examples.\n    Returns:\n        Loss tensor\n    \"\"\"", "\n", "prob", "=", "inputs", ".", "sigmoid", "(", ")", "\n", "ce_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "inputs", ",", "targets", ",", "reduction", "=", "\"none\"", ")", "\n", "p_t", "=", "prob", "*", "targets", "+", "(", "1", "-", "prob", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "ce_loss", "*", "(", "(", "1", "-", "p_t", ")", "**", "gamma", ")", "\n", "\n", "if", "alpha", ">=", "0", ":", "\n", "        ", "alpha_t", "=", "alpha", "*", "targets", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "targets", ")", "\n", "loss", "=", "alpha_t", "*", "loss", "\n", "", "if", "mean_in_dim1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", "1", ")", ".", "sum", "(", ")", "/", "num_boxes", "\n", "", "else", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank.__init__": [[15, 21], ["torch.nn.Module.__init__", "memory_bank.MemoryBank._build_layers", "memory_bank.MemoryBank.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._build_layers"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_build_layers", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._build_layers": [[22, 46], ["torch.nn.Linear", "torch.nn.Linear", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["None"], ["", "", "", "def", "_build_layers", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "self", ".", "save_thresh", "=", "args", ".", "memory_bank_score_thresh", "\n", "self", ".", "save_period", "=", "3", "\n", "self", ".", "max_his_length", "=", "args", ".", "memory_bank_len", "\n", "\n", "self", ".", "save_proj", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_in", ")", "\n", "\n", "self", ".", "temporal_attn", "=", "nn", ".", "MultiheadAttention", "(", "dim_in", ",", "8", ",", "dropout", "=", "0", ")", "\n", "self", ".", "temporal_fc1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "self", ".", "temporal_fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_in", ")", "\n", "self", ".", "temporal_norm1", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "self", ".", "temporal_norm2", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "\n", "self", ".", "track_cls", "=", "nn", ".", "Linear", "(", "dim_in", ",", "1", ")", "\n", "\n", "self", ".", "self_attn", "=", "None", "\n", "if", "args", ".", "memory_bank_with_self_attn", ":", "\n", "            ", "self", ".", "spatial_attn", "=", "nn", ".", "MultiheadAttention", "(", "dim_in", ",", "8", ",", "dropout", "=", "0", ")", "\n", "self", ".", "spatial_fc1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "self", ".", "spatial_fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_in", ")", "\n", "self", ".", "spatial_norm1", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "self", ".", "spatial_norm2", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "spatial_attn", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank.update": [[47, 69], ["len", "memory_bank.MemoryBank.save_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "track_instances.mem_bank.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "", "def", "update", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "embed", "=", "track_instances", ".", "output_embedding", "[", ":", ",", "None", "]", "#( N, 1, 256)", "\n", "scores", "=", "track_instances", ".", "scores", "\n", "mem_padding_mask", "=", "track_instances", ".", "mem_padding_mask", "\n", "device", "=", "embed", ".", "device", "\n", "\n", "save_period", "=", "track_instances", ".", "save_period", "\n", "if", "self", ".", "training", ":", "\n", "            ", "saved_idxes", "=", "scores", ">", "0", "\n", "", "else", ":", "\n", "            ", "saved_idxes", "=", "(", "save_period", "==", "0", ")", "&", "(", "scores", ">", "self", ".", "save_thresh", ")", "\n", "# saved_idxes = (save_period == 0)", "\n", "save_period", "[", "save_period", ">", "0", "]", "-=", "1", "\n", "save_period", "[", "saved_idxes", "]", "=", "self", ".", "save_period", "\n", "\n", "", "saved_embed", "=", "embed", "[", "saved_idxes", "]", "\n", "if", "len", "(", "saved_embed", ")", ">", "0", ":", "\n", "            ", "prev_embed", "=", "track_instances", ".", "mem_bank", "[", "saved_idxes", "]", "\n", "save_embed", "=", "self", ".", "save_proj", "(", "saved_embed", ")", "\n", "mem_padding_mask", "[", "saved_idxes", "]", "=", "torch", ".", "cat", "(", "[", "mem_padding_mask", "[", "saved_idxes", ",", "1", ":", "]", ",", "torch", ".", "zeros", "(", "(", "len", "(", "saved_embed", ")", ",", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "track_instances", ".", "mem_bank", "=", "track_instances", ".", "mem_bank", ".", "clone", "(", ")", "\n", "track_instances", ".", "mem_bank", "[", "saved_idxes", "]", "=", "torch", ".", "cat", "(", "[", "prev_embed", "[", ":", ",", "1", ":", "]", ",", "save_embed", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_spatial_attn": [[70, 89], ["memory_bank.MemoryBank.spatial_norm1", "memory_bank.MemoryBank.spatial_fc2", "memory_bank.MemoryBank.spatial_norm2", "len", "torch.relu", "torch.relu", "memory_bank.MemoryBank.spatial_attn", "memory_bank.MemoryBank.spatial_fc1"], "methods", ["None"], ["", "", "def", "_forward_spatial_attn", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "if", "len", "(", "track_instances", ")", "==", "0", ":", "\n", "            ", "return", "track_instances", "\n", "\n", "", "embed", "=", "track_instances", ".", "output_embedding", "\n", "dim", "=", "embed", ".", "shape", "[", "-", "1", "]", "\n", "query_pos", "=", "track_instances", ".", "query_pos", "[", ":", ",", ":", "dim", "]", "\n", "k", "=", "q", "=", "(", "embed", "+", "query_pos", ")", "\n", "v", "=", "embed", "\n", "embed2", "=", "self", ".", "spatial_attn", "(", "\n", "q", "[", ":", ",", "None", "]", ",", "\n", "k", "[", ":", ",", "None", "]", ",", "\n", "v", "[", ":", ",", "None", "]", "\n", ")", "[", "0", "]", "[", ":", ",", "0", "]", "\n", "embed", "=", "self", ".", "spatial_norm1", "(", "embed", "+", "embed2", ")", "\n", "embed2", "=", "self", ".", "spatial_fc2", "(", "F", ".", "relu", "(", "self", ".", "spatial_fc1", "(", "embed", ")", ")", ")", "\n", "embed", "=", "self", ".", "spatial_norm2", "(", "embed", "+", "embed2", ")", "\n", "track_instances", ".", "output_embedding", "=", "embed", "\n", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_track_cls": [[90, 93], ["memory_bank.MemoryBank.track_cls"], "methods", ["None"], ["", "def", "_forward_track_cls", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "track_instances", ".", "track_scores", "=", "self", ".", "track_cls", "(", "track_instances", ".", "output_embedding", ")", "[", "...", ",", "0", "]", "\n", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_temporal_attn": [[94, 121], ["len", "len", "memory_bank.MemoryBank.temporal_norm1", "memory_bank.MemoryBank.temporal_fc2", "memory_bank.MemoryBank.temporal_norm2", "track_instances.output_embedding.clone", "torch.relu", "torch.relu", "memory_bank.MemoryBank.temporal_attn", "memory_bank.MemoryBank.temporal_fc1", "prev_embed.transpose", "prev_embed.transpose"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone"], ["", "def", "_forward_temporal_attn", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "if", "len", "(", "track_instances", ")", "==", "0", ":", "\n", "            ", "return", "track_instances", "\n", "\n", "", "dim", "=", "track_instances", ".", "query_pos", ".", "shape", "[", "1", "]", "\n", "key_padding_mask", "=", "track_instances", ".", "mem_padding_mask", "\n", "\n", "valid_idxes", "=", "key_padding_mask", "[", ":", ",", "-", "1", "]", "==", "0", "\n", "embed", "=", "track_instances", ".", "output_embedding", "[", "valid_idxes", "]", "# (n, 256)", "\n", "\n", "if", "len", "(", "embed", ")", ">", "0", ":", "\n", "            ", "prev_embed", "=", "track_instances", ".", "mem_bank", "[", "valid_idxes", "]", "\n", "key_padding_mask", "=", "key_padding_mask", "[", "valid_idxes", "]", "\n", "embed2", "=", "self", ".", "temporal_attn", "(", "\n", "embed", "[", "None", "]", ",", "# (num_track, dim) to (1, num_track, dim)", "\n", "prev_embed", ".", "transpose", "(", "0", ",", "1", ")", ",", "# (num_track, mem_len, dim) to (mem_len, num_track, dim)", "\n", "prev_embed", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "embed", "=", "self", ".", "temporal_norm1", "(", "embed", "+", "embed2", ")", "\n", "embed2", "=", "self", ".", "temporal_fc2", "(", "F", ".", "relu", "(", "self", ".", "temporal_fc1", "(", "embed", ")", ")", ")", "\n", "embed", "=", "self", ".", "temporal_norm2", "(", "embed", "+", "embed2", ")", "\n", "track_instances", ".", "output_embedding", "=", "track_instances", ".", "output_embedding", ".", "clone", "(", ")", "\n", "track_instances", ".", "output_embedding", "[", "valid_idxes", "]", "=", "embed", "\n", "\n", "", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank.forward_temporal_attn": [[122, 124], ["memory_bank.MemoryBank._forward_temporal_attn"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_temporal_attn"], ["", "def", "forward_temporal_attn", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "return", "self", ".", "_forward_temporal_attn", "(", "track_instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank.forward": [[125, 134], ["memory_bank.MemoryBank._forward_temporal_attn", "memory_bank.MemoryBank.update", "memory_bank.MemoryBank._forward_spatial_attn", "memory_bank.MemoryBank._forward_track_cls"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_temporal_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_spatial_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.MemoryBank._forward_track_cls"], ["", "def", "forward", "(", "self", ",", "track_instances", ":", "Instances", ",", "update_bank", "=", "True", ")", "->", "Instances", ":", "\n", "        ", "track_instances", "=", "self", ".", "_forward_temporal_attn", "(", "track_instances", ")", "\n", "if", "update_bank", ":", "\n", "            ", "self", ".", "update", "(", "track_instances", ")", "\n", "", "if", "self", ".", "spatial_attn", "is", "not", "None", ":", "\n", "            ", "track_instances", "=", "self", ".", "_forward_spatial_attn", "(", "track_instances", ")", "\n", "", "if", "self", ".", "track_cls", "is", "not", "None", ":", "\n", "            ", "track_instances", "=", "self", ".", "_forward_track_cls", "(", "track_instances", ")", "\n", "", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.build_memory_bank": [[136, 143], ["None"], "function", ["None"], ["", "", "def", "build_memory_bank", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "    ", "name", "=", "args", ".", "memory_bank_type", "\n", "memory_banks", "=", "{", "\n", "'MemoryBank'", ":", "MemoryBank", ",", "\n", "}", "\n", "assert", "name", "in", "memory_banks", "\n", "return", "memory_banks", "[", "name", "]", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.relu_dropout.ReLUDropout.forward": [[5, 7], ["relu_dropout.relu_dropout"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.relu_dropout.relu_dropout"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "relu_dropout", "(", "input", ",", "p", "=", "self", ".", "p", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.relu_dropout.relu_dropout": [[8, 14], ["x.masked_fill_().div_", "x.masked_fill().div", "x.clamp_", "x.clamp", "torch.rand_like", "x.masked_fill_", "x.masked_fill"], "function", ["None"], ["", "", "def", "relu_dropout", "(", "x", ",", "p", "=", "0", ",", "inplace", "=", "False", ",", "training", "=", "False", ")", ":", "\n", "    ", "if", "not", "training", "or", "p", "==", "0", ":", "\n", "        ", "return", "x", ".", "clamp_", "(", "min", "=", "0", ")", "if", "inplace", "else", "x", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "", "mask", "=", "(", "x", "<", "0", ")", "|", "(", "torch", ".", "rand_like", "(", "x", ")", ">", "1", "-", "p", ")", "\n", "return", "x", ".", "masked_fill_", "(", "mask", ",", "0", ")", ".", "div_", "(", "1", "-", "p", ")", "if", "inplace", "else", "x", ".", "masked_fill", "(", "mask", ",", "0", ")", ".", "div", "(", "1", "-", "p", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.matcher.HungarianMatcher.__init__": [[31, 47], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "\n", "cost_class", ":", "float", "=", "1", ",", "\n", "cost_bbox", ":", "float", "=", "1", ",", "\n", "cost_giou", ":", "float", "=", "1", ")", ":", "\n", "        ", "\"\"\"Creates the matcher\n\n        Params:\n            cost_class: This is the relative weight of the classification error in the matching cost\n            cost_bbox: This is the relative weight of the L1 error of the bounding box coordinates in the matching cost\n            cost_giou: This is the relative weight of the giou loss of the bounding box in the matching cost\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cost_class", "=", "cost_class", "\n", "self", ".", "cost_bbox", "=", "cost_bbox", "\n", "self", ".", "cost_giou", "=", "cost_giou", "\n", "assert", "cost_class", "!=", "0", "or", "cost_bbox", "!=", "0", "or", "cost_giou", "!=", "0", ",", "\"all costs cant be 0\"", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.matcher.HungarianMatcher.forward": [[48, 117], ["torch.no_grad", "outputs[].flatten", "isinstance", "torch.cdist", "C.view().cpu.view().cpu.view().cpu", "isinstance", "outputs[].flatten().sigmoid", "outputs[].flatten().softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "util.box_ops.generalized_box_iou", "scipy.optimize.linear_sum_assignment", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy", "C.view().cpu.view().cpu.view", "len", "len", "enumerate", "torch.as_tensor", "torch.as_tensor", "outputs[].flatten", "outputs[].flatten", "C.view().cpu.view().cpu.split"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ",", "use_focal", "=", "True", ")", ":", "\n", "        ", "\"\"\" Performs the matching\n\n        Params:\n            outputs: This is a dict that contains at least these entries:\n                 \"pred_logits\": Tensor of dim [batch_size, num_queries, num_classes] with the classification logits\n                 \"pred_boxes\": Tensor of dim [batch_size, num_queries, 4] with the predicted box coordinates\n\n            targets: This is a list of targets (len(targets) = batch_size), where each target is a dict containing:\n                 \"labels\": Tensor of dim [num_target_boxes] (where num_target_boxes is the number of ground-truth\n                           objects in the target) containing the class labels\n                 \"boxes\": Tensor of dim [num_target_boxes, 4] containing the target box coordinates\n\n        Returns:\n            A list of size batch_size, containing tuples of (index_i, index_j) where:\n                - index_i is the indices of the selected predictions (in order)\n                - index_j is the indices of the corresponding selected targets (in order)\n            For each batch element, it holds:\n                len(index_i) = len(index_j) = min(num_queries, num_target_boxes)\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "bs", ",", "num_queries", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# We flatten to compute the cost matrices in a batch", "\n", "if", "use_focal", ":", "\n", "                ", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "out_prob", "=", "outputs", "[", "\"pred_logits\"", "]", ".", "flatten", "(", "0", ",", "1", ")", ".", "softmax", "(", "-", "1", ")", "# [batch_size * num_queries, num_classes]", "\n", "", "out_bbox", "=", "outputs", "[", "\"pred_boxes\"", "]", ".", "flatten", "(", "0", ",", "1", ")", "# [batch_size * num_queries, 4]", "\n", "\n", "# Also concat the target labels and boxes", "\n", "if", "isinstance", "(", "targets", "[", "0", "]", ",", "Instances", ")", ":", "\n", "                ", "tgt_ids", "=", "torch", ".", "cat", "(", "[", "gt_per_img", ".", "labels", "for", "gt_per_img", "in", "targets", "]", ")", "\n", "tgt_bbox", "=", "torch", ".", "cat", "(", "[", "gt_per_img", ".", "boxes", "for", "gt_per_img", "in", "targets", "]", ")", "\n", "", "else", ":", "\n", "                ", "tgt_ids", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"labels\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "tgt_bbox", "=", "torch", ".", "cat", "(", "[", "v", "[", "\"boxes\"", "]", "for", "v", "in", "targets", "]", ")", "\n", "\n", "# Compute the classification cost.", "\n", "", "if", "use_focal", ":", "\n", "                ", "alpha", "=", "0.25", "\n", "gamma", "=", "2.0", "\n", "neg_cost_class", "=", "(", "1", "-", "alpha", ")", "*", "(", "out_prob", "**", "gamma", ")", "*", "(", "-", "(", "1", "-", "out_prob", "+", "1e-8", ")", ".", "log", "(", ")", ")", "\n", "pos_cost_class", "=", "alpha", "*", "(", "(", "1", "-", "out_prob", ")", "**", "gamma", ")", "*", "(", "-", "(", "out_prob", "+", "1e-8", ")", ".", "log", "(", ")", ")", "\n", "cost_class", "=", "pos_cost_class", "[", ":", ",", "tgt_ids", "]", "-", "neg_cost_class", "[", ":", ",", "tgt_ids", "]", "\n", "", "else", ":", "\n", "# Compute the classification cost. Contrary to the loss, we don't use the NLL,", "\n", "# but approximate it in 1 - proba[target class].", "\n", "# The 1 is a constant that doesn't change the matching, it can be ommitted.", "\n", "                ", "cost_class", "=", "-", "out_prob", "[", ":", ",", "tgt_ids", "]", "\n", "\n", "# Compute the L1 cost between boxes", "\n", "", "cost_bbox", "=", "torch", ".", "cdist", "(", "out_bbox", ",", "tgt_bbox", ",", "p", "=", "1", ")", "\n", "\n", "# Compute the giou cost betwen boxes", "\n", "cost_giou", "=", "-", "generalized_box_iou", "(", "box_cxcywh_to_xyxy", "(", "out_bbox", ")", ",", "\n", "box_cxcywh_to_xyxy", "(", "tgt_bbox", ")", ")", "\n", "\n", "# Final cost matrix", "\n", "C", "=", "self", ".", "cost_bbox", "*", "cost_bbox", "+", "self", ".", "cost_class", "*", "cost_class", "+", "self", ".", "cost_giou", "*", "cost_giou", "\n", "C", "=", "C", ".", "view", "(", "bs", ",", "num_queries", ",", "-", "1", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "isinstance", "(", "targets", "[", "0", "]", ",", "Instances", ")", ":", "\n", "                ", "sizes", "=", "[", "len", "(", "gt_per_img", ".", "boxes", ")", "for", "gt_per_img", "in", "targets", "]", "\n", "", "else", ":", "\n", "                ", "sizes", "=", "[", "len", "(", "v", "[", "\"boxes\"", "]", ")", "for", "v", "in", "targets", "]", "\n", "\n", "", "indices", "=", "[", "linear_sum_assignment", "(", "c", "[", "i", "]", ")", "for", "i", ",", "c", "in", "enumerate", "(", "C", ".", "split", "(", "sizes", ",", "-", "1", ")", ")", "]", "\n", "return", "[", "(", "torch", ".", "as_tensor", "(", "i", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "torch", ".", "as_tensor", "(", "j", ",", "dtype", "=", "torch", ".", "int64", ")", ")", "for", "i", ",", "j", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.matcher.build_matcher": [[119, 123], ["matcher.HungarianMatcher"], "function", ["None"], ["", "", "", "def", "build_matcher", "(", "args", ")", ":", "\n", "    ", "return", "HungarianMatcher", "(", "cost_class", "=", "args", ".", "set_cost_class", ",", "\n", "cost_bbox", "=", "args", ".", "set_cost_bbox", ",", "\n", "cost_giou", "=", "args", ".", "set_cost_giou", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.__init__": [[29, 66], ["torch.nn.Module.__init__", "deformable_transformer.DeformableTransformerEncoderLayer", "deformable_transformer.DeformableTransformerEncoder", "deformable_transformer.DeformableTransformerDecoderLayer", "deformable_transformer.DeformableTransformerDecoder", "torch.nn.Parameter", "torch.nn.Parameter", "deformable_transformer.DeformableTransformer._reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "256", ",", "nhead", "=", "8", ",", "\n", "num_encoder_layers", "=", "6", ",", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "1024", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "\"relu\"", ",", "return_intermediate_dec", "=", "False", ",", "\n", "num_feature_levels", "=", "4", ",", "dec_n_points", "=", "4", ",", "enc_n_points", "=", "4", ",", "\n", "two_stage", "=", "False", ",", "two_stage_num_proposals", "=", "300", ",", "decoder_self_cross", "=", "True", ",", "sigmoid_attn", "=", "False", ",", "\n", "local_self_attn", "=", "False", ",", "new_frame_adaptor", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "new_frame_adaptor", "=", "None", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "self", ".", "two_stage_num_proposals", "=", "two_stage_num_proposals", "\n", "\n", "encoder_layer", "=", "DeformableTransformerEncoderLayer", "(", "d_model", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "\n", "num_feature_levels", ",", "nhead", ",", "enc_n_points", ",", "\n", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "encoder", "=", "DeformableTransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ")", "\n", "\n", "decoder_layer", "=", "DeformableTransformerDecoderLayer", "(", "d_model", ",", "dim_feedforward", ",", "\n", "dropout", ",", "activation", ",", "\n", "num_feature_levels", ",", "nhead", ",", "dec_n_points", ",", "decoder_self_cross", ",", "\n", "sigmoid_attn", "=", "sigmoid_attn", ",", "local_self_attn", "=", "local_self_attn", ")", "\n", "self", ".", "decoder", "=", "DeformableTransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "return_intermediate_dec", ")", "\n", "\n", "self", ".", "level_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_feature_levels", ",", "d_model", ")", ")", "\n", "\n", "if", "two_stage", ":", "\n", "            ", "self", ".", "enc_output", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "enc_output_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "pos_trans", "=", "nn", ".", "Linear", "(", "d_model", "*", "2", ",", "d_model", "*", "2", ")", "\n", "self", ".", "pos_trans_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", "*", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reference_points", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer._reset_parameters": [[67, 78], ["deformable_transformer.DeformableTransformer.parameters", "deformable_transformer.DeformableTransformer.modules", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "MSDeformAttn", ")", ":", "\n", "                ", "m", ".", "_reset_parameters", "(", ")", "\n", "", "", "if", "not", "self", ".", "two_stage", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "reference_points", ".", "weight", ".", "data", ",", "gain", "=", "1.0", ")", "\n", "constant_", "(", "self", ".", "reference_points", ".", "bias", ".", "data", ",", "0.", ")", "\n", "", "normal_", "(", "self", ".", "level_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_proposal_pos_embed": [[79, 93], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "proposals.sigmoid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pos[].sin", "pos[].cos"], "methods", ["None"], ["", "def", "get_proposal_pos_embed", "(", "self", ",", "proposals", ")", ":", "\n", "        ", "num_pos_feats", "=", "128", "\n", "temperature", "=", "10000", "\n", "scale", "=", "2", "*", "math", ".", "pi", "\n", "\n", "dim_t", "=", "torch", ".", "arange", "(", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "proposals", ".", "device", ")", "\n", "dim_t", "=", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "num_pos_feats", ")", "\n", "# N, L, 4", "\n", "proposals", "=", "proposals", ".", "sigmoid", "(", ")", "*", "scale", "\n", "# N, L, 4, 128", "\n", "pos", "=", "proposals", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "# N, L, 4, 64, 2", "\n", "pos", "=", "torch", ".", "stack", "(", "(", "pos", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "2", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.gen_encoder_output_proposals": [[94, 125], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "output_proposals.masked_fill.masked_fill.masked_fill", "output_proposals.masked_fill.masked_fill.masked_fill", "deformable_transformer.DeformableTransformer.masked_fill", "deformable_transformer.DeformableTransformer.masked_fill", "deformable_transformer.DeformableTransformer.enc_output_norm", "memory_padding_mask[].view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "proposals.append", "memory_padding_mask.unsqueeze", "float", "float", "memory_padding_mask.unsqueeze", "float", "float", "deformable_transformer.DeformableTransformer.enc_output", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "grid_x.unsqueeze", "grid_y.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.sum.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "gen_encoder_output_proposals", "(", "self", ",", "memory", ",", "memory_padding_mask", ",", "spatial_shapes", ")", ":", "\n", "        ", "N_", ",", "S_", ",", "C_", "=", "memory", ".", "shape", "\n", "base_scale", "=", "4.0", "\n", "proposals", "=", "[", "]", "\n", "_cur", "=", "0", "\n", "for", "lvl", ",", "(", "H_", ",", "W_", ")", "in", "enumerate", "(", "spatial_shapes", ")", ":", "\n", "            ", "mask_flatten_", "=", "memory_padding_mask", "[", ":", ",", "_cur", ":", "(", "_cur", "+", "H_", "*", "W_", ")", "]", ".", "view", "(", "N_", ",", "H_", ",", "W_", ",", "1", ")", "\n", "valid_H", "=", "torch", ".", "sum", "(", "~", "mask_flatten_", "[", ":", ",", ":", ",", "0", ",", "0", "]", ",", "1", ")", "\n", "valid_W", "=", "torch", ".", "sum", "(", "~", "mask_flatten_", "[", ":", ",", "0", ",", ":", ",", "0", "]", ",", "1", ")", "\n", "\n", "grid_y", ",", "grid_x", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0", ",", "H_", "-", "1", ",", "H_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "memory", ".", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "0", ",", "W_", "-", "1", ",", "W_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "memory", ".", "device", ")", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "grid_x", ".", "unsqueeze", "(", "-", "1", ")", ",", "grid_y", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "-", "1", ")", "\n", "\n", "scale", "=", "torch", ".", "cat", "(", "[", "valid_W", ".", "unsqueeze", "(", "-", "1", ")", ",", "valid_H", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "1", ")", ".", "view", "(", "N_", ",", "1", ",", "1", ",", "2", ")", "\n", "grid", "=", "(", "grid", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N_", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "+", "0.5", ")", "/", "scale", "\n", "wh", "=", "torch", ".", "ones_like", "(", "grid", ")", "*", "0.05", "*", "(", "2.0", "**", "lvl", ")", "\n", "proposal", "=", "torch", ".", "cat", "(", "(", "grid", ",", "wh", ")", ",", "-", "1", ")", ".", "view", "(", "N_", ",", "-", "1", ",", "4", ")", "\n", "proposals", ".", "append", "(", "proposal", ")", "\n", "_cur", "+=", "(", "H_", "*", "W_", ")", "\n", "", "output_proposals", "=", "torch", ".", "cat", "(", "proposals", ",", "1", ")", "\n", "output_proposals_valid", "=", "(", "(", "output_proposals", ">", "0.01", ")", "&", "(", "output_proposals", "<", "0.99", ")", ")", ".", "all", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "output_proposals", "=", "torch", ".", "log", "(", "output_proposals", "/", "(", "1", "-", "output_proposals", ")", ")", "\n", "output_proposals", "=", "output_proposals", ".", "masked_fill", "(", "memory_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "output_proposals", "=", "output_proposals", ".", "masked_fill", "(", "~", "output_proposals_valid", ",", "float", "(", "'inf'", ")", ")", "\n", "\n", "output_memory", "=", "memory", "\n", "output_memory", "=", "output_memory", ".", "masked_fill", "(", "memory_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "0", ")", ")", "\n", "output_memory", "=", "output_memory", ".", "masked_fill", "(", "~", "output_proposals_valid", ",", "float", "(", "0", ")", ")", "\n", "output_memory", "=", "self", ".", "enc_output_norm", "(", "self", ".", "enc_output", "(", "output_memory", ")", ")", "\n", "return", "output_memory", ",", "output_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_valid_ratio": [[126, 134], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum.float", "torch.sum.float", "torch.sum.float", "torch.sum.float"], "methods", ["None"], ["", "def", "get_valid_ratio", "(", "self", ",", "mask", ")", ":", "\n", "        ", "_", ",", "H", ",", "W", "=", "mask", ".", "shape", "\n", "valid_H", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", ":", ",", "0", "]", ",", "1", ")", "\n", "valid_W", "=", "torch", ".", "sum", "(", "~", "mask", "[", ":", ",", "0", ",", ":", "]", ",", "1", ")", "\n", "valid_ratio_h", "=", "valid_H", ".", "float", "(", ")", "/", "H", "\n", "valid_ratio_w", "=", "valid_W", ".", "float", "(", ")", "/", "W", "\n", "valid_ratio", "=", "torch", ".", "stack", "(", "[", "valid_ratio_w", ",", "valid_ratio_h", "]", ",", "-", "1", ")", "\n", "return", "valid_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.forward": [[135, 200], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deformable_transformer.DeformableTransformer.encoder", "deformable_transformer.DeformableTransformer.decoder", "zip", "torch.as_tensor.append", "torch.as_tensor.append", "src.flatten().transpose.flatten().transpose.flatten().transpose", "mask.flatten.flatten.flatten", "pos_embed.flatten().transpose.flatten().transpose.flatten().transpose", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "valid_ratio.unsqueeze().repeat", "deformable_transformer.DeformableTransformer.gen_encoder_output_proposals", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "topk_coords_unact.detach.detach.detach", "topk_coords_unact.detach.detach.sigmoid", "deformable_transformer.DeformableTransformer.pos_trans_norm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "query_embed.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "tgt.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "deformable_transformer.DeformableTransformer.level_embed[].view", "torch.as_tensor.new_zeros", "torch.as_tensor.new_zeros", "len", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "topk_proposals.unsqueeze().repeat", "deformable_transformer.DeformableTransformer.pos_trans", "deformable_transformer.DeformableTransformer.reference_points().sigmoid", "ref_pts.unsqueeze().repeat().sigmoid", "src.flatten().transpose.flatten().transpose.flatten", "pos_embed.flatten().transpose.flatten().transpose.flatten", "torch.as_tensor.prod().cumsum", "torch.as_tensor.prod().cumsum", "deformable_transformer.DeformableTransformer.get_valid_ratio", "valid_ratio.unsqueeze", "deformable_transformer.DeformableTransformer.get_proposal_pos_embed", "query_embed.unsqueeze().expand.unsqueeze().expand.unsqueeze", "tgt.unsqueeze().expand.unsqueeze().expand.unsqueeze", "topk_proposals.unsqueeze", "deformable_transformer.DeformableTransformer.reference_points", "ref_pts.unsqueeze().repeat", "torch.as_tensor.prod", "torch.as_tensor.prod", "ref_pts.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.gen_encoder_output_proposals", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_valid_ratio", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformer.get_proposal_pos_embed"], ["", "def", "forward", "(", "self", ",", "srcs", ",", "masks", ",", "pos_embeds", ",", "query_embed", "=", "None", ",", "ref_pts", "=", "None", ",", "valid_ratio", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "two_stage", "or", "query_embed", "is", "not", "None", "\n", "\n", "# prepare input for encoder", "\n", "src_flatten", "=", "[", "]", "\n", "mask_flatten", "=", "[", "]", "\n", "lvl_pos_embed_flatten", "=", "[", "]", "\n", "spatial_shapes", "=", "[", "]", "\n", "for", "lvl", ",", "(", "src", ",", "mask", ",", "pos_embed", ")", "in", "enumerate", "(", "zip", "(", "srcs", ",", "masks", ",", "pos_embeds", ")", ")", ":", "\n", "            ", "bs", ",", "c", ",", "h", ",", "w", "=", "src", ".", "shape", "\n", "spatial_shape", "=", "(", "h", ",", "w", ")", "\n", "spatial_shapes", ".", "append", "(", "spatial_shape", ")", "\n", "src", "=", "src", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "mask", "=", "mask", ".", "flatten", "(", "1", ")", "\n", "pos_embed", "=", "pos_embed", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "lvl_pos_embed", "=", "pos_embed", "+", "self", ".", "level_embed", "[", "lvl", "]", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "lvl_pos_embed_flatten", ".", "append", "(", "lvl_pos_embed", ")", "\n", "src_flatten", ".", "append", "(", "src", ")", "\n", "mask_flatten", ".", "append", "(", "mask", ")", "\n", "", "src_flatten", "=", "torch", ".", "cat", "(", "src_flatten", ",", "1", ")", "\n", "mask_flatten", "=", "torch", ".", "cat", "(", "mask_flatten", ",", "1", ")", "\n", "lvl_pos_embed_flatten", "=", "torch", ".", "cat", "(", "lvl_pos_embed_flatten", ",", "1", ")", "\n", "spatial_shapes", "=", "torch", ".", "as_tensor", "(", "spatial_shapes", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "src_flatten", ".", "device", ")", "\n", "level_start_index", "=", "torch", ".", "cat", "(", "(", "spatial_shapes", ".", "new_zeros", "(", "(", "1", ",", ")", ")", ",", "spatial_shapes", ".", "prod", "(", "1", ")", ".", "cumsum", "(", "0", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "if", "valid_ratio", "is", "None", ":", "\n", "            ", "valid_ratios", "=", "torch", ".", "stack", "(", "[", "self", ".", "get_valid_ratio", "(", "m", ")", "for", "m", "in", "masks", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "valid_ratios", "=", "valid_ratio", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "len", "(", "masks", ")", ",", "1", ",", "1", ")", "\n", "\n", "# encoder", "\n", "", "memory", "=", "self", ".", "encoder", "(", "src_flatten", ",", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "lvl_pos_embed_flatten", ",", "mask_flatten", ")", "\n", "# prepare input for decoder", "\n", "bs", ",", "_", ",", "c", "=", "memory", ".", "shape", "\n", "if", "self", ".", "two_stage", ":", "\n", "            ", "output_memory", ",", "output_proposals", "=", "self", ".", "gen_encoder_output_proposals", "(", "memory", ",", "mask_flatten", ",", "spatial_shapes", ")", "\n", "\n", "# hack implementation for two-stage Deformable DETR", "\n", "enc_outputs_class", "=", "self", ".", "decoder", ".", "class_embed", "[", "self", ".", "decoder", ".", "num_layers", "]", "(", "output_memory", ")", "\n", "enc_outputs_coord_unact", "=", "self", ".", "decoder", ".", "bbox_embed", "[", "self", ".", "decoder", ".", "num_layers", "]", "(", "output_memory", ")", "+", "output_proposals", "\n", "\n", "topk", "=", "self", ".", "two_stage_num_proposals", "\n", "topk_proposals", "=", "torch", ".", "topk", "(", "enc_outputs_class", "[", "...", ",", "0", "]", ",", "topk", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "topk_coords_unact", "=", "torch", ".", "gather", "(", "enc_outputs_coord_unact", ",", "1", ",", "topk_proposals", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "4", ")", ")", "\n", "topk_coords_unact", "=", "topk_coords_unact", ".", "detach", "(", ")", "\n", "reference_points", "=", "topk_coords_unact", ".", "sigmoid", "(", ")", "\n", "init_reference_out", "=", "reference_points", "\n", "pos_trans_out", "=", "self", ".", "pos_trans_norm", "(", "self", ".", "pos_trans", "(", "self", ".", "get_proposal_pos_embed", "(", "topk_coords_unact", ")", ")", ")", "\n", "query_embed", ",", "tgt", "=", "torch", ".", "split", "(", "pos_trans_out", ",", "c", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "query_embed", ",", "tgt", "=", "torch", ".", "split", "(", "query_embed", ",", "c", ",", "dim", "=", "1", ")", "\n", "query_embed", "=", "query_embed", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", "\n", "tgt", "=", "tgt", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", "\n", "if", "ref_pts", "is", "None", ":", "\n", "                ", "reference_points", "=", "self", ".", "reference_points", "(", "query_embed", ")", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "reference_points", "=", "ref_pts", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bs", ",", "1", ",", "1", ")", ".", "sigmoid", "(", ")", "\n", "", "init_reference_out", "=", "reference_points", "\n", "# decoder", "\n", "", "hs", ",", "inter_references", "=", "self", ".", "decoder", "(", "tgt", ",", "reference_points", ",", "memory", ",", "\n", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "query_embed", ",", "mask_flatten", ")", "\n", "\n", "inter_references_out", "=", "inter_references", "\n", "if", "self", ".", "two_stage", ":", "\n", "            ", "return", "hs", ",", "init_reference_out", ",", "inter_references_out", ",", "enc_outputs_class", ",", "enc_outputs_coord_unact", "\n", "", "return", "hs", ",", "init_reference_out", ",", "inter_references_out", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoderLayer.__init__": [[203, 221], ["torch.nn.Module.__init__", "models.ops.modules.MSDeformAttn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "deformable_transformer._get_activation_fn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "\n", "d_model", "=", "256", ",", "d_ffn", "=", "1024", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "n_levels", "=", "4", ",", "n_heads", "=", "8", ",", "n_points", "=", "4", ",", "sigmoid_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# self attention", "\n", "self", ".", "self_attn", "=", "MSDeformAttn", "(", "d_model", ",", "n_levels", ",", "n_heads", ",", "n_points", ",", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# ffn", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ffn", ")", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_ffn", ",", "d_model", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoderLayer.with_pos_embed": [[222, 225], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_pos_embed", "(", "tensor", ",", "pos", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoderLayer.forward_ffn": [[226, 231], ["deformable_transformer.DeformableTransformerEncoderLayer.linear2", "deformable_transformer.DeformableTransformerEncoderLayer.norm2", "deformable_transformer.DeformableTransformerEncoderLayer.dropout2", "deformable_transformer.DeformableTransformerEncoderLayer.dropout3", "deformable_transformer.DeformableTransformerEncoderLayer.activation", "deformable_transformer.DeformableTransformerEncoderLayer.linear1"], "methods", ["None"], ["", "def", "forward_ffn", "(", "self", ",", "src", ")", ":", "\n", "        ", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout2", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout3", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoderLayer.forward": [[232, 242], ["deformable_transformer.DeformableTransformerEncoderLayer.self_attn", "deformable_transformer.DeformableTransformerEncoderLayer.norm1", "deformable_transformer.DeformableTransformerEncoderLayer.forward_ffn", "deformable_transformer.DeformableTransformerEncoderLayer.with_pos_embed", "deformable_transformer.DeformableTransformerEncoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "src", ",", "pos", ",", "reference_points", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", "=", "None", ")", ":", "\n", "# self attention", "\n", "        ", "src2", "=", "self", ".", "self_attn", "(", "self", ".", "with_pos_embed", "(", "src", ",", "pos", ")", ",", "reference_points", ",", "src", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "\n", "# ffn", "\n", "src", "=", "self", ".", "forward_ffn", "(", "src", ")", "\n", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoder.__init__": [[245, 249], ["torch.nn.Module.__init__", "deformable_transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoder.get_reference_points": [[250, 264], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "reference_points_list.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ref_y.reshape", "ref_x.reshape"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "@", "staticmethod", "\n", "def", "get_reference_points", "(", "spatial_shapes", ",", "valid_ratios", ",", "device", ")", ":", "\n", "        ", "reference_points_list", "=", "[", "]", "\n", "for", "lvl", ",", "(", "H_", ",", "W_", ")", "in", "enumerate", "(", "spatial_shapes", ")", ":", "\n", "\n", "            ", "ref_y", ",", "ref_x", "=", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0.5", ",", "H_", "-", "0.5", ",", "H_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "torch", ".", "linspace", "(", "0.5", ",", "W_", "-", "0.5", ",", "W_", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ")", "\n", "ref_y", "=", "ref_y", ".", "reshape", "(", "-", "1", ")", "[", "None", "]", "/", "(", "valid_ratios", "[", ":", ",", "None", ",", "lvl", ",", "1", "]", "*", "H_", ")", "\n", "ref_x", "=", "ref_x", ".", "reshape", "(", "-", "1", ")", "[", "None", "]", "/", "(", "valid_ratios", "[", ":", ",", "None", ",", "lvl", ",", "0", "]", "*", "W_", ")", "\n", "ref", "=", "torch", ".", "stack", "(", "(", "ref_x", ",", "ref_y", ")", ",", "-", "1", ")", "\n", "reference_points_list", ".", "append", "(", "ref", ")", "\n", "", "reference_points", "=", "torch", ".", "cat", "(", "reference_points_list", ",", "1", ")", "\n", "reference_points", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "valid_ratios", "[", ":", ",", "None", "]", "\n", "return", "reference_points", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoder.forward": [[265, 272], ["deformable_transformer.DeformableTransformerEncoder.get_reference_points", "enumerate", "layer"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerEncoder.get_reference_points"], ["", "def", "forward", "(", "self", ",", "src", ",", "spatial_shapes", ",", "level_start_index", ",", "valid_ratios", ",", "pos", "=", "None", ",", "padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "src", "\n", "reference_points", "=", "self", ".", "get_reference_points", "(", "spatial_shapes", ",", "valid_ratios", ",", "device", "=", "src", ".", "device", ")", "\n", "for", "_", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "output", "=", "layer", "(", "output", ",", "pos", ",", "reference_points", ",", "spatial_shapes", ",", "level_start_index", ",", "padding_mask", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.__init__": [[275, 300], ["torch.nn.Module.__init__", "models.ops.modules.MSDeformAttn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "deformable_transformer._get_activation_fn", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "256", ",", "d_ffn", "=", "1024", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "n_levels", "=", "4", ",", "n_heads", "=", "8", ",", "n_points", "=", "4", ",", "self_cross", "=", "True", ",", "sigmoid_attn", "=", "False", ",", "local_self_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "self_cross", "=", "self_cross", "\n", "self", ".", "local_self_attn", "=", "local_self_attn", "\n", "self", ".", "num_head", "=", "n_heads", "\n", "# cross attention", "\n", "self", ".", "cross_attn", "=", "MSDeformAttn", "(", "d_model", ",", "n_levels", ",", "n_heads", ",", "n_points", ",", "sigmoid_attn", "=", "sigmoid_attn", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# self attention", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_heads", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "# ffn", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ffn", ")", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_ffn", ",", "d_model", ")", "\n", "self", ".", "dropout4", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed": [[301, 304], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "with_pos_embed", "(", "tensor", ",", "pos", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn": [[305, 310], ["deformable_transformer.DeformableTransformerDecoderLayer.linear2", "deformable_transformer.DeformableTransformerDecoderLayer.norm3", "deformable_transformer.DeformableTransformerDecoderLayer.dropout3", "deformable_transformer.DeformableTransformerDecoderLayer.dropout4", "deformable_transformer.DeformableTransformerDecoderLayer.activation", "deformable_transformer.DeformableTransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward_ffn", "(", "self", ",", "tgt", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout3", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout4", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn": [[311, 320], ["deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer.DeformableTransformerDecoderLayer.norm2", "[].transpose", "[].transpose", "deformable_transformer.DeformableTransformerDecoderLayer.dropout2", "deformable_transformer.DeformableTransformerDecoderLayer.self_attn", "deformable_transformer.DeformableTransformerDecoderLayer.self_attn", "deformable_transformer.DeformableTransformerDecoderLayer.transpose", "deformable_transformer.DeformableTransformerDecoderLayer.transpose", "tgt.transpose", "deformable_transformer.DeformableTransformerDecoderLayer.transpose", "deformable_transformer.DeformableTransformerDecoderLayer.transpose", "tgt.transpose"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "_forward_self_attn", "(", "self", ",", "tgt", ",", "query_pos", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "tgt2", "=", "self", ".", "self_attn", "(", "q", ".", "transpose", "(", "0", ",", "1", ")", ",", "k", ".", "transpose", "(", "0", ",", "1", ")", ",", "tgt", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "attn_mask", "=", "attn_mask", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "tgt2", "=", "self", ".", "self_attn", "(", "q", ".", "transpose", "(", "0", ",", "1", ")", ",", "k", ".", "transpose", "(", "0", ",", "1", ")", ",", "tgt", ".", "transpose", "(", "0", ",", "1", ")", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "return", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_cross": [[321, 337], ["deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "deformable_transformer.DeformableTransformerDecoderLayer.cross_attn", "deformable_transformer.DeformableTransformerDecoderLayer.norm1", "deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer.DeformableTransformerDecoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "_forward_self_cross", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ")", ":", "\n", "\n", "# self attention", "\n", "        ", "tgt", "=", "self", ".", "_forward_self_attn", "(", "tgt", ",", "query_pos", ",", "attn_mask", ")", "\n", "# cross attention", "\n", "tgt2", "=", "self", ".", "cross_attn", "(", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "reference_points", ",", "\n", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "\n", "# ffn", "\n", "tgt", "=", "self", ".", "forward_ffn", "(", "tgt", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_cross_self": [[338, 352], ["deformable_transformer.DeformableTransformerDecoderLayer.cross_attn", "deformable_transformer.DeformableTransformerDecoderLayer.norm1", "deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed", "deformable_transformer.DeformableTransformerDecoderLayer.dropout1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_attn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward_ffn", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.with_pos_embed"], ["", "def", "_forward_cross_self", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", "=", "None", ",", "attn_mask", "=", "None", ")", ":", "\n", "# cross attention", "\n", "        ", "tgt2", "=", "self", ".", "cross_attn", "(", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "reference_points", ",", "\n", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "# self attention", "\n", "tgt", "=", "self", ".", "_forward_self_attn", "(", "tgt", ",", "query_pos", ",", "attn_mask", ")", "\n", "# ffn", "\n", "tgt", "=", "self", ".", "forward_ffn", "(", "tgt", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer.forward": [[353, 360], ["deformable_transformer.DeformableTransformerDecoderLayer._forward_cross_self", "deformable_transformer.DeformableTransformerDecoderLayer._forward_self_cross"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_cross_self", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoderLayer._forward_self_cross"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "src_padding_mask", "=", "None", ")", ":", "\n", "        ", "attn_mask", "=", "None", "\n", "if", "self", ".", "self_cross", ":", "\n", "            ", "return", "self", ".", "_forward_self_cross", "(", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "\n", "level_start_index", ",", "src_padding_mask", ",", "attn_mask", ")", "\n", "", "return", "self", ".", "_forward_cross_self", "(", "tgt", ",", "query_pos", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "level_start_index", ",", "\n", "src_padding_mask", ",", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoder.__init__": [[363, 371], ["torch.nn.Module.__init__", "deformable_transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "return_intermediate", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "# hack implementation for iterative bounding box refinement and two-stage Deformable DETR", "\n", "self", ".", "bbox_embed", "=", "None", "\n", "self", ".", "class_embed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.DeformableTransformerDecoder.forward": [[372, 408], ["enumerate", "layer", "new_reference_points.sigmoid.sigmoid.detach", "intermediate.append", "intermediate_reference_points.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "new_reference_points.sigmoid.sigmoid.sigmoid", "new_reference_points.sigmoid.sigmoid.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "util.misc.inverse_sigmoid", "util.misc.inverse_sigmoid"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "reference_points", ",", "src", ",", "src_spatial_shapes", ",", "src_level_start_index", ",", "src_valid_ratios", ",", "\n", "query_pos", "=", "None", ",", "src_padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "intermediate", "=", "[", "]", "\n", "intermediate_reference_points", "=", "[", "]", "\n", "for", "lid", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "if", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                ", "reference_points_input", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "torch", ".", "cat", "(", "[", "src_valid_ratios", ",", "src_valid_ratios", "]", ",", "-", "1", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "assert", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "reference_points_input", "=", "reference_points", "[", ":", ",", ":", ",", "None", "]", "*", "src_valid_ratios", "[", ":", ",", "None", "]", "\n", "", "output", "=", "layer", "(", "output", ",", "query_pos", ",", "reference_points_input", ",", "src", ",", "src_spatial_shapes", ",", "src_level_start_index", ",", "src_padding_mask", ")", "\n", "\n", "# hack implementation for iterative bounding box refinement", "\n", "if", "self", ".", "bbox_embed", "is", "not", "None", ":", "\n", "                ", "tmp", "=", "self", ".", "bbox_embed", "[", "lid", "]", "(", "output", ")", "\n", "if", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                    ", "new_reference_points", "=", "tmp", "+", "inverse_sigmoid", "(", "reference_points", ")", "\n", "new_reference_points", "=", "new_reference_points", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "new_reference_points", "=", "tmp", "\n", "new_reference_points", "[", "...", ",", ":", "2", "]", "=", "tmp", "[", "...", ",", ":", "2", "]", "+", "inverse_sigmoid", "(", "reference_points", ")", "\n", "new_reference_points", "=", "new_reference_points", ".", "sigmoid", "(", ")", "\n", "", "reference_points", "=", "new_reference_points", ".", "detach", "(", ")", "\n", "\n", "", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "append", "(", "output", ")", "\n", "intermediate_reference_points", ".", "append", "(", "reference_points", ")", "\n", "\n", "", "", "if", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "intermediate", ")", ",", "torch", ".", "stack", "(", "intermediate_reference_points", ")", "\n", "\n", "", "return", "output", ",", "reference_points", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_clones": [[410, 412], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer._get_activation_fn": [[414, 423], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.build_deforamble_transformer": [[425, 444], ["deformable_transformer.DeformableTransformer"], "function", ["None"], ["", "def", "build_deforamble_transformer", "(", "args", ")", ":", "\n", "    ", "return", "DeformableTransformer", "(", "\n", "d_model", "=", "args", ".", "hidden_dim", ",", "\n", "nhead", "=", "args", ".", "nheads", ",", "\n", "num_encoder_layers", "=", "args", ".", "enc_layers", ",", "\n", "num_decoder_layers", "=", "args", ".", "dec_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "return_intermediate_dec", "=", "True", ",", "\n", "num_feature_levels", "=", "args", ".", "num_feature_levels", ",", "\n", "dec_n_points", "=", "args", ".", "dec_n_points", ",", "\n", "enc_n_points", "=", "args", ".", "enc_n_points", ",", "\n", "two_stage", "=", "args", ".", "two_stage", ",", "\n", "two_stage_num_proposals", "=", "args", ".", "num_queries", ",", "\n", "decoder_self_cross", "=", "not", "args", ".", "decoder_cross_self", ",", "\n", "sigmoid_attn", "=", "args", ".", "sigmoid_attn", ",", "\n", "local_self_attn", "=", "args", ".", "local_self_attn", ",", "\n", "new_frame_adaptor", "=", "args", ".", "new_frame_adaptor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.__init__.build_model": [[14, 22], ["build_func"], "function", ["None"], ["from", ".", "coco", "import", "build", "as", "build_coco", "\n", "from", ".", "detmot", "import", "build", "as", "build_e2e_mot", "\n", "from", ".", "dance", "import", "build", "as", "build_e2e_dance", "\n", "from", ".", "static_detmot", "import", "build", "as", "build_e2e_static_mot", "\n", "from", ".", "joint", "import", "build", "as", "build_e2e_joint", "\n", "from", ".", "torchvision_datasets", "import", "CocoDetection", "\n", "\n", "def", "get_coco_api_from_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "_", "in", "range", "(", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.__init__": [[39, 59], ["deformable_detr.SetCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "\n", "matcher", ",", "\n", "weight_dict", ",", "\n", "losses", ")", ":", "\n", "        ", "\"\"\" Create the criterion.\n        Parameters:\n            num_classes: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            weight_dict: dict containing as key the names of the losses and as values their relative weight.\n            eos_coef: relative classification weight applied to the no-object category\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "matcher", ",", "weight_dict", ",", "losses", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "matcher", "=", "matcher", "\n", "self", ".", "weight_dict", "=", "weight_dict", "\n", "self", ".", "losses", "=", "losses", "\n", "self", ".", "focal_loss", "=", "True", "\n", "self", ".", "losses_dict", "=", "{", "}", "\n", "self", ".", "_current_frame_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.initialize_for_single_clip": [[60, 66], ["None"], "methods", ["None"], ["", "def", "initialize_for_single_clip", "(", "self", ",", "gt_instances", ":", "List", "[", "Instances", "]", ")", ":", "\n", "        ", "self", ".", "gt_instances", "=", "gt_instances", "\n", "self", ".", "num_samples", "=", "0", "\n", "self", ".", "sample_device", "=", "None", "\n", "self", ".", "_current_frame_idx", "=", "0", "\n", "self", ".", "losses_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher._step": [[67, 69], ["None"], "methods", ["None"], ["", "def", "_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_current_frame_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.calc_loss_for_track_scores": [[70, 90], ["len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "motr.ClipMatcher.get_loss", "motr.ClipMatcher.losses_dict.update", "motr.ClipMatcher.items"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update"], ["", "def", "calc_loss_for_track_scores", "(", "self", ",", "track_instances", ":", "Instances", ")", ":", "\n", "        ", "frame_id", "=", "self", ".", "_current_frame_idx", "-", "1", "\n", "gt_instances", "=", "self", ".", "gt_instances", "[", "frame_id", "]", "\n", "outputs", "=", "{", "\n", "'pred_logits'", ":", "track_instances", ".", "track_scores", "[", "None", "]", ",", "\n", "}", "\n", "device", "=", "track_instances", ".", "track_scores", ".", "device", "\n", "\n", "num_tracks", "=", "len", "(", "track_instances", ")", "\n", "src_idx", "=", "torch", ".", "arange", "(", "num_tracks", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "tgt_idx", "=", "track_instances", ".", "matched_gt_idxes", "# -1 for FP tracks and disappeared tracks", "\n", "\n", "track_losses", "=", "self", ".", "get_loss", "(", "'labels'", ",", "\n", "outputs", "=", "outputs", ",", "\n", "gt_instances", "=", "[", "gt_instances", "]", ",", "\n", "indices", "=", "[", "(", "src_idx", ",", "tgt_idx", ")", "]", ",", "\n", "num_boxes", "=", "1", ")", "\n", "self", ".", "losses_dict", ".", "update", "(", "\n", "{", "'frame_{}_track_{}'", ".", "format", "(", "frame_id", ",", "key", ")", ":", "value", "for", "key", ",", "value", "in", "\n", "track_losses", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_num_boxes": [[91, 97], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "util.misc.is_dist_avail_and_initialized", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.clamp().item", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "util.misc.get_world_size"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_dist_avail_and_initialized", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.get_world_size"], ["", "def", "get_num_boxes", "(", "self", ",", "num_samples", ")", ":", "\n", "        ", "num_boxes", "=", "torch", ".", "as_tensor", "(", "num_samples", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "sample_device", ")", "\n", "if", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "torch", ".", "distributed", ".", "all_reduce", "(", "num_boxes", ")", "\n", "", "num_boxes", "=", "torch", ".", "clamp", "(", "num_boxes", "/", "get_world_size", "(", ")", ",", "min", "=", "1", ")", ".", "item", "(", ")", "\n", "return", "num_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_loss": [[98, 106], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "loss", ",", "outputs", ",", "gt_instances", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_map", "=", "{", "\n", "'labels'", ":", "self", ".", "loss_labels", ",", "\n", "'cardinality'", ":", "self", ".", "loss_cardinality", ",", "\n", "'boxes'", ":", "self", ".", "loss_boxes", ",", "\n", "}", "\n", "assert", "loss", "in", "loss_map", ",", "f'do you really want to compute {loss} loss?'", "\n", "return", "loss_map", "[", "loss", "]", "(", "outputs", ",", "gt_instances", ",", "indices", ",", "num_boxes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.loss_boxes": [[107, 137], ["motr.ClipMatcher._get_src_permutation_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.l1_loss", "torch.l1_loss", "filtered_idx.append", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.l1_loss.sum", "loss_giou.sum", "util.box_ops.generalized_box_iou", "zip", "zip", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.generalized_box_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy"], ["", "def", "loss_boxes", "(", "self", ",", "outputs", ",", "gt_instances", ":", "List", "[", "Instances", "]", ",", "indices", ":", "List", "[", "tuple", "]", ",", "num_boxes", ")", ":", "\n", "        ", "\"\"\"Compute the losses related to the bounding boxes, the L1 regression loss and the GIoU loss\n           targets dicts must contain the key \"boxes\" containing a tensor of dim [nb_target_boxes, 4]\n           The target boxes are expected in format (center_x, center_y, h, w), normalized by the image size.\n        \"\"\"", "\n", "# We ignore the regression loss of the track-disappear slots.", "\n", "#TODO: Make this filter process more elegant.", "\n", "filtered_idx", "=", "[", "]", "\n", "for", "src_per_img", ",", "tgt_per_img", "in", "indices", ":", "\n", "            ", "keep", "=", "tgt_per_img", "!=", "-", "1", "\n", "filtered_idx", ".", "append", "(", "(", "src_per_img", "[", "keep", "]", ",", "tgt_per_img", "[", "keep", "]", ")", ")", "\n", "", "indices", "=", "filtered_idx", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "src_boxes", "=", "outputs", "[", "'pred_boxes'", "]", "[", "idx", "]", "\n", "target_boxes", "=", "torch", ".", "cat", "(", "[", "gt_per_img", ".", "boxes", "[", "i", "]", "for", "gt_per_img", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "gt_instances", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# for pad target, don't calculate regression loss, judged by whether obj_id=-1", "\n", "target_obj_ids", "=", "torch", ".", "cat", "(", "[", "gt_per_img", ".", "obj_ids", "[", "i", "]", "for", "gt_per_img", ",", "(", "_", ",", "i", ")", "in", "zip", "(", "gt_instances", ",", "indices", ")", "]", ",", "dim", "=", "0", ")", "# size(16)", "\n", "mask", "=", "(", "target_obj_ids", "!=", "-", "1", ")", "\n", "\n", "loss_bbox", "=", "F", ".", "l1_loss", "(", "src_boxes", "[", "mask", "]", ",", "target_boxes", "[", "mask", "]", ",", "reduction", "=", "'none'", ")", "\n", "loss_giou", "=", "1", "-", "torch", ".", "diag", "(", "box_ops", ".", "generalized_box_iou", "(", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "src_boxes", "[", "mask", "]", ")", ",", "\n", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "target_boxes", "[", "mask", "]", ")", ")", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", "[", "'loss_bbox'", "]", "=", "loss_bbox", ".", "sum", "(", ")", "/", "num_boxes", "\n", "losses", "[", "'loss_giou'", "]", "=", "loss_giou", ".", "sum", "(", ")", "/", "num_boxes", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.loss_labels": [[138, 174], ["motr.ClipMatcher._get_src_permutation_idx", "torch.full", "torch.full", "torch.full", "torch.full", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "labels.append", "gt_labels_target.to.to.to", "segmentation.sigmoid_focal_loss", "torch.cross_entropy.sum", "torch.cross_entropy", "torch.cross_entropy", "len", "torch.one_hot", "torch.one_hot", "src_logits.flatten", "gt_labels_target.to.to.flatten", "src_logits.transpose", "util.misc.accuracy"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_detr.SetCriterion._get_src_permutation_idx", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.segmentation.sigmoid_focal_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.accuracy"], ["", "def", "loss_labels", "(", "self", ",", "outputs", ",", "gt_instances", ":", "List", "[", "Instances", "]", ",", "indices", ",", "num_boxes", ",", "log", "=", "False", ")", ":", "\n", "        ", "\"\"\"Classification loss (NLL)\n        targets dicts must contain the key \"labels\" containing a tensor of dim [nb_target_boxes]\n        \"\"\"", "\n", "src_logits", "=", "outputs", "[", "'pred_logits'", "]", "\n", "idx", "=", "self", ".", "_get_src_permutation_idx", "(", "indices", ")", "\n", "target_classes", "=", "torch", ".", "full", "(", "src_logits", ".", "shape", "[", ":", "2", "]", ",", "self", ".", "num_classes", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "src_logits", ".", "device", ")", "\n", "# The matched gt for disappear track query is set -1.", "\n", "labels", "=", "[", "]", "\n", "for", "gt_per_img", ",", "(", "_", ",", "J", ")", "in", "zip", "(", "gt_instances", ",", "indices", ")", ":", "\n", "            ", "labels_per_img", "=", "torch", ".", "ones_like", "(", "J", ")", "\n", "# set labels of track-appear slots to 0.", "\n", "if", "len", "(", "gt_per_img", ")", ">", "0", ":", "\n", "                ", "labels_per_img", "[", "J", "!=", "-", "1", "]", "=", "gt_per_img", ".", "labels", "[", "J", "[", "J", "!=", "-", "1", "]", "]", "\n", "", "labels", ".", "append", "(", "labels_per_img", ")", "\n", "", "target_classes_o", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "target_classes", "[", "idx", "]", "=", "target_classes_o", "\n", "if", "self", ".", "focal_loss", ":", "\n", "            ", "gt_labels_target", "=", "F", ".", "one_hot", "(", "target_classes", ",", "num_classes", "=", "self", ".", "num_classes", "+", "1", ")", "[", ":", ",", ":", ",", ":", "-", "1", "]", "# no loss for the last (background) class", "\n", "gt_labels_target", "=", "gt_labels_target", ".", "to", "(", "src_logits", ")", "\n", "loss_ce", "=", "sigmoid_focal_loss", "(", "src_logits", ".", "flatten", "(", "1", ")", ",", "\n", "gt_labels_target", ".", "flatten", "(", "1", ")", ",", "\n", "alpha", "=", "0.25", ",", "\n", "gamma", "=", "2", ",", "\n", "num_boxes", "=", "num_boxes", ",", "mean_in_dim1", "=", "False", ")", "\n", "loss_ce", "=", "loss_ce", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_ce", "=", "F", ".", "cross_entropy", "(", "src_logits", ".", "transpose", "(", "1", ",", "2", ")", ",", "target_classes", ",", "self", ".", "empty_weight", ")", "\n", "", "losses", "=", "{", "'loss_ce'", ":", "loss_ce", "}", "\n", "\n", "if", "log", ":", "\n", "# TODO this should probably be a separate loss, not hacked in this one here", "\n", "            ", "losses", "[", "'class_error'", "]", "=", "100", "-", "accuracy", "(", "src_logits", "[", "idx", "]", ",", "target_classes_o", ")", "[", "0", "]", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.match_for_single_frame": [[175, 293], ["obj_idxes.detach().cpu().numpy().tolist", "range", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "motr.ClipMatcher.match_for_single_frame.match_for_single_decoder_layer"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "def", "match_for_single_frame", "(", "self", ",", "outputs", ":", "dict", ")", ":", "\n", "        ", "outputs_without_aux", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "outputs", ".", "items", "(", ")", "if", "k", "!=", "'aux_outputs'", "}", "\n", "\n", "gt_instances_i", "=", "self", ".", "gt_instances", "[", "self", ".", "_current_frame_idx", "]", "# gt instances of i-th image.", "\n", "track_instances", ":", "Instances", "=", "outputs_without_aux", "[", "'track_instances'", "]", "\n", "pred_logits_i", "=", "track_instances", ".", "pred_logits", "# predicted logits of i-th image.", "\n", "pred_boxes_i", "=", "track_instances", ".", "pred_boxes", "# predicted boxes of i-th image.", "\n", "\n", "obj_idxes", "=", "gt_instances_i", ".", "obj_ids", "\n", "obj_idxes_list", "=", "obj_idxes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "obj_idx_to_gt_idx", "=", "{", "obj_idx", ":", "gt_idx", "for", "gt_idx", ",", "obj_idx", "in", "enumerate", "(", "obj_idxes_list", ")", "}", "\n", "outputs_i", "=", "{", "\n", "'pred_logits'", ":", "pred_logits_i", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'pred_boxes'", ":", "pred_boxes_i", ".", "unsqueeze", "(", "0", ")", ",", "\n", "}", "\n", "\n", "# step1. inherit and update the previous tracks.", "\n", "num_disappear_track", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "track_instances", ")", ")", ":", "\n", "            ", "obj_id", "=", "track_instances", ".", "obj_idxes", "[", "j", "]", ".", "item", "(", ")", "\n", "# set new target idx.", "\n", "if", "obj_id", ">=", "0", ":", "\n", "                ", "if", "obj_id", "in", "obj_idx_to_gt_idx", ":", "\n", "                    ", "track_instances", ".", "matched_gt_idxes", "[", "j", "]", "=", "obj_idx_to_gt_idx", "[", "obj_id", "]", "\n", "", "else", ":", "\n", "                    ", "num_disappear_track", "+=", "1", "\n", "track_instances", ".", "matched_gt_idxes", "[", "j", "]", "=", "-", "1", "# track-disappear case.", "\n", "", "", "else", ":", "\n", "                ", "track_instances", ".", "matched_gt_idxes", "[", "j", "]", "=", "-", "1", "\n", "\n", "", "", "full_track_idxes", "=", "torch", ".", "arange", "(", "len", "(", "track_instances", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "pred_logits_i", ".", "device", ")", "\n", "matched_track_idxes", "=", "(", "track_instances", ".", "obj_idxes", ">=", "0", ")", "# occu ", "\n", "prev_matched_indices", "=", "torch", ".", "stack", "(", "\n", "[", "full_track_idxes", "[", "matched_track_idxes", "]", ",", "track_instances", ".", "matched_gt_idxes", "[", "matched_track_idxes", "]", "]", ",", "dim", "=", "1", ")", ".", "to", "(", "\n", "pred_logits_i", ".", "device", ")", "\n", "\n", "# step2. select the unmatched slots.", "\n", "# note that the FP tracks whose obj_idxes are -2 will not be selected here.", "\n", "unmatched_track_idxes", "=", "full_track_idxes", "[", "track_instances", ".", "obj_idxes", "==", "-", "1", "]", "\n", "\n", "# step3. select the untracked gt instances (new tracks).", "\n", "tgt_indexes", "=", "track_instances", ".", "matched_gt_idxes", "\n", "tgt_indexes", "=", "tgt_indexes", "[", "tgt_indexes", "!=", "-", "1", "]", "\n", "\n", "tgt_state", "=", "torch", ".", "zeros", "(", "len", "(", "gt_instances_i", ")", ")", ".", "to", "(", "pred_logits_i", ".", "device", ")", "\n", "tgt_state", "[", "tgt_indexes", "]", "=", "1", "\n", "untracked_tgt_indexes", "=", "torch", ".", "arange", "(", "len", "(", "gt_instances_i", ")", ")", ".", "to", "(", "pred_logits_i", ".", "device", ")", "[", "tgt_state", "==", "0", "]", "\n", "# untracked_tgt_indexes = select_unmatched_indexes(tgt_indexes, len(gt_instances_i))", "\n", "untracked_gt_instances", "=", "gt_instances_i", "[", "untracked_tgt_indexes", "]", "\n", "\n", "def", "match_for_single_decoder_layer", "(", "unmatched_outputs", ",", "matcher", ")", ":", "\n", "            ", "new_track_indices", "=", "matcher", "(", "unmatched_outputs", ",", "\n", "[", "untracked_gt_instances", "]", ")", "# list[tuple(src_idx, tgt_idx)]", "\n", "\n", "src_idx", "=", "new_track_indices", "[", "0", "]", "[", "0", "]", "\n", "tgt_idx", "=", "new_track_indices", "[", "0", "]", "[", "1", "]", "\n", "# concat src and tgt.", "\n", "new_matched_indices", "=", "torch", ".", "stack", "(", "[", "unmatched_track_idxes", "[", "src_idx", "]", ",", "untracked_tgt_indexes", "[", "tgt_idx", "]", "]", ",", "\n", "dim", "=", "1", ")", ".", "to", "(", "pred_logits_i", ".", "device", ")", "\n", "return", "new_matched_indices", "\n", "\n", "# step4. do matching between the unmatched slots and GTs.", "\n", "", "unmatched_outputs", "=", "{", "\n", "'pred_logits'", ":", "track_instances", ".", "pred_logits", "[", "unmatched_track_idxes", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'pred_boxes'", ":", "track_instances", ".", "pred_boxes", "[", "unmatched_track_idxes", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "}", "\n", "new_matched_indices", "=", "match_for_single_decoder_layer", "(", "unmatched_outputs", ",", "self", ".", "matcher", ")", "\n", "\n", "# step5. update obj_idxes according to the new matching result.", "\n", "track_instances", ".", "obj_idxes", "[", "new_matched_indices", "[", ":", ",", "0", "]", "]", "=", "gt_instances_i", ".", "obj_ids", "[", "new_matched_indices", "[", ":", ",", "1", "]", "]", ".", "long", "(", ")", "\n", "track_instances", ".", "matched_gt_idxes", "[", "new_matched_indices", "[", ":", ",", "0", "]", "]", "=", "new_matched_indices", "[", ":", ",", "1", "]", "\n", "\n", "# step6. calculate iou.", "\n", "active_idxes", "=", "(", "track_instances", ".", "obj_idxes", ">=", "0", ")", "&", "(", "track_instances", ".", "matched_gt_idxes", ">=", "0", ")", "\n", "active_track_boxes", "=", "track_instances", ".", "pred_boxes", "[", "active_idxes", "]", "\n", "if", "len", "(", "active_track_boxes", ")", ">", "0", ":", "\n", "            ", "gt_boxes", "=", "gt_instances_i", ".", "boxes", "[", "track_instances", ".", "matched_gt_idxes", "[", "active_idxes", "]", "]", "\n", "active_track_boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "active_track_boxes", ")", "\n", "gt_boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "gt_boxes", ")", "\n", "track_instances", ".", "iou", "[", "active_idxes", "]", "=", "matched_boxlist_iou", "(", "Boxes", "(", "active_track_boxes", ")", ",", "Boxes", "(", "gt_boxes", ")", ")", "\n", "\n", "# step7. merge the unmatched pairs and the matched pairs.", "\n", "", "matched_indices", "=", "torch", ".", "cat", "(", "[", "new_matched_indices", ",", "prev_matched_indices", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# step8. calculate losses.", "\n", "self", ".", "num_samples", "+=", "len", "(", "gt_instances_i", ")", "+", "num_disappear_track", "\n", "self", ".", "sample_device", "=", "pred_logits_i", ".", "device", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "new_track_loss", "=", "self", ".", "get_loss", "(", "loss", ",", "\n", "outputs", "=", "outputs_i", ",", "\n", "gt_instances", "=", "[", "gt_instances_i", "]", ",", "\n", "indices", "=", "[", "(", "matched_indices", "[", ":", ",", "0", "]", ",", "matched_indices", "[", ":", ",", "1", "]", ")", "]", ",", "\n", "num_boxes", "=", "1", ")", "\n", "self", ".", "losses_dict", ".", "update", "(", "\n", "{", "'frame_{}_{}'", ".", "format", "(", "self", ".", "_current_frame_idx", ",", "key", ")", ":", "value", "for", "key", ",", "value", "in", "new_track_loss", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "if", "'aux_outputs'", "in", "outputs", ":", "\n", "            ", "for", "i", ",", "aux_outputs", "in", "enumerate", "(", "outputs", "[", "'aux_outputs'", "]", ")", ":", "\n", "                ", "unmatched_outputs_layer", "=", "{", "\n", "'pred_logits'", ":", "aux_outputs", "[", "'pred_logits'", "]", "[", "0", ",", "unmatched_track_idxes", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'pred_boxes'", ":", "aux_outputs", "[", "'pred_boxes'", "]", "[", "0", ",", "unmatched_track_idxes", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "}", "\n", "new_matched_indices_layer", "=", "match_for_single_decoder_layer", "(", "unmatched_outputs_layer", ",", "self", ".", "matcher", ")", "\n", "matched_indices_layer", "=", "torch", ".", "cat", "(", "[", "new_matched_indices_layer", ",", "prev_matched_indices", "]", ",", "dim", "=", "0", ")", "\n", "for", "loss", "in", "self", ".", "losses", ":", "\n", "                    ", "if", "loss", "==", "'masks'", ":", "\n", "# Intermediate masks losses are too costly to compute, we ignore them.", "\n", "                        ", "continue", "\n", "", "l_dict", "=", "self", ".", "get_loss", "(", "loss", ",", "\n", "aux_outputs", ",", "\n", "gt_instances", "=", "[", "gt_instances_i", "]", ",", "\n", "indices", "=", "[", "(", "matched_indices_layer", "[", ":", ",", "0", "]", ",", "matched_indices_layer", "[", ":", ",", "1", "]", ")", "]", ",", "\n", "num_boxes", "=", "1", ",", ")", "\n", "self", ".", "losses_dict", ".", "update", "(", "\n", "{", "'frame_{}_aux{}_{}'", ".", "format", "(", "self", ".", "_current_frame_idx", ",", "i", ",", "key", ")", ":", "value", "for", "key", ",", "value", "in", "\n", "l_dict", ".", "items", "(", ")", "}", ")", "\n", "", "", "", "self", ".", "_step", "(", ")", "\n", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.forward": [[294, 301], ["outputs.pop", "motr.ClipMatcher.get_num_boxes", "outputs.pop.items"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.get_num_boxes"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "input_data", ":", "dict", ")", ":", "\n", "# losses of each frame are calculated during the model's forwarding and are outputted by the model as outputs['losses_dict].", "\n", "        ", "losses", "=", "outputs", ".", "pop", "(", "\"losses_dict\"", ")", "\n", "num_samples", "=", "self", ".", "get_num_boxes", "(", "self", ".", "num_samples", ")", "\n", "for", "loss_name", ",", "loss", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "losses", "[", "loss_name", "]", "/=", "num_samples", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.__init__": [[304, 309], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "score_thresh", "=", "0.7", ",", "filter_score_thresh", "=", "0.6", ",", "miss_tolerance", "=", "5", ")", ":", "\n", "        ", "self", ".", "score_thresh", "=", "score_thresh", "\n", "self", ".", "filter_score_thresh", "=", "filter_score_thresh", "\n", "self", ".", "miss_tolerance", "=", "miss_tolerance", "\n", "self", ".", "max_obj_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.clear": [[310, 312], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_obj_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update": [[313, 326], ["range", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "track_instances", ":", "Instances", ")", ":", "\n", "        ", "track_instances", ".", "disappear_time", "[", "track_instances", ".", "scores", ">=", "self", ".", "score_thresh", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "track_instances", ")", ")", ":", "\n", "            ", "if", "track_instances", ".", "obj_idxes", "[", "i", "]", "==", "-", "1", "and", "track_instances", ".", "scores", "[", "i", "]", ">=", "self", ".", "score_thresh", ":", "\n", "# print(\"track {} has score {}, assign obj_id {}\".format(i, track_instances.scores[i], self.max_obj_id))", "\n", "                ", "track_instances", ".", "obj_idxes", "[", "i", "]", "=", "self", ".", "max_obj_id", "\n", "self", ".", "max_obj_id", "+=", "1", "\n", "", "elif", "track_instances", ".", "obj_idxes", "[", "i", "]", ">=", "0", "and", "track_instances", ".", "scores", "[", "i", "]", "<", "self", ".", "filter_score_thresh", ":", "\n", "                ", "track_instances", ".", "disappear_time", "[", "i", "]", "+=", "1", "\n", "if", "track_instances", ".", "disappear_time", "[", "i", "]", ">=", "self", ".", "miss_tolerance", ":", "\n", "# Set the obj_id to -1.", "\n", "# Then this track will be removed by TrackEmbeddingLayer.", "\n", "                    ", "track_instances", ".", "obj_idxes", "[", "i", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.TrackerPostProcess.__init__": [[330, 332], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.TrackerPostProcess.forward": [[333, 362], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "out_logits.sigmoid", "out_logits.sigmoid.max", "util.box_ops.box_cxcywh_to_xyxy", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "track_instances.remove", "track_instances.remove", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "track_instances", ":", "Instances", ",", "target_size", ")", "->", "Instances", ":", "\n", "        ", "\"\"\" Perform the computation\n        Parameters:\n            outputs: raw outputs of the model\n            target_sizes: tensor of dimension [batch_size x 2] containing the size of each images of the batch\n                          For evaluation, this must be the original image size (before any data augmentation)\n                          For visualization, this should be the image size after data augment, but before padding\n        \"\"\"", "\n", "out_logits", "=", "track_instances", ".", "pred_logits", "\n", "out_bbox", "=", "track_instances", ".", "pred_boxes", "\n", "\n", "prob", "=", "out_logits", ".", "sigmoid", "(", ")", "\n", "# prob = out_logits[...,:1].sigmoid()", "\n", "scores", ",", "labels", "=", "prob", ".", "max", "(", "-", "1", ")", "\n", "\n", "# convert to [x0, y0, x1, y1] format", "\n", "boxes", "=", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "out_bbox", ")", "\n", "# and from relative [0, 1] to absolute [0, height] coordinates", "\n", "img_h", ",", "img_w", "=", "target_size", "\n", "scale_fct", "=", "torch", ".", "Tensor", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ")", ".", "to", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "*", "scale_fct", "[", "None", ",", ":", "]", "\n", "\n", "track_instances", ".", "boxes", "=", "boxes", "\n", "track_instances", ".", "scores", "=", "scores", "\n", "track_instances", ".", "labels", "=", "labels", "\n", "track_instances", ".", "remove", "(", "'pred_logits'", ")", "\n", "track_instances", ".", "remove", "(", "'pred_boxes'", ")", "\n", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.__init__": [[369, 453], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "deformable_detr.MLP", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "motr.TrackerPostProcess", "motr.RuntimeTrackerBase", "torch.nn.Embedding", "torch.nn.Embedding", "len", "range", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "math.log", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "motr._get_clones", "motr._get_clones", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "input_proj_list.append", "input_proj_list.append", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "range", "range"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "transformer", ",", "num_classes", ",", "num_queries", ",", "num_feature_levels", ",", "criterion", ",", "track_embed", ",", "\n", "aux_loss", "=", "True", ",", "with_box_refine", "=", "False", ",", "two_stage", "=", "False", ",", "memory_bank", "=", "None", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initializes the model.\n        Parameters:\n            backbone: torch module of the backbone to be used. See backbone.py\n            transformer: torch module of the transformer architecture. See transformer.py\n            num_classes: number of object classes\n            num_queries: number of object queries, ie detection slot. This is the maximal number of objects\n                         DETR can detect in a single image. For COCO, we recommend 100 queries.\n            aux_loss: True if auxiliary decoding losses (loss at each decoder layer) are to be used.\n            with_box_refine: iterative bounding box refinement\n            two_stage: two-stage Deformable DETR\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_queries", "=", "num_queries", "\n", "self", ".", "track_embed", "=", "track_embed", "\n", "self", ".", "transformer", "=", "transformer", "\n", "hidden_dim", "=", "transformer", ".", "d_model", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_embed", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", ")", "\n", "self", ".", "bbox_embed", "=", "MLP", "(", "hidden_dim", ",", "hidden_dim", ",", "4", ",", "3", ")", "\n", "self", ".", "num_feature_levels", "=", "num_feature_levels", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "if", "not", "two_stage", ":", "\n", "            ", "self", ".", "query_embed", "=", "nn", ".", "Embedding", "(", "num_queries", ",", "hidden_dim", "*", "2", ")", "\n", "", "if", "num_feature_levels", ">", "1", ":", "\n", "            ", "num_backbone_outs", "=", "len", "(", "backbone", ".", "strides", ")", "\n", "input_proj_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_backbone_outs", ")", ":", "\n", "                ", "in_channels", "=", "backbone", ".", "num_channels", "[", "_", "]", "\n", "input_proj_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", ")", "\n", "", "for", "_", "in", "range", "(", "num_feature_levels", "-", "num_backbone_outs", ")", ":", "\n", "                ", "input_proj_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "hidden_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", ")", "\n", "in_channels", "=", "hidden_dim", "\n", "", "self", ".", "input_proj", "=", "nn", ".", "ModuleList", "(", "input_proj_list", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_proj", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "backbone", ".", "num_channels", "[", "0", "]", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "hidden_dim", ")", ",", "\n", ")", "]", ")", "\n", "", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "aux_loss", "=", "aux_loss", "\n", "self", ".", "with_box_refine", "=", "with_box_refine", "\n", "self", ".", "two_stage", "=", "two_stage", "\n", "\n", "prior_prob", "=", "0.01", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "self", ".", "class_embed", ".", "bias", ".", "data", "=", "torch", ".", "ones", "(", "num_classes", ")", "*", "bias_value", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "weight", ".", "data", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", ",", "0", ")", "\n", "for", "proj", "in", "self", ".", "input_proj", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "proj", "[", "0", "]", ".", "weight", ",", "gain", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "proj", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n", "# if two-stage, the last class_embed and bbox_embed is for region proposal generation", "\n", "", "num_pred", "=", "(", "transformer", ".", "decoder", ".", "num_layers", "+", "1", ")", "if", "two_stage", "else", "transformer", ".", "decoder", ".", "num_layers", "\n", "if", "with_box_refine", ":", "\n", "            ", "self", ".", "class_embed", "=", "_get_clones", "(", "self", ".", "class_embed", ",", "num_pred", ")", "\n", "self", ".", "bbox_embed", "=", "_get_clones", "(", "self", ".", "bbox_embed", ",", "num_pred", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", "[", "0", "]", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "-", "2.0", ")", "\n", "# hack implementation for iterative bounding box refinement", "\n", "self", ".", "transformer", ".", "decoder", ".", "bbox_embed", "=", "self", ".", "bbox_embed", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "-", "2.0", ")", "\n", "self", ".", "class_embed", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "class_embed", "for", "_", "in", "range", "(", "num_pred", ")", "]", ")", "\n", "self", ".", "bbox_embed", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "bbox_embed", "for", "_", "in", "range", "(", "num_pred", ")", "]", ")", "\n", "self", ".", "transformer", ".", "decoder", ".", "bbox_embed", "=", "None", "\n", "", "if", "two_stage", ":", "\n", "# hack implementation for two-stage", "\n", "            ", "self", ".", "transformer", ".", "decoder", ".", "class_embed", "=", "self", ".", "class_embed", "\n", "for", "box_embed", "in", "self", ".", "bbox_embed", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "box_embed", ".", "layers", "[", "-", "1", "]", ".", "bias", ".", "data", "[", "2", ":", "]", ",", "0.0", ")", "\n", "", "", "self", ".", "post_process", "=", "TrackerPostProcess", "(", ")", "\n", "self", ".", "track_base", "=", "RuntimeTrackerBase", "(", ")", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "memory_bank", "=", "memory_bank", "\n", "self", ".", "mem_bank_len", "=", "0", "if", "memory_bank", "is", "None", "else", "memory_bank", ".", "max_his_length", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._generate_empty_tracks": [[454, 476], ["models.structures.Instances", "motr.MOTR.transformer.reference_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.structures.Instances.to", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "def", "_generate_empty_tracks", "(", "self", ")", ":", "\n", "        ", "track_instances", "=", "Instances", "(", "(", "1", ",", "1", ")", ")", "\n", "num_queries", ",", "dim", "=", "self", ".", "query_embed", ".", "weight", ".", "shape", "# (300, 512)", "\n", "device", "=", "self", ".", "query_embed", ".", "weight", ".", "device", "\n", "track_instances", ".", "ref_pts", "=", "self", ".", "transformer", ".", "reference_points", "(", "self", ".", "query_embed", ".", "weight", "[", ":", ",", ":", "dim", "//", "2", "]", ")", "\n", "track_instances", ".", "query_pos", "=", "self", ".", "query_embed", ".", "weight", "\n", "track_instances", ".", "output_embedding", "=", "torch", ".", "zeros", "(", "(", "num_queries", ",", "dim", ">>", "1", ")", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "obj_idxes", "=", "torch", ".", "full", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "matched_gt_idxes", "=", "torch", ".", "full", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "disappear_time", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "iou", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "scores", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "track_scores", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "pred_boxes", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "pred_logits", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n", "mem_bank_len", "=", "self", ".", "mem_bank_len", "\n", "track_instances", ".", "mem_bank", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", "mem_bank_len", ",", "dim", "//", "2", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "mem_padding_mask", "=", "torch", ".", "ones", "(", "(", "len", "(", "track_instances", ")", ",", "mem_bank_len", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "track_instances", ".", "save_period", "=", "torch", ".", "zeros", "(", "(", "len", "(", "track_instances", ")", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "return", "track_instances", ".", "to", "(", "self", ".", "query_embed", ".", "weight", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.clear": [[477, 479], ["motr.MOTR.track_base.clear"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "track_base", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._set_aux_loss": [[480, 487], ["zip"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_set_aux_loss", "(", "self", ",", "outputs_class", ",", "outputs_coord", ")", ":", "\n", "# this is a workaround to make torchscript happy, as torchscript", "\n", "# doesn't support dictionary with non-homogeneous values, such", "\n", "# as a dict having both a Tensor and a list.", "\n", "        ", "return", "[", "{", "'pred_logits'", ":", "a", ",", "'pred_boxes'", ":", "b", ",", "}", "\n", "for", "a", ",", "b", "in", "zip", "(", "outputs_class", "[", ":", "-", "1", "]", ",", "outputs_coord", "[", ":", "-", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._forward_single_image": [[488, 544], ["motr.MOTR.backbone", "features[].decompose", "enumerate", "motr.MOTR.transformer", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat.decompose", "srcs.append", "masks.append", "len", "len", "range", "util.misc.inverse_sigmoid", "tmp.sigmoid", "outputs_classes.append", "outputs_coords.append", "motr.MOTR._set_aux_loss", "srcs.append", "masks.append", "pos.append", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate", "torch.interpolate", "util.misc.NestedTensor", "m[].float"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.NestedTensor.decompose", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._set_aux_loss", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["", "def", "_forward_single_image", "(", "self", ",", "samples", ",", "track_instances", ":", "Instances", ")", ":", "\n", "        ", "features", ",", "pos", "=", "self", ".", "backbone", "(", "samples", ")", "\n", "src", ",", "mask", "=", "features", "[", "-", "1", "]", ".", "decompose", "(", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "\n", "srcs", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "for", "l", ",", "feat", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "src", ",", "mask", "=", "feat", ".", "decompose", "(", ")", "\n", "srcs", ".", "append", "(", "self", ".", "input_proj", "[", "l", "]", "(", "src", ")", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "assert", "mask", "is", "not", "None", "\n", "\n", "", "if", "self", ".", "num_feature_levels", ">", "len", "(", "srcs", ")", ":", "\n", "            ", "_len_srcs", "=", "len", "(", "srcs", ")", "\n", "for", "l", "in", "range", "(", "_len_srcs", ",", "self", ".", "num_feature_levels", ")", ":", "\n", "                ", "if", "l", "==", "_len_srcs", ":", "\n", "                    ", "src", "=", "self", ".", "input_proj", "[", "l", "]", "(", "features", "[", "-", "1", "]", ".", "tensors", ")", "\n", "", "else", ":", "\n", "                    ", "src", "=", "self", ".", "input_proj", "[", "l", "]", "(", "srcs", "[", "-", "1", "]", ")", "\n", "", "m", "=", "samples", ".", "mask", "\n", "mask", "=", "F", ".", "interpolate", "(", "m", "[", "None", "]", ".", "float", "(", ")", ",", "size", "=", "src", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "pos_l", "=", "self", ".", "backbone", "[", "1", "]", "(", "NestedTensor", "(", "src", ",", "mask", ")", ")", ".", "to", "(", "src", ".", "dtype", ")", "\n", "srcs", ".", "append", "(", "src", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "pos", ".", "append", "(", "pos_l", ")", "\n", "\n", "", "", "hs", ",", "init_reference", ",", "inter_references", ",", "enc_outputs_class", ",", "enc_outputs_coord_unact", "=", "self", ".", "transformer", "(", "srcs", ",", "masks", ",", "pos", ",", "track_instances", ".", "query_pos", ",", "ref_pts", "=", "track_instances", ".", "ref_pts", ")", "\n", "\n", "outputs_classes", "=", "[", "]", "\n", "outputs_coords", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "hs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "lvl", "==", "0", ":", "\n", "                ", "reference", "=", "init_reference", "\n", "", "else", ":", "\n", "                ", "reference", "=", "inter_references", "[", "lvl", "-", "1", "]", "\n", "", "reference", "=", "inverse_sigmoid", "(", "reference", ")", "\n", "outputs_class", "=", "self", ".", "class_embed", "[", "lvl", "]", "(", "hs", "[", "lvl", "]", ")", "\n", "tmp", "=", "self", ".", "bbox_embed", "[", "lvl", "]", "(", "hs", "[", "lvl", "]", ")", "\n", "if", "reference", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "                ", "tmp", "+=", "reference", "\n", "", "else", ":", "\n", "                ", "assert", "reference", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "tmp", "[", "...", ",", ":", "2", "]", "+=", "reference", "\n", "", "outputs_coord", "=", "tmp", ".", "sigmoid", "(", ")", "\n", "outputs_classes", ".", "append", "(", "outputs_class", ")", "\n", "outputs_coords", ".", "append", "(", "outputs_coord", ")", "\n", "", "outputs_class", "=", "torch", ".", "stack", "(", "outputs_classes", ")", "\n", "outputs_coord", "=", "torch", ".", "stack", "(", "outputs_coords", ")", "\n", "\n", "ref_pts_all", "=", "torch", ".", "cat", "(", "[", "init_reference", "[", "None", "]", ",", "inter_references", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", "]", ",", "dim", "=", "0", ")", "\n", "out", "=", "{", "'pred_logits'", ":", "outputs_class", "[", "-", "1", "]", ",", "'pred_boxes'", ":", "outputs_coord", "[", "-", "1", "]", ",", "'ref_pts'", ":", "ref_pts_all", "[", "5", "]", "}", "\n", "if", "self", ".", "aux_loss", ":", "\n", "            ", "out", "[", "'aux_outputs'", "]", "=", "self", ".", "_set_aux_loss", "(", "outputs_class", ",", "outputs_coord", ")", "\n", "", "out", "[", "'hs'", "]", "=", "hs", "[", "-", "1", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._post_process_single_image": [[545, 578], ["motr.MOTR._generate_empty_tracks", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "motr.MOTR.criterion.match_for_single_frame", "motr.MOTR.track_base.update", "motr.MOTR.memory_bank", "motr.MOTR.track_embed", "[].sigmoid", "motr.MOTR.criterion.calc_loss_for_track_scores", "[].sigmoid().max", "[].sigmoid"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._generate_empty_tracks", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.match_for_single_frame", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.calc_loss_for_track_scores", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "_post_process_single_image", "(", "self", ",", "frame_res", ",", "track_instances", ",", "is_last", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "track_scores", "=", "frame_res", "[", "'pred_logits'", "]", "[", "0", ",", ":", "]", ".", "sigmoid", "(", ")", ".", "max", "(", "dim", "=", "-", "1", ")", ".", "values", "\n", "", "else", ":", "\n", "                ", "track_scores", "=", "frame_res", "[", "'pred_logits'", "]", "[", "0", ",", ":", ",", "0", "]", ".", "sigmoid", "(", ")", "\n", "\n", "", "", "track_instances", ".", "scores", "=", "track_scores", "\n", "track_instances", ".", "pred_logits", "=", "frame_res", "[", "'pred_logits'", "]", "[", "0", "]", "\n", "track_instances", ".", "pred_boxes", "=", "frame_res", "[", "'pred_boxes'", "]", "[", "0", "]", "\n", "track_instances", ".", "output_embedding", "=", "frame_res", "[", "'hs'", "]", "[", "0", "]", "\n", "if", "self", ".", "training", ":", "\n", "# the track id will be assigned by the mather.", "\n", "            ", "frame_res", "[", "'track_instances'", "]", "=", "track_instances", "\n", "track_instances", "=", "self", ".", "criterion", ".", "match_for_single_frame", "(", "frame_res", ")", "\n", "", "else", ":", "\n", "# each track will be assigned an unique global id by the track base.", "\n", "            ", "self", ".", "track_base", ".", "update", "(", "track_instances", ")", "\n", "", "if", "self", ".", "memory_bank", "is", "not", "None", ":", "\n", "            ", "track_instances", "=", "self", ".", "memory_bank", "(", "track_instances", ")", "\n", "# track_instances.track_scores = track_instances.track_scores[..., 0]", "\n", "# track_instances.scores = track_instances.track_scores.sigmoid()", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "criterion", ".", "calc_loss_for_track_scores", "(", "track_instances", ")", "\n", "", "", "tmp", "=", "{", "}", "\n", "tmp", "[", "'init_track_instances'", "]", "=", "self", ".", "_generate_empty_tracks", "(", ")", "\n", "tmp", "[", "'track_instances'", "]", "=", "track_instances", "\n", "if", "not", "is_last", ":", "\n", "            ", "out_track_instances", "=", "self", ".", "track_embed", "(", "tmp", ")", "\n", "frame_res", "[", "'track_instances'", "]", "=", "out_track_instances", "\n", "", "else", ":", "\n", "            ", "frame_res", "[", "'track_instances'", "]", "=", "None", "\n", "", "return", "frame_res", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.inference_single_image": [[579, 599], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "motr.MOTR._forward_single_image", "motr.MOTR._post_process_single_image", "motr.MOTR.post_process", "isinstance", "util.misc.nested_tensor_from_tensor_list", "motr.MOTR._generate_empty_tracks", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._forward_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._post_process_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._generate_empty_tracks", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "inference_single_image", "(", "self", ",", "img", ",", "ori_img_size", ",", "track_instances", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "img", ",", "NestedTensor", ")", ":", "\n", "            ", "img", "=", "nested_tensor_from_tensor_list", "(", "img", ")", "\n", "", "if", "track_instances", "is", "None", ":", "\n", "            ", "track_instances", "=", "self", ".", "_generate_empty_tracks", "(", ")", "\n", "", "res", "=", "self", ".", "_forward_single_image", "(", "img", ",", "\n", "track_instances", "=", "track_instances", ")", "\n", "res", "=", "self", ".", "_post_process_single_image", "(", "res", ",", "track_instances", ",", "False", ")", "\n", "\n", "track_instances", "=", "res", "[", "'track_instances'", "]", "\n", "track_instances", "=", "self", ".", "post_process", "(", "track_instances", ",", "ori_img_size", ")", "\n", "ret", "=", "{", "'track_instances'", ":", "track_instances", "}", "\n", "if", "'ref_pts'", "in", "res", ":", "\n", "            ", "ref_pts", "=", "res", "[", "'ref_pts'", "]", "\n", "img_h", ",", "img_w", "=", "ori_img_size", "\n", "scale_fct", "=", "torch", ".", "Tensor", "(", "[", "img_w", ",", "img_h", "]", ")", ".", "to", "(", "ref_pts", ")", "\n", "ref_pts", "=", "ref_pts", "*", "scale_fct", "[", "None", "]", "\n", "ret", "[", "'ref_pts'", "]", "=", "ref_pts", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR.forward": [[600, 655], ["motr.MOTR._generate_empty_tracks", "list", "enumerate", "motr.MOTR.criterion.initialize_for_single_clip", "motr.MOTR._fields.keys", "motr.MOTR._post_process_single_image", "outputs[].append", "outputs[].append", "tuple", "util.checkpoint.CheckpointFunction.apply", "util.misc.nested_tensor_from_tensor_list", "motr.MOTR._forward_single_image", "len", "util.misc.nested_tensor_from_tensor_list", "models.structures.Instances", "motr.MOTR._forward_single_image", "len", "len", "motr.MOTR.get", "dict", "motr.MOTR.parameters", "range", "zip"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._generate_empty_tracks", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.ClipMatcher.initialize_for_single_clip", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._post_process_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._forward_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.nested_tensor_from_tensor_list", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.MOTR._forward_single_image", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get"], ["", "def", "forward", "(", "self", ",", "data", ":", "dict", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "criterion", ".", "initialize_for_single_clip", "(", "data", "[", "'gt_instances'", "]", ")", "\n", "", "frames", "=", "data", "[", "'imgs'", "]", "# list of Tensor.", "\n", "outputs", "=", "{", "\n", "'pred_logits'", ":", "[", "]", ",", "\n", "'pred_boxes'", ":", "[", "]", ",", "\n", "}", "\n", "\n", "track_instances", "=", "self", ".", "_generate_empty_tracks", "(", ")", "\n", "keys", "=", "list", "(", "track_instances", ".", "_fields", ".", "keys", "(", ")", ")", "\n", "for", "frame_index", ",", "frame", "in", "enumerate", "(", "frames", ")", ":", "\n", "            ", "frame", ".", "requires_grad", "=", "False", "\n", "is_last", "=", "frame_index", "==", "len", "(", "frames", ")", "-", "1", "\n", "if", "self", ".", "use_checkpoint", "and", "frame_index", "<", "len", "(", "frames", ")", "-", "2", ":", "\n", "                ", "def", "fn", "(", "frame", ",", "*", "args", ")", ":", "\n", "                    ", "frame", "=", "nested_tensor_from_tensor_list", "(", "[", "frame", "]", ")", "\n", "tmp", "=", "Instances", "(", "(", "1", ",", "1", ")", ",", "**", "dict", "(", "zip", "(", "keys", ",", "args", ")", ")", ")", "\n", "frame_res", "=", "self", ".", "_forward_single_image", "(", "frame", ",", "tmp", ")", "\n", "return", "(", "\n", "frame_res", "[", "'pred_logits'", "]", ",", "\n", "frame_res", "[", "'pred_boxes'", "]", ",", "\n", "frame_res", "[", "'ref_pts'", "]", ",", "\n", "frame_res", "[", "'hs'", "]", ",", "\n", "*", "[", "aux", "[", "'pred_logits'", "]", "for", "aux", "in", "frame_res", "[", "'aux_outputs'", "]", "]", ",", "\n", "*", "[", "aux", "[", "'pred_boxes'", "]", "for", "aux", "in", "frame_res", "[", "'aux_outputs'", "]", "]", "\n", ")", "\n", "\n", "", "args", "=", "[", "frame", "]", "+", "[", "track_instances", ".", "get", "(", "k", ")", "for", "k", "in", "keys", "]", "\n", "params", "=", "tuple", "(", "(", "p", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "tmp", "=", "checkpoint", ".", "CheckpointFunction", ".", "apply", "(", "fn", ",", "len", "(", "args", ")", ",", "*", "args", ",", "*", "params", ")", "\n", "frame_res", "=", "{", "\n", "'pred_logits'", ":", "tmp", "[", "0", "]", ",", "\n", "'pred_boxes'", ":", "tmp", "[", "1", "]", ",", "\n", "'ref_pts'", ":", "tmp", "[", "2", "]", ",", "\n", "'hs'", ":", "tmp", "[", "3", "]", ",", "\n", "'aux_outputs'", ":", "[", "{", "\n", "'pred_logits'", ":", "tmp", "[", "4", "+", "i", "]", ",", "\n", "'pred_boxes'", ":", "tmp", "[", "4", "+", "5", "+", "i", "]", ",", "\n", "}", "for", "i", "in", "range", "(", "5", ")", "]", ",", "\n", "}", "\n", "", "else", ":", "\n", "                ", "frame", "=", "nested_tensor_from_tensor_list", "(", "[", "frame", "]", ")", "\n", "frame_res", "=", "self", ".", "_forward_single_image", "(", "frame", ",", "track_instances", ")", "\n", "", "frame_res", "=", "self", ".", "_post_process_single_image", "(", "frame_res", ",", "track_instances", ",", "is_last", ")", "\n", "\n", "track_instances", "=", "frame_res", "[", "'track_instances'", "]", "\n", "outputs", "[", "'pred_logits'", "]", ".", "append", "(", "frame_res", "[", "'pred_logits'", "]", ")", "\n", "outputs", "[", "'pred_boxes'", "]", ".", "append", "(", "frame_res", "[", "'pred_boxes'", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "outputs", "[", "'track_instances'", "]", "=", "track_instances", "\n", "", "else", ":", "\n", "            ", "outputs", "[", "'losses_dict'", "]", "=", "self", ".", "criterion", ".", "losses_dict", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr._get_clones": [[364, 366], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.build": [[657, 719], ["torch.device", "torch.device", "backbone.build_backbone", "deformable_transformer_plus.build_deforamble_transformer", "qim.build", "matcher.build_matcher", "max", "range", "motr.ClipMatcher", "ClipMatcher.to", "motr.MOTR", "weight_dict.update", "range", "memory_bank.build_memory_bank", "range", "range", "len", "weight_dict.update", "weight_dict.update"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.build_backbone", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.deformable_transformer.build_deforamble_transformer", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.matcher.build_matcher", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.memory_bank.build_memory_bank", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.motr.RuntimeTrackerBase.update"], ["", "", "def", "build", "(", "args", ")", ":", "\n", "    ", "dataset_to_num_classes", "=", "{", "\n", "'coco'", ":", "91", ",", "\n", "'coco_panoptic'", ":", "250", ",", "\n", "'e2e_mot'", ":", "1", ",", "\n", "'e2e_dance'", ":", "1", ",", "\n", "'e2e_joint'", ":", "1", ",", "\n", "'e2e_static_mot'", ":", "1", ",", "\n", "}", "\n", "assert", "args", ".", "dataset_file", "in", "dataset_to_num_classes", "\n", "num_classes", "=", "dataset_to_num_classes", "[", "args", ".", "dataset_file", "]", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "backbone", "=", "build_backbone", "(", "args", ")", "\n", "\n", "transformer", "=", "build_deforamble_transformer", "(", "args", ")", "\n", "d_model", "=", "transformer", ".", "d_model", "\n", "hidden_dim", "=", "args", ".", "dim_feedforward", "\n", "query_interaction_layer", "=", "build_query_interaction_layer", "(", "args", ",", "args", ".", "query_interaction_layer", ",", "d_model", ",", "hidden_dim", ",", "d_model", "*", "2", ")", "\n", "\n", "img_matcher", "=", "build_matcher", "(", "args", ")", "\n", "num_frames_per_batch", "=", "max", "(", "args", ".", "sampler_lengths", ")", "\n", "weight_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_frames_per_batch", ")", ":", "\n", "        ", "weight_dict", ".", "update", "(", "{", "\"frame_{}_loss_ce\"", ".", "format", "(", "i", ")", ":", "args", ".", "cls_loss_coef", ",", "\n", "'frame_{}_loss_bbox'", ".", "format", "(", "i", ")", ":", "args", ".", "bbox_loss_coef", ",", "\n", "'frame_{}_loss_giou'", ".", "format", "(", "i", ")", ":", "args", ".", "giou_loss_coef", ",", "\n", "}", ")", "\n", "\n", "# TODO this is a hack", "\n", "", "if", "args", ".", "aux_loss", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_frames_per_batch", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "args", ".", "dec_layers", "-", "1", ")", ":", "\n", "                ", "weight_dict", ".", "update", "(", "{", "\"frame_{}_aux{}_loss_ce\"", ".", "format", "(", "i", ",", "j", ")", ":", "args", ".", "cls_loss_coef", ",", "\n", "'frame_{}_aux{}_loss_bbox'", ".", "format", "(", "i", ",", "j", ")", ":", "args", ".", "bbox_loss_coef", ",", "\n", "'frame_{}_aux{}_loss_giou'", ".", "format", "(", "i", ",", "j", ")", ":", "args", ".", "giou_loss_coef", ",", "\n", "}", ")", "\n", "", "", "", "if", "args", ".", "memory_bank_type", "is", "not", "None", "and", "len", "(", "args", ".", "memory_bank_type", ")", ">", "0", ":", "\n", "        ", "memory_bank", "=", "build_memory_bank", "(", "args", ",", "d_model", ",", "hidden_dim", ",", "d_model", "*", "2", ")", "\n", "for", "i", "in", "range", "(", "num_frames_per_batch", ")", ":", "\n", "            ", "weight_dict", ".", "update", "(", "{", "\"frame_{}_track_loss_ce\"", ".", "format", "(", "i", ")", ":", "args", ".", "cls_loss_coef", "}", ")", "\n", "", "", "else", ":", "\n", "        ", "memory_bank", "=", "None", "\n", "", "losses", "=", "[", "'labels'", ",", "'boxes'", "]", "\n", "criterion", "=", "ClipMatcher", "(", "num_classes", ",", "matcher", "=", "img_matcher", ",", "weight_dict", "=", "weight_dict", ",", "losses", "=", "losses", ")", "\n", "criterion", ".", "to", "(", "device", ")", "\n", "postprocessors", "=", "{", "}", "\n", "model", "=", "MOTR", "(", "\n", "backbone", ",", "\n", "transformer", ",", "\n", "track_embed", "=", "query_interaction_layer", ",", "\n", "num_feature_levels", "=", "args", ".", "num_feature_levels", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_queries", "=", "args", ".", "num_queries", ",", "\n", "aux_loss", "=", "args", ".", "aux_loss", ",", "\n", "criterion", "=", "criterion", ",", "\n", "with_box_refine", "=", "args", ".", "with_box_refine", ",", "\n", "two_stage", "=", "args", ".", "two_stage", ",", "\n", "memory_bank", "=", "memory_bank", ",", "\n", "use_checkpoint", "=", "args", ".", "use_checkpoint", ",", "\n", ")", "\n", "return", "model", ",", "criterion", ",", "postprocessors", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionBase.__init__": [[24, 29], ["torch.nn.Module.__init__", "qim.QueryInteractionBase._build_layers", "qim.QueryInteractionBase._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._build_layers", "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "_build_layers", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionBase._build_layers": [[30, 32], ["NotImplementedError"], "methods", ["None"], ["", "def", "_build_layers", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionBase._reset_parameters": [[33, 37], ["qim.QueryInteractionBase.parameters", "p.dim", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionBase._select_active_tracks": [[38, 40], ["NotImplementedError"], "methods", ["None"], ["", "", "", "def", "_select_active_tracks", "(", "self", ",", "data", ":", "dict", ")", "->", "Instances", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionBase._update_track_embedding": [[41, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "_update_track_embedding", "(", "self", ",", "track_instances", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.FFN.__init__": [[46, 54], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_ffn", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ffn", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "d_ffn", ",", "d_model", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.FFN.forward": [[55, 60], ["qim.FFN.linear2", "qim.FFN.norm", "qim.FFN.dropout1", "qim.FFN.dropout2", "qim.FFN.activation", "qim.FFN.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout1", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule.__init__": [[63, 68], ["qim.QueryInteractionBase.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", "\n", "self", ".", "random_drop", "=", "args", ".", "random_drop", "\n", "self", ".", "fp_ratio", "=", "args", ".", "fp_ratio", "\n", "self", ".", "update_query_pos", "=", "args", ".", "update_query_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._build_layers": [[69, 102], ["torch.nn.MultiheadAttention", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_build_layers", "(", "self", ",", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "        ", "dropout", "=", "args", ".", "merger_dropout", "\n", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "dim_in", ",", "8", ",", "dropout", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_in", ")", "\n", "\n", "if", "args", ".", "update_query_pos", ":", "\n", "            ", "self", ".", "linear_pos1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "self", ".", "linear_pos2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_in", ")", "\n", "self", ".", "dropout_pos1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_pos2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm_pos", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "\n", "", "self", ".", "linear_feat1", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "self", ".", "linear_feat2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_in", ")", "\n", "self", ".", "dropout_feat1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout_feat2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "norm_feat", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "if", "args", ".", "update_query_pos", ":", "\n", "            ", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "dim_in", ")", "\n", "\n", "", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "if", "args", ".", "update_query_pos", ":", "\n", "            ", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout4", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._random_drop_tracks": [[103, 105], ["qim.random_drop_tracks"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.random_drop_tracks"], ["", "def", "_random_drop_tracks", "(", "self", ",", "track_instances", ":", "Instances", ")", "->", "Instances", ":", "\n", "        ", "return", "random_drop_tracks", "(", "track_instances", ",", "self", ".", "random_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._add_fp_tracks": [[106, 132], ["torch.ones_like", "len", "models.structures.Instances.cat", "torch.bernoulli().bool", "len", "len", "len", "models.structures.Boxes", "models.structures.Boxes", "models.structures.pairwise_iou", "torch.unique", "util.box_ops.box_cxcywh_to_xyxy", "util.box_ops.box_cxcywh_to_xyxy", "models.structures.pairwise_iou.max", "torch.bernoulli"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_iou", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.box_ops.box_cxcywh_to_xyxy", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "_add_fp_tracks", "(", "self", ",", "track_instances", ":", "Instances", ",", "active_track_instances", ":", "Instances", ")", "->", "Instances", ":", "\n", "            ", "inactive_instances", "=", "track_instances", "[", "track_instances", ".", "obj_idxes", "<", "0", "]", "\n", "\n", "# add fp for each active track in a specific probability.", "\n", "fp_prob", "=", "torch", ".", "ones_like", "(", "active_track_instances", ".", "scores", ")", "*", "self", ".", "fp_ratio", "\n", "selected_active_track_instances", "=", "active_track_instances", "[", "torch", ".", "bernoulli", "(", "fp_prob", ")", ".", "bool", "(", ")", "]", "\n", "\n", "if", "len", "(", "inactive_instances", ")", ">", "0", "and", "len", "(", "selected_active_track_instances", ")", ">", "0", ":", "\n", "                ", "num_fp", "=", "len", "(", "selected_active_track_instances", ")", "\n", "if", "num_fp", ">=", "len", "(", "inactive_instances", ")", ":", "\n", "                    ", "fp_track_instances", "=", "inactive_instances", "\n", "", "else", ":", "\n", "                    ", "inactive_boxes", "=", "Boxes", "(", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "inactive_instances", ".", "pred_boxes", ")", ")", "\n", "selected_active_boxes", "=", "Boxes", "(", "box_ops", ".", "box_cxcywh_to_xyxy", "(", "selected_active_track_instances", ".", "pred_boxes", ")", ")", "\n", "ious", "=", "pairwise_iou", "(", "inactive_boxes", ",", "selected_active_boxes", ")", "\n", "# select the fp with the largest IoU for each active track.", "\n", "fp_indexes", "=", "ious", ".", "max", "(", "dim", "=", "0", ")", ".", "indices", "\n", "\n", "# remove duplicate fp.", "\n", "fp_indexes", "=", "torch", ".", "unique", "(", "fp_indexes", ")", "\n", "fp_track_instances", "=", "inactive_instances", "[", "fp_indexes", "]", "\n", "\n", "", "merged_track_instances", "=", "Instances", ".", "cat", "(", "[", "active_track_instances", ",", "fp_track_instances", "]", ")", "\n", "return", "merged_track_instances", "\n", "\n", "", "return", "active_track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._select_active_tracks": [[133, 146], ["qim.QueryInteractionModule._random_drop_tracks", "qim.QueryInteractionModule._add_fp_tracks"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._random_drop_tracks", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._add_fp_tracks"], ["", "def", "_select_active_tracks", "(", "self", ",", "data", ":", "dict", ")", "->", "Instances", ":", "\n", "        ", "track_instances", ":", "Instances", "=", "data", "[", "'track_instances'", "]", "\n", "if", "self", ".", "training", ":", "\n", "            ", "active_idxes", "=", "(", "track_instances", ".", "obj_idxes", ">=", "0", ")", "&", "(", "track_instances", ".", "iou", ">", "0.5", ")", "\n", "active_track_instances", "=", "track_instances", "[", "active_idxes", "]", "\n", "# set -2 instead of -1 to ensure that these tracks will not be selected in matching.", "\n", "active_track_instances", "=", "self", ".", "_random_drop_tracks", "(", "active_track_instances", ")", "\n", "if", "self", ".", "fp_ratio", ">", "0", ":", "\n", "                ", "active_track_instances", "=", "self", ".", "_add_fp_tracks", "(", "track_instances", ",", "active_track_instances", ")", "\n", "", "", "else", ":", "\n", "            ", "active_track_instances", "=", "track_instances", "[", "track_instances", ".", "obj_idxes", ">=", "0", "]", "\n", "\n", "", "return", "active_track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._update_track_embedding": [[147, 178], ["qim.QueryInteractionModule.norm1", "qim.QueryInteractionModule.linear2", "qim.QueryInteractionModule.norm2", "qim.QueryInteractionModule.linear_feat2", "qim.QueryInteractionModule.norm_feat", "util.misc.inverse_sigmoid", "len", "qim.QueryInteractionModule.dropout1", "qim.QueryInteractionModule.dropout", "qim.QueryInteractionModule.dropout2", "qim.QueryInteractionModule.linear_pos2", "qim.QueryInteractionModule.norm_pos", "qim.QueryInteractionModule.dropout_feat1", "qim.QueryInteractionModule.dropout_feat2", "track_instances.pred_boxes[].detach().clone", "qim.QueryInteractionModule.self_attn", "qim.QueryInteractionModule.activation", "qim.QueryInteractionModule.dropout_pos1", "qim.QueryInteractionModule.dropout_pos2", "qim.QueryInteractionModule.activation", "qim.QueryInteractionModule.linear1", "qim.QueryInteractionModule.activation", "qim.QueryInteractionModule.linear_feat1", "track_instances.pred_boxes[].detach", "qim.QueryInteractionModule.linear_pos1"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.inverse_sigmoid", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone"], ["", "def", "_update_track_embedding", "(", "self", ",", "track_instances", ":", "Instances", ")", "->", "Instances", ":", "\n", "        ", "if", "len", "(", "track_instances", ")", "==", "0", ":", "\n", "            ", "return", "track_instances", "\n", "", "dim", "=", "track_instances", ".", "query_pos", ".", "shape", "[", "1", "]", "\n", "out_embed", "=", "track_instances", ".", "output_embedding", "\n", "query_pos", "=", "track_instances", ".", "query_pos", "[", ":", ",", ":", "dim", "//", "2", "]", "\n", "query_feat", "=", "track_instances", ".", "query_pos", "[", ":", ",", "dim", "//", "2", ":", "]", "\n", "q", "=", "k", "=", "query_pos", "+", "out_embed", "\n", "\n", "tgt", "=", "out_embed", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", "[", ":", ",", "None", "]", ",", "k", "[", ":", ",", "None", "]", ",", "value", "=", "tgt", "[", ":", ",", "None", "]", ")", "[", "0", "]", "[", ":", ",", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n", "if", "self", ".", "update_query_pos", ":", "\n", "            ", "query_pos2", "=", "self", ".", "linear_pos2", "(", "self", ".", "dropout_pos1", "(", "self", ".", "activation", "(", "self", ".", "linear_pos1", "(", "tgt", ")", ")", ")", ")", "\n", "query_pos", "=", "query_pos", "+", "self", ".", "dropout_pos2", "(", "query_pos2", ")", "\n", "query_pos", "=", "self", ".", "norm_pos", "(", "query_pos", ")", "\n", "track_instances", ".", "query_pos", "[", ":", ",", ":", "dim", "//", "2", "]", "=", "query_pos", "\n", "\n", "", "query_feat2", "=", "self", ".", "linear_feat2", "(", "self", ".", "dropout_feat1", "(", "self", ".", "activation", "(", "self", ".", "linear_feat1", "(", "tgt", ")", ")", ")", ")", "\n", "query_feat", "=", "query_feat", "+", "self", ".", "dropout_feat2", "(", "query_feat2", ")", "\n", "query_feat", "=", "self", ".", "norm_feat", "(", "query_feat", ")", "\n", "track_instances", ".", "query_pos", "[", ":", ",", "dim", "//", "2", ":", "]", "=", "query_feat", "\n", "\n", "track_instances", ".", "ref_pts", "=", "inverse_sigmoid", "(", "track_instances", ".", "pred_boxes", "[", ":", ",", ":", "2", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", ")", "\n", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule.forward": [[179, 185], ["qim.QueryInteractionModule._select_active_tracks", "qim.QueryInteractionModule._update_track_embedding", "models.structures.Instances.cat"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._select_active_tracks", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.QueryInteractionModule._update_track_embedding", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "forward", "(", "self", ",", "data", ")", "->", "Instances", ":", "\n", "        ", "active_track_instances", "=", "self", ".", "_select_active_tracks", "(", "data", ")", "\n", "active_track_instances", "=", "self", ".", "_update_track_embedding", "(", "active_track_instances", ")", "\n", "init_track_instances", ":", "Instances", "=", "data", "[", "'init_track_instances'", "]", "\n", "merged_track_instances", "=", "Instances", ".", "cat", "(", "[", "init_track_instances", ",", "active_track_instances", "]", ")", "\n", "return", "merged_track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.random_drop_tracks": [[16, 21], ["len", "torch.rand_like"], "function", ["None"], ["def", "random_drop_tracks", "(", "track_instances", ":", "Instances", ",", "drop_probability", ":", "float", ")", "->", "Instances", ":", "\n", "    ", "if", "drop_probability", ">", "0", "and", "len", "(", "track_instances", ")", ">", "0", ":", "\n", "        ", "keep_idxes", "=", "torch", ".", "rand_like", "(", "track_instances", ".", "scores", ")", ">", "drop_probability", "\n", "track_instances", "=", "track_instances", "[", "keep_idxes", "]", "\n", "", "return", "track_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.qim.build": [[187, 193], ["None"], "function", ["None"], ["", "", "def", "build", "(", "args", ",", "layer_name", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", ":", "\n", "    ", "interaction_layers", "=", "{", "\n", "'QIM'", ":", "QueryInteractionModule", ",", "\n", "}", "\n", "assert", "layer_name", "in", "interaction_layers", ",", "'invalid query interaction layer: {}'", ".", "format", "(", "layer_name", ")", "\n", "return", "interaction_layers", "[", "layer_name", "]", "(", "args", ",", "dim_in", ",", "hidden_dim", ",", "dim_out", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingSine.__init__": [[27, 37], ["torch.nn.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "64", ",", "temperature", "=", "10000", ",", "normalize", "=", "False", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_pos_feats", "=", "num_pos_feats", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "normalize", "=", "normalize", "\n", "if", "scale", "is", "not", "None", "and", "normalize", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"normalize should be True if scale is passed\"", ")", "\n", "", "if", "scale", "is", "None", ":", "\n", "            ", "scale", "=", "2", "*", "math", ".", "pi", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingSine.forward": [[38, 59], ["not_mask.cumsum", "not_mask.cumsum", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.stack", "torch.stack", "torch.cat", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "mask", "=", "tensor_list", ".", "mask", "\n", "assert", "mask", "is", "not", "None", "\n", "not_mask", "=", "~", "mask", "\n", "y_embed", "=", "not_mask", ".", "cumsum", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "x_embed", "=", "not_mask", ".", "cumsum", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "eps", "=", "1e-6", "\n", "y_embed", "=", "(", "y_embed", "-", "0.5", ")", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "(", "x_embed", "-", "0.5", ")", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "\n", "", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "self", ".", "num_pos_feats", ")", "\n", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "(", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "(", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingLearned.__init__": [[65, 70], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "position_encoding.PositionEmbeddingLearned.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingLearned.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "row_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "col_embed", "=", "nn", ".", "Embedding", "(", "50", ",", "num_pos_feats", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingLearned.reset_parameters": [[71, 74], ["torch.nn.init.uniform_", "torch.nn.init.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "row_embed", ".", "weight", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "col_embed", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.PositionEmbeddingLearned.forward": [[75, 87], ["torch.arange", "torch.arange", "position_encoding.PositionEmbeddingLearned.col_embed", "position_encoding.PositionEmbeddingLearned.row_embed", "torch.cat().permute().unsqueeze().repeat", "torch.cat().permute().unsqueeze", "torch.cat().permute", "torch.cat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze().repeat", "position_encoding.PositionEmbeddingLearned.unsqueeze", "position_encoding.PositionEmbeddingLearned.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "x", "=", "tensor_list", ".", "tensors", "\n", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "i", "=", "torch", ".", "arange", "(", "w", ",", "device", "=", "x", ".", "device", ")", "\n", "j", "=", "torch", ".", "arange", "(", "h", ",", "device", "=", "x", ".", "device", ")", "\n", "x_emb", "=", "self", ".", "col_embed", "(", "i", ")", "\n", "y_emb", "=", "self", ".", "row_embed", "(", "j", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "\n", "x_emb", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "h", ",", "1", ",", "1", ")", ",", "\n", "y_emb", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "w", ",", "1", ")", ",", "\n", "]", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.build_position_encoding": [[89, 100], ["position_encoding.PositionEmbeddingSine", "position_encoding.PositionEmbeddingLearned", "ValueError"], "function", ["None"], ["", "", "def", "build_position_encoding", "(", "args", ")", ":", "\n", "    ", "N_steps", "=", "args", ".", "hidden_dim", "//", "2", "\n", "if", "args", ".", "position_embedding", "in", "(", "'v2'", ",", "'sine'", ")", ":", "\n", "# TODO find a better way of exposing other arguments", "\n", "        ", "position_embedding", "=", "PositionEmbeddingSine", "(", "N_steps", ",", "normalize", "=", "True", ")", "\n", "", "elif", "args", ".", "position_embedding", "in", "(", "'v3'", ",", "'learned'", ")", ":", "\n", "        ", "position_embedding", "=", "PositionEmbeddingLearned", "(", "N_steps", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"not supported {args.position_embedding}\"", ")", "\n", "\n", "", "return", "position_embedding", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.FrozenBatchNorm2d.__init__": [[36, 43], ["super().__init__", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "backbone.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["def", "__init__", "(", "self", ",", "n", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.FrozenBatchNorm2d._load_from_state_dict": [[44, 53], ["super()._load_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.FrozenBatchNorm2d._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "num_batches_tracked_key", "=", "prefix", "+", "'num_batches_tracked'", "\n", "if", "num_batches_tracked_key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "num_batches_tracked_key", "]", "\n", "\n", "", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.FrozenBatchNorm2d.forward": [[54, 65], ["backbone.FrozenBatchNorm2d.weight.reshape", "backbone.FrozenBatchNorm2d.bias.reshape", "backbone.FrozenBatchNorm2d.running_var.reshape", "backbone.FrozenBatchNorm2d.running_mean.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# move reshapes to the beginning", "\n", "# to make it fuser-friendly", "\n", "        ", "w", "=", "self", ".", "weight", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "b", "=", "self", ".", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rv", "=", "self", ".", "running_var", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "rm", "=", "self", ".", "running_mean", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "eps", "=", "self", ".", "eps", "\n", "scale", "=", "w", "*", "(", "rv", "+", "eps", ")", ".", "rsqrt", "(", ")", "\n", "bias", "=", "b", "-", "rm", "*", "scale", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.BackboneBase.__init__": [[69, 84], ["torch.Module.__init__", "backbone.named_parameters", "torchvision.models._utils.IntermediateLayerGetter", "parameter.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ":", "nn", ".", "Module", ",", "train_backbone", ":", "bool", ",", "return_interm_layers", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "name", ",", "parameter", "in", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "train_backbone", "or", "'layer2'", "not", "in", "name", "and", "'layer3'", "not", "in", "name", "and", "'layer4'", "not", "in", "name", ":", "\n", "                ", "parameter", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "if", "return_interm_layers", ":", "\n", "            ", "return_layers", "=", "{", "\"layer2\"", ":", "\"0\"", ",", "\"layer3\"", ":", "\"1\"", ",", "\"layer4\"", ":", "\"2\"", "}", "\n", "self", ".", "strides", "=", "[", "8", ",", "16", ",", "32", "]", "\n", "self", ".", "num_channels", "=", "[", "512", ",", "1024", ",", "2048", "]", "\n", "", "else", ":", "\n", "            ", "return_layers", "=", "{", "'layer4'", ":", "\"0\"", "}", "\n", "self", ".", "strides", "=", "[", "32", "]", "\n", "self", ".", "num_channels", "=", "[", "2048", "]", "\n", "", "self", ".", "body", "=", "IntermediateLayerGetter", "(", "backbone", ",", "return_layers", "=", "return_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.BackboneBase.forward": [[85, 94], ["backbone.BackboneBase.body", "backbone.BackboneBase.items", "util.misc.NestedTensor", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate().to", "torch.interpolate", "torch.interpolate", "torch.interpolate", "m[].float"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "xs", "=", "self", ".", "body", "(", "tensor_list", ".", "tensors", ")", "\n", "out", ":", "Dict", "[", "str", ",", "NestedTensor", "]", "=", "{", "}", "\n", "for", "name", ",", "x", "in", "xs", ".", "items", "(", ")", ":", "\n", "            ", "m", "=", "tensor_list", ".", "mask", "\n", "assert", "m", "is", "not", "None", "\n", "mask", "=", "F", ".", "interpolate", "(", "m", "[", "None", "]", ".", "float", "(", ")", ",", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "to", "(", "torch", ".", "bool", ")", "[", "0", "]", "\n", "out", "[", "name", "]", "=", "NestedTensor", "(", "x", ",", "mask", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.Backbone.__init__": [[98, 110], ["backbone.BackboneBase.__init__", "getattr", "util.misc.is_main_process"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.is_main_process"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "\n", "train_backbone", ":", "bool", ",", "\n", "return_interm_layers", ":", "bool", ",", "\n", "dilation", ":", "bool", ",", ")", ":", "\n", "        ", "norm_layer", "=", "FrozenBatchNorm2d", "\n", "backbone", "=", "getattr", "(", "torchvision", ".", "models", ",", "name", ")", "(", "\n", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "dilation", "]", ",", "\n", "pretrained", "=", "is_main_process", "(", ")", ",", "norm_layer", "=", "norm_layer", ")", "\n", "assert", "name", "not", "in", "(", "'resnet18'", ",", "'resnet34'", ")", ",", "\"number of channels are hard coded\"", "\n", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "train_backbone", ",", "return_interm_layers", ")", "\n", "if", "dilation", ":", "\n", "            ", "self", ".", "strides", "[", "-", "1", "]", "=", "self", ".", "strides", "[", "-", "1", "]", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.Joiner.__init__": [[113, 117], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "position_embedding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "backbone", ",", "position_embedding", ")", "\n", "self", ".", "strides", "=", "backbone", ".", "strides", "\n", "self", ".", "num_channels", "=", "backbone", ".", "num_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.Joiner.forward": [[118, 130], ["sorted", "xs.items", "out.append", "pos.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor_list", ":", "NestedTensor", ")", ":", "\n", "        ", "xs", "=", "self", "[", "0", "]", "(", "tensor_list", ")", "\n", "out", ":", "List", "[", "NestedTensor", "]", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "for", "name", ",", "x", "in", "sorted", "(", "xs", ".", "items", "(", ")", ")", ":", "\n", "            ", "out", ".", "append", "(", "x", ")", "\n", "\n", "# position encoding", "\n", "", "for", "x", "in", "out", ":", "\n", "            ", "pos", ".", "append", "(", "self", "[", "1", "]", "(", "x", ")", ".", "to", "(", "x", ".", "tensors", ".", "dtype", ")", ")", "\n", "\n", "", "return", "out", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.models.backbone.build_backbone": [[132, 139], ["position_encoding.build_position_encoding", "backbone.Backbone", "backbone.Joiner"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.models.position_encoding.build_position_encoding"], ["", "", "def", "build_backbone", "(", "args", ")", ":", "\n", "    ", "position_embedding", "=", "build_position_encoding", "(", "args", ")", "\n", "train_backbone", "=", "args", ".", "lr_backbone", ">", "0", "\n", "return_interm_layers", "=", "args", ".", "masks", "or", "(", "args", ".", "num_feature_levels", ">", "1", ")", "\n", "backbone", "=", "Backbone", "(", "args", ".", "backbone", ",", "train_backbone", ",", "return_interm_layers", ",", "args", ".", "dilation", ")", "\n", "model", "=", "Joiner", "(", "backbone", ",", "position_embedding", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__init__": [[43, 53], ["kwargs.items", "instances.Instances.set"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["def", "__init__", "(", "self", ",", "image_size", ":", "Tuple", "[", "int", ",", "int", "]", ",", "**", "kwargs", ":", "Any", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            image_size (height, width): the spatial size of the image.\n            kwargs: fields to add to this `Instances`.\n        \"\"\"", "\n", "self", ".", "_image_size", "=", "image_size", "\n", "self", ".", "_fields", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "set", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.image_size": [[54, 61], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "image_size", "(", "self", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Returns:\n            tuple: height, width\n        \"\"\"", "\n", "return", "self", ".", "_image_size", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__setattr__": [[62, 67], ["name.startswith", "super().__setattr__", "instances.Instances.set"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__setattr__", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "val", ":", "Any", ")", "->", "None", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"_\"", ")", ":", "\n", "            ", "super", "(", ")", ".", "__setattr__", "(", "name", ",", "val", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set", "(", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__getattr__": [[68, 72], ["AttributeError"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "if", "name", "==", "\"_fields\"", "or", "name", "not", "in", "self", ".", "_fields", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Cannot find field '{}' in the given Instances!\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "self", ".", "_fields", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set": [[73, 85], ["len", "len", "len", "len"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Set the field named `name` to `value`.\n        The length of `value` must be the number of instances,\n        and must agree with other existing fields in this object.\n        \"\"\"", "\n", "data_len", "=", "len", "(", "value", ")", "\n", "if", "len", "(", "self", ".", "_fields", ")", ":", "\n", "            ", "assert", "(", "\n", "len", "(", "self", ")", "==", "data_len", "\n", ")", ",", "\"Adding a field of length {} to a Instances of length {}\"", ".", "format", "(", "data_len", ",", "len", "(", "self", ")", ")", "\n", "", "self", ".", "_fields", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.has": [[86, 92], ["None"], "methods", ["None"], ["", "def", "has", "(", "self", ",", "name", ":", "str", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Returns:\n            bool: whether the field called `name` exists.\n        \"\"\"", "\n", "return", "name", "in", "self", ".", "_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.remove": [[93, 98], ["None"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Remove the field called `name`.\n        \"\"\"", "\n", "del", "self", ".", "_fields", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get": [[99, 104], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "\"\"\"\n        Returns the field called `name`.\n        \"\"\"", "\n", "return", "self", ".", "_fields", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get_fields": [[105, 113], ["None"], "methods", ["None"], ["", "def", "get_fields", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Returns:\n            dict: a dict which maps names (str) to data of the fields\n\n        Modifying the returned dict will modify this instance.\n        \"\"\"", "\n", "return", "self", ".", "_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.to": [[115, 126], ["instances.Instances", "instances.Instances._fields.items", "hasattr", "instances.Instances.set", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "def", "to", "(", "self", ",", "*", "args", ":", "Any", ",", "**", "kwargs", ":", "Any", ")", "->", "\"Instances\"", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Instances: all fields are called with a `to(device)`, if the field has this method.\n        \"\"\"", "\n", "ret", "=", "Instances", "(", "self", ".", "_image_size", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "ret", ".", "set", "(", "k", ",", "v", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy": [[127, 134], ["instances.Instances", "instances.Instances._fields.items", "hasattr", "instances.Instances.set", "v.numpy.numpy.numpy"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy"], ["", "def", "numpy", "(", "self", ")", ":", "\n", "        ", "ret", "=", "Instances", "(", "self", ".", "_image_size", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"numpy\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "numpy", "(", ")", "\n", "", "ret", ".", "set", "(", "k", ",", "v", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__getitem__": [[135, 154], ["instances.Instances", "instances.Instances._fields.items", "type", "instances.Instances.set", "IndexError", "slice", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "Union", "[", "int", ",", "slice", ",", "torch", ".", "BoolTensor", "]", ")", "->", "\"Instances\"", ":", "\n", "        ", "\"\"\"\n        Args:\n            item: an index-like object and will be used to index all the fields.\n\n        Returns:\n            If `item` is a string, return the data in the corresponding field.\n            Otherwise, returns an `Instances` where all fields are indexed by `item`.\n        \"\"\"", "\n", "if", "type", "(", "item", ")", "==", "int", ":", "\n", "            ", "if", "item", ">=", "len", "(", "self", ")", "or", "item", "<", "-", "len", "(", "self", ")", ":", "\n", "                ", "raise", "IndexError", "(", "\"Instances index out of range!\"", ")", "\n", "", "else", ":", "\n", "                ", "item", "=", "slice", "(", "item", ",", "None", ",", "len", "(", "self", ")", ")", "\n", "\n", "", "", "ret", "=", "Instances", "(", "self", ".", "_image_size", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_fields", ".", "items", "(", ")", ":", "\n", "            ", "ret", ".", "set", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__len__": [[155, 160], ["instances.Instances._fields.values", "NotImplementedError", "v.__len__"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__len__"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "for", "v", "in", "self", ".", "_fields", ".", "values", "(", ")", ":", "\n", "# use __len__ because len() has to be int and is not friendly to tracing", "\n", "            ", "return", "v", ".", "__len__", "(", ")", "\n", "", "raise", "NotImplementedError", "(", "\"Empty Instances does not support __len__!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__iter__": [[161, 163], ["NotImplementedError"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"`Instances` object is not iterable!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.cat": [[164, 195], ["all", "instances.Instances", "instance_lists[]._fields.keys", "len", "len", "isinstance", "instances.Instances.set", "isinstance", "i.get", "torch.cat", "isinstance", "list", "hasattr", "itertools.chain", "type", "type().cat", "ValueError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.set", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.get", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "@", "staticmethod", "\n", "def", "cat", "(", "instance_lists", ":", "List", "[", "\"Instances\"", "]", ")", "->", "\"Instances\"", ":", "\n", "        ", "\"\"\"\n        Args:\n            instance_lists (list[Instances])\n\n        Returns:\n            Instances\n        \"\"\"", "\n", "assert", "all", "(", "isinstance", "(", "i", ",", "Instances", ")", "for", "i", "in", "instance_lists", ")", "\n", "assert", "len", "(", "instance_lists", ")", ">", "0", "\n", "if", "len", "(", "instance_lists", ")", "==", "1", ":", "\n", "            ", "return", "instance_lists", "[", "0", "]", "\n", "\n", "", "image_size", "=", "instance_lists", "[", "0", "]", ".", "image_size", "\n", "for", "i", "in", "instance_lists", "[", "1", ":", "]", ":", "\n", "            ", "assert", "i", ".", "image_size", "==", "image_size", "\n", "", "ret", "=", "Instances", "(", "image_size", ")", "\n", "for", "k", "in", "instance_lists", "[", "0", "]", ".", "_fields", ".", "keys", "(", ")", ":", "\n", "            ", "values", "=", "[", "i", ".", "get", "(", "k", ")", "for", "i", "in", "instance_lists", "]", "\n", "v0", "=", "values", "[", "0", "]", "\n", "if", "isinstance", "(", "v0", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "values", "=", "torch", ".", "cat", "(", "values", ",", "dim", "=", "0", ")", "\n", "", "elif", "isinstance", "(", "v0", ",", "list", ")", ":", "\n", "                ", "values", "=", "list", "(", "itertools", ".", "chain", "(", "*", "values", ")", ")", "\n", "", "elif", "hasattr", "(", "type", "(", "v0", ")", ",", "\"cat\"", ")", ":", "\n", "                ", "values", "=", "type", "(", "v0", ")", ".", "cat", "(", "values", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unsupported type {} for concatenation\"", ".", "format", "(", "type", "(", "v0", ")", ")", ")", "\n", "", "ret", ".", "set", "(", "k", ",", "values", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.__str__": [[196, 203], ["len", "instances.Instances._fields.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "_image_size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "_image_size", "[", "1", "]", ")", "\n", "s", "+=", "\"fields=[{}])\"", ".", "format", "(", "\", \"", ".", "join", "(", "(", "f\"{k}: {v}\"", "for", "k", ",", "v", "in", "self", ".", "_fields", ".", "items", "(", ")", ")", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.BoxMode.convert": [[49, 134], ["type", "isinstance", "isinstance", "torch.cat().to.double", "torch.abs", "torch.abs", "arr[].to", "type.", "torch.cat().to.numpy", "torch.tensor", "torch.from_numpy().clone", "box.clone", "torch.cos", "torch.sin", "torch.cat().to.double", "torch.zeros", "torch.cat().to", "torch.cat().to.flatten().tolist", "len", "len", "torch.from_numpy", "torch.cat", "NotImplementedError", "torch.cat().to.flatten", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.instances.Instances.numpy", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["@", "staticmethod", "\n", "def", "convert", "(", "box", ":", "_RawBoxType", ",", "from_mode", ":", "\"BoxMode\"", ",", "to_mode", ":", "\"BoxMode\"", ")", "->", "_RawBoxType", ":", "\n", "        ", "\"\"\"\n        Args:\n            box: can be a k-tuple, k-list or an Nxk array/tensor, where k = 4 or 5\n            from_mode, to_mode (BoxMode)\n\n        Returns:\n            The converted box of the same type.\n        \"\"\"", "\n", "if", "from_mode", "==", "to_mode", ":", "\n", "            ", "return", "box", "\n", "\n", "", "original_type", "=", "type", "(", "box", ")", "\n", "is_numpy", "=", "isinstance", "(", "box", ",", "np", ".", "ndarray", ")", "\n", "single_box", "=", "isinstance", "(", "box", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "single_box", ":", "\n", "            ", "assert", "len", "(", "box", ")", "==", "4", "or", "len", "(", "box", ")", "==", "5", ",", "(", "\n", "\"BoxMode.convert takes either a k-tuple/list or an Nxk array/tensor,\"", "\n", "\" where k == 4 or 5\"", "\n", ")", "\n", "arr", "=", "torch", ".", "tensor", "(", "box", ")", "[", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "# avoid modifying the input box", "\n", "            ", "if", "is_numpy", ":", "\n", "                ", "arr", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "box", ")", ")", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "arr", "=", "box", ".", "clone", "(", ")", "\n", "\n", "", "", "assert", "to_mode", "not", "in", "[", "BoxMode", ".", "XYXY_REL", ",", "BoxMode", ".", "XYWH_REL", "]", "and", "from_mode", "not", "in", "[", "\n", "BoxMode", ".", "XYXY_REL", ",", "\n", "BoxMode", ".", "XYWH_REL", ",", "\n", "]", ",", "\"Relative mode not yet supported!\"", "\n", "\n", "if", "from_mode", "==", "BoxMode", ".", "XYWHA_ABS", "and", "to_mode", "==", "BoxMode", ".", "XYXY_ABS", ":", "\n", "            ", "assert", "(", "\n", "arr", ".", "shape", "[", "-", "1", "]", "==", "5", "\n", ")", ",", "\"The last dimension of input shape must be 5 for XYWHA format\"", "\n", "original_dtype", "=", "arr", ".", "dtype", "\n", "arr", "=", "arr", ".", "double", "(", ")", "\n", "\n", "w", "=", "arr", "[", ":", ",", "2", "]", "\n", "h", "=", "arr", "[", ":", ",", "3", "]", "\n", "a", "=", "arr", "[", ":", ",", "4", "]", "\n", "c", "=", "torch", ".", "abs", "(", "torch", ".", "cos", "(", "a", "*", "math", ".", "pi", "/", "180.0", ")", ")", "\n", "s", "=", "torch", ".", "abs", "(", "torch", ".", "sin", "(", "a", "*", "math", ".", "pi", "/", "180.0", ")", ")", "\n", "# This basically computes the horizontal bounding rectangle of the rotated box", "\n", "new_w", "=", "c", "*", "w", "+", "s", "*", "h", "\n", "new_h", "=", "c", "*", "h", "+", "s", "*", "w", "\n", "\n", "# convert center to top-left corner", "\n", "arr", "[", ":", ",", "0", "]", "-=", "new_w", "/", "2.0", "\n", "arr", "[", ":", ",", "1", "]", "-=", "new_h", "/", "2.0", "\n", "# bottom-right corner", "\n", "arr", "[", ":", ",", "2", "]", "=", "arr", "[", ":", ",", "0", "]", "+", "new_w", "\n", "arr", "[", ":", ",", "3", "]", "=", "arr", "[", ":", ",", "1", "]", "+", "new_h", "\n", "\n", "arr", "=", "arr", "[", ":", ",", ":", "4", "]", ".", "to", "(", "dtype", "=", "original_dtype", ")", "\n", "", "elif", "from_mode", "==", "BoxMode", ".", "XYWH_ABS", "and", "to_mode", "==", "BoxMode", ".", "XYWHA_ABS", ":", "\n", "            ", "original_dtype", "=", "arr", ".", "dtype", "\n", "arr", "=", "arr", ".", "double", "(", ")", "\n", "arr", "[", ":", ",", "0", "]", "+=", "arr", "[", ":", ",", "2", "]", "/", "2.0", "\n", "arr", "[", ":", ",", "1", "]", "+=", "arr", "[", ":", ",", "3", "]", "/", "2.0", "\n", "angles", "=", "torch", ".", "zeros", "(", "(", "arr", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "arr", ".", "dtype", ")", "\n", "arr", "=", "torch", ".", "cat", "(", "(", "arr", ",", "angles", ")", ",", "axis", "=", "1", ")", ".", "to", "(", "dtype", "=", "original_dtype", ")", "\n", "", "else", ":", "\n", "            ", "if", "to_mode", "==", "BoxMode", ".", "XYXY_ABS", "and", "from_mode", "==", "BoxMode", ".", "XYWH_ABS", ":", "\n", "                ", "arr", "[", ":", ",", "2", "]", "+=", "arr", "[", ":", ",", "0", "]", "\n", "arr", "[", ":", ",", "3", "]", "+=", "arr", "[", ":", ",", "1", "]", "\n", "", "elif", "from_mode", "==", "BoxMode", ".", "XYXY_ABS", "and", "to_mode", "==", "BoxMode", ".", "XYWH_ABS", ":", "\n", "                ", "arr", "[", ":", ",", "2", "]", "-=", "arr", "[", ":", ",", "0", "]", "\n", "arr", "[", ":", ",", "3", "]", "-=", "arr", "[", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "\"Conversion from BoxMode {} to {} is not supported yet\"", ".", "format", "(", "\n", "from_mode", ",", "to_mode", "\n", ")", "\n", ")", "\n", "\n", "", "", "if", "single_box", ":", "\n", "            ", "return", "original_type", "(", "arr", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "if", "is_numpy", ":", "\n", "            ", "return", "arr", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__init__": [[148, 162], ["torch.as_tensor", "tensor.reshape().to.reshape().to.size", "isinstance", "torch.device", "tensor.reshape().to.reshape().to.numel", "tensor.reshape().to.reshape().to.reshape().to", "tensor.reshape().to.reshape().to.dim", "tensor.reshape().to.reshape().to.size", "tensor.reshape().to.reshape().to.reshape"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["def", "__init__", "(", "self", ",", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor[float]): a Nx4 matrix.  Each row is (x1, y1, x2, y2).\n        \"\"\"", "\n", "device", "=", "tensor", ".", "device", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "tensor", "=", "torch", ".", "as_tensor", "(", "tensor", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "if", "tensor", ".", "numel", "(", ")", "==", "0", ":", "\n", "# Use reshape, so we don't end up creating a new tensor that does not depend on", "\n", "# the inputs (and consequently confuses jit)", "\n", "            ", "tensor", "=", "tensor", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "assert", "tensor", ".", "dim", "(", ")", "==", "2", "and", "tensor", ".", "size", "(", "-", "1", ")", "==", "4", ",", "tensor", ".", "size", "(", ")", "\n", "\n", "self", ".", "tensor", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone": [[163, 171], ["boxes.Boxes", "boxes.Boxes.tensor.clone"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clone"], ["", "def", "clone", "(", "self", ")", "->", "\"Boxes\"", ":", "\n", "        ", "\"\"\"\n        Clone the Boxes.\n\n        Returns:\n            Boxes\n        \"\"\"", "\n", "return", "Boxes", "(", "self", ".", "tensor", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to": [[172, 176], ["boxes.Boxes", "boxes.Boxes.tensor.to"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.to"], ["", "@", "_maybe_jit_unused", "\n", "def", "to", "(", "self", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "# Boxes are assumed float32 and does not support to(dtype)", "\n", "        ", "return", "Boxes", "(", "self", ".", "tensor", ".", "to", "(", "device", "=", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area": [[177, 187], ["None"], "methods", ["None"], ["", "def", "area", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the area of all the boxes.\n\n        Returns:\n            torch.Tensor: a vector with areas of each box.\n        \"\"\"", "\n", "box", "=", "self", ".", "tensor", "\n", "area", "=", "(", "box", "[", ":", ",", "2", "]", "-", "box", "[", ":", ",", "0", "]", ")", "*", "(", "box", "[", ":", ",", "3", "]", "-", "box", "[", ":", ",", "1", "]", ")", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.clip": [[188, 203], ["torch.isfinite().all", "boxes.Boxes.tensor[].clamp", "boxes.Boxes.tensor[].clamp", "boxes.Boxes.tensor[].clamp", "boxes.Boxes.tensor[].clamp", "torch.stack", "torch.isfinite"], "methods", ["None"], ["", "def", "clip", "(", "self", ",", "box_size", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Clip (in place) the boxes by limiting x coordinates to the range [0, width]\n        and y coordinates to the range [0, height].\n\n        Args:\n            box_size (height, width): The clipping box's size.\n        \"\"\"", "\n", "assert", "torch", ".", "isfinite", "(", "self", ".", "tensor", ")", ".", "all", "(", ")", ",", "\"Box tensor contains infinite or NaN!\"", "\n", "h", ",", "w", "=", "box_size", "\n", "x1", "=", "self", ".", "tensor", "[", ":", ",", "0", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "y1", "=", "self", ".", "tensor", "[", ":", ",", "1", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "x2", "=", "self", ".", "tensor", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "y2", "=", "self", ".", "tensor", "[", ":", ",", "3", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "self", ".", "tensor", "=", "torch", ".", "stack", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.nonempty": [[204, 219], ["None"], "methods", ["None"], ["", "def", "nonempty", "(", "self", ",", "threshold", ":", "float", "=", "0.0", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Find boxes that are non-empty.\n        A box is considered empty, if either of its side is no larger than threshold.\n\n        Returns:\n            Tensor:\n                a binary vector which represents whether each box is empty\n                (False) or non-empty (True).\n        \"\"\"", "\n", "box", "=", "self", ".", "tensor", "\n", "widths", "=", "box", "[", ":", ",", "2", "]", "-", "box", "[", ":", ",", "0", "]", "\n", "heights", "=", "box", "[", ":", ",", "3", "]", "-", "box", "[", ":", ",", "1", "]", "\n", "keep", "=", "(", "widths", ">", "threshold", ")", "&", "(", "heights", ">", "threshold", ")", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__getitem__": [[220, 243], ["isinstance", "boxes.Boxes", "boxes.Boxes", "b.dim", "boxes.Boxes.tensor[].view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "\"Boxes\"", ":", "\n", "        ", "\"\"\"\n        Args:\n            item: int, slice, or a BoolTensor\n\n        Returns:\n            Boxes: Create a new :class:`Boxes` by indexing.\n\n        The following usage are allowed:\n\n        1. `new_boxes = boxes[3]`: return a `Boxes` which contains only one box.\n        2. `new_boxes = boxes[2:10]`: return a slice of boxes.\n        3. `new_boxes = boxes[vector]`, where vector is a torch.BoolTensor\n           with `length = len(boxes)`. Nonzero elements in the vector will be selected.\n\n        Note that the returned Boxes might share storage with this Boxes,\n        subject to Pytorch's indexing semantics.\n        \"\"\"", "\n", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "Boxes", "(", "self", ".", "tensor", "[", "item", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "", "b", "=", "self", ".", "tensor", "[", "item", "]", "\n", "assert", "b", ".", "dim", "(", ")", "==", "2", ",", "\"Indexing on Boxes with {} failed to return a matrix!\"", ".", "format", "(", "item", ")", "\n", "return", "Boxes", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__len__": [[244, 246], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "tensor", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__repr__": [[247, 249], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Boxes(\"", "+", "str", "(", "self", ".", "tensor", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.inside_box": [[250, 268], ["None"], "methods", ["None"], ["", "def", "inside_box", "(", "self", ",", "box_size", ":", "Tuple", "[", "int", ",", "int", "]", ",", "boundary_threshold", ":", "int", "=", "0", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            box_size (height, width): Size of the reference box.\n            boundary_threshold (int): Boxes that extend beyond the reference box\n                boundary by more than boundary_threshold are considered \"outside\".\n\n        Returns:\n            a binary vector, indicating whether each box is inside the reference box.\n        \"\"\"", "\n", "height", ",", "width", "=", "box_size", "\n", "inds_inside", "=", "(", "\n", "(", "self", ".", "tensor", "[", "...", ",", "0", "]", ">=", "-", "boundary_threshold", ")", "\n", "&", "(", "self", ".", "tensor", "[", "...", ",", "1", "]", ">=", "-", "boundary_threshold", ")", "\n", "&", "(", "self", ".", "tensor", "[", "...", ",", "2", "]", "<", "width", "+", "boundary_threshold", ")", "\n", "&", "(", "self", ".", "tensor", "[", "...", ",", "3", "]", "<", "height", "+", "boundary_threshold", ")", "\n", ")", "\n", "return", "inds_inside", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.get_centers": [[269, 275], ["None"], "methods", ["None"], ["", "def", "get_centers", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The box centers in a Nx2 array of (x, y).\n        \"\"\"", "\n", "return", "(", "self", ".", "tensor", "[", ":", ",", ":", "2", "]", "+", "self", ".", "tensor", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.scale": [[276, 282], ["None"], "methods", ["None"], ["", "def", "scale", "(", "self", ",", "scale_x", ":", "float", ",", "scale_y", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Scale the box with horizontal and vertical scaling factors\n        \"\"\"", "\n", "self", ".", "tensor", "[", ":", ",", "0", ":", ":", "2", "]", "*=", "scale_x", "\n", "self", ".", "tensor", "[", ":", ",", "1", ":", ":", "2", "]", "*=", "scale_y", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat": [[283, 303], ["isinstance", "all", "cls", "len", "cls", "torch.cat", "torch.empty", "isinstance"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.cat"], ["", "@", "classmethod", "\n", "@", "_maybe_jit_unused", "\n", "def", "cat", "(", "cls", ",", "boxes_list", ":", "List", "[", "\"Boxes\"", "]", ")", "->", "\"Boxes\"", ":", "\n", "        ", "\"\"\"\n        Concatenates a list of Boxes into a single Boxes\n\n        Arguments:\n            boxes_list (list[Boxes])\n\n        Returns:\n            Boxes: the concatenated Boxes\n        \"\"\"", "\n", "assert", "isinstance", "(", "boxes_list", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "boxes_list", ")", "==", "0", ":", "\n", "            ", "return", "cls", "(", "torch", ".", "empty", "(", "0", ")", ")", "\n", "", "assert", "all", "(", "[", "isinstance", "(", "box", ",", "Boxes", ")", "for", "box", "in", "boxes_list", "]", ")", "\n", "\n", "# use torch.cat (v.s. layers.cat) so the returned boxes never share storage with input", "\n", "cat_boxes", "=", "cls", "(", "torch", ".", "cat", "(", "[", "b", ".", "tensor", "for", "b", "in", "boxes_list", "]", ",", "dim", "=", "0", ")", ")", "\n", "return", "cat_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.device": [[304, 307], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", "->", "device", ":", "\n", "        ", "return", "self", ".", "tensor", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.__iter__": [[310, 316], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Yield a box as a Tensor of shape (4,) at a time.\n        \"\"\"", "\n", "yield", "from", "self", ".", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes._maybe_jit_unused": [[14, 16], ["None"], "function", ["None"], ["def", "_maybe_jit_unused", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_intersection": [[318, 338], ["width_height.clamp_", "width_height.prod", "torch.min", "torch.max"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "", "def", "pairwise_intersection", "(", "boxes1", ":", "Boxes", ",", "boxes2", ":", "Boxes", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Given two lists of boxes of size N and M,\n    compute the intersection area between __all__ N x M pairs of boxes.\n    The box order must be (xmin, ymin, xmax, ymax)\n\n    Args:\n        boxes1,boxes2 (Boxes): two `Boxes`. Contains N & M boxes, respectively.\n\n    Returns:\n        Tensor: intersection, sized [N,M].\n    \"\"\"", "\n", "boxes1", ",", "boxes2", "=", "boxes1", ".", "tensor", ",", "boxes2", ".", "tensor", "\n", "width_height", "=", "torch", ".", "min", "(", "boxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "boxes2", "[", ":", ",", "2", ":", "]", ")", "-", "torch", ".", "max", "(", "\n", "boxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "boxes2", "[", ":", ",", ":", "2", "]", "\n", ")", "# [N,M,2]", "\n", "\n", "width_height", ".", "clamp_", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "intersection", "=", "width_height", ".", "prod", "(", "dim", "=", "2", ")", "# [N,M]", "\n", "return", "intersection", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_iou": [[342, 365], ["boxes1.area", "boxes2.area", "boxes.pairwise_intersection", "torch.where", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_intersection"], ["", "def", "pairwise_iou", "(", "boxes1", ":", "Boxes", ",", "boxes2", ":", "Boxes", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Given two lists of boxes of size N and M, compute the IoU\n    (intersection over union) between **all** N x M pairs of boxes.\n    The box order must be (xmin, ymin, xmax, ymax).\n\n    Args:\n        boxes1,boxes2 (Boxes): two `Boxes`. Contains N & M boxes, respectively.\n\n    Returns:\n        Tensor: IoU, sized [N,M].\n    \"\"\"", "\n", "area1", "=", "boxes1", ".", "area", "(", ")", "# [N]", "\n", "area2", "=", "boxes2", ".", "area", "(", ")", "# [M]", "\n", "inter", "=", "pairwise_intersection", "(", "boxes1", ",", "boxes2", ")", "\n", "\n", "# handle empty boxes", "\n", "iou", "=", "torch", ".", "where", "(", "\n", "inter", ">", "0", ",", "\n", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "inter", ".", "dtype", ",", "device", "=", "inter", ".", "device", ")", ",", "\n", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_ioa": [[367, 385], ["boxes2.area", "boxes.pairwise_intersection", "torch.where", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.pairwise_intersection"], ["", "def", "pairwise_ioa", "(", "boxes1", ":", "Boxes", ",", "boxes2", ":", "Boxes", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Similar to :func:`pariwise_iou` but compute the IoA (intersection over boxes2 area).\n\n    Args:\n        boxes1,boxes2 (Boxes): two `Boxes`. Contains N & M boxes, respectively.\n\n    Returns:\n        Tensor: IoA, sized [N,M].\n    \"\"\"", "\n", "area2", "=", "boxes2", ".", "area", "(", ")", "# [M]", "\n", "inter", "=", "pairwise_intersection", "(", "boxes1", ",", "boxes2", ")", "\n", "\n", "# handle empty boxes", "\n", "ioa", "=", "torch", ".", "where", "(", "\n", "inter", ">", "0", ",", "inter", "/", "area2", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "inter", ".", "dtype", ",", "device", "=", "inter", ".", "device", ")", "\n", ")", "\n", "return", "ioa", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.matched_boxlist_iou": [[387, 413], ["boxes1.area", "boxes2.area", "torch.max", "torch.min", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area", "home.repos.pwc.inspect_result.megvii-model_MOTR.structures.boxes.Boxes.area", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "matched_boxlist_iou", "(", "boxes1", ":", "Boxes", ",", "boxes2", ":", "Boxes", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute pairwise intersection over union (IOU) of two sets of matched\n    boxes. The box order must be (xmin, ymin, xmax, ymax).\n    Similar to boxlist_iou, but computes only diagonal elements of the matrix\n\n    Args:\n        boxes1: (Boxes) bounding boxes, sized [N,4].\n        boxes2: (Boxes) bounding boxes, sized [N,4].\n    Returns:\n        Tensor: iou, sized [N].\n    \"\"\"", "\n", "assert", "len", "(", "boxes1", ")", "==", "len", "(", "\n", "boxes2", "\n", ")", ",", "\"boxlists should have the same\"", "\"number of entries, got {}, {}\"", ".", "format", "(", "\n", "len", "(", "boxes1", ")", ",", "len", "(", "boxes2", ")", "\n", ")", "\n", "area1", "=", "boxes1", ".", "area", "(", ")", "# [N]", "\n", "area2", "=", "boxes2", ".", "area", "(", ")", "# [N]", "\n", "box1", ",", "box2", "=", "boxes1", ".", "tensor", ",", "boxes2", ".", "tensor", "\n", "lt", "=", "torch", ".", "max", "(", "box1", "[", ":", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", "# [N,2]", "\n", "rb", "=", "torch", ".", "min", "(", "box1", "[", ":", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "# [N,2]", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,2]", "\n", "inter", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "# [N]", "\n", "iou", "=", "inter", "/", "(", "area1", "+", "area2", "-", "inter", ")", "# [N]", "\n", "return", "iou", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.ops.setup.get_extensions": [[23, 61], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "NotImplementedError", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"src\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Cuda is not availabel'", ")", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"MultiScaleDeformableAttention\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.ops.test.check_forward_equal_with_pytorch_double": [[31, 45], ["torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "attention_weights.sum().sum", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch().detach().cpu", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply().detach().cpu", "torch.allclose", "torch.allclose", "print", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand", "torch.rand", "attention_weights.sum", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch().detach", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply().detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "ms_deform_attn_core_pytorch().detach().cpu.abs", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply", "value.double", "torch.rand().cuda.double", "attention_weights.double", "value.double", "torch.rand().cuda.double", "attention_weights.double"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.ms_deform_attn_core_pytorch"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "check_forward_equal_with_pytorch_double", "(", ")", ":", "\n", "    ", "value", "=", "torch", ".", "rand", "(", "N", ",", "S", ",", "M", ",", "D", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "sampling_locations", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ",", "2", ")", ".", "cuda", "(", ")", "\n", "attention_weights", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ")", ".", "cuda", "(", ")", "+", "1e-5", "\n", "attention_weights", "/=", "attention_weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "im2col_step", "=", "2", "\n", "output_pytorch", "=", "ms_deform_attn_core_pytorch", "(", "value", ".", "double", "(", ")", ",", "shapes", ",", "sampling_locations", ".", "double", "(", ")", ",", "attention_weights", ".", "double", "(", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_cuda", "=", "MSDeformAttnFunction", ".", "apply", "(", "value", ".", "double", "(", ")", ",", "shapes", ",", "level_start_index", ",", "sampling_locations", ".", "double", "(", ")", ",", "attention_weights", ".", "double", "(", ")", ",", "im2col_step", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "fwdok", "=", "torch", ".", "allclose", "(", "output_cuda", ",", "output_pytorch", ")", "\n", "max_abs_err", "=", "(", "output_cuda", "-", "output_pytorch", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "max_rel_err", "=", "(", "(", "output_cuda", "-", "output_pytorch", ")", ".", "abs", "(", ")", "/", "output_pytorch", ".", "abs", "(", ")", ")", ".", "max", "(", ")", "\n", "\n", "print", "(", "f'* {fwdok} check_forward_equal_with_pytorch_double: max_abs_err {max_abs_err:.2e} max_rel_err {max_rel_err:.2e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.ops.test.check_forward_equal_with_pytorch_float": [[47, 61], ["torch.no_grad", "torch.no_grad", "torch.rand().cuda", "torch.rand().cuda", "attention_weights.sum().sum", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch().detach().cpu", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply().detach().cpu", "torch.allclose", "torch.allclose", "print", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand", "torch.rand", "attention_weights.sum", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch().detach", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply().detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "ms_deform_attn_core_pytorch().detach().cpu.abs", "functions.ms_deform_attn_func.ms_deform_attn_core_pytorch", "functions.ms_deform_attn_func.MSDeformAttnFunction.apply"], "function", ["home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.ms_deform_attn_core_pytorch"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "check_forward_equal_with_pytorch_float", "(", ")", ":", "\n", "    ", "value", "=", "torch", ".", "rand", "(", "N", ",", "S", ",", "M", ",", "D", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "sampling_locations", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ",", "2", ")", ".", "cuda", "(", ")", "\n", "attention_weights", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ")", ".", "cuda", "(", ")", "+", "1e-5", "\n", "attention_weights", "/=", "attention_weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "im2col_step", "=", "2", "\n", "output_pytorch", "=", "ms_deform_attn_core_pytorch", "(", "value", ",", "shapes", ",", "sampling_locations", ",", "attention_weights", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "output_cuda", "=", "MSDeformAttnFunction", ".", "apply", "(", "value", ",", "shapes", ",", "level_start_index", ",", "sampling_locations", ",", "attention_weights", ",", "im2col_step", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "fwdok", "=", "torch", ".", "allclose", "(", "output_cuda", ",", "output_pytorch", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-3", ")", "\n", "max_abs_err", "=", "(", "output_cuda", "-", "output_pytorch", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "max_rel_err", "=", "(", "(", "output_cuda", "-", "output_pytorch", ")", ".", "abs", "(", ")", "/", "output_pytorch", ".", "abs", "(", ")", ")", ".", "max", "(", ")", "\n", "\n", "print", "(", "f'* {fwdok} check_forward_equal_with_pytorch_float: max_abs_err {max_abs_err:.2e} max_rel_err {max_rel_err:.2e}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.ops.test.check_gradient_numerical": [[63, 79], ["torch.rand().cuda", "torch.rand().cuda", "attention_weights.sum().sum", "torch.autograd.gradcheck", "print", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand", "torch.rand", "attention_weights.sum", "value.double", "torch.rand().cuda.double", "attention_weights.double", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "check_gradient_numerical", "(", "channels", "=", "4", ",", "grad_value", "=", "True", ",", "grad_sampling_loc", "=", "True", ",", "grad_attn_weight", "=", "True", ")", ":", "\n", "\n", "    ", "value", "=", "torch", ".", "rand", "(", "N", ",", "S", ",", "M", ",", "channels", ")", ".", "cuda", "(", ")", "*", "0.01", "\n", "sampling_locations", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ",", "2", ")", ".", "cuda", "(", ")", "\n", "attention_weights", "=", "torch", ".", "rand", "(", "N", ",", "Lq", ",", "M", ",", "L", ",", "P", ")", ".", "cuda", "(", ")", "+", "1e-5", "\n", "attention_weights", "/=", "attention_weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "im2col_step", "=", "2", "\n", "func", "=", "MSDeformAttnFunction", ".", "apply", "\n", "\n", "value", ".", "requires_grad", "=", "grad_value", "\n", "sampling_locations", ".", "requires_grad", "=", "grad_sampling_loc", "\n", "attention_weights", ".", "requires_grad", "=", "grad_attn_weight", "\n", "\n", "gradok", "=", "gradcheck", "(", "func", ",", "(", "value", ".", "double", "(", ")", ",", "shapes", ",", "level_start_index", ",", "sampling_locations", ".", "double", "(", ")", ",", "attention_weights", ".", "double", "(", ")", ",", "im2col_step", ")", ")", "\n", "\n", "print", "(", "f'* {gradok} check_gradient_numerical(D={channels})'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.MSDeformAttnFunction.forward": [[25, 32], ["MultiScaleDeformableAttention.ms_deform_attn_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "value", ",", "value_spatial_shapes", ",", "value_level_start_index", ",", "sampling_locations", ",", "attention_weights", ",", "im2col_step", ")", ":", "\n", "        ", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "output", "=", "MSDA", ".", "ms_deform_attn_forward", "(", "\n", "value", ",", "value_spatial_shapes", ",", "value_level_start_index", ",", "sampling_locations", ",", "attention_weights", ",", "ctx", ".", "im2col_step", ")", "\n", "ctx", ".", "save_for_backward", "(", "value", ",", "value_spatial_shapes", ",", "value_level_start_index", ",", "sampling_locations", ",", "attention_weights", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.MSDeformAttnFunction.backward": [[33, 42], ["MultiScaleDeformableAttention.ms_deform_attn_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "value", ",", "value_spatial_shapes", ",", "value_level_start_index", ",", "sampling_locations", ",", "attention_weights", "=", "ctx", ".", "saved_tensors", "\n", "grad_value", ",", "grad_sampling_loc", ",", "grad_attn_weight", "=", "MSDA", ".", "ms_deform_attn_backward", "(", "\n", "value", ",", "value_spatial_shapes", ",", "value_level_start_index", ",", "sampling_locations", ",", "attention_weights", ",", "grad_output", ",", "ctx", ".", "im2col_step", ")", "\n", "\n", "return", "grad_value", ",", "None", ",", "None", ",", "grad_sampling_loc", ",", "grad_attn_weight", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.functions.ms_deform_attn_func.ms_deform_attn_core_pytorch": [[44, 65], ["value.split", "enumerate", "attention_weights.transpose().reshape.transpose().reshape", "output.transpose().contiguous", "value_list[].flatten().transpose().reshape", "sampling_grids[].transpose().flatten", "torch.grid_sample", "sampling_value_list.append", "attention_weights.transpose().reshape.transpose", "output.transpose", "value_list[].flatten().transpose", "sampling_grids[].transpose", "value_list[].flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "ms_deform_attn_core_pytorch", "(", "value", ",", "value_spatial_shapes", ",", "sampling_locations", ",", "attention_weights", ")", ":", "\n", "# for debug and test only,", "\n", "# need to use cuda version instead", "\n", "    ", "N_", ",", "S_", ",", "M_", ",", "D_", "=", "value", ".", "shape", "\n", "_", ",", "Lq_", ",", "M_", ",", "L_", ",", "P_", ",", "_", "=", "sampling_locations", ".", "shape", "\n", "value_list", "=", "value", ".", "split", "(", "[", "H_", "*", "W_", "for", "H_", ",", "W_", "in", "value_spatial_shapes", "]", ",", "dim", "=", "1", ")", "\n", "sampling_grids", "=", "2", "*", "sampling_locations", "-", "1", "\n", "sampling_value_list", "=", "[", "]", "\n", "for", "lid_", ",", "(", "H_", ",", "W_", ")", "in", "enumerate", "(", "value_spatial_shapes", ")", ":", "\n", "# N_, H_*W_, M_, D_ -> N_, H_*W_, M_*D_ -> N_, M_*D_, H_*W_ -> N_*M_, D_, H_, W_", "\n", "        ", "value_l_", "=", "value_list", "[", "lid_", "]", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "N_", "*", "M_", ",", "D_", ",", "H_", ",", "W_", ")", "\n", "# N_, Lq_, M_, P_, 2 -> N_, M_, Lq_, P_, 2 -> N_*M_, Lq_, P_, 2", "\n", "sampling_grid_l_", "=", "sampling_grids", "[", ":", ",", ":", ",", ":", ",", "lid_", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "# N_*M_, D_, Lq_, P_", "\n", "sampling_value_l_", "=", "F", ".", "grid_sample", "(", "value_l_", ",", "sampling_grid_l_", ",", "\n", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "sampling_value_list", ".", "append", "(", "sampling_value_l_", ")", "\n", "# (N_, Lq_, M_, L_, P_) -> (N_, M_, Lq_, L_, P_) -> (N_, M_, 1, Lq_, L_*P_)", "\n", "", "attention_weights", "=", "attention_weights", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "N_", "*", "M_", ",", "1", ",", "Lq_", ",", "L_", "*", "P_", ")", "\n", "output", "=", "(", "torch", ".", "stack", "(", "sampling_value_list", ",", "dim", "=", "-", "2", ")", ".", "flatten", "(", "-", "2", ")", "*", "attention_weights", ")", ".", "sum", "(", "-", "1", ")", ".", "view", "(", "N_", ",", "M_", "*", "D_", ",", "Lq_", ")", "\n", "return", "output", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__": [[34, 65], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "ms_deform_attn.MSDeformAttn._reset_parameters", "ValueError", "ms_deform_attn._is_power_of_2", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.__init__", "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters", "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn._is_power_of_2"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "256", ",", "n_levels", "=", "4", ",", "n_heads", "=", "8", ",", "n_points", "=", "4", ",", "sigmoid_attn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Multi-Scale Deformable Attention Module\n        :param d_model      hidden dimension\n        :param n_levels     number of feature levels\n        :param n_heads      number of attention heads\n        :param n_points     number of sampling points per attention head per feature level\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "d_model", "%", "n_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'d_model must be divisible by n_heads, but got {} and {}'", ".", "format", "(", "d_model", ",", "n_heads", ")", ")", "\n", "", "_d_per_head", "=", "d_model", "//", "n_heads", "\n", "# you'd better set _d_per_head to a power of 2 which is more efficient in our CUDA implementation", "\n", "if", "not", "_is_power_of_2", "(", "_d_per_head", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"You'd better set d_model in MSDeformAttn to make the dimension of each attention head a power of 2 \"", "\n", "\"which is more efficient in our CUDA implementation.\"", ")", "\n", "\n", "", "self", ".", "im2col_step", "=", "64", "\n", "self", ".", "sigmoid_attn", "=", "sigmoid_attn", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_levels", "=", "n_levels", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "n_points", "=", "n_points", "\n", "\n", "self", ".", "sampling_offsets", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_heads", "*", "n_levels", "*", "n_points", "*", "2", ")", "\n", "self", ".", "attention_weights", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_heads", "*", "n_levels", "*", "n_points", ")", "\n", "self", ".", "value_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn._reset_parameters": [[66, 81], ["torch.nn.init.constant_", "torch.nn.init.constant_", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Parameter", "torch.nn.Parameter", "thetas.cos", "thetas.sin", "torch.stack.view", "torch.stack.view", "torch.stack.abs().max", "torch.stack.abs().max", "torch.stack.abs", "torch.stack.abs"], "methods", ["home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max", "home.repos.pwc.inspect_result.megvii-model_MOTR.util.misc.SmoothedValue.max"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "constant_", "(", "self", ".", "sampling_offsets", ".", "weight", ".", "data", ",", "0.", ")", "\n", "thetas", "=", "torch", ".", "arange", "(", "self", ".", "n_heads", ",", "dtype", "=", "torch", ".", "float32", ")", "*", "(", "2.0", "*", "math", ".", "pi", "/", "self", ".", "n_heads", ")", "\n", "grid_init", "=", "torch", ".", "stack", "(", "[", "thetas", ".", "cos", "(", ")", ",", "thetas", ".", "sin", "(", ")", "]", ",", "-", "1", ")", "\n", "grid_init", "=", "(", "grid_init", "/", "grid_init", ".", "abs", "(", ")", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ".", "view", "(", "self", ".", "n_heads", ",", "1", ",", "1", ",", "2", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_levels", ",", "self", ".", "n_points", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_points", ")", ":", "\n", "            ", "grid_init", "[", ":", ",", ":", ",", "i", ",", ":", "]", "*=", "i", "+", "1", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "sampling_offsets", ".", "bias", "=", "nn", ".", "Parameter", "(", "grid_init", ".", "view", "(", "-", "1", ")", ")", "\n", "", "constant_", "(", "self", ".", "attention_weights", ".", "weight", ".", "data", ",", "0.", ")", "\n", "constant_", "(", "self", ".", "attention_weights", ".", "bias", ".", "data", ",", "0.", ")", "\n", "xavier_uniform_", "(", "self", ".", "value_proj", ".", "weight", ".", "data", ")", "\n", "constant_", "(", "self", ".", "value_proj", ".", "bias", ".", "data", ",", "0.", ")", "\n", "xavier_uniform_", "(", "self", ".", "output_proj", ".", "weight", ".", "data", ")", "\n", "constant_", "(", "self", ".", "output_proj", ".", "bias", ".", "data", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn.MSDeformAttn.forward": [[82, 122], ["ms_deform_attn.MSDeformAttn.value_proj", "value.view.view.view", "ms_deform_attn.MSDeformAttn.sampling_offsets().view", "ms_deform_attn.MSDeformAttn.attention_weights().view", "functions.MSDeformAttnFunction.apply", "ms_deform_attn.MSDeformAttn.output_proj", "value.view.view.masked_fill_", "torch.softmax().view.sigmoid().view", "torch.softmax().view", "torch.softmax().view", "float", "ms_deform_attn.MSDeformAttn.sampling_offsets", "ms_deform_attn.MSDeformAttn.attention_weights", "ValueError", "torch.softmax().view.sigmoid", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "reference_points", ",", "input_flatten", ",", "input_spatial_shapes", ",", "input_level_start_index", ",", "input_padding_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param query                       (N, Length_{query}, C)\n        :param reference_points            (N, Length_{query}, n_levels, 2), range in [0, 1], top-left (0,0), bottom-right (1, 1), including padding area\n                                        or (N, Length_{query}, n_levels, 4), add additional (w, h) to form reference boxes\n        :param input_flatten               (N, \\sum_{l=0}^{L-1} H_l \\cdot W_l, C)\n        :param input_spatial_shapes        (n_levels, 2), [(H_0, W_0), (H_1, W_1), ..., (H_{L-1}, W_{L-1})]\n        :param input_level_start_index     (n_levels, ), [0, H_0*W_0, H_0*W_0+H_1*W_1, H_0*W_0+H_1*W_1+H_2*W_2, ..., H_0*W_0+H_1*W_1+...+H_{L-1}*W_{L-1}]\n        :param input_padding_mask          (N, \\sum_{l=0}^{L-1} H_l \\cdot W_l), True for padding elements, False for non-padding elements\n\n        :return output                     (N, Length_{query}, C)\n        \"\"\"", "\n", "N", ",", "Len_q", ",", "_", "=", "query", ".", "shape", "\n", "N", ",", "Len_in", ",", "_", "=", "input_flatten", ".", "shape", "\n", "assert", "(", "input_spatial_shapes", "[", ":", ",", "0", "]", "*", "input_spatial_shapes", "[", ":", ",", "1", "]", ")", ".", "sum", "(", ")", "==", "Len_in", "\n", "\n", "value", "=", "self", ".", "value_proj", "(", "input_flatten", ")", "\n", "if", "input_padding_mask", "is", "not", "None", ":", "\n", "            ", "value", ".", "masked_fill_", "(", "input_padding_mask", "[", "...", ",", "None", "]", ",", "float", "(", "0", ")", ")", "\n", "", "value", "=", "value", ".", "view", "(", "N", ",", "Len_in", ",", "self", ".", "n_heads", ",", "self", ".", "d_model", "//", "self", ".", "n_heads", ")", "\n", "sampling_offsets", "=", "self", ".", "sampling_offsets", "(", "query", ")", ".", "view", "(", "N", ",", "Len_q", ",", "self", ".", "n_heads", ",", "self", ".", "n_levels", ",", "self", ".", "n_points", ",", "2", ")", "\n", "attention_weights", "=", "self", ".", "attention_weights", "(", "query", ")", ".", "view", "(", "N", ",", "Len_q", ",", "self", ".", "n_heads", ",", "self", ".", "n_levels", "*", "self", ".", "n_points", ")", "\n", "if", "self", ".", "sigmoid_attn", ":", "\n", "            ", "attention_weights", "=", "attention_weights", ".", "sigmoid", "(", ")", ".", "view", "(", "N", ",", "Len_q", ",", "self", ".", "n_heads", ",", "self", ".", "n_levels", ",", "self", ".", "n_points", ")", "\n", "", "else", ":", "\n", "            ", "attention_weights", "=", "F", ".", "softmax", "(", "attention_weights", ",", "-", "1", ")", ".", "view", "(", "N", ",", "Len_q", ",", "self", ".", "n_heads", ",", "self", ".", "n_levels", ",", "self", ".", "n_points", ")", "\n", "# N, Len_q, n_heads, n_levels, n_points, 2", "\n", "", "if", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "2", ":", "\n", "            ", "sampling_locations", "=", "reference_points", "[", ":", ",", ":", ",", "None", ",", ":", ",", "None", ",", ":", "]", "+", "sampling_offsets", "/", "input_spatial_shapes", "[", "None", ",", "None", ",", "None", ",", ":", ",", "None", ",", "(", "1", ",", "0", ")", "]", "\n", "", "elif", "reference_points", ".", "shape", "[", "-", "1", "]", "==", "4", ":", "\n", "            ", "sampling_locations", "=", "reference_points", "[", ":", ",", ":", ",", "None", ",", ":", ",", "None", ",", ":", "2", "]", "+", "sampling_offsets", "/", "self", ".", "n_points", "*", "reference_points", "[", ":", ",", ":", ",", "None", ",", ":", ",", "None", ",", "2", ":", "]", "*", "0.5", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Last dim of reference_points must be 2 or 4, but get {} instead.'", ".", "format", "(", "reference_points", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "output", "=", "MSDeformAttnFunction", ".", "apply", "(", "\n", "value", ",", "input_spatial_shapes", ",", "input_level_start_index", ",", "sampling_locations", ",", "attention_weights", ",", "self", ".", "im2col_step", ")", "\n", "output", "=", "self", ".", "output_proj", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.megvii-model_MOTR.modules.ms_deform_attn._is_power_of_2": [[27, 31], ["ValueError", "isinstance", "type"], "function", ["None"], ["def", "_is_power_of_2", "(", "n", ")", ":", "\n", "    ", "if", "(", "not", "isinstance", "(", "n", ",", "int", ")", ")", "or", "(", "n", "<", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"invalid input for _is_power_of_2: {} (type: {})\"", ".", "format", "(", "n", ",", "type", "(", "n", ")", ")", ")", "\n", "", "return", "(", "n", "&", "(", "n", "-", "1", ")", "==", "0", ")", "and", "n", "!=", "0", "\n", "\n"]]}