{"home.repos.pwc.inspect_result.albertipot_nar.None.train_201.get_args": [[24, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'NAR Training for nasbench201'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "\n", "default", "=", "'./config/config201.yml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'training configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "default", "=", "'./data/nasbench201/nasbench201_with_edge_flops_and_params.json'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to load data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "\n", "default", "=", "'./output'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to save output'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.train_201.build_arg_and_env": [[44, 61], ["utils.config.get_config", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.utils.config.get_config"], ["", "def", "build_arg_and_env", "(", "run_args", ")", ":", "\n", "    ", "args", "=", "get_config", "(", "run_args", ".", "config_file", ")", "\n", "\n", "args", ".", "config_file", "=", "run_args", ".", "config_file", "\n", "args", ".", "data_path", "=", "run_args", ".", "data_path", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "run_args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_args", ".", "save_dir", ")", "\n", "\n", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "run_args", ".", "save_dir", ",", "\n", "args", ".", "exp_name", "+", "'_'", "+", "time", ".", "strftime", "(", "'%Y%m%d%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.train_201.main": [[63, 242], ["train_201.get_args", "train_201.build_arg_and_env", "utils.setup.setup_logger", "utils.setup.setup_logger.info", "torch.utils.tensorboard.SummaryWriter", "utils.setup.setup_seed", "utils.setup.setup_logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.loss_ops.CrossEntropyLossSoft().cuda", "utils.setup.setup_logger.info", "ranker.Transformer", "ranker.Transformer.cuda", "utils.setup.setup_logger.info", "torch.AdamW", "utils.optim.LRScheduler", "sampler.ArchSampler201", "time.perf_counter", "range", "utils.setup.setup_logger.info", "process.train_utils.init_tier_list", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "random.shuffle", "len", "math.ceil", "range", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "os.path.join", "torch.device", "torch.device", "torch", "torch", "dataset.NASBench201DataBase", "dataset.NASBench201Dataset", "dataset.SplitSubet201", "dataset.SplitSubet201", "utils.loss_ops.RankLoss().cuda", "ranker.Transformer.parameters", "process.train_epoch_201", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "os.path.join", "utils.saver.save_checkpoint", "architecture.Bucket.get_n_tier", "os.path.join", "os.path.isfile", "ranker.Transformer.load_state_dict", "ranker.Transformer.cuda", "utils.setup.setup_logger.info", "sorted", "sorted", "os.path.join", "list", "list", "getattr", "utils.loss_ops.CrossEntropyLossSoft", "torch.no_grad", "torch.no_grad", "process.validate_201", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "open", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "process.evaluate_sampled_batch_201", "torch.cuda.is_available", "torch.cuda.is_available", "range", "range", "utils.loss_ops.RankLoss", "time.perf_counter", "utils.metric.AverageMeter.update", "tpk1_list.append", "utils.metric.AverageMeter.update", "tpk5_list.append", "len", "len", "time.perf_counter", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.None.test_201.get_args", "home.repos.pwc.inspect_result.albertipot_nar.None.train.build_arg_and_env", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_logger", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_seed", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val201.train_epoch_201", "home.repos.pwc.inspect_result.albertipot_nar.utils.saver.save_checkpoint", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val201.validate_201", "home.repos.pwc.inspect_result.albertipot_nar.process.sample_201.evaluate_sampled_batch_201", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "run_args", "=", "get_args", "(", ")", "\n", "args", "=", "build_arg_and_env", "(", "run_args", ")", "\n", "\n", "# setup logger", "\n", "logger", "=", "setup_logger", "(", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"train.log\"", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "# setup tensorboard", "\n", "tb_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'tensorboard'", ")", ")", "\n", "\n", "# setup global seed", "\n", "setup_seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "'set global random seed = {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "\n", "# setup cuda device", "\n", "if", "args", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", "(", "'cpu'", ")", "\n", "\n", "# build dataset", "\n", "", "if", "args", ".", "space", "==", "'nasbench201'", ":", "\n", "        ", "database", "=", "NASBench201DataBase", "(", "args", ".", "data_path", ")", "\n", "dataset", "=", "NASBench201Dataset", "(", "database", ",", "seed", "=", "args", ".", "seed", ")", "\n", "trainset", "=", "SplitSubet201", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "valset", "=", "SplitSubet201", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ",", "args", ".", "train_size", "+", "args", ".", "val_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "\n", "# build dataloader", "\n", "", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "\n", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "getattr", "(", "args", ",", "'drop_last'", ",", "True", ")", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valset", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# build loss", "\n", "criterion", "=", "CrossEntropyLossSoft", "(", ")", ".", "cuda", "(", "device", ")", "\n", "if", "args", ".", "aux_loss", ":", "\n", "        ", "aux_criterion", "=", "RankLoss", "(", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "# build model", "\n", "", "logger", ".", "info", "(", "'Building model with {}'", ".", "format", "(", "args", ".", "ranker", ")", ")", "\n", "ranker", "=", "Transformer", "(", "\n", "n_tier", "=", "args", ".", "ranker", ".", "n_tier", ",", "\n", "n_arch_patch", "=", "args", ".", "ranker", ".", "n_arch_patch", ",", "\n", "d_patch", "=", "args", ".", "ranker", ".", "d_patch", ",", "\n", "d_patch_vec", "=", "args", ".", "ranker", ".", "d_patch_vec", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "d_ffn_inner", "=", "args", ".", "ranker", ".", "d_ffn_inner", ",", "\n", "d_tier_prj_inner", "=", "args", ".", "ranker", ".", "d_tier_prj_inner", ",", "\n", "n_layers", "=", "args", ".", "ranker", ".", "n_layers", ",", "\n", "n_head", "=", "args", ".", "ranker", ".", "n_head", ",", "\n", "d_k", "=", "args", ".", "ranker", ".", "d_k", ",", "\n", "d_v", "=", "args", ".", "ranker", ".", "d_v", ",", "\n", "dropout", "=", "args", ".", "ranker", ".", "dropout", ",", "\n", "n_position", "=", "args", ".", "ranker", ".", "n_position", ",", "\n", "d_val_acc_prj_inner", "=", "args", ".", "ranker", ".", "d_val_acc_prj_inner", ",", "\n", "scale_prj", "=", "args", ".", "ranker", ".", "scale_prj", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "# build optimizer and lr_scheduler", "\n", "logger", ".", "info", "(", "'Building optimizer and lr_scheduler'", ")", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "ranker", ".", "parameters", "(", ")", ",", "\n", "betas", "=", "(", "args", ".", "optimizer", ".", "beta1", ",", "args", ".", "optimizer", ".", "beta2", ")", ",", "\n", "eps", "=", "args", ".", "optimizer", ".", "eps", ",", "\n", "weight_decay", "=", "args", ".", "optimizer", ".", "weight_decay", ")", "\n", "\n", "lr_scheduler", "=", "LRScheduler", "(", "\n", "optimizer", ",", "\n", "lr_mul", "=", "args", ".", "lr_scheduler", ".", "lr_mul", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "n_warmup_steps", "=", "args", ".", "lr_scheduler", ".", "n_warmup_steps", ")", "\n", "\n", "sampler", "=", "ArchSampler201", "(", "\n", "top_tier", "=", "args", ".", "sampler", ".", "top_tier", ",", "\n", "last_tier", "=", "args", ".", "sampler", ".", "last_tier", ",", "\n", "batch_factor", "=", "args", ".", "sampler", ".", "batch_factor", ",", "\n", "reuse_step", "=", "args", ".", "sampler", ".", "reuse_step", ",", "\n", ")", "\n", "\n", "assert", "args", ".", "network_type", "in", "[", "'cifar10'", ",", "'cifar100'", ",", "'imagenet16'", "]", ",", "'network type should be one of the [cifar10, cifar100, imagenet16]'", "\n", "\n", "# train ranker", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "best_acc", "=", "0", "\n", "is_best", "=", "False", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epochs", ",", "args", ".", "ranker_epochs", ")", ":", "\n", "        ", "flag", "=", "args", ".", "network_type", "+", "' Ranker Train'", "\n", "train_acc", ",", "train_loss", ",", "distri_list", "=", "train_epoch_201", "(", "ranker", ",", "train_dataloader", ",", "criterion", ",", "aux_criterion", ",", "optimizer", ",", "lr_scheduler", ",", "device", ",", "args", ",", "logger", ",", "tb_writer", ",", "epoch", ",", "flag", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_accuracy'", ".", "format", "(", "flag", ")", ",", "train_acc", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_loss'", ".", "format", "(", "flag", ")", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "# if (epoch+1) % args.validate_freq == 0:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flag", "=", "args", ".", "network_type", "+", "' Ranker Validate'", "\n", "val_acc", ",", "val_loss", "=", "validate_201", "(", "ranker", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "epoch", ",", "flag", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_accuracy'", ".", "format", "(", "flag", ")", ",", "val_acc", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_loss'", ".", "format", "(", "flag", ")", ",", "val_loss", ",", "epoch", ")", "\n", "\n", "", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'ckp_last.pth.tar'", ")", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "            ", "is_best", "=", "True", "\n", "best_acc", "=", "val_acc", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "", "save_checkpoint", "(", "args", ".", "save_path", ",", "ranker", ",", "optimizer", ",", "lr_scheduler", ",", "args", ",", "epoch", ",", "distri_list", ",", "is_best", ")", "\n", "\n", "", "logger", ".", "info", "(", "'train ranker using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n", "# sample", "\n", "assert", "args", ".", "sampler_epochs", ">", "args", ".", "ranker_epochs", ",", "'sampler_epochs should be larger than ranker_epochs'", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "tpk1_list", "=", "[", "]", "\n", "tpk5_list", "=", "[", "]", "\n", "history_best_distri", "=", "{", "}", "\n", "tpk1_meter", "=", "AverageMeter", "(", ")", "\n", "tpk5_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "sampler", ".", "is_checkpoint", ":", "\n", "        ", "ckp_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'ckp_best.pth.tar'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ",", "'Checkpoint file does not exist at {}'", ".", "format", "(", "ckp_path", ")", "\n", "with", "open", "(", "ckp_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "distri_list", "=", "checkpoint", "[", "'distri'", "]", "\n", "ranker", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "logger", ".", "info", "(", "'Start to use {} file for sampling'", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "distri_list", ")", "\n", "distri_length", "=", "len", "(", "distri_list", ")", "\n", "distri_reuse_step", "=", "math", ".", "ceil", "(", "(", "args", ".", "sampler_epochs", "-", "args", ".", "ranker_epochs", ")", "/", "distri_length", ")", "\n", "flag", "=", "args", ".", "network_type", "+", "' Sample'", "\n", "for", "it", "in", "range", "(", "args", ".", "ranker_epochs", ",", "args", ".", "sampler_epochs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "(", "it", "-", "args", ".", "ranker_epochs", ")", "%", "distri_reuse_step", "==", "0", ":", "\n", "                ", "history_best_distri", "=", "distri_list", "[", "(", "it", "-", "args", ".", "ranker_epochs", ")", "//", "distri_reuse_step", "]", "\n", "\n", "", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", "=", "evaluate_sampled_batch_201", "(", "ranker", ",", "sampler", ",", "tier_list", ",", "history_best_distri", ",", "dataset", ",", "it", ",", "args", ",", "device", ",", "tb_writer", ",", "logger", ",", "flag", ")", "\n", "if", "best_acc_at1", "!=", "None", ":", "\n", "                ", "tpk1_meter", ".", "update", "(", "best_acc_at1", ",", "n", "=", "1", ")", "\n", "tpk1_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ")", ")", "\n", "", "if", "best_acc_at5", "!=", "None", ":", "\n", "                ", "tpk5_meter", ".", "update", "(", "best_acc_at5", ",", "n", "=", "1", ")", "\n", "tpk5_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", ")", ")", "\n", "\n", "", "", "", "tpk1_best", "=", "sorted", "(", "tpk1_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top1 Best Arch in Iter {:2d}: Test Acc {:.8f} Val Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk1_best", "[", "0", "]", ",", "\n", "tpk1_best", "[", "1", "]", ",", "\n", "tpk1_best", "[", "3", "]", ",", "\n", "tpk1_best", "[", "2", "]", ",", "\n", "tpk1_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk1_meter", ".", "avg", ")", ")", "\n", "\n", "tpk5_best", "=", "sorted", "(", "tpk5_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top5 Best Arch in Iter {:2d}: Test Acc {:.8f} Val Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk5_best", "[", "0", "]", ",", "\n", "tpk5_best", "[", "1", "]", ",", "\n", "tpk5_best", "[", "3", "]", ",", "\n", "tpk5_best", "[", "2", "]", ",", "\n", "tpk5_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk5_meter", ".", "avg", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'train ranker and search using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.train.get_args": [[24, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'NAR Training for nasbench101'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "\n", "default", "=", "'./config/config.yml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'training configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "default", "=", "'./data/nasbench101/nasbench_only108_with_vertex_flops_and_params.json'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to load data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "\n", "default", "=", "'./output'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to save output'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.train.build_arg_and_env": [[44, 61], ["utils.config.get_config", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.utils.config.get_config"], ["", "def", "build_arg_and_env", "(", "run_args", ")", ":", "\n", "    ", "args", "=", "get_config", "(", "run_args", ".", "config_file", ")", "\n", "\n", "args", ".", "config_file", "=", "run_args", ".", "config_file", "\n", "args", ".", "data_path", "=", "run_args", ".", "data_path", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "run_args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_args", ".", "save_dir", ")", "\n", "\n", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "run_args", ".", "save_dir", ",", "\n", "args", ".", "exp_name", "+", "'_'", "+", "time", ".", "strftime", "(", "'%Y%m%d%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.train.main": [[63, 241], ["train.get_args", "train.build_arg_and_env", "utils.setup.setup_logger", "utils.setup.setup_logger.info", "torch.utils.tensorboard.SummaryWriter", "utils.setup.setup_seed", "utils.setup.setup_logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.loss_ops.CrossEntropyLossSoft().cuda", "utils.setup.setup_logger.info", "ranker.Transformer", "ranker.Transformer.cuda", "utils.setup.setup_logger.info", "torch.AdamW", "utils.optim.LRScheduler", "sampler.ArchSampler", "time.perf_counter", "range", "utils.setup.setup_logger.info", "process.train_utils.init_tier_list", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "random.shuffle", "len", "math.ceil", "range", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "os.path.join", "torch.device", "torch.device", "torch", "torch", "dataset.NASBenchDataBase", "dataset.NASBenchDataset", "dataset.SplitSubet", "dataset.SplitSubet", "utils.loss_ops.RankLoss().cuda", "ranker.Transformer.parameters", "process.train_epoch", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "os.path.join", "utils.saver.save_checkpoint", "architecture.Bucket.get_n_tier", "os.path.join", "os.path.isfile", "ranker.Transformer.load_state_dict", "ranker.Transformer.cuda", "utils.setup.setup_logger.info", "sorted", "sorted", "os.path.join", "list", "list", "getattr", "utils.loss_ops.CrossEntropyLossSoft", "dict", "torch.no_grad", "torch.no_grad", "process.validate", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "open", "torch.load", "torch.load", "torch.no_grad", "torch.no_grad", "process.evaluate_sampled_batch", "utils.metric.AverageMeter.update", "tpk1_list.append", "utils.metric.AverageMeter.update", "tpk5_list.append", "torch.cuda.is_available", "torch.cuda.is_available", "range", "range", "utils.loss_ops.RankLoss", "time.perf_counter", "len", "len", "time.perf_counter", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.None.test_201.get_args", "home.repos.pwc.inspect_result.albertipot_nar.None.train.build_arg_and_env", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_logger", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_seed", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val.train_epoch", "home.repos.pwc.inspect_result.albertipot_nar.utils.saver.save_checkpoint", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val.validate", "home.repos.pwc.inspect_result.albertipot_nar.process.sample.evaluate_sampled_batch", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "run_args", "=", "get_args", "(", ")", "\n", "args", "=", "build_arg_and_env", "(", "run_args", ")", "\n", "\n", "# setup logger", "\n", "logger", "=", "setup_logger", "(", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"train.log\"", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "# setup tensorboard", "\n", "tb_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'tensorboard'", ")", ")", "\n", "\n", "# setup global seed", "\n", "setup_seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "'set global random seed = {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "\n", "# setup cuda device", "\n", "if", "args", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", "(", "'cpu'", ")", "\n", "\n", "# build dataset", "\n", "", "if", "args", ".", "space", "==", "'nasbench'", ":", "\n", "        ", "database", "=", "NASBenchDataBase", "(", "args", ".", "data_path", ")", "\n", "dataset", "=", "NASBenchDataset", "(", "database", ",", "seed", "=", "args", ".", "seed", ")", "\n", "trainset", "=", "SplitSubet", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "valset", "=", "SplitSubet", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ",", "args", ".", "train_size", "+", "args", ".", "val_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "\n", "# build dataloader", "\n", "", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "getattr", "(", "args", ",", "'drop_last'", ",", "True", ")", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "# build loss", "\n", "criterion", "=", "CrossEntropyLossSoft", "(", ")", ".", "cuda", "(", "device", ")", "\n", "if", "args", ".", "aux_loss", ":", "\n", "        ", "aux_criterion", "=", "RankLoss", "(", ")", ".", "cuda", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "aux_criterion", "=", "None", "\n", "\n", "# build model", "\n", "", "logger", ".", "info", "(", "'Building model with {}'", ".", "format", "(", "args", ".", "ranker", ")", ")", "\n", "ranker", "=", "Transformer", "(", "\n", "n_tier", "=", "args", ".", "ranker", ".", "n_tier", ",", "\n", "n_arch_patch", "=", "args", ".", "ranker", ".", "n_arch_patch", ",", "\n", "d_patch", "=", "args", ".", "ranker", ".", "d_patch", ",", "\n", "d_patch_vec", "=", "args", ".", "ranker", ".", "d_patch_vec", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "d_ffn_inner", "=", "args", ".", "ranker", ".", "d_ffn_inner", ",", "\n", "d_tier_prj_inner", "=", "args", ".", "ranker", ".", "d_tier_prj_inner", ",", "\n", "n_layers", "=", "args", ".", "ranker", ".", "n_layers", ",", "\n", "n_head", "=", "args", ".", "ranker", ".", "n_head", ",", "\n", "d_k", "=", "args", ".", "ranker", ".", "d_k", ",", "\n", "d_v", "=", "args", ".", "ranker", ".", "d_v", ",", "\n", "dropout", "=", "args", ".", "ranker", ".", "dropout", ",", "\n", "n_position", "=", "args", ".", "ranker", ".", "n_position", ",", "\n", "d_val_acc_prj_inner", "=", "args", ".", "ranker", ".", "d_val_acc_prj_inner", ",", "\n", "scale_prj", "=", "args", ".", "ranker", ".", "scale_prj", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "# build optimizer and lr_scheduler", "\n", "logger", ".", "info", "(", "'Building optimizer and lr_scheduler'", ")", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "ranker", ".", "parameters", "(", ")", ",", "\n", "betas", "=", "(", "args", ".", "optimizer", ".", "beta1", ",", "args", ".", "optimizer", ".", "beta2", ")", ",", "\n", "eps", "=", "args", ".", "optimizer", ".", "eps", ",", "\n", "weight_decay", "=", "args", ".", "optimizer", ".", "weight_decay", ")", "\n", "\n", "lr_scheduler", "=", "LRScheduler", "(", "\n", "optimizer", ",", "\n", "lr_mul", "=", "args", ".", "lr_scheduler", ".", "lr_mul", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "n_warmup_steps", "=", "args", ".", "lr_scheduler", ".", "n_warmup_steps", ")", "\n", "\n", "sampler", "=", "ArchSampler", "(", "\n", "top_tier", "=", "args", ".", "sampler", ".", "top_tier", ",", "\n", "last_tier", "=", "args", ".", "sampler", ".", "last_tier", ",", "\n", "batch_factor", "=", "args", ".", "sampler", ".", "batch_factor", ",", "\n", "node_type_dict", "=", "dict", "(", "args", ".", "node_type_dict", ")", ",", "\n", "max_edges", "=", "args", ".", "max_edges", ",", "\n", "reuse_step", "=", "args", ".", "sampler", ".", "reuse_step", ",", "\n", ")", "\n", "\n", "# train ranker", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "best_acc", "=", "0", "\n", "is_best", "=", "False", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epochs", ",", "args", ".", "ranker_epochs", ")", ":", "\n", "        ", "flag", "=", "'Ranker Train'", "\n", "train_acc", ",", "train_loss", ",", "distri_list", "=", "train_epoch", "(", "ranker", ",", "train_dataloader", ",", "criterion", ",", "aux_criterion", ",", "optimizer", ",", "lr_scheduler", ",", "device", ",", "args", ",", "logger", ",", "tb_writer", ",", "epoch", ",", "flag", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_accuracy'", ".", "format", "(", "flag", ")", ",", "train_acc", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_loss'", ".", "format", "(", "flag", ")", ",", "train_loss", ",", "epoch", ")", "\n", "\n", "# if (epoch+1) % args.validate_freq == 0:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "flag", "=", "'Ranker Validate'", "\n", "val_acc", ",", "val_loss", "=", "validate", "(", "ranker", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "epoch", ",", "flag", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_accuracy'", ".", "format", "(", "flag", ")", ",", "val_acc", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'{}/epoch_loss'", ".", "format", "(", "flag", ")", ",", "val_loss", ",", "epoch", ")", "\n", "\n", "", "args", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'ckp_last.pth.tar'", ")", "\n", "if", "val_acc", ">", "best_acc", ":", "\n", "            ", "is_best", "=", "True", "\n", "best_acc", "=", "val_acc", "\n", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "", "save_checkpoint", "(", "args", ".", "save_path", ",", "ranker", ",", "optimizer", ",", "lr_scheduler", ",", "args", ",", "epoch", ",", "distri_list", ",", "is_best", ")", "\n", "\n", "", "logger", ".", "info", "(", "'train ranker using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n", "# sample", "\n", "assert", "args", ".", "sampler_epochs", ">", "args", ".", "ranker_epochs", ",", "'sampler_epochs should be larger than ranker_epochs'", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "tpk1_list", "=", "[", "]", "\n", "tpk5_list", "=", "[", "]", "\n", "history_best_distri", "=", "{", "}", "\n", "tpk1_meter", "=", "AverageMeter", "(", ")", "\n", "tpk5_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "sampler", ".", "is_checkpoint", ":", "\n", "        ", "ckp_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'ckp_best.pth.tar'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ",", "'Checkpoint file does not exist at {}'", ".", "format", "(", "ckp_path", ")", "\n", "with", "open", "(", "ckp_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "distri_list", "=", "checkpoint", "[", "'distri'", "]", "\n", "ranker", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "logger", ".", "info", "(", "'Start to use {} file for sampling'", ".", "format", "(", "ckp_path", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "distri_list", ")", "\n", "distri_length", "=", "len", "(", "distri_list", ")", "\n", "distri_reuse_step", "=", "math", ".", "ceil", "(", "(", "args", ".", "sampler_epochs", "-", "args", ".", "ranker_epochs", ")", "/", "distri_length", ")", "\n", "for", "it", "in", "range", "(", "args", ".", "ranker_epochs", ",", "args", ".", "sampler_epochs", ")", ":", "\n", "        ", "flag", "=", "'Sample'", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "(", "it", "-", "args", ".", "ranker_epochs", ")", "%", "distri_reuse_step", "==", "0", ":", "\n", "                ", "history_best_distri", "=", "distri_list", "[", "(", "it", "-", "args", ".", "ranker_epochs", ")", "//", "distri_reuse_step", "]", "\n", "\n", "", "best_acc_at1", ",", "best_rank_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_acc_at3", ",", "best_rank_at3", ",", "best_acc_at7", ",", "best_rank_at7", ",", "best_acc_at10", ",", "best_rank_at10", "=", "evaluate_sampled_batch", "(", "ranker", ",", "sampler", ",", "tier_list", ",", "history_best_distri", ",", "dataset", ",", "it", ",", "args", ",", "device", ",", "tb_writer", ",", "logger", ",", "flag", ")", "\n", "tpk1_meter", ".", "update", "(", "best_acc_at1", ",", "n", "=", "1", ")", "\n", "tpk1_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at1", ",", "best_rank_at1", ")", ")", "\n", "tpk5_meter", ".", "update", "(", "best_acc_at5", ",", "n", "=", "1", ")", "\n", "tpk5_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at5", ",", "best_rank_at5", ")", ")", "\n", "\n", "", "", "tpk1_best", "=", "sorted", "(", "tpk1_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top1 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk1_best", "[", "0", "]", ",", "\n", "tpk1_best", "[", "1", "]", ",", "\n", "tpk1_best", "[", "2", "]", ",", "\n", "tpk1_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk1_meter", ".", "avg", ")", ")", "\n", "\n", "tpk5_best", "=", "sorted", "(", "tpk5_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top5 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk5_best", "[", "0", "]", ",", "\n", "tpk5_best", "[", "1", "]", ",", "\n", "tpk5_best", "[", "2", "]", ",", "\n", "tpk5_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk5_meter", ".", "avg", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'train ranker and searching using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.test.get_args": [[21, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'NAR Testing for nasbench101'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "\n", "default", "=", "'./config/config.yml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'testing configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "default", "=", "'./data/nasbench101/nasbench_only108_with_vertex_flops_and_params.json'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to load data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "\n", "default", "=", "'./output/fixed_labels/n101_noisy0_baseline/n101_noisy0_seed77777777_20211105102057'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to save output'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "\n", "default", "=", "'ckp_best.pth.tar'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "default", "=", "77777777", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'set seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_file_name'", ",", "\n", "default", "=", "'tttt.log'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'save file name'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.test.main": [[52, 220], ["test.get_args", "utils.config.get_config", "os.path.join", "os.path.isfile", "utils.setup.setup_logger", "utils.setup.setup_logger.info", "utils.setup.setup_seed", "utils.setup.setup_logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.loss_ops.CrossEntropyLossSoft().cuda", "utils.setup.setup_logger.info", "ranker.Transformer", "ranker.Transformer.load_state_dict", "ranker.Transformer.cuda", "sampler.ArchSampler", "utils.setup.setup_logger.info", "time.perf_counter", "process.train_utils.init_tier_list", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "random.shuffle", "len", "math.ceil", "range", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "open", "torch.load", "torch.load", "torch.device", "torch.device", "torch", "torch", "dataset.NASBenchDataBase", "dataset.NASBenchDataset", "dataset.SplitSubet", "utils.loss_ops.RankLoss().cuda", "torch.no_grad", "torch.no_grad", "process.validate", "architecture.Bucket.get_n_tier", "sorted", "sorted", "sorted", "sorted", "sorted", "os.path.join", "list", "utils.loss_ops.CrossEntropyLossSoft", "dict", "torch.no_grad", "torch.no_grad", "process.evaluate_sampled_batch", "utils.metric.AverageMeter.update", "tpk1_list.append", "utils.metric.AverageMeter.update", "tpk5_list.append", "utils.metric.AverageMeter.update", "tpk3_list.append", "utils.metric.AverageMeter.update", "tpk7_list.append", "utils.metric.AverageMeter.update", "tpk10_list.append", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "range", "utils.loss_ops.RankLoss", "len", "len", "len", "len", "len", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.None.test_201.get_args", "home.repos.pwc.inspect_result.albertipot_nar.utils.config.get_config", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_logger", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_seed", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val.validate", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.sample.evaluate_sampled_batch", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "run_args", "=", "get_args", "(", ")", "\n", "\n", "args", "=", "get_config", "(", "run_args", ".", "config_file", ")", "\n", "args", ".", "config_file", "=", "run_args", ".", "config_file", "\n", "args", ".", "data_path", "=", "run_args", ".", "data_path", "\n", "args", ".", "save_dir", "=", "run_args", ".", "save_dir", "\n", "args", ".", "save_file_name", "=", "run_args", ".", "save_file_name", "\n", "args", ".", "seed", "=", "run_args", ".", "seed", "\n", "\n", "ckp_path", "=", "os", ".", "path", ".", "join", "(", "run_args", ".", "save_dir", ",", "run_args", ".", "checkpoint", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ",", "'Checkpoint file does not exist at {}'", ".", "format", "(", "ckp_path", ")", "\n", "with", "open", "(", "ckp_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_file_name", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "# setup global seed", "\n", "setup_seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "'set global random seed = {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "\n", "# setup cuda device", "\n", "if", "args", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", "(", "'cpu'", ")", "\n", "\n", "# build dataset", "\n", "", "if", "args", ".", "space", "==", "'nasbench'", ":", "\n", "        ", "database", "=", "NASBenchDataBase", "(", "args", ".", "data_path", ")", "\n", "dataset", "=", "NASBenchDataset", "(", "database", ",", "seed", "=", "args", ".", "seed", ")", "\n", "valset", "=", "SplitSubet", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ",", "args", ".", "train_size", "+", "args", ".", "val_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "\n", "# build dataloader", "\n", "", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "criterion", "=", "CrossEntropyLossSoft", "(", ")", ".", "cuda", "(", "device", ")", "\n", "if", "args", ".", "aux_loss", ":", "\n", "        ", "aux_criterion", "=", "RankLoss", "(", ")", ".", "cuda", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "aux_criterion", "=", "None", "\n", "\n", "", "logger", ".", "info", "(", "'Building model with {}'", ".", "format", "(", "args", ".", "ranker", ")", ")", "\n", "ranker", "=", "Transformer", "(", "\n", "n_tier", "=", "args", ".", "ranker", ".", "n_tier", ",", "\n", "n_arch_patch", "=", "args", ".", "ranker", ".", "n_arch_patch", ",", "\n", "d_patch", "=", "args", ".", "ranker", ".", "d_patch", ",", "\n", "d_patch_vec", "=", "args", ".", "ranker", ".", "d_patch_vec", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "d_ffn_inner", "=", "args", ".", "ranker", ".", "d_ffn_inner", ",", "\n", "d_tier_prj_inner", "=", "args", ".", "ranker", ".", "d_tier_prj_inner", ",", "\n", "n_layers", "=", "args", ".", "ranker", ".", "n_layers", ",", "\n", "n_head", "=", "args", ".", "ranker", ".", "n_head", ",", "\n", "d_k", "=", "args", ".", "ranker", ".", "d_k", ",", "\n", "d_v", "=", "args", ".", "ranker", ".", "d_v", ",", "\n", "dropout", "=", "args", ".", "ranker", ".", "dropout", ",", "\n", "n_position", "=", "args", ".", "ranker", ".", "n_position", ",", "\n", "d_val_acc_prj_inner", "=", "args", ".", "ranker", ".", "d_val_acc_prj_inner", ",", "\n", "scale_prj", "=", "args", ".", "ranker", ".", "scale_prj", ")", "\n", "\n", "ranker", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "sampler", "=", "ArchSampler", "(", "\n", "top_tier", "=", "args", ".", "sampler", ".", "top_tier", ",", "\n", "last_tier", "=", "args", ".", "sampler", ".", "last_tier", ",", "\n", "batch_factor", "=", "args", ".", "sampler", ".", "batch_factor", ",", "\n", "node_type_dict", "=", "dict", "(", "args", ".", "node_type_dict", ")", ",", "\n", "max_edges", "=", "args", ".", "max_edges", ",", "\n", "reuse_step", "=", "args", ".", "sampler", ".", "reuse_step", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'Start to use {} file for testing ranker and sampling'", ".", "format", "(", "ckp_path", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "flag", "=", "'Ranker Test'", "\n", "val_acc", ",", "val_loss", "=", "validate", "(", "ranker", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "0", ",", "flag", ")", "\n", "\n", "# sample", "\n", "", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "assert", "args", ".", "sampler_epochs", ">", "args", ".", "ranker_epochs", ",", "'sampler_epochs should be larger than ranker_epochs'", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "history_best_distri", "=", "{", "}", "\n", "tpk1_list", "=", "[", "]", "\n", "tpk5_list", "=", "[", "]", "\n", "tpk3_list", "=", "[", "]", "\n", "tpk7_list", "=", "[", "]", "\n", "tpk10_list", "=", "[", "]", "\n", "\n", "tpk1_meter", "=", "AverageMeter", "(", ")", "\n", "tpk5_meter", "=", "AverageMeter", "(", ")", "\n", "tpk3_meter", "=", "AverageMeter", "(", ")", "\n", "tpk7_meter", "=", "AverageMeter", "(", ")", "\n", "tpk10_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "distri_list", "=", "checkpoint", "[", "'distri'", "]", "\n", "random", ".", "shuffle", "(", "distri_list", ")", "\n", "distri_length", "=", "len", "(", "distri_list", ")", "\n", "distri_reuse_step", "=", "math", ".", "ceil", "(", "(", "args", ".", "sampler_epochs", "-", "args", ".", "ranker_epochs", ")", "/", "distri_length", ")", "\n", "flag", "=", "'Sample Test'", "\n", "for", "it", "in", "range", "(", "args", ".", "ranker_epochs", ",", "args", ".", "sampler_epochs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "(", "it", "-", "args", ".", "ranker_epochs", ")", "%", "distri_reuse_step", "==", "0", ":", "\n", "                ", "history_best_distri", "=", "distri_list", "[", "(", "it", "-", "args", ".", "ranker_epochs", ")", "//", "distri_reuse_step", "]", "\n", "\n", "", "best_acc_at1", ",", "best_rank_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_acc_at3", ",", "best_rank_at3", ",", "best_acc_at7", ",", "best_rank_at7", ",", "best_acc_at10", ",", "best_rank_at10", "=", "evaluate_sampled_batch", "(", "ranker", ",", "sampler", ",", "tier_list", ",", "history_best_distri", ",", "dataset", ",", "it", ",", "args", ",", "device", ",", "None", ",", "logger", ",", "flag", ")", "\n", "\n", "tpk1_meter", ".", "update", "(", "best_acc_at1", ",", "n", "=", "1", ")", "\n", "tpk1_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at1", ",", "best_rank_at1", ")", ")", "\n", "tpk5_meter", ".", "update", "(", "best_acc_at5", ",", "n", "=", "1", ")", "\n", "tpk5_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at5", ",", "best_rank_at5", ")", ")", "\n", "\n", "tpk3_meter", ".", "update", "(", "best_acc_at3", ",", "n", "=", "1", ")", "\n", "tpk3_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at3", ",", "best_rank_at3", ")", ")", "\n", "tpk7_meter", ".", "update", "(", "best_acc_at7", ",", "n", "=", "1", ")", "\n", "tpk7_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at7", ",", "best_rank_at7", ")", ")", "\n", "tpk10_meter", ".", "update", "(", "best_acc_at10", ",", "n", "=", "1", ")", "\n", "tpk10_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at10", ",", "best_rank_at10", ")", ")", "\n", "\n", "", "", "tpk1_best", "=", "sorted", "(", "tpk1_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top1 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk1_best", "[", "0", "]", ",", "\n", "tpk1_best", "[", "1", "]", ",", "\n", "tpk1_best", "[", "2", "]", ",", "\n", "tpk1_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk1_meter", ".", "avg", ")", ")", "\n", "\n", "tpk5_best", "=", "sorted", "(", "tpk5_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top5 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk5_best", "[", "0", "]", ",", "\n", "tpk5_best", "[", "1", "]", ",", "\n", "tpk5_best", "[", "2", "]", ",", "\n", "tpk5_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk5_meter", ".", "avg", ")", ")", "\n", "\n", "tpk3_best", "=", "sorted", "(", "tpk3_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top3 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk3_best", "[", "0", "]", ",", "\n", "tpk3_best", "[", "1", "]", ",", "\n", "tpk3_best", "[", "2", "]", ",", "\n", "tpk3_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk3_meter", ".", "avg", ")", ")", "\n", "\n", "tpk7_best", "=", "sorted", "(", "tpk7_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top7 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk7_best", "[", "0", "]", ",", "\n", "tpk7_best", "[", "1", "]", ",", "\n", "tpk7_best", "[", "2", "]", ",", "\n", "tpk7_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk7_meter", ".", "avg", ")", ")", "\n", "\n", "tpk10_best", "=", "sorted", "(", "tpk10_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top10 Best Arch in Iter {:2d}: Test Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk10_best", "[", "0", "]", ",", "\n", "tpk10_best", "[", "1", "]", ",", "\n", "tpk10_best", "[", "2", "]", ",", "\n", "tpk10_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk10_meter", ".", "avg", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'search using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.test_201.get_args": [[21, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'NAR Testing for nasbench201'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "\n", "default", "=", "'./config/config201.yml'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'testing configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "default", "=", "'./data/nasbench201/nasbench201_with_edge_flops_and_params.json'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to load data'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "\n", "default", "=", "'./output/fixed_labels/n201_img16_noisy0_baseline/n201_img16_noisy0_exp_seed99999999_20211105150803'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to save output'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "\n", "default", "=", "'ckp_best.pth.tar'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_file_name'", ",", "\n", "default", "=", "'noisy05_test.log'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'save file name'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.None.test_201.main": [[48, 178], ["test_201.get_args", "utils.config.get_config", "os.path.join", "os.path.isfile", "utils.setup.setup_logger", "utils.setup.setup_logger.info", "utils.setup.setup_seed", "utils.setup.setup_logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.loss_ops.CrossEntropyLossSoft().cuda", "utils.setup.setup_logger.info", "ranker.Transformer", "ranker.Transformer.load_state_dict", "ranker.Transformer.cuda", "sampler.ArchSampler201", "utils.setup.setup_logger.info", "time.perf_counter", "process.train_utils.init_tier_list", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "random.shuffle", "len", "math.ceil", "range", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "utils.setup.setup_logger.info", "open", "torch.load", "torch.load", "torch.device", "torch.device", "torch", "torch", "dataset.NASBench201DataBase", "dataset.NASBench201Dataset", "dataset.SplitSubet201", "utils.loss_ops.RankLoss().cuda", "torch.no_grad", "torch.no_grad", "process.validate_201", "architecture.Bucket.get_n_tier", "sorted", "sorted", "os.path.join", "list", "utils.loss_ops.CrossEntropyLossSoft", "torch.no_grad", "torch.no_grad", "process.evaluate_sampled_batch_201", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "range", "utils.loss_ops.RankLoss", "utils.metric.AverageMeter.update", "tpk1_list.append", "utils.metric.AverageMeter.update", "tpk5_list.append", "len", "len", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.None.test_201.get_args", "home.repos.pwc.inspect_result.albertipot_nar.utils.config.get_config", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_logger", "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_seed", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.process.train_val201.validate_201", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.sample_201.evaluate_sampled_batch_201", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "run_args", "=", "get_args", "(", ")", "\n", "\n", "args", "=", "get_config", "(", "run_args", ".", "config_file", ")", "\n", "args", ".", "config_file", "=", "run_args", ".", "config_file", "\n", "args", ".", "data_path", "=", "run_args", ".", "data_path", "\n", "args", ".", "save_dir", "=", "run_args", ".", "save_dir", "\n", "args", ".", "save_file_name", "=", "run_args", ".", "save_file_name", "\n", "\n", "ckp_path", "=", "os", ".", "path", ".", "join", "(", "run_args", ".", "save_dir", ",", "run_args", ".", "checkpoint", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "ckp_path", ")", ",", "'Checkpoint file does not exist at {}'", ".", "format", "(", "ckp_path", ")", "\n", "with", "open", "(", "ckp_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_file_name", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "# setup global seed", "\n", "setup_seed", "(", "seed", "=", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "'set global random seed = {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "\n", "# setup cuda device", "\n", "if", "args", ".", "is_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", "(", "'cpu'", ")", "\n", "\n", "# build dataset", "\n", "", "if", "args", ".", "space", "==", "'nasbench201'", ":", "\n", "        ", "database", "=", "NASBench201DataBase", "(", "args", ".", "data_path", ")", "\n", "dataset", "=", "NASBench201Dataset", "(", "database", ",", "seed", "=", "args", ".", "seed", ")", "\n", "valset", "=", "SplitSubet201", "(", "dataset", ",", "list", "(", "range", "(", "args", ".", "train_size", ",", "args", ".", "train_size", "+", "args", ".", "val_size", ")", ")", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "\n", "# build dataloader", "\n", "", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valset", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "criterion", "=", "CrossEntropyLossSoft", "(", ")", ".", "cuda", "(", "device", ")", "\n", "if", "args", ".", "aux_loss", ":", "\n", "        ", "aux_criterion", "=", "RankLoss", "(", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Building model with {}'", ".", "format", "(", "args", ".", "ranker", ")", ")", "\n", "ranker", "=", "Transformer", "(", "\n", "n_tier", "=", "args", ".", "ranker", ".", "n_tier", ",", "\n", "n_arch_patch", "=", "args", ".", "ranker", ".", "n_arch_patch", ",", "\n", "d_patch", "=", "args", ".", "ranker", ".", "d_patch", ",", "\n", "d_patch_vec", "=", "args", ".", "ranker", ".", "d_patch_vec", ",", "\n", "d_model", "=", "args", ".", "ranker", ".", "d_model", ",", "\n", "d_ffn_inner", "=", "args", ".", "ranker", ".", "d_ffn_inner", ",", "\n", "d_tier_prj_inner", "=", "args", ".", "ranker", ".", "d_tier_prj_inner", ",", "\n", "n_layers", "=", "args", ".", "ranker", ".", "n_layers", ",", "\n", "n_head", "=", "args", ".", "ranker", ".", "n_head", ",", "\n", "d_k", "=", "args", ".", "ranker", ".", "d_k", ",", "\n", "d_v", "=", "args", ".", "ranker", ".", "d_v", ",", "\n", "dropout", "=", "args", ".", "ranker", ".", "dropout", ",", "\n", "n_position", "=", "args", ".", "ranker", ".", "n_position", ",", "\n", "d_val_acc_prj_inner", "=", "args", ".", "ranker", ".", "d_val_acc_prj_inner", ",", "\n", "scale_prj", "=", "args", ".", "ranker", ".", "scale_prj", ")", "\n", "\n", "ranker", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "ranker", ".", "cuda", "(", "device", ")", "\n", "\n", "sampler", "=", "ArchSampler201", "(", "\n", "top_tier", "=", "args", ".", "sampler", ".", "top_tier", ",", "\n", "last_tier", "=", "args", ".", "sampler", ".", "last_tier", ",", "\n", "batch_factor", "=", "args", ".", "sampler", ".", "batch_factor", ",", "\n", "reuse_step", "=", "args", ".", "sampler", ".", "reuse_step", ",", "\n", ")", "\n", "\n", "assert", "args", ".", "network_type", "in", "[", "'cifar10'", ",", "'cifar100'", ",", "'imagenet16'", "]", ",", "'network type should be one of the [cifar10, cifar100, imagenet16]'", "\n", "\n", "logger", ".", "info", "(", "'Start to use {} file for testing ranker and sampling'", ".", "format", "(", "ckp_path", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "flag", "=", "args", ".", "network_type", "+", "' Ranker Test'", "\n", "val_acc", ",", "val_loss", "=", "validate_201", "(", "ranker", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "0", ",", "flag", ")", "\n", "\n", "# sample", "\n", "", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "assert", "args", ".", "sampler_epochs", ">", "args", ".", "ranker_epochs", ",", "'sampler_epochs should be larger than ranker_epochs'", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "tpk1_list", "=", "[", "]", "\n", "tpk5_list", "=", "[", "]", "\n", "history_best_distri", "=", "{", "}", "\n", "tpk1_meter", "=", "AverageMeter", "(", ")", "\n", "tpk5_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "distri_list", "=", "checkpoint", "[", "'distri'", "]", "\n", "random", ".", "shuffle", "(", "distri_list", ")", "\n", "distri_length", "=", "len", "(", "distri_list", ")", "\n", "distri_reuse_step", "=", "math", ".", "ceil", "(", "(", "args", ".", "sampler_epochs", "-", "args", ".", "ranker_epochs", ")", "/", "distri_length", ")", "\n", "flag", "=", "args", ".", "network_type", "+", "' Sample Test'", "\n", "for", "it", "in", "range", "(", "args", ".", "ranker_epochs", ",", "args", ".", "sampler_epochs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "(", "it", "-", "args", ".", "ranker_epochs", ")", "%", "distri_reuse_step", "==", "0", ":", "\n", "                ", "history_best_distri", "=", "distri_list", "[", "(", "it", "-", "args", ".", "ranker_epochs", ")", "//", "distri_reuse_step", "]", "\n", "\n", "", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", "=", "evaluate_sampled_batch_201", "(", "ranker", ",", "sampler", ",", "tier_list", ",", "history_best_distri", ",", "dataset", ",", "it", ",", "args", ",", "device", ",", "None", ",", "logger", ",", "flag", ")", "\n", "if", "best_acc_at1", "!=", "None", ":", "\n", "                ", "tpk1_meter", ".", "update", "(", "best_acc_at1", ",", "n", "=", "1", ")", "\n", "tpk1_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ")", ")", "\n", "", "if", "best_acc_at5", "!=", "None", ":", "\n", "                ", "tpk5_meter", ".", "update", "(", "best_acc_at5", ",", "n", "=", "1", ")", "\n", "tpk5_list", ".", "append", "(", "(", "it", "-", "args", ".", "ranker_epochs", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", ")", ")", "\n", "\n", "", "", "", "tpk1_best", "=", "sorted", "(", "tpk1_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top1 Best Arch in Iter {:2d}: Test Acc {:.8f} Val Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk1_best", "[", "0", "]", ",", "\n", "tpk1_best", "[", "1", "]", ",", "\n", "tpk1_best", "[", "3", "]", ",", "\n", "tpk1_best", "[", "2", "]", ",", "\n", "tpk1_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk1_meter", ".", "avg", ")", ")", "\n", "\n", "tpk5_best", "=", "sorted", "(", "tpk5_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "logger", ".", "info", "(", "'[Result] Top5 Best Arch in Iter {:2d}: Test Acc {:.8f} Val Acc {:.8f} Rank: {:5d}(top {:.2%}), Avg Test Acc {:.8f}'", ".", "format", "(", "\n", "tpk5_best", "[", "0", "]", ",", "\n", "tpk5_best", "[", "1", "]", ",", "\n", "tpk5_best", "[", "3", "]", ",", "\n", "tpk5_best", "[", "2", "]", ",", "\n", "tpk5_best", "[", "2", "]", "/", "len", "(", "dataset", ")", ",", "\n", "tpk5_meter", ".", "avg", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'search using time {:.4f} seconds'", ".", "format", "(", "time", ".", "perf_counter", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.LoaderMeta.__new__": [[15, 21], ["type.__new__", "super().__new__.add_constructor"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.config.LoaderMeta.__new__"], ["def", "__new__", "(", "mcs", ",", "__name__", ",", "__bases__", ",", "__dict__", ")", ":", "\n", "        ", "\"\"\"Add include constructer to class.\"\"\"", "\n", "# register the include constructor on the class", "\n", "cls", "=", "super", "(", ")", ".", "__new__", "(", "mcs", ",", "__name__", ",", "__bases__", ",", "__dict__", ")", "\n", "cls", ".", "add_constructor", "(", "'!include'", ",", "cls", ".", "construct_include", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.Loader.__init__": [[27, 33], ["yaml.Loader.__init__", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "stream", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_root", "=", "os", ".", "path", ".", "split", "(", "stream", ".", "name", ")", "[", "0", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "_root", "=", "os", ".", "path", ".", "curdir", "\n", "", "super", "(", ")", ".", "__init__", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.Loader.construct_include": [[34, 46], ["os.path.abspath", "[].lstrip", "os.path.join", "open", "config.Loader.construct_scalar", "yaml.load", "os.path.splitext", "f.readlines"], "methods", ["None"], ["", "def", "construct_include", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\"\n        Include file referenced at node.\n        \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "self", ".", "construct_scalar", "(", "node", ")", ")", ")", "\n", "extension", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "1", "]", ".", "lstrip", "(", "'.'", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "if", "extension", "in", "(", "'yaml'", ",", "'yml'", ")", ":", "\n", "                ", "return", "yaml", ".", "load", "(", "f", ",", "Loader", ")", "\n", "", "else", ":", "\n", "                ", "return", "''", ".", "join", "(", "f", ".", "readlines", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.__init__": [[52, 64], ["dict.__init__", "isinstance", "config.AttrDict", "isinstance", "isinstance", "config.AttrDict"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "AttrDict", "(", "value", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "dict", ")", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "[", "AttrDict", "(", "item", ")", "for", "item", "in", "value", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.yaml": [[65, 85], ["isinstance", "value.yaml", "isinstance", "isinstance", "new_l.append", "item.yaml"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.yaml", "home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.yaml"], ["", "", "", "", "def", "yaml", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Convert object to yaml dict and return.\n        \"\"\"", "\n", "yaml_dict", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "                ", "yaml_dict", "[", "key", "]", "=", "value", ".", "yaml", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "AttrDict", ")", ":", "\n", "                    ", "new_l", "=", "[", "]", "\n", "for", "item", "in", "value", ":", "\n", "                        ", "new_l", ".", "append", "(", "item", ".", "yaml", "(", ")", ")", "\n", "", "yaml_dict", "[", "key", "]", "=", "new_l", "\n", "", "else", ":", "\n", "                    ", "yaml_dict", "[", "key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "                ", "yaml_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "yaml_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.__repr__": [[86, 111], ["isinstance", "ret_str.append", "value.__repr__().split", "isinstance", "ret_str.append", "isinstance", "ret_str.append", "value.__repr__", "ret_str.append", "ret_str.append", "item.__repr__().split", "ret_str.append", "item.__repr__"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.__repr__", "home.repos.pwc.inspect_result.albertipot_nar.utils.config.AttrDict.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print all variables.\n        \"\"\"", "\n", "ret_str", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "__dict__", ":", "\n", "            ", "value", "=", "self", ".", "__dict__", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "AttrDict", ")", ":", "\n", "                ", "ret_str", ".", "append", "(", "'{}:'", ".", "format", "(", "key", ")", ")", "\n", "child_ret_str", "=", "value", ".", "__repr__", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "item", "in", "child_ret_str", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'    '", "+", "item", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", "[", "0", "]", ",", "AttrDict", ")", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'{}:'", ".", "format", "(", "key", ")", ")", "\n", "for", "item", "in", "value", ":", "\n", "# treat as AttrDict above", "\n", "                        ", "child_ret_str", "=", "item", ".", "__repr__", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "item", "in", "child_ret_str", ":", "\n", "                            ", "ret_str", ".", "append", "(", "'    '", "+", "item", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "ret_str", ".", "append", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "ret_str", ".", "append", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "", "return", "'\\n'", ".", "join", "(", "ret_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.Config.__init__": [[114, 121], ["config.AttrDict.__init__", "open", "yaml.load", "print"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filename", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "cfg_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", ")", "\n", "", "", "except", "EnvironmentError", ":", "\n", "            ", "print", "(", "'Please check the file with name of \"%s\"'", ",", "filename", ")", "\n", "", "super", "(", "Config", ",", "self", ")", ".", "__init__", "(", "cfg_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.config.get_config": [[122, 125], ["os.path.exists", "config.Config"], "function", ["None"], ["", "", "def", "get_config", "(", "config_file", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "exists", "(", "config_file", ")", ",", "'File {} not exist.'", ".", "format", "(", "config_file", ")", "\n", "return", "Config", "(", "config_file", ")", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.utils.loss_ops.CrossEntropyLossSoft.forward": [[13, 20], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "target.unsqueeze.unsqueeze.unsqueeze", "output_log_prob.unsqueeze.unsqueeze.unsqueeze", "cross_entropy_loss.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output_log_prob", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "output_log_prob", "=", "output_log_prob", ".", "unsqueeze", "(", "2", ")", "\n", "cross_entropy_loss", "=", "-", "torch", ".", "bmm", "(", "target", ",", "output_log_prob", ")", "\n", "\n", "return", "cross_entropy_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.loss_ops.RankLoss.forward": [[24, 36], ["outputs.unsqueeze", "outputs.unsqueeze.repeat", "labels.unsqueeze", "labels.unsqueeze.repeat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "outputs.unsqueeze.repeat.t", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "labels.unsqueeze.repeat.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "len"], "methods", ["None"], ["def", "forward", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "        ", "output", "=", "outputs", ".", "unsqueeze", "(", "1", ")", "\n", "output1", "=", "output", ".", "repeat", "(", "1", ",", "outputs", ".", "shape", "[", "0", "]", ")", "\n", "label", "=", "labels", ".", "unsqueeze", "(", "1", ")", "\n", "label1", "=", "label", ".", "repeat", "(", "1", ",", "labels", ".", "shape", "[", "0", "]", ")", "\n", "tmp", "=", "(", "output1", "-", "output1", ".", "t", "(", ")", ")", "*", "torch", ".", "sign", "(", "label1", "-", "label1", ".", "t", "(", ")", ")", "\n", "tmp", "=", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "tmp", ")", ")", "\n", "eye_tmp", "=", "tmp", "*", "torch", ".", "eye", "(", "len", "(", "tmp", ")", ")", ".", "cuda", "(", "device", "=", "outputs", ".", "device", ")", "\n", "new_tmp", "=", "tmp", "-", "eye_tmp", "\n", "loss", "=", "torch", ".", "sum", "(", "new_tmp", ")", "/", "(", "outputs", ".", "shape", "[", "0", "]", "*", "(", "outputs", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.loss_ops.CrossEntropyLossLabelSmooth.forward": [[39, 51], ["target.size", "target.size", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "smoothed_labels.unsqueeze.unsqueeze.scatter_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "smoothed_labels.unsqueeze.unsqueeze.unsqueeze", "output_log_prob.unsqueeze.unsqueeze.unsqueeze", "cross_entropy_loss.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "idx.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["    ", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "eps", "=", "0.1", ")", ":", "\n", "        ", "bz", "=", "target", ".", "size", "(", "0", ")", "\n", "n_class", "=", "target", ".", "size", "(", "1", ")", "\n", "\n", "smoothed_labels", "=", "torch", ".", "full", "(", "size", "=", "(", "bz", ",", "n_class", ")", ",", "fill_value", "=", "eps", "/", "(", "n_class", "-", "1", ")", ")", ".", "cuda", "(", "device", "=", "target", ".", "device", ")", "\n", "_", ",", "idx", "=", "torch", ".", "where", "(", "target", "==", "1", ")", "\n", "smoothed_labels", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "idx", ".", "unsqueeze", "(", "dim", "=", "1", ")", ",", "value", "=", "1", "-", "eps", ")", "\n", "output_log_prob", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "smoothed_labels", "=", "smoothed_labels", ".", "unsqueeze", "(", "1", ")", "\n", "output_log_prob", "=", "output_log_prob", ".", "unsqueeze", "(", "2", ")", "\n", "cross_entropy_loss", "=", "-", "torch", ".", "bmm", "(", "smoothed_labels", ",", "output_log_prob", ")", "\n", "return", "cross_entropy_loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.loss_ops.DeepExpectation.forward": [[54, 61], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.softmax", "torch.softmax", "torch.softmax", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "target.size"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["    ", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "index", "=", "torch", ".", "tensor", "(", "[", "v", "+", "1", "for", "v", "in", "range", "(", "target", ".", "size", "(", "1", ")", ")", "]", ")", ".", "cuda", "(", "output", ".", "device", ")", "\n", "output_prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "output_expec", "=", "(", "output_prob", "*", "index", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "target_expec", "=", "(", "target", "*", "index", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "(", "torch", ".", "norm", "(", "target_expec", "-", "output_expec", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_seed": [[9, 18], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "setup_seed", "(", "seed", "=", "20211117", ")", ":", "\n", "# there are still other seed to set, NASBenchDataset", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.setup.setup_logger": [[19, 43], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.exists", "open", "open.close", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.remove"], "function", ["None"], ["", "def", "setup_logger", "(", "save_path", "=", "None", ",", "mode", "=", "'a'", ")", "->", "logging", ".", "Logger", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(asctime)s]: %(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "save_path", ")", "\n", "", "log_file", "=", "open", "(", "save_path", ",", "'w'", ")", "\n", "log_file", ".", "close", "(", ")", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "save_path", ",", "mode", "=", "mode", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.__init__": [[45, 47], ["metric.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.reset": [[48, 53], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update": [[54, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_accuracy": [[5, 12], ["target.size", "output.topk", "target.topk", "pred.eq().sum", "float", "torch.true_divide", "torch.true_divide", "pred.eq"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["def", "compute_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "batch_sz", "=", "target", ".", "size", "(", "0", ")", "# both target and output are b_sz * n_class", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "_", ",", "label", "=", "target", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "label", ")", ".", "sum", "(", ")", "\n", "\n", "return", "float", "(", "torch", ".", "true_divide", "(", "correct", ",", "batch_sz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric._sign": [[14, 21], ["isinstance", "metric._sign"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.utils.metric._sign"], ["", "def", "_sign", "(", "number", ")", ":", "\n", "    ", "if", "isinstance", "(", "number", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "[", "_sign", "(", "v", ")", "for", "v", "in", "number", "]", "\n", "", "if", "number", ">=", "0.0", ":", "\n", "        ", "return", "1", "\n", "", "elif", "number", "<", "0.0", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_kendall_tau": [[23, 41], ["pred_score.squeeze.squeeze", "len", "range", "len", "len", "range", "metric._sign", "metric._sign"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.utils.metric._sign", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric._sign"], ["", "", "def", "compute_kendall_tau", "(", "pred_score", ",", "score", ")", ":", "\n", "    ", "'''\n    Kendall Tau is a metric to measure the ordinal association between two measured quantities.\n    Refer to https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient\n    '''", "\n", "\n", "pred_score", "=", "pred_score", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "assert", "len", "(", "pred_score", ")", "==", "len", "(", "score", ")", ",", "\"Sequence a and b should have the same length while computing kendall tau.\"", "\n", "\n", "length", "=", "len", "(", "pred_score", ")", "\n", "count", "=", "0", "\n", "total", "=", "0", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "length", ")", ":", "\n", "            ", "count", "+=", "_sign", "(", "pred_score", "[", "i", "]", "-", "pred_score", "[", "j", "]", ")", "*", "_sign", "(", "score", "[", "i", "]", "-", "score", "[", "j", "]", ")", "\n", "total", "+=", "1", "\n", "", "", "Ktau", "=", "count", "/", "total", "\n", "return", "Ktau", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.saver.save_checkpoint": [[6, 32], ["os.path.join", "model.state_dict", "optimizer.state_dict", "os.path.dirname", "open", "torch.save", "shutil.copyfile"], "function", ["None"], ["def", "save_checkpoint", "(", "save_path", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "args", ",", "\n", "epoch", ",", "\n", "distri_list", ",", "\n", "is_best", "=", "False", ")", ":", "\n", "    ", "save_state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'args'", ":", "args", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'distri'", ":", "distri_list", ",", "\n", "'lr_scheduler'", ":", "lr_scheduler", ".", "__dict__", "\n", "}", "\n", "\n", "best_model_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "dirname", "(", "save_path", ")", ",", "\n", "'ckp_best.pth.tar'", ")", "\n", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "torch", ".", "save", "(", "save_state", ",", "f", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "save_path", ",", "best_model_path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler.__init__": [[11, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "lr_mul", ",", "d_model", ",", "n_warmup_steps", ")", ":", "\n", "        ", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "lr_mul", "=", "lr_mul", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_warmup_steps", "=", "n_warmup_steps", "\n", "self", ".", "n_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler.update_lr": [[18, 20], ["optim.LRScheduler._update_learning_rate"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler._update_learning_rate"], ["", "def", "update_lr", "(", "self", ")", ":", "\n", "        ", "self", ".", "_update_learning_rate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler._get_lr_scale": [[21, 26], ["min"], "methods", ["None"], ["", "def", "_get_lr_scale", "(", "self", ")", ":", "\n", "        ", "d_model", "=", "self", ".", "d_model", "\n", "n_steps", ",", "n_warmup_steps", "=", "self", ".", "n_steps", ",", "self", ".", "n_warmup_steps", "\n", "return", "(", "d_model", "**", "-", "0.5", ")", "*", "min", "(", "n_steps", "**", "(", "-", "0.5", ")", ",", "\n", "n_steps", "*", "n_warmup_steps", "**", "(", "-", "1.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler._update_learning_rate": [[27, 35], ["optim.LRScheduler._get_lr_scale"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler._get_lr_scale"], ["", "def", "_update_learning_rate", "(", "self", ")", ":", "\n", "        ", "''' Learning rate scheduling per step '''", "\n", "\n", "self", ".", "n_steps", "+=", "1", "\n", "lr", "=", "self", ".", "lr_mul", "*", "self", ".", "_get_lr_scale", "(", ")", "\n", "\n", "for", "param_group", "in", "self", ".", "_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.__init__": [[20, 39], ["torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros", "torch.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "flag_tier", ",", "name_tier", ",", "n_arch_patch", "=", "19", ",", "d_patch_vec", "=", "512", ",", "space", "=", "'nasbench'", ")", ":", "\n", "\n", "        ", "assert", "flag_tier", "==", "Bucket", ".", "n_tier", ",", "\"tier flag should be the same with the number of the Bucket instances\"", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "flag_tier", "=", "flag_tier", "\n", "self", ".", "name_tier", "=", "name_tier", "\n", "self", ".", "_n_arch_patch", "=", "n_arch_patch", "\n", "self", ".", "_d_patch_vec", "=", "d_patch_vec", "\n", "\n", "self", ".", "_total_bucket_emb", "=", "torch", ".", "zeros", "(", "\n", "n_arch_patch", ",", "d_patch_vec", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "self", ".", "current_bucket_emb", "=", "torch", ".", "zeros", "(", "\n", "n_arch_patch", ",", "d_patch_vec", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "self", ".", "counts_dict", "=", "{", "}", "\n", "\n", "self", ".", "_emb_count", "=", "0", "\n", "\n", "Bucket", ".", "n_tier", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_bucket_emb": [[40, 42], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_bucket_emb", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "current_bucket_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_bucket_counts": [[43, 45], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_bucket_counts", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "counts_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.updata_bucket_emb": [[46, 61], ["input_emb.size", "input_emb.sum", "input_emb.size", "input_emb.size", "bucket.Bucket._total_bucket_emb.cuda", "bucket.Bucket.current_bucket_emb.size"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "updata_bucket_emb", "(", "self", ",", "input_emb", ")", ":", "\n", "        ", "assert", "self", ".", "_n_arch_patch", "==", "input_emb", ".", "size", "(", "1", ")", ",", "\"Wrong patch length\"", "\n", "assert", "self", ".", "_d_patch_vec", "==", "input_emb", ".", "size", "(", "2", ")", ",", "\"Wrong patch embedding dimension\"", "\n", "n_input_emb", "=", "input_emb", ".", "size", "(", "0", ")", "\n", "\n", "if", "input_emb", ".", "is_cuda", ":", "\n", "            ", "self", ".", "_total_bucket_emb", "=", "self", ".", "_total_bucket_emb", ".", "cuda", "(", "input_emb", ".", "device", ")", "\n", "\n", "", "added_input_emb", "=", "input_emb", ".", "sum", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "_total_bucket_emb", "+=", "added_input_emb", "\n", "self", ".", "_emb_count", "+=", "n_input_emb", "\n", "\n", "self", ".", "current_bucket_emb", "=", "self", ".", "_total_bucket_emb", "/", "self", ".", "_emb_count", "\n", "\n", "assert", "self", ".", "current_bucket_emb", ".", "size", "(", "0", ")", "==", "1", ",", "\"The length of bucket emb dimension should be 1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.update_counts_dict": [[62, 70], ["None"], "methods", ["None"], ["", "def", "update_counts_dict", "(", "self", ",", "params", ",", "flops", ",", "y", ")", ":", "\n", "        ", "self", ".", "counts_dict", "[", "'params'", "]", "=", "params", "\n", "self", ".", "counts_dict", "[", "'flops'", "]", "=", "flops", "\n", "\n", "if", "self", ".", "space", "==", "'nasbench'", ":", "\n", "            ", "self", ".", "counts_dict", "[", "'n_nodes'", "]", "=", "y", "\n", "", "if", "self", ".", "space", "==", "'nasbench201'", ":", "\n", "            ", "self", ".", "counts_dict", "[", "'edges'", "]", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.emb_count": [[71, 74], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "emb_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_emb_count", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier": [[75, 78], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_n_tier", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "n_tier", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.reset_n_tier": [[79, 82], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "reset_n_tier", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "n_tier", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.__del__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "Bucket", ".", "n_tier", "-=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode_201.feature_tensor_encoding_201": [[23, 67], ["torch.tensor", "nasbench201.str2lists", "enumerate", "len", "len", "feature_tensor_list.append", "enumerate", "torch.cat", "torch.tensor", "NODE_TYPE_DICT.values", "coordi_list.append", "copy.deepcopy().unsqueeze", "zip", "torch.zeros", "torch.zeros", "enumerate", "feature_tensor_list.append", "feature_tensor_list.append", "torch.cat.size", "opt_flops.values", "opt_params.values", "zip", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.api_201.str2lists", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["def", "feature_tensor_encoding_201", "(", "arch", ":", "dict", ",", "\n", "arch_feature_dim", "=", "4", ",", "\n", "arch_feature_channels", "=", "31", ")", ":", "\n", "\n", "    ", "matrix", "=", "arch", "[", "'cell_adjacency'", "]", "\n", "assert", "len", "(", "matrix", ")", "==", "arch_feature_dim", ",", "'Wrong length of adjacency matrix'", "\n", "matrix", "=", "torch", ".", "tensor", "(", "matrix", ")", "\n", "\n", "arch_str", "=", "arch", "[", "'arch_str'", "]", "\n", "arch_opt_list", "=", "str2lists", "(", "arch_str", ")", "\n", "coordi_list", "=", "[", "]", "\n", "edges_type_counts", "=", "[", "0", "]", "*", "len", "(", "NODE_TYPE_DICT", ".", "values", "(", ")", ")", "\n", "for", "col_id", ",", "node_ops", "in", "enumerate", "(", "arch_opt_list", ",", "start", "=", "1", ")", ":", "\n", "        ", "for", "op", "in", "node_ops", ":", "\n", "            ", "coordi_list", ".", "append", "(", "[", "op", "[", "1", "]", ",", "col_id", "]", ")", "\n", "edges_type_counts", "[", "NODE_TYPE_DICT", "[", "op", "[", "0", "]", "]", "]", "+=", "1", "\n", "# [start_node, end_node] [[0, 1], [0, 2], [1, 2], [0, 3], [1, 3], [2, 3]]", "\n", "\n", "", "", "all_type_tensors_list", "=", "{", "}", "\n", "\n", "for", "net_type", "in", "[", "'cifar10-valid'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", ":", "\n", "        ", "opt_flops", "=", "arch", "[", "'{}_opt_flops'", ".", "format", "(", "net_type", ")", "]", "\n", "opt_params", "=", "arch", "[", "'{}_opt_params'", ".", "format", "(", "net_type", ")", "]", "\n", "feature_tensor_list", "=", "[", "]", "\n", "feature_tensor_list", ".", "append", "(", "copy", ".", "deepcopy", "(", "matrix", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "for", "cell_id", ",", "(", "flops", ",", "params", ")", "in", "enumerate", "(", "\n", "zip", "(", "opt_flops", ".", "values", "(", ")", ",", "opt_params", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "f_patch", "=", "torch", ".", "zeros", "(", "arch_feature_dim", ",", "arch_feature_dim", ")", "\n", "p_patch", "=", "torch", ".", "zeros", "(", "arch_feature_dim", ",", "arch_feature_dim", ")", "\n", "for", "edge_id", ",", "(", "coord", ",", "edge_flops", ",", "edge_params", ")", "in", "enumerate", "(", "\n", "zip", "(", "coordi_list", ",", "flops", ",", "params", ")", ")", ":", "\n", "                ", "f_patch", "[", "coord", "[", "0", "]", "]", "[", "coord", "[", "1", "]", "]", "=", "edge_flops", "\n", "p_patch", "[", "coord", "[", "0", "]", "]", "[", "coord", "[", "1", "]", "]", "=", "edge_params", "\n", "\n", "", "feature_tensor_list", ".", "append", "(", "f_patch", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "feature_tensor_list", ".", "append", "(", "p_patch", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "arch_feature_tensor", "=", "torch", ".", "cat", "(", "feature_tensor_list", ",", "dim", "=", "0", ")", "\n", "assert", "arch_feature_tensor", ".", "size", "(", "\n", "0", ")", "==", "arch_feature_channels", ",", "'Wrong arch feature_channels'", "\n", "\n", "all_type_tensors_list", "[", "net_type", "]", "=", "arch_feature_tensor", "\n", "\n", "", "return", "all_type_tensors_list", ",", "torch", ".", "tensor", "(", "edges_type_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.seq_to_arch.seq_decode_to_arch": [[13, 44], ["numpy.zeros", "enumerate", "opt.append", "zip", "zip", "opt.append"], "function", ["None"], ["def", "seq_decode_to_arch", "(", "seq", ")", ":", "\n", "    ", "n_nodes", "=", "seq", "[", "0", "]", "\n", "\n", "opt", "=", "[", "INPUT", "]", "\n", "matrix", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "output_node", "=", "seq", "[", "2", "*", "(", "n_nodes", "-", "2", ")", "+", "1", "]", "\n", "inter_nodes", "=", "seq", "[", "1", ":", "2", "*", "(", "n_nodes", "-", "2", ")", "+", "1", "]", "\n", "inter_nodes_edges", "=", "inter_nodes", "[", ":", ":", "2", "]", "\n", "inter_nodes_type", "=", "inter_nodes", "[", "1", ":", ":", "2", "]", "\n", "remain_edges", "=", "seq", "[", "2", "*", "(", "n_nodes", "-", "2", ")", "+", "2", ":", "]", "\n", "\n", "for", "end_node", ",", "(", "begin_node", ",", "\n", "opt_type", ")", "in", "enumerate", "(", "zip", "(", "inter_nodes_edges", ",", "\n", "inter_nodes_type", ")", ",", "\n", "start", "=", "1", ")", ":", "\n", "        ", "opt", ".", "append", "(", "NODE_TYPE", "[", "opt_type", "]", ")", "\n", "matrix", "[", "begin_node", "]", "[", "end_node", "]", "=", "1", "\n", "\n", "", "opt", ".", "append", "(", "OUTPUT", ")", "\n", "matrix", "[", "output_node", "]", "[", "n_nodes", "-", "1", "]", "=", "1", "\n", "\n", "# remain edges", "\n", "re_start_ndoes", "=", "remain_edges", "[", ":", ":", "2", "]", "\n", "re_end_nodes", "=", "remain_edges", "[", "1", ":", ":", "2", "]", "\n", "for", "(", "begin_node", ",", "end_node", ")", "in", "zip", "(", "re_start_ndoes", ",", "re_end_nodes", ")", ":", "\n", "        ", "if", "begin_node", "==", "None", "or", "end_node", "==", "None", ":", "\n", "            ", "continue", "\n", "", "matrix", "[", "begin_node", "]", "[", "end_node", "]", "=", "1", "\n", "\n", "", "return", "matrix", ",", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.seq_to_arch.edges_to_str": [[46, 58], ["list", "str_list.append", "map", "str"], "function", ["None"], ["", "def", "edges_to_str", "(", "total_edges_list", ":", "list", ")", ":", "\n", "\n", "    ", "str_list", "=", "[", "]", "\n", "for", "node_edges", "in", "total_edges_list", ":", "\n", "        ", "node_str_list", "=", "list", "(", "\n", "map", "(", "lambda", "item", ":", "item", "[", "0", "]", "+", "'~'", "+", "str", "(", "item", "[", "1", "]", ")", ",", "\n", "[", "item", "for", "item", "in", "node_edges", "]", ")", ")", "\n", "str_list", ".", "append", "(", "'|'", "+", "'|'", ".", "join", "(", "node_str_list", ")", "+", "'|'", ")", "\n", "\n", "", "arch_str", "=", "'+'", ".", "join", "(", "str_list", ")", "\n", "\n", "return", "arch_str", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.adjacency_matrix_padding": [[20, 41], ["isinstance", "range", "torch.nn.functional.pad", "pad_matrix.transpose.transpose", "pad_matrix.transpose.transpose", "range", "len"], "function", ["None"], ["def", "adjacency_matrix_padding", "(", "matrix", ",", "arch_feature_dim", ",", "num_vertices", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "\n", "matrix", ",", "torch", ".", "Tensor", ")", ",", "'adjacency matrix type should be torch.Tensor'", "\n", "\n", "pad_matrix", "=", "matrix", "\n", "\n", "for", "_", "in", "range", "(", "arch_feature_dim", "-", "num_vertices", ")", ":", "\n", "\n", "        ", "pd", "=", "(", "0", ",", "1", ",", "0", ",", "1", ")", "\n", "pad_matrix", "=", "F", ".", "pad", "(", "pad_matrix", ",", "pd", ",", "'constant'", ",", "0", ")", "\n", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "pad_matrix", ")", ")", "]", "\n", "index", "[", "-", "2", "]", ",", "index", "[", "-", "1", "]", "=", "index", "[", "-", "1", "]", ",", "index", "[", "-", "2", "]", "\n", "\n", "pad_matrix", "=", "pad_matrix", "[", "index", "]", "\n", "pad_matrix", "=", "pad_matrix", ".", "transpose", "(", "0", ",", "1", ")", "\n", "pad_matrix", "=", "pad_matrix", "[", "index", "]", "\n", "pad_matrix", "=", "pad_matrix", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "return", "pad_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.vector_padding": [[43, 60], ["isinstance", "range", "torch.nn.functional.pad", "range", "len"], "function", ["None"], ["", "def", "vector_padding", "(", "vector", ",", "arch_feature_dim", ",", "num_vertices", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "vector", ",", "\n", "torch", ".", "Tensor", ")", ",", "'vector type should be torch.Tensor'", "\n", "\n", "pad_vector", "=", "vector", "\n", "\n", "for", "_", "in", "range", "(", "arch_feature_dim", "-", "num_vertices", ")", ":", "\n", "\n", "        ", "pd", "=", "(", "0", ",", "1", ")", "\n", "pad_vector", "=", "F", ".", "pad", "(", "pad_vector", ",", "pd", ",", "'constant'", ",", "0", ")", "\n", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "pad_vector", ")", ")", "]", "\n", "index", "[", "-", "2", "]", ",", "index", "[", "-", "1", "]", "=", "index", "[", "-", "1", "]", ",", "index", "[", "-", "2", "]", "\n", "pad_vector", "=", "pad_vector", "[", "index", "]", "\n", "\n", "", "return", "pad_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.feature_tensor_encoding": [[62, 109], ["len", "torch.tensor", "torch.tensor", "torch.mul", "torch.mul.unsqueeze", "enumerate", "arch_encode.adjacency_matrix_padding", "arch_encode.vector_padding", "zip", "torch.tensor", "torch.tensor", "torch.true_divide", "torch.true_divide", "torch.mul().unsqueeze", "torch.mul().unsqueeze", "torch.cat", "len", "arch_encode.vector_padding", "arch_encode.vector_padding", "torch.mul", "torch.mul"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.adjacency_matrix_padding", "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.vector_padding", "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.vector_padding", "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.vector_padding"], ["", "def", "feature_tensor_encoding", "(", "arch", ":", "dict", ",", "\n", "arch_feature_dim", "=", "7", ",", "\n", "arch_feature_channels", "=", "19", ")", ":", "\n", "\n", "    ", "matrix", "=", "arch", "[", "'module_adjacency'", "]", "\n", "ops", "=", "arch", "[", "'module_operations'", "]", "\n", "vertex_flops_dict_", "=", "arch", "[", "'vertex_flops'", "]", "\n", "vertex_params_dict_", "=", "arch", "[", "'vertex_params'", "]", "\n", "\n", "num_vertices", "=", "len", "(", "matrix", ")", "\n", "\n", "ops_vector", "=", "torch", ".", "tensor", "(", "[", "type_dict", "[", "v", "]", "for", "v", "in", "ops", "]", ")", "\n", "matrix", "=", "torch", ".", "tensor", "(", "matrix", ")", "\n", "\n", "if", "num_vertices", "<", "arch_feature_dim", ":", "\n", "        ", "matrix", "=", "adjacency_matrix_padding", "(", "matrix", ",", "arch_feature_dim", ",", "\n", "num_vertices", ")", "\n", "ops_vector", "=", "vector_padding", "(", "ops_vector", ",", "arch_feature_dim", ",", "num_vertices", ")", "\n", "\n", "", "ops_vector_matrix", "=", "torch", ".", "mul", "(", "matrix", ",", "ops_vector", ")", "\n", "\n", "arch_feature", "=", "ops_vector_matrix", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "for", "_", ",", "(", "fk", ",", "pk", ")", "in", "enumerate", "(", "zip", "(", "vertex_flops_dict_", ",", "vertex_params_dict_", ")", ")", ":", "\n", "\n", "        ", "cell_flops", "=", "torch", ".", "tensor", "(", "vertex_flops_dict_", "[", "fk", "]", ")", "\n", "cell_params", "=", "torch", ".", "tensor", "(", "vertex_params_dict_", "[", "pk", "]", ")", "\n", "\n", "cell_flops", "=", "torch", ".", "true_divide", "(", "cell_flops", ",", "1e7", ")", "\n", "cell_params", "=", "torch", ".", "true_divide", "(", "cell_params", ",", "1e5", ")", "\n", "\n", "if", "num_vertices", "<", "arch_feature_dim", ":", "\n", "            ", "cell_flops", "=", "vector_padding", "(", "cell_flops", ",", "arch_feature_dim", ",", "\n", "num_vertices", ")", "\n", "cell_params", "=", "vector_padding", "(", "cell_params", ",", "arch_feature_dim", ",", "\n", "num_vertices", ")", "\n", "\n", "", "cell_flops_matrix", "=", "torch", ".", "mul", "(", "matrix", ",", "cell_flops", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "cell_params_matrix", "=", "torch", ".", "mul", "(", "matrix", ",", "cell_params", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "arch_feature", "=", "torch", ".", "cat", "(", "\n", "[", "arch_feature", ",", "cell_flops_matrix", ",", "cell_params_matrix", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "assert", "len", "(", "\n", "arch_feature", "\n", ")", "==", "arch_feature_channels", ",", "'Wrong channels of arch feature tensor'", "\n", "return", "arch_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.ModelSpec.__init__": [[17, 53], ["numpy.shape", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model_spec.ModelSpec._prune", "isinstance", "numpy.array", "ValueError", "len", "ValueError", "model_spec.is_upper_triangular", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.ModelSpec._prune", "home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.is_upper_triangular"], ["def", "__init__", "(", "self", ",", "matrix", ",", "ops", ",", "data_format", "=", "'channels_last'", ")", ":", "\n", "    ", "\"\"\"Initialize the module spec.\n\n    Args:\n      matrix: ndarray or nested list with shape [V, V] for the adjacency matrix.\n      ops: V-length list of labels for the base ops used. The first and last\n        elements are ignored because they are the input and output vertices\n        which have no operations. The elements are retained to keep consistent\n        indexing.\n      data_format: channels_last or channels_first.\n\n    Raises:\n      ValueError: invalid matrix or ops\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "matrix", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "matrix", "=", "np", ".", "array", "(", "matrix", ")", "\n", "", "shape", "=", "np", ".", "shape", "(", "matrix", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", "or", "shape", "[", "0", "]", "!=", "shape", "[", "1", "]", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be square'", ")", "\n", "", "if", "shape", "[", "0", "]", "!=", "len", "(", "ops", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'length of ops must match matrix dimensions'", ")", "\n", "", "if", "not", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "      ", "raise", "ValueError", "(", "'matrix must be upper triangular'", ")", "\n", "\n", "# Both the original and pruned matrices are deep copies of the matrix and", "\n", "# ops so any changes to those after initialization are not recognized by the", "\n", "# spec.", "\n", "", "self", ".", "original_matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "original_ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "\n", "self", ".", "matrix", "=", "copy", ".", "deepcopy", "(", "matrix", ")", "\n", "self", ".", "ops", "=", "copy", ".", "deepcopy", "(", "ops", ")", "\n", "self", ".", "valid_spec", "=", "True", "\n", "self", ".", "_prune", "(", ")", "\n", "\n", "self", ".", "data_format", "=", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.ModelSpec._prune": [[54, 104], ["set", "set", "set().difference", "numpy.delete", "numpy.delete", "sorted", "numpy.shape", "frontier.pop", "range", "frontier.pop", "range", "set.intersection", "len", "list", "list", "set", "set.add", "frontier.append", "set.add", "frontier.append", "range"], "methods", ["None"], ["", "def", "_prune", "(", "self", ")", ":", "\n", "    ", "\"\"\"Prune the extraneous parts of the graph.\n\n    General procedure:\n      1) Remove parts of graph not connected to input.\n      2) Remove parts of graph not connected to output.\n      3) Reorder the vertices so that they are consecutive after steps 1 and 2.\n\n    These 3 steps can be combined by deleting the rows and columns of the\n    vertices that are not reachable from both the input and output (in reverse).\n    \"\"\"", "\n", "num_vertices", "=", "np", ".", "shape", "(", "self", ".", "original_matrix", ")", "[", "0", "]", "\n", "\n", "# DFS forward from input", "\n", "visited_from_input", "=", "set", "(", "[", "0", "]", ")", "\n", "frontier", "=", "[", "0", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "top", "+", "1", ",", "num_vertices", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "top", ",", "v", "]", "and", "v", "not", "in", "visited_from_input", ":", "\n", "          ", "visited_from_input", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# DFS backward from output", "\n", "", "", "", "visited_from_output", "=", "set", "(", "[", "num_vertices", "-", "1", "]", ")", "\n", "frontier", "=", "[", "num_vertices", "-", "1", "]", "\n", "while", "frontier", ":", "\n", "      ", "top", "=", "frontier", ".", "pop", "(", ")", "\n", "for", "v", "in", "range", "(", "0", ",", "top", ")", ":", "\n", "        ", "if", "self", ".", "original_matrix", "[", "v", ",", "top", "]", "and", "v", "not", "in", "visited_from_output", ":", "\n", "          ", "visited_from_output", ".", "add", "(", "v", ")", "\n", "frontier", ".", "append", "(", "v", ")", "\n", "\n", "# Any vertex that isn't connected to both input and output is extraneous to", "\n", "# the computation graph.", "\n", "", "", "", "extraneous", "=", "set", "(", "range", "(", "num_vertices", ")", ")", ".", "difference", "(", "\n", "visited_from_input", ".", "intersection", "(", "visited_from_output", ")", ")", "\n", "\n", "# If the non-extraneous graph is less than 2 vertices, the input is not", "\n", "# connected to the output and the spec is invalid.", "\n", "if", "len", "(", "extraneous", ")", ">", "num_vertices", "-", "2", ":", "\n", "      ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "ops", "=", "None", "\n", "self", ".", "valid_spec", "=", "False", "\n", "return", "\n", "\n", "", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "matrix", "=", "np", ".", "delete", "(", "self", ".", "matrix", ",", "list", "(", "extraneous", ")", ",", "axis", "=", "1", ")", "\n", "for", "index", "in", "sorted", "(", "extraneous", ",", "reverse", "=", "True", ")", ":", "\n", "      ", "del", "self", ".", "ops", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.ModelSpec.hash_spec": [[105, 118], ["graph_util.hash_module", "valid_opt_list.index"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.graph_util.hash_module"], ["", "", "def", "hash_spec", "(", "self", ",", "valid_opt_list", ":", "list", ")", ":", "\n", "    ", "\"\"\"Computes the isomorphism-invariant graph hash of this spec.\n\n    Args:\n      canonical_ops: list of operations in the VALID_OPERATIONS ordering.\n      ['conv3x3-bn-relu', 'conv1x1-bn-relu', 'maxpool3x3']\n\n    Returns:\n      MD5 hash of this spec which can be used to query the dataset.\n    \"\"\"", "\n", "# Invert the operations back to integer label indices used in graph gen.", "\n", "labeling", "=", "[", "-", "1", "]", "+", "[", "valid_opt_list", ".", "index", "(", "op", ")", "for", "op", "in", "self", ".", "ops", "[", "1", ":", "-", "1", "]", "]", "+", "[", "-", "2", "]", "\n", "return", "hash_module", "(", "self", ".", "matrix", ",", "labeling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.is_upper_triangular": [[119, 127], ["range", "range", "numpy.shape"], "function", ["None"], ["", "", "def", "is_upper_triangular", "(", "matrix", ")", ":", "\n", "  ", "\"\"\"True if matrix is 0 on diagonal and below.\"\"\"", "\n", "for", "src", "in", "range", "(", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", ")", ":", "\n", "    ", "for", "dst", "in", "range", "(", "0", ",", "src", "+", "1", ")", ":", "\n", "      ", "if", "matrix", "[", "src", ",", "dst", "]", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.graph_util.hash_module": [[11, 44], ["numpy.sum().tolist", "numpy.sum().tolist", "list", "range", "hashlib.md5().hexdigest", "numpy.shape", "len", "len", "len", "zip", "hashlib.md5().hexdigest", "range", "numpy.sum", "numpy.sum", "new_hashes.append", "hashlib.md5", "hashlib.md5", "hashlib.md5().hexdigest", "str().encode", "str().encode", "range", "range", "hashlib.md5", "str", "str", "sorted", "sorted", "sorted"], "function", ["None"], ["def", "hash_module", "(", "matrix", ",", "labeling", ")", ":", "\n", "  ", "\"\"\"Computes a graph-invariance MD5 hash of the matrix and label pair.\n\n  Args:\n    matrix: np.ndarray square upper-triangular adjacency matrix.\n    labeling: list of int labels of length equal to both dimensions of\n      matrix.\n\n  Returns:\n    MD5 hash of the matrix and labeling.\n  \"\"\"", "\n", "vertices", "=", "np", ".", "shape", "(", "matrix", ")", "[", "0", "]", "\n", "in_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "out_edges", "=", "np", ".", "sum", "(", "matrix", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "assert", "len", "(", "in_edges", ")", "==", "len", "(", "out_edges", ")", "==", "len", "(", "labeling", ")", "\n", "hashes", "=", "list", "(", "zip", "(", "out_edges", ",", "in_edges", ",", "labeling", ")", ")", "\n", "hashes", "=", "[", "hashlib", ".", "md5", "(", "str", "(", "h", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "for", "h", "in", "hashes", "]", "\n", "# Computing this up to the diameter is probably sufficient but since the", "\n", "# operation is fast, it is okay to repeat more times.", "\n", "for", "_", "in", "range", "(", "vertices", ")", ":", "\n", "    ", "new_hashes", "=", "[", "]", "\n", "for", "v", "in", "range", "(", "vertices", ")", ":", "\n", "      ", "in_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "w", ",", "v", "]", "]", "\n", "out_neighbors", "=", "[", "hashes", "[", "w", "]", "for", "w", "in", "range", "(", "vertices", ")", "if", "matrix", "[", "v", ",", "w", "]", "]", "\n", "new_hashes", ".", "append", "(", "hashlib", ".", "md5", "(", "\n", "(", "''", ".", "join", "(", "sorted", "(", "in_neighbors", ")", ")", "+", "'|'", "+", "\n", "''", ".", "join", "(", "sorted", "(", "out_neighbors", ")", ")", "+", "'|'", "+", "\n", "hashes", "[", "v", "]", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", ")", "\n", "", "hashes", "=", "new_hashes", "\n", "", "fingerprint", "=", "hashlib", ".", "md5", "(", "str", "(", "sorted", "(", "hashes", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n", "return", "fingerprint", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.__init__": [[28, 32], ["nasbench_database.NASBenchDataBase._load_json_file"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase._load_json_file"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "archs", "=", "{", "}", "\n", "\n", "self", ".", "_load_json_file", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._load_json_file": [[33, 48], ["print", "time.time", "f.close", "nasbench_database.NASBenchDataBase._sort", "print", "open", "json.load", "time.time"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201._sort"], ["", "def", "_load_json_file", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "print", "(", "'Loading nasbench101 dataset from file'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "for", "arch", "in", "dataset", ":", "\n", "            ", "self", ".", "archs", "[", "arch", "[", "'unique_hash'", "]", "]", "=", "arch", "\n", "\n", "", "self", ".", "_sort", "(", ")", "\n", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in {:.4f} seconds'", ".", "format", "(", "elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._sort": [[49, 58], ["nasbench_database.NASBenchDataBase.archs.items", "sorted", "enumerate", "sorted.append"], "methods", ["None"], ["", "def", "_sort", "(", "self", ")", ":", "\n", "        ", "sorted_list", "=", "[", "]", "\n", "for", "hash_key", ",", "arch", "in", "self", ".", "archs", ".", "items", "(", ")", ":", "\n", "            ", "sorted_list", ".", "append", "(", "(", "hash_key", ",", "arch", "[", "'avg_test_accuracy'", "]", ")", ")", "\n", "\n", "", "sorted_list", "=", "sorted", "(", "sorted_list", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "rank", ",", "(", "hash", ",", "_", ")", "in", "enumerate", "(", "sorted_list", ",", "start", "=", "1", ")", ":", "\n", "            ", "self", ".", "archs", "[", "hash", "]", "[", "'rank'", "]", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._check_spec": [[59, 78], ["len", "numpy.sum", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["None"], ["", "", "def", "_check_spec", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "        ", "\"\"\"Checks that the model spec is within the dataset.\"\"\"", "\n", "if", "not", "model_spec", ".", "valid_spec", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid spec, provided graph is disconnected.'", ")", "\n", "\n", "", "num_vertices", "=", "len", "(", "model_spec", ".", "ops", ")", "\n", "num_edges", "=", "np", ".", "sum", "(", "model_spec", ".", "matrix", ")", "\n", "\n", "if", "num_vertices", ">", "MODULE_VERTICES", ":", "\n", "            ", "raise", "ValueError", "(", "'too many vertices.'", ")", "\n", "", "if", "num_edges", ">", "MAX_EDGES", ":", "\n", "            ", "raise", "ValueError", "(", "'too many edges.'", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "0", "]", "!=", "INPUT", ":", "\n", "            ", "raise", "ValueError", "(", "'first operation should be \\'input\\''", ")", "\n", "", "if", "model_spec", ".", "ops", "[", "-", "1", "]", "!=", "OUTPUT", ":", "\n", "            ", "raise", "ValueError", "(", "'last operation should be \\'output\\''", ")", "\n", "", "for", "op", "in", "model_spec", ".", "ops", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "if", "op", "not", "in", "VALID_OPERATIONS", ":", "\n", "                ", "raise", "ValueError", "(", "'unsupported op.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._hash_spec": [[79, 82], ["model_spec.hash_spec"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.model_spec.ModelSpec.hash_spec"], ["", "", "", "def", "_hash_spec", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "        ", "\"\"\"Returns the MD5 hash for a provided model_spec.\"\"\"", "\n", "return", "model_spec", ".", "hash_spec", "(", "VALID_OPERATIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.query_by_hash": [[83, 86], ["copy.deepcopy"], "methods", ["None"], ["", "def", "query_by_hash", "(", "self", ",", "arch_hash", ")", ":", "\n", "        ", "arch_data_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "archs", "[", "arch_hash", "]", ")", "\n", "return", "arch_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.query_by_spec": [[87, 92], ["nasbench_database.NASBenchDataBase._check_spec", "nasbench_database.NASBenchDataBase._hash_spec", "nasbench_database.NASBenchDataBase.query_by_hash"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._check_spec", "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._hash_spec", "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.query_by_hash"], ["", "def", "query_by_spec", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "        ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "arch_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "\n", "return", "self", ".", "query_by_hash", "(", "arch_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.check_arch_inside_dataset": [[93, 103], ["nasbench_database.NASBenchDataBase._hash_spec", "nasbench_database.NASBenchDataBase.query_by_hash", "nasbench_database.NASBenchDataBase._check_spec", "list", "nasbench_database.NASBenchDataBase.archs.keys"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._hash_spec", "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.query_by_hash", "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase._check_spec"], ["", "def", "check_arch_inside_dataset", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_check_spec", "(", "model_spec", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "return", "None", "\n", "\n", "", "arch_hash", "=", "self", ".", "_hash_spec", "(", "model_spec", ")", "\n", "if", "arch_hash", "not", "in", "list", "(", "self", ".", "archs", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "query_by_hash", "(", "arch_hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.hash_iterator": [[104, 106], ["nasbench_database.NASBenchDataBase.archs.keys"], "methods", ["None"], ["", "def", "hash_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "archs", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.size": [[107, 110], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "archs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_dataset.NASBenchDataset.__init__": [[11, 17], ["torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "list", "nasbench_dataset.NASBenchDataset.database.hash_iterator", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.hash_iterator"], ["    ", "def", "__init__", "(", "self", ",", "database", ":", "NASBenchDataBase", ",", "seed", ")", ":", "\n", "        ", "self", ".", "database", "=", "database", "\n", "g_cpu", "=", "torch", ".", "Generator", "(", ")", "\n", "g_cpu", ".", "manual_seed", "(", "seed", ")", "\n", "self", ".", "index_list", "=", "torch", ".", "randperm", "(", "self", ".", "database", ".", "size", ",", "generator", "=", "g_cpu", ")", ".", "tolist", "(", ")", "\n", "self", ".", "keys_list", "=", "list", "(", "self", ".", "database", ".", "hash_iterator", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_dataset.NASBenchDataset.__getitem__": [[19, 32], ["nasbench_dataset.NASBenchDataset.database.query_by_hash", "architecture.feature_tensor_encoding", "len", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_database.NASBenchDataBase.query_by_hash", "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode.feature_tensor_encoding"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "model_hash", "=", "self", ".", "keys_list", "[", "self", ".", "index_list", "[", "index", "]", "]", "\n", "arch", "=", "self", ".", "database", ".", "query_by_hash", "(", "model_hash", ")", "\n", "\n", "arch_feature", "=", "feature_tensor_encoding", "(", "copy", ".", "deepcopy", "(", "arch", ")", ")", "\n", "validation_accuracy", "=", "arch", "[", "'avg_validation_accuracy'", "]", "\n", "test_accuracy", "=", "arch", "[", "'avg_test_accuracy'", "]", "\n", "params", "=", "arch", "[", "'trainable_parameters'", "]", "\n", "flops", "=", "arch", "[", "'flops'", "]", "\n", "n_nodes", "=", "len", "(", "arch", "[", "'module_adjacency'", "]", ")", "\n", "rank", "=", "arch", "[", "'rank'", "]", "\n", "\n", "return", "arch_feature", ",", "validation_accuracy", ",", "test_accuracy", ",", "params", ",", "flops", ",", "n_nodes", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_dataset.NASBenchDataset.query_stats_by_spec": [[34, 44], ["nasbench_dataset.NASBenchDataset.database.check_arch_inside_dataset", "nasbench_dataset.NASBenchDataset.keys_list.index", "nasbench_dataset.NASBenchDataset.index_list.index"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.check_arch_inside_dataset"], ["", "def", "query_stats_by_spec", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "        ", "arch_dict", "=", "self", ".", "database", ".", "check_arch_inside_dataset", "(", "model_spec", ")", "\n", "if", "arch_dict", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "model_hash", "=", "arch_dict", "[", "'unique_hash'", "]", "\n", "hash_list_idx", "=", "self", ".", "keys_list", ".", "index", "(", "model_hash", ")", "\n", "index_list_idx", "=", "self", ".", "index_list", ".", "index", "(", "hash_list_idx", ")", "\n", "\n", "return", "arch_dict", "[", "'flops'", "]", ",", "arch_dict", "[", "'trainable_parameters'", "]", ",", "index_list_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench.nasbench_dataset.NASBenchDataset.__len__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "database", ".", "size", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.api_201.str2lists": [[9, 34], ["arch_str.split", "enumerate", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "function", ["None"], ["def", "str2lists", "(", "arch_str", ":", "Text", ")", "->", "List", "[", "tuple", "]", ":", "\n", "    ", "\"\"\"\n    This function shows how to read the string-based architecture encoding.\n      It is the same as the `str2structure` func in `AutoDL-Projects/lib/models/cell_searchs/genotypes.py`\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n    :return: a list of tuple, contains multiple (op, input_node_index) pairs.\n\n    :usage\n      arch = api.str2lists( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      print ('there are {:} nodes in this arch'.format(len(arch)+1)) # arch is a list\n      for i, node in enumerate(arch):\n        print('the {:}-th node is the sum of these {:} nodes with op: {:}'.format(i+1, len(node), node))\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "genotypes", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_dataset.NASBench201Dataset.__init__": [[12, 20], ["torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "list", "nasbench201_dataset.NASBench201Dataset.database.index_iterator", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.index_iterator"], ["    ", "def", "__init__", "(", "self", ",", "database", ":", "NASBench201DataBase", ",", "seed", ")", ":", "\n", "        ", "self", ".", "database", "=", "database", "\n", "g_cpu", "=", "torch", ".", "Generator", "(", ")", "\n", "g_cpu", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "self", ".", "index_list", "=", "torch", ".", "randperm", "(", "self", ".", "database", ".", "size", ",", "\n", "generator", "=", "g_cpu", ")", ".", "tolist", "(", ")", "\n", "self", ".", "keys_list", "=", "list", "(", "self", ".", "database", ".", "index_iterator", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_dataset.NASBench201Dataset.__getitem__": [[21, 52], ["nasbench201_dataset.NASBench201Dataset.database.query_by_id", "architecture.feature_tensor_encoding_201", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.query_by_id", "home.repos.pwc.inspect_result.albertipot_nar.architecture.arch_encode_201.feature_tensor_encoding_201"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "arch_id", "=", "self", ".", "keys_list", "[", "self", ".", "index_list", "[", "index", "]", "]", "\n", "arch", "=", "self", ".", "database", ".", "query_by_id", "(", "arch_id", ")", "\n", "arch_feature", ",", "edges_type_counts", "=", "feature_tensor_encoding_201", "(", "copy", ".", "deepcopy", "(", "arch", ")", ")", "\n", "\n", "network_data", "=", "{", "}", "\n", "for", "net_type", "in", "[", "'cifar10-valid'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", ":", "\n", "            ", "params", "=", "arch", "[", "'{}_total_params'", ".", "format", "(", "net_type", ")", "]", "\n", "flops", "=", "arch", "[", "'{}_total_flops'", ".", "format", "(", "net_type", ")", "]", "\n", "# n_edges = arch['{}']", "\n", "\n", "if", "net_type", "==", "'cifar10-valid'", ":", "\n", "                ", "val_acc", "=", "arch", "[", "'cifar10_val_acc'", "]", "\n", "test_acc", "=", "arch", "[", "'cifar10_test_acc'", "]", "\n", "rank", "=", "arch", "[", "'cifar10_rank'", "]", "\n", "\n", "network_data", "[", "'cifar10'", "]", "=", "(", "arch_feature", "[", "net_type", "]", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ")", "\n", "", "elif", "net_type", "==", "'ImageNet16-120'", ":", "\n", "                ", "val_acc", "=", "arch", "[", "'imagenet16_val_acc'", "]", "\n", "test_acc", "=", "arch", "[", "'imagenet16_test_acc'", "]", "\n", "rank", "=", "arch", "[", "'imagenet16_rank'", "]", "\n", "\n", "network_data", "[", "'imagenet16'", "]", "=", "(", "arch_feature", "[", "net_type", "]", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ")", "\n", "", "else", ":", "\n", "                ", "val_acc", "=", "arch", "[", "'cifar100_val_acc'", "]", "\n", "test_acc", "=", "arch", "[", "'cifar100_test_acc'", "]", "\n", "rank", "=", "arch", "[", "'cifar100_rank'", "]", "\n", "\n", "network_data", "[", "'cifar100'", "]", "=", "(", "arch_feature", "[", "net_type", "]", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ")", "\n", "\n", "", "", "return", "network_data", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_dataset.NASBench201Dataset.query_arch_by_str": [[53, 69], ["nasbench201_dataset.NASBench201Dataset.database.check_arch_inside_dataset", "nasbench201_dataset.NASBench201Dataset.keys_list.index", "nasbench201_dataset.NASBench201Dataset.index_list.index"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.check_arch_inside_dataset"], ["", "def", "query_arch_by_str", "(", "self", ",", "arch_str", ":", "str", ",", "network_type", ")", ":", "\n", "        ", "assert", "network_type", "in", "[", "\n", "'cifar10-valid'", ",", "'cifar100'", ",", "'ImageNet16-120'", "\n", "]", ",", "'The network_type arg should choose from cifar10-valid,cifar100,ImageNet16-120'", "\n", "\n", "arch_key", "=", "self", ".", "database", ".", "check_arch_inside_dataset", "(", "arch_str", ")", "\n", "if", "arch_key", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "keys_list_idx", "=", "self", ".", "keys_list", ".", "index", "(", "arch_key", ")", "\n", "index_list_idx", "=", "self", ".", "index_list", ".", "index", "(", "keys_list_idx", ")", "\n", "\n", "flops", "=", "self", ".", "database", ".", "archs", "[", "arch_key", "]", "[", "'{}_total_flops'", ".", "format", "(", "network_type", ")", "]", "\n", "params", "=", "self", ".", "database", ".", "archs", "[", "arch_key", "]", "[", "'{}_total_params'", ".", "format", "(", "network_type", ")", "]", "\n", "\n", "return", "flops", ",", "params", ",", "index_list_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_dataset.NASBench201Dataset.__len__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "database", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.__init__": [[7, 11], ["nasbench201_database.NASBench201DataBase._load_json_file"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase._load_json_file"], ["    ", "def", "__init__", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "archs", "=", "{", "}", "\n", "\n", "self", ".", "_load_json_file", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase._load_json_file": [[12, 29], ["print", "time.time", "f.close", "nasbench201_database.NASBench201DataBase._sort", "print", "open", "json.load", "time.time", "nasbench201_database.NASBench201DataBase.archs.values"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201._sort"], ["", "def", "_load_json_file", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "print", "(", "'Loading nasbench201 dataset from file'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "f", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "self", ".", "archs", "=", "dataset", "\n", "\n", "self", ".", "_sort", "(", ")", "\n", "self", ".", "arch_str_lists", "=", "[", "\n", "arch", "[", "'arch_str'", "]", "for", "arch", "in", "self", ".", "archs", ".", "values", "(", ")", "\n", "]", "\n", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'Loaded dataset in {:.4f} seconds'", ".", "format", "(", "elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.query_by_id": [[30, 33], ["copy.deepcopy"], "methods", ["None"], ["", "def", "query_by_id", "(", "self", ",", "arch_id", ")", ":", "\n", "        ", "arch_data_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "archs", "[", "arch_id", "]", ")", "\n", "return", "arch_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase._sort": [[34, 47], ["nasbench201_database.NASBench201DataBase.archs.items", "sorted", "enumerate", "sorted.append"], "methods", ["None"], ["", "def", "_sort", "(", "self", ")", ":", "\n", "        ", "for", "network_type", "in", "[", "'cifar10'", ",", "'cifar100'", ",", "'imagenet16'", "]", ":", "\n", "            ", "sorted_list", "=", "[", "]", "\n", "for", "id", ",", "arch", "in", "self", ".", "archs", ".", "items", "(", ")", ":", "\n", "                ", "sorted_list", ".", "append", "(", "\n", "(", "id", ",", "arch", "[", "'{}_test_acc'", ".", "format", "(", "network_type", ")", "]", ")", ")", "\n", "\n", "", "sorted_list", "=", "sorted", "(", "sorted_list", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "for", "rank", ",", "(", "id", ",", "_", ")", "in", "enumerate", "(", "sorted_list", ",", "start", "=", "1", ")", ":", "\n", "                ", "self", ".", "archs", "[", "id", "]", "[", "'{}_rank'", ".", "format", "(", "network_type", ")", "]", "=", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.index_iterator": [[48, 50], ["nasbench201_database.NASBench201DataBase.archs.keys"], "methods", ["None"], ["", "", "", "def", "index_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "archs", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.check_arch_inside_dataset": [[51, 56], ["str", "nasbench201_database.NASBench201DataBase.arch_str_lists.index"], "methods", ["None"], ["", "def", "check_arch_inside_dataset", "(", "self", ",", "arch_str", ":", "str", ")", ":", "\n", "        ", "if", "arch_str", "not", "in", "self", ".", "arch_str_lists", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "self", ".", "arch_str_lists", ".", "index", "(", "arch_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size": [[57, 60], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "archs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_val.train_epoch": [[10, 87], ["time.time", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "model.train", "train_utils.init_tier_list", "enumerate", "logger.info", "architecture.Bucket.get_n_tier", "time.time", "arch_feature.float().cuda.float().cuda", "val_acc.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "n_nodes.float().cuda.float().cuda", "label.cuda.cuda", "train_utils.get_tier_emb", "optimizer.zero_grad", "model", "criterion", "writter.add_scalar", "criterion.backward", "lr_scheduler.update_lr", "writter.add_scalar", "optimizer.step", "train_utils.classify_enc_emb_by_target", "train_utils.classify_tier_counts_by_target", "train_utils.get_batch_statics", "distri_list.append", "utils.metric.compute_accuracy", "writter.add_scalar", "arch_feature.float().cuda.size", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "logger.info", "time.time", "len", "aux_criterion", "enc_output.clone().detach", "train_utils.compare_kl_div", "writter.add_scalars", "len", "arch_feature.float().cuda.float", "val_acc.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "n_nodes.float().cuda.float", "torch.any", "torch.any", "val_acc_pred.squeeze", "copy.deepcopy", "time.time", "torch.isnan", "torch.isinf", "enc_output.clone"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler.update_lr", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_target", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_target", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_batch_statics", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_accuracy", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.compare_kl_div"], ["def", "train_epoch", "(", "model", ",", "train_dataloader", ",", "criterion", ",", "aux_criterion", ",", "optimizer", ",", "lr_scheduler", ",", "\n", "device", ",", "args", ",", "logger", ",", "writter", ",", "epoch", ",", "flag", ")", ":", "\n", "\n", "    ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_iter", "=", "(", "args", ".", "ranker_epochs", "-", "args", ".", "start_epochs", ")", "*", "len", "(", "train_dataloader", ")", "-", "1", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_loss", "=", "AverageMeter", "(", ")", "\n", "batch_acc", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "distri_list", "=", "[", "]", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "for", "it", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "total_iter", "=", "epoch", "*", "len", "(", "train_dataloader", ")", "+", "it", "\n", "\n", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "n_nodes", ",", "rank", ",", "label", "=", "batch", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "val_acc", "=", "val_acc", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "n_nodes", "=", "n_nodes", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "label", "=", "label", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "\n", "if", "aux_criterion", ":", "\n", "            ", "aux_loss", "=", "aux_criterion", "(", "val_acc_pred", ".", "squeeze", "(", "1", ")", ",", "val_acc", ")", "\n", "loss", "+=", "args", ".", "loss_factor", "*", "aux_loss", "\n", "\n", "", "writter", ".", "add_scalar", "(", "'{}/iter_loss'", ".", "format", "(", "flag", ")", ",", "loss", ",", "total_iter", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lr_scheduler", ".", "update_lr", "(", ")", "\n", "writter", ".", "add_scalar", "(", "'{}/iter_lr'", ".", "format", "(", "flag", ")", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "total_iter", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "classify_enc_emb_by_target", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "label", ")", "\n", "classify_tier_counts_by_target", "(", "params", ",", "flops", ",", "n_nodes", ",", "tier_list", ",", "label", ",", "args", ".", "bins", ")", "\n", "batch_statics_dict", "=", "get_batch_statics", "(", "tier_list", ")", "\n", "distri_list", ".", "append", "(", "batch_statics_dict", ")", "\n", "\n", "for", "k", "in", "batch_statics_dict", ":", "\n", "            ", "candi_dic", "=", "compare_kl_div", "(", "copy", ".", "deepcopy", "(", "batch_statics_dict", "[", "k", "]", ")", ")", "\n", "writter", ".", "add_scalars", "(", "'{}/{}_div'", ".", "format", "(", "flag", ",", "k", ")", ",", "candi_dic", ",", "total_iter", ")", "\n", "\n", "", "acc", "=", "compute_accuracy", "(", "output", ",", "label", ")", "\n", "writter", ".", "add_scalar", "(", "'{}/iter_accuracy'", ".", "format", "(", "flag", ")", ",", "acc", ",", "total_iter", ")", "\n", "\n", "b_sz", "=", "arch_feature", ".", "size", "(", "0", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start", ",", "n", "=", "1", ")", "\n", "batch_loss", ".", "update", "(", "loss", ",", "b_sz", ")", "\n", "batch_acc", ".", "update", "(", "acc", ",", "b_sz", ")", "\n", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}][Iter:{:4d}/{:4d}] Time: {:.2f} ({:.2f}) Acc: {:.4f} ({:.4f}) Loss: {:.6f} ({:.6f})'", ".", "format", "(", "\n", "flag", ",", "epoch", ",", "\n", "total_iter", ",", "all_iter", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "batch_acc", ".", "val", ",", "batch_acc", ".", "avg", ",", "\n", "batch_loss", ".", "val", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}] Time: {:.2f} Epoch Acc: {:.4f} Epoch Loss: {:.6f}'", ".", "format", "(", "flag", ",", "epoch", ",", "epoch_time", ",", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "return", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ",", "distri_list", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_val.validate": [[88, 143], ["time.time", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "model.eval", "train_utils.init_tier_list", "enumerate", "logger.info", "len", "architecture.Bucket.get_n_tier", "time.time", "arch_feature.float().cuda.float().cuda", "val_acc.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "n_nodes.float().cuda.float().cuda", "label.cuda.cuda", "train_utils.get_tier_emb", "model", "criterion", "train_utils.classify_enc_emb_by_target", "utils.metric.compute_accuracy", "arch_feature.float().cuda.size", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "logger.info", "time.time", "aux_criterion", "enc_output.clone().detach", "arch_feature.float().cuda.float", "val_acc.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "n_nodes.float().cuda.float", "torch.any", "torch.any", "val_acc_pred.squeeze", "time.time", "torch.isnan", "torch.isinf", "enc_output.clone"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_target", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_accuracy", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "validate", "(", "model", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "epoch", ",", "flag", ")", ":", "\n", "    ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "total_iter", "=", "len", "(", "val_dataloader", ")", "-", "1", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_loss", "=", "AverageMeter", "(", ")", "\n", "batch_acc", "=", "AverageMeter", "(", ")", "\n", "batch_ktau", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "for", "it", ",", "batch", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "n_nodes", ",", "rank", ",", "label", "=", "batch", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "val_acc", "=", "val_acc", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "n_nodes", "=", "n_nodes", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "label", "=", "label", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "\n", "if", "aux_criterion", ":", "\n", "            ", "aux_loss", "=", "aux_criterion", "(", "val_acc_pred", ".", "squeeze", "(", "1", ")", ",", "val_acc", ")", "\n", "loss", "+=", "args", ".", "loss_factor", "*", "aux_loss", "\n", "\n", "", "classify_enc_emb_by_target", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "label", ")", "\n", "\n", "acc", "=", "compute_accuracy", "(", "output", ",", "label", ")", "\n", "\n", "b_sz", "=", "arch_feature", ".", "size", "(", "0", ")", "\n", "batch_loss", ".", "update", "(", "loss", ",", "b_sz", ")", "\n", "batch_acc", ".", "update", "(", "acc", ",", "b_sz", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start", ",", "n", "=", "1", ")", "\n", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}][Iter:{:2d}/{:2d}] Time: {:.2f} ({:.2f}) Acc: {:.4f} ({:.4f}) Loss: {:.6f} ({:.6f})'", ".", "format", "(", "\n", "flag", ",", "epoch", ",", "\n", "it", ",", "total_iter", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "batch_acc", ".", "val", ",", "batch_acc", ".", "avg", ",", "\n", "batch_loss", ".", "val", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}] Time: {:.2f} Epoch Acc: {:.4f} Epoch Loss: {:.6f}'", ".", "format", "(", "flag", ",", "epoch", ",", "epoch_time", ",", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "return", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.process.sample.evaluate_sampled_batch": [[12, 139], ["time.time", "int", "sampler.sample_arch", "random.choices", "random.shuffle", "dataset.SplitSubet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.eval", "enumerate", "logger.info", "writer.add_scalar", "len", "list", "len", "arch_feature.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "n_nodes.float().cuda.float().cuda", "train_utils.get_tier_emb", "model", "torch.softmax", "train_utils.classify_enc_emb_by_pred", "train_utils.classify_tier_counts_by_pred", "torch.topk", "torch.topk", "torch.topk", "index.squeeze.squeeze", "torch.where", "torch.where", "torch.where", "torch.topk", "torch.topk", "torch.topk", "min", "max", "torch.topk", "torch.topk", "torch.topk", "min", "max", "torch.topk", "torch.topk", "torch.topk", "min", "max", "torch.topk", "torch.topk", "torch.topk", "min", "max", "torch.topk", "torch.topk", "torch.topk", "results_tpk1.append", "results_tpk5.append", "results_tpk3.append", "results_tpk7.append", "results_tpk10.append", "sorted", "sorted", "sorted", "sorted", "sorted", "len", "len", "time.time", "enumerate", "len", "range", "enc_output.clone().detach", "len", "arch_feature.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "n_nodes.float().cuda.float", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "val_acc_pred.squeeze", "val.squeeze", "tpk1_test_acc.item", "tpk1_rank.item", "max.item", "min.item", "max.item", "min.item", "max.item", "min.item", "max.item", "min.item", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "enc_output.clone"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.sample_arch", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_pred", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_pred"], ["def", "evaluate_sampled_batch", "(", "model", ",", "sampler", ":", "ArchSampler", ",", "tier_list", ",", "batch_statics_dict", ",", "dataset", ":", "NASBenchDataset", ",", "it", ",", "args", ",", "device", ",", "writer", ",", "logger", ",", "flag", ")", ":", "\n", "\n", "    ", "sample_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "sample_size", "=", "int", "(", "args", ".", "sampler", ".", "sample_size", "*", "(", "1", "-", "args", ".", "sampler", ".", "noisy_factor", ")", ")", "\n", "kl_thred", "=", "[", "\n", "args", ".", "sampler", ".", "flops_kl_thred", ",", "\n", "args", ".", "sampler", ".", "params_kl_thred", "\n", "]", "\n", "\n", "# sample from entire dataset", "\n", "sampled_arch", ",", "sampled_arch_datast_idx", "=", "sampler", ".", "sample_arch", "(", "batch_statics_dict", ",", "sample_size", ",", "dataset", ",", "kl_thred", ",", "args", ".", "sampler", ".", "max_trails", ",", "args", ".", "sampler", ".", "force_uniform", ")", "\n", "sampled_arch_datast_idx", "=", "[", "v", "for", "_", ",", "v", "in", "enumerate", "(", "sampled_arch_datast_idx", ")", "if", "v", "!=", "None", "]", "\n", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'{}/number_sampled_archs'", ".", "format", "(", "flag", ")", ",", "len", "(", "sampled_arch_datast_idx", ")", ",", "it", ")", "\n", "\n", "# complement", "\n", "", "noisy_len", "=", "args", ".", "sampler", ".", "sample_size", "-", "len", "(", "sampled_arch_datast_idx", ")", "\n", "noisy_samples", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ",", "k", "=", "noisy_len", ")", "\n", "sampled_arch_datast_idx", "+=", "noisy_samples", "\n", "\n", "random", ".", "shuffle", "(", "sampled_arch_datast_idx", ")", "# in_place", "\n", "assert", "len", "(", "sampled_arch_datast_idx", ")", "==", "args", ".", "sampler", ".", "sample_size", ",", "'Not enough sampled dataset'", "\n", "\n", "sampled_trainset", "=", "SplitSubet", "(", "dataset", ",", "sampled_arch_datast_idx", ")", "\n", "sampled_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "sampled_trainset", ",", "\n", "batch_size", "=", "args", ".", "sampler", ".", "search_size", ",", "# train on sampled dataset, but the sampler batchsize", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "results_tpk1", "=", "[", "]", "\n", "results_tpk3", "=", "[", "]", "\n", "results_tpk5", "=", "[", "]", "\n", "results_tpk7", "=", "[", "]", "\n", "results_tpk10", "=", "[", "]", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "sampled_dataloader", ")", ":", "\n", "\n", "        ", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "n_nodes", ",", "rank", ",", "label", "=", "batch", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "n_nodes", "=", "n_nodes", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "classify_enc_emb_by_pred", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "prob", ")", "\n", "classify_tier_counts_by_pred", "(", "params", ",", "flops", ",", "n_nodes", ",", "tier_list", ",", "prob", ",", "args", ".", "bins", ")", "\n", "\n", "# find best pred arch", "\n", "val", ",", "index", "=", "torch", ".", "topk", "(", "prob", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "idx", "=", "torch", ".", "where", "(", "index", "==", "0", ")", "\n", "\n", "t1_test_acc", "=", "test_acc", "[", "idx", "]", "\n", "t1_rank", "=", "rank", "[", "idx", "]", "\n", "\n", "if", "args", ".", "aux_loss", ":", "\n", "            ", "t1_pred_val_acc", "=", "val_acc_pred", ".", "squeeze", "(", "1", ")", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "t1_pred_val_acc", "=", "val", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "[", "idx", "]", "\n", "\n", "\n", "# evaluate by pred val acc", "\n", "", "_", ",", "tpk5_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "5", ")", "\n", "tpk5_rank", "=", "t1_rank", "[", "tpk5_idx", "]", "\n", "tpk5_test_acc", "=", "t1_test_acc", "[", "tpk5_idx", "]", "\n", "tpk5_best_rank", "=", "min", "(", "tpk5_rank", ")", "\n", "tpk5_best_test_acc", "=", "max", "(", "tpk5_test_acc", ")", "\n", "\n", "_", ",", "tpk3_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "3", ")", "\n", "tpk3_rank", "=", "t1_rank", "[", "tpk3_idx", "]", "\n", "tpk3_test_acc", "=", "t1_test_acc", "[", "tpk3_idx", "]", "\n", "tpk3_best_rank", "=", "min", "(", "tpk3_rank", ")", "\n", "tpk3_best_test_acc", "=", "max", "(", "tpk3_test_acc", ")", "\n", "\n", "_", ",", "tpk7_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "7", ")", "\n", "tpk7_rank", "=", "t1_rank", "[", "tpk7_idx", "]", "\n", "tpk7_test_acc", "=", "t1_test_acc", "[", "tpk7_idx", "]", "\n", "tpk7_best_rank", "=", "min", "(", "tpk7_rank", ")", "\n", "tpk7_best_test_acc", "=", "max", "(", "tpk7_test_acc", ")", "\n", "\n", "_", ",", "tpk10_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "10", ")", "\n", "tpk10_rank", "=", "t1_rank", "[", "tpk10_idx", "]", "\n", "tpk10_test_acc", "=", "t1_test_acc", "[", "tpk10_idx", "]", "\n", "tpk10_best_rank", "=", "min", "(", "tpk10_rank", ")", "\n", "tpk10_best_test_acc", "=", "max", "(", "tpk10_test_acc", ")", "\n", "\n", "_", ",", "tpk1_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "1", ")", "\n", "tpk1_rank", "=", "t1_rank", "[", "tpk1_idx", "]", "\n", "tpk1_test_acc", "=", "t1_test_acc", "[", "tpk1_idx", "]", "\n", "\n", "results_tpk1", ".", "append", "(", "(", "tpk1_test_acc", ".", "item", "(", ")", ",", "tpk1_rank", ".", "item", "(", ")", ")", ")", "\n", "results_tpk5", ".", "append", "(", "(", "tpk5_best_test_acc", ".", "item", "(", ")", ",", "tpk5_best_rank", ".", "item", "(", ")", ")", ")", "\n", "results_tpk3", ".", "append", "(", "(", "tpk3_best_test_acc", ".", "item", "(", ")", ",", "tpk3_best_rank", ".", "item", "(", ")", ")", ")", "\n", "results_tpk7", ".", "append", "(", "(", "tpk7_best_test_acc", ".", "item", "(", ")", ",", "tpk7_best_rank", ".", "item", "(", ")", ")", ")", "\n", "results_tpk10", ".", "append", "(", "(", "tpk10_best_test_acc", ".", "item", "(", ")", ",", "tpk10_best_rank", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "(", "best_acc_at1", ",", "best_rank_at1", ")", "=", "sorted", "(", "results_tpk1", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "(", "best_acc_at5", ",", "best_rank_at5", ")", "=", "sorted", "(", "results_tpk5", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "(", "best_acc_at3", ",", "best_rank_at3", ")", "=", "sorted", "(", "results_tpk3", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "(", "best_acc_at7", ",", "best_rank_at7", ")", "=", "sorted", "(", "results_tpk7", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "(", "best_acc_at10", ",", "best_rank_at10", ")", "=", "sorted", "(", "results_tpk10", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "\n", "best_rank_percentage_at1", "=", "best_rank_at1", "/", "len", "(", "dataset", ")", "\n", "best_rank_percentage_at5", "=", "best_rank_at5", "/", "len", "(", "dataset", ")", "\n", "\n", "\n", "sample_time", "=", "time", ".", "time", "(", ")", "-", "sample_start", "\n", "logger", ".", "info", "(", "'[{}][iter:{:2d}] Time: {:.2f} Test Acc@top5: {:.8f} Rank: {:5d}(top {:6.2%}) | Test Acc@top1: {:.8f} Rank: {:5d}(top {:6.2%})'", ".", "format", "(", "\n", "flag", ",", "it", "-", "args", ".", "ranker_epochs", ",", "\n", "sample_time", ",", "\n", "best_acc_at5", ",", "\n", "best_rank_at5", ",", "\n", "best_rank_percentage_at5", ",", "\n", "best_acc_at1", ",", "\n", "best_rank_at1", ",", "\n", "best_rank_percentage_at1", ")", ")", "\n", "\n", "return", "best_acc_at1", ",", "best_rank_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_acc_at3", ",", "best_rank_at3", ",", "best_acc_at7", ",", "best_rank_at7", ",", "best_acc_at10", ",", "best_rank_at10", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_val201.train_epoch_201": [[10, 86], ["time.time", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "model.train", "train_utils.init_tier_list", "enumerate", "logger.info", "architecture.Bucket.get_n_tier", "time.time", "arch_feature.float().cuda.float().cuda", "val_acc.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "edges_type_counts.float().cuda.float().cuda", "label.cuda.cuda", "train_utils.get_tier_emb", "optimizer.zero_grad", "model", "criterion", "writter.add_scalar", "criterion.backward", "lr_scheduler.update_lr", "writter.add_scalar", "optimizer.step", "train_utils.classify_enc_emb_by_target", "train_utils.classify_tier_counts_by_target_201", "train_utils.get_batch_statics", "distri_list.append", "utils.metric.compute_accuracy", "writter.add_scalar", "arch_feature.float().cuda.size", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "logger.info", "time.time", "len", "aux_criterion", "enc_output.clone().detach", "train_utils.compare_kl_div", "writter.add_scalars", "len", "arch_feature.float().cuda.float", "val_acc.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "edges_type_counts.float().cuda.float", "torch.any", "torch.any", "val_acc_pred.squeeze", "copy.deepcopy", "time.time", "torch.isnan", "torch.isinf", "enc_output.clone"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.utils.optim.LRScheduler.update_lr", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_target", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_target_201", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_batch_statics", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_accuracy", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.compare_kl_div"], ["def", "train_epoch_201", "(", "model", ",", "train_dataloader", ",", "criterion", ",", "aux_criterion", ",", "optimizer", ",", "lr_scheduler", ",", "\n", "device", ",", "args", ",", "logger", ",", "writter", ",", "epoch", ",", "flag", ")", ":", "\n", "\n", "    ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "all_iter", "=", "(", "args", ".", "ranker_epochs", "-", "args", ".", "start_epochs", ")", "*", "len", "(", "train_dataloader", ")", "-", "1", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_loss", "=", "AverageMeter", "(", ")", "\n", "batch_acc", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "distri_list", "=", "[", "]", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "\n", "for", "it", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "total_iter", "=", "epoch", "*", "len", "(", "train_dataloader", ")", "+", "it", "\n", "\n", "(", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ",", "label", ")", "=", "batch", "[", "args", ".", "network_type", "]", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "val_acc", "=", "val_acc", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "edges_type_counts", "=", "edges_type_counts", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "label", "=", "label", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "if", "aux_criterion", ":", "\n", "            ", "aux_loss", "=", "aux_criterion", "(", "val_acc_pred", ".", "squeeze", "(", "1", ")", ",", "val_acc", ")", "\n", "loss", "+=", "args", ".", "loss_factor", "*", "aux_loss", "\n", "\n", "", "writter", ".", "add_scalar", "(", "'{}/iter_loss'", ".", "format", "(", "flag", ")", ",", "loss", ",", "total_iter", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lr_scheduler", ".", "update_lr", "(", ")", "\n", "writter", ".", "add_scalar", "(", "'{}/iter_lr'", ".", "format", "(", "flag", ")", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "total_iter", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "classify_enc_emb_by_target", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "label", ")", "\n", "classify_tier_counts_by_target_201", "(", "params", ",", "flops", ",", "edges_type_counts", ",", "tier_list", ",", "label", ",", "args", ".", "bins", ")", "\n", "batch_statics_dict", "=", "get_batch_statics", "(", "tier_list", ")", "\n", "distri_list", ".", "append", "(", "batch_statics_dict", ")", "\n", "\n", "for", "k", "in", "batch_statics_dict", ":", "\n", "            ", "candi_dic", "=", "compare_kl_div", "(", "copy", ".", "deepcopy", "(", "batch_statics_dict", "[", "k", "]", ")", ")", "\n", "writter", ".", "add_scalars", "(", "'{}/{}_div'", ".", "format", "(", "flag", ",", "k", ")", ",", "candi_dic", ",", "total_iter", ")", "\n", "\n", "", "acc", "=", "compute_accuracy", "(", "output", ",", "label", ")", "\n", "writter", ".", "add_scalar", "(", "'{}/iter_accuracy'", ".", "format", "(", "flag", ")", ",", "acc", ",", "total_iter", ")", "\n", "\n", "b_sz", "=", "arch_feature", ".", "size", "(", "0", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start", ",", "n", "=", "1", ")", "\n", "batch_loss", ".", "update", "(", "loss", ",", "b_sz", ")", "\n", "batch_acc", ".", "update", "(", "acc", ",", "b_sz", ")", "\n", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}][Iter:{:4d}/{:4d}] Time: {:.2f} ({:.2f}) Acc: {:.4f} ({:.4f}) Loss: {:.6f} ({:.6f})'", ".", "format", "(", "\n", "flag", ",", "epoch", ",", "\n", "total_iter", ",", "all_iter", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "batch_acc", ".", "val", ",", "batch_acc", ".", "avg", ",", "\n", "batch_loss", ".", "val", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}] Time: {:.2f} Epoch Acc: {:.4f} Epoch Loss: {:.6f}'", ".", "format", "(", "flag", ",", "epoch", ",", "epoch_time", ",", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "return", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ",", "distri_list", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_val201.validate_201": [[87, 140], ["time.time", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "model.eval", "train_utils.init_tier_list", "enumerate", "logger.info", "len", "architecture.Bucket.get_n_tier", "time.time", "arch_feature.float().cuda.float().cuda", "val_acc.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "edges_type_counts.float().cuda.float().cuda", "label.cuda.cuda", "train_utils.get_tier_emb", "model", "criterion", "train_utils.classify_enc_emb_by_target", "utils.metric.compute_accuracy", "arch_feature.float().cuda.size", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "logger.info", "time.time", "aux_criterion", "enc_output.clone().detach", "arch_feature.float().cuda.float", "val_acc.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "edges_type_counts.float().cuda.float", "torch.any", "torch.any", "val_acc_pred.squeeze", "time.time", "torch.isnan", "torch.isinf", "enc_output.clone"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_n_tier", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_target", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.compute_accuracy", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.albertipot_nar.utils.metric.AverageMeter.update"], ["", "def", "validate_201", "(", "model", ",", "val_dataloader", ",", "criterion", ",", "aux_criterion", ",", "device", ",", "args", ",", "logger", ",", "epoch", ",", "flag", ")", ":", "\n", "    ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "total_iter", "=", "len", "(", "val_dataloader", ")", "-", "1", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "batch_loss", "=", "AverageMeter", "(", ")", "\n", "batch_acc", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "assert", "Bucket", ".", "get_n_tier", "(", ")", "==", "0", ",", "'Bucket counts should be reset to 0'", "\n", "tier_list", "=", "init_tier_list", "(", "args", ")", "\n", "for", "it", ",", "batch", "in", "enumerate", "(", "val_dataloader", ")", ":", "\n", "        ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "(", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ",", "label", ")", "=", "batch", "[", "args", ".", "network_type", "]", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "val_acc", "=", "val_acc", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "edges_type_counts", "=", "edges_type_counts", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "label", "=", "label", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "if", "aux_criterion", ":", "\n", "            ", "aux_loss", "=", "aux_criterion", "(", "val_acc_pred", ".", "squeeze", "(", "1", ")", ",", "val_acc", ")", "\n", "loss", "+=", "args", ".", "loss_factor", "*", "aux_loss", "\n", "\n", "", "classify_enc_emb_by_target", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "label", ")", "\n", "\n", "acc", "=", "compute_accuracy", "(", "output", ",", "label", ")", "\n", "\n", "b_sz", "=", "arch_feature", ".", "size", "(", "0", ")", "\n", "batch_loss", ".", "update", "(", "loss", ",", "b_sz", ")", "\n", "batch_acc", ".", "update", "(", "acc", ",", "b_sz", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "batch_start", ",", "n", "=", "1", ")", "\n", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}][Iter:{:2d}/{:2d}] Time: {:.2f} ({:.2f}) Acc: {:.4f} ({:.4f}) Loss: {:.6f} ({:.6f})'", ".", "format", "(", "\n", "flag", ",", "epoch", ",", "\n", "it", ",", "total_iter", ",", "\n", "batch_time", ".", "val", ",", "batch_time", ".", "avg", ",", "\n", "batch_acc", ".", "val", ",", "batch_acc", ".", "avg", ",", "\n", "batch_loss", ".", "val", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logger", ".", "info", "(", "'[{}][Epoch:{:2d}] Time: {:.2f} Epoch Acc: {:.4f} Epoch Loss: {:.6f}'", ".", "format", "(", "flag", ",", "epoch", ",", "epoch_time", ",", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", ")", ")", "\n", "\n", "return", "batch_acc", ".", "avg", ",", "batch_loss", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.process.sample_201.evaluate_sampled_batch_201": [[12, 131], ["time.time", "int", "sampler.sample_arch", "random.choices", "random.shuffle", "dataset.SplitSubet201", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.eval", "enumerate", "writer.add_scalar", "len", "list", "len", "arch_feature.float().cuda.float().cuda", "params.float().cuda.float().cuda", "flops.float().cuda.float().cuda", "edges_type_counts.float().cuda.float().cuda", "train_utils.get_tier_emb", "model", "torch.softmax", "train_utils.classify_enc_emb_by_pred", "train_utils.classify_tier_counts_by_pred_201", "torch.topk", "torch.topk", "torch.topk", "index.squeeze.squeeze", "torch.where", "torch.where", "torch.where", "logger.info", "logger.info", "enumerate", "len", "range", "enc_output.clone().detach", "val_acc_pred.squeeze", "t1_pred_val_acc.size", "torch.topk", "torch.topk", "torch.topk", "torch.min", "torch.min", "torch.min", "max", "torch.topk", "torch.topk", "torch.topk", "results_tpk1.append", "results_tpk5.append", "len", "len", "sorted", "sorted", "len", "len", "time.time", "len", "arch_feature.float().cuda.float", "params.float().cuda.float", "flops.float().cuda.float", "edges_type_counts.float().cuda.float", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "enc_output.clone", "tpk1_test_acc.item", "tpk1_rank.item", "tpk1_val_acc.item", "max.item", "tpk5_best_rank.item", "tpk5_best_val.item"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.sample_arch", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_pred", "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_pred_201", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["def", "evaluate_sampled_batch_201", "(", "model", ",", "sampler", ":", "ArchSampler201", ",", "tier_list", ",", "batch_statics_dict", ",", "dataset", ":", "NASBench201Dataset", ",", "it", ",", "args", ",", "device", ",", "writer", ",", "logger", ",", "flag", ")", ":", "\n", "\n", "    ", "sample_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "sample_size", "=", "int", "(", "args", ".", "sampler", ".", "sample_size", "*", "(", "1", "-", "args", ".", "sampler", ".", "noisy_factor", ")", ")", "\n", "kl_thred", "=", "[", "\n", "args", ".", "sampler", ".", "flops_kl_thred", ",", "\n", "args", ".", "sampler", ".", "params_kl_thred", ",", "\n", "args", ".", "sampler", ".", "edges_kl_thred", "\n", "]", "\n", "\n", "network_type", "=", "None", "\n", "if", "args", ".", "network_type", "==", "'cifar10'", ":", "\n", "        ", "network_type", "=", "'cifar10-valid'", "\n", "", "if", "args", ".", "network_type", "==", "'cifar100'", ":", "\n", "        ", "network_type", "=", "'cifar100'", "\n", "", "if", "args", ".", "network_type", "==", "'imagenet16'", ":", "\n", "        ", "network_type", "=", "'ImageNet16-120'", "\n", "", "assert", "network_type", ",", "'network type is None'", "\n", "\n", "# sample from entire dataset", "\n", "sampled_arch_datast_idx", "=", "sampler", ".", "sample_arch", "(", "batch_statics_dict", ",", "sample_size", ",", "dataset", ",", "network_type", ",", "kl_thred", ",", "args", ".", "sampler", ".", "max_trails", ",", "args", ".", "sampler", ".", "force_uniform", ")", "\n", "sampled_arch_datast_idx", "=", "[", "v", "for", "_", ",", "v", "in", "enumerate", "(", "sampled_arch_datast_idx", ")", "if", "v", "!=", "None", "]", "\n", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'{}/number_sampled_archs'", ".", "format", "(", "flag", ")", ",", "len", "(", "sampled_arch_datast_idx", ")", ",", "it", ")", "\n", "\n", "# complement", "\n", "", "noisy_len", "=", "args", ".", "sampler", ".", "sample_size", "-", "len", "(", "sampled_arch_datast_idx", ")", "\n", "noisy_samples", "=", "random", ".", "choices", "(", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", ",", "k", "=", "noisy_len", ")", "\n", "sampled_arch_datast_idx", "+=", "noisy_samples", "\n", "\n", "random", ".", "shuffle", "(", "sampled_arch_datast_idx", ")", "# in_place", "\n", "assert", "len", "(", "sampled_arch_datast_idx", ")", "==", "args", ".", "sampler", ".", "sample_size", ",", "'Not enough sampled dataset'", "\n", "\n", "sampled_trainset", "=", "SplitSubet201", "(", "dataset", ",", "sampled_arch_datast_idx", ",", "args", ".", "ranker", ".", "n_tier", ")", "\n", "sampled_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "sampled_trainset", ",", "\n", "batch_size", "=", "args", ".", "sampler", ".", "search_size", ",", "# train on sampled dataset, but the sampler batchsize", "\n", "num_workers", "=", "args", ".", "data_loader_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "results_tpk1", "=", "[", "]", "\n", "results_tpk5", "=", "[", "]", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "sampled_dataloader", ")", ":", "\n", "\n", "        ", "(", "arch_feature", ",", "val_acc", ",", "test_acc", ",", "params", ",", "flops", ",", "edges_type_counts", ",", "rank", ",", "label", ")", "=", "batch", "[", "args", ".", "network_type", "]", "\n", "arch_feature", "=", "arch_feature", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "params", "=", "params", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "flops", "=", "flops", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "edges_type_counts", "=", "edges_type_counts", ".", "float", "(", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "tier_feature", "=", "get_tier_emb", "(", "tier_list", ",", "device", ")", "\n", "assert", "not", "(", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "tier_feature", ")", ")", "or", "torch", ".", "any", "(", "torch", ".", "isinf", "(", "tier_feature", ")", ")", ")", ",", "'tier feature is nan or inf'", "\n", "\n", "output", ",", "enc_output", ",", "val_acc_pred", "=", "model", "(", "arch_feature", ",", "tier_feature", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "classify_enc_emb_by_pred", "(", "enc_output", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "tier_list", ",", "prob", ")", "\n", "classify_tier_counts_by_pred_201", "(", "params", ",", "flops", ",", "edges_type_counts", ",", "tier_list", ",", "prob", ",", "args", ".", "bins", ")", "\n", "\n", "# find best pred arch", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "prob", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "idx", "=", "torch", ".", "where", "(", "index", "==", "0", ")", "\n", "\n", "t1_test_acc", "=", "test_acc", "[", "idx", "]", "\n", "t1_rank", "=", "rank", "[", "idx", "]", "\n", "t1_val_acc", "=", "val_acc", "[", "idx", "]", "\n", "\n", "t1_pred_val_acc", "=", "val_acc_pred", ".", "squeeze", "(", "1", ")", "[", "idx", "]", "\n", "\n", "if", "t1_pred_val_acc", ".", "size", "(", "0", ")", ">=", "5", ":", "\n", "            ", "_", ",", "tpk5_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "5", ")", "\n", "tpk5_rank", "=", "t1_rank", "[", "tpk5_idx", "]", "\n", "tpk5_test_acc", "=", "t1_test_acc", "[", "tpk5_idx", "]", "\n", "tpk5_val_acc", "=", "t1_val_acc", "[", "tpk5_idx", "]", "\n", "\n", "tpk5_best_rank", ",", "tep_id", "=", "torch", ".", "min", "(", "tpk5_rank", ",", "dim", "=", "0", ")", "\n", "tpk5_best_test_acc", "=", "max", "(", "tpk5_test_acc", ")", "\n", "tpk5_best_val", "=", "tpk5_val_acc", "[", "tep_id", "]", "\n", "\n", "_", ",", "tpk1_idx", "=", "torch", ".", "topk", "(", "t1_pred_val_acc", ",", "k", "=", "1", ")", "\n", "tpk1_rank", "=", "t1_rank", "[", "tpk1_idx", "]", "\n", "tpk1_test_acc", "=", "t1_test_acc", "[", "tpk1_idx", "]", "\n", "tpk1_val_acc", "=", "t1_val_acc", "[", "tpk1_idx", "]", "\n", "\n", "results_tpk1", ".", "append", "(", "(", "tpk1_test_acc", ".", "item", "(", ")", ",", "tpk1_rank", ".", "item", "(", ")", ",", "tpk1_val_acc", ".", "item", "(", ")", ")", ")", "\n", "results_tpk5", ".", "append", "(", "(", "tpk5_best_test_acc", ".", "item", "(", ")", ",", "tpk5_best_rank", ".", "item", "(", ")", ",", "tpk5_best_val", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "if", "len", "(", "results_tpk1", ")", "!=", "0", "or", "len", "(", "results_tpk5", ")", "!=", "0", ":", "\n", "        ", "(", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ")", "=", "sorted", "(", "results_tpk1", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "(", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", ")", "=", "sorted", "(", "results_tpk5", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ",", "reverse", "=", "True", ")", "[", "0", "]", "\n", "\n", "best_rank_percentage_at1", "=", "best_rank_at1", "/", "len", "(", "dataset", ")", "\n", "best_rank_percentage_at5", "=", "best_rank_at5", "/", "len", "(", "dataset", ")", "\n", "\n", "\n", "sample_time", "=", "time", ".", "time", "(", ")", "-", "sample_start", "\n", "logger", ".", "info", "(", "'[{}][iter:{:2d}] Time: {:.2f} Test Acc@top5: {:.8f} Rank: {:5d}(top {:6.2%}) Val Acc@top5: {:.8f}| Test Acc@top1: {:.8f} Rank: {:5d}(top{:6.2%}) Val Acc@top5: {:.8f}'", ".", "format", "(", "\n", "flag", ",", "it", "-", "args", ".", "ranker_epochs", ",", "\n", "sample_time", ",", "\n", "best_acc_at5", ",", "\n", "best_rank_at5", ",", "\n", "best_rank_percentage_at5", ",", "\n", "best_val_acc_at5", ",", "\n", "best_acc_at1", ",", "\n", "best_rank_at1", ",", "\n", "best_rank_percentage_at1", ",", "\n", "best_val_acc_at1", ")", ")", "\n", "\n", "return", "best_acc_at1", ",", "best_rank_at1", ",", "best_val_acc_at1", ",", "best_acc_at5", ",", "best_rank_at5", ",", "best_val_acc_at5", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'[{}][iter:{:2d}] No qulalifed arch'", ".", "format", "(", "flag", ",", "it", "-", "args", ".", "ranker_epochs", ")", ")", "\n", "\n", "return", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_target": [[6, 25], ["score.sort", "int", "torch.zeros", "range", "target[].add_"], "function", ["None"], ["def", "get_target", "(", "score", ",", "n_tier", ",", "batch_sz", ")", ":", "\n", "    ", "assert", "batch_sz", ">=", "n_tier", ",", "'batch_sz should be larger than n_tier'", "\n", "\n", "_", ",", "idx", "=", "score", ".", "sort", "(", "descending", "=", "True", ")", "\n", "step", "=", "int", "(", "batch_sz", "/", "n_tier", ")", "\n", "t_flag", "=", "[", "]", "\n", "\n", "target", "=", "torch", ".", "zeros", "(", "batch_sz", ",", "n_tier", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_tier", ")", ":", "\n", "        ", "if", "i", "==", "n_tier", "-", "1", ":", "\n", "            ", "t_flag", "=", "idx", "[", "i", "*", "step", ":", "]", "\n", "", "else", ":", "\n", "            ", "t_flag", "=", "idx", "[", "i", "*", "step", ":", "(", "i", "+", "1", ")", "*", "step", "]", "\n", "\n", "", "for", "j", "in", "t_flag", ":", "\n", "            ", "target", "[", "j", ",", "i", "]", ".", "add_", "(", "1", ")", "\n", "\n", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.init_tier_list": [[26, 38], ["range", "architecture.Bucket", "tier_list.append"], "function", ["None"], ["", "def", "init_tier_list", "(", "args", ")", ":", "\n", "    ", "tier_list", "=", "[", "]", "\n", "# initial tier emb", "\n", "for", "i", "in", "range", "(", "args", ".", "ranker", ".", "n_tier", ")", ":", "\n", "        ", "t", "=", "Bucket", "(", "flag_tier", "=", "i", ",", "\n", "name_tier", "=", "'tier_{}'", ".", "format", "(", "i", "+", "1", ")", ",", "\n", "n_arch_patch", "=", "args", ".", "ranker", ".", "n_arch_patch", ",", "\n", "d_patch_vec", "=", "args", ".", "ranker", ".", "d_patch_vec", ",", "\n", "space", "=", "args", ".", "space", ")", "\n", "tier_list", ".", "append", "(", "t", ")", "\n", "\n", "", "return", "tier_list", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_tier_emb": [[39, 45], ["torch.cat", "tier_emb_list.append", "item.get_bucket_emb().cuda", "item.get_bucket_emb"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_bucket_emb"], ["", "def", "get_tier_emb", "(", "tier_list", ":", "list", ",", "deivce", ")", ":", "\n", "    ", "tier_emb_list", "=", "[", "]", "\n", "for", "item", "in", "tier_list", ":", "\n", "        ", "tier_emb_list", ".", "append", "(", "item", ".", "get_bucket_emb", "(", ")", ".", "cuda", "(", "deivce", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "tier_emb_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_emb_by_target": [[47, 55], ["range", "len", "torch.where", "tier_list[].updata_bucket_emb", "tier_emb.size", "tier_emb.size", "tier_emb.size"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.updata_bucket_emb", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "classify_tier_emb_by_target", "(", "total_embedding_list", ",", "tier_list", ",", "target", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "total_embedding_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "target", "[", ":", ",", "i", "]", "==", "1", ")", "\n", "tier_emb", "=", "total_embedding_list", "[", "i", "]", "[", "idx", "]", "\n", "if", "tier_emb", ".", "size", "(", "0", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "1", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "2", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "tier_list", "[", "i", "]", ".", "updata_bucket_emb", "(", "tier_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_target": [[56, 64], ["range", "len", "torch.where", "tier_list[].updata_bucket_emb", "tier_emb.size", "tier_emb.size", "tier_emb.size"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.updata_bucket_emb", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "", "", "def", "classify_enc_emb_by_target", "(", "enc_output", ",", "tier_list", ",", "target", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "target", "[", ":", ",", "i", "]", "==", "1", ")", "\n", "tier_emb", "=", "enc_output", "[", "idx", "]", "\n", "if", "tier_emb", ".", "size", "(", "0", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "1", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "2", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "tier_list", "[", "i", "]", ".", "updata_bucket_emb", "(", "tier_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_enc_emb_by_pred": [[65, 75], ["torch.topk", "index.squeeze.squeeze", "range", "len", "torch.where", "tier_list[].updata_bucket_emb", "tier_emb.size", "tier_emb.size", "tier_emb.size"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.updata_bucket_emb", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "", "", "def", "classify_enc_emb_by_pred", "(", "enc_output", ",", "tier_list", ",", "pred", ")", ":", "\n", "    ", "_", ",", "index", "=", "torch", ".", "topk", "(", "pred", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "index", "==", "i", ")", "\n", "tier_emb", "=", "enc_output", "[", "idx", "]", "\n", "if", "tier_emb", ".", "size", "(", "0", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "1", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "2", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "tier_list", "[", "i", "]", ".", "updata_bucket_emb", "(", "tier_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_emb_by_pred": [[76, 86], ["torch.topk", "index.squeeze.squeeze", "range", "len", "torch.where", "tier_list[].updata_bucket_emb", "tier_emb.size", "tier_emb.size", "tier_emb.size"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.updata_bucket_emb", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "", "", "def", "classify_tier_emb_by_pred", "(", "total_embedding_list", ",", "tier_list", ",", "pred", ")", ":", "\n", "    ", "_", ",", "index", "=", "torch", ".", "topk", "(", "pred", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "total_embedding_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "index", "==", "i", ")", "\n", "tier_emb", "=", "total_embedding_list", "[", "i", "]", "[", "idx", "]", "\n", "if", "tier_emb", ".", "size", "(", "0", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "1", ")", "==", "0", "or", "tier_emb", ".", "size", "(", "2", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "tier_list", "[", "i", "]", ".", "updata_bucket_emb", "(", "tier_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_target": [[87, 101], ["torch.ceil", "torch.ceil", "range", "max", "min", "max", "min", "max", "min", "len", "torch.where", "build_counts_dict", "build_counts_dict", "build_n_nodes_counts_dict", "tier_list[].update_counts_dict", "params[].tolist", "flops[].tolist", "n_nodes[].tolist", "int", "int"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_n_nodes_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.update_counts_dict"], ["", "", "", "def", "classify_tier_counts_by_target", "(", "params", ",", "flops", ",", "n_nodes", ",", "tier_list", ",", "target", ",", "bins", ")", ":", "\n", "    ", "params", "=", "torch", ".", "ceil", "(", "params", "/", "1e3", ")", "\n", "max_p", ",", "min_p", "=", "max", "(", "params", ")", ",", "min", "(", "params", ")", "\n", "flops", "=", "torch", ".", "ceil", "(", "flops", "/", "1e6", ")", "\n", "max_f", ",", "min_f", "=", "max", "(", "flops", ")", ",", "min", "(", "flops", ")", "\n", "max_n", ",", "min_n", "=", "max", "(", "n_nodes", ")", ",", "min", "(", "n_nodes", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "target", "[", ":", ",", "i", "]", "==", "1", ")", "\n", "\n", "p_counts", "=", "build_counts_dict", "(", "params", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_p", ",", "batch_max", "=", "max_p", ",", "bins", "=", "bins", ",", "scail", "=", "1e3", ")", "\n", "f_counts", "=", "build_counts_dict", "(", "flops", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_f", ",", "batch_max", "=", "max_f", ",", "bins", "=", "bins", ",", "scail", "=", "1e6", ")", "\n", "n_counts", "=", "build_n_nodes_counts_dict", "(", "n_nodes", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "int", "(", "min_n", ")", ",", "batch_max", "=", "int", "(", "max_n", ")", ")", "\n", "tier_list", "[", "i", "]", ".", "update_counts_dict", "(", "p_counts", ",", "f_counts", ",", "n_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_pred": [[102, 118], ["torch.ceil", "torch.ceil", "torch.topk", "index.squeeze.squeeze", "range", "max", "min", "max", "min", "max", "min", "len", "torch.where", "build_counts_dict", "build_counts_dict", "build_n_nodes_counts_dict", "tier_list[].update_counts_dict", "params[].tolist", "flops[].tolist", "n_nodes[].tolist", "int", "int"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_n_nodes_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.update_counts_dict"], ["", "", "def", "classify_tier_counts_by_pred", "(", "params", ",", "flops", ",", "n_nodes", ",", "tier_list", ",", "pred", ",", "bins", ")", ":", "\n", "    ", "params", "=", "torch", ".", "ceil", "(", "params", "/", "1e3", ")", "\n", "max_p", ",", "min_p", "=", "max", "(", "params", ")", ",", "min", "(", "params", ")", "\n", "flops", "=", "torch", ".", "ceil", "(", "flops", "/", "1e6", ")", "\n", "max_f", ",", "min_f", "=", "max", "(", "flops", ")", ",", "min", "(", "flops", ")", "\n", "max_n", ",", "min_n", "=", "max", "(", "n_nodes", ")", ",", "min", "(", "n_nodes", ")", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "pred", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "index", "==", "i", ")", "\n", "\n", "p_counts", "=", "build_counts_dict", "(", "params", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_p", ",", "batch_max", "=", "max_p", ",", "bins", "=", "bins", ",", "scail", "=", "1e3", ")", "\n", "f_counts", "=", "build_counts_dict", "(", "flops", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_f", ",", "batch_max", "=", "max_f", ",", "bins", "=", "bins", ",", "scail", "=", "1e6", ")", "\n", "n_counts", "=", "build_n_nodes_counts_dict", "(", "n_nodes", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "int", "(", "min_n", ")", ",", "batch_max", "=", "int", "(", "max_n", ")", ")", "\n", "tier_list", "[", "i", "]", ".", "update_counts_dict", "(", "p_counts", ",", "f_counts", ",", "n_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_target_201": [[120, 135], ["torch.ceil", "torch.ceil", "range", "max", "min", "max", "min", "len", "torch.where", "build_counts_dict", "build_counts_dict", "build_edges_counts_dict", "tier_list[].update_counts_dict", "params[].tolist", "flops[].tolist"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_edges_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.update_counts_dict"], ["", "", "def", "classify_tier_counts_by_target_201", "(", "params", ",", "flops", ",", "edges", ",", "tier_list", ",", "target", ",", "bins", ")", ":", "\n", "    ", "params", "=", "torch", ".", "ceil", "(", "params", "/", "1e3", ")", "\n", "max_p", ",", "min_p", "=", "max", "(", "params", ")", ",", "min", "(", "params", ")", "\n", "\n", "flops", "=", "torch", ".", "ceil", "(", "flops", "/", "1e6", ")", "\n", "max_f", ",", "min_f", "=", "max", "(", "flops", ")", ",", "min", "(", "flops", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "target", "[", ":", ",", "i", "]", "==", "1", ")", "\n", "\n", "p_counts", "=", "build_counts_dict", "(", "params", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_p", ",", "batch_max", "=", "max_p", ",", "bins", "=", "bins", ",", "scail", "=", "1e3", ")", "\n", "f_counts", "=", "build_counts_dict", "(", "flops", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_f", ",", "batch_max", "=", "max_f", ",", "bins", "=", "bins", ",", "scail", "=", "1e6", ")", "\n", "edges_counts", "=", "build_edges_counts_dict", "(", "edges", "[", "idx", "]", ")", "\n", "\n", "tier_list", "[", "i", "]", ".", "update_counts_dict", "(", "p_counts", ",", "f_counts", ",", "edges_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.classify_tier_counts_by_pred_201": [[136, 153], ["torch.ceil", "torch.ceil", "torch.topk", "index.squeeze.squeeze", "range", "max", "min", "max", "min", "len", "torch.where", "build_counts_dict", "build_counts_dict", "build_edges_counts_dict", "tier_list[].update_counts_dict", "params[].tolist", "flops[].tolist"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_edges_counts_dict", "home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.update_counts_dict"], ["", "", "def", "classify_tier_counts_by_pred_201", "(", "params", ",", "flops", ",", "edges", ",", "tier_list", ",", "pred", ",", "bins", ")", ":", "\n", "    ", "params", "=", "torch", ".", "ceil", "(", "params", "/", "1e3", ")", "\n", "max_p", ",", "min_p", "=", "max", "(", "params", ")", ",", "min", "(", "params", ")", "\n", "\n", "flops", "=", "torch", ".", "ceil", "(", "flops", "/", "1e6", ")", "\n", "max_f", ",", "min_f", "=", "max", "(", "flops", ")", ",", "min", "(", "flops", ")", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "pred", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "index", "==", "i", ")", "\n", "\n", "p_counts", "=", "build_counts_dict", "(", "params", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_p", ",", "batch_max", "=", "max_p", ",", "bins", "=", "bins", ",", "scail", "=", "1e3", ")", "\n", "f_counts", "=", "build_counts_dict", "(", "flops", "[", "idx", "]", ".", "tolist", "(", ")", ",", "batch_min", "=", "min_f", ",", "batch_max", "=", "max_f", ",", "bins", "=", "bins", ",", "scail", "=", "1e6", ")", "\n", "edges_counts", "=", "build_edges_counts_dict", "(", "edges", "[", "idx", "]", ")", "\n", "\n", "tier_list", "[", "i", "]", ".", "update_counts_dict", "(", "p_counts", ",", "f_counts", ",", "edges_counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.get_batch_statics": [[154, 170], ["range", "len", "tier_list[].get_bucket_counts", "p_list.append", "f_list.append", "y_list.append"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.architecture.bucket.Bucket.get_bucket_counts"], ["", "", "def", "get_batch_statics", "(", "tier_list", ")", ":", "\n", "    ", "p_list", "=", "[", "]", "\n", "f_list", "=", "[", "]", "\n", "y_list", "=", "[", "]", "\n", "\n", "if", "tier_list", "[", "0", "]", ".", "space", "==", "'nasbench'", ":", "\n", "        ", "y_str", "=", "'n_nodes'", "\n", "", "if", "tier_list", "[", "0", "]", ".", "space", "==", "'nasbench201'", ":", "\n", "        ", "y_str", "=", "'edges'", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "tier_list", ")", ")", ":", "\n", "        ", "tier_counts", "=", "tier_list", "[", "i", "]", ".", "get_bucket_counts", "(", ")", "\n", "p_list", ".", "append", "(", "tier_counts", "[", "'params'", "]", ")", "\n", "f_list", ".", "append", "(", "tier_counts", "[", "'flops'", "]", ")", "\n", "y_list", ".", "append", "(", "tier_counts", "[", "y_str", "]", ")", "\n", "", "return", "{", "'params'", ":", "p_list", ",", "'flops'", ":", "f_list", ",", "y_str", ":", "y_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.process.train_utils.compare_kl_div": [[171, 181], ["extract_dict_value_to_list", "range", "len", "extract_dict_value_to_list", "compute_kl_div"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.compute_kl_div"], ["", "def", "compare_kl_div", "(", "batch_statics", ":", "list", ")", ":", "\n", "    ", "t1", "=", "batch_statics", "[", "0", "]", "\n", "t1", "=", "extract_dict_value_to_list", "(", "t1", ")", "\n", "kl_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "batch_statics", ")", ")", ":", "\n", "        ", "t", "=", "extract_dict_value_to_list", "(", "batch_statics", "[", "i", "]", ")", "\n", "kl_v", "=", "compute_kl_div", "(", "t", ",", "t1", ")", "\n", "kl_dict", "[", "'t{}||t1'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "kl_v", "\n", "\n", "", "return", "kl_dict", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet.__init__": [[8, 14], ["subset.SplitSubet._sort"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201._sort"], ["    ", "def", "__init__", "(", "self", ",", "full_dataset", ",", "indices", ":", "list", ",", "n_tier", "=", "5", ")", ":", "\n", "        ", "self", ".", "full_dataset", "=", "full_dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "\n", "self", ".", "subset", "=", "[", "self", ".", "full_dataset", "[", "i", "]", "for", "i", "in", "self", ".", "indices", "]", "\n", "self", ".", "_sort", "(", "n_tier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet.__getitem__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "subset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet._sort": [[21, 37], ["int", "sorted", "range", "len", "enumerate", "len", "torch.zeros", "target[].add_", "tuple"], "methods", ["None"], ["", "def", "_sort", "(", "self", ",", "n_tier", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "indices", ")", ">=", "n_tier", ",", "'batch_sz should be larger than n_tier'", "\n", "step", "=", "int", "(", "len", "(", "self", ".", "indices", ")", "/", "n_tier", ")", "\n", "\n", "sorted_list", "=", "sorted", "(", "enumerate", "(", "self", ".", "subset", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_tier", ")", ":", "\n", "            ", "if", "i", "==", "n_tier", "-", "1", ":", "\n", "                ", "t_list", "=", "sorted_list", "[", "i", "*", "step", ":", "]", "\n", "", "else", ":", "\n", "                ", "t_list", "=", "sorted_list", "[", "i", "*", "step", ":", "(", "i", "+", "1", ")", "*", "step", "]", "\n", "", "for", "idx", ",", "_", "in", "t_list", ":", "\n", "                ", "target", "=", "torch", ".", "zeros", "(", "1", ",", "n_tier", ")", "\n", "target", "[", "0", ",", "i", "]", ".", "add_", "(", "1", ")", "\n", "target", "=", "tuple", "(", "target", ")", "\n", "self", ".", "subset", "[", "idx", "]", "=", "self", ".", "subset", "[", "idx", "]", "+", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet.query_stats_by_spec": [[39, 54], ["subset.SplitSubet.full_dataset.database.check_arch_inside_dataset", "subset.SplitSubet.full_dataset.keys_list.index", "subset.SplitSubet.full_dataset.index_list.index"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.check_arch_inside_dataset"], ["", "", "", "def", "query_stats_by_spec", "(", "self", ",", "model_spec", ":", "ModelSpec", ")", ":", "\n", "\n", "        ", "arch_dict", "=", "self", ".", "full_dataset", ".", "database", ".", "check_arch_inside_dataset", "(", "model_spec", ")", "\n", "if", "arch_dict", "is", "None", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "", "model_hash", "=", "arch_dict", "[", "'unique_hash'", "]", "\n", "\n", "hash_list_idx", "=", "self", ".", "full_dataset", ".", "keys_list", ".", "index", "(", "model_hash", ")", "\n", "\n", "index_list_idx", "=", "self", ".", "full_dataset", ".", "index_list", ".", "index", "(", "hash_list_idx", ")", "\n", "\n", "if", "index_list_idx", "not", "in", "self", ".", "indices", ":", "\n", "            ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "arch_dict", "[", "'flops'", "]", ",", "arch_dict", "[", "'trainable_parameters'", "]", ",", "index_list_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201.__init__": [[57, 64], ["subset.SplitSubet201._sort"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201._sort"], ["    ", "def", "__init__", "(", "self", ",", "full_dataset", ",", "indices", ":", "list", ",", "n_tier", "=", "5", ")", ":", "\n", "        ", "self", ".", "full_dataset", "=", "full_dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "\n", "self", ".", "subset", "=", "[", "self", ".", "full_dataset", "[", "i", "]", "for", "i", "in", "self", ".", "indices", "]", "\n", "\n", "self", ".", "_sort", "(", "n_tier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201.__getitem__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "subset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201.__len__": [[68, 70], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet201._sort": [[71, 90], ["int", "len", "sorted", "range", "len", "enumerate", "torch.zeros", "target[].add_", "tuple"], "methods", ["None"], ["", "def", "_sort", "(", "self", ",", "n_tier", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "indices", ")", ">=", "n_tier", ",", "'batch_sz should be larger than n_tier'", "\n", "step", "=", "int", "(", "len", "(", "self", ".", "indices", ")", "/", "n_tier", ")", "\n", "\n", "for", "datatype", "in", "[", "'cifar10'", ",", "'imagenet16'", ",", "'cifar100'", "]", ":", "\n", "\n", "            ", "sorted_list", "=", "sorted", "(", "enumerate", "(", "self", ".", "subset", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "datatype", "]", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_tier", ")", ":", "\n", "\n", "                ", "if", "i", "==", "n_tier", "-", "1", ":", "\n", "                    ", "t_list", "=", "sorted_list", "[", "i", "*", "step", ":", "]", "\n", "", "else", ":", "\n", "                    ", "t_list", "=", "sorted_list", "[", "i", "*", "step", ":", "(", "i", "+", "1", ")", "*", "step", "]", "\n", "", "for", "idx", ",", "_", "in", "t_list", ":", "\n", "                    ", "target", "=", "torch", ".", "zeros", "(", "1", ",", "n_tier", ")", "\n", "target", "[", "0", ",", "i", "]", ".", "add_", "(", "1", ")", "\n", "target", "=", "tuple", "(", "target", ")", "\n", "self", ".", "subset", "[", "idx", "]", "[", "datatype", "]", "=", "self", ".", "subset", "[", "idx", "]", "[", "datatype", "]", "+", "target", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Encoder.__init__": [[12, 25], ["torch.Module.__init__", "modules.PositionalEncoding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "layers.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "d_patch_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "n_position", "=", "200", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_patch_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Encoder.forward": [[26, 42], ["models.Encoder.dropout", "models.Encoder.position_enc", "models.Encoder.layer_norm", "enc_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_seq", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "enc_slf_attn_list", "=", "[", "]", "\n", "\n", "# -- Forward", "\n", "src_seq", "=", "self", ".", "dropout", "(", "src_seq", ")", "\n", "enc_output", "=", "self", ".", "position_enc", "(", "src_seq", ")", "\n", "enc_output", "=", "self", ".", "layer_norm", "(", "enc_output", ")", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "enc_output", ",", "enc_slf_attn", "=", "enc_layer", "(", "enc_output", ",", "slf_attn_mask", "=", "src_mask", ")", "\n", "enc_slf_attn_list", "+=", "[", "enc_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "enc_output", ",", "enc_slf_attn_list", "\n", "", "return", "enc_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Decoder.__init__": [[47, 60], ["torch.Module.__init__", "modules.PositionalEncoding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "layers.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "d_patch_vec", ",", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "n_position", "=", "200", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "position_enc", "=", "PositionalEncoding", "(", "d_patch_vec", ",", "n_position", "=", "n_position", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DecoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Decoder.forward": [[61, 79], ["models.Decoder.dropout", "models.Decoder.position_enc", "models.Decoder.layer_norm", "dec_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "trg_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "dec_slf_attn_list", ",", "dec_enc_attn_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "# -- Forward", "\n", "trg_seq", "=", "self", ".", "dropout", "(", "trg_seq", ")", "\n", "dec_output", "=", "self", ".", "position_enc", "(", "trg_seq", ")", "\n", "dec_output", "=", "self", ".", "layer_norm", "(", "dec_output", ")", "\n", "\n", "for", "dec_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "=", "dec_layer", "(", "\n", "dec_output", ",", "enc_output", ",", "slf_attn_mask", "=", "trg_mask", ",", "dec_enc_attn_mask", "=", "src_mask", ")", "\n", "dec_slf_attn_list", "+=", "[", "dec_slf_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "dec_enc_attn_list", "+=", "[", "dec_enc_attn", "]", "if", "return_attns", "else", "[", "]", "\n", "\n", "", "if", "return_attns", ":", "\n", "            ", "return", "dec_output", ",", "dec_slf_attn_list", ",", "dec_enc_attn_list", "\n", "", "return", "dec_output", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Transformer.__init__": [[84, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.Encoder", "models.Decoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.Transformer.parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "n_tier", "=", "5", ",", "n_arch_patch", "=", "19", ",", "d_patch", "=", "7", ",", "\n", "d_patch_vec", "=", "512", ",", "d_model", "=", "512", ",", "d_ffn_inner", "=", "2048", ",", "d_tier_prj_inner", "=", "256", ",", "\n", "n_layers", "=", "6", ",", "n_head", "=", "8", ",", "d_k", "=", "64", ",", "d_v", "=", "64", ",", "dropout", "=", "0.1", ",", "n_position", "=", "200", ",", "\n", "d_val_acc_prj_inner", "=", "2048", ",", "scale_prj", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale_prj", "=", "scale_prj", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_tier", "=", "n_tier", "\n", "self", ".", "n_arch_patch", "=", "n_arch_patch", "\n", "self", ".", "d_patch", "=", "d_patch", "\n", "\n", "self", ".", "src_prj", "=", "nn", ".", "Linear", "(", "d_patch", "*", "d_patch", ",", "d_patch_vec", ")", "\n", "self", ".", "trg_prj", "=", "nn", ".", "Linear", "(", "d_patch_vec", ",", "d_patch_vec", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "n_position", "=", "n_position", ",", "d_patch_vec", "=", "d_patch_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_ffn_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "n_position", "=", "n_position", ",", "d_patch_vec", "=", "d_patch_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_ffn_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "tier_prj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_arch_patch", "*", "d_model", ",", "d_tier_prj_inner", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "d_tier_prj_inner", ",", "n_tier", ")", "\n", ")", "\n", "\n", "self", ".", "val_acc_prj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_arch_patch", "*", "d_model", ",", "d_val_acc_prj_inner", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "d_val_acc_prj_inner", ",", "1", ")", "\n", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "assert", "d_model", "==", "d_patch_vec", ",", "'the dimensions of all module outputs should be the same to insure residual connections'", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.models.Transformer.forward": [[128, 155], ["models.Transformer.view", "models.Transformer.src_prj", "models.Transformer.trg_prj", "models.Transformer.encoder", "models.Transformer.val_acc_prj", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "models.Transformer.view", "models.Transformer.tier_prj", "enc_output.clone().view", "models.Transformer.size", "models.Transformer.size", "trg_seq[].unsqueeze", "models.Transformer.decoder", "enc_output.clone"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "forward", "(", "self", ",", "src_seq", ",", "trg_seq", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "src_mask", "=", "None", "\n", "trg_mask", "=", "None", "\n", "\n", "src_seq", "=", "src_seq", ".", "view", "(", "-", "1", ",", "self", ".", "n_arch_patch", ",", "self", ".", "d_patch", "*", "self", ".", "d_patch", ")", "\n", "\n", "src_seq", "=", "self", ".", "src_prj", "(", "src_seq", ")", "\n", "trg_seq", "=", "self", ".", "trg_prj", "(", "trg_seq", ")", "\n", "\n", "enc_output", ",", "*", "_", "=", "self", ".", "encoder", "(", "src_seq", ",", "src_mask", ")", "\n", "\n", "val_acc_pred", "=", "self", ".", "val_acc_prj", "(", "enc_output", ".", "clone", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_arch_patch", "*", "self", ".", "d_model", ")", ")", "\n", "\n", "total_logit", "=", "torch", ".", "zeros", "(", "src_seq", ".", "size", "(", "0", ")", ",", "self", ".", "n_arch_patch", ",", "self", ".", "d_model", ",", "device", "=", "src_seq", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "trg_seq", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "trg_tier_seq", "=", "trg_seq", "[", "i", "]", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "dec_output", ",", "*", "_", "=", "self", ".", "decoder", "(", "trg_tier_seq", ",", "trg_mask", ",", "enc_output", ",", "src_mask", ")", "\n", "total_logit", "+=", "dec_output", "\n", "\n", "", "total_logit", "=", "total_logit", ".", "view", "(", "-", "1", ",", "self", ".", "n_arch_patch", "*", "self", ".", "d_model", ")", "\n", "total_logit", "=", "self", ".", "tier_prj", "(", "total_logit", ")", "\n", "\n", "if", "self", ".", "scale_prj", ":", "\n", "            ", "total_logit", "*=", "self", ".", "d_model", "**", "-", "0.5", "\n", "\n", "", "return", "total_logit", ",", "enc_output", ",", "val_acc_pred", "", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.PositionalEncoding.__init__": [[8, 12], ["torch.Module.__init__", "modules.PositionalEncoding.register_buffer", "modules.PositionalEncoding._get_sinusoid_encoding_table"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__", "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.PositionalEncoding._get_sinusoid_encoding_table"], ["    ", "def", "__init__", "(", "self", ",", "d_hid", ",", "n_position", "=", "200", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'pos_table'", ",", "self", ".", "_get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.PositionalEncoding._get_sinusoid_encoding_table": [[13, 24], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "modules.PositionalEncoding._get_sinusoid_encoding_table.get_position_angle_vec"], "methods", ["None"], ["", "def", "_get_sinusoid_encoding_table", "(", "self", ",", "n_position", ",", "d_hid", ")", ":", "\n", "        ", "''' Sinusoid position encoding table '''", "\n", "\n", "def", "get_position_angle_vec", "(", "position", ")", ":", "\n", "            ", "return", "[", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_j", "//", "2", ")", "/", "d_hid", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_position_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.PositionalEncoding.forward": [[25, 27], ["modules.PositionalEncoding.pos_table[].clone().detach", "modules.PositionalEncoding.pos_table[].clone", "x.size"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "pos_table", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.ScaledDotProductAttention.__init__": [[31, 35], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.ScaledDotProductAttention.forward": [[36, 53], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modules.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        q: 256,8,19,64\n        k: 256,8,19,64\n        v: 256,8,19,64\n        mask: None\n        \"\"\"", "\n", "\n", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "attn", "=", "self", ".", "dropout", "(", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.get_pad_mask": [[55, 57], ["None"], "function", ["None"], ["", "", "def", "get_pad_mask", "(", "seq", ",", "pad_idx", ")", ":", "\n", "    ", "return", "(", "seq", "!=", "pad_idx", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.modules.get_subsequent_mask": [[59, 66], ["seq.size", "torch.triu", "torch.triu", "torch.triu", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "get_subsequent_mask", "(", "seq", ")", ":", "\n", "    ", "''' For masking out the subsequent info. '''", "\n", "sz_b", ",", "len_s", "=", "seq", ".", "size", "(", ")", "\n", "subsequent_mask", "=", "(", "1", "-", "torch", ".", "triu", "(", "\n", "torch", ".", "ones", "(", "(", "1", ",", "len_s", ",", "len_s", ")", ",", "device", "=", "seq", ".", "device", ")", ",", "diagonal", "=", "1", ")", ")", ".", "bool", "(", ")", "\n", "\n", "return", "subsequent_mask", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.layers.EncoderLayer.__init__": [[9, 13], ["torch.Module.__init__", "sublayers.MultiHeadAttention", "sublayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.layers.EncoderLayer.forward": [[14, 22], ["layers.EncoderLayer.slf_attn", "layers.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "enc_input", ",", "enc_input", ",", "enc_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.layers.DecoderLayer.__init__": [[27, 32], ["torch.Module.__init__", "sublayers.MultiHeadAttention", "sublayers.MultiHeadAttention", "sublayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "enc_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.layers.DecoderLayer.forward": [[33, 46], ["layers.DecoderLayer.slf_attn", "layers.DecoderLayer.enc_attn", "layers.DecoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "dec_input", ",", "enc_output", ",", "\n", "slf_attn_mask", "=", "None", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "dec_output", ",", "dec_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "dec_input", ",", "dec_input", ",", "dec_input", ",", "mask", "=", "slf_attn_mask", ")", "\n", "\n", "dec_output", ",", "dec_enc_attn", "=", "self", ".", "enc_attn", "(", "\n", "dec_output", ",", "enc_output", ",", "enc_output", ",", "mask", "=", "dec_enc_attn_mask", ")", "\n", "\n", "dec_output", "=", "self", ".", "pos_ffn", "(", "dec_output", ")", "\n", "return", "dec_output", ",", "dec_slf_attn", ",", "dec_enc_attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.sublayers.MultiHeadAttention.__init__": [[9, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modules.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.sublayers.MultiHeadAttention.forward": [[27, 57], ["sublayers.MultiHeadAttention.w_qs().view", "sublayers.MultiHeadAttention.w_ks().view", "sublayers.MultiHeadAttention.w_vs().view", "sublayers.MultiHeadAttention.attention", "sublayers.MultiHeadAttention.transpose().contiguous().view", "sublayers.MultiHeadAttention.dropout", "sublayers.MultiHeadAttention.layer_norm", "sublayers.MultiHeadAttention.size", "sublayers.MultiHeadAttention.size", "sublayers.MultiHeadAttention.size", "sublayers.MultiHeadAttention.transpose", "sublayers.MultiHeadAttention.transpose", "sublayers.MultiHeadAttention.transpose", "mask.unsqueeze.unsqueeze.unsqueeze", "sublayers.MultiHeadAttention.fc", "sublayers.MultiHeadAttention.w_qs", "sublayers.MultiHeadAttention.w_ks", "sublayers.MultiHeadAttention.w_vs", "sublayers.MultiHeadAttention.transpose().contiguous", "sublayers.MultiHeadAttention.transpose"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# For head axis broadcasting.", "\n", "\n", "", "q", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "self", ".", "n_head", "*", "self", ".", "d_v", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "q", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.sublayers.PositionwiseFeedForward.__init__": [[62, 68], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_in", ",", "d_hid", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_hid", ",", "d_in", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.ranker.sublayers.PositionwiseFeedForward.forward": [[69, 80], ["sublayers.PositionwiseFeedForward.w_2", "sublayers.PositionwiseFeedForward.dropout", "sublayers.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "sublayers.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "x", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "+=", "residual", "\n", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.compute_kl_div": [[11, 21], ["torch.log_softmax", "torch.log_softmax", "torch.kl_div", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "isinstance"], "function", ["None"], ["def", "compute_kl_div", "(", "input_seq", ",", "target_seq", ")", ":", "\n", "    ", "assert", "len", "(", "input_seq", ")", "==", "len", "(", "target_seq", ")", "\n", "\n", "input_seq", "=", "torch", ".", "tensor", "(", "input_seq", ",", "dtype", "=", "torch", ".", "float", ")", "if", "not", "isinstance", "(", "input_seq", ",", "torch", ".", "Tensor", ")", "else", "input_seq", "\n", "target_seq", "=", "torch", ".", "tensor", "(", "target_seq", ",", "dtype", "=", "torch", ".", "float", ")", "if", "not", "isinstance", "(", "target_seq", ",", "torch", ".", "Tensor", ")", "else", "target_seq", "\n", "input_seq", "=", "F", ".", "log_softmax", "(", "input_seq", ",", "dim", "=", "-", "1", ")", "\n", "target_seq", "=", "F", ".", "log_softmax", "(", "target_seq", ",", "dim", "=", "-", "1", ")", "\n", "\n", "kl_value", "=", "F", ".", "kl_div", "(", "input_seq", ",", "target_seq", ",", "reduction", "=", "'batchmean'", ",", "log_target", "=", "True", ")", "\n", "return", "kl_value", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.compute_constraint_value": [[23, 25], ["math.ceil"], "function", ["None"], ["", "def", "compute_constraint_value", "(", "value", ",", "step", ",", "batch_min", ")", ":", "\n", "    ", "return", "math", ".", "ceil", "(", "(", "value", "-", "batch_min", ")", "/", "step", ")", "*", "step", "+", "batch_min", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.convert_count_to_prob": [[26, 33], ["sum", "counts_dict.values"], "function", ["None"], ["", "def", "convert_count_to_prob", "(", "counts_dict", ")", ":", "\n", "\n", "    ", "total", "=", "sum", "(", "counts_dict", ".", "values", "(", ")", ")", "\n", "for", "idx", "in", "counts_dict", ":", "\n", "        ", "counts_dict", "[", "idx", "]", "=", "1.0", "*", "counts_dict", "[", "idx", "]", "/", "total", "\n", "\n", "", "return", "counts_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_counts_dict": [[34, 51], ["int", "int", "raw_list.sort", "math.ceil", "range", "prob_calculate.compute_constraint_value", "int", "int"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.compute_constraint_value"], ["", "def", "build_counts_dict", "(", "raw_list", ",", "batch_min", ",", "batch_max", ",", "bins", "=", "8", ",", "scail", "=", "1", ")", ":", "\n", "    ", "batch_min", "=", "int", "(", "batch_min", ")", "\n", "batch_max", "=", "int", "(", "batch_max", ")", "\n", "raw_list", ".", "sort", "(", ")", "\n", "step", "=", "math", ".", "ceil", "(", "(", "batch_max", "-", "batch_min", ")", "/", "bins", ")", "\n", "\n", "counts_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "bins", "+", "1", ")", ":", "\n", "        ", "counts_dict", "[", "int", "(", "scail", "*", "(", "i", "*", "step", "+", "batch_min", ")", ")", "]", "=", "0", "\n", "\n", "", "for", "value", "in", "raw_list", ":", "\n", "        ", "if", "value", "==", "batch_min", ":", "\n", "            ", "value", "+=", "step", "\n", "", "value", "=", "compute_constraint_value", "(", "value", ",", "step", ",", "batch_min", ")", "\n", "counts_dict", "[", "int", "(", "scail", "*", "value", ")", "]", "+=", "1", "\n", "\n", "", "return", "counts_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_n_nodes_counts_dict": [[52, 61], ["raw_list.sort", "range"], "function", ["None"], ["", "def", "build_n_nodes_counts_dict", "(", "raw_list", ",", "batch_min", ",", "batch_max", ")", ":", "\n", "    ", "raw_list", ".", "sort", "(", ")", "\n", "counts_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "batch_min", ",", "batch_max", "+", "1", ")", ":", "\n", "        ", "counts_dict", "[", "idx", "]", "=", "0", "\n", "", "for", "item", "in", "raw_list", ":", "\n", "        ", "counts_dict", "[", "item", "]", "+=", "1", "\n", "\n", "", "return", "counts_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.build_edges_counts_dict": [[62, 71], ["raw_list.size", "raw_list.sum", "range", "counts[].item"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_database.NASBench201DataBase.size"], ["", "def", "build_edges_counts_dict", "(", "raw_list", ")", ":", "\n", "    ", "l", "=", "raw_list", ".", "size", "(", "1", ")", "\n", "counts", "=", "raw_list", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "counts_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "        ", "counts_dict", "[", "i", "]", "=", "counts", "[", "i", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "counts_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list": [[72, 77], ["list", "type", "list", "target_dict.values", "target_dict.keys"], "function", ["None"], ["", "def", "extract_dict_value_to_list", "(", "target_dict", ",", "is_key", "=", "False", ")", ":", "\n", "    ", "assert", "type", "(", "target_dict", ")", "==", "dict", ",", "'Not a dictionary'", "\n", "if", "is_key", ":", "\n", "        ", "return", "list", "(", "target_dict", ".", "keys", "(", ")", ")", "\n", "", "return", "list", "(", "target_dict", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.select_distri": [[78, 93], ["range", "len", "prob_calculate.extract_dict_value_to_list", "range", "prob_calculate.convert_count_to_prob", "sum", "len", "prob_calculate.extract_dict_value_to_list", "copy.deepcopy", "candi.values", "prob_calculate.compute_kl_div"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.convert_count_to_prob", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.compute_kl_div"], ["", "def", "select_distri", "(", "candi_list", ",", "top_tier", ",", "last_tier", ",", "threshold_kl_div", ",", "batch_size", ",", "batch_factor", ")", ":", "\n", "    ", "assert", "top_tier", "<", "len", "(", "candi_list", ")", ",", "'The candidates tier indexs should be smaller than the length of candidates list'", "\n", "for", "i", "in", "range", "(", "top_tier", ")", ":", "\n", "        ", "candi", "=", "candi_list", "[", "i", "]", "\n", "if", "sum", "(", "candi", ".", "values", "(", ")", ")", "<", "batch_factor", "*", "batch_size", ":", "\n", "            ", "continue", "\n", "\n", "", "candi_counts", "=", "extract_dict_value_to_list", "(", "candi", ")", "\n", "assert", "last_tier", ">", "top_tier", ",", "'last tier index should be larger than top tier'", "\n", "for", "j", "in", "range", "(", "last_tier", "-", "1", ",", "len", "(", "candi_list", ")", ")", ":", "\n", "            ", "low_tier_counts", "=", "extract_dict_value_to_list", "(", "candi_list", "[", "j", "]", ")", "\n", "if", "compute_kl_div", "(", "low_tier_counts", ",", "candi_counts", ")", "<", "threshold_kl_div", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "return", "convert_count_to_prob", "(", "copy", ".", "deepcopy", "(", "candi", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201.__init__": [[36, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "top_tier", ",", "last_tier", ",", "batch_factor", ",", "reuse_step", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "top_tier", "=", "top_tier", "\n", "self", ".", "last_tier", "=", "last_tier", "\n", "self", ".", "batch_factor", "=", "batch_factor", "\n", "self", ".", "reuse_step", "=", "reuse_step", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201.reset_parameters": [[43, 47], ["None"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "batch_statics_dict", ")", ":", "\n", "        ", "self", ".", "batch_flops_list", "=", "batch_statics_dict", "[", "'flops'", "]", "\n", "self", ".", "batch_params_list", "=", "batch_statics_dict", "[", "'params'", "]", "\n", "self", ".", "edges_list", "=", "batch_statics_dict", "[", "'edges'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201._sample_target_value": [[48, 71], ["prob_calculate.select_distri", "arch_sampler201.sample_helper", "prob_calculate.extract_dict_value_to_list", "random.choice", "sum", "random.choices", "prob_calculate.extract_dict_value_to_list"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.select_distri", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.sample_helper", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list"], ["", "def", "_sample_target_value", "(", "self", ",", "\n", "candi_list", ",", "\n", "threshold_kl_div", "=", "2", ",", "\n", "force_uniform", "=", "False", ")", ":", "\n", "\n", "        ", "target_distri", "=", "None", "\n", "if", "not", "force_uniform", ":", "\n", "            ", "group_size", "=", "0", "\n", "for", "dic", "in", "candi_list", ":", "\n", "                ", "group_size", "+=", "sum", "(", "extract_dict_value_to_list", "(", "dic", ")", ")", "\n", "", "target_distri", "=", "select_distri", "(", "candi_list", ",", "self", ".", "top_tier", ",", "\n", "self", ".", "last_tier", ",", "threshold_kl_div", ",", "\n", "group_size", ",", "self", ".", "batch_factor", ")", "\n", "\n", "", "if", "target_distri", "is", "not", "None", "and", "not", "force_uniform", ":", "\n", "            ", "target_list", ",", "prob_list", "=", "sample_helper", "(", "target_distri", ")", "\n", "target_value", "=", "random", ".", "choices", "(", "target_list", ",", "weights", "=", "prob_list", ")", "[", "0", "]", "\n", "return", "target_value", "\n", "", "else", ":", "\n", "            ", "target_list", "=", "extract_dict_value_to_list", "(", "candi_list", "[", "0", "]", ",", "\n", "is_key", "=", "True", ")", "\n", "target_value", "=", "random", ".", "choice", "(", "target_list", ")", "\n", "return", "target_value", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201._sample_edges_opts": [[72, 87], ["range", "range", "edges_for_all_nodes.append", "arch_sampler201.ArchSampler201._sample_target_value", "edges_for_one_node.append", "tuple", "int"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value"], ["", "", "def", "_sample_edges_opts", "(", "self", ",", "edges_kl_thred", ",", "force_uniform", ")", ":", "\n", "        ", "edges_for_all_nodes", "=", "[", "]", "\n", "for", "end_node", "in", "range", "(", "1", ",", "N_NODES", ")", ":", "\n", "            ", "edges_for_one_node", "=", "[", "]", "\n", "for", "start_node", "in", "range", "(", "end_node", ")", ":", "\n", "                ", "opt_id", "=", "self", ".", "_sample_target_value", "(", "self", ".", "edges_list", ",", "\n", "edges_kl_thred", ",", "\n", "force_uniform", ")", "\n", "edges_for_one_node", ".", "append", "(", "(", "NODE_TYPE_DICT", "[", "opt_id", "]", ",", "start_node", ")", ")", "\n", "\n", "", "edges_for_all_nodes", ".", "append", "(", "\n", "tuple", "(", "(", "op", ",", "int", "(", "start_node", ")", ")", "\n", "for", "op", ",", "start_node", "in", "edges_for_one_node", ")", ")", "\n", "\n", "", "return", "edges_for_all_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201.sample_arch": [[88, 138], ["arch_sampler201.ArchSampler201.reset_parameters", "len", "range", "sampled_arch_datast_idx.append", "arch_sampler201.ArchSampler201._sample_target_value", "arch_sampler201.ArchSampler201._sample_target_value", "arch_sampler201.ArchSampler201._sample_edges_opts", "architecture.edges_to_str", "dataset.query_arch_by_str", "len"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.reset_parameters", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.ArchSampler201._sample_edges_opts", "home.repos.pwc.inspect_result.albertipot_nar.architecture.seq_to_arch.edges_to_str", "home.repos.pwc.inspect_result.albertipot_nar.nasbench201.nasbench201_dataset.NASBench201Dataset.query_arch_by_str"], ["", "def", "sample_arch", "(", "self", ",", "\n", "batch_statics_dict", ",", "\n", "n_subnets", ",", "\n", "dataset", ":", "NASBench201Dataset", ",", "\n", "network_type", ",", "\n", "kl_thred", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "max_trails", "=", "100", ",", "\n", "force_uniform", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "reset_parameters", "(", "batch_statics_dict", ")", "\n", "flops_kl_thred", "=", "kl_thred", "[", "0", "]", "\n", "params_kl_thred", "=", "kl_thred", "[", "1", "]", "\n", "edges_kl_thred", "=", "kl_thred", "[", "2", "]", "\n", "\n", "sampled_arch_datast_idx", "=", "[", "]", "\n", "flops", ",", "params", "=", "0", ",", "0", "\n", "\n", "self", ".", "reuse_step", "=", "1", "if", "self", ".", "reuse_step", "is", "None", "else", "self", ".", "reuse_step", "\n", "assert", "self", ".", "reuse_step", ">", "0", ",", "'the reuse step must greater than 0'", "\n", "\n", "while", "len", "(", "sampled_arch_datast_idx", ")", "<", "n_subnets", ":", "\n", "# step1: sample flops and params constraints", "\n", "            ", "if", "len", "(", "sampled_arch_datast_idx", ")", "%", "self", ".", "reuse_step", "==", "0", ":", "\n", "                ", "flops", "=", "self", ".", "_sample_target_value", "(", "self", ".", "batch_flops_list", ",", "\n", "flops_kl_thred", ",", "\n", "force_uniform", "=", "force_uniform", ")", "\n", "\n", "params", "=", "self", ".", "_sample_target_value", "(", "self", ".", "batch_params_list", ",", "\n", "params_kl_thred", ",", "\n", "force_uniform", "=", "force_uniform", ")", "\n", "\n", "", "for", "trail", "in", "range", "(", "max_trails", "+", "1", ")", ":", "\n", "# step2: sample each edges operation", "\n", "                ", "edges_for_all_nodes", "=", "self", ".", "_sample_edges_opts", "(", "\n", "edges_kl_thred", ",", "force_uniform", "=", "force_uniform", ")", "\n", "\n", "arch_str", "=", "edges_to_str", "(", "edges_for_all_nodes", ")", "\n", "\n", "# step3: query from the dataset and check whether satisfy the constraints", "\n", "f", ",", "p", ",", "index_list_idx", "=", "dataset", ".", "query_arch_by_str", "(", "\n", "arch_str", ",", "network_type", ")", "\n", "\n", "if", "index_list_idx", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "f", "<=", "flops", "and", "p", "<=", "params", ":", "\n", "                    ", "break", "\n", "\n", "", "", "sampled_arch_datast_idx", ".", "append", "(", "index_list_idx", ")", "\n", "\n", "", "return", "sampled_arch_datast_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler201.sample_helper": [[29, 33], ["prob_calculate.extract_dict_value_to_list", "prob_calculate.extract_dict_value_to_list"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list"], ["def", "sample_helper", "(", "disti_dict", ")", ":", "\n", "    ", "target_list", "=", "extract_dict_value_to_list", "(", "disti_dict", ",", "is_key", "=", "True", ")", "\n", "prob_list", "=", "extract_dict_value_to_list", "(", "disti_dict", ")", "\n", "return", "target_list", ",", "prob_list", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.__init__": [[31, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "top_tier", ",", "last_tier", ",", "batch_factor", ",", "node_type_dict", ",", "max_edges", "=", "9", ",", "reuse_step", "=", "None", ")", ":", "\n", "        ", "self", ".", "top_tier", "=", "top_tier", "\n", "self", ".", "last_tier", "=", "last_tier", "\n", "self", ".", "batch_factor", "=", "batch_factor", "\n", "self", ".", "reuse_step", "=", "reuse_step", "\n", "self", ".", "node_type_dict", "=", "node_type_dict", "\n", "self", ".", "max_edges", "=", "max_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.reset_parameters": [[39, 43], ["None"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "batch_statics_dict", ")", ":", "\n", "        ", "self", ".", "batch_flops_list", "=", "batch_statics_dict", "[", "'flops'", "]", "\n", "self", ".", "batch_params_list", "=", "batch_statics_dict", "[", "'params'", "]", "\n", "self", ".", "batch_n_nodes_list", "=", "batch_statics_dict", "[", "'n_nodes'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value": [[44, 60], ["prob_calculate.select_distri", "arch_sampler.sample_helper", "prob_calculate.extract_dict_value_to_list", "random.choice", "sum", "random.choices", "prob_calculate.extract_dict_value_to_list"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.select_distri", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.sample_helper", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list"], ["", "def", "_sample_target_value", "(", "self", ",", "candi_list", ",", "threshold_kl_div", "=", "2", ",", "force_uniform", "=", "False", ")", ":", "\n", "        ", "target_distri", "=", "None", "\n", "if", "not", "force_uniform", ":", "\n", "            ", "batch_size", "=", "0", "\n", "for", "dic", "in", "candi_list", ":", "\n", "                ", "batch_size", "+=", "sum", "(", "extract_dict_value_to_list", "(", "dic", ")", ")", "\n", "", "target_distri", "=", "select_distri", "(", "candi_list", ",", "self", ".", "top_tier", ",", "self", ".", "last_tier", ",", "threshold_kl_div", ",", "batch_size", ",", "self", ".", "batch_factor", ")", "\n", "\n", "", "if", "target_distri", "is", "not", "None", "and", "not", "force_uniform", ":", "\n", "            ", "target_list", ",", "prob_list", "=", "sample_helper", "(", "target_distri", ")", "\n", "target_value", "=", "random", ".", "choices", "(", "target_list", ",", "weights", "=", "prob_list", ")", "[", "0", "]", "\n", "return", "target_value", "\n", "", "else", ":", "\n", "            ", "target_list", "=", "extract_dict_value_to_list", "(", "candi_list", "[", "0", "]", ",", "is_key", "=", "True", ")", "\n", "target_value", "=", "random", ".", "choice", "(", "target_list", ")", "\n", "return", "target_value", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_edges_and_types": [[61, 98], ["range", "range", "prob_calculate.extract_dict_value_to_list", "random.choice", "arch_struct_list.append", "random.choice", "arch_struct_list.append", "random.choice", "random.choice", "len", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list"], ["", "", "def", "_sample_edges_and_types", "(", "self", ",", "n_nodes", ",", "arch_struct_list", ":", "list", ")", ":", "\n", "        ", "type_candi_list", "=", "extract_dict_value_to_list", "(", "self", ".", "node_type_dict", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "for", "node_idx", "in", "range", "(", "1", ",", "n_nodes", ")", ":", "\n", "# 1 sample previous node", "\n", "            ", "pre_node_id", "=", "random", ".", "choice", "(", "[", "i", "for", "i", "in", "range", "(", "node_idx", ")", "]", ")", "\n", "arch_struct_list", ".", "append", "(", "pre_node_id", ")", "\n", "\n", "# 2 sample node type", "\n", "if", "node_idx", "==", "n_nodes", "-", "1", ":", "\n", "                ", "break", "\n", "", "node_opt_type", "=", "random", ".", "choice", "(", "type_candi_list", ")", "\n", "arch_struct_list", ".", "append", "(", "node_opt_type", ")", "\n", "\n", "# 3 sampel rest edges", "\n", "# max edges = 9, the rest edges are (max_edges -(n_nodes-1))", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_edges", "-", "n_nodes", "+", "1", ")", ":", "\n", "# sample begin node for the edge", "\n", "            ", "begin_node_idx", "=", "random", ".", "choice", "(", "[", "b_idx", "for", "b_idx", "in", "range", "(", "n_nodes", ")", "]", ")", "\n", "if", "begin_node_idx", "==", "n_nodes", "-", "1", ":", "# if begin node is the output node, this edge does not exist", "\n", "                ", "arch_struct_list", "+=", "[", "None", ",", "None", "]", "\n", "continue", "\n", "\n", "# sample end node for the edge", "\n", "", "end_node_idx", "=", "random", ".", "choice", "(", "[", "l_idx", "for", "l_idx", "in", "range", "(", "begin_node_idx", ",", "n_nodes", ")", "]", ")", "\n", "if", "end_node_idx", "==", "begin_node_idx", ":", "\n", "                ", "arch_struct_list", "+=", "[", "None", ",", "None", "]", "\n", "continue", "\n", "\n", "", "arch_struct_list", "+=", "[", "begin_node_idx", ",", "end_node_idx", "]", "\n", "\n", "# 1st for loop: (n_nodes-1)times each add 2(edge and opt type) excep the last output node, yield (n_nodes-1)*2-1", "\n", "# 2nd for loop: (max_edges-n_nodes+1)times each add 2(start and end nodes), yield (max_edges-n_nodes+1)*2", "\n", "# n_nodes stored in the first place of the list, yield 1", "\n", "# total (n_nodes-1)*2-1+(max_edges-n_nodes+1)*2+1", "\n", "", "assert", "len", "(", "arch_struct_list", ")", "==", "self", ".", "max_edges", "*", "2", ",", "'Wrong length of sampled arch_struct_list'", "\n", "return", "arch_struct_list", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.sample_arch": [[99, 150], ["arch_sampler.ArchSampler.reset_parameters", "len", "range", "sampled_arch_datast_idx.append", "arch_sampler.ArchSampler._sample_target_value", "arch_sampler.ArchSampler._sample_target_value", "arch_sampler.ArchSampler._sample_target_value", "arch_sampler.ArchSampler.append", "arch_sampler.ArchSampler._sample_edges_and_types", "architecture.seq_decode_to_arch", "architecture.ModelSpec", "dataset.query_stats_by_spec", "sampled_arch.append", "sampled_arch.append"], "methods", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler.reset_parameters", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_target_value", "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.ArchSampler._sample_edges_and_types", "home.repos.pwc.inspect_result.albertipot_nar.architecture.seq_to_arch.seq_decode_to_arch", "home.repos.pwc.inspect_result.albertipot_nar.dataset.subset.SplitSubet.query_stats_by_spec"], ["", "def", "sample_arch", "(", "self", ",", "batch_statics_dict", ",", "n_subnets", ",", "dataset", ":", "NASBenchDataset", ",", "kl_thred", "=", "[", "2", ",", "2", "]", ",", "max_trails", "=", "100", ",", "force_uniform", "=", "False", ")", ":", "\n", "        ", "self", ".", "reset_parameters", "(", "batch_statics_dict", ")", "\n", "flops_kl_thred", "=", "kl_thred", "[", "0", "]", "\n", "params_kl_thred", "=", "kl_thred", "[", "1", "]", "\n", "\n", "sampled_arch", "=", "[", "]", "\n", "sampled_arch_datast_idx", "=", "[", "]", "\n", "flops", ",", "params", ",", "n_nodes", "=", "0", ",", "0", ",", "0", "\n", "\n", "self", ".", "reuse_step", "=", "1", "if", "self", ".", "reuse_step", "is", "None", "else", "self", ".", "reuse_step", "\n", "assert", "self", ".", "reuse_step", ">", "0", ",", "'the reuse step must greater than 0'", "\n", "\n", "reuse_count", "=", "0", "\n", "while", "len", "(", "sampled_arch", ")", "<", "n_subnets", ":", "\n", "# step1 sample flops and params constraints", "\n", "            ", "if", "reuse_count", "%", "self", ".", "reuse_step", "==", "0", ":", "\n", "# sample target flops", "\n", "                ", "flops", "=", "self", ".", "_sample_target_value", "(", "self", ".", "batch_flops_list", ",", "flops_kl_thred", ",", "force_uniform", "=", "force_uniform", ")", "\n", "\n", "# sample target params", "\n", "params", "=", "self", ".", "_sample_target_value", "(", "self", ".", "batch_params_list", ",", "params_kl_thred", ",", "force_uniform", "=", "force_uniform", ")", "\n", "\n", "", "for", "trail", "in", "range", "(", "max_trails", "+", "1", ")", ":", "\n", "                ", "arch_struct_list", "=", "[", "]", "# store arch", "\n", "\n", "# step2 sample target n_nodes", "\n", "n_nodes", "=", "self", ".", "_sample_target_value", "(", "self", ".", "batch_n_nodes_list", ",", "force_uniform", "=", "True", ")", "\n", "arch_struct_list", ".", "append", "(", "n_nodes", ")", "\n", "\n", "# step3 sample nodes type and connectoin", "\n", "arch_struct_list", "=", "self", ".", "_sample_edges_and_types", "(", "n_nodes", ",", "arch_struct_list", ")", "\n", "\n", "# step4 check wheth satisfy the flops and params constraints", "\n", "matrix", ",", "opt", "=", "seq_decode_to_arch", "(", "arch_struct_list", ")", "\n", "arch_spec", "=", "ModelSpec", "(", "matrix", "=", "matrix", ",", "ops", "=", "opt", ")", "\n", "\n", "f", ",", "p", ",", "dataset_idx", "=", "dataset", ".", "query_stats_by_spec", "(", "arch_spec", ")", "\n", "if", "dataset_idx", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "f", "<=", "flops", "and", "p", "<=", "params", ":", "\n", "                    ", "break", "\n", "\n", "", "", "sampled_arch_datast_idx", ".", "append", "(", "dataset_idx", ")", "\n", "if", "dataset_idx", "is", "None", ":", "\n", "                ", "sampled_arch", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                ", "sampled_arch", ".", "append", "(", "arch_spec", ")", "\n", "\n", "", "reuse_count", "+=", "1", "\n", "\n", "", "return", "sampled_arch", ",", "sampled_arch_datast_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.albertipot_nar.sampler.arch_sampler.sample_helper": [[25, 29], ["prob_calculate.extract_dict_value_to_list", "prob_calculate.extract_dict_value_to_list"], "function", ["home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list", "home.repos.pwc.inspect_result.albertipot_nar.sampler.prob_calculate.extract_dict_value_to_list"], ["def", "sample_helper", "(", "disti_dict", ")", ":", "\n", "    ", "target_list", "=", "extract_dict_value_to_list", "(", "disti_dict", ",", "is_key", "=", "True", ")", "\n", "prob_list", "=", "extract_dict_value_to_list", "(", "disti_dict", ")", "\n", "return", "target_list", ",", "prob_list", "\n", "\n"]]}