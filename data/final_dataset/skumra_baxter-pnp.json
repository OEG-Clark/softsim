{"home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.get_pose": [[5, 16], ["Pose"], "function", ["None"], ["def", "get_pose", "(", "position", ",", "orientation", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "    ", "grasp_pose", "=", "Pose", "(", ")", "\n", "grasp_pose", ".", "position", ".", "x", "=", "position", "[", "0", "]", "\n", "grasp_pose", ".", "position", ".", "y", "=", "position", "[", "1", "]", "\n", "grasp_pose", ".", "position", ".", "z", "=", "position", "[", "2", "]", "\n", "grasp_pose", ".", "orientation", ".", "x", "=", "orientation", "[", "0", "]", "\n", "grasp_pose", ".", "orientation", ".", "y", "=", "orientation", "[", "1", "]", "\n", "grasp_pose", ".", "orientation", ".", "z", "=", "orientation", "[", "2", "]", "\n", "grasp_pose", ".", "orientation", ".", "w", "=", "orientation", "[", "3", "]", "\n", "\n", "return", "grasp_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_point_msg": [[18, 24], ["translation_matrix"], "function", ["None"], ["", "def", "matrix_from_point_msg", "(", "point", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a translation matrix from a geometry_msgs/Point\n    ## @param point geometry_msgs/Point to turn into matrix\n    \"\"\"", "\n", "return", "translation_matrix", "(", "(", "point", ".", "x", ",", "point", ".", "y", ",", "point", ".", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_quaternion_msg": [[26, 33], ["quaternion_matrix"], "function", ["None"], ["", "def", "matrix_from_quaternion_msg", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a rotation matrix from a geometry_msgs/Quaternion\n    ## @param quaternion geometry_msgs/Quaternion to turn into matrix\n    \"\"\"", "\n", "q", "=", "[", "quaternion", ".", "x", ",", "quaternion", ".", "y", ",", "quaternion", ".", "z", ",", "quaternion", ".", "w", "]", "\n", "return", "quaternion_matrix", "(", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_pose_msg": [[35, 43], ["transforms.matrix_from_point_msg", "transforms.matrix_from_quaternion_msg", "concatenate_matrices"], "function", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_point_msg", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_quaternion_msg"], ["", "def", "matrix_from_pose_msg", "(", "pose", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a transformation matrix from a geometry_msgs/Pose\n    ## @param pose geometry_msgs/Pose to turn into matrix\n    \"\"\"", "\n", "t", "=", "matrix_from_point_msg", "(", "pose", ".", "position", ")", "\n", "r", "=", "matrix_from_quaternion_msg", "(", "pose", ".", "orientation", ")", "\n", "return", "concatenate_matrices", "(", "t", ",", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.point_msg_from_matrix": [[45, 55], ["Point"], "function", ["None"], ["", "def", "point_msg_from_matrix", "(", "transformation", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a geometry_msgs/Point from a transformation matrix\n    ## @param transformation The matrix to convert to a point\n    \"\"\"", "\n", "msg", "=", "Point", "(", ")", "\n", "msg", ".", "x", "=", "transformation", "[", "0", "]", "[", "3", "]", "\n", "msg", ".", "y", "=", "transformation", "[", "1", "]", "[", "3", "]", "\n", "msg", ".", "z", "=", "transformation", "[", "2", "]", "[", "3", "]", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.quaternion_msg_from_matrix": [[57, 69], ["quaternion_from_matrix", "Quaternion"], "function", ["None"], ["", "def", "quaternion_msg_from_matrix", "(", "transformation", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a geometry_msgs/Quaternion from a transformation matrix\n    ## @param transformation The matrix to convert to a quaternion\n    \"\"\"", "\n", "q", "=", "quaternion_from_matrix", "(", "transformation", ")", "\n", "msg", "=", "Quaternion", "(", ")", "\n", "msg", ".", "x", "=", "q", "[", "0", "]", "\n", "msg", ".", "y", "=", "q", "[", "1", "]", "\n", "msg", ".", "z", "=", "q", "[", "2", "]", "\n", "msg", ".", "w", "=", "q", "[", "3", "]", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.pose_msg_from_matrix": [[71, 80], ["Pose", "transforms.point_msg_from_matrix", "transforms.quaternion_msg_from_matrix"], "function", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.point_msg_from_matrix", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.quaternion_msg_from_matrix"], ["", "def", "pose_msg_from_matrix", "(", "transformation", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Get a geometry_msgs/Pose from a transformation matrix\n    ## @param transformation The matrix to convert to a pose\n    \"\"\"", "\n", "msg", "=", "Pose", "(", ")", "\n", "msg", ".", "position", "=", "point_msg_from_matrix", "(", "transformation", ")", "\n", "msg", ".", "orientation", "=", "quaternion_msg_from_matrix", "(", "transformation", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.translate_pose_msg": [[82, 93], ["transforms.matrix_from_pose_msg", "translation_matrix", "transforms.pose_msg_from_matrix", "concatenate_matrices"], "function", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_pose_msg", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.pose_msg_from_matrix"], ["", "def", "translate_pose_msg", "(", "pose", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Translate a geometry_msgs/Pose\n    ## @param pose The pose to translate\n    ## @param x The displacement in X coordinate axis\n    ## @param y The displacement in Y coordinate axis\n    ## @param z The displacement in Z coordinate axis\n    \"\"\"", "\n", "initial", "=", "matrix_from_pose_msg", "(", "pose", ")", "\n", "transform", "=", "translation_matrix", "(", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "return", "pose_msg_from_matrix", "(", "concatenate_matrices", "(", "initial", ",", "transform", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.rotate_pose_msg_by_euler_angles": [[95, 106], ["transforms.matrix_from_pose_msg", "quaternion_matrix", "transforms.pose_msg_from_matrix", "quaternion_from_euler", "concatenate_matrices"], "function", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_pose_msg", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.pose_msg_from_matrix"], ["", "def", "rotate_pose_msg_by_euler_angles", "(", "pose", ",", "r", ",", "p", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Rotate a geometry_msgs/Pose\n    ## @param pose The pose to rotate\n    ## @param r The roll\n    ## @param p The pitch\n    ## @param y The yaw\n    \"\"\"", "\n", "initial", "=", "matrix_from_pose_msg", "(", "pose", ")", "\n", "transform", "=", "quaternion_matrix", "(", "quaternion_from_euler", "(", "r", ",", "p", ",", "y", ")", ")", "\n", "return", "pose_msg_from_matrix", "(", "concatenate_matrices", "(", "initial", ",", "transform", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.rotate_pose_msg_about_origin": [[108, 119], ["transforms.matrix_from_pose_msg", "quaternion_matrix", "transforms.pose_msg_from_matrix", "quaternion_from_euler", "concatenate_matrices"], "function", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.matrix_from_pose_msg", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.pose_msg_from_matrix"], ["", "def", "rotate_pose_msg_about_origin", "(", "pose", ",", "r", ",", "p", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    ## @brief Rotate a geometry_msgs/Pose\n    ## @param pose The pose to rotate\n    ## @param r The roll\n    ## @param p The pitch\n    ## @param y The yaw\n    \"\"\"", "\n", "initial", "=", "matrix_from_pose_msg", "(", "pose", ")", "\n", "transform", "=", "quaternion_matrix", "(", "quaternion_from_euler", "(", "r", ",", "p", ",", "y", ")", ")", "\n", "return", "pose_msg_from_matrix", "(", "concatenate_matrices", "(", "transform", ",", "initial", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.__init__": [[14, 39], ["hardware.robot.Robot", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "place_position", ",", "\n", "force_threshold", "=", "-", "8", ",", "\n", "hover_distance", "=", "0.12", ",", "\n", "step_size", "=", "0.05", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        @param place_position: Place position as [x, y, z]\n        @param force_threshold: Z force threshold in Newtons\n        @param hover_distance: Distance above the pose in meters\n        @param step_size: Step size for approaching the pose\n        \"\"\"", "\n", "self", ".", "place_position", "=", "place_position", "\n", "self", ".", "force_threshold", "=", "force_threshold", "\n", "self", ".", "_hover_distance", "=", "hover_distance", "\n", "self", ".", "step_size", "=", "step_size", "\n", "\n", "self", ".", "robot", "=", "Robot", "(", ")", "\n", "\n", "homedir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ",", "\"grasp-comms\"", ")", "\n", "self", ".", "grasp_request", "=", "os", ".", "path", ".", "join", "(", "homedir", ",", "\"grasp_request.npy\"", ")", "\n", "self", ".", "grasp_available", "=", "os", ".", "path", ".", "join", "(", "homedir", ",", "\"grasp_available.npy\"", ")", "\n", "self", ".", "grasp_pose", "=", "os", ".", "path", ".", "join", "(", "homedir", ",", "\"grasp_pose.npy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._approach": [[40, 61], ["print", "copy.deepcopy", "pnp.PickAndPlace.robot.move_to", "pnp.PickAndPlace.robot.move_to", "pnp.PickAndPlace.robot.get_force", "print", "pnp.PickAndPlace.robot.get_force", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_to", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_to", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.get_force", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.get_force"], ["", "def", "_approach", "(", "self", ",", "pose", ")", ":", "\n", "        ", "\"\"\"\n        Move to a pose with a hover-distance above the requested pose and\n        then move to the pose incrementally while monitoring the z force\n        \"\"\"", "\n", "print", "(", "'approaching...'", ")", "\n", "approach", "=", "copy", ".", "deepcopy", "(", "pose", ")", "\n", "approach", ".", "position", ".", "z", "=", "approach", ".", "position", ".", "z", "+", "self", ".", "_hover_distance", "\n", "self", ".", "robot", ".", "move_to", "(", "approach", ")", "\n", "\n", "while", "approach", ".", "position", ".", "z", ">=", "pose", ".", "position", ".", "z", ":", "\n", "            ", "approach", ".", "position", ".", "z", "=", "approach", ".", "position", ".", "z", "-", "self", ".", "step_size", "\n", "self", ".", "robot", ".", "move_to", "(", "approach", ",", "timeout", "=", "1.0", ")", "\n", "\n", "force", "=", "self", ".", "robot", ".", "get_force", "(", ")", "\n", "print", "(", "'force: '", ",", "self", ".", "robot", ".", "get_force", "(", ")", ")", "\n", "\n", "if", "force", ".", "z", "<", "self", ".", "force_threshold", ":", "\n", "                ", "print", "(", "(", "\"End Effector Force is: \"", "+", "str", "(", "[", "force", ".", "x", ",", "force", ".", "y", ",", "force", ".", "z", "]", ")", ")", ")", "\n", "print", "(", "\"Max z force reached before reaching the pose\"", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._retract": [[62, 79], ["pnp.PickAndPlace.robot.current_pose", "geometry_msgs.msg.Pose", "pnp.PickAndPlace.robot.move_to"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.current_pose", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_to"], ["", "", "", "def", "_retract", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Retract up from current pose\n        \"\"\"", "\n", "# retrieve current pose from endpoint", "\n", "current_pose", "=", "self", ".", "robot", ".", "current_pose", "(", ")", "\n", "pose", "=", "Pose", "(", ")", "\n", "pose", ".", "position", ".", "x", "=", "current_pose", "[", "'position'", "]", ".", "x", "\n", "pose", ".", "position", ".", "y", "=", "current_pose", "[", "'position'", "]", ".", "y", "\n", "pose", ".", "position", ".", "z", "=", "current_pose", "[", "'position'", "]", ".", "z", "+", "self", ".", "_hover_distance", "\n", "pose", ".", "orientation", ".", "x", "=", "current_pose", "[", "'orientation'", "]", ".", "x", "\n", "pose", ".", "orientation", ".", "y", "=", "current_pose", "[", "'orientation'", "]", ".", "y", "\n", "pose", ".", "orientation", ".", "z", "=", "current_pose", "[", "'orientation'", "]", ".", "z", "\n", "pose", ".", "orientation", ".", "w", "=", "current_pose", "[", "'orientation'", "]", ".", "w", "\n", "\n", "# servo up from current pose", "\n", "self", ".", "robot", ".", "move_to", "(", "pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.pick": [[80, 98], ["utils.transforms.get_pose", "utils.transforms.rotate_pose_msg_by_euler_angles", "pnp.PickAndPlace.robot.open_gripper", "pnp.PickAndPlace._approach", "pnp.PickAndPlace.robot.close_gripper", "pnp.PickAndPlace._retract"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.get_pose", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.rotate_pose_msg_by_euler_angles", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.open_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._approach", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._retract"], ["", "def", "pick", "(", "self", ",", "grasp_pose", ")", ":", "\n", "        ", "\"\"\"\n        Pick from given pose\n        \"\"\"", "\n", "# Calculate grasp pose", "\n", "pose", "=", "get_pose", "(", "position", "=", "grasp_pose", "[", ":", "3", "]", ")", "\n", "\n", "# Apply grasp angle from model output", "\n", "pose", "=", "rotate_pose_msg_by_euler_angles", "(", "pose", ",", "0.0", ",", "0.0", ",", "grasp_pose", "[", "3", "]", ")", "\n", "\n", "# open the gripper", "\n", "self", ".", "robot", ".", "open_gripper", "(", ")", "\n", "# approach to the pose", "\n", "self", ".", "_approach", "(", "pose", ")", "\n", "# close gripper", "\n", "self", ".", "robot", ".", "close_gripper", "(", ")", "\n", "# retract to clear object", "\n", "self", ".", "_retract", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.place": [[99, 114], ["utils.transforms.get_pose", "pnp.PickAndPlace._approach", "pnp.PickAndPlace.robot.open_gripper", "numpy.save", "pnp.PickAndPlace._retract"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.get_pose", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._approach", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.open_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace._retract"], ["", "def", "place", "(", "self", ",", "place_position", ")", ":", "\n", "        ", "\"\"\"\n        Place to given pose\n        \"\"\"", "\n", "# Calculate pose from place position", "\n", "pose", "=", "get_pose", "(", "position", "=", "place_position", ")", "\n", "\n", "# approach to the pose", "\n", "self", ".", "_approach", "(", "pose", ")", "\n", "# open the gripper", "\n", "self", ".", "robot", ".", "open_gripper", "(", ")", "\n", "# Get the next grasp pose", "\n", "np", ".", "save", "(", "self", ".", "grasp_request", ",", "1", ")", "\n", "# retract to clear object", "\n", "self", ".", "_retract", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.run": [[115, 148], ["pnp.PickAndPlace.robot.connect", "pnp.PickAndPlace.robot.calibrate_gripper", "numpy.save", "numpy.save", "print", "pnp.PickAndPlace.robot.go_home", "pnp.PickAndPlace.robot.open_gripper", "numpy.save", "rospy.is_shutdown", "print", "numpy.load", "numpy.save", "print", "pnp.PickAndPlace.pick", "print", "pnp.PickAndPlace.place", "time.sleep", "numpy.load", "rospy.is_shutdown"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.connect", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.calibrate_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.go_home", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.open_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.pick", "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.pnp.PickAndPlace.place"], ["", "def", "run", "(", "self", ")", ":", "\n", "# Connect to robot", "\n", "        ", "self", ".", "robot", ".", "connect", "(", ")", "\n", "\n", "# Calibrate gripper", "\n", "self", ".", "robot", ".", "calibrate_gripper", "(", ")", "\n", "\n", "# Initialize grasp request and grasp available", "\n", "np", ".", "save", "(", "self", ".", "grasp_request", ",", "0", ")", "\n", "np", ".", "save", "(", "self", ".", "grasp_available", ",", "0", ")", "\n", "\n", "# Move robot to home pose", "\n", "print", "(", "'Moving to start position...'", ")", "\n", "self", ".", "robot", ".", "go_home", "(", ")", "\n", "self", ".", "robot", ".", "open_gripper", "(", ")", "\n", "\n", "# Get the first grasp pose", "\n", "np", ".", "save", "(", "self", ".", "grasp_request", ",", "1", ")", "\n", "\n", "while", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "            ", "print", "(", "'Waiting for grasp pose...'", ")", "\n", "while", "not", "np", ".", "load", "(", "self", ".", "grasp_available", ")", "and", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "grasp_pose", "=", "np", ".", "load", "(", "self", ".", "grasp_pose", ")", "\n", "np", ".", "save", "(", "self", ".", "grasp_available", ",", "0", ")", "\n", "\n", "# Perform pick", "\n", "print", "(", "'Picking from '", ",", "grasp_pose", ")", "\n", "self", ".", "pick", "(", "grasp_pose", ")", "\n", "\n", "# Perform place", "\n", "print", "(", "'Placing to '", ",", "self", ".", "place_position", ")", "\n", "self", ".", "place", "(", "self", ".", "place_position", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.calibrate.Calibration.__init__": [[12, 18], ["hardware.robot.Robot", "os.path.join", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "robot", "=", "Robot", "(", ")", "\n", "\n", "homedir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ",", "\"grasp-comms\"", ")", "\n", "self", ".", "move_completed", "=", "os", ".", "path", ".", "join", "(", "homedir", ",", "\"move_completed.npy\"", ")", "\n", "self", ".", "tool_position", "=", "os", ".", "path", ".", "join", "(", "homedir", ",", "\"tool_position.npy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.tasks.calibrate.Calibration.run": [[19, 48], ["calibrate.Calibration.robot.connect", "print", "calibrate.Calibration.robot.go_home", "calibrate.Calibration.robot.calibrate_gripper", "calibrate.Calibration.robot.open_gripper", "raw_input", "calibrate.Calibration.robot.close_gripper", "raw_input", "print", "rospy.is_shutdown", "numpy.load", "numpy.load", "print", "utils.transforms.get_pose", "utils.transforms.rotate_pose_msg_by_euler_angles", "calibrate.Calibration.robot.move_to", "numpy.save", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.connect", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.go_home", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.calibrate_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.open_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.get_pose", "home.repos.pwc.inspect_result.skumra_baxter-pnp.utils.transforms.rotate_pose_msg_by_euler_angles", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_to"], ["", "def", "run", "(", "self", ")", ":", "\n", "# Connect to robot", "\n", "        ", "self", ".", "robot", ".", "connect", "(", ")", "\n", "\n", "# Move robot to home pose", "\n", "print", "(", "'Moving to start position...'", ")", "\n", "self", ".", "robot", ".", "go_home", "(", ")", "\n", "\n", "# Calibrate gripper", "\n", "self", ".", "robot", ".", "calibrate_gripper", "(", ")", "\n", "\n", "# Allow user to install the checker board", "\n", "self", ".", "robot", ".", "open_gripper", "(", ")", "\n", "raw_input", "(", "'Press enter to close gripper..'", ")", "\n", "self", ".", "robot", ".", "close_gripper", "(", ")", "\n", "raw_input", "(", "'Press enter to continue..'", ")", "\n", "\n", "# Move robot to each calibration point in workspace", "\n", "print", "(", "'Collecting data...'", ")", "\n", "while", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "            ", "if", "not", "np", ".", "load", "(", "self", ".", "move_completed", ")", ":", "\n", "                ", "tool_position", "=", "np", ".", "load", "(", "self", ".", "tool_position", ")", "\n", "print", "(", "'Moving to tool position: '", ",", "tool_position", ")", "\n", "pose", "=", "get_pose", "(", "position", "=", "tool_position", ")", "\n", "pose_rot", "=", "rotate_pose_msg_by_euler_angles", "(", "pose", ",", "0", ",", "np", ".", "pi", "/", "2", ",", "-", "np", ".", "pi", "/", "2", ")", "\n", "self", ".", "robot", ".", "move_to", "(", "pose_rot", ")", "\n", "np", ".", "save", "(", "self", ".", "move_completed", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.__init__": [[18, 30], ["rospy.init_node", "baxter_interface.Limb", "baxter_interface.Gripper"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "workspace_limits", "=", "None", ",", "limb", "=", "'right'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "workspace_limits", "=", "workspace_limits", "\n", "self", ".", "limb", "=", "limb", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n", "# Initialize ros node", "\n", "rospy", ".", "init_node", "(", "\"pick_and_place\"", ")", "\n", "\n", "self", ".", "_limb", "=", "baxter_interface", ".", "Limb", "(", "self", ".", "limb", ")", "\n", "self", ".", "_gripper", "=", "baxter_interface", ".", "Gripper", "(", "self", ".", "limb", ")", "\n", "\n", "self", ".", "_iksvc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot._ik_request": [[31, 60], ["std_msgs.msg.Header", "baxter_core_msgs.srv.SolvePositionIKRequest", "baxter_core_msgs.srv.SolvePositionIKRequest.pose_stamp.append", "struct.unpack", "geometry_msgs.msg.PoseStamped", "robot.Robot._iksvc", "dict", "rospy.logerr", "rospy.Time.now", "rospy.logerr", "len", "print", "zip", "print", "print"], "methods", ["None"], ["", "def", "_ik_request", "(", "self", ",", "pose", ")", ":", "\n", "        ", "hdr", "=", "Header", "(", "stamp", "=", "rospy", ".", "Time", ".", "now", "(", ")", ",", "frame_id", "=", "'base'", ")", "\n", "ikreq", "=", "SolvePositionIKRequest", "(", ")", "\n", "ikreq", ".", "pose_stamp", ".", "append", "(", "PoseStamped", "(", "header", "=", "hdr", ",", "pose", "=", "pose", ")", ")", "\n", "try", ":", "\n", "            ", "resp", "=", "self", ".", "_iksvc", "(", "ikreq", ")", "\n", "", "except", "(", "rospy", ".", "ServiceException", ",", "rospy", ".", "ROSException", ")", "as", "e", ":", "\n", "            ", "rospy", ".", "logerr", "(", "\"Service call failed: %s\"", "%", "(", "e", ",", ")", ")", "\n", "return", "False", "\n", "# Check if result valid, and type of seed ultimately used to get solution", "\n", "# convert rospy's string representation of uint8[]'s to int's", "\n", "", "resp_seeds", "=", "struct", ".", "unpack", "(", "'<%dB'", "%", "len", "(", "resp", ".", "result_type", ")", ",", "resp", ".", "result_type", ")", "\n", "if", "resp_seeds", "[", "0", "]", "!=", "resp", ".", "RESULT_INVALID", ":", "\n", "            ", "seed_str", "=", "{", "\n", "ikreq", ".", "SEED_USER", ":", "'User Provided Seed'", ",", "\n", "ikreq", ".", "SEED_CURRENT", ":", "'Current Joint Angles'", ",", "\n", "ikreq", ".", "SEED_NS_MAP", ":", "'Nullspace Setpoints'", ",", "\n", "}", ".", "get", "(", "resp_seeds", "[", "0", "]", ",", "'None'", ")", "\n", "if", "self", ".", "_verbose", ":", "\n", "                ", "print", "(", "\"IK Solution SUCCESS - Valid Joint Solution Found from Seed Type: {0}\"", ".", "format", "(", "seed_str", ")", ")", "\n", "# Format solution into Limb API-compatible dictionary", "\n", "", "limb_joints", "=", "dict", "(", "zip", "(", "resp", ".", "joints", "[", "0", "]", ".", "name", ",", "resp", ".", "joints", "[", "0", "]", ".", "position", ")", ")", "\n", "if", "self", ".", "_verbose", ":", "\n", "                ", "print", "(", "\"IK Joint Solution:\\n{0}\"", ".", "format", "(", "limb_joints", ")", ")", "\n", "print", "(", "\"------------------\"", ")", "\n", "", "", "else", ":", "\n", "            ", "rospy", ".", "logerr", "(", "\"INVALID POSE - No Valid Joint Solution Found.\"", ")", "\n", "return", "False", "\n", "", "return", "limb_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.connect": [[61, 74], ["print", "baxter_interface.RobotEnable", "print", "rospy.ServiceProxy", "rospy.wait_for_service", "print", "baxter_interface.RobotEnable.enable", "baxter_interface.RobotEnable.state"], "methods", ["None"], ["", "def", "connect", "(", "self", ")", ":", "\n", "        ", "\"\"\" Establish connection with the robot \"\"\"", "\n", "# verify robot is enabled", "\n", "print", "(", "\"Getting robot state... \"", ")", "\n", "rs", "=", "baxter_interface", ".", "RobotEnable", "(", "baxter_interface", ".", "CHECK_VERSION", ")", "\n", "if", "not", "rs", ".", "state", "(", ")", ".", "enabled", ":", "\n", "            ", "print", "(", "\"Enabling robot... \"", ")", "\n", "rs", ".", "enable", "(", ")", "\n", "", "print", "(", "\"Robot enabled... \"", ")", "\n", "\n", "ns", "=", "\"ExternalTools/\"", "+", "self", ".", "limb", "+", "\"/PositionKinematicsNode/IKService\"", "\n", "self", ".", "_iksvc", "=", "rospy", ".", "ServiceProxy", "(", "ns", ",", "SolvePositionIK", ")", "\n", "rospy", ".", "wait_for_service", "(", "ns", ",", "5.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.close_gripper": [[75, 79], ["robot.Robot._gripper.close", "rospy.sleep"], "methods", ["None"], ["", "def", "close_gripper", "(", "self", ")", ":", "\n", "        ", "\"\"\" Close robot gripper \"\"\"", "\n", "self", ".", "_gripper", ".", "close", "(", ")", "\n", "rospy", ".", "sleep", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.open_gripper": [[80, 84], ["robot.Robot._gripper.open", "rospy.sleep"], "methods", ["None"], ["", "def", "open_gripper", "(", "self", ")", ":", "\n", "        ", "\"\"\" Open robot gripper \"\"\"", "\n", "self", ".", "_gripper", ".", "open", "(", ")", "\n", "rospy", ".", "sleep", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.calibrate_gripper": [[85, 88], ["robot.Robot._gripper.calibrate"], "methods", ["None"], ["", "def", "calibrate_gripper", "(", "self", ")", ":", "\n", "        ", "\"\"\" Calibrate gripper \"\"\"", "\n", "self", ".", "_gripper", ".", "calibrate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_to": [[89, 93], ["robot.Robot._ik_request", "robot.Robot.move_joints"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot._ik_request", "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_joints"], ["", "def", "move_to", "(", "self", ",", "pose", ",", "timeout", "=", "15.0", ")", ":", "\n", "        ", "\"\"\" Move robot in cartesian space \"\"\"", "\n", "joint_angles", "=", "self", ".", "_ik_request", "(", "pose", ")", "\n", "self", ".", "move_joints", "(", "joint_angles", ",", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_joints": [[94, 100], ["robot.Robot._limb.move_to_joint_positions", "rospy.logerr"], "methods", ["None"], ["", "def", "move_joints", "(", "self", ",", "joint_angles", ",", "timeout", ")", ":", "\n", "        ", "\"\"\" Move robot in joint space \"\"\"", "\n", "if", "joint_angles", ":", "\n", "            ", "self", ".", "_limb", ".", "move_to_joint_positions", "(", "joint_angles", ",", "timeout", ")", "\n", "", "else", ":", "\n", "            ", "rospy", ".", "logerr", "(", "\"No Joint Angles provided for move_to_joint_positions. Staying put.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.current_pose": [[101, 105], ["robot.Robot._limb.endpoint_pose"], "methods", ["None"], ["", "", "def", "current_pose", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return current pose from endpoint \"\"\"", "\n", "current_pose", "=", "self", ".", "_limb", ".", "endpoint_pose", "(", ")", "\n", "return", "current_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.go_home": [[106, 109], ["robot.Robot._limb.move_to_neutral"], "methods", ["None"], ["", "def", "go_home", "(", "self", ")", ":", "\n", "        ", "\"\"\" Move robot to home position \"\"\"", "\n", "self", ".", "_limb", ".", "move_to_neutral", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.go_to_dofs": [[110, 114], ["dict", "robot.Robot.move_joints", "zip"], "methods", ["home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.move_joints"], ["", "def", "go_to_dofs", "(", "self", ",", "angles", ")", ":", "\n", "        ", "\"\"\" Move robot to angles \"\"\"", "\n", "joint_angles", "=", "dict", "(", "zip", "(", "self", ".", "_limb", ".", "_joint_names", "[", "self", ".", "limb", "]", ",", "angles", ")", ")", "\n", "self", ".", "move_joints", "(", "joint_angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.skumra_baxter-pnp.hardware.robot.Robot.get_force": [[115, 118], ["robot.Robot._limb.endpoint_effort"], "methods", ["None"], ["", "def", "get_force", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns force at end effector \"\"\"", "\n", "return", "self", ".", "_limb", ".", "endpoint_effort", "(", ")", "[", "'force'", "]", "\n", "\n"]]}