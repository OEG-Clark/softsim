{"home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.Conv2DLayer.__init__": [[14, 27], ["torch.Sequential.__init__", "location_aware_sirr_model.Conv2DLayer.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "location_aware_sirr_model.Conv2DLayer.add_module", "location_aware_sirr_model.Conv2DLayer.add_module", "norm"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "k_size", ",", "stride", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "norm", "=", "None", ",", "act", "=", "None", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv2DLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# use default padding value or (kernel size // 2) * dilation value", "\n", "if", "padding", "is", "not", "None", ":", "\n", "            ", "padding", "=", "padding", "\n", "", "else", ":", "\n", "            ", "padding", "=", "dilation", "*", "(", "k_size", "-", "1", ")", "//", "2", "\n", "\n", "", "self", ".", "add_module", "(", "'conv2d'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "k_size", ",", "stride", ",", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", ")", "\n", "if", "norm", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_module", "(", "'norm'", ",", "norm", "(", "out_channels", ")", ")", "\n", "", "if", "act", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_module", "(", "'act'", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SElayer.__init__": [[32, 40], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SElayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SElayer.forward": [[42, 48], ["location_aware_sirr_model.SElayer.avg_pool().view", "location_aware_sirr_model.SElayer.se().view", "location_aware_sirr_model.SElayer.avg_pool", "location_aware_sirr_model.SElayer.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "shape", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "se", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ResidualBlock.__init__": [[55, 64], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "location_aware_sirr_model.Conv2DLayer", "location_aware_sirr_model.Conv2DLayer", "location_aware_sirr_model.SElayer"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "norm", "=", "nn", ".", "BatchNorm2d", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "se_reduction", "=", "None", ",", "res_scale", "=", "1", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2DLayer", "(", "channel", ",", "channel", ",", "k_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "norm", "=", "norm", ",", "act", "=", "act", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "Conv2DLayer", "(", "channel", ",", "channel", ",", "k_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "norm", "=", "norm", ",", "act", "=", "None", ",", "bias", "=", "None", ")", "\n", "self", ".", "se_layer", "=", "None", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "if", "se_reduction", "is", "not", "None", ":", "\n", "            ", "self", ".", "se_layer", "=", "SElayer", "(", "channel", ",", "se_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ResidualBlock.forward": [[65, 74], ["location_aware_sirr_model.ResidualBlock.conv1", "location_aware_sirr_model.ResidualBlock.conv2", "location_aware_sirr_model.ResidualBlock.se_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "se_layer", ":", "\n", "            ", "x", "=", "self", ".", "se_layer", "(", "x", ")", "\n", "", "x", "=", "x", "*", "self", ".", "res_scale", "\n", "out", "=", "x", "+", "res", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ChannelAttention.__init__": [[80, 91], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "ChannelAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "\n", "self", ".", "fc_1", "=", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "fc_2", "=", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ChannelAttention.forward": [[92, 97], ["location_aware_sirr_model.ChannelAttention.fc_2", "location_aware_sirr_model.ChannelAttention.fc_2", "location_aware_sirr_model.ChannelAttention.sigmoid", "location_aware_sirr_model.ChannelAttention.relu", "location_aware_sirr_model.ChannelAttention.relu", "location_aware_sirr_model.ChannelAttention.fc_1", "location_aware_sirr_model.ChannelAttention.fc_1", "location_aware_sirr_model.ChannelAttention.avg_pool", "location_aware_sirr_model.ChannelAttention.max_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_output", "=", "self", ".", "fc_2", "(", "self", ".", "relu", "(", "self", ".", "fc_1", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", ")", "\n", "max_output", "=", "self", ".", "fc_2", "(", "self", ".", "relu", "(", "self", ".", "fc_1", "(", "self", ".", "max_pool", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "avg_output", "+", "max_output", "\n", "return", "self", ".", "sigmoid", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SpatialAttention.__init__": [[102, 109], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "kernel_size", "in", "[", "3", ",", "7", "]", ",", "'kernel size must be 3 or 7.'", "\n", "padding_size", "=", "1", "if", "kernel_size", "==", "3", "else", "3", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "padding", "=", "padding_size", ",", "bias", "=", "False", ",", "kernel_size", "=", "kernel_size", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SpatialAttention.forward": [[110, 117], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "location_aware_sirr_model.SpatialAttention.conv", "location_aware_sirr_model.SpatialAttention.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pool_out", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv", "(", "pool_out", ")", "\n", "return", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.CBAMlayer.__init__": [[122, 126], ["torch.Module.__init__", "location_aware_sirr_model.ChannelAttention", "location_aware_sirr_model.SpatialAttention"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "CBAMlayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel_layer", "=", "ChannelAttention", "(", "channel", ",", "reduction", ")", "\n", "self", ".", "spatial_layer", "=", "SpatialAttention", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.CBAMlayer.forward": [[127, 131], ["location_aware_sirr_model.CBAMlayer.channel_layer", "location_aware_sirr_model.CBAMlayer.spatial_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "channel_layer", "(", "x", ")", "*", "x", "\n", "x", "=", "self", ".", "spatial_layer", "(", "x", ")", "*", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ResidualCbamBlock.__init__": [[136, 144], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Module.__init__", "location_aware_sirr_model.Conv2DLayer", "location_aware_sirr_model.Conv2DLayer", "location_aware_sirr_model.CBAMlayer"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "norm", "=", "nn", ".", "BatchNorm2d", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "cbam_reduction", "=", "None", ",", "act", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResidualCbamBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2DLayer", "(", "channel", ",", "channel", ",", "k_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "norm", "=", "norm", ",", "act", "=", "act", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "Conv2DLayer", "(", "channel", ",", "channel", ",", "k_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "dilation", ",", "norm", "=", "norm", ",", "act", "=", "None", ",", "bias", "=", "None", ")", "\n", "self", ".", "cbam_layer", "=", "None", "\n", "if", "cbam_reduction", "is", "not", "None", ":", "\n", "            ", "self", ".", "cbam_layer", "=", "CBAMlayer", "(", "channel", ",", "cbam_reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.ResidualCbamBlock.forward": [[145, 154], ["location_aware_sirr_model.ResidualCbamBlock.conv1", "location_aware_sirr_model.ResidualCbamBlock.conv2", "location_aware_sirr_model.ResidualCbamBlock.cbam_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "if", "self", ".", "cbam_layer", ":", "\n", "            ", "x", "=", "self", ".", "cbam_layer", "(", "x", ")", "\n", "\n", "", "out", "=", "x", "+", "res", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SingleLaplacian.__init__": [[158, 168], ["torch.Module.__init__", "numpy.array", "numpy.repeat", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "SingleLaplacian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# 2D laplacian kernel (2D LOG operator.).", "\n", "self", ".", "channel_dim", "=", "dim", "\n", "laplacian_kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "4", ",", "-", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "\n", "laplacian_kernel", "=", "np", ".", "repeat", "(", "laplacian_kernel", "[", "None", ",", "None", ",", ":", ",", ":", "]", ",", "dim", ",", "0", ")", "\n", "# learnable kernel.", "\n", "self", ".", "kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "laplacian_kernel", ")", ")", "\n", "# self.kernel = Variable(torch.FloatTensor(laplacian_kernel).to(device))", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.SingleLaplacian.forward": [[170, 175], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pyramid module in 4 scales.", "\n", "        ", "lap", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "groups", "=", "self", ".", "channel_dim", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "\n", "return", "lap", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LaplacianPyramid.__init__": [[181, 191], ["torch.Module.__init__", "numpy.array", "numpy.repeat", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "dim", "=", "3", ")", ":", "\n", "        ", "super", "(", "LaplacianPyramid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# 2D laplacian kernel (2D LOG operator).", "\n", "self", ".", "channel_dim", "=", "dim", "\n", "laplacian_kernel", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "4", ",", "-", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "\n", "laplacian_kernel", "=", "np", ".", "repeat", "(", "laplacian_kernel", "[", "None", ",", "None", ",", ":", ",", ":", "]", ",", "dim", ",", "0", ")", "\n", "# learnable laplacian kernel", "\n", "self", ".", "kernel", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "laplacian_kernel", ")", ")", "\n", "# self.kernel = Variable(torch.FloatTensor(laplacian_kernel).to(device))", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LaplacianPyramid.forward": [[193, 207], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pyramid module for 4 scales.", "\n", "        ", "x0", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.125", ",", "mode", "=", "'bilinear'", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.25", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'bilinear'", ")", "\n", "lap_0", "=", "F", ".", "conv2d", "(", "x0", ",", "self", ".", "kernel", ",", "groups", "=", "self", ".", "channel_dim", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "lap_1", "=", "F", ".", "conv2d", "(", "x1", ",", "self", ".", "kernel", ",", "groups", "=", "self", ".", "channel_dim", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "lap_2", "=", "F", ".", "conv2d", "(", "x2", ",", "self", ".", "kernel", ",", "groups", "=", "self", ".", "channel_dim", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "lap_3", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "groups", "=", "self", ".", "channel_dim", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", "\n", "lap_0", "=", "F", ".", "interpolate", "(", "lap_0", ",", "scale_factor", "=", "8", ",", "mode", "=", "'bilinear'", ")", "\n", "lap_1", "=", "F", ".", "interpolate", "(", "lap_1", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ")", "\n", "lap_2", "=", "F", ".", "interpolate", "(", "lap_2", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "lap_0", ",", "lap_1", ",", "lap_2", ",", "lap_3", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LRM.__init__": [[211, 374], ["torch.Module.__init__", "location_aware_sirr_model.LaplacianPyramid", "torch.Sequential", "torch.Sequential", "torch.Sequential", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "location_aware_sirr_model.ResidualBlock", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "location_aware_sirr_model.ResidualCbamBlock", "location_aware_sirr_model.ResidualCbamBlock", "location_aware_sirr_model.ResidualCbamBlock", "location_aware_sirr_model.ResidualCbamBlock", "location_aware_sirr_model.ResidualCbamBlock", "location_aware_sirr_model.ResidualCbamBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", "LRM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Laplacian blocks ", "\n", "self", ".", "lap_pyramid", "=", "LaplacianPyramid", "(", "device", ",", "dim", "=", "6", ")", "# multi-scale laplacian submodules (RDMs)", "\n", "# self.lap_single = SingleLaplacian(device, dim=6)", "\n", "\n", "self", ".", "det_conv0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "6", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "# SE-resblocks(ReLU)", "\n", "self", ".", "det_conv1", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "self", ".", "det_conv2", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "self", ".", "det_conv3", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "self", ".", "det_conv4", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "self", ".", "det_conv4_1", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "self", ".", "det_conv4_2", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ")", "\n", "\n", "# Convolutional blocks for encoding laplacian features. ", "\n", "self", ".", "det_conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "24", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "# SE-resblocks(P-ReLU)", "\n", "self", ".", "det_conv6", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "det_conv7", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "det_conv8", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "det_conv9", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "det_conv10", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "self", ".", "det_conv11", "=", "ResidualBlock", "(", "32", ",", "norm", "=", "None", ",", "se_reduction", "=", "2", ",", "res_scale", "=", "0.1", ",", "act", "=", "nn", ".", "PReLU", "(", ")", ")", "\n", "\n", "# Activations.", "\n", "self", ".", "p_relu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# Convolutional block for RCMap_{i+1}", "\n", "self", ".", "det_conv_mask0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "# LSTM block.", "\n", "self", ".", "conv_i", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "*", "4", ",", "32", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "conv_f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "*", "4", ",", "32", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "conv_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "*", "4", ",", "32", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "*", "4", ",", "32", "*", "2", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "# Convolutional block for R_{i+1}", "\n", "self", ".", "det_conv_mask1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "*", "2", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "# Auto-Encoder.", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "10", ",", "64", ",", "5", ",", "1", ",", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "diconv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "diconv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "4", ",", "dilation", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "diconv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "8", ",", "dilation", "=", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "diconv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "16", ",", "dilation", "=", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "0", ",", "1", ",", "0", ")", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "1", ",", "0", ",", "1", ",", "0", ")", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "conv10", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "outframe1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "outframe2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "3", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "# Convolutional Block Attention Modules.", "\n", "self", ".", "cbam_block0", "=", "ResidualCbamBlock", "(", "64", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "2", ")", "\n", "\n", "self", ".", "cbam_block1", "=", "ResidualCbamBlock", "(", "128", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "4", ")", "\n", "self", ".", "cbam_block2", "=", "ResidualCbamBlock", "(", "128", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "4", ")", "\n", "\n", "self", ".", "cbam_block3", "=", "ResidualCbamBlock", "(", "256", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "8", ")", "\n", "self", ".", "cbam_block4", "=", "ResidualCbamBlock", "(", "256", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "8", ")", "\n", "self", ".", "cbam_block5", "=", "ResidualCbamBlock", "(", "256", ",", "norm", "=", "None", ",", "cbam_reduction", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LRM.forward": [[376, 462], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "location_aware_sirr_model.LRM.lap_pyramid", "location_aware_sirr_model.LRM.det_conv0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "location_aware_sirr_model.LRM.det_conv5", "location_aware_sirr_model.LRM.p_relu", "location_aware_sirr_model.LRM.p_relu", "location_aware_sirr_model.LRM.p_relu", "location_aware_sirr_model.LRM.det_conv_mask0", "location_aware_sirr_model.LRM.p_relu", "location_aware_sirr_model.LRM.p_relu", "location_aware_sirr_model.LRM.p_relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "location_aware_sirr_model.LRM.conv_i", "location_aware_sirr_model.LRM.conv_f", "location_aware_sirr_model.LRM.conv_g", "location_aware_sirr_model.LRM.conv_o", "location_aware_sirr_model.LRM.det_conv_mask1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "location_aware_sirr_model.LRM.conv1", "location_aware_sirr_model.LRM.cbam_block0", "location_aware_sirr_model.LRM.conv2", "location_aware_sirr_model.LRM.conv3", "location_aware_sirr_model.LRM.cbam_block1", "location_aware_sirr_model.LRM.cbam_block2", "location_aware_sirr_model.LRM.conv4", "location_aware_sirr_model.LRM.conv5", "location_aware_sirr_model.LRM.conv6", "location_aware_sirr_model.LRM.cbam_block3", "location_aware_sirr_model.LRM.cbam_block4", "location_aware_sirr_model.LRM.cbam_block5", "location_aware_sirr_model.LRM.diconv1", "location_aware_sirr_model.LRM.diconv2", "location_aware_sirr_model.LRM.diconv3", "location_aware_sirr_model.LRM.diconv4", "location_aware_sirr_model.LRM.conv7", "location_aware_sirr_model.LRM.conv8", "location_aware_sirr_model.LRM.outframe1", "location_aware_sirr_model.LRM.deconv1", "location_aware_sirr_model.LRM.conv9", "location_aware_sirr_model.LRM.outframe2", "location_aware_sirr_model.LRM.deconv2", "location_aware_sirr_model.LRM.conv10", "location_aware_sirr_model.LRM.output", "location_aware_sirr_model.LRM.det_conv1", "location_aware_sirr_model.LRM.det_conv2", "location_aware_sirr_model.LRM.det_conv3", "location_aware_sirr_model.LRM.det_conv4", "location_aware_sirr_model.LRM.det_conv4_1", "location_aware_sirr_model.LRM.det_conv4_2", "location_aware_sirr_model.LRM.det_conv6", "location_aware_sirr_model.LRM.det_conv7", "location_aware_sirr_model.LRM.det_conv8", "location_aware_sirr_model.LRM.det_conv9", "location_aware_sirr_model.LRM.det_conv10", "location_aware_sirr_model.LRM.det_conv11", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "I", ",", "T", ",", "h", ",", "c", ")", ":", "\n", "# I: original image.", "\n", "# T: transmission image.", "\n", "# h, c: hidden states for LSTM block in stage_1.", "\n", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "I", ",", "T", "]", ",", "1", ")", "\n", "# get laplacian(frequency) information of [I,T].", "\n", "lap", "=", "self", ".", "lap_pyramid", "(", "x", ")", "\n", "\n", "# ----- Stage1 -----", "\n", "# encode [I, T].", "\n", "x", "=", "self", ".", "det_conv0", "(", "x", ")", "\n", "# se-resblock layer1 for [I, T] features.", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv3", "(", "x", ")", ")", "\n", "# se-resblock layer2 for [I, T] features.", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv4", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv4_1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "det_conv4_2", "(", "x", ")", ")", "\n", "\n", "# encode [I_lap, T_lap].", "\n", "lap", "=", "self", ".", "det_conv5", "(", "lap", ")", "\n", "# se-resblock layer3 for [I_lap, T_lap] features (p-relu for activation.)", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv6", "(", "lap", ")", ")", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv7", "(", "lap", ")", ")", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv8", "(", "lap", ")", ")", "\n", "# predict RCMap from laplacian features.", "\n", "c_map", "=", "self", ".", "det_conv_mask0", "(", "lap", ")", "\n", "# se-resblock layer4 for [I_lap, T_lap] features (p-relu for activation.)", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv9", "(", "lap", ")", ")", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv10", "(", "lap", ")", ")", "\n", "lap", "=", "self", ".", "p_relu", "(", "self", ".", "det_conv11", "(", "lap", ")", ")", "\n", "# suppress transmission features.", "\n", "lap", "=", "(", "1", "-", "c_map", ")", "*", "lap", "\n", "\n", "# concat image & laplacian feature and recurrent features.", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "lap", ",", "h", "]", ",", "1", ")", "\n", "\n", "# lstm.", "\n", "i", "=", "self", ".", "conv_i", "(", "x", ")", "\n", "f", "=", "self", ".", "conv_f", "(", "x", ")", "\n", "g", "=", "self", ".", "conv_g", "(", "x", ")", "\n", "o", "=", "self", ".", "conv_o", "(", "x", ")", "\n", "c", "=", "f", "*", "c", "+", "i", "*", "g", "\n", "h", "=", "o", "*", "torch", ".", "tanh", "(", "c", ")", "\n", "reflect", "=", "self", ".", "det_conv_mask1", "(", "h", ")", "\n", "\n", "# ------ Stage2 ------ ", "\n", "# predict T_{i+1} with input: R_{i+1}, T_i, C_{i+1}.", "\n", "x", "=", "torch", ".", "cat", "(", "[", "I", ",", "T", ",", "reflect", ",", "c_map", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "cbam_block0", "(", "x", ")", "\n", "res1", "=", "x", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "# feature spatial & channel attention.", "\n", "x", "=", "self", ".", "cbam_block1", "(", "x", ")", "\n", "x", "=", "self", ".", "cbam_block2", "(", "x", ")", "\n", "res2", "=", "x", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "# feature spatial & channel attention.", "\n", "x", "=", "self", ".", "cbam_block3", "(", "x", ")", "\n", "x", "=", "self", ".", "cbam_block4", "(", "x", ")", "\n", "x", "=", "self", ".", "cbam_block5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "diconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "diconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "diconv3", "(", "x", ")", "\n", "x", "=", "self", ".", "diconv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "\n", "frame1", "=", "self", ".", "outframe1", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv1", "(", "x", ")", "\n", "x", "=", "x", "+", "res2", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "frame2", "=", "self", ".", "outframe2", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv2", "(", "x", ")", "\n", "x", "=", "x", "+", "res1", "\n", "x", "=", "self", ".", "conv10", "(", "x", ")", "\n", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "\n", "return", "h", ",", "c", ",", "c_map", ",", "reflect", ",", "frame1", ",", "frame2", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.__init__": [[466, 473], ["torch.Module.__init__", "LRM().to", "location_aware_sirr_model.LRM"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ",", "device", ")", ":", "\n", "        ", "super", "(", "LocationAwareSIRR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "opts", "=", "opts", "\n", "self", ".", "visual_names", "=", "[", "'fake_Ts'", ",", "'fake_Rs'", ",", "'rcmaps'", ",", "'I'", "]", "\n", "\n", "self", ".", "netG_T", "=", "LRM", "(", "device", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.setup": [[474, 477], ["location_aware_sirr_model.LocationAwareSIRR.load_networks"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.load_networks"], ["", "def", "setup", "(", "self", ")", ":", "\n", "# setup setting of the LRM.", "\n", "        ", "self", ".", "load_networks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.load_networks": [[478, 487], ["os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "location_aware_sirr_model.LocationAwareSIRR.netG_T.load_state_dict", "str"], "methods", ["None"], ["", "def", "load_networks", "(", "self", ")", ":", "\n", "# load parameters for the network: netG_T.", "\n", "        ", "model_name", "=", "'model.pth'", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opts", ".", "model_dir", ",", "model_name", ")", "\n", "# net = self.netG_T.module", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "print", "(", "'Load the model from %s'", "%", "load_path", ")", "\n", "self", ".", "netG_T", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.get_current_visuals": [[488, 496], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "# get the current visuals results.", "\n", "        ", "visual_result", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_result", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "", "", "return", "visual_result", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.get_image_paths": [[497, 500], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "# return the current image paths which are used to load current data.", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.set_input": [[501, 506], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "# load images dataset from dataloader.", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "I", "=", "input", "[", "'I'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'I_path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.init": [[507, 519], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "location_aware_sirr_model.LocationAwareSIRR.I.clone().detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "location_aware_sirr_model.LocationAwareSIRR.I.clone"], "methods", ["None"], ["", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "self", ".", "I", ".", "shape", "\n", "self", ".", "h", "=", "Variable", "(", "torch", ".", "zeros", "(", "b", ",", "64", ",", "h", ",", "w", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "self", ".", "c", "=", "Variable", "(", "torch", ".", "zeros", "(", "b", ",", "64", ",", "h", ",", "w", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "\n", "self", ".", "fake_T", "=", "self", ".", "I", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "self", ".", "fake_Ts", "=", "[", "self", ".", "fake_T", "]", "\n", "\n", "self", ".", "fake_R", "=", "torch", ".", "zeros_like", "(", "self", ".", "I", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "fake_Rs", "=", "[", "self", ".", "fake_R", "]", "\n", "\n", "self", ".", "rcmaps", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.forward": [[520, 536], ["location_aware_sirr_model.LocationAwareSIRR.init", "range", "range", "range", "location_aware_sirr_model.LocationAwareSIRR.netG_T", "location_aware_sirr_model.LocationAwareSIRR.rcmaps.append", "location_aware_sirr_model.LocationAwareSIRR.fake_Rs.append", "location_aware_sirr_model.LocationAwareSIRR.fake_Ts.append", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "len", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.init"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "init", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "h", ",", "self", ".", "c", ",", "self", ".", "c_map", ",", "self", ".", "fake_R", ",", "self", ".", "fake_T4", ",", "self", ".", "fake_T2", ",", "self", ".", "fake_T", "=", "self", ".", "netG_T", "(", "self", ".", "I", ",", "self", ".", "fake_Ts", "[", "-", "1", "]", ",", "self", ".", "h", ",", "self", ".", "c", ")", "\n", "\n", "self", ".", "rcmaps", ".", "append", "(", "self", ".", "c_map", ")", "\n", "self", ".", "fake_Rs", ".", "append", "(", "self", ".", "fake_R", ")", "\n", "self", ".", "fake_Ts", ".", "append", "(", "self", ".", "fake_T", ")", "\n", "\n", "# adjust the pixel values ranges.", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fake_Ts", ")", ")", ":", "\n", "            ", "self", ".", "fake_Ts", "[", "i", "]", "=", "torch", ".", "clamp", "(", "self", ".", "fake_Ts", "[", "i", "]", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fake_Rs", ")", ")", ":", "\n", "            ", "self", ".", "fake_Rs", "[", "i", "]", "=", "torch", ".", "clamp", "(", "self", ".", "fake_Rs", "[", "i", "]", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.eval": [[537, 539], ["location_aware_sirr_model.LocationAwareSIRR.netG_T.eval"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG_T", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.inference": [[540, 543], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "location_aware_sirr_model.LocationAwareSIRR.forward"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.None.location_aware_sirr_model.LocationAwareSIRR.forward"], ["", "def", "inference", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.__init__": [[14, 34], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "dominate.tags.meta", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "\"\"\"Initialize the HTML classes\n\n        Parameters:\n            web_dir (str) -- a directory that stores the webpage. HTML file will be created at <web_dir>/index.html; images will be saved at <web_dir/images/\n            title (str)   -- the webpage name\n            refresh (int) -- how often the website refresh itself; if 0; no refreshing\n        \"\"\"", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.get_image_dir": [[35, 38], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the directory that stores images\"\"\"", "\n", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_header": [[39, 47], ["dominate.tags.h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Insert a header to the HTML file\n\n        Parameters:\n            text (str) -- the header text\n        \"\"\"", "\n", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_images": [[48, 67], ["dominate.tags.table", "html.HTML.doc.add", "dominate.tags.tr", "zip", "dominate.tags.td", "dominate.tags.p", "dominate.tags.br", "dominate.tags.p", "dominate.tags.a", "dominate.tags.img", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "\"\"\"add images to the HTML file\n\n        Parameters:\n            ims (str list)   -- a list of image paths\n            txts (str list)  -- a list of image names shown on the website\n            links (str list) --  a list of hyperref links; when you click an image, it will redirect you to a new page\n        \"\"\"", "\n", "self", ".", "t", "=", "table", "(", "border", "=", "1", ",", "style", "=", "\"table-layout: fixed;\"", ")", "# Insert a table", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.save": [[68, 74], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"save the current content to the HMTL file\"\"\"", "\n", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.__init__": [[64, 98], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write", "visualizer.Visualizer.vis.check_connection", "visualizer.Visualizer.create_visdom_connections"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.mkdirs", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.create_visdom_connections"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the Visualizer class\n\n        Parameters:\n            opt -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        Step 1: Cache the training/test options\n        Step 2: connect to a visdom server\n        Step 3: create an HTML object for saveing HTML filters\n        Step 4: create a logging file to store training losses\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "# cache the option", "\n", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "port", "=", "opt", ".", "display_port", "\n", "self", ".", "saved", "=", "False", "\n", "if", "self", ".", "display_id", ">", "0", ":", "# connect to a visdom server given <display_port> and <display_server>", "\n", "            ", "import", "visdom", "\n", "self", ".", "ncols", "=", "opt", ".", "display_ncols", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "display_server", ",", "port", "=", "opt", ".", "display_port", ",", "env", "=", "opt", ".", "display_env", ")", "\n", "if", "not", "self", ".", "vis", ".", "check_connection", "(", ")", ":", "\n", "                ", "self", ".", "create_visdom_connections", "(", ")", "\n", "\n", "", "", "if", "self", ".", "use_html", ":", "# create an HTML object at <checkpoints_dir>/web/; images will be saved under <checkpoints_dir>/web/images/", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "# create a logging file to store training losses", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.reset": [[99, 102], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the self.saved status\"\"\"", "\n", "self", ".", "saved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.create_visdom_connections": [[103, 109], ["print", "print", "subprocess.Popen"], "methods", ["None"], ["", "def", "create_visdom_connections", "(", "self", ")", ":", "\n", "        ", "\"\"\"If the program could not connect to Visdom server, this function will start a new server at port < self.port > \"\"\"", "\n", "cmd", "=", "sys", ".", "executable", "+", "' -m visdom.server -p %d &>/dev/null &'", "%", "self", ".", "port", "\n", "print", "(", "'\\n\\nCould not connect to Visdom server. \\n Trying to start a server....'", ")", "\n", "print", "(", "'Command: %s'", "%", "cmd", ")", "\n", "Popen", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.display_current_results": [[110, 195], ["visuals.items", "html.HTML", "range", "html.HTML.save", "min", "visuals.items", "enumerate", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "len", "util.tensor2im", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "isinstance", "util.tensor2im", "os.path.join", "util.save_image", "enumerate", "next", "util.tensor2im.transpose", "util.tensor2im.transpose", "visualizer.Visualizer.create_visdom_connections", "util.tensor2im", "visualizer.Visualizer.vis.image", "visualizer.Visualizer.create_visdom_connections", "isinstance", "ims.append", "txts.append", "links.append", "iter", "dict", "dict", "util.tensor2im.transpose", "visuals.values", "dict"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.save", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_header", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tensor2im", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tensor2im", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.save_image", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.create_visdom_connections", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tensor2im", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.create_visdom_connections"], ["", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "save_result", ")", ":", "\n", "        ", "\"\"\"Display current results on visdom; save current results to an HTML file.\n\n        Parameters:\n            visuals (OrderedDict) - - dictionary of images to display or save\n            epoch (int) - - the current epoch\n            save_result (bool) - - if save the current results to an HTML file\n        \"\"\"", "\n", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser using visdom", "\n", "            ", "ncols", "=", "self", ".", "ncols", "\n", "if", "ncols", ">", "0", ":", "# show all the images in one visdom panel", "\n", "                ", "ncols", "=", "min", "(", "ncols", ",", "len", "(", "visuals", ")", ")", "\n", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n                        table {border-collapse: separate; border-spacing: 4px; white-space: nowrap; text-align: center}\n                        table td {width: % dpx; height: % dpx; padding: 4px; outline: 4px solid black}\n                        </style>\"\"\"", "%", "(", "w", ",", "h", ")", "# create a table css", "\n", "# create a table of images.", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "", "try", ":", "\n", "                    ", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "                    ", "self", ".", "create_visdom_connections", "(", ")", "\n", "\n", "", "", "else", ":", "# show each image in a separate visdom panel;", "\n", "                ", "idx", "=", "1", "\n", "try", ":", "\n", "                    ", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                        ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "", "except", "VisdomExceptionBase", ":", "\n", "                    ", "self", ".", "create_visdom_connections", "(", ")", "\n", "\n", "", "", "", "if", "self", ".", "use_html", "and", "(", "save_result", "or", "not", "self", ".", "saved", ")", ":", "# save images to an HTML file if they haven't been saved.", "\n", "            ", "self", ".", "saved", "=", "True", "\n", "# save images to the disk", "\n", "for", "label", ",", "im_datas", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "im_datas", ",", "list", ")", ":", "\n", "                    ", "im_datas", "=", "[", "im_datas", "]", "\n", "", "for", "i", ",", "im_data", "in", "enumerate", "(", "im_datas", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "im_data", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s_%d.png'", "%", "(", "epoch", ",", "label", ",", "i", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "\n", "# update website", "\n", "", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "refresh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# for label, image_numpy in visuals.items():", "\n", "for", "label", ",", "im_datas", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "isinstance", "(", "im_datas", ",", "list", ")", ":", "\n", "                        ", "im_datas", "=", "[", "im_datas", "]", "\n", "", "for", "i", ",", "im_data", "in", "enumerate", "(", "im_datas", ")", ":", "\n", "                        ", "img_path", "=", "'epoch%.3d_%s_%d.png'", "%", "(", "epoch", ",", "label", ",", "i", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.plot_current_losses": [[196, 220], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "hasattr", "visualizer.Visualizer.vis.line", "list", "visualizer.Visualizer.create_visdom_connections", "losses.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.create_visdom_connections"], ["", "", "def", "plot_current_losses", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "losses", ")", ":", "\n", "        ", "\"\"\"display the current losses on visdom display: dictionary of error labels and values\n\n        Parameters:\n            epoch (int)           -- current epoch\n            counter_ratio (float) -- progress (percentage) in the current epoch, between 0 to 1\n            losses (OrderedDict)  -- training losses stored in the format of (name, float) pairs\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "losses", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "losses", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "            ", "self", ".", "create_visdom_connections", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.Visualizer.print_current_losses": [[222, 239], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "iters", ",", "losses", ",", "t_comp", ",", "t_data", ")", ":", "\n", "        ", "\"\"\"print current losses on console; also save the losses to the disk\n\n        Parameters:\n            epoch (int) -- current epoch\n            iters (int) -- current training iteration during this epoch (reset to 0 at the end of every epoch)\n            losses (OrderedDict) -- training losses stored in the format of (name, float) pairs\n            t_comp (float) -- computational time per data point (normalized by batch_size)\n            t_data (float) -- data loading time per data point (normalized by batch_size)\n        \"\"\"", "\n", "message", "=", "'(epoch: %d, iters: %d, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "iters", ",", "t_comp", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "# print the message", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "# save the message", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.visualizer.save_images": [[17, 56], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "enumerate", "isinstance", "util.tensor2im", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append", "numpy.array", "numpy.array", "PIL.Image.fromarray().resize", "PIL.Image.fromarray().resize", "PIL.Image.fromarray", "int", "PIL.Image.fromarray", "int"], "function", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_header", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.add_images", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tensor2im", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.save_image"], ["", "def", "save_images", "(", "webpage", ",", "visuals", ",", "image_path", ",", "aspect_ratio", "=", "1.0", ",", "width", "=", "256", ")", ":", "\n", "    ", "\"\"\"Save images to the disk.\n\n    Parameters:\n        webpage (the HTML class) -- the HTML webpage class that stores these imaegs (see html.py for more details)\n        visuals (OrderedDict)    -- an ordered dictionary that stores (name, images (either tensor or numpy) ) pairs\n        image_path (str)         -- the string is used to create image paths\n        aspect_ratio (float)     -- the aspect ratio of saved images\n        width (int)              -- the images will be resized to width x width\n\n    This function will save images stored in 'visuals' to the HTML file specified by 'webpage'.\n    \"\"\"", "\n", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "im_datas", "in", "visuals", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "im_datas", ",", "list", ")", ":", "\n", "            ", "im_datas", "=", "[", "im_datas", "]", "\n", "", "for", "i", ",", "im_data", "in", "enumerate", "(", "im_datas", ")", ":", "\n", "            ", "im", "=", "util", ".", "tensor2im", "(", "im_data", ")", "\n", "image_name", "=", "'%s_%s_%02d.png'", "%", "(", "name", ",", "label", ",", "i", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "if", "aspect_ratio", ">", "1.0", ":", "\n", "# im = imresize(im, (h, int(w * aspect_ratio)), interp='bicubic')", "\n", "                ", "im", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "im", ")", ".", "resize", "(", "(", "h", ",", "int", "(", "w", "*", "aspect_ratio", ")", ")", ")", ")", "\n", "", "if", "aspect_ratio", "<", "1.0", ":", "\n", "# im = imresize(im, (int(h / aspect_ratio), w), interp='bicubic')", "\n", "                ", "im", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "im", ")", ".", "resize", "(", "(", "int", "(", "h", "/", "aspect_ratio", ")", ",", "w", ")", ")", ")", "\n", "", "util", ".", "save_image", "(", "im", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tensor2im": [[12, 19], ["image_tensor[].detach().cpu().float().numpy", "np.tile.astype", "numpy.tile", "numpy.transpose", "image_tensor[].detach().cpu().float", "image_tensor[].detach().cpu", "image_tensor[].detach"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "# the image is normalized to [-1, 1] here.", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "255.", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.diagnose_network": [[20, 31], ["net.parameters", "print", "print", "torch.mean", "torch.mean", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.torch_sample_random_value": [[32, 36], ["torch.rand", "torch.rand"], "function", ["None"], ["", "def", "torch_sample_random_value", "(", "min", ",", "max", ",", "size", ")", ":", "\n", "# first sample random in [0,1].", "\n", "    ", "rand_m", "=", "torch", ".", "rand", "(", "*", "size", ")", "\n", "return", "rand_m", "*", "(", "max", "-", "min", ")", "+", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.normalize_image": [[37, 41], ["None"], "function", ["None"], ["", "def", "normalize_image", "(", "image", ")", ":", "\n", "# normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],", "\n", "#                                  std=[0.229, 0.224, 0.225])", "\n", "    ", "return", "image", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.unnormalize_image": [[42, 44], ["None"], "function", ["None"], ["", "def", "unnormalize_image", "(", "image", ")", ":", "\n", "    ", "return", "(", "image", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.tanhshrink": [[45, 47], ["torch.tanh", "torch.tanh"], "function", ["None"], ["", "def", "tanhshrink", "(", "x", ")", ":", "\n", "    ", "return", "x", "-", "torch", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.save_image": [[48, 51], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.html.HTML.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.print_numpy": [[52, 60], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.make_power": [[61, 69], ["torchvision.Resize", "transforms.Resize."], "function", ["None"], ["", "", "def", "make_power", "(", "img", ",", "base", "=", "4", ")", ":", "\n", "# Make sure that the image's size is scaled to base's power.", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "\n", "new_w", "=", "(", "w", "//", "base", ")", "*", "base", "\n", "new_h", "=", "(", "h", "//", "base", ")", "*", "base", "\n", "resize_operation", "=", "transforms", ".", "Resize", "(", "[", "new_h", ",", "new_w", "]", ")", "\n", "img", "=", "resize_operation", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.mkdirs": [[70, 76], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.mkdir", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.mkdir": [[77, 80], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.compare_psnr_ssim": [[81, 92], ["zip", "len", "len", "psnrs.append", "ssims.append", "numpy.mean", "numpy.mean", "skimage.metrics.peak_signal_noise_ratio", "skimage.metrics.structural_similarity"], "function", ["None"], ["", "", "def", "compare_psnr_ssim", "(", "I1s", ",", "I2s", ")", ":", "\n", "# compare images on the I1s & I2s dataset.", "\n", "    ", "psnrs", "=", "[", "]", "\n", "ssims", "=", "[", "]", "\n", "assert", "(", "len", "(", "I1s", ")", "==", "len", "(", "I2s", ")", ")", "\n", "\n", "for", "(", "I1", ",", "I2", ")", "in", "zip", "(", "I1s", ",", "I2s", ")", ":", "\n", "        ", "psnrs", ".", "append", "(", "skimage", ".", "metrics", ".", "peak_signal_noise_ratio", "(", "I1", ",", "I2", ",", "data_range", "=", "1", ")", ")", "\n", "ssims", ".", "append", "(", "skimage", ".", "metrics", ".", "structural_similarity", "(", "I1", ",", "I2", ",", "multichannel", "=", "True", ",", "data_range", "=", "1", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "psnrs", ")", ",", "np", ".", "mean", "(", "ssims", ")", "", "", ""]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.DatasetDataLoader.__init__": [[13, 23], ["object.__init__", "sirr_dataset.SIRRDataset", "print", "torch.DataLoader", "torch.DataLoader", "torch.DataLoader", "int", "type"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "super", "(", "DatasetDataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opts", "=", "opts", "\n", "self", ".", "dataset", "=", "SIRRDataset", "(", "opts", ")", "\n", "print", "(", "'Dataset [%s] was created'", "%", "type", "(", "self", ".", "dataset", ")", ".", "__name__", ")", "\n", "self", ".", "dataloader", "=", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "\n", "shuffle", "=", "not", "opts", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opts", ".", "num_threads", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.DatasetDataLoader.get_length": [[25, 27], ["len"], "methods", ["None"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.DatasetDataLoader.__len__": [[28, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# return the number of dataset.", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.DatasetDataLoader.__iter__": [[32, 37], ["enumerate"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a batch of data\n        \"\"\"", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "            ", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.SIRRDataset.__init__": [[41, 52], ["os.path.join", "sorted", "len", "torchvision.ToTensor", "dataset.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "self", ".", "opts", "=", "opts", "\n", "# data root ", "\n", "self", ".", "data_root", "=", "opts", ".", "data_root", "\n", "self", ".", "I_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "'blend'", ")", "\n", "\n", "self", ".", "I_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "I_dir", ")", ")", "\n", "self", ".", "Is_size", "=", "len", "(", "self", ".", "I_paths", ")", "\n", "\n", "# tensor utils.", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.SIRRDataset.__getitem__": [[53, 64], ["PIL.Image.open().convert", "utils.util.make_power", "sirr_dataset.SIRRDataset.to_tensor", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.utils.util.make_power"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "I_path", "=", "self", ".", "I_paths", "[", "index", "]", "\n", "m_img", "=", "Image", ".", "open", "(", "I_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "# Due the recurrent structure of our model and the min resolution of feature is origin's 1/8. ", "\n", "m_img", "=", "make_power", "(", "m_img", ",", "base", "=", "8", ")", "\n", "\n", "m", "=", "self", ".", "to_tensor", "(", "m_img", ")", "\n", "return", "{", "\n", "'I'", ":", "m", ",", "\n", "'I_path'", ":", "I_path", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.sirr_dataset.SIRRDataset.__len__": [[66, 68], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Is_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__": [[40, 53], ["torch.Dataset.__init__", "image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__init__", "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "super", "(", "ImageFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "images_paths", "=", "make_dataset", "(", "root_dir", ")", "\n", "if", "len", "(", "self", ".", "images_paths", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root_dir", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__getitem__": [[54, 63], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "images_paths", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.ImageFolder.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.is_image_file": [[18, 20], ["any", "file_name.endswith"], "function", ["None"], ["def", "is_image_file", "(", "file_name", ")", ":", "\n", "    ", "return", "any", "(", "file_name", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.make_dataset": [[21, 33], ["float", "os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "min", "os.path.join", "os.path.join", "images_paths.append", "len"], "function", ["home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ",", "max_dataset_size", "=", "float", "(", "'inf'", ")", ")", ":", "\n", "# get all images path in dir", "\n", "    ", "images_paths", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'{} is not a valid dir'", ".", "format", "(", "dir", ")", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "full_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images_paths", ".", "append", "(", "full_path", ")", "\n", "\n", "", "", "", "return", "images_paths", "[", ":", "min", "(", "max_dataset_size", ",", "len", "(", "images_paths", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zdlarr_Location-aware-SIRR.dataset.image_folder.default_loader": [[34, 36], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]]}