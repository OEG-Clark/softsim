{"home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.make_data": [[11, 19], ["numpy.random.default_rng", "numpy.random.default_rng.uniform", "numpy.random.default_rng.choice", "sklearn.model_selection.train_test_split"], "function", ["None"], ["def", "make_data", "(", ")", ":", "\n", "    ", "rng", "=", "default_rng", "(", ")", "\n", "d", "=", "3", "\n", "n", "=", "5000", "\n", "X", "=", "rng", ".", "uniform", "(", "-", "5", ",", "5", ",", "size", "=", "(", "n", ",", "d", ")", ")", "\n", "Y", "=", "rng", ".", "choice", "(", "d", ",", "size", "=", "n", ")", "\n", "X1", ",", "X2", ",", "Y1", ",", "Y2", "=", "train_test_split", "(", "X", ",", "Y", ",", "test_size", "=", "0.5", ")", "\n", "return", "X1", ",", "X2", ",", "Y1", ",", "Y2", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.test_mis_cov": [[21, 28], ["test_metacal.make_data", "metacal.metacal.MetaCalMisCoverage", "metacal.metacal.MetaCalMisCoverage.fit", "metacal.evaluation.ECE", "metacal.metacal.MetaCalMisCoverage.predict", "metacal.metacal.MetaCalMisCoverage.empirical_miscoverage"], "function", ["home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.make_data", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.evaluation.ECE", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalMisCoverage.empirical_miscoverage"], ["", "def", "test_mis_cov", "(", ")", ":", "\n", "    ", "X1", ",", "X2", ",", "Y1", ",", "Y2", "=", "make_data", "(", ")", "\n", "model", "=", "MetaCalMisCoverage", "(", "alpha", "=", "0.05", ")", "\n", "model", ".", "fit", "(", "X1", ",", "Y1", ")", "\n", "ece", "=", "ECE", "(", "model", ".", "predict", "(", "X2", ")", ",", "Y2", ",", "15", ")", "\n", "emp_mis", "=", "model", ".", "empirical_miscoverage", "(", "X2", ",", "Y2", ")", "[", "0", "]", "\n", "return", "ece", ",", "emp_mis", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.test_cov_acc": [[30, 37], ["test_metacal.make_data", "metacal.metacal.MetaCalCoverageAcc", "metacal.metacal.MetaCalCoverageAcc.fit", "metacal.evaluation.ECE", "metacal.metacal.MetaCalCoverageAcc.empirical_coverage_acc", "metacal.metacal.MetaCalCoverageAcc.predict"], "function", ["home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.make_data", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.evaluation.ECE", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.empirical_coverage_acc", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "test_cov_acc", "(", ")", ":", "\n", "    ", "X1", ",", "X2", ",", "Y1", ",", "Y2", "=", "make_data", "(", ")", "\n", "model", "=", "MetaCalCoverageAcc", "(", "acc", "=", "0.34", ")", "\n", "model", ".", "fit", "(", "X1", ",", "Y1", ")", "\n", "ece", "=", "ECE", "(", "model", ".", "predict", "(", "X2", ")", ",", "Y2", ",", "15", ")", "\n", "emp_acc", "=", "model", ".", "empirical_coverage_acc", "(", "X2", ",", "Y2", ")", "\n", "return", "ece", ",", "emp_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.main": [[39, 51], ["print", "print", "print", "print", "test_metacal.test_mis_cov", "test_metacal.test_cov_acc"], "function", ["home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.test_mis_cov", "home.repos.pwc.inspect_result.maxc01_metacal.tests.test_metacal.test_cov_acc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "\"Test MisCoverage (target=0.05)\"", ")", "\n", "print", "(", "\"ECE: {}, empirical miscoverage: {}\"", ".", "format", "(", "*", "test_mis_cov", "(", ")", ")", ")", "\n", "print", "(", "\"Test CoverageAcc (target=0.34)\"", ")", "\n", "should_cont", "=", "True", "\n", "while", "should_cont", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"ECE: {}, empirical coverageacc: {}\"", ".", "format", "(", "*", "test_cov_acc", "(", ")", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "should_cont", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.ts.TemperatureScaling.__init__": [[8, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temp", "=", "1", ",", "maxiter", "=", "50", ",", "solver", "=", "\"BFGS\"", ")", ":", "\n", "        ", "\"\"\"\n        Initialize class\n\n        Params:\n            temp (float): starting temperature, default 1\n            maxiter (int): maximum iterations done by optimizer, however 8 iterations have been maximum.\n        \"\"\"", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "maxiter", "=", "maxiter", "\n", "self", ".", "solver", "=", "solver", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.ts.TemperatureScaling._loss_fun": [[20, 26], ["ts.TemperatureScaling.predict", "sklearn.metrics.log_loss", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "_loss_fun", "(", "self", ",", "x", ",", "probs", ",", "true", ")", ":", "\n", "# Calculates the loss using log-loss (cross-entropy loss)", "\n", "        ", "scaled_probs", "=", "self", ".", "predict", "(", "probs", ",", "x", ")", "\n", "K", "=", "probs", ".", "shape", "[", "1", "]", "\n", "loss", "=", "log_loss", "(", "y_true", "=", "true", ",", "y_pred", "=", "scaled_probs", ",", "labels", "=", "np", ".", "arange", "(", "K", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.ts.TemperatureScaling.fit": [[28, 51], ["true.flatten.flatten.flatten", "scipy.optimize.minimize"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "logits", ",", "true", ")", ":", "\n", "        ", "\"\"\"\n        Trains the model and finds optimal temperature\n\n        Params:\n            logits: the output from neural network for each class (shape [samples, classes])\n            true: one-hot-encoding of true labels.\n\n        Returns:\n            the results of optimizer after minimizing is finished.\n        \"\"\"", "\n", "\n", "true", "=", "true", ".", "flatten", "(", ")", "# Flatten y_val", "\n", "opt", "=", "minimize", "(", "\n", "self", ".", "_loss_fun", ",", "\n", "x0", "=", "1", ",", "\n", "args", "=", "(", "logits", ",", "true", ")", ",", "\n", "options", "=", "{", "\"maxiter\"", ":", "self", ".", "maxiter", "}", ",", "\n", "method", "=", "self", ".", "solver", ",", "\n", ")", "\n", "self", ".", "temp", "=", "opt", ".", "x", "[", "0", "]", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.ts.TemperatureScaling.predict": [[52, 68], ["scipy.special.softmax", "scipy.special.softmax"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "logits", ",", "temp", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Scales logits based on the temperature and returns calibrated probabilities\n\n        Params:\n            logits: logits values of data (output from neural network) for each class (shape [samples, classes])\n            temp: if not set use temperatures find by model or previously set.\n\n        Returns:\n            calibrated probabilities (nd.array with shape [samples, classes])\n        \"\"\"", "\n", "\n", "if", "not", "temp", ":", "\n", "            ", "return", "softmax", "(", "logits", "/", "self", ".", "temp", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "softmax", "(", "logits", "/", "temp", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.ts.run_ts": [[70, 78], ["load_data", "ts.TemperatureScaling", "ts.TemperatureScaling.fit", "ts.TemperatureScaling.predict"], "function", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.utils.load_data", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "", "", "def", "run_ts", "(", "conf_name", ")", ":", "\n", "    ", "from", "metacal", ".", "utils", "import", "load_data", "\n", "\n", "X_train", ",", "Y_train", ",", "X_test", ",", "Y_test", "=", "load_data", "(", "conf_name", ")", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_model", ".", "fit", "(", "X_train", ",", "Y_train", ")", "\n", "proba_test", "=", "ts_model", ".", "predict", "(", "X_test", ")", "\n", "return", "proba_test", ",", "Y_test", "\n", "", ""]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalMisCoverage.__init__": [[16, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalMisCoverage.fit": [[19, 47], ["int", "min", "sklearn.model_selection.train_test_split", "scipy.stats.entropy", "numpy.quantile", "scipy.stats.entropy", "metacal.ts.TemperatureScaling", "metacal.ts.TemperatureScaling.fit", "numpy.argmax", "scipy.special.softmax", "scipy.special.softmax", "len"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "\"\"\"\n        xs: logits, (N,K)\n        ys: labels, (N,)\n        \"\"\"", "\n", "# 1. divide data into two parts", "\n", "neg_ind", "=", "np", ".", "argmax", "(", "xs", ",", "axis", "=", "1", ")", "==", "ys", "\n", "xs_neg", ",", "ys_neg", "=", "xs", "[", "neg_ind", "]", ",", "ys", "[", "neg_ind", "]", "\n", "xs_pos", ",", "ys_pos", "=", "xs", "[", "~", "neg_ind", "]", ",", "ys", "[", "~", "neg_ind", "]", "\n", "n1", "=", "int", "(", "len", "(", "xs_neg", ")", "/", "10", ")", "# 1/10 of negative, compute a threshold", "\n", "n1", "=", "min", "(", "n1", ",", "500", ")", "\n", "x1", ",", "x2", ",", "_", ",", "y2", "=", "train_test_split", "(", "xs_neg", ",", "ys_neg", ",", "train_size", "=", "n1", ")", "\n", "x2", "=", "np", ".", "r_", "[", "x2", ",", "xs_pos", "]", "\n", "y2", "=", "np", ".", "r_", "[", "y2", ",", "ys_pos", "]", "\n", "# 2. compute threshold on x1", "\n", "scores_x1", "=", "entropy", "(", "softmax", "(", "x1", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "threshold", "=", "np", ".", "quantile", "(", "scores_x1", ",", "1", "-", "self", ".", "alpha", ",", "interpolation", "=", "\"higher\"", ")", "\n", "\n", "# 3. fit a base calibrator on (x2,y2) | h(X) < threshold", "\n", "scores_x2", "=", "entropy", "(", "softmax", "(", "x2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "cond_ind", "=", "scores_x2", "<", "threshold", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_x", ",", "ts_y", "=", "x2", "[", "cond_ind", "]", ",", "y2", "[", "cond_ind", "]", "\n", "ts_model", ".", "fit", "(", "ts_x", ",", "ts_y", ")", "\n", "\n", "# 4. return the binary classifier and fitted base calibrator", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "base_model", "=", "ts_model", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalMisCoverage.predict": [[48, 62], ["scipy.stats.entropy", "numpy.empty_like", "metacal.MetaCalMisCoverage.base_model.predict", "hasattr", "AttributeError", "scipy.special.softmax"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        X: logits, (N,K)\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"threshold\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"run fit on training set first\"", ")", "\n", "\n", "", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "neg_ind", "=", "scores_X", "<", "self", ".", "threshold", "\n", "proba_cal", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "proba_cal", "[", "neg_ind", "]", "=", "self", ".", "base_model", ".", "predict", "(", "X", "[", "neg_ind", "]", ")", "\n", "proba_cal", "[", "~", "neg_ind", "]", "=", "1", "/", "X", ".", "shape", "[", "1", "]", "\n", "\n", "return", "proba_cal", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalMisCoverage.empirical_miscoverage": [[63, 73], ["scipy.stats.entropy", "metacal.utils.errors", "scipy.special.softmax", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.utils.errors"], ["", "def", "empirical_miscoverage", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" empirical type-i, type-ii\n        X: logits, (N,K)\n        Y: labels, (N,)\n        \"\"\"", "\n", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "bin_pred", "=", "scores_X", ">", "self", ".", "threshold", "\n", "bin_target", "=", "np", ".", "argmax", "(", "X", ",", "axis", "=", "1", ")", "!=", "Y", "\n", "R0", ",", "R1", ",", "_", ",", "_", ",", "_", "=", "errors", "(", "bin_pred", ",", "bin_target", ")", "\n", "return", "R0", ",", "R1", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.__init__": [[79, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "acc", ")", ":", "\n", "        ", "self", ".", "acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit": [[82, 119], ["int", "min", "sklearn.model_selection.train_test_split", "numpy.argmax", "scipy.stats.entropy", "numpy.quantile", "zip", "sklearn.isotonic.IsotonicRegression().fit", "numpy.isnan", "scipy.stats.entropy", "metacal.ts.TemperatureScaling", "metacal.ts.TemperatureScaling.fit", "scipy.special.softmax", "numpy.linspace", "numpy.add.accumulate", "sklearn.isotonic.IsotonicRegression().fit.predict", "ValueError", "scipy.special.softmax", "len", "numpy.where", "len", "accs.append", "ents.append", "accs.append", "ents.append", "numpy.arange", "sklearn.isotonic.IsotonicRegression", "numpy.logical_and", "numpy.mean", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.fit", "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "fit", "(", "self", ",", "xs", ",", "ys", ")", ":", "\n", "        ", "\"\"\"\n        xs: logits, (N,K)\n        ys: labels, (N,)\n        \"\"\"", "\n", "bins", "=", "20", "# number of bins used to estimate l", "\n", "n1", "=", "int", "(", "len", "(", "xs", ")", "/", "10", ")", "\n", "n1", "=", "min", "(", "n1", ",", "500", ")", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "train_test_split", "(", "xs", ",", "ys", ",", "train_size", "=", "n1", ")", "\n", "x1_pred", "=", "np", ".", "argmax", "(", "x1", ",", "axis", "=", "1", ")", "\n", "scores_x1", "=", "entropy", "(", "softmax", "(", "x1", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "accs", "=", "[", "]", "\n", "ents", "=", "[", "]", "\n", "cut_points", "=", "np", ".", "quantile", "(", "scores_x1", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "bins", "+", "1", ")", ")", "\n", "for", "(", "a", ",", "b", ")", "in", "zip", "(", "cut_points", ",", "cut_points", "[", "1", ":", "]", ")", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "scores_x1", ">", "a", ",", "scores_x1", "<=", "b", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "                ", "accs", ".", "append", "(", "np", ".", "mean", "(", "y1", "[", "indices", "]", "==", "x1_pred", "[", "indices", "]", ")", ")", "\n", "ents", ".", "append", "(", "np", ".", "mean", "(", "scores_x1", "[", "indices", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "accs", ".", "append", "(", "0", ")", "\n", "ents", ".", "append", "(", "0", ")", "\n", "", "", "accs_avg", "=", "np", ".", "add", ".", "accumulate", "(", "accs", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "accs", ")", ")", "+", "1", ")", "\n", "model_l", "=", "IsotonicRegression", "(", "increasing", "=", "False", ")", ".", "fit", "(", "accs_avg", ",", "ents", ")", "\n", "\n", "threshold", "=", "model_l", ".", "predict", "(", "[", "self", ".", "acc", "]", ")", "[", "0", "]", "\n", "if", "np", ".", "isnan", "(", "threshold", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"coverage accuracy should be increased\"", ")", "\n", "", "scores_x2", "=", "entropy", "(", "softmax", "(", "x2", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "cond_ind", "=", "scores_x2", "<", "threshold", "\n", "ts_model", "=", "TemperatureScaling", "(", ")", "\n", "ts_x", ",", "ts_y", "=", "x2", "[", "cond_ind", "]", ",", "y2", "[", "cond_ind", "]", "\n", "ts_model", ".", "fit", "(", "ts_x", ",", "ts_y", ")", "\n", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "base_model", "=", "ts_model", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict": [[120, 138], ["scipy.stats.entropy", "numpy.empty_like", "metacal.MetaCalCoverageAcc.base_model.predict", "hasattr", "AttributeError", "scipy.special.softmax"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "predict", "(", "self", ",", "X", ",", "return_ind", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        X: logits, (N,K)\n        return_ind: if True, return indices whose scores less than threshold\n        \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"threshold\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"run fit on training set first\"", ")", "\n", "\n", "", "scores_X", "=", "entropy", "(", "softmax", "(", "X", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "neg_ind", "=", "scores_X", "<", "self", ".", "threshold", "\n", "proba_cal", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "proba_cal", "[", "neg_ind", "]", "=", "self", ".", "base_model", ".", "predict", "(", "X", "[", "neg_ind", "]", ")", "\n", "proba_cal", "[", "~", "neg_ind", "]", "=", "1", "/", "X", ".", "shape", "[", "1", "]", "\n", "\n", "if", "return_ind", ":", "\n", "            ", "return", "proba_cal", ",", "neg_ind", "\n", "\n", "", "return", "proba_cal", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.empirical_coverage_acc": [[139, 148], ["metacal.MetaCalCoverageAcc.predict", "numpy.mean", "numpy.argmax", "proba_cal[].argmax"], "methods", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.metacal.MetaCalCoverageAcc.predict"], ["", "def", "empirical_coverage_acc", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" empirical coverage accuracy\n        X: logits, (N,K)\n        Y: labels, (N,)\n        \"\"\"", "\n", "proba_cal", ",", "neg_ind", "=", "self", ".", "predict", "(", "X", ",", "return_ind", "=", "True", ")", "\n", "cov_acc", "=", "np", ".", "mean", "(", "proba_cal", "[", "neg_ind", "]", ".", "argmax", "(", "axis", "=", "1", ")", "==", "Y", "[", "neg_ind", "]", ")", "\n", "np", ".", "argmax", "(", "X", ",", "axis", "=", "1", ")", "==", "Y", "\n", "return", "cov_acc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.utils.load_data": [[13, 36], ["utils.load_data.prepare_data"], "function", ["None"], ["def", "load_data", "(", "conf_name", ",", "repeat", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    repeat: if True, first merge train and test, then do a random split\n    \"\"\"", "\n", "assert", "conf_name", "in", "logit_names", "\n", "\n", "def", "prepare_data", "(", "name", ")", ":", "\n", "        ", "with", "open", "(", "name", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "(", "logits_train", ",", "y_train", ")", ",", "(", "logits_test", ",", "y_test", ")", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "logits_train", ",", "y_train", ".", "flatten", "(", ")", ",", "logits_test", ",", "y_test", ".", "flatten", "(", ")", "\n", "\n", "", "logit_name", "=", "f\"probs_{conf_name}_logits.p\"", "\n", "logit_train", ",", "y_train", ",", "logit_test", ",", "y_test", "=", "prepare_data", "(", "logit_base", "/", "logit_name", ")", "\n", "\n", "if", "repeat", ":", "\n", "        ", "train_size", "=", "logit_train", ".", "shape", "[", "0", "]", "\n", "_logit_all", "=", "np", ".", "r_", "[", "logit_train", ",", "logit_test", "]", "\n", "_y_all", "=", "np", ".", "r_", "[", "y_train", ",", "y_test", "]", "\n", "logit_train", ",", "logit_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "\n", "_logit_all", ",", "_y_all", ",", "train_size", "=", "train_size", "\n", ")", "\n", "\n", "", "return", "logit_train", ",", "y_train", ",", "logit_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.utils.errors": [[38, 53], ["numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "errors", "(", "preds", ",", "targets", ")", ":", "\n", "    ", "\"\"\" compute type1 error, type2 error, and accuracy\n\n    preds: (N,)\n    targets: (N,)\n    \"\"\"", "\n", "preds", "=", "np", ".", "asarray", "(", "preds", ")", ".", "astype", "(", "\"i\"", ")", "\n", "targets", "=", "np", ".", "asarray", "(", "targets", ")", ".", "astype", "(", "\"i\"", ")", "\n", "indices", "=", "targets", "==", "0", "\n", "R0", "=", "np", ".", "mean", "(", "preds", "[", "indices", "]", "!=", "targets", "[", "indices", "]", ")", "# type-I error", "\n", "R1", "=", "np", ".", "mean", "(", "preds", "[", "~", "indices", "]", "!=", "targets", "[", "~", "indices", "]", ")", "# type-II error", "\n", "acc", "=", "np", ".", "mean", "(", "preds", "==", "targets", ")", "\n", "w1", "=", "np", ".", "mean", "(", "targets", ")", "\n", "w0", "=", "1", "-", "w1", "\n", "return", "R0", ",", "R1", ",", "w0", ",", "w1", ",", "acc", "\n", "", ""]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.evaluation.reliability_diag": [[4, 40], ["numpy.argmax", "numpy.max", "zip", "numpy.abs", "numpy.linspace", "numpy.quantile", "mids.append", "ns.append", "numpy.linspace", "numpy.where", "len", "accs.append", "confs.append", "len", "numpy.asarray", "numpy.asarray", "numpy.logical_and", "accs.append", "confs.append", "conf[].mean", "accs.append", "confs.append", "numpy.median"], "function", ["None"], ["def", "reliability_diag", "(", "prob", ",", "t", ",", "n_bins", "=", "10", ",", "scheme", "=", "\"eqdist_prob\"", ",", "agg", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\" Reliability Diagrams from Guo2017\n\n    prob: (N, K), row sum=1\n    t: (N,), an integer array\n    \"\"\"", "\n", "assert", "scheme", "in", "[", "\"eqdist_prob\"", ",", "\"eqdist_quantile\"", "]", "\n", "assert", "agg", "in", "[", "\"mean\"", ",", "\"median\"", "]", "\n", "pred", "=", "np", ".", "argmax", "(", "prob", ",", "axis", "=", "1", ")", "\n", "conf", "=", "np", ".", "max", "(", "prob", ",", "axis", "=", "1", ")", "\n", "if", "scheme", "==", "\"eqdist_prob\"", ":", "\n", "        ", "cut_points", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "", "else", ":", "\n", "        ", "cut_points", "=", "np", ".", "quantile", "(", "conf", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", ")", "\n", "", "accs", "=", "[", "]", "\n", "confs", "=", "[", "]", "\n", "ns", "=", "[", "]", "\n", "mids", "=", "[", "]", "\n", "for", "(", "a", ",", "b", ")", "in", "zip", "(", "cut_points", ",", "cut_points", "[", "1", ":", "]", ")", ":", "\n", "        ", "mids", ".", "append", "(", "(", "a", "+", "b", ")", "/", "2.0", ")", "\n", "indices", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "conf", ">", "a", ",", "conf", "<=", "b", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "            ", "if", "agg", "==", "\"mean\"", ":", "\n", "                ", "accs", ".", "append", "(", "(", "t", "[", "indices", "]", "==", "pred", "[", "indices", "]", ")", ".", "mean", "(", ")", ")", "\n", "confs", ".", "append", "(", "conf", "[", "indices", "]", ".", "mean", "(", ")", ")", "\n", "", "elif", "agg", "==", "\"median\"", ":", "\n", "                ", "accs", ".", "append", "(", "(", "t", "[", "indices", "]", "==", "pred", "[", "indices", "]", ")", ".", "mean", "(", ")", ")", "\n", "confs", ".", "append", "(", "np", ".", "median", "(", "conf", "[", "indices", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "accs", ".", "append", "(", "0", ")", "\n", "confs", ".", "append", "(", "0", ")", "\n", "", "ns", ".", "append", "(", "len", "(", "indices", ")", ")", "\n", "", "gaps", "=", "np", ".", "abs", "(", "np", ".", "asarray", "(", "confs", ")", "-", "np", ".", "asarray", "(", "accs", ")", ")", "\n", "# better names for \"confs\" and \"accs\" are \"forecast probablity\" and", "\n", "# \"observed frequency\" resp.", "\n", "return", "accs", ",", "confs", ",", "ns", ",", "mids", ",", "gaps", "\n", "\n"]], "home.repos.pwc.inspect_result.maxc01_metacal.metacal.evaluation.ECE": [[42, 46], ["evaluation.reliability_diag", "numpy.sum", "numpy.sum", "zip", "abs"], "function", ["home.repos.pwc.inspect_result.maxc01_metacal.metacal.evaluation.reliability_diag"], ["", "def", "ECE", "(", "prob", ",", "t", ",", "n_bins", "=", "10", ",", "scheme", "=", "\"eqdist_prob\"", ",", "agg", "=", "\"mean\"", ")", ":", "\n", "    ", "accs", ",", "confs", ",", "ns", ",", "_", ",", "_", "=", "reliability_diag", "(", "prob", ",", "t", ",", "n_bins", ",", "scheme", ",", "agg", ")", "\n", "N", "=", "np", ".", "sum", "(", "ns", ")", "\n", "return", "np", ".", "sum", "(", "[", "abs", "(", "acc", "-", "conf", ")", "*", "n", "/", "N", "for", "acc", ",", "conf", ",", "n", "in", "zip", "(", "accs", ",", "confs", ",", "ns", ")", "]", ")", "\n", "", ""]]}