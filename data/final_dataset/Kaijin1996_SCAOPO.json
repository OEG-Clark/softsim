{"home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.main_program.main_func": [[13, 208], ["numpy.random.seed", "torch.manual_seed", "int", "modules.BetaPolicy.net.parameters", "torch.zeros", "modules.BetaPolicy.net.parameters", "numpy.zeros", "numpy.zeros", "modules.DataStorage", "modules.Environment_CLQR.reset", "range", "numpy.linspace", "numpy.array", "modules.Environment_MIMO", "numpy.array", "modules.Environment_CLQR", "modules.GaussianPolicy", "modules.BetaPolicy", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "para.numel", "para.numel", "para.data.view", "modules.BetaPolicy.sample_action", "modules.Environment_CLQR.step", "numpy.zeros", "range", "modules.DataStorage.store_experiences", "info.get", "len", "numpy.ones", "np.array.mean", "numpy.array", "example_name.split", "matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "example_name.split", "matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "numpy.ones", "np.array.append", "cost_rate_all.append", "print", "numpy.save", "numpy.save", "modules.DataStorage.take_experiences", "numpy.mean", "numpy.zeros", "range", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "range", "utility_functions.update_policy", "torch.tensor", "modules.BetaPolicy.net.parameters", "os.path.join", "torch.save", "len", "info.get", "numpy.array", "numpy.array", "modules.BetaPolicy.zero_grad", "modules.BetaPolicy.evaluate_action", "actor_loss.backward", "torch.zeros", "modules.BetaPolicy.net.parameters", "torch.zeros.detach().cpu().numpy", "para.numel", "paras_torch[].view", "modules.BetaPolicy.net.state_dict", "info.get", "numpy.sum", "numpy.mean", "numpy.std", "numpy.mean", "para.numel", "para.grad.view", "torch.zeros.detach().cpu().numpy", "str", "str", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach", "torch.zeros.detach"], "function", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.reset", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.sample_action", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.step", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.DataStorage.store_experiences", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.DataStorage.take_experiences", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions.update_policy", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.evaluate_action"], ["def", "main_func", "(", "example_name", ",", "T", ",", "num_new_data", ",", "tau", ",", "alpha_pow", ",", "beta_pow", ")", ":", "\n", "    ", "\"\"\"The main code of simulating the MIMO power allocation or the CLQR by using the SCAOPO algorithm\n       with Gaussian policy or Beta policy.\n       Please use example_name as 'MIMO_Gaussian' or 'MIMO_Beta' or 'CLQR_Gaussian' or 'CLQR_Beta'.\"\"\"", "\n", "seed", "=", "0", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "device", "=", "\"cuda:0\"", "\n", "if", "'MIMO'", "in", "example_name", ":", "\n", "        ", "Nt", ",", "UE_num", "=", "8", ",", "4", "# The number of antennas and users.", "\n", "state_dim", "=", "2", "*", "UE_num", "*", "Nt", "+", "UE_num", "\n", "action_dim", "=", "UE_num", "+", "1", "\n", "env", "=", "Environment_MIMO", "(", "seed", "=", "seed", ",", "Nt", "=", "Nt", ",", "UE_num", "=", "UE_num", ")", "\n", "constraint_dim", "=", "UE_num", "\n", "constr_lim", "=", "np", ".", "array", "(", "[", "1.0", ",", "1.4", ",", "1.0", ",", "1.4", "]", ")", "\n", "", "else", ":", "\n", "        ", "state_dim", ",", "action_dim", "=", "15", ",", "4", "\n", "env", "=", "Environment_CLQR", "(", "seed", "=", "seed", ",", "state_dim", "=", "state_dim", ",", "action_dim", "=", "action_dim", ")", "\n", "constraint_dim", "=", "1", "\n", "constr_lim", "=", "380", "*", "np", ".", "ones", "(", "constraint_dim", ")", "\n", "\n", "", "if", "'Gaussian'", "in", "example_name", ":", "\n", "        ", "fc1_dim", ",", "fc2_dim", "=", "128", ",", "128", "# hidden sizes of policy network.", "\n", "actor", "=", "GaussianPolicy", "(", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ",", "T", ")", "\n", "", "else", ":", "\n", "        ", "fc1_dim", ",", "fc2_dim", "=", "128", ",", "128", "# hidden sizes of policy network.", "\n", "actor", "=", "BetaPolicy", "(", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ",", "T", ")", "\n", "\n", "", "tau_reward", "=", "tau", "\n", "tau_cost", "=", "tau", "\n", "interaction_steps", "=", "0", "\n", "num_steps", "=", "int", "(", "1e6", ")", "\n", "chkpt_dir", "=", "example_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "chkpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "chkpt_dir", ")", "\n", "\n", "", "chkpt_dir_data", "=", "chkpt_dir", "+", "'/saved_data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "chkpt_dir_data", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "chkpt_dir_data", ")", "\n", "\n", "", "chkpt_dir_model", "=", "chkpt_dir", "+", "'/saved_model'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "chkpt_dir_model", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "chkpt_dir_model", ")", "\n", "\n", "# Initialization", "\n", "", "theta_dim", "=", "0", "\n", "for", "para", "in", "actor", ".", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "theta_dim", "+=", "para", ".", "numel", "(", ")", "\n", "", "real_theta_dim", "=", "theta_dim", "+", "action_dim", "# the dimension of the policy parameter.", "\n", "# real_theta_dim = theta_dim  # use this when using the Beta policy", "\n", "paras_torch", "=", "torch", ".", "zeros", "(", "(", "real_theta_dim", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "ind", "=", "0", "\n", "for", "para", "in", "actor", ".", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "tmp", "=", "para", ".", "numel", "(", ")", "\n", "paras_torch", "[", "ind", ":", "ind", "+", "tmp", "]", "=", "para", ".", "data", ".", "view", "(", "-", "1", ")", "\n", "ind", "=", "ind", "+", "tmp", "\n", "", "paras_torch", "[", "ind", ":", "]", "=", "actor", ".", "log_std", "# comment this when using the Beta policy", "\n", "func_value", "=", "np", ".", "zeros", "(", "constraint_dim", "+", "1", ")", "\n", "grad", "=", "np", ".", "zeros", "(", "(", "constraint_dim", "+", "1", ",", "real_theta_dim", ")", ")", "\n", "\n", "# Training", "\n", "buffer", "=", "DataStorage", "(", "T", ",", "num_new_data", ",", "state_dim", ",", "action_dim", ",", "constraint_dim", ")", "\n", "t_update", "=", "0", "# the number of updating policy", "\n", "model_saved_count", "=", "0", "# the number of saved model", "\n", "reward_rate_all", "=", "[", "]", "# all objective cost values", "\n", "cost_rate_all", "=", "[", "]", "# all constraint cost values", "\n", "reward_sum", "=", "0", "\n", "cost_sum_total", "=", "0", "\n", "observation", "=", "env", ".", "reset", "(", ")", "\n", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "# generate new data (sample one step of the env)", "\n", "        ", "state", "=", "observation", "\n", "action", "=", "actor", ".", "sample_action", "(", "state", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "# reward is the objective cost in the paper.", "\n", "costs", "=", "np", ".", "zeros", "(", "constraint_dim", "+", "1", ")", "\n", "costs", "[", "0", "]", "=", "reward", "\n", "for", "k", "in", "range", "(", "1", ",", "constraint_dim", "+", "1", ")", ":", "\n", "            ", "costs", "[", "k", "]", "=", "(", "info", ".", "get", "(", "'cost_'", "+", "str", "(", "k", ")", ",", "info", ".", "get", "(", "'cost'", ",", "0", ")", ")", "-", "constr_lim", "[", "k", "-", "1", "]", ")", "\n", "", "buffer", ".", "store_experiences", "(", "state", ",", "action", ",", "costs", ")", "\n", "interaction_steps", "+=", "1", "\n", "reward_sum", "+=", "reward", "\n", "cost_sum_total", "+=", "info", ".", "get", "(", "'cost'", ",", "0", ")", "\n", "\n", "# print results in the run", "\n", "if", "(", "step", "+", "1", ")", "%", "3000", "==", "0", ":", "\n", "            ", "reward_rate_all", ".", "append", "(", "reward_sum", "/", "interaction_steps", ")", "\n", "cost_rate_all", ".", "append", "(", "cost_sum_total", "/", "interaction_steps", ")", "\n", "print", "(", "'step: %d, reward_rate = %.3f, avg_cost_rate = %.3f'", "%", "(", "step", ",", "reward_sum", "/", "interaction_steps", "\n", ",", "\n", "cost_sum_total", "/", "interaction_steps", "/", "constraint_dim", ")", ")", "\n", "np", ".", "save", "(", "chkpt_dir_data", "+", "'/reward_rate_all.npy'", ",", "np", ".", "array", "(", "reward_rate_all", ")", ")", "\n", "np", ".", "save", "(", "chkpt_dir_data", "+", "'/cost_rate_all.npy'", ",", "np", ".", "array", "(", "cost_rate_all", ")", ")", "\n", "\n", "# update the policy", "\n", "", "if", "(", "interaction_steps", "%", "num_new_data", "==", "0", ")", "and", "(", "buffer", ".", "n_entries", "==", "2", "*", "T", ")", ":", "\n", "# estimate the function value.", "\n", "            ", "t_update", "+=", "1", "\n", "alpha", "=", "1", "/", "(", "t_update", "**", "alpha_pow", ")", "\n", "beta", "=", "1", "/", "(", "t_update", "**", "beta_pow", ")", "\n", "state_batch", ",", "action_batch", ",", "costs_batch", "=", "buffer", ".", "take_experiences", "(", ")", "\n", "func_value_tilda", "=", "np", ".", "mean", "(", "costs_batch", ",", "axis", "=", "0", ")", "\n", "func_value", "=", "(", "1", "-", "alpha", ")", "*", "func_value", "+", "alpha", "*", "func_value_tilda", "\n", "\n", "# estimate the Q-value", "\n", "Q_hat", "=", "np", ".", "zeros", "(", "(", "T", ",", "1", "+", "constraint_dim", ")", ")", "\n", "for", "_", "in", "range", "(", "1", ",", "T", "+", "1", ")", ":", "\n", "                ", "costs_tmp", "=", "costs_batch", "[", "_", ":", "_", "+", "T", "]", "\n", "Q_hat", "[", "_", "-", "1", "]", "=", "np", ".", "sum", "(", "costs_tmp", ",", "axis", "=", "0", ")", "-", "T", "*", "func_value", "\n", "\n", "", "Q_hat", "[", ":", ",", "0", "]", "=", "(", "Q_hat", "[", ":", ",", "0", "]", "-", "np", ".", "mean", "(", "Q_hat", "[", ":", ",", "0", "]", ")", ")", "/", "(", "np", ".", "std", "(", "Q_hat", "[", ":", ",", "0", "]", ")", "+", "1e-6", ")", "\n", "for", "_", "in", "range", "(", "1", ",", "1", "+", "constraint_dim", ")", ":", "\n", "                ", "Q_hat", "[", ":", ",", "_", "]", "=", "Q_hat", "[", ":", ",", "_", "]", "-", "np", ".", "mean", "(", "Q_hat", "[", ":", ",", "_", "]", ")", "\n", "\n", "", "Q_hat_torch", "=", "torch", ".", "tensor", "(", "Q_hat", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "\n", "# estimate the gradient", "\n", "state_batch_torch", "=", "torch", ".", "tensor", "(", "state_batch", "[", "1", ":", "T", "+", "1", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "action_batch_torch", "=", "torch", ".", "tensor", "(", "action_batch", "[", "1", ":", "T", "+", "1", "]", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "grad_tilda_torch", "=", "torch", ".", "zeros", "(", "(", "1", "+", "constraint_dim", ",", "real_theta_dim", ")", ",", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "device", ")", "\n", "for", "_", "in", "range", "(", "1", "+", "constraint_dim", ")", ":", "\n", "# calculate the gradient", "\n", "                ", "actor", ".", "zero_grad", "(", ")", "\n", "log_prob", "=", "actor", ".", "evaluate_action", "(", "state_batch_torch", ",", "action_batch_torch", ")", "\n", "actor_loss", "=", "(", "Q_hat_torch", "[", ":", ",", "_", "]", "*", "log_prob", ")", ".", "mean", "(", ")", "\n", "actor_loss", ".", "backward", "(", ")", "\n", "grad_tmp", "=", "torch", ".", "zeros", "(", "real_theta_dim", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "ind", "=", "0", "\n", "for", "para", "in", "actor", ".", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "tmp", "=", "para", ".", "numel", "(", ")", "\n", "grad_tmp", "[", "ind", ":", "ind", "+", "tmp", "]", "=", "para", ".", "grad", ".", "view", "(", "-", "1", ")", "\n", "ind", "=", "ind", "+", "tmp", "\n", "", "grad_tmp", "[", "ind", ":", "]", "=", "actor", ".", "log_std", ".", "grad", "# comment this when using the Beta policy", "\n", "grad_tilda_torch", "[", "_", "]", "=", "grad_tmp", "\n", "", "grad", "=", "(", "1", "-", "alpha", ")", "*", "grad", "+", "alpha", "*", "grad_tilda_torch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# update the policy parameter", "\n", "paras_bar", "=", "update_policy", "(", "func_value", ",", "grad", ",", "paras_torch", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "tau_reward", "=", "tau_reward", ",", "tau_cost", "=", "tau_cost", ")", "\n", "paras_bar_torch", "=", "torch", ".", "tensor", "(", "paras_bar", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "paras_torch", "=", "(", "1", "-", "beta", ")", "*", "paras_torch", "+", "beta", "*", "paras_bar_torch", "\n", "ind", "=", "0", "\n", "for", "para", "in", "actor", ".", "net", ".", "parameters", "(", ")", ":", "\n", "                ", "tmp", "=", "para", ".", "numel", "(", ")", "\n", "para", ".", "data", "=", "paras_torch", "[", "ind", ":", "ind", "+", "tmp", "]", ".", "view", "(", "para", ".", "shape", ")", "\n", "ind", "=", "ind", "+", "tmp", "\n", "", "actor", ".", "log_std", "=", "paras_torch", "[", "ind", ":", "]", "# comment this when using the Beta policy", "\n", "\n", "# save model", "\n", "", "if", "(", "step", "+", "1", ")", "%", "10000", "==", "0", ":", "\n", "            ", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "chkpt_dir_model", ",", "'Actor'", "+", "str", "(", "model_saved_count", ")", ")", "\n", "torch", ".", "save", "(", "actor", ".", "net", ".", "state_dict", "(", ")", ",", "checkpoint_file", ")", "\n", "model_saved_count", "+=", "1", "\n", "\n", "# plot results", "\n", "", "", "epoc", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "reward_rate_all", ")", "-", "1", ",", "len", "(", "reward_rate_all", ")", ")", "\n", "reward_rate_all", "=", "np", ".", "array", "(", "reward_rate_all", ")", "\n", "cost_limit", "=", "np", ".", "ones", "(", "epoc", ".", "shape", "[", "0", "]", ")", "*", "constr_lim", ".", "mean", "(", ")", "\n", "cost_rate_all", "=", "np", ".", "array", "(", "cost_rate_all", ")", "/", "constraint_dim", "\n", "if", "'MIMO'", "in", "example_name", ":", "\n", "        ", "name_split", "=", "example_name", ".", "split", "(", "'_'", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "reward_rate_all", ",", "label", "=", "r'$T = 1500, new = 1000$'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "ylabel", "(", "'Power consumption (W)'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "title", "(", "'MIMO using the '", "+", "name_split", "[", "1", "]", "+", "' policy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "cost_rate_all", ",", "label", "=", "r'$T = 1500, new = 1000$'", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "cost_limit", ",", "'k:'", ",", "linewidth", "=", "1.5", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "ylabel", "(", "'Average delay per user (ms)'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "title", "(", "'MIMO using the '", "+", "name_split", "[", "1", "]", "+", "' policy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "name_split", "=", "example_name", ".", "split", "(", "'_'", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "reward_rate_all", ",", "label", "=", "r'$T = 1500, new = 1000$'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "ylabel", "(", "'Objective cost'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "title", "(", "'CLQR using the '", "+", "name_split", "[", "1", "]", "+", "' policy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "cost_rate_all", ",", "label", "=", "r'$T = 1500, new = 1000$'", ")", "\n", "plt", ".", "plot", "(", "epoc", ",", "cost_limit", ",", "'k:'", ",", "linewidth", "=", "1.5", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "ylabel", "(", "'Constraint cost'", ",", "fontsize", "=", "12", ",", "fontweight", "=", "'roman'", ")", "\n", "plt", ".", "title", "(", "'CLQR using the '", "+", "name_split", "[", "1", "]", "+", "' policy'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "1", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.GaussianPolicy.__init__": [[10, 18], ["torch.Module.__init__", "modules.MLP_Gaussian", "modules.GaussianPolicy.to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__"], ["def", "__init__", "(", "self", ",", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ",", "T", ")", ":", "\n", "        ", "super", "(", "GaussianPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MLP_Gaussian", "(", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ")", "\n", "self", ".", "log_std", "=", "-", "0.5", "*", "torch", ".", "ones", "(", "action_dim", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.GaussianPolicy.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.GaussianPolicy.evaluate_action": [[22, 32], ["modules.GaussianPolicy.net.train", "modules.GaussianPolicy.net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "modules.GaussianPolicy.std_eval.view().repeat", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.log_prob().sum", "torch.distributions.normal.Normal.log_prob().sum", "torch.distributions.normal.Normal.log_prob().sum", "modules.GaussianPolicy.std_eval.view", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob", "torch.distributions.normal.Normal.log_prob"], "methods", ["None"], ["", "def", "evaluate_action", "(", "self", ",", "state_torch", ",", "action_torch", ")", ":", "\n", "        ", "self", ".", "net", ".", "train", "(", ")", "\n", "mu", "=", "self", ".", "net", "(", "state_torch", ")", "\n", "self", ".", "log_std", ".", "requires_grad", "=", "True", "\n", "self", ".", "std_eval", "=", "torch", ".", "exp", "(", "self", ".", "log_std", ")", "\n", "self", ".", "std_eval", "=", "self", ".", "std_eval", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "self", ".", "T", ",", "1", ")", "\n", "gaussian_", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "mu", ",", "self", ".", "std_eval", ")", "\n", "log_prob_action", "=", "gaussian_", ".", "log_prob", "(", "action_torch", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "log_prob_action", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.GaussianPolicy.sample_action": [[33, 44], ["modules.GaussianPolicy.net.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.distributions.normal.Normal.sample.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "modules.GaussianPolicy.net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.sample", "torch.distributions.normal.Normal.sample", "torch.distributions.normal.Normal.sample", "torch.distributions.normal.Normal.sample.detach().cpu", "torch.distributions.normal.Normal.sample.detach"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "self", ".", "log_std", ".", "requires_grad", "=", "False", "\n", "state_torch", "=", "torch", ".", "tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mu", "=", "self", ".", "net", "(", "state_torch", ")", "\n", "self", ".", "std_sample", "=", "torch", ".", "exp", "(", "self", ".", "log_std", ")", "\n", "gaussian_", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "mu", ",", "self", ".", "std_sample", ")", "\n", "action", "=", "gaussian_", ".", "sample", "(", ")", "\n", "\n", "", "return", "action", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.MLP_Gaussian.__init__": [[48, 68], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "modules.MLP_Gaussian.to", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__"], ["def", "__init__", "(", "self", ",", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "MLP_Gaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "state_dim", "\n", "self", ".", "fc1_dim", "=", "fc1_dim", "\n", "self", ".", "fc2_dim", "=", "fc2_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "fc1_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "fc1_dim", ",", "self", ".", "fc2_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc2", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "fc2_dim", ",", "self", ".", "action_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc3", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc3", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.MLP_Gaussian.forward": [[69, 85], ["modules.MLP_Gaussian.fc1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modules.MLP_Gaussian.fc2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modules.MLP_Gaussian.fc3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "state", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "mu", "=", "self", ".", "fc3", "(", "x", ")", "\n", "mu", "=", "2.5", "*", "torch", ".", "sigmoid", "(", "mu", ")", "\n", "\n", "# def forward(self, state):  # use this when simulating the CLQR.", "\n", "#     x = self.fc1(state)", "\n", "#     x = torch.tanh(x)", "\n", "#     x = self.fc2(x)", "\n", "#     x = torch.tanh(x)", "\n", "#     mu = self.fc3(x)", "\n", "\n", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.__init__": [[90, 99], ["torch.Module.__init__", "modules.MLP_Beta", "modules.BetaPolicy.to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__"], ["def", "__init__", "(", "self", ",", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ",", "T", ")", ":", "\n", "        ", "super", "(", "BetaPolicy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "MLP_Beta", "(", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "2", "*", "action_dim", ",", "device", ")", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "h", "=", "2.5", "*", "torch", ".", "ones", "(", "self", ".", "action_dim", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "# self.h = 2 * torch.ones(self.action_dim, dtype=torch.float, device=device)  # use this when simulating CLQR.", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.forward": [[100, 102], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.evaluate_action": [[103, 114], ["modules.BetaPolicy.net.train", "modules.BetaPolicy.net", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "modules.BetaPolicy.h.view().repeat", "torch.distributions.beta.Beta.log_prob().sum", "torch.distributions.beta.Beta.log_prob().sum", "torch.distributions.beta.Beta.log_prob().sum", "modules.BetaPolicy.h.view", "torch.distributions.beta.Beta.log_prob", "torch.distributions.beta.Beta.log_prob", "torch.distributions.beta.Beta.log_prob"], "methods", ["None"], ["", "def", "evaluate_action", "(", "self", ",", "state_torch", ",", "action_torch", ")", ":", "\n", "        ", "self", ".", "net", ".", "train", "(", ")", "\n", "a_b_values", "=", "self", ".", "net", "(", "state_torch", ")", "\n", "a", "=", "a_b_values", "[", ":", ",", "0", ":", "self", ".", "action_dim", "]", "\n", "b", "=", "a_b_values", "[", ":", ",", "self", ".", "action_dim", ":", "]", "\n", "beta_", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "a", ",", "b", ")", "\n", "h", "=", "self", ".", "h", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "self", ".", "T", ",", "1", ")", "\n", "log_prob_action", "=", "beta_", ".", "log_prob", "(", "action_torch", "/", "h", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# log_prob_action = beta_.log_prob((action_torch + h) / (2 * h)).sum(dim=1)  # use this when simulating CLQR.", "\n", "\n", "return", "log_prob_action", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.BetaPolicy.sample_action": [[115, 127], ["modules.BetaPolicy.net.eval", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "action.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "modules.BetaPolicy.net", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta", "torch.distributions.beta.Beta.sample", "torch.distributions.beta.Beta.sample", "torch.distributions.beta.Beta.sample", "action.detach().cpu", "action.detach"], "methods", ["None"], ["", "def", "sample_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "net", ".", "eval", "(", ")", "\n", "state_torch", "=", "torch", ".", "tensor", "(", "state", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "a_b_values", "=", "self", ".", "net", "(", "state_torch", ")", "\n", "a", "=", "a_b_values", "[", "0", ":", "self", ".", "action_dim", "]", "\n", "b", "=", "a_b_values", "[", "self", ".", "action_dim", ":", "]", "\n", "beta_", "=", "torch", ".", "distributions", ".", "beta", ".", "Beta", "(", "a", ",", "b", ")", "\n", "action", "=", "beta_", ".", "sample", "(", ")", "*", "self", ".", "h", "\n", "# action = beta_.sample() * (2 * self.h) - self.h  # use this when simulating CLQR.", "\n", "\n", "", "return", "action", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.MLP_Beta.__init__": [[131, 151], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "modules.MLP_Beta.to", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__"], ["def", "__init__", "(", "self", ",", "state_dim", ",", "fc1_dim", ",", "fc2_dim", ",", "action_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "MLP_Beta", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "state_dim", "\n", "self", ".", "fc1_dim", "=", "fc1_dim", "\n", "self", ".", "fc2_dim", "=", "fc2_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "fc1_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "fc1_dim", ",", "self", ".", "fc2_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc2", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "fc2_dim", ",", "self", ".", "action_dim", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "fc3", ".", "weight", ".", "data", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc3", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.MLP_Beta.forward": [[152, 169], ["modules.MLP_Beta.fc1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modules.MLP_Beta.fc2", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modules.MLP_Beta.fc3", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "state", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "a_b_values", "=", "self", ".", "fc3", "(", "x", ")", "\n", "a_b_values", "=", "F", ".", "softplus", "(", "a_b_values", ")", "\n", "\n", "# def forward(self, state):  # use this when simulating CLQR.", "\n", "#     x = self.fc1(state)", "\n", "#     x = torch.tanh(x)", "\n", "#     x = self.fc2(x)", "\n", "#     x = torch.tanh(x)", "\n", "#     a_b_values = self.fc3(x)", "\n", "#     a_b_values = F.softplus(a_b_values) + 1", "\n", "\n", "return", "a_b_values", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.DataStorage.__init__": [[173, 184], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "T", ",", "num_new_data", ",", "state_dim", ",", "action_dim", ",", "constraint_dim", ")", ":", "\n", "        ", "self", ".", "T", "=", "T", "\n", "self", ".", "num_new_data", "=", "num_new_data", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "state_memory", "=", "np", ".", "zeros", "(", "(", "2", "*", "self", ".", "T", ",", "state_dim", ")", ")", "\n", "self", ".", "action_memory", "=", "np", ".", "zeros", "(", "(", "2", "*", "self", ".", "T", ",", "action_dim", ")", ")", "\n", "self", ".", "cost_memory", "=", "np", ".", "zeros", "(", "(", "2", "*", "self", ".", "T", ",", "1", "+", "constraint_dim", ")", ")", "\n", "self", ".", "n_entries", "=", "0", "\n", "self", ".", "state_memory_tmp", "=", "np", ".", "zeros", "(", "(", "num_new_data", ",", "state_dim", ")", ")", "\n", "self", ".", "action_memory_tmp", "=", "np", ".", "zeros", "(", "(", "num_new_data", ",", "action_dim", ")", ")", "\n", "self", ".", "cost_memory_tmp", "=", "np", ".", "zeros", "(", "(", "num_new_data", ",", "1", "+", "constraint_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.DataStorage.store_experiences": [[185, 207], ["None"], "methods", ["None"], ["", "def", "store_experiences", "(", "self", ",", "state", ",", "action", ",", "costs", ")", ":", "\n", "        ", "if", "self", ".", "count", "<", "2", "*", "self", ".", "T", ":", "\n", "            ", "self", ".", "state_memory", "[", "self", ".", "count", "]", "=", "state", "\n", "self", ".", "action_memory", "[", "self", ".", "count", "]", "=", "action", "\n", "self", ".", "cost_memory", "[", "self", ".", "count", "]", "=", "costs", "\n", "self", ".", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "ind", "=", "self", ".", "count", "%", "self", ".", "num_new_data", "\n", "self", ".", "state_memory_tmp", "[", "ind", "]", "=", "state", "\n", "self", ".", "action_memory_tmp", "[", "ind", "]", "=", "action", "\n", "self", ".", "cost_memory_tmp", "[", "ind", "]", "=", "costs", "\n", "if", "ind", "==", "self", ".", "num_new_data", "-", "1", ":", "\n", "                ", "self", ".", "state_memory", "[", "0", ":", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", "]", "=", "self", ".", "state_memory", "[", "self", ".", "num_new_data", ":", "]", "\n", "self", ".", "state_memory", "[", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", ":", "]", "=", "self", ".", "state_memory_tmp", "\n", "self", ".", "action_memory", "[", "0", ":", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", "]", "=", "self", ".", "action_memory", "[", "self", ".", "num_new_data", ":", "]", "\n", "self", ".", "action_memory", "[", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", ":", "]", "=", "self", ".", "action_memory_tmp", "\n", "self", ".", "cost_memory", "[", "0", ":", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", "]", "=", "self", ".", "cost_memory", "[", "self", ".", "num_new_data", ":", "]", "\n", "self", ".", "cost_memory", "[", "2", "*", "self", ".", "T", "-", "self", ".", "num_new_data", ":", "]", "=", "self", ".", "cost_memory_tmp", "\n", "", "self", ".", "count", "+=", "1", "\n", "\n", "", "if", "self", ".", "n_entries", "<", "2", "*", "self", ".", "T", ":", "\n", "            ", "self", ".", "n_entries", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.DataStorage.take_experiences": [[208, 211], ["None"], "methods", ["None"], ["", "", "def", "take_experiences", "(", "self", ")", ":", "\n", "\n", "        ", "return", "self", ".", "state_memory", ",", "self", ".", "action_memory", ",", "self", ".", "cost_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_MIMO.__init__": [[216, 253], ["object.__init__", "int", "numpy.random.seed", "numpy.random.uniform", "numpy.zeros", "range", "numpy.tile", "range", "numpy.tile", "numpy.zeros", "numpy.zeros", "numpy.random.exponential", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "numpy.sum", "numpy.zeros", "numpy.zeros", "modules.Environment_MIMO.laprnd", "numpy.exp", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_MIMO.laprnd"], ["def", "__init__", "(", "self", ",", "seed", ",", "Nt", ",", "UE_num", ")", ":", "\n", "        ", "super", "(", "Environment_MIMO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "seed_step", "=", "seed", "\n", "self", ".", "Nt", "=", "Nt", "\n", "self", ".", "UE_num", "=", "UE_num", "\n", "self", ".", "user_per_group", "=", "2", "\n", "self", ".", "group_num", "=", "int", "(", "UE_num", "/", "self", ".", "user_per_group", ")", "\n", "self", ".", "state_dim", "=", "2", "*", "UE_num", "*", "Nt", "+", "UE_num", "\n", "self", ".", "action_dim", "=", "UE_num", "+", "1", "\n", "self", ".", "Np", "=", "4", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "PathGain_dB", "=", "np", ".", "random", ".", "uniform", "(", "-", "10", ",", "10", ",", "self", ".", "group_num", ")", "\n", "self", ".", "PathGain", "=", "10", "**", "(", "PathGain_dB", "/", "10", ")", "\n", "alpha_power_group", "=", "np", ".", "zeros", "(", "(", "self", ".", "group_num", ",", "self", ".", "Np", ")", ")", "\n", "for", "group", "in", "range", "(", "self", ".", "group_num", ")", ":", "\n", "            ", "tmp", "=", "np", ".", "random", ".", "exponential", "(", "scale", "=", "1", ",", "size", "=", "self", ".", "Np", ")", "\n", "alpha_power_group", "[", "group", "]", "=", "(", "tmp", "*", "self", ".", "PathGain", "[", "group", "]", ")", "/", "np", ".", "sum", "(", "tmp", ")", "\n", "", "self", ".", "alpha_power", "=", "np", ".", "tile", "(", "alpha_power_group", ",", "(", "self", ".", "user_per_group", ",", "1", ")", ")", "\n", "\n", "array_reponse_group", "=", "np", ".", "zeros", "(", "(", "self", ".", "group_num", "*", "self", ".", "Nt", ",", "self", ".", "Np", ")", ")", "+", "1j", "*", "np", ".", "zeros", "(", "(", "self", ".", "group_num", "*", "self", ".", "Nt", ",", "self", ".", "Np", ")", ")", "\n", "for", "group", "in", "range", "(", "self", ".", "group_num", ")", ":", "\n", "            ", "A_tmp", "=", "np", ".", "zeros", "(", "(", "self", ".", "Nt", ",", "self", ".", "Np", ")", ")", "+", "1j", "*", "np", ".", "zeros", "(", "(", "self", ".", "Nt", ",", "self", ".", "Np", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "Np", ")", ":", "\n", "                ", "AoD", "=", "self", ".", "laprnd", "(", "mu", "=", "0", ",", "angular_spread", "=", "5", ")", "\n", "A_tmp", "[", ":", ",", "i", "]", "=", "np", ".", "exp", "(", "1j", "*", "np", ".", "pi", "*", "np", ".", "sin", "(", "AoD", ")", "*", "np", ".", "arange", "(", "0", ",", "self", ".", "Nt", ")", ")", "\n", "", "array_reponse_group", "[", "group", "*", "self", ".", "Nt", ":", "(", "group", "+", "1", ")", "*", "self", ".", "Nt", "]", "=", "A_tmp", "\n", "", "self", ".", "array_response", "=", "np", ".", "tile", "(", "array_reponse_group", ",", "(", "self", ".", "user_per_group", ",", "1", ")", ")", "\n", "\n", "self", ".", "H_g", "=", "np", ".", "zeros", "(", "(", "self", ".", "group_num", ",", "Nt", ")", ")", "+", "1j", "*", "np", ".", "zeros", "(", "(", "self", ".", "group_num", ",", "Nt", ")", ")", "\n", "self", ".", "H", "=", "np", ".", "zeros", "(", "(", "UE_num", ",", "Nt", ")", ")", "+", "1j", "*", "np", ".", "zeros", "(", "(", "UE_num", ",", "Nt", ")", ")", "\n", "self", ".", "D", "=", "np", ".", "zeros", "(", "UE_num", ")", "\n", "self", ".", "state", "=", "np", ".", "zeros", "(", "self", ".", "state_dim", ")", "\n", "self", ".", "noise_power", "=", "1e-6", "\n", "self", ".", "Dmax", "=", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_MIMO.reset": [[254, 272], ["numpy.random.seed", "range", "numpy.repeat", "numpy.zeros", "numpy.real", "h_real.reshape.reshape.reshape", "numpy.imag", "h_imag.reshape.reshape.reshape", "numpy.hstack", "numpy.sqrt", "numpy.random.randn", "numpy.random.randn", "numpy.sqrt"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset the environment and return the initial state.", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "for", "g", "in", "range", "(", "self", ".", "group_num", ")", ":", "\n", "            ", "alpha_power_g", "=", "self", ".", "alpha_power", "[", "g", "]", "\n", "A_g", "=", "self", ".", "array_response", "[", "g", "*", "self", ".", "Nt", ":", "(", "g", "+", "1", ")", "*", "self", ".", "Nt", "]", "\n", "alpha_g", "=", "np", ".", "sqrt", "(", "alpha_power_g", "/", "2", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "Np", ")", "+", "1j", "*", "np", ".", "sqrt", "(", "alpha_power_g", "/", "2", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "Np", ")", "\n", "self", ".", "H_g", "[", "g", "]", "=", "A_g", "@", "alpha_g", "\n", "", "self", ".", "H", "=", "np", ".", "repeat", "(", "self", ".", "H_g", ",", "self", ".", "user_per_group", ",", "axis", "=", "0", ")", "\n", "self", ".", "D", "=", "np", ".", "zeros", "(", "self", ".", "UE_num", ")", "\n", "h_real", "=", "np", ".", "real", "(", "self", ".", "H", ")", "\n", "h_real", "=", "h_real", ".", "reshape", "(", "-", "1", ")", "\n", "h_imag", "=", "np", ".", "imag", "(", "self", ".", "H", ")", "\n", "h_imag", "=", "h_imag", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "state", "=", "np", ".", "hstack", "(", "(", "h_real", ",", "h_imag", ",", "self", ".", "D", ")", ")", "\n", "\n", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_MIMO.step": [[273, 325], ["numpy.random.seed", "action.reshape.reshape.reshape", "numpy.sum", "numpy.sum", "numpy.zeros", "range", "numpy.zeros", "range", "numpy.random.uniform", "range", "numpy.repeat", "numpy.real", "h_real.reshape.reshape.reshape", "numpy.imag", "h_imag.reshape.reshape.reshape", "numpy.hstack", "numpy.diag", "numpy.log2", "str", "range", "numpy.linalg.inv", "numpy.abs", "numpy.sum", "modules.Environment_MIMO.H.conjugate", "numpy.linalg.pinv", "numpy.linalg.norm", "numpy.sqrt", "numpy.random.randn", "numpy.random.randn", "modules.Environment_MIMO.H.conjugate", "numpy.sqrt", "numpy.eye", "modules.Environment_MIMO.H.conjugate", "numpy.eye", "modules.Environment_MIMO.H.conjugate"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# action contains power allocation and regularization factor.", "\n", "# return the next_state, reward, done = False, info.", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed_step", ")", "\n", "self", ".", "seed_step", "+=", "1", "\n", "action", "=", "action", ".", "reshape", "(", "-", "1", ")", "\n", "action", "[", "action", "<=", "0", "]", "=", "1e-6", "\n", "power", "=", "action", "[", "0", ":", "self", ".", "UE_num", "]", "\n", "reg_factor", "=", "action", "[", "self", ".", "UE_num", "]", "\n", "\n", "reward", "=", "np", ".", "sum", "(", "power", ")", "\n", "costs", "=", "self", ".", "D", "\n", "info", "=", "{", "'cost_'", "+", "str", "(", "i", ")", ":", "costs", "[", "i", "-", "1", "]", "for", "i", "in", "range", "(", "1", ",", "self", ".", "UE_num", "+", "1", ")", "}", "\n", "info", "[", "'cost'", "]", "=", "np", ".", "sum", "(", "costs", ")", "\n", "\n", "try", ":", "\n", "            ", "V", "=", "self", ".", "H", ".", "conjugate", "(", ")", ".", "T", "@", "np", ".", "linalg", ".", "inv", "(", "self", ".", "H", "@", "self", ".", "H", ".", "conjugate", "(", ")", ".", "T", "+", "reg_factor", "*", "np", ".", "eye", "(", "self", ".", "UE_num", ")", ")", "\n", "", "except", ":", "\n", "            ", "V", "=", "self", ".", "H", ".", "conjugate", "(", ")", ".", "T", "@", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "H", "@", "self", ".", "H", ".", "conjugate", "(", ")", ".", "T", "+", "reg_factor", "*", "np", ".", "eye", "(", "self", ".", "UE_num", ")", ")", "\n", "\n", "", "norm_vector", "=", "np", ".", "zeros", "(", "self", ".", "UE_num", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "UE_num", ")", ":", "\n", "            ", "norm_vector", "[", "k", "]", "=", "1", "/", "(", "np", ".", "linalg", ".", "norm", "(", "V", "[", ":", ",", "k", "]", ")", "+", "1e-7", ")", "\n", "", "V_tilda", "=", "V", "@", "np", ".", "diag", "(", "norm_vector", ")", "\n", "\n", "hv_tilda", "=", "self", ".", "H", "@", "V_tilda", "\n", "r_d", "=", "np", ".", "zeros", "(", "self", ".", "UE_num", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "UE_num", ")", ":", "\n", "            ", "module_squ", "=", "np", ".", "abs", "(", "hv_tilda", "[", "k", "]", ")", "**", "2", "\n", "numerator", "=", "power", "[", "k", "]", "*", "module_squ", "[", "k", "]", "\n", "module_squ", "[", "k", "]", "=", "0", "\n", "dominator", "=", "np", ".", "sum", "(", "power", "*", "module_squ", ")", "+", "self", ".", "noise_power", "\n", "r_d", "[", "k", "]", "=", "np", ".", "log2", "(", "1", "+", "numerator", "/", "dominator", ")", "\n", "", "A_d", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "2", ",", "self", ".", "UE_num", ")", "\n", "self", ".", "D", "=", "self", ".", "D", "+", "A_d", "-", "r_d", "\n", "self", ".", "D", "[", "self", ".", "D", "<=", "0", "]", "=", "0.0", "\n", "self", ".", "D", "[", "self", ".", "D", ">=", "self", ".", "Dmax", "]", "=", "self", ".", "Dmax", "\n", "for", "g", "in", "range", "(", "self", ".", "group_num", ")", ":", "\n", "            ", "alpha_power_g", "=", "self", ".", "alpha_power", "[", "g", "]", "\n", "A_g", "=", "self", ".", "array_response", "[", "g", "*", "self", ".", "Nt", ":", "(", "g", "+", "1", ")", "*", "self", ".", "Nt", "]", "\n", "alpha_g", "=", "np", ".", "sqrt", "(", "alpha_power_g", "/", "2", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "Np", ")", "+", "1j", "*", "np", ".", "sqrt", "(", "alpha_power_g", "/", "2", ")", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "Np", ")", "\n", "self", ".", "H_g", "[", "g", "]", "=", "A_g", "@", "alpha_g", "\n", "", "self", ".", "H", "=", "np", ".", "repeat", "(", "self", ".", "H_g", ",", "self", ".", "user_per_group", ",", "axis", "=", "0", ")", "\n", "h_real", "=", "np", ".", "real", "(", "self", ".", "H", ")", "\n", "h_real", "=", "h_real", ".", "reshape", "(", "-", "1", ")", "\n", "h_imag", "=", "np", ".", "imag", "(", "self", ".", "H", ")", "\n", "h_imag", "=", "h_imag", ".", "reshape", "(", "-", "1", ")", "\n", "self", ".", "state", "=", "np", ".", "hstack", "(", "(", "h_real", ",", "h_imag", ",", "self", ".", "D", ")", ")", "\n", "d", "=", "False", "\n", "\n", "return", "self", ".", "state", ",", "reward", ",", "d", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_MIMO.laprnd": [[326, 333], ["numpy.sqrt", "numpy.random.rand", "numpy.log", "numpy.sign", "numpy.abs"], "methods", ["None"], ["", "def", "laprnd", "(", "self", ",", "mu", ",", "angular_spread", ")", ":", "\n", "# generate random number of Laplacian distribution.", "\n", "        ", "b", "=", "angular_spread", "/", "np", ".", "sqrt", "(", "2", ")", "\n", "a", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "-", "0.5", "\n", "x", "=", "mu", "-", "b", "*", "np", ".", "sign", "(", "a", ")", "*", "np", ".", "log", "(", "1", "-", "2", "*", "np", ".", "abs", "(", "a", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__": [[337, 352], ["object.__init__", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.__init__"], ["def", "__init__", "(", "self", ",", "seed", ",", "state_dim", ",", "action_dim", ")", ":", "\n", "        ", "super", "(", "Environment_CLQR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "seed_step", "=", "seed", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "s", "=", "np", ".", "zeros", "(", "state_dim", ")", "\n", "self", ".", "A", "=", "np", ".", "zeros", "(", "(", "state_dim", ",", "state_dim", ")", ")", "\n", "self", ".", "B", "=", "np", ".", "zeros", "(", "(", "state_dim", ",", "action_dim", ")", ")", "\n", "self", ".", "Q1", "=", "np", ".", "zeros", "(", "(", "state_dim", ",", "state_dim", ")", ")", "\n", "self", ".", "R1", "=", "np", ".", "zeros", "(", "(", "action_dim", ",", "action_dim", ")", ")", "\n", "self", ".", "Q2", "=", "np", ".", "zeros", "(", "(", "state_dim", ",", "state_dim", ")", ")", "\n", "self", ".", "R2", "=", "np", ".", "zeros", "(", "(", "action_dim", ",", "action_dim", ")", ")", "\n", "self", ".", "noise_mu", "=", "1", "\n", "self", ".", "noise_std", "=", "0.9", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.reset": [[353, 377], ["numpy.random.seed", "numpy.random.randn", "numpy.random.rand", "numpy.diag", "modules.Environment_CLQR.generate_ortho_mat", "numpy.random.randn", "numpy.random.seed", "numpy.random.exponential", "numpy.random.rand", "numpy.diag", "modules.Environment_CLQR.generate_ortho_mat", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.generate_ortho_mat", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.generate_ortho_mat"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Reset the environment and return the initial state.", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "self", ".", "A", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "state_dim", ",", "self", ".", "state_dim", ")", "\n", "self", ".", "A", "=", "(", "self", ".", "A", "+", "self", ".", "A", ".", "T", ")", "/", "30", "\n", "self", ".", "B", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "state_dim", ",", "self", ".", "action_dim", ")", "/", "3", "\n", "eig_values", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "state_dim", ")", "\n", "S", "=", "np", ".", "diag", "(", "eig_values", ")", "\n", "U", "=", "self", ".", "generate_ortho_mat", "(", "dim", "=", "self", ".", "state_dim", ")", "\n", "self", ".", "Q1", "=", "U", "@", "S", "@", "(", "U", ".", "T", ")", "\n", "E1", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "action_dim", ",", "self", ".", "action_dim", ")", "\n", "self", ".", "R1", "=", "E1", "@", "(", "E1", ".", "T", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", "+", "1996", ")", "\n", "C2", "=", "np", ".", "random", ".", "exponential", "(", "1", "/", "3", ",", "size", "=", "(", "self", ".", "state_dim", ",", "self", ".", "state_dim", ")", ")", "\n", "self", ".", "Q2", "=", "C2", "@", "(", "C2", ".", "T", ")", "\n", "eig_values", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "action_dim", ")", "\n", "S", "=", "np", ".", "diag", "(", "eig_values", ")", "\n", "U", "=", "self", ".", "generate_ortho_mat", "(", "dim", "=", "self", ".", "action_dim", ")", "\n", "self", ".", "R2", "=", "U", "@", "S", "@", "(", "U", ".", "T", ")", "\n", "self", ".", "R2", "=", "self", ".", "R2", "@", "(", "self", ".", "R2", ".", "T", ")", "\n", "\n", "self", ".", "s", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "state_dim", ")", "\n", "\n", "return", "self", ".", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.step": [[378, 390], ["numpy.random.seed", "a.reshape.reshape.reshape", "numpy.random.randn"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "# return the next_state, reward, done = False, info.", "\n", "        ", "np", ".", "random", ".", "seed", "(", "self", ".", "seed_step", ")", "\n", "self", ".", "seed_step", "+=", "1", "\n", "a", "=", "a", ".", "reshape", "(", "-", "1", ")", "\n", "r", "=", "self", ".", "s", ".", "T", "@", "self", ".", "Q1", "@", "self", ".", "s", "+", "a", ".", "T", "@", "self", ".", "R1", "@", "a", "\n", "c", "=", "self", ".", "s", ".", "T", "@", "self", ".", "Q2", "@", "self", ".", "s", "+", "a", ".", "T", "@", "self", ".", "R2", "@", "a", "\n", "d", "=", "False", "\n", "info", "=", "{", "'cost'", ":", "c", "}", "\n", "self", ".", "s", "=", "self", ".", "A", "@", "self", ".", "s", "+", "self", ".", "B", "@", "a", "+", "(", "self", ".", "noise_mu", "+", "self", ".", "noise_std", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "state_dim", ")", ")", "\n", "\n", "return", "self", ".", "s", ",", "r", ",", "d", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.modules.Environment_CLQR.generate_ortho_mat": [[391, 410], ["numpy.eye", "numpy.ones", "range", "random_state.normal", "numpy.sign", "numpy.eye", "numpy.dot", "numpy.ones.prod", "numpy.sqrt", "numpy.eye", "numpy.outer"], "methods", ["None"], ["", "def", "generate_ortho_mat", "(", "self", ",", "dim", ")", ":", "\n", "# generate orthogonal matrix", "\n", "        ", "random_state", "=", "np", ".", "random", "\n", "H", "=", "np", ".", "eye", "(", "dim", ")", "\n", "D", "=", "np", ".", "ones", "(", "(", "dim", ",", ")", ")", "\n", "for", "n", "in", "range", "(", "1", ",", "dim", ")", ":", "\n", "            ", "x", "=", "random_state", ".", "normal", "(", "size", "=", "(", "dim", "-", "n", "+", "1", ",", ")", ")", "\n", "D", "[", "n", "-", "1", "]", "=", "np", ".", "sign", "(", "x", "[", "0", "]", ")", "\n", "x", "[", "0", "]", "-=", "D", "[", "n", "-", "1", "]", "*", "np", ".", "sqrt", "(", "(", "x", "*", "x", ")", ".", "sum", "(", ")", ")", "\n", "# Householder transformation", "\n", "Hx", "=", "(", "np", ".", "eye", "(", "dim", "-", "n", "+", "1", ")", "-", "2.", "*", "np", ".", "outer", "(", "x", ",", "x", ")", "/", "(", "x", "*", "x", ")", ".", "sum", "(", ")", ")", "\n", "mat", "=", "np", ".", "eye", "(", "dim", ")", "\n", "mat", "[", "n", "-", "1", ":", ",", "n", "-", "1", ":", "]", "=", "Hx", "\n", "H", "=", "np", ".", "dot", "(", "H", ",", "mat", ")", "\n", "# Fix the last sign such that the determinant is 1", "\n", "", "D", "[", "-", "1", "]", "=", "(", "-", "1", ")", "**", "(", "1", "-", "(", "dim", "%", "2", ")", ")", "*", "D", ".", "prod", "(", ")", "\n", "# Equivalent to np.dot(np.diag(D), H) but faster, apparently", "\n", "H", "=", "(", "D", "*", "H", ".", "T", ")", ".", "T", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions.update_policy": [[4, 17], ["utility_functions._feasible_update", "print", "utility_functions._objective_update", "print"], "function", ["home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions._feasible_update", "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions._objective_update"], ["def", "update_policy", "(", "func_value_np", ",", "grad_np", ",", "paras_t_np", ",", "tau_reward", ",", "tau_cost", ")", ":", "\n", "    ", "\"\"\"Update the policy by solving the convex surrogate problems.\"\"\"", "\n", "x", ",", "paras_bar", ",", "prob_status_fea", "=", "_feasible_update", "(", "func_value_np", ",", "grad_np", ",", "paras_t_np", ",", "tau_cost", ")", "\n", "if", "x", "==", "np", ".", "inf", ":", "\n", "        ", "print", "(", "'feasible problem break ! status = '", ",", "prob_status_fea", ")", "\n", "\n", "", "if", "x", "<=", "0", ":", "\n", "        ", "paras_bar", ",", "prob_status_obj", "=", "_objective_update", "(", "func_value_np", ",", "grad_np", ",", "paras_t_np", ",", "\n", "tau_reward", "=", "tau_reward", ",", "tau_cost", "=", "tau_cost", ")", "\n", "if", "paras_bar", "is", "None", ":", "\n", "            ", "print", "(", "'objective problem break ! status = '", ",", "prob_status_obj", ")", "\n", "\n", "", "", "return", "paras_bar", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions._objective_update": [[19, 38], ["cvxpy.Variable", "range", "cvxpy.Problem", "cp.Problem.solve", "numpy.ones", "cvxpy.Minimize", "cvxpy.sum_squares", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "_objective_update", "(", "func_value_np", ",", "grad_np", ",", "paras_t_np", ",", "tau_reward", ",", "tau_cost", ")", ":", "\n", "    ", "\"\"\"Solving the surrogate problem corresponding to the objective update\"\"\"", "\n", "m", "=", "grad_np", ".", "shape", "[", "0", "]", "-", "1", "# number of constraints.", "\n", "n", "=", "grad_np", ".", "shape", "[", "1", "]", "# dim of parameter.", "\n", "tau_np", "=", "tau_cost", "*", "np", ".", "ones", "(", "m", "+", "1", ")", "\n", "tau_np", "[", "0", "]", "=", "tau_reward", "\n", "\n", "paras_cvx", "=", "cp", ".", "Variable", "(", "shape", "=", "(", "n", ",", ")", ")", "\n", "obj", "=", "func_value_np", "[", "0", "]", "+", "grad_np", "[", "0", "]", ".", "T", "@", "(", "paras_cvx", "-", "paras_t_np", ")", "+", "tau_np", "[", "0", "]", "*", "cp", ".", "sum_squares", "(", "paras_cvx", "-", "paras_t_np", ")", "\n", "constr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "m", "+", "1", ")", ":", "\n", "        ", "constr", "+=", "[", "func_value_np", "[", "i", "]", "+", "grad_np", "[", "i", "]", ".", "T", "@", "(", "paras_cvx", "-", "paras_t_np", ")", "+", "\n", "tau_np", "[", "i", "]", "*", "cp", ".", "sum_squares", "(", "paras_cvx", "-", "paras_t_np", ")", "<=", "0", "]", "\n", "", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ",", "constr", ")", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "MOSEK", ")", "\n", "paras_mosek", "=", "paras_cvx", ".", "value", "\n", "\n", "return", "paras_mosek", ",", "prob", ".", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.Kaijin1996_SCAOPO.None.utility_functions._feasible_update": [[40, 61], ["cvxpy.Variable", "cvxpy.Variable", "range", "cvxpy.Problem", "cp.Problem.solve", "numpy.ones", "cvxpy.Minimize", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "_feasible_update", "(", "func_value_np", ",", "grad_np", ",", "paras_t_np", ",", "tau_cost", ")", ":", "\n", "    ", "\"\"\"Solving the surrogate problem corresponding to the feasible update\"\"\"", "\n", "m", "=", "grad_np", ".", "shape", "[", "0", "]", "-", "1", "# number of constraints.", "\n", "n", "=", "grad_np", ".", "shape", "[", "1", "]", "# dim of parameter.", "\n", "func_value_np", "=", "func_value_np", "[", "1", ":", "]", "\n", "grad_np", "=", "grad_np", "[", "1", ":", "]", "\n", "tau_np", "=", "tau_cost", "*", "np", ".", "ones", "(", "m", ")", "\n", "\n", "paras_cvx", "=", "cp", ".", "Variable", "(", "shape", "=", "(", "n", ",", ")", ")", "\n", "x_cvx", "=", "cp", ".", "Variable", "(", ")", "\n", "obj", "=", "x_cvx", "\n", "constr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "constr", "+=", "[", "func_value_np", "[", "i", "]", "+", "grad_np", "[", "i", "]", ".", "T", "@", "(", "paras_cvx", "-", "paras_t_np", ")", "+", "\n", "tau_np", "[", "i", "]", "*", "cp", ".", "sum_squares", "(", "paras_cvx", "-", "paras_t_np", ")", "<=", "x_cvx", "]", "\n", "", "prob", "=", "cp", ".", "Problem", "(", "cp", ".", "Minimize", "(", "obj", ")", ",", "constr", ")", "\n", "prob", ".", "solve", "(", "solver", "=", "cp", ".", "MOSEK", ")", "\n", "x_mosek", "=", "prob", ".", "value", "\n", "paras_mosek", "=", "paras_cvx", ".", "value", "\n", "\n", "return", "x_mosek", ",", "paras_mosek", ",", "prob", ".", "status", "\n", "", ""]]}