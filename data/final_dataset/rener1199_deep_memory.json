{"home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.decode_line": [[11, 22], ["tensorflow.decode_csv", "tf.decode_csv.pop", "int"], "function", ["None"], ["def", "decode_line", "(", "record_line", ")", ":", "\n", "    ", "label_col_idx", "=", "0", "\n", "record_defaults", "=", "[", "[", "0", "]", "]", "*", "int", "(", "num_csv_col", ")", "\n", "record_defaults", "[", "0", "]", "=", "[", "0.0", "]", "\n", "# Default values, in case of empty columns. Also specifies the type of the decoded result.", "\n", "cols", "=", "tf", ".", "decode_csv", "(", "record_line", ",", "record_defaults", "=", "record_defaults", ")", "\n", "# you can only process the data using tf ops", "\n", "label", "=", "cols", ".", "pop", "(", "label_col_idx", ")", "\n", "feature", "=", "cols", "\n", "# Retrieve a single instance", "\n", "return", "feature", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.create_dataset": [[23, 34], ["tensorflow.data.TextLineDataset", "dataset.shuffle.map", "dataset.shuffle.batch", "dataset.shuffle.repeat", "dataset.shuffle.shuffle"], "function", ["None"], ["", "def", "create_dataset", "(", "filename", ",", "batch_size", "=", "32", ",", "is_shuffle", "=", "False", ",", "n_repeats", "=", "0", ")", ":", "\n", "    ", "\"\"\"create dataset for train and validation dataset\"\"\"", "\n", "dataset", "=", "tf", ".", "data", ".", "TextLineDataset", "(", "filename", ")", "\n", "if", "n_repeats", ">", "1", ":", "\n", "        ", "dataset", "=", "dataset", ".", "repeat", "(", "n_repeats", "-", "1", ")", "# for train", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "decode_line", ")", "\n", "# decode and normalize", "\n", "if", "is_shuffle", ":", "\n", "        ", "dataset", "=", "dataset", ".", "shuffle", "(", "10000", ")", "# shuffle", "\n", "", "dataset", "=", "dataset", ".", "batch", "(", "batch_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.get_dataset_op": [[35, 56], ["dataset.create_dataset", "dataset.create_dataset", "tensorflow.data.Iterator.from_structure", "tf.data.Iterator.from_structure.get_next", "range", "tf.data.Iterator.from_structure.make_initializer", "tf.data.Iterator.from_structure.make_initializer", "training_dataset.append", "len", "training_init_op.append", "dataset.create_dataset", "tf.data.Iterator.from_structure.make_initializer"], "function", ["home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.create_dataset", "home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.create_dataset", "home.repos.pwc.inspect_result.rener1199_deep_memory.None.dataset.create_dataset"], ["", "def", "get_dataset_op", "(", "training_filenames", ",", "validation_filenames", ",", "test_filenames", ",", "batch_size", ",", "num_epochs", ")", ":", "\n", "# Create different datasets", "\n", "    ", "training_dataset", "=", "[", "]", "\n", "for", "training_file", "in", "training_filenames", ":", "\n", "      ", "training_dataset", ".", "append", "(", "create_dataset", "(", "training_file", ",", "batch_size", "=", "batch_size", ",", "is_shuffle", "=", "False", ",", "n_repeats", "=", "num_epochs", ")", ")", "# train_filename", "\n", "", "validation_dataset", "=", "create_dataset", "(", "validation_filenames", ",", "batch_size", "=", "batch_size", ",", "is_shuffle", "=", "False", ",", "n_repeats", "=", "num_epochs", ")", "# val_filename", "\n", "test_dataset", "=", "create_dataset", "(", "test_filenames", ",", "batch_size", "=", "batch_size", ",", "is_shuffle", "=", "False", ",", "n_repeats", "=", "num_epochs", ")", "# val_filename    ", "\n", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_structure", "(", "test_dataset", ".", "output_types", ",", "\n", "test_dataset", ".", "output_shapes", ")", "\n", "features", ",", "labels", "=", "iterator", ".", "get_next", "(", ")", "\n", "training_init_op", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "training_filenames", ")", ")", ":", "\n", "      ", "training_init_op", ".", "append", "(", "iterator", ".", "make_initializer", "(", "training_dataset", "[", "i", "]", ")", ")", "\n", "", "validation_init_op", "=", "iterator", ".", "make_initializer", "(", "validation_dataset", ")", "\n", "test_init_op", "=", "iterator", ".", "make_initializer", "(", "test_dataset", ")", "\n", "\n", "return", "features", ",", "labels", ",", "training_init_op", ",", "validation_init_op", ",", "test_init_op", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.cal_auc": [[6, 10], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc"], "function", ["None"], ["def", "cal_auc", "(", "pred_score", ",", "label", ")", ":", "\n", "    ", "fpr", ",", "tpr", ",", "thresholds", "=", "metrics", ".", "roc_curve", "(", "label", ",", "pred_score", ",", "pos_label", "=", "1", ")", "\n", "auc_val", "=", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "auc_val", ",", "fpr", ",", "tpr", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.cal_rmse": [[11, 15], ["sklearn.metrics.mean_squared_error", "numpy.sqrt"], "function", ["None"], ["", "def", "cal_rmse", "(", "pred_score", ",", "label", ")", ":", "\n", "    ", "mse", "=", "metrics", ".", "mean_squared_error", "(", "label", ",", "pred_score", ")", "\n", "rmse", "=", "np", ".", "sqrt", "(", "mse", ")", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.cal_rectified_rmse": [[16, 22], ["enumerate", "sklearn.metrics.mean_squared_error", "numpy.sqrt"], "function", ["None"], ["", "def", "cal_rectified_rmse", "(", "pred_score", ",", "label", ",", "sample_rate", ")", ":", "\n", "    ", "for", "idx", ",", "item", "in", "enumerate", "(", "pred_score", ")", ":", "\n", "        ", "pred_score", "[", "idx", "]", "=", "item", "/", "(", "item", "+", "(", "1", "-", "item", ")", "/", "sample_rate", ")", "\n", "", "mse", "=", "metrics", ".", "mean_squared_error", "(", "label", ",", "pred_score", ")", "\n", "rmse", "=", "np", ".", "sqrt", "(", "mse", ")", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.list_flatten": [[24, 27], ["None"], "function", ["None"], ["", "def", "list_flatten", "(", "input_list", ")", ":", "\n", "    ", "output_list", "=", "[", "yy", "for", "xx", "in", "input_list", "for", "yy", "in", "xx", "]", "\n", "return", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.count_lines": [[29, 32], ["sum", "open"], "function", ["None"], ["", "def", "count_lines", "(", "file_name", ")", ":", "\n", "    ", "num_lines", "=", "sum", "(", "1", "for", "line", "in", "open", "(", "file_name", ",", "'rt'", ")", ")", "\n", "return", "num_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.tf_read_data": [[34, 45], ["tensorflow.TextLineReader", "tf.TextLineReader.read", "tensorflow.decode_csv", "tf.decode_csv.pop"], "function", ["None"], ["", "def", "tf_read_data", "(", "file_name_queue", ",", "label_col_idx", ",", "record_defaults", ")", ":", "\n", "    ", "reader", "=", "tf", ".", "TextLineReader", "(", ")", "\n", "key", ",", "value", "=", "reader", ".", "read", "(", "file_name_queue", ")", "\n", "\n", "# Default values, in case of empty columns. Also specifies the type of the decoded result.", "\n", "cols", "=", "tf", ".", "decode_csv", "(", "value", ",", "record_defaults", "=", "record_defaults", ")", "\n", "# you can only process the data using tf ops", "\n", "label", "=", "cols", ".", "pop", "(", "label_col_idx", ")", "\n", "feature", "=", "cols", "\n", "# Retrieve a single instance", "\n", "return", "feature", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.rener1199_deep_memory.None.ctr_funcs.print_time": [[47, 51], ["datetime.datetime.now", "datetime.datetime.now.strftime", "print"], "function", ["None"], ["def", "print_time", "(", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "time_str", "=", "now", ".", "strftime", "(", "time_style", ")", "\n", "print", "(", "time_str", ")", "\n", "\n"]]}