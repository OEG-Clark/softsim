{"home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.RelationAttention.__init__": [[11, 18], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "300", ",", "hidden_dim", "=", "64", ")", ":", "\n", "# in_dim: the dimension fo query vector", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.RelationAttention.forward": [[19, 36], ["model_utils.RelationAttention.fc1", "model_utils.RelationAttention.relu", "model_utils.RelationAttention.fc2", "Q.unsqueeze.unsqueeze.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "Q.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.squeeze.squeeze.squeeze", "model_utils.mask_logits", "feature.transpose"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "feature", ",", "dep_tags_v", ",", "dmask", ")", ":", "\n", "        ", "'''\n        C feature/context [N, L, D]\n        Q dep_tags_v          [N, L, D]\n        mask dmask          [N, L]\n        '''", "\n", "Q", "=", "self", ".", "fc1", "(", "dep_tags_v", ")", "\n", "Q", "=", "self", ".", "relu", "(", "Q", ")", "\n", "Q", "=", "self", ".", "fc2", "(", "Q", ")", "# (N, L, 1)", "\n", "Q", "=", "Q", ".", "squeeze", "(", "2", ")", "\n", "Q", "=", "F", ".", "softmax", "(", "mask_logits", "(", "Q", ",", "dmask", ")", ",", "dim", "=", "1", ")", "\n", "\n", "Q", "=", "Q", ".", "unsqueeze", "(", "2", ")", "\n", "out", "=", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "Q", ")", "\n", "out", "=", "out", ".", "squeeze", "(", "2", ")", "\n", "# out = F.sigmoid(out)", "\n", "return", "out", "# ([N, L])", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.BiRelationAttention.__init__": [[38, 45], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "300", ",", "hidden_dim", "=", "64", ")", ":", "\n", "# in_dim: the dimension fo query vector", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.BiRelationAttention.forward": [[46, 65], ["model_utils.BiRelationAttention.fc1", "model_utils.BiRelationAttention.relu", "model_utils.BiRelationAttention.fc2", "Q.unsqueeze.unsqueeze.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "Q.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model_utils.mask_logits", "feature.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.transpose", "torch.bmm.transpose", "torch.bmm.transpose"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "feature", ",", "dep_embedding", ",", "dmask", ")", ":", "\n", "        ", "'''\n        C feature/context [N, L, D]\n        Q dep_tags_v          [N, L, D]\n        mask dmask          [N, L]\n        '''", "\n", "Q", "=", "self", ".", "fc1", "(", "dep_embedding", ")", "\n", "Q", "=", "self", ".", "relu", "(", "Q", ")", "\n", "Q", "=", "self", ".", "fc2", "(", "Q", ")", "# (N, L, 1)", "\n", "Q", "=", "Q", ".", "squeeze", "(", "2", ")", "\n", "Q", "=", "F", ".", "softmax", "(", "mask_logits", "(", "Q", ",", "dmask", ")", ",", "dim", "=", "1", ")", "\n", "\n", "Q", "=", "Q", ".", "unsqueeze", "(", "2", ")", "\n", "h_t", "=", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "Q", ")", "#[N, D, 1]", "\n", "feature", "=", "feature", "+", "torch", ".", "bmm", "(", "Q", ",", "h_t", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "\n", "# out = F.sigmoid(out)", "\n", "return", "feature", "# ([N, L])", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.GCN.__init__": [[71, 80], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_utils.GCN.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.GCN.forward": [[81, 91], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "text", ",", "adj", ")", ":", "\n", "#para1 = list(self.weight.named_parameters())", "\n", "#print(self.weight)", "\n", "        ", "hidden", "=", "torch", ".", "matmul", "(", "text", ",", "self", ".", "weight", ")", "\n", "denom", "=", "torch", ".", "sum", "(", "adj", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1", "\n", "output", "=", "torch", ".", "matmul", "(", "adj", ",", "hidden", ")", "/", "denom", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.ScaledDotProductAttention.__init__": [[95, 99], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.ScaledDotProductAttention.forward": [[100, 111], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "model_utils.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "#print(attn.size(), mask.size())", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "attn", "=", "self", ".", "dropout", "(", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.MultiHeadAttention.__init__": [[115, 131], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_utils.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.MultiHeadAttention.forward": [[133, 163], ["model_utils.MultiHeadAttention.w_qs().view", "model_utils.MultiHeadAttention.w_ks().view", "model_utils.MultiHeadAttention.w_vs().view", "model_utils.MultiHeadAttention.attention", "model_utils.MultiHeadAttention.transpose().contiguous().view", "model_utils.MultiHeadAttention.dropout", "model_utils.MultiHeadAttention.layer_norm", "model_utils.MultiHeadAttention.size", "model_utils.MultiHeadAttention.size", "model_utils.MultiHeadAttention.size", "model_utils.MultiHeadAttention.size", "model_utils.MultiHeadAttention.transpose", "model_utils.MultiHeadAttention.transpose", "model_utils.MultiHeadAttention.transpose", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "model_utils.MultiHeadAttention.fc", "model_utils.MultiHeadAttention.w_qs", "model_utils.MultiHeadAttention.w_ks", "model_utils.MultiHeadAttention.w_vs", "model_utils.MultiHeadAttention.transpose().contiguous", "mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "model_utils.MultiHeadAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "# For head axis broadcasting.", "\n", "\n", "", "q", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "q", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.LinearAttention.__init__": [[169, 175], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", "=", "300", ",", "mem_dim", "=", "300", ")", ":", "\n", "# in dim, the dimension of query vector", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_dim", ",", "mem_dim", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "mem_dim", "*", "2", ",", "1", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.LinearAttention.forward": [[176, 201], ["model_utils.LinearAttention.linear", "model_utils.LinearAttention.unsqueeze", "model_utils.LinearAttention.expand_as", "model_utils.LinearAttention.linear", "model_utils.LinearAttention.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_utils.LinearAttention.fc", "dmask.unsqueeze.unsqueeze.unsqueeze", "model_utils.mask_logits", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.squeeze.squeeze.squeeze", "model_utils.LinearAttention.transpose"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "feature", ",", "aspect_v", ",", "dmask", ")", ":", "\n", "        ", "'''\n        C feature/context [N, L, D]\n        Q dep_tags_v          [N, D]\n        mask dmask          [N, L]\n        '''", "\n", "\n", "Q", "=", "self", ".", "linear", "(", "aspect_v", ")", "# (N, D)", "\n", "Q", "=", "Q", ".", "unsqueeze", "(", "1", ")", "# (N, 1, D)", "\n", "Q", "=", "Q", ".", "expand_as", "(", "feature", ")", "# (N, L, D)", "\n", "Q", "=", "self", ".", "linear", "(", "Q", ")", "# (N, L, D)", "\n", "feature", "=", "self", ".", "linear", "(", "feature", ")", "# (N, L, D)", "\n", "\n", "att_feature", "=", "torch", ".", "cat", "(", "[", "feature", ",", "Q", "]", ",", "dim", "=", "2", ")", "# (N, L, 2D)", "\n", "att_weight", "=", "self", ".", "fc", "(", "att_feature", ")", "# (N, L, 1)", "\n", "dmask", "=", "dmask", ".", "unsqueeze", "(", "2", ")", "# (N, L, 1)", "\n", "att_weight", "=", "mask_logits", "(", "att_weight", ",", "dmask", ")", "# (N, L ,1)", "\n", "\n", "attention", "=", "F", ".", "softmax", "(", "att_weight", ",", "dim", "=", "1", ")", "# (N, L, 1)", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "attention", ")", "# (N, D, 1)", "\n", "out", "=", "out", ".", "squeeze", "(", "2", ")", "\n", "# out = F.sigmoid(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.DotprodAttention.__init__": [[204, 207], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", "=", "768", ",", "hid_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hid_dim", ")", "\n", "", "def", "forward", "(", "self", ",", "feature", ",", "aspect_v", ",", "dmask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.DotprodAttention.forward": [[207, 226], ["Q.unsqueeze.unsqueeze.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "dmask.unsqueeze.unsqueeze.unsqueeze", "model_utils.mask_logits", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.squeeze.squeeze.squeeze", "model_utils.DotprodAttention.linear", "feature.transpose"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "feature", ",", "aspect_v", ",", "dmask", ")", ":", "\n", "        ", "'''\n        C feature/context [N, L, D]\n        Q dep_tags_v          [N, D]\n        mask dmask          [N, L]\n        '''", "\n", "\n", "Q", "=", "aspect_v", "\n", "Q", "=", "Q", ".", "unsqueeze", "(", "2", ")", "# (N, D, 1)", "\n", "dot_prod", "=", "torch", ".", "bmm", "(", "self", ".", "linear", "(", "feature", ")", ",", "Q", ")", "# (N, L, 1)", "\n", "dmask", "=", "dmask", ".", "unsqueeze", "(", "2", ")", "# (N, D, 1)", "\n", "attention_weight", "=", "mask_logits", "(", "dot_prod", ",", "dmask", ")", "# (N, L ,1)", "\n", "attention", "=", "F", ".", "softmax", "(", "attention_weight", ",", "dim", "=", "1", ")", "# (N, L, 1)", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "attention", ")", "# (N, D, 1)", "\n", "out", "=", "out", ".", "squeeze", "(", "2", ")", "\n", "# out = F.sigmoid(out)", "\n", "# (N, D), ([N, L]), (N, L, 1)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.Highway.__init__": [[228, 235], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_num", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "linear", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "for", "_", "in", "range", "(", "layer_num", ")", "]", ")", "\n", "self", ".", "gate", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "for", "_", "in", "range", "(", "layer_num", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.Highway.forward": [[236, 242], ["range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "gate", "=", "F", ".", "sigmoid", "(", "self", ".", "gate", "[", "i", "]", "(", "x", ")", ")", "\n", "nonlinear", "=", "F", ".", "relu", "(", "self", ".", "linear", "[", "i", "]", "(", "x", ")", ")", "\n", "x", "=", "gate", "*", "nonlinear", "+", "(", "1", "-", "gate", ")", "*", "x", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.DepparseMultiHeadAttention.__init__": [[245, 254], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h", "=", "6", ",", "Co", "=", "300", ",", "cat", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "Co", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "Co", ",", "Co", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2s", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "1", ")", "for", "_", "in", "range", "(", "h", ")", "]", ")", "\n", "self", ".", "cat", "=", "cat", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.DepparseMultiHeadAttention.forward": [[255, 282], ["dep_tags_v.size", "model_utils.DepparseMultiHeadAttention.fc1().view", "model_utils.DepparseMultiHeadAttention.relu", "Q.transpose.transpose.transpose", "l().squeeze().transpose", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model_utils.DepparseMultiHeadAttention.fc1", "zip", "l().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "model_utils.mask_logits", "l", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "feature.transpose", "feature.transpose"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "feature", ",", "dep_tags_v", ",", "dmask", ")", ":", "\n", "        ", "'''\n        C feature/context [N, L, D]\n        Q dep_tags_v          [N, L, D]\n        mask dmask          [N, L]\n        '''", "\n", "nbatches", "=", "dep_tags_v", ".", "size", "(", "0", ")", "\n", "Q", "=", "self", ".", "fc1", "(", "dep_tags_v", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "\n", "self", ".", "hidden_size", ")", "# [N, L, #heads, hidden_size]", "\n", "Q", "=", "self", ".", "relu", "(", "Q", ")", "\n", "Q", "=", "Q", ".", "transpose", "(", "0", ",", "2", ")", "# [#heads, L, N, hidden_size]", "\n", "Q", "=", "[", "l", "(", "q", ")", ".", "squeeze", "(", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "for", "l", ",", "q", "in", "zip", "(", "self", ".", "fc2s", ",", "Q", ")", "]", "# [N, L] * #heads", "\n", "# Q = Q.squeeze(2)", "\n", "Q", "=", "[", "F", ".", "softmax", "(", "mask_logits", "(", "q", ",", "dmask", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "for", "q", "in", "Q", "]", "# [N, L, 1] * #heads", "\n", "\n", "# Q = Q.unsqueeze(2)", "\n", "if", "self", ".", "cat", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "q", ")", ".", "squeeze", "(", "2", ")", "for", "q", "in", "Q", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "bmm", "(", "feature", ".", "transpose", "(", "1", ",", "2", ")", ",", "q", ")", ".", "squeeze", "(", "2", ")", "for", "q", "in", "Q", "]", ",", "dim", "=", "2", ")", "\n", "out", "=", "torch", ".", "sum", "(", "out", ",", "dim", "=", "2", ")", "\n", "# out = out.squeeze(2)", "\n", "", "return", "out", ",", "Q", "[", "0", "]", "# ([N, L]) one head", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_utils.mask_logits": [[6, 9], ["None"], "function", ["None"], ["def", "mask_logits", "(", "target", ",", "mask", ")", ":", "\n", "#print(target.size(), mask.size())", "\n", "    ", "return", "target", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "(", "-", "1e30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.set_seed": [[21, 25], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed"], "function", ["None"], ["def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.reset_params": [[26, 38], ["gcn.parameters", "len", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "math.sqrt"], "function", ["None"], ["", "def", "reset_params", "(", "model", ",", "args", ")", ":", "\n", "#for n,p in model.named_parameters():", "\n", "#   if 'bert' not in n:", "\n", "    ", "for", "gcn", "in", "model", ".", "gcn", ":", "\n", "#       print(n)", "\n", "        ", "for", "p", "in", "gcn", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "p", ".", "shape", "[", "0", "]", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "p", ",", "a", "=", "-", "stdv", ",", "b", "=", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_input_from_batch": [[39, 79], ["None"], "function", ["None"], ["", "", "", "", "", "def", "get_input_from_batch", "(", "args", ",", "batch", ")", ":", "\n", "    ", "embedding_type", "=", "args", ".", "embedding_type", "\n", "if", "embedding_type", "==", "'glove'", "or", "embedding_type", "==", "'elmo'", ":", "\n", "# sentence_ids, aspect_ids, dep_tag_ids, pos_class, text_len, aspect_len, sentiment, dep_rel_ids, dep_heads, aspect_positions", "\n", "        ", "inputs", "=", "{", "'sentence'", ":", "batch", "[", "0", "]", ",", "\n", "'aspect'", ":", "batch", "[", "1", "]", ",", "# aspect token", "\n", "'dep_tags'", ":", "batch", "[", "2", "]", ",", "# reshaped", "\n", "'pos_class'", ":", "batch", "[", "3", "]", ",", "\n", "'text_len'", ":", "batch", "[", "4", "]", ",", "\n", "'aspect_len'", ":", "batch", "[", "5", "]", ",", "\n", "'dep_rels'", ":", "batch", "[", "7", "]", ",", "# adj no-reshape", "\n", "'dep_heads'", ":", "batch", "[", "8", "]", ",", "\n", "'aspect_position'", ":", "batch", "[", "9", "]", ",", "\n", "'dep_dirs'", ":", "batch", "[", "10", "]", "\n", "}", "\n", "labels", "=", "batch", "[", "6", "]", "\n", "", "else", ":", "# bert", "\n", "# input_ids, word_indexer, input_aspect_ids, aspect_indexer, dep_tag_ids, pos_class, text_len, aspect_len, sentiment, dep_rel_ids, dep_heads, aspect_positions", "\n", "        ", "inputs", "=", "{", "'input_ids'", ":", "batch", "[", "0", "]", ",", "\n", "'input_aspect_ids'", ":", "batch", "[", "3", "]", ",", "\n", "'word_indexer'", ":", "batch", "[", "1", "]", ",", "\n", "'w_idx'", ":", "batch", "[", "2", "]", ",", "\n", "'aspect_indexer'", ":", "batch", "[", "4", "]", ",", "\n", "'input_cat_ids'", ":", "batch", "[", "5", "]", ",", "\n", "'segment_ids'", ":", "batch", "[", "6", "]", ",", "\n", "'input_des_ids'", ":", "batch", "[", "7", "]", ",", "\n", "'des_indexer'", ":", "batch", "[", "8", "]", ",", "\n", "'dep_tags'", ":", "batch", "[", "9", "]", ",", "\n", "'pos_class'", ":", "batch", "[", "10", "]", ",", "\n", "'text_len'", ":", "batch", "[", "11", "]", ",", "\n", "'aspect_len'", ":", "batch", "[", "12", "]", ",", "\n", "'des_len'", ":", "batch", "[", "13", "]", ",", "\n", "'dep_rels'", ":", "batch", "[", "15", "]", ",", "\n", "'dep_heads'", ":", "batch", "[", "16", "]", ",", "\n", "'aspect_position'", ":", "batch", "[", "17", "]", ",", "\n", "'dep_dirs'", ":", "batch", "[", "18", "]", ",", "\n", "'aspect_start'", ":", "batch", "[", "19", "]", ",", "\n", "'sparse_graph'", ":", "batch", "[", "20", "]", "}", "\n", "labels", "=", "batch", "[", "14", "]", "\n", "", "return", "inputs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_collate_fn": [[81, 92], ["None"], "function", ["None"], ["", "def", "get_collate_fn", "(", "args", ")", ":", "\n", "    ", "embedding_type", "=", "args", ".", "embedding_type", "\n", "if", "embedding_type", "==", "'glove'", ":", "\n", "        ", "return", "my_collate", "\n", "", "elif", "embedding_type", "==", "'elmo'", ":", "\n", "        ", "return", "my_collate_elmo", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "pure_bert", ":", "\n", "            ", "return", "my_collate_pure_bert", "\n", "", "else", ":", "\n", "            ", "return", "my_collate_bert", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_bert_optimizer": [[94, 133], ["list", "model.named_parameters", "transformers.AdamW", "list", "map", "filter", "filter", "map", "model.bert.parameters", "model.parameters", "model.parameters", "model.des_bert.parameters", "any", "bert_decay_params.append", "bert_no_decay_params.append", "any", "base_decay_params.append", "base_no_decay_params.append", "id", "id"], "function", ["None"], ["", "", "", "def", "get_bert_optimizer", "(", "args", ",", "model", ")", ":", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "    ", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "if", "not", "args", ".", "one_bert", ":", "\n", "        ", "des_bert_params_id", "=", "list", "(", "map", "(", "id", ",", "model", ".", "des_bert", ".", "parameters", "(", ")", ")", ")", "\n", "", "con_bert_params_id", "=", "list", "(", "map", "(", "id", ",", "model", ".", "bert", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "one_bert", ":", "\n", "        ", "base_params", "=", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "con_bert_params", ",", "\n", "model", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "base_params", "=", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "des_bert_params", "+", "con_bert_params", ",", "\n", "model", ".", "parameters", "(", ")", ")", "\n", "", "bert_decay_params", ",", "bert_no_decay_params", ",", "base_decay_params", ",", "base_no_decay_params", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "# print(n,p)", "\n", "        ", "if", "'bert'", "in", "n", ":", "\n", "            ", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", ":", "\n", "                ", "bert_decay_params", ".", "append", "(", "p", ")", "\n", "#bert_decay_params_n.append(n)", "\n", "", "else", ":", "\n", "                ", "bert_no_decay_params", ".", "append", "(", "p", ")", "\n", "#bert_no_decay_params_n.append(n)", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", ":", "\n", "                ", "base_decay_params", ".", "append", "(", "p", ")", "\n", "#base_decay_params_n.append(n)", "\n", "", "else", ":", "\n", "                ", "base_no_decay_params", ".", "append", "(", "p", ")", "\n", "\n", "", "", "", "optimizer", "=", "AdamW", "(", "[", "\n", "{", "'params'", ":", "bert_decay_params", ",", "'lr'", ":", "args", ".", "bert_lr", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "bert_no_decay_params", ",", "'lr'", ":", "args", ".", "bert_lr", ",", "'weight_decay'", ":", "0.0", "}", ",", "\n", "{", "'params'", ":", "base_decay_params", ",", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "base_no_decay_params", ",", "'weight_decay'", ":", "0.0", "}", "]", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "eps", "=", "args", ".", "adam_epsilon", ")", "\n", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.train": [[135, 232], ["torch.utils.data.RandomSampler", "trainer.get_collate_fn", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "model.zero_grad", "tqdm.trange", "trainer.set_seed", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "trainer.get_bert_optimizer", "trainer.reset_params", "filter", "torch.optim.Adam", "torch.optim.Adam", "len", "int", "enumerate", "torch.optim.lr_scheduler.MultiStepLR.step", "print", "print", "model.parameters", "model.train", "tuple", "trainer.get_input_from_batch", "model", "torch.cross_entropy", "F.cross_entropy.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "F.cross_entropy.item", "epoch_iterator.close", "len", "model.parameters", "torch.optim.Adam.step", "model.zero_grad", "epoch_iterator.close", "torch.optim.lr_scheduler.MultiStepLR.get_lr", "len", "t.to", "trainer.evaluate", "all_eval_results.append"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_collate_fn", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.set_seed", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_bert_optimizer", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.reset_params", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.train", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_input_from_batch", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.evaluate"], ["", "def", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "test_dataset", ")", ":", "\n", "    ", "'''Train the model'''", "\n", "#tb_writer = SummaryWriter()", "\n", "\n", "args", ".", "train_batch_size", "=", "args", ".", "per_gpu_train_batch_size", "\n", "train_sampler", "=", "RandomSampler", "(", "train_dataset", ")", "\n", "collate_fn", "=", "get_collate_fn", "(", "args", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "\n", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "if", "args", ".", "max_steps", ">", "0", ":", "\n", "        ", "t_total", "=", "args", ".", "max_steps", "\n", "args", ".", "num_train_epochs", "=", "args", ".", "max_steps", "//", "(", "\n", "len", "(", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "t_total", "=", "len", "(", "\n", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", "\n", "\n", "\n", "", "if", "args", ".", "embedding_type", "==", "'bert'", ":", "\n", "        ", "optimizer", "=", "get_bert_optimizer", "(", "args", ",", "model", ")", "\n", "reset_params", "(", "model", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "filter", "(", "lambda", "param", ":", "param", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "\n", "# Train", "\n", "", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Instantaneous batch size per GPU = %d\"", ",", "\n", "args", ".", "per_gpu_train_batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "\n", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "t_total", ")", "\n", "\n", "\n", "global_step", "=", "0", "\n", "tr_loss", ",", "logging_loss", "=", "0.0", ",", "0.0", "\n", "all_eval_results", "=", "[", "]", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ")", "\n", "set_seed", "(", "args", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "10", ",", "20", "]", ",", "gamma", "=", "0.5", ")", "\n", "epoch", "=", "-", "1", "\n", "for", "_", "in", "train_iterator", ":", "\n", "        ", "epoch", "=", "epoch", "+", "1", "\n", "# epoch_iterator = tqdm(train_dataloader, desc='Iteration')", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "\n", "inputs", ",", "labels", "=", "get_input_from_batch", "(", "args", ",", "batch", ")", "\n", "#print(inputs)", "\n", "#assert 1==0", "\n", "logit", "=", "model", "(", "**", "inputs", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logit", ",", "labels", ")", "\n", "#print(loss)", "\n", "#assert 1==0", "\n", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "# scheduler.step()  # Update learning rate schedule", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "# Log metrics", "\n", "if", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "#train_results, train_loss = evaluate(args, train_dataset, model, 'Train', epoch)", "\n", "                    ", "results", ",", "eval_loss", "=", "evaluate", "(", "args", ",", "test_dataset", ",", "model", ",", "'Eval'", ",", "epoch", ")", "\n", "all_eval_results", ".", "append", "(", "results", ")", "\n", "\n", "logging_loss", "=", "tr_loss", "\n", "\n", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "                ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "            ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "print", "(", "'*******'", ")", "\n", "print", "(", "'Updated learning rate: {0}'", ".", "format", "(", "scheduler", ".", "get_lr", "(", ")", ")", ")", "\n", "#tb_writer.close()", "\n", "", "return", "global_step", ",", "tr_loss", "/", "global_step", ",", "all_eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.evaluate": [[234, 327], ["torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "numpy.argmax", "trainer.compute_metrics", "results.update", "os.path.join", "len", "model.eval", "tuple", "range", "print", "open", "logger.info", "logger.info", "sorted", "writer.write", "torch.no_grad", "torch.no_grad", "trainer.get_input_from_batch", "model", "torch.cross_entropy", "F.cross_entropy.mean().item", "model.detach().cpu().numpy", "labels.detach().cpu().numpy", "torch.softmax().detach().cpu().numpy", "numpy.append", "numpy.append", "numpy.append", "len", "open", "open", "open", "open", "compute_metrics.keys", "logger.info", "writer.write", "writer.write", "t.to", "model.detach().cpu().numpy", "labels.detach().cpu().numpy", "torch.softmax().detach().cpu().numpy", "case_id.append", "case_distri.append", "case_id_bad.append", "case_distri_bad.append", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "str", "F.cross_entropy.mean", "model.detach().cpu", "labels.detach().cpu", "torch.softmax().detach().cpu", "str", "str", "str", "str", "str", "model.detach().cpu", "labels.detach().cpu", "torch.softmax().detach().cpu", "str", "model.detach", "labels.detach", "torch.softmax().detach", "model.detach", "labels.detach", "torch.softmax().detach", "torch.softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.compute_metrics", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_input_from_batch"], ["", "def", "evaluate", "(", "args", ",", "eval_dataset", ",", "model", ",", "mode", ",", "epoch", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "\n", "args", ".", "eval_batch_size", "=", "args", ".", "per_gpu_eval_batch_size", "\n", "eval_sampler", "=", "SequentialSampler", "(", "eval_dataset", ")", "\n", "#collate_fn = get_collate_fn(args)", "\n", "collate_fn", "=", "my_collate_bert_eval", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "sampler", "=", "eval_sampler", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "# Eval", "\n", "logger", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "eval_loss", "=", "0.0", "\n", "nb_eval_steps", "=", "0", "\n", "preds", "=", "None", "\n", "out_label_ids", "=", "None", "\n", "case_study", "=", "False", "\n", "\n", "for", "batch", "in", "eval_dataloader", ":", "\n", "# for batch in tqdm(eval_dataloader, desc='Evaluating'):", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "get_input_from_batch", "(", "args", ",", "batch", ")", "\n", "\n", "logits", "=", "model", "(", "**", "inputs", ")", "\n", "tmp_eval_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ")", "\n", "\n", "eval_loss", "+=", "tmp_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "nb_eval_steps", "+=", "1", "\n", "if", "preds", "is", "None", ":", "\n", "            ", "preds", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out_label_ids", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_distri", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#print(pred_distri)", "\n", "#assert 0==9", "\n", "", "else", ":", "\n", "            ", "preds", "=", "np", ".", "append", "(", "preds", ",", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "out_label_ids", "=", "np", ".", "append", "(", "\n", "out_label_ids", ",", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "pred_distri", "=", "np", ".", "append", "(", "pred_distri", ",", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "", "", "eval_loss", "=", "eval_loss", "/", "nb_eval_steps", "\n", "preds", "=", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", "\n", "# print(preds)", "\n", "result", "=", "compute_metrics", "(", "preds", ",", "out_label_ids", ",", "epoch", ")", "\n", "results", ".", "update", "(", "result", ")", "\n", "case_id", "=", "[", "]", "\n", "case_distri", "=", "[", "]", "\n", "case_id_bad", "=", "[", "]", "\n", "case_distri_bad", "=", "[", "]", "\n", "if", "case_study", "and", "result", "[", "'acc'", "]", ">", "0.855", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "            ", "if", "preds", "[", "i", "]", "==", "out_label_ids", "[", "i", "]", ":", "\n", "                ", "case_id", ".", "append", "(", "i", ")", "\n", "case_distri", ".", "append", "(", "pred_distri", "[", "i", "]", ")", "\n", "", "if", "preds", "[", "i", "]", "!=", "out_label_ids", "[", "i", "]", ":", "\n", "                ", "case_id_bad", ".", "append", "(", "i", ")", "\n", "case_distri_bad", ".", "append", "(", "pred_distri", "[", "i", "]", ")", "\n", "", "", "with", "open", "(", "args", ".", "dataset_name", "+", "'_id.goodcase'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "case_id", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "i", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "args", ".", "dataset_name", "+", "'_id.badcase'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "case_id_bad", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "i", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "args", ".", "dataset_name", "+", "'_distri.goodcase'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "case_distri", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "i", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "args", ".", "dataset_name", "+", "'_distri.badcase'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", "in", "case_distri_bad", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "i", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "print", "(", "'bad case writed, early stop.'", ")", "\n", "assert", "1", "==", "0", "\n", "", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'eval_results.txt'", ")", "\n", "with", "open", "(", "output_eval_file", ",", "'a+'", ")", "as", "writer", ":", "\n", "        ", "logger", ".", "info", "(", "'***** {0} results *****'", ".", "format", "(", "mode", ")", ")", "\n", "logger", ".", "info", "(", "\"  {0} loss: {1}\"", ".", "format", "(", "mode", ",", "str", "(", "eval_loss", ")", ")", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "\n", "            ", "if", "key", "==", "'epoch'", ":", "\n", "                ", "continue", "\n", "", "logger", ".", "info", "(", "\" {0} {1} = {2}\"", ".", "format", "(", "mode", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"  %s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "writer", ".", "write", "(", "'\\n'", ")", "\n", "", "writer", ".", "write", "(", "'\\n'", ")", "\n", "", "return", "results", ",", "eval_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.evaluate_badcase": [[329, 375], ["torch.utils.data.SequentialSampler", "trainer.get_collate_fn", "torch.utils.data.DataLoader", "model.eval", "tuple", "int", "int", "torch.no_grad", "torch.no_grad", "trainer.get_input_from_batch", "model", "t.to", "numpy.argmax", "labels.detach().cpu().numpy", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "args.tokenizer.decode", "args.tokenizer.decode", "badcases.append", "[].detach().cpu().numpy", "[].detach().cpu().numpy", "badcases.append", "model.detach().cpu().numpy", "labels.detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "[].detach().cpu", "model.detach().cpu", "labels.detach", "[].detach", "[].detach", "[].detach", "[].detach", "model.detach"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_collate_fn", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.get_input_from_batch"], ["", "def", "evaluate_badcase", "(", "args", ",", "eval_dataset", ",", "model", ",", "word_vocab", ")", ":", "\n", "\n", "    ", "eval_sampler", "=", "SequentialSampler", "(", "eval_dataset", ")", "\n", "collate_fn", "=", "get_collate_fn", "(", "args", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_dataset", ",", "sampler", "=", "eval_sampler", ",", "\n", "batch_size", "=", "1", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "# Eval", "\n", "badcases", "=", "[", "]", "\n", "eval_loss", "=", "0.0", "\n", "nb_eval_steps", "=", "0", "\n", "preds", "=", "None", "\n", "out_label_ids", "=", "None", "\n", "for", "batch", "in", "eval_dataloader", ":", "\n", "# for batch in tqdm(eval_dataloader, desc='Evaluating'):", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "get_input_from_batch", "(", "args", ",", "batch", ")", "\n", "\n", "logits", "=", "model", "(", "**", "inputs", ")", "\n", "\n", "", "pred", "=", "int", "(", "np", ".", "argmax", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "[", "0", "]", ")", "\n", "label", "=", "int", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "if", "pred", "!=", "label", ":", "\n", "            ", "if", "args", ".", "embedding_type", "==", "'bert'", ":", "\n", "                ", "sent_ids", "=", "inputs", "[", "'input_ids'", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "aspect_ids", "=", "inputs", "[", "'input_aspect_ids'", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "case", "=", "{", "}", "\n", "case", "[", "'sentence'", "]", "=", "args", ".", "tokenizer", ".", "decode", "(", "sent_ids", ")", "\n", "case", "[", "'aspect'", "]", "=", "args", ".", "tokenizer", ".", "decode", "(", "aspect_ids", ")", "\n", "case", "[", "'pred'", "]", "=", "pred", "\n", "case", "[", "'label'", "]", "=", "label", "\n", "badcases", ".", "append", "(", "case", ")", "\n", "", "else", ":", "\n", "                ", "sent_ids", "=", "inputs", "[", "'sentence'", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "aspect_ids", "=", "inputs", "[", "'aspect'", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "case", "=", "{", "}", "\n", "case", "[", "'sentence'", "]", "=", "' '", ".", "join", "(", "[", "word_vocab", "[", "'itos'", "]", "[", "i", "]", "for", "i", "in", "sent_ids", "]", ")", "\n", "case", "[", "'aspect'", "]", "=", "' '", ".", "join", "(", "[", "word_vocab", "[", "'itos'", "]", "[", "i", "]", "for", "i", "in", "aspect_ids", "]", ")", "\n", "case", "[", "'pred'", "]", "=", "pred", "\n", "case", "[", "'label'", "]", "=", "label", "\n", "badcases", ".", "append", "(", "case", ")", "\n", "\n", "", "", "", "return", "badcases", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.simple_accuracy": [[377, 379], ["None"], "function", ["None"], ["", "def", "simple_accuracy", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "return", "(", "preds", "==", "labels", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.acc_and_f1": [[381, 388], ["trainer.simple_accuracy", "sklearn.metrics.f1_score"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.simple_accuracy"], ["", "def", "acc_and_f1", "(", "preds", ",", "labels", ",", "epoch", ")", ":", "\n", "    ", "acc", "=", "simple_accuracy", "(", "preds", ",", "labels", ")", "\n", "f1", "=", "f1_score", "(", "y_true", "=", "labels", ",", "y_pred", "=", "preds", ",", "average", "=", "'macro'", ")", "\n", "return", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "\"acc\"", ":", "acc", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.compute_metrics": [[391, 393], ["trainer.acc_and_f1"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.acc_and_f1"], ["", "def", "compute_metrics", "(", "preds", ",", "labels", ",", "epoch", ")", ":", "\n", "    ", "return", "acc_and_f1", "(", "preds", ",", "labels", ",", "epoch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model.KaGRMN_DSG.__init__": [[17, 64], ["torch.Module.__init__", "transformers.BertConfig.from_pretrained", "transformers.BertModel.from_pretrained", "transformers.BertModel.from_pretrained", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_utils.DotprodAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_utils.MultiHeadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear().to", "torch.Linear().to", "torch.Linear().to", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "model_utils.Highway", "model_utils.Highway", "model_utils.BiRelationAttention().to", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_utils.GCN().to", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "model_utils.BiRelationAttention", "model_utils.GCN"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dep_tag_num", ",", "pos_tag_num", ")", ":", "\n", "        ", "super", "(", "KaGRMN_DSG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# Bert", "\n", "config", "=", "BertConfig", ".", "from_pretrained", "(", "args", ".", "bert_model_dir", ")", "\n", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "\n", "args", ".", "bert_model_dir", ",", "config", "=", "config", ",", "from_tf", "=", "False", ")", "\n", "self", ".", "des_bert", "=", "BertModel", ".", "from_pretrained", "(", "\n", "args", ".", "bert_model_dir", ",", "config", "=", "config", ",", "from_tf", "=", "False", ")", "\n", "self", ".", "dropout_bert", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "args", ".", "embedding_dim", "=", "config", ".", "hidden_size", "# 768", "\n", "\n", "if", "args", ".", "highway", ":", "\n", "            ", "self", ".", "highway_dep", "=", "Highway", "(", "args", ".", "num_layers", ",", "args", ".", "embedding_dim", ")", "\n", "self", ".", "highway", "=", "Highway", "(", "args", ".", "num_layers", ",", "args", ".", "embedding_dim", ")", "\n", "\n", "", "self", ".", "stack_num", "=", "args", ".", "stack_num", "\n", "\n", "self", ".", "norm_att", "=", "nn", ".", "LayerNorm", "(", "args", ".", "embedding_dim", ")", "\n", "self", ".", "norm_gcn", "=", "nn", ".", "LayerNorm", "(", "args", ".", "embedding_dim", ")", "\n", "self", ".", "norm_rat", "=", "nn", ".", "LayerNorm", "(", "args", ".", "embedding_dim", ")", "\n", "\n", "self", ".", "gcn", "=", "nn", ".", "ModuleList", "(", "[", "GCN", "(", "args", ".", "embedding_dim", ",", "args", ".", "embedding_dim", ")", ".", "to", "(", "args", ".", "device", ")", "for", "i", "in", "range", "(", "args", ".", "n_gcn", ")", "]", ")", "\n", "\n", "# GAT", "\n", "self", ".", "gat_dep", "=", "[", "BiRelationAttention", "(", "in_dim", "=", "args", ".", "embedding_dim", ")", ".", "to", "(", "args", ".", "device", ")", "for", "i", "in", "range", "(", "args", ".", "rel_num_heads", ")", "]", "\n", "\n", "self", ".", "t2d_att", "=", "DotprodAttention", "(", ")", "\n", "self", ".", "degate_linear", "=", "nn", ".", "Linear", "(", "args", ".", "embedding_dim", "*", "2", ",", "args", ".", "embedding_dim", ")", "\n", "self", ".", "degate_linear2", "=", "nn", ".", "Linear", "(", "args", ".", "embedding_dim", "*", "2", ",", "1", ")", "\n", "\n", "self", ".", "self_attention", "=", "MultiHeadAttention", "(", "n_head", "=", "args", ".", "self_num_heads", ",", "d_model", "=", "args", ".", "embedding_dim", ",", "d_k", "=", "args", ".", "embedding_dim", ",", "d_v", "=", "args", ".", "embedding_dim", ")", "\n", "self", ".", "sf_linear", "=", "nn", ".", "Linear", "(", "args", ".", "embedding_dim", ",", "args", ".", "embedding_dim", ")", "\n", "self", ".", "dep_embed", "=", "nn", ".", "Embedding", "(", "dep_tag_num", ",", "args", ".", "embedding_dim", ")", "\n", "#self.dep_embed2 = nn.Embedding(dep_tag_num, args.embedding_dim)", "\n", "\n", "self", ".", "fc_graph", "=", "nn", ".", "Linear", "(", "2", "*", "args", ".", "embedding_dim", ",", "args", ".", "embedding_dim", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "last_hidden_size", "=", "args", ".", "embedding_dim", "*", "2", "\n", "layers", "=", "[", "\n", "nn", ".", "Linear", "(", "last_hidden_size", ",", "args", ".", "final_hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "args", ".", "num_mlps", "-", "1", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Linear", "(", "args", ".", "final_hidden_size", ",", "\n", "args", ".", "final_hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "self", ".", "fcs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "fc_final", "=", "nn", ".", "Linear", "(", "args", ".", "final_hidden_size", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model.KaGRMN_DSG.position_weight": [[65, 89], ["asp_start.int().cpu().numpy.int().cpu().numpy.int().cpu().numpy", "asp_end.int().cpu().numpy.int().cpu().numpy.int().cpu().numpy", "text_len.int().cpu().numpy.int().cpu().numpy.int().cpu().numpy", "aspect_len.int().cpu().numpy.int().cpu().numpy.int().cpu().numpy", "range", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "torch.tensor().unsqueeze().to", "range", "range", "range", "range", "asp_start.int().cpu().numpy.int().cpu().numpy.int().cpu", "asp_end.int().cpu().numpy.int().cpu().numpy.int().cpu", "text_len.int().cpu().numpy.int().cpu().numpy.int().cpu", "aspect_len.int().cpu().numpy.int().cpu().numpy.int().cpu", "range", "weight[].append", "weight[].append", "weight[].append", "weight[].append", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "asp_start.int().cpu().numpy.int().cpu().numpy.int", "asp_end.int().cpu().numpy.int().cpu().numpy.int", "text_len.int().cpu().numpy.int().cpu().numpy.int", "aspect_len.int().cpu().numpy.int().cpu().numpy.int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "position_weight", "(", "self", ",", "x", ",", "asp_start", ",", "asp_end", ",", "text_len", ",", "aspect_len", ")", ":", "\n", "            ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "seq_len", "=", "x", ".", "shape", "[", "1", "]", "\n", "asp_start", "=", "asp_start", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "asp_end", "=", "asp_end", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "text_len", "=", "text_len", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "aspect_len", "=", "aspect_len", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "text_len", "=", "text_len", "-", "aspect_len", "+", "1", "\n", "weight", "=", "[", "[", "]", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "context_len", "=", "text_len", "[", "i", "]", "-", "1", "\n", "for", "j", "in", "range", "(", "asp_start", "[", "i", "]", ")", ":", "\n", "                    ", "weight", "[", "i", "]", ".", "append", "(", "1", "-", "(", "asp_start", "[", "i", "]", "-", "j", ")", "/", "context_len", ")", "\n", "", "for", "j", "in", "range", "(", "asp_start", "[", "i", "]", ",", "asp_start", "[", "i", "]", "+", "1", ")", ":", "\n", "                    ", "weight", "[", "i", "]", ".", "append", "(", "1", ")", "\n", "", "for", "j", "in", "range", "(", "asp_start", "[", "i", "]", "+", "1", ",", "text_len", "[", "i", "]", ")", ":", "\n", "                    ", "weight", "[", "i", "]", ".", "append", "(", "1", "-", "(", "j", "-", "asp_start", "[", "i", "]", ")", "/", "context_len", ")", "\n", "", "for", "j", "in", "range", "(", "text_len", "[", "i", "]", ",", "seq_len", ")", ":", "\n", "                    ", "weight", "[", "i", "]", ".", "append", "(", "0", ")", "\n", "", "", "weight", "=", "torch", ".", "tensor", "(", "weight", ")", ".", "unsqueeze", "(", "2", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "#print(weight)", "\n", "#print(asp_start, aspect_len, text_len)", "\n", "#assert 1==0", "\n", "return", "weight", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model.KaGRMN_DSG.forward": [[90, 195], ["torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "range", "model.KaGRMN_DSG.bert", "model.KaGRMN_DSG.des_bert", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "range", "range", "model.KaGRMN_DSG.dep_embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "model.KaGRMN_DSG.norm_rat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.KaGRMN_DSG.fc_graph", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.KaGRMN_DSG.dropout", "model.KaGRMN_DSG.fcs", "model.KaGRMN_DSG.fc_final", "model.KaGRMN_DSG.t2d_att", "model.KaGRMN_DSG.sf_linear", "range", "model.KaGRMN_DSG.self_attention", "model.KaGRMN_DSG.norm_att", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.KaGRMN_DSG.norm_gcn", "model.KaGRMN_DSG.highway_dep", "g().unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "aspect_start.size", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "feature_output.size", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.zeros_like().float.unsqueeze", "torch.zeros_like().float.unsqueeze", "torch.zeros_like().float.unsqueeze", "model.KaGRMN_DSG.degate_linear2", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "zip", "w_i.long", "zip", "model.KaGRMN_DSG.degate_linear", "model.KaGRMN_DSG.size", "torch.zeros_like().float.unsqueeze", "torch.zeros_like().float.unsqueeze", "torch.zeros_like().float.unsqueeze", "g", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "input_aspect_ids", ",", "word_indexer", ",", "w_idx", ",", "aspect_indexer", ",", "input_cat_ids", ",", "segment_ids", ",", "input_des_ids", ",", "des_indexer", ",", "pos_class", ",", "dep_tags", ",", "text_len", ",", "aspect_len", ",", "des_len", ",", "dep_rels", ",", "dep_heads", ",", "aspect_position", ",", "dep_dirs", ",", "aspect_start", ",", "sparse_graph", ")", ":", "\n", "\n", "        ", "ct_mask", "=", "(", "torch", ".", "ones_like", "(", "w_idx", ")", "!=", "w_idx", ")", ".", "float", "(", ")", "# (N\uff0cL)", "\n", "ct_mask", "[", ":", ",", "0", "]", "=", "1", "\n", "aspect_end", "=", "aspect_start", "+", "aspect_len", "-", "1", "\n", "asp_mask", "=", "torch", ".", "zeros_like", "(", "dep_tags", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "aspect_start", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "asp_mask", "[", "i", "]", "[", "aspect_start", "[", "i", "]", "-", "1", "]", "=", "1", "\n", "#print(des_indexer)", "\n", "", "des_mask", "=", "(", "torch", ".", "ones_like", "(", "des_indexer", ")", "!=", "des_indexer", ")", ".", "float", "(", ")", "# (N\uff0cL)", "\n", "des_mask", "[", ":", ",", "0", "]", "=", "1", "\n", "outputs", "=", "self", ".", "bert", "(", "input_cat_ids", ",", "token_type_ids", "=", "segment_ids", ")", "\n", "des_outputs", "=", "self", ".", "des_bert", "(", "input_des_ids", ")", "\n", "\n", "feature_output", "=", "outputs", "[", "0", "]", "# (N, L, D)", "\n", "pool_out", "=", "outputs", "[", "1", "]", "#(N, D)", "\n", "\n", "h_des", "=", "des_outputs", "[", "0", "]", "\n", "\n", "# index select, back to original batched size.", "\n", "c_h", "=", "torch", ".", "stack", "(", "[", "torch", ".", "index_select", "(", "f", ",", "0", ",", "w_i", ")", "\n", "for", "f", ",", "w_i", "in", "zip", "(", "feature_output", ",", "w_idx", ")", "]", ")", "\n", "h_des", "=", "torch", ".", "stack", "(", "[", "torch", ".", "index_select", "(", "f", ",", "0", ",", "w_i", ".", "long", "(", ")", ")", "\n", "for", "f", ",", "w_i", "in", "zip", "(", "h_des", ",", "des_indexer", ")", "]", ")", "\n", "\n", "# get the initial target representation which is the average pool of target words hidden states", "\n", "\n", "t_r", "=", "pool_out", "\n", "\n", "# target hidden states collapse, get ct_h_0", "\n", "\n", "for", "i", "in", "range", "(", "feature_output", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "\n", "            ", "c_h", "[", "i", "]", "[", "aspect_start", "[", "i", "]", "-", "1", "]", "=", "t_r", "[", "i", "]", "\n", "\n", "# N x Stacks", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stack_num", ")", ":", "\n", "\n", "# target-description attention", "\n", "            ", "r_d", "=", "self", ".", "t2d_att", "(", "h_des", ",", "t_r", ",", "des_mask", ")", "\n", "\n", "# description embedding gate mechanism", "\n", "t_r", "=", "t_r", "+", "torch", ".", "mul", "(", "r_d", ",", "self", ".", "degate_linear", "(", "torch", ".", "cat", "(", "[", "t_r", ",", "r_d", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "\n", "# space fitting and insert,  get ct_h_new", "\n", "t_r", "=", "self", ".", "sf_linear", "(", "t_r", ")", "\n", "\n", "for", "e", "in", "range", "(", "c_h", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                ", "c_h", "[", "e", "]", "[", "aspect_start", "[", "e", "]", "-", "1", "]", "=", "t_r", "[", "e", "]", "\n", "\n", "\n", "# self attention  ", "\n", "\n", "", "c_h_st", ",", "att", "=", "self", ".", "self_attention", "(", "c_h", ",", "c_h", ",", "c_h", ",", "ct_mask", ")", "\n", "c_h", "=", "self", ".", "norm_att", "(", "c_h", "+", "c_h_st", ")", "\n", "t_r", "=", "torch", ".", "sum", "(", "asp_mask", ".", "unsqueeze", "(", "2", ")", "*", "c_h", ",", "dim", "=", "1", ")", "\n", "# GCN layer", "\n", "", "dep_sparse_out_previous", "=", "c_h", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "n_gcn", ")", ":", "\n", "            ", "dep_sparse_out", "=", "self", ".", "gcn", "[", "i", "]", "(", "dep_sparse_out_previous", ",", "sparse_graph", ")", "\n", "dep_sparse_out", "=", "self", ".", "norm_gcn", "(", "dep_sparse_out_previous", "+", "dep_sparse_out", ")", "\n", "dep_sparse_out_previous", "=", "dep_sparse_out", "\n", "# Relational Graph Attention Layer", "\n", "\n", "", "dep_feature", "=", "self", ".", "dep_embed", "(", "dep_tags", ")", "\n", "\n", "if", "self", ".", "args", ".", "highway", ":", "\n", "            ", "dep_feature", "=", "self", ".", "highway_dep", "(", "dep_feature", ")", "\n", "\n", "", "dep_out", "=", "[", "g", "(", "c_h", ",", "dep_feature", ",", "ct_mask", ")", ".", "unsqueeze", "(", "2", ")", "for", "g", "in", "self", ".", "gat_dep", "]", "# (N, L, 1, D) * num_heads", "\n", "dep_out", "=", "torch", ".", "cat", "(", "dep_out", ",", "dim", "=", "2", ")", "# (N, l, H, D)", "\n", "dep_dense_out", "=", "dep_out", ".", "mean", "(", "dim", "=", "2", ")", "# (N, L, D)", "\n", "\n", "dep_dense_out", "=", "self", ".", "norm_rat", "(", "c_h", "+", "dep_dense_out", ")", "\n", "\n", "\n", "# concatenate and project", "\n", "c_h_cat", "=", "torch", ".", "cat", "(", "(", "dep_sparse_out", ",", "dep_dense_out", ")", ",", "dim", "=", "2", ")", "\n", "\n", "c_h", "=", "self", ".", "fc_graph", "(", "c_h_cat", ")", "\n", "\n", "\n", "t_r", "=", "torch", ".", "sum", "(", "asp_mask", ".", "unsqueeze", "(", "2", ")", "*", "c_h", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "\n", "# res connect. contain the original information, more robust, smooth. balance the noisy information and useful information", "\n", "\n", "\n", "# classification", "\n", "\n", "t_r", "=", "t_r", "+", "torch", ".", "mul", "(", "r_d", ",", "self", ".", "degate_linear2", "(", "torch", ".", "cat", "(", "[", "t_r", ",", "r_d", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "senti_feature", "=", "torch", ".", "cat", "(", "[", "t_r", ",", "pool_out", "]", ",", "dim", "=", "1", ")", "# (N, D')", "\n", "\n", "#print('t_r:{0}'.format(t_r))", "\n", "#assert 1==0", "\n", "x", "=", "self", ".", "dropout", "(", "senti_feature", ")", "\n", "x", "=", "self", ".", "fcs", "(", "x", ")", "\n", "logit", "=", "self", ".", "fc_final", "(", "x", ")", "\n", "#print('logit:{0}'.format(logit))", "\n", "#assert 1==0", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model.rnn_zero_state": [[197, 205], ["torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda"], "function", ["None"], ["", "", "def", "rnn_zero_state", "(", "batch_size", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", "=", "True", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "total_layers", "=", "num_layers", "*", "2", "if", "bidirectional", "else", "num_layers", "\n", "state_shape", "=", "(", "total_layers", ",", "batch_size", ",", "hidden_dim", ")", "\n", "h0", "=", "c0", "=", "Variable", "(", "torch", ".", "zeros", "(", "*", "state_shape", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "return", "h0", ".", "cuda", "(", ")", ",", "c0", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "h0", ",", "c0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.set_seed": [[21, 26], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.parse_args": [[28, 123], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Required parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "'rest'", ",", "\n", "choices", "=", "[", "'rest'", ",", "'laptop'", ",", "'res15'", "]", ",", "\n", "help", "=", "'Choose absa dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'output_dir/output-KaGRMN_DSG'", ",", "\n", "help", "=", "'Directory to store intermedia data, such as vocab, embeddings, tags_vocab.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'Number of classes of ABSA.'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--cuda_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'Choose which GPUs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "8682", ",", "\n", "help", "=", "'random seed for initialization'", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--bert_model_dir'", ",", "type", "=", "str", ",", "default", "=", "'/data/bxing/supports/bert-base-uncased/'", ",", "\n", "help", "=", "'Path to pre-trained Bert model.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of layers of bilstm or highway or elmo.'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--add_non_connect'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Add a sepcial \"non-connect\" relation for aspect with no direct connection.'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi_hop'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Multi hop non connection.'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_hop'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'max number of hops'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--rel_num_heads'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'Number of heads for rgat.'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_num_heads'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'Number of heads for self attention.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "'Dropout rate for embedding.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--stack_num'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of representation entagling module stacks.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_gcn'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of GCN layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_mem_dim'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Dimension of the W in GCN.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcn_dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'Dropout rate for GCN.'", ")", "\n", "# GAT", "\n", "parser", ".", "add_argument", "(", "'--gat_attention_type'", ",", "type", "=", "str", ",", "choices", "=", "[", "'linear'", ",", "'dotprod'", ",", "'gcn'", "]", ",", "default", "=", "'dotprod'", ",", "\n", "help", "=", "'The attention used for gat'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embedding_type'", ",", "type", "=", "str", ",", "default", "=", "'bert'", ",", "choices", "=", "[", "'glove'", ",", "'bert'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--embedding_dim'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Dimension of glove embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--dep_relation_embed_dim'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Dimension for dependency relation embeddings.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Hidden size of bilstm, in early stage.'", ")", "\n", "parser", ".", "add_argument", "(", "'--final_hidden_size'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Hidden size of bilstm, in early stage.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mlps'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of mlps in the last of model.'", ")", "\n", "\n", "# Training parameters", "\n", "parser", ".", "add_argument", "(", "\"--per_gpu_train_batch_size\"", ",", "default", "=", "16", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Batch size per GPU/CPU for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--per_gpu_eval_batch_size\"", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Batch size per GPU/CPU for evaluation.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_lr\"", ",", "default", "=", "1e-5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Weight deay if we apply some.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_epsilon\"", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Epsilon for Adam optimizer.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Max gradient norm.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "default", "=", "30.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"If > 0: set total number of training steps(that update the weights) to perform. Override num_train_epochs.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--logging_steps'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Log every X updates steps.\"", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.check_args": [[125, 131], ["logger.info", "vars"], "function", ["None"], ["", "def", "check_args", "(", "args", ")", ":", "\n", "    ", "'''\n    eliminate confilct situations\n    \n    '''", "\n", "logger", ".", "info", "(", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.reset_params": [[133, 141], ["model.parameters", "len", "torch.nn.init.xavier_uniform_", "torch.nn.init.uniform_", "math.sqrt"], "function", ["None"], ["", "def", "reset_params", "(", "model", ")", ":", "\n", "        ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "if", "len", "(", "p", ".", "shape", ")", ">", "1", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "p", ".", "shape", "[", "0", "]", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "p", ",", "a", "=", "-", "stdv", ",", "b", "=", "stdv", ")", "\n", "", "", "", "", "def", "main", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.main": [[141, 191], ["logging.basicConfig", "run.parse_args", "run.check_args", "torch.device", "logger.info", "run.set_seed", "datasets.load_datasets_and_vocabs", "model.KaGRMN_DSG", "model.KaGRMN_DSG.to", "trainer.train", "len", "transformers.BertTokenizer.from_pretrained", "max", "max", "logger.info", "logger.info", "open", "torch.cuda.is_available", "str", "str", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.parse_args", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.check_args", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.run.set_seed", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_datasets_and_vocabs", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.trainer.train"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "# Setup logging", "\n", "    ", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s -   %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "# Parse args", "\n", "args", "=", "parse_args", "(", ")", "\n", "check_args", "(", "args", ")", "\n", "args", ".", "pure_bert", "=", "False", "\n", "args", ".", "highway", "=", "False", "\n", "args", ".", "one_bert", "=", "False", "\n", "# Setup CUDA, GPU training", "\n", "\n", "#os.environ[\"CUDA_VISIBLE_DEVICES\"] = args.cuda_id", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:{0}'", ".", "format", "(", "args", ".", "cuda_id", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "args", ".", "device", "=", "device", "\n", "logger", ".", "info", "(", "'Device is %s'", ",", "args", ".", "device", ")", "\n", "\n", "# Set seed", "\n", "set_seed", "(", "args", ")", "\n", "\n", "# Bert, load pretrained model and tokenizer, check if neccesary to put bert here", "\n", "if", "args", ".", "embedding_type", "==", "'bert'", ":", "\n", "        ", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model_dir", ")", "\n", "args", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "# Load datasets and vocabs", "\n", "", "train_dataset", ",", "test_dataset", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", "=", "load_datasets_and_vocabs", "(", "args", ")", "\n", "\n", "# Build Model", "\n", "\n", "model", "=", "KaGRMN_DSG", "(", "args", ",", "dep_tag_vocab", "[", "'len'", "]", ",", "pos_tag_vocab", "[", "'len'", "]", ")", "\n", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Train", "\n", "_", ",", "_", ",", "all_eval_results", "=", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "test_dataset", ")", "\n", "\n", "if", "len", "(", "all_eval_results", ")", ":", "\n", "        ", "best_acc_result", "=", "max", "(", "all_eval_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "'acc'", "]", ")", "\n", "best_f1_result", "=", "max", "(", "all_eval_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "'f1'", "]", ")", "\n", "logger", ".", "info", "(", "\"best  acc = %s\"", ",", "str", "(", "best_acc_result", ")", ")", "\n", "logger", ".", "info", "(", "\"best  f1 = %s\"", ",", "str", "(", "best_f1_result", ")", ")", "\n", "", "with", "open", "(", "'performance52/'", "+", "args", ".", "dataset_name", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "if", "'rest'", "in", "args", ".", "dataset_name", ":", "\n", "            ", "if", "best_acc_result", "[", "'acc'", "]", ">", "0.85", "or", "best_f1_result", "[", "'f1'", "]", ">", "0.78", ":", "\n", "                ", "f", ".", "write", "(", "'acc: {0}, epoch: {1}; f1: {2}, epoch: {3}. bert_lr: {4}, learning_rate: {5}, weight_decay: {6}, self_head_num: {7}, rel_head_num: {8}, stack_num: {9}, seed: {10}, batch size: {11}, dropout: {12} \\n'", ".", "format", "(", "best_acc_result", "[", "'acc'", "]", ",", "best_acc_result", "[", "'epoch'", "]", ",", "best_f1_result", "[", "'f1'", "]", ",", "best_f1_result", "[", "'epoch'", "]", ",", "args", ".", "bert_lr", ",", "args", ".", "learning_rate", ",", "args", ".", "weight_decay", ",", "args", ".", "self_num_heads", ",", "args", ".", "rel_num_heads", ",", "args", ".", "stack_num", ",", "args", ".", "seed", ",", "args", ".", "per_gpu_train_batch_size", ",", "args", ".", "dropout", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "f", ".", "write", "(", "'acc: {0}, epoch: {1}; f1: {2}, epoch: {3}. bert_lr: {4}, learning_rate: {5}, weight_decay: {6}, self_head_num: {7}, rel_head_num: {8}, stack_num: {9}, seed: {10}, batch size: {11}, dropout: {12} \\n'", ".", "format", "(", "best_acc_result", "[", "'acc'", "]", ",", "best_acc_result", "[", "'epoch'", "]", ",", "best_f1_result", "[", "'f1'", "]", ",", "best_f1_result", "[", "'epoch'", "]", ",", "args", ".", "bert_lr", ",", "args", ".", "learning_rate", ",", "args", ".", "weight_decay", ",", "args", ".", "self_num_heads", ",", "args", ".", "rel_num_heads", ",", "args", ".", "stack_num", ",", "args", ".", "seed", ",", "args", ".", "per_gpu_train_batch_size", ",", "args", ".", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.__init__": [[450, 458], ["datasets.ASBA_Depparsed_Dataset.convert_features"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.convert_features"], ["def", "__init__", "(", "self", ",", "data", ",", "args", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "word_vocab", "=", "word_vocab", "\n", "self", ".", "dep_tag_vocab", "=", "dep_tag_vocab", "\n", "self", ".", "pos_tag_vocab", "=", "pos_tag_vocab", "\n", "\n", "self", ".", "convert_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.__len__": [[459, 461], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.__getitem__": [[462, 488], ["tuple", "tuple", "torch.tensor", "tuple", "tuple", "tuple", "tuple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "e", "=", "self", ".", "data", "[", "idx", "]", "\n", "items", "=", "e", "[", "'dep_tag_ids'", "]", ",", "e", "[", "'pos_class'", "]", ",", "e", "[", "'text_len'", "]", ",", "e", "[", "'aspect_len'", "]", ",", "e", "[", "'des_len'", "]", ",", "e", "[", "'sentiment'", "]", ",", "e", "[", "'dep_rel_ids'", "]", ",", "e", "[", "'predicted_heads'", "]", ",", "e", "[", "'aspect_position'", "]", ",", "e", "[", "'dep_dir_ids'", "]", ",", "e", "[", "'aspect_start'", "]", ",", "e", "[", "'sparse_graph'", "]", "\n", "if", "self", ".", "args", ".", "embedding_type", "==", "'glove'", ":", "\n", "            ", "non_bert_items", "=", "e", "[", "'sentence_ids'", "]", ",", "e", "[", "'aspect_ids'", "]", "\n", "items_tensor", "=", "non_bert_items", "+", "items", "\n", "items_tensor", "=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "items_tensor", ")", "\n", "", "elif", "self", ".", "args", ".", "embedding_type", "==", "'elmo'", ":", "\n", "            ", "items_tensor", "=", "e", "[", "'sentence_ids'", "]", ",", "e", "[", "'aspect_ids'", "]", "\n", "items_tensor", "+=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "items", ")", "\n", "", "else", ":", "# bert", "\n", "            ", "if", "self", ".", "args", ".", "pure_bert", ":", "\n", "                ", "bert_items", "=", "e", "[", "'input_cat_ids'", "]", ",", "e", "[", "'segment_ids'", "]", "\n", "items_tensor", "=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "bert_items", ")", "\n", "items_tensor", "+=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "items", ")", "\n", "", "else", ":", "\n", "                ", "bert_items", "=", "e", "[", "'input_ids'", "]", ",", "e", "[", "'word_indexer'", "]", ",", "e", "[", "'w_idx'", "]", ",", "e", "[", "'input_aspect_ids'", "]", ",", "e", "[", "'aspect_indexer'", "]", ",", "e", "[", "'input_cat_ids'", "]", ",", "e", "[", "'segment_ids'", "]", ",", "e", "[", "'input_des_ids'", "]", ",", "e", "[", "'des_indexer'", "]", "\n", "# segment_id", "\n", "items_tensor", "=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "bert_items", ")", "\n", "items_tensor", "+=", "tuple", "(", "torch", ".", "tensor", "(", "t", ")", "for", "t", "in", "items", ")", "\n", "", "", "return", "items_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.convert_features_bert": [[489, 573], ["datasets.ASBA_Depparsed_Dataset.args.tokenizer.convert_tokens_to_ids", "datasets.ASBA_Depparsed_Dataset.args.tokenizer.convert_tokens_to_ids", "datasets.ASBA_Depparsed_Dataset.args.tokenizer.convert_tokens_to_ids", "datasets.ASBA_Depparsed_Dataset.args.tokenizer.tokenize", "len", "tokens.extend", "word_indexer.append", "datasets.ASBA_Depparsed_Dataset.args.tokenizer.tokenize", "len", "aspect_tokens.extend", "aspect_indexer.append", "datasets.ASBA_Depparsed_Dataset.args.tokenizer.tokenize", "len", "des_tokens.extend", "des_indexer.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "convert_features_bert", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        BERT features.\n        convert sentence to feature. \n        \"\"\"", "\n", "cls_token", "=", "\"[CLS]\"", "\n", "sep_token", "=", "\"[SEP]\"", "\n", "pad_token", "=", "0", "\n", "# tokenizer = self.args.tokenizer", "\n", "aspect_start", "=", "self", ".", "data", "[", "i", "]", "[", "'aspect_start'", "]", "\n", "aspect_len", "=", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", "\n", "tokens", "=", "[", "]", "\n", "word_indexer", "=", "[", "]", "\n", "aspect_tokens", "=", "[", "]", "\n", "aspect_indexer", "=", "[", "]", "\n", "des_tokens", "=", "[", "]", "\n", "des_indexer", "=", "[", "]", "\n", "\n", "# review", "\n", "for", "word", "in", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", ":", "\n", "            ", "word_tokens", "=", "self", ".", "args", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "token_idx", "=", "len", "(", "tokens", ")", "\n", "tokens", ".", "extend", "(", "word_tokens", ")", "\n", "\n", "word_indexer", ".", "append", "(", "token_idx", ")", "\n", "\n", "# aspect", "\n", "", "for", "word", "in", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", ":", "\n", "            ", "word_aspect_tokens", "=", "self", ".", "args", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "token_idx", "=", "len", "(", "aspect_tokens", ")", "\n", "aspect_tokens", ".", "extend", "(", "word_aspect_tokens", ")", "\n", "aspect_indexer", ".", "append", "(", "token_idx", ")", "\n", "\n", "# description", "\n", "#print(self.data[i]['asp_des'])", "\n", "", "for", "word", "in", "self", ".", "data", "[", "i", "]", "[", "'asp_des'", "]", ":", "\n", "            ", "word_des_tokens", "=", "self", ".", "args", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "token_idx", "=", "len", "(", "des_tokens", ")", "\n", "des_tokens", ".", "extend", "(", "word_des_tokens", ")", "\n", "\n", "des_indexer", ".", "append", "(", "token_idx", ")", "\n", "\n", "", "w_idx", "=", "word_indexer", "[", ":", "aspect_start", "]", "+", "word_indexer", "[", "aspect_start", "+", "aspect_len", "-", "1", ":", "]", "\n", "\n", "\n", "tokens", "=", "[", "cls_token", "]", "+", "tokens", "+", "[", "sep_token", "]", "\n", "aspect_tokens", "=", "[", "cls_token", "]", "+", "aspect_tokens", "+", "[", "sep_token", "]", "\n", "des_tokens", "=", "[", "cls_token", "]", "+", "des_tokens", "+", "[", "sep_token", "]", "\n", "\n", "word_indexer", "=", "[", "i", "+", "1", "for", "i", "in", "word_indexer", "]", "\n", "aspect_indexer", "=", "[", "i", "+", "1", "for", "i", "in", "aspect_indexer", "]", "\n", "des_indexer", "=", "[", "i", "+", "1", "for", "i", "in", "des_indexer", "]", "\n", "#print(des_indexer)", "\n", "\n", "input_ids", "=", "self", ".", "args", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_aspect_ids", "=", "self", ".", "args", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "aspect_tokens", ")", "\n", "input_des_ids", "=", "self", ".", "args", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "des_tokens", ")", "\n", "\n", "# check len of word_indexer equals to len of sentence.", "\n", "assert", "len", "(", "word_indexer", ")", "==", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", ")", "\n", "assert", "len", "(", "aspect_indexer", ")", "==", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", ")", "\n", "assert", "len", "(", "des_indexer", ")", "==", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'asp_des'", "]", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "args", ".", "pure_bert", ":", "\n", "            ", "input_cat_ids", "=", "input_ids", "+", "input_aspect_ids", "[", "1", ":", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "+", "[", "1", "]", "*", "len", "(", "input_aspect_ids", "[", "1", ":", "]", ")", "\n", "\n", "self", ".", "data", "[", "i", "]", "[", "'input_cat_ids'", "]", "=", "input_cat_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'segment_ids'", "]", "=", "segment_ids", "\n", "", "else", ":", "\n", "            ", "input_cat_ids", "=", "input_ids", "+", "input_aspect_ids", "[", "1", ":", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "+", "[", "1", "]", "*", "len", "(", "input_aspect_ids", "[", "1", ":", "]", ")", "\n", "\n", "self", ".", "data", "[", "i", "]", "[", "'input_cat_ids'", "]", "=", "input_cat_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'segment_ids'", "]", "=", "segment_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'input_ids'", "]", "=", "input_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'word_indexer'", "]", "=", "word_indexer", "\n", "self", ".", "data", "[", "i", "]", "[", "'input_aspect_ids'", "]", "=", "input_aspect_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'aspect_indexer'", "]", "=", "aspect_indexer", "\n", "self", ".", "data", "[", "i", "]", "[", "'input_des_ids'", "]", "=", "input_des_ids", "\n", "self", ".", "data", "[", "i", "]", "[", "'des_indexer'", "]", "=", "des_indexer", "\n", "self", ".", "data", "[", "i", "]", "[", "'w_idx'", "]", "=", "w_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.convert_features": [[574, 622], ["range", "len", "len", "len", "len", "range", "len", "len", "len", "datasets.ASBA_Depparsed_Dataset.convert_features_bert", "[].index"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.ASBA_Depparsed_Dataset.convert_features_bert"], ["", "", "def", "convert_features", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "aspect_start", "=", "self", ".", "data", "[", "i", "]", "[", "'aspect_start'", "]", "\n", "aspect_len", "=", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", "\n", "if", "self", ".", "args", ".", "embedding_type", "==", "'glove'", ":", "\n", "                ", "self", ".", "data", "[", "i", "]", "[", "'sentence_ids'", "]", "=", "[", "self", ".", "word_vocab", "[", "'stoi'", "]", "[", "w", "]", "\n", "for", "w", "in", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", "]", "\n", "self", ".", "data", "[", "i", "]", "[", "'aspect_ids'", "]", "=", "[", "self", ".", "word_vocab", "[", "'stoi'", "]", "[", "w", "]", "\n", "for", "w", "in", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", "]", "\n", "", "elif", "self", ".", "args", ".", "embedding_type", "==", "'elmo'", ":", "\n", "                ", "self", ".", "data", "[", "i", "]", "[", "'sentence_ids'", "]", "=", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", "\n", "self", ".", "data", "[", "i", "]", "[", "'aspect_ids'", "]", "=", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", "\n", "", "else", ":", "# self.args.embedding_type == 'bert'", "\n", "                ", "self", ".", "convert_features_bert", "(", "i", ")", "\n", "\n", "", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", "=", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", ")", "\n", "self", ".", "data", "[", "i", "]", "[", "'des_len'", "]", "=", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'asp_des'", "]", ")", "\n", "self", ".", "data", "[", "i", "]", "[", "'aspect_position'", "]", "=", "[", "0", "]", "*", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", "\n", "try", ":", "# find the index of aspect in sentence", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "data", "[", "i", "]", "[", "'aspect_start'", "]", ",", "self", ".", "data", "[", "i", "]", "[", "'to'", "]", ")", ":", "\n", "                    ", "self", ".", "data", "[", "i", "]", "[", "'aspect_position'", "]", "[", "j", "]", "=", "1", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "#print(e)", "\n", "                ", "for", "term", "in", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", ":", "\n", "#    print(121,self.data[i]['aspect'])", "\n", "                    ", "self", ".", "data", "[", "i", "]", "[", "'aspect_position'", "]", "[", "self", ".", "data", "[", "i", "]", "[", "'sentence'", "]", ".", "index", "(", "term", ")", "]", "=", "1", "\n", "#assert 1==0", "\n", "\n", "", "", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", "=", "[", "self", ".", "dep_tag_vocab", "[", "'stoi'", "]", "[", "w", "]", "\n", "for", "w", "in", "self", ".", "data", "[", "i", "]", "[", "'dep_tag'", "]", "]", "\n", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", "=", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", "[", ":", "aspect_start", "]", "+", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", "[", "aspect_start", "+", "aspect_len", "-", "1", ":", "]", "\n", "assert", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", ")", "==", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", "-", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", "+", "1", ",", "'{0}, {1}'", ".", "format", "(", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", ",", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", ")", "\n", "assert", "self", ".", "data", "[", "i", "]", "[", "'sparse_graph'", "]", ".", "shape", "[", "0", "]", "==", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", "-", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", "+", "1", ",", "'{0}, {1}, {2}'", ".", "format", "(", "self", ".", "data", "[", "i", "]", "[", "'text_len'", "]", ",", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", ",", "self", ".", "data", "[", "i", "]", "[", "'sparse_graph'", "]", ".", "shape", "[", "0", "]", ")", "\n", "assert", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", ")", "==", "self", ".", "data", "[", "i", "]", "[", "'sparse_graph'", "]", ".", "shape", "[", "0", "]", ",", "'{0}, {1}'", ".", "format", "(", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'dep_tag_ids'", "]", ")", ",", "self", ".", "data", "[", "i", "]", "[", "'sparse_graph'", "]", ".", "shape", ")", "\n", "self", ".", "data", "[", "i", "]", "[", "'dep_dir_ids'", "]", "=", "[", "idx", "\n", "for", "idx", "in", "self", ".", "data", "[", "i", "]", "[", "'dep_dir'", "]", "]", "\n", "self", ".", "data", "[", "i", "]", "[", "'pos_class'", "]", "=", "[", "self", ".", "pos_tag_vocab", "[", "'stoi'", "]", "[", "w", "]", "\n", "for", "w", "in", "self", ".", "data", "[", "i", "]", "[", "'tags'", "]", "]", "\n", "self", ".", "data", "[", "i", "]", "[", "'aspect_len'", "]", "=", "len", "(", "self", ".", "data", "[", "i", "]", "[", "'aspect'", "]", ")", "\n", "\n", "\n", "#self.data[i]['aspect_start'] = self.data[i]['from']", "\n", "\n", "self", ".", "data", "[", "i", "]", "[", "'dep_rel_ids'", "]", "=", "[", "self", ".", "dep_tag_vocab", "[", "'stoi'", "]", "[", "r", "]", "\n", "for", "r", "in", "self", ".", "data", "[", "i", "]", "[", "'predicted_dependencies'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_datasets_and_vocabs": [[27, 51], ["datasets.get_dataset", "datasets.get_arranged_data", "datasets.get_arranged_data", "logger.info", "logger.info", "logger.info", "datasets.load_and_cache_vocabs", "datasets.ASBA_Depparsed_Dataset", "datasets.ASBA_Depparsed_Dataset", "len", "len", "torch.from_numpy", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.get_dataset", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.get_arranged_data", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.get_arranged_data", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_and_cache_vocabs"], ["def", "load_datasets_and_vocabs", "(", "args", ")", ":", "\n", "    ", "train", ",", "train_graph", ",", "test", ",", "test_graph", "=", "get_dataset", "(", "args", ".", "dataset_name", ")", "\n", "\n", "# Our model takes unrolled data, currently we don't consider the MAMS cases(future experiments)", "\n", "train_samples", "=", "get_arranged_data", "(", "train", ",", "train_graph", ",", "args", ")", "\n", "test_samples", "=", "get_arranged_data", "(", "test", ",", "test_graph", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "'****** After unrolling ******'", ")", "\n", "logger", ".", "info", "(", "'Train set size: %s'", ",", "len", "(", "train_samples", ")", ")", "\n", "logger", ".", "info", "(", "'Test set size: %s,'", ",", "len", "(", "test_samples", ")", ")", "\n", "\n", "# Build word vocabulary(part of speech, dep_tag) and save pickles.", "\n", "word_vecs", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", "=", "load_and_cache_vocabs", "(", "\n", "train_samples", "+", "test_samples", ",", "args", ")", "\n", "if", "args", ".", "embedding_type", "==", "'glove'", ":", "\n", "        ", "embedding", "=", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "word_vecs", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "args", ".", "glove_embedding", "=", "embedding", "\n", "\n", "", "train_dataset", "=", "ASBA_Depparsed_Dataset", "(", "\n", "train_samples", ",", "args", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", ")", "\n", "test_dataset", "=", "ASBA_Depparsed_Dataset", "(", "\n", "test_samples", ",", "args", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sentence_depparsed": [[53, 57], ["open", "json.load", "simplejson.load"], "function", ["None"], ["", "def", "read_sentence_depparsed", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sparse_depgraph": [[58, 63], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "", "def", "read_sparse_depgraph", "(", "file_path", ")", ":", "\n", "    ", "f", "=", "open", "(", "file_path", ",", "'rb'", ")", "\n", "idx2graph", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "idx2graph", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.get_dataset": [[64, 88], ["list", "datasets.read_sparse_depgraph", "logger.info", "list", "datasets.read_sparse_depgraph", "logger.info", "datasets.read_sentence_depparsed", "len", "datasets.read_sentence_depparsed", "len"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sparse_depgraph", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sparse_depgraph", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sentence_depparsed", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.read_sentence_depparsed"], ["", "def", "get_dataset", "(", "dataset_name", ")", ":", "\n", "\n", "    ", "rest_train", "=", "'data/semeval14/restaurant_train'", "\n", "rest_test", "=", "'data/semeval14/restaurant_test'", "\n", "\n", "laptop_train", "=", "'data/semeval14/laptop_train'", "\n", "laptop_test", "=", "'data/semeval14/laptop_test'", "\n", "\n", "res15_train", "=", "'data/semeval15/train'", "\n", "res15_test", "=", "'data/semeval15/test'", "\n", "\n", "ds_train", "=", "{", "'rest'", ":", "rest_train", ",", "\n", "'laptop'", ":", "laptop_train", ",", "'res15'", ":", "res15_train", "}", "\n", "ds_test", "=", "{", "'rest'", ":", "rest_test", ",", "\n", "'laptop'", ":", "laptop_test", ",", "'res15'", ":", "res15_test", "}", "\n", "\n", "train", "=", "list", "(", "read_sentence_depparsed", "(", "ds_train", "[", "dataset_name", "]", "+", "'_biaffine_depparsed_des.json'", ")", ")", "\n", "train_graph", "=", "read_sparse_depgraph", "(", "ds_train", "[", "dataset_name", "]", "+", "'.graph'", ")", "\n", "logger", ".", "info", "(", "'# Read %s Train set: %d'", ",", "dataset_name", ",", "len", "(", "train", ")", ")", "\n", "\n", "test", "=", "list", "(", "read_sentence_depparsed", "(", "ds_test", "[", "dataset_name", "]", "+", "'_biaffine_depparsed_des.json'", ")", ")", "\n", "test_graph", "=", "read_sparse_depgraph", "(", "ds_test", "[", "dataset_name", "]", "+", "'.graph'", ")", "\n", "logger", ".", "info", "(", "\"# Read %s Test set: %d\"", ",", "dataset_name", ",", "len", "(", "test", ")", ")", "\n", "return", "train", ",", "train_graph", ",", "test", ",", "test_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.reshape_dense_dependency_tree": [[90, 174], ["range", "enumerate", "enumerate", "len", "len", "copy.deepcopy", "dep_tag.append", "dep_dir.append", "dep_idx.append", "sorted", "len", "len", "dep_tag.append", "dep_dir.append", "dep_idx.append", "enumerate", "dep_idx.append", "str", "dep_tag.append", "dep_dir.append", "dep_tag.append", "dep_dir.append", "dep_idx.append", "str", "dep_tag.append", "dep_dir.append", "dep_tag.append", "dep_dir.append", "dep_idx.append", "str", "dep_tag.append", "dep_dir.append", "dep_tag.append", "dep_dir.append", "dep_idx.append", "str", "dep_tag.append", "dep_dir.append", "dep_tag.append", "dep_dir.append", "str", "str"], "function", ["None"], ["", "def", "reshape_dense_dependency_tree", "(", "as_start", ",", "as_end", ",", "dependencies", ",", "multi_hop", "=", "False", ",", "add_non_connect", "=", "False", ",", "tokens", "=", "None", ",", "max_hop", "=", "5", ")", ":", "\n", "\n", "    ", "dep_tag", "=", "[", "]", "\n", "dep_idx", "=", "[", "]", "\n", "dep_dir", "=", "[", "]", "\n", "# 1 hop", "\n", "\n", "for", "i", "in", "range", "(", "as_start", ",", "as_end", ")", ":", "\n", "        ", "for", "dep", "in", "dependencies", ":", "\n", "            ", "if", "i", "==", "dep", "[", "1", "]", "-", "1", ":", "\n", "# not root, not aspect", "\n", "                ", "if", "(", "dep", "[", "2", "]", "-", "1", "<", "as_start", "or", "dep", "[", "2", "]", "-", "1", ">=", "as_end", ")", "and", "dep", "[", "2", "]", "!=", "0", "and", "dep", "[", "2", "]", "-", "1", "not", "in", "dep_idx", ":", "\n", "                    ", "if", "str", "(", "dep", "[", "0", "]", ")", "!=", "'punct'", ":", "# and tokens[dep[2] - 1] not in stopWords", "\n", "                        ", "dep_tag", ".", "append", "(", "dep", "[", "0", "]", ")", "\n", "dep_dir", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "dep_tag", ".", "append", "(", "'<pad>'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "", "dep_idx", ".", "append", "(", "dep", "[", "2", "]", "-", "1", ")", "\n", "", "", "elif", "i", "==", "dep", "[", "2", "]", "-", "1", ":", "\n", "# not root, not aspect", "\n", "                ", "if", "(", "dep", "[", "1", "]", "-", "1", "<", "as_start", "or", "dep", "[", "1", "]", "-", "1", ">=", "as_end", ")", "and", "dep", "[", "1", "]", "!=", "0", "and", "dep", "[", "1", "]", "-", "1", "not", "in", "dep_idx", ":", "\n", "                    ", "if", "str", "(", "dep", "[", "0", "]", ")", "!=", "'punct'", ":", "# and tokens[dep[1] - 1] not in stopWords", "\n", "                        ", "dep_tag", ".", "append", "(", "dep", "[", "0", "]", ")", "\n", "dep_dir", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "                        ", "dep_tag", ".", "append", "(", "'<pad>'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "", "dep_idx", ".", "append", "(", "dep", "[", "1", "]", "-", "1", ")", "\n", "\n", "", "", "", "", "if", "multi_hop", ":", "\n", "        ", "current_hop", "=", "2", "\n", "added", "=", "True", "\n", "while", "current_hop", "<=", "max_hop", "and", "len", "(", "dep_idx", ")", "<", "len", "(", "tokens", ")", "and", "added", ":", "\n", "            ", "added", "=", "False", "\n", "dep_idx_temp", "=", "deepcopy", "(", "dep_idx", ")", "\n", "for", "i", "in", "dep_idx_temp", ":", "\n", "                ", "for", "dep", "in", "dependencies", ":", "\n", "                    ", "if", "i", "==", "dep", "[", "1", "]", "-", "1", ":", "\n", "# not root, not aspect", "\n", "                        ", "if", "(", "dep", "[", "2", "]", "-", "1", "<", "as_start", "or", "dep", "[", "2", "]", "-", "1", ">=", "as_end", ")", "and", "dep", "[", "2", "]", "!=", "0", "and", "dep", "[", "2", "]", "-", "1", "not", "in", "dep_idx", ":", "\n", "                            ", "if", "str", "(", "dep", "[", "0", "]", ")", "!=", "'punct'", ":", "# and tokens[dep[2] - 1] not in stopWords", "\n", "                                ", "dep_tag", ".", "append", "(", "'ncon_'", "+", "str", "(", "current_hop", ")", ")", "\n", "dep_dir", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "dep_tag", ".", "append", "(", "'<pad>'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "", "dep_idx", ".", "append", "(", "dep", "[", "2", "]", "-", "1", ")", "\n", "added", "=", "True", "\n", "", "", "elif", "i", "==", "dep", "[", "2", "]", "-", "1", ":", "\n", "# not root, not aspect", "\n", "                        ", "if", "(", "dep", "[", "1", "]", "-", "1", "<", "as_start", "or", "dep", "[", "1", "]", "-", "1", ">=", "as_end", ")", "and", "dep", "[", "1", "]", "!=", "0", "and", "dep", "[", "1", "]", "-", "1", "not", "in", "dep_idx", ":", "\n", "                            ", "if", "str", "(", "dep", "[", "0", "]", ")", "!=", "'punct'", ":", "# and tokens[dep[1] - 1] not in stopWords", "\n", "                                ", "dep_tag", ".", "append", "(", "'ncon_'", "+", "str", "(", "current_hop", ")", ")", "\n", "dep_dir", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "                                ", "dep_tag", ".", "append", "(", "'<pad>'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "", "dep_idx", ".", "append", "(", "dep", "[", "1", "]", "-", "1", ")", "\n", "added", "=", "True", "\n", "", "", "", "", "current_hop", "+=", "1", "\n", "\n", "", "", "if", "add_non_connect", ":", "\n", "        ", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "if", "idx", "not", "in", "dep_idx", "and", "(", "idx", "<", "as_start", "or", "idx", ">=", "as_end", ")", ":", "\n", "                ", "dep_tag", ".", "append", "(", "'non-connect'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "dep_idx", ".", "append", "(", "idx", ")", "\n", "\n", "# add aspect and index, to make sure length matches len(tokens)", "\n", "", "", "", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "if", "idx", "not", "in", "dep_idx", ":", "\n", "            ", "dep_tag", ".", "append", "(", "'<pad>'", ")", "\n", "dep_dir", ".", "append", "(", "0", ")", "\n", "dep_idx", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "index", "=", "[", "i", "[", "0", "]", "for", "i", "in", "sorted", "(", "enumerate", "(", "dep_idx", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "]", "\n", "dep_tag", "=", "[", "dep_tag", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "dep_idx", "=", "[", "dep_idx", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "dep_dir", "=", "[", "dep_dir", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "\n", "assert", "len", "(", "tokens", ")", "==", "len", "(", "dep_idx", ")", ",", "'length wrong'", "\n", "\n", "return", "dep_tag", ",", "dep_idx", ",", "dep_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.reshape_sparse_dep_graph": [[175, 192], ["range", "numpy.delete", "numpy.delete", "d_idx.append"], "function", ["None"], ["", "def", "reshape_sparse_dep_graph", "(", "as_start", ",", "as_end", ",", "graph", ")", ":", "\n", "\n", "    ", "if", "as_end", "==", "as_start", "+", "1", ":", "\n", "        ", "return", "graph", "\n", "", "d_idx", "=", "[", "]", "\n", "length", "=", "graph", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "as_start", "+", "1", ",", "as_end", ")", ":", "\n", "        ", "graph", "[", ":", ",", "as_start", "]", "=", "graph", "[", ":", ",", "as_start", "]", "+", "graph", "[", ":", ",", "i", "]", "\n", "graph", "[", "as_start", ",", ":", "]", "=", "graph", "[", "as_start", ",", ":", "]", "+", "graph", "[", "i", ",", ":", "]", "\n", "d_idx", ".", "append", "(", "i", ")", "\n", "\n", "", "graph", "=", "np", ".", "delete", "(", "graph", ",", "d_idx", ",", "axis", "=", "0", ")", "\n", "graph", "=", "np", ".", "delete", "(", "graph", ",", "d_idx", ",", "axis", "=", "1", ")", "\n", "graph", "[", "graph", ">", "1", "]", "=", "1", "\n", "length2", "=", "graph", ".", "shape", "[", "0", "]", "\n", "assert", "length", "==", "length2", "-", "1", "+", "as_end", "-", "as_start", ",", "' here it is'", "+", "'{0}, {1}, {2}'", ".", "format", "(", "d_idx", ",", "as_start", ",", "as_end", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.get_arranged_data": [[193, 260], ["collections.defaultdict", "collections.defaultdict", "logger.info", "logger.info", "nltk.word_tokenize", "nltk.word_tokenize", "datasets.reshape_dense_dependency_tree", "datasets.reshape_sparse_dep_graph", "processed_samples.append", "x.lower", "nltk.word_tokenize.lower", "len", "len", "[].split", "e[].index", "print", "reshape_dependency_tree_new", "len", "print", "e[].index", "len", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.reshape_dense_dependency_tree", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.reshape_sparse_dep_graph"], ["", "def", "get_arranged_data", "(", "input_data", ",", "graph", ",", "args", ")", ":", "\n", "\n", "    ", "opinionated_tags", "=", "[", "'JJ'", ",", "'JJR'", ",", "'JJS'", ",", "'RB'", ",", "'RBR'", ",", "\n", "'RBS'", ",", "'VB'", ",", "'VBD'", ",", "'VBG'", ",", "'VBN'", ",", "'VBP'", ",", "'VBZ'", "]", "\n", "processed_samples", "=", "[", "]", "\n", "\n", "\n", "# Make sure the tree is successfully built.", "\n", "zero_dep_counter", "=", "0", "\n", "\n", "# Sentiment counters", "\n", "total_counter", "=", "defaultdict", "(", "int", ")", "\n", "mixed_counter", "=", "defaultdict", "(", "int", ")", "\n", "\n", "logger", ".", "info", "(", "'*** Start sparse dependency graph and dense dependency tree reshaping) ***'", ")", "\n", "tree_samples", "=", "[", "]", "\n", "idx", "=", "0", "\n", "# for seeking 'but' examples", "\n", "for", "e", "in", "input_data", ":", "\n", "        ", "e", "[", "'tokens'", "]", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "e", "[", "'tokens'", "]", "]", "\n", "\n", "\n", "pos_class", "=", "e", "[", "'tags'", "]", "\n", "\n", "# Iterate through aspects in a sentence and reshape the dependency tree.", "\n", "description", "=", "e", "[", "'asp_des'", "]", "\n", "description", "=", "word_tokenize", "(", "description", ".", "lower", "(", ")", ")", "\n", "aspect", "=", "word_tokenize", "(", "e", "[", "'aspect'", "]", ")", "\n", "frm", "=", "e", "[", "'asp_position'", "]", "\n", "to", "=", "e", "[", "'asp_position'", "]", "+", "e", "[", "'aspect_len'", "]", "\n", "\n", "#print('aspect:{0}'.format(aspect))", "\n", "# Center on the aspect.", "\n", "dep_tag", ",", "dep_idx", ",", "dep_dir", "=", "reshape_dense_dependency_tree", "(", "frm", ",", "to", ",", "e", "[", "'dependencies'", "]", ",", "\n", "multi_hop", "=", "args", ".", "multi_hop", ",", "add_non_connect", "=", "args", ".", "add_non_connect", ",", "tokens", "=", "e", "[", "'tokens'", "]", ",", "max_hop", "=", "args", ".", "max_hop", ")", "\n", "#try:", "\n", "assert", "graph", "[", "idx", "]", ".", "shape", "[", "0", "]", "==", "len", "(", "e", "[", "'tokens'", "]", ")", "\n", "sparse_graph", "=", "reshape_sparse_dep_graph", "(", "frm", ",", "to", ",", "graph", "[", "idx", "]", ")", "\n", "\n", "if", "len", "(", "dep_tag", ")", "==", "0", ":", "\n", "            ", "zero_dep_counter", "+=", "1", "\n", "as_sent", "=", "e", "[", "'aspect_sentiment'", "]", "[", "i", "]", "[", "0", "]", ".", "split", "(", ")", "\n", "as_start", "=", "e", "[", "'tokens'", "]", ".", "index", "(", "as_sent", "[", "0", "]", ")", "\n", "# print(e['tokens'], e['aspect_sentiment'], e['dependencies'],as_sent[0])", "\n", "as_end", "=", "e", "[", "'tokens'", "]", ".", "index", "(", "\n", "as_sent", "[", "-", "1", "]", ")", "if", "len", "(", "as_sent", ")", ">", "1", "else", "as_start", "+", "1", "\n", "print", "(", "\"Debugging: as_start as_end \"", ",", "as_start", ",", "as_end", ")", "\n", "dep_tag", ",", "dep_idx", ",", "dep_dir", "=", "reshape_dependency_tree_new", "(", "as_start", ",", "as_end", ",", "e", "[", "'dependencies'", "]", ",", "\n", "multi_hop", "=", "args", ".", "multi_hop", ",", "add_non_connect", "=", "args", ".", "add_non_connect", ",", "tokens", "=", "e", "[", "'tokens'", "]", ",", "max_hop", "=", "args", ".", "max_hop", ")", "\n", "if", "len", "(", "dep_tag", ")", "==", "0", ":", "# for debugging", "\n", "                ", "print", "(", "\"Debugging: zero_dep\"", ",", "\n", "e", "[", "'aspect_sentiment'", "]", "[", "i", "]", "[", "0", "]", ",", "e", "[", "'tokens'", "]", ")", "\n", "print", "(", "\"Debugging: \"", ".", "e", "[", "'dependencies'", "]", ")", "\n", "", "else", ":", "\n", "                ", "zero_dep_counter", "-=", "1", "\n", "", "", "idx", "=", "idx", "+", "1", "\n", "if", "len", "(", "e", "[", "'tokens'", "]", ")", "<", "to", ":", "\n", "            ", "print", "(", "e", "[", "'tokens'", "]", ",", "aspect", ",", "frm", ",", "to", ")", "\n", "assert", "1", "==", "0", ",", "'context too short'", "\n", "", "processed_samples", ".", "append", "(", "\n", "{", "'sentence'", ":", "e", "[", "'tokens'", "]", ",", "'tags'", ":", "e", "[", "'tags'", "]", ",", "'pos_class'", ":", "pos_class", ",", "'aspect'", ":", "aspect", ",", "'aspect_len'", ":", "e", "[", "'aspect_len'", "]", ",", "'asp_des'", ":", "description", ",", "'sentiment'", ":", "e", "[", "'polarity'", "]", ",", "\n", "'predicted_dependencies'", ":", "e", "[", "'predicted_dependencies'", "]", ",", "'predicted_heads'", ":", "e", "[", "'predicted_heads'", "]", ",", "\n", "'aspect_start'", ":", "frm", "+", "1", ",", "'to'", ":", "to", ",", "'dep_tag'", ":", "dep_tag", ",", "'dep_idx'", ":", "dep_idx", ",", "'dep_dir'", ":", "dep_dir", ",", "'dependencies'", ":", "e", "[", "'dependencies'", "]", ",", "'sparse_graph'", ":", "sparse_graph", "}", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Dependency tree reshaping done!\\n'", ")", "\n", "\n", "return", "processed_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_and_cache_vocabs": [[262, 339], ["os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "logger.info", "logger.info", "datasets.build_dep_tag_vocab", "logger.info", "logger.info", "logger.info", "datasets.build_pos_tag_vocab", "logger.info", "logger.info", "logger.info", "datasets.build_text_vocab", "logger.info", "logging.info", "logger.info", "logger.info", "datasets.load_glove_embedding", "logger.info", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_dep_tag_vocab", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_pos_tag_vocab", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_text_vocab", "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_glove_embedding"], ["", "def", "load_and_cache_vocabs", "(", "data", ",", "args", ")", ":", "\n", "    ", "'''\n    Build vocabulary of words, part of speech tags, dependency tags and cache them.\n    Load glove embedding if needed.\n    '''", "\n", "pkls_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'pkls'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pkls_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pkls_path", ")", "\n", "\n", "# Build or load word vocab and glove embeddings.", "\n", "# Elmo and bert have it's own vocab and embeddings.", "\n", "", "if", "args", ".", "embedding_type", "==", "'glove'", ":", "\n", "        ", "cached_word_vocab_file", "=", "os", ".", "path", ".", "join", "(", "\n", "pkls_path", ",", "'cached_{}_{}_word_vocab.pkl'", ".", "format", "(", "args", ".", "dataset_name", ",", "args", ".", "embedding_type", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_word_vocab_file", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading word vocab from %s'", ",", "cached_word_vocab_file", ")", "\n", "with", "open", "(", "cached_word_vocab_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "word_vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Creating word vocab from dataset %s'", ",", "\n", "args", ".", "dataset_name", ")", "\n", "word_vocab", "=", "build_text_vocab", "(", "data", ")", "\n", "logger", ".", "info", "(", "'Word vocab size: %s'", ",", "word_vocab", "[", "'len'", "]", ")", "\n", "logging", ".", "info", "(", "'Saving word vocab to %s'", ",", "cached_word_vocab_file", ")", "\n", "with", "open", "(", "cached_word_vocab_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "word_vocab", ",", "f", ",", "-", "1", ")", "\n", "\n", "", "", "cached_word_vecs_file", "=", "os", ".", "path", ".", "join", "(", "pkls_path", ",", "'cached_{}_{}_word_vecs.pkl'", ".", "format", "(", "\n", "args", ".", "dataset_name", ",", "args", ".", "embedding_type", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_word_vecs_file", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading word vecs from %s'", ",", "cached_word_vecs_file", ")", "\n", "with", "open", "(", "cached_word_vecs_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "word_vecs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Creating word vecs from %s'", ",", "args", ".", "glove_dir", ")", "\n", "word_vecs", "=", "load_glove_embedding", "(", "\n", "word_vocab", "[", "'itos'", "]", ",", "args", ".", "glove_dir", ",", "0.25", ",", "args", ".", "embedding_dim", ")", "\n", "logger", ".", "info", "(", "'Saving word vecs to %s'", ",", "cached_word_vecs_file", ")", "\n", "with", "open", "(", "cached_word_vecs_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "word_vecs", ",", "f", ",", "-", "1", ")", "\n", "", "", "", "else", ":", "\n", "        ", "word_vocab", "=", "None", "\n", "word_vecs", "=", "None", "\n", "\n", "# Build vocab of dependency tags", "\n", "", "cached_dep_tag_vocab_file", "=", "os", ".", "path", ".", "join", "(", "\n", "pkls_path", ",", "'cached_{}_dep_tag_vocab.pkl'", ".", "format", "(", "args", ".", "dataset_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_dep_tag_vocab_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading vocab of dependency tags from %s'", ",", "\n", "cached_dep_tag_vocab_file", ")", "\n", "with", "open", "(", "cached_dep_tag_vocab_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "dep_tag_vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Creating vocab of dependency tags.'", ")", "\n", "dep_tag_vocab", "=", "build_dep_tag_vocab", "(", "data", ",", "min_freq", "=", "0", ")", "\n", "logger", ".", "info", "(", "'Saving dependency tags  vocab, size: %s, to file %s'", ",", "\n", "dep_tag_vocab", "[", "'len'", "]", ",", "cached_dep_tag_vocab_file", ")", "\n", "with", "open", "(", "cached_dep_tag_vocab_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "dep_tag_vocab", ",", "f", ",", "-", "1", ")", "\n", "\n", "# Build vocab of part of speech tags.", "\n", "", "", "cached_pos_tag_vocab_file", "=", "os", ".", "path", ".", "join", "(", "\n", "pkls_path", ",", "'cached_{}_pos_tag_vocab.pkl'", ".", "format", "(", "args", ".", "dataset_name", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cached_pos_tag_vocab_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading vocab of dependency tags from %s'", ",", "\n", "cached_pos_tag_vocab_file", ")", "\n", "with", "open", "(", "cached_pos_tag_vocab_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pos_tag_vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Creating vocab of dependency tags.'", ")", "\n", "pos_tag_vocab", "=", "build_pos_tag_vocab", "(", "data", ",", "min_freq", "=", "0", ")", "\n", "logger", ".", "info", "(", "'Saving dependency tags  vocab, size: %s, to file %s'", ",", "\n", "pos_tag_vocab", "[", "'len'", "]", ",", "cached_pos_tag_vocab_file", ")", "\n", "with", "open", "(", "cached_pos_tag_vocab_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "pos_tag_vocab", ",", "f", ",", "-", "1", ")", "\n", "\n", "", "", "return", "word_vecs", ",", "word_vocab", ",", "dep_tag_vocab", ",", "pos_tag_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.load_glove_embedding": [[341, 361], ["open", "os.path.join", "glove_words.append", "enumerate", "linecache.getline", "word_vectors.append", "os.path.join", "line[].strip", "numpy.fromstring", "word_vectors.append", "word_vectors.append", "linecache.getline.strip().split", "line[].strip", "numpy.zeros", "numpy.random.uniform", "linecache.getline.strip", "linecache.getline.find", "linecache.getline.find"], "function", ["None"], ["", "def", "load_glove_embedding", "(", "word_list", ",", "glove_dir", ",", "uniform_scale", ",", "dimension_size", ")", ":", "\n", "    ", "glove_words", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "glove_dir", ",", "'glove.840B.300d.txt'", ")", ",", "'r'", ")", "as", "fopen", ":", "\n", "        ", "for", "line", "in", "fopen", ":", "\n", "            ", "glove_words", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "\n", "", "", "word2offset", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "enumerate", "(", "glove_words", ")", "}", "\n", "word_vectors", "=", "[", "]", "\n", "for", "word", "in", "word_list", ":", "\n", "        ", "if", "word", "in", "word2offset", ":", "\n", "            ", "line", "=", "linecache", ".", "getline", "(", "os", ".", "path", ".", "join", "(", "\n", "glove_dir", ",", "'glove.840B.300d.txt'", ")", ",", "word2offset", "[", "word", "]", "+", "1", ")", "\n", "assert", "(", "word", "==", "line", "[", ":", "line", ".", "find", "(", "' '", ")", "]", ".", "strip", "(", ")", ")", "\n", "word_vectors", ".", "append", "(", "np", ".", "fromstring", "(", "\n", "line", "[", "line", ".", "find", "(", "' '", ")", ":", "]", ".", "strip", "(", ")", ",", "sep", "=", "' '", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "elif", "word", "==", "'<pad>'", ":", "\n", "            ", "word_vectors", ".", "append", "(", "np", ".", "zeros", "(", "dimension_size", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "word_vectors", ".", "append", "(", "\n", "np", ".", "random", ".", "uniform", "(", "-", "uniform_scale", ",", "uniform_scale", ",", "dimension_size", ")", ")", "\n", "", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets._default_unk_index": [[363, 365], ["None"], "function", ["None"], ["", "def", "_default_unk_index", "(", ")", ":", "\n", "    ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_text_vocab": [[367, 390], ["collections.Counter", "max", "sorted", "sorted.sort", "collections.defaultdict", "collections.defaultdict.update", "collections.Counter.update", "collections.Counter.items", "itos.append", "len", "len", "enumerate"], "function", ["None"], ["", "def", "build_text_vocab", "(", "data", ",", "vocab_size", "=", "100000", ",", "min_freq", "=", "2", ")", ":", "\n", "    ", "counter", "=", "Counter", "(", ")", "\n", "for", "d", "in", "data", ":", "\n", "        ", "s", "=", "d", "[", "'sentence'", "]", "\n", "\n", "counter", ".", "update", "(", "s", ")", "\n", "\n", "", "itos", "=", "[", "'[PAD]'", ",", "'[UNK]'", "]", "\n", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "\n", "\n", "# sort by frequency, then alphabetically", "\n", "words_and_frequencies", "=", "sorted", "(", "counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "0", "]", ")", "\n", "words_and_frequencies", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "word", ",", "freq", "in", "words_and_frequencies", ":", "\n", "        ", "if", "freq", "<", "min_freq", "or", "len", "(", "itos", ")", "==", "vocab_size", ":", "\n", "            ", "break", "\n", "", "itos", ".", "append", "(", "word", ")", "\n", "# stoi is simply a reverse dict for itos", "\n", "", "stoi", "=", "defaultdict", "(", "_default_unk_index", ")", "\n", "stoi", ".", "update", "(", "{", "tok", ":", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "itos", ")", "}", ")", "\n", "\n", "return", "{", "'itos'", ":", "itos", ",", "'stoi'", ":", "stoi", ",", "'len'", ":", "len", "(", "itos", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_pos_tag_vocab": [[392, 417], ["collections.Counter", "max", "sorted", "sorted.sort", "collections.defaultdict", "collections.defaultdict.update", "collections.Counter.update", "collections.Counter.items", "itos.append", "len", "len", "enumerate"], "function", ["None"], ["", "def", "build_pos_tag_vocab", "(", "data", ",", "vocab_size", "=", "2000", ",", "min_freq", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Part of speech tags vocab.\n    \"\"\"", "\n", "counter", "=", "Counter", "(", ")", "\n", "for", "d", "in", "data", ":", "\n", "        ", "tags", "=", "d", "[", "'tags'", "]", "\n", "counter", ".", "update", "(", "tags", ")", "\n", "\n", "", "itos", "=", "[", "'<pad>'", "]", "\n", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "\n", "\n", "# sort by frequency, then alphabetically", "\n", "words_and_frequencies", "=", "sorted", "(", "counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "0", "]", ")", "\n", "words_and_frequencies", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "word", ",", "freq", "in", "words_and_frequencies", ":", "\n", "        ", "if", "freq", "<", "min_freq", "or", "len", "(", "itos", ")", "==", "vocab_size", ":", "\n", "            ", "break", "\n", "", "itos", ".", "append", "(", "word", ")", "\n", "# stoi is simply a reverse dict for itos", "\n", "", "stoi", "=", "defaultdict", "(", ")", "\n", "stoi", ".", "update", "(", "{", "tok", ":", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "itos", ")", "}", ")", "\n", "\n", "return", "{", "'itos'", ":", "itos", ",", "'stoi'", ":", "stoi", ",", "'len'", ":", "len", "(", "itos", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.build_dep_tag_vocab": [[419, 443], ["collections.Counter", "max", "sorted", "sorted.sort", "collections.defaultdict", "collections.defaultdict.update", "collections.Counter.update", "collections.Counter.items", "itos.append", "len", "len", "enumerate"], "function", ["None"], ["", "def", "build_dep_tag_vocab", "(", "data", ",", "vocab_size", "=", "1000", ",", "min_freq", "=", "0", ")", ":", "\n", "    ", "counter", "=", "Counter", "(", ")", "\n", "for", "d", "in", "data", ":", "\n", "        ", "tags", "=", "d", "[", "'dep_tag'", "]", "\n", "counter", ".", "update", "(", "tags", ")", "\n", "\n", "", "itos", "=", "[", "'<pad>'", ",", "'<unk>'", "]", "\n", "min_freq", "=", "max", "(", "min_freq", ",", "1", ")", "\n", "\n", "# sort by frequency, then alphabetically", "\n", "words_and_frequencies", "=", "sorted", "(", "counter", ".", "items", "(", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "0", "]", ")", "\n", "words_and_frequencies", ".", "sort", "(", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "for", "word", ",", "freq", "in", "words_and_frequencies", ":", "\n", "        ", "if", "freq", "<", "min_freq", "or", "len", "(", "itos", ")", "==", "vocab_size", ":", "\n", "            ", "break", "\n", "", "if", "word", "==", "'<pad>'", ":", "\n", "            ", "continue", "\n", "", "itos", ".", "append", "(", "word", ")", "\n", "# stoi is simply a reverse dict for itos", "\n", "", "stoi", "=", "defaultdict", "(", "_default_unk_index", ")", "\n", "stoi", ".", "update", "(", "{", "tok", ":", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "itos", ")", "}", ")", "\n", "\n", "return", "{", "'itos'", ":", "itos", ",", "'stoi'", ":", "stoi", ",", "'len'", ":", "len", "(", "itos", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.my_collate_bert": [[625, 705], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "max", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor.sort", "np.pad.numpy", "numpy.pad", "sparse_graph_list.append", "len"], "function", ["None"], ["", "", "", "def", "my_collate_bert", "(", "batch", ")", ":", "\n", "    ", "'''\n    Pad sentence and aspect in a batch.\n    Sort the sentences based on length.\n    Turn all into tensors.\n\n    Process bert feature\n    '''", "\n", "input_ids", ",", "word_indexer", ",", "w_idx", ",", "input_aspect_ids", ",", "aspect_indexer", ",", "input_cat_ids", ",", "segment_ids", ",", "input_des_ids", ",", "des_indexer", ",", "dep_tag_ids", ",", "pos_class", ",", "text_len", ",", "aspect_len", ",", "des_len", ",", "sentiment", ",", "dep_rel_ids", ",", "dep_heads", ",", "aspect_positions", ",", "dep_dir_ids", ",", "aspect_start", ",", "sparse_graph", "=", "zip", "(", "*", "batch", ")", "\n", "text_len", "=", "torch", ".", "tensor", "(", "text_len", ")", "\n", "aspect_len", "=", "torch", ".", "tensor", "(", "aspect_len", ")", "\n", "des_len", "=", "torch", ".", "tensor", "(", "des_len", ")", "\n", "aspect_start", "=", "torch", ".", "tensor", "(", "aspect_start", ")", "\n", "sentiment", "=", "torch", ".", "tensor", "(", "sentiment", ")", "\n", "max_len", "=", "max", "(", "[", "len", "(", "p", ")", "for", "p", "in", "dep_tag_ids", "]", ")", "\n", "#print(max_len) ", "\n", "#print(text_len.size()[0])", "\n", "sparse_graph_list", "=", "[", "]", "\n", "for", "graph", "in", "sparse_graph", ":", "\n", "#print(graph)", "\n", "        ", "graph", "=", "graph", ".", "numpy", "(", ")", "\n", "#print(graph)", "\n", "#print(graph.shape)", "\n", "graph", "=", "np", ".", "pad", "(", "graph", ",", "(", "(", "0", ",", "max_len", "-", "graph", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "max_len", "-", "graph", ".", "shape", "[", "0", "]", ")", ")", ",", "'constant'", ")", "\n", "sparse_graph_list", ".", "append", "(", "graph", ")", "\n", "", "sparse_graph", "=", "torch", ".", "tensor", "(", "sparse_graph_list", ")", "\n", "# Pad sequences.", "\n", "input_ids", "=", "pad_sequence", "(", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_aspect_ids", "=", "pad_sequence", "(", "input_aspect_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_cat_ids", "=", "pad_sequence", "(", "input_cat_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "segment_ids", "=", "pad_sequence", "(", "segment_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_des_ids", "=", "pad_sequence", "(", "input_des_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "# indexer are padded with 1, for ...", "\n", "word_indexer", "=", "pad_sequence", "(", "word_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "aspect_indexer", "=", "pad_sequence", "(", "aspect_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "des_indexer", "=", "pad_sequence", "(", "des_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "w_idx", "=", "pad_sequence", "(", "w_idx", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "\n", "aspect_positions", "=", "pad_sequence", "(", "\n", "aspect_positions", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "dep_tag_ids", "=", "pad_sequence", "(", "dep_tag_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "dep_dir_ids", "=", "pad_sequence", "(", "dep_dir_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "pos_class", "=", "pad_sequence", "(", "pos_class", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "dep_rel_ids", "=", "pad_sequence", "(", "dep_rel_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "dep_heads", "=", "pad_sequence", "(", "dep_heads", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "# Sort all tensors based on text len.", "\n", "_", ",", "sorted_idx", "=", "text_len", ".", "sort", "(", "descending", "=", "True", ")", "\n", "\n", "input_ids", "=", "input_ids", "[", "sorted_idx", "]", "\n", "input_aspect_ids", "=", "input_aspect_ids", "[", "sorted_idx", "]", "\n", "input_des_ids", "=", "input_des_ids", "[", "sorted_idx", "]", "\n", "\n", "word_indexer", "=", "word_indexer", "[", "sorted_idx", "]", "\n", "aspect_indexer", "=", "aspect_indexer", "[", "sorted_idx", "]", "\n", "des_indexer", "=", "des_indexer", "[", "sorted_idx", "]", "\n", "\n", "input_cat_ids", "=", "input_cat_ids", "[", "sorted_idx", "]", "\n", "segment_ids", "=", "segment_ids", "[", "sorted_idx", "]", "\n", "aspect_positions", "=", "aspect_positions", "[", "sorted_idx", "]", "\n", "dep_tag_ids", "=", "dep_tag_ids", "[", "sorted_idx", "]", "\n", "dep_dir_ids", "=", "dep_dir_ids", "[", "sorted_idx", "]", "\n", "pos_class", "=", "pos_class", "[", "sorted_idx", "]", "\n", "text_len", "=", "text_len", "[", "sorted_idx", "]", "\n", "aspect_len", "=", "aspect_len", "[", "sorted_idx", "]", "\n", "des_len", "=", "des_len", "[", "sorted_idx", "]", "\n", "sentiment", "=", "sentiment", "[", "sorted_idx", "]", "\n", "dep_rel_ids", "=", "dep_rel_ids", "[", "sorted_idx", "]", "\n", "dep_heads", "=", "dep_heads", "[", "sorted_idx", "]", "\n", "aspect_start", "=", "aspect_start", "[", "sorted_idx", "]", "\n", "w_idx", "=", "w_idx", "[", "sorted_idx", "]", "\n", "sparse_graph", "=", "sparse_graph", "[", "sorted_idx", "]", "\n", "\n", "return", "input_ids", ",", "word_indexer", ",", "w_idx", ",", "input_aspect_ids", ",", "aspect_indexer", ",", "input_cat_ids", ",", "segment_ids", ",", "input_des_ids", ",", "des_indexer", ",", "dep_tag_ids", ",", "pos_class", ",", "text_len", ",", "aspect_len", ",", "des_len", ",", "sentiment", ",", "dep_rel_ids", ",", "dep_heads", ",", "aspect_positions", ",", "dep_dir_ids", ",", "aspect_start", ",", "sparse_graph", "\n", "", "def", "my_collate_bert_eval", "(", "batch", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.datasets.my_collate_bert_eval": [[705, 759], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "max", "torch.tensor", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "np.pad.numpy", "numpy.pad", "sparse_graph_list.append", "len"], "function", ["None"], ["", "def", "my_collate_bert_eval", "(", "batch", ")", ":", "\n", "    ", "'''\n    Pad sentence and aspect in a batch.\n    Sort the sentences based on length.\n    Turn all into tensors.\n\n    Process bert feature\n    '''", "\n", "input_ids", ",", "word_indexer", ",", "w_idx", ",", "input_aspect_ids", ",", "aspect_indexer", ",", "input_cat_ids", ",", "segment_ids", ",", "input_des_ids", ",", "des_indexer", ",", "dep_tag_ids", ",", "pos_class", ",", "text_len", ",", "aspect_len", ",", "des_len", ",", "sentiment", ",", "dep_rel_ids", ",", "dep_heads", ",", "aspect_positions", ",", "dep_dir_ids", ",", "aspect_start", ",", "sparse_graph", "=", "zip", "(", "*", "batch", ")", "\n", "text_len", "=", "torch", ".", "tensor", "(", "text_len", ")", "\n", "aspect_len", "=", "torch", ".", "tensor", "(", "aspect_len", ")", "\n", "des_len", "=", "torch", ".", "tensor", "(", "des_len", ")", "\n", "aspect_start", "=", "torch", ".", "tensor", "(", "aspect_start", ")", "\n", "sentiment", "=", "torch", ".", "tensor", "(", "sentiment", ")", "\n", "max_len", "=", "max", "(", "[", "len", "(", "p", ")", "for", "p", "in", "dep_tag_ids", "]", ")", "\n", "#print(max_len) ", "\n", "#print(text_len.size()[0])", "\n", "sparse_graph_list", "=", "[", "]", "\n", "for", "graph", "in", "sparse_graph", ":", "\n", "#print(graph)", "\n", "        ", "graph", "=", "graph", ".", "numpy", "(", ")", "\n", "#print(graph)", "\n", "#print(graph.shape)", "\n", "graph", "=", "np", ".", "pad", "(", "graph", ",", "(", "(", "0", ",", "max_len", "-", "graph", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "max_len", "-", "graph", ".", "shape", "[", "0", "]", ")", ")", ",", "'constant'", ")", "\n", "sparse_graph_list", ".", "append", "(", "graph", ")", "\n", "", "sparse_graph", "=", "torch", ".", "tensor", "(", "sparse_graph_list", ")", "\n", "# Pad sequences.", "\n", "input_ids", "=", "pad_sequence", "(", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_aspect_ids", "=", "pad_sequence", "(", "input_aspect_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_cat_ids", "=", "pad_sequence", "(", "input_cat_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "segment_ids", "=", "pad_sequence", "(", "segment_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "input_des_ids", "=", "pad_sequence", "(", "input_des_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "# indexer are padded with 1, for ...", "\n", "word_indexer", "=", "pad_sequence", "(", "word_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "aspect_indexer", "=", "pad_sequence", "(", "aspect_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "des_indexer", "=", "pad_sequence", "(", "des_indexer", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "w_idx", "=", "pad_sequence", "(", "w_idx", ",", "batch_first", "=", "True", ",", "padding_value", "=", "1", ")", "\n", "\n", "aspect_positions", "=", "pad_sequence", "(", "\n", "aspect_positions", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "dep_tag_ids", "=", "pad_sequence", "(", "dep_tag_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "dep_dir_ids", "=", "pad_sequence", "(", "dep_dir_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "pos_class", "=", "pad_sequence", "(", "pos_class", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "dep_rel_ids", "=", "pad_sequence", "(", "dep_rel_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "dep_heads", "=", "pad_sequence", "(", "dep_heads", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "\n", "return", "input_ids", ",", "word_indexer", ",", "w_idx", ",", "input_aspect_ids", ",", "aspect_indexer", ",", "input_cat_ids", ",", "segment_ids", ",", "input_des_ids", ",", "des_indexer", ",", "dep_tag_ids", ",", "pos_class", ",", "text_len", ",", "aspect_len", ",", "des_len", ",", "sentiment", ",", "dep_rel_ids", ",", "dep_heads", ",", "aspect_positions", ",", "dep_dir_ids", ",", "aspect_start", ",", "sparse_graph", "\n", "", ""]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.Rel_GAT.__init__": [[18, 37], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "dep_rel_num", ",", "hidden_size", "=", "64", ",", "num_layers", "=", "2", ")", ":", "\n", "        ", "super", "(", "Rel_GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "gcn_dropout", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "1e-2", ")", "\n", "\n", "\n", "# gat layer", "\n", "# relation embedding, careful initialization?", "\n", "self", ".", "dep_rel_embed", "=", "nn", ".", "Embedding", "(", "\n", "dep_rel_num", ",", "args", ".", "dep_relation_embed_dim", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dep_rel_embed", ".", "weight", ")", "\n", "\n", "# map rel_emb to logits. Naive attention on relations", "\n", "layers", "=", "[", "\n", "nn", ".", "Linear", "(", "args", ".", "dep_relation_embed_dim", ",", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "]", "\n", "self", ".", "fcs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.Rel_GAT.forward": [[38, 64], ["model_gcn.Rel_GAT.dep_rel_embed", "range", "adj.sum().unsqueeze", "adj.size", "adj.size", "rel_adj.view", "adj.view", "torch.softmax", "torch.softmax", "torch.softmax", "model_gcn.Rel_GAT.view", "model_gcn.Rel_GAT.bmm", "model_gcn.Rel_GAT.fcs().squeeze", "model_gcn.mask_logits", "model_gcn.Rel_GAT.dropout", "adj.sum", "rel_adj.size", "model_gcn.Rel_GAT.fcs"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "def", "forward", "(", "self", ",", "adj", ",", "rel_adj", ",", "feature", ")", ":", "\n", "        ", "denom", "=", "adj", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "+", "1", "\n", "B", ",", "N", "=", "adj", ".", "size", "(", "0", ")", ",", "adj", ".", "size", "(", "1", ")", "\n", "\n", "rel_adj_V", "=", "self", ".", "dep_rel_embed", "(", "\n", "rel_adj", ".", "view", "(", "B", ",", "-", "1", ")", ")", "# (batch_size, n*n, d)", "\n", "\n", "# gcn layer", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# relation based GAT, attention over relations", "\n", "\n", "            ", "if", "True", ":", "\n", "                ", "rel_adj_logits", "=", "self", ".", "fcs", "(", "rel_adj_V", ")", ".", "squeeze", "(", "2", ")", "# (batch_size, n*n)", "\n", "", "else", ":", "\n", "                ", "rel_adj_logits", "=", "self", ".", "A", "[", "l", "]", "(", "rel_adj_V", ")", ".", "squeeze", "(", "2", ")", "# (batch_size, n*n)", "\n", "\n", "", "dmask", "=", "adj", ".", "view", "(", "B", ",", "-", "1", ")", "# (batch_size, n*n)", "\n", "rel_adj_logits", "=", "F", ".", "softmax", "(", "\n", "mask_logits", "(", "rel_adj_logits", ",", "dmask", ")", ",", "dim", "=", "1", ")", "\n", "rel_adj_logits", "=", "rel_adj_logits", ".", "view", "(", "\n", "*", "rel_adj", ".", "size", "(", ")", ")", "# (batch_size, n, n)", "\n", "\n", "Ax", "=", "rel_adj_logits", ".", "bmm", "(", "feature", ")", "\n", "feature", "=", "self", ".", "dropout", "(", "Ax", ")", "if", "l", "<", "self", ".", "num_layers", "-", "1", "else", "Ax", "\n", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GAT.__init__": [[71, 90], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "model_gcn.GAT.W.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "in_dim", ",", "hidden_size", "=", "64", ",", "mem_dim", "=", "300", ",", "num_layers", "=", "2", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "gcn_dropout", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "1e-2", ")", "\n", "\n", "# Standard GAT:attention over feature", "\n", "a_layers", "=", "[", "\n", "nn", ".", "Linear", "(", "2", "*", "mem_dim", ",", "hidden_size", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "]", "\n", "self", ".", "afcs", "=", "nn", ".", "Sequential", "(", "*", "a_layers", ")", "\n", "\n", "# gcn layer", "\n", "self", ".", "W", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "input_dim", "=", "self", ".", "in_dim", "if", "layer", "==", "0", "else", "mem_dim", "\n", "self", ".", "W", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "mem_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GAT.forward": [[91, 111], ["adj.view", "range", "adj.size", "adj.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_gcn.GAT.leakyrelu().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "attention.view.view.view", "attention.view.view.bmm", "model_gcn.mask_logits", "model_gcn.GAT.dropout", "h.repeat().view", "h.repeat", "model_gcn.GAT.leakyrelu", "adj.size", "model_gcn.GAT.afcs", "h.repeat"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits"], ["", "", "def", "forward", "(", "self", ",", "adj", ",", "feature", ")", ":", "\n", "        ", "B", ",", "N", "=", "adj", ".", "size", "(", "0", ")", ",", "adj", ".", "size", "(", "1", ")", "\n", "dmask", "=", "adj", ".", "view", "(", "B", ",", "-", "1", ")", "# (batch_size, n*n)", "\n", "# gcn layer", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# Standard GAT:attention over feature", "\n", "#####################################", "\n", "            ", "h", "=", "self", ".", "W", "[", "l", "]", "(", "feature", ")", "# (B, N, D)", "\n", "a_input", "=", "torch", ".", "cat", "(", "[", "h", ".", "repeat", "(", "1", ",", "1", ",", "N", ")", ".", "view", "(", "\n", "B", ",", "N", "*", "N", ",", "-", "1", ")", ",", "h", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "# (B, N*N, 2*D)", "\n", "e", "=", "self", ".", "leakyrelu", "(", "self", ".", "afcs", "(", "a_input", ")", ")", ".", "squeeze", "(", "2", ")", "# (B, N*N)", "\n", "attention", "=", "F", ".", "softmax", "(", "mask_logits", "(", "e", ",", "dmask", ")", ",", "dim", "=", "1", ")", "\n", "attention", "=", "attention", ".", "view", "(", "*", "adj", ".", "size", "(", ")", ")", "\n", "\n", "# original gat", "\n", "feature", "=", "attention", ".", "bmm", "(", "h", ")", "\n", "feature", "=", "self", ".", "dropout", "(", "feature", ")", "if", "l", "<", "self", ".", "num_layers", "-", "1", "else", "feature", "\n", "#####################################", "\n", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__": [[118, 130], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_gcn.GCN.W.append", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "in_dim", ",", "mem_dim", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "gcn_dropout", ")", "\n", "# gcn layer", "\n", "self", ".", "W", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "input_dim", "=", "self", ".", "in_dim", "if", "layer", "==", "0", "else", "mem_dim", "\n", "self", ".", "W", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "mem_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.conv_l2": [[131, 136], ["sum", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "", "def", "conv_l2", "(", "self", ")", ":", "\n", "        ", "conv_weights", "=", "[", "]", "\n", "for", "w", "in", "self", ".", "W", ":", "\n", "            ", "conv_weights", "+=", "[", "w", ".", "weight", ",", "w", ".", "bias", "]", "\n", "", "return", "sum", "(", "[", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "for", "x", "in", "conv_weights", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.GCN.forward": [[137, 152], ["range", "adj.sum().unsqueeze", "adj.bmm", "model_gcn.GCN.dropout", "adj.sum", "adj.sum", "adj.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "adj", ",", "feature", ")", ":", "\n", "# gcn layer", "\n", "        ", "denom", "=", "adj", ".", "sum", "(", "2", ")", ".", "unsqueeze", "(", "2", ")", "+", "1", "\n", "mask", "=", "(", "adj", ".", "sum", "(", "2", ")", "+", "adj", ".", "sum", "(", "1", ")", ")", ".", "eq", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "Ax", "=", "adj", ".", "bmm", "(", "feature", ")", "\n", "AxW", "=", "self", ".", "W", "[", "l", "]", "(", "Ax", ")", "\n", "AxW", "=", "AxW", "+", "self", ".", "W", "[", "l", "]", "(", "feature", ")", "# self loop", "\n", "AxW", "/=", "denom", "\n", "\n", "# gAxW = F.relu(AxW)", "\n", "gAxW", "=", "AxW", "\n", "feature", "=", "self", ".", "dropout", "(", "gAxW", ")", "if", "l", "<", "self", ".", "num_layers", "-", "1", "else", "gAxW", "\n", "", "return", "feature", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XingBowen714_KaGRMN-DSG_ABSA.None.model_gcn.mask_logits": [[9, 11], ["None"], "function", ["None"], ["def", "mask_logits", "(", "target", ",", "mask", ")", ":", "\n", "    ", "return", "target", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "(", "-", "1e30", ")", "\n", "\n"]]}