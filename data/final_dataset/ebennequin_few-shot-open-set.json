{"home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.AbstractFeatureTransformer.forward": [[15, 21], ["NotImplementedError"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"All feature transformers must implement a forward method.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.AbstractFeatureTransformer.from_args": [[23, 28], ["inspect.signature", "cls", "args.items", "inspect.signature.parameters.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ":", "Dict", ")", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "cls", ".", "__init__", ")", "\n", "return", "cls", "(", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", "if", "k", "in", "signature", ".", "parameters", ".", "keys", "(", ")", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.IdentityTransformer.forward": [[36, 40], ["None"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "return", "support_features", ",", "query_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.Normalize.__init__": [[48, 51], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "norm", ":", "float", "=", "2.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.Normalize.forward": [[52, 57], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "support_features", ",", "dim", "=", "1", ",", "p", "=", "self", ".", "norm", ")", ",", "F", ".", "normalize", "(", "\n", "query_features", ",", "dim", "=", "1", ",", "p", "=", "self", ".", "norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.MaximumNormalize.forward": [[68, 73], ["support_features.max"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "norm_term", "=", "support_features", ".", "max", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ".", "values", "\n", "return", "support_features", "/", "norm_term", ",", "query_features", "/", "norm_term", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.LayerNorm.forward": [[83, 98], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "dims", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "support_mean", "=", "torch", ".", "mean", "(", "support_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "support_variance", "=", "torch", ".", "var", "(", "\n", "support_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", "\n", ")", "\n", "query_mean", "=", "torch", ".", "mean", "(", "query_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "query_variance", "=", "torch", ".", "var", "(", "\n", "query_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", "\n", ")", "\n", "return", "(", "support_features", "-", "support_mean", ")", "/", "(", "\n", "support_variance", ".", "sqrt", "(", ")", "+", "EPSILON", "\n", ")", ",", "(", "query_features", "-", "query_mean", ")", "/", "(", "query_variance", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.InductiveBatchNorm.forward": [[108, 118], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "len", "support_features.size", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "assert", "len", "(", "support_features", ".", "size", "(", ")", ")", ">=", "4", "\n", "dims", "=", "(", "0", ",", "2", ",", "3", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "support_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "torch", ".", "var", "(", "support_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "support_features", "-", "mean", ")", "/", "(", "var", ".", "sqrt", "(", ")", "+", "EPSILON", ")", ",", "(", "\n", "query_features", "-", "mean", "\n", ")", "/", "(", "var", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.InstanceNorm.forward": [[128, 144], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "len", "support_features.size", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "assert", "len", "(", "support_features", ".", "size", "(", ")", ")", ">=", "4", "\n", "dims", "=", "(", "2", ",", "3", ")", "\n", "support_mean", "=", "torch", ".", "mean", "(", "support_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "support_variance", "=", "torch", ".", "var", "(", "\n", "support_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", "\n", ")", "\n", "query_mean", "=", "torch", ".", "mean", "(", "query_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "query_variance", "=", "torch", ".", "var", "(", "\n", "query_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", "\n", ")", "\n", "return", "(", "support_features", "-", "support_mean", ")", "/", "(", "\n", "support_variance", ".", "sqrt", "(", ")", "+", "EPSILON", "\n", ")", ",", "(", "query_features", "-", "query_mean", ")", "/", "(", "query_variance", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.TransductiveBatchNorm.forward": [[154, 169], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "torch.var", "len", "support_features.size", "len", "ValueError", "support_features.size", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt", "torch.var.sqrt"], "methods", ["None"], ["def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "if", "len", "(", "support_features", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "            ", "dims", "=", "(", "0", ",", "2", ",", "3", ")", "# we normalize over the batch, as well as spatial dims", "\n", "", "elif", "len", "(", "support_features", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "dims", "=", "(", "0", ",", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Problem with size of features.\"", ")", "\n", "", "all_features", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "query_features", "]", ",", "0", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "all_features", ",", "dim", "=", "dims", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "torch", ".", "var", "(", "all_features", ",", "dim", "=", "dims", ",", "unbiased", "=", "False", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "support_features", "-", "mean", ")", "/", "(", "var", ".", "sqrt", "(", ")", "+", "EPSILON", ")", ",", "(", "\n", "query_features", "-", "mean", "\n", ")", "/", "(", "var", ".", "sqrt", "(", ")", "+", "EPSILON", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.PowerTransform.__init__": [[178, 181], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "beta", ":", "float", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.PowerTransform.forward": [[182, 188], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "return", "torch", ".", "pow", "(", "support_features", "+", "EPSILON", ",", "self", ".", "beta", ")", ",", "torch", ".", "pow", "(", "\n", "query_features", "+", "EPSILON", ",", "self", ".", "beta", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.BaseSetCentering.__init__": [[198, 201], ["torch.nn.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "average_train_features", ":", "Union", "[", "Tensor", ",", "ndarray", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "average_train_features", "=", "torch", ".", "tensor", "(", "average_train_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.BaseSetCentering.forward": [[202, 211], ["len", "len", "feature_transforms.BaseSetCentering.average_train_features.squeeze().squeeze", "feature_transforms.BaseSetCentering.average_train_features.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "if", "len", "(", "self", ".", "average_train_features", ".", "shape", ")", "!=", "len", "(", "support_features", ".", "shape", ")", ":", "\n", "            ", "self", ".", "average_train_features", "=", "self", ".", "average_train_features", ".", "squeeze", "(", "\n", "-", "1", "\n", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "(", "support_features", "-", "self", ".", "average_train_features", ")", ",", "(", "\n", "query_features", "-", "self", ".", "average_train_features", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.SequentialFeatureTransformer.__init__": [[219, 222], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "feature_transformers", ":", "List", "[", "AbstractFeatureTransformer", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_transformers", "=", "feature_transformers", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.feature_transforms.SequentialFeatureTransformer.forward": [[223, 232], ["feature_transformer"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "for", "feature_transformer", "in", "self", ".", "feature_transformers", ":", "\n", "            ", "support_features", ",", "query_features", "=", "feature_transformer", "(", "\n", "support_features", ",", "query_features", "\n", ")", "\n", "\n", "", "return", "support_features", ",", "query_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.DropBlock.__init__": [[19, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.DropBlock.forward": [[24, 52], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "tadam_resnet.DropBlock._compute_block_mask", "tadam_resnet.DropBlock.sum", "mask.cuda.cuda.cuda", "tadam_resnet.DropBlock.size", "tadam_resnet.DropBlock.size", "tadam_resnet.DropBlock.size", "tadam_resnet.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "\n", "(", "\n", "batch_size", ",", "\n", "channels", ",", "\n", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "(", "\n", "block_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", ")", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.DropBlock._compute_block_mask": [[53, 96], ["int", "int", "mask.nonzero", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "offsets.long.long.cuda", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", "\n", ".", "view", "(", "-", "1", ",", "1", ")", "\n", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", "\n", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "# - left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", "\n", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "offsets", "=", "offsets", ".", "cuda", "(", ")", "\n", "\n", "", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "# block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", "\n", ")", "\n", "padded_mask", "[", "\n", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "\n", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", "\n", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "# [:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.BasicBlock.__init__": [[101, 127], ["torch.Module.__init__", "tadam_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "tadam_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "tadam_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "tadam_resnet.DropBlock"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.BasicBlock.forward": [[128, 170], ["tadam_resnet.BasicBlock.conv1", "tadam_resnet.BasicBlock.bn1", "tadam_resnet.BasicBlock.relu", "tadam_resnet.BasicBlock.conv2", "tadam_resnet.BasicBlock.bn2", "tadam_resnet.BasicBlock.relu", "tadam_resnet.BasicBlock.conv3", "tadam_resnet.BasicBlock.bn3", "tadam_resnet.BasicBlock.relu", "tadam_resnet.BasicBlock.maxpool", "tadam_resnet.BasicBlock.downsample", "max", "tadam_resnet.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "\n", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "\n", "1.0", "-", "self", ".", "drop_rate", ",", "\n", ")", "\n", "gamma", "=", "(", "\n", "(", "1", "-", "keep_rate", ")", "\n", "/", "self", ".", "block_size", "**", "2", "\n", "*", "feat_size", "**", "2", "\n", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", ")", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "\n", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", "\n", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.ResNet.__init__": [[173, 217], ["torch.Module.__init__", "tadam_resnet.ResNet._make_layer", "tadam_resnet.ResNet._make_layer", "tadam_resnet.ResNet._make_layer", "tadam_resnet.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "tadam_resnet.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "avg_pool", "=", "True", ",", "\n", "drop_rate", "=", "0.1", ",", "\n", "dropblock_size", "=", "5", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "320", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "640", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", ")", "\n", "if", "avg_pool", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"leaky_relu\"", "\n", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.ResNet._make_layer": [[218, 249], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "drop_rate", ",", "\n", "drop_block", ",", "\n", "block_size", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.ResNet.forward": [[250, 259], ["tadam_resnet.ResNet.layer1", "tadam_resnet.ResNet.layer2", "tadam_resnet.ResNet.layer3", "tadam_resnet.ResNet.layer4", "tadam_resnet.ResNet.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.conv3x3": [[11, 15], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.tadam_resnet.tadam_res12": [[261, 265], ["tadam_resnet.ResNet"], "function", ["None"], ["", "", "def", "tadam_res12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.metrics.precision_n_scores": [[11, 40], ["metrics.get_label_n", "sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d", "sklearn.metrics.precision_score"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.metrics.get_label_n"], ["def", "precision_n_scores", "(", "y", ",", "y_pred", ",", "n", "=", "None", ")", ":", "\n", "    ", "\"\"\"Utility function to calculate precision @ rank n.\n\n    Parameters\n    ----------\n    y : list or numpy array of shape (n_samples,)\n        The ground truth. Binary (0: inliers, 1: outliers).\n\n    y_pred : list or numpy array of shape (n_samples,)\n        The raw outlier scores as returned by a fitted model.\n\n    n : int, optional (default=None)\n        The number of outliers. if not defined, infer using ground truth.\n\n    Returns\n    -------\n    precision_at_rank_n : float\n        Precision at rank n score.\n\n    \"\"\"", "\n", "\n", "# turn raw prediction decision scores into binary labels", "\n", "y_pred", "=", "get_label_n", "(", "y", ",", "y_pred", ",", "n", ")", "\n", "\n", "# enforce formats of y and labels_", "\n", "y", "=", "column_or_1d", "(", "y", ")", "\n", "y_pred", "=", "column_or_1d", "(", "y_pred", ")", "\n", "\n", "return", "precision_score", "(", "y", ",", "y_pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.metrics.get_label_n": [[42, 89], ["sklearn.utils.column_or_1d", "sklearn.utils.column_or_1d", "sklearn.utils.check_consistent_length", "len", "numpy.percentile", "numpy.count_nonzero"], "function", ["None"], ["", "def", "get_label_n", "(", "y", ",", "y_pred", ",", "n", "=", "None", ")", ":", "\n", "    ", "\"\"\"Function to turn raw outlier scores into binary labels by assign 1\n    to top n outlier scores.\n\n    Parameters\n    ----------\n    y : list or numpy array of shape (n_samples,)\n        The ground truth. Binary (0: inliers, 1: outliers).\n\n    y_pred : list or numpy array of shape (n_samples,)\n        The raw outlier scores as returned by a fitted model.\n\n    n : int, optional (default=None)\n        The number of outliers. if not defined, infer using ground truth.\n\n    Returns\n    -------\n    labels : numpy array of shape (n_samples,)\n        binary labels 0: normal points and 1: outliers\n\n    Examples\n    --------\n    >>> from pyod.utils.utility import get_label_n\n    >>> y = [0, 1, 1, 0, 0]\n    >>> y_pred = [0.1, 0.5, 0.3, 0.2, 0.7]\n    >>> get_label_n(y, y_pred)\n    array([0, 1, 0, 0, 1])\n\n    \"\"\"", "\n", "\n", "# enforce formats of inputs", "\n", "y", "=", "column_or_1d", "(", "y", ")", "\n", "y_pred", "=", "column_or_1d", "(", "y_pred", ")", "\n", "\n", "check_consistent_length", "(", "y", ",", "y_pred", ")", "\n", "y_len", "=", "len", "(", "y", ")", "# the length of targets", "\n", "\n", "# calculate the percentage of outliers", "\n", "if", "n", "is", "not", "None", ":", "\n", "        ", "outliers_fraction", "=", "n", "/", "y_len", "\n", "", "else", ":", "\n", "        ", "outliers_fraction", "=", "np", ".", "count_nonzero", "(", "y", ")", "/", "y_len", "\n", "\n", "", "threshold", "=", "percentile", "(", "y_pred", ",", "100", "*", "(", "1", "-", "outliers_fraction", ")", ")", "\n", "y_pred", "=", "(", "y_pred", ">", "threshold", ")", ".", "astype", "(", "\"int\"", ")", "\n", "\n", "return", "y_pred", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.str2bool": [[42, 51], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.parse_args": [[53, 168], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "src.utils.utils.merge_from_dict", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.parse_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.merge_from_dict", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "", "def", "parse_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "\n", "# Data", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--src_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"mini_imagenet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tgt_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"mini_imagenet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_way\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_shot\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_id_query\"", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_ood_query\"", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_tasks\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_workers\"", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", ")", "\n", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "\"--backbone\"", ",", "type", "=", "str", ",", "default", "=", "\"resnet18\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_source\"", ",", "type", "=", "str", ",", "default", "=", "\"feat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--training\"", ",", "type", "=", "str", ",", "default", "=", "\"standard\"", ")", "\n", "\n", "# Detector", "\n", "parser", ".", "add_argument", "(", "\"--feature_detector\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--proba_detector\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detector_config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/detectors.yaml\"", "\n", ")", "\n", "\n", "# Transform", "\n", "parser", ".", "add_argument", "(", "\n", "\"--detector_transforms\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "\"l2_norm\"", "]", ",", "\n", "help", "=", "\"What type of transformation to apply after spatial pooling.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--classifier_transforms\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "[", "\"l2_norm\"", "]", ",", "\n", "help", "=", "\"What type of transformation to apply after spatial pooling.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transforms_config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/transforms.yaml\"", "\n", ")", "\n", "\n", "# Classifier", "\n", "parser", ".", "add_argument", "(", "\"--classifier\"", ",", "type", "=", "str", ",", "default", "=", "\"SimpleShot\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--classifiers_config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"configs/classifiers.yaml\"", "\n", ")", "\n", "\n", "# Logging / Saving results", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--exp_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"default\"", ",", "\n", "help", "=", "\"Name the experiment for easy grouping.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--visu_episode\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"default\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_predictions\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"default\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--general_hparams\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "\n", "\"backbone\"", ",", "\n", "\"src_dataset\"", ",", "\n", "\"tgt_dataset\"", ",", "\n", "\"split\"", ",", "\n", "\"feature_detector\"", ",", "\n", "\"proba_detector\"", ",", "\n", "\"classifier\"", ",", "\n", "\"n_way\"", ",", "\n", "\"n_shot\"", ",", "\n", "\"n_id_query\"", ",", "\n", "\"n_ood_query\"", "\n", "]", ",", "\n", "help", "=", "\"Important params that will appear in .csv result file.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--simu_hparams\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"*\"", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "\"Important params that will appear in .csv result file.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--override\"", ",", "\n", "type", "=", "str2bool", ",", "\n", "help", "=", "\"Whether to override results already present in the .csv out file.\"", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--tune\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ablate\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "str2bool", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "args", ".", "n_tasks", "=", "5", "\n", "\n", "# Merge external config files", "\n", "", "for", "file", "in", "[", "\n", "args", ".", "detector_config_file", ",", "\n", "args", ".", "transforms_config_file", ",", "\n", "args", ".", "classifiers_config_file", ",", "\n", "]", ":", "\n", "        ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "parsed_yaml_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "merge_from_dict", "(", "args", ",", "parsed_yaml_dict", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.is_jsonable": [[170, 176], ["json.dumps"], "function", ["None"], ["", "def", "is_jsonable", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "json", ".", "dumps", "(", "x", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.dump_config": [[178, 192], ["loguru.logger.info", "pathlib.Path", "open", "vars", "vars.items", "json.dump", "inference.is_jsonable", "loguru.logger.warning", "keys_to_delete.append"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.is_jsonable"], ["", "", "def", "dump_config", "(", "args", ")", ":", "\n", "    ", "path", "=", "Path", "(", "args", ".", "res_dir", ")", "/", "'config.json'", "\n", "logger", ".", "info", "(", "f\"Dropping config file at {path}\"", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "# try:", "\n", "        ", "arg_dict", "=", "vars", "(", "args", ")", "\n", "keys_to_delete", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "arg_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "is_jsonable", "(", "value", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "f\"Key {key} was not serializable, and will not be saved at {path}\"", ")", "\n", "keys_to_delete", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "keys_to_delete", ":", "\n", "            ", "del", "arg_dict", "[", "key", "]", "\n", "", "json", ".", "dump", "(", "arg_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.main": [[194, 340], ["os.path.join", "os.makedirs", "collections.defaultdict", "src.utils.data_fetchers.get_test_features", "src.utils.data_fetchers.get_task_loader", "itertools.product", "classifier_transforms.append", "detector_transforms.append", "src.utils.utils.get_modules_to_try", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "str", "str", "str", "os.path.join", "os.makedirs", "inference.dump_config", "src.utils.utils.set_random_seed", "src.utils.utils.get_modules_to_try", "src.utils.utils.get_modules_to_try", "src.utils.utils.get_modules_to_try", "inference.detect_outliers", "inference.save_results", "loguru.logger.warning", "src.utils.utils.get_modules_to_try", "src.utils.utils.get_modules_to_try", "class_.item", "src.utils.plots_and_metrics.check_if_record_exists", "str", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_test_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_task_loader", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.dump_config", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.set_random_seed", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.detect_outliers", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.save_results", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.check_if_record_exists"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "args", ".", "res_root", "=", "os", ".", "path", ".", "join", "(", "\"results\"", ",", "args", ".", "exp_name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "res_root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# ================ Prepare Transforms + Detector + Classifier ===================", "\n", "\n", "# ==== Prepare transforms ====", "\n", "\n", "classifier_transforms", ":", "List", "[", "FeatureTransform", "]", "=", "[", "]", "\n", "for", "x", "in", "args", ".", "classifier_transforms", ":", "\n", "        ", "classifier_transforms", ".", "append", "(", "\n", "get_modules_to_try", "(", "args", ",", "\"transforms\"", ",", "x", ",", "TRANSFORMS", ",", "False", ",", "False", ")", "[", "0", "]", "\n", ")", "\n", "", "classifier_transforms", ":", "FeatureTransform", "=", "TRANSFORMS", "[", "\"SequentialTransform\"", "]", "(", "\n", "classifier_transforms", "\n", ")", "\n", "\n", "detector_transforms", ":", "List", "[", "FeatureTransform", "]", "=", "[", "]", "\n", "for", "x", "in", "args", ".", "detector_transforms", ":", "\n", "        ", "detector_transforms", ".", "append", "(", "\n", "get_modules_to_try", "(", "args", ",", "\"transforms\"", ",", "x", ",", "TRANSFORMS", ",", "False", ",", "False", ")", "[", "0", "]", "\n", ")", "\n", "", "detector_transforms", ":", "FeatureTransform", "=", "TRANSFORMS", "[", "\"SequentialTransform\"", "]", "(", "\n", "detector_transforms", "\n", ")", "\n", "\n", "if", "args", ".", "feature_detector", "in", "ALL_IN_ONE_METHODS", ":", "\n", "\n", "# ==== Prepare all in one detector ====", "\n", "\n", "        ", "feature_detectors", ":", "List", "[", "FeatureDetector", "]", "=", "get_modules_to_try", "(", "\n", "args", ",", "\n", "\"feature_detectors\"", ",", "\n", "args", ".", "feature_detector", ",", "\n", "ALL_IN_ONE_METHODS", ",", "\n", "\"feature_detector\"", "in", "args", ".", "tune", ",", "\"feature_detector\"", "in", "args", ".", "ablate", "\n", ")", "\n", "proba_detectors", "=", "classifiers", "=", "[", "None", "]", "\n", "\n", "", "else", ":", "\n", "# ==== Prepare few-shot classifier ====", "\n", "\n", "        ", "if", "args", ".", "classifier", "==", "'none'", ":", "\n", "            ", "classifiers", "=", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "classifiers", ":", "List", "[", "FewShotMethod", "]", "=", "get_modules_to_try", "(", "\n", "args", ",", "\"classifiers\"", ",", "args", ".", "classifier", ",", "CLASSIFIERS", ",", "\n", "\"classifier\"", "in", "args", ".", "tune", ",", "\"classifier\"", "in", "args", ".", "ablate", "\n", ")", "\n", "\n", "# ==== Prepare feature detector ====", "\n", "\n", "", "if", "args", ".", "feature_detector", "==", "\"none\"", ":", "\n", "            ", "feature_detectors", "=", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "feature_detectors", "=", "get_modules_to_try", "(", "\n", "args", ",", "\n", "\"feature_detectors\"", ",", "\n", "args", ".", "feature_detector", ",", "\n", "FEATURE_DETECTORS", ",", "\n", "\"feature_detector\"", "in", "args", ".", "tune", ",", "\"feature_detector\"", "in", "args", ".", "ablate", ",", "\n", ")", "\n", "\n", "# ==== Prepare proba detector ====", "\n", "", "if", "args", ".", "proba_detector", "==", "\"none\"", ":", "\n", "            ", "proba_detectors", "=", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "proba_detectors", ":", "List", "[", "ProbaDetector", "]", "=", "get_modules_to_try", "(", "\n", "args", ",", "\n", "\"proba_detectors\"", ",", "\n", "args", ".", "proba_detector", ",", "\n", "PROBA_DETECTORS", ",", "\n", "\"proba_detector\"", "in", "args", ".", "tune", ",", "\"proba_detector\"", "in", "args", ".", "ablate", ",", "\n", ")", "\n", "\n", "# ================ Prepare data ===================", "\n", "\n", "", "", "feature_extractor", "=", "None", "\n", "feature_dic", "=", "defaultdict", "(", "dict", ")", "\n", "train_mean", "=", "{", "}", "\n", "train_std", "=", "{", "}", "\n", "features", ",", "_", ",", "train_mean", ",", "train_std", ",", "_", ",", "_", "=", "get_test_features", "(", "\n", "args", ".", "data_dir", ",", "\n", "args", ".", "backbone", ",", "\n", "args", ".", "src_dataset", ",", "\n", "args", ".", "tgt_dataset", ",", "\n", "args", ".", "training", ",", "\n", "args", ".", "model_source", ",", "\n", "args", ".", "split", ",", "\n", ")", "\n", "for", "class_", "in", "features", ":", "\n", "        ", "feature_dic", "[", "class_", ".", "item", "(", ")", "]", "=", "features", "[", "class_", "]", "\n", "\n", "", "data_loader", "=", "get_task_loader", "(", "\n", "args", ",", "\n", "args", ".", "split", ",", "\n", "args", ".", "tgt_dataset", ",", "\n", "args", ".", "n_way", ",", "\n", "args", ".", "n_shot", ",", "\n", "args", ".", "n_id_query", ",", "\n", "args", ".", "n_ood_query", ",", "\n", "args", ".", "n_tasks", ",", "\n", "args", ".", "n_workers", ",", "\n", "feature_dic", ",", "\n", ")", "# If feature_dic is None, this loader will return raw PIL images !", "\n", "\n", "for", "feature_d", ",", "proba_d", ",", "classifier", "in", "itertools", ".", "product", "(", "\n", "feature_detectors", ",", "proba_detectors", ",", "classifiers", "\n", ")", ":", "\n", "\n", "# ==> Each run is an experiment with some set of hyper-parameters", "\n", "\n", "        ", "logger", ".", "info", "(", "f\"Classifier transforms : {classifier_transforms}\"", ")", "\n", "logger", ".", "info", "(", "f\"Detector transforms : {detector_transforms}\"", ")", "\n", "logger", ".", "info", "(", "f\"Feature detector:  {feature_d}\"", ")", "\n", "logger", ".", "info", "(", "f\"Proba detector: {proba_d}\"", ")", "\n", "logger", ".", "info", "(", "f\"Classifier {classifier}\"", ")", "\n", "args", ".", "feature_detector", "=", "str", "(", "feature_d", ")", "\n", "args", ".", "proba_detector", "=", "str", "(", "proba_d", ")", "\n", "args", ".", "classifier", "=", "str", "(", "classifier", ")", "\n", "\n", "sub_exp", "=", "(", "str", "(", "args", ".", "classifier", ")", "+", "str", "(", "args", ".", "feature_detector", ")", ")", ".", "replace", "(", "\"None\"", ",", "\"\"", ")", "\n", "args", ".", "res_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "res_root", ",", "sub_exp", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "res_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dump_config", "(", "args", ")", "\n", "\n", "set_random_seed", "(", "args", ".", "random_seed", ")", "\n", "\n", "if", "not", "check_if_record_exists", "(", "args", ",", "Path", "(", "args", ".", "res_root", ")", "/", "\"out.csv\"", ")", "or", "args", ".", "override", ":", "\n", "            ", "metrics", "=", "detect_outliers", "(", "\n", "args", "=", "args", ",", "\n", "feature_extractor", "=", "feature_extractor", ",", "\n", "detector_transforms", "=", "detector_transforms", ",", "\n", "classifier_transforms", "=", "classifier_transforms", ",", "\n", "train_mean", "=", "train_mean", ",", "\n", "train_std", "=", "train_std", ",", "\n", "classifier", "=", "classifier", ",", "\n", "feature_detector", "=", "feature_d", ",", "\n", "proba_detector", "=", "proba_d", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", ")", "\n", "save_results", "(", "args", ",", "metrics", ",", "args", ".", "res_root", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Experiment already done, and overriding not activated. Moving to the next.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.save_results": [[342, 346], ["src.utils.plots_and_metrics.update_csv", "loguru.logger.info", "pathlib.Path", "numpy.round"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.update_csv"], ["", "", "", "def", "save_results", "(", "args", ",", "metrics", ",", "res_root", ")", ":", "\n", "    ", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "logger", ".", "info", "(", "f\"{metric_name}: {np.round(100 * metrics[metric_name], 2)}\"", ")", "\n", "", "update_csv", "(", "args", ",", "metrics", ",", "path", "=", "Path", "(", "res_root", ")", "/", "\"out.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.detect_outliers": [[348, 523], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict.keys", "copy.deepcopy", "tqdm.tqdm", "probas_q.argmax", "metrics[].append", "inference.compute_confidence_interval", "numpy.round", "numpy.round", "matplotlib.Figure", "intra_task_metrics[].items", "matplotlib.legend", "matplotlib.savefig", "matplotlib.clf", "tensors2save.items", "collections.defaultdict", "feature_extractor.state_dict", "support_labels.long", "query_labels.long", "collections.defaultdict", "classifier_transforms", "detector_transforms", "classifier", "proba_detector", "feature_detector", "sklearn.metrics.roc_curve", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "metrics[].append", "metrics[].append", "metrics[].append", "metrics[].append", "metrics[].append", "metrics[].append", "numpy.array", "numpy.array", "inference.compute_confidence_interval", "matplotlib.gca", "torch.stack", "torch.stack", "torch.save", "torch.save", "loguru.logger.info", "len", "classifier", "tensors2save[].append", "outliers.numpy", "proba_detector.numpy", "outliers.numpy", "proba_detector.numpy", "sklearn.metrics.auc", "len", "plt.gca.scatter", "numpy.arange", "plt.gca.plot", "plt.gca.fill_between", "pathlib.Path", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "eval", "outliers.sum().item", "outliers.size", "len", "pathlib.Path", "outliers.sum", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.compute_confidence_interval", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.compute_confidence_interval", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot"], ["", "def", "detect_outliers", "(", "\n", "args", ",", "\n", "classifier_transforms", ",", "\n", "detector_transforms", ",", "\n", "classifier", ",", "\n", "feature_detector", ",", "\n", "proba_detector", ",", "\n", "data_loader", ",", "\n", "train_mean", ",", "\n", "train_std", ",", "\n", "feature_extractor", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "tensors2save", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "=", "defaultdict", "(", "list", ")", "\n", "metrics", ":", "Dict", "[", "str", ",", "List", "[", "float", "]", "]", "=", "defaultdict", "(", "list", ")", "\n", "intra_task_metrics", "=", "defaultdict", "(", "\n", "lambda", ":", "defaultdict", "(", "list", ")", "\n", ")", "# used to monitor the average evolution of some metric \\", "\n", "# within a task (during inference)", "\n", "figures", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "# not really used anymore", "\n", "\n", "if", "feature_extractor", "is", "not", "None", ":", "\n", "        ", "initial_state_dict", "=", "deepcopy", "(", "feature_extractor", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "for", "task_id", ",", "(", "support", ",", "support_labels", ",", "query", ",", "query_labels", ",", "outliers", ")", "in", "enumerate", "(", "\n", "tqdm", "(", "data_loader", ")", "\n", ")", ":", "\n", "\n", "        ", "support_labels", ",", "query_labels", "=", "support_labels", ".", "long", "(", ")", ",", "query_labels", ".", "long", "(", ")", "\n", "\n", "# ====== Extract features and transform them ======", "\n", "if", "feature_extractor", "is", "None", ":", "\n", "            ", "transformed_features", "=", "defaultdict", "(", "dict", ")", "\n", "support_features", "=", "support", "\n", "query_features", "=", "query", "\n", "\n", "# === Transforming features ===", "\n", "(", "\n", "transformed_features", "[", "\"cls_sup\"", "]", ",", "\n", "transformed_features", "[", "\"cls_query\"", "]", ",", "\n", ")", "=", "classifier_transforms", "(", "\n", "raw_feat_s", "=", "support_features", ",", "\n", "raw_feat_q", "=", "query_features", ",", "\n", "train_mean", "=", "deepcopy", "(", "train_mean", ")", ",", "\n", "train_std", "=", "deepcopy", "(", "train_std", ")", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "query_labels", "=", "query_labels", ",", "\n", "outliers", "=", "outliers", ",", "\n", "intra_task_metrics", "=", "intra_task_metrics", ",", "\n", "figures", "=", "figures", ",", "\n", ")", "\n", "(", "\n", "transformed_features", "[", "\"det_sup\"", "]", ",", "\n", "transformed_features", "[", "\"det_query\"", "]", ",", "\n", ")", "=", "detector_transforms", "(", "\n", "raw_feat_s", "=", "support_features", ",", "\n", "raw_feat_q", "=", "query_features", ",", "\n", "train_mean", "=", "deepcopy", "(", "train_mean", ")", ",", "\n", "train_std", "=", "deepcopy", "(", "train_std", ")", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "query_labels", "=", "query_labels", ",", "\n", "outliers", "=", "outliers", ",", "\n", "intra_task_metrics", "=", "intra_task_metrics", ",", "\n", "figures", "=", "figures", ",", "\n", ")", "\n", "# ====== Classification + OOD detection ======", "\n", "\n", "", "if", "feature_detector", "is", "None", ":", "# For methods that use a prediction-based detector", "\n", "            ", "assert", "proba_detector", "is", "not", "None", "\n", "probas_s", ",", "probas_q", "=", "classifier", "(", "\n", "support_features", "=", "transformed_features", "[", "\"cls_sup\"", "]", ",", "\n", "query_features", "=", "transformed_features", "[", "\"cls_query\"", "]", ",", "\n", "train_mean", "=", "deepcopy", "(", "train_mean", ")", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "intra_task_metrics", "=", "intra_task_metrics", ",", "\n", "query_labels", "=", "query_labels", ",", "\n", "outliers", "=", "outliers", ",", "\n", ")", "\n", "outlier_scores", "=", "proba_detector", "(", "support_probas", "=", "probas_s", ",", "query_probas", "=", "probas_q", ")", "\n", "\n", "", "else", ":", "#  For those that work on features that use a prediction-based detector", "\n", "            ", "output", "=", "feature_detector", "(", "\n", "support_features", "=", "transformed_features", "[", "\"det_sup\"", "]", ",", "\n", "query_features", "=", "transformed_features", "[", "\"det_query\"", "]", ",", "\n", "train_mean", "=", "deepcopy", "(", "train_mean", ")", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "query_labels", "=", "query_labels", ",", "\n", "outliers", "=", "outliers", ",", "\n", "intra_task_metrics", "=", "intra_task_metrics", ",", "\n", "figures", "=", "figures", ",", "\n", ")", "\n", "if", "len", "(", "output", ")", "==", "3", ":", "#  Open set methods perform classif and OOD detection at the same time", "\n", "                ", "probas_s", ",", "probas_q", ",", "outlier_scores", "=", "output", "\n", "", "else", ":", "\n", "                ", "outlier_scores", "=", "output", "\n", "probas_s", ",", "probas_q", "=", "classifier", "(", "\n", "support_features", "=", "transformed_features", "[", "\"cls_sup\"", "]", ",", "\n", "query_features", "=", "transformed_features", "[", "\"cls_query\"", "]", ",", "\n", "train_mean", "=", "train_mean", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "intra_task_metrics", "=", "intra_task_metrics", ",", "\n", "query_labels", "=", "query_labels", ",", "\n", "outliers", "=", "outliers", ",", "\n", ")", "\n", "\n", "", "", "predictions", "=", "probas_q", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "# ====== Store predictions in case it needs saving ====", "\n", "\n", "if", "args", ".", "save_predictions", ":", "\n", "            ", "for", "array_name", "in", "[", "'probas_q'", ",", "'outliers'", ",", "'query_labels'", ",", "'outlier_scores'", "]", ":", "\n", "                ", "tensors2save", "[", "array_name", "]", ".", "append", "(", "eval", "(", "array_name", ")", ")", "\n", "\n", "# ====== Tracking metrics ======", "\n", "\n", "", "", "acc", "=", "(", "\n", "(", "predictions", "[", "outliers", "==", "0", "]", "==", "query_labels", "[", "outliers", "==", "0", "]", ")", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "metrics", "[", "\"acc\"", "]", ".", "append", "(", "acc", ")", "\n", "if", "args", ".", "n_ood_query", ":", "\n", "            ", "fp_rate", ",", "tp_rate", ",", "_", "=", "roc_curve", "(", "outliers", ".", "numpy", "(", ")", ",", "outlier_scores", ".", "numpy", "(", ")", ")", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "\n", "outliers", ".", "numpy", "(", ")", ",", "outlier_scores", ".", "numpy", "(", ")", "\n", ")", "\n", "aupr", "=", "auc_fn", "(", "recall", ",", "precision", ")", "\n", "precision_at_90", "=", "precision", "[", "recall", ">=", "0.9", "]", "[", "-", "1", "]", "\n", "recall_at_90", "=", "recall", "[", "precision", ">=", "0.9", "]", "[", "0", "]", "\n", "metrics", "[", "\"rocauc\"", "]", ".", "append", "(", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", ")", "\n", "metrics", "[", "\"prec_at_90\"", "]", ".", "append", "(", "precision_at_90", ")", "\n", "metrics", "[", "\"rec_at_90\"", "]", ".", "append", "(", "recall_at_90", ")", "\n", "metrics", "[", "\"aupr\"", "]", ".", "append", "(", "aupr", ")", "\n", "metrics", "[", "\"rec_at_90\"", "]", ".", "append", "(", "recall_at_90", ")", "\n", "metrics", "[", "\"outlier_ratio\"", "]", ".", "append", "(", "outliers", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "outliers", ".", "size", "(", "0", ")", ")", "\n", "\n", "# ====== Computing mean and std of metrics across tasks ======", "\n", "\n", "", "", "final_metrics", "=", "{", "}", "\n", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "mean", ",", "std", "=", "compute_confidence_interval", "(", "\n", "np", ".", "array", "(", "metrics", "[", "metric_name", "]", ")", ",", "ignore_value", "=", "255", "\n", ")", "\n", "final_metrics", "[", "f\"mean_{metric_name}\"", "]", "=", "np", ".", "round", "(", "mean", ",", "4", ")", "\n", "final_metrics", "[", "f\"std_{metric_name}\"", "]", "=", "np", ".", "round", "(", "std", ",", "4", ")", "\n", "\n", "# ====== Quick intra-task metrics ======", "\n", "\n", "", "for", "title", "in", "intra_task_metrics", ".", "keys", "(", ")", ":", "\n", "        ", "fig", "=", "plt", ".", "Figure", "(", "(", "10", ",", "10", ")", ",", "dpi", "=", "200", ")", "\n", "for", "legend", ",", "values", "in", "intra_task_metrics", "[", "title", "]", ".", "items", "(", ")", ":", "\n", "            ", "array", "=", "np", ".", "array", "(", "values", ")", "\n", "assert", "len", "(", "array", ".", "shape", ")", "==", "2", "\n", "m", ",", "pm", "=", "compute_confidence_interval", "(", "array", ",", "ignore_value", "=", "255", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "if", "array", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "ax", ".", "scatter", "(", "[", "0", "]", ",", "m", ",", "c", "=", "\"r\"", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "np", ".", "arange", "(", "len", "(", "m", ")", ")", "\n", "ax", ".", "plot", "(", "m", ",", "label", "=", "legend", ")", "\n", "ax", ".", "fill_between", "(", "x", ",", "m", "-", "pm", ",", "m", "+", "pm", ",", "alpha", "=", "0.5", ")", "\n", "", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "Path", "(", "args", ".", "res_dir", ")", "/", "f\"{title}.png\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "# ====== Save predictions and gts in case ====", "\n", "\n", "", "if", "args", ".", "save_predictions", ":", "\n", "        ", "for", "array_name", ",", "tensor_list", "in", "tensors2save", ".", "items", "(", ")", ":", "\n", "            ", "tensor", "=", "torch", ".", "stack", "(", "tensor_list", ",", "0", ")", "\n", "torch", ".", "save", "(", "tensor", ",", "Path", "(", "args", ".", "res_dir", ")", "/", "f'{array_name}.pt'", ")", "\n", "logger", ".", "info", "(", "f\"Saved {Path(args.res_dir) / array_name}.pt'\"", ")", "\n", "\n", "", "", "return", "final_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.inference.compute_confidence_interval": [[525, 553], ["len", "numpy.sqrt", "numpy.squeeze().astype", "pm.astype.astype", "numpy.ones_like", "numpy.sum", "np.ones_like.sum", "np.ones_like.sum", "numpy.sqrt", "numpy.squeeze", "np.ones_like.sum"], "function", ["None"], ["", "def", "compute_confidence_interval", "(", "\n", "data", ":", "np", ".", "ndarray", ",", "\n", "axis", "=", "0", ",", "\n", "ignore_value", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n    Compute 95% confidence interval\n    :param data: An array of mean accuracy (or mAP) across a number of sampled episodes.\n    :return: the 95% confidence interval for this data.\n    \"\"\"", "\n", "assert", "len", "(", "data", ")", "\n", "if", "ignore_value", "is", "None", ":", "\n", "        ", "valid", "=", "np", ".", "ones_like", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "valid", "=", "data", "!=", "ignore_value", "\n", "", "m", "=", "np", ".", "sum", "(", "data", "*", "valid", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "/", "valid", ".", "sum", "(", "\n", "axis", "=", "axis", ",", "keepdims", "=", "True", "\n", ")", "\n", "# np.mean(data, axis=axis)", "\n", "std", "=", "np", ".", "sqrt", "(", "(", "(", "data", "-", "m", ")", "**", "2", "*", "valid", ")", ".", "sum", "(", "axis", "=", "axis", ")", "/", "valid", ".", "sum", "(", "axis", "=", "axis", ")", ")", "\n", "# std = np.std(data, axis=axis)", "\n", "\n", "pm", "=", "1.96", "*", "(", "std", "/", "np", ".", "sqrt", "(", "valid", ".", "sum", "(", "axis", "=", "axis", ")", ")", ")", "\n", "\n", "m", "=", "np", ".", "squeeze", "(", "m", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "pm", "=", "pm", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "return", "m", ",", "pm", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.TaskSampler.__init__": [[19, 53], ["torch.utils.data.Sampler.__init__", "hasattr", "enumerate", "sampler.TaskSampler.items_per_label.keys", "sampler.TaskSampler.items_per_label[].append"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "Dataset", ",", "\n", "n_way", ":", "int", ",", "\n", "n_shot", ":", "int", ",", "\n", "n_id_query", ":", "int", ",", "\n", "n_ood_query", ":", "int", ",", "\n", "n_tasks", ":", "int", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dataset: dataset from which to sample classification tasks. Must have a field 'label': a\n                list of length len(dataset) containing containing the labels of all images.\n            n_way: number of classes in one task\n            n_shot: number of support images for each class in one task\n            n_query: number of query images for each class in one task\n            n_tasks: number of tasks to sample\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "data_source", "=", "None", ")", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_shot", "=", "n_shot", "\n", "self", ".", "n_id_query", "=", "n_id_query", "\n", "self", ".", "n_ood_query", "=", "n_ood_query", "\n", "self", ".", "n_tasks", "=", "n_tasks", "\n", "self", ".", "items_per_label", "=", "{", "}", "\n", "\n", "assert", "hasattr", "(", "\n", "dataset", ",", "\"labels\"", "\n", ")", ",", "\"TaskSampler needs a dataset with a field 'label' containing the labels of all images.\"", "\n", "for", "item", ",", "label", "in", "enumerate", "(", "dataset", ".", "labels", ")", ":", "\n", "            ", "if", "label", "in", "self", ".", "items_per_label", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "items_per_label", "[", "label", "]", ".", "append", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "items_per_label", "[", "label", "]", "=", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.TaskSampler.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.TaskSampler.__iter__": [[57, 59], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.TaskSampler.episodic_collate_fn": [[60, 64], ["None"], "methods", ["None"], ["", "def", "episodic_collate_fn", "(", "\n", "self", ",", "input_data", ":", "List", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.OpenQuerySamplerOnFeatures.__iter__": [[67, 99], ["range", "random.sample", "random.sample", "random.sample", "random.sample", "sampler.OpenQuerySamplerOnFeatures.items_per_label.keys", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.sample", "random.sample", "random.sample", "random.sample", "enumerate", "random.sample", "random.sample", "random.sample", "random.sample", "enumerate", "random.sample", "random.sample", "random.sample", "random.sample", "enumerate"], "methods", ["None"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "n_tasks", ")", ":", "\n", "# TODO: allow customizable shape of the open query task", "\n", "            ", "all_labels", "=", "random", ".", "sample", "(", "self", ".", "items_per_label", ".", "keys", "(", ")", ",", "self", ".", "n_way", "*", "2", ")", "\n", "support_labels", "=", "all_labels", "[", ":", "self", ".", "n_way", "]", "\n", "open_set_labels", "=", "all_labels", "[", "self", ".", "n_way", ":", "]", "\n", "id_samples_per_class", "=", "[", "self", ".", "n_id_query", "]", "*", "self", ".", "n_way", "\n", "ood_samples_per_class", "=", "[", "self", ".", "n_ood_query", "]", "*", "self", ".", "n_way", "\n", "\n", "\n", "yield", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "tensor", "(", "\n", "random", ".", "sample", "(", "self", ".", "items_per_label", "[", "label", "]", ",", "self", ".", "n_shot", ")", "\n", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "support_labels", ")", "\n", "]", "\n", "+", "[", "\n", "torch", ".", "tensor", "(", "\n", "random", ".", "sample", "(", "\n", "self", ".", "items_per_label", "[", "label", "]", ",", "id_samples_per_class", "[", "i", "]", "\n", ")", "\n", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "support_labels", ")", "\n", "]", "\n", "+", "[", "\n", "torch", ".", "tensor", "(", "\n", "random", ".", "sample", "(", "\n", "self", ".", "items_per_label", "[", "label", "]", ",", "ood_samples_per_class", "[", "i", "]", "\n", ")", "\n", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "open_set_labels", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.sampler.OpenQuerySamplerOnFeatures.episodic_collate_fn": [[102, 167], ["list", "set", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "dict.fromkeys", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list.index", "list.index", "list.index", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "episodic_collate_fn", "(", "\n", "self", ",", "input_data", ":", "List", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Overwrite episodic_collate_fn from TaskSampler.\n        Args:\n            input_data: each element is a tuple containing:\n                - an image (or feature vector) as a  torch Tensor\n                - the label of this image\n        Returns:\n            tuple(Tensor, Tensor, Tensor, Tensor, list[int]): respectively:\n                - support images,\n                - their labels,\n                - query images,\n                - their labels,\n                - the dataset class ids of the class sampled in the episode\n        \"\"\"", "\n", "true_class_ids", "=", "list", "(", "\n", "dict", ".", "fromkeys", "(", "[", "x", "[", "1", "]", "for", "x", "in", "input_data", "]", ")", "\n", ")", "# This way we keep class orders", "\n", "\n", "support_data", "=", "input_data", "[", ":", "self", ".", "n_way", "*", "self", ".", "n_shot", "]", "\n", "in_set_labels", "=", "set", "(", "[", "x", "[", "1", "]", "for", "x", "in", "support_data", "]", ")", "\n", "id_query", "=", "[", "\n", "x", "for", "x", "in", "input_data", "[", "self", ".", "n_way", "*", "self", ".", "n_shot", ":", "]", "if", "x", "[", "1", "]", "in", "in_set_labels", "\n", "]", "\n", "ood_query", "=", "[", "\n", "x", "\n", "for", "x", "in", "input_data", "[", "self", ".", "n_way", "*", "self", ".", "n_shot", ":", "]", "\n", "if", "x", "[", "1", "]", "not", "in", "in_set_labels", "\n", "]", "\n", "\n", "\n", "# Preparing labels", "\n", "support_labels", "=", "torch", ".", "Tensor", "(", "\n", "[", "true_class_ids", ".", "index", "(", "x", "[", "1", "]", ")", "for", "x", "in", "support_data", "]", "\n", ")", "\n", "id_query_labels", "=", "torch", ".", "Tensor", "(", "[", "true_class_ids", ".", "index", "(", "x", "[", "1", "]", ")", "for", "x", "in", "id_query", "]", ")", "\n", "ood_query_labels", "=", "torch", ".", "Tensor", "(", "[", "true_class_ids", ".", "index", "(", "x", "[", "1", "]", ")", "for", "x", "in", "ood_query", "]", ")", "\n", "query_labels", "=", "torch", ".", "cat", "(", "[", "id_query_labels", ",", "ood_query_labels", "]", ")", "\n", "\n", "# Preparing outlier gt", "\n", "outliers", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "len", "(", "id_query", ")", ")", ",", "torch", ".", "ones", "(", "len", "(", "ood_query", ")", ")", "]", ")", "\n", "\n", "# Preparing features", "\n", "support_images", "=", "torch", ".", "stack", "(", "\n", "[", "x", "[", "0", "]", "for", "x", "in", "support_data", "]", ",", "0", "\n", ")", "# [Ns, d_layer]", "\n", "query_images", "=", "torch", ".", "stack", "(", "\n", "[", "x", "[", "0", "]", "for", "x", "in", "id_query", "]", ",", "0", "\n", ")", "# [Ns, d_layer]", "\n", "if", "len", "(", "ood_query", ")", ":", "\n", "            ", "query_images", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "query_images", ",", "\n", "torch", ".", "stack", "(", "[", "x", "[", "0", "]", "for", "x", "in", "ood_query", "]", ",", "0", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "return", "(", "\n", "support_images", ",", "\n", "support_labels", ",", "\n", "query_images", ",", "\n", "query_labels", ",", "\n", "outliers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.ResNet.__init__": [[22, 75], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "widths", "=", "None", ",", "\n", "num_classes", "=", "1000", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "use_fc", "=", "False", ",", "\n", "imagenet_setup", "=", "False", ",", "\n", "avg_pool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "widths", "is", "None", ":", "\n", "            ", "widths", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "use_fc", "=", "use_fc", "\n", "self", ".", "avg_pool", "=", "avg_pool", "\n", "\n", "self", ".", "conv1", "=", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "imagenet_setup", "\n", "else", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "0", "]", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "widths", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "# Only used when self.use_fc is True", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "inplanes", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.ResNet._make_layer": [[76, 91], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torchvision.models.resnet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.ResNet.forward": [[92, 118], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.fc", "ValueError", "resnet.ResNet.layer3", "resnet.ResNet.layer2", "resnet.ResNet.layer1", "resnet.ResNet.relu", "resnet.ResNet.bn1", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "torch", ".", "flatten", "(", "\n", "self", ".", "avgpool", "(", "\n", "self", ".", "layer4", "(", "\n", "self", ".", "layer3", "(", "\n", "self", ".", "layer2", "(", "self", ".", "layer1", "(", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", ")", "\n", ")", "\n", ")", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "if", "self", ".", "avg_pool", ":", "\n", "            ", "features", "=", "torch", ".", "flatten", "(", "\n", "self", ".", "avgpool", "(", "features", ")", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "                ", "return", "self", ".", "fc", "(", "features", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"You can't use the fully connected layer without pooling features.\"", "\n", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet10": [[120, 124], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-10 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet12": [[126, 130], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet12", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "1", "]", ",", "widths", "=", "[", "64", ",", "160", ",", "320", ",", "640", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet18": [[132, 136], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet34": [[138, 142], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet50": [[144, 148], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet101": [[150, 154], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet152": [[156, 160], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet12imagenet": [[162, 172], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet12imagenet", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model with a bottleneck at the beginning.\"\"\"", "\n", "model", "=", "ResNet", "(", "\n", "BasicBlock", ",", "\n", "[", "1", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "widths", "=", "[", "64", ",", "160", ",", "320", ",", "640", "]", ",", "\n", "imagenet_setup", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.resnet.resnet18imagenet": [[174, 178], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18imagenet", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model with a bottleneck at the beginning.\"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "imagenet_setup", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.investigate_features.main": [[14, 36], ["loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "src.utils.plots_and_metrics.clustering_variances_ratio", "src.utils.plots_and_metrics.compute_mif_with_auroc", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "open", "pickle.load", "v.reshape", "loguru.logger.info", "src.utils.utils.normalize", "src.utils.utils.normalize.items", "len", "sum", "len", "src.utils.utils.normalize.values"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.clustering_variances_ratio", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.compute_mif_with_auroc", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["def", "main", "(", "features_path", ":", "Path", ",", "normalize_features", ":", "bool", "=", "True", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f\"Loading features from {features_path}\"", ")", "\n", "with", "open", "(", "features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "        ", "features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "# WRN returns a weird shape for the features (n_instances, n_channels, 1, 1)", "\n", "", "features", "=", "{", "k", ":", "v", ".", "reshape", "(", "v", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "if", "normalize_features", ":", "\n", "        ", "logger", ".", "info", "(", "\"Normalizing features\"", ")", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"Number of classes: {len(features)}\"", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Number of images: {sum(len(class_features) for class_features in features.values())}\"", "\n", ")", "\n", "\n", "ratio", ",", "sigma_within", ",", "sigma_between", "=", "clustering_variances_ratio", "(", "features", ")", "\n", "mean_imposture_factor", "=", "compute_mif_with_auroc", "(", "features", ")", "\n", "logger", ".", "info", "(", "f\"Metrics:\"", ")", "\n", "# logger.info(f\"Intra-class variance: {sigma_within}\")", "\n", "# logger.info(f\"Inter-class variance: {sigma_between}\")", "\n", "logger", ".", "info", "(", "f\"Variance ratio: {ratio}\"", ")", "\n", "logger", ".", "info", "(", "f\"MIF: {mean_imposture_factor}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.compute_features.parse_args": [[10, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.parse_args"], ["def", "parse_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--src_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"mini_imagenet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tgt_dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"mini_imagenet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--backbone\"", ",", "type", "=", "str", ",", "default", "=", "\"resnet12\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_source\"", ",", "type", "=", "str", ",", "default", "=", "\"feat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--training\"", ",", "type", "=", "str", ",", "default", "=", "\"standard\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--override\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"False\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--keep_all_train_features\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"False\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.compute_features.main": [[30, 102], ["loguru.logger.info", "src.utils.data_fetchers.get_classic_loader", "loguru.logger.info", "src.utils.utils.load_model", "output_file.parent.mkdir", "output_file.exists", "loguru.logger.info", "src.utils.utils.compute_features", "loguru.logger.info", "pathlib.Path().with_suffix", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "loguru.logger.warning", "loguru.logger.warning", "open", "_pickle.dump", "open", "_pickle.dump", "pathlib.Path", "labels.unique", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_classic_loader", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.load_model", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.compute_features"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Fetching data...\"", ")", "\n", "dataset", ",", "_", ",", "data_loader", "=", "get_classic_loader", "(", "\n", "args", ",", "\n", "dataset_name", "=", "args", ".", "tgt_dataset", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Building model...\"", ")", "\n", "if", "args", ".", "model_source", "==", "\"timm\"", ":", "\n", "        ", "weights", "=", "None", "\n", "stem", "=", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}\"", "# used for saving features downstream", "\n", "", "else", ":", "\n", "        ", "weights", "=", "(", "\n", "Path", "(", "args", ".", "data_dir", ")", "\n", "/", "\"models\"", "\n", "/", "args", ".", "training", "\n", "/", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}.pth\"", "\n", ")", "\n", "stem", "=", "weights", ".", "stem", "\n", "", "feature_extractor", "=", "load_model", "(", "\n", "args", ",", "args", ".", "backbone", ",", "weights", ",", "args", ".", "src_dataset", ",", "args", ".", "device", "\n", ")", "\n", "\n", "pickle_name", "=", "Path", "(", "stem", ")", ".", "with_suffix", "(", "f\".pickle\"", ")", ".", "name", "\n", "output_file", "=", "(", "\n", "Path", "(", "\"data\"", ")", "\n", "/", "\"features\"", "\n", "/", "args", ".", "src_dataset", "\n", "/", "args", ".", "tgt_dataset", "\n", "/", "args", ".", "split", "\n", "/", "args", ".", "training", "\n", "/", "pickle_name", "\n", ")", "\n", "output_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# First checking whether those features already exist", "\n", "if", "output_file", ".", "exists", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"File {output_file} already exists.\"", ")", "\n", "if", "args", ".", "override", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Overriding.\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Not overriding.\"", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "f\"File {output_file} does not exist. Performing extraction.\"", ")", "\n", "", "logger", ".", "info", "(", "\"Computing features...\"", ")", "\n", "features", ",", "labels", "=", "compute_features", "(", "\n", "feature_extractor", ",", "\n", "data_loader", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "keep_all_train_features", "=", "args", ".", "keep_all_train_features", ",", "\n", "debug", "=", "args", ".", "debug", "\n", ")", "\n", "\n", "# if output_file is None:", "\n", "\n", "if", "args", ".", "split", "==", "\"test\"", "or", "args", ".", "split", "==", "\"val\"", "or", "args", ".", "keep_all_train_features", ":", "\n", "        ", "logger", ".", "info", "(", "\"Packing by class...\"", ")", "\n", "packed_features", "=", "{", "\n", "class_integer_label", ":", "features", "[", "labels", "==", "class_integer_label", "]", "\n", "for", "class_integer_label", "in", "labels", ".", "unique", "(", ")", "\n", "}", "\n", "with", "open", "(", "output_file", ",", "\"wb\"", ")", "as", "stream", ":", "\n", "            ", "cpickle", ".", "dump", "(", "packed_features", ",", "stream", ",", "protocol", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Dumping average feature map...\"", ")", "\n", "with", "open", "(", "output_file", ",", "\"wb\"", ")", "as", "stream", ":", "\n", "            ", "cpickle", ".", "dump", "(", "features", ",", "stream", ",", "protocol", "=", "-", "1", ")", "\n", "", "", "logger", ".", "info", "(", "f\"Dumped features in {output_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._Loss.__init__": [[9, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "args", ":", "argparse", ".", "Namespace", ",", "num_classes", ":", "int", ",", "reduction", ":", "str", "=", "\"mean\"", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduction", ":", "str", "=", "reduction", "\n", "assert", "0", "<=", "args", ".", "label_smoothing", "<", "1", "\n", "self", ".", "label_smoothing", ":", "float", "=", "args", ".", "label_smoothing", "\n", "self", ".", "num_classes", ":", "int", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._Loss.smooth_one_hot": [[19, 28], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty.fill_", "torch.empty.fill_", "torch.empty.scatter_", "torch.empty.scatter_", "targets.unsqueeze", "targets.size"], "methods", ["None"], ["", "def", "smooth_one_hot", "(", "self", ",", "targets", ":", "Tensor", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_targets", "=", "torch", ".", "empty", "(", "\n", "size", "=", "(", "targets", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", ",", "device", "=", "targets", ".", "device", "\n", ")", "\n", "new_targets", ".", "fill_", "(", "self", ".", "label_smoothing", "/", "(", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "new_targets", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1.0", "-", "self", ".", "label_smoothing", ")", "\n", "\n", "", "return", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._Loss.loss_fn": [[29, 31], ["None"], "methods", ["None"], ["", "def", "loss_fn", "(", "self", ",", "logits", ":", "Tensor", ",", "one_hot_targets", ":", "Tensor", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._CrossEntropy.loss_fn": [[34, 42], ["torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax.", "loss.mean"], "methods", ["None"], ["    ", "def", "loss_fn", "(", "self", ",", "logits", ":", "Tensor", ",", "one_hot_targets", ":", "Tensor", ")", ":", "\n", "        ", "logsoftmax_fn", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "logsoftmax", "=", "logsoftmax_fn", "(", "logits", ")", "\n", "loss", "=", "-", "(", "one_hot_targets", "*", "logsoftmax", ")", ".", "sum", "(", "1", ")", "\n", "if", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._CrossEntropy.forward": [[43, 47], ["losses._CrossEntropy.smooth_one_hot", "losses._CrossEntropy.loss_fn"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._Loss.smooth_one_hot", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.losses._CrossEntropy.loss_fn"], ["", "", "def", "forward", "(", "self", ",", "logits", ":", "Tensor", ",", "targets", ":", "Tensor", ")", ":", "\n", "\n", "        ", "one_hot_targets", "=", "self", ".", "smooth_one_hot", "(", "targets", ")", "\n", "return", "self", ".", "loss_fn", "(", "logits", ",", "one_hot_targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.__init__": [[25, 40], ["torch.nn.Module.__init__", "src.feature_transforms.IdentityTransformer", "src.feature_transforms.IdentityTransformer"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "prepool_feature_transformer", ":", "AbstractFeatureTransformer", "=", "None", ",", "\n", "postpool_feature_transformer", ":", "AbstractFeatureTransformer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prepool_feature_transformer", "=", "(", "\n", "prepool_feature_transformer", "\n", "if", "prepool_feature_transformer", "\n", "else", "IdentityTransformer", "(", ")", "\n", ")", "\n", "self", ".", "postpool_feature_transformer", "=", "(", "\n", "postpool_feature_transformer", "\n", "if", "postpool_feature_transformer", "\n", "else", "IdentityTransformer", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.forward": [[42, 50], ["outlier_detection_methods.AbstractOutlierDetector.transform_features", "outlier_detection_methods.AbstractOutlierDetector.detect_outliers"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.transform_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.detect_outliers"], ["", "def", "forward", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "support_features", ",", "query_features", "=", "self", ".", "transform_features", "(", "\n", "support_features", ",", "query_features", "\n", ")", "\n", "return", "self", ".", "detect_outliers", "(", "\n", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.detect_outliers": [[52, 57], ["NotImplementedError"], "methods", ["None"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"All outlier detectors must implement detect_outliers().\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.transform_features": [[59, 82], ["outlier_detection_methods.AbstractOutlierDetector.prepool_feature_transformer", "src.utils.utils.pool_features", "outlier_detection_methods.AbstractOutlierDetector.postpool_feature_transformer"], "methods", ["None"], ["", "def", "transform_features", "(", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Performs an (optional) normalization of feature maps or feature vectors,\n        then average pooling to obtain feature vectors in all cases,\n        then another (optional) normalization.\n        \"\"\"", "\n", "\n", "# Pre-pooling transforms", "\n", "support_features", ",", "query_features", "=", "self", ".", "prepool_feature_transformer", "(", "\n", "support_features", ",", "query_features", "\n", ")", "\n", "\n", "# Average pooling", "\n", "query_features", ",", "support_features", "=", "pool_features", "(", "\n", "query_features", ",", "support_features", "\n", ")", "\n", "\n", "# Post-pooling transforms", "\n", "support_features", ",", "query_features", "=", "self", ".", "postpool_feature_transformer", "(", "\n", "support_features", ",", "query_features", "\n", ")", "\n", "\n", "return", "support_features", ",", "query_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args": [[83, 88], ["inspect.signature", "cls", "args.items", "inspect.signature.parameters.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ":", "Dict", ")", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "cls", ".", "__init__", ")", "\n", "return", "cls", "(", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", "if", "k", "in", "signature", ".", "parameters", ".", "keys", "(", ")", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.RenyiEntropyOutlierDetector.__init__": [[92, 95], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "few_shot_classifier", ":", "AbstractFewShotMethod", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "few_shot_classifier", "=", "few_shot_classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.RenyiEntropyOutlierDetector.detect_outliers": [[96, 106], ["outlier_detection_methods.RenyiEntropyOutlierDetector.few_shot_classifier", "src.utils.outlier_detectors.get_pseudo_renyi_entropy"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.get_pseudo_renyi_entropy"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "_", ",", "query_predictions", "=", "self", ".", "few_shot_classifier", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "\n", "return", "get_pseudo_renyi_entropy", "(", "query_predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.ShannonEntropyOutlierDetector.__init__": [[109, 112], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "few_shot_classifier", ":", "AbstractFewShotMethod", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "few_shot_classifier", "=", "few_shot_classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.ShannonEntropyOutlierDetector.detect_outliers": [[113, 123], ["outlier_detection_methods.ShannonEntropyOutlierDetector.few_shot_classifier", "src.utils.outlier_detectors.get_shannon_entropy"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.get_shannon_entropy"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "_", ",", "query_predictions", "=", "self", ".", "few_shot_classifier", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "\n", "return", "get_shannon_entropy", "(", "query_predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.RenyiDivergenceOutlierDetector.__init__": [[126, 138], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "few_shot_classifier", ":", "AbstractFewShotMethod", ",", "\n", "alpha", ":", "int", "=", "2", ",", "\n", "method", ":", "str", "=", "\"topk\"", ",", "\n", "k", ":", "int", "=", "3", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "few_shot_classifier", "=", "few_shot_classifier", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.RenyiDivergenceOutlierDetector.detect_outliers": [[139, 154], ["outlier_detection_methods.RenyiDivergenceOutlierDetector.few_shot_classifier", "src.utils.outlier_detectors.compute_outlier_scores_with_renyi_divergence"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.compute_outlier_scores_with_renyi_divergence"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "support_predictions", ",", "query_predictions", "=", "self", ".", "few_shot_classifier", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "\n", "return", "compute_outlier_scores_with_renyi_divergence", "(", "\n", "soft_predictions", "=", "query_predictions", ",", "\n", "soft_support_predictions", "=", "support_predictions", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "k", "=", "self", ".", "k", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetectorOnFeatures.initialize_detector": [[158, 161], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "initialize_detector", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"All outlier detectors on features must implement initialize_detectors.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetectorOnFeatures.detect_outliers": [[163, 169], ["outlier_detection_methods.AbstractOutlierDetectorOnFeatures.initialize_detector", "outlier_detection_methods.AbstractOutlierDetectorOnFeatures.fit", "torch.from_numpy", "outlier_detection_methods.AbstractOutlierDetectorOnFeatures.decision_function"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.NearestNeighborRatio.initialize_detector", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "detector", "=", "self", ".", "initialize_detector", "(", ")", "\n", "detector", ".", "fit", "(", "support_features", ")", "\n", "return", "torch", ".", "from_numpy", "(", "1", "-", "detector", ".", "decision_function", "(", "query_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.LOFOutlierDetector.__init__": [[172, 181], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_neighbors", ":", "int", "=", "3", ",", "\n", "metric", ":", "str", "=", "\"euclidean\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "metric", "=", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.LOFOutlierDetector.initialize_detector": [[182, 185], ["pyod.models.lof.LocalOutlierFactor"], "methods", ["None"], ["", "def", "initialize_detector", "(", "self", ")", ":", "\n", "        ", "return", "LocalOutlierFactor", "(", "\n", "n_neighbors", "=", "self", ".", "n_neighbors", ",", "novelty", "=", "True", ",", "metric", "=", "self", ".", "metric", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.IForestOutlierDetector.__init__": [[189, 192], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_estimators", ":", "int", "=", "100", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_estimators", "=", "n_estimators", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.IForestOutlierDetector.initialize_detector": [[193, 195], ["pyod.models.iforest.IForest"], "methods", ["None"], ["", "def", "initialize_detector", "(", "self", ")", ":", "\n", "        ", "return", "IForest", "(", "n_estimators", "=", "self", ".", "n_estimators", ",", "n_jobs", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.KNNOutlierDetector.__init__": [[198, 207], ["outlier_detection_methods.AbstractOutlierDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_neighbors", ":", "int", "=", "3", ",", "\n", "method", ":", "str", "=", "\"mean\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.KNNOutlierDetector.initialize_detector": [[208, 210], ["pyod.models.knn.KNN"], "methods", ["None"], ["", "def", "initialize_detector", "(", "self", ")", ":", "\n", "        ", "return", "KNN", "(", "n_neighbors", "=", "self", ".", "n_neighbors", ",", "method", "=", "self", ".", "method", ",", "n_jobs", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.SupervisedOutlierDetector.__init__": [[217, 233], ["outlier_detection_methods.AbstractOutlierDetector.__init__", "torch.from_numpy", "ValueError", "numpy.concatenate", "list", "base_features.values"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict_class_by_class", ":", "bool", "=", "True", ",", "\n", "base_features", ":", "Dict", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "base_features", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Missing base set features\"", ")", "\n", "", "self", ".", "base_features", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "concatenate", "(", "list", "(", "base_features", ".", "values", "(", ")", ")", ")", "\n", ")", "\n", "# Deprecated because we now have several possible normalization methods", "\n", "# if normalize_features:", "\n", "#     self.base_features = F.normalize(self.base_features, dim=-1)", "\n", "self", ".", "predict_class_by_class", "=", "predict_class_by_class", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.SupervisedOutlierDetector.detect_outliers": [[234, 267], ["torch.zeros", "range", "torch.cat", "torch.tensor", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "torch.cat", "torch.cat", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "torch.from_numpy", "torch.zeros.max", "sklearn.svm.SVC.predict_proba", "len", "torch.ones().multinomial", "torch.ones().multinomial", "sklearn.svm.SVC.predict_proba", "len", "len", "torch.eq().int", "torch.tensor", "torch.ones", "torch.ones", "len", "len", "torch.eq", "len"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "predict_class_by_class", ":", "\n", "            ", "predictions", "=", "torch", ".", "zeros", "(", "(", "len", "(", "query_labels", ")", ",", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "base_sample", "=", "self", ".", "base_features", "[", "\n", "torch", ".", "ones", "(", "len", "(", "self", ".", "base_features", ")", ")", ".", "multinomial", "(", "num_samples", "=", "25", ")", "\n", "]", "\n", "X", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "base_sample", "]", ")", "\n", "Y", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "1", "-", "torch", ".", "eq", "(", "support_labels", ",", "i", ")", ".", "int", "(", ")", ",", "\n", "+", "torch", ".", "tensor", "(", "len", "(", "base_sample", ")", "*", "[", "1", "]", ")", ",", "\n", "]", "\n", ")", "\n", "# st.write(Y)", "\n", "classifier", "=", "SVC", "(", "probability", "=", "True", ",", "class_weight", "=", "\"balanced\"", ")", "\n", "classifier", ".", "fit", "(", "X", ",", "Y", ")", "\n", "predictions", "[", ":", ",", "i", "]", "=", "torch", ".", "from_numpy", "(", "\n", "classifier", ".", "predict_proba", "(", "query_features", ")", "[", ":", ",", "0", "]", "\n", ")", "\n", "", "return", "predictions", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "            ", "base_sample", "=", "self", ".", "base_features", "[", "\n", "torch", ".", "ones", "(", "len", "(", "self", ".", "base_features", ")", ")", ".", "multinomial", "(", "num_samples", "=", "25", ")", "\n", "]", "\n", "X", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "base_sample", "]", ")", "\n", "Y", "=", "torch", ".", "tensor", "(", "len", "(", "support_features", ")", "*", "[", "0", "]", "+", "len", "(", "base_sample", ")", "*", "[", "1", "]", ")", "\n", "classifier", "=", "SVC", "(", "probability", "=", "True", ",", "class_weight", "=", "\"balanced\"", ")", "\n", "classifier", ".", "fit", "(", "X", ",", "Y", ")", "\n", "return", "classifier", ".", "predict_proba", "(", "query_features", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.KNNWithDispatchedClusters.detect_outliers": [[270, 297], ["torch.nn.Linear", "torch.nn.init.eye_", "torch.optim.Adam", "support_labels.repeat", "range", "torch.nn.Linear.detach", "torch.nn.Linear.detach", "outlier_detection_methods.KNNWithDispatchedClusters.initialize_detector", "outlier_detection_methods.KNNWithDispatchedClusters.fit", "torch.from_numpy", "torch.nn.Linear.parameters", "mask.sum", "torch.optim.Adam.zero_grad", "torch.nn.Linear.", "torch.nn.functional.normalize", "loss.backward", "torch.optim.Adam.step", "len", "torch.nn.Linear.", "torch.nn.Linear.", "outlier_detection_methods.KNNWithDispatchedClusters.decision_function", "torch.nn.functional.normalize.mm", "support_labels.repeat.eq"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.NearestNeighborRatio.initialize_detector", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["    ", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "dispatcher", "=", "nn", ".", "Linear", "(", "\n", "support_features", ".", "shape", "[", "1", "]", ",", "support_features", ".", "shape", "[", "1", "]", ",", "bias", "=", "False", "\n", ")", "\n", "nn", ".", "init", ".", "eye_", "(", "dispatcher", ".", "weight", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "dispatcher", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "\n", "repeated_labels", "=", "support_labels", ".", "repeat", "(", "(", "len", "(", "support_labels", ")", ",", "1", ")", ")", "\n", "mask", "=", "(", "(", "~", "repeated_labels", ".", "eq", "(", "repeated_labels", ".", "T", ")", "*", "2.0", ")", "-", "1.0", ")", ".", "triu", "(", "diagonal", "=", "1", ")", "\n", "mask", "=", "mask", "/", "mask", ".", "sum", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "transported_support", "=", "dispatcher", "(", "support_features", ")", "\n", "transported_support", "=", "F", ".", "normalize", "(", "transported_support", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "(", "transported_support", ".", "mm", "(", "transported_support", ".", "T", ")", "*", "mask", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "dispatched_support", "=", "dispatcher", "(", "support_features", ")", ".", "detach", "(", ")", "\n", "dispatched_queries", "=", "dispatcher", "(", "query_features", ")", ".", "detach", "(", ")", "\n", "\n", "detector", "=", "self", ".", "initialize_detector", "(", ")", "\n", "detector", ".", "fit", "(", "dispatched_support", ")", "\n", "return", "torch", ".", "from_numpy", "(", "1", "-", "detector", ".", "decision_function", "(", "dispatched_queries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.KNNWithDispatchedClusters.to_spherical": [[299, 321], ["torch.stack", "range", "math.sqrt", "range", "torch.tensor", "len", "torch.tensor.append", "math.sqrt", "torch.tensor.append", "torch.tensor.append", "len", "round", "math.acos", "math.acos", "math.acos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_spherical", "(", "tensor", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "line", "in", "tensor", ":", "\n", "            ", "r", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "line", ")", ")", ":", "\n", "                ", "r", "+=", "line", "[", "i", "]", "*", "line", "[", "i", "]", "\n", "", "r", "=", "math", ".", "sqrt", "(", "r", ")", "\n", "convert", "=", "[", "r", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "line", ")", "-", "2", ")", ":", "\n", "                ", "convert", ".", "append", "(", "round", "(", "math", ".", "acos", "(", "line", "[", "i", "]", "/", "r", ")", ",", "6", ")", ")", "\n", "r", "=", "math", ".", "sqrt", "(", "r", "*", "r", "-", "line", "[", "i", "]", "*", "line", "[", "i", "]", ")", "\n", "", "if", "line", "[", "-", "2", "]", ">=", "0", ":", "\n", "                ", "convert", ".", "append", "(", "math", ".", "acos", "(", "line", "[", "-", "2", "]", "/", "r", ")", ")", "\n", "", "else", ":", "\n", "                ", "convert", ".", "append", "(", "2", "*", "math", ".", "pi", "-", "math", ".", "acos", "(", "line", "[", "-", "2", "]", "/", "r", ")", ")", "\n", "", "convert", "=", "torch", ".", "tensor", "(", "convert", ")", "\n", "result", "+=", "[", "convert", "]", "\n", "\n", "", "result", "=", "torch", ".", "stack", "(", "result", ")", "\n", "\n", "return", "result", "[", ":", ",", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.KNNWithDispatchedClusters.to_rectangular": [[322, 340], ["torch.stack", "range", "torch.tensor.append", "torch.tensor.append", "torch.tensor", "torch.tensor.append", "math.sin", "len", "math.cos", "math.sin", "math.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_rectangular", "(", "tensor", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "line", "in", "tensor", ":", "\n", "            ", "r", "=", "1.0", "\n", "multi_sin", "=", "1", "\n", "convert", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "line", ")", "-", "1", ")", ":", "\n", "                ", "convert", ".", "append", "(", "r", "*", "multi_sin", "*", "math", ".", "cos", "(", "line", "[", "i", "]", ")", ")", "\n", "multi_sin", "*=", "math", ".", "sin", "(", "line", "[", "i", "]", ")", "\n", "", "convert", ".", "append", "(", "r", "*", "multi_sin", "*", "math", ".", "cos", "(", "line", "[", "-", "1", "]", ")", ")", "\n", "convert", ".", "append", "(", "r", "*", "multi_sin", "*", "math", ".", "sin", "(", "line", "[", "-", "1", "]", ")", ")", "\n", "convert", "=", "torch", ".", "tensor", "(", "convert", ")", "\n", "result", "+=", "[", "convert", "]", "\n", "\n", "", "result", "=", "torch", ".", "stack", "(", "result", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.NearestNeighborRatio.detect_outliers": [[343, 358], ["support_features.view", "torch.cdist", "query_to_classwise_nn.topk", "len", "torch.cdist.min", "support_labels.unique"], "methods", ["None"], ["    ", "def", "detect_outliers", "(", "\n", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "support_features_by_class", "=", "support_features", ".", "view", "(", "\n", "(", "len", "(", "support_labels", ".", "unique", "(", ")", ")", ",", "-", "1", ",", "support_features", ".", "shape", "[", "1", "]", ")", "\n", ")", "\n", "distances", "=", "torch", ".", "cdist", "(", "query_features", ",", "support_features_by_class", ")", "\n", "\n", "query_to_classwise_nn", "=", "distances", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "T", "\n", "\n", "top2_query_to_classwise_nn", "=", "query_to_classwise_nn", ".", "topk", "(", "\n", "k", "=", "2", ",", "dim", "=", "1", ",", "largest", "=", "False", "\n", ")", "[", "0", "]", "\n", "\n", "return", "top2_query_to_classwise_nn", "[", ":", ",", "1", "]", "/", "top2_query_to_classwise_nn", "[", ":", ",", "0", "]", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.NearestNeighborRatio.initialize_detector": [[359, 361], ["None"], "methods", ["None"], ["", "def", "initialize_detector", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.list_files.menu_selection": [[7, 28], ["list.sort", "print", "enumerate", "print", "print", "str().split", "isinstance", "list", "os.path.join", "print", "int", "list.iterdir", "str", "input"], "function", ["None"], ["def", "menu_selection", "(", "paths", ":", "Union", "[", "Path", ",", "List", "[", "Path", "]", "]", ")", "->", "List", "[", "Path", "]", ":", "\n", "    ", "\"\"\"\n    Ask user to select directiories from the current folder\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "        ", "paths", "=", "list", "(", "paths", ".", "iterdir", "(", ")", ")", "\n", "", "paths", ".", "sort", "(", ")", "\n", "print", "(", ")", "\n", "for", "i", ",", "dir_", "in", "enumerate", "(", "paths", ")", ":", "\n", "        ", "printable", "=", "join", "(", "*", "dir_", ".", "parts", "[", "-", "2", ":", "]", ")", "\n", "print", "(", "f\"{i} - {printable} \\n\"", ")", "\n", "\n", "", "print", "(", "f\"{i+1} - All \\n\"", ")", "\n", "\n", "print", "(", "\"Please enter corresponding digits (space separated)? \\n\"", ")", "\n", "str_ans", "=", "str", "(", "input", "(", ")", ")", ".", "split", "(", ")", "\n", "selected_digits", "=", "[", "int", "(", "x", ")", "for", "x", "in", "str_ans", "]", "\n", "if", "(", "i", "+", "1", ")", "in", "selected_digits", ":", "\n", "        ", "return", "paths", "\n", "", "else", ":", "\n", "        ", "return", "[", "paths", "[", "i", "]", "for", "i", "in", "selected_digits", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.get_pseudo_renyi_entropy": [[9, 19], ["torch.pow().sum().detach().cpu", "torch.pow().sum().detach", "torch.pow().sum", "torch.pow"], "function", ["None"], ["def", "get_pseudo_renyi_entropy", "(", "soft_predictions", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the pseudo-Renyi entropy of the prediction for each query, i.e. the sum of the\n        squares of each class' classification score.\n    Args:\n        soft_predictions: predictions before softmax, shape (n_query*n_way, feature_dimension)\n    Returns:\n        1-dim tensor of length (n_query*n_way) giving the prediction entropy for each query\n    \"\"\"", "\n", "return", "torch", ".", "pow", "(", "soft_predictions", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.get_shannon_entropy": [[21, 30], ["torch.log"], "function", ["None"], ["", "def", "get_shannon_entropy", "(", "soft_predictions", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute the Shannon entropy of the prediction for each query.\n    Args:\n        soft_predictions: predicted probabilities, shape (n_query*n_way, feature_dimension)\n    Returns:\n        1-dim tensor of length (n_query*n_way) giving the prediction entropy for each query\n    \"\"\"", "\n", "return", "(", "soft_predictions", "*", "torch", ".", "log", "(", "soft_predictions", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.compute_outlier_scores_with_renyi_divergence": [[32, 67], ["torch.log", "torch.pow().matmul", "ValueError", "pairwise_divergences.min", "[].mean", "torch.pow", "torch.pow", "pairwise_divergences.topk"], "function", ["None"], ["", "def", "compute_outlier_scores_with_renyi_divergence", "(", "\n", "soft_predictions", ":", "torch", ".", "Tensor", ",", "\n", "soft_support_predictions", ":", "torch", ".", "Tensor", ",", "\n", "alpha", ":", "int", "=", "2", ",", "\n", "method", ":", "str", "=", "\"topk\"", ",", "\n", "k", ":", "int", "=", "3", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Compute all Renyi divergences from query instances to support instances, and assign an outlier\n    score to each query from its divergence with it's \"neighbouring\" supports w.r.t. to this\n    divergence.\n    Args:\n        soft_predictions: predictions, shape (n_query*n_way, feature_dimension)\n        soft_support_predictions: predictions for support examples, shape (n_shot*n_way, feature_dimension)\n        alpha: parameter alpha for Renyi divergence\n        method: min or topk. min returns for each query its divergence with the \"nearest\" support\n            example. topk returns for each query with divergence with the k-th \"nearest\" support\n            example.\n        k: only used if method=topk. Defines the k.\n\n    Returns:\n        1-dim tensor of length (n_query*n_way) containing the outlier score of each query\n    \"\"\"", "\n", "pairwise_divergences", "=", "(", "1", "/", "(", "alpha", "-", "1", ")", ")", "*", "torch", ".", "log", "(", "\n", "torch", ".", "pow", "(", "soft_predictions", ",", "alpha", ")", ".", "matmul", "(", "\n", "torch", ".", "pow", "(", "soft_support_predictions", ",", "1", "-", "alpha", ")", ".", "T", "\n", ")", "\n", ")", "\n", "\n", "if", "method", "==", "\"min\"", ":", "\n", "        ", "return", "1", "-", "pairwise_divergences", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "method", "==", "\"topk\"", ":", "\n", "        ", "return", "1", "-", "pairwise_divergences", ".", "topk", "(", "k", ",", "dim", "=", "1", ",", "largest", "=", "False", ")", "[", "0", "]", ".", "mean", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Don't know this method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.detect_outliers": [[69, 91], ["tqdm.tqdm", "pandas.concat", "enumerate", "outlier_detection_df_list.append", "pandas.DataFrame", "outlier_detector"], "function", ["None"], ["", "", "def", "detect_outliers", "(", "outlier_detector", ",", "data_loader", ",", "n_way", ",", "n_query", ")", ":", "\n", "    ", "outlier_detection_df_list", "=", "[", "]", "\n", "for", "task_id", ",", "(", "\n", "support_features", ",", "\n", "support_labels", ",", "\n", "query_features", ",", "\n", "query_labels", ",", "\n", "_", ",", "\n", ")", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ")", ":", "\n", "        ", "outlier_detection_df_list", ".", "append", "(", "\n", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"task\"", ":", "task_id", ",", "\n", "\"outlier\"", ":", "(", "n_way", "*", "n_query", ")", "*", "[", "False", "]", "+", "(", "n_way", "*", "n_query", ")", "*", "[", "True", "]", ",", "\n", "\"outlier_score\"", ":", "outlier_detector", "(", "\n", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", "\n", ")", ",", "\n", "}", "\n", ")", "\n", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "outlier_detection_df_list", ",", "ignore_index", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.imagenet_val_utils.list_imagenet_val": [[23, 33], ["sorted", "class_names.append"], "function", ["None"], ["def", "list_imagenet_val", "(", "ilsvrc_root_dir", ":", "Path", ")", ":", "\n", "# image_paths = sorted((ilsvrc_root_dir / \"Data/CLS-LOC/val\").glob(\"*\"))", "\n", "# annotations = sorted((ilsvrc_root_dir / \"Annotations/CLS-LOC/val\").glob(\"*\"))", "\n", "    ", "image_paths", "=", "sorted", "(", "(", "ilsvrc_root_dir", "/", "\"val\"", ")", ".", "glob", "(", "\"**/*.JPEG\"", ")", ")", "\n", "class_names", "=", "[", "]", "\n", "for", "img_path", "in", "image_paths", ":", "\n", "        ", "class_name", "=", "img_path", ".", "parts", "[", "-", "2", "]", "\n", "class_names", ".", "append", "(", "class_name", ")", "\n", "\n", "", "return", "image_paths", ",", "class_names", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.plot_episode": [[18, 38], ["torchvision.utils.make_grid", "plots_and_metrics.plot_episode.matplotlib_imshow"], "function", ["None"], ["def", "plot_episode", "(", "support_images", ",", "query_images", ")", ":", "\n", "    ", "\"\"\"\n    Plot images of an episode, separating support and query images.\n    Args:\n        support_images (torch.Tensor): tensor of multiple-channel support images\n        query_images (torch.Tensor): tensor of multiple-channel query images\n    \"\"\"", "\n", "\n", "def", "matplotlib_imshow", "(", "img", ")", ":", "\n", "        ", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "", "support_grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "support_images", ")", "\n", "matplotlib_imshow", "(", "support_grid", ")", "\n", "plt", ".", "title", "(", "\"support images\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "query_grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "query_images", ")", "\n", "plt", ".", "title", "(", "\"query images\"", ")", "\n", "matplotlib_imshow", "(", "query_grid", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.plot_roc": [[40, 59], ["range", "numpy.mean", "outliers.size", "outlier_scores.size", "len", "sklearn.metrics.roc_curve", "aucs.append", "sklearn.metrics.auc"], "function", ["None"], ["", "def", "plot_roc", "(", "metrics", ":", "dict", ",", "title", ":", "str", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    Plot the ROC curve from outlier prediction scores and ground truth, and returns\n    Args:\n        outliers_df: contains a column \"outlier\" of booleans, and a column \"outlier_score\" of floats\n        title: title of the plot\n    Returns:\n        the area under the ROC curve.\n    \"\"\"", "\n", "aucs", "=", "[", "]", "\n", "outliers", "=", "metrics", "[", "\"outliers\"", "]", "\n", "outlier_scores", "=", "metrics", "[", "\"outlier_scores\"", "]", "\n", "assert", "outliers", ".", "size", "(", ")", "==", "outlier_scores", ".", "size", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "outliers", ")", ")", ":", "\n", "        ", "gt", ",", "scores", "=", "outliers", "[", "i", "]", ",", "outlier_scores", "[", "i", "]", "\n", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "gt", ",", "scores", ")", "\n", "aucs", ".", "append", "(", "auc", "(", "fp_rate", ",", "tp_rate", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "aucs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.plot_twin_hist": [[61, 74], ["matplotlib.pyplot.figure", "seaborn.histplot", "matplotlib.pyplot.title", "st.pyplot"], "function", ["None"], ["", "def", "plot_twin_hist", "(", "outliers_df", ":", "pd", ".", "DataFrame", ",", "title", ":", "str", ",", "plot", ":", "bool", ")", ":", "\n", "    ", "\"\"\"\n    Plot a bi-color histogram showing the predicted outlier score for ground truth outliers and\n    ground truth inliers.\n    Args:\n        outliers_df: contains a column \"outlier\" of booleans, and a column \"outlier_score\" of floats\n        title: title of the plot\n    \"\"\"", "\n", "if", "plot", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "4", ")", ")", "\n", "sns", ".", "histplot", "(", "data", "=", "outliers_df", ",", "x", "=", "\"outlier_score\"", ",", "hue", "=", "\"outlier\"", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "st", ".", "pyplot", "(", "fig", ",", "clear_figure", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.check_if_record_exists": [[76, 103], ["pd.DataFrame.to_dict", "getattr", "isinstance", "pandas.read_csv", "any", "str", "pandas.DataFrame", "sum", "len", "str"], "function", ["None"], ["", "", "def", "check_if_record_exists", "(", "args", ",", "path", ":", "str", ")", ":", "\n", "# Params part of the new record", "\n", "    ", "group_by_args", "=", "args", ".", "general_hparams", "+", "args", ".", "simu_hparams", "\n", "new_entry", "=", "{", "}", "\n", "for", "param", "in", "group_by_args", ":", "\n", "        ", "value", "=", "getattr", "(", "args", ",", "param", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "value", "=", "\"-\"", ".", "join", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "value", "=", "str", "(", "value", ")", "\n", "", "new_entry", "[", "param", "]", "=", "value", "\n", "", "try", ":", "\n", "        ", "res", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "res", "=", "pd", ".", "DataFrame", "(", "{", "}", ")", "\n", "\n", "", "records", "=", "res", ".", "to_dict", "(", "\"records\"", ")", "\n", "for", "existing_entry", "in", "records", ":", "\n", "        ", "if", "any", "(", "[", "param", "not", "in", "existing_entry", "for", "param", "in", "group_by_args", "]", ")", ":", "\n", "            ", "continue", "\n", "", "matches", "=", "[", "\n", "str", "(", "existing_entry", "[", "param", "]", ")", "==", "new_entry", "[", "param", "]", "for", "param", "in", "group_by_args", "\n", "]", "\n", "match", "=", "sum", "(", "matches", ")", "==", "len", "(", "matches", ")", "\n", "if", "match", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.update_csv": [[105, 154], ["pd.DataFrame.to_dict", "pandas.DataFrame.from_records", "pd.DataFrame.from_records.to_csv", "pandas.read_csv", "getattr", "isinstance", "any", "new_entry.update", "res.to_dict.append", "pandas.DataFrame", "str", "sum", "len", "existing_entry.update", "str", "print", "print"], "function", ["None"], ["", "def", "update_csv", "(", "args", ":", "argparse", ".", "Namespace", ",", "metrics", ":", "dict", ",", "path", ":", "str", ")", ":", "\n", "\n", "# Load records", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "res", "=", "pd", ".", "DataFrame", "(", "{", "}", ")", "\n", "", "records", "=", "res", ".", "to_dict", "(", "\"records\"", ")", "\n", "\n", "# Metrics part of the new record", "\n", "fill_entry", "=", "metrics", "\n", "\n", "# Params part of the new record", "\n", "group_by_args", "=", "args", ".", "general_hparams", "+", "args", ".", "simu_hparams", "\n", "new_entry", "=", "{", "}", "\n", "for", "param", "in", "group_by_args", ":", "\n", "        ", "value", "=", "getattr", "(", "args", ",", "param", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "value", "=", "\"-\"", ".", "join", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "value", "=", "str", "(", "value", ")", "\n", "", "new_entry", "[", "param", "]", "=", "value", "\n", "\n", "# Check whether the row exists already, if yes, simply update the metrics", "\n", "", "match", "=", "False", "\n", "for", "existing_entry", "in", "records", ":", "\n", "        ", "if", "any", "(", "[", "param", "not", "in", "existing_entry", "for", "param", "in", "group_by_args", "]", ")", ":", "\n", "            ", "continue", "\n", "", "matches", "=", "[", "\n", "str", "(", "existing_entry", "[", "param", "]", ")", "==", "new_entry", "[", "param", "]", "for", "param", "in", "group_by_args", "\n", "]", "\n", "match", "=", "sum", "(", "matches", ")", "==", "len", "(", "matches", ")", "\n", "if", "match", ":", "\n", "            ", "if", "not", "args", ".", "override", ":", "\n", "                ", "print", "(", "\"Matching entry found. Not overriding.\"", ")", "\n", "return", "\n", "", "elif", "args", ".", "override", ":", "\n", "                ", "print", "(", "\"Overriding existing results.\"", ")", "\n", "", "existing_entry", ".", "update", "(", "fill_entry", ")", "\n", "break", "\n", "\n", "# If entry does not exist, just create it", "\n", "", "", "if", "not", "match", ":", "\n", "        ", "new_entry", ".", "update", "(", "fill_entry", ")", "\n", "records", ".", "append", "(", "new_entry", ")", "\n", "\n", "# Save back to dataframe", "\n", "", "df", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "records", ")", "\n", "df", ".", "to_csv", "(", "path", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.confidence_interval": [[156, 166], ["numpy.sqrt"], "function", ["None"], ["", "def", "confidence_interval", "(", "standard_deviation", ",", "n_samples", ")", ":", "\n", "    ", "\"\"\"\n    Computes statistical 95% confidence interval of the results from standard deviation and number of samples\n    Args:\n        standard_deviation (float): standard deviation of the results\n        n_samples (int): number of samples\n    Returns:\n        float: confidence interval\n    \"\"\"", "\n", "return", "1.96", "*", "standard_deviation", "/", "np", ".", "sqrt", "(", "n_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.clustering_variances_ratio": [[168, 181], ["numpy.mean", "numpy.linalg.norm", "numpy.stack().std", "numpy.linalg.norm", "v.std", "features.items", "numpy.stack", "v.mean", "features.values"], "function", ["None"], ["", "def", "clustering_variances_ratio", "(", "features", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", "]", ":", "\n", "    ", "sigma_within", "=", "(", "\n", "np", ".", "mean", "(", "[", "np", ".", "linalg", ".", "norm", "(", "v", ".", "std", "(", "axis", "=", "0", ")", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "]", ")", "**", "2", "\n", ")", "\n", "\n", "sigma_between", "=", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "stack", "(", "[", "v", ".", "mean", "(", "axis", "=", "0", ")", "for", "v", "in", "features", ".", "values", "(", ")", "]", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", ")", "\n", "**", "2", "\n", ")", "\n", "\n", "return", "sigma_within", "/", "sigma_between", ",", "sigma_within", ",", "sigma_between", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.compute_mif_with_auroc": [[183, 200], ["features.keys", "features[].mean", "features.items", "aurocs.append", "numpy.mean", "numpy.linalg.norm", "np.linalg.norm.tolist", "sklearn.metrics.roc_auc_score", "len"], "function", ["None"], ["", "def", "compute_mif_with_auroc", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    Computes the MIF of the features using the area under the ROC curve.\n    This should give the same results as compute_mif_explicitely() but it is a tiny bit faster.\n    \"\"\"", "\n", "aurocs", "=", "[", "]", "\n", "for", "label", "in", "features", ".", "keys", "(", ")", ":", "\n", "        ", "ground_truth", "=", "[", "]", "\n", "predictions", "=", "[", "]", "\n", "centroid", "=", "features", "[", "label", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "for", "second_label", ",", "v", "in", "features", ".", "items", "(", ")", ":", "\n", "            ", "ground_truth", "+=", "len", "(", "v", ")", "*", "[", "0", "if", "label", "==", "second_label", "else", "1", "]", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "v", "-", "centroid", ",", "axis", "=", "1", ")", "\n", "predictions", "+=", "distances", ".", "tolist", "(", ")", "\n", "", "aurocs", ".", "append", "(", "sklearn", ".", "metrics", ".", "roc_auc_score", "(", "ground_truth", ",", "predictions", ")", ")", "\n", "\n", "", "return", "1", "-", "np", ".", "mean", "(", "aurocs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.compute_mif_explicitly": [[202, 225], ["features.items", "numpy.mean", "label_features.mean", "numpy.sort", "features.items", "mean_imposture_factors.append", "numpy.linalg.norm", "numpy.linalg.norm", "class_imposture_factors.append", "numpy.mean", "numpy.concatenate", "numpy.searchsorted", "len"], "function", ["None"], ["", "def", "compute_mif_explicitly", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    Computes the MIF of the features using the explicit definition.\n    This should give the same results as compute_mif_with_auroc() but it is a tiny bit slower.\n    \"\"\"", "\n", "mean_imposture_factors", "=", "[", "]", "\n", "for", "label", ",", "label_features", "in", "features", ".", "items", "(", ")", ":", "\n", "        ", "centroid", "=", "label_features", ".", "mean", "(", "axis", "=", "0", ")", "\n", "distances_to_centroid", "=", "np", ".", "sort", "(", "\n", "np", ".", "linalg", ".", "norm", "(", "label_features", "-", "centroid", ",", "axis", "=", "1", ")", "\n", ")", "\n", "class_imposture_factors", "=", "[", "]", "\n", "for", "second_label", ",", "v", "in", "features", ".", "items", "(", ")", ":", "\n", "            ", "if", "second_label", "==", "label", ":", "\n", "                ", "continue", "\n", "", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "v", "-", "centroid", ",", "axis", "=", "1", ")", "\n", "imposture_factors", "=", "1", "-", "np", ".", "searchsorted", "(", "\n", "distances_to_centroid", ",", "distances", "\n", ")", "/", "len", "(", "distances_to_centroid", ")", "\n", "class_imposture_factors", ".", "append", "(", "imposture_factors", ")", "\n", "", "mean_imposture_factors", ".", "append", "(", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "class_imposture_factors", ")", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "mean_imposture_factors", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.create_dataloader": [[26, 44], ["torch.utils.data.DataLoader"], "function", ["None"], ["def", "create_dataloader", "(", "dataset", ":", "Dataset", ",", "sampler", ":", "TaskSampler", ",", "n_workers", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Create a torch dataloader of tasks from the input dataset sampled according\n    to the input tensor.\n    Args:\n        dataset: dataset from which to sample tasks\n        sampler: task sampler, must implement an episodic_collate_fn method\n        n_workers: number of workers of the dataloader\n\n    Returns:\n        a dataloader of tasks\n    \"\"\"", "\n", "return", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_sampler", "=", "sampler", ",", "\n", "num_workers", "=", "n_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "sampler", ".", "episodic_collate_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_cifar_set": [[47, 53], ["src.datasets.FewShotCIFAR100", "pathlib.Path"], "function", ["None"], ["", "def", "get_cifar_set", "(", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "return", "FewShotCIFAR100", "(", "\n", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"cifar\"", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_mini_imagenet_set": [[56, 65], ["src.datasets.MiniImageNet", "pathlib.Path"], "function", ["None"], ["", "def", "get_mini_imagenet_set", "(", "args", ",", "split", ",", "training", ",", "bis", "=", "False", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"mini_imagenet\"", "\n", "if", "bis", ":", "\n", "        ", "root", "=", "root", "/", "\"bis\"", "\n", "", "return", "MiniImageNet", "(", "\n", "root", "=", "root", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_aircraft_set": [[68, 74], ["src.datasets.Aircraft", "pathlib.Path"], "function", ["None"], ["", "def", "get_aircraft_set", "(", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "return", "Aircraft", "(", "\n", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"fgvc-aircraft-2013b\"", "/", "\"data\"", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_fungi_set": [[77, 83], ["src.datasets.Fungi", "pathlib.Path"], "function", ["None"], ["", "def", "get_fungi_set", "(", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "return", "Fungi", "(", "\n", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"fungi\"", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_imagenet_val_set": [[86, 90], ["src.datasets.imagenet_val.ImageNetVal", "pathlib.Path"], "function", ["None"], ["", "def", "get_imagenet_val_set", "(", "args", ")", ":", "\n", "    ", "return", "ImageNetVal", "(", "\n", "root", "=", "Path", "(", "\"/data/etienneb/ILSVRC2015/\"", ")", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_imagenet_set": [[93, 99], ["src.datasets.ImageNet", "pathlib.Path"], "function", ["None"], ["", "def", "get_imagenet_set", "(", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "return", "ImageNet", "(", "\n", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"ilsvrc_2012\"", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_tiered_imagenet_set": [[102, 113], ["src.datasets.TieredImageNet", "pathlib.Path"], "function", ["None"], ["", "def", "get_tiered_imagenet_set", "(", "args", ",", "split", ",", "training", ",", "bis", "=", "False", ")", ":", "\n", "    ", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"tiered_imagenet\"", "\n", "if", "bis", ":", "\n", "        ", "root", "=", "root", "/", "\"bis\"", "\n", "# if args.model_source == \"feat\":", "\n", "# logger.warning(\"Return FEAT version of Tiered-ImageNet ! \")", "\n", "", "return", "TieredImageNet", "(", "\n", "root", "=", "root", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_cub_set": [[123, 129], ["src.datasets.CUB", "pathlib.Path"], "function", ["None"], ["", "def", "get_cub_set", "(", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "return", "CUB", "(", "\n", "root", "=", "Path", "(", "args", ".", "data_dir", ")", "/", "\"cub\"", ",", "\n", "args", "=", "args", ",", "\n", "split", "=", "split", ",", "\n", "training", "=", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_dataset": [[132, 156], ["data_fetchers.get_cifar_set", "data_fetchers.get_mini_imagenet_set", "data_fetchers.get_mini_imagenet_set", "data_fetchers.get_imagenet_set", "data_fetchers.get_tiered_imagenet_set", "data_fetchers.get_tiered_imagenet_set", "data_fetchers.get_cub_set", "data_fetchers.get_aircraft_set", "data_fetchers.get_fungi_set", "data_fetchers.get_imagenet_val_set", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_cifar_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_mini_imagenet_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_mini_imagenet_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_imagenet_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_tiered_imagenet_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_tiered_imagenet_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_cub_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_aircraft_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_fungi_set", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_imagenet_val_set"], ["", "def", "get_dataset", "(", "dataset_name", ",", "args", ",", "split", ",", "training", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"cifar\"", ":", "\n", "        ", "dataset", "=", "get_cifar_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"mini_imagenet\"", ":", "\n", "        ", "dataset", "=", "get_mini_imagenet_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"mini_imagenet_bis\"", ":", "\n", "        ", "dataset", "=", "get_mini_imagenet_set", "(", "args", ",", "split", ",", "training", ",", "bis", "=", "True", ")", "\n", "", "elif", "dataset_name", "==", "\"imagenet\"", ":", "\n", "        ", "dataset", "=", "get_imagenet_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"tiered_imagenet\"", ":", "\n", "        ", "dataset", "=", "get_tiered_imagenet_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"tiered_imagenet_bis\"", ":", "\n", "        ", "dataset", "=", "get_tiered_imagenet_set", "(", "args", ",", "split", ",", "training", ",", "bis", "=", "True", ")", "\n", "", "elif", "dataset_name", "==", "\"cub\"", ":", "\n", "        ", "dataset", "=", "get_cub_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"aircraft\"", ":", "\n", "        ", "dataset", "=", "get_aircraft_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"fungi\"", ":", "\n", "        ", "dataset", "=", "get_fungi_set", "(", "args", ",", "split", ",", "training", ")", "\n", "", "elif", "dataset_name", "==", "\"imagenet_val\"", ":", "\n", "        ", "dataset", "=", "get_imagenet_val_set", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"I don't know this dataset {dataset_name}.\"", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_classic_loader": [[158, 181], ["data_fetchers.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "int"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_dataset"], ["", "def", "get_classic_loader", "(", "\n", "args", ",", "\n", "dataset_name", ",", "\n", "training", "=", "False", ",", "\n", "shuffle", "=", "False", ",", "\n", "split", "=", "\"train\"", ",", "\n", "batch_size", "=", "1024", ",", "\n", "world_size", "=", "1", ",", "\n", "n_workers", "=", "6", ",", "\n", ")", ":", "\n", "\n", "    ", "dataset", "=", "get_dataset", "(", "dataset_name", ",", "args", ",", "split", ",", "training", ")", "\n", "sampler", "=", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "True", ")", "if", "(", "world_size", ">", "1", ")", "else", "None", "\n", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "world_size", ")", "if", "(", "world_size", ">", "1", ")", "else", "batch_size", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "n_workers", ",", "\n", "sampler", "=", "sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "shuffle", "and", "(", "sampler", "is", "None", ")", ",", "\n", ")", "\n", "return", "dataset", ",", "sampler", ",", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_task_loader": [[183, 207], ["src.datasets.FeaturesDataset", "src.sampler.OpenQuerySamplerOnFeatures", "data_fetchers.create_dataloader"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.create_dataloader"], ["", "def", "get_task_loader", "(", "\n", "args", ",", "\n", "split", ":", "str", ",", "\n", "dataset_name", ":", "str", ",", "\n", "n_way", ":", "int", ",", "\n", "n_shot", ":", "int", ",", "\n", "n_id_query", ":", "int", ",", "\n", "n_ood_query", ":", "int", ",", "\n", "n_tasks", ":", "int", ",", "\n", "n_workers", ":", "int", ",", "\n", "features_dict", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "assert", "features_dict", "is", "not", "None", "\n", "dataset", "=", "FeaturesDataset", "(", "features_dict", ")", "\n", "sampler", "=", "OpenQuerySamplerOnFeatures", "(", "\n", "dataset", "=", "dataset", ",", "\n", "n_way", "=", "n_way", ",", "\n", "n_shot", "=", "n_shot", ",", "\n", "n_id_query", "=", "n_id_query", ",", "\n", "n_ood_query", "=", "n_ood_query", ",", "\n", "n_tasks", "=", "n_tasks", ",", "\n", ")", "\n", "return", "create_dataloader", "(", "dataset", "=", "dataset", ",", "sampler", "=", "sampler", ",", "n_workers", "=", "n_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_test_features": [[209, 260], ["loguru.logger.info", "loguru.logger.info", "isinstance", "pathlib.Path", "open", "pickle.load", "open", "pickle.load", "train_features[].unsqueeze", "train_features[].unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "get_test_features", "(", "\n", "data_dir", ",", "\n", "backbone", ",", "\n", "src_dataset", ",", "\n", "tgt_dataset", ",", "\n", "training_method", ",", "\n", "model_source", ",", "\n", "split", ":", "str", "=", "\"test\"", ",", "\n", "path", ":", "Optional", "[", "Path", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "data_dir", ",", "Path", ")", ":", "\n", "        ", "data_dir", "=", "Path", "(", "data_dir", ")", "\n", "", "pickle_basename", "=", "f\"{backbone}_{src_dataset}_{model_source}.pickle\"", "\n", "features_path", "=", "(", "\n", "data_dir", "\n", "/", "\"features\"", "\n", "/", "src_dataset", "\n", "/", "tgt_dataset", "\n", "/", "split", "\n", "/", "training_method", "\n", "/", "pickle_basename", "\n", ")", "\n", "avg_train_features_path", "=", "(", "\n", "data_dir", "\n", "/", "\"features\"", "\n", "/", "src_dataset", "\n", "/", "src_dataset", "\n", "/", "\"train\"", "\n", "/", "training_method", "\n", "/", "pickle_basename", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Loading train features from {avg_train_features_path}\"", ")", "\n", "logger", ".", "info", "(", "f\"Loading test features from {features_path}\"", ")", "\n", "\n", "with", "open", "(", "features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "        ", "features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "\n", "# We also load features from the train set to center query features on the average train set", "\n", "# feature vector", "\n", "", "with", "open", "(", "avg_train_features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "        ", "train_features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "assert", "len", "(", "train_features", ")", "==", "2", "\n", "average_train_features", "=", "train_features", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", "\n", "std_train_features", "=", "train_features", "[", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "(", "\n", "features", ",", "\n", "train_features", ",", "\n", "average_train_features", ",", "\n", "std_train_features", ",", "\n", "features_path", ",", "\n", "avg_train_features_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.set_random_seed": [[26, 37], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "random.seed"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Set random, numpy and torch random seed, for reproducibility of the training\n    Args:\n        seed: defined random seed\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.tensor_product": [[39, 52], ["torch.matmul().permute", "torch.matmul().permute", "torch.matmul", "torch.matmul", "left_tensor.T.unsqueeze", "right_tensor.T.unsqueeze"], "function", ["None"], ["", "def", "tensor_product", "(", "left_tensor", ":", "torch", ".", "Tensor", ",", "right_tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        left_tensor: shape (n, l)\n        right_tensor: shape (m, l)\n\n    Returns:\n        their tensor product of shape (n, m, l).\n        result[i,j,k] = left_tensor[i, k] * right_tensor[j, k]\n    \"\"\"", "\n", "return", "torch", ".", "matmul", "(", "\n", "left_tensor", ".", "T", ".", "unsqueeze", "(", "2", ")", ",", "right_tensor", ".", "T", ".", "unsqueeze", "(", "1", ")", "\n", ")", ".", "permute", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.merge_from_dict": [[54, 57], ["dict_.items", "setattr"], "function", ["None"], ["", "def", "merge_from_dict", "(", "args", ",", "dict_", ":", "Dict", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "dict_", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "key", ",", "value", ")", "\n", "# if isinstance(value, dict) and not any([isinstance(key, int) for key in value.keys()]):", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.compute_features": [[64, 111], ["loguru.logger.warning", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.cat", "torch.cat", "tqdm.tqdm", "torch.stack", "torch.stack", "enumerate", "feature_extractor", "torch.cat.append", "all_labels.append", "torch.cat", "torch.cat", "enumerate", "feature_extractor", "feature_extractor.cpu", "images.to", "feature_extractor.cpu", "images.to", "utils.incremental_var", "utils.incremental_mean"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.incremental_var", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.incremental_mean"], ["", "", "def", "compute_features", "(", "\n", "feature_extractor", ":", "nn", ".", "Module", ",", "\n", "loader", ":", "DataLoader", ",", "\n", "split", ":", "str", ",", "\n", "device", "=", "\"cuda\"", ",", "\n", "keep_all_train_features", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Optional", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "if", "debug", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Debugging mode activated, only doing 5 iterations.\"", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "split", "==", "\"val\"", "or", "split", "==", "\"test\"", "or", "keep_all_train_features", ":", "\n", "            ", "all_features", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "index", ",", "(", "images", ",", "labels", ")", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ",", "unit", "=", "\"batch\"", ")", ":", "\n", "                ", "feat", "=", "feature_extractor", "(", "images", ".", "to", "(", "device", ")", ")", "\n", "all_features", ".", "append", "(", "feat", ".", "cpu", "(", ")", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "if", "debug", "and", "index", ">=", "5", ":", "\n", "                    ", "break", "\n", "\n", "", "", "all_features", "=", "torch", ".", "cat", "(", "all_features", ",", "dim", "=", "0", ")", "\n", "return", "(", "\n", "all_features", ",", "\n", "torch", ".", "cat", "(", "all_labels", ",", "dim", "=", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "0.", "\n", "var", "=", "0.", "\n", "N", "=", "1.0", "\n", "for", "index", ",", "(", "images", ",", "labels", ")", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ",", "unit", "=", "\"batch\"", ")", ":", "\n", "                ", "feats", "=", "feature_extractor", "(", "images", ".", "to", "(", "device", ")", ")", "\n", "for", "new_sample", "in", "feats", ".", "cpu", "(", ")", ":", "\n", "                    ", "if", "N", "==", "1", ":", "\n", "                        ", "mean", "=", "new_sample", "\n", "", "else", ":", "\n", "                        ", "var", "=", "incremental_var", "(", "\n", "var", ",", "mean", ",", "new_sample", ",", "N", "\n", ")", "# [d,]", "\n", "mean", "=", "incremental_mean", "(", "\n", "mean", ",", "new_sample", ",", "N", "\n", ")", "# [d,]", "\n", "", "N", "+=", "1", "\n", "", "if", "debug", "and", "index", ">=", "5", ":", "\n", "                    ", "break", "\n", "", "", "train_feats", "=", "torch", ".", "stack", "(", "[", "mean", ",", "var", "]", ",", "0", ")", "# [2, d]", "\n", "return", "train_feats", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.incremental_mean": [[113, 116], ["None"], "function", ["None"], ["", "", "", "def", "incremental_mean", "(", "old_mean", ":", "Tensor", ",", "new_sample", ":", "Tensor", ",", "n", ":", "int", ")", ":", "\n", "    ", "new_mean", "=", "1", "/", "n", "*", "(", "new_sample", "+", "(", "n", "-", "1", ")", "*", "old_mean", ")", "\n", "return", "new_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.incremental_var": [[118, 121], ["None"], "function", ["None"], ["", "def", "incremental_var", "(", "old_var", ":", "Tensor", ",", "old_mean", ":", "Tensor", ",", "new_sample", ":", "Tensor", ",", "n", ":", "int", ")", ":", "\n", "    ", "new_var", "=", "(", "n", "-", "2", ")", "/", "(", "n", "-", "1", ")", "*", "(", "old_var", ")", "+", "1", "/", "n", "*", "(", "new_sample", "-", "old_mean", ")", "**", "2", "\n", "return", "new_var", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.strip_prefix": [[123, 128], ["collections.OrderedDict", "state_dict.items", "k.startswith", "len"], "function", ["None"], ["", "def", "strip_prefix", "(", "state_dict", ":", "OrderedDict", ",", "prefix", ":", "str", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "\n", "[", "\n", "(", "k", "[", "len", "(", "prefix", ")", ":", "]", "if", "k", ".", "startswith", "(", "prefix", ")", "else", "k", ",", "v", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.load_model": [[132, 172], ["loguru.logger.info", "loguru.logger.info", "feature_extractor.eval", "src.utils.data_fetchers.get_classic_loader", "len", "torch.load", "torch.load", "feature_extractor.load_state_dict", "loguru.logger.info", "loguru.logger.info", "loguru.logger.info", "numpy.unique", "utils.strip_prefix", "utils.strip_prefix", "utils.strip_prefix", "utils.strip_prefix"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_classic_loader", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix"], ["", "def", "load_model", "(", "\n", "args", ",", "\n", "backbone", ":", "str", ",", "\n", "weights", ":", "Optional", "[", "Path", "]", ",", "\n", "dataset_name", ":", "str", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", "num_classes", ":", "int", "=", "None", ",", "\n", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Fetching data...\"", ")", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "train_dataset", ",", "_", ",", "_", "=", "get_classic_loader", "(", "\n", "args", ",", "dataset_name", ",", "split", "=", "\"train\"", ",", "batch_size", "=", "10", "\n", ")", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "train_dataset", ".", "labels", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Building model...\"", ")", "\n", "feature_extractor", "=", "BACKBONES", "[", "backbone", "]", "(", "\n", "num_classes", "=", "num_classes", ",", "pretrained", "=", "True", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "weights", ",", "map_location", "=", "device", ")", "\n", "if", "\"state_dict\"", "in", "state_dict", ":", "\n", "            ", "state_dict", "=", "strip_prefix", "(", "state_dict", "[", "\"state_dict\"", "]", ",", "\"module.\"", ")", "\n", "", "elif", "\"params\"", "in", "state_dict", ":", "\n", "            ", "state_dict", "=", "strip_prefix", "(", "state_dict", "[", "\"params\"", "]", ",", "\"encoder.\"", ")", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"module.\"", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"backbone.\"", ")", "\n", "\n", "", "missing_keys", ",", "unexpected", "=", "feature_extractor", ".", "load_state_dict", "(", "\n", "state_dict", ",", "strict", "=", "False", "\n", ")", "\n", "logger", ".", "info", "(", "f\"Loaded weights from {weights}\"", ")", "\n", "logger", ".", "info", "(", "f\"Missing keys {missing_keys}\"", ")", "\n", "logger", ".", "info", "(", "f\"Unexpected keys {unexpected}\"", ")", "\n", "\n", "", "feature_extractor", ".", "eval", "(", ")", "\n", "\n", "return", "feature_extractor", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.main_process": [[174, 183], ["torch.get_rank"], "function", ["None"], ["", "def", "main_process", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "bool", ":", "\n", "    ", "if", "args", ".", "distributed", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.setup": [[185, 194], ["str", "torch.init_process_group"], "function", ["None"], ["", "", "def", "setup", "(", "args", ":", "argparse", ".", "Namespace", ",", "rank", ":", "int", ",", "world_size", ":", "int", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Used for distributed learning\n    \"\"\"", "\n", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "\"localhost\"", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "args", ".", "port", ")", "\n", "\n", "# initialize the process group", "\n", "dist", ".", "init_process_group", "(", "\"nccl\"", ",", "rank", "=", "rank", ",", "world_size", "=", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.cleanup": [[196, 201], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "cleanup", "(", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Used for distributed learning\n    \"\"\"", "\n", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.find_free_port": [[203, 214], ["socket.socket", "socket.socket.bind", "socket.socket.close", "socket.socket.getsockname"], "function", ["None"], ["", "def", "find_free_port", "(", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Used for distributed learning\n    \"\"\"", "\n", "import", "socket", "\n", "\n", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "sock", ".", "bind", "(", "(", "\"\"", ",", "0", ")", ")", "\n", "port", "=", "sock", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "sock", ".", "close", "(", ")", "\n", "return", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.get_modules_to_try": [[216, 308], ["eval", "loguru.logger.warning", "eval", "modules_to_try.append", "loguru.logger.warning", "itertools.product", "loguru.logger.warning", "modules_to_try.append", "eval", "modules_to_try.append", "zip", "modules_to_try.append", "zip", "loguru.logger.info", "ValueError", "inspect.getfullargspec", "inspect.getfullargspec", "copy.deepcopy", "modules_to_try.append", "inspect.getfullargspec"], "function", ["None"], ["", "def", "get_modules_to_try", "(", "\n", "args", ",", "module_group", ":", "str", ",", "module_name", ":", "str", ",", "module_pool", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "tune", ":", "bool", ",", "ablate", ":", "bool", "\n", ")", ":", "\n", "\n", "    ", "modules_to_try", ":", "List", "[", "Any", "]", "=", "[", "]", "\n", "# logger.warning(module_pool)", "\n", "module_dict", "=", "eval", "(", "f\"args.{module_group}\"", ")", "\n", "assert", "(", "not", "tune", "and", "not", "ablate", ")", "or", "(", "tune", "^", "ablate", ")", ",", "\"Cannot be both in ablation and tuning mode.\"", "\n", "\n", "if", "tune", ":", "\n", "        ", "logger", ".", "warning", "(", "f\"Tuning over {module_group} activated\"", ")", "\n", "if", "module_name", "in", "eval", "(", "f\"args.{module_group}\"", ")", ":", "\n", "            ", "shot", "=", "(", "\n", "args", ".", "n_shot", "if", "args", ".", "n_shot", "in", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "else", "1", "\n", ")", "\n", "module_args", "=", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "[", "shot", "]", "# take default args", "\n", "if", "\"tuning\"", "in", "module_dict", "[", "module_name", "]", ":", "\n", "                ", "params2tune", "=", "module_dict", "[", "module_name", "]", "[", "\"tuning\"", "]", "[", "\"hparams2tune\"", "]", "\n", "shot", "=", "(", "\n", "args", ".", "n_shot", "\n", "if", "args", ".", "n_shot", "\n", "in", "module_dict", "[", "module_name", "]", "[", "\"tuning\"", "]", "[", "\"hparam_values\"", "]", "\n", "else", "1", "\n", ")", "\n", "values2tune", "=", "module_dict", "[", "module_name", "]", "[", "\"tuning\"", "]", "[", "\"hparam_values\"", "]", "[", "shot", "]", "\n", "values_combinations", "=", "itertools", ".", "product", "(", "*", "values2tune", ")", "\n", "for", "some_combin", "in", "values_combinations", ":", "\n", "# Override default args", "\n", "                    ", "for", "k", ",", "v", "in", "zip", "(", "params2tune", ",", "some_combin", ")", ":", "\n", "                        ", "module_args", "[", "k", "]", "=", "v", "\n", "", "if", "(", "\n", "\"args\"", "\n", "in", "inspect", ".", "getfullargspec", "(", "\n", "module_pool", "[", "module_name", "]", ".", "__init__", "\n", ")", ".", "args", "\n", ")", ":", "\n", "                        ", "module_args", "[", "\"args\"", "]", "=", "args", "\n", "", "modules_to_try", ".", "append", "(", "module_pool", "[", "module_name", "]", "(", "**", "module_args", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "f\"Module {module_name} has no specified grid to search over. Using default arguments.\"", "\n", ")", "\n", "modules_to_try", ".", "append", "(", "module_pool", "[", "module_name", "]", "(", "**", "module_args", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "modules_to_try", ".", "append", "(", "module_pool", "[", "module_name", "]", "(", ")", ")", "\n", "", "", "elif", "ablate", ":", "\n", "        ", "logger", ".", "warning", "(", "f\"Ablating {module_group} activated\"", ")", "\n", "if", "module_name", "in", "eval", "(", "f\"args.{module_group}\"", ")", ":", "\n", "            ", "shot", "=", "(", "\n", "args", ".", "n_shot", "if", "args", ".", "n_shot", "in", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "else", "1", "\n", ")", "\n", "default_args", "=", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "[", "shot", "]", "# take default args", "\n", "if", "\"ablation\"", "in", "module_dict", "[", "module_name", "]", ":", "\n", "                ", "params2tune", "=", "module_dict", "[", "module_name", "]", "[", "\"ablation\"", "]", "[", "\"hparams2tune\"", "]", "\n", "shot", "=", "(", "\n", "args", ".", "n_shot", "\n", "if", "args", ".", "n_shot", "\n", "in", "module_dict", "[", "module_name", "]", "[", "\"ablation\"", "]", "[", "\"hparam_values\"", "]", "\n", "else", "1", "\n", ")", "\n", "values2tune", "=", "module_dict", "[", "module_name", "]", "[", "\"ablation\"", "]", "[", "\"hparam_values\"", "]", "[", "shot", "]", "\n", "for", "k", ",", "values2try", "in", "zip", "(", "params2tune", ",", "values2tune", ")", ":", "\n", "# Override default args", "\n", "                    ", "for", "v", "in", "values2try", ":", "\n", "                        ", "module_args", "=", "deepcopy", "(", "default_args", ")", "\n", "module_args", "[", "k", "]", "=", "v", "\n", "if", "(", "\n", "\"args\"", "\n", "in", "inspect", ".", "getfullargspec", "(", "\n", "module_pool", "[", "module_name", "]", ".", "__init__", "\n", ")", ".", "args", "\n", ")", ":", "\n", "                            ", "module_args", "[", "\"args\"", "]", "=", "args", "\n", "", "modules_to_try", ".", "append", "(", "module_pool", "[", "module_name", "]", "(", "**", "module_args", ")", ")", "\n", "", "", "logger", ".", "info", "(", "f\"Modules to try: {modules_to_try}\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Module {module_name} has no specified ablation parameters.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "modules_to_try", ".", "append", "(", "module_pool", "[", "module_name", "]", "(", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "module_args", "=", "{", "}", "\n", "if", "module_name", "in", "module_dict", ":", "\n", "            ", "shot", "=", "(", "\n", "args", ".", "n_shot", "if", "args", ".", "n_shot", "in", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "else", "1", "\n", ")", "\n", "module_args", "=", "module_dict", "[", "module_name", "]", "[", "\"default\"", "]", "[", "shot", "]", "# take default args", "\n", "", "if", "\"args\"", "in", "inspect", ".", "getfullargspec", "(", "module_pool", "[", "module_name", "]", ".", "__init__", ")", ".", "args", ":", "\n", "            ", "module_args", "[", "\"args\"", "]", "=", "args", "\n", "", "modules_to_try", "=", "[", "module_pool", "[", "module_name", "]", "(", "**", "module_args", ")", "]", "\n", "", "return", "modules_to_try", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.normalize": [[310, 312], ["sklearn.preprocessing.normalize", "features.items"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "normalize", "(", "features", ":", "Dict", "[", "int", ",", "ndarray", "]", ")", "->", "Dict", "[", "int", ",", "ndarray", "]", ":", "\n", "    ", "return", "{", "k", ":", "sklearn", ".", "preprocessing", ".", "normalize", "(", "v", ",", "axis", "=", "1", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.bar_plotter.BarPlotter.plot": [[50, 162], ["matplotlib.subplots", "list", "enumerate", "os.makedirs", "fig.savefig", "bar_plotter.BarPlotter.metric_dic.keys", "len", "bar_plotter.BarPlotter.metric_dic.items", "list", "sorted", "collections.defaultdict", "enumerate", "ax.set_xticks", "ax.set_xlim", "ax.set_xticklabels", "ax.set_title", "matplotlib.subplots_adjust", "ax.set_ylim", "ax.xaxis.set_tick_params", "metric_dic.keys", "metric_dic.items", "len", "collections.defaultdict", "zip", "ax.set", "ax.yaxis.tick_right", "ax.set", "ax.set_yticklabels", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.yaxis.set_ticks_position", "ax.xaxis.set_ticks_position", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.yaxis.set_ticks_position", "ax.xaxis.set_ticks_position", "ax.get_legend_handles_labels", "dict", "fig.legend", "ax.invert_xaxis", "grouped_items[].append", "enumerate", "numpy.arange", "zip", "dict.values", "dict.keys", "numpy.mean", "ax.barh", "yticks_labels.append", "yticks.append", "range", "ax.text", "ax.text", "len", "list.index", "numpy.round", "list.index"], "methods", ["None"], ["def", "plot", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        metric_dic[metric_name][method] = {\n                                    'x': ndarray [n_points_found],\n                                    'y': ndarray [n_points_found],\n                                    'pm': Optional[ndarray],\n                                   }\n        \"\"\"", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "10", ",", "6", ")", ",", "ncols", "=", "2", ")", "\n", "\n", "metric_names", "=", "list", "(", "self", ".", "metric_dic", ".", "keys", "(", ")", ")", "\n", "assert", "len", "(", "metric_names", ")", "==", "2", ",", "'Mirror BarPlotter only supports 2 metrics (one on each side)'", "\n", "\n", "for", "metric_index", ",", "(", "metric_name", ",", "metric_dic", ")", "in", "enumerate", "(", "self", ".", "metric_dic", ".", "items", "(", ")", ")", ":", "\n", "\n", "            ", "ax", "=", "axes", "[", "metric_index", "]", "\n", "\n", "methods", "=", "list", "(", "metric_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# ==== Recover all architectures ======", "\n", "labels", "=", "metric_dic", "[", "methods", "[", "0", "]", "]", "[", "\"x\"", "]", "\n", "\n", "# ==== Suu-group by architecture ======", "\n", "sorted_items", "=", "sorted", "(", "metric_dic", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "np", ".", "mean", "(", "x", "[", "1", "]", "[", "\"y\"", "]", ")", ")", "\n", "assert", "len", "(", "metric_dic", ")", "==", "2", ",", "\"Currently only support 2 methods at a time.\"", "\n", "bottoms", "=", "defaultdict", "(", "float", ")", "\n", "for", "method_index", ",", "(", "method", ",", "method_dic", ")", "in", "enumerate", "(", "sorted_items", ")", ":", "\n", "\n", "                ", "grouped_items", "=", "defaultdict", "(", "list", ")", "\n", "for", "arch", ",", "result", "in", "zip", "(", "method_dic", "[", "\"x\"", "]", ",", "method_dic", "[", "\"y\"", "]", ")", ":", "\n", "                    ", "grouped_items", "[", "pretty_arch", "[", "arch", "]", "]", ".", "append", "(", "(", "pretty_training", "[", "arch", "]", ",", "result", ")", ")", "\n", "\n", "", "current_height", "=", "0", "\n", "yticks", "=", "[", "]", "\n", "yticks_labels", "=", "[", "]", "\n", "for", "arch", "in", "grouped_items", ":", "\n", "                    ", "for", "training_index", ",", "(", "training", ",", "value", ")", "in", "enumerate", "(", "grouped_items", "[", "arch", "]", ")", ":", "\n", "                        ", "value", "=", "value", "-", "bottoms", "[", "training", "]", "\n", "ax", ".", "barh", "(", "\n", "[", "current_height", "]", ",", "\n", "[", "value", "]", ",", "\n", "edgecolor", "=", "\"white\"", ",", "\n", "color", "=", "barplot_colors", "[", "methods", ".", "index", "(", "method", ")", "]", ",", "\n", "height", "=", "0.01", ",", "\n", "left", "=", "[", "bottoms", "[", "training", "]", "]", ",", "\n", "label", "=", "r\"Strong baseline\"", "if", "method_index", "==", "0", "else", "method", ",", "\n", ")", "\n", "bottoms", "[", "training", "]", "+=", "value", "\n", "if", "method_index", "==", "1", ":", "\n", "                            ", "ax", ".", "text", "(", "bottoms", "[", "training", "]", "+", "0.01", ",", "current_height", ",", "rf\"$\\mathbf{{+{np.round(100 * value, 1)}}}$\"", ",", "\n", "color", "=", "barplot_colors", "[", "methods", ".", "index", "(", "method", ")", "]", ",", "va", "=", "'center'", ",", "ha", "=", "'right'", "if", "metric_index", "==", "0", "else", "'left'", ",", "fontsize", "=", "15", ")", "\n", "", "if", "(", "metric_index", "==", "1", ")", "and", "(", "training_index", "==", "len", "(", "grouped_items", "[", "arch", "]", ")", "-", "1", ")", ":", "\n", "                            ", "ax", ".", "text", "(", "0.24", ",", "current_height", "+", "0.02", ",", "arch", ",", "va", "=", "'center'", ",", "ha", "=", "'center'", ",", "fontsize", "=", "14", ")", "\n", "", "yticks_labels", ".", "append", "(", "rf\"{training}\"", ")", "\n", "yticks", ".", "append", "(", "current_height", ")", "\n", "current_height", "+=", "0.02", "\n", "", "current_height", "+=", "0.03", "\n", "\n", "", "", "current_height", "-=", "0.03", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "4", ",", "9", ")", "/", "10", ")", "\n", "ax", ".", "set_xlim", "(", "0.4", ",", "0.85", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "rf\"${10 * x}$\"", "for", "x", "in", "range", "(", "4", ",", "9", ")", "]", ")", "\n", "ax", ".", "set_title", "(", "rf\"\\textbf{{{pretty[metric_name]}}}\"", ",", "fontsize", "=", "15", ")", "\n", "\n", "if", "metric_index", "==", "0", ":", "\n", "                ", "ax", ".", "set", "(", "yticks", "=", "yticks", ",", "yticklabels", "=", "[", "\"\"", "for", "x", "in", "labels", "]", ")", "\n", "ax", ".", "yaxis", ".", "tick_right", "(", ")", "\n", "", "else", ":", "\n", "                ", "ax", ".", "set", "(", "yticks", "=", "yticks", ")", "\n", "ax", ".", "set_yticklabels", "(", "yticks_labels", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "'center'", ",", "position", "=", "(", "-", "0.32", ",", "0", ")", ",", "fontsize", "=", "12", ")", "\n", "# ax.yaxis.tick_left()", "\n", "", "plt", ".", "subplots_adjust", "(", "wspace", "=", "0.7", ")", "\n", "ax", ".", "set_ylim", "(", "-", "0.03", ",", "current_height", ")", "\n", "\n", "# Hide the right and top spines", "\n", "if", "metric_index", "==", "1", ":", "\n", "                ", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "# Only show ticks on the left and bottom spines", "\n", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "\"left\"", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "\"bottom\"", ")", "\n", "", "else", ":", "\n", "                ", "ax", ".", "spines", "[", "\"left\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "# Only show ticks on the left and bottom spines", "\n", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "\"right\"", ")", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "\"bottom\"", ")", "\n", "\n", "", "ax", ".", "xaxis", ".", "set_tick_params", "(", "labelsize", "=", "15", ")", "\n", "\n", "if", "metric_index", "==", "1", ":", "\n", "                ", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "by_label", "=", "dict", "(", "zip", "(", "labels", ",", "handles", ")", ")", "\n", "fig", ".", "legend", "(", "by_label", ".", "values", "(", ")", ",", "by_label", ".", "keys", "(", ")", ",", "\n", "loc", "=", "\"center\"", ",", "\n", "bbox_to_anchor", "=", "[", "0.53", ",", "0.97", "]", ",", "# bottom-right", "\n", "ncol", "=", "2", ",", "\n", "frameon", "=", "False", ",", "# don't put a frame)", "\n", ")", "\n", "", "if", "metric_index", "==", "0", ":", "\n", "# If you have positive numbers and want to invert the x-axis of the left plot", "\n", "                ", "ax", ".", "invert_xaxis", "(", ")", "\n", "\n", "# # To show data from highest to lowest", "\n", "# ax.invert_yaxis()", "\n", "# plt.subplots_adjust(wspace=None)", "\n", "", "", "os", ".", "makedirs", "(", "self", ".", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "# fig.tight_layout()", "\n", "fig", ".", "savefig", "(", "self", ".", "out_dir", "/", "f\"barplot.pdf\"", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.bar_plotter.str2bool": [[35, 44], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.__init__": [[40, 60], ["pathlib.Path", "plotter.Plotter.nested_default_dict"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.nested_default_dict"], ["def", "__init__", "(", "\n", "self", ",", "\n", "figsize", "=", "[", "10", ",", "10", "]", ",", "\n", "fontsize", "=", "12", ",", "\n", "fontfamily", "=", "\"sans-serif\"", ",", "\n", "fontweight", ":", "str", "=", "\"normal\"", ",", "\n", "dpi", ":", "int", "=", "200", ",", "\n", "max_col", ":", "int", "=", "1", ",", "\n", "out_extension", ":", "str", "=", "\"png\"", ",", "\n", "out_dir", "=", "Path", "(", "\"./\"", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "figsize", "=", "figsize", "\n", "self", ".", "fontsize", "=", "fontsize", "\n", "self", ".", "fontfamily", "=", "fontfamily", "\n", "self", ".", "fontweight", "=", "fontweight", "\n", "self", ".", "dpi", "=", "dpi", "\n", "self", ".", "max_col", "=", "max_col", "\n", "self", ".", "out_extension", "=", "out_extension", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "self", ".", "metric_dic", "=", "self", ".", "nested_default_dict", "(", "3", ",", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.fit": [[61, 73], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "folder", ":", "Path", ")", ":", "\n", "        ", "\"\"\"\n        Reads metrics in the folder and fill the dictionnary of metrics.\n        At the end of this function, metric_dic should be filled as:\n\n            metric_dic[metric_name][method] = {\n                                                'x': ndarray [n_iter],\n                                                'y': ndarray [n_iter],\n                                                'pm': Optional[ndarray],\n                                               }\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.plot": [[74, 118], ["len", "matplotlib.Figure", "matplotlib.Figure.gca", "zip", "len", "min", "plt.Figure.gca.legend", "plt.Figure.gca.set_xlabel", "plt.Figure.gca.set_ylabel", "plt.Figure.gca.grid", "matplotlib.Figure.tight_layout", "save_path.mkdir", "matplotlib.Figure.savefig", "loguru.logger.info", "itertools.cycle", "itertools.cycle", "plt.Figure.gca.plot", "pathlib.Path", "plt.Figure.gca.fill_between"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot"], ["", "def", "plot", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "metric_dic", ")", "\n", "\n", "for", "metric", "in", "self", ".", "metric_dic", ":", "\n", "            ", "fig", "=", "plt", ".", "Figure", "(", "self", ".", "figsize", ",", "dpi", "=", "self", ".", "dpi", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "for", "style", ",", "color", ",", "method", "in", "zip", "(", "\n", "cycle", "(", "styles", ")", ",", "cycle", "(", "colors", ")", ",", "self", ".", "metric_dic", "[", "metric", "]", "\n", ")", ":", "\n", "                ", "method_dic", "=", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "\n", "ax", ".", "plot", "(", "\n", "method_dic", "[", "\"x\"", "]", ",", "\n", "method_dic", "[", "\"y\"", "]", ",", "\n", "label", "=", "method", ",", "\n", "color", "=", "color", ",", "\n", "linestyle", "=", "style", ",", "\n", ")", "\n", "if", "\"pm\"", "in", "method_dic", ":", "\n", "                    ", "ax", ".", "fill_between", "(", "\n", "method_dic", "[", "\"x\"", "]", ",", "\n", "method_dic", "[", "\"y\"", "]", "-", "method_dic", "[", "\"pm\"", "]", ",", "\n", "method_dic", "[", "\"y\"", "]", "+", "method_dic", "[", "\"pm\"", "]", ",", "\n", "color", "=", "color", ",", "\n", "alpha", "=", "0.3", ",", "\n", ")", "\n", "\n", "", "", "n_methods", "=", "len", "(", "self", ".", "metric_dic", "[", "metric", "]", ")", "\n", "n_cols", "=", "min", "(", "self", ".", "max_col", ",", "n_methods", ")", "\n", "ax", ".", "legend", "(", "\n", "bbox_to_anchor", "=", "(", "0.5", ",", "1.05", ")", ",", "\n", "loc", "=", "\"center\"", ",", "\n", "ncol", "=", "n_cols", ",", "\n", "shadow", "=", "True", ",", "\n", "prop", "=", "{", "\"size\"", ":", "6", "}", ",", "\n", ")", "\n", "ax", ".", "set_xlabel", "(", "method_dic", "[", "\"xlabel\"", "]", ")", "\n", "ax", ".", "set_ylabel", "(", "metric", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "save_path", "=", "Path", "(", "\"plots\"", ")", "/", "self", ".", "out_dir", "\n", "save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "save_name", "=", "save_path", "/", "f\"{metric}.{self.out_extension}\"", "\n", "fig", ".", "savefig", "(", "save_name", ")", "\n", "logger", ".", "info", "(", "f\"Figure saved at {save_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.nested_default_dict": [[119, 127], ["functools.partial", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "nested_default_dict", "(", "depth", ":", "int", ",", "final_type", ":", "Any", ",", "i", ":", "int", "=", "1", ")", ":", "\n", "        ", "if", "i", "==", "depth", ":", "\n", "            ", "return", "defaultdict", "(", "final_type", ")", "\n", "", "fn", "=", "partial", "(", "\n", "Plotter", ".", "nested_default_dict", ",", "depth", "=", "depth", ",", "final_type", "=", "final_type", ",", "i", "=", "i", "+", "1", "\n", ")", "\n", "return", "defaultdict", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.compute_confidence_interval": [[128, 157], ["len", "numpy.sqrt", "numpy.squeeze().astype", "pm.astype.astype.astype", "numpy.ones_like", "numpy.sum", "numpy.ones_like.sum", "numpy.ones_like.sum", "numpy.sqrt", "numpy.squeeze", "numpy.ones_like.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_confidence_interval", "(", "\n", "data", ":", "np", ".", "ndarray", ",", "\n", "axis", "=", "0", ",", "\n", "ignore_value", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Compute 95% confidence interval\n        :param data: An array of mean accuracy (or mAP) across a number of sampled episodes.\n        :return: the 95% confidence interval for this data.\n        \"\"\"", "\n", "assert", "len", "(", "data", ")", "\n", "if", "ignore_value", "is", "None", ":", "\n", "            ", "valid", "=", "np", ".", "ones_like", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "valid", "=", "data", "!=", "ignore_value", "\n", "", "m", "=", "np", ".", "sum", "(", "data", "*", "valid", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "/", "valid", ".", "sum", "(", "\n", "axis", "=", "axis", ",", "keepdims", "=", "True", "\n", ")", "\n", "# np.mean(data, axis=axis)", "\n", "std", "=", "np", ".", "sqrt", "(", "(", "(", "data", "-", "m", ")", "**", "2", "*", "valid", ")", ".", "sum", "(", "axis", "=", "axis", ")", "/", "valid", ".", "sum", "(", "axis", "=", "axis", ")", ")", "\n", "# std = np.std(data, axis=axis)", "\n", "\n", "pm", "=", "1.96", "*", "(", "std", "/", "np", ".", "sqrt", "(", "valid", ".", "sum", "(", "axis", "=", "axis", ")", ")", ")", "\n", "\n", "m", "=", "np", ".", "squeeze", "(", "m", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "pm", "=", "pm", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "return", "m", ",", "pm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.spider_plotter.SpiderPlotter.plot": [[22, 196], ["len", "matplotlib.subplots", "enumerate", "enumerate", "fig.tight_layout", "os.makedirs", "fig.savefig", "len", "len", "copy.deepcopy", "numpy.array", "min", "max", "max", "numpy.linspace", "numpy.abs().argmin", "len", "numpy.linspace", "ax.set_theta_offset", "ax.set_theta_direction", "ax.set_ylim", "ax.set_xticks", "ax.set_xticklabels", "ax.set_yticks", "ax.yaxis.grid", "ax.xaxis.grid", "ax.spines[].set_color", "ax.spines[].set_color", "ax.plot", "ax.text", "ax.fill", "list.sort", "enumerate", "ax.set_title", "ax.legend", "dict", "list", "print", "input", "print", "list.remove", "list", "ax.plot", "ax.text", "numpy.mean", "numpy.concatenate", "ax.plot", "ax.scatter", "len", "len", "spider_plotter.SpiderPlotter.metric_dic[].keys", "numpy.array", "min", "max", "numpy.mean", "numpy.abs", "spider_plotter.SpiderPlotter.metric_dic[].keys", "zip", "range", "numpy.ones", "len", "int", "numpy.round", "len", "numpy.round", "numpy.round", "input.split", "input", "method.split", "int", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot"], ["def", "plot", "(", "self", ",", "horizontal", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        metric_dic[metric_name][method] = {\n                                    'x': ndarray [n_points_found],\n                                    'y': ndarray [n_points_found],\n                                    'pm': Optional[ndarray],\n                                   }\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "metric_dic", ")", "\n", "if", "horizontal", ":", "\n", "            ", "nrows", "=", "1", "\n", "n_cols", "=", "len", "(", "self", ".", "metric_dic", ")", "\n", "figsize", "=", "(", "10", "*", "len", "(", "self", ".", "metric_dic", ")", ",", "13", ")", "\n", "", "else", ":", "\n", "            ", "nrows", "=", "len", "(", "self", ".", "metric_dic", ")", "\n", "n_cols", "=", "1", "\n", "figsize", "=", "(", "10", ",", "10", "*", "len", "(", "self", ".", "metric_dic", ")", ")", "\n", "\n", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "\n", "nrows", "=", "nrows", ",", "\n", "ncols", "=", "n_cols", ",", "\n", "subplot_kw", "=", "dict", "(", "projection", "=", "\"polar\"", ")", ",", "\n", "figsize", "=", "figsize", ",", "\n", "squeeze", "=", "True", ",", "\n", ")", "\n", "\n", "# Form the differences instead of absolute values", "\n", "baseline_values", "=", "{", "}", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metric_dic", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "methods", "=", "list", "(", "self", ".", "metric_dic", "[", "metric", "]", ".", "keys", "(", ")", ")", "\n", "print", "(", "f\"Methods detected : {methods} \\n  Which methods to use ? ('all' or space-separated indices.)\"", ")", "\n", "selection", "=", "input", "(", ")", "\n", "if", "selection", "==", "'all'", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "methods", "=", "[", "methods", "[", "int", "(", "x", ")", "]", "for", "x", "in", "selection", ".", "split", "(", "' '", ")", "]", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "f\"Methods detected : {methods} \\n  Which one to use as a baseline ?\"", ")", "\n", "baseline_method", "=", "methods", "[", "int", "(", "input", "(", ")", ")", "]", "\n", "methods", ".", "remove", "(", "baseline_method", ")", "\n", "", "x_names", "=", "deepcopy", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "baseline_method", "]", "[", "\"x\"", "]", ")", "\n", "y_baseline", "=", "np", ".", "array", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "baseline_method", "]", "[", "\"y\"", "]", ")", "\n", "baseline_values", "[", "metric", "]", "=", "y_baseline", "\n", "for", "method", "in", "methods", ":", "\n", "                ", "assert", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", "==", "x_names", ",", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", ",", "x_names", ")", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", "=", "np", ".", "array", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", ")", "-", "y_baseline", "\n", "", "del", "self", ".", "metric_dic", "[", "metric", "]", "[", "baseline_method", "]", "\n", "\n", "", "for", "i", ",", "metric_name", "in", "enumerate", "(", "self", ".", "metric_dic", ")", ":", "\n", "            ", "ax", "=", "axes", "[", "i", "]", "\n", "\n", "BG_WHITE", "=", "\"#fbf9f4\"", "\n", "BLUE", "=", "\"#2a475e\"", "\n", "GREY70", "=", "\"#b3b3b3\"", "\n", "GREY_LIGHT", "=", "\"#f2efe8\"", "\n", "\n", "min_val", "=", "min", "(", "\n", "[", "min", "(", "self", ".", "metric_dic", "[", "metric_name", "]", "[", "method", "]", "[", "\"y\"", "]", ")", "for", "method", "in", "methods", "]", "\n", ")", "\n", "max_val", "=", "max", "(", "\n", "[", "max", "(", "self", ".", "metric_dic", "[", "metric_name", "]", "[", "method", "]", "[", "\"y\"", "]", ")", "for", "method", "in", "methods", "]", "\n", ")", "\n", "max_avg_perf", "=", "max", "(", "\n", "[", "np", ".", "mean", "(", "self", ".", "metric_dic", "[", "metric_name", "]", "[", "method", "]", "[", "\"y\"", "]", ")", "for", "method", "in", "methods", "]", "\n", ")", "\n", "yticks", "=", "np", ".", "linspace", "(", "min_val", "-", "0.005", ",", "max_val", "+", "0.005", ",", "5", ")", "\n", "cloest_to_0", "=", "np", ".", "abs", "(", "yticks", ")", ".", "argmin", "(", ")", "\n", "# yticks = np.delete(yticks, cloest_to_0)", "\n", "\n", "PAD", "=", "(", "(", "max_val", "-", "min_val", ")", "/", "5", ")", "*", "0.5", "\n", "angle", "=", "3.14", "\n", "\n", "first_method", "=", "list", "(", "self", ".", "metric_dic", "[", "metric_name", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "x_names", "=", "self", ".", "metric_dic", "[", "metric_name", "]", "[", "first_method", "]", "[", "\"x\"", "]", "\n", "VARIABLES", "=", "[", "f\"{x} \\n ({np.round(100 * y, 1)})\"", "for", "x", ",", "y", "in", "zip", "(", "x_names", ",", "baseline_values", "[", "metric_name", "]", ")", "]", "\n", "VARIABLES_N", "=", "len", "(", "VARIABLES", ")", "\n", "\n", "# The angles at which the values of the numeric variables are placed", "\n", "ANGLES", "=", "[", "n", "/", "VARIABLES_N", "*", "2", "*", "np", ".", "pi", "for", "n", "in", "range", "(", "VARIABLES_N", ")", "]", "\n", "ANGLES", "+=", "ANGLES", "[", ":", "1", "]", "\n", "\n", "# Padding used to customize the location of the tick labels", "\n", "# X_VERTICAL_TICK_PADDING = 5", "\n", "# X_HORIZONTAL_TICK_PADDING = 50", "\n", "\n", "# Angle values going from 0 to 2*pi", "\n", "HANGLES", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "\n", "# Used for the equivalent of horizontal lines in cartesian coordinates plots", "\n", "# The last one is also used to add a fill which acts a background color.", "\n", "H", "=", "[", "np", ".", "ones", "(", "len", "(", "HANGLES", ")", ")", "*", "li", "for", "li", "in", "yticks", "]", "\n", "\n", "# fig.patch.set_facecolor(BG_WHITE)", "\n", "# ax.set_facecolor(BG_WHITE)", "\n", "\n", "# Rotate the \"\" 0 degrees on top.", "\n", "# There it where the first variable, avg_bill_length, will go.", "\n", "ax", ".", "set_theta_offset", "(", "np", ".", "pi", "/", "2", ")", "\n", "ax", ".", "set_theta_direction", "(", "-", "1", ")", "\n", "\n", "# Setting lower limit to negative value reduces overlap", "\n", "# for values that are 0 (the minimums)", "\n", "ax", ".", "set_ylim", "(", "yticks", "[", "0", "]", "-", "0.01", ",", "yticks", "[", "-", "1", "]", ")", "\n", "\n", "# Set values for the angular axis (x)", "\n", "ax", ".", "set_xticks", "(", "ANGLES", "[", ":", "-", "1", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "VARIABLES", ",", "size", "=", "30", ",", "y", "=", "-", "0.35", ")", "\n", "\n", "# Remove lines for radial axis (y)", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "yaxis", ".", "grid", "(", "False", ")", "\n", "ax", ".", "xaxis", ".", "grid", "(", "False", ")", "\n", "\n", "# Remove spines", "\n", "ax", ".", "spines", "[", "\"start\"", "]", ".", "set_color", "(", "\"none\"", ")", "\n", "ax", ".", "spines", "[", "\"polar\"", "]", ".", "set_color", "(", "\"none\"", ")", "\n", "\n", "# Add custom lines for radial axis (y) at 0, 0.5 and 1.", "\n", "_", "=", "[", "ax", ".", "plot", "(", "HANGLES", ",", "h", ",", "ls", "=", "(", "0", ",", "(", "6", ",", "6", ")", ")", ",", "c", "=", "GREY70", ")", "for", "h", "in", "H", "]", "\n", "_", "=", "ax", ".", "plot", "(", "HANGLES", ",", "[", "0.", "]", "*", "len", "(", "HANGLES", ")", ",", "ls", "=", "(", "0", ",", "(", "6", ",", "6", ")", ")", ",", "c", "=", "'black'", ",", "\n", "label", "=", "\"Strong baseline\"", ",", "linewidth", "=", "2", ")", "\n", "\n", "# Add levels -----------------------------------------------------", "\n", "# These labels indicate the values of the radial axis", "\n", "size", "=", "18", "\n", "_", "=", "[", "ax", ".", "text", "(", "angle", ",", "li", "+", "PAD", ",", "f\"+{np.round(li * 100, 1)}\"", "if", "li", ">", "0", "else", "np", ".", "round", "(", "li", "*", "100", ",", "1", ")", ",", "size", "=", "size", ")", "for", "li", "in", "yticks", "]", "\n", "ax", ".", "text", "(", "angle", ",", "0.", "+", "PAD", ",", "0.", ",", "size", "=", "size", ")", "\n", "\n", "# Now fill the area of the circle with radius 1.", "\n", "# This create the effect of gray background.", "\n", "ax", ".", "fill", "(", "HANGLES", ",", "H", "[", "-", "1", "]", ",", "GREY_LIGHT", ")", "\n", "\n", "# Fill lines and dots --------------------------------------------", "\n", "methods", ".", "sort", "(", ")", "\n", "for", "idx", ",", "method", "in", "enumerate", "(", "\n", "methods", "\n", ")", ":", "\n", "                ", "method_result", "=", "self", ".", "metric_dic", "[", "metric_name", "]", "[", "method", "]", "\n", "assert", "method_result", "[", "\"x\"", "]", "==", "x_names", ",", "(", "\n", "method", ",", "\n", "method_result", "[", "\"x\"", "]", ",", "\n", "x_names", ",", "\n", ")", "\n", "values", "=", "method_result", "[", "\"y\"", "]", "\n", "perf", "=", "np", ".", "mean", "(", "values", ")", "\n", "values", "=", "np", ".", "concatenate", "(", "[", "values", ",", "[", "values", "[", "0", "]", "]", "]", ")", "# to close the spider", "\n", "is_best", "=", "max_avg_perf", "==", "perf", "\n", "label", "=", "f\"{method.split('(')[0]} ({np.round(100 * perf, 2)})\"", "\n", "ax", ".", "plot", "(", "\n", "ANGLES", ",", "\n", "values", ",", "\n", "linewidth", "=", "4", "if", "'OSTIM'", "in", "method", "else", "2", ",", "\n", "c", "=", "spider_colors", "[", "idx", "]", ",", "\n", "label", "=", "rf\"\\textbf{{{label}}}\"", "if", "is_best", "else", "label", ",", "\n", ")", "\n", "ax", ".", "scatter", "(", "ANGLES", ",", "values", ",", "c", "=", "spider_colors", "[", "idx", "]", ",", "s", "=", "130", ",", "zorder", "=", "10", ")", "\n", "# ax.plot(ANGLES, values, c=method2color[method], linewidth=3, label=,)", "\n", "# ax.scatter(ANGLES, values, s=130, c=method2color[method], zorder=10)", "\n", "\n", "", "ax", ".", "set_title", "(", "fr\"\\textbf{{{pretty[metric_name]}}}\"", ",", "fontdict", "=", "{", "\"fontsize\"", ":", "30", "}", ",", "y", "=", "1.5", ")", "\n", "ax", ".", "legend", "(", "\n", "loc", "=", "\"center\"", ",", "\n", "bbox_to_anchor", "=", "[", "1.25", ",", "1.3", "]", ",", "# bottom-right", "\n", "ncol", "=", "1", ",", "\n", "frameon", "=", "False", ",", "# don't put a frame", "\n", "prop", "=", "{", "\"size\"", ":", "25", "}", ",", "\n", ")", "\n", "\n", "# ---- Save plots ----", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "fig", ".", "savefig", "(", "self", ".", "out_dir", "/", "f\"{self.filters}.pdf\"", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.my_default_dict.__init__": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.my_default_dict.__missing__": [[29, 31], ["csv_plotter.my_default_dict.fn"], "methods", ["None"], ["", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.CSVPlotter.fit": [[145, 223], ["list", "list.sort", "len", "csv_plotter.my_default_dict", "pathlib.Path", "p.glob", "csv_plotter.CSVPlotter.nested_default_dict", "pandas.read_csv", "pandas.read_csv.iterrows", "pathlib.Path", "x.split", "result_dir[].items", "numpy.array().astype", "list", "method_dic.items", "numpy.argsort", "filter", "[].append", "[].append", "[].append", "numpy.array", "len", "loguru.logger.warning", "max", "len", "row[].split", "len"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.plotter.Plotter.nested_default_dict"], ["def", "fit", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Reads metrics in the folder and fill the dictionnary of metrics.\n        At the end of this function, metric_dic should be filled as:\n\n            metric_dic[metric_name][method] = {\n                                                'x': ndarray [n_points_found],\n                                                'y': ndarray [n_points_found],\n                                                'pm': Optional[ndarray],\n                                               }\n        \"\"\"", "\n", "if", "kwargs", "[", "'use_pretty'", "]", ":", "\n", "            ", "process_dic", "=", "pretty", "\n", "", "else", ":", "\n", "            ", "process_dic", "=", "my_default_dict", "(", "lambda", "x", ":", "x", ")", "\n", "\n", "#  ===== Recover all csv result files =====", "\n", "", "p", "=", "Path", "(", "\"results\"", ")", "/", "kwargs", "[", "\"exp\"", "]", "\n", "csv_files", "=", "list", "(", "\n", "p", ".", "glob", "(", "\"**/*.csv\"", ")", "\n", ")", "# every csv file represents the  summary of an experiment", "\n", "csv_files", ".", "sort", "(", ")", "\n", "assert", "len", "(", "csv_files", ")", "\n", "\n", "#  ===== Recover all csv result files =====", "\n", "for", "file", "in", "csv_files", ":", "\n", "            ", "result_dir", "=", "self", ".", "nested_default_dict", "(", "3", ",", "list", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "file", ")", "\n", "\n", "# Perform necesary filtering", "\n", "filters", "=", "[", "x", ".", "split", "(", "\"=\"", ")", "for", "x", "in", "kwargs", "[", "\"filters\"", "]", "]", "\n", "for", "key", ",", "value", "in", "filters", ":", "\n", "                ", "expected_type", "=", "df", "[", "key", "]", ".", "dtypes", "\n", "cast_value", "=", "np", ".", "array", "(", "[", "value", "]", ")", ".", "astype", "(", "expected_type", ")", "[", "0", "]", "\n", "df", "=", "df", "[", "df", "[", "key", "]", "==", "cast_value", "]", "\n", "\n", "# Read remaining rows and add it to result_dir", "\n", "", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "                ", "for", "metric", "in", "kwargs", "[", "\"metrics\"", "]", ":", "\n", "                    ", "if", "kwargs", "[", "'use_pretty'", "]", ":", "\n", "                        ", "full_method_name", "=", "[", "\n", "process_dic", "[", "row", "[", "x", "]", ".", "split", "(", "\"(\"", ")", "[", "0", "]", "]", "for", "x", "in", "kwargs", "[", "\"groupby\"", "]", "\n", "]", "\n", "", "else", ":", "\n", "                        ", "full_method_name", "=", "[", "row", "[", "x", "]", "for", "x", "in", "kwargs", "[", "\"groupby\"", "]", "]", "\n", "\n", "", "full_method_name", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "full_method_name", ")", ")", "\n", "# full_method_name = list(filter(lambda x: x != 'None', full_method_name))", "\n", "method_at_row", "=", "\" + \"", ".", "join", "(", "full_method_name", ")", "\n", "x_value", "=", "(", "\"\\n\"", "+", "r\"$\\downarrow$\"", "+", "\"\\n\"", ")", ".", "join", "(", "[", "process_dic", "[", "row", "[", "x", "]", "]", "for", "x", "in", "kwargs", "[", "\"plot_versus\"", "]", "]", ")", "\n", "if", "metric", "in", "row", ":", "\n", "                        ", "result_dir", "[", "metric", "]", "[", "method_at_row", "]", "[", "x_value", "]", ".", "append", "(", "row", "[", "metric", "]", ")", "\n", "\n", "# Fill the metric_dic", "\n", "", "", "", "for", "metric", "in", "result_dir", ":", "\n", "                ", "for", "method", ",", "method_dic", "in", "result_dir", "[", "metric", "]", ".", "items", "(", ")", ":", "\n", "                    ", "for", "x_value", ",", "values", "in", "method_dic", ".", "items", "(", ")", ":", "\n", "                        ", "if", "len", "(", "method_dic", "[", "x_value", "]", ")", ">", "1", ":", "\n", "                            ", "logger", ".", "warning", "(", "\n", "f\"Method {method} contains {len(method_dic[x_value])} \\\n                                             possible values for {kwargs['plot_versus']}={x_value}. \\\n                                             Choosing the best among them.\"", "\n", ")", "\n", "", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", ".", "append", "(", "x_value", ")", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", ".", "append", "(", "\n", "max", "(", "method_dic", "[", "x_value", "]", ")", "\n", ")", "\n", "", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"xlabel\"", "]", "=", "kwargs", "[", "\"plot_versus\"", "]", "\n", "sorted_indexes", "=", "np", ".", "argsort", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", ")", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", "=", "[", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"x\"", "]", "[", "i", "]", "for", "i", "in", "sorted_indexes", "\n", "]", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", "=", "[", "\n", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", "[", "i", "]", "for", "i", "in", "sorted_indexes", "\n", "]", "\n", "\n", "", "", "", "self", ".", "out_dir", "=", "Path", "(", "\"plots\"", ")", "/", "kwargs", "[", "\"exp\"", "]", "\n", "self", ".", "filters", "=", "\"-\"", ".", "join", "(", "kwargs", "[", "\"filters\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.CSVPrinter.log_best": [[226, 253], ["hasattr", "len", "csv_plotter.CSVPrinter.metric_dic.keys", "csv_plotter.CSVPrinter.metric_dic[].keys", "csv_plotter.CSVPrinter.metric_dic[].items", "list", "loguru.logger.info", "csv_plotter.remove_args_from_name", "sorted", "len", "len", "csv_plotter.remove_args_from_name", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.remove_args_from_name", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.remove_args_from_name"], ["    ", "def", "log_best", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "\"metric_dic\"", ")", "\n", "assert", "len", "(", "self", ".", "metric_dic", ")", "\n", "all_metrics", "=", "self", ".", "metric_dic", ".", "keys", "(", ")", "\n", "for", "metric", "in", "self", ".", "metric_dic", ":", "\n", "            ", "all_methods", "=", "self", ".", "metric_dic", "[", "metric", "]", ".", "keys", "(", ")", "\n", "all_methods_stems", "=", "[", "remove_args_from_name", "(", "full_name", ")", "for", "full_name", "in", "all_methods", "]", "\n", "stem2methods", "=", "{", "stem", ":", "[", "meth", "for", "meth", "in", "all_methods", "if", "remove_args_from_name", "(", "meth", ")", "==", "stem", "]", "for", "stem", "in", "all_methods_stems", "}", "\n", "# logger.warning(all_methods)", "\n", "for", "method", ",", "res", "in", "self", ".", "metric_dic", "[", "metric", "]", ".", "items", "(", ")", ":", "\n", "                ", "assert", "len", "(", "res", "[", "\"x\"", "]", ")", "==", "len", "(", "res", "[", "\"y\"", "]", ")", "==", "1", ",", "res", "\n", "", "", "for", "method_stem", "in", "stem2methods", ":", "\n", "            ", "revelant_methods", "=", "stem2methods", "[", "method_stem", "]", "\n", "all_items", "=", "[", "(", "method", ",", "[", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", "[", "0", "]", "for", "metric", "in", "all_metrics", "]", ")", "for", "method", "in", "revelant_methods", "]", "\n", "sorted_methods", "=", "list", "(", "\n", "sorted", "(", "\n", "all_items", ",", "\n", "key", "=", "lambda", "item", ":", "np", ".", "mean", "(", "item", "[", "1", "]", ")", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n", ")", "\n", "best_method", "=", "sorted_methods", "[", "0", "]", "\n", "msg", "=", "f\"Best method {best_method[0]} achieved overall : {best_method[1]}\"", "\n", "for", "metric", "in", "all_metrics", ":", "\n", "                ", "msg", "+=", "f\" and {metric}={self.metric_dic[metric][best_method[0]]['y'][0]}\"", "\n", "", "logger", ".", "info", "(", "\n", "msg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.CSVPrinter.log_latex": [[255, 276], ["hasattr", "collections.defaultdict", "pandas.DataFrame", "print", "csv_plotter.CSVPrinter.metric_dic[].keys", "df[].append", "pandas.DataFrame.to_markdown", "df[].append"], "methods", ["None"], ["", "", "def", "log_latex", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "hasattr", "(", "self", ",", "\"metric_dic\"", ")", "\n", "for", "metric", "in", "self", ".", "metric_dic", ":", "\n", "            ", "all_methods", "=", "self", ".", "metric_dic", "[", "metric", "]", ".", "keys", "(", ")", "\n", "\n", "# for method in all_methods:", "\n", "#     msg = f\"{method} & \"", "\n", "#     for metric in kwargs['metrics']:", "\n", "#         value = self.metric_dic[metric][method][\"y\"][0]", "\n", "#         msg += f\"{np.round(100 * value, 2)} & \"", "\n", "\n", "#     logger.info(", "\n", "#         msg", "\n", "#     )", "\n", "", "df", "=", "defaultdict", "(", "list", ")", "\n", "for", "method", "in", "all_methods", ":", "\n", "            ", "df", "[", "\"method\"", "]", ".", "append", "(", "method", ")", "\n", "for", "metric", "in", "kwargs", "[", "\"metrics\"", "]", ":", "\n", "                ", "df", "[", "metric", "]", ".", "append", "(", "self", ".", "metric_dic", "[", "metric", "]", "[", "method", "]", "[", "\"y\"", "]", "[", "0", "]", ")", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "df", ")", "\n", "print", "(", "df", ".", "to_markdown", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.str2bool": [[14, 23], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.parse_args": [[111, 138], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.parse_args"], ["", "", "def", "parse_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Plot training metrics\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp\"", ",", "type", "=", "str", ",", "help", "=", "\"Name of the experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--action\"", ",", "type", "=", "str", ",", "default", "=", "\"plot\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--plot_versus\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_pretty\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--latex\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--horizontal\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--filters\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "\"Format: n_query=5 n_shot=1 ...\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--metrics\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "\"mean_acc\"", ",", "\"mean_features_rocauc\"", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--groupby\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"Defines the methods compared. Ex: postpool_transforms\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.csv_plotter.remove_args_from_name": [[278, 284], ["part.split", "full_name.split"], "function", ["None"], ["", "", "def", "remove_args_from_name", "(", "full_name", ":", "str", ")", ":", "\n", "    ", "'''\n    Args:\n        A full method name will be in the form Classifier_name(args_cls) + Detector_name(args_det)\n    '''", "\n", "return", "'+'", ".", "join", "(", "[", "part", ".", "split", "(", "'('", ")", "[", "0", "]", "for", "part", "in", "full_name", ".", "split", "(", "'+'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.fit": [[61, 104], ["list", "list.sort", "len", "pathlib.Path", "p.glob", "x.split", "open", "json.load", "type", "str", "torch.load", "pathlib.Path", "numpy.array().astype", "pathlib.Path", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["def", "fit", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Reads metrics in the folder and fill the dictionnary of metrics.\n        At the end of this function, metric_dic should be filled as:\n\n            metric_dic[method][metric_name] = torch.Tensor\n        \"\"\"", "\n", "\n", "#  ===== Recover all csv result files =====", "\n", "p", "=", "Path", "(", "\"results\"", ")", "/", "kwargs", "[", "\"exp\"", "]", "\n", "torch_files", "=", "list", "(", "\n", "p", ".", "glob", "(", "\"**/*.pt\"", ")", "\n", ")", "\n", "torch_files", ".", "sort", "(", ")", "\n", "assert", "len", "(", "torch_files", ")", "\n", "\n", "self", ".", "baseline", "=", "{", "}", "\n", "\n", "for", "file", "in", "torch_files", ":", "\n", "\n", "# ==== Make sure this is a relevant experiment ====", "\n", "\n", "            ", "filters", "=", "[", "x", ".", "split", "(", "\"=\"", ")", "for", "x", "in", "kwargs", "[", "\"filters\"", "]", "]", "\n", "keep", "=", "True", "\n", "with", "open", "(", "Path", "(", "file", ".", "parent", ")", "/", "'config.json'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "key", ",", "value", "in", "filters", ":", "\n", "                ", "expected_type", "=", "type", "(", "config", "[", "key", "]", ")", "\n", "cast_value", "=", "np", ".", "array", "(", "[", "value", "]", ")", ".", "astype", "(", "expected_type", ")", "[", "0", "]", "\n", "if", "config", "[", "key", "]", "!=", "cast_value", ":", "\n", "                    ", "keep", "=", "False", "\n", "\n", "", "", "if", "keep", ":", "\n", "                ", "array_name", "=", "file", ".", "stem", "\n", "# method = config[args.group_by]", "\n", "method", "=", "str", "(", "file", ".", "parts", "[", "-", "2", "]", ")", "\n", "tensor", "=", "torch", ".", "load", "(", "file", ")", "\n", "if", "'SimpleShot'", "in", "method", ":", "\n", "                    ", "self", ".", "baseline", "[", "array_name", "]", "=", "tensor", "\n", "", "else", ":", "\n", "                    ", "self", ".", "metric_dic", "[", "method", "]", "[", "array_name", "]", "=", "tensor", "\n", "\n", "", "", "", "self", ".", "out_dir", "=", "Path", "(", "\"plots\"", ")", "/", "kwargs", "[", "\"exp\"", "]", "/", "\"-\"", ".", "join", "(", "kwargs", "[", "\"filters\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.TorchPlotter.plot": [[105, 158], ["torch_plotter.TorchPlotter.baseline[].size", "torch_plotter.TorchPlotter.baseline[].view", "inliers.view", "sklearn.metrics.roc_curve", "numpy.round", "matplotlib.subplots", "list", "list.sort", "enumerate", "matplotlib.subplots_adjust", "matplotlib.legend", "torch_plotter.TorchPlotter.out_dir.mkdir", "matplotlib.savefig", "matplotlib.clf", "torch_plotter.TorchPlotter.baseline[].bool", "baseline_maxprobs.numpy", "torch_plotter.TorchPlotter.metric_dic.keys", "zip", "[].size", "[].view", "seaborn.kdeplot", "seaborn.kdeplot", "seaborn.kdeplot", "seaborn.kdeplot", "sklearn.metrics.roc_curve", "ax.set_xlabel", "ax.set_ylabel", "numpy.round", "numpy.round", "ax.set_title", "ax.spines[].set_visible", "ax.spines[].set_visible", "sklearn.metrics.auc", "len", "[].bool", "baseline_maxprobs[].numpy", "flat_maxprobs[].numpy", "baseline_maxprobs[].numpy", "flat_maxprobs[].numpy", "flat_maxprobs.numpy", "ax.spines[].set_visible", "ax.set_yticks", "sklearn.metrics.auc", "torch.log", "abs", "torch.log", "method.split"], "methods", ["None"], ["", "def", "plot", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "inliers", "=", "~", "self", ".", "baseline", "[", "'outliers'", "]", ".", "bool", "(", ")", "\n", "n_tasks", ",", "n_q", ",", "K", "=", "self", ".", "baseline", "[", "'probas_q'", "]", ".", "size", "(", ")", "\n", "flat_probs", "=", "self", ".", "baseline", "[", "'probas_q'", "]", ".", "view", "(", "-", "1", ",", "K", ")", "\n", "baseline_maxprobs", "=", "-", "(", "flat_probs", "*", "torch", ".", "log", "(", "flat_probs", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "all_inliers", "=", "inliers", ".", "view", "(", "-", "1", ")", "\n", "fp_rate", ",", "tp_rate", ",", "_", "=", "roc_curve", "(", "(", "~", "all_inliers", ")", ".", "numpy", "(", ")", ",", "baseline_maxprobs", ".", "numpy", "(", ")", ")", "\n", "baseline_auroc", "=", "np", ".", "round", "(", "100", "*", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", ",", "1", ")", "\n", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "6", ",", "3", ")", ",", "ncols", "=", "len", "(", "self", ".", "metric_dic", ")", ",", "sharey", "=", "True", ")", "\n", "methods", "=", "list", "(", "self", ".", "metric_dic", ".", "keys", "(", ")", ")", "\n", "methods", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "for", "i", ",", "(", "method", ",", "ax", ")", "in", "enumerate", "(", "zip", "(", "methods", ",", "axes", ")", ")", ":", "\n", "\n", "            ", "inliers", "=", "~", "self", ".", "metric_dic", "[", "method", "]", "[", "'outliers'", "]", ".", "bool", "(", ")", "\n", "n_tasks", ",", "n_q", ",", "K", "=", "self", ".", "metric_dic", "[", "method", "]", "[", "'probas_q'", "]", ".", "size", "(", ")", "\n", "\n", "flat_probs", "=", "self", ".", "metric_dic", "[", "method", "]", "[", "'probas_q'", "]", ".", "view", "(", "-", "1", ",", "K", ")", "\n", "# flat_maxprobs = flat_probs.max(-1).values", "\n", "\n", "flat_maxprobs", "=", "-", "(", "flat_probs", "*", "torch", ".", "log", "(", "flat_probs", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "sns", ".", "kdeplot", "(", "baseline_maxprobs", "[", "all_inliers", "]", ".", "numpy", "(", ")", ",", "color", "=", "colors", "[", "0", "]", ",", "alpha", "=", "1.0", ",", "linestyle", "=", "'--'", ",", "ax", "=", "ax", ",", "label", "=", "\"Inliers at initialization\"", ")", "\n", "sns", ".", "kdeplot", "(", "flat_maxprobs", "[", "all_inliers", "]", ".", "numpy", "(", ")", ",", "fill", "=", "True", ",", "color", "=", "colors", "[", "0", "]", ",", "alpha", "=", "0.4", ",", "label", "=", "'Inliers after inference'", ",", "ax", "=", "ax", ")", "\n", "\n", "sns", ".", "kdeplot", "(", "baseline_maxprobs", "[", "~", "all_inliers", "]", ".", "numpy", "(", ")", ",", "color", "=", "colors", "[", "1", "]", ",", "alpha", "=", "1.0", ",", "linestyle", "=", "'--'", ",", "ax", "=", "ax", ",", "label", "=", "\"Outliers at initialization\"", ")", "\n", "sns", ".", "kdeplot", "(", "flat_maxprobs", "[", "~", "all_inliers", "]", ".", "numpy", "(", ")", ",", "fill", "=", "True", ",", "color", "=", "colors", "[", "1", "]", ",", "alpha", "=", "0.4", ",", "label", "=", "'Outliers after inference'", ",", "ax", "=", "ax", ")", "\n", "\n", "fp_rate", ",", "tp_rate", ",", "_", "=", "roc_curve", "(", "(", "~", "all_inliers", ")", ".", "numpy", "(", ")", ",", "flat_maxprobs", ".", "numpy", "(", ")", ")", "\n", "# ax.set_xlim(0, 1.7)", "\n", "# ax.set_ylim(0, 2.1)", "\n", "ax", ".", "set_xlabel", "(", "r\"Closed-set entropy (nats)\"", ")", "\n", "ax", ".", "set_ylabel", "(", "r\"Normalized frequency\"", ")", "\n", "# else:", "\n", "res", "=", "np", ".", "round", "(", "100", "*", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", ",", "1", ")", "\n", "delta", "=", "np", ".", "round", "(", "res", "-", "baseline_auroc", ",", "1", ")", "\n", "sign", "=", "r\"\\uparrow\"", "if", "delta", ">=", "0", "else", "r\"\\downarrow\"", "\n", "ax", ".", "set_title", "(", "rf'\\textbf{{{pretty[method.split(\"(\")[0]]}}}'", "\"\\n\"", "fr\"AUROC=${res}$ (${sign} {abs(delta)}$)\"", ",", "y", "=", "0.97", ")", "\n", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "if", "i", "==", "1", ":", "\n", "                ", "ax", ".", "spines", "[", "\"left\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "", "plt", ".", "subplots_adjust", "(", "wspace", "=", "0.05", ")", "\n", "plt", ".", "legend", "(", "frameon", "=", "False", ",", "\n", "loc", "=", "\"center\"", ",", "\n", "bbox_to_anchor", "=", "[", "0.", ",", "1.3", "]", ",", "# bottom-right", "\n", "ncol", "=", "2", ",", ")", "\n", "\n", "self", ".", "out_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "plt", ".", "savefig", "(", "self", ".", "out_dir", "/", "f\"entropy_histograms.pdf\"", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.str2bool": [[22, 31], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"y\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "\"no\"", ",", "\"false\"", ",", "\"f\"", ",", "\"n\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"Boolean value expected.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.parse_args": [[33, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.plots.torch_plotter.parse_args"], ["", "", "def", "parse_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Plot training metrics\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp\"", ",", "type", "=", "str", ",", "help", "=", "\"Name of the experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_pretty\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--latex\"", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--filters\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "]", ",", "\n", "help", "=", "\"Format: n_query=5 n_shot=1 ...\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--groupby\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"Defines the methods compared. Ex: postpool_transforms\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.__init__": [[17, 32], ["abstract.AllInOne.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "inference_lr", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "num_rp_per_cls", ":", "int", ",", "\n", "gamma", ":", "float", ",", "\n", "lamb", ":", "float", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "num_rp_per_cls", "=", "num_rp_per_cls", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "lamb", "=", "lamb", "\n", "self", ".", "divide", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.__call__": [[33, 64], ["len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "support_labels.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rpl.RPL.compute_rpl_loss", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpl.RPL.compute_rpl_logits", "logits_q.softmax", "logits_q.softmax.detach().cpu", "outlier_scores.detach().cpu", "support_features.size", "dist_to_rp.mean().max", "logits_q.softmax.detach", "outlier_scores.detach", "dist_to_rp.mean"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.compute_rpl_loss", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.compute_rpl_logits"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "num_classes", "=", "len", "(", "support_labels", ".", "unique", "(", ")", ")", "\n", "\n", "self", ".", "reciprocal_points", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "num_classes", "*", "self", ".", "num_rp_per_cls", ",", "support_features", ".", "size", "(", "1", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "reciprocal_points", ")", "\n", "self", ".", "R", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "reciprocal_points", ",", "self", ".", "R", "]", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "for", "iter_", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "\n", "            ", "loss", ",", "_", ",", "_", "=", "self", ".", "compute_rpl_loss", "(", "support_features", ",", "support_labels", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits_q", ",", "dist_to_rp", "=", "self", ".", "compute_rpl_logits", "(", "query_features", ",", "num_classes", ")", "\n", "\n", "probs_q", "=", "logits_q", ".", "softmax", "(", "-", "1", ")", "\n", "outlier_scores", "=", "-", "dist_to_rp", ".", "mean", "(", "-", "1", ")", ".", "max", "(", "-", "1", ")", ".", "values", "\n", "\n", "return", "None", ",", "probs_q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "outlier_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.compute_rpl_logits": [[65, 77], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "rpl.RPL.cosine", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.cosine"], ["", "", "def", "compute_rpl_logits", "(", "self", ",", "features", ",", "num_classes", ")", ":", "\n", "# Calculate L2 distance to reciprocal points", "\n", "        ", "raw_dist_to_rp", "=", "-", "self", ".", "cosine", "(", "features", ",", "self", ".", "reciprocal_points", ")", "# [N, M]", "\n", "\n", "# expects each distance to be squared (squared euclidean distance)", "\n", "# dist_to_rp = raw_dist_to_rp ** 2", "\n", "dist_to_rp", "=", "raw_dist_to_rp", "\n", "dist_to_rp", "=", "torch", ".", "reshape", "(", "dist_to_rp", ",", "(", "dist_to_rp", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "self", ".", "num_rp_per_cls", ")", ")", "# [N, K, M // K]", "\n", "# output should be batch_size x num_classes", "\n", "logits", "=", "self", ".", "gamma", "*", "torch", ".", "mean", "(", "dist_to_rp", ",", "dim", "=", "2", ")", "\n", "\n", "return", "logits", ",", "dist_to_rp", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.cosine": [[78, 80], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "cosine", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "X", ",", "dim", "=", "1", ")", "@", "F", ".", "normalize", "(", "Y", ",", "dim", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.compute_rpl_loss": [[81, 106], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "support_features.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "rpl.RPL.compute_rpl_logits", "range", "torch.CrossEntropyLoss.sum", "support_labels.unique", "support_labels[].item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.CrossEntropyLoss."], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.rpl.RPL.compute_rpl_logits"], ["", "def", "compute_rpl_loss", "(", "self", ",", "support_features", ",", "support_labels", ")", ":", "\n", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "latent_size", "=", "support_features", ".", "size", "(", "1", ")", "\n", "\n", "open_loss", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "num_classes", "=", "len", "(", "support_labels", ".", "unique", "(", ")", ")", "\n", "logits", ",", "dist_to_rp", "=", "self", ".", "compute_rpl_logits", "(", "support_features", ",", "num_classes", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "support_labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "curr_label", "=", "support_labels", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "self", ".", "divide", ":", "\n", "                ", "dist_to_cls_rp_vector", "=", "dist_to_rp", "[", "i", ",", "curr_label", "]", "/", "latent_size", "\n", "", "else", ":", "\n", "                ", "dist_to_cls_rp_vector", "=", "dist_to_rp", "[", "i", ",", "curr_label", "]", "\n", "", "open_loss", "+=", "torch", ".", "mean", "(", "(", "dist_to_cls_rp_vector", "-", "self", ".", "R", "[", "curr_label", "]", ")", "**", "2", ")", "# [M // K]", "\n", "\n", "# this criterion is just cross entropy", "\n", "", "closed_loss", "=", "criterion", "(", "logits", ",", "support_labels", ")", ".", "sum", "(", ")", "\n", "\n", "open_loss", "=", "self", ".", "lamb", "*", "open_loss", "\n", "loss", "=", "closed_loss", "#+ open_loss", "\n", "\n", "return", "loss", ",", "open_loss", ",", "closed_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.open_max.OpenMax.__init__": [[17, 23], ["abstract.AllInOne.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "alpha", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.open_max.OpenMax.cosine": [[24, 26], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "cosine", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "X", ",", "dim", "=", "1", ")", "@", "F", ".", "normalize", "(", "Y", ",", "dim", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.open_max.OpenMax.__call__": [[27, 70], ["len", "query_features.size", "easyfsl.utils.compute_prototypes", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.softmax", "torch.cat.softmax", "support_labels.unique", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "n_shots", "=", "(", "support_labels", "==", "0", ")", ".", "sum", "(", ")", "\n", "n_classes", "=", "len", "(", "support_labels", ".", "unique", "(", ")", ")", "\n", "N_q", "=", "query_features", ".", "size", "(", "0", ")", "\n", "\n", "# Fit distributions", "\n", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "# if n_shots > 1:", "\n", "#     self.fit_weibull(support_features, support_labels)", "\n", "\n", "# Compute closed-set activations", "\n", "activations", "=", "-", "torch", ".", "cdist", "(", "query_features", ",", "self", ".", "prototypes", ")", "\n", "\n", "# Compute augmented logits", "\n", "\n", "weights", "=", "torch", ".", "ones", "(", "N_q", ",", "n_classes", ")", "\n", "# if n_shots > 1:", "\n", "#     top_k_class_values, top_k_class_indexes = activations.topk(k=self.alpha, largest=True, dim=-1)  # [k * Nq]", "\n", "#     top_k_class_values, top_k_class_indexes = top_k_class_values.ravel(), top_k_class_indexes.ravel()", "\n", "#     relevant_models = self.models[top_k_class_indexes.numpy()]  # [k*Nq, 3]", "\n", "#     new_weights = []", "\n", "#     for mod, activation in zip(relevant_models, top_k_class_values):", "\n", "#         dist = - activation  # Because we use cosine distance", "\n", "#         new_weights.append(exponweib.cdf(*mod, dist))", "\n", "#     new_weights = torch.Tensor(new_weights)", "\n", "\n", "#     sample_index = torch.arange(0, N_q).repeat_interleave(self.alpha).long()", "\n", "#     weights[sample_index, top_k_class_indexes] = new_weights", "\n", "\n", "revised_activations", "=", "weights", "*", "activations", "\n", "outlier_activation", "=", "(", "activations", "*", "(", "1", "-", "weights", ")", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "augmented_activations", "=", "torch", ".", "cat", "(", "[", "revised_activations", ",", "outlier_activation", "]", ",", "1", ")", "\n", "augmented_probs", "=", "augmented_activations", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "return", "None", ",", "augmented_probs", "[", ":", ",", ":", "-", "1", "]", ",", "augmented_probs", "[", ":", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.open_max.OpenMax.fit_weibull": [[71, 87], ["support_labels.unique", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "numpy.stack", "scipy.stats.exponweib.fit", "open_max.OpenMax.models.append"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "fit_weibull", "(", "self", ",", "support_features", ",", "support_labels", ")", ":", "\n", "        ", "\"\"\"\n        support_features [N, d]\n\n        Builds:\n            models : Shape [K, 3]\n        \"\"\"", "\n", "classes", "=", "support_labels", ".", "unique", "(", ")", "\n", "distances", "=", "torch", ".", "cdist", "(", "support_features", ",", "self", ".", "prototypes", ")", "\n", "self", ".", "models", "=", "[", "]", "\n", "for", "class_", "in", "classes", ":", "\n", "            ", "within_class_distances", "=", "distances", "[", "support_labels", "==", "class_", ",", "class_", "]", "\n", "# c, loc, scale = weibull_min.fit(within_class_distances)", "\n", "a", ",", "c", ",", "loc", ",", "scale", "=", "exponweib", ".", "fit", "(", "within_class_distances", ")", "\n", "self", ".", "models", ".", "append", "(", "[", "a", ",", "c", ",", "loc", ",", "scale", "]", ")", "\n", "", "self", ".", "models", "=", "np", ".", "stack", "(", "self", ".", "models", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.__init__": [[16, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "works_on_features", "=", "(", "\n", "False", "# by default most all-in-one methods need raw features and model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.compute_auc": [[22, 27], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.clear": [[28, 30], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.__call__": [[31, 49], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            support_features: support features\n            query_features: query features\n            support_labels: support labels\n\n        Returns:\n            support_soft_predictions: Tensor of shape [n_query, K], where K is the number of classes\n                in the task, representing the soft predictions of the method for support samples.\n            query_soft_predictions: Tensor of shape [n_query, K], where K is the number of classes\n                in the task, representing the soft predictions of the method for query samples.\n            outlier_scores: Tensor of shape [n_query,], where K is the number of classes\n                in the task, representing the soft predictions of the method for query samples.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.from_cli_args": [[50, 55], ["inspect.signature", "cls", "args._get_kwargs", "inspect.signature.parameters.keys"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_cli_args", "(", "cls", ",", "args", ")", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "cls", ".", "__init__", ")", "\n", "return", "cls", "(", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", "if", "k", "in", "signature", ".", "parameters", ".", "keys", "(", ")", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.__str__": [[57, 66], ["list", "len", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n", "            ", "arg_names", ".", "remove", "(", "\"args\"", ")", "\n", "", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={getattr(self, k)}\"", "for", "k", "in", "arg_names", "]", "\n", "return", "f\"{type(self).__name__}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.abstract.AllInOne.__repr__": [[67, 76], ["list", "len", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n", "            ", "arg_names", ".", "remove", "(", "\"args\"", ")", "\n", "", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={getattr(self, k)}\"", "for", "k", "in", "arg_names", "]", "\n", "return", "f\"{type(self).__name__}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.snatcher.SnatcherF.__init__": [[13, 49], ["src.utils.utils.strip_prefix", "src.utils.utils.strip_prefix", "snatcher.SnatcherF.attn_model.load_state_dict", "snatcher.SnatcherF.attn_model.to", "snatcher.SnatcherF.attn_model.eval", "loguru.logger.info", "torch.load", "ValueError", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["def", "__init__", "(", "self", ",", "args", ",", "temperature", ":", "float", ")", ":", "\n", "\n", "        ", "self", ".", "temperature", "=", "64.0", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "works_on_features", "=", "True", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# Load attention module", "\n", "if", "args", ".", "backbone", "==", "\"resnet12\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone", "==", "\"resnet18\"", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone", "==", "\"wrn2810\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"\"", ")", "\n", "", "weights", "=", "(", "\n", "Path", "(", "args", ".", "data_dir", ")", "\n", "/", "\"models\"", "\n", "/", "args", ".", "training", "\n", "/", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}.pth\"", "\n", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights", ")", "[", "\"params\"", "]", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"module.\"", ")", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"slf_attn.\"", ")", "\n", "\n", "self", ".", "attn_model", "=", "BACKBONES", "[", "\"MultiHeadAttention\"", "]", "(", "\n", "self", ".", "args", ",", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", "\n", ")", "\n", "missing_keys", ",", "unexpected", "=", "self", ".", "attn_model", ".", "load_state_dict", "(", "\n", "state_dict", ",", "strict", "=", "False", "\n", ")", "\n", "self", ".", "attn_model", "=", "self", ".", "attn_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "attn_model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Loaded Snatcher attention module. \\n Missing keys: {missing_keys} \\n Unexpected keys: {unexpected}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.snatcher.SnatcherF.__call__": [[51, 92], ["support_features.to.to.to", "query_features.to.to.to", "easyfsl.utils.compute_prototypes().to().unsqueeze", "torch.zeros", "logits_q.size", "torch.no_grad", "range", "logits_s.softmax().cpu", "logits_q.softmax().cpu", "torch.zeros.cpu", "easyfsl.utils.compute_prototypes().to", "snatcher.SnatcherF.attn_model", "logits_q.size", "easyfsl.utils.compute_prototypes().to().unsqueeze.clone().detach", "logits_q[].argmax", "torch.cdist", "torch.cdist", "snatcher.SnatcherF.attn_model", "logits_s.softmax", "logits_q.softmax", "easyfsl.utils.compute_prototypes", "easyfsl.utils.compute_prototypes().to().unsqueeze.clone"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "support_features", ",", "support_labels", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        query_features [Ns, d]\n        \"\"\"", "\n", "\n", "support_features", "=", "support_features", ".", "to", "(", "self", ".", "device", ")", "\n", "query_features", "=", "query_features", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "prototypes", "=", "(", "\n", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ".", "unsqueeze", "(", "0", ")", "\n", ")", "# [Nk, d]", "\n", "\n", "proto", "=", "self", ".", "attn_model", "(", "prototypes", ",", "prototypes", ",", "prototypes", ")", "[", "0", "]", "[", "0", "]", "# [K, d]", "\n", "\n", "logits_s", "=", "(", "\n", "-", "torch", ".", "cdist", "(", "support_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "logits_q", "=", "(", "\n", "-", "torch", ".", "cdist", "(", "query_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "\n", "\"\"\" Snatcher \"\"\"", "\n", "outlier_scores", "=", "torch", ".", "zeros", "(", "logits_q", ".", "size", "(", "0", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "logits_q", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "pproto", "=", "prototypes", ".", "clone", "(", ")", ".", "detach", "(", ")", "# [K, d]", "\n", "\"\"\" Algorithm 1 Line 1 \"\"\"", "\n", "c", "=", "logits_q", "[", "j", "]", ".", "argmax", "(", "0", ")", "\n", "\"\"\" Algorithm 1 Line 2 \"\"\"", "\n", "pproto", "[", "0", ",", "c", "]", "=", "query_features", "[", "j", "]", "\n", "\"\"\" Algorithm 1 Line 3 \"\"\"", "\n", "pproto", "=", "self", ".", "attn_model", "(", "pproto", ",", "pproto", ",", "pproto", ")", "[", "0", "]", "\n", "pdiff", "=", "(", "pproto", "-", "proto", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "sum", "(", ")", "/", "self", ".", "temperature", "\n", "\"\"\" pdiff: d_SnaTCHer in Algorithm 1 \"\"\"", "\n", "outlier_scores", "[", "j", "]", "=", "pdiff", "\n", "", "", "return", "(", "\n", "logits_s", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", ",", "\n", "logits_q", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", ",", "\n", "outlier_scores", ".", "cpu", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.proser.PROSER.__init__": [[16, 28], ["abstract.AllInOne.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "beta", ":", "float", ",", "\n", "inference_lr", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "n_dummies", ":", "float", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "n_dummies", "=", "n_dummies", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.proser.PROSER.cosine": [[29, 31], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "cosine", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "X", ",", "dim", "=", "1", ")", "@", "F", ".", "normalize", "(", "Y", ",", "dim", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.proser.PROSER.__call__": [[32, 77], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "support_labels.unique().size", "torch.Linear", "torch.Linear", "torch.Linear", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "support_features.size", "proser.PROSER.cls.parameters", "proser.PROSER.cls", "torch.CrossEntropyLoss.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "proser.PROSER.cls", "support_labels.unique", "logits[].max", "len", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cat.size", "torch.cat.size", "torch.cat.size", "logits_q[].max", "logits_q[].softmax"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# Metric dic", "\n", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "cls", "=", "nn", ".", "Linear", "(", "support_features", ".", "size", "(", "1", ")", ",", "num_classes", "+", "self", ".", "n_dummies", ")", "\n", "\n", "# Run adaptation", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "cls", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "\n", "            ", "logits", "=", "self", ".", "cls", "(", "support_features", ")", "\n", "\n", "closed_set_loss", "=", "criterion", "(", "logits", ",", "support_labels", ")", "\n", "\n", "maxdummy", "=", "logits", "[", ":", ",", "num_classes", ":", "]", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# [Nq, 1]", "\n", "dummpyoutputs", "=", "torch", ".", "cat", "(", "[", "logits", "[", ":", ",", ":", "num_classes", "]", ",", "maxdummy", "]", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dummpyoutputs", ")", ")", ":", "\n", "                ", "dummpyoutputs", "[", "i", ",", "support_labels", "[", "i", "]", "]", "=", "-", "1e9", "\n", "", "dummytargets", "=", "torch", ".", "ones_like", "(", "support_labels", ")", "*", "num_classes", "\n", "assert", "dummpyoutputs", ".", "size", "(", "1", ")", "==", "num_classes", "+", "1", ",", "dummpyoutputs", ".", "size", "(", "1", ")", "\n", "open_set_loss", "=", "criterion", "(", "dummpyoutputs", ",", "dummytargets", ")", "\n", "\n", "loss", "=", "closed_set_loss", "+", "self", ".", "beta", "*", "open_set_loss", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits_q", "=", "self", ".", "cls", "(", "query_features", ")", "\n", "logits_q", "[", ":", ",", "num_classes", "]", "=", "logits_q", "[", ":", ",", "num_classes", ":", "]", ".", "max", "(", "-", "1", ")", ".", "values", "# [Nq, 1]", "\n", "return", "(", "\n", "None", ",", "\n", "logits_q", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", ",", "\n", "logits_q", "[", ":", ",", "-", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.__init__": [[16, 38], ["abstract.AllInOne.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "softmax_temperature", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "inference_lr", ":", "float", ",", "\n", "mu_init", ":", "str", ",", "\n", "params2adapt", ":", "str", ",", "\n", "lambda_ce", ":", "float", ",", "\n", "lambda_marg", ":", "float", ",", "\n", "lambda_em", ":", "float", ",", "\n", "use_explicit_prototype", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_ce", "=", "lambda_ce", "\n", "self", ".", "lambda_em", "=", "lambda_em", "\n", "self", ".", "lambda_marg", "=", "lambda_marg", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n", "self", ".", "params2adapt", "=", "params2adapt", "\n", "self", ".", "mu_init", "=", "mu_init", "\n", "self", ".", "use_explicit_prototype", "=", "use_explicit_prototype", "# use for ablation, to compare with PROSER", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.cosine": [[39, 41], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "cosine", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "X", "-", "self", ".", "mu", ",", "dim", "=", "1", ")", "@", "F", ".", "normalize", "(", "Y", "-", "self", ".", "mu", ",", "dim", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.clear": [[42, 45], ["delattr", "delattr"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "delattr", "(", "self", ",", "'prototypes'", ")", "\n", "delattr", "(", "self", ",", "'mu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.get_logits": [[46, 55], ["ostim.OSTIM.cosine", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.cosine"], ["", "def", "get_logits", "(", "self", ",", "prototypes", ",", "query_features", ")", ":", "\n", "\n", "        ", "logits", "=", "self", ".", "cosine", "(", "query_features", ",", "prototypes", ")", "# [Nq, K]", "\n", "if", "not", "self", ".", "use_explicit_prototype", ":", "\n", "            ", "logits", "=", "torch", ".", "cat", "(", "\n", "[", "logits", ",", "-", "logits", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "1", "\n", ")", "# [Nq, Ns]", "\n", "\n", "", "return", "self", ".", "softmax_temperature", "*", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.__call__": [[56, 194], ["support_labels.unique().size", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "ostim.OSTIM.clear", "copy.deepcopy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "easyfsl.utils.compute_prototypes", "ostim.OSTIM.mu.requires_grad_", "params_list.append", "ostim.OSTIM.prototypes.requires_grad_", "params_list.append", "ostim.OSTIM.get_logits", "ostim.OSTIM.get_logits", "torch.cross_entropy", "torch.cross_entropy", "ostim.OSTIM.softmax", "q_cond_ent.mean", "ostim.OSTIM.softmax().mean", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ostim.OSTIM.get_logits", "ostim.OSTIM.get_logits", "logits_s[].softmax().detach", "logits_q[].softmax().detach", "outlier_scores.detach", "support_labels.unique", "kwargs[].squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logits_q[].softmax", "q_cond_ent_values.append", "q_ent_values.append", "ce_values.append", "kwargs[].bool", "[].float().mean().item", "acc_values.append", "inlier_entropy.append", "outlier_entropy.append", "inlier_outscore.append", "oulier_outscore.append", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "auprs.append", "sklearn.metrics.precision_recall_curve", "ostim.OSTIM.softmax", "support_features.size", "ostim.OSTIM.softmax", "q_cond_ent.mean().item", "div.item", "torch.cross_entropy.item", "q_cond_ent[].mean().item", "q_cond_ent[].mean().item", "outlier_scores[].mean().item", "outlier_scores[].mean().item", "kwargs[].bool.numpy", "outlier_scores.numpy", "outlier_scores.numpy", "logits_s[].softmax", "logits_q[].softmax", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "ValueError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.log", "torch.log", "torch.log", "torch.log", "[].float().mean", "support_features.size", "support_features.size", "torch.log", "torch.log", "torch.log", "torch.log", "q_cond_ent.mean", "q_cond_ent[].mean", "q_cond_ent[].mean", "outlier_scores[].mean", "outlier_scores[].mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "[].float", "logits_q[].softmax.argmax"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.all_in_one.ostim.OSTIM.clear", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "self", ".", "iter_", "=", "0", "\n", "\n", "# Metric dic", "\n", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "# Initialize weights", "\n", "if", "self", ".", "mu_init", "==", "\"base\"", ":", "\n", "            ", "self", ".", "mu", "=", "deepcopy", "(", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ")", "\n", "", "elif", "self", ".", "mu_init", "==", "\"zeros\"", ":", "\n", "            ", "self", ".", "mu", "=", "torch", ".", "zeros", "(", "support_features", ".", "size", "(", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "mu_init", "==", "\"rand\"", ":", "\n", "            ", "self", ".", "mu", "=", "0.1", "*", "torch", ".", "randn", "(", "1", ",", "support_features", ".", "size", "(", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "mu_init", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "mu", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "query_features", "]", ",", "0", ")", ".", "mean", "(", "\n", "0", ",", "keepdim", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Mu init {self.mu_init} not recognized.\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "if", "self", ".", "use_explicit_prototype", ":", "\n", "                ", "self", ".", "prototypes", "=", "torch", ".", "cat", "(", "[", "self", ".", "prototypes", ",", "torch", ".", "zeros", "(", "1", ",", "support_features", ".", "size", "(", "1", ")", ")", "]", ",", "0", ")", "\n", "\n", "", "", "params_list", "=", "[", "]", "\n", "if", "\"mu\"", "in", "self", ".", "params2adapt", ":", "\n", "            ", "self", ".", "mu", ".", "requires_grad_", "(", ")", "\n", "params_list", ".", "append", "(", "self", ".", "mu", ")", "\n", "", "if", "\"prototypes\"", "in", "self", ".", "params2adapt", ":", "\n", "            ", "self", ".", "prototypes", ".", "requires_grad_", "(", ")", "\n", "params_list", ".", "append", "(", "self", ".", "prototypes", ")", "\n", "\n", "# Run adaptation", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params_list", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "q_cond_ent_values", "=", "[", "]", "\n", "auprs", "=", "[", "]", "\n", "q_ent_values", "=", "[", "]", "\n", "ce_values", "=", "[", "]", "\n", "inlier_entropy", "=", "[", "]", "\n", "outlier_entropy", "=", "[", "]", "\n", "inlier_outscore", "=", "[", "]", "\n", "oulier_outscore", "=", "[", "]", "\n", "acc_values", "=", "[", "]", "\n", "\n", "for", "self", ".", "iter_", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "\n", "# Compute loss", "\n", "\n", "            ", "logits_s", "=", "self", ".", "get_logits", "(", "self", ".", "prototypes", ",", "support_features", ")", "\n", "logits_q", "=", "self", ".", "get_logits", "(", "self", ".", "prototypes", ",", "query_features", ")", "\n", "\n", "ce", "=", "F", ".", "cross_entropy", "(", "logits_s", ",", "support_labels", ")", "\n", "q_probs", "=", "logits_q", ".", "softmax", "(", "-", "1", ")", "\n", "q_cond_ent", "=", "-", "(", "q_probs", "*", "torch", ".", "log", "(", "q_probs", "+", "1e-12", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "lambda_ce", "*", "ce", "\n", "em", "=", "q_cond_ent", ".", "mean", "(", "0", ")", "\n", "marginal_y", "=", "logits_q", ".", "softmax", "(", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "div", "=", "(", "marginal_y", "*", "torch", ".", "log", "(", "marginal_y", ")", ")", ".", "sum", "(", "0", ")", "\n", "loss", "+=", "self", ".", "lambda_em", "*", "em", "+", "self", ".", "lambda_marg", "*", "div", "\n", "\n", "# Note : we track metrics before the optimization is performed", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outlier_scores", "=", "q_probs", "[", ":", ",", "-", "1", "]", "\n", "closed_q_probs", "=", "logits_q", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", "\n", "q_cond_ent", "=", "-", "(", "closed_q_probs", "*", "torch", ".", "log", "(", "closed_q_probs", "+", "1e-12", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "q_cond_ent_values", ".", "append", "(", "q_cond_ent", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "q_ent_values", ".", "append", "(", "div", ".", "item", "(", ")", ")", "\n", "ce_values", ".", "append", "(", "ce", ".", "item", "(", ")", ")", "\n", "outliers", "=", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "\n", "inliers", "=", "~", "outliers", "\n", "acc", "=", "(", "closed_q_probs", ".", "argmax", "(", "-", "1", ")", "==", "kwargs", "[", "\"query_labels\"", "]", ")", "[", "inliers", "]", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "acc_values", ".", "append", "(", "acc", ")", "\n", "inlier_entropy", ".", "append", "(", "q_cond_ent", "[", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "outlier_entropy", ".", "append", "(", "q_cond_ent", "[", "~", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "inlier_outscore", ".", "append", "(", "outlier_scores", "[", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "oulier_outscore", ".", "append", "(", "outlier_scores", "[", "~", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "\n", "outliers", ".", "numpy", "(", ")", ",", "outlier_scores", ".", "numpy", "(", ")", ")", "\n", "aupr", "=", "auc_fn", "(", "recall", ",", "precision", ")", "\n", "auprs", ".", "append", "(", "aupr", ")", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "\n", "(", "~", "inliers", ")", ".", "numpy", "(", ")", ",", "outlier_scores", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "# Optimize", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"cond_ent\"", "]", ".", "append", "(", "\n", "q_cond_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"marg_ent\"", "]", ".", "append", "(", "\n", "q_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ce_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"acc\"", "]", ".", "append", "(", "acc_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"aupr\"", "]", ".", "append", "(", "auprs", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"inlier_entropy\"", "]", ".", "append", "(", "\n", "inlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"outlier_entropy\"", "]", ".", "append", "(", "\n", "outlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"inlier_outscore\"", "]", ".", "append", "(", "\n", "inlier_outscore", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"oulier_outscore\"", "]", ".", "append", "(", "\n", "oulier_outscore", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"oulier_outscore\"", "]", ".", "append", "(", "\n", "oulier_outscore", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits_s", "=", "self", ".", "get_logits", "(", "self", ".", "prototypes", ",", "support_features", ")", "\n", "logits_q", "=", "self", ".", "get_logits", "(", "self", ".", "prototypes", ",", "query_features", ")", "\n", "outlier_scores", "=", "logits_q", ".", "softmax", "(", "-", "1", ")", "[", ":", ",", "-", "1", "]", "\n", "\n", "# Ensure that nothing persists after", "\n", "", "self", ".", "clear", "(", ")", "\n", "return", "(", "\n", "logits_s", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", ".", "detach", "(", ")", ",", "\n", "logits_q", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", ".", "detach", "(", ")", ",", "\n", "outlier_scores", ".", "detach", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cifar.FewShotCIFAR100.__init__": [[17, 92], ["torchvision.datasets.CIFAR100.__init__", "cifar.FewShotCIFAR100._load_meta", "sorted", "numpy.vstack().reshape", "cifar.FewShotCIFAR100.images.transpose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "str", "cifar.FewShotCIFAR100.download", "cifar.FewShotCIFAR100._check_integrity", "RuntimeError", "open", "json.load", "cifar.FewShotCIFAR100.class_to_idx.values", "os.path.join", "open", "pickle.load", "cifar.FewShotCIFAR100.images.append", "cifar.FewShotCIFAR100.labels.extend", "numpy.vstack", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "range", "len", "cifar.FewShotCIFAR100.class_to_idx.values"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Path", ",", "\n", "specs_file", ":", "Path", ",", "\n", "image_size", ":", "int", "=", "32", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "transform", "=", "(", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "NORMALIZE", ",", "\n", "]", "\n", ")", "\n", "if", "training", "\n", "else", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "[", "image_size", ",", "image_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "NORMALIZE", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "\n", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", "\n", "str", "(", "root", ")", ",", "\n", "transform", "=", "transform", ",", "\n", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset not found or corrupted.\"", "\n", "+", "\" You can use download=True to download it\"", "\n", ")", "\n", "\n", "", "downloaded_list", "=", "self", ".", "train_list", "+", "self", ".", "test_list", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n", "with", "open", "(", "specs_file", ",", "\"r\"", ")", "as", "file", ":", "\n", "            ", "self", ".", "specs", "=", "json", ".", "load", "(", "file", ")", "\n", "\n", "", "self", ".", "class_to_idx", "=", "{", "\n", "class_name", ":", "self", ".", "class_to_idx", "[", "class_name", "]", "\n", "for", "class_name", "in", "self", ".", "specs", "[", "\"class_names\"", "]", "\n", "}", "\n", "self", ".", "sorted_class_ids", "=", "sorted", "(", "self", ".", "class_to_idx", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "images", ":", "Any", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "items_to_keep", "=", "[", "\n", "item", "\n", "for", "item", "in", "range", "(", "len", "(", "entry", "[", "\"data\"", "]", ")", ")", "\n", "if", "entry", "[", "\"fine_labels\"", "]", "[", "item", "]", "in", "self", ".", "class_to_idx", ".", "values", "(", ")", "\n", "]", "\n", "self", ".", "images", ".", "append", "(", "[", "entry", "[", "\"data\"", "]", "[", "item", "]", "for", "item", "in", "items_to_keep", "]", ")", "\n", "self", ".", "labels", ".", "extend", "(", "\n", "[", "entry", "[", "\"fine_labels\"", "]", "[", "item", "]", "for", "item", "in", "items_to_keep", "]", "\n", ")", "\n", "\n", "", "", "self", ".", "images", "=", "np", ".", "vstack", "(", "self", ".", "images", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "images", "=", "self", ".", "images", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cifar.FewShotCIFAR100.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cifar.FewShotCIFAR100.__getitem__": [[96, 102], ["cifar.FewShotCIFAR100.transform", "cifar.FewShotCIFAR100.sorted_class_ids.index", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "Image", ".", "fromarray", "(", "self", ".", "images", "[", "item", "]", ")", ")", "\n", "\n", "label", "=", "self", ".", "sorted_class_ids", ".", "index", "(", "self", ".", "labels", "[", "item", "]", ")", "\n", "\n", "return", "img", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.features_dataset.FeaturesDataset.__init__": [[9, 28], ["len", "zip", "loguru.logger.warning", "features_dataset.FeaturesDataset.data.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "features_dict", ":", "Dict", "[", "int", ",", "ndarray", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        features_dict[class] = [tensor1, tensor2, ..., tensorN]\n        \"\"\"", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "data", "=", "[", "]", "\n", "for", "class_", "in", "features_dict", ":", "\n", "            ", "all_features", "=", "features_dict", "[", "class_", "]", "\n", "n_samples", "=", "len", "(", "all_features", ")", "\n", "if", "n_samples", ">=", "15", ":", "# filter out classes with too few samples", "\n", "                ", "self", ".", "labels", "+=", "[", "class_", "]", "*", "n_samples", "\n", "for", "tensor", "in", "zip", "(", "all_features", ")", ":", "\n", "                    ", "self", ".", "data", ".", "append", "(", "tensor", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "f\"Filtered out class {class_} because only contains {n_samples} samples\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.features_dataset.FeaturesDataset.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.features_dataset.FeaturesDataset.__getitem__": [[33, 35], ["item.long", "item.long"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ":", "\n", "        ", "return", "self", ".", "data", "[", "item", ".", "long", "(", ")", "]", ",", "self", ".", "labels", "[", "item", ".", "long", "(", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.tiered_imagenet.TieredImageNet.__init__": [[17, 37], ["utils.get_transforms", "torchvision.datasets.VisionDataset.__init__", "set", "dict", "str", "tiered_imagenet.TieredImageNet.load_data_from_pkl", "numpy.load", "enumerate", "tiered_imagenet.TieredImageNet.id_to_class.items"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.tiered_imagenet.TieredImageNet.load_data_from_pkl", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "transform", "=", "get_transforms", "(", "args", ")", "\n", "\n", "super", "(", "TieredImageNet", ",", "self", ")", ".", "__init__", "(", "\n", "str", "(", "root", ")", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", "\n", ")", "\n", "\n", "# Get images and labels", "\n", "self", ".", "labels", "=", "self", ".", "load_data_from_pkl", "(", "root", "/", "f\"{split}_labels.pkl\"", ")", "[", "\"labels\"", "]", "\n", "self", ".", "images", "=", "np", ".", "load", "(", "root", "/", "f\"{split}_images.npz\"", ")", "[", "\"images\"", "]", "\n", "self", ".", "class_list", "=", "set", "(", "self", ".", "labels", ")", "\n", "self", ".", "id_to_class", "=", "dict", "(", "enumerate", "(", "self", ".", "class_list", ")", ")", "\n", "self", ".", "class_to_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "id_to_class", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.tiered_imagenet.TieredImageNet.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.tiered_imagenet.TieredImageNet.load_data_from_pkl": [[41, 52], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "load_data_from_pkl", "(", "self", ",", "file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "\"rb\"", ")", "as", "fo", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "\"latin1\"", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.tiered_imagenet.TieredImageNet.__getitem__": [[53, 64], ["tiered_imagenet.TieredImageNet.transform", "tiered_imagenet.TieredImageNet.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "(", "\n", "self", ".", "transform", "(", "self", ".", "images", "[", "item", "]", ")", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet.ImageNet.__init__": [[22, 39], ["utils.get_transforms", "enumerate", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.walk", "os.walk", "os.walk", "os.walk", "imagenet.ImageNet.labels.append", "imagenet.ImageNet.images.append"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms"], ["def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "get_transforms", "(", "args", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "class_id", ",", "class_name", "in", "enumerate", "(", "os", ".", "listdir", "(", "root", "/", "\"val\"", ")", ")", ":", "\n", "            ", "for", "_", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "root", "/", "\"val\"", "/", "class_name", ")", ":", "\n", "                ", "for", "file", "in", "files", ":", "\n", "                    ", "self", ".", "labels", ".", "append", "(", "class_id", ")", "\n", "self", ".", "images", ".", "append", "(", "root", "/", "\"val\"", "/", "class_name", "/", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet.ImageNet.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet.ImageNet.__getitem__": [[43, 54], ["imagenet.ImageNet.load_image", "imagenet.ImageNet.target_transform"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", ",", "label", "=", "(", "\n", "self", ".", "images", "[", "item", "]", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "img", "=", "self", ".", "load_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet.ImageNet.load_image": [[55, 57], ["imagenet.ImageNet.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cub.CUB.__init__": [[17, 62], ["utils.get_transforms", "numpy.loadtxt", "numpy.loadtxt", "list", "numpy.loadtxt", "numpy.loadtxt", "open", "f.readlines", "data.split", "image_index.append", "image_path.append", "numpy.where", "int"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "get_transforms", "(", "args", ")", "\n", "\n", "with", "open", "(", "root", "/", "\"images.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "image_list", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_index", "=", "[", "]", "\n", "image_path", "=", "[", "]", "\n", "for", "data", "in", "image_list", ":", "\n", "            ", "index", ",", "path", "=", "data", ".", "split", "(", "\" \"", ")", "\n", "image_index", ".", "append", "(", "int", "(", "index", ")", ")", "\n", "image_path", ".", "append", "(", "root", "/", "\"images\"", "/", "path", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "self", ".", "images", "=", "image_path", "\n", "\n", "train_flag", "=", "np", ".", "loadtxt", "(", "\n", "root", "/", "\"train_test_split.txt\"", ",", "delimiter", "=", "\" \"", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "train_flag", "=", "train_flag", "[", ":", ",", "1", "]", "\n", "labels", "=", "np", ".", "loadtxt", "(", "\n", "root", "/", "\"image_class_labels.txt\"", ",", "delimiter", "=", "\" \"", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "labels", "=", "labels", "[", ":", ",", "1", "]", "\n", "\n", "# use first 100 classes", "\n", "targets", "=", "np", ".", "where", "(", "labels", "<", "101", ")", "[", "0", "]", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "indices", "=", "targets", "\n", "self", ".", "label", "=", "list", "(", "self", ".", "labels", "[", "self", ".", "indices", "]", "-", "1", ")", "\n", "self", ".", "num_classes", "=", "self", ".", "num_class", "=", "100", "\n", "\n", "train_flag", "=", "np", ".", "loadtxt", "(", "\n", "root", "/", "\"train_test_split.txt\"", ",", "delimiter", "=", "\" \"", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "train_flag", "=", "train_flag", "[", ":", ",", "1", "]", "\n", "labels", "=", "np", ".", "loadtxt", "(", "\n", "root", "/", "\"image_class_labels.txt\"", ",", "delimiter", "=", "\" \"", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "labels", "=", "labels", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cub.CUB.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cub.CUB.__getitem__": [[66, 75], ["cub.CUB.load_image"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "index", "=", "self", ".", "indices", "[", "item", "]", "\n", "img_path", ",", "label", "=", "(", "\n", "self", ".", "images", "[", "index", "]", ",", "\n", "self", ".", "labels", "[", "index", "]", ",", "\n", ")", "\n", "img", "=", "self", ".", "load_image", "(", "img_path", ")", "\n", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.cub.CUB.load_image": [[76, 78], ["cub.CUB.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet_val.ImageNetVal.__init__": [[18, 41], ["utils.get_transforms", "sorted", "sorted", "imagenet_val.ImageNetVal.class_names.append", "open", "enumerate", "type", "set", "xmltodict.parse", "f.read"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "get_transforms", "(", "args", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "images", "=", "sorted", "(", "(", "root", "/", "\"Data/CLS-LOC/val\"", ")", ".", "glob", "(", "\"*\"", ")", ")", "\n", "self", ".", "annotations", "=", "sorted", "(", "(", "root", "/", "\"Annotations/CLS-LOC/val\"", ")", ".", "glob", "(", "\"*\"", ")", ")", "\n", "self", ".", "class_names", "=", "[", "]", "\n", "for", "annotation", "in", "self", ".", "annotations", ":", "\n", "            ", "with", "open", "(", "annotation", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "current_annotation", "=", "xmltodict", ".", "parse", "(", "f", ".", "read", "(", ")", ")", "[", "\"annotation\"", "]", "[", "\"object\"", "]", "\n", "if", "type", "(", "current_annotation", ")", "==", "list", ":", "\n", "                    ", "class_name", "=", "current_annotation", "[", "0", "]", "[", "\"name\"", "]", "\n", "", "else", ":", "\n", "                    ", "class_name", "=", "current_annotation", "[", "\"name\"", "]", "\n", "", "", "self", ".", "class_names", ".", "append", "(", "class_name", ")", "\n", "", "self", ".", "class_to_idx", "=", "{", "\n", "class_name", ":", "i", "for", "i", ",", "class_name", "in", "enumerate", "(", "set", "(", "self", ".", "class_names", ")", ")", "\n", "}", "\n", "self", ".", "labels", "=", "[", "self", ".", "class_to_idx", "[", "class_name", "]", "for", "class_name", "in", "self", ".", "class_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet_val.ImageNetVal.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet_val.ImageNetVal.__getitem__": [[45, 56], ["imagenet_val.ImageNetVal.load_image", "imagenet_val.ImageNetVal.target_transform"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", ",", "label", "=", "(", "\n", "self", ".", "images", "[", "item", "]", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "img", "=", "self", ".", "load_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.imagenet_val.ImageNetVal.load_image": [[57, 59], ["imagenet_val.ImageNetVal.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.danish_fungi.DanishFungi.__init__": [[18, 40], ["pathlib.Path", "danish_fungi.DanishFungi.load_specs", "list", "list", "danish_fungi.DanishFungi.compose_transforms", "pathlib.Path", "pathlib.Path", "danish_fungi.DanishFungi.data.scientific_name.unique"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.danish_fungi.DanishFungi.load_specs"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "Union", "[", "Path", ",", "str", "]", "=", "Path", "(", "\"data/fungi\"", ")", "/", "\"images\"", ",", "\n", "specs_file", ":", "Union", "[", "Path", ",", "str", "]", "=", "Path", "(", "\"data/fungi/specs\"", ")", "/", "\"DF20_metadata.csv\"", ",", "\n", "image_size", "=", "84", ",", "\n", "training", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root: directory where all the images are\n            specs_file: path to the CSV file\n            image_size: images returned by the dataset will be square images of the given size\n            training: preprocessing is slightly different for a training set, adding a random\n                cropping and a random horizontal flip.\n        \"\"\"", "\n", "self", ".", "root", "=", "Path", "(", "root", ")", "\n", "self", ".", "data", "=", "self", ".", "load_specs", "(", "specs_file", ")", "\n", "\n", "self", ".", "class_names", "=", "list", "(", "self", ".", "data", ".", "scientific_name", ".", "unique", "(", ")", ")", "\n", "self", ".", "labels", "=", "list", "(", "self", ".", "data", ".", "label", ")", "\n", "\n", "self", ".", "transform", "=", "self", ".", "compose_transforms", "(", "image_size", ",", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.danish_fungi.DanishFungi.load_specs": [[41, 55], ["pandas.read_csv", "list", "pandas.read_csv.assign", "pandas.read_csv.scientific_name.unique", "list.index", "df.scientific_name.map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_specs", "(", "specs_file", ":", "Path", ")", "->", "DataFrame", ":", "\n", "        ", "\"\"\"\n        Load specs from a CSV file.\n        Args:\n            specs_file: path to the CSV file\n\n        Returns:\n            curated data contained in the CSV file\n        \"\"\"", "\n", "data", "=", "pd", ".", "read_csv", "(", "specs_file", ")", "\n", "class_names", "=", "list", "(", "data", ".", "scientific_name", ".", "unique", "(", ")", ")", "\n", "label_mapping", "=", "{", "name", ":", "class_names", ".", "index", "(", "name", ")", "for", "name", "in", "class_names", "}", "\n", "return", "data", ".", "assign", "(", "label", "=", "lambda", "df", ":", "df", ".", "scientific_name", ".", "map", "(", "label_mapping", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.danish_fungi.DanishFungi.__getitem__": [[56, 75], ["danish_fungi.DanishFungi.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", "->", "Tuple", "[", "Tensor", ",", "int", "]", ":", "\n", "        ", "\"\"\"\n        Get a data sample from its integer id.\n        Args:\n            item: sample's integer id\n\n        Returns:\n            data sample in the form of a tuple (image, label), where label is an integer.\n            The type of the image object depends of the output type of self.transform. By default\n            it's a torch.Tensor, however you are free to define any function as self.transform, and\n            therefore any type for the output image. For instance, if self.transform = lambda x: x,\n            then the output image will be of type PIL.Image.Image.\n        \"\"\"", "\n", "img", "=", "self", ".", "transform", "(", "\n", "Image", ".", "open", "(", "self", ".", "root", "/", "self", ".", "data", ".", "image_path", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", ")", "\n", "label", "=", "self", ".", "data", ".", "label", "[", "item", "]", "\n", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.danish_fungi.DanishFungi.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.mini_imagenet.MiniImageNet.__init__": [[94, 122], ["utils.get_transforms", "torchvision.datasets.VisionDataset.__init__", "pandas.read_csv().assign", "pandas.read_csv().assign.class_name.unique", "dict", "list", "str", "enumerate", "pandas.read_csv().assign.class_name.map", "pandas.read_csv", "tqdm.tqdm.tqdm", "mini_imagenet.MiniImageNet.id_to_class.items", "df.apply"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "image_path", "=", "root", "/", "\"images\"", "\n", "transform", "=", "get_transforms", "(", "args", ")", "\n", "super", "(", "MiniImageNet", ",", "self", ")", ".", "__init__", "(", "\n", "str", "(", "image_path", ")", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", "\n", ")", "\n", "\n", "# Get images and labels", "\n", "data_df", "=", "pd", ".", "read_csv", "(", "root", "/", "\"specs\"", "/", "f\"{split}_images.csv\"", ")", ".", "assign", "(", "\n", "image_paths", "=", "lambda", "df", ":", "df", ".", "apply", "(", "\n", "lambda", "row", ":", "image_path", "/", "row", "[", "\"class_name\"", "]", "/", "row", "[", "\"image_name\"", "]", ",", "axis", "=", "1", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "images", "=", "[", "image_path", "for", "image_path", "in", "tqdm", "(", "data_df", ".", "image_paths", ")", "]", "\n", "\n", "self", ".", "class_list", "=", "data_df", ".", "class_name", ".", "unique", "(", ")", "\n", "self", ".", "id_to_class", "=", "dict", "(", "enumerate", "(", "self", ".", "class_list", ")", ")", "\n", "self", ".", "class_to_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "id_to_class", ".", "items", "(", ")", "}", "\n", "self", ".", "labels", "=", "list", "(", "data_df", ".", "class_name", ".", "map", "(", "self", ".", "class_to_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.mini_imagenet.MiniImageNet.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.mini_imagenet.MiniImageNet.__getitem__": [[126, 137], ["mini_imagenet.MiniImageNet.load_image", "mini_imagenet.MiniImageNet.target_transform"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "img", ",", "label", "=", "(", "\n", "self", ".", "load_image", "(", "self", ".", "images", "[", "item", "]", ")", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.mini_imagenet.MiniImageNet.load_image": [[138, 140], ["mini_imagenet.MiniImageNet.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.fungi.Fungi.__init__": [[18, 52], ["utils.get_transforms", "zip", "loguru.logger.info", "open", "json.load", "open", "json.load", "fungi.Fungi.images.append", "fungi.Fungi.labels.append", "len"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "get_transforms", "(", "args", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "with", "open", "(", "root", "/", "f\"train.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "original_train", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "root", "/", "f\"val.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "original_val", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "images", ",", "self", ".", "labels", "=", "[", "]", ",", "[", "]", "\n", "\n", "# class_splits = self.create_splits(root)", "\n", "\n", "# Add all images and records", "\n", "for", "image_record", ",", "annot_record", "in", "zip", "(", "\n", "original_train", "[", "\"images\"", "]", "+", "original_val", "[", "\"images\"", "]", ",", "\n", "original_train", "[", "\"annotations\"", "]", "+", "original_val", "[", "\"annotations\"", "]", ",", "\n", ")", ":", "\n", "\n", "            ", "assert", "image_record", "[", "\"id\"", "]", "==", "annot_record", "[", "\"image_id\"", "]", ",", "(", "\n", "image_record", ",", "\n", "annot_record", ",", "\n", ")", "\n", "self", ".", "images", ".", "append", "(", "root", "/", "image_record", "[", "\"file_name\"", "]", ")", "\n", "self", ".", "labels", ".", "append", "(", "annot_record", "[", "\"category_id\"", "]", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"Fungi {split} loaded. {len(self.images)} images found.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.fungi.Fungi.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.fungi.Fungi.__getitem__": [[56, 67], ["fungi.Fungi.load_image", "fungi.Fungi.target_transform"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", ",", "label", "=", "(", "\n", "self", ".", "images", "[", "item", "]", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "img", "=", "self", ".", "load_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.fungi.Fungi.load_image": [[68, 70], ["fungi.Fungi.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.fungi.Fungi.create_splits": [[71, 121], ["sorted", "numpy.arange", "open", "json.load", "open", "json.load", "list", "numpy.arange", "numpy.arange", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "create_splits", "(", "self", ",", "root", ")", ":", "\n", "\n", "        ", "NUM_TRAIN_CLASSES", "=", "994", "\n", "NUM_VALID_CLASSES", "=", "200", "\n", "NUM_TEST_CLASSES", "=", "200", "\n", "\n", "\"\"\"\n        Largely insipired by https://github.com/google-research/meta-dataset/blob/ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b/meta_dataset/dataset_conversion/dataset_to_records.py#L1609\n        Create splits for Fungi and store them in the default path.\n        If no split file is provided, and the default location for Fungi Identity\n        splits does not contain a split file, splits are randomly created in this\n        function using 70%, 15%, and 15% of the data for training, validation and\n        testing, respectively, and then stored in that default location.\n        Returns:\n          The splits for this dataset, represented as a dictionary mapping each of\n          'train', 'valid', and 'test' to a list of class names.\n        \"\"\"", "\n", "# We ignore the original train and validation splits (the test set cannot be", "\n", "# used since it is not labeled).", "\n", "with", "open", "(", "root", "/", "\"train.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "original_train", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "root", "/", "\"val.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "original_val", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# The categories (classes) for train and validation should be the same.", "\n", "", "assert", "original_train", "[", "\"categories\"", "]", "==", "original_val", "[", "\"categories\"", "]", "\n", "# Sort by category ID for reproducibility.", "\n", "categories", "=", "sorted", "(", "original_train", "[", "\"categories\"", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"id\"", "]", ")", "\n", "\n", "# Assert contiguous range [0:category_number]", "\n", "assert", "[", "category", "[", "\"id\"", "]", "for", "category", "in", "categories", "]", "==", "list", "(", "\n", "range", "(", "len", "(", "categories", ")", ")", "\n", ")", "\n", "\n", "# Some categories share the same name (see", "\n", "# https://github.com/visipedia/fgvcx_fungi_comp/issues/1)", "\n", "# so we include the category id in the label.", "\n", "labels", "=", "[", "category", "[", "\"id\"", "]", "for", "category", "in", "categories", "]", "\n", "\n", "train_inds", "=", "np", ".", "arange", "(", "NUM_TRAIN_CLASSES", ")", "\n", "valid_inds", "=", "NUM_TRAIN_CLASSES", "+", "np", ".", "arange", "(", "NUM_VALID_CLASSES", ")", "\n", "test_inds", "=", "NUM_TRAIN_CLASSES", "+", "NUM_VALID_CLASSES", "+", "np", ".", "arange", "(", "NUM_TEST_CLASSES", ")", "\n", "\n", "splits", "=", "{", "\n", "\"train\"", ":", "[", "labels", "[", "i", "]", "for", "i", "in", "train_inds", "]", ",", "\n", "\"val\"", ":", "[", "labels", "[", "i", "]", "for", "i", "in", "valid_inds", "]", ",", "\n", "\"test\"", ":", "[", "labels", "[", "i", "]", "for", "i", "in", "test_inds", "]", ",", "\n", "}", "\n", "\n", "return", "splits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.__init__": [[19, 84], ["utils.get_transforms", "aircraft.Aircraft.create_splits", "dict", "collections.defaultdict", "dict.items", "enumerate", "open", "dict", "open", "open", "variants_to_names[].append", "[].split", "[].split", "[].split", "len", "f.readlines", "f.readlines", "f.readlines", "sorted", "sorted", "map", "line.split", "line.split", "line.split"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.create_splits"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ",", "\n", "root", ":", "Path", ",", "\n", "split", ":", "str", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "training", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "transform", "=", "get_transforms", "(", "args", ")", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "splits", ",", "all_classes", "=", "self", ".", "create_splits", "(", "root", ")", "\n", "# Get the names of the classes assigned to each split", "\n", "# Retrieve mapping from filename to bounding box.", "\n", "# Cropping to the bounding boxes is important for two reasons:", "\n", "# 1) The dataset documentation mentions that \"[the] (main) aircraft in each", "\n", "#    image is annotated with a tight bounding box [...]\", which suggests", "\n", "#    that there may be more than one aircraft in some images. Cropping to", "\n", "#    the bounding boxes removes ambiguity as to which airplane the label", "\n", "#    refers to.", "\n", "# 2) Raw images have a 20-pixel border at the bottom with copyright", "\n", "#    information which needs to be removed. Cropping to the bounding boxes", "\n", "#    has the side-effect that it removes the border.", "\n", "bboxes_path", "=", "root", "/", "\"images_box.txt\"", "\n", "with", "open", "(", "bboxes_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "names_to_bboxes", "=", "[", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "names_to_bboxes", "=", "dict", "(", "\n", "(", "name", ",", "map", "(", "int", ",", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ")", ")", "\n", "for", "name", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "in", "names_to_bboxes", "\n", ")", "\n", "\n", "# Retrieve mapping from filename to variant", "\n", "", "variant_trainval_path", "=", "root", "/", "\"images_variant_trainval.txt\"", "\n", "with", "open", "(", "variant_trainval_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "names_to_variants", "=", "[", "\n", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ",", "1", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "\n", "]", "\n", "\n", "", "variant_test_path", "=", "root", "/", "\"images_variant_test.txt\"", "\n", "with", "open", "(", "variant_test_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "names_to_variants", "+=", "[", "\n", "line", ".", "split", "(", "\"\\n\"", ")", "[", "0", "]", ".", "split", "(", "\" \"", ",", "1", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "\n", "]", "\n", "\n", "", "names_to_variants", "=", "dict", "(", "names_to_variants", ")", "\n", "\n", "# Build mapping from variant to filenames. \"Variant\" refers to the aircraft", "\n", "# model variant (e.g., A330-200) and is used as the class name in the", "\n", "# dataset. The position of the class name in the concatenated list of", "\n", "# training, valation, and test class name constitutes its class ID.", "\n", "variants_to_names", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "name", ",", "variant", "in", "names_to_variants", ".", "items", "(", ")", ":", "\n", "            ", "variants_to_names", "[", "variant", "]", ".", "append", "(", "name", ")", "\n", "\n", "", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "bboxes", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "for", "class_id", ",", "class_name", "in", "enumerate", "(", "all_classes", ")", ":", "\n", "            ", "self", ".", "images", "+=", "[", "\n", "root", "/", "\"images\"", "/", "\"{}.jpg\"", ".", "format", "(", "filename", ")", "\n", "for", "filename", "in", "sorted", "(", "variants_to_names", "[", "class_name", "]", ")", "\n", "]", "\n", "self", ".", "labels", "+=", "[", "class_id", "]", "*", "len", "(", "variants_to_names", "[", "class_name", "]", ")", "\n", "self", ".", "bboxes", "+=", "[", "\n", "names_to_bboxes", "[", "name", "]", "for", "name", "in", "sorted", "(", "variants_to_names", "[", "class_name", "]", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.__len__": [[86, 88], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.__getitem__": [[89, 100], ["aircraft.Aircraft.load_image", "aircraft.Aircraft.target_transform"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_path", ",", "label", "=", "(", "\n", "self", ".", "images", "[", "item", "]", ",", "\n", "self", ".", "labels", "[", "item", "]", ",", "\n", ")", "\n", "img", "=", "self", ".", "load_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.load_image": [[101, 103], ["aircraft.Aircraft.transform", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "filename", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "Image", ".", "open", "(", "filename", ")", ".", "convert", "(", "\"RGB\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.aircraft.Aircraft.create_splits": [[104, 137], ["numpy.arange", "sorted", "numpy.arange", "numpy.arange", "open", "len", "len", "line.strip", "f.readlines"], "methods", ["None"], ["", "def", "create_splits", "(", "self", ",", "root", ")", ":", "\n", "        ", "\"\"\"Create splits for Aircraft and store them in the default path.\n        If no split file is provided, and the default location for Aircraft splits\n        does not contain a split file, splits are randomly created in this\n        function using 70%, 15%, and 15% of the data for training, valation and\n        testing, respectively, and then stored in that default location.\n        Returns:\n          The splits for this dataset, represented as a dictionary mapping each of\n          'train', 'val', and 'test' to a list of strings (class names).\n        \"\"\"", "\n", "NUM_TRAIN_CLASSES", "=", "70", "\n", "NUM_val_CLASSES", "=", "15", "\n", "NUM_TEST_CLASSES", "=", "15", "\n", "\n", "train_inds", "=", "np", ".", "arange", "(", "NUM_TRAIN_CLASSES", ")", "\n", "val_inds", "=", "NUM_TRAIN_CLASSES", "+", "np", ".", "arange", "(", "NUM_val_CLASSES", ")", "\n", "test_inds", "=", "NUM_TRAIN_CLASSES", "+", "NUM_val_CLASSES", "+", "np", ".", "arange", "(", "NUM_TEST_CLASSES", ")", "\n", "# \"Variant\" refers to the aircraft model variant (e.g., A330-200) and is", "\n", "# used as the class name in the dataset.", "\n", "variants_path", "=", "root", "/", "\"variants.txt\"", "\n", "with", "open", "(", "variants_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "variants", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "if", "line", "]", "\n", "", "variants", "=", "sorted", "(", "variants", ")", "\n", "assert", "(", "\n", "len", "(", "variants", ")", "==", "NUM_TRAIN_CLASSES", "+", "NUM_val_CLASSES", "+", "NUM_TEST_CLASSES", "\n", ")", ",", "(", "len", "(", "variants", ")", ",", "NUM_TRAIN_CLASSES", "+", "NUM_val_CLASSES", "+", "NUM_TEST_CLASSES", ")", "\n", "\n", "splits", "=", "{", "\n", "\"train\"", ":", "[", "variants", "[", "i", "]", "for", "i", "in", "train_inds", "]", ",", "\n", "\"val\"", ":", "[", "variants", "[", "i", "]", "for", "i", "in", "val_inds", "]", ",", "\n", "\"test\"", ":", "[", "variants", "[", "i", "]", "for", "i", "in", "test_inds", "]", ",", "\n", "}", "\n", "return", "splits", ",", "variants", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.datasets.utils.get_transforms": [[11, 40], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "int"], "function", ["None"], ["from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "tqdm", "import", "tqdm", "\n", "from", "pathlib", "import", "Path", "\n", "from", "src", ".", "models", "import", "__dict__", "as", "BACKBONES", "\n", "import", "os", "\n", "from", "argparse", "import", "Namespace", "\n", "from", "src", ".", "utils", ".", "data_fetchers", "import", "get_classic_loader", "\n", "from", "collections", "import", "OrderedDict", ",", "defaultdict", "\n", "import", "argparse", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n", "from", "loguru", "import", "logger", "\n", "import", "itertools", "\n", "from", "copy", "import", "deepcopy", "\n", "\n", "\n", "def", "set_random_seed", "(", "seed", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Set random, numpy and torch random seed, for reproducibility of the training\n    Args:\n        seed: defined random seed\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "def", "tensor_product", "(", "left_tensor", ":", "torch", ".", "Tensor", ",", "right_tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.entropy_detector.EntropyDetector.__call__": [[14, 22], ["query_probas.min", "torch.any", "torch.isnan", "torch.log"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "support_probas", ",", "query_probas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        support_probas: [Ns, K]\n        query_probas: [Nq, K]\n        \"\"\"", "\n", "entropy", "=", "-", "(", "query_probas", "*", "torch", ".", "log", "(", "query_probas", "+", "1e-6", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "assert", "not", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "entropy", ")", ")", ",", "query_probas", ".", "min", "(", ")", "\n", "return", "entropy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.abstract.ProbaDetector.__init__": [[14, 16], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.abstract.ProbaDetector.__call__": [[17, 19], ["None"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "works_on_features", "=", "(", "\n", "False", "# by default most all-in-one methods need raw features and model", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.abstract.ProbaDetector.__str__": [[20, 27], ["list", "len", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], [")", "\n", "\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.abstract.ProbaDetector.__repr__": [[28, 35], ["list", "len", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "__call__", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.knn.kNNDetector.__init__": [[14, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "distance", ":", "str", ",", "n_neighbors", ":", "int", ",", "method", ":", "str", ")", ":", "\n", "\n", "        ", "self", ".", "distance", "=", "distance", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "method", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.knn.kNNDetector.__call__": [[20, 40], ["eval", "eval.", "closest_distances.mean.squeeze", "eval.topk", "closest_distances.mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "support_probas", ",", "query_probas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        support_probas: [Ns, K]\n        query_probas: [Nq, K]\n        \"\"\"", "\n", "distance_fn", "=", "eval", "(", "self", ".", "distance", ")", "\n", "distances", "=", "distance_fn", "(", "\n", "query_probas", "[", ":", ",", "None", ",", ":", "]", ",", "support_probas", "[", "None", ",", ":", ",", ":", "]", "\n", ")", "# [Nq, Ns]", "\n", "closest_distances", "=", "distances", ".", "topk", "(", "\n", "k", "=", "self", ".", "n_neighbors", ",", "largest", "=", "False", ",", "dim", "=", "-", "1", "\n", ")", ".", "values", "# [Nq, knn]", "\n", "\n", "if", "self", ".", "method", "==", "\"mean\"", ":", "\n", "            ", "outlier_scores", "=", "closest_distances", ".", "mean", "(", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "method", "==", "\"largest\"", ":", "\n", "            ", "outlier_scores", "=", "closest_distances", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "return", "outlier_scores", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.knn.kl": [[42, 45], ["torch.log"], "function", ["None"], ["", "", "def", "kl", "(", "prob_a", ",", "prob_b", ")", ":", "\n", "\n", "    ", "return", "(", "prob_a", "*", "torch", ".", "log", "(", "prob_a", "/", "prob_b", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.knn.reverse_kl": [[47, 50], ["torch.log"], "function", ["None"], ["", "def", "reverse_kl", "(", "prob_a", ",", "prob_b", ")", ":", "\n", "\n", "    ", "return", "(", "prob_b", "*", "torch", ".", "log", "(", "prob_b", "/", "prob_a", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.knn.bc": [[52, 55], ["None"], "function", ["None"], ["", "def", "bc", "(", "prob_a", ",", "prob_b", ")", ":", "\n", "\n", "    ", "return", "(", "prob_a", "*", "prob_b", ")", ".", "sqrt", "(", ")", ".", "sum", "(", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.proba.max_prob.MaxProbDetector.__call__": [[14, 20], ["query_probas.max"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "support_probas", ",", "query_probas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        support_probas: [Ns, K]\n        query_probas: [Nq, K]\n        \"\"\"", "\n", "return", "-", "query_probas", ".", "max", "(", "-", "1", ")", ".", "values", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.pyod_wrapper.PyodWrapper.__init__": [[22, 26], ["eval"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pyod_detector", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "pyod_detector", "=", "pyod_detector", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "detector", "=", "eval", "(", "pyod_detector", ")", "(", "**", "kwargs", ")", "\n", "# assert isinstance(pyod_detector, BaseDetector)", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.pyod_wrapper.PyodWrapper.__call__": [[28, 33], ["pyod_wrapper.PyodWrapper.detector.fit", "torch.from_numpy", "support_features.cpu().numpy", "pyod_wrapper.PyodWrapper.detector.decision_function", "query_features.cpu().numpy", "support_features.cpu", "query_features.cpu"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "detector", ".", "fit", "(", "support_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "\n", "self", ".", "detector", ".", "decision_function", "(", "query_features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.pyod_wrapper.PyodWrapper.__str__": [[35, 42], ["list", "len", "inspect.signature", "type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "detector", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={self.kwargs[k]}\"", "for", "k", "in", "arg_names", "if", "k", "in", "self", ".", "kwargs", "]", "\n", "return", "f\"{self.pyod_detector}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.pyod_wrapper.PyodWrapper.__repr__": [[43, 50], ["list", "len", "inspect.signature", "type"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "detector", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={self.kwargs[k]}\"", "for", "k", "in", "arg_names", "if", "k", "in", "self", ".", "kwargs", "]", "\n", "return", "f\"{self.pyod_detector}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.abstract.FeatureDetector.__call__": [[13, 15], ["None"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.abstract.FeatureDetector.__str__": [[16, 27], ["list", "len", "list.remove", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "works_on_features", "=", "(", "\n", "False", "# by default most all-in-one methods need raw features and model", "\n", ")", "\n", "\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.abstract.FeatureDetector.__repr__": [[28, 39], ["list", "len", "list.remove", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "__call__", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        "]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.finetune.FinetuneDetector.__init__": [[12, 29], ["abstract.FeatureDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "lambda_", ":", "float", ",", "\n", "lr", ":", "float", ",", "\n", "n_iter", ":", "int", ",", "\n", "init", ":", "str", ",", "\n", "n_neighbors", ":", "int", ",", "\n", "optimizer_name", ":", "str", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "name", "=", "\"FinetuneDetector\"", "\n", "self", ".", "optimizer_name", "=", "optimizer_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.finetune.FinetuneDetector.compute_auc": [[30, 35], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.finetune.FinetuneDetector.compute_probas": [[36, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "W.sum", "W.size", "X.size", "W.size", "feat_s.size", "feat_s.t"], "methods", ["None"], ["", "def", "compute_probas", "(", "self", ",", "feat_s", ",", "X", ",", "W", ")", ":", "\n", "        ", "assert", "W", ".", "size", "(", "0", ")", "==", "X", ".", "size", "(", "0", ")", "and", "W", ".", "size", "(", "1", ")", "==", "feat_s", ".", "size", "(", "0", ")", "\n", "similarities", "=", "(", "(", "X", "@", "feat_s", ".", "t", "(", ")", ")", "*", "W", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "W", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "# [N, 1]", "\n", "outlierness", "=", "(", "-", "self", ".", "lambda_", "*", "similarities", ")", ".", "sigmoid", "(", ")", "# [N, 1]", "\n", "return", "torch", ".", "cat", "(", "[", "outlierness", ",", "1", "-", "outlierness", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.finetune.FinetuneDetector.__call__": [[44, 139], ["support_features.cuda", "query_features.cuda", "torch.cat().mean.requires_grad_", "torch.cat().mean.requires_grad_", "eval", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "probas_q[].detach().cpu().squeeze", "kwargs[].squeeze().cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "finetune.FinetuneDetector.compute_probas", "finetune.FinetuneDetector.compute_probas", "ce.mean", "eval.zero_grad", "ce.mean.backward", "eval.step", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "min", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.scatter_", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "min", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.scatter_", "torch.log", "torch.log", "torch.log", "torch.log", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_values.append", "marg_entropy.append", "diff_with_oracle.append", "outlier_entropy.append", "entropies.append", "inlier_entropy.append", "ces.append", "aucs.append", "probas_q[].detach().cpu", "kwargs[].squeeze", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.normalize.size", "torch.cdist.topk", "torch.cdist.topk", "torch.normalize.size", "ce.mean.item", "abs", "entropy[].mean().item", "entropy.mean().item", "entropy[].mean().item", "ce.mean().item", "finetune.FinetuneDetector.compute_auc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cdist.topk", "torch.cdist.topk", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "probas_q[].detach", "support_features.cuda.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.normalize.size", "torch.normalize.size", "torch.normalize.size", "torch.normalize.size", "torch.log", "torch.log", "torch.log", "torch.log", "[].item", "entropy[].mean", "entropy.mean", "entropy[].mean", "ce.mean", "finetune.FinetuneDetector.mean", "kwargs[].sum", "kwargs[].size", "finetune.FinetuneDetector.mean", "torch.log", "torch.log", "torch.log", "torch.log", "kwargs[].bool", "finetune.FinetuneDetector.mean", "kwargs[].bool"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc"], ["", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "loss_values", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "marg_entropy", "=", "[", "]", "\n", "diff_with_oracle", "=", "[", "]", "\n", "inlier_entropy", "=", "[", "]", "\n", "outlier_entropy", "=", "[", "]", "\n", "entropies", "=", "[", "]", "\n", "ces", "=", "[", "]", "\n", "kls", "=", "[", "]", "\n", "raw_feat_s", "=", "support_features", ".", "cuda", "(", ")", "\n", "raw_feat_q", "=", "query_features", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"zero\"", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros", "(", "1", ",", "raw_feat_s", ".", "size", "(", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"mean\"", ":", "\n", "            ", "mu", "=", "torch", ".", "cat", "(", "[", "raw_feat_s", ",", "raw_feat_q", "]", ",", "0", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "mu", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "eval", "(", "f\"torch.optim.{self.optimizer_name}([mu], lr=self.lr)\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "\n", "# 1 --- Find potential outliers", "\n", "\n", "            ", "feat_s", "=", "F", ".", "normalize", "(", "raw_feat_s", "-", "mu", ",", "dim", "=", "1", ")", "\n", "feat_q", "=", "F", ".", "normalize", "(", "raw_feat_q", "-", "mu", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute nearest-neighbor", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dist", "=", "torch", ".", "cdist", "(", "feat_q", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "\n", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", "\n", ")", ".", "indices", "# [N, knn]", "\n", "\n", "W_q", "=", "torch", ".", "zeros", "(", "feat_q", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_q", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "dist", "=", "torch", ".", "cdist", "(", "feat_s", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", "+", "1", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", ".", "indices", "[", "\n", ":", ",", "1", ":", "\n", "]", "# [N, knn]", "\n", "\n", "W_s", "=", "torch", ".", "zeros", "(", "feat_s", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_s", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "# 2 --- Update mu", "\n", "", "probas_q", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_q", ",", "W_q", ")", "\n", "probas_s", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_s", ",", "W_s", ")", "\n", "ce", "=", "-", "torch", ".", "log", "(", "probas_s", "[", ":", ",", "1", "]", ")", "\n", "entropy", "=", "-", "(", "probas_q", "*", "torch", ".", "log", "(", "probas_q", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "# logger.warning(kl)", "\n", "\n", "loss", "=", "ce", ".", "mean", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# scheduler.step()", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "marg_entropy", ".", "append", "(", "\n", "-", "(", "probas_q", ".", "mean", "(", "0", ")", "*", "torch", ".", "log", "(", "probas_q", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "probas_q", ".", "mean", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "outlier_entropy", ".", "append", "(", "entropy", "[", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "entropies", ".", "append", "(", "entropy", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "inlier_entropy", ".", "append", "(", "entropy", "[", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "ces", ".", "append", "(", "ce", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "aucs", ".", "append", "(", "self", ".", "compute_auc", "(", "probas_q", "[", ":", ",", "0", "]", ",", "**", "kwargs", ")", ")", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ces", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"kl\"", "]", ".", "append", "(", "kls", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"entropy\"", "]", ".", "append", "(", "entropies", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"inlier_entropy\"", "]", ".", "append", "(", "\n", "inlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"outlier_entropy\"", "]", ".", "append", "(", "\n", "outlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"auc\"", "]", ".", "append", "(", "aucs", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"marg_diff_oracle\"", "]", ".", "append", "(", "\n", "diff_with_oracle", "\n", ")", "\n", "return", "probas_q", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.knn.kNNDetector.__init__": [[11, 16], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "distance", ":", "str", ",", "n_neighbors", ":", "int", ",", "method", ":", "str", ")", ":", "\n", "\n", "        ", "self", ".", "distance", "=", "distance", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.knn.kNNDetector.__call__": [[17, 35], ["eval", "eval.", "closest_distances.mean.squeeze", "eval.topk", "closest_distances.mean"], "methods", ["None"], ["self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "method", "=", "method", "\n", "\n", "", "def", "__call__", "(", "self", ",", "support_probas", ",", "query_probas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        support_probas: [Ns, K]\n        query_probas: [Nq, K]\n        \"\"\"", "\n", "distance_fn", "=", "eval", "(", "self", ".", "distance", ")", "\n", "distances", "=", "distance_fn", "(", "\n", "query_probas", "[", ":", ",", "None", ",", ":", "]", ",", "support_probas", "[", "None", ",", ":", ",", ":", "]", "\n", ")", "# [Nq, Ns]", "\n", "closest_distances", "=", "distances", ".", "topk", "(", "\n", "k", "=", "self", ".", "n_neighbors", ",", "largest", "=", "False", ",", "dim", "=", "-", "1", "\n", ")", ".", "values", "# [Nq, knn]", "\n", "\n", "if", "self", ".", "method", "==", "\"mean\"", ":", "\n", "            ", "outlier_scores", "=", "closest_distances", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.knn.kNNDetector.standardize": [[36, 41], ["None"], "methods", ["None"], ["", "elif", "self", ".", "method", "==", "\"largest\"", ":", "\n", "            ", "outlier_scores", "=", "closest_distances", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "return", "outlier_scores", ".", "squeeze", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.knn.l2": [[43, 45], ["torch.cdist"], "function", ["None"], ["\n", "    ", "return", "(", "prob_a", "*", "torch", ".", "log", "(", "prob_a", "/", "prob_b", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.__init__.instanciate_wrapper": [[11, 13], ["pyod_wrapper.PyodWrapper"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.aggregator.NaiveAggregator.__init__": [[9, 12], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "detectors", ":", "List", "[", "FeatureDetector", "]", ")", ":", "\n", "        ", "assert", "isinstance", "(", "detectors", ",", "List", ")", ",", "detectors", "\n", "self", ".", "detectors", "=", "detectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.aggregator.NaiveAggregator.__str__": [[13, 15], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "detectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.aggregator.NaiveAggregator.__repr__": [[16, 18], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "detectors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.aggregator.NaiveAggregator.__call__": [[19, 30], ["len", "numpy.zeros", "enumerate", "test_scores_norm.mean", "detector.__call__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.MeanCentering.__call__"], ["", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "        ", "n_clf", "=", "len", "(", "self", ".", "detectors", ")", "\n", "test_scores", "=", "np", ".", "zeros", "(", "[", "query_features", ".", "shape", "[", "0", "]", ",", "n_clf", "]", ")", "# [Q, n_clf]", "\n", "for", "i", ",", "detector", "in", "enumerate", "(", "self", ".", "detectors", ")", ":", "\n", "            ", "detector_scores", "=", "detector", ".", "__call__", "(", "\n", "support_features", ",", "query_features", ",", "**", "kwargs", "\n", ")", "\n", "test_scores", "[", ":", ",", "i", "]", "=", "detector_scores", "\n", "", "test_scores_norm", "=", "test_scores", "\n", "outlier_scores", "=", "test_scores_norm", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "return", "outlier_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.__init__": [[10, 20], ["abstract.FeatureDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "lambda_", ":", "float", ",", "lr", ":", "float", ",", "n_iter", ":", "int", ",", "init", ":", "str", ",", "n_neighbors", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "name", "=", "\"AlternateDetector\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit": [[21, 26], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "support_features", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        feat: Tensor shape [N, hidden_dim, *]\n        \"\"\"", "\n", "self", ".", "raw_feat_s", "=", "support_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.compute_auc": [[27, 32], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.__call__": [[33, 118], ["alternate_detector.AlternateDetector.raw_feat_s.cuda", "query_features.cuda", "torch.cat().mean.requires_grad_", "torch.cat().mean.requires_grad_", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "outlierness.cpu().numpy().squeeze", "kwargs[].squeeze().cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "loss.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "min", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.sum", "torch.zeros().cuda.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_values.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "marg_entropy.append", "diff_with_oracle.append", "outlier_entropy.append", "inlier_entropy.append", "aucs.append", "outlierness.cpu().numpy", "kwargs[].squeeze", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.normalize.size", "torch.cdist.topk", "torch.cdist.topk", "loss.item", "abs", "entropy[].mean().item", "entropy[].mean().item", "alternate_detector.AlternateDetector.compute_auc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.normalize.t", "outlierness.cpu", "alternate_detector.AlternateDetector.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.normalize.size", "torch.normalize.size", "[].item", "entropy[].mean", "entropy[].mean", "torch.normalize.t", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cat.mean", "torch.cat.mean", "kwargs[].sum", "kwargs[].size", "torch.cat.mean", "torch.cat.mean", "torch.log", "torch.log", "torch.log", "torch.log", "kwargs[].bool", "torch.cat.mean", "torch.cat.mean", "kwargs[].bool"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc"], ["", "def", "__call__", "(", "self", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "loss_values", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "marg_entropy", "=", "[", "]", "\n", "diff_with_oracle", "=", "[", "]", "\n", "inlier_entropy", "=", "[", "]", "\n", "outlier_entropy", "=", "[", "]", "\n", "raw_feat_s", "=", "self", ".", "raw_feat_s", ".", "cuda", "(", ")", "\n", "raw_feat_q", "=", "query_features", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"zero\"", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros", "(", "1", ",", "raw_feat_s", ".", "size", "(", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"mean\"", ":", "\n", "            ", "mu", "=", "torch", ".", "cat", "(", "[", "raw_feat_s", ",", "raw_feat_q", "]", ",", "0", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "mu", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "mu", "]", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "\n", "# 1 --- Find potential outliers", "\n", "\n", "            ", "feat_s", "=", "F", ".", "normalize", "(", "raw_feat_s", "-", "mu", ",", "dim", "=", "1", ")", "\n", "feat_q", "=", "F", ".", "normalize", "(", "raw_feat_q", "-", "mu", ",", "dim", "=", "1", ")", "\n", "# prototypes = compute_prototypes(feat_s, kwargs[\"support_labels\"])  # [K, d]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "dist", "=", "torch", ".", "cdist", "(", "feat_q", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "\n", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", "\n", ")", ".", "indices", "# [N, knn]", "\n", "\n", "W", "=", "torch", ".", "zeros", "(", "feat_q", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "", "similarities", "=", "(", "(", "feat_q", "@", "feat_s", ".", "t", "(", ")", ")", "*", "W", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "W", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "# [N, 1]", "\n", "support_self_similarity", "=", "(", "(", "feat_s", "@", "feat_s", ".", "t", "(", ")", ")", ")", ".", "mean", "(", ")", "# [Ns, Ns]", "\n", "outlierness", "=", "(", "-", "self", ".", "lambda_", "*", "similarities", ")", ".", "detach", "(", ")", ".", "sigmoid", "(", ")", "# [N, 1]", "\n", "\n", "# 2 --- Update mu", "\n", "\n", "loss", "=", "(", "\n", "outlierness", "*", "similarities", "\n", ")", ".", "mean", "(", ")", "-", "support_self_similarity", "# - ((1 - outlierness) * similarities).mean()", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# scheduler.step()", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "probas", "=", "torch", ".", "cat", "(", "[", "outlierness", ",", "1", "-", "outlierness", "]", ",", "dim", "=", "1", ")", "\n", "marg_entropy", ".", "append", "(", "\n", "-", "(", "probas", ".", "mean", "(", "0", ")", "*", "torch", ".", "log", "(", "probas", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "entropy", "=", "-", "(", "probas", "*", "torch", ".", "log", "(", "probas", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "probas", ".", "mean", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "outlier_entropy", ".", "append", "(", "entropy", "[", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "inlier_entropy", ".", "append", "(", "entropy", "[", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "aucs", ".", "append", "(", "self", ".", "compute_auc", "(", "outlierness", ",", "**", "kwargs", ")", ")", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_loss\"", "]", "[", "\"main\"", "]", ".", "append", "(", "loss_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"inlier_entropy\"", "]", ".", "append", "(", "\n", "inlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"outlier_entropy\"", "]", ".", "append", "(", "\n", "outlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"auc\"", "]", ".", "append", "(", "aucs", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"marg_entropy\"", "]", ".", "append", "(", "\n", "marg_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"marg_diff_oracle\"", "]", ".", "append", "(", "\n", "diff_with_oracle", "\n", ")", "\n", "return", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.__init__": [[13, 32], ["abstract.FeatureDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "lambda_", ":", "float", ",", "\n", "lr", ":", "float", ",", "\n", "n_iter", ":", "int", ",", "\n", "init", ":", "str", ",", "\n", "n_neighbors", ":", "int", ",", "\n", "optimizer_name", ":", "str", ",", "\n", "weight", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "name", "=", "\"AlternateDetector\"", "\n", "self", ".", "optimizer_name", "=", "optimizer_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_auc": [[33, 38], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_probas": [[39, 47], ["W.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "W.size", "X.size", "W.size", "feat_s.size", "feat_s.t"], "methods", ["None"], ["", "def", "compute_probas", "(", "self", ",", "feat_s", ",", "X", ",", "W", ")", ":", "\n", "        ", "assert", "W", ".", "size", "(", "0", ")", "==", "X", ".", "size", "(", "0", ")", "and", "W", ".", "size", "(", "1", ")", "==", "feat_s", ".", "size", "(", "0", ")", "\n", "similarities", "=", "(", "(", "X", "@", "feat_s", ".", "t", "(", ")", ")", "*", "W", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "W", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "# [N, 1]", "\n", "outlierness", "=", "(", "-", "self", ".", "lambda_", "*", "similarities", ")", ".", "sigmoid", "(", ")", "# [N, 1]", "\n", "return", "-", "self", ".", "lambda_", "*", "similarities", ",", "torch", ".", "cat", "(", "\n", "[", "outlierness", ",", "1", "-", "outlierness", "]", ",", "dim", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.do_iter": [[49, 78], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "repri.RepriDetector.compute_probas", "repri.RepriDetector.compute_probas", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "min", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.scatter_", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "min", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda.scatter_", "torch.zeros().cuda.scatter_", "torch.normalize.size", "torch.cdist.topk", "torch.cdist.topk", "torch.normalize.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cdist.topk", "torch.cdist.topk", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.normalize.size", "torch.normalize.size", "torch.normalize.size", "torch.normalize.size"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.compute_probas"], ["", "def", "do_iter", "(", "self", ",", "raw_feat_s", ",", "raw_feat_q", ",", "mu", ")", ":", "\n", "        ", "feat_s", "=", "F", ".", "normalize", "(", "raw_feat_s", "-", "mu", ",", "dim", "=", "1", ")", "\n", "feat_q", "=", "F", ".", "normalize", "(", "raw_feat_q", "-", "mu", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute nearest-neighbor", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", "=", "torch", ".", "cdist", "(", "feat_q", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "\n", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", "\n", ")", ".", "indices", "# [N, knn]", "\n", "\n", "W_q", "=", "torch", ".", "zeros", "(", "feat_q", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_q", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "dist", "=", "torch", ".", "cdist", "(", "feat_s", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", "+", "1", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", ".", "indices", "[", "\n", ":", ",", "1", ":", "\n", "]", "# [N, knn]", "\n", "\n", "W_s", "=", "torch", ".", "zeros", "(", "feat_s", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_s", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "# 2 --- Update mu", "\n", "", "logits_q", ",", "probas_q", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_q", ",", "W_q", ")", "\n", "logits_s", ",", "probas_s", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_s", ",", "W_s", ")", "\n", "\n", "return", "logits_s", ",", "probas_s", ",", "logits_q", ",", "probas_q", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.standardize": [[79, 81], ["None"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "scores", ")", ":", "\n", "        ", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.__call__": [[82, 178], ["support_features.cuda", "query_features.cuda", "torch.cat().mean.requires_grad_", "torch.cat().mean.requires_grad_", "eval", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "logits_q.detach().cpu().squeeze", "kwargs[].squeeze().cuda", "repri.RepriDetector.do_iter", "eval.zero_grad", "loss.backward", "eval.step", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_values.append", "kls.append", "marg_entropy.append", "diff_with_oracle.append", "pi_diff_with_oracle.append", "outlier_inlierness.append", "entropies.append", "inlier_inlierness.append", "ces.append", "aucs.append", "logits_q.detach().cpu", "kwargs[].squeeze", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "repri.RepriDetector.do_iter", "skimage.filters.threshold_otsu", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "probas_q.mean", "ce.mean", "entropy.mean", "loss.item", "kl.item", "abs", "abs", "[].mean().item", "entropy.mean().item", "[].mean().item", "ce.mean().item", "repri.RepriDetector.compute_auc", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logits_q.detach().cpu().numpy", "logits_q.size", "logits_q.detach", "support_features.cuda.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.log", "torch.log", "torch.log", "torch.log", "[].item", "pi.item", "[].mean", "entropy.mean", "[].mean", "ce.mean", "logits_q.detach().cpu", "logits_q.detach", "probas_q.mean", "kwargs[].sum", "kwargs[].size", "kwargs[].sum", "kwargs[].size", "probas_q.mean", "torch.log", "torch.log", "torch.log", "torch.log", "probas_q.mean", "kwargs[].bool", "kwargs[].bool"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.do_iter", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.RepriDetector.do_iter", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc"], ["", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "loss_values", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "marg_entropy", "=", "[", "]", "\n", "diff_with_oracle", "=", "[", "]", "\n", "inlier_inlierness", "=", "[", "]", "\n", "outlier_inlierness", "=", "[", "]", "\n", "entropies", "=", "[", "]", "\n", "pi_diff_with_oracle", "=", "[", "]", "\n", "ces", "=", "[", "]", "\n", "kls", "=", "[", "]", "\n", "raw_feat_s", "=", "support_features", ".", "cuda", "(", ")", "\n", "raw_feat_q", "=", "query_features", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"zero\"", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros", "(", "1", ",", "raw_feat_s", ".", "size", "(", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"mean\"", ":", "\n", "            ", "mu", "=", "torch", ".", "cat", "(", "[", "raw_feat_s", ",", "raw_feat_q", "]", ",", "0", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "mu", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "eval", "(", "f\"torch.optim.{self.optimizer_name}([mu], lr=self.lr)\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# mu_init = torch.cat([raw_feat_s, raw_feat_q], 0).mean(0, keepdim=True)", "\n", "                    ", "mu_init", "=", "mu", "\n", "_", ",", "_", ",", "logits_q", ",", "_", "=", "self", ".", "do_iter", "(", "raw_feat_s", ",", "raw_feat_q", ",", "mu_init", ")", "\n", "thresh", "=", "threshold_otsu", "(", "logits_q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pi", "=", "(", "logits_q", ">", "thresh", ")", ".", "sum", "(", ")", "/", "logits_q", ".", "size", "(", "0", ")", "\n", "prior_prob", "=", "torch", ".", "Tensor", "(", "[", "pi", ",", "1", "-", "pi", "]", ")", ".", "cuda", "(", ")", "\n", "# logger.warning(f\"Threshold found {thresh:.2f}. Prior found {pi:.2f}\")", "\n", "\n", "", "", "_", ",", "probas_s", ",", "logits_q", ",", "probas_q", "=", "self", ".", "do_iter", "(", "raw_feat_s", ",", "raw_feat_q", ",", "mu", ")", "\n", "ce", "=", "-", "torch", ".", "log", "(", "probas_s", "[", ":", ",", "1", "]", ")", "\n", "entropy", "=", "-", "(", "probas_q", "*", "torch", ".", "log", "(", "probas_q", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "# kl = kl_div(probas_q.mean(0) - prior_prob)", "\n", "kl", "=", "probas_q", ".", "mean", "(", "0", ")", "[", "0", "]", "-", "prior_prob", "[", "0", "]", "\n", "\n", "loss", "=", "ce", ".", "mean", "(", ")", "+", "entropy", ".", "mean", "(", ")", "+", "self", ".", "weight", "*", "kl", "\n", "# loss = kl", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# scheduler.step()", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "kls", ".", "append", "(", "kl", ".", "item", "(", ")", ")", "\n", "marg_entropy", ".", "append", "(", "\n", "-", "(", "probas_q", ".", "mean", "(", "0", ")", "*", "torch", ".", "log", "(", "probas_q", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "probas_q", ".", "mean", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "pi_diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "pi", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "outlier_inlierness", ".", "append", "(", "\n", "probas_q", "[", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "entropies", ".", "append", "(", "entropy", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "inlier_inlierness", ".", "append", "(", "\n", "probas_q", "[", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "ces", ".", "append", "(", "ce", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "aucs", ".", "append", "(", "self", ".", "compute_auc", "(", "logits_q", ",", "**", "kwargs", ")", ")", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ces", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"kl\"", "]", ".", "append", "(", "kls", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"entropy\"", "]", ".", "append", "(", "entropies", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"inlier_inlierness\"", "]", ".", "append", "(", "\n", "inlier_inlierness", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"outlier_inlierness\"", "]", ".", "append", "(", "\n", "outlier_inlierness", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"auc\"", "]", ".", "append", "(", "aucs", ")", "\n", "# kwargs['intra_task_metrics']['secondary_metrics']['marg_entropy'].append(marg_entropy)", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"marg_diff_oracle\"", "]", ".", "append", "(", "\n", "diff_with_oracle", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"pi_diff_oracle\"", "]", ".", "append", "(", "\n", "pi_diff_with_oracle", "\n", ")", "\n", "return", "logits_q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.repri.kl_div": [[180, 182], ["torch.log", "torch.log"], "function", ["None"], ["", "", "def", "kl_div", "(", "pa", ",", "pb", ")", ":", "\n", "    ", "return", "(", "pa", "*", "torch", ".", "log", "(", "pa", "/", "pb", "+", "1e-10", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.__init__": [[16, 40], ["abstract.FewShotMethod.__init__", "ici.ICI.initial_embed", "ici.ICI.initial_classifier", "sklearn.linear_model.ElasticNet"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.initial_embed", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.initial_classifier"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "classifier", ":", "str", ",", "\n", "step", ":", "int", ",", "\n", "max_iter", ":", "str", ",", "\n", "reduce", ":", "str", ",", "\n", "d", ":", "int", ",", "\n", "C", ":", "float", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "reduce", "=", "reduce", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "initial_embed", "(", "reduce", ",", "d", ")", "\n", "self", ".", "initial_classifier", "(", "classifier", ")", "\n", "self", ".", "elasticnet", "=", "ElasticNet", "(", "\n", "alpha", "=", "1.0", ",", "\n", "l1_ratio", "=", "1.0", ",", "\n", "fit_intercept", "=", "True", ",", "\n", "normalize", "=", "True", ",", "\n", "warm_start", "=", "True", ",", "\n", "selection", "=", "\"cyclic\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.forward": [[42, 90], ["query_features.numpy", "numpy.concatenate", "ici.ICI.embed", "numpy.dot", "numpy.arange().tolist", "ici.ICI.classifier.fit", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "support_features.numpy", "support_labels.numpy", "support_labels.unique().size", "len", "numpy.dot", "numpy.eye", "ici.ICI.classifier.predict", "numpy.concatenate", "ici.ICI.label2onehot", "numpy.dot", "ici.ICI.expand", "numpy.argmax", "ici.ICI.classifier.fit", "ici.ICI.classifier.predict_proba", "ici.ICI.classifier.predict_proba", "numpy.linalg.inv", "math.ceil", "float().is_integer", "numpy.arange", "len", "len", "support_labels.unique", "numpy.dot", "float"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.label2onehot", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "forward", "(", "self", ",", "support_features", ",", "query_features", ",", "support_labels", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "support_X", ",", "support_y", "=", "support_features", ".", "numpy", "(", ")", ",", "support_labels", ".", "numpy", "(", ")", "\n", "way", ",", "num_support", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", ",", "len", "(", "support_X", ")", "\n", "\n", "query_X", "=", "query_features", ".", "numpy", "(", ")", "\n", "unlabel_X", "=", "query_X", "\n", "num_unlabel", "=", "unlabel_X", ".", "shape", "[", "0", "]", "\n", "\n", "embeddings", "=", "np", ".", "concatenate", "(", "[", "support_X", ",", "unlabel_X", "]", ")", "\n", "X", "=", "self", ".", "embed", "(", "embeddings", ")", "\n", "H", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "X", ",", "np", ".", "linalg", ".", "inv", "(", "np", ".", "dot", "(", "X", ".", "T", ",", "X", ")", ")", ")", ",", "X", ".", "T", ")", "\n", "X_hat", "=", "np", ".", "eye", "(", "H", ".", "shape", "[", "0", "]", ")", "-", "H", "\n", "if", "self", ".", "max_iter", "==", "\"auto\"", ":", "\n", "# set a big number", "\n", "            ", "self", ".", "max_iter", "=", "num_support", "+", "num_unlabel", "\n", "", "elif", "self", ".", "max_iter", "==", "\"fix\"", ":", "\n", "            ", "self", ".", "max_iter", "=", "math", ".", "ceil", "(", "num_unlabel", "/", "self", ".", "step", ")", "\n", "", "else", ":", "\n", "            ", "assert", "float", "(", "self", ".", "max_iter", ")", ".", "is_integer", "(", ")", "\n", "\n", "", "support_set", "=", "np", ".", "arange", "(", "num_support", ")", ".", "tolist", "(", ")", "\n", "\n", "# Train classifier", "\n", "self", ".", "classifier", ".", "fit", "(", "support_X", ",", "support_y", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "\n", "# Get pseudo labels", "\n", "            ", "pseudo_y", "=", "self", ".", "classifier", ".", "predict", "(", "unlabel_X", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "support_y", ",", "pseudo_y", "]", ")", "\n", "Y", "=", "self", ".", "label2onehot", "(", "y", ",", "way", ")", "\n", "y_hat", "=", "np", ".", "dot", "(", "X_hat", ",", "Y", ")", "\n", "\n", "# Expand based on credibility of pseudo labels", "\n", "support_set", "=", "self", ".", "expand", "(", "\n", "support_set", ",", "X_hat", ",", "y_hat", ",", "way", ",", "num_support", ",", "pseudo_y", ",", "embeddings", ",", "y", "\n", ")", "\n", "y", "=", "np", ".", "argmax", "(", "Y", ",", "axis", "=", "1", ")", "\n", "\n", "# Re-train classifier", "\n", "self", ".", "classifier", ".", "fit", "(", "embeddings", "[", "support_set", "]", ",", "y", "[", "support_set", "]", ")", "\n", "if", "len", "(", "support_set", ")", "==", "len", "(", "embeddings", ")", ":", "\n", "                ", "break", "\n", "", "", "probs_s", "=", "torch", ".", "from_numpy", "(", "self", ".", "classifier", ".", "predict_proba", "(", "support_X", ")", ")", "\n", "probs_q", "=", "torch", ".", "from_numpy", "(", "self", ".", "classifier", ".", "predict_proba", "(", "query_X", ")", ")", "\n", "\n", "return", "probs_s", ",", "probs_q", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand": [[91, 111], ["ici.ICI.elasticnet.path", "numpy.sum", "numpy.zeros", "numpy.abs", "enumerate", "numpy.sum", "numpy.sum.transpose", "support_set.append"], "methods", ["None"], ["", "def", "expand", "(", "\n", "self", ",", "support_set", ",", "X_hat", ",", "y_hat", ",", "way", ",", "num_support", ",", "pseudo_y", ",", "embeddings", ",", "targets", "\n", ")", ":", "\n", "\n", "# Get the path (i.e the evolution of |gamma_i| as a function of lambda increasing)", "\n", "        ", "_", ",", "coefs", ",", "_", "=", "self", ".", "elasticnet", ".", "path", "(", "X_hat", ",", "y_hat", ",", "l1_ratio", "=", "1.0", ")", "\n", "coefs", "=", "np", ".", "sum", "(", "np", ".", "abs", "(", "coefs", ".", "transpose", "(", "2", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", "num_support", ":", ",", ":", "]", ")", ",", "axis", "=", "2", ")", "\n", "selected", "=", "np", ".", "zeros", "(", "way", ")", "\n", "for", "gamma", "in", "coefs", ":", "\n", "            ", "for", "i", ",", "g", "in", "enumerate", "(", "gamma", ")", ":", "\n", "                ", "if", "(", "\n", "g", "==", "0.0", "\n", "and", "(", "i", "+", "num_support", "not", "in", "support_set", ")", "\n", "and", "(", "selected", "[", "pseudo_y", "[", "i", "]", "]", "<", "self", ".", "step", ")", "\n", ")", ":", "\n", "                    ", "support_set", ".", "append", "(", "i", "+", "num_support", ")", "\n", "selected", "[", "pseudo_y", "[", "i", "]", "]", "+=", "1", "\n", "", "", "if", "np", ".", "sum", "(", "selected", ">=", "self", ".", "step", ")", "==", "way", ":", "\n", "                ", "break", "\n", "", "", "return", "support_set", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.initial_embed": [[112, 145], ["reduce.lower.lower.lower", "Isomap", "LocallyLinearEmbedding", "PCA.fit_transform", "MDS", "LocallyLinearEmbedding", "SpectralEmbedding", "PCA"], "methods", ["None"], ["", "def", "initial_embed", "(", "self", ",", "reduce", ",", "d", ")", ":", "\n", "        ", "reduce", "=", "reduce", ".", "lower", "(", ")", "\n", "assert", "reduce", "in", "[", "\"isomap\"", ",", "\"ltsa\"", ",", "\"mds\"", ",", "\"lle\"", ",", "\"se\"", ",", "\"pca\"", ",", "\"none\"", "]", "\n", "if", "reduce", "==", "\"isomap\"", ":", "\n", "            ", "from", "sklearn", ".", "manifold", "import", "Isomap", "\n", "\n", "embed", "=", "Isomap", "(", "n_components", "=", "d", ")", "\n", "", "elif", "reduce", "==", "\"ltsa\"", ":", "\n", "            ", "from", "sklearn", ".", "manifold", "import", "LocallyLinearEmbedding", "\n", "\n", "embed", "=", "LocallyLinearEmbedding", "(", "n_components", "=", "d", ",", "n_neighbors", "=", "5", ",", "method", "=", "\"ltsa\"", ")", "\n", "", "elif", "reduce", "==", "\"mds\"", ":", "\n", "            ", "from", "sklearn", ".", "manifold", "import", "MDS", "\n", "\n", "embed", "=", "MDS", "(", "n_components", "=", "d", ",", "metric", "=", "False", ")", "\n", "", "elif", "reduce", "==", "\"lle\"", ":", "\n", "            ", "from", "sklearn", ".", "manifold", "import", "LocallyLinearEmbedding", "\n", "\n", "embed", "=", "LocallyLinearEmbedding", "(", "\n", "n_components", "=", "d", ",", "n_neighbors", "=", "5", ",", "eigen_solver", "=", "\"dense\"", "\n", ")", "\n", "", "elif", "reduce", "==", "\"se\"", ":", "\n", "            ", "from", "sklearn", ".", "manifold", "import", "SpectralEmbedding", "\n", "\n", "embed", "=", "SpectralEmbedding", "(", "n_components", "=", "d", ")", "\n", "", "elif", "reduce", "==", "\"pca\"", ":", "\n", "            ", "from", "sklearn", ".", "decomposition", "import", "PCA", "\n", "embed", "=", "PCA", "(", "n_components", "=", "d", ")", "\n", "\n", "", "if", "reduce", "==", "\"none\"", ":", "\n", "            ", "self", ".", "embed", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed", "=", "lambda", "x", ":", "embed", ".", "fit_transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.initial_classifier": [[146, 153], ["sklearn.svm.SVC", "sklearn.linear_model.LogisticRegression"], "methods", ["None"], ["", "", "def", "initial_classifier", "(", "self", ",", "classifier", ")", ":", "\n", "        ", "assert", "classifier", "in", "[", "\"lr\"", ",", "\"svm\"", "]", "\n", "if", "classifier", "==", "\"svm\"", ":", "\n", "            ", "self", ".", "classifier", "=", "SVC", "(", "C", "=", "self", ".", "C", ",", "gamma", "=", "\"auto\"", ",", "kernel", "=", "\"linear\"", ",", "probability", "=", "True", ")", "\n", "", "elif", "classifier", "==", "\"lr\"", ":", "\n", "            ", "self", ".", "classifier", "=", "LogisticRegression", "(", "\n", "C", "=", "self", ".", "C", ",", "multi_class", "=", "\"auto\"", ",", "solver", "=", "\"lbfgs\"", ",", "max_iter", "=", "1000", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.label2onehot": [[155, 160], ["numpy.zeros", "enumerate"], "methods", ["None"], ["", "", "def", "label2onehot", "(", "self", ",", "label", ",", "num_class", ")", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "num_class", ")", ")", "\n", "for", "ind", ",", "num", "in", "enumerate", "(", "label", ")", ":", "\n", "            ", "result", "[", "ind", ",", "num", "]", "=", "1.0", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.feat.FEAT.__init__": [[16, 52], ["abstract.FewShotMethod.__init__", "src.utils.utils.strip_prefix", "src.utils.utils.strip_prefix", "feat.FEAT.attn_model.load_state_dict", "loguru.logger.info", "feat.FEAT.attn_model.eval", "feat.FEAT.attn_model.to", "torch.load", "torch.load", "torch.load", "torch.load", "ValueError", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "use_euclidean", ":", "bool", ",", "temperature", ":", "float", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "use_euclidean", "=", "use_euclidean", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "# Load attention module", "\n", "if", "args", ".", "backbone", "==", "\"resnet12\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone", "==", "\"resnet18\"", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone", "==", "\"wrn2810\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"\"", ")", "\n", "", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "attn_model", "=", "BACKBONES", "[", "\"MultiHeadAttention\"", "]", "(", "\n", "args", ",", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", "\n", ")", "\n", "weights", "=", "(", "\n", "Path", "(", "args", ".", "data_dir", ")", "\n", "/", "\"models\"", "\n", "/", "args", ".", "training", "\n", "/", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}.pth\"", "\n", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights", ")", "[", "\"params\"", "]", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"module.\"", ")", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"slf_attn.\"", ")", "\n", "missing_keys", ",", "unexpected", "=", "self", ".", "attn_model", ".", "load_state_dict", "(", "\n", "state_dict", ",", "strict", "=", "False", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Loaded Snatcher attention module. \\n Missing keys: {missing_keys} \\n Unexpected keys: {unexpected}\"", "\n", ")", "\n", "\n", "self", ".", "attn_model", ".", "eval", "(", ")", "\n", "self", ".", "attn_model", "=", "self", ".", "attn_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.feat.FEAT.forward": [[53, 91], ["easyfsl.utils.compute_prototypes().unsqueeze", "support_features.cuda", "query_features.cuda", "support_labels.cuda", "kwargs[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logits_s.softmax().cpu", "logits_q.softmax().cpu", "easyfsl.utils.compute_prototypes", "torch.normalize", "torch.normalize", "feat.FEAT.attn_model", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "logits_s.softmax", "logits_q.softmax", "torch.normalize.t", "torch.normalize.t", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "forward", "(", "self", ",", "support_features", ",", "query_features", ",", "support_labels", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "support_features", ",", "query_features", "=", "(", "\n", "support_features", ".", "cuda", "(", ")", ",", "\n", "query_features", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "support_labels", ",", "query_labels", "=", "(", "\n", "support_labels", ".", "cuda", "(", ")", ",", "\n", "kwargs", "[", "\"query_labels\"", "]", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", ".", "unsqueeze", "(", "\n", "0", "\n", ")", "# NK x d", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "proto", "=", "self", ".", "attn_model", "(", "proto", ",", "proto", ",", "proto", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "self", ".", "use_euclidean", ":", "\n", "                ", "logits_s", "=", "-", "(", "\n", "torch", ".", "cdist", "(", "support_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "logits_q", "=", "-", "(", "\n", "torch", ".", "cdist", "(", "query_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "", "else", ":", "\n", "                ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "logits_s", "=", "(", "\n", "torch", ".", "bmm", "(", "support_features", ",", "proto", ".", "t", "(", ")", ")", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "logits_q", "=", "(", "\n", "torch", ".", "bmm", "(", "query_features", ",", "proto", ".", "t", "(", ")", ")", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "\n", "", "", "return", "logits_s", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", ",", "logits_q", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.tim.AbstractTIM.__init__": [[18, 30], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "softmax_temperature", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "inference_lr", ":", "float", ",", "\n", "loss_weights", ":", "List", "[", "float", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.tim.TIM_GD.forward": [[33, 114], ["support_labels.unique().size", "torch.one_hot", "torch.one_hot", "easyfsl.utils.compute_prototypes", "tim.TIM_GD.prototypes.requires_grad_", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "[].append", "[].append", "[].append", "[].append", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes", "tim.TIM_GD.softmax", "tim.TIM_GD.mean", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes().softmax", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes().softmax", "support_labels.unique", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes", "q_cond_ent_values.append", "q_ent_values.append", "ce_values.append", "acc_values.append", "q_cond_ent.item", "q_ent.item", "ce.item", "kwargs[].bool", "[].float().mean().item", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes", "tim.TIM_GD.get_logits_from_cosine_distances_to_prototypes", "torch.log", "torch.log", "torch.log", "torch.log", "[].float().mean", "tim.TIM_GD.log_softmax", "torch.log", "torch.log", "torch.log", "torch.log", "[].float", "tim.TIM_GD.argmax"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["    ", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "unlabelled_data", "=", "query_features", "\n", "\n", "# Metric dic", "\n", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "support_labels_one_hot", "=", "F", ".", "one_hot", "(", "support_labels", ",", "num_classes", ")", "\n", "\n", "# Initialize weights", "\n", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "\n", "# Run adaptation", "\n", "self", ".", "prototypes", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "prototypes", "]", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "q_cond_ent_values", "=", "[", "]", "\n", "q_ent_values", "=", "[", "]", "\n", "ce_values", "=", "[", "]", "\n", "acc_values", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "            ", "logits_s", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", "\n", "logits_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "unlabelled_data", "\n", ")", "\n", "\n", "ce", "=", "-", "(", "support_labels_one_hot", "*", "logits_s", ".", "log_softmax", "(", "1", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "q_probs", "=", "logits_q", ".", "softmax", "(", "1", ")", "\n", "q_cond_ent", "=", "-", "(", "q_probs", "*", "torch", ".", "log", "(", "q_probs", "+", "1e-12", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "marginal_y", "=", "q_probs", ".", "mean", "(", "0", ")", "\n", "q_ent", "=", "-", "(", "marginal_y", "*", "torch", ".", "log", "(", "marginal_y", ")", ")", ".", "sum", "(", "0", ")", "\n", "\n", "loss", "=", "self", ".", "loss_weights", "[", "0", "]", "*", "ce", "-", "(", "\n", "self", ".", "loss_weights", "[", "1", "]", "*", "q_ent", "-", "self", ".", "loss_weights", "[", "2", "]", "*", "q_cond_ent", "\n", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "q_probs", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "query_features", "\n", ")", "\n", "q_cond_ent_values", ".", "append", "(", "q_cond_ent", ".", "item", "(", ")", ")", "\n", "q_ent_values", ".", "append", "(", "q_ent", ".", "item", "(", ")", ")", "\n", "ce_values", ".", "append", "(", "ce", ".", "item", "(", ")", ")", "\n", "inliers", "=", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "\n", "acc_values", ".", "append", "(", "\n", "(", "q_probs", ".", "argmax", "(", "-", "1", ")", "==", "kwargs", "[", "\"query_labels\"", "]", ")", "[", "inliers", "]", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"cond_ent\"", "]", ".", "append", "(", "\n", "q_cond_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"marg_ent\"", "]", ".", "append", "(", "\n", "q_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ce_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_metrics\"", "]", "[", "\"acc\"", "]", ".", "append", "(", "acc_values", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "probas_s", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", ".", "softmax", "(", "-", "1", ")", "\n", "probas_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "query_features", "\n", ")", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "", "return", "probas_s", ",", "probas_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.bd_cspn.BDCSPN.rectify_prototypes": [[17, 50], ["support_labels.unique().size", "torch.one_hot", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes().exp", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes().exp", "bd_cspn.BDCSPN.argmax", "torch.one_hot", "support_features.mean", "query_features.mean", "support_labels.unique", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["def", "rectify_prototypes", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tensor", ":", "\n", "        ", "Kes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "one_hot_s", "=", "F", ".", "one_hot", "(", "support_labels", ",", "Kes", ")", "# [shot_s, K]", "\n", "eta", "=", "support_features", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "-", "query_features", ".", "mean", "(", "\n", "0", ",", "keepdim", "=", "True", "\n", ")", "# [1, feature_dim]", "\n", "query_features", "=", "query_features", "+", "eta", "\n", "\n", "logits_s", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", ".", "exp", "(", ")", "# [shot_s, K]", "\n", "logits_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "query_features", "\n", ")", ".", "exp", "(", ")", "# [shot_q, K]", "\n", "\n", "preds_q", "=", "logits_q", ".", "argmax", "(", "-", "1", ")", "\n", "one_hot_q", "=", "F", ".", "one_hot", "(", "preds_q", ",", "Kes", ")", "\n", "\n", "normalization", "=", "(", "\n", "(", "one_hot_s", "*", "logits_s", ")", ".", "sum", "(", "0", ")", "+", "(", "one_hot_q", "*", "logits_q", ")", ".", "sum", "(", "0", ")", "\n", ")", ".", "unsqueeze", "(", "\n", "0", "\n", ")", "# [1, K]", "\n", "w_s", "=", "(", "one_hot_s", "*", "logits_s", ")", "/", "normalization", "# [shot_s, K]", "\n", "w_q", "=", "(", "one_hot_q", "*", "logits_q", ")", "/", "normalization", "# [shot_q, K]", "\n", "\n", "prototypes", "=", "(", "w_s", "*", "one_hot_s", ")", ".", "t", "(", ")", ".", "matmul", "(", "support_features", ")", "+", "(", "\n", "w_q", "*", "one_hot_q", "\n", ")", ".", "t", "(", ")", ".", "matmul", "(", "query_features", ")", "\n", "\n", "return", "prototypes", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.bd_cspn.BDCSPN.forward": [[51, 75], ["easyfsl.utils.compute_prototypes", "bd_cspn.BDCSPN.rectify_prototypes", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes().softmax", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes().softmax", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes", "bd_cspn.BDCSPN.get_logits_from_cosine_distances_to_prototypes"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.bd_cspn.BDCSPN.rectify_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "unlabelled_data", "=", "query_features", "\n", "\n", "# Initialize prototypes", "\n", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "# [K, d]", "\n", "self", ".", "prototypes", "=", "self", ".", "rectify_prototypes", "(", "\n", "support_features", "=", "support_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", "query_features", "=", "unlabelled_data", ",", "\n", ")", "\n", "probs_s", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", ".", "softmax", "(", "-", "1", ")", "\n", "probs_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "query_features", "\n", ")", ".", "softmax", "(", "-", "1", ")", "\n", "return", "probs_s", ",", "probs_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.__init__": [[16, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "works_on_features", "=", "(", "\n", "False", "# by default most all-in-one methods need raw features and model", "\n", ")", "\n", "\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.compute_auc": [[24, 29], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.forward": [[30, 52], ["abstract.FewShotMethod.transform_features", "abstract.FewShotMethod.classify_support_and_queries"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.transform_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.few_shot_methods.tim.TIM_GD.classify_support_and_queries"], ["\n", "", "def", "__call__", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            support_features: support features\n            query_features: query features\n            support_labels: support labels\n\n        Returns:\n            support_soft_predictions: Tensor of shape [n_query, K], where K is the number of classes\n                in the task, representing the soft predictions of the method for support samples.\n            query_soft_predictions: Tensor of shape [n_query, K], where K is the number of classes\n                in the task, representing the soft predictions of the method for query samples.\n            outlier_scores: Tensor of shape [n_query,], where K is the number of classes\n                in the task, representing the soft predictions of the method for query samples.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_cli_args", "(", "cls", ",", "args", ")", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "cls", ".", "__init__", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.classify_support_and_queries": [[54, 59], ["NotImplementedError"], "methods", ["None"], ["**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", "if", "k", "in", "signature", ".", "parameters", ".", "keys", "(", ")", "}", ",", "\n", ")", "\n", "\n", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.transform_features": [[61, 84], ["abstract.FewShotMethod.prepool_feature_transformer", "pool_features", "abstract.FewShotMethod.postpool_feature_transformer"], "methods", ["None"], ["", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={getattr(self, k)}\"", "for", "k", "in", "arg_names", "]", "\n", "return", "f\"{type(self).__name__}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n", "            ", "arg_names", ".", "remove", "(", "\"args\"", ")", "\n", "", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={getattr(self, k)}\"", "for", "k", "in", "arg_names", "]", "\n", "return", "f\"{type(self).__name__}({','.join(args)})\"", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.get_logits_from_euclidean_distances_to_prototypes": [[85, 87], ["torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.get_logits_from_cosine_distances_to_prototypes": [[88, 93], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.from_cli_args": [[95, 100], ["inspect.signature", "cls", "args._get_kwargs", "inspect.signature.parameters.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.__str__": [[102, 113], ["list", "len", "list.remove", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.__repr__": [[114, 125], ["list", "len", "list.remove", "list.remove", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.semi_feat.SemiFEAT.__init__": [[15, 51], ["abstract.FewShotMethod.__init__", "src.utils.utils.strip_prefix", "src.utils.utils.strip_prefix", "semi_feat.SemiFEAT.attn_model.load_state_dict", "loguru.logger.info", "semi_feat.SemiFEAT.attn_model.eval", "semi_feat.SemiFEAT.attn_model.to", "torch.load", "torch.load", "torch.load", "torch.load", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "use_euclidean", ":", "bool", ",", "temperature", ":", "float", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "use_euclidean", "=", "use_euclidean", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "# Load attention module", "\n", "if", "args", ".", "backbone", "==", "\"resnet12\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "elif", "args", ".", "backbone", "==", "\"resnet18\"", ":", "\n", "            ", "hdim", "=", "512", "\n", "", "elif", "args", ".", "backbone", "==", "\"wrn2810\"", ":", "\n", "            ", "hdim", "=", "640", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"\"", ")", "\n", "", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "attn_model", "=", "BACKBONES", "[", "\"MultiHeadAttention\"", "]", "(", "\n", "args", ",", "1", ",", "hdim", ",", "hdim", ",", "hdim", ",", "dropout", "=", "0.5", "\n", ")", "\n", "weights", "=", "(", "\n", "args", ".", "data_dir", "\n", "/", "\"models\"", "\n", "/", "args", ".", "training", "\n", "/", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}.pth\"", "\n", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights", ")", "[", "\"params\"", "]", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"module.\"", ")", "\n", "state_dict", "=", "strip_prefix", "(", "state_dict", ",", "\"slf_attn.\"", ")", "\n", "missing_keys", ",", "unexpected", "=", "self", ".", "attn_model", ".", "load_state_dict", "(", "\n", "state_dict", ",", "strict", "=", "False", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "f\"Loaded Snatcher attention module. \\n Missing keys: {missing_keys} \\n Unexpected keys: {unexpected}\"", "\n", ")", "\n", "\n", "self", ".", "attn_model", ".", "eval", "(", ")", "\n", "self", ".", "attn_model", "=", "self", ".", "attn_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.semi_feat.SemiFEAT.forward": [[52, 93], ["support_labels.cuda.cuda.cuda", "easyfsl.utils.compute_prototypes().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "support_features.cuda", "query_features.cuda", "support_features.cuda", "query_features.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "easyfsl.utils.compute_prototypes", "query_features.unsqueeze", "torch.normalize", "torch.normalize", "logits_s.softmax().cpu", "logits_q.softmax().cpu", "semi_feat.SemiFEAT.attn_model", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.normalize.t", "torch.normalize.t", "logits_s.softmax", "logits_q.softmax", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "forward", "(", "self", ",", "support_features", ",", "query_features", ",", "support_labels", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "support_features", ",", "query_features", "=", "(", "\n", "support_features", ".", "cuda", "(", ")", ",", "\n", "query_features", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "support_features", ",", "query_features", "=", "(", "\n", "support_features", ".", "cuda", "(", ")", ",", "\n", "query_features", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "support_labels", "=", "support_labels", ".", "cuda", "(", ")", "\n", "\n", "# get mean of the support", "\n", "proto", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", ".", "unsqueeze", "(", "\n", "0", "\n", ")", "# NK x d", "\n", "\n", "# query: (num_batch, num_query, num_proto, num_emb)", "\n", "# proto: (num_batch, num_proto, num_emb)", "\n", "whole_set", "=", "torch", ".", "cat", "(", "[", "proto", ",", "query_features", ".", "unsqueeze", "(", "0", ")", "]", ",", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "proto", "=", "self", ".", "attn_model", "(", "proto", ",", "whole_set", ",", "whole_set", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "self", ".", "use_euclidean", ":", "\n", "                ", "logits_s", "=", "-", "(", "\n", "torch", ".", "cdist", "(", "support_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "logits_q", "=", "-", "(", "\n", "torch", ".", "cdist", "(", "query_features", ",", "proto", ")", "**", "2", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "", "else", ":", "\n", "                ", "proto", "=", "F", ".", "normalize", "(", "proto", ",", "dim", "=", "-", "1", ")", "# normalize for cosine distance", "\n", "logits_s", "=", "(", "\n", "torch", ".", "bmm", "(", "support_features", ",", "proto", ".", "t", "(", ")", ")", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "logits_q", "=", "(", "\n", "torch", ".", "bmm", "(", "query_features", ",", "proto", ".", "t", "(", ")", ")", "/", "self", ".", "temperature", "\n", ")", "# [Nq, K]", "\n", "\n", "", "return", "logits_s", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", ",", "logits_q", ".", "softmax", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.__init__": [[11, 16], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ":", "float", ",", "inference_steps", ":", "int", ",", "lam", ":", "float", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "lam", "=", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.forward": [[17, 67], ["easyfsl.utils.compute_prototypes", "support_labels.unique().size", "torch.one_hot", "torch.one_hot", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "[].append", "support_features.cuda", "unlabelled_data.cuda", "query_features.cuda", "support_labels.cuda", "kwargs[].cuda", "kwargs[].bool().cuda", "pt_map.MAP.get_probas", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pt_map.MAP.update_prototypes", "acc_values.append", "pt_map.MAP.get_probas().cpu", "pt_map.MAP.get_probas().cpu", "support_labels.unique", "[].float().mean().item", "kwargs[].bool", "pt_map.MAP.get_probas", "pt_map.MAP.get_probas", "[].float().mean", "[].float", "pt_map.MAP.get_probas().argmax", "pt_map.MAP.get_probas"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.get_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.update_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.get_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.get_probas", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.get_probas"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "if", "kwargs", "[", "\"use_transductively\"", "]", "is", "not", "None", ":", "\n", "            ", "unlabelled_data", "=", "query_features", "[", "kwargs", "[", "\"use_transductively\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "unlabelled_data", "=", "query_features", "\n", "\n", "", "support_features", ",", "unlabelled_data", ",", "query_features", "=", "(", "\n", "support_features", ".", "cuda", "(", ")", ",", "\n", "unlabelled_data", ".", "cuda", "(", ")", ",", "\n", "query_features", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "support_labels", ",", "query_labels", "=", "(", "\n", "support_labels", ".", "cuda", "(", ")", ",", "\n", "kwargs", "[", "\"query_labels\"", "]", ".", "cuda", "(", ")", ",", "\n", ")", "\n", "inliers", "=", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "probs_s", "=", "F", ".", "one_hot", "(", "support_labels", ",", "num_classes", ")", "\n", "all_features", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "unlabelled_data", "]", ",", "0", ")", "\n", "acc_values", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "\n", "            ", "probs_q", "=", "self", ".", "get_probas", "(", "unlabelled_data", ")", "\n", "all_probs", "=", "torch", ".", "cat", "(", "[", "probs_s", ",", "probs_q", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# update centroids", "\n", "self", ".", "update_prototypes", "(", "all_features", ",", "all_probs", ")", "\n", "\n", "acc_values", ".", "append", "(", "\n", "(", "self", ".", "get_probas", "(", "query_features", ")", ".", "argmax", "(", "-", "1", ")", "==", "query_labels", ")", "[", "inliers", "]", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_metrics\"", "]", "[", "\"acc\"", "]", ".", "append", "(", "acc_values", ")", "\n", "\n", "# get final accuracy and return it", "\n", "return", "(", "\n", "self", ".", "get_probas", "(", "support_features", ")", ".", "cpu", "(", ")", ",", "\n", "self", ".", "get_probas", "(", "query_features", ")", ".", "cpu", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.compute_optimal_transport": [[69, 93], ["r.cuda.cuda.cuda", "c.cuda.cuda.cuda", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.sum", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.max", "torch.max", "torch.max", "torch.max", "torch.exp.sum", "torch.exp.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.exp.sum", "torch.exp.sum", "torch.exp.sum", "torch.exp.sum"], "methods", ["None"], ["", "def", "compute_optimal_transport", "(", "self", ",", "M", ",", "r", ",", "c", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "\n", "        ", "\"\"\"\n        M: [N, K]\n        \"\"\"", "\n", "\n", "r", "=", "r", ".", "cuda", "(", ")", "\n", "c", "=", "c", ".", "cuda", "(", ")", "\n", "n", ",", "m", "=", "M", ".", "shape", "\n", "P", "=", "torch", ".", "exp", "(", "-", "self", ".", "lam", "*", "M", ")", "\n", "P", "/=", "P", ".", "sum", "(", "dim", "=", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", "\n", "\n", "u", "=", "torch", ".", "zeros", "(", "n", ")", ".", "cuda", "(", ")", "\n", "maxiters", "=", "1000", "\n", "iters", "=", "1", "\n", "# normalize this matrix", "\n", "while", "torch", ".", "max", "(", "torch", ".", "abs", "(", "u", "-", "P", ".", "sum", "(", "1", ")", ")", ")", ">", "epsilon", ":", "\n", "            ", "u", "=", "P", ".", "sum", "(", "1", ")", "\n", "P", "*=", "(", "r", "/", "u", "+", "1e-10", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "P", "*=", "(", "c", "/", "P", ".", "sum", "(", "0", ")", "+", "1e-10", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "if", "iters", "==", "maxiters", ":", "\n", "                ", "break", "\n", "", "iters", "=", "iters", "+", "1", "\n", "", "return", "P", ",", "torch", ".", "sum", "(", "P", "*", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.get_probas": [[94, 109], ["query_features.size", "dist.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "pt_map.MAP.compute_optimal_transport", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.compute_optimal_transport"], ["", "def", "get_probas", "(", "self", ",", "query_features", ")", ":", "\n", "        ", "\"\"\"\n        query_features: [Nq, d]\n        \"\"\"", "\n", "\n", "dist", "=", "torch", ".", "cdist", "(", "query_features", ",", "self", ".", "prototypes", ")", "**", "2", "# [Nq, K]", "\n", "\n", "n_usamples", "=", "query_features", ".", "size", "(", "0", ")", "\n", "n_ways", "=", "dist", ".", "size", "(", "1", ")", "\n", "\n", "r", "=", "torch", ".", "ones", "(", "n_usamples", ")", "\n", "c", "=", "torch", ".", "ones", "(", "n_ways", ")", "*", "(", "n_usamples", "//", "n_ways", ")", "\n", "\n", "probas_q", ",", "_", "=", "self", ".", "compute_optimal_transport", "(", "dist", ",", "r", ",", "c", ",", "epsilon", "=", "1e-6", ")", "\n", "return", "probas_q", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.pt_map.MAP.update_prototypes": [[110, 121], ["probas.sum().unsqueeze", "probas.t", "probas.sum"], "methods", ["None"], ["", "def", "update_prototypes", "(", "self", ",", "features", ",", "probas", ")", ":", "\n", "\n", "        ", "\"\"\"\n        features: [N, d]\n        probas: [N, K]\n\n        mus : [K, d]\n        \"\"\"", "\n", "new_prototypes", "=", "(", "probas", ".", "t", "(", ")", "@", "features", ")", "/", "probas", ".", "sum", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", "\n", "delta", "=", "new_prototypes", "-", "self", ".", "prototypes", "\n", "self", ".", "prototypes", "+=", "self", ".", "alpha", "*", "delta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.__init__": [[14, 34], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "softmax_temperature", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "inference_lr", ":", "float", ",", "\n", "lambda_kernel", ":", "float", ",", "\n", "lambda_ent", ":", "float", ",", "\n", "init", ":", "str", ",", "\n", "params2adapt", ":", "str", ",", "\n", "knn", ":", "str", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n", "self", ".", "lambda_kernel", "=", "lambda_kernel", "\n", "self", ".", "lambda_ent", "=", "lambda_ent", "\n", "self", ".", "params2adapt", "=", "params2adapt", "\n", "self", ".", "knn", "=", "knn", "\n", "self", ".", "init", "=", "init", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.cosine": [[35, 37], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "cosine", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "X", "-", "self", ".", "mu", ",", "dim", "=", "1", ")", "@", "F", ".", "normalize", "(", "Y", "-", "self", ".", "mu", ",", "dim", "=", "1", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits": [[38, 59], ["lame.LAME.cosine", "range", "torch.stack.append", "torch.stack.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "lame.LAME.sort", "support_labels.unique().size", "torch.stack.append", "torch.stack.append", "masked_cossim.topk", "class_cossim.mean", "sorted_cossim[].mean", "support_labels.unique"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.cosine"], ["", "def", "get_logits", "(", "self", ",", "support_labels", ",", "support_features", ",", "query_features", ",", "bias", "=", "True", ")", ":", "\n", "\n", "        ", "cossim", "=", "self", ".", "cosine", "(", "query_features", ",", "support_features", ")", "# [Nq, Ns]", "\n", "sorted_cossim", "=", "cossim", ".", "sort", "(", "descending", "=", "True", ",", "dim", "=", "-", "1", ")", ".", "values", "# [Nq, Ns]", "\n", "# sorted_cossim = cossim[:, sorted_indexes]", "\n", "logits", "=", "[", "]", "\n", "\n", "# Class logits", "\n", "for", "class_", "in", "range", "(", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "masked_cossim", "=", "cossim", "[", ":", ",", "support_labels", "==", "class_", "]", "\n", "knn", "=", "(", "support_labels", "==", "class_", ")", ".", "sum", "(", ")", "\n", "class_cossim", "=", "masked_cossim", ".", "topk", "(", "knn", ",", "dim", "=", "-", "1", ")", ".", "values", "# [Nq, Ns]", "\n", "logits", ".", "append", "(", "class_cossim", ".", "mean", "(", "-", "1", ")", ")", "# [Nq]", "\n", "\n", "# Outlier logit", "\n", "", "logits", ".", "append", "(", "-", "sorted_cossim", "[", ":", ",", ":", "knn", "]", ".", "mean", "(", "-", "1", ")", ")", "\n", "logits", "=", "torch", ".", "stack", "(", "logits", ",", "dim", "=", "1", ")", "\n", "if", "bias", ":", "\n", "            ", "return", "self", ".", "softmax_temperature", "*", "logits", "-", "self", ".", "biases", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "softmax_temperature", "*", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.laplacian_optimization": [[60, 71], ["range", "Z.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "def", "laplacian_optimization", "(", "self", ",", "unary", ",", "kernel", ",", "max_steps", "=", "10", ")", ":", "\n", "\n", "# E_list = []", "\n", "# oldE = float('inf')", "\n", "        ", "Z", "=", "unary", "# [N, K]", "\n", "for", "i", "in", "range", "(", "max_steps", ")", ":", "\n", "            ", "Z", "=", "unary", "**", "(", "1", "/", "self", ".", "lambda_ent", ")", "*", "torch", ".", "exp", "(", "\n", "1", "/", "self", ".", "lambda_ent", "*", "self", ".", "lambda_kernel", "*", "(", "kernel", "@", "Z", ")", "\n", ")", "\n", "Z", "/=", "Z", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.forward": [[72, 211], ["support_labels.unique().size", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "kwargs[].squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "lame.LAME.get_logits().mean", "lame.LAME.mu.requires_grad_", "params_list.append", "lame.LAME.biases.requires_grad_", "params_list.append", "lame.LAME.get_logits", "lame.LAME.softmax", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].softmax", "[].softmax", "support_labels.unique", "torch.one_hot", "torch.one_hot", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "lame.LAME.cosine", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "lame.LAME.laplacian_optimization", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "logits_q[].softmax", "q_cond_ent_values.append", "acc_values.append", "inlier_entropy.append", "outlier_entropy.append", "inlier_outscore.append", "oulier_outscore.append", "aucs.append", "skimage.filters.threshold_otsu", "acc_otsu.append", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "lame.LAME.get_logits", "support_labels.size", "q_cond_ent.mean().item", "kwargs[].bool", "[].float().mean().item", "q_cond_ent[].mean().item", "q_cond_ent[].mean().item", "outlier_scores[].mean().item", "outlier_scores[].mean().item", "lame.LAME.compute_auc", "outlier_scores.numpy", "support_features.size", "lame.LAME.topk", "lame.LAME.get_logits", "lame.LAME.get_logits", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "query_features.size", "q_cond_ent.mean", "[].float().mean", "q_cond_ent[].mean", "q_cond_ent[].mean", "outlier_scores[].mean", "outlier_scores[].mean", "torch.log", "torch.log", "torch.log", "torch.log", "lame.LAME.log_softmax", "[].float", "logits_q[].softmax.argmax"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.cosine", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.laplacian_optimization", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.get_logits"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "if", "kwargs", "[", "\"use_transductively\"", "]", "is", "not", "None", ":", "\n", "            ", "unlabelled_data", "=", "query_features", "[", "kwargs", "[", "\"use_transductively\"", "]", "]", "\n", "", "else", ":", "\n", "            ", "unlabelled_data", "=", "query_features", "\n", "\n", "# Metric dic", "\n", "", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "\n", "# Initialize weights", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "self", ".", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"rand\"", ":", "\n", "            ", "self", ".", "mu", "=", "0.1", "*", "torch", ".", "randn", "(", "1", ",", "support_features", ".", "size", "(", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "init", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "mu", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "unlabelled_data", "]", ",", "0", ")", ".", "mean", "(", "\n", "0", ",", "keepdim", "=", "True", "\n", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "biases", "=", "self", ".", "get_logits", "(", "\n", "support_labels", ",", "support_features", ",", "unlabelled_data", ",", "bias", "=", "False", "\n", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "# self.biases = torch.zeros(num_classes + 1)", "\n", "\n", "", "params_list", "=", "[", "]", "\n", "if", "\"mu\"", "in", "self", ".", "params2adapt", ":", "\n", "            ", "self", ".", "mu", ".", "requires_grad_", "(", ")", "\n", "params_list", ".", "append", "(", "self", ".", "mu", ")", "\n", "", "if", "\"bias\"", "in", "self", ".", "params2adapt", ":", "\n", "            ", "self", ".", "biases", ".", "requires_grad_", "(", ")", "\n", "params_list", ".", "append", "(", "self", ".", "biases", ")", "\n", "\n", "# Run adaptation", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params_list", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "q_cond_ent_values", "=", "[", "]", "\n", "acc_otsu", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "q_ent_values", "=", "[", "]", "\n", "ce_values", "=", "[", "]", "\n", "inlier_entropy", "=", "[", "]", "\n", "outlier_entropy", "=", "[", "]", "\n", "inlier_outscore", "=", "[", "]", "\n", "oulier_outscore", "=", "[", "]", "\n", "acc_values", "=", "[", "]", "\n", "\n", "support_onehot", "=", "torch", ".", "cat", "(", "\n", "[", "F", ".", "one_hot", "(", "support_labels", ")", ",", "torch", ".", "zeros", "(", "support_labels", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "\n", "            ", "logits_q", "=", "self", ".", "get_logits", "(", "\n", "support_labels", ",", "support_features", ",", "unlabelled_data", "\n", ")", "\n", "probs_q", "=", "logits_q", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "# === Perform Z-update ===", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "unary", "=", "torch", ".", "cat", "(", "[", "support_onehot", ",", "probs_q", "]", ",", "0", ")", "\n", "all_features", "=", "torch", ".", "cat", "(", "[", "support_features", ",", "query_features", "]", ",", "0", ")", "\n", "N", "=", "all_features", ".", "size", "(", "0", ")", "\n", "cossim", "=", "self", ".", "cosine", "(", "all_features", ",", "all_features", ")", "\n", "# W = cossim", "\n", "knn_index", "=", "cossim", ".", "topk", "(", "self", ".", "knn", "+", "1", ",", "-", "1", ")", ".", "indices", "[", ":", ",", "1", ":", "]", "# [N, knn]", "\n", "W", "=", "torch", ".", "zeros", "(", "N", ",", "N", ")", "\n", "W", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "\n", "Z", "=", "self", ".", "laplacian_optimization", "(", "unary", ",", "W", ")", "\n", "Z", "=", "Z", "[", "-", "query_features", ".", "size", "(", "0", ")", ":", "]", "\n", "\n", "# === Perform mu and bias updates ===", "\n", "\n", "", "loss", "=", "-", "(", "Z", "*", "logits_q", ".", "log_softmax", "(", "-", "1", ")", ")", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", "0", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "outlier_scores", "=", "Z", "[", ":", ",", "-", "1", "]", "\n", "q_probs", "=", "logits_q", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", "\n", "q_cond_ent", "=", "-", "(", "q_probs", "*", "torch", ".", "log", "(", "q_probs", "+", "1e-12", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "q_cond_ent_values", ".", "append", "(", "q_cond_ent", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "inliers", "=", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "\n", "acc_values", ".", "append", "(", "\n", "(", "q_probs", ".", "argmax", "(", "-", "1", ")", "==", "kwargs", "[", "\"query_labels\"", "]", ")", "[", "inliers", "]", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "inlier_entropy", ".", "append", "(", "q_cond_ent", "[", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "outlier_entropy", ".", "append", "(", "q_cond_ent", "[", "~", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "inlier_outscore", ".", "append", "(", "outlier_scores", "[", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "oulier_outscore", ".", "append", "(", "outlier_scores", "[", "~", "inliers", "]", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ")", "\n", "aucs", ".", "append", "(", "self", ".", "compute_auc", "(", "outlier_scores", ",", "**", "kwargs", ")", ")", "\n", "thresh", "=", "threshold_otsu", "(", "outlier_scores", ".", "numpy", "(", ")", ")", "\n", "believed_inliers", "=", "outlier_scores", "<", "thresh", "\n", "acc_otsu", ".", "append", "(", "(", "believed_inliers", "==", "inliers", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"cond_ent\"", "]", ".", "append", "(", "\n", "q_cond_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"marg_ent\"", "]", ".", "append", "(", "\n", "q_ent_values", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"classifier_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ce_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"acc\"", "]", ".", "append", "(", "acc_values", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"rocauc\"", "]", ".", "append", "(", "aucs", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"acc_otsu\"", "]", ".", "append", "(", "acc_otsu", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"inlier_entropy\"", "]", ".", "append", "(", "\n", "inlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"outlier_entropy\"", "]", ".", "append", "(", "\n", "outlier_entropy", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"inlier_outscore\"", "]", ".", "append", "(", "\n", "inlier_outscore", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"oulier_outscore\"", "]", ".", "append", "(", "\n", "oulier_outscore", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "probas_s", "=", "self", ".", "get_logits", "(", "\n", "support_labels", ",", "support_features", ",", "support_features", "\n", ")", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", "\n", "probas_q", "=", "self", ".", "get_logits", "(", "\n", "support_labels", ",", "support_features", ",", "query_features", "\n", ")", "[", ":", ",", ":", "-", "1", "]", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "", "return", "probas_s", ",", "probas_q", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.lame.LAME.entropy_energy": [[212, 223], ["torch.log", "torch.log", "torch.log", "torch.log", "Z.clip"], "methods", ["None"], ["", "def", "entropy_energy", "(", "self", ",", "Z", ",", "unary", ",", "pairwise", ")", ":", "\n", "        ", "\"\"\"\n        pairwise: [N, N]\n        Z: [N, K]\n        \"\"\"", "\n", "E", "=", "(", "\n", "-", "(", "Z", "*", "unary", ")", ".", "sum", "(", ")", "\n", "-", "self", ".", "lambda_kernel", "*", "(", "pairwise", "*", "(", "Z", "@", "Z", ".", "T", ")", ")", ".", "sum", "(", ")", "\n", "+", "self", ".", "lambda_ent", "*", "(", "Z", "*", "torch", ".", "log", "(", "Z", ".", "clip", "(", "1e-20", ")", ")", ")", ".", "sum", "(", ")", "\n", ")", "\n", "return", "E", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.simpleshot.SimpleShot.classify_support_and_queries": [[16, 35], ["easyfsl.utils.compute_prototypes", "simpleshot.SimpleShot.get_logits_from_cosine_distances_to_prototypes().softmax", "[].float().mean().item", "kwargs[].bool", "simpleshot.SimpleShot.get_logits_from_cosine_distances_to_prototypes().softmax", "simpleshot.SimpleShot.get_logits_from_cosine_distances_to_prototypes", "[].float().mean", "simpleshot.SimpleShot.get_logits_from_cosine_distances_to_prototypes", "[].float", "simpleshot.SimpleShot.argmax"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["def", "classify_support_and_queries", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "# print(support_features.size(), support_labels.size())", "\n", "        ", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "\n", "probs_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "query_features", ")", ".", "softmax", "(", "-", "1", ")", "\n", "inliers", "=", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "\n", "acc", "=", "(", "probs_q", ".", "argmax", "(", "-", "1", ")", "==", "kwargs", "[", "\"query_labels\"", "]", ")", "[", "inliers", "]", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "return", "(", "\n", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", ".", "softmax", "(", "-", "1", ")", ",", "\n", "probs_q", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.finetune.Finetune.__init__": [[17, 28], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["init", ":", "str", ",", "\n", "n_neighbors", ":", "int", ",", "\n", "optimizer_name", ":", "str", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "name", "=", "\"FinetuneDetector\"", "\n", "self", ".", "optimizer_name", "=", "optimizer_name", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.finetune.Finetune.classify_support_and_queries": [[29, 61], ["easyfsl.utils.compute_prototypes", "finetune.Finetune.prototypes.requires_grad_", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "finetune.Finetune.get_logits_from_cosine_distances_to_prototypes().softmax", "finetune.Finetune.get_logits_from_cosine_distances_to_prototypes().softmax", "finetune.Finetune.get_logits_from_cosine_distances_to_prototypes", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.functional.cross_entropy.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "finetune.Finetune.detach", "finetune.Finetune.detach", "finetune.Finetune.get_logits_from_cosine_distances_to_prototypes", "finetune.Finetune.get_logits_from_cosine_distances_to_prototypes"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n", "", "def", "compute_probas", "(", "self", ",", "feat_s", ",", "X", ",", "W", ")", ":", "\n", "        ", "assert", "W", ".", "size", "(", "0", ")", "==", "X", ".", "size", "(", "0", ")", "and", "W", ".", "size", "(", "1", ")", "==", "feat_s", ".", "size", "(", "0", ")", "\n", "similarities", "=", "(", "(", "X", "@", "feat_s", ".", "t", "(", ")", ")", "*", "W", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "W", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "# [N, 1]", "\n", "outlierness", "=", "(", "-", "self", ".", "lambda_", "*", "similarities", ")", ".", "sigmoid", "(", ")", "# [N, 1]", "\n", "return", "torch", ".", "cat", "(", "[", "outlierness", ",", "1", "-", "outlierness", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "loss_values", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "marg_entropy", "=", "[", "]", "\n", "diff_with_oracle", "=", "[", "]", "\n", "inlier_entropy", "=", "[", "]", "\n", "outlier_entropy", "=", "[", "]", "\n", "entropies", "=", "[", "]", "\n", "ces", "=", "[", "]", "\n", "kls", "=", "[", "]", "\n", "raw_feat_s", "=", "support_features", ".", "cuda", "(", ")", "\n", "raw_feat_q", "=", "query_features", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"zero\"", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros", "(", "1", ",", "raw_feat_s", ".", "size", "(", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.__init__": [[17, 23], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inference_steps", ",", "knn", ",", "lambda_", ",", "softmax_temperature", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "knn", "=", "knn", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.create_affinity": [[24, 35], ["sklearn.neighbors.NearestNeighbors().fit", "sklearn.neighbors.NearestNeighbors().fit.kneighbors", "numpy.repeat", "knnind[].flatten", "numpy.ones", "scipy.sparse.csc_matrix", "range", "sklearn.neighbors.NearestNeighbors"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.feature.alternate_detector.AlternateDetector.fit"], ["", "def", "create_affinity", "(", "self", ",", "X", ")", ":", "\n", "        ", "N", ",", "D", "=", "X", ".", "shape", "\n", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "self", ".", "knn", ")", ".", "fit", "(", "X", ")", "\n", "dist", ",", "knnind", "=", "nbrs", ".", "kneighbors", "(", "X", ")", "\n", "\n", "row", "=", "np", ".", "repeat", "(", "range", "(", "N", ")", ",", "self", ".", "knn", "-", "1", ")", "\n", "col", "=", "knnind", "[", ":", ",", "1", ":", "]", ".", "flatten", "(", ")", "\n", "data", "=", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", "*", "(", "self", ".", "knn", "-", "1", ")", ")", "\n", "W", "=", "sparse", ".", "csc_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.normalize": [[36, 58], ["numpy.max", "int", "range", "numpy.vstack", "numpy.exp", "math.ceil", "min", "numpy.exp", "numpy.exp.append", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "Y_in", ")", ":", "\n", "        ", "maxcol", "=", "np", ".", "max", "(", "Y_in", ",", "axis", "=", "1", ")", "\n", "Y_in", "=", "Y_in", "-", "maxcol", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "N", "=", "Y_in", ".", "shape", "[", "0", "]", "\n", "size_limit", "=", "150000", "\n", "if", "N", ">", "size_limit", ":", "\n", "            ", "batch_size", "=", "1280", "\n", "Y_out", "=", "[", "]", "\n", "num_batch", "=", "int", "(", "math", ".", "ceil", "(", "1.0", "*", "N", "/", "batch_size", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_batch", ")", ":", "\n", "                ", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "N", ")", "\n", "tmp", "=", "np", ".", "exp", "(", "Y_in", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "tmp", "=", "tmp", "/", "(", "np", ".", "sum", "(", "tmp", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", ")", "\n", "Y_out", ".", "append", "(", "tmp", ")", "\n", "", "del", "Y_in", "\n", "Y_out", "=", "np", ".", "vstack", "(", "Y_out", ")", "\n", "", "else", ":", "\n", "            ", "Y_out", "=", "np", ".", "exp", "(", "Y_in", ")", "\n", "Y_out", "=", "Y_out", "/", "(", "np", ".", "sum", "(", "Y_out", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "return", "Y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.entropy_energy": [[59, 83], ["kernel.dot", "int", "range", "math.ceil", "min", "numpy.log", "numpy.maximum", "numpy.log", "numpy.maximum"], "methods", ["None"], ["", "def", "entropy_energy", "(", "self", ",", "Y", ",", "unary", ",", "kernel", ",", "bound_lambda", ",", "batch", "=", "False", ")", ":", "\n", "        ", "tot_size", "=", "Y", ".", "shape", "[", "0", "]", "\n", "pairwise", "=", "kernel", ".", "dot", "(", "Y", ")", "\n", "if", "batch", "==", "False", ":", "\n", "            ", "temp", "=", "(", "unary", "*", "Y", ")", "+", "(", "-", "bound_lambda", "*", "pairwise", "*", "Y", ")", "\n", "E", "=", "(", "Y", "*", "np", ".", "log", "(", "np", ".", "maximum", "(", "Y", ",", "1e-20", ")", ")", "+", "temp", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "1024", "\n", "num_batch", "=", "int", "(", "math", ".", "ceil", "(", "1.0", "*", "tot_size", "/", "batch_size", ")", ")", "\n", "E", "=", "0", "\n", "for", "batch_idx", "in", "range", "(", "num_batch", ")", ":", "\n", "                ", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "tot_size", ")", "\n", "temp", "=", "(", "unary", "[", "start", ":", "end", "]", "*", "Y", "[", "start", ":", "end", "]", ")", "+", "(", "\n", "-", "bound_lambda", "*", "pairwise", "[", "start", ":", "end", "]", "*", "Y", "[", "start", ":", "end", "]", "\n", ")", "\n", "E", "=", "(", "\n", "E", "\n", "+", "(", "\n", "Y", "[", "start", ":", "end", "]", "*", "np", ".", "log", "(", "np", ".", "maximum", "(", "Y", "[", "start", ":", "end", "]", ",", "1e-20", ")", ")", "+", "temp", "\n", ")", ".", "sum", "(", ")", "\n", ")", "\n", "\n", "", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.bound_update": [[84, 101], ["float", "laplacian_shot.LaplacianShot.normalize", "range", "kernel.dot", "laplacian_shot.LaplacianShot.normalize", "laplacian_shot.LaplacianShot.entropy_energy", "laplacian_shot.LaplacianShot.copy", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.entropy_energy"], ["", "def", "bound_update", "(", "self", ",", "unary", ",", "kernel", ",", "batch", "=", "False", ")", ":", "\n", "        ", "oldE", "=", "float", "(", "\"inf\"", ")", "\n", "Y", "=", "self", ".", "normalize", "(", "-", "unary", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "            ", "additive", "=", "-", "unary", "\n", "mul_kernel", "=", "kernel", ".", "dot", "(", "Y", ")", "\n", "Y", "=", "-", "self", ".", "lambda_", "*", "mul_kernel", "\n", "additive", "=", "additive", "-", "Y", "\n", "Y", "=", "self", ".", "normalize", "(", "additive", ")", "\n", "E", "=", "self", ".", "entropy_energy", "(", "Y", ",", "unary", ",", "kernel", ",", "self", ".", "lambda_", ",", "batch", ")", "\n", "\n", "if", "i", ">", "1", "and", "(", "abs", "(", "E", "-", "oldE", ")", "<=", "1e-6", "*", "abs", "(", "oldE", ")", ")", ":", "\n", "                ", "break", "\n", "\n", "", "else", ":", "\n", "                ", "oldE", "=", "E", ".", "copy", "(", ")", "\n", "", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.forward": [[102, 126], ["bd_cspn.BDCSPN", "easyfsl.utils.compute_prototypes", "bd_cspn.BDCSPN.rectify_prototypes", "laplacian_shot.LaplacianShot.create_affinity", "laplacian_shot.LaplacianShot.bound_update", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "query_features.numpy", "unary.numpy"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.bd_cspn.BDCSPN.rectify_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.create_affinity", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.laplacian_shot.LaplacianShot.bound_update"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "# Perform normalizations required", "\n", "\n", "        ", "rectifier", "=", "BDCSPN", "(", "self", ".", "softmax_temperature", ")", "\n", "rectifier", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "support", "=", "rectifier", ".", "rectify_prototypes", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "\n", "unary", "=", "torch", ".", "cdist", "(", "query_features", ",", "support", ")", "**", "2", "\n", "W", "=", "self", ".", "create_affinity", "(", "query_features", ".", "numpy", "(", ")", ")", "\n", "probs_q", "=", "self", ".", "bound_update", "(", "unary", "=", "unary", ".", "numpy", "(", ")", ",", "kernel", "=", "W", ")", "\n", "probs_q", "=", "torch", ".", "from_numpy", "(", "probs_q", ")", "\n", "\n", "return", "None", ",", "probs_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.__init__": [[13, 29], ["abstract.FewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "lambda_", ":", "float", ",", "\n", "lr", ":", "float", ",", "\n", "n_iter", ":", "int", ",", "\n", "init", ":", "str", ",", "\n", "n_neighbors", ":", "int", ",", "\n", "optimizer_name", ":", "str", ",", "\n", "weight", "=", "1.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_", "=", "lambda_", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "n_neighbors", "=", "n_neighbors", "\n", "self", ".", "weight", "=", "weight", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes": [[30, 35], ["torch.normalize().permute", "torch.normalize().permute", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["self", ".", "name", "=", "\"AlternateDetector\"", "\n", "self", ".", "optimizer_name", "=", "optimizer_name", "\n", "\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n", "kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.forward": [[37, 183], ["support_features.clone().cuda", "unlabelled_data.clone().cuda", "support_labels.unique().size", "torch.one_hot().cuda", "torch.one_hot().cuda", "torch.cat().mean.requires_grad_", "torch.cat().mean.requires_grad_", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "support_features.cuda", "query_features.cuda", "kwargs[].bool().cuda", "support_labels.cuda", "kwargs[].cuda", "kwargs[].squeeze().cuda", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "repri.RePRI.softmax", "repri.RePRI.softmax.mean", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "loss.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax().mean().cpu", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax().mean().cpu", "support_features.clone", "unlabelled_data.clone", "support_labels.unique", "torch.one_hot", "torch.one_hot", "support_features.clone().cuda.unsqueeze", "unlabelled_data.clone().cuda.unsqueeze", "prots.append", "logits_q.softmax.mean.detach().clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "q_cond_ent_values.append", "q_ent_values.append", "ce_values.append", "acc_values.append", "inlier_entropy.append", "outlier_entropy.append", "aucs.append", "skimage.filters.threshold_otsu", "acc_otsu.append", "kwargs[].bool", "kwargs[].squeeze", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "easyfsl.utils.compute_prototypes", "q_cond_ent.mean().item", "div.mean().item", "ce.mean().item", "[].float().mean().item", "q_cond_ent[].mean().item", "q_cond_ent[].mean().item", "repri.RePRI.compute_auc", "q_cond_ent.mean().cpu().numpy", "q_cond_ent.mean", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax().mean", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax().mean", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "logits_q.softmax.mean.detach", "q_cond_ent.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "q_cond_ent.mean", "q_cond_ent.mean", "div.mean", "ce.mean", "[].float().mean", "q_cond_ent[].mean", "q_cond_ent[].mean", "q_cond_ent.mean().cpu", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes().softmax", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "support_features.clone().cuda.size", "repri.RePRI.log_softmax", "[].float", "q_cond_ent.mean", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "repri.RePRI.softmax.mean().argmax", "repri.RePRI.softmax.mean"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.repri.RePRI.get_logits_from_cosine_distances_to_prototypes"], ["return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n", "", "def", "compute_probas", "(", "self", ",", "feat_s", ",", "X", ",", "W", ")", ":", "\n", "        ", "assert", "W", ".", "size", "(", "0", ")", "==", "X", ".", "size", "(", "0", ")", "and", "W", ".", "size", "(", "1", ")", "==", "feat_s", ".", "size", "(", "0", ")", "\n", "similarities", "=", "(", "(", "X", "@", "feat_s", ".", "t", "(", ")", ")", "*", "W", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "W", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "# [N, 1]", "\n", "outlierness", "=", "(", "-", "self", ".", "lambda_", "*", "similarities", ")", ".", "sigmoid", "(", ")", "# [N, 1]", "\n", "return", "-", "self", ".", "lambda_", "*", "similarities", ",", "torch", ".", "cat", "(", "\n", "[", "outlierness", ",", "1", "-", "outlierness", "]", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "", "def", "do_iter", "(", "self", ",", "raw_feat_s", ",", "raw_feat_q", ",", "mu", ")", ":", "\n", "        ", "feat_s", "=", "F", ".", "normalize", "(", "raw_feat_s", "-", "mu", ",", "dim", "=", "1", ")", "\n", "feat_q", "=", "F", ".", "normalize", "(", "raw_feat_q", "-", "mu", ",", "dim", "=", "1", ")", "\n", "\n", "# Compute nearest-neighbor", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", "=", "torch", ".", "cdist", "(", "feat_q", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "\n", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", "\n", ")", ".", "indices", "# [N, knn]", "\n", "\n", "W_q", "=", "torch", ".", "zeros", "(", "feat_q", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_q", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "dist", "=", "torch", ".", "cdist", "(", "feat_s", ",", "feat_s", ")", "# [Nq, Ns]", "\n", "n_neighbors", "=", "min", "(", "self", ".", "n_neighbors", "+", "1", ",", "feat_s", ".", "size", "(", "0", ")", ")", "\n", "knn_index", "=", "dist", ".", "topk", "(", "n_neighbors", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ")", ".", "indices", "[", "\n", ":", ",", "1", ":", "\n", "]", "# [N, knn]", "\n", "\n", "W_s", "=", "torch", ".", "zeros", "(", "feat_s", ".", "size", "(", "0", ")", ",", "feat_s", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "\n", "W_s", ".", "scatter_", "(", "dim", "=", "-", "1", ",", "index", "=", "knn_index", ",", "value", "=", "1.0", ")", "# [Nq, Ns]", "\n", "\n", "# 2 --- Update mu", "\n", "", "logits_q", ",", "probas_q", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_q", ",", "W_q", ")", "\n", "logits_s", ",", "probas_s", "=", "self", ".", "compute_probas", "(", "feat_s", ",", "feat_s", ",", "W_s", ")", "\n", "\n", "return", "logits_s", ",", "probas_s", ",", "logits_q", ",", "probas_q", "\n", "\n", "", "def", "standardize", "(", "self", ",", "scores", ")", ":", "\n", "        ", "return", "scores", "\n", "\n", "", "def", "__call__", "(", "self", ",", "support_features", ",", "query_features", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "loss_values", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "marg_entropy", "=", "[", "]", "\n", "diff_with_oracle", "=", "[", "]", "\n", "inlier_inlierness", "=", "[", "]", "\n", "outlier_inlierness", "=", "[", "]", "\n", "entropies", "=", "[", "]", "\n", "pi_diff_with_oracle", "=", "[", "]", "\n", "ces", "=", "[", "]", "\n", "kls", "=", "[", "]", "\n", "raw_feat_s", "=", "support_features", ".", "cuda", "(", ")", "\n", "raw_feat_q", "=", "query_features", ".", "cuda", "(", ")", "\n", "\n", "if", "self", ".", "init", "==", "\"base\"", ":", "\n", "            ", "mu", "=", "kwargs", "[", "\"train_mean\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"zero\"", ":", "\n", "            ", "mu", "=", "torch", ".", "zeros", "(", "1", ",", "raw_feat_s", ".", "size", "(", "-", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "elif", "self", ".", "init", "==", "\"mean\"", ":", "\n", "            ", "mu", "=", "torch", ".", "cat", "(", "[", "raw_feat_s", ",", "raw_feat_q", "]", ",", "0", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "mu", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "eval", "(", "f\"torch.optim.{self.optimizer_name}([mu], lr=self.lr)\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# mu_init = torch.cat([raw_feat_s, raw_feat_q], 0).mean(0, keepdim=True)", "\n", "                    ", "mu_init", "=", "mu", "\n", "_", ",", "_", ",", "logits_q", ",", "_", "=", "self", ".", "do_iter", "(", "raw_feat_s", ",", "raw_feat_q", ",", "mu_init", ")", "\n", "thresh", "=", "threshold_otsu", "(", "logits_q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pi", "=", "(", "logits_q", ">", "thresh", ")", ".", "sum", "(", ")", "/", "logits_q", ".", "size", "(", "0", ")", "\n", "prior_prob", "=", "torch", ".", "Tensor", "(", "[", "pi", ",", "1", "-", "pi", "]", ")", ".", "cuda", "(", ")", "\n", "# logger.warning(f\"Threshold found {thresh:.2f}. Prior found {pi:.2f}\")", "\n", "\n", "", "", "_", ",", "probas_s", ",", "logits_q", ",", "probas_q", "=", "self", ".", "do_iter", "(", "raw_feat_s", ",", "raw_feat_q", ",", "mu", ")", "\n", "ce", "=", "-", "torch", ".", "log", "(", "probas_s", "[", ":", ",", "1", "]", ")", "\n", "entropy", "=", "-", "(", "probas_q", "*", "torch", ".", "log", "(", "probas_q", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "# kl = kl_div(probas_q.mean(0) - prior_prob)", "\n", "kl", "=", "probas_q", ".", "mean", "(", "0", ")", "[", "0", "]", "-", "prior_prob", "[", "0", "]", "\n", "\n", "loss", "=", "ce", ".", "mean", "(", ")", "+", "entropy", ".", "mean", "(", ")", "+", "self", ".", "weight", "*", "kl", "\n", "# loss = kl", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# scheduler.step()", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loss_values", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "kls", ".", "append", "(", "kl", ".", "item", "(", ")", ")", "\n", "marg_entropy", ".", "append", "(", "\n", "-", "(", "probas_q", ".", "mean", "(", "0", ")", "*", "torch", ".", "log", "(", "probas_q", ".", "mean", "(", "0", ")", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "probas_q", ".", "mean", "(", "0", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "pi_diff_with_oracle", ".", "append", "(", "\n", "abs", "(", "\n", "pi", ".", "item", "(", ")", "\n", "-", "(", "kwargs", "[", "\"outliers\"", "]", ".", "sum", "(", ")", "/", "kwargs", "[", "\"outliers\"", "]", ".", "size", "(", "0", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", ")", "\n", "outlier_inlierness", ".", "append", "(", "\n", "probas_q", "[", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "entropies", ".", "append", "(", "entropy", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "inlier_inlierness", ".", "append", "(", "\n", "probas_q", "[", "~", "kwargs", "[", "\"outliers\"", "]", ".", "bool", "(", ")", "]", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "ces", ".", "append", "(", "ce", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "aucs", ".", "append", "(", "self", ".", "compute_auc", "(", "logits_q", ",", "**", "kwargs", ")", ")", "\n", "", "", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"ce\"", "]", ".", "append", "(", "ces", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"kl\"", "]", ".", "append", "(", "kls", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_losses\"", "]", "[", "\"entropy\"", "]", ".", "append", "(", "entropies", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"inlier_inlierness\"", "]", ".", "append", "(", "\n", "inlier_inlierness", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_loss\"", "]", "[", "\"outlier_inlierness\"", "]", ".", "append", "(", "\n", "outlier_inlierness", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"main_metrics\"", "]", "[", "\"auc\"", "]", ".", "append", "(", "aucs", ")", "\n", "# kwargs['intra_task_metrics']['secondary_metrics']['marg_entropy'].append(marg_entropy)", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"marg_diff_oracle\"", "]", ".", "append", "(", "\n", "diff_with_oracle", "\n", ")", "\n", "kwargs", "[", "\"intra_task_metrics\"", "]", "[", "\"secondary_metrics\"", "]", "[", "\"pi_diff_oracle\"", "]", ".", "append", "(", "\n", "pi_diff_with_oracle", "\n", ")", "\n", "return", "logits_q", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "\n", "", "", "def", "kl_div", "(", "pa", ",", "pb", ")", ":", "\n", "    ", "return", "(", "pa", "*", "torch", ".", "log", "(", "pa", "/", "pb", "+", "1e-10", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.Attention.__init__": [[275, 286], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "attn_drop", "=", "0.0", ",", "proj_drop", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "\"dim should be divisible by num_heads\"", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.Attention.forward": [[287, 304], ["visiontransformer.Attention.qkv().reshape().permute", "visiontransformer.Attention.unbind", "visiontransformer.Attention.softmax", "visiontransformer.Attention.attn_drop", "visiontransformer.Attention.proj", "visiontransformer.Attention.proj_drop", "visiontransformer.Attention.qkv().reshape", "k.transpose", "visiontransformer.Attention.qkv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "(", "\n", "self", ".", "qkv", "(", "x", ")", "\n", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", "\n", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", ".", "unbind", "(", "0", ")", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.Block.__init__": [[307, 337], ["torch.Module.__init__", "norm_layer", "visiontransformer.Attention", "norm_layer", "int", "timm.models.layers.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "num_heads", ",", "\n", "mlp_ratio", "=", "4.0", ",", "\n", "qkv_bias", "=", "False", ",", "\n", "drop", "=", "0.0", ",", "\n", "attn_drop", "=", "0.0", ",", "\n", "drop_path", "=", "0.0", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "proj_drop", "=", "drop", ",", "\n", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "\n", "in_features", "=", "dim", ",", "\n", "hidden_features", "=", "mlp_hidden_dim", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "drop", "=", "drop", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.Block.forward": [[339, 343], ["visiontransformer.Block.drop_path", "visiontransformer.Block.drop_path", "visiontransformer.Block.attn", "visiontransformer.Block.mlp", "visiontransformer.Block.norm1", "visiontransformer.Block.norm2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.__init__": [[353, 469], ["torch.Module.__init__", "embed_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "visiontransformer.VisionTransformer.init_weights", "functools.partial", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "visiontransformer.Block", "collections.OrderedDict", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.init_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "img_size", "=", "224", ",", "\n", "patch_size", "=", "16", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "embed_dim", "=", "768", ",", "\n", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "\n", "mlp_ratio", "=", "4.0", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "representation_size", "=", "None", ",", "\n", "distilled", "=", "False", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "attn_drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.0", ",", "\n", "embed_layer", "=", "PatchEmbed", ",", "\n", "norm_layer", "=", "None", ",", "\n", "act_layer", "=", "None", ",", "\n", "weight_init", "=", "\"\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img_size (int, tuple): input image size\n            patch_size (int, tuple): patch size\n            in_chans (int): number of input channels\n            num_classes (int): number of classes for classification head\n            embed_dim (int): embedding dimension\n            depth (int): depth of transformer\n            num_heads (int): number of attention heads\n            mlp_ratio (int): ratio of mlp hidden dim to embedding dim\n            qkv_bias (bool): enable bias for qkv if True\n            representation_size (Optional[int]): enable and set representation layer (pre-logits) to this value if set\n            distilled (bool): model includes a distillation token and head as in DeiT models\n            drop_rate (float): dropout rate\n            attn_drop_rate (float): attention dropout rate\n            drop_path_rate (float): stochastic depth rate\n            embed_layer (nn.Module): patch embedding layer\n            norm_layer: (nn.Module): normalization layer\n            weight_init: (str): weight init scheme\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "(", "\n", "self", ".", "embed_dim", "\n", ")", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "num_tokens", "=", "2", "if", "distilled", "else", "1", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "\n", "self", ".", "patch_embed", "=", "embed_layer", "(", "\n", "img_size", "=", "img_size", ",", "\n", "patch_size", "=", "patch_size", ",", "\n", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dim", ",", "\n", ")", "\n", "num_patches", "=", "self", ".", "patch_embed", ".", "num_patches", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "dist_token", "=", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "if", "distilled", "else", "None", "\n", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "self", ".", "num_tokens", ",", "embed_dim", ")", "\n", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "\n", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "\n", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "i", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "\n", "]", "\n", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "\n", "# Representation layer", "\n", "if", "representation_size", "and", "not", "distilled", ":", "\n", "            ", "self", ".", "num_features", "=", "representation_size", "\n", "self", ".", "pre_logits", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "(", "\"fc\"", ",", "nn", ".", "Linear", "(", "embed_dim", ",", "representation_size", ")", ")", ",", "\n", "(", "\"act\"", ",", "nn", ".", "Tanh", "(", ")", ")", ",", "\n", "]", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pre_logits", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "# Classifier head(s)", "\n", "", "self", ".", "head", "=", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "\n", "if", "num_classes", ">", "0", "\n", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "self", ".", "head_dist", "=", "None", "\n", "if", "distilled", ":", "\n", "            ", "self", ".", "head_dist", "=", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "\n", "if", "num_classes", ">", "0", "\n", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "", "self", ".", "init_weights", "(", "weight_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.init_weights": [[470, 484], ["timm.models.layers.trunc_normal_", "mode.startswith", "timm.models.layers.trunc_normal_", "timm.models.helpers.named_apply", "timm.models.layers.trunc_normal_", "visiontransformer.VisionTransformer.apply", "math.log", "functools.partial"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "mode", "=", "\"\"", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "\"jax\"", ",", "\"jax_nlhb\"", ",", "\"nlhb\"", ",", "\"\"", ")", "\n", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "\"nlhb\"", "in", "mode", "else", "0.0", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", "0.02", ")", "\n", "if", "self", ".", "dist_token", "is", "not", "None", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "dist_token", ",", "std", "=", "0.02", ")", "\n", "", "if", "mode", ".", "startswith", "(", "\"jax\"", ")", ":", "\n", "# leave cls token as zeros to match jax impl", "\n", "            ", "named_apply", "(", "\n", "partial", "(", "_init_vit_weights", ",", "head_bias", "=", "head_bias", ",", "jax_impl", "=", "True", ")", ",", "self", "\n", ")", "\n", "", "else", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", "0.02", ")", "\n", "self", ".", "apply", "(", "_init_vit_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer._init_weights": [[485, 488], ["visiontransformer._init_vit_weights"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._init_vit_weights"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "# this fn left here for compat with downstream users", "\n", "        ", "_init_vit_weights", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.load_pretrained": [[489, 492], ["torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "torch.jit.ignore", "visiontransformer._load_weights"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._load_weights"], ["", "@", "torch", ".", "jit", ".", "ignore", "(", ")", "\n", "def", "load_pretrained", "(", "self", ",", "checkpoint_path", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "_load_weights", "(", "self", ",", "checkpoint_path", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.no_weight_decay": [[493, 496], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"pos_embed\"", ",", "\"cls_token\"", ",", "\"dist_token\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.get_classifier": [[497, 502], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "return", "self", ".", "head", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "head", ",", "self", ".", "head_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.reset_classifier": [[503, 513], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "if", "self", ".", "num_tokens", "==", "2", ":", "\n", "            ", "self", ".", "head_dist", "=", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "num_classes", ")", "\n", "if", "num_classes", ">", "0", "\n", "else", "nn", ".", "Identity", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.VisionTransformer.forward": [[515, 535], ["visiontransformer.VisionTransformer.patch_embed", "visiontransformer.VisionTransformer.cls_token.expand", "visiontransformer.VisionTransformer.pos_drop", "enumerate", "visiontransformer.VisionTransformer.norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block", "visiontransformer.VisionTransformer.dist_token.expand"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "cls_token", "=", "self", ".", "cls_token", ".", "expand", "(", "\n", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", "\n", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "if", "self", ".", "dist_token", "is", "None", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "cls_token", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "\n", "(", "cls_token", ",", "self", ".", "dist_token", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ",", "x", ")", ",", "dim", "=", "1", "\n", ")", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", "+", "self", ".", "pos_embed", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "# [b, seq_length, d]", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "# all_layers[\"last_map\"] = x[:, 1:].mean(dim=1)  # b,d", "\n", "# all_layers[\"last_cls\"] = x[:, 0]  # b,d", "\n", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._cfg": [[40, 54], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "\"url\"", ":", "url", ",", "\n", "\"num_classes\"", ":", "1000", ",", "\n", "\"input_size\"", ":", "(", "3", ",", "224", ",", "224", ")", ",", "\n", "\"pool_size\"", ":", "None", ",", "\n", "\"crop_pct\"", ":", "0.9", ",", "\n", "\"interpolation\"", ":", "\"bicubic\"", ",", "\n", "\"fixed_input_size\"", ":", "True", ",", "\n", "\"mean\"", ":", "IMAGENET_INCEPTION_MEAN", ",", "\n", "\"std\"", ":", "IMAGENET_INCEPTION_STD", ",", "\n", "\"first_conv\"", ":", "\"patch_embed.proj\"", ",", "\n", "\"classifier\"", ":", "\"head\"", ",", "\n", "**", "kwargs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._init_vit_weights": [[536, 571], ["isinstance", "name.startswith", "torch.init.zeros_", "torch.init.constant_", "name.startswith", "isinstance", "timm.models.layers.lecun_normal_", "isinstance", "timm.models.layers.lecun_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.ones_", "torch.init.xavier_uniform_", "timm.models.layers.trunc_normal_", "torch.init.zeros_", "torch.init.normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "_init_vit_weights", "(", "\n", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", "=", "\"\"", ",", "head_bias", ":", "float", "=", "0.0", ",", "jax_impl", ":", "bool", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"ViT weight initialization\n    * When called without n, head_bias, jax_impl args it will behave exactly the same\n      as my original init for compatibility with prev hparam / downstream use cases (ie DeiT).\n    * When called w/ valid n (module name) and jax_impl=True, will (hopefully) match JAX impl\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"head\"", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "head_bias", ")", "\n", "", "elif", "name", ".", "startswith", "(", "\"pre_logits\"", ")", ":", "\n", "            ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "jax_impl", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "\"mlp\"", "in", "name", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "else", ":", "\n", "                ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "", "elif", "jax_impl", "and", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# NOTE conv was left to pytorch default in my original init", "\n", "        ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "LayerNorm", ",", "nn", ".", "GroupNorm", ",", "nn", ".", "BatchNorm2d", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._load_weights": [[573, 691], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "np.load", "hasattr", "model.patch_embed.proj.weight.copy_", "model.patch_embed.proj.bias.copy_", "model.cls_token.copy_", "visiontransformer._load_weights._n2p"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_load_weights", "(", "model", ":", "VisionTransformer", ",", "checkpoint_path", ":", "str", ",", "prefix", ":", "str", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Load weights from .npz checkpoints for official Google Brain Flax implementation\"\"\"", "\n", "import", "numpy", "as", "np", "\n", "\n", "def", "_n2p", "(", "w", ",", "t", "=", "True", ")", ":", "\n", "        ", "if", "w", ".", "ndim", "==", "4", "and", "w", ".", "shape", "[", "0", "]", "==", "w", ".", "shape", "[", "1", "]", "==", "w", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "flatten", "(", ")", "\n", "", "if", "t", ":", "\n", "            ", "if", "w", ".", "ndim", "==", "4", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "3", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "elif", "w", ".", "ndim", "==", "2", ":", "\n", "                ", "w", "=", "w", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "w", ")", "\n", "\n", "", "w", "=", "np", ".", "load", "(", "checkpoint_path", ")", "\n", "if", "not", "prefix", "and", "\"opt/target/embedding/kernel\"", "in", "w", ":", "\n", "        ", "prefix", "=", "\"opt/target/\"", "\n", "\n", "", "if", "hasattr", "(", "model", ".", "patch_embed", ",", "\"backbone\"", ")", ":", "\n", "# hybrid", "\n", "        ", "backbone", "=", "model", ".", "patch_embed", ".", "backbone", "\n", "stem_only", "=", "not", "hasattr", "(", "backbone", ",", "\"stem\"", ")", "\n", "stem", "=", "backbone", "if", "stem_only", "else", "backbone", ".", "stem", "\n", "stem", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "adapt_input_conv", "(", "\n", "stem", ".", "conv", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f\"{prefix}conv_root/kernel\"", "]", ")", "\n", ")", "\n", ")", "\n", "stem", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}gn_root/scale\"", "]", ")", ")", "\n", "stem", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}gn_root/bias\"", "]", ")", ")", "\n", "if", "not", "stem_only", ":", "\n", "            ", "for", "i", ",", "stage", "in", "enumerate", "(", "backbone", ".", "stages", ")", ":", "\n", "                ", "for", "j", ",", "block", "in", "enumerate", "(", "stage", ".", "blocks", ")", ":", "\n", "                    ", "bp", "=", "f\"{prefix}block{i + 1}/unit{j + 1}/\"", "\n", "for", "r", "in", "range", "(", "3", ")", ":", "\n", "                        ", "getattr", "(", "block", ",", "f\"conv{r + 1}\"", ")", ".", "weight", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{bp}conv{r + 1}/kernel\"", "]", ")", "\n", ")", "\n", "getattr", "(", "block", ",", "f\"norm{r + 1}\"", ")", ".", "weight", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{bp}gn{r + 1}/scale\"", "]", ")", "\n", ")", "\n", "getattr", "(", "block", ",", "f\"norm{r + 1}\"", ")", ".", "bias", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{bp}gn{r + 1}/bias\"", "]", ")", "\n", ")", "\n", "", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "                        ", "block", ".", "downsample", ".", "conv", ".", "weight", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{bp}conv_proj/kernel\"", "]", ")", "\n", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "weight", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{bp}gn_proj/scale\"", "]", ")", "\n", ")", "\n", "block", ".", "downsample", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{bp}gn_proj/bias\"", "]", ")", ")", "\n", "", "", "", "", "embed_conv_w", "=", "_n2p", "(", "w", "[", "f\"{prefix}embedding/kernel\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "embed_conv_w", "=", "adapt_input_conv", "(", "\n", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "[", "1", "]", ",", "_n2p", "(", "w", "[", "f\"{prefix}embedding/kernel\"", "]", ")", "\n", ")", "\n", "", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "copy_", "(", "embed_conv_w", ")", "\n", "model", ".", "patch_embed", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}embedding/bias\"", "]", ")", ")", "\n", "model", ".", "cls_token", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}cls\"", "]", ",", "t", "=", "False", ")", ")", "\n", "pos_embed_w", "=", "_n2p", "(", "w", "[", "f\"{prefix}Transformer/posembed_input/pos_embedding\"", "]", ",", "t", "=", "False", ")", "\n", "if", "pos_embed_w", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "        ", "pos_embed_w", "=", "resize_pos_embed", "(", "# resize pos embedding when different size from pretrained weights", "\n", "pos_embed_w", ",", "\n", "model", ".", "pos_embed", ",", "\n", "getattr", "(", "model", ",", "\"num_tokens\"", ",", "1", ")", ",", "\n", "model", ".", "patch_embed", ".", "grid_size", ",", "\n", ")", "\n", "", "model", ".", "pos_embed", ".", "copy_", "(", "pos_embed_w", ")", "\n", "model", ".", "norm", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}Transformer/encoder_norm/scale\"", "]", ")", ")", "\n", "model", ".", "norm", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}Transformer/encoder_norm/bias\"", "]", ")", ")", "\n", "if", "(", "\n", "isinstance", "(", "model", ".", "head", ",", "nn", ".", "Linear", ")", "\n", "and", "model", ".", "head", ".", "bias", ".", "shape", "[", "0", "]", "==", "w", "[", "f\"{prefix}head/bias\"", "]", ".", "shape", "[", "-", "1", "]", "\n", ")", ":", "\n", "        ", "model", ".", "head", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}head/kernel\"", "]", ")", ")", "\n", "model", ".", "head", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}head/bias\"", "]", ")", ")", "\n", "", "if", "(", "\n", "isinstance", "(", "getattr", "(", "model", ".", "pre_logits", ",", "\"fc\"", ",", "None", ")", ",", "nn", ".", "Linear", ")", "\n", "and", "f\"{prefix}pre_logits/bias\"", "in", "w", "\n", ")", ":", "\n", "        ", "model", ".", "pre_logits", ".", "fc", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}pre_logits/kernel\"", "]", ")", ")", "\n", "model", ".", "pre_logits", ".", "fc", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{prefix}pre_logits/bias\"", "]", ")", ")", "\n", "", "for", "i", ",", "block", "in", "enumerate", "(", "model", ".", "blocks", ".", "children", "(", ")", ")", ":", "\n", "        ", "block_prefix", "=", "f\"{prefix}Transformer/encoderblock_{i}/\"", "\n", "mha_prefix", "=", "block_prefix", "+", "\"MultiHeadDotProductAttention_1/\"", "\n", "block", ".", "norm1", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{block_prefix}LayerNorm_0/scale\"", "]", ")", ")", "\n", "block", ".", "norm1", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{block_prefix}LayerNorm_0/bias\"", "]", ")", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "weight", ".", "copy_", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "\n", "_n2p", "(", "w", "[", "f\"{mha_prefix}{n}/kernel\"", "]", ",", "t", "=", "False", ")", ".", "flatten", "(", "1", ")", ".", "T", "\n", "for", "n", "in", "(", "\"query\"", ",", "\"key\"", ",", "\"value\"", ")", "\n", "]", "\n", ")", "\n", ")", "\n", "block", ".", "attn", ".", "qkv", ".", "bias", ".", "copy_", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "\n", "_n2p", "(", "w", "[", "f\"{mha_prefix}{n}/bias\"", "]", ",", "t", "=", "False", ")", ".", "reshape", "(", "-", "1", ")", "\n", "for", "n", "in", "(", "\"query\"", ",", "\"key\"", ",", "\"value\"", ")", "\n", "]", "\n", ")", "\n", ")", "\n", "block", ".", "attn", ".", "proj", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{mha_prefix}out/kernel\"", "]", ")", ".", "flatten", "(", "1", ")", ")", "\n", "block", ".", "attn", ".", "proj", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{mha_prefix}out/bias\"", "]", ")", ")", "\n", "for", "r", "in", "range", "(", "2", ")", ":", "\n", "            ", "getattr", "(", "block", ".", "mlp", ",", "f\"fc{r + 1}\"", ")", ".", "weight", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{block_prefix}MlpBlock_3/Dense_{r}/kernel\"", "]", ")", "\n", ")", "\n", "getattr", "(", "block", ".", "mlp", ",", "f\"fc{r + 1}\"", ")", ".", "bias", ".", "copy_", "(", "\n", "_n2p", "(", "w", "[", "f\"{block_prefix}MlpBlock_3/Dense_{r}/bias\"", "]", ")", "\n", ")", "\n", "", "block", ".", "norm2", ".", "weight", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{block_prefix}LayerNorm_2/scale\"", "]", ")", ")", "\n", "block", ".", "norm2", ".", "bias", ".", "copy_", "(", "_n2p", "(", "w", "[", "f\"{block_prefix}LayerNorm_2/bias\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.resize_pos_embed": [[693, 715], ["_logger.info", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "len", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute", "int", "math.sqrt"], "function", ["None"], ["", "", "def", "resize_pos_embed", "(", "posemb", ",", "posemb_new", ",", "num_tokens", "=", "1", ",", "gs_new", "=", "(", ")", ")", ":", "\n", "# Rescale the grid of position embeddings when loading from state_dict. Adapted from", "\n", "# https://github.com/google-research/vision_transformer/blob/00883dd691c63a6830751563748663526e811cee/vit_jax/checkpoint.py#L224", "\n", "    ", "_logger", ".", "info", "(", "\"Resized position embedding: %s to %s\"", ",", "posemb", ".", "shape", ",", "posemb_new", ".", "shape", ")", "\n", "ntok_new", "=", "posemb_new", ".", "shape", "[", "1", "]", "\n", "if", "num_tokens", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "num_tokens", "]", ",", "posemb", "[", "0", ",", "num_tokens", ":", "]", "\n", "ntok_new", "-=", "num_tokens", "\n", "", "else", ":", "\n", "        ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "if", "not", "len", "(", "gs_new", ")", ":", "# backwards compatibility", "\n", "        ", "gs_new", "=", "[", "int", "(", "math", ".", "sqrt", "(", "ntok_new", ")", ")", "]", "*", "2", "\n", "", "assert", "len", "(", "gs_new", ")", ">=", "2", "\n", "_logger", ".", "info", "(", "\"Position embedding grid-size from %s to %s\"", ",", "[", "gs_old", ",", "gs_old", "]", ",", "gs_new", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "\n", "posemb_grid", ",", "size", "=", "gs_new", ",", "mode", "=", "\"bicubic\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_new", "[", "0", "]", "*", "gs_new", "[", "1", "]", ",", "-", "1", ")", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.checkpoint_filter_fn": [[717, 738], ["state_dict.items", "resize_pos_embed.reshape", "len", "visiontransformer.resize_pos_embed", "getattr"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.resize_pos_embed"], ["", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\"convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "if", "\"model\"", "in", "state_dict", ":", "\n", "# For deit models", "\n", "        ", "state_dict", "=", "state_dict", "[", "\"model\"", "]", "\n", "", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "\"patch_embed.proj.weight\"", "in", "k", "and", "len", "(", "v", ".", "shape", ")", "<", "4", ":", "\n", "# For old models that I trained prior to conv based patchification", "\n", "            ", "O", ",", "I", ",", "H", ",", "W", "=", "model", ".", "patch_embed", ".", "proj", ".", "weight", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "O", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "", "elif", "k", "==", "\"pos_embed\"", "and", "v", ".", "shape", "!=", "model", ".", "pos_embed", ".", "shape", ":", "\n", "# To resize pos embedding when using model at different size from pretrained weights", "\n", "            ", "v", "=", "resize_pos_embed", "(", "\n", "v", ",", "\n", "model", ".", "pos_embed", ",", "\n", "getattr", "(", "model", ",", "\"num_tokens\"", ",", "1", ")", ",", "\n", "model", ".", "patch_embed", ".", "grid_size", ",", "\n", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer": [[740, 768], ["kwargs.get", "kwargs.get", "kwargs.pop", "timm.models.helpers.build_model_with_cfg", "RuntimeError", "_logger.warning"], "function", ["None"], ["", "def", "_create_vision_transformer", "(", "variant", ",", "pretrained", "=", "False", ",", "default_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "default_cfg", "=", "default_cfg", "or", "default_cfgs", "[", "variant", "]", "\n", "if", "kwargs", ".", "get", "(", "\"features_only\"", ",", "None", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"features_only not implemented for Vision Transformer models.\"", "\n", ")", "\n", "\n", "# NOTE this extra code to support handling of repr size for in21k pretrained models", "\n", "", "default_num_classes", "=", "default_cfg", "[", "\"num_classes\"", "]", "\n", "num_classes", "=", "kwargs", ".", "get", "(", "\"num_classes\"", ",", "default_num_classes", ")", "\n", "repr_size", "=", "kwargs", ".", "pop", "(", "\"representation_size\"", ",", "None", ")", "\n", "if", "repr_size", "is", "not", "None", "and", "num_classes", "!=", "default_num_classes", ":", "\n", "# Remove representation layer if fine-tuning. This may not always be the desired action,", "\n", "# but I feel better than doing nothing by default for fine-tuning. Perhaps a better interface?", "\n", "        ", "_logger", ".", "warning", "(", "\"Removing representation layer for fine-tuning.\"", ")", "\n", "repr_size", "=", "None", "\n", "\n", "", "model", "=", "build_model_with_cfg", "(", "\n", "VisionTransformer", ",", "\n", "variant", ",", "\n", "pretrained", ",", "\n", "default_cfg", ",", "\n", "representation_size", "=", "repr_size", ",", "\n", "pretrained_filter_fn", "=", "checkpoint_filter_fn", ",", "\n", "pretrained_custom_load", "=", "\"npz\"", "in", "default_cfg", "[", "\"url\"", "]", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_tiny_patch16_224": [[770, 777], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_tiny_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Tiny (Vit-Ti/16)\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_tiny_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_tiny_patch16_384": [[779, 786], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_tiny_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Tiny (Vit-Ti/16) @ 384x384.\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_tiny_patch16_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch32_224": [[788, 795], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/32)\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch32_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch32_384": [[797, 804], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/32) at 384x384.\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch32_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch16_224": [[806, 815], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/16)\n    NOTE I've replaced my previous 'small' model definition and weights with the small variant from the DeiT paper\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch16_384": [[817, 826], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/16)\n    NOTE I've replaced my previous 'small' model definition and weights with the small variant from the DeiT paper\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch16_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch32_224": [[828, 837], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch32_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base2_patch32_256": [[839, 848], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base2_patch32_256", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/32)\n    # FIXME experiment\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "896", ",", "depth", "=", "12", ",", "num_heads", "=", "14", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base2_patch32_256\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch32_384": [[850, 859], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base model (ViT-B/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 384x384, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch32_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224": [[861, 870], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 224x224, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_384": [[872, 881], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base model (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 384x384, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch8_224": [[883, 892], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch8_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/8) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 224x224, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "8", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch8_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch32_224": [[894, 901], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/32) from original paper (https://arxiv.org/abs/2010.11929). No pretrained weights.\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch32_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch32_384": [[903, 912], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch32_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 384x384, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch32_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch16_224": [[914, 923], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 224x224, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch16_384": [[925, 934], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-1k weights fine-tuned from in21k @ 384x384, source https://github.com/google-research/vision_transformer.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch16_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_huge_patch14_224": [[936, 943], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_huge_patch14_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Huge model (ViT-H/14) from original paper (https://arxiv.org/abs/2010.11929).\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "14", ",", "embed_dim", "=", "1280", ",", "depth", "=", "32", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_huge_patch14_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_giant_patch14_224": [[945, 959], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_giant_patch14_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Giant model (ViT-g/14) from `Scaling Vision Transformers` - https://arxiv.org/abs/2106.04560\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "14", ",", "\n", "embed_dim", "=", "1408", ",", "\n", "mlp_ratio", "=", "48", "/", "11", ",", "\n", "depth", "=", "40", ",", "\n", "num_heads", "=", "16", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_giant_patch14_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_gigantic_patch14_224": [[961, 975], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_gigantic_patch14_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Gigantic model (ViT-G/14) from `Scaling Vision Transformers` - https://arxiv.org/abs/2106.04560\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "14", ",", "\n", "embed_dim", "=", "1664", ",", "\n", "mlp_ratio", "=", "64", "/", "13", ",", "\n", "depth", "=", "48", ",", "\n", "num_heads", "=", "16", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_gigantic_patch14_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_tiny_patch16_224_in21k": [[977, 987], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_tiny_patch16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Tiny (Vit-Ti/16).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_tiny_patch16_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch32_224_in21k": [[989, 999], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch32_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/16)\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch32_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch16_224_in21k": [[1001, 1011], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/16)\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch16_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch32_224_in21k": [[1013, 1023], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch32_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base model (ViT-B/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch32_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224_in21k": [[1025, 1035], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base model (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch8_224_in21k": [[1037, 1047], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch8_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base model (ViT-B/8) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "8", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch8_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch32_224_in21k": [[1049, 1066], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch32_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/32) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has a representation layer but the 21k classifier head is zero'd out in original weights\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "32", ",", "\n", "embed_dim", "=", "1024", ",", "\n", "depth", "=", "24", ",", "\n", "num_heads", "=", "16", ",", "\n", "representation_size", "=", "1024", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch32_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_large_patch16_224_in21k": [[1068, 1078], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_large_patch16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Large model (ViT-L/16) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has valid 21k classifier head and no representation (pre-logits) layer\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "1024", ",", "depth", "=", "24", ",", "num_heads", "=", "16", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_large_patch16_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_huge_patch14_224_in21k": [[1080, 1097], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_huge_patch14_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Huge model (ViT-H/14) from original paper (https://arxiv.org/abs/2010.11929).\n    ImageNet-21k weights @ 224x224, source https://github.com/google-research/vision_transformer.\n    NOTE: this model has a representation layer but the 21k classifier head is zero'd out in original weights\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "14", ",", "\n", "embed_dim", "=", "1280", ",", "\n", "depth", "=", "32", ",", "\n", "num_heads", "=", "16", ",", "\n", "representation_size", "=", "1280", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_huge_patch14_224_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224_sam": [[1099, 1107], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224_sam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/16) w/ SAM pretrained weights. Paper: https://arxiv.org/abs/2106.01548\"\"\"", "\n", "# NOTE original SAM weights release worked with representation_size=768", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224_sam\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch32_224_sam": [[1109, 1117], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch32_224_sam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/32) w/ SAM pretrained weights. Paper: https://arxiv.org/abs/2106.01548\"\"\"", "\n", "# NOTE original SAM weights release worked with representation_size=768", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "32", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch32_224_sam\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch16_224_dino": [[1119, 1126], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch16_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/16) w/ DINO pretrained weights (no head) - https://arxiv.org/abs/2104.14294\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch16_224_dino\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_small_patch8_224_dino": [[1128, 1135], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_small_patch8_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Small (ViT-S/8) w/ DINO pretrained weights (no head) - https://arxiv.org/abs/2104.14294\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "8", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_small_patch8_224_dino\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224_dino": [[1137, 1144], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/16) /w DINO pretrained weights (no head) - https://arxiv.org/abs/2104.14294\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224_dino\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch8_224_dino": [[1146, 1153], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch8_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/8) w/ DINO pretrained weights (no head) - https://arxiv.org/abs/2104.14294\"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "8", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch8_224_dino\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_tiny_patch16_224": [[1155, 1164], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_tiny_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-tiny model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_tiny_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_small_patch16_224": [[1166, 1175], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_small_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-small model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_small_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_base_patch16_224": [[1177, 1186], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_base_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT base model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_base_patch16_224\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_base_patch16_384": [[1188, 1197], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_base_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT base model @ 384x384 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_base_patch16_384\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_tiny_distilled_patch16_224": [[1199, 1211], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_tiny_distilled_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-tiny distilled model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "192", ",", "depth", "=", "12", ",", "num_heads", "=", "3", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_tiny_distilled_patch16_224\"", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "distilled", "=", "True", ",", "\n", "**", "model_kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_small_distilled_patch16_224": [[1213, 1225], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_small_distilled_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-small distilled model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "384", ",", "depth", "=", "12", ",", "num_heads", "=", "6", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_small_distilled_patch16_224\"", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "distilled", "=", "True", ",", "\n", "**", "model_kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_base_distilled_patch16_224": [[1227, 1239], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_base_distilled_patch16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-base distilled model @ 224x224 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_base_distilled_patch16_224\"", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "distilled", "=", "True", ",", "\n", "**", "model_kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.deit_base_distilled_patch16_384": [[1241, 1253], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "deit_base_distilled_patch16_384", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"DeiT-base distilled model @ 384x384 from paper (https://arxiv.org/abs/2012.12877).\n    ImageNet-1k weights from https://github.com/facebookresearch/deit.\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"deit_base_distilled_patch16_384\"", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "distilled", "=", "True", ",", "\n", "**", "model_kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224_miil_in21k": [[1255, 1266], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224_miil_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    Weights taken from: https://github.com/Alibaba-MIIL/ImageNet21K\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "qkv_bias", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224_miil_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer.vit_base_patch16_224_miil": [[1268, 1279], ["dict", "visiontransformer._create_vision_transformer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.visiontransformer._create_vision_transformer"], ["", "def", "vit_base_patch16_224_miil", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"ViT-Base (ViT-B/16) from original paper (https://arxiv.org/abs/2010.11929).\n    Weights taken from: https://github.com/Alibaba-MIIL/ImageNet21K\n    \"\"\"", "\n", "model_kwargs", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "num_heads", "=", "12", ",", "qkv_bias", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "model", "=", "_create_vision_transformer", "(", "\n", "\"vit_base_patch16_224_miil\"", ",", "pretrained", "=", "pretrained", ",", "**", "model_kwargs", "\n", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNet.__init__": [[741, 799], ["torch.Module.__init__", "timm.models.layers.create_conv2d", "norm_layer", "act_layer", "timm.models.efficientnet_builder.EfficientNetBuilder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "timm.models.layers.create_conv2d", "norm_layer", "act_layer", "timm.models.layers.create_classifier", "timm.models.efficientnet_builder.efficientnet_init_weights", "round_chs_fn", "timm.models.efficientnet_builder.EfficientNetBuilder."], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "block_args", ",", "\n", "num_classes", "=", "1000", ",", "\n", "num_features", "=", "1280", ",", "\n", "in_chans", "=", "3", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "False", ",", "\n", "output_stride", "=", "32", ",", "\n", "pad_type", "=", "\"\"", ",", "\n", "round_chs_fn", "=", "round_channels", ",", "\n", "act_layer", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "se_layer", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.0", ",", "\n", "global_pool", "=", "\"avg\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "ReLU", "\n", "norm_layer", "=", "norm_layer", "or", "nn", ".", "BatchNorm2d", "\n", "se_layer", "=", "se_layer", "or", "SqueezeExcite", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "# Stem", "\n", "if", "not", "fix_stem", ":", "\n", "            ", "stem_size", "=", "round_chs_fn", "(", "stem_size", ")", "\n", "", "self", ".", "conv_stem", "=", "create_conv2d", "(", "\n", "in_chans", ",", "stem_size", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "pad_type", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "stem_size", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "\n", "# Middle stages (IR/ER/DS Blocks)", "\n", "builder", "=", "EfficientNetBuilder", "(", "\n", "output_stride", "=", "output_stride", ",", "\n", "pad_type", "=", "pad_type", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "se_layer", "=", "se_layer", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ",", "\n", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "builder", "(", "stem_size", ",", "block_args", ")", ")", "\n", "self", ".", "feature_info", "=", "builder", ".", "features", "\n", "head_chs", "=", "builder", ".", "in_chs", "\n", "\n", "# Head + Pooling", "\n", "self", ".", "conv_head", "=", "create_conv2d", "(", "head_chs", ",", "self", ".", "num_features", ",", "1", ",", "padding", "=", "pad_type", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "self", ".", "num_features", ")", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "global_pool", ",", "self", ".", "classifier", "=", "create_classifier", "(", "\n", "self", ".", "num_features", ",", "self", ".", "num_classes", ",", "pool_type", "=", "global_pool", "\n", ")", "\n", "\n", "efficientnet_init_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNet.as_sequential": [[800, 806], ["layers.extend", "layers.extend", "layers.extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "as_sequential", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "self", ".", "conv_stem", ",", "self", ".", "bn1", ",", "self", ".", "act1", "]", "\n", "layers", ".", "extend", "(", "self", ".", "blocks", ")", "\n", "layers", ".", "extend", "(", "[", "self", ".", "conv_head", ",", "self", ".", "bn2", ",", "self", ".", "act2", ",", "self", ".", "global_pool", "]", ")", "\n", "layers", ".", "extend", "(", "[", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", ",", "self", ".", "classifier", "]", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNet.get_classifier": [[807, 809], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNet.reset_classifier": [[810, 814], ["timm.models.layers.create_classifier"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "\"avg\"", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "global_pool", ",", "self", ".", "classifier", "=", "create_classifier", "(", "\n", "self", ".", "num_features", ",", "self", ".", "num_classes", ",", "pool_type", "=", "global_pool", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNet.forward": [[816, 825], ["efficientnet.EfficientNet.conv_stem", "efficientnet.EfficientNet.bn1", "efficientnet.EfficientNet.act1", "efficientnet.EfficientNet.blocks", "efficientnet.EfficientNet.conv_head", "efficientnet.EfficientNet.bn2", "efficientnet.EfficientNet.act2", "efficientnet.EfficientNet.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_stem", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_head", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "act2", "(", "x", ")", "\n", "return", "x", ".", "mean", "(", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNetFeatures.__init__": [[840, 896], ["torch.Module.__init__", "timm.models.layers.create_conv2d", "norm_layer", "act_layer", "timm.models.efficientnet_builder.EfficientNetBuilder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "timm.models.features.FeatureInfo", "timm.models.efficientnet_builder.efficientnet_init_weights", "round_chs_fn", "efficientnet.EfficientNetFeatures.feature_info.get_dicts", "timm.models.features.FeatureHooks", "timm.models.efficientnet_builder.EfficientNetBuilder.", "enumerate", "efficientnet.EfficientNetFeatures.named_modules"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "block_args", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "feature_location", "=", "\"bottleneck\"", ",", "\n", "in_chans", "=", "3", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "False", ",", "\n", "output_stride", "=", "32", ",", "\n", "pad_type", "=", "\"\"", ",", "\n", "round_chs_fn", "=", "round_channels", ",", "\n", "act_layer", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "se_layer", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_path_rate", "=", "0.0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EfficientNetFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "ReLU", "\n", "norm_layer", "=", "norm_layer", "or", "nn", ".", "BatchNorm2d", "\n", "se_layer", "=", "se_layer", "or", "SqueezeExcite", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "# Stem", "\n", "if", "not", "fix_stem", ":", "\n", "            ", "stem_size", "=", "round_chs_fn", "(", "stem_size", ")", "\n", "", "self", ".", "conv_stem", "=", "create_conv2d", "(", "\n", "in_chans", ",", "stem_size", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "pad_type", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "stem_size", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "\n", "# Middle stages (IR/ER/DS Blocks)", "\n", "builder", "=", "EfficientNetBuilder", "(", "\n", "output_stride", "=", "output_stride", ",", "\n", "pad_type", "=", "pad_type", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "se_layer", "=", "se_layer", ",", "\n", "drop_path_rate", "=", "drop_path_rate", ",", "\n", "feature_location", "=", "feature_location", ",", "\n", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "builder", "(", "stem_size", ",", "block_args", ")", ")", "\n", "self", ".", "feature_info", "=", "FeatureInfo", "(", "builder", ".", "features", ",", "out_indices", ")", "\n", "self", ".", "_stage_out_idx", "=", "{", "\n", "v", "[", "\"stage\"", "]", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "feature_info", ")", "if", "i", "in", "out_indices", "\n", "}", "\n", "\n", "efficientnet_init_weights", "(", "self", ")", "\n", "\n", "# Register feature extraction hooks with FeatureHooks helper", "\n", "self", ".", "feature_hooks", "=", "None", "\n", "if", "feature_location", "!=", "\"bottleneck\"", ":", "\n", "            ", "hooks", "=", "self", ".", "feature_info", ".", "get_dicts", "(", "keys", "=", "(", "\"module\"", ",", "\"hook_type\"", ")", ")", "\n", "self", ".", "feature_hooks", "=", "FeatureHooks", "(", "hooks", ",", "self", ".", "named_modules", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.EfficientNetFeatures.forward": [[897, 914], ["efficientnet.EfficientNetFeatures.conv_stem", "efficientnet.EfficientNetFeatures.bn1", "efficientnet.EfficientNetFeatures.act1", "enumerate", "efficientnet.EfficientNetFeatures.blocks", "efficientnet.EfficientNetFeatures.feature_hooks.get_output", "list", "features.append", "b", "efficientnet.EfficientNetFeatures.values", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "x", "=", "self", ".", "conv_stem", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "act1", "(", "x", ")", "\n", "if", "self", ".", "feature_hooks", "is", "None", ":", "\n", "            ", "features", "=", "[", "]", "\n", "if", "0", "in", "self", ".", "_stage_out_idx", ":", "\n", "                ", "features", ".", "append", "(", "x", ")", "# add stem out", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "                ", "x", "=", "b", "(", "x", ")", "\n", "if", "i", "+", "1", "in", "self", ".", "_stage_out_idx", ":", "\n", "                    ", "features", ".", "append", "(", "x", ")", "\n", "", "", "return", "features", "\n", "", "else", ":", "\n", "            ", "self", ".", "blocks", "(", "x", ")", "\n", "out", "=", "self", ".", "feature_hooks", ".", "get_output", "(", "x", ".", "device", ")", "\n", "return", "list", "(", "out", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._cfg": [[56, 69], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "\"url\"", ":", "url", ",", "\n", "\"num_classes\"", ":", "1000", ",", "\n", "\"input_size\"", ":", "(", "3", ",", "224", ",", "224", ")", ",", "\n", "\"pool_size\"", ":", "(", "7", ",", "7", ")", ",", "\n", "\"crop_pct\"", ":", "0.875", ",", "\n", "\"interpolation\"", ":", "\"bicubic\"", ",", "\n", "\"mean\"", ":", "IMAGENET_DEFAULT_MEAN", ",", "\n", "\"std\"", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "\"first_conv\"", ":", "\"conv_stem\"", ",", "\n", "\"classifier\"", ":", "\"classifier\"", ",", "\n", "**", "kwargs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet": [[916, 936], ["kwargs.pop", "timm.models.helpers.build_model_with_cfg", "default_cfg_for_features"], "function", ["None"], ["", "", "", "def", "_create_effnet", "(", "variant", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "features_only", "=", "False", "\n", "model_cls", "=", "EfficientNet", "\n", "kwargs_filter", "=", "None", "\n", "if", "kwargs", ".", "pop", "(", "\"features_only\"", ",", "False", ")", ":", "\n", "        ", "features_only", "=", "True", "\n", "kwargs_filter", "=", "(", "\"num_classes\"", ",", "\"num_features\"", ",", "\"head_conv\"", ",", "\"global_pool\"", ")", "\n", "model_cls", "=", "EfficientNetFeatures", "\n", "", "model", "=", "build_model_with_cfg", "(", "\n", "model_cls", ",", "\n", "variant", ",", "\n", "pretrained", ",", "\n", "default_cfg", "=", "default_cfgs", "[", "variant", "]", ",", "\n", "pretrained_strict", "=", "not", "features_only", ",", "\n", "kwargs_filter", "=", "kwargs_filter", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "if", "features_only", ":", "\n", "        ", "model", ".", "default_cfg", "=", "default_cfg_for_features", "(", "model", ".", "default_cfg", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_a1": [[938, 971], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mnasnet_a1", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a mnasnet-a1 model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet\n    Paper: https://arxiv.org/pdf/1807.11626.pdf.\n    Args:\n      channel_multiplier: multiplier to number of channels per layer.\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "\"ds_r1_k3_s1_e1_c16_noskip\"", "]", ",", "\n", "# stage 1, 112x112 in", "\n", "[", "\"ir_r2_k3_s2_e6_c24\"", "]", ",", "\n", "# stage 2, 56x56 in", "\n", "[", "\"ir_r3_k5_s2_e3_c40_se0.25\"", "]", ",", "\n", "# stage 3, 28x28 in", "\n", "[", "\"ir_r4_k3_s2_e6_c80\"", "]", ",", "\n", "# stage 4, 14x14in", "\n", "[", "\"ir_r2_k3_s1_e6_c112_se0.25\"", "]", ",", "\n", "# stage 5, 14x14in", "\n", "[", "\"ir_r3_k5_s2_e6_c160_se0.25\"", "]", ",", "\n", "# stage 6, 7x7 in", "\n", "[", "\"ir_r1_k3_s1_e6_c320\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_b1": [[973, 1006], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mnasnet_b1", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a mnasnet-b1 model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet\n    Paper: https://arxiv.org/pdf/1807.11626.pdf.\n    Args:\n      channel_multiplier: multiplier to number of channels per layer.\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "\"ds_r1_k3_s1_c16_noskip\"", "]", ",", "\n", "# stage 1, 112x112 in", "\n", "[", "\"ir_r3_k3_s2_e3_c24\"", "]", ",", "\n", "# stage 2, 56x56 in", "\n", "[", "\"ir_r3_k5_s2_e3_c40\"", "]", ",", "\n", "# stage 3, 28x28 in", "\n", "[", "\"ir_r3_k5_s2_e6_c80\"", "]", ",", "\n", "# stage 4, 14x14in", "\n", "[", "\"ir_r2_k3_s1_e6_c96\"", "]", ",", "\n", "# stage 5, 14x14in", "\n", "[", "\"ir_r4_k5_s2_e6_c192\"", "]", ",", "\n", "# stage 6, 7x7 in", "\n", "[", "\"ir_r1_k3_s1_e6_c320_noskip\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_small": [[1008, 1034], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mnasnet_small", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a mnasnet-b1 model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet\n    Paper: https://arxiv.org/pdf/1807.11626.pdf.\n    Args:\n      channel_multiplier: multiplier to number of channels per layer.\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_c8\"", "]", ",", "\n", "[", "\"ir_r1_k3_s2_e3_c16\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c16\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c32_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k3_s1_e6_c32_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k5_s2_e6_c88_se0.25\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c144\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "stem_size", "=", "8", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2": [[1036, 1073], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "timm.models.efficientnet_builder.resolve_act_layer", "max", "kwargs.pop", "functools.partial", "functools.partial.", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mobilenet_v2", "(", "\n", "variant", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "fix_stem_head", "=", "False", ",", "\n", "pretrained", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Generate MobileNet-V2 network\n    Ref impl: https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet_v2.py\n    Paper: https://arxiv.org/abs/1801.04381\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_c16\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c32\"", "]", ",", "\n", "[", "\"ir_r4_k3_s2_e6_c64\"", "]", ",", "\n", "[", "\"ir_r3_k3_s1_e6_c96\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c160\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320\"", "]", ",", "\n", "]", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "\n", "arch_def", ",", "depth_multiplier", "=", "depth_multiplier", ",", "fix_first_last", "=", "fix_stem_head", "\n", ")", ",", "\n", "num_features", "=", "1280", "if", "fix_stem_head", "else", "max", "(", "1280", ",", "round_chs_fn", "(", "1280", ")", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "fix_stem_head", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"relu6\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_fbnetc": [[1075, 1107], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_fbnetc", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"FBNet-C\n    Paper: https://arxiv.org/abs/1812.03443\n    Ref Impl: https://github.com/facebookresearch/maskrcnn-benchmark/blob/master/maskrcnn_benchmark/modeling/backbone/fbnet_modeldef.py\n    NOTE: the impl above does not relate to the 'C' variant here, that was derived from paper,\n    it was used to confirm some building block details\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ir_r1_k3_s1_e1_c16\"", "]", ",", "\n", "[", "\"ir_r1_k3_s2_e6_c24\"", ",", "\"ir_r2_k3_s1_e1_c24\"", "]", ",", "\n", "[", "\n", "\"ir_r1_k5_s2_e6_c32\"", ",", "\n", "\"ir_r1_k5_s1_e3_c32\"", ",", "\n", "\"ir_r1_k5_s1_e6_c32\"", ",", "\n", "\"ir_r1_k3_s1_e6_c32\"", ",", "\n", "]", ",", "\n", "[", "\"ir_r1_k5_s2_e6_c64\"", ",", "\"ir_r1_k5_s1_e3_c64\"", ",", "\"ir_r2_k5_s1_e6_c64\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112\"", ",", "\"ir_r1_k5_s1_e3_c112\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c184\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c352\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "stem_size", "=", "16", ",", "\n", "num_features", "=", "1984", ",", "# paper suggests this, but is not 100% clear", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_spnasnet": [[1109, 1141], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_spnasnet", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates the Single-Path NAS model from search targeted for Pixel1 phone.\n    Paper: https://arxiv.org/abs/1904.02877\n    Args:\n      channel_multiplier: multiplier to number of channels per layer.\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "\"ds_r1_k3_s1_c16_noskip\"", "]", ",", "\n", "# stage 1, 112x112 in", "\n", "[", "\"ir_r3_k3_s2_e3_c24\"", "]", ",", "\n", "# stage 2, 56x56 in", "\n", "[", "\"ir_r1_k5_s2_e6_c40\"", ",", "\"ir_r3_k3_s1_e3_c40\"", "]", ",", "\n", "# stage 3, 28x28 in", "\n", "[", "\"ir_r1_k5_s2_e6_c80\"", ",", "\"ir_r3_k3_s1_e3_c80\"", "]", ",", "\n", "# stage 4, 14x14in", "\n", "[", "\"ir_r1_k5_s1_e6_c96\"", ",", "\"ir_r3_k5_s1_e3_c96\"", "]", ",", "\n", "# stage 5, 14x14in", "\n", "[", "\"ir_r4_k5_s2_e6_c192\"", "]", ",", "\n", "# stage 6, 7x7 in", "\n", "[", "\"ir_r1_k3_s1_e6_c320_noskip\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet": [[1143, 1187], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial.", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnet", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet model.\n    Ref impl: https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/efficientnet_model.py\n    Paper: https://arxiv.org/abs/1905.11946\n    EfficientNet params\n    name: (channel_multiplier, depth_multiplier, resolution, dropout_rate)\n    'efficientnet-b0': (1.0, 1.0, 224, 0.2),\n    'efficientnet-b1': (1.0, 1.1, 240, 0.2),\n    'efficientnet-b2': (1.1, 1.2, 260, 0.3),\n    'efficientnet-b3': (1.2, 1.4, 300, 0.3),\n    'efficientnet-b4': (1.4, 1.8, 380, 0.4),\n    'efficientnet-b5': (1.6, 2.2, 456, 0.4),\n    'efficientnet-b6': (1.8, 2.6, 528, 0.5),\n    'efficientnet-b7': (2.0, 3.1, 600, 0.5),\n    'efficientnet-b8': (2.2, 3.6, 672, 0.5),\n    'efficientnet-l2': (4.3, 5.3, 800, 0.5),\n    Args:\n      channel_multiplier: multiplier to number of channels per layer\n      depth_multiplier: multiplier to number of repeats per stage\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_e1_c16_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e6_c40_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c80_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112_se0.25\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c192_se0.25\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320_se0.25\"", "]", ",", "\n", "]", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "round_chs_fn", "(", "1280", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"swish\"", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge": [[1189, 1219], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial.", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnet_edge", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-EdgeTPU model\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/edgetpu\n    \"\"\"", "\n", "\n", "arch_def", "=", "[", "\n", "# NOTE `fc` is present to override a mismatch between stem channels and in chs not", "\n", "# present in other models", "\n", "[", "\"er_r1_k3_s1_e4_c24_fc24_noskip\"", "]", ",", "\n", "[", "\"er_r2_k3_s2_e8_c32\"", "]", ",", "\n", "[", "\"er_r4_k3_s2_e8_c48\"", "]", ",", "\n", "[", "\"ir_r5_k5_s2_e8_c96\"", "]", ",", "\n", "[", "\"ir_r4_k5_s1_e8_c144\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e8_c192\"", "]", ",", "\n", "]", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "round_chs_fn", "(", "1280", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"relu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv": [[1221, 1258], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial.", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnet_condconv", "(", "\n", "variant", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "experts_multiplier", "=", "1", ",", "\n", "pretrained", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-CondConv model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/condconv\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_e1_c16_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e6_c40_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c80_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112_se0.25_cc4\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c192_se0.25_cc4\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320_se0.25_cc4\"", "]", ",", "\n", "]", "\n", "# NOTE unlike official impl, this one uses `cc<x>` option where x is the base number of experts for each stage and", "\n", "# the expert_multiplier increases that on a per-model basis as with depth/channel multipliers", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "\n", "arch_def", ",", "depth_multiplier", ",", "experts_multiplier", "=", "experts_multiplier", "\n", ")", ",", "\n", "num_features", "=", "round_chs_fn", "(", "1280", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"swish\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite": [[1260, 1299], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnet_lite", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-Lite model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/lite\n    Paper: https://arxiv.org/abs/1905.11946\n    EfficientNet params\n    name: (channel_multiplier, depth_multiplier, resolution, dropout_rate)\n      'efficientnet-lite0': (1.0, 1.0, 224, 0.2),\n      'efficientnet-lite1': (1.0, 1.1, 240, 0.2),\n      'efficientnet-lite2': (1.1, 1.2, 260, 0.3),\n      'efficientnet-lite3': (1.2, 1.4, 280, 0.3),\n      'efficientnet-lite4': (1.4, 1.8, 300, 0.3),\n    Args:\n      channel_multiplier: multiplier to number of channels per layer\n      depth_multiplier: multiplier to number of repeats per stage\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_e1_c16\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e6_c40\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c80\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c192\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ",", "fix_first_last", "=", "True", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "True", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"relu6\"", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_base": [[1301, 1331], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial.", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnetv2_base", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-V2 base model\n    Ref impl: https://github.com/google/automl/tree/master/efficientnetv2\n    Paper: `EfficientNetV2: Smaller Models and Faster Training` - https://arxiv.org/abs/2104.00298\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"cn_r1_k3_s1_e1_c16_skip\"", "]", ",", "\n", "[", "\"er_r2_k3_s2_e4_c32\"", "]", ",", "\n", "[", "\"er_r2_k3_s2_e4_c48\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e4_c96_se0.25\"", "]", ",", "\n", "[", "\"ir_r5_k3_s1_e6_c112_se0.25\"", "]", ",", "\n", "[", "\"ir_r8_k3_s2_e6_c192_se0.25\"", "]", ",", "\n", "]", "\n", "round_chs_fn", "=", "partial", "(", "\n", "round_channels", ",", "multiplier", "=", "channel_multiplier", ",", "round_limit", "=", "0.0", "\n", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "round_chs_fn", "(", "1280", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"silu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s": [[1333, 1375], ["functools.partial", "dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial.", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnetv2_s", "(", "\n", "variant", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "rw", "=", "False", ",", "\n", "pretrained", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-V2 Small model\n    Ref impl: https://github.com/google/automl/tree/master/efficientnetv2\n    Paper: `EfficientNetV2: Smaller Models and Faster Training` - https://arxiv.org/abs/2104.00298\n    NOTE: `rw` flag sets up 'small' variant to behave like my initial v2 small model,\n        before ref the impl was released.\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"cn_r2_k3_s1_e1_c24_skip\"", "]", ",", "\n", "[", "\"er_r4_k3_s2_e4_c48\"", "]", ",", "\n", "[", "\"er_r4_k3_s2_e4_c64\"", "]", ",", "\n", "[", "\"ir_r6_k3_s2_e4_c128_se0.25\"", "]", ",", "\n", "[", "\"ir_r9_k3_s1_e6_c160_se0.25\"", "]", ",", "\n", "[", "\"ir_r15_k3_s2_e6_c256_se0.25\"", "]", ",", "\n", "]", "\n", "num_features", "=", "1280", "\n", "if", "rw", ":", "\n", "# my original variant, based on paper figure differs from the official release", "\n", "        ", "arch_def", "[", "0", "]", "=", "[", "\"er_r2_k3_s1_e1_c24\"", "]", "\n", "arch_def", "[", "-", "1", "]", "=", "[", "\"ir_r15_k3_s2_e6_c272_se0.25\"", "]", "\n", "num_features", "=", "1792", "\n", "\n", "", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "round_chs_fn", "(", "num_features", ")", ",", "\n", "stem_size", "=", "24", ",", "\n", "round_chs_fn", "=", "round_chs_fn", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"silu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_m": [[1377, 1407], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnetv2_m", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-V2 Medium model\n    Ref impl: https://github.com/google/automl/tree/master/efficientnetv2\n    Paper: `EfficientNetV2: Smaller Models and Faster Training` - https://arxiv.org/abs/2104.00298\n    \"\"\"", "\n", "\n", "arch_def", "=", "[", "\n", "[", "\"cn_r3_k3_s1_e1_c24_skip\"", "]", ",", "\n", "[", "\"er_r5_k3_s2_e4_c48\"", "]", ",", "\n", "[", "\"er_r5_k3_s2_e4_c80\"", "]", ",", "\n", "[", "\"ir_r7_k3_s2_e4_c160_se0.25\"", "]", ",", "\n", "[", "\"ir_r14_k3_s1_e6_c176_se0.25\"", "]", ",", "\n", "[", "\"ir_r18_k3_s2_e6_c304_se0.25\"", "]", ",", "\n", "[", "\"ir_r5_k3_s1_e6_c512_se0.25\"", "]", ",", "\n", "]", "\n", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "24", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"silu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_l": [[1409, 1439], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnetv2_l", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-V2 Large model\n    Ref impl: https://github.com/google/automl/tree/master/efficientnetv2\n    Paper: `EfficientNetV2: Smaller Models and Faster Training` - https://arxiv.org/abs/2104.00298\n    \"\"\"", "\n", "\n", "arch_def", "=", "[", "\n", "[", "\"cn_r4_k3_s1_e1_c32_skip\"", "]", ",", "\n", "[", "\"er_r7_k3_s2_e4_c64\"", "]", ",", "\n", "[", "\"er_r7_k3_s2_e4_c96\"", "]", ",", "\n", "[", "\"ir_r10_k3_s2_e4_c192_se0.25\"", "]", ",", "\n", "[", "\"ir_r19_k3_s1_e6_c224_se0.25\"", "]", ",", "\n", "[", "\"ir_r25_k3_s2_e6_c384_se0.25\"", "]", ",", "\n", "[", "\"ir_r7_k3_s1_e6_c640_se0.25\"", "]", ",", "\n", "]", "\n", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"silu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_xl": [[1441, 1471], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "timm.models.efficientnet_builder.resolve_act_layer", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_efficientnetv2_xl", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an EfficientNet-V2 Xtra-Large model\n    Ref impl: https://github.com/google/automl/tree/master/efficientnetv2\n    Paper: `EfficientNetV2: Smaller Models and Faster Training` - https://arxiv.org/abs/2104.00298\n    \"\"\"", "\n", "\n", "arch_def", "=", "[", "\n", "[", "\"cn_r4_k3_s1_e1_c32_skip\"", "]", ",", "\n", "[", "\"er_r8_k3_s2_e4_c64\"", "]", ",", "\n", "[", "\"er_r8_k3_s2_e4_c96\"", "]", ",", "\n", "[", "\"ir_r16_k3_s2_e4_c192_se0.25\"", "]", ",", "\n", "[", "\"ir_r24_k3_s1_e6_c256_se0.25\"", "]", ",", "\n", "[", "\"ir_r32_k3_s2_e6_c512_se0.25\"", "]", ",", "\n", "[", "\"ir_r8_k3_s1_e6_c640_se0.25\"", "]", ",", "\n", "]", "\n", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"silu\"", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_s": [[1473, 1516], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mixnet_s", "(", "variant", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Small model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet/mixnet\n    Paper: https://arxiv.org/abs/1907.09595\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "\"ds_r1_k3_s1_e1_c16\"", "]", ",", "# relu", "\n", "# stage 1, 112x112 in", "\n", "[", "\"ir_r1_k3_a1.1_p1.1_s2_e6_c24\"", ",", "\"ir_r1_k3_a1.1_p1.1_s1_e3_c24\"", "]", ",", "# relu", "\n", "# stage 2, 56x56 in", "\n", "[", "\n", "\"ir_r1_k3.5.7_s2_e6_c40_se0.5_nsw\"", ",", "\n", "\"ir_r3_k3.5_a1.1_p1.1_s1_e6_c40_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 3, 28x28 in", "\n", "[", "\n", "\"ir_r1_k3.5.7_p1.1_s2_e6_c80_se0.25_nsw\"", ",", "\n", "\"ir_r2_k3.5_p1.1_s1_e6_c80_se0.25_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 4, 14x14in", "\n", "[", "\n", "\"ir_r1_k3.5.7_a1.1_p1.1_s1_e6_c120_se0.5_nsw\"", ",", "\n", "\"ir_r2_k3.5.7.9_a1.1_p1.1_s1_e3_c120_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 5, 14x14in", "\n", "[", "\n", "\"ir_r1_k3.5.7.9.11_s2_e6_c200_se0.5_nsw\"", ",", "\n", "\"ir_r2_k3.5.7.9_p1.1_s1_e6_c200_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# 7x7", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ")", ",", "\n", "num_features", "=", "1536", ",", "\n", "stem_size", "=", "16", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m": [[1518, 1563], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "functools.partial", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_mixnet_m", "(", "\n", "variant", ",", "channel_multiplier", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Medium-Large model.\n    Ref impl: https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet/mixnet\n    Paper: https://arxiv.org/abs/1907.09595\n    \"\"\"", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "\"ds_r1_k3_s1_e1_c24\"", "]", ",", "# relu", "\n", "# stage 1, 112x112 in", "\n", "[", "\"ir_r1_k3.5.7_a1.1_p1.1_s2_e6_c32\"", ",", "\"ir_r1_k3_a1.1_p1.1_s1_e3_c32\"", "]", ",", "# relu", "\n", "# stage 2, 56x56 in", "\n", "[", "\n", "\"ir_r1_k3.5.7.9_s2_e6_c40_se0.5_nsw\"", ",", "\n", "\"ir_r3_k3.5_a1.1_p1.1_s1_e6_c40_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 3, 28x28 in", "\n", "[", "\n", "\"ir_r1_k3.5.7_s2_e6_c80_se0.25_nsw\"", ",", "\n", "\"ir_r3_k3.5.7.9_a1.1_p1.1_s1_e6_c80_se0.25_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 4, 14x14in", "\n", "[", "\n", "\"ir_r1_k3_s1_e6_c120_se0.5_nsw\"", ",", "\n", "\"ir_r3_k3.5.7.9_a1.1_p1.1_s1_e3_c120_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# stage 5, 14x14in", "\n", "[", "\n", "\"ir_r1_k3.5.7.9_s2_e6_c200_se0.5_nsw\"", ",", "\n", "\"ir_r3_k3.5.7.9_p1.1_s1_e6_c200_se0.5_nsw\"", ",", "\n", "]", ",", "# swish", "\n", "# 7x7", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ",", "depth_trunc", "=", "\"round\"", ")", ",", "\n", "num_features", "=", "1536", ",", "\n", "stem_size", "=", "24", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "channel_multiplier", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet": [[1565, 1591], ["dict", "efficientnet._create_effnet", "timm.models.efficientnet_builder.decode_arch_def", "max", "functools.partial", "timm.models.efficientnet_builder.resolve_act_layer", "timm.models.efficientnet_builder.round_channels", "kwargs.pop", "functools.partial", "timm.models.efficientnet_builder.resolve_bn_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._create_effnet"], ["", "def", "_gen_tinynet", "(", "\n", "variant", ",", "model_width", "=", "1.0", ",", "depth_multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Creates a TinyNet model.\"\"\"", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_e1_c16_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e6_c40_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c80_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112_se0.25\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c192_se0.25\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320_se0.25\"", "]", ",", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ",", "depth_trunc", "=", "\"round\"", ")", ",", "\n", "num_features", "=", "max", "(", "1280", ",", "round_channels", "(", "1280", ",", "model_width", ",", "8", ",", "None", ")", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "True", ",", "\n", "round_chs_fn", "=", "partial", "(", "round_channels", ",", "multiplier", "=", "model_width", ")", ",", "\n", "act_layer", "=", "resolve_act_layer", "(", "kwargs", ",", "\"swish\"", ")", ",", "\n", "norm_layer", "=", "kwargs", ".", "pop", "(", "\"norm_layer\"", ",", "None", ")", "\n", "or", "partial", "(", "nn", ".", "BatchNorm2d", ",", "**", "resolve_bn_args", "(", "kwargs", ")", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "model", "=", "_create_effnet", "(", "variant", ",", "pretrained", ",", "**", "model_kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_050": [[1593, 1597], ["efficientnet._gen_mnasnet_b1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_b1"], ["", "def", "mnasnet_050", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet B1, depth multiplier of 0.5.\"\"\"", "\n", "model", "=", "_gen_mnasnet_b1", "(", "\"mnasnet_050\"", ",", "0.5", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_075": [[1599, 1603], ["efficientnet._gen_mnasnet_b1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_b1"], ["", "def", "mnasnet_075", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet B1, depth multiplier of 0.75.\"\"\"", "\n", "model", "=", "_gen_mnasnet_b1", "(", "\"mnasnet_075\"", ",", "0.75", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_100": [[1605, 1609], ["efficientnet._gen_mnasnet_b1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_b1"], ["", "def", "mnasnet_100", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet B1, depth multiplier of 1.0.\"\"\"", "\n", "model", "=", "_gen_mnasnet_b1", "(", "\"mnasnet_100\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_b1": [[1611, 1614], ["efficientnet.mnasnet_100"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_100"], ["", "def", "mnasnet_b1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet B1, depth multiplier of 1.0.\"\"\"", "\n", "return", "mnasnet_100", "(", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_140": [[1616, 1620], ["efficientnet._gen_mnasnet_b1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_b1"], ["", "def", "mnasnet_140", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet B1,  depth multiplier of 1.4\"\"\"", "\n", "model", "=", "_gen_mnasnet_b1", "(", "\"mnasnet_140\"", ",", "1.4", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.semnasnet_050": [[1622, 1626], ["efficientnet._gen_mnasnet_a1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_a1"], ["", "def", "semnasnet_050", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet A1 (w/ SE), depth multiplier of 0.5\"\"\"", "\n", "model", "=", "_gen_mnasnet_a1", "(", "\"semnasnet_050\"", ",", "0.5", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.semnasnet_075": [[1628, 1632], ["efficientnet._gen_mnasnet_a1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_a1"], ["", "def", "semnasnet_075", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet A1 (w/ SE),  depth multiplier of 0.75.\"\"\"", "\n", "model", "=", "_gen_mnasnet_a1", "(", "\"semnasnet_075\"", ",", "0.75", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.semnasnet_100": [[1634, 1638], ["efficientnet._gen_mnasnet_a1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_a1"], ["", "def", "semnasnet_100", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet A1 (w/ SE), depth multiplier of 1.0.\"\"\"", "\n", "model", "=", "_gen_mnasnet_a1", "(", "\"semnasnet_100\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_a1": [[1640, 1643], ["efficientnet.semnasnet_100"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.semnasnet_100"], ["", "def", "mnasnet_a1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet A1 (w/ SE), depth multiplier of 1.0.\"\"\"", "\n", "return", "semnasnet_100", "(", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.semnasnet_140": [[1645, 1649], ["efficientnet._gen_mnasnet_a1"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_a1"], ["", "def", "semnasnet_140", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet A1 (w/ SE), depth multiplier of 1.4.\"\"\"", "\n", "model", "=", "_gen_mnasnet_a1", "(", "\"semnasnet_140\"", ",", "1.4", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mnasnet_small": [[1651, 1655], ["efficientnet._gen_mnasnet_small"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mnasnet_small"], ["", "def", "mnasnet_small", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MNASNet Small,  depth multiplier of 1.0.\"\"\"", "\n", "model", "=", "_gen_mnasnet_small", "(", "\"mnasnet_small\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_035": [[1657, 1661], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_035", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 0.35 channel multiplier\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\"mobilenetv2_035\"", ",", "0.35", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_050": [[1663, 1667], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_050", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 0.5 channel multiplier\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\"mobilenetv2_050\"", ",", "0.5", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_075": [[1669, 1673], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_075", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 0.75 channel multiplier\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\"mobilenetv2_075\"", ",", "0.75", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_100": [[1675, 1679], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_100", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 1.0 channel multiplier\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\"mobilenetv2_100\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_140": [[1681, 1685], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_140", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 1.4 channel multiplier\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\"mobilenetv2_140\"", ",", "1.4", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_110d": [[1687, 1698], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_110d", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 1.1 channel, 1.2 depth multipliers\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\n", "\"mobilenetv2_110d\"", ",", "\n", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "fix_stem_head", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mobilenetv2_120d": [[1700, 1711], ["efficientnet._gen_mobilenet_v2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mobilenet_v2"], ["", "def", "mobilenetv2_120d", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"MobileNet V2 w/ 1.2 channel, 1.4 depth multipliers\"\"\"", "\n", "model", "=", "_gen_mobilenet_v2", "(", "\n", "\"mobilenetv2_120d\"", ",", "\n", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "fix_stem_head", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.fbnetc_100": [[1713, 1720], ["efficientnet._gen_fbnetc"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_fbnetc"], ["", "def", "fbnetc_100", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"FBNet-C\"\"\"", "\n", "if", "pretrained", ":", "\n", "# pretrained model trained with non-default BN epsilon", "\n", "        ", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "", "model", "=", "_gen_fbnetc", "(", "\"fbnetc_100\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.spnasnet_100": [[1722, 1726], ["efficientnet._gen_spnasnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_spnasnet"], ["", "def", "spnasnet_100", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Single-Path NAS Pixel1\"\"\"", "\n", "model", "=", "_gen_spnasnet", "(", "\"spnasnet_100\"", ",", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b0": [[1728, 1739], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B0\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b0\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b1": [[1741, 1752], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B1\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b1\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b2": [[1754, 1765], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b2\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b2a": [[1767, 1771], ["efficientnet.efficientnet_b2"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b2"], ["", "def", "efficientnet_b2a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2 @ 288x288 w/ 1.0 test crop\"\"\"", "\n", "# WARN this model def is deprecated, different train/test res + test crop handled by default_cfg now", "\n", "return", "efficientnet_b2", "(", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b3": [[1773, 1784], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b3\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b3a": [[1786, 1790], ["efficientnet.efficientnet_b3"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b3"], ["", "def", "efficientnet_b3a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3 @ 320x320 w/ 1.0 test crop-pct\"\"\"", "\n", "# WARN this model def is deprecated, different train/test res + test crop handled by default_cfg now", "\n", "return", "efficientnet_b3", "(", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b4": [[1792, 1803], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B4\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.4, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b4\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b5": [[1805, 1816], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B5\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.4, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b5\"", ",", "\n", "channel_multiplier", "=", "1.6", ",", "\n", "depth_multiplier", "=", "2.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b6": [[1818, 1829], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b6", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B6\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b6\"", ",", "\n", "channel_multiplier", "=", "1.8", ",", "\n", "depth_multiplier", "=", "2.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b7": [[1831, 1842], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b7", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B7\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b7\"", ",", "\n", "channel_multiplier", "=", "2.0", ",", "\n", "depth_multiplier", "=", "3.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b8": [[1844, 1855], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b8", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B8\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b8\"", ",", "\n", "channel_multiplier", "=", "2.2", ",", "\n", "depth_multiplier", "=", "3.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_l2": [[1857, 1868], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_l2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-L2.\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_l2\"", ",", "\n", "channel_multiplier", "=", "4.3", ",", "\n", "depth_multiplier", "=", "5.3", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_es": [[1870, 1880], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "efficientnet_es", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge Small.\"\"\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"efficientnet_es\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_es_pruned": [[1882, 1892], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "efficientnet_es_pruned", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge Small Pruned. For more info: https://github.com/DeGirum/pruned-models/releases/tag/efficientnet_v1.0\"\"\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"efficientnet_es_pruned\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_em": [[1894, 1904], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "efficientnet_em", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge-Medium.\"\"\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"efficientnet_em\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_el": [[1906, 1916], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "efficientnet_el", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge-Large.\"\"\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"efficientnet_el\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_el_pruned": [[1918, 1928], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "efficientnet_el_pruned", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge-Large pruned. For more info: https://github.com/DeGirum/pruned-models/releases/tag/efficientnet_v1.0\"\"\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"efficientnet_el_pruned\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_cc_b0_4e": [[1930, 1941], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "efficientnet_cc_b0_4e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B0 w/ 8 Experts\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"efficientnet_cc_b0_4e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_cc_b0_8e": [[1943, 1955], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "efficientnet_cc_b0_8e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B0 w/ 8 Experts\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"efficientnet_cc_b0_8e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "experts_multiplier", "=", "2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_cc_b1_8e": [[1957, 1969], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "efficientnet_cc_b1_8e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B1 w/ 8 Experts\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"efficientnet_cc_b1_8e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "experts_multiplier", "=", "2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_lite0": [[1971, 1982], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "efficientnet_lite0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite0\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"efficientnet_lite0\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_lite1": [[1984, 1995], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "efficientnet_lite1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite1\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"efficientnet_lite1\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_lite2": [[1997, 2008], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "efficientnet_lite2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite2\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"efficientnet_lite2\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_lite3": [[2010, 2021], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "efficientnet_lite3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite3\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"efficientnet_lite3\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_lite4": [[2023, 2034], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "efficientnet_lite4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite4\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.4, drop_path_rate should be 0.2", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"efficientnet_lite4\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b1_pruned": [[2036, 2050], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b1_pruned", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B1 Pruned. The pruning has been obtained using https://arxiv.org/pdf/2002.08258.pdf\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "variant", "=", "\"efficientnet_b1_pruned\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "variant", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pruned", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b2_pruned": [[2052, 2065], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b2_pruned", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2 Pruned. The pruning has been obtained using https://arxiv.org/pdf/2002.08258.pdf\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b2_pruned\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pruned", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnet_b3_pruned": [[2067, 2080], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "efficientnet_b3_pruned", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3 Pruned. The pruning has been obtained using https://arxiv.org/pdf/2002.08258.pdf\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"efficientnet_b3_pruned\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pruned", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_rw_t": [[2082, 2093], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "efficientnetv2_rw_t", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Tiny (Custom variant, tiny not in paper).\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"efficientnetv2_rw_t\"", ",", "\n", "channel_multiplier", "=", "0.8", ",", "\n", "depth_multiplier", "=", "0.9", ",", "\n", "rw", "=", "False", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.gc_efficientnetv2_rw_t": [[2095, 2107], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "gc_efficientnetv2_rw_t", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Tiny w/ Global Context Attn (Custom variant, tiny not in paper).\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"gc_efficientnetv2_rw_t\"", ",", "\n", "channel_multiplier", "=", "0.8", ",", "\n", "depth_multiplier", "=", "0.9", ",", "\n", "rw", "=", "False", ",", "\n", "se_layer", "=", "\"gc\"", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_rw_s": [[2109, 2118], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "efficientnetv2_rw_s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Small (RW variant).\n    NOTE: This is my initial (pre official code release) w/ some differences.\n    See efficientnetv2_s and tf_efficientnetv2_s for versions that match the official w/ PyTorch vs TF padding\n    \"\"\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"efficientnetv2_rw_s\"", ",", "rw", "=", "True", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_rw_m": [[2120, 2131], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "efficientnetv2_rw_m", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Medium (RW variant).\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"efficientnetv2_rw_m\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "(", "1.2", ",", ")", "*", "4", "+", "(", "1.6", ",", ")", "*", "2", ",", "\n", "rw", "=", "True", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_s": [[2133, 2137], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "efficientnetv2_s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Small.\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\"efficientnetv2_s\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_m": [[2139, 2143], ["efficientnet._gen_efficientnetv2_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_m"], ["", "def", "efficientnetv2_m", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Medium.\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_m", "(", "\"efficientnetv2_m\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_l": [[2145, 2149], ["efficientnet._gen_efficientnetv2_l"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_l"], ["", "def", "efficientnetv2_l", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Large.\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_l", "(", "\"efficientnetv2_l\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.efficientnetv2_xl": [[2151, 2155], ["efficientnet._gen_efficientnetv2_xl"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_xl"], ["", "def", "efficientnetv2_xl", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Xtra-Large.\"\"\"", "\n", "model", "=", "_gen_efficientnetv2_xl", "(", "\"efficientnetv2_xl\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b0": [[2157, 2169], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B0. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b0\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b1": [[2171, 2183], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B1. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b1\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b2": [[2185, 2197], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b2\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b3": [[2199, 2211], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b3\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b4": [[2213, 2225], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B4. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b4\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b5": [[2227, 2239], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b5", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B5. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b5\"", ",", "\n", "channel_multiplier", "=", "1.6", ",", "\n", "depth_multiplier", "=", "2.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b6": [[2241, 2254], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b6", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B6. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b6\"", ",", "\n", "channel_multiplier", "=", "1.8", ",", "\n", "depth_multiplier", "=", "2.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b7": [[2256, 2269], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b7", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B7. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b7\"", ",", "\n", "channel_multiplier", "=", "2.0", ",", "\n", "depth_multiplier", "=", "3.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b8": [[2271, 2284], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b8", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B8. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b8\"", ",", "\n", "channel_multiplier", "=", "2.2", ",", "\n", "depth_multiplier", "=", "3.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b0_ap": [[2286, 2298], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b0_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B0 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b0_ap\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b1_ap": [[2300, 2312], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b1_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B1 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b1_ap\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b2_ap": [[2314, 2326], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b2_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b2_ap\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b3_ap": [[2328, 2340], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b3_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b3_ap\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b4_ap": [[2342, 2354], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b4_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B4 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b4_ap\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b5_ap": [[2356, 2368], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b5_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B5 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b5_ap\"", ",", "\n", "channel_multiplier", "=", "1.6", ",", "\n", "depth_multiplier", "=", "2.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b6_ap": [[2370, 2383], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b6_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B6 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b6_ap\"", ",", "\n", "channel_multiplier", "=", "1.8", ",", "\n", "depth_multiplier", "=", "2.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b7_ap": [[2385, 2398], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b7_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B7 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b7_ap\"", ",", "\n", "channel_multiplier", "=", "2.0", ",", "\n", "depth_multiplier", "=", "3.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b8_ap": [[2400, 2413], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b8_ap", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B8 AdvProp. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b8_ap\"", ",", "\n", "channel_multiplier", "=", "2.2", ",", "\n", "depth_multiplier", "=", "3.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b0_ns": [[2415, 2427], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b0_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B0 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b0_ns\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b1_ns": [[2429, 2441], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b1_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B1 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b1_ns\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b2_ns": [[2443, 2455], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b2_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B2 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b2_ns\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b3_ns": [[2457, 2469], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b3_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B3 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b3_ns\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b4_ns": [[2471, 2483], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b4_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B4 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b4_ns\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b5_ns": [[2485, 2497], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b5_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B5 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b5_ns\"", ",", "\n", "channel_multiplier", "=", "1.6", ",", "\n", "depth_multiplier", "=", "2.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b6_ns": [[2499, 2512], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b6_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B6 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b6_ns\"", ",", "\n", "channel_multiplier", "=", "1.8", ",", "\n", "depth_multiplier", "=", "2.6", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_b7_ns": [[2514, 2527], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_b7_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-B7 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_b7_ns\"", ",", "\n", "channel_multiplier", "=", "2.0", ",", "\n", "depth_multiplier", "=", "3.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_l2_ns_475": [[2529, 2542], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_l2_ns_475", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-L2 NoisyStudent @ 475x475. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_l2_ns_475\"", ",", "\n", "channel_multiplier", "=", "4.3", ",", "\n", "depth_multiplier", "=", "5.3", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_l2_ns": [[2544, 2557], ["efficientnet._gen_efficientnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet"], ["", "def", "tf_efficientnet_l2_ns", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-L2 NoisyStudent. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.5", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet", "(", "\n", "\"tf_efficientnet_l2_ns\"", ",", "\n", "channel_multiplier", "=", "4.3", ",", "\n", "depth_multiplier", "=", "5.3", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_es": [[2559, 2571], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "tf_efficientnet_es", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge Small. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"tf_efficientnet_es\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_em": [[2573, 2585], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "tf_efficientnet_em", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge-Medium. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"tf_efficientnet_em\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_el": [[2587, 2599], ["efficientnet._gen_efficientnet_edge"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_edge"], ["", "def", "tf_efficientnet_el", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Edge-Large. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_edge", "(", "\n", "\"tf_efficientnet_el\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_cc_b0_4e": [[2601, 2614], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "tf_efficientnet_cc_b0_4e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B0 w/ 4 Experts. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"tf_efficientnet_cc_b0_4e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_cc_b0_8e": [[2616, 2630], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "tf_efficientnet_cc_b0_8e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B0 w/ 8 Experts. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"tf_efficientnet_cc_b0_8e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "experts_multiplier", "=", "2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_cc_b1_8e": [[2632, 2646], ["efficientnet._gen_efficientnet_condconv"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_condconv"], ["", "def", "tf_efficientnet_cc_b1_8e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-CondConv-B1 w/ 8 Experts. Tensorflow compatible variant\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_condconv", "(", "\n", "\"tf_efficientnet_cc_b1_8e\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "experts_multiplier", "=", "2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_lite0": [[2648, 2661], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "tf_efficientnet_lite0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite0\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"tf_efficientnet_lite0\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_lite1": [[2663, 2676], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "tf_efficientnet_lite1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite1\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.2, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"tf_efficientnet_lite1\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_lite2": [[2678, 2691], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "tf_efficientnet_lite2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite2\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"tf_efficientnet_lite2\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_lite3": [[2693, 2706], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "tf_efficientnet_lite3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite3\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.3, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"tf_efficientnet_lite3\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnet_lite4": [[2708, 2721], ["efficientnet._gen_efficientnet_lite"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnet_lite"], ["", "def", "tf_efficientnet_lite4", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-Lite4\"\"\"", "\n", "# NOTE for train, drop_rate should be 0.4, drop_path_rate should be 0.2", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnet_lite", "(", "\n", "\"tf_efficientnet_lite4\"", ",", "\n", "channel_multiplier", "=", "1.4", ",", "\n", "depth_multiplier", "=", "1.8", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_s": [[2723, 2731], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "tf_efficientnetv2_s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Small. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"tf_efficientnetv2_s\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_m": [[2733, 2741], ["efficientnet._gen_efficientnetv2_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_m"], ["", "def", "tf_efficientnetv2_m", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Medium. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_m", "(", "\n", "\"tf_efficientnetv2_m\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_l": [[2743, 2751], ["efficientnet._gen_efficientnetv2_l"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_l"], ["", "def", "tf_efficientnetv2_l", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Large. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_l", "(", "\n", "\"tf_efficientnetv2_l\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_s_in21ft1k": [[2753, 2761], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "tf_efficientnetv2_s_in21ft1k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Small. Pretrained on ImageNet-21k, fine-tuned on 1k. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"tf_efficientnetv2_s_in21ft1k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_m_in21ft1k": [[2763, 2771], ["efficientnet._gen_efficientnetv2_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_m"], ["", "def", "tf_efficientnetv2_m_in21ft1k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Medium. Pretrained on ImageNet-21k, fine-tuned on 1k. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_m", "(", "\n", "\"tf_efficientnetv2_m_in21ft1k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_l_in21ft1k": [[2773, 2781], ["efficientnet._gen_efficientnetv2_l"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_l"], ["", "def", "tf_efficientnetv2_l_in21ft1k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Large. Pretrained on ImageNet-21k, fine-tuned on 1k. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_l", "(", "\n", "\"tf_efficientnetv2_l_in21ft1k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_xl_in21ft1k": [[2783, 2791], ["efficientnet._gen_efficientnetv2_xl"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_xl"], ["", "def", "tf_efficientnetv2_xl_in21ft1k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Xtra-Large. Pretrained on ImageNet-21k, fine-tuned on 1k. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_xl", "(", "\n", "\"tf_efficientnetv2_xl_in21ft1k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_s_in21k": [[2793, 2801], ["efficientnet._gen_efficientnetv2_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_s"], ["", "def", "tf_efficientnetv2_s_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Small w/ ImageNet-21k pretrained weights. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_s", "(", "\n", "\"tf_efficientnetv2_s_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_m_in21k": [[2803, 2811], ["efficientnet._gen_efficientnetv2_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_m"], ["", "def", "tf_efficientnetv2_m_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Medium w/ ImageNet-21k pretrained weights. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_m", "(", "\n", "\"tf_efficientnetv2_m_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_l_in21k": [[2813, 2821], ["efficientnet._gen_efficientnetv2_l"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_l"], ["", "def", "tf_efficientnetv2_l_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Large w/ ImageNet-21k pretrained weights. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_l", "(", "\n", "\"tf_efficientnetv2_l_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_xl_in21k": [[2823, 2831], ["efficientnet._gen_efficientnetv2_xl"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_xl"], ["", "def", "tf_efficientnetv2_xl_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2 Xtra-Large w/ ImageNet-21k pretrained weights. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_xl", "(", "\n", "\"tf_efficientnetv2_xl_in21k\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_b0": [[2833, 2841], ["efficientnet._gen_efficientnetv2_base"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_base"], ["", "def", "tf_efficientnetv2_b0", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2-B0. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_base", "(", "\n", "\"tf_efficientnetv2_b0\"", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_b1": [[2843, 2855], ["efficientnet._gen_efficientnetv2_base"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_base"], ["", "def", "tf_efficientnetv2_b1", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2-B1. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_base", "(", "\n", "\"tf_efficientnetv2_b1\"", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "depth_multiplier", "=", "1.1", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_b2": [[2857, 2869], ["efficientnet._gen_efficientnetv2_base"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_base"], ["", "def", "tf_efficientnetv2_b2", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2-B2. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_base", "(", "\n", "\"tf_efficientnetv2_b2\"", ",", "\n", "channel_multiplier", "=", "1.1", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_efficientnetv2_b3": [[2871, 2883], ["efficientnet._gen_efficientnetv2_base"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_efficientnetv2_base"], ["", "def", "tf_efficientnetv2_b3", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"EfficientNet-V2-B3. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_efficientnetv2_base", "(", "\n", "\"tf_efficientnetv2_b3\"", ",", "\n", "channel_multiplier", "=", "1.2", ",", "\n", "depth_multiplier", "=", "1.4", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mixnet_s": [[2885, 2891], ["efficientnet._gen_mixnet_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_s"], ["", "def", "mixnet_s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Small model.\"\"\"", "\n", "model", "=", "_gen_mixnet_s", "(", "\n", "\"mixnet_s\"", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mixnet_m": [[2893, 2899], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "mixnet_m", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Medium model.\"\"\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"mixnet_m\"", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mixnet_l": [[2901, 2907], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "mixnet_l", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Large model.\"\"\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"mixnet_l\"", ",", "channel_multiplier", "=", "1.3", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mixnet_xl": [[2909, 2921], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "mixnet_xl", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Extra-Large model.\n    Not a paper spec, experimental def by RW w/ depth scaling.\n    \"\"\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"mixnet_xl\"", ",", "\n", "channel_multiplier", "=", "1.6", ",", "\n", "depth_multiplier", "=", "1.2", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.mixnet_xxl": [[2923, 2935], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "mixnet_xxl", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Double Extra Large model.\n    Not a paper spec, experimental def by RW w/ depth scaling.\n    \"\"\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"mixnet_xxl\"", ",", "\n", "channel_multiplier", "=", "2.4", ",", "\n", "depth_multiplier", "=", "1.3", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_mixnet_s": [[2937, 2945], ["efficientnet._gen_mixnet_s"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_s"], ["", "def", "tf_mixnet_s", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Small model. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_mixnet_s", "(", "\n", "\"tf_mixnet_s\"", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_mixnet_m": [[2947, 2955], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "tf_mixnet_m", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Medium model. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"tf_mixnet_m\"", ",", "channel_multiplier", "=", "1.0", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tf_mixnet_l": [[2957, 2965], ["efficientnet._gen_mixnet_m"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_mixnet_m"], ["", "def", "tf_mixnet_l", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Creates a MixNet Large model. Tensorflow compatible variant\"\"\"", "\n", "kwargs", "[", "\"bn_eps\"", "]", "=", "BN_EPS_TF_DEFAULT", "\n", "kwargs", "[", "\"pad_type\"", "]", "=", "\"same\"", "\n", "model", "=", "_gen_mixnet_m", "(", "\n", "\"tf_mixnet_l\"", ",", "channel_multiplier", "=", "1.3", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tinynet_a": [[2967, 2970], ["efficientnet._gen_tinynet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet"], ["", "def", "tinynet_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "_gen_tinynet", "(", "\"tinynet_a\"", ",", "1.0", ",", "1.2", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tinynet_b": [[2972, 2975], ["efficientnet._gen_tinynet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet"], ["", "def", "tinynet_b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "_gen_tinynet", "(", "\"tinynet_b\"", ",", "0.75", ",", "1.1", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tinynet_c": [[2977, 2980], ["efficientnet._gen_tinynet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet"], ["", "def", "tinynet_c", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "_gen_tinynet", "(", "\"tinynet_c\"", ",", "0.54", ",", "0.85", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tinynet_d": [[2982, 2985], ["efficientnet._gen_tinynet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet"], ["", "def", "tinynet_d", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "_gen_tinynet", "(", "\"tinynet_d\"", ",", "0.54", ",", "0.695", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet.tinynet_e": [[2987, 2990], ["efficientnet._gen_tinynet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.efficientnet._gen_tinynet"], ["", "def", "tinynet_e", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "_gen_tinynet", "(", "\"tinynet_e\"", ",", "0.51", ",", "0.6", ",", "pretrained", "=", "pretrained", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MixerBlock.__init__": [[149, 159], ["functools.partial", "torch.Module.__init__", "norm_layer", "mlp_layer", "norm_layer", "mlp_layer", "int", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dim", ",", "seq_len", ",", "mlp_ratio", "=", "(", "0.5", ",", "4.0", ")", ",", "mlp_layer", "=", "Mlp", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "drop_path", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "tokens_dim", ",", "channels_dim", "=", "[", "int", "(", "x", "*", "dim", ")", "for", "x", "in", "to_2tuple", "(", "mlp_ratio", ")", "]", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp_tokens", "=", "mlp_layer", "(", "seq_len", ",", "tokens_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp_channels", "=", "mlp_layer", "(", "dim", ",", "channels_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MixerBlock.forward": [[160, 164], ["mlp_mixer.MixerBlock.drop_path", "mlp_mixer.MixerBlock.drop_path", "mlp_mixer.MixerBlock.mlp_tokens().transpose", "mlp_mixer.MixerBlock.mlp_channels", "mlp_mixer.MixerBlock.norm2", "mlp_mixer.MixerBlock.mlp_tokens", "mlp_mixer.MixerBlock.norm1().transpose", "mlp_mixer.MixerBlock.norm1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp_tokens", "(", "self", ".", "norm1", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp_channels", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.Affine.__init__": [[167, 171], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "dim", ")", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.Affine.forward": [[172, 174], ["torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "addcmul", "(", "self", ".", "beta", ",", "self", ".", "alpha", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.ResBlock.__init__": [[181, 193], ["torch.Module.__init__", "int", "norm_layer", "torch.Linear", "torch.Linear", "norm_layer", "mlp_layer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dim", ",", "seq_len", ",", "mlp_ratio", "=", "4", ",", "mlp_layer", "=", "Mlp", ",", "norm_layer", "=", "Affine", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "init_values", "=", "1e-4", ",", "drop", "=", "0.", ",", "drop_path", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channel_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "linear_tokens", "=", "nn", ".", "Linear", "(", "seq_len", ",", "seq_len", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp_channels", "=", "mlp_layer", "(", "dim", ",", "channel_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "ls1", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "dim", ")", ")", "\n", "self", ".", "ls2", "=", "nn", ".", "Parameter", "(", "init_values", "*", "torch", ".", "ones", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.ResBlock.forward": [[194, 198], ["mlp_mixer.ResBlock.drop_path", "mlp_mixer.ResBlock.drop_path", "mlp_mixer.ResBlock.linear_tokens().transpose", "mlp_mixer.ResBlock.mlp_channels", "mlp_mixer.ResBlock.norm2", "mlp_mixer.ResBlock.linear_tokens", "mlp_mixer.ResBlock.norm1().transpose", "mlp_mixer.ResBlock.norm1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "ls1", "*", "self", ".", "linear_tokens", "(", "self", ".", "norm1", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "ls2", "*", "self", ".", "mlp_channels", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.SpatialGatingUnit.__init__": [[205, 210], ["torch.Module.__init__", "norm_layer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "seq_len", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "gate_dim", "=", "dim", "//", "2", "\n", "self", ".", "norm", "=", "norm_layer", "(", "gate_dim", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "seq_len", ",", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.SpatialGatingUnit.init_weights": [[211, 215], ["torch.init.normal_", "torch.init.normal_", "torch.init.ones_", "torch.init.ones_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# special init for the projection gate, called as override by base model init", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "proj", ".", "weight", ",", "std", "=", "1e-6", ")", "\n", "nn", ".", "init", ".", "ones_", "(", "self", ".", "proj", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.SpatialGatingUnit.forward": [[216, 221], ["x.chunk", "mlp_mixer.SpatialGatingUnit.norm", "mlp_mixer.SpatialGatingUnit.proj", "mlp_mixer.SpatialGatingUnit.transpose", "mlp_mixer.SpatialGatingUnit.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", ",", "v", "=", "x", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "v", "=", "self", ".", "norm", "(", "v", ")", "\n", "v", "=", "self", ".", "proj", "(", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "return", "u", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.SpatialGatingBlock.__init__": [[228, 237], ["functools.partial", "torch.Module.__init__", "int", "norm_layer", "functools.partial", "mlp_layer", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "dim", ",", "seq_len", ",", "mlp_ratio", "=", "4", ",", "mlp_layer", "=", "GatedMlp", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "drop_path", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channel_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "sgu", "=", "partial", "(", "SpatialGatingUnit", ",", "seq_len", "=", "seq_len", ")", "\n", "self", ".", "mlp_channels", "=", "mlp_layer", "(", "dim", ",", "channel_dim", ",", "act_layer", "=", "act_layer", ",", "gate_layer", "=", "sgu", ",", "drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.SpatialGatingBlock.forward": [[238, 241], ["mlp_mixer.SpatialGatingBlock.drop_path", "mlp_mixer.SpatialGatingBlock.mlp_channels", "mlp_mixer.SpatialGatingBlock.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp_channels", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.__init__": [[245, 283], ["functools.partial", "torch.Module.__init__", "timm.models.layers.PatchEmbed", "torch.Sequential", "torch.Sequential", "norm_layer", "mlp_mixer.MlpMixer.init_weights", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "block_layer", "range"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.init_weights"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", "=", "1000", ",", "\n", "img_size", "=", "224", ",", "\n", "in_chans", "=", "3", ",", "\n", "patch_size", "=", "16", ",", "\n", "num_blocks", "=", "8", ",", "\n", "embed_dim", "=", "512", ",", "\n", "mlp_ratio", "=", "(", "0.5", ",", "4.0", ")", ",", "\n", "block_layer", "=", "MixerBlock", ",", "\n", "mlp_layer", "=", "Mlp", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "\n", "nlhb", "=", "False", ",", "\n", "stem_norm", "=", "False", ",", "\n", "global_pool", "=", "'avg'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "global_pool", "=", "global_pool", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "# num_features for consistency with other models", "\n", "self", ".", "grad_checkpointing", "=", "False", "\n", "\n", "self", ".", "stem", "=", "PatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dim", ",", "norm_layer", "=", "norm_layer", "if", "stem_norm", "else", "None", ")", "\n", "# FIXME drop_path (stochastic depth scaling rule or all the same?)", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "block_layer", "(", "\n", "embed_dim", ",", "self", ".", "stem", ".", "num_patches", ",", "mlp_ratio", ",", "mlp_layer", "=", "mlp_layer", ",", "norm_layer", "=", "norm_layer", ",", "\n", "act_layer", "=", "act_layer", ",", "drop", "=", "drop_rate", ",", "drop_path", "=", "drop_path_rate", ")", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", "]", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "self", ".", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "init_weights", "(", "nlhb", "=", "nlhb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.init_weights": [[284, 288], ["timm.models.helpers.named_apply", "functools.partial", "math.log"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "init_weights", "(", "self", ",", "nlhb", "=", "False", ")", ":", "\n", "        ", "head_bias", "=", "-", "math", ".", "log", "(", "self", ".", "num_classes", ")", "if", "nlhb", "else", "0.", "\n", "named_apply", "(", "partial", "(", "_init_weights", ",", "head_bias", "=", "head_bias", ")", ",", "module", "=", "self", ")", "# depth-first", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.group_matcher": [[289, 294], ["dict"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "group_matcher", "(", "self", ",", "coarse", "=", "False", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "stem", "=", "r'^stem'", ",", "# stem and embed", "\n", "blocks", "=", "[", "(", "r'^blocks\\.(\\d+)'", ",", "None", ")", ",", "(", "r'^norm'", ",", "(", "99999", ",", ")", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.set_grad_checkpointing": [[296, 299], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "set_grad_checkpointing", "(", "self", ",", "enable", "=", "True", ")", ":", "\n", "        ", "self", ".", "grad_checkpointing", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.get_classifier": [[300, 303], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.reset_classifier": [[304, 310], ["torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "global_pool", "is", "not", "None", ":", "\n", "            ", "assert", "global_pool", "in", "(", "''", ",", "'avg'", ")", "\n", "self", ".", "global_pool", "=", "global_pool", "\n", "", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.forward_features": [[311, 320], ["mlp_mixer.MlpMixer.stem", "mlp_mixer.MlpMixer.blocks", "mlp_mixer.MlpMixer.norm"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "# if self.grad_checkpointing and not torch.jit.is_scripting():", "\n", "#     x = checkpoint_seq(self.blocks, x)", "\n", "# else:", "\n", "# x = self.blocks(x)", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.forward": [[321, 327], ["mlp_mixer.MlpMixer.forward_features", "len", "x.mean.mean.mean", "x.mean.mean.size"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.MlpMixer.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "if", "self", ".", "global_pool", "==", "'avg'", ":", "\n", "            ", "x", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "assert", "len", "(", "x", ".", "size", "(", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._cfg": [[53, 61], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", "0.875", ",", "'interpolation'", ":", "'bicubic'", ",", "'fixed_input_size'", ":", "True", ",", "\n", "'mean'", ":", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "'std'", ":", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "'first_conv'", ":", "'stem.proj'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._init_weights": [[329, 361], ["isinstance", "name.startswith", "isinstance", "torch.init.zeros_", "torch.init.constant_", "timm.models.layers.lecun_normal_", "isinstance", "timm.models.layers.lecun_normal_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.ones_", "torch.init.zeros_", "hasattr", "torch.init.zeros_", "module.init_weights", "torch.init.normal_", "torch.init.zeros_"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.init_weights"], ["", "", "def", "_init_weights", "(", "module", ":", "nn", ".", "Module", ",", "name", ":", "str", ",", "head_bias", ":", "float", "=", "0.", ",", "flax", "=", "False", ")", ":", "\n", "    ", "\"\"\" Mixer weight initialization (trying to match Flax defaults)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'head'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "head_bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "flax", ":", "\n", "# Flax defaults", "\n", "                ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "# like MLP init in vit (my original init)", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "if", "'mlp'", "in", "name", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "lecun_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "(", "nn", ".", "LayerNorm", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "module", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "module", ".", "bias", ")", "\n", "", "elif", "hasattr", "(", "module", ",", "'init_weights'", ")", ":", "\n", "# NOTE if a parent module contains init_weights method, it can override the init of the", "\n", "# child modules as this will be called in depth-first order.", "\n", "        ", "module", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.checkpoint_filter_fn": [[363, 378], ["state_dict.items", "k.replace.replace", "k.replace.replace", "k.replace.replace", "k.replace.replace", "k.replace.endswith", "k.replace.endswith", "v.reshape.reshape"], "function", ["None"], ["", "", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" Remap checkpoints if needed \"\"\"", "\n", "if", "'patch_embed.proj.weight'", "in", "state_dict", ":", "\n", "# Remap FB ResMlp models -> timm", "\n", "        ", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "k", "=", "k", ".", "replace", "(", "'patch_embed.'", ",", "'stem.'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'attn.'", ",", "'linear_tokens.'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'mlp.'", ",", "'mlp_channels.'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'gamma_'", ",", "'ls'", ")", "\n", "if", "k", ".", "endswith", "(", "'.alpha'", ")", "or", "k", ".", "endswith", "(", "'.beta'", ")", ":", "\n", "                ", "v", "=", "v", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "return", "out_dict", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer": [[380, 389], ["kwargs.get", "timm.models.helpers.build_model_with_cfg", "RuntimeError"], "function", ["None"], ["", "def", "_create_mixer", "(", "variant", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "kwargs", ".", "get", "(", "'features_only'", ",", "None", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'features_only not implemented for MLP-Mixer models.'", ")", "\n", "\n", "", "model", "=", "build_model_with_cfg", "(", "\n", "MlpMixer", ",", "variant", ",", "pretrained", ",", "\n", "pretrained_filter_fn", "=", "checkpoint_filter_fn", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_s32_224": [[391, 398], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_s32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-S/32 224x224\n    Paper: 'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "32", ",", "num_blocks", "=", "8", ",", "embed_dim", "=", "512", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_s32_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_s16_224": [[401, 408], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_s16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-S/16 224x224\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "8", ",", "embed_dim", "=", "512", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_s16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_b32_224": [[411, 418], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_b32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-B/32 224x224\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "32", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "768", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_b32_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_b16_224": [[421, 428], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_b16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-B/16 224x224. ImageNet-1k pretrained weights.\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "768", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_b16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_b16_224_in21k": [[431, 438], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_b16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-B/16 224x224. ImageNet-21k pretrained weights.\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "768", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_b16_224_in21k'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_l32_224": [[441, 448], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_l32_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-L/32 224x224.\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "32", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "1024", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_l32_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_l16_224": [[451, 458], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_l16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-L/16 224x224. ImageNet-1k pretrained weights.\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "1024", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_l16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_l16_224_in21k": [[461, 468], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_l16_224_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-L/16 224x224. ImageNet-21k pretrained weights.\n    Paper:  'MLP-Mixer: An all-MLP Architecture for Vision' - https://arxiv.org/abs/2105.01601\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "1024", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_l16_224_in21k'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_b16_224_miil": [[471, 478], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_b16_224_miil", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-B/16 224x224. ImageNet-21k pretrained weights.\n    Weights taken from: https://github.com/Alibaba-MIIL/ImageNet21K\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "768", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_b16_224_miil'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.mixer_b16_224_miil_in21k": [[481, 488], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "mixer_b16_224_miil_in21k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Mixer-B/16 224x224. ImageNet-1k pretrained weights.\n    Weights taken from: https://github.com/Alibaba-MIIL/ImageNet21K\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "768", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'mixer_b16_224_miil_in21k'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.gmixer_12_224": [[491, 500], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "gmixer_12_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Glu-Mixer-12 224x224\n    Experiment by Ross Wightman, adding (Si)GLU to MLP-Mixer\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "(", "1.0", ",", "4.0", ")", ",", "\n", "mlp_layer", "=", "GluMlp", ",", "act_layer", "=", "nn", ".", "SiLU", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'gmixer_12_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.gmixer_24_224": [[503, 512], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "gmixer_24_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Glu-Mixer-24 224x224\n    Experiment by Ross Wightman, adding (Si)GLU to MLP-Mixer\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "(", "1.0", ",", "4.0", ")", ",", "\n", "mlp_layer", "=", "GluMlp", ",", "act_layer", "=", "nn", ".", "SiLU", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'gmixer_24_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_12_224": [[515, 523], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_12_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-12\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "block_layer", "=", "ResBlock", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_12_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_24_224": [[526, 535], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_24_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-5", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_24_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_36_224": [[538, 547], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_36_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-36\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "36", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-6", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_36_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_big_24_224": [[550, 559], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_big_24_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-B-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "8", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-6", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_big_24_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_12_distilled_224": [[562, 570], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_12_distilled_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-12\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "block_layer", "=", "ResBlock", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_12_distilled_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_24_distilled_224": [[573, 582], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_24_distilled_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-5", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_24_distilled_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_36_distilled_224": [[585, 594], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_36_distilled_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-36\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "36", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-6", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_36_distilled_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_big_24_distilled_224": [[597, 606], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_big_24_distilled_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-B-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "8", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-6", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_big_24_distilled_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_big_24_224_in22ft1k": [[609, 618], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_big_24_224_in22ft1k", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-B-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "8", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "768", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-6", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_big_24_224_in22ft1k'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_12_224_dino": [[621, 631], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_12_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-12\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n\n    Model pretrained via DINO (self-supervised) - https://arxiv.org/abs/2104.14294\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "12", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "block_layer", "=", "ResBlock", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_12_224_dino'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.resmlp_24_224_dino": [[634, 645], ["dict", "mlp_mixer._create_mixer", "functools.partial"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "resmlp_24_224_dino", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" ResMLP-24\n    Paper: `ResMLP: Feedforward networks for image classification...` - https://arxiv.org/abs/2105.03404\n\n    Model pretrained via DINO (self-supervised) - https://arxiv.org/abs/2104.14294\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "24", ",", "embed_dim", "=", "384", ",", "mlp_ratio", "=", "4", ",", "\n", "block_layer", "=", "partial", "(", "ResBlock", ",", "init_values", "=", "1e-5", ")", ",", "norm_layer", "=", "Affine", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'resmlp_24_224_dino'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.gmlp_ti16_224": [[648, 657], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "gmlp_ti16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" gMLP-Tiny\n    Paper: `Pay Attention to MLPs` - https://arxiv.org/abs/2105.08050\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "30", ",", "embed_dim", "=", "128", ",", "mlp_ratio", "=", "6", ",", "block_layer", "=", "SpatialGatingBlock", ",", "\n", "mlp_layer", "=", "GatedMlp", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'gmlp_ti16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.gmlp_s16_224": [[660, 669], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "gmlp_s16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" gMLP-Small\n    Paper: `Pay Attention to MLPs` - https://arxiv.org/abs/2105.08050\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "30", ",", "embed_dim", "=", "256", ",", "mlp_ratio", "=", "6", ",", "block_layer", "=", "SpatialGatingBlock", ",", "\n", "mlp_layer", "=", "GatedMlp", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'gmlp_s16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer.gmlp_b16_224": [[672, 681], ["dict", "mlp_mixer._create_mixer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.mlp_mixer._create_mixer"], ["", "def", "gmlp_b16_224", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" gMLP-Base\n    Paper: `Pay Attention to MLPs` - https://arxiv.org/abs/2105.08050\n    \"\"\"", "\n", "model_args", "=", "dict", "(", "\n", "patch_size", "=", "16", ",", "num_blocks", "=", "30", ",", "embed_dim", "=", "512", ",", "mlp_ratio", "=", "6", ",", "block_layer", "=", "SpatialGatingBlock", ",", "\n", "mlp_layer", "=", "GatedMlp", ",", "**", "kwargs", ")", "\n", "model", "=", "_create_mixer", "(", "'gmlp_b16_224'", ",", "pretrained", "=", "pretrained", ",", "**", "model_args", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.DropBlock.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.DropBlock.forward": [[46, 75], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "custom_resnet.DropBlock._compute_block_mask", "custom_resnet.DropBlock.sum", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "mask.to.to.to", "custom_resnet.DropBlock.size", "custom_resnet.DropBlock.size", "custom_resnet.DropBlock.size", "custom_resnet.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "\n", "(", "\n", "batch_size", ",", "\n", "channels", ",", "\n", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "mask", "=", "mask", ".", "to", "(", "rank", ")", "\n", "", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "(", "\n", "block_mask", ".", "size", "(", ")", "[", "0", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "\n", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", ")", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.DropBlock._compute_block_mask": [[76, 120], ["int", "int", "mask.nonzero", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "offsets.long.long.to", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.ici.ICI.expand"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", "\n", ".", "view", "(", "-", "1", ",", "1", ")", "\n", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", "\n", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "# - left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", "\n", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "offsets", "=", "offsets", ".", "to", "(", "rank", ")", "\n", "\n", "", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "# block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", "\n", ")", "\n", "padded_mask", "[", "\n", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "\n", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "\n", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", "\n", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "# [:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.BasicBlock.__init__": [[125, 151], ["torch.Module.__init__", "custom_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "custom_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "custom_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "custom_resnet.DropBlock"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "drop_rate", "=", "0.0", ",", "\n", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.BasicBlock.forward": [[152, 197], ["custom_resnet.BasicBlock.conv1", "custom_resnet.BasicBlock.bn1", "custom_resnet.BasicBlock.relu", "custom_resnet.BasicBlock.conv2", "custom_resnet.BasicBlock.bn2", "custom_resnet.BasicBlock.relu", "custom_resnet.BasicBlock.conv3", "custom_resnet.BasicBlock.bn3", "custom_resnet.BasicBlock.relu", "custom_resnet.BasicBlock.maxpool", "custom_resnet.BasicBlock.downsample", "max", "custom_resnet.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "\n", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "\n", "1.0", "-", "self", ".", "drop_rate", ",", "\n", ")", "\n", "gamma", "=", "(", "\n", "(", "1", "-", "keep_rate", ")", "\n", "/", "self", ".", "block_size", "**", "2", "\n", "*", "feat_size", "**", "2", "\n", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", ")", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "\n", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", "\n", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.ResNet.__init__": [[201, 256], ["torch.Module.__init__", "custom_resnet.ResNet._make_layer", "custom_resnet.ResNet._make_layer", "custom_resnet.ResNet._make_layer", "custom_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "custom_resnet.ResNet.modules", "getattr", "isinstance", "range", "range", "range", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "keep_prob", "=", "1.0", ",", "\n", "avg_pool", "=", "False", ",", "\n", "drop_rate", "=", "0.1", ",", "\n", "dropblock_size", "=", "5", ",", "\n", "num_classes", "=", "64", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "3", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "channels", "=", "[", "64", ",", "160", ",", "320", ",", "640", "]", "\n", "self", ".", "layer_dims", "=", "[", "\n", "channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "4", ")", "for", "j", "in", "range", "(", "4", ")", "\n", "]", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "160", ",", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "320", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "640", ",", "\n", "stride", "=", "2", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "drop_block", "=", "True", ",", "\n", "block_size", "=", "dropblock_size", ",", "\n", ")", "\n", "# if avg_pool:", "\n", "#     self.avgpool = nn.AvgPool2d(1, stride=1)", "\n", "self", ".", "blocks", "=", "[", "getattr", "(", "self", ",", "f\"layer{i}\"", ")", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "640", ",", "self", ".", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"leaky_relu\"", "\n", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.ResNet._make_layer": [[257, 288], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "\n", "self", ",", "block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", "\n", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "drop_rate", ",", "\n", "drop_block", ",", "\n", "block_size", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.ResNet.forward": [[289, 296], ["range", "x.mean", "eval"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        layers: List[str]\n        \"\"\"", "\n", "for", "block", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "x", "=", "eval", "(", "f\"self.layer{block}\"", ")", "(", "x", ")", "\n", "", "return", "x", ".", "mean", "(", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet._cfg": [[14, 25], ["numpy.array", "numpy.array"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "\"input_size\"", ":", "(", "3", ",", "84", ",", "84", ")", ",", "\n", "\"keep_prob\"", ":", "1.0", ",", "\n", "\"mean\"", ":", "np", ".", "array", "(", "\n", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", ")", ",", "\n", "\"std\"", ":", "np", ".", "array", "(", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", ")", ",", "\n", "\"interpolation\"", ":", "'bilinear'", ",", "\n", "\"crop_pct\"", ":", "0.875", ",", "\n", "**", "kwargs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.conv3x3": [[33, 37], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.custom_resnet.resnet12": [[298, 301], ["custom_resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet12", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\"\"\"", "\n", "return", "ResNet", "(", "BasicBlock", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.Bottleneck.__init__": [[267, 292], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "collections.OrderedDict", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.Bottleneck.forward": [[294, 308], ["clip.Bottleneck.relu", "clip.Bottleneck.relu", "clip.Bottleneck.avgpool", "clip.Bottleneck.bn3", "clip.Bottleneck.relu", "clip.Bottleneck.bn1", "clip.Bottleneck.bn2", "clip.Bottleneck.conv3", "clip.Bottleneck.downsample", "clip.Bottleneck.conv1", "clip.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.AttentionPool2d.__init__": [[311, 319], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spacial_dim", ":", "int", ",", "embed_dim", ":", "int", ",", "num_heads", ":", "int", ",", "output_dim", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.AttentionPool2d.forward": [[320, 345], ["torch.cat.reshape().permute", "torch.cat.reshape().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "clip.AttentionPool2d.positional_embedding[].to", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n", "x", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "\n", "embed_dim_to_check", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", "in_proj_weight", "=", "None", ",", "\n", "in_proj_bias", "=", "torch", ".", "cat", "(", "[", "self", ".", "q_proj", ".", "bias", ",", "self", ".", "k_proj", ".", "bias", ",", "self", ".", "v_proj", ".", "bias", "]", ")", ",", "\n", "bias_k", "=", "None", ",", "\n", "bias_v", "=", "None", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "0", ",", "\n", "out_proj_weight", "=", "self", ".", "c_proj", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "c_proj", ".", "bias", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "need_weights", "=", "False", "\n", ")", "\n", "\n", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet.__init__": [[355, 379], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "clip.ModifiedResNet._make_layer", "clip.ModifiedResNet._make_layer", "clip.ModifiedResNet._make_layer", "clip.ModifiedResNet._make_layer", "clip.AttentionPool2d"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer"], ["def", "__init__", "(", "self", ",", "layers", ",", "output_dim", ",", "heads", ",", "input_resolution", "=", "224", ",", "width", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "# the 3-layer stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# residual layers", "\n", "self", ".", "_inplanes", "=", "width", "# this is a *mutable* variable used during construction", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "width", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "width", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "width", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "width", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "embed_dim", "=", "width", "*", "32", "# the ResNet feature dimension", "\n", "self", ".", "attnpool", "=", "AttentionPool2d", "(", "input_resolution", "//", "32", ",", "embed_dim", ",", "heads", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet._make_layer": [[380, 388], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "clip.Bottleneck", "layers.append", "clip.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ",", "stride", ")", "]", "\n", "\n", "self", ".", "_inplanes", "=", "planes", "*", "Bottleneck", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ModifiedResNet.forward": [[389, 405], ["clip.ModifiedResNet.type", "clip.ModifiedResNet.forward.stem"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "stem", "(", "x", ")", ":", "\n", "            ", "for", "conv", ",", "bn", "in", "[", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ")", ",", "(", "self", ".", "conv2", ",", "self", ".", "bn2", ")", ",", "(", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "]", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "bn", "(", "conv", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "type", "(", "self", ".", "conv1", ".", "weight", ".", "dtype", ")", "\n", "x", "=", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "attnpool", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.LayerNorm.forward": [[410, 414], ["super().forward", "super().forward.type", "x.type"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.MultiHeadAttention.forward"], ["def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "orig_type", "=", "x", ".", "dtype", "\n", "ret", "=", "super", "(", ")", ".", "forward", "(", "x", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "return", "ret", ".", "type", "(", "orig_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.QuickGELU.forward": [[417, 419], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ResidualAttentionBlock.__init__": [[422, 434], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "clip.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "clip.LayerNorm", "collections.OrderedDict", "torch.nn.Linear", "torch.nn.Linear", "clip.QuickGELU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", ",", "n_head", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_head", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"c_fc\"", ",", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "4", ")", ")", ",", "\n", "(", "\"gelu\"", ",", "QuickGELU", "(", ")", ")", ",", "\n", "(", "\"c_proj\"", ",", "nn", ".", "Linear", "(", "d_model", "*", "4", ",", "d_model", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ResidualAttentionBlock.attention": [[435, 438], ["clip.ResidualAttentionBlock.attn_mask.to", "clip.ResidualAttentionBlock.attn"], "methods", ["None"], ["", "def", "attention", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "attn_mask", "=", "self", ".", "attn_mask", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "self", ".", "attn_mask", "is", "not", "None", "else", "None", "\n", "return", "self", ".", "attn", "(", "x", ",", "x", ",", "x", ",", "need_weights", "=", "False", ",", "attn_mask", "=", "self", ".", "attn_mask", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ResidualAttentionBlock.forward": [[439, 443], ["clip.ResidualAttentionBlock.attention", "clip.ResidualAttentionBlock.mlp", "clip.ResidualAttentionBlock.ln_1", "clip.ResidualAttentionBlock.ln_2"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ResidualAttentionBlock.attention"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attention", "(", "self", ".", "ln_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.Transformer.__init__": [[446, 451], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "clip.ResidualAttentionBlock", "range"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resblocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ResidualAttentionBlock", "(", "width", ",", "heads", ",", "attn_mask", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.Transformer.forward": [[452, 454], ["clip.Transformer.resblocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "resblocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.VisionTransformer.__init__": [[457, 472], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "clip.LayerNorm", "clip.Transformer", "clip.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_resolution", ":", "int", ",", "patch_size", ":", "int", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "width", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "bias", "=", "False", ")", "\n", "\n", "scale", "=", "width", "**", "-", "0.5", "\n", "self", ".", "class_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ")", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "(", "input_resolution", "//", "patch_size", ")", "**", "2", "+", "1", ",", "width", ")", ")", "\n", "self", ".", "ln_pre", "=", "LayerNorm", "(", "width", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "width", ",", "layers", ",", "heads", ")", "\n", "\n", "self", ".", "ln_post", "=", "LayerNorm", "(", "width", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ",", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.VisionTransformer.forward": [[473, 491], ["clip.VisionTransformer.conv1", "clip.VisionTransformer.reshape", "clip.VisionTransformer.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "clip.VisionTransformer.ln_pre", "clip.VisionTransformer.permute", "clip.VisionTransformer.transformer", "clip.VisionTransformer.permute", "clip.VisionTransformer.ln_post", "clip.VisionTransformer.positional_embedding.to", "clip.VisionTransformer.class_embedding.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# shape = [*, width, grid, grid]", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# shape = [*, width, grid ** 2]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# shape = [*, grid ** 2, width]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "class_embedding", ".", "to", "(", "x", ".", "dtype", ")", "+", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "# shape = [*, grid ** 2 + 1, width]", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "to", "(", "x", ".", "dtype", ")", "\n", "x", "=", "self", ".", "ln_pre", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "\n", "x", "=", "self", ".", "ln_post", "(", "x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "@", "self", ".", "proj", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.__init__": [[494, 548], ["torch.nn.Module.__init__", "isinstance", "clip.Transformer", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "clip.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "clip.CLIP.initialize_parameters", "clip.ModifiedResNet", "clip.VisionTransformer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "clip.CLIP.build_attention_mask", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.initialize_parameters", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.build_attention_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "# vision", "\n", "image_resolution", ":", "int", ",", "\n", "vision_layers", ":", "Union", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "int", "]", ",", "\n", "vision_width", ":", "int", ",", "\n", "vision_patch_size", ":", "int", ",", "\n", "# text", "\n", "context_length", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "transformer_width", ":", "int", ",", "\n", "transformer_heads", ":", "int", ",", "\n", "transformer_layers", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "context_length", "=", "context_length", "\n", "\n", "if", "isinstance", "(", "vision_layers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "vision_heads", "=", "vision_width", "*", "32", "//", "64", "\n", "self", ".", "visual", "=", "ModifiedResNet", "(", "\n", "layers", "=", "vision_layers", ",", "\n", "output_dim", "=", "embed_dim", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "width", "=", "vision_width", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vision_heads", "=", "vision_width", "//", "64", "\n", "self", ".", "visual", "=", "VisionTransformer", "(", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "patch_size", "=", "vision_patch_size", ",", "\n", "width", "=", "vision_width", ",", "\n", "layers", "=", "vision_layers", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "output_dim", "=", "embed_dim", "\n", ")", "\n", "\n", "", "self", ".", "transformer", "=", "Transformer", "(", "\n", "width", "=", "transformer_width", ",", "\n", "layers", "=", "transformer_layers", ",", "\n", "heads", "=", "transformer_heads", ",", "\n", "attn_mask", "=", "self", ".", "build_attention_mask", "(", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "transformer_width", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "transformer_width", ")", ")", "\n", "self", ".", "ln_final", "=", "LayerNorm", "(", "transformer_width", ")", "\n", "\n", "self", ".", "text_projection", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "transformer_width", ",", "embed_dim", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", "*", "np", ".", "log", "(", "1", "/", "0.07", ")", ")", "\n", "\n", "self", ".", "initialize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.initialize_parameters": [[549, 577], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "resnet_block.named_parameters", "name.endswith", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "initialize_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "token_embedding", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "positional_embedding", ",", "std", "=", "0.01", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "visual", ",", "ModifiedResNet", ")", ":", "\n", "            ", "if", "self", ".", "visual", ".", "attnpool", "is", "not", "None", ":", "\n", "                ", "std", "=", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "in_features", "**", "-", "0.5", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "q_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "k_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "v_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "\n", "", "for", "resnet_block", "in", "[", "self", ".", "visual", ".", "layer1", ",", "self", ".", "visual", ".", "layer2", ",", "self", ".", "visual", ".", "layer3", ",", "self", ".", "visual", ".", "layer4", "]", ":", "\n", "                ", "for", "name", ",", "param", "in", "resnet_block", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", ".", "endswith", "(", "\"bn3.weight\"", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n", "", "", "", "", "proj_std", "=", "(", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "*", "(", "(", "2", "*", "self", ".", "transformer", ".", "layers", ")", "**", "-", "0.5", ")", "\n", "attn_std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", "\n", "fc_std", "=", "(", "2", "*", "self", ".", "transformer", ".", "width", ")", "**", "-", "0.5", "\n", "for", "block", "in", "self", ".", "transformer", ".", "resblocks", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "in_proj_weight", ",", "std", "=", "attn_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "out_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_fc", ".", "weight", ",", "std", "=", "fc_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "\n", "", "if", "self", ".", "text_projection", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "text_projection", ",", "std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.build_attention_mask": [[578, 585], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty.fill_", "torch.empty.fill_", "torch.empty.triu_", "torch.empty.triu_", "float"], "methods", ["None"], ["", "", "def", "build_attention_mask", "(", "self", ")", ":", "\n", "# lazily create causal attention mask, with full attention between the vision tokens", "\n", "# pytorch uses additive attention mask; fill with -inf", "\n", "        ", "mask", "=", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "self", ".", "context_length", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"-inf\"", ")", ")", "\n", "mask", ".", "triu_", "(", "1", ")", "# zero out the lower diagonal", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.dtype": [[586, 589], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "visual", ".", "conv1", ".", "weight", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.encode_image": [[590, 592], ["clip.CLIP.visual", "image.type"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "visual", "(", "image", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.encode_text": [[593, 607], ["clip.CLIP.token_embedding().type", "clip.CLIP.permute", "clip.CLIP.transformer", "clip.CLIP.permute", "clip.CLIP.ln_final().type", "clip.CLIP.positional_embedding.type", "clip.CLIP.token_embedding", "clip.CLIP.ln_final", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "text.argmax"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "x", "=", "self", ".", "token_embedding", "(", "text", ")", ".", "type", "(", "self", ".", "dtype", ")", "# [batch_size, n_ctx, d_model]", "\n", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.forward": [[608, 611], ["clip.CLIP.encode_image().to", "clip.CLIP.encode_image"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.CLIP.encode_image"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image_features", "=", "self", ".", "encode_image", "(", "image", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "return", "image_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip._cfg": [[47, 57], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "\"url\"", ":", "url", ",", "\n", "\"num_classes\"", ":", "1000", ",", "\n", "\"input_size\"", ":", "(", "3", ",", "224", ",", "224", ")", ",", "\n", "\"interpolation\"", ":", "\"bicubic\"", ",", "\n", "\"crop_pct\"", ":", "0.875", ",", "\n", "\"mean\"", ":", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "\n", "\"std\"", ":", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ",", "\n", "**", "kwargs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip._download": [[67, 97], ["os.makedirs", "os.path.basename", "os.path.join", "os.path.isfile", "url.split", "os.path.exists", "RuntimeError", "urllib.request.urlopen", "open", "hashlib.sha256().hexdigest", "RuntimeError", "os.path.isfile", "hashlib.sha256().hexdigest", "warnings.warn", "tqdm.tqdm", "source.read", "output.write", "loop.update", "hashlib.sha256", "hashlib.sha256", "int", "len", "open().read", "open().read", "source.info().get", "open", "open", "source.info"], "function", ["None"], ["def", "_download", "(", "url", ":", "str", ",", "root", ":", "str", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "expected_sha256", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "download_target", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "download_target", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"{download_target} exists and is not a regular file\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "==", "expected_sha256", ":", "\n", "            ", "return", "download_target", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"{download_target} exists, but the SHA256 checksum does not match; re-downloading the file\"", ")", "\n", "\n", "", "", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "source", ",", "open", "(", "download_target", ",", "\"wb\"", ")", "as", "output", ":", "\n", "        ", "with", "tqdm", "(", "total", "=", "int", "(", "source", ".", "info", "(", ")", ".", "get", "(", "\"Content-Length\"", ")", ")", ",", "ncols", "=", "80", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ",", "unit_divisor", "=", "1024", ")", "as", "loop", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "buffer", "=", "source", ".", "read", "(", "8192", ")", "\n", "if", "not", "buffer", ":", "\n", "                    ", "break", "\n", "\n", "", "output", ".", "write", "(", "buffer", ")", "\n", "loop", ".", "update", "(", "len", "(", "buffer", ")", ")", "\n", "\n", "", "", "", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "!=", "expected_sha256", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model has been downloaded but the SHA256 checksum does not not match\"", ")", "\n", "\n", "", "return", "download_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip._convert_image_to_rgb": [[99, 101], ["image.convert"], "function", ["None"], ["", "def", "_convert_image_to_rgb", "(", "image", ")", ":", "\n", "    ", "return", "image", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip._transform": [[103, 110], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "_transform", "(", "n_px", ")", ":", "\n", "    ", "return", "Compose", "(", "[", "\n", "Resize", "(", "n_px", ",", "interpolation", "=", "BICUBIC", ")", ",", "\n", "CenterCrop", "(", "n_px", ")", ",", "\n", "_convert_image_to_rgb", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.available_models": [[113, 116], ["list", "_MODELS.keys"], "function", ["None"], ["", "def", "available_models", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Returns the names of available CLIP models\"\"\"", "\n", "return", "list", "(", "_MODELS", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load": [[118, 219], ["torch.jit.trace", "torch.jit.trace", "torch.jit.load().eval.apply", "clip.load.patch_device"], "function", ["None"], ["", "def", "load", "(", "name", ":", "str", ",", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "jit", ":", "bool", "=", "False", ",", "download_root", ":", "str", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load a CLIP model\n\n    Parameters\n    ----------\n    name : str\n        A model name listed by `clip.available_models()`, or the path to a model checkpoint containing the state_dict\n\n    device : Union[str, torch.device]\n        The device to put the loaded model\n\n    jit : bool\n        Whether to load the optimized JIT model or more hackable non-JIT model (default).\n\n    download_root: str\n        path to download the model files; by default, it uses \"~/.cache/clip\"\n\n    Returns\n    -------\n    model : torch.nn.Module\n        The CLIP model\n\n    preprocess : Callable[[PIL.Image], torch.Tensor]\n        A torchvision transform that converts a PIL image into a tensor that the returned model can take as its input\n    \"\"\"", "\n", "if", "name", "in", "_MODELS", ":", "\n", "        ", "model_path", "=", "_download", "(", "_MODELS", "[", "name", "]", ",", "download_root", "or", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "name", ")", ":", "\n", "        ", "model_path", "=", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model {name} not found; available models = {available_models()}\"", ")", "\n", "\n", "", "with", "open", "(", "model_path", ",", "'rb'", ")", "as", "opened_file", ":", "\n", "        ", "try", ":", "\n", "# loading JIT archive", "\n", "            ", "model", "=", "torch", ".", "jit", ".", "load", "(", "opened_file", ",", "map_location", "=", "device", "if", "jit", "else", "\"cpu\"", ")", ".", "eval", "(", ")", "\n", "state_dict", "=", "None", "\n", "", "except", "RuntimeError", ":", "\n", "# loading saved state dict", "\n", "            ", "if", "jit", ":", "\n", "                ", "warnings", ".", "warn", "(", "f\"File {model_path} is not a JIT archive. Loading as a state dict instead\"", ")", "\n", "jit", "=", "False", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "opened_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "", "if", "not", "jit", ":", "\n", "        ", "model", "=", "build_model", "(", "state_dict", "or", "model", ".", "state_dict", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "            ", "model", ".", "float", "(", ")", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "visual", ".", "input_resolution", ")", "\n", "\n", "# patch the device names", "\n", "", "device_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "device_node", "=", "[", "n", "for", "n", "in", "device_holder", ".", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", "if", "\"Device\"", "in", "repr", "(", "n", ")", "]", "[", "-", "1", "]", "\n", "\n", "def", "patch_device", "(", "module", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "graphs", "=", "[", "]", "\n", "\n", "", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "            ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "            ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", ":", "\n", "                ", "if", "\"value\"", "in", "node", ".", "attributeNames", "(", ")", "and", "str", "(", "node", "[", "\"value\"", "]", ")", ".", "startswith", "(", "\"cuda\"", ")", ":", "\n", "                    ", "node", ".", "copyAttributes", "(", "device_node", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "patch_device", ")", "\n", "patch_device", "(", "model", ".", "encode_image", ")", "\n", "patch_device", "(", "model", ".", "encode_text", ")", "\n", "\n", "# patch dtype to float32 on CPU", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "        ", "float_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "float", "(", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "float_input", "=", "list", "(", "float_holder", ".", "graph", ".", "findNode", "(", "\"aten::to\"", ")", ".", "inputs", "(", ")", ")", "[", "1", "]", "\n", "float_node", "=", "float_input", ".", "node", "(", ")", "\n", "\n", "def", "patch_float", "(", "module", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "", "except", "RuntimeError", ":", "\n", "                ", "graphs", "=", "[", "]", "\n", "\n", "", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "                ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "                ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"aten::to\"", ")", ":", "\n", "                    ", "inputs", "=", "list", "(", "node", ".", "inputs", "(", ")", ")", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "# dtype can be the second or third argument to aten::to()", "\n", "                        ", "if", "inputs", "[", "i", "]", ".", "node", "(", ")", "[", "\"value\"", "]", "==", "5", ":", "\n", "                            ", "inputs", "[", "i", "]", ".", "node", "(", ")", ".", "copyAttributes", "(", "float_node", ")", "\n", "\n", "", "", "", "", "", "model", ".", "apply", "(", "patch_float", ")", "\n", "patch_float", "(", "model", ".", "encode_image", ")", "\n", "patch_float", "(", "model", ".", "encode_text", ")", "\n", "\n", "model", ".", "float", "(", ")", "\n", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "input_resolution", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.tokenize": [[221, 262], ["isinstance", "enumerate", "pkg_resources.packaging.version.parse", "pkg_resources.packaging.version.parse", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "len", "len", "len", "_tokenizer.encode", "RuntimeError", "len"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.encode"], ["", "def", "tokenize", "(", "texts", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "context_length", ":", "int", "=", "77", ",", "truncate", ":", "bool", "=", "False", ")", "->", "Union", "[", "torch", ".", "IntTensor", ",", "torch", ".", "LongTensor", "]", ":", "\n", "    ", "\"\"\"\n    Returns the tokenized representation of given input string(s)\n\n    Parameters\n    ----------\n    texts : Union[str, List[str]]\n        An input string or a list of input strings to tokenize\n\n    context_length : int\n        The context length to use; all CLIP models use 77 as the context length\n\n    truncate: bool\n        Whether to truncate the text in case its encoding is longer than the context length\n\n    Returns\n    -------\n    A two-dimensional tensor containing the resulting tokens, shape = [number of input strings, context_length].\n    We return LongTensor when torch version is <1.8.0, since older index_select requires indices to be long.\n    \"\"\"", "\n", "if", "isinstance", "(", "texts", ",", "str", ")", ":", "\n", "        ", "texts", "=", "[", "texts", "]", "\n", "\n", "", "sot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<|startoftext|>\"", "]", "\n", "eot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<|endoftext|>\"", "]", "\n", "all_tokens", "=", "[", "[", "sot_token", "]", "+", "_tokenizer", ".", "encode", "(", "text", ")", "+", "[", "eot_token", "]", "for", "text", "in", "texts", "]", "\n", "if", "packaging", ".", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "packaging", ".", "version", ".", "parse", "(", "\"1.8.0\"", ")", ":", "\n", "        ", "result", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "        ", "result", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "", "for", "i", ",", "tokens", "in", "enumerate", "(", "all_tokens", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", ">", "context_length", ":", "\n", "            ", "if", "truncate", ":", "\n", "                ", "tokens", "=", "tokens", "[", ":", "context_length", "]", "\n", "tokens", "[", "-", "1", "]", "=", "eot_token", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Input {texts[i]} is too long for context length {context_length}\"", ")", "\n", "", "", "result", "[", "i", ",", ":", "len", "(", "tokens", ")", "]", "=", "torch", ".", "tensor", "(", "tokens", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.convert_weights": [[625, 647], ["model.apply", "isinstance", "isinstance", "l.weight.data.half", "hasattr", "l.bias.data.half", "getattr", "getattr", "getattr.data.half", "getattr.data.half"], "function", ["None"], ["", "", "def", "convert_weights", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Convert applicable model parameters to fp16\"\"\"", "\n", "\n", "def", "_convert_weights_to_fp16", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "                ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "l", ",", "nn", ".", "MultiheadAttention", ")", ":", "\n", "            ", "for", "attr", "in", "[", "*", "[", "f\"{s}_proj_weight\"", "for", "s", "in", "[", "\"in\"", ",", "\"q\"", ",", "\"k\"", ",", "\"v\"", "]", "]", ",", "\"in_proj_bias\"", ",", "\"bias_k\"", ",", "\"bias_v\"", "]", ":", "\n", "                ", "tensor", "=", "getattr", "(", "l", ",", "attr", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "                    ", "tensor", ".", "data", "=", "tensor", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "for", "name", "in", "[", "\"text_projection\"", ",", "\"proj\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "l", ",", "name", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "l", ",", "name", ")", "\n", "if", "attr", "is", "not", "None", ":", "\n", "                    ", "attr", ".", "data", "=", "attr", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "_convert_weights_to_fp16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.build_model": [[649, 687], ["len", "clip.CLIP", "clip.convert_weights", "CLIP.load_state_dict", "CLIP.eval", "len", "round", "tuple", "round", "set", "len", "set", "state_dict.keys", "k.split", "k.startswith", "k.startswith", "k.endswith", "k.split", "k.startswith"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.convert_weights"], ["", "def", "build_model", "(", "state_dict", ":", "dict", ")", ":", "\n", "    ", "vit", "=", "\"visual.proj\"", "in", "state_dict", "\n", "\n", "if", "vit", ":", "\n", "        ", "vision_width", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "vision_layers", "=", "len", "(", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"visual.\"", ")", "and", "k", ".", "endswith", "(", "\".attn.in_proj_weight\"", ")", "]", ")", "\n", "vision_patch_size", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "grid_size", "=", "round", "(", "(", "state_dict", "[", "\"visual.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "image_resolution", "=", "vision_patch_size", "*", "grid_size", "\n", "", "else", ":", "\n", "        ", "counts", ":", "list", "=", "[", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"visual.layer{b}\"", ")", ")", ")", "for", "b", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "vision_layers", "=", "tuple", "(", "counts", ")", "\n", "vision_width", "=", "state_dict", "[", "\"visual.layer1.0.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "output_width", "=", "round", "(", "(", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "vision_patch_size", "=", "None", "\n", "assert", "output_width", "**", "2", "+", "1", "==", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "image_resolution", "=", "output_width", "*", "32", "\n", "\n", "", "embed_dim", "=", "state_dict", "[", "\"text_projection\"", "]", ".", "shape", "[", "1", "]", "\n", "context_length", "=", "state_dict", "[", "\"positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "vocab_size", "=", "state_dict", "[", "\"token_embedding.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_width", "=", "state_dict", "[", "\"ln_final.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_heads", "=", "transformer_width", "//", "64", "\n", "transformer_layers", "=", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"transformer.resblocks\"", ")", ")", ")", "\n", "\n", "model", "=", "CLIP", "(", "\n", "embed_dim", ",", "\n", "image_resolution", ",", "vision_layers", ",", "vision_width", ",", "vision_patch_size", ",", "\n", "context_length", ",", "vocab_size", ",", "transformer_width", ",", "transformer_heads", ",", "transformer_layers", "\n", ")", "\n", "\n", "for", "key", "in", "[", "\"input_resolution\"", ",", "\"context_length\"", ",", "\"vocab_size\"", "]", ":", "\n", "        ", "if", "key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "convert_weights", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.clip_resnet50": [[689, 692], ["clip.load", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "clip_resnet50", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", ",", "preprocess", "=", "load", "(", "\"RN50\"", ",", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.clip_vit_base_patch16": [[694, 697], ["clip.load", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "clip_vit_base_patch16", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", ",", "preprocess", "=", "load", "(", "\"ViT-B/16\"", ",", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.wide_basic.__init__": [[44, 58], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.wide_basic.forward": [[60, 66], ["wide_resnet.wide_basic.dropout", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.shortcut", "wide_resnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.wide_basic.bn2", "wide_resnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet.__init__": [[69, 92], ["torch.Module.__init__", "int", "print", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "\"Wide-resnet depth should be 6n+4\"", "\n", "n", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "\"| Wide-Resnet %dx%d\"", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "640", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet._wide_layer": [[93, 102], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.Wide_ResNet.forward": [[103, 111], ["wide_resnet.Wide_ResNet.conv1", "range", "wide_resnet.Wide_ResNet.mean", "eval"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        layers: List[str]\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "for", "block", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "x", "=", "eval", "(", "f\"self.layer{block}\"", ")", "(", "x", ")", "\n", "", "return", "x", ".", "mean", "(", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet._cfg": [[11, 19], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "\"input_size\"", ":", "(", "3", ",", "84", ",", "84", ")", ",", "\n", "\"mean\"", ":", "IMAGENET_DEFAULT_MEAN", ",", "\n", "\"std\"", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "\"crop_pct\"", ":", "0.875", ",", "\n", "\"interpolation\"", ":", "'bilinear'", ",", "\n", "**", "kwargs", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv3x3": [[27, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.conv_init": [[33, 41], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"Conv\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "\"BatchNorm\"", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.wide_resnet.wrn2810": [[113, 117], ["wide_resnet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wrn2810", "(", "**", "kwargs", ")", ":", "\n", "\n", "    ", "model", "=", "Wide_ResNet", "(", "28", ",", "10", ",", "0.0", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.BasicBlock.__init__": [[447, 507], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "act_layer", "resnet.create_aa", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "timm.models.layers.create_attn", "act_layer"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.create_aa"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.BasicBlock.zero_init_last_bn": [[508, 510], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.BasicBlock.forward": [[511, 541], ["isinstance", "type", "resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.act1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.act2", "resnet.BasicBlock.drop_block", "resnet.BasicBlock.aa", "resnet.BasicBlock.drop_block", "resnet.BasicBlock.se", "resnet.BasicBlock.drop_path", "resnet.BasicBlock.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.Bottleneck.__init__": [[546, 601], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "act_layer", "resnet.create_aa", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "timm.models.layers.create_attn", "act_layer", "math.floor"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.create_aa"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.Bottleneck.zero_init_last_bn": [[602, 604], ["torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.Bottleneck.forward": [[605, 640], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.act1", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.act2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.act3", "resnet.Bottleneck.drop_block", "resnet.Bottleneck.drop_block", "resnet.Bottleneck.aa", "resnet.Bottleneck.drop_block", "resnet.Bottleneck.se", "resnet.Bottleneck.drop_path", "resnet.Bottleneck.downsample"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.__init__": [[859, 990], ["torch.Module.__init__", "norm_layer", "act_layer", "resnet.make_blocks", "resnet.ResNet.feature_info.extend", "timm.models.layers.create_classifier", "resnet.ResNet.init_weights", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.ResNet.add_module", "range", "range", "issubclass", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "filter", "aa_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "resnet.create_aa", "norm_layer", "act_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "aa_layer"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.make_blocks", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.create_aa"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.init_weights": [[991, 1002], ["resnet.ResNet.named_modules", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "hasattr", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "m.zero_init_last_bn"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.Bottleneck.zero_init_last_bn"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.get_classifier": [[1003, 1005], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.reset_classifier": [[1006, 1010], ["timm.models.layers.create_classifier"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ResNet.forward": [[1012, 1021], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.act1", "resnet.ResNet.maxpool", "range", "resnet.ResNet.mean", "eval"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._cfg": [[33, 46], ["None"], "function", ["None"], ["        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "widths", "is", "None", ":", "\n", "            ", "widths", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "use_fc", "=", "use_fc", "\n", "self", ".", "avg_pool", "=", "avg_pool", "\n", "\n", "self", ".", "conv1", "=", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "imagenet_setup", "\n", "else", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.get_padding": [[429, 432], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.create_aa": [[434, 441], ["issubclass", "aa_layer", "aa_layer"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.downsample_conv": [[642, 668], ["resnet.get_padding", "torch.Sequential", "torch.Conv2d", "norm_layer"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.get_padding"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.downsample_avg": [[672, 696], ["torch.Sequential", "torch.Identity", "avg_pool_fn", "torch.Conv2d", "norm_layer"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.drop_blocks": [[700, 706], ["timm.models.layers.DropBlock2d", "timm.models.layers.DropBlock2d"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.make_blocks": [[709, 787], ["sum", "enumerate", "zip", "dict", "range", "stages.append", "feature_info.append", "resnet.drop_blocks", "dict", "blocks.append", "dict", "resnet.downsample_avg", "resnet.downsample_conv", "block_fn", "torch.Sequential", "kwargs.get", "timm.models.layers.DropPath"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.drop_blocks", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.downsample_avg", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.downsample_conv"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet": [[1023, 1026], ["timm.models.helpers.build_model_with_cfg"], "function", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet18": [[1029, 1033], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet18d": [[1035, 1046], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet34": [[1048, 1052], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet34d": [[1054, 1065], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet26": [[1067, 1071], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet26t": [[1073, 1084], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet26d": [[1086, 1097], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet50": [[1099, 1103], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.dino_resnet50": [[1105, 1109], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet50d": [[1111, 1122], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet50t": [[1124, 1135], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet101": [[1137, 1141], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet101d": [[1143, 1154], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet152": [[1156, 1160], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet152d": [[1162, 1173], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet200": [[1175, 1179], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet200d": [[1181, 1192], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.tv_resnet34": [[1194, 1198], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.tv_resnet50": [[1200, 1204], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.tv_resnet101": [[1206, 1210], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.tv_resnet152": [[1212, 1216], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.wide_resnet50_2": [[1218, 1227], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.wide_resnet101_2": [[1229, 1237], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnet50_gn": [[1239, 1243], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnext50_32x4d": [[1245, 1251], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnext50d_32x4d": [[1253, 1266], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnext101_32x4d": [[1268, 1274], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnext101_32x8d": [[1276, 1282], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnext101_64x4d": [[1284, 1290], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.tv_resnext50_32x4d": [[1292, 1298], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ig_resnext101_32x8d": [[1300, 1310], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ig_resnext101_32x16d": [[1312, 1322], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ig_resnext101_32x32d": [[1324, 1334], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ig_resnext101_32x48d": [[1336, 1346], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnet18": [[1348, 1355], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnet50": [[1357, 1364], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnext50_32x4d": [[1366, 1375], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnext101_32x4d": [[1377, 1386], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnext101_32x8d": [[1388, 1397], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ssl_resnext101_32x16d": [[1399, 1408], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnet18": [[1410, 1418], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnet50": [[1420, 1428], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnext50_32x4d": [[1430, 1440], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnext101_32x4d": [[1442, 1452], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnext101_32x8d": [[1454, 1464], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.swsl_resnext101_32x16d": [[1466, 1476], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet26t": [[1478, 1493], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet50d": [[1495, 1507], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs50": [[1509, 1526], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs101": [[1528, 1545], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs152": [[1547, 1564], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs200": [[1566, 1583], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs270": [[1585, 1602], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs350": [[1604, 1621], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetrs420": [[1623, 1640], ["functools.partial", "dict", "resnet._create_resnet", "timm.models.layers.get_attn", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet50d_pruned": [[1642, 1656], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet50t": [[1658, 1672], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnetlight": [[1674, 1685], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet101d": [[1687, 1699], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet101d_pruned": [[1701, 1715], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet200d": [[1717, 1729], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnet269d": [[1731, 1743], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnext26t_32x4d": [[1745, 1762], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.ecaresnext50t_32x4d": [[1764, 1781], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetblur18": [[1783, 1789], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetblur50": [[1791, 1797], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetblur50d": [[1799, 1811], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetblur101d": [[1813, 1825], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetaa50d": [[1827, 1839], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.resnetaa101d": [[1841, 1853], ["dict", "resnet._create_resnet"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnetaa50d": [[1855, 1868], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet18": [[1870, 1878], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet34": [[1880, 1888], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet50": [[1890, 1898], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet50t": [[1900, 1911], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet101": [[1913, 1921], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet152": [[1923, 1931], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet152d": [[1933, 1944], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet200d": [[1946, 1958], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnet269d": [[1960, 1972], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext26d_32x4d": [[1974, 1991], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext26t_32x4d": [[1993, 2010], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext26tn_32x4d": [[2012, 2018], ["resnet.seresnext26t_32x4d"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext26t_32x4d"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext50_32x4d": [[2020, 2030], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext101_32x4d": [[2032, 2042], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.seresnext101_32x8d": [[2044, 2054], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet.senet154": [[2056, 2069], ["dict", "resnet._create_resnet", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.resnet._create_resnet"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.ScaledDotProductAttention.__init__": [[18, 23], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.ScaledDotProductAttention.forward": [[24, 34], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "misc.ScaledDotProductAttention.softmax", "misc.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "raw_attn", "=", "attn", "\n", "log_attn", "=", "F", ".", "log_softmax", "(", "attn", ",", "2", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "return", "output", ",", "attn", ",", "log_attn", ",", "raw_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.MultiHeadAttention.__init__": [[39, 64], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "misc.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.power", "hasattr", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "probe_attn", "=", "None", "\n", "self", ".", "probe_q", "=", "None", "\n", "self", ".", "probe_k", "=", "None", "\n", "self", ".", "probe_v", "=", "None", "\n", "self", ".", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", "\n", "self", ".", "flag_norm", "=", "args", ".", "slf_flag_norm", "if", "hasattr", "(", "args", ",", "\"slf_flag_norm\"", ")", "else", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.MultiHeadAttention.forward": [[65, 102], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "misc.MultiHeadAttention.w_qs().view", "misc.MultiHeadAttention.w_ks().view", "misc.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "misc.MultiHeadAttention.attention", "misc.MultiHeadAttention.view", "misc.MultiHeadAttention.permute().contiguous().view", "misc.MultiHeadAttention.fc", "misc.MultiHeadAttention.dropout", "misc.MultiHeadAttention.layer_norm", "misc.MultiHeadAttention.w_qs", "misc.MultiHeadAttention.w_ks", "misc.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "misc.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "misc.MultiHeadAttention.permute"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.ResidualAttentionBlock.attention"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "        ", "\"\"\"\n        # q\n        \"\"\"", "\n", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_q", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_q", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "self", ".", "probe_q", "=", "q", "\n", "self", ".", "probe_k", "=", "k", "\n", "self", ".", "probe_v", "=", "v", "\n", "\n", "output", ",", "attn", ",", "log_attn", ",", "raw_attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ")", "\n", "self", ".", "probe_attn", "=", "attn", "\n", "self", ".", "probe_raw_attn", "=", "raw_attn", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_q", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "(", "\n", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_q", ",", "len_q", ",", "-", "1", ")", "\n", ")", "# b x lq x (n*dv)", "\n", "resout", "=", "self", ".", "fc", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "resout", ")", "\n", "if", "self", ".", "flag_norm", ":", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "output", "\n", "\n", "", "return", "output", ",", "resout", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.__init__": [[157, 173], ["misc.default_bpe", "misc.bytes_to_unicode", "gzip.open().read().decode().split", "list", "list.extend", "dict", "dict", "regex.compile", "tuple", "bytes_to_unicode().values", "list.append", "zip", "zip", "misc.SimpleTokenizer.byte_encoder.items", "gzip.open().read().decode", "merge.split", "range", "misc.SimpleTokenizer.encoder.items", "range", "misc.bytes_to_unicode", "len", "len", "gzip.open().read", "gzip.open"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.default_bpe", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.bytes_to_unicode", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.decode", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.bytes_to_unicode"], ["    ", "def", "__init__", "(", "self", ",", "bpe_path", ":", "str", "=", "default_bpe", "(", ")", ")", ":", "\n", "        ", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "gzip", ".", "open", "(", "bpe_path", ")", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "\n", "merges", "=", "merges", "[", "1", ":", "49152", "-", "256", "-", "2", "+", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "vocab", "=", "list", "(", "bytes_to_unicode", "(", ")", ".", "values", "(", ")", ")", "\n", "vocab", "=", "vocab", "+", "[", "v", "+", "'</w>'", "for", "v", "in", "vocab", "]", "\n", "for", "merge", "in", "merges", ":", "\n", "            ", "vocab", ".", "append", "(", "''", ".", "join", "(", "merge", ")", ")", "\n", "", "vocab", ".", "extend", "(", "[", "'<|startoftext|>'", ",", "'<|endoftext|>'", "]", ")", "\n", "self", ".", "encoder", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "'<|startoftext|>'", ":", "'<|startoftext|>'", ",", "'<|endoftext|>'", ":", "'<|endoftext|>'", "}", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[\\p{L}]+|[\\p{N}]|[^\\s\\p{L}\\p{N}]+\"\"\"", ",", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.bpe": [[174, 214], ["misc.get_pairs", "tuple", "min", "tuple", "len", "len", "misc.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "misc.SimpleTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.get_pairs", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.encode": [[215, 222], ["whitespace_clean().lower", "regex.findall", "bpe_tokens.extend", "misc.whitespace_clean", "misc.basic_clean", "token.encode", "misc.SimpleTokenizer.bpe().split", "misc.SimpleTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.whitespace_clean", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.basic_clean", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.encode", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "text", "=", "whitespace_clean", "(", "basic_clean", "(", "text", ")", ")", ".", "lower", "(", ")", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.decode": [[223, 227], ["bytearray().decode().replace", "bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.SimpleTokenizer.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "\"replace\"", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", "\n", "return", "text", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.default_bpe": [[104, 107], ["functools.lru_cache", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["", "", "@", "lru_cache", "(", ")", "\n", "def", "default_bpe", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"bpe_simple_vocab_16e6.txt.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.bytes_to_unicode": [[109, 130], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["", "@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.get_pairs": [[132, 142], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.basic_clean": [[144, 148], ["ftfy.fix_text", "html.unescape", "html.unescape.strip", "html.unescape"], "function", ["None"], ["", "def", "basic_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "ftfy", ".", "fix_text", "(", "text", ")", "\n", "text", "=", "html", ".", "unescape", "(", "html", ".", "unescape", "(", "text", ")", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.misc.whitespace_clean": [[150, 154], ["regex.sub", "text.strip.strip"], "function", ["None"], ["", "def", "whitespace_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.few_shot_methods.tim.AbstractTIM.__init__": [[18, 29], ["src.few_shot_methods.AbstractFewShotMethod.__init__"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "softmax_temperature", ":", "float", ",", "\n", "inference_steps", ":", "int", ",", "\n", "inference_lr", ":", "float", ",", "\n", "loss_weights", ":", "List", "[", "float", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "self", ".", "inference_steps", "=", "inference_steps", "\n", "self", ".", "inference_lr", "=", "inference_lr", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.few_shot_methods.tim.TIM_GD.classify_support_and_queries": [[32, 73], ["support_labels.unique().size", "torch.one_hot", "torch.one_hot", "easyfsl.utils.compute_prototypes", "tim.TIM_GD.prototypes.requires_grad_", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "tim.TIM_GD.get_logits_from_euclidean_distances_to_prototypes", "tim.TIM_GD.get_logits_from_euclidean_distances_to_prototypes", "tim.TIM_GD.softmax", "tim.TIM_GD.softmax.mean", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "tim.TIM_GD.softmax().detach", "tim.TIM_GD.softmax().detach", "support_labels.unique", "tim.TIM_GD.softmax", "tim.TIM_GD.softmax", "torch.log", "torch.log", "torch.log", "torch.log", "tim.TIM_GD.log_softmax", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.get_logits_from_euclidean_distances_to_prototypes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.classifiers.abstract.FewShotMethod.get_logits_from_euclidean_distances_to_prototypes"], ["", "", "class", "TIM_GD", "(", "AbstractTIM", ")", ":", "\n", "    ", "def", "forward", "(", "\n", "self", ",", "\n", "support_features", ":", "Tensor", ",", "\n", "query_features", ":", "Tensor", ",", "\n", "support_labels", ":", "Tensor", ",", "\n", "**", "kwargs", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "\n", "        ", "unlabelled_data", "=", "query_features", "\n", "\n", "# Metric dic", "\n", "num_classes", "=", "support_labels", ".", "unique", "(", ")", ".", "size", "(", "0", ")", "\n", "support_labels_one_hot", "=", "F", ".", "one_hot", "(", "support_labels", ",", "num_classes", ")", "\n", "\n", "# Initialize weights", "\n", "self", ".", "prototypes", "=", "compute_prototypes", "(", "support_features", ",", "support_labels", ")", "\n", "\n", "# Run adaptation", "\n", "self", ".", "prototypes", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "self", ".", "prototypes", "]", ",", "lr", "=", "self", ".", "inference_lr", ")", "\n", "\n", "q_cond_ent_values", "=", "[", "]", "\n", "q_ent_values", "=", "[", "]", "\n", "ce_values", "=", "[", "]", "\n", "acc_values", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "inference_steps", ")", ":", "\n", "            ", "logits_s", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "support_features", "\n", ")", "\n", "logits_q", "=", "self", ".", "get_logits_from_cosine_distances_to_prototypes", "(", "\n", "unlabelled_data", "\n", ")", "\n", "\n", "ce", "=", "-", "(", "support_labels_one_hot", "*", "logits_s", ".", "log_softmax", "(", "1", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "q_probs", "=", "logits_q", ".", "softmax", "(", "1", ")", "\n", "q_cond_ent", "=", "-", "(", "q_probs", "*", "torch", ".", "log", "(", "q_probs", "+", "1e-12", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "marginal_y", "=", "q_probs", ".", "mean", "(", "0", ")", "\n", "q_ent", "=", "-", "(", "marginal_y", "*", "torch", ".", "log", "(", "marginal_y", ")", ")", ".", "sum", "(", "0", ")", "\n", "\n", "loss", "=", "self", ".", "loss_weights", "[", "0", "]", "*", "ce", "-", "(", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.__init__": [[21, 23], ["None"], "methods", ["None"], ["\n", "", "def", "compute_auc", "(", "self", ",", "outlierness", ",", "**", "kwargs", ")", ":", "\n", "        ", "fp_rate", ",", "tp_rate", ",", "thresholds", "=", "roc_curve", "(", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.from_cli_args": [[24, 29], ["inspect.signature", "cls", "args._get_kwargs", "inspect.signature.parameters.keys"], "methods", ["None"], ["kwargs", "[", "\"outliers\"", "]", ".", "numpy", "(", ")", ",", "outlierness", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "return", "auc_fn", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n", "", "def", "clear", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.__call__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "\n", "self", ",", "support_features", ":", "Tensor", ",", "query_features", ":", "Tensor", ",", "support_labels", ":", "Tensor", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.__str__": [[34, 41], ["list", "len", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.compute_auc": [[42, 47], ["sklearn.metrics.roc_curve", "sklearn.metrics.auc", "kwargs[].numpy", "outlierness.cpu().numpy", "outlierness.cpu"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.FeatureTransform.__repr__": [[48, 55], ["list", "len", "inspect.signature", "type", "getattr", "type"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_cli_args", "(", "cls", ",", "args", ")", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "cls", ".", "__init__", ")", "\n", "return", "cls", "(", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", "if", "k", "in", "signature", ".", "parameters", ".", "keys", "(", ")", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.SequentialTransform.__init__": [[58, 60], ["None"], "methods", ["None"], ["        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n", "            ", "arg_names", ".", "remove", "(", "\"args\"", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.SequentialTransform.__str__": [[61, 63], ["str"], "methods", ["None"], ["", "if", "len", "(", "arg_names", ")", ":", "\n", "            ", "args", "=", "[", "f\"{k}={getattr(self, k)}\"", "for", "k", "in", "arg_names", "]", "\n", "return", "f\"{type(self).__name__}({','.join(args)})\"", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.SequentialTransform.__repr__": [[64, 66], ["repr"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.SequentialTransform.__call__": [[67, 71], ["transf"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "arg_names", "=", "list", "(", "inspect", ".", "signature", "(", "self", ".", "__init__", ")", ".", "parameters", ")", "\n", "if", "\"args\"", "in", "arg_names", ":", "\n", "            ", "arg_names", ".", "remove", "(", "\"args\"", ")", "\n", "", "if", "len", "(", "arg_names", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__init__": [[74, 77], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "return", "type", "(", "self", ")", ".", "__name__", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Power.__call__": [[78, 82], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "raw_feat_s.relu", "raw_feat_q.relu"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.QRreduction.__call__": [[89, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "all_features.t.t.t", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "torch.qr", "all_features.t.t.t", "raw_feat_s.size", "raw_feat_s.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Trivial.__call__": [[100, 102], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.BaseCentering.__call__": [[108, 114], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.L2norm.__call__": [[117, 123], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.Pool.__call__": [[126, 134], ["len", "raw_feat_s.size", "raw_feat_s.mean", "raw_feat_q.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.transforms.abstract.MeanCentering.__call__": [[137, 145], ["torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean.size", "torch.cat().mean.size", "torch.cat().mean.size", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().mean.size", "torch.cat().mean.size", "torch.cat().mean.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.main": [[20, 73], ["loguru.logger.info", "pipelines.compute_features.params.BACKBONE().to", "BACKBONE().to.load_state_dict", "BACKBONE().to.eval", "loguru.logger.info", "compute_features.infer_on_dataset", "train_features.mean", "loguru.logger.info", "compute_features.infer_on_dataset", "loguru.logger.info", "output_file.parent.mkdir", "loguru.logger.info", "compute_features.strip_prefix", "open", "pickle.dump", "pipelines.compute_features.params.BACKBONE", "torch.load", "set", "numpy.where"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.infer_on_dataset", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.infer_on_dataset", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["parser", ".", "add_argument", "(", "\"--override\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"False\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--keep_all_train_features\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "type", "=", "str2bool", ",", "default", "=", "\"False\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Fetching data...\"", ")", "\n", "dataset", ",", "_", ",", "data_loader", "=", "get_classic_loader", "(", "\n", "args", ",", "\n", "dataset_name", "=", "args", ".", "tgt_dataset", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Building model...\"", ")", "\n", "if", "args", ".", "model_source", "==", "\"timm\"", ":", "\n", "        ", "weights", "=", "None", "\n", "stem", "=", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}\"", "# used for saving features downstream", "\n", "", "else", ":", "\n", "        ", "weights", "=", "(", "\n", "Path", "(", "args", ".", "data_dir", ")", "\n", "/", "\"models\"", "\n", "/", "args", ".", "training", "\n", "/", "f\"{args.backbone}_{args.src_dataset}_{args.model_source}.pth\"", "\n", ")", "\n", "stem", "=", "weights", ".", "stem", "\n", "", "feature_extractor", "=", "load_model", "(", "\n", "args", ",", "args", ".", "backbone", ",", "weights", ",", "args", ".", "src_dataset", ",", "args", ".", "device", "\n", ")", "\n", "\n", "pickle_name", "=", "Path", "(", "stem", ")", ".", "with_suffix", "(", "f\".pickle\"", ")", ".", "name", "\n", "output_file", "=", "(", "\n", "Path", "(", "\"data\"", ")", "\n", "/", "\"features\"", "\n", "/", "args", ".", "src_dataset", "\n", "/", "args", ".", "tgt_dataset", "\n", "/", "args", ".", "split", "\n", "/", "args", ".", "training", "\n", "/", "pickle_name", "\n", ")", "\n", "output_file", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# First checking whether those features already exist", "\n", "if", "output_file", ".", "exists", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f\"File {output_file} already exists.\"", ")", "\n", "if", "args", ".", "override", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Overriding.\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Not overriding.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.infer_on_dataset": [[75, 83], ["loguru.logger.info", "src.utils.data_fetchers.get_classic_loader", "loguru.logger.info", "src.utils.utils.compute_features"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.data_fetchers.get_classic_loader", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.compute_features"], ["", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "f\"File {output_file} does not exist. Performing extraction.\"", ")", "\n", "", "logger", ".", "info", "(", "\"Computing features...\"", ")", "\n", "features", ",", "labels", "=", "compute_features", "(", "\n", "feature_extractor", ",", "\n", "data_loader", ",", "\n", "device", "=", "args", ".", "device", ",", "\n", "split", "=", "args", ".", "split", ",", "\n", "keep_all_train_features", "=", "args", ".", "keep_all_train_features", ",", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.compute_features.compute_features.strip_prefix": [[85, 90], ["collections.OrderedDict", "state_dict.items", "k.startswith", "len"], "function", ["None"], [")", "\n", "\n", "# if output_file is None:", "\n", "\n", "if", "args", ".", "split", "==", "\"test\"", "or", "args", ".", "split", "==", "\"val\"", "or", "args", ".", "keep_all_train_features", ":", "\n", "        ", "logger", ".", "info", "(", "\"Packing by class...\"", ")", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.inference.classify_queries.main": [[32, 91], ["src.utils.utils.set_random_seed", "loguru.logger.info", "src.utils.data_fetchers.get_features_data_loader", "loguru.logger.info", "src.feature_transforms.SequentialFeatureTransformer", "src.feature_transforms.SequentialFeatureTransformer", "pipelines.inference.params.CLASSIFIER.from_args", "loguru.logger.info", "classify_queries.classify_queries", "output_file.parent.mkdir", "classify_queries.to_csv", "loguru.logger.info", "open", "pickle.load", "dict", "transformer.from_args", "transformer.from_args", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.set_random_seed", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.inference.classify_queries.classify_queries", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args"], ["def", "main", "(", "dataset", ":", "str", ")", ":", "\n", "    ", "set_random_seed", "(", "RANDOM_SEED", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Loading features for {dataset}...\"", ")", "\n", "with", "open", "(", "FEATURES_DIR", "/", "f\"{dataset}.pickle\"", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "        ", "saved_features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "\n", "", "data_loader", "=", "get_features_data_loader", "(", "\n", "features_dict", "=", "saved_features", "[", "\"test_set_features\"", "]", ",", "\n", "features_to_center_on", "=", "None", ",", "\n", "n_way", "=", "N_WAY", ",", "\n", "n_shot", "=", "N_SHOT", ",", "\n", "n_query", "=", "N_QUERY", ",", "\n", "n_tasks", "=", "N_TASKS", ",", "\n", "n_workers", "=", "N_WORKERS", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Building model: {CLASSIFIER.__name__}\"", ")", "\n", "\n", "prepool_transformer", "=", "SequentialFeatureTransformer", "(", "\n", "[", "\n", "transformer", ".", "from_args", "(", "\n", "dict", "(", "\n", "average_train_features", "=", "saved_features", "[", "\"average_train_set_features\"", "]", ",", "\n", "**", "TRANSFORMERS_ARGS", ",", "\n", ")", "\n", ")", "\n", "for", "transformer", "in", "PREPOOL_TRANSFORMERS", "\n", "]", "\n", ")", "\n", "\n", "postpool_transformer", "=", "SequentialFeatureTransformer", "(", "\n", "[", "\n", "transformer", ".", "from_args", "(", "\n", "dict", "(", "\n", "average_train_features", "=", "saved_features", "[", "\"average_train_set_features\"", "]", ",", "\n", "**", "TRANSFORMERS_ARGS", ",", "\n", ")", "\n", ")", "\n", "for", "transformer", "in", "POSTPOOL_TRANSFORMERS", "\n", "]", "\n", ")", "\n", "\n", "few_shot_classifier", "=", "CLASSIFIER", ".", "from_args", "(", "\n", "dict", "(", "\n", "prepool_feature_transformer", "=", "prepool_transformer", ",", "\n", "postpool_transformer", "=", "postpool_transformer", ",", "\n", "**", "CLASSIFIER_ARGS", ",", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Running inference on {N_TASKS} tasks...\"", ")", "\n", "predictions_df", "=", "classify_queries", "(", "few_shot_classifier", ",", "data_loader", ",", "N_WAY", ",", "N_QUERY", ")", "\n", "\n", "# Saving results", "\n", "output_file", "=", "PREDICTIONS_DIR", "/", "dataset", "/", "\"classifications.csv\"", "\n", "output_file", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "predictions_df", ".", "to_csv", "(", "output_file", ")", "\n", "logger", ".", "info", "(", "f\"Predictions dumped to {output_file}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.inference.classify_queries.classify_queries": [[93, 126], ["tqdm.tqdm", "pandas.concat", "enumerate", "few_shot_classifier", "query_predictions.max", "predictions_df_list.append", "pandas.DataFrame", "pipelines.inference.params.N_WAY", "pipelines.inference.params.N_QUERY"], "function", ["None"], ["", "def", "classify_queries", "(", "\n", "few_shot_classifier", ":", "AbstractFewShotMethod", ",", "\n", "data_loader", ":", "DataLoader", ",", "\n", "n_way", ":", "int", ",", "\n", "n_query", ":", "int", ",", "\n", ")", ":", "\n", "    ", "predictions_df_list", "=", "[", "]", "\n", "for", "task_id", ",", "(", "\n", "support_features", ",", "\n", "support_labels", ",", "\n", "query_features", ",", "\n", "query_labels", ",", "\n", "_", ",", "\n", ")", "in", "tqdm", "(", "enumerate", "(", "data_loader", ")", ")", ":", "\n", "        ", "_", ",", "query_predictions", "=", "few_shot_classifier", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "predicted_labels", "=", "query_predictions", ".", "max", "(", "dim", "=", "1", ")", "\n", "predictions_df_list", ".", "append", "(", "\n", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"task\"", ":", "task_id", ",", "\n", "\"outlier\"", ":", "(", "n_way", "*", "n_query", ")", "*", "[", "False", "]", "+", "(", "n_way", "*", "n_query", ")", "*", "[", "True", "]", ",", "\n", "\"true_label\"", ":", "query_labels", ",", "\n", "\"predicted_label\"", ":", "predicted_labels", ".", "indices", ",", "\n", "\"prediction_confidence\"", ":", "predicted_labels", ".", "values", ",", "\n", "}", "\n", ")", "\n", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "predictions_df_list", ",", "ignore_index", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.inference.compute_metrics.main": [[16, 74], ["pandas.read_csv", "[].mean", "pandas.read_csv", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.precision_recall_curve", "loguru.logger.info", "loguru.logger.info", "pandas.DataFrame().to_csv", "loguru.logger.info", "open", "json.dump", "next", "next", "pandas.DataFrame", "json.dumps", "enumerate", "enumerate"], "function", ["None"], ["def", "main", "(", "dataset", ":", "str", ")", ":", "\n", "    ", "dataset_predictions_dir", "=", "PREDICTIONS_DIR", "/", "dataset", "\n", "\n", "# Classification metrics", "\n", "\n", "classification_predictions_df", "=", "pd", ".", "read_csv", "(", "\n", "dataset_predictions_dir", "/", "\"classifications.csv\"", "\n", ")", "\n", "accuracy", "=", "(", "\n", "(", "\n", "classification_predictions_df", ".", "true_label", "\n", "==", "classification_predictions_df", ".", "predicted_label", "\n", ")", "\n", ".", "loc", "[", "classification_predictions_df", ".", "outlier", "==", "False", "]", "\n", ".", "mean", "(", ")", "\n", ")", "\n", "\n", "# Outlier detection metrics", "\n", "\n", "outlier_predictions_df", "=", "pd", ".", "read_csv", "(", "dataset_predictions_dir", "/", "\"outliers.csv\"", ")", "\n", "\n", "fp_rate", ",", "tp_rate", ",", "_", "=", "roc_curve", "(", "\n", "outlier_predictions_df", ".", "outlier", ",", "outlier_predictions_df", ".", "outlier_score", "\n", ")", "\n", "auroc", "=", "auc", "(", "fp_rate", ",", "tp_rate", ")", "\n", "\n", "precisions", ",", "recalls", ",", "_", "=", "precision_recall_curve", "(", "\n", "outlier_predictions_df", ".", "outlier", ",", "-", "outlier_predictions_df", ".", "outlier_score", "\n", ")", "\n", "precision_at_recall_objective", "=", "precisions", "[", "\n", "next", "(", "i", "for", "i", ",", "value", "in", "enumerate", "(", "recalls", ")", "if", "value", "<", "OBJECTIVE", ")", "\n", "]", "\n", "recall_at_precision_objective", "=", "recalls", "[", "\n", "next", "(", "i", "for", "i", ",", "value", "in", "enumerate", "(", "precisions", ")", "if", "value", ">", "OBJECTIVE", ")", "\n", "]", "\n", "\n", "metrics", "=", "{", "\n", "\"accuracy\"", ":", "accuracy", ",", "\n", "\"auroc\"", ":", "auroc", ",", "\n", "\"precision_for_recall\"", ":", "precision_at_recall_objective", ",", "\n", "\"recall_for_precision\"", ":", "recall_at_precision_objective", ",", "\n", "}", "\n", "\n", "metrics_path", "=", "dataset_predictions_dir", "/", "\"metrics.json\"", "\n", "logger", ".", "info", "(", "f\"Metrics: {json.dumps(metrics, indent=4)}\"", ")", "\n", "\n", "with", "open", "(", "metrics_path", ",", "\"w\"", ")", "as", "stream", ":", "\n", "        ", "json", ".", "dump", "(", "metrics", ",", "stream", ",", "indent", "=", "4", ")", "\n", "", "logger", ".", "info", "(", "f\"Metrics dumped to {metrics_path}.\"", ")", "\n", "\n", "roc_file_path", "=", "dataset_predictions_dir", "/", "\"roc_curve.csv\"", "\n", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"false_positive_rate\"", ":", "fp_rate", ",", "\n", "\"true_positive_rate\"", ":", "tp_rate", ",", "\n", "}", "\n", ")", ".", "to_csv", "(", "roc_file_path", ",", "index", "=", "False", ")", "\n", "logger", ".", "info", "(", "f\"ROC dumped to {roc_file_path}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.inference.detect_outliers.main": [[27, 88], ["src.utils.utils.set_random_seed", "loguru.logger.info", "src.utils.data_fetchers.get_features_data_loader", "loguru.logger.info", "pipelines.inference.params.CLASSIFIER.from_args", "src.feature_transforms.SequentialFeatureTransformer", "src.feature_transforms.SequentialFeatureTransformer", "pipelines.inference.params.DETECTOR.from_args", "loguru.logger.info", "src.utils.outlier_detectors.detect_outliers", "output_file.parent.mkdir", "src.utils.outlier_detectors.detect_outliers.to_csv", "loguru.logger.info", "open", "pickle.load", "dict", "transformer.from_args", "transformer.from_args", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.utils.set_random_seed", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.outlier_detectors.detect_outliers", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.src.outlier_detection_methods.AbstractOutlierDetector.from_args"], ["def", "main", "(", "dataset", ":", "str", ")", ":", "\n", "    ", "set_random_seed", "(", "RANDOM_SEED", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Loading features for {dataset}...\"", ")", "\n", "with", "open", "(", "FEATURES_DIR", "/", "f\"{dataset}.pickle\"", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "        ", "saved_features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "\n", "", "data_loader", "=", "get_features_data_loader", "(", "\n", "features_dict", "=", "saved_features", "[", "\"test_set_features\"", "]", ",", "\n", "features_to_center_on", "=", "None", ",", "\n", "n_way", "=", "N_WAY", ",", "\n", "n_shot", "=", "N_SHOT", ",", "\n", "n_query", "=", "N_QUERY", ",", "\n", "n_tasks", "=", "N_TASKS", ",", "\n", "n_workers", "=", "N_WORKERS", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Building model: {DETECTOR.__name__}\"", ")", "\n", "few_shot_classifier", "=", "CLASSIFIER", ".", "from_args", "(", "CLASSIFIER_ARGS", ")", "\n", "\n", "prepool_transformer", "=", "SequentialFeatureTransformer", "(", "\n", "[", "\n", "transformer", ".", "from_args", "(", "\n", "dict", "(", "\n", "average_train_features", "=", "saved_features", "[", "\"average_train_set_features\"", "]", ",", "\n", "**", "TRANSFORMERS_ARGS", ",", "\n", ")", "\n", ")", "\n", "for", "transformer", "in", "PREPOOL_TRANSFORMERS", "\n", "]", "\n", ")", "\n", "\n", "postpool_transformer", "=", "SequentialFeatureTransformer", "(", "\n", "[", "\n", "transformer", ".", "from_args", "(", "\n", "dict", "(", "\n", "average_train_features", "=", "saved_features", "[", "\"average_train_set_features\"", "]", ",", "\n", "**", "TRANSFORMERS_ARGS", ",", "\n", ")", "\n", ")", "\n", "for", "transformer", "in", "POSTPOOL_TRANSFORMERS", "\n", "]", "\n", ")", "\n", "\n", "outlier_detector", "=", "DETECTOR", ".", "from_args", "(", "\n", "dict", "(", "\n", "prepool_feature_transformer", "=", "prepool_transformer", ",", "\n", "postpool_transformer", "=", "postpool_transformer", ",", "\n", "few_shot_classifier", "=", "few_shot_classifier", ",", "\n", "**", "DETECTOR_ARGS", ",", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Running inference on {N_TASKS} tasks...\"", ")", "\n", "outliers_df", "=", "detect_outliers", "(", "outlier_detector", ",", "data_loader", ",", "N_WAY", ",", "N_QUERY", ")", "\n", "\n", "# Saving results", "\n", "output_file", "=", "PREDICTIONS_DIR", "/", "dataset", "/", "\"outliers.csv\"", "\n", "output_file", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "outliers_df", ".", "to_csv", "(", "output_file", ")", "\n", "logger", ".", "info", "(", "f\"Predictions dumped to {output_file}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.get_class_names": [[41, 50], ["pandas.read_csv().class_name.unique", "open", "line.rstrip().split", "pathlib.Path", "pandas.read_csv", "word.split", "line.rstrip"], "function", ["None"], ["def", "get_class_names", "(", "dataset", ",", "split", ",", "key", ")", ":", "\n", "    ", "selected_specs_file", "=", "Path", "(", "\"data\"", ")", "/", "dataset", "/", "\"specs\"", "/", "f\"{split}_images.csv\"", "\n", "synset_codes", "=", "pd", ".", "read_csv", "(", "selected_specs_file", ")", ".", "class_name", ".", "unique", "(", ")", "\n", "words", "=", "{", "}", "\n", "with", "open", "(", "IMAGENET_WORDS_PATH", ",", "\"r\"", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "synset", ",", "word", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "words", "[", "synset", "]", "=", "word", ".", "split", "(", "\",\"", ")", "[", "0", "]", "\n", "", "", "return", "[", "words", "[", "synset", "]", "for", "synset", "in", "synset_codes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.select_classes": [[52, 64], ["streamlit.expander", "streamlit.checkbox", "streamlit.multiselect", "streamlit.multiselect"], "function", ["None"], ["", "def", "select_classes", "(", "class_names", ",", "key", ")", ":", "\n", "    ", "with", "st", ".", "expander", "(", "\"Select classes to plot\"", ")", ":", "\n", "        ", "select_all", "=", "st", ".", "checkbox", "(", "\"All classes\"", ",", "value", "=", "True", ",", "key", "=", "key", ")", "\n", "\n", "if", "select_all", ":", "\n", "            ", "selected_options", "=", "st", ".", "multiselect", "(", "\n", "\"Classes\"", ",", "class_names", ",", "default", "=", "class_names", ",", "key", "=", "key", "\n", ")", "\n", "", "else", ":", "\n", "            ", "selected_options", "=", "st", ".", "multiselect", "(", "\"Classes\"", ",", "class_names", ",", "key", "=", "key", ")", "\n", "\n", "", "return", "selected_options", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.map_label": [[66, 69], ["features.label.apply"], "function", ["None"], ["", "", "def", "map_label", "(", "features", ":", "pd", ".", "DataFrame", ",", "class_names", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "features", ".", "label", "=", "features", ".", "label", ".", "apply", "(", "lambda", "label", ":", "class_names", "[", "label", "]", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.compute_2d_features": [[71, 79], ["sklearn.manifold.TSNE().fit_transform", "pandas.concat().assign", "numpy.concatenate", "sklearn.manifold.TSNE", "list", "pandas.concat", "src.utils.utils.normalize().values", "pandas.DataFrame", "src.utils.utils.normalize", "features.items", "len", "int"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "compute_2d_features", "(", "features", ":", "Dict", "[", "int", ",", "ndarray", "]", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "reduced_features", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "\"pca\"", ")", ".", "fit_transform", "(", "\n", "np", ".", "concatenate", "(", "list", "(", "normalize", "(", "features", ")", ".", "values", "(", ")", ")", ")", "\n", ")", "\n", "\n", "return", "pd", ".", "concat", "(", "\n", "[", "pd", ".", "DataFrame", "(", "{", "\"label\"", ":", "len", "(", "v", ")", "*", "[", "int", "(", "k", ")", "]", "}", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "]", "\n", ")", ".", "assign", "(", "x", "=", "reduced_features", "[", ":", ",", "0", "]", ",", "y", "=", "reduced_features", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.compute_or_retrieve_2d_features": [[81, 97], ["features_path.with_name", "features_path.with_name.is_file", "pandas.read_csv", "streamlit.write", "st_clusters_mini.compute_2d_features", "compute_2d_features.to_csv", "open", "pickle.load", "pickle.load.items"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "compute_or_retrieve_2d_features", "(", "features_path", ",", "features", "=", "None", ",", "only_20", "=", "False", ")", ":", "\n", "# TODO : if features change or the method changes, this will not recompute 2d features", "\n", "    ", "reduced_features_file_name", "=", "features_path", ".", "with_name", "(", "f\"{features_path.stem}_2d.csv\"", ")", "\n", "if", "reduced_features_file_name", ".", "is_file", "(", ")", ":", "\n", "        ", "reduced_features", "=", "pd", ".", "read_csv", "(", "reduced_features_file_name", ")", "\n", "", "else", ":", "\n", "        ", "st", ".", "write", "(", "\"Computing TSNE...\"", ")", "\n", "if", "features", "is", "None", ":", "\n", "            ", "with", "open", "(", "features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "                ", "features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "\n", "", "", "reduced_features", "=", "compute_2d_features", "(", "\n", "{", "k", ":", "v", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "if", "k", "<", "20", "}", "if", "only_20", "else", "features", "\n", ")", "\n", "reduced_features", ".", "to_csv", "(", "reduced_features_file_name", ",", "index", "=", "False", ")", "\n", "", "return", "reduced_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.plot_2d_features": [[99, 128], ["matplotlib.pyplot.figure", "plt.figure.add_subplot", "streamlit.button", "streamlit.slider", "itertools.cycle", "features.loc[].groupby", "matplotlib.pyplot.axis", "streamlit.write", "fig.add_subplot.scatter", "len", "matplotlib.pyplot.legend", "len", "len", "len", "random.shuffle", "next", "df.label.isin"], "function", ["None"], ["", "def", "plot_2d_features", "(", "features", ",", "classes_to_plot", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "colors", "=", "COLORS_64", "if", "len", "(", "classes_to_plot", ")", ">", "40", "else", "COLORS_20", "\n", "st", ".", "button", "(", "\n", "\"Shuffle colors\"", ",", "on_click", "=", "lambda", ":", "shuffle", "(", "colors", ")", ",", "key", "=", "len", "(", "classes_to_plot", ")", "\n", ")", "\n", "width", "=", "st", ".", "slider", "(", "\n", "\"Point size\"", ",", "min_value", "=", "0.1", ",", "max_value", "=", "20.0", ",", "value", "=", "3.5", ",", "key", "=", "len", "(", "classes_to_plot", ")", "\n", ")", "\n", "\n", "colors_cycle", "=", "itertools", ".", "cycle", "(", "colors", ")", "\n", "\n", "for", "label", ",", "group", "in", "features", ".", "loc", "[", "lambda", "df", ":", "df", ".", "label", ".", "isin", "(", "classes_to_plot", ")", "]", ".", "groupby", "(", "\n", "\"label\"", "\n", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "\n", "group", ".", "x", ",", "\n", "group", ".", "y", ",", "\n", "s", "=", "width", ",", "\n", "marker", "=", "\"o\"", ",", "\n", "label", "=", "label", ",", "\n", "color", "=", "next", "(", "colors_cycle", ")", ",", "\n", ")", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "if", "len", "(", "classes_to_plot", ")", "<", "10", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ",", "ncol", "=", "2", ",", "fontsize", "=", "\"xx-small\"", ")", "\n", "", "st", ".", "write", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.print_clustering_statistics_for_all_features": [[130, 149], ["pandas.DataFrame().assign", "streamlit.title", "streamlit.write", "src.utils.plots_and_metrics.clustering_variances_ratio", "all_stats.append", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.clustering_variances_ratio"], ["", "def", "print_clustering_statistics_for_all_features", "(", "features_paths_list", ")", ":", "\n", "    ", "all_stats", "=", "[", "]", "\n", "for", "feature_path", "in", "features_paths_list", ":", "\n", "        ", "statistics", "=", "clustering_variances_ratio", "(", "feature_path", ")", "\n", "all_stats", ".", "append", "(", "\n", "{", "\n", "\"backbone\"", ":", "feature_path", ".", "stem", ",", "\n", "\"split\"", ":", "feature_path", ".", "parent", ".", "name", ",", "\n", "\"sigma_within\"", ":", "statistics", "[", "0", "]", ",", "\n", "\"sigma_between\"", ":", "statistics", "[", "1", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "stats_df", "=", "pd", ".", "DataFrame", "(", "all_stats", ")", ".", "assign", "(", "\n", "ratio", "=", "lambda", "df", ":", "df", ".", "sigma_within", "/", "df", ".", "sigma_between", "\n", ")", "\n", "\n", "st", ".", "title", "(", "\"Clustering statistics\"", ")", "\n", "st", ".", "write", "(", "stats_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_clusters_mini.plot_clusters": [[151, 203], ["streamlit.selectbox", "streamlit.selectbox", "src.utils.plots_and_metrics.compute_mif_with_auroc", "streamlit.write", "st_clusters_mini.get_class_names", "st_clusters_mini.select_classes", "src.utils.plots_and_metrics.clustering_variances_ratio", "streamlit.write", "streamlit.checkbox", "st_clusters_mini.compute_or_retrieve_2d_features", "st_clusters_mini.map_label", "st_clusters_mini.plot_2d_features", "open", "pickle.load", "src.utils.utils.normalize", "streamlit.write", "v.reshape", "src.utils.utils.normalize.items"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.compute_mif_with_auroc", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.get_class_names", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.select_classes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.clustering_variances_ratio", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_or_retrieve_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.map_label", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.plot_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "plot_clusters", "(", "key", ")", ":", "\n", "    ", "backbone", "=", "st", ".", "selectbox", "(", "\n", "\"Model\"", ",", "\n", "MODELS_LIST", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "layer", "=", "\"last\"", "if", "backbone", "==", "\"wrn2810\"", "else", "\"4_4\"", "\n", "split", "=", "st", ".", "selectbox", "(", "\n", "\"Split\"", ",", "\n", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "try", ":", "\n", "        ", "pickle_basename", "=", "f\"{backbone}_mini_imagenet_feat_{layer}.pickle\"", "\n", "test_features_path", "=", "(", "\n", "DATA_ROOT", "\n", "/", "\"features\"", "\n", "/", "\"mini_imagenet\"", "\n", "/", "\"mini_imagenet_bis\"", "\n", "/", "split", "\n", "/", "\"standard\"", "\n", "/", "pickle_basename", "\n", ")", "\n", "\n", "with", "open", "(", "test_features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "            ", "test_features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "# WRN returns a weird shape for the features (n_instances, n_channels, 1, 1)", "\n", "test_features", "=", "{", "\n", "k", ":", "v", ".", "reshape", "(", "v", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "k", ",", "v", "in", "test_features", ".", "items", "(", ")", "\n", "}", "\n", "test_features", "=", "normalize", "(", "test_features", ")", "\n", "# test_features = {k: v for k, v in test_features.items() if k<20}", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "        ", "st", ".", "write", "(", "\"No features for this combination\"", ")", "\n", "return", "\n", "\n", "", "mean_auroc", "=", "compute_mif_with_auroc", "(", "features", "=", "test_features", ")", "\n", "st", ".", "write", "(", "mean_auroc", ")", "\n", "class_names", "=", "get_class_names", "(", "\"mini_imagenet\"", ",", "split", ",", "key", ")", "\n", "selected_classes", "=", "select_classes", "(", "class_names", ",", "key", ")", "\n", "\n", "ratio", ",", "sigma_within", ",", "sig_between", "=", "clustering_variances_ratio", "(", "test_features", ")", "\n", "st", ".", "write", "(", "\n", "f\"Test set stats: sigma_within={sigma_within}, sigma_between={sig_between}, ratio={ratio}\"", "\n", ")", "\n", "\n", "only_20", "=", "st", ".", "checkbox", "(", "\"Only 20 classes\"", ",", "key", "=", "key", ")", "\n", "reduced_features", "=", "compute_or_retrieve_2d_features", "(", "\n", "test_features_path", ",", "test_features", ",", "only_20", "=", "only_20", "\n", ")", "\n", "reduced_features", "=", "map_label", "(", "reduced_features", ",", "class_names", ")", "\n", "plot_2d_features", "(", "reduced_features", ",", "selected_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.select_class": [[83, 90], ["streamlit.selectbox", "class_dict.keys", "src.outlier_detection_methods.ALL_OUTLIER_DETECTORS", "src.few_shot_methods.ALL_FEW_SHOT_CLASSIFIERS"], "function", ["None"], ["def", "select_class", "(", "class_list", ",", "name", ")", ":", "\n", "    ", "class_dict", "=", "{", "x", ".", "__name__", ":", "x", "for", "x", "in", "class_list", "}", "\n", "class_str", "=", "st", ".", "selectbox", "(", "\n", "name", ",", "\n", "class_dict", ".", "keys", "(", ")", ",", "\n", ")", "\n", "return", "class_dict", "[", "class_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_transformers": [[92, 102], ["streamlit.multiselect", "src.feature_transforms.SequentialFeatureTransformer", "transformers_dict.keys", "st_outlier_detection.get_args"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_args"], ["", "def", "get_transformers", "(", "key", "=", "0", ")", ":", "\n", "    ", "transformers_dict", "=", "{", "x", ".", "__name__", ":", "x", "for", "x", "in", "ALL_FEATURE_TRANSFORMERS", "}", "\n", "selected_transformers", "=", "st", ".", "multiselect", "(", "\n", "\"Feature transformers\"", ",", "transformers_dict", ".", "keys", "(", ")", ",", "key", "=", "key", "\n", ")", "\n", "instantiated_transformers", "=", "[", "\n", "transformers_dict", "[", "transformer", "]", "(", "**", "get_args", "(", "transformers_dict", "[", "transformer", "]", ")", ")", "\n", "for", "transformer", "in", "selected_transformers", "\n", "]", "\n", "return", "SequentialFeatureTransformer", "(", "instantiated_transformers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_args": [[104, 132], ["inspect.signature", "inspect.signature.parameters.items", "parameter.annotation", "parameter.annotation", "streamlit.number_input", "streamlit.number_input", "parameter.annotation", "streamlit.text_input", "parameter.annotation", "streamlit.checkbox"], "function", ["None"], ["", "def", "get_args", "(", "class_", ",", "extra", "=", "None", ")", ":", "\n", "    ", "signature", "=", "inspect", ".", "signature", "(", "class_", ".", "__init__", ")", "\n", "args", "=", "{", "}", "\n", "for", "parameter_name", ",", "parameter", "in", "signature", ".", "parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "parameter", ".", "annotation", "in", "[", "float", "]", ":", "\n", "            ", "args", "[", "parameter_name", "]", "=", "parameter", ".", "annotation", "(", "\n", "st", ".", "number_input", "(", "\n", "parameter_name", ",", "\n", "value", "=", "parameter", ".", "default", ",", "\n", "format", "=", "\"%1.4f\"", "if", "parameter", ".", "default", "<", "0.1", "else", "\"%0.2f\"", ",", "\n", ")", "\n", ")", "\n", "", "if", "parameter", ".", "annotation", "in", "[", "int", "]", ":", "\n", "            ", "args", "[", "parameter_name", "]", "=", "parameter", ".", "annotation", "(", "\n", "st", ".", "number_input", "(", "parameter_name", ",", "value", "=", "parameter", ".", "default", ")", "\n", ")", "\n", "", "elif", "parameter", ".", "annotation", "in", "[", "str", "]", ":", "\n", "            ", "args", "[", "parameter_name", "]", "=", "parameter", ".", "annotation", "(", "\n", "st", ".", "text_input", "(", "parameter_name", ",", "value", "=", "parameter", ".", "default", ")", "\n", ")", "\n", "", "elif", "parameter", ".", "annotation", "in", "[", "bool", "]", ":", "\n", "            ", "args", "[", "parameter_name", "]", "=", "parameter", ".", "annotation", "(", "\n", "st", ".", "checkbox", "(", "parameter_name", ",", "value", "=", "parameter", ".", "default", ")", "\n", ")", "\n", "", "elif", "extra", "is", "not", "None", ":", "\n", "            ", "if", "parameter_name", "in", "extra", ":", "\n", "                ", "args", "[", "parameter_name", "]", "=", "None", "\n", "", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.evaluate_classifier": [[134, 170], ["tqdm", "tqdm.tqdm", "streamlit.write", "streamlit.write", "streamlit.write", "classifier", "query_predictions.argmax", "[].tolist", "[].tolist", "accuracy_list.append", "query_predictions.max", "support_predictions.max", "statistics.mean", "src.utils.plots_and_metrics.confidence_interval", "statistics.mean", "src.utils.plots_and_metrics.confidence_interval", "statistics.mean", "src.utils.plots_and_metrics.confidence_interval", "statistics.stdev", "len", "statistics.stdev", "len", "statistics.stdev", "len", "hard_query_predictions[].detach"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.confidence_interval", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.confidence_interval", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.utils.plots_and_metrics.confidence_interval"], ["", "def", "evaluate_classifier", "(", "classifier", ")", ":", "\n", "    ", "accuracy_list", "=", "[", "]", "\n", "query_top_1_score_list", "=", "[", "]", "\n", "support_top_1_score_list", "=", "[", "]", "\n", "for", "support_features", ",", "support_labels", ",", "query_features", ",", "query_labels", ",", "_", "in", "tqdm", "(", "\n", "data_loader", ",", "desc", "=", "\"Evaluating the classifier...\"", "\n", ")", ":", "\n", "        ", "support_predictions", ",", "query_predictions", "=", "classifier", "(", "\n", "support_features", "=", "support_features", ",", "\n", "query_features", "=", "query_features", ",", "\n", "support_labels", "=", "support_labels", ",", "\n", ")", "\n", "hard_query_predictions", "=", "query_predictions", ".", "argmax", "(", "-", "1", ")", "\n", "query_top_1_score_list", "+=", "query_predictions", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "support_top_1_score_list", "+=", "support_predictions", ".", "max", "(", "-", "1", ")", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "accuracy_list", ".", "append", "(", "\n", "(", "\n", "hard_query_predictions", "[", ":", "n_way", "*", "n_query", "]", ".", "detach", "(", ")", ".", "data", "\n", "==", "query_labels", "[", ":", "n_way", "*", "n_query", "]", "\n", ")", "\n", ".", "sum", "(", ")", "\n", ".", "item", "(", ")", "\n", "/", "(", "n_way", "*", "n_query", ")", "\n", ")", "\n", "", "st", ".", "write", "(", "\n", "f\"Average classifier accuracy: {(100 * mean(accuracy_list)):.2f}\"", "\n", "f\" +- {(100 * confidence_interval(stdev(accuracy_list), len(accuracy_list))):.2f} %\"", "\n", ")", "\n", "st", ".", "write", "(", "\n", "f\"Average Top-1 score for queries: {(100 * mean(query_top_1_score_list)):.2f}\"", "\n", "f\" +- {(100 * confidence_interval(stdev(query_top_1_score_list), len(query_top_1_score_list))):.2f} %\"", "\n", ")", "\n", "\n", "st", ".", "write", "(", "\n", "f\"Average Top-1 score for support examples: {(100 * mean(support_top_1_score_list)):.2f}\"", "\n", "f\" +- {(100 * confidence_interval(stdev(support_top_1_score_list), len(support_top_1_score_list))):.2f} %\"", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_detector": [[174, 198], ["streamlit.header", "st_outlier_detection.select_class", "st_outlier_detection.get_args", "st_outlier_detection.get_transformers", "st_outlier_detection.get_transformers", "select_class.", "get_args.keys", "streamlit.header", "st_outlier_detection.select_class", "st_outlier_detection.get_args", "select_class.", "st_outlier_detection.evaluate_classifier", "get_args.keys"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.select_class", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_transformers", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_transformers", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.select_class", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.get_args", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_outlier_detection.evaluate_classifier"], ["", "def", "get_detector", "(", ")", ":", "\n", "    ", "st", ".", "header", "(", "\"Outlier detector\"", ")", "\n", "outlier_detector_class", "=", "select_class", "(", "ALL_OUTLIER_DETECTORS", ",", "\"Outlier detector\"", ")", "\n", "detector_args", "=", "get_args", "(", "\n", "outlier_detector_class", ",", "extra", "=", "[", "\"few_shot_classifier\"", ",", "\"base_features\"", "]", "\n", ")", "\n", "detector_args", "[", "\"prepool_feature_transformer\"", "]", "=", "get_transformers", "(", "key", "=", "0", ")", "\n", "detector_args", "[", "\"postpool_feature_transformer\"", "]", "=", "get_transformers", "(", "key", "=", "1", ")", "\n", "if", "\"few_shot_classifier\"", "in", "detector_args", ".", "keys", "(", ")", ":", "\n", "        ", "st", ".", "header", "(", "\"Few-Shot Classifier\"", ")", "\n", "few_shot_classifier_class", "=", "select_class", "(", "\n", "ALL_FEW_SHOT_CLASSIFIERS", ",", "\"Few-Shot Classifier\"", "\n", ")", "\n", "\n", "classifier_args", "=", "get_args", "(", "few_shot_classifier_class", ")", "\n", "\n", "few_shot_classifier", "=", "few_shot_classifier_class", "(", "**", "classifier_args", ")", "\n", "evaluate_classifier", "(", "few_shot_classifier", ")", "\n", "detector_args", "[", "\"few_shot_classifier\"", "]", "=", "few_shot_classifier", "\n", "\n", "", "if", "\"base_features\"", "in", "detector_args", ".", "keys", "(", ")", ":", "\n", "        ", "detector_args", "[", "\"base_features\"", "]", "=", "train_features", "\n", "\n", "", "return", "outlier_detector_class", "(", "**", "detector_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.get_class_names": [[38, 62], ["streamlit.selectbox", "open", "pandas.read_csv().class_name.unique", "json.load", "open", "str", "line.rstrip().split", "len", "pandas.read_csv", "word.split", "line.rstrip", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["def", "get_class_names", "(", "dataset", ",", "key", ")", ":", "\n", "    ", "selected_specs_file", "=", "st", ".", "selectbox", "(", "\n", "\"Specs\"", ",", "\n", "[", "\n", "path", "\n", "for", "path", "in", "(", "Path", "(", "\"data\"", ")", "/", "dataset", "/", "\"specs\"", ")", ".", "glob", "(", "\"*\"", ")", "\n", "if", "path", ".", "suffix", "in", "{", "\".json\"", ",", "\".csv\"", "}", "\n", "]", ",", "\n", "format_func", "=", "lambda", "path", ":", "str", "(", "path", ")", "[", "len", "(", "\"data/\"", ")", ":", "]", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "if", "selected_specs_file", ".", "suffix", "==", "\".json\"", ":", "\n", "        ", "with", "open", "(", "selected_specs_file", ",", "\"r\"", ")", "as", "file", ":", "\n", "            ", "return", "json", ".", "load", "(", "file", ")", "[", "\"class_names\"", "]", "\n", "", "", "elif", "selected_specs_file", ".", "suffix", "==", "\".csv\"", ":", "\n", "        ", "synset_codes", "=", "pd", ".", "read_csv", "(", "selected_specs_file", ")", ".", "class_name", ".", "unique", "(", ")", "\n", "words", "=", "{", "}", "\n", "with", "open", "(", "IMAGENET_WORDS_PATH", ",", "\"r\"", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "synset", ",", "word", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "words", "[", "synset", "]", "=", "word", ".", "split", "(", "\",\"", ")", "[", "0", "]", "\n", "", "", "return", "[", "words", "[", "synset", "]", "for", "synset", "in", "synset_codes", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.select_classes": [[64, 76], ["streamlit.container", "streamlit.checkbox", "st.container.multiselect", "st.container.multiselect"], "function", ["None"], ["", "", "def", "select_classes", "(", "class_names", ",", "key", ")", ":", "\n", "    ", "container", "=", "st", ".", "container", "(", ")", "\n", "select_all", "=", "st", ".", "checkbox", "(", "\"All classes\"", ",", "value", "=", "True", ")", "\n", "\n", "if", "select_all", ":", "\n", "        ", "selected_options", "=", "container", ".", "multiselect", "(", "\n", "\"Classes\"", ",", "class_names", ",", "default", "=", "class_names", ",", "key", "=", "key", "\n", ")", "\n", "", "else", ":", "\n", "        ", "selected_options", "=", "container", ".", "multiselect", "(", "\"Classes\"", ",", "class_names", ",", "key", "=", "key", ")", "\n", "\n", "", "return", "selected_options", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.map_label": [[78, 81], ["features.label.apply"], "function", ["None"], ["", "def", "map_label", "(", "features", ":", "pd", ".", "DataFrame", ",", "class_names", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "features", ".", "label", "=", "features", ".", "label", ".", "apply", "(", "lambda", "label", ":", "class_names", "[", "label", "]", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize": [[83, 85], ["sklearn.preprocessing.normalize", "features.items"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "normalize", "(", "features", ":", "Dict", "[", "int", ",", "ndarray", "]", ")", "->", "Dict", "[", "int", ",", "ndarray", "]", ":", "\n", "    ", "return", "{", "k", ":", "sklearn", ".", "preprocessing", ".", "normalize", "(", "v", ",", "axis", "=", "1", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_2d_features": [[87, 95], ["sklearn.manifold.TSNE().fit_transform", "pandas.concat().assign", "numpy.concatenate", "sklearn.manifold.TSNE", "list", "pandas.concat", "normalize().values", "pandas.DataFrame", "st_plot_clusters.normalize", "features.items", "len", "int"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "compute_2d_features", "(", "features", ":", "Dict", "[", "int", ",", "ndarray", "]", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "reduced_features", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "\"pca\"", ")", ".", "fit_transform", "(", "\n", "np", ".", "concatenate", "(", "list", "(", "normalize", "(", "features", ")", ".", "values", "(", ")", ")", ")", "\n", ")", "\n", "\n", "return", "pd", ".", "concat", "(", "\n", "[", "pd", ".", "DataFrame", "(", "{", "\"label\"", ":", "len", "(", "v", ")", "*", "[", "int", "(", "k", ")", "]", "}", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "]", "\n", ")", ".", "assign", "(", "x", "=", "reduced_features", "[", ":", ",", "0", "]", ",", "y", "=", "reduced_features", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_or_retrieve_2d_features": [[97, 110], ["features_path.with_name", "features_path.with_name.is_file", "pandas.read_csv", "streamlit.write", "st_plot_clusters.compute_2d_features", "compute_2d_features.to_csv", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "compute_or_retrieve_2d_features", "(", "features_path", ",", "features", "=", "None", ")", ":", "\n", "# TODO : if features change or the method changes, this will not recompute 2d features", "\n", "    ", "reduced_features_file_name", "=", "features_path", ".", "with_name", "(", "f\"{features_path.stem}_2d.csv\"", ")", "\n", "if", "reduced_features_file_name", ".", "is_file", "(", ")", ":", "\n", "        ", "reduced_features", "=", "pd", ".", "read_csv", "(", "reduced_features_file_name", ")", "\n", "", "else", ":", "\n", "        ", "st", ".", "write", "(", "\"Computing TSNE...\"", ")", "\n", "if", "features", "is", "None", ":", "\n", "            ", "with", "open", "(", "features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "                ", "features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "", "", "reduced_features", "=", "compute_2d_features", "(", "features", ")", "\n", "reduced_features", ".", "to_csv", "(", "reduced_features_file_name", ",", "index", "=", "False", ")", "\n", "", "return", "reduced_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.plot_2d_features": [[112, 129], ["matplotlib.pyplot.figure", "plt.figure.add_subplot", "features.loc[].groupby", "streamlit.write", "fig.add_subplot.scatter", "len", "matplotlib.pyplot.legend", "df.label.isin"], "function", ["None"], ["", "def", "plot_2d_features", "(", "features", ",", "classes_to_plot", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "for", "label", ",", "group", "in", "features", ".", "loc", "[", "lambda", "df", ":", "df", ".", "label", ".", "isin", "(", "classes_to_plot", ")", "]", ".", "groupby", "(", "\n", "\"label\"", "\n", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "\n", "group", ".", "x", ",", "\n", "group", ".", "y", ",", "\n", "s", "=", "0.5", ",", "\n", "marker", "=", "\"o\"", ",", "\n", "label", "=", "label", ",", "\n", ")", "\n", "", "if", "len", "(", "classes_to_plot", ")", "<", "10", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "\"best\"", ",", "ncol", "=", "2", ",", "fontsize", "=", "\"xx-small\"", ")", "\n", "", "st", ".", "write", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_statistics": [[131, 142], ["numpy.mean", "numpy.linalg.norm", "st_plot_clusters.normalize", "numpy.stack().std", "numpy.linalg.norm", "v.std", "normalize.items", "numpy.stack", "v.mean", "normalize.values"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "compute_statistics", "(", "features", ",", "use_normalize", "=", "True", ")", ":", "\n", "    ", "if", "use_normalize", ":", "\n", "        ", "features", "=", "normalize", "(", "features", ")", "\n", "\n", "", "sigma_within", "=", "np", ".", "mean", "(", "[", "np", ".", "linalg", ".", "norm", "(", "v", ".", "std", "(", "axis", "=", "0", ")", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "]", ")", "\n", "\n", "sigma_between", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "np", ".", "stack", "(", "[", "v", ".", "mean", "(", "axis", "=", "0", ")", "for", "v", "in", "features", ".", "values", "(", ")", "]", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", ")", "\n", "\n", "return", "sigma_within", ",", "sigma_between", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_mean_auroc": [[144, 164], ["normalize.keys", "statistics.mean", "st_plot_clusters.normalize", "features[].mean", "normalize.items", "sklearn.metrics.roc_auc_score", "aurocs.append", "numpy.linalg.norm", "np.linalg.norm.tolist", "len"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.normalize"], ["", "def", "compute_mean_auroc", "(", "features", ",", "use_normalize", "=", "True", ")", ":", "\n", "    ", "if", "use_normalize", ":", "\n", "        ", "features", "=", "normalize", "(", "features", ")", "\n", "\n", "# features = {k: v for k,v in features.items() if k<10}", "\n", "# st.write(\"coucou\")", "\n", "\n", "", "aurocs", "=", "[", "]", "\n", "for", "label", "in", "features", ".", "keys", "(", ")", ":", "\n", "        ", "ground_truth", "=", "[", "]", "\n", "predictions", "=", "[", "]", "\n", "centroid", "=", "features", "[", "label", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "for", "second_label", ",", "v", "in", "features", ".", "items", "(", ")", ":", "\n", "            ", "ground_truth", "+=", "len", "(", "v", ")", "*", "[", "0", "if", "label", "==", "second_label", "else", "1", "]", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "v", "-", "centroid", ",", "axis", "=", "1", ")", "\n", "predictions", "+=", "distances", ".", "tolist", "(", ")", "\n", "", "auroc", "=", "sklearn", ".", "metrics", ".", "roc_auc_score", "(", "ground_truth", ",", "predictions", ")", "\n", "aurocs", ".", "append", "(", "auroc", ")", "\n", "\n", "", "return", "mean", "(", "aurocs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.print_clustering_statistics_for_all_features": [[166, 185], ["pandas.DataFrame().assign", "streamlit.title", "streamlit.write", "st_plot_clusters.compute_statistics", "all_stats.append", "pandas.DataFrame"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_statistics"], ["", "def", "print_clustering_statistics_for_all_features", "(", "features_paths_list", ")", ":", "\n", "    ", "all_stats", "=", "[", "]", "\n", "for", "feature_path", "in", "features_paths_list", ":", "\n", "        ", "statistics", "=", "compute_statistics", "(", "feature_path", ")", "\n", "all_stats", ".", "append", "(", "\n", "{", "\n", "\"backbone\"", ":", "feature_path", ".", "stem", ",", "\n", "\"split\"", ":", "feature_path", ".", "parent", ".", "name", ",", "\n", "\"sigma_within\"", ":", "statistics", "[", "0", "]", ",", "\n", "\"sigma_between\"", ":", "statistics", "[", "1", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "stats_df", "=", "pd", ".", "DataFrame", "(", "all_stats", ")", ".", "assign", "(", "\n", "ratio", "=", "lambda", "df", ":", "df", ".", "sigma_within", "/", "df", ".", "sigma_between", "\n", ")", "\n", "\n", "st", ".", "title", "(", "\"Clustering statistics\"", ")", "\n", "st", ".", "write", "(", "stats_df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.plot_clusters": [[187, 273], ["streamlit.columns", "streamlit.title", "streamlit.selectbox", "streamlit.selectbox", "streamlit.selectbox", "streamlit.selectbox", "streamlit.selectbox", "streamlit.selectbox", "st_plot_clusters.compute_mean_auroc", "streamlit.write", "streamlit.checkbox", "st_plot_clusters.compute_statistics", "streamlit.write", "st_plot_clusters.compute_or_retrieve_2d_features", "streamlit.title", "st_plot_clusters.plot_2d_features", "st_plot_clusters.get_class_names", "st_plot_clusters.select_classes", "st_plot_clusters.map_label", "map_label.label.unique", "open", "pickle.load", "streamlit.write", "v.reshape", "pickle.load.items"], "function", ["home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_mean_auroc", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_statistics", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.compute_or_retrieve_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.plot_2d_features", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.get_class_names", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.select_classes", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.st_scripts.st_plot_clusters.map_label", "home.repos.pwc.inspect_result.ebennequin_few-shot-open-set.models.clip.load"], ["", "def", "plot_clusters", "(", "key", ")", ":", "\n", "    ", "selectors_col", ",", "plot_col", "=", "st", ".", "columns", "(", "[", "2", ",", "3", "]", ")", "\n", "with", "selectors_col", ":", "\n", "        ", "st", ".", "title", "(", "\"Select stuff\"", ")", "\n", "source_dataset", "=", "st", ".", "selectbox", "(", "\n", "\"Source dataset\"", ",", "\n", "DATASETS_LIST", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "target_dataset", "=", "st", ".", "selectbox", "(", "\n", "\"Target dataset\"", ",", "\n", "DATASETS_LIST", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "backbone", "=", "st", ".", "selectbox", "(", "\n", "\"Model\"", ",", "\n", "MODELS_LIST", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "model_source", "=", "st", ".", "selectbox", "(", "\n", "\"Model source\"", ",", "\n", "[", "\"url\"", ",", "\"feat\"", "]", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "layer", "=", "st", ".", "selectbox", "(", "\n", "\"Layer\"", ",", "\n", "[", "\"4_4\"", ",", "\"last\"", ",", "\"4_3\"", ",", "\"last_cls\"", "]", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "split", "=", "st", ".", "selectbox", "(", "\n", "\"Split\"", ",", "\n", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "try", ":", "\n", "            ", "pickle_basename", "=", "(", "\n", "f\"{backbone}_{source_dataset}_{model_source}_{layer}.pickle\"", "\n", ")", "\n", "test_features_path", "=", "(", "\n", "DATA_ROOT", "\n", "/", "\"features\"", "\n", "/", "source_dataset", "\n", "/", "target_dataset", "\n", "/", "split", "\n", "/", "\"standard\"", "\n", "/", "pickle_basename", "\n", ")", "\n", "\n", "with", "open", "(", "test_features_path", ",", "\"rb\"", ")", "as", "stream", ":", "\n", "                ", "test_features", "=", "pickle", ".", "load", "(", "stream", ")", "\n", "# WRN returns a weird shape for the features (n_instances, n_channels, 1, 1)", "\n", "test_features", "=", "{", "\n", "k", ":", "v", ".", "reshape", "(", "v", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "k", ",", "v", "in", "test_features", ".", "items", "(", ")", "\n", "}", "\n", "", "", "except", "FileNotFoundError", ":", "\n", "            ", "st", ".", "write", "(", "\"No features for this combination\"", ")", "\n", "return", "\n", "\n", "", "mean_auroc", "=", "compute_mean_auroc", "(", "features", "=", "test_features", ")", "\n", "st", ".", "write", "(", "mean_auroc", ")", "\n", "use_class_names", "=", "st", ".", "checkbox", "(", "\n", "\"Use class names\"", ",", "\n", "key", "=", "key", ",", "\n", ")", "\n", "if", "use_class_names", ":", "\n", "            ", "class_names", "=", "get_class_names", "(", "target_dataset", ",", "key", ")", "\n", "selected_classes", "=", "select_classes", "(", "class_names", ",", "key", ")", "\n", "\n", "", "sigma_within", ",", "sig_between", "=", "compute_statistics", "(", "test_features", ")", "\n", "st", ".", "write", "(", "\n", "f\"Test set stats: sigma_within={sigma_within}, sigma_between={sig_between}, ratio={sigma_within / sig_between}\"", "\n", ")", "\n", "\n", "# sigma_within, sig_between = compute_statistics(train_features)", "\n", "# st.write(f\"Train set stats: sigma_within={sigma_within}, sigma_between={sig_between}, ratio={sigma_within / sig_between}\")", "\n", "\n", "", "with", "plot_col", ":", "\n", "        ", "reduced_features", "=", "compute_or_retrieve_2d_features", "(", "\n", "test_features_path", ",", "test_features", "\n", ")", "\n", "st", ".", "title", "(", "\"Look at all those clusters\"", ")", "\n", "if", "use_class_names", ":", "\n", "            ", "reduced_features", "=", "map_label", "(", "reduced_features", ",", "class_names", ")", "\n", "", "else", ":", "\n", "            ", "selected_classes", "=", "reduced_features", ".", "label", ".", "unique", "(", ")", "\n", "", "plot_2d_features", "(", "reduced_features", ",", "selected_classes", ")", "\n", "\n"]]}