{"home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.__init__": [[8, 17], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_embedding", ",", "low_rank", "=", "32", ",", "beam_size", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "E1", "=", "nn", ".", "Embedding", "(", "num_embedding", ",", "low_rank", ")", "\n", "self", ".", "E2", "=", "nn", ".", "Embedding", "(", "num_embedding", ",", "low_rank", ")", "\n", "\n", "self", ".", "vocb", "=", "num_embedding", "\n", "self", ".", "rank", "=", "low_rank", "\n", "self", ".", "beam", "=", "beam_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.extra_repr": [[18, 21], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"vocab_size={}, low_rank={}, beam_size={}\"", ".", "format", "(", "\n", "self", ".", "vocb", ",", "self", ".", "rank", ",", "self", ".", "beam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.forward": [[22, 26], ["dynamic_crf_layer.DynamicCRF._compute_score", "dynamic_crf_layer.DynamicCRF._compute_normalizer"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._compute_score", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._compute_normalizer"], ["", "def", "forward", "(", "self", ",", "emissions", ",", "targets", ",", "masks", ",", "beam", "=", "None", ")", ":", "\n", "        ", "numerator", "=", "self", ".", "_compute_score", "(", "emissions", ",", "targets", ",", "masks", ")", "\n", "denominator", "=", "self", ".", "_compute_normalizer", "(", "emissions", ",", "targets", ",", "masks", ",", "beam", ")", "\n", "return", "numerator", "-", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.forward_decoder": [[27, 29], ["dynamic_crf_layer.DynamicCRF._viterbi_decode"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._viterbi_decode"], ["", "def", "forward_decoder", "(", "self", ",", "emissions", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "_viterbi_decode", "(", "emissions", ",", "masks", ",", "beam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._compute_score": [[30, 41], ["targets.size", "scores.sum", "emissions.gather", "masks.type_as", "dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2"], "methods", ["None"], ["", "def", "_compute_score", "(", "self", ",", "emissions", ",", "targets", ",", "masks", "=", "None", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "targets", ".", "size", "(", ")", "\n", "emission_scores", "=", "emissions", ".", "gather", "(", "2", ",", "targets", "[", ":", ",", ":", ",", "None", "]", ")", "[", ":", ",", ":", ",", "0", "]", "# B x T", "\n", "transition_scores", "=", "(", "self", ".", "E1", "(", "targets", "[", ":", ",", ":", "-", "1", "]", ")", "*", "self", ".", "E2", "(", "targets", "[", ":", ",", "1", ":", "]", ")", ")", ".", "sum", "(", "2", ")", "\n", "\n", "scores", "=", "emission_scores", "\n", "scores", "[", ":", ",", "1", ":", "]", "+=", "transition_scores", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "scores", "=", "scores", "*", "masks", ".", "type_as", "(", "scores", ")", "\n", "", "return", "scores", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._compute_normalizer": [[42, 71], ["dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "beam_transition_matrix.view.view.view", "range", "dynamic_crf_layer.logsumexp", "emissions.size", "emissions.scatter", "emissions.gather", "emissions.topk", "dynamic_crf_layer.DynamicCRF.view", "dynamic_crf_layer.DynamicCRF.view().transpose", "numpy.float", "emissions.scatter.topk", "dynamic_crf_layer.logsumexp", "torch.where", "torch.where", "torch.where", "torch.where", "dynamic_crf_layer.DynamicCRF.view"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.logsumexp"], ["", "def", "_compute_normalizer", "(", "self", ",", "emissions", ",", "targets", "=", "None", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "        ", "beam", "=", "beam", "if", "beam", "is", "not", "None", "else", "self", ".", "beam", "\n", "batch_size", ",", "seq_len", "=", "emissions", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "_emissions", "=", "emissions", ".", "scatter", "(", "2", ",", "targets", "[", ":", ",", ":", ",", "None", "]", ",", "np", ".", "float", "(", "'inf'", ")", ")", "\n", "beam_targets", "=", "_emissions", ".", "topk", "(", "beam", ",", "2", ")", "[", "1", "]", "\n", "beam_emission_scores", "=", "emissions", ".", "gather", "(", "2", ",", "beam_targets", ")", "\n", "", "else", ":", "\n", "            ", "beam_emission_scores", ",", "beam_targets", "=", "emissions", ".", "topk", "(", "beam", ",", "2", ")", "\n", "", "beam_transition_score1", "=", "self", ".", "E1", "(", "beam_targets", "[", ":", ",", ":", "-", "1", "]", ")", "# B x (T-1) x K x D; position i - 1, previous step.", "\n", "beam_transition_score2", "=", "self", ".", "E2", "(", "beam_targets", "[", ":", ",", "1", ":", "]", ")", "# B x (T-1) x K x D; position i, current step.", "\n", "beam_transition_matrix", "=", "torch", ".", "bmm", "(", "\n", "beam_transition_score1", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ",", "\n", "beam_transition_score2", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "beam_transition_matrix", "=", "beam_transition_matrix", ".", "view", "(", "batch_size", ",", "-", "1", ",", "beam", ",", "beam", ")", "\n", "\n", "# compute the normalizer in the log-space", "\n", "score", "=", "beam_emission_scores", "[", ":", ",", "0", "]", "# B x K", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "next_score", "=", "score", "[", ":", ",", ":", ",", "None", "]", "+", "beam_transition_matrix", "[", ":", ",", "i", "-", "1", "]", "\n", "next_score", "=", "logsumexp", "(", "next_score", ",", "dim", "=", "1", ")", "+", "beam_emission_scores", "[", ":", ",", "i", "]", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "score", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "next_score", ",", "score", ")", "\n", "", "else", ":", "\n", "                ", "score", "=", "next_score", "\n", "\n", "# Sum (log-sum-exp) over all possible tags", "\n", "", "", "return", "logsumexp", "(", "score", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF._viterbi_decode": [[72, 122], ["emissions.topk", "dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "beam_transition_matrix.view.view.view", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "range", "torch.where.max", "torch.where.max", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "zip", "torch.cat.reverse", "torch.cat.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.reverse", "torch.cat.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "emissions.size", "dynamic_crf_layer.DynamicCRF.view", "dynamic_crf_layer.DynamicCRF.view().transpose", "traj_scores.append", "_score.max", "traj_tokens.append", "reversed", "reversed", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "beam_targets.gather", "torch.arange().expand", "torch.arange().expand", "torch.arange().expand", "torch.arange().expand", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "idx.gather", "scs.gather", "dynamic_crf_layer.DynamicCRF.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where.size", "torch.where.size"], "methods", ["None"], ["", "def", "_viterbi_decode", "(", "self", ",", "emissions", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "        ", "beam", "=", "beam", "if", "beam", "is", "not", "None", "else", "self", ".", "beam", "\n", "batch_size", ",", "seq_len", "=", "emissions", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "beam_emission_scores", ",", "beam_targets", "=", "emissions", ".", "topk", "(", "beam", ",", "2", ")", "\n", "beam_transition_score1", "=", "self", ".", "E1", "(", "beam_targets", "[", ":", ",", ":", "-", "1", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_score2", "=", "self", ".", "E2", "(", "beam_targets", "[", ":", ",", "1", ":", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_matrix", "=", "torch", ".", "bmm", "(", "\n", "beam_transition_score1", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ",", "\n", "beam_transition_score2", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "beam_transition_matrix", "=", "beam_transition_matrix", ".", "view", "(", "batch_size", ",", "-", "1", ",", "beam", ",", "beam", ")", "\n", "\n", "traj_tokens", ",", "traj_scores", "=", "[", "]", ",", "[", "]", "\n", "finalized_tokens", ",", "finalized_scores", "=", "[", "]", ",", "[", "]", "\n", "\n", "# compute the normalizer in the log-space", "\n", "score", "=", "beam_emission_scores", "[", ":", ",", "0", "]", "# B x K", "\n", "dummy", "=", "torch", ".", "arange", "(", "beam", ",", "device", "=", "score", ".", "device", ")", ".", "expand", "(", "*", "score", ".", "size", "(", ")", ")", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "traj_scores", ".", "append", "(", "score", ")", "\n", "_score", "=", "score", "[", ":", ",", ":", ",", "None", "]", "+", "beam_transition_matrix", "[", ":", ",", "i", "-", "1", "]", "\n", "_score", ",", "_index", "=", "_score", ".", "max", "(", "dim", "=", "1", ")", "\n", "_score", "=", "_score", "+", "beam_emission_scores", "[", ":", ",", "i", "]", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "score", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "_score", ",", "score", ")", "\n", "index", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "_index", ",", "dummy", ")", "\n", "", "else", ":", "\n", "                ", "score", ",", "index", "=", "_score", ",", "_index", "\n", "", "traj_tokens", ".", "append", "(", "index", ")", "\n", "\n", "# now running the back-tracing and find the best", "\n", "", "best_score", ",", "best_index", "=", "score", ".", "max", "(", "dim", "=", "1", ")", "\n", "finalized_tokens", ".", "append", "(", "best_index", "[", ":", ",", "None", "]", ")", "\n", "finalized_scores", ".", "append", "(", "best_score", "[", ":", ",", "None", "]", ")", "\n", "\n", "for", "idx", ",", "scs", "in", "zip", "(", "reversed", "(", "traj_tokens", ")", ",", "reversed", "(", "traj_scores", ")", ")", ":", "\n", "            ", "previous_index", "=", "finalized_tokens", "[", "-", "1", "]", "\n", "finalized_tokens", ".", "append", "(", "idx", ".", "gather", "(", "1", ",", "previous_index", ")", ")", "\n", "finalized_scores", ".", "append", "(", "scs", ".", "gather", "(", "1", ",", "previous_index", ")", ")", "\n", "\n", "", "finalized_tokens", ".", "reverse", "(", ")", "\n", "finalized_tokens", "=", "torch", ".", "cat", "(", "finalized_tokens", ",", "1", ")", "\n", "finalized_tokens", "=", "beam_targets", ".", "gather", "(", "2", ",", "finalized_tokens", "[", ":", ",", ":", ",", "None", "]", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "finalized_scores", ".", "reverse", "(", ")", "\n", "finalized_scores", "=", "torch", ".", "cat", "(", "finalized_scores", ",", "1", ")", "\n", "finalized_scores", "[", ":", ",", "1", ":", "]", "=", "finalized_scores", "[", ":", ",", "1", ":", "]", "-", "finalized_scores", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "return", "finalized_scores", ",", "finalized_tokens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.logsumexp": [[4, 6], ["torch.logsumexp().type_as", "torch.logsumexp().type_as", "torch.logsumexp", "torch.logsumexp", "x.float"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.logsumexp"], ["def", "logsumexp", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "logsumexp", "(", "x", ".", "float", "(", ")", ",", "dim", "=", "dim", ")", ".", "type_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.init_bert_model": [[22, 26], ["pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "pytorch_pretrained_bert.modeling.BertModel.from_pretrained"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained"], ["def", "init_bert_model", "(", "bert_path", ")", ":", "\n", "    ", "bert_vocab", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_path", ")", "\n", "bert_model", "=", "BertModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "return", "bert_model", ",", "bert_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.compute_lr": [[27, 31], ["min"], "function", ["None"], ["", "def", "compute_lr", "(", "step", ",", "warmup", ")", ":", "\n", "    ", "num1", "=", "step", "**", "(", "-", "0.5", ")", "\n", "num2", "=", "step", "*", "(", "warmup", "**", "(", "-", "1.5", ")", ")", "\n", "return", "min", "(", "num1", ",", "num2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.update_lr": [[32, 35], ["None"], "function", ["None"], ["", "def", "update_lr", "(", "optimizer", ",", "lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.create_directory": [[36, 41], ["os.path.exists", "os.makedirs", "os.system"], "function", ["None"], ["", "", "def", "create_directory", "(", "path", ")", ":", "\n", "    ", "import", "os", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "system", "(", "'rm -r '", "+", "path", ")", "\n", "", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.rm_tmp_files": [[42, 48], ["os.listdir", "name.startswith", "os.system"], "function", ["None"], ["", "def", "rm_tmp_files", "(", ")", ":", "\n", "    ", "folder_name_list", "=", "os", ".", "listdir", "(", "r'/tmp'", ")", "\n", "for", "name", "in", "folder_name_list", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'tmp'", ")", ":", "\n", "            ", "path", "=", "r'/tmp/'", "+", "name", "\n", "os", ".", "system", "(", "'rm -r '", "+", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.main.parse_config": [[49, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# data configuration", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-uncased'", ",", "help", "=", "\"e.g. bert-base-uncased\"", ")", "\n", "parser", ".", "add_argument", "(", "'--train_data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dev_data'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_vocab_f'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_max_len'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "\n", "# CRF layer configuration", "\n", "parser", ".", "add_argument", "(", "'--crf_low_rank'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--crf_beam_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "\n", "# training configuration", "\n", "parser", ".", "add_argument", "(", "'--nll_loss_weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--number_epoch'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--print_every'", ",", "type", "=", "int", ",", "default", "=", "400", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_every'", ",", "type", "=", "int", ",", "default", "=", "2000", ")", "\n", "parser", ".", "add_argument", "(", "'--toplayer_lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_lr'", ",", "type", "=", "float", ",", "default", "=", "2e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--bert_warmup_steps'", ",", "type", "=", "int", ",", "default", "=", "30000", ")", "\n", "parser", ".", "add_argument", "(", "'--toplayer_warmup_steps'", ",", "type", "=", "int", ",", "default", "=", "15000", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_path'", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.inference.init_bert_model": [[12, 16], ["pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "pytorch_pretrained_bert.modeling.BertModel.from_pretrained"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained"], ["def", "init_bert_model", "(", "bert_path", ")", ":", "\n", "    ", "bert_vocab", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_path", ")", "\n", "bert_model", "=", "BertModel", ".", "from_pretrained", "(", "bert_path", ")", "\n", "return", "bert_model", ",", "bert_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.inference.parse_config": [[17, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model parameters path", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'bert-base-uncased'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--length_ratio'", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--test_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_vocab_f'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--tgt_vocab_size'", ",", "type", "=", "int", ",", "default", "=", "150000", ")", "\n", "parser", ".", "add_argument", "(", "'--seq_max_len'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.__init__": [[7, 39], ["len", "dataclass.Vocab.vocab_list.append", "open", "i.readlines", "len", "dataclass.Vocab.vocab_list.append", "l.strip().split", "l.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab_f", ",", "vocab_size", ")", ":", "\n", "        ", "special_tokens", "=", "[", "PAD", ",", "UNK", ",", "EOS", "]", "\n", "max_vocab_size", "=", "vocab_size", "+", "3", "\n", "self", ".", "token_idx_dict", "=", "{", "}", "\n", "self", ".", "idx_token_dict", "=", "{", "}", "\n", "self", ".", "vocab_list", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "token", "in", "special_tokens", ":", "\n", "            ", "self", ".", "token_idx_dict", "[", "token", "]", "=", "index", "\n", "self", ".", "idx_token_dict", "[", "index", "]", "=", "token", "\n", "self", ".", "vocab_list", ".", "append", "(", "token", ")", "\n", "index", "+=", "1", "\n", "\n", "", "with", "open", "(", "vocab_f", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "i", ":", "\n", "            ", "lines", "=", "i", ".", "readlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "if", "index", ">=", "max_vocab_size", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "", "token", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "token_idx_dict", "[", "token", "]", "=", "index", "\n", "self", ".", "idx_token_dict", "[", "index", "]", "=", "token", "\n", "self", ".", "vocab_list", ".", "append", "(", "token", ")", "\n", "\n", "index", "+=", "1", "\n", "\n", "", "", "self", ".", "padding_idx", "=", "self", ".", "token_idx_dict", "[", "PAD", "]", "\n", "self", ".", "unk_idx", "=", "self", ".", "token_idx_dict", "[", "UNK", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "token_idx_dict", "[", "EOS", "]", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "token_idx_dict", ")", "\n", "assert", "len", "(", "self", ".", "vocab_list", ")", "==", "self", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx": [[40, 51], ["out_list.append"], "methods", ["None"], ["", "def", "tokentoidx", "(", "self", ",", "in_list", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "for", "token", "in", "in_list", ":", "\n", "            ", "try", ":", "\n", "                ", "out_list", ".", "append", "(", "self", ".", "token_idx_dict", "[", "token", "]", ")", "\n", "assert", "self", ".", "token_idx_dict", "[", "token", "]", "<", "self", ".", "vocab_size", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "#out_list.append(self.unk_idx)", "\n", "#assert self.unk_idx < self.vocab_size", "\n", "", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.idxtotoken": [[52, 57], ["out_list.append"], "methods", ["None"], ["", "def", "idxtotoken", "(", "self", ",", "in_idx_list", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "for", "idx", "in", "in_idx_list", ":", "\n", "            ", "out_list", ".", "append", "(", "self", ".", "idx_token_dict", "[", "idx", "]", ")", "\n", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.__init__": [[61, 91], ["len", "dataclass.Vocab", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.load_data", "dataclass.Data.load_data", "print", "print", "dataclass.Data.shuffle_train_idx", "len", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.load_data", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.load_data", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.shuffle_train_idx"], ["    ", "def", "__init__", "(", "self", ",", "train_path", ",", "dev_path", ",", "bert_vocab", ",", "seq_max_len", ",", "tgt_vocab_f", ",", "tgt_vocab_size", ")", ":", "\n", "        ", "'''\n            sen1_list is post list\n            sen2_list is response list\n        '''", "\n", "self", ".", "train_path", "=", "train_path", "\n", "self", ".", "dev_path", "=", "dev_path", "\n", "self", ".", "vocab", "=", "bert_vocab", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "vocab", ".", "vocab", ")", "\n", "\n", "self", ".", "tgt_vocab", "=", "Vocab", "(", "tgt_vocab_f", ",", "tgt_vocab_size", ")", "\n", "self", ".", "tgt_vocab_size", "=", "self", ".", "tgt_vocab", ".", "vocab_size", "\n", "self", ".", "tgt_padding_idx", "=", "self", ".", "tgt_vocab", ".", "padding_idx", "\n", "\n", "self", ".", "src_padding_idx", ",", "self", ".", "unk_idx", ",", "self", ".", "sep_idx", ",", "self", ".", "cls_idx", ",", "self", ".", "sos_idx", ",", "self", ".", "eos_idx", "=", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "[", "PAD", ",", "UNK", ",", "SEP", ",", "CLS", ",", "SOS", ",", "EOS", "]", ")", "\n", "self", ".", "seq_max_len", "=", "seq_max_len", "\n", "\n", "self", ".", "train_article_list", ",", "self", ".", "train_title_list", "=", "self", ".", "load_data", "(", "train_path", ",", "mode", "=", "'train'", ")", "\n", "self", ".", "dev_article_list", ",", "self", ".", "dev_title_list", "=", "self", ".", "load_data", "(", "dev_path", ",", "mode", "=", "'dev'", ")", "\n", "\n", "self", ".", "train_num", ",", "self", ".", "dev_num", "=", "len", "(", "self", ".", "train_article_list", ")", ",", "len", "(", "self", ".", "dev_article_list", ")", "\n", "print", "(", "'train number is %d, dev number is %d'", "%", "(", "self", ".", "train_num", ",", "self", ".", "dev_num", ")", ")", "\n", "print", "(", "'tgt vocab size is %d'", "%", "self", ".", "tgt_vocab_size", ")", "\n", "\n", "self", ".", "train_idx_list", ",", "self", ".", "dev_idx_list", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "train_num", ")", "]", ",", "[", "j", "for", "j", "in", "range", "(", "self", ".", "dev_num", ")", "]", "\n", "self", ".", "shuffle_train_idx", "(", ")", "\n", "\n", "self", ".", "train_current_idx", "=", "0", "\n", "self", ".", "dev_current_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.vocab_map_text": [[92, 103], ["text.strip().split", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.vocab.convert_ids_to_tokens", "text.strip", "res_text_list.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_ids_to_tokens"], ["", "def", "vocab_map_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "text_list", "=", "text", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "text_idx_list", "=", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "text_list", ")", "\n", "clean_text_list", "=", "self", ".", "vocab", ".", "convert_ids_to_tokens", "(", "text_idx_list", ")", "\n", "res_text_list", "=", "[", "]", "\n", "for", "token", "in", "clean_text_list", ":", "\n", "            ", "if", "token", "==", "UNK", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "res_text_list", ".", "append", "(", "token", ")", "\n", "", "", "return", "res_text_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.load_data": [[104, 151], ["open", "len", "progressbar.ProgressBar", "progressbar.ProgressBar.start", "progressbar.ProgressBar.finish", "i.readlines", "print", "progressbar.ProgressBar.update", "l.strip().split", "dataclass.Data.vocab.tokenize", "one_title.strip().split", "len", "article_list.append", "title_list.append", "print", "Exception", "len", "one_article.strip", "dataclass.Data.tgt_vocab.tokentoidx", "len", "i.readlines", "l.strip", "one_title.strip", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx"], ["", "def", "load_data", "(", "self", ",", "path", ",", "mode", ")", ":", "\n", "        ", "article_list", ",", "title_list", "=", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "i", ":", "\n", "            ", "if", "mode", "==", "'train'", ":", "\n", "                ", "lines", "=", "i", ".", "readlines", "(", ")", "\n", "print", "(", "'Start loading training data...'", ")", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "                ", "print", "(", "'Start loading validation data...'", ")", "\n", "lines", "=", "i", ".", "readlines", "(", ")", "[", ":", "2000", "]", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Wrong Data Mode!!!'", ")", "\n", "\n", "", "data_num", "=", "len", "(", "lines", ")", "\n", "p", "=", "progressbar", ".", "ProgressBar", "(", "data_num", ")", "\n", "p", ".", "start", "(", ")", "\n", "idx", "=", "0", "\n", "for", "l", "in", "lines", ":", "\n", "                ", "p", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "content_list", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "content_list", ")", "==", "2", "\n", "one_article", ",", "one_title", "=", "content_list", "\n", "\n", "one_article_list", "=", "self", ".", "vocab", ".", "tokenize", "(", "one_article", ".", "strip", "(", ")", ")", "\n", "one_title_list", "=", "one_title", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "\n", "tgt_valid_len", "=", "len", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_title_list", ")", ")", "\n", "if", "tgt_valid_len", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "one_article_list", ")", "<=", "tgt_valid_len", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "len", "(", "one_article_list", ")", ">=", "self", ".", "seq_max_len", "or", "tgt_valid_len", ">=", "self", ".", "seq_max_len", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "\n", "", "if", "len", "(", "one_article_list", ")", "==", "0", "or", "len", "(", "one_title_list", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "\n", "", "article_list", ".", "append", "(", "one_article_list", ")", "\n", "title_list", ".", "append", "(", "one_title_list", ")", "\n", "", "p", ".", "finish", "(", ")", "\n", "", "return", "article_list", ",", "title_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.shuffle_train_idx": [[152, 154], ["random.shuffle"], "methods", ["None"], ["", "def", "shuffle_train_idx", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "train_idx_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.shuffle_dev_idx": [[155, 157], ["random.shuffle"], "methods", ["None"], ["", "def", "shuffle_dev_idx", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "dev_idx_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.pad_data": [[158, 168], ["range", "len", "len", "batch_out_token_list.append", "range"], "methods", ["None"], ["", "def", "pad_data", "(", "self", ",", "batch_in_token_list", ",", "max_len", ",", "padding_idx", ")", ":", "\n", "        ", "len_list", "=", "[", "len", "(", "item", ")", "for", "item", "in", "batch_in_token_list", "]", "\n", "batch_out_token_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_in_token_list", ")", ")", ":", "\n", "            ", "one_len", "=", "len_list", "[", "i", "]", "\n", "len_diff", "=", "max_len", "-", "one_len", "\n", "one_out", "=", "batch_in_token_list", "[", "i", "]", "+", "[", "padding_idx", "for", "_", "in", "range", "(", "len_diff", ")", "]", "\n", "#one_out = batch_in_token_list[i] + [PAD for _ in range(len_diff)]", "\n", "batch_out_token_list", ".", "append", "(", "one_out", ")", "\n", "", "return", "batch_out_token_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.get_next_batch": [[169, 274], ["max", "dataclass.Data.pad_data", "dataclass.Data.pad_data", "range", "range", "Exception", "len", "one_tgt_token_list.copy", "range", "range", "batch_inp_list.append", "batch_tgt_list.append", "batch_truth_list.append", "dataclass.Data.shuffle_train_idx", "one_tgt_token_list.copy", "one_tgt_token_list.copy", "batch_inp_list.append", "batch_truth_list.append", "batch_tgt_list.append", "batch_inp_list.append", "batch_truth_list.append", "batch_tgt_list.append", "len", "len", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.tgt_vocab.tokentoidx", "batch_inp_list.append", "batch_tgt_list.append", "batch_truth_list.append", "batch_inp_list.append", "batch_tgt_list.append", "batch_truth_list.append", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.tgt_vocab.tokentoidx", "len", "len", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.tgt_vocab.tokentoidx", "len", "len", "len", "len", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.tgt_vocab.tokentoidx", "len", "len", "dataclass.Data.vocab.convert_tokens_to_ids", "dataclass.Data.tgt_vocab.tokentoidx"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.pad_data", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.pad_data", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Data.shuffle_train_idx", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dataclass.Vocab.tokentoidx"], ["", "def", "get_next_batch", "(", "self", ",", "batch_size", ",", "mode", ")", ":", "\n", "        ", "batch_inp_list", ",", "batch_tgt_list", ",", "batch_truth_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "train_current_idx", "+", "batch_size", "<", "self", ".", "train_num", "-", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "curr_idx", "=", "self", ".", "train_current_idx", "+", "i", "\n", "one_inp_token_list", "=", "self", ".", "train_article_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_inp_token_list", "=", "[", "CLS", "]", "+", "one_inp_token_list", "+", "[", "SEP", "]", "\n", "\n", "one_tgt_token_list", "=", "self", ".", "train_title_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_ref_token_list", "=", "one_tgt_token_list", ".", "copy", "(", ")", "\n", "\n", "one_tgt_token_list", "=", "one_tgt_token_list", "+", "[", "EOS", "]", "+", "[", "EOS", "]", "# two EOS for CRF learning", "\n", "try", ":", "\n", "                        ", "assert", "len", "(", "one_inp_token_list", ")", ">=", "len", "(", "one_tgt_token_list", ")", "\n", "batch_inp_list", ".", "append", "(", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "one_inp_token_list", ")", ")", "\n", "batch_tgt_list", ".", "append", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_tgt_token_list", ")", ")", "\n", "batch_truth_list", ".", "append", "(", "' '", ".", "join", "(", "one_ref_token_list", ")", ".", "strip", "(", ")", ")", "\n", "", "except", "AssertionError", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "self", ".", "train_current_idx", "+=", "batch_size", "\n", "", "else", ":", "\n", "                ", "len_diff", "=", "self", ".", "train_num", "-", "self", ".", "train_current_idx", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "curr_idx", "=", "self", ".", "train_current_idx", "+", "i", "\n", "if", "curr_idx", ">", "self", ".", "train_current_idx", "-", "1", ":", "\n", "                        ", "self", ".", "shuffle_train_idx", "(", ")", "\n", "curr_idx", "=", "0", "\n", "one_inp_token_list", "=", "self", ".", "train_article_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_inp_token_list", "=", "[", "CLS", "]", "+", "one_inp_token_list", "+", "[", "SEP", "]", "\n", "\n", "one_tgt_token_list", "=", "self", ".", "train_title_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_ref_token_list", "=", "one_tgt_token_list", ".", "copy", "(", ")", "\n", "\n", "one_tgt_token_list", "=", "one_tgt_token_list", "+", "[", "EOS", "]", "+", "[", "EOS", "]", "# two EOS for CRF learning", "\n", "try", ":", "\n", "                            ", "assert", "len", "(", "one_inp_token_list", ")", ">=", "len", "(", "one_tgt_token_list", ")", "\n", "batch_inp_list", ".", "append", "(", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "one_inp_token_list", ")", ")", "\n", "batch_tgt_list", ".", "append", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_tgt_token_list", ")", ")", "\n", "batch_truth_list", ".", "append", "(", "' '", ".", "join", "(", "one_ref_token_list", ")", ".", "strip", "(", ")", ")", "\n", "", "except", "AssertionError", ":", "\n", "                            ", "continue", "\n", "", "", "else", ":", "\n", "                        ", "one_inp_token_list", "=", "self", ".", "train_article_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_inp_token_list", "=", "[", "CLS", "]", "+", "one_inp_token_list", "+", "[", "SEP", "]", "\n", "\n", "one_tgt_token_list", "=", "self", ".", "train_title_list", "[", "self", ".", "train_idx_list", "[", "curr_idx", "]", "]", "\n", "one_ref_token_list", "=", "one_tgt_token_list", ".", "copy", "(", ")", "\n", "\n", "one_tgt_token_list", "=", "one_tgt_token_list", "+", "[", "EOS", "]", "+", "[", "EOS", "]", "# two EOS for CRF learning", "\n", "try", ":", "\n", "                            ", "assert", "len", "(", "one_inp_token_list", ")", ">=", "len", "(", "one_tgt_token_list", ")", "\n", "batch_inp_list", ".", "append", "(", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "one_inp_token_list", ")", ")", "\n", "batch_tgt_list", ".", "append", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_tgt_token_list", ")", ")", "\n", "batch_truth_list", ".", "append", "(", "' '", ".", "join", "(", "one_ref_token_list", ")", ".", "strip", "(", ")", ")", "\n", "", "except", "AssertionError", ":", "\n", "                            ", "continue", "\n", "", "", "", "self", ".", "train_current_idx", "=", "0", "\n", "\n", "", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "if", "self", ".", "dev_current_idx", "+", "batch_size", "<", "self", ".", "dev_num", "-", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "curr_idx", "=", "self", ".", "dev_current_idx", "+", "i", "\n", "\n", "one_inp_token_list", "=", "self", ".", "dev_article_list", "[", "curr_idx", "]", "\n", "one_inp_token_list", "=", "[", "CLS", "]", "+", "one_inp_token_list", "+", "[", "SEP", "]", "\n", "batch_inp_list", ".", "append", "(", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "one_inp_token_list", ")", ")", "\n", "\n", "one_tgt_token_list", "=", "self", ".", "dev_title_list", "[", "curr_idx", "]", "\n", "batch_truth_list", ".", "append", "(", "' '", ".", "join", "(", "one_tgt_token_list", ")", ".", "strip", "(", ")", ")", "\n", "\n", "one_tgt_token_list", "=", "one_tgt_token_list", "+", "[", "EOS", "]", "+", "[", "EOS", "]", "\n", "batch_tgt_list", ".", "append", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_tgt_token_list", ")", ")", "\n", "assert", "len", "(", "one_inp_token_list", ")", ">=", "len", "(", "one_tgt_token_list", ")", "\n", "", "self", ".", "dev_current_idx", "+=", "batch_size", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "curr_idx", "=", "self", ".", "dev_current_idx", "+", "i", "\n", "if", "curr_idx", ">", "self", ".", "dev_num", "-", "1", ":", "# \u5bf9dev_current_idx\u91cd\u65b0\u8d4b\u503c", "\n", "                        ", "curr_idx", "=", "0", "\n", "self", ".", "dev_current_idx", "=", "0", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "", "one_inp_token_list", "=", "self", ".", "dev_article_list", "[", "curr_idx", "]", "\n", "one_inp_token_list", "=", "[", "CLS", "]", "+", "one_inp_token_list", "+", "[", "SEP", "]", "\n", "batch_inp_list", ".", "append", "(", "self", ".", "vocab", ".", "convert_tokens_to_ids", "(", "one_inp_token_list", ")", ")", "\n", "\n", "one_tgt_token_list", "=", "self", ".", "dev_title_list", "[", "curr_idx", "]", "\n", "batch_truth_list", ".", "append", "(", "' '", ".", "join", "(", "one_tgt_token_list", ")", ".", "strip", "(", ")", ")", "\n", "\n", "one_tgt_token_list", "=", "one_tgt_token_list", "+", "[", "EOS", "]", "+", "[", "EOS", "]", "\n", "batch_tgt_list", ".", "append", "(", "self", ".", "tgt_vocab", ".", "tokentoidx", "(", "one_tgt_token_list", ")", ")", "\n", "assert", "len", "(", "one_inp_token_list", ")", ">=", "len", "(", "one_tgt_token_list", ")", "\n", "", "self", ".", "dev_current_idx", "=", "0", "\n", "#self.shuffle_dev_idx()", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Wrong batch mode!!!'", ")", "\n", "\n", "", "max_len", "=", "max", "(", "[", "len", "(", "item", ")", "for", "item", "in", "batch_inp_list", "]", ")", "\n", "batch_src_inp_pad", "=", "self", ".", "pad_data", "(", "batch_inp_list", ",", "max_len", ",", "self", ".", "src_padding_idx", ")", "\n", "batch_tgt_inp_pad", "=", "self", ".", "pad_data", "(", "batch_tgt_list", ",", "max_len", ",", "self", ".", "tgt_padding_idx", ")", "\n", "return", "batch_src_inp_pad", ",", "batch_tgt_inp_pad", ",", "batch_truth_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluate_rogue.parse_config": [[5, 12], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_config", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# model parameters path", "\n", "parser", ".", "add_argument", "(", "'--inference_path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--summary_dir'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "type", "=", "str", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.TopLayer.__init__": [[8, 21], ["torch.nn.Module.__init__", "dynamic_crf_layer.DynamicCRF", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "crf_low_rank", ",", "crf_beam_size", ",", "dropout", ",", "padding_idx", ")", ":", "\n", "        ", "super", "(", "TopLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "\n", "self", ".", "crf_layer", "=", "DynamicCRF", "(", "num_embedding", "=", "vocab_size", ",", "low_rank", "=", "crf_low_rank", ",", "\n", "beam_size", "=", "crf_beam_size", ")", "\n", "\n", "self", ".", "one_more_layer_norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "self", ".", "tgt_word_prj", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.TopLayer.forward": [[22, 47], ["src_input.transpose.transpose.transpose", "src_input.transpose.transpose.size", "torch.dropout", "torch.dropout", "src_representation.transpose.transpose.transpose", "model.TopLayer.tgt_word_prj().view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "emissions.transpose.transpose.transpose", "src_input.transpose.transpose.size", "tgt_input.size", "torch.log_softmax.size", "torch.log_softmax.size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "tgt_input.eq", "model.TopLayer.crf_layer", "batch_crf_loss.size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "model.TopLayer.tgt_word_prj", "src.contiguous().view", "src.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_representation", ",", "src_input", ",", "tgt_input", ",", "is_training", ")", ":", "\n", "        ", "'''\n            src_representation : bsz x seqlen x embed_dim\n            src_input : bsz x seqlen\n            tgt_input : bsz x seqlen\n        '''", "\n", "assert", "src_input", ".", "size", "(", ")", "==", "tgt_input", ".", "size", "(", ")", "\n", "\n", "src_input", "=", "src_input", ".", "transpose", "(", "0", ",", "1", ")", "# src_len x bsz", "\n", "seqlen", ",", "bsz", "=", "src_input", ".", "size", "(", ")", "\n", "\n", "src_representation", "=", "F", ".", "dropout", "(", "src_representation", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "is_training", ")", "\n", "src_representation", "=", "src_representation", ".", "transpose", "(", "0", ",", "1", ")", "# seqlen x bsz x embed_dim", "\n", "\n", "src", "=", "src_representation", "\n", "\n", "emissions", "=", "self", ".", "tgt_word_prj", "(", "src", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ")", ")", ".", "view", "(", "seqlen", ",", "bsz", ",", "self", ".", "vocab_size", ")", "\n", "log_probs", "=", "torch", ".", "log_softmax", "(", "emissions", ",", "-", "1", ")", "\n", "assert", "log_probs", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "seqlen", ",", "bsz", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n", "emissions", "=", "emissions", ".", "transpose", "(", "0", ",", "1", ")", "# [bsz x src_len x vocab_size]", "\n", "emission_mask", "=", "~", "tgt_input", ".", "eq", "(", "self", ".", "padding_idx", ")", "# [bsz x src_len]", "\n", "batch_crf_loss", "=", "-", "1", "*", "self", ".", "crf_layer", "(", "emissions", ",", "tgt_input", ",", "emission_mask", ")", "# [bsz]", "\n", "assert", "batch_crf_loss", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "bsz", "]", ")", "\n", "return", "log_probs", ",", "batch_crf_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.TopLayer.decoding": [[48, 66], ["src_input.transpose.transpose.transpose", "src_input.transpose.transpose.size", "src_representation.transpose.transpose.transpose", "model.TopLayer.tgt_word_prj().view", "emissions.transpose.transpose.transpose", "model.TopLayer.crf_layer.forward_decoder", "finalized_tokens.size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "model.TopLayer.tgt_word_prj", "src.contiguous().view", "src.contiguous"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.forward_decoder"], ["", "def", "decoding", "(", "self", ",", "src_representation", ",", "src_input", ")", ":", "\n", "        ", "'''\n            src_representation : bsz x seqlen x embed_dim\n            src_input : bsz x seqlen\n            tgt_input : bsz x seqlen\n        '''", "\n", "src_input", "=", "src_input", ".", "transpose", "(", "0", ",", "1", ")", "# src_len x bsz", "\n", "seqlen", ",", "bsz", "=", "src_input", ".", "size", "(", ")", "\n", "\n", "src_representation", "=", "src_representation", ".", "transpose", "(", "0", ",", "1", ")", "# seqlen x bsz x embed_dim", "\n", "src", "=", "src_representation", "\n", "\n", "emissions", "=", "self", ".", "tgt_word_prj", "(", "src", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ")", ")", ".", "view", "(", "seqlen", ",", "bsz", ",", "self", ".", "vocab_size", ")", "\n", "\n", "emissions", "=", "emissions", ".", "transpose", "(", "0", ",", "1", ")", "# [bsz, seqlen, vocab_size]", "\n", "_", ",", "finalized_tokens", "=", "self", ".", "crf_layer", ".", "forward_decoder", "(", "emissions", ")", "\n", "assert", "finalized_tokens", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "bsz", ",", "seqlen", "]", ")", "\n", "return", "finalized_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.TopLayer.length_ratio_decoding": [[67, 85], ["src_input.transpose.transpose.transpose", "src_input.transpose.transpose.size", "src_representation.transpose.transpose.transpose", "model.TopLayer.tgt_word_prj().view", "emissions.transpose.transpose.transpose", "model.TopLayer.crf_layer.forward_decoder", "int", "model.TopLayer.tgt_word_prj", "src.contiguous().view", "src.contiguous"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.dynamic_crf_layer.DynamicCRF.forward_decoder"], ["", "def", "length_ratio_decoding", "(", "self", ",", "src_representation", ",", "src_input", ",", "length_ratio", ")", ":", "\n", "        ", "'''\n            src_representation : 1 x seqlen x embed_dim\n            src_input : 1 x seqlen\n        '''", "\n", "src_input", "=", "src_input", ".", "transpose", "(", "0", ",", "1", ")", "# src_len x bsz", "\n", "seqlen", ",", "bsz", "=", "src_input", ".", "size", "(", ")", "\n", "\n", "src_representation", "=", "src_representation", ".", "transpose", "(", "0", ",", "1", ")", "# seqlen x bsz x embed_dim", "\n", "src", "=", "src_representation", "\n", "\n", "emissions", "=", "self", ".", "tgt_word_prj", "(", "src", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ")", ")", ".", "view", "(", "seqlen", ",", "bsz", ",", "self", ".", "vocab_size", ")", "\n", "\n", "emissions", "=", "emissions", ".", "transpose", "(", "0", ",", "1", ")", "# [bsz, seqlen, vocab_size]", "\n", "valid_len", "=", "int", "(", "seqlen", "*", "length_ratio", ")", "+", "1", "\n", "valid_emissions", "=", "emissions", "[", ":", ",", ":", "valid_len", "+", "1", ",", ":", "]", "\n", "_", ",", "finalized_tokens", "=", "self", ".", "crf_layer", ".", "forward_decoder", "(", "valid_emissions", ")", "\n", "return", "finalized_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.__init__": [[87, 94], ["torch.nn.Module.__init__", "model.TopLayer"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert_model", ",", "vocab_size", ",", "embed_dim", ",", "crf_low_rank", ",", "crf_beam_size", ",", "dropout", ",", "src_padding_idx", ",", "tgt_padding_idx", ")", ":", "\n", "        ", "super", "(", "NAG_BERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "bert_model", "=", "bert_model", "\n", "self", ".", "toplayer", "=", "TopLayer", "(", "vocab_size", ",", "embed_dim", ",", "crf_low_rank", ",", "crf_beam_size", ",", "dropout", ",", "tgt_padding_idx", ")", "\n", "self", ".", "src_padding_idx", "=", "src_padding_idx", "\n", "self", ".", "tgt_padding_idx", "=", "tgt_padding_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.forward": [[95, 107], ["src_input.size", "model.NAG_BERT.bert_model", "model.NAG_BERT.toplayer", "src_input.eq", "src_representation.size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_input", ",", "tgt_input", ",", "is_training", ")", ":", "\n", "        ", "'''\n            src_input : bsz x seqlen\n            tgt_input : bsz x seqlen \n        '''", "\n", "bsz", ",", "seqlen", "=", "src_input", ".", "size", "(", ")", "\n", "src_mask", "=", "~", "src_input", ".", "eq", "(", "self", ".", "src_padding_idx", ")", "\n", "src_representation", ",", "_", "=", "self", ".", "bert_model", "(", "src_input", ",", "attention_mask", "=", "src_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "assert", "src_representation", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "bsz", ",", "seqlen", ",", "self", ".", "embed_dim", "]", ")", "\n", "log_probs", ",", "batch_crf_loss", "=", "self", ".", "toplayer", "(", "src_representation", ",", "src_input", ",", "tgt_input", ",", "is_training", ")", "\n", "return", "log_probs", ",", "batch_crf_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.decoding": [[108, 114], ["model.NAG_BERT.bert_model.work", "model.NAG_BERT.toplayer.decoding", "src_input.eq"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.decoding"], ["", "def", "decoding", "(", "self", ",", "src_input", ")", ":", "\n", "        ", "src_mask", "=", "~", "src_input", ".", "eq", "(", "self", ".", "src_padding_idx", ")", "\n", "src_representation", ",", "_", "=", "self", ".", "bert_model", ".", "work", "(", "src_input", ",", "attention_mask", "=", "src_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "finalized_tokens", "=", "self", ".", "toplayer", ".", "decoding", "(", "src_representation", ",", "src_input", ")", "\n", "return", "finalized_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.length_ratio_decoding": [[116, 124], ["model.NAG_BERT.bert_model", "model.NAG_BERT.toplayer.length_ratio_decoding", "src_input.eq"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.length_ratio_decoding"], ["", "def", "length_ratio_decoding", "(", "self", ",", "src_input", ",", "length_ratio", ")", ":", "\n", "        ", "src_mask", "=", "~", "src_input", ".", "eq", "(", "self", ".", "src_padding_idx", ")", "\n", "src_representation", ",", "_", "=", "self", ".", "bert_model", "(", "src_input", ",", "attention_mask", "=", "src_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "\n", "finalized_tokens", "=", "self", ".", "toplayer", ".", "length_ratio_decoding", "(", "src_representation", ",", "\n", "src_input", ",", "length_ratio", ")", "\n", "return", "finalized_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.length_ratio_decoding_no_dropout": [[125, 133], ["model.NAG_BERT.bert_model.work", "model.NAG_BERT.toplayer.length_ratio_decoding", "src_input.eq"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.model.NAG_BERT.length_ratio_decoding"], ["", "def", "length_ratio_decoding_no_dropout", "(", "self", ",", "src_input", ",", "length_ratio", ")", ":", "\n", "        ", "src_mask", "=", "~", "src_input", ".", "eq", "(", "self", ".", "src_padding_idx", ")", "\n", "src_representation", ",", "_", "=", "self", ".", "bert_model", ".", "work", "(", "src_input", ",", "attention_mask", "=", "src_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "\n", "finalized_tokens", "=", "self", ".", "toplayer", ".", "length_ratio_decoding", "(", "src_representation", ",", "\n", "src_input", ",", "length_ratio", ")", "\n", "return", "finalized_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.utlis.map_text": [[5, 33], ["batch_greedy_result.cpu().detach().numpy", "result.append", "batch_greedy_result.cpu().detach", "int", "batch_greedy_result.cpu", "one_res.append"], "function", ["None"], ["def", "map_text", "(", "batch_greedy_result", ",", "data", ")", ":", "\n", "    ", "'''\n        batch_greedy_result : torch Tensor\n        vocab : vocabulary class\n    '''", "\n", "\n", "padding_idx", "=", "data", ".", "tgt_vocab", ".", "padding_idx", "\n", "eos_idx", "=", "data", ".", "tgt_vocab", ".", "eos_idx", "\n", "unk_idx", "=", "data", ".", "tgt_vocab", ".", "unk_idx", "\n", "vocab", "=", "data", ".", "tgt_vocab", "\n", "\n", "batch_result", "=", "batch_greedy_result", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "one_result", "in", "batch_result", ":", "\n", "        ", "one_res", "=", "[", "]", "\n", "for", "one_idx", "in", "one_result", ":", "\n", "            ", "one_idx", "=", "int", "(", "one_idx", ")", "\n", "if", "one_idx", "==", "padding_idx", ":", "\n", "                ", "continue", "\n", "", "elif", "one_idx", "==", "eos_idx", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "one_token", "=", "vocab", ".", "idx_token_dict", "[", "one_idx", "]", "\n", "one_res", ".", "append", "(", "one_token", ")", "\n", "", "", "one_res_text", "=", "' '", ".", "join", "(", "one_res", ")", "\n", "result", ".", "append", "(", "one_res_text", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.utlis.get_article_ref_text": [[34, 48], ["batch_greedy_result.cpu().detach().numpy", "result.append", "batch_greedy_result.cpu().detach", "data.vocab.convert_ids_to_tokens", "one_text.strip", "batch_greedy_result.cpu"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_ids_to_tokens"], ["", "def", "get_article_ref_text", "(", "batch_greedy_result", ",", "data", ")", ":", "\n", "    ", "batch_result", "=", "batch_greedy_result", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "one_result", "in", "batch_result", ":", "\n", "        ", "one_text_list", "=", "' '", ".", "join", "(", "data", ".", "vocab", ".", "convert_ids_to_tokens", "(", "one_result", ")", ")", "\n", "one_text", "=", "' '", "\n", "for", "token", "in", "one_text_list", ":", "\n", "            ", "if", "token", "==", "'[PAD]'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "one_text", "+=", "token", "+", "' '", "\n", "", "", "result", ".", "append", "(", "one_text", ".", "strip", "(", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.utlis.get_title_ref_text": [[49, 77], ["batch_greedy_result.cpu().detach().numpy", "result.append", "batch_greedy_result.cpu().detach", "int", "one_res.append", "batch_greedy_result.cpu"], "function", ["None"], ["", "def", "get_title_ref_text", "(", "batch_greedy_result", ",", "data", ")", ":", "\n", "    ", "'''\n        batch_greedy_result : torch Tensor\n        vocab : vocabulary class\n    '''", "\n", "\n", "padding_idx", "=", "data", ".", "tgt_vocab", ".", "padding_idx", "\n", "eos_idx", "=", "data", ".", "tgt_vocab", ".", "eos_idx", "\n", "unk_idx", "=", "data", ".", "tgt_vocab", ".", "unk_idx", "\n", "vocab", "=", "data", ".", "tgt_vocab", "\n", "\n", "batch_result", "=", "batch_greedy_result", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "one_result", "in", "batch_result", ":", "\n", "        ", "one_res", "=", "[", "]", "\n", "for", "one_idx", "in", "one_result", ":", "\n", "            ", "one_idx", "=", "int", "(", "one_idx", ")", "\n", "if", "one_idx", "==", "padding_idx", ":", "\n", "                ", "continue", "\n", "#elif one_idx == eos_idx:", "\n", "#    break", "\n", "", "else", ":", "\n", "                ", "one_token", "=", "vocab", ".", "idx_token_dict", "[", "one_idx", "]", "\n", "one_res", ".", "append", "(", "one_token", ")", "\n", "", "", "one_res_text", "=", "' '", ".", "join", "(", "one_res", ")", "\n", "result", ".", "append", "(", "one_res_text", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.get_one_line_result": [[2, 4], ["float", "line.strip().split", "line.strip"], "function", ["None"], ["def", "get_one_line_result", "(", "line", ")", ":", "\n", "    ", "return", "float", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "3", "]", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.get_rouge_scores": [[5, 17], ["pyrouge.Rouge155", "pyrouge.Rouge155.convert_and_evaluate", "r.convert_and_evaluate.split", "evaluation.get_one_line_result", "evaluation.get_one_line_result", "evaluation.get_one_line_result"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.get_one_line_result", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.get_one_line_result", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.get_one_line_result"], ["", "def", "get_rouge_scores", "(", "summary_dir", ",", "model_dir", ")", ":", "\n", "    ", "r", "=", "Rouge155", "(", ")", "\n", "r", ".", "system_dir", "=", "summary_dir", "\n", "r", ".", "model_dir", "=", "model_dir", "\n", "r", ".", "system_filename_pattern", "=", "r'(\\d+)_decoded.txt'", "\n", "r", ".", "model_filename_pattern", "=", "r'#ID#_reference.txt'", "\n", "output", "=", "r", ".", "convert_and_evaluate", "(", ")", "\n", "output_list", "=", "output", ".", "split", "(", "'\\n'", ")", "\n", "rogue_1_score", "=", "get_one_line_result", "(", "output_list", "[", "3", "]", ")", "\n", "rogue_2_score", "=", "get_one_line_result", "(", "output_list", "[", "7", "]", ")", "\n", "rogue_l_score", "=", "get_one_line_result", "(", "output_list", "[", "19", "]", ")", "\n", "return", "rogue_1_score", ",", "rogue_2_score", ",", "rogue_l_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.None.evaluation.write_results": [[18, 32], ["len", "range", "Exception", "open", "o.writelines", "str"], "function", ["None"], ["", "def", "write_results", "(", "dir", ",", "text_list", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'decoded'", ":", "\n", "        ", "pass", "\n", "", "elif", "mode", "==", "'reference'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Wrong Result Mode!!!'", ")", "\n", "\n", "", "data_num", "=", "len", "(", "text_list", ")", "\n", "for", "i", "in", "range", "(", "data_num", ")", ":", "\n", "        ", "one_text", "=", "text_list", "[", "i", "]", "\n", "one_out_f", "=", "dir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'_'", "+", "mode", "+", "'.txt'", "\n", "with", "open", "(", "one_out_f", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "o", ":", "\n", "            ", "o", ".", "writelines", "(", "one_text", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.__init__": [[69, 124], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.from_dict": [[126, 133], ["modeling.BertConfig", "json_object.items"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.from_json_file": [[134, 140], ["cls.from_dict", "open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.__repr__": [[141, 143], ["str", "modeling.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.to_dict": [[144, 148], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.to_json_string": [[149, 152], ["json.dumps", "modeling.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEmbeddings.__init__": [[175, 185], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEmbeddings.forward": [[186, 201], ["input_ids.size", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling.BertEmbeddings.word_embeddings", "modeling.BertEmbeddings.position_embeddings", "modeling.BertEmbeddings.token_type_embeddings", "modeling.BertEmbeddings.LayerNorm", "modeling.BertEmbeddings.dropout", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEmbeddings.work": [[202, 217], ["input_ids.size", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling.BertEmbeddings.word_embeddings", "modeling.BertEmbeddings.position_embeddings", "modeling.BertEmbeddings.token_type_embeddings", "modeling.BertEmbeddings.LayerNorm", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "work", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "#embeddings = self.dropout(embeddings)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.__init__": [[221, 236], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores": [[237, 241], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.forward": [[242, 269], ["modeling.BertSelfAttention.query", "modeling.BertSelfAttention.key", "modeling.BertSelfAttention.value", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.work": [[270, 297], ["modeling.BertSelfAttention.query", "modeling.BertSelfAttention.key", "modeling.BertSelfAttention.value", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "modeling.BertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfAttention.transpose_for_scores"], ["", "def", "work", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "#attention_probs = self.dropout(attention_probs)", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfOutput.__init__": [[300, 305], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfOutput.forward": [[306, 311], ["modeling.BertSelfOutput.dense", "modeling.BertSelfOutput.dropout", "modeling.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertSelfOutput.work": [[312, 317], ["modeling.BertSelfOutput.dense", "modeling.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "work", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "#hidden_states = self.dropout(hidden_states)", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertAttention.__init__": [[319, 323], ["torch.nn.Module.__init__", "modeling.BertSelfAttention", "modeling.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertAttention.forward": [[324, 328], ["modeling.BertAttention.self", "modeling.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertAttention.work": [[329, 333], ["modeling.BertAttention.self.work", "modeling.BertAttention.output.work"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work"], ["", "def", "work", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", ".", "work", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", ".", "work", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertIntermediate.__init__": [[336, 341], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertIntermediate.forward": [[342, 346], ["modeling.BertIntermediate.dense", "modeling.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOutput.__init__": [[349, 354], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOutput.forward": [[355, 360], ["modeling.BertOutput.dense", "modeling.BertOutput.dropout", "modeling.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOutput.work": [[361, 366], ["modeling.BertOutput.dense", "modeling.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "work", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "#hidden_states = self.dropout(hidden_states)", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertLayer.__init__": [[369, 374], ["torch.nn.Module.__init__", "modeling.BertAttention", "modeling.BertIntermediate", "modeling.BertOutput"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertLayer.forward": [[375, 380], ["modeling.BertLayer.attention", "modeling.BertLayer.intermediate", "modeling.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertLayer.work": [[381, 386], ["modeling.BertLayer.attention.work", "modeling.BertLayer.intermediate", "modeling.BertLayer.output.work"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work"], ["", "def", "work", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", ".", "work", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", ".", "work", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEncoder.__init__": [[389, 393], ["torch.nn.Module.__init__", "modeling.BertLayer", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEncoder.forward": [[394, 403], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertEncoder.work": [[404, 413], ["layer_module.work", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work"], ["", "def", "work", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", ".", "work", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPooler.__init__": [[416, 420], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPooler.forward": [[421, 428], ["modeling.BertPooler.dense", "modeling.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPredictionHeadTransform.__init__": [[431, 437], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "else", "config", ".", "hidden_act", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPredictionHeadTransform.forward": [[438, 443], ["modeling.BertPredictionHeadTransform.dense", "modeling.BertPredictionHeadTransform.transform_act_fn", "modeling.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertLMPredictionHead.__init__": [[446, 457], ["torch.nn.Module.__init__", "modeling.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "bert_model_embedding_weights.size", "bert_model_embedding_weights.size", "torch.zeros", "bert_model_embedding_weights.size"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "bert_model_embedding_weights", ".", "size", "(", "1", ")", ",", "\n", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "decoder", ".", "weight", "=", "bert_model_embedding_weights", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "bert_model_embedding_weights", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertLMPredictionHead.forward": [[458, 462], ["modeling.BertLMPredictionHead.transform", "modeling.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOnlyMLMHead.__init__": [[465, 468], ["torch.nn.Module.__init__", "modeling.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOnlyMLMHead.forward": [[469, 472], ["modeling.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOnlyNSPHead.__init__": [[475, 478], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertOnlyNSPHead.forward": [[479, 482], ["modeling.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPreTrainingHeads.__init__": [[485, 489], ["torch.nn.Module.__init__", "modeling.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bert_model_embedding_weights", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ",", "bert_model_embedding_weights", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertPreTrainingHeads.forward": [[490, 494], ["modeling.BertPreTrainingHeads.predictions", "modeling.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.PreTrainedBertModel.__init__": [[500, 510], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedBertModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "BertConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `BertConfig`. \"", "\n", "\"To create a model from a Google pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.PreTrainedBertModel.init_bert_weights": [[511, 523], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.normal_", "module.weight.data.normal_"], "methods", ["None"], ["", "def", "init_bert_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.PreTrainedBertModel.from_pretrained": [[524, 629], ["os.path.isdir", "os.path.join", "modeling.BertConfig.from_json_file", "logger.info", "cls", "torch.load.keys", "zip", "getattr", "torch.load.copy", "modeling.PreTrainedBertModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.from_json_file"], ["", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name", ",", "state_dict", "=", "None", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a PreTrainedBertModel from a pre-trained model file or a pytorch state dict.\n        Download and cache the pre-trained model file if needed.\n\n        Params:\n            pretrained_model_name: either:\n                - a str with the name of a pre-trained model to load selected in the list of:\n                    . `bert-base-uncased`\n                    . `bert-large-uncased`\n                    . `bert-base-cased`\n                    . `bert-base-multilingual`\n                    . `bert-base-chinese`\n                - a path or url to a pretrained model archive containing:\n                    . `bert_config.json` a configuration file for the model\n                    . `pytorch_model.bin` a PyTorch dump of a BertForPreTraining instance\n            cache_dir: an optional path to a folder in which the pre-trained models will be cached.\n            state_dict: an optional state dictionnary (collections.OrderedDict object) to use instead of Google pre-trained models\n            *inputs, **kwargs: additional input for the specific Bert class\n                (ex: num_labels for BertForSequenceClassification)\n        \"\"\"", "\n", "if", "pretrained_model_name", "in", "PRETRAINED_MODEL_ARCHIVE_MAP", ":", "\n", "            ", "archive_file", "=", "PRETRAINED_MODEL_ARCHIVE_MAP", "[", "pretrained_model_name", "]", "\n", "", "else", ":", "\n", "            ", "archive_file", "=", "pretrained_model_name", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading archive file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading archive file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "tempdir", "=", "None", "\n", "if", "os", ".", "path", ".", "isdir", "(", "resolved_archive_file", ")", ":", "\n", "            ", "serialization_dir", "=", "resolved_archive_file", "\n", "", "else", ":", "\n", "# Extract archive to temp dir", "\n", "            ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logger", ".", "info", "(", "\"extracting archive file {} to temp dir {}\"", ".", "format", "(", "\n", "resolved_archive_file", ",", "tempdir", ")", ")", "\n", "with", "tarfile", ".", "open", "(", "resolved_archive_file", ",", "'r:gz'", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "extractall", "(", "tempdir", ")", "\n", "", "serialization_dir", "=", "tempdir", "\n", "# Load config", "\n", "", "config_file", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "CONFIG_NAME", ")", "\n", "config", "=", "BertConfig", ".", "from_json_file", "(", "config_file", ")", "\n", "logger", ".", "info", "(", "\"Model config {}\"", ".", "format", "(", "config", ")", ")", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "state_dict", "is", "None", ":", "\n", "            ", "weights_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "WEIGHTS_NAME", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ")", "\n", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "", "", "", "load", "(", "model", ",", "prefix", "=", "''", "if", "hasattr", "(", "model", ",", "'bert'", ")", "else", "'bert.'", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "tempdir", ":", "\n", "# Clean up temp dir", "\n", "            ", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.__init__": [[675, 681], ["modeling.PreTrainedBertModel.__init__", "modeling.BertEmbeddings", "modeling.BertEncoder", "modeling.BertPooler", "modeling.BertModel.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.forward": [[682, 712], ["torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling.BertModel.embeddings", "modeling.BertModel.encoder", "modeling.BertModel.pooler", "torch.ones_like", "torch.zeros_like", "torch.ones_like.unsqueeze", "next", "modeling.BertModel.parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work": [[713, 743], ["torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling.BertModel.embeddings.work", "modeling.BertModel.encoder.work", "modeling.BertModel.pooler", "torch.ones_like", "torch.zeros_like", "torch.ones_like.unsqueeze", "next", "modeling.BertModel.parameters"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertModel.work"], ["", "def", "work", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", ".", "work", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", ".", "work", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "return", "encoded_layers", ",", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForPreTraining.__init__": [[796, 801], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "modeling.BertPreTrainingHeads", "modeling.BertForPreTraining.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForPreTraining.forward": [[802, 815], ["modeling.BertForPreTraining.bert", "modeling.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForMaskedLM.__init__": [[859, 864], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "modeling.BertOnlyMLMHead", "modeling.BertForMaskedLM.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ".", "weight", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForMaskedLM.forward": [[865, 876], ["modeling.BertForMaskedLM.bert", "modeling.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "masked_lm_loss", "\n", "", "else", ":", "\n", "            ", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForNextSentencePrediction.__init__": [[921, 926], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "modeling.BertOnlyNSPHead", "modeling.BertForNextSentencePrediction.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForNextSentencePrediction.forward": [[927, 938], ["modeling.BertForNextSentencePrediction.bert", "modeling.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "        ", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "next_sentence_loss", "\n", "", "else", ":", "\n", "            ", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForSequenceClassification.__init__": [[985, 992], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForSequenceClassification.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_labels", "=", "2", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForSequenceClassification.forward": [[993, 1004], ["modeling.BertForSequenceClassification.bert", "modeling.BertForSequenceClassification.dropout", "modeling.BertForSequenceClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForMultipleChoice.__init__": [[1050, 1057], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForMultipleChoice.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_choices", "=", "2", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_choices", "=", "num_choices", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForMultipleChoice.forward": [[1058, 1073], ["input_ids.view", "token_type_ids.view", "attention_mask.view", "modeling.BertForMultipleChoice.bert", "modeling.BertForMultipleChoice.dropout", "modeling.BertForMultipleChoice.classifier", "modeling.BertForMultipleChoice.view", "input_ids.size", "token_type_ids.size", "attention_mask.size", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "\n", "_", ",", "pooled_output", "=", "self", ".", "bert", "(", "flat_input_ids", ",", "flat_token_type_ids", ",", "flat_attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_choices", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "reshaped_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForTokenClassification.__init__": [[1120, 1127], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling.BertForTokenClassification.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "num_labels", "=", "2", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForTokenClassification.forward": [[1128, 1139], ["modeling.BertForTokenClassification.bert", "modeling.BertForTokenClassification.dropout", "modeling.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling.BertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForQuestionAnswering.__init__": [[1196, 1203], ["modeling.PreTrainedBertModel.__init__", "modeling.BertModel", "torch.nn.Linear", "modeling.BertForQuestionAnswering.apply"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "# TODO check with Google if it's normal there is no dropout on the token classifier of SQuAD in the TF version", "\n", "# self.dropout = nn.Dropout(config.hidden_dropout_prob)", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertForQuestionAnswering.forward": [[1204, 1229], ["modeling.BertForQuestionAnswering.bert", "modeling.BertForQuestionAnswering.qa_outputs", "modeling.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "sequence_output", ",", "_", "=", "self", ".", "bert", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "False", ")", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "return", "total_loss", "\n", "", "else", ":", "\n", "            ", "return", "start_logits", ",", "end_logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.gelu": [[51, 57], ["torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.swish": [[59, 61], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.convert_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[30, 88], ["os.path.abspath", "os.path.abspath", "print", "tensorflow.train.list_variables", "modeling.BertConfig.from_json_file", "print", "modeling.BertForPreTraining", "zip", "print", "torch.save", "print", "tensorflow.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "print", "torch.from_numpy", "modeling.BertForPreTraining.state_dict", "str", "print", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "numpy.transpose", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.modeling.BertConfig.from_json_file"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_path", ")", ":", "\n", "    ", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "bert_config_file", ")", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "print", "(", "\"Converting TensorFlow checkpoint from {} with config at {}\"", ".", "format", "(", "tf_path", ",", "config_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "print", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "# Initialise PyTorch model", "\n", "", "config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "BertForPreTraining", "(", "config", ")", "\n", "\n", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "print", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "print", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "\n", "# Save pytorch-model", "\n", "", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.BertAdam.__init__": [[59, 78], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "warmup", "=", "-", "1", ",", "t_total", "=", "-", "1", ",", "schedule", "=", "'warmup_linear'", ",", "\n", "b1", "=", "0.9", ",", "b2", "=", "0.999", ",", "e", "=", "1e-6", ",", "weight_decay", "=", "0.01", ",", "\n", "max_grad_norm", "=", "1.0", ")", ":", "\n", "        ", "if", "lr", "is", "not", "required", "and", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "schedule", "not", "in", "SCHEDULES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid schedule parameter: {}\"", ".", "format", "(", "schedule", ")", ")", "\n", "", "if", "not", "0.0", "<=", "warmup", "<", "1.0", "and", "not", "warmup", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid warmup: {} - should be in [0.0, 1.0[ or -1\"", ".", "format", "(", "warmup", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b1", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b1 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b1", ")", ")", "\n", "", "if", "not", "0.0", "<=", "b2", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid b2 parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "b2", ")", ")", "\n", "", "if", "not", "e", ">=", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "e", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "schedule", "=", "schedule", ",", "warmup", "=", "warmup", ",", "t_total", "=", "t_total", ",", "\n", "b1", "=", "b1", ",", "b2", "=", "b2", ",", "e", "=", "e", ",", "weight_decay", "=", "weight_decay", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ")", "\n", "super", "(", "BertAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.BertAdam.get_lr": [[79, 93], ["lr.append", "len", "schedule_fct"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "lr", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "return", "[", "0", "]", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "", "lr", ".", "append", "(", "lr_scheduled", ")", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.BertAdam.step": [[94, 163], ["closure", "next_m.mul_().add_", "next_v.mul_().addcmul_", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.nn.utils.clip_grad_norm_", "next_m.mul_", "next_v.mul_", "next_v.sqrt", "schedule_fct"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'next_m'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'next_v'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "next_m", ",", "next_v", "=", "state", "[", "'next_m'", "]", ",", "state", "[", "'next_v'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'b1'", "]", ",", "group", "[", "'b2'", "]", "\n", "\n", "# Add grad clipping", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "                    ", "clip_grad_norm_", "(", "p", ",", "group", "[", "'max_grad_norm'", "]", ")", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "", "next_m", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "next_v", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "update", "=", "next_m", "/", "(", "next_v", ".", "sqrt", "(", ")", "+", "group", "[", "'e'", "]", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "update", "+=", "group", "[", "'weight_decay'", "]", "*", "p", ".", "data", "\n", "\n", "", "if", "group", "[", "'t_total'", "]", "!=", "-", "1", ":", "\n", "                    ", "schedule_fct", "=", "SCHEDULES", "[", "group", "[", "'schedule'", "]", "]", "\n", "lr_scheduled", "=", "group", "[", "'lr'", "]", "*", "schedule_fct", "(", "state", "[", "'step'", "]", "/", "group", "[", "'t_total'", "]", ",", "group", "[", "'warmup'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "lr_scheduled", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "update_with_lr", "=", "lr_scheduled", "*", "update", "\n", "p", ".", "data", ".", "add_", "(", "-", "update_with_lr", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# step_size = lr_scheduled * math.sqrt(bias_correction2) / bias_correction1", "\n", "# No bias correction", "\n", "# bias_correction1 = 1 - beta1 ** state['step']", "\n", "# bias_correction2 = 1 - beta2 ** state['step']", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.warmup_cosine": [[23, 27], ["torch.cos"], "function", ["None"], ["def", "warmup_cosine", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "0.5", "*", "(", "1.0", "+", "torch", ".", "cos", "(", "math", ".", "pi", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.warmup_constant": [[28, 32], ["None"], "function", ["None"], ["", "def", "warmup_constant", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.optimization.warmup_linear": [[33, 37], ["None"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "    ", "if", "x", "<", "warmup", ":", "\n", "        ", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.url_to_filename": [[30, 46], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["None"], ["def", "url_to_filename", "(", "url", ":", "str", ",", "etag", ":", "str", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.filename_to_url": [[48, 72], ["isinstance", "os.path.join", "str", "os.path.exists", "FileNotFoundError", "os.path.exists", "FileNotFoundError", "open", "json.load"], "function", ["None"], ["", "def", "filename_to_url", "(", "filename", ":", "str", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``FileNotFoundError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.cached_path": [[74, 102], ["isinstance", "isinstance", "urllib.parse.urlparse", "str", "str", "file_utils.get_from_cache", "os.path.exists", "FileNotFoundError", "ValueError"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ":", "Union", "[", "str", ",", "Path", "]", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.split_s3_path": [[104, 115], ["urllib.parse.urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ":", "str", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.s3_request": [[117, 134], ["functools.wraps", "func", "int", "FileNotFoundError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ":", "Callable", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.s3_etag": [[136, 143], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ":", "str", ")", "->", "Optional", "[", "str", "]", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.s3_get": [[145, 151], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ":", "str", ",", "temp_file", ":", "IO", ")", "->", "None", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.http_get": [[153, 163], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["None"], ["", "def", "http_get", "(", "url", ":", "str", ",", "temp_file", ":", "IO", ")", "->", "None", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.get_from_cache": [[165, 222], ["isinstance", "os.makedirs", "url.startswith", "file_utils.url_to_filename", "os.path.join", "str", "file_utils.s3_etag", "requests.head", "requests.head.headers.get", "os.path.exists", "IOError", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "file_utils.s3_get", "file_utils.http_get", "open", "shutil.copyfileobj", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.url_to_filename", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.s3_etag", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.s3_get", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.http_get"], ["", "def", "get_from_cache", "(", "url", ":", "str", ",", "cache_dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_PRETRAINED_BERT_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ")", "\n", "", "else", ":", "\n", "        ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "            ", "raise", "IOError", "(", "\"HEAD request failed for url {} with status code {}\"", "\n", ".", "format", "(", "url", ",", "response", ".", "status_code", ")", ")", "\n", "", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "json", ".", "dump", "(", "meta", ",", "meta_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.read_set_from_file": [[224, 234], ["set", "open", "set.add", "line.rstrip"], "function", ["None"], ["", "def", "read_set_from_file", "(", "filename", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "'''\n    Extract a de-duped collection (set) of text from a file.\n    Expected file format is one item per line.\n    '''", "\n", "collection", "=", "set", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file_", ":", "\n", "        ", "for", "line", "in", "file_", ":", "\n", "            ", "collection", ".", "add", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.get_file_extension": [[236, 240], ["os.path.splitext", "ext.lower"], "function", ["None"], ["", "def", "get_file_extension", "(", "path", ":", "str", ",", "dot", "=", "True", ",", "lower", ":", "bool", "=", "True", ")", ":", "\n", "    ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "1", "]", "\n", "ext", "=", "ext", "if", "dot", "else", "ext", "[", "1", ":", "]", "\n", "return", "ext", ".", "lower", "(", ")", "if", "lower", "else", "ext", "\n", "", ""]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.__init__": [[68, 78], ["tokenization.load_vocab", "collections.OrderedDict", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer", "os.path.isfile", "ValueError", "tokenization.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.tokenize": [[79, 85], ["tokenization.BertTokenizer.basic_tokenizer.tokenize", "tokenization.BertTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_tokens_to_ids": [[86, 95], ["ids.append", "ids.append"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "try", ":", "\n", "                ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "'[UNK]'", "]", ")", "\n", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.convert_ids_to_tokens": [[97, 103], ["tokens.append"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of ids in wordpiece tokens using the vocab.\"\"\"", "\n", "tokens", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "ids_to_tokens", "[", "i", "]", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained": [[104, 136], ["os.path.isdir", "cls", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "logger.error", "PRETRAINED_VOCAB_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a PreTrainedBertModel from a pre-trained model file.\n        Download and cache the pre-trained model file if needed.\n        \"\"\"", "\n", "if", "pretrained_model_name", "in", "PRETRAINED_VOCAB_ARCHIVE_MAP", ":", "\n", "            ", "vocab_file", "=", "PRETRAINED_VOCAB_ARCHIVE_MAP", "[", "pretrained_model_name", "]", "\n", "", "else", ":", "\n", "            ", "vocab_file", "=", "pretrained_model_name", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "vocab_file", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_file", ",", "VOCAB_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_vocab_file", "=", "cached_path", "(", "vocab_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_VOCAB_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "vocab_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_vocab_file", "==", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {}\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading vocabulary file {} from cache at {}\"", ".", "format", "(", "\n", "vocab_file", ",", "resolved_vocab_file", ")", ")", "\n", "# Instantiate tokenizer.", "\n", "", "tokenizer", "=", "cls", "(", "resolved_vocab_file", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer.__init__": [[141, 148], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer.tokenize": [[149, 169], ["tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._run_strip_accents": [[170, 180], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._run_split_on_punc": [[181, 200], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._tokenize_chinese_chars": [[201, 213], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._is_chinese_char": [[214, 235], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.BasicTokenizer._clean_text": [[236, 248], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.__init__": [[253, 257], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.WordpieceTokenizer.tokenize": [[258, 308], ["tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.load_vocab": [[42, 55], ["collections.OrderedDict", "open", "reader.readline", "token.strip.strip"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization.whitespace_tokenize": [[57, 64], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_whitespace": [[310, 320], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_control": [[322, 332], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yxuansu_NAG-BERT.pytorch_pretrained_bert.tokenization._is_punctuation": [[334, 348], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]]}