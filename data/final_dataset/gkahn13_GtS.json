{"home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_rosbag", "=", "None", "\n", "self", ".", "_last_write", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag._rosbag_dir": [[27, 33], ["os.path.join", "os.path.exists", "os.mkdir"], "methods", ["None"], ["", "@", "property", "\n", "def", "_rosbag_dir", "(", "self", ")", ":", "\n", "        ", "dir", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "dir", ",", "'rosbags'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dir", ")", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag._rosbag_name": [[34, 36], ["os.path.join"], "methods", ["None"], ["", "def", "_rosbag_name", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_rosbag_dir", ",", "'rosbag{0:04d}.bag'", ".", "format", "(", "num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.is_open": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_open", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_rosbag", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open": [[41, 50], ["os.path.exists", "rosbag.Bag", "rospy.Time.now", "crazyflie_env.RolloutRosbag._rosbag_name", "crazyflie_env.RolloutRosbag._rosbag_name"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag._rosbag_name", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag._rosbag_name"], ["", "def", "open", "(", "self", ")", ":", "\n", "        ", "assert", "(", "not", "self", ".", "is_open", ")", "\n", "\n", "bag_num", "=", "0", "\n", "while", "os", ".", "path", ".", "exists", "(", "self", ".", "_rosbag_name", "(", "bag_num", ")", ")", ":", "\n", "            ", "bag_num", "+=", "1", "\n", "\n", "", "self", ".", "_rosbag", "=", "rosbag", ".", "Bag", "(", "self", ".", "_rosbag_name", "(", "bag_num", ")", ",", "'w'", ",", "compression", "=", "'bz2'", ")", "\n", "self", ".", "_last_write", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write": [[51, 59], ["gcg.data.logger.logger.warn", "crazyflie_env.RolloutRosbag._rosbag.write"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write"], ["", "def", "write", "(", "self", ",", "topic", ",", "msg", ",", "stamp", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_rosbag", "is", "not", "None", ")", "\n", "\n", "if", "msg", "is", "not", "None", "and", "stamp", "is", "not", "None", ":", "\n", "            ", "if", "stamp", ">", "self", ".", "_last_write", ":", "\n", "                ", "self", ".", "_rosbag", ".", "write", "(", "topic", ",", "msg", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "warn", "(", "'Topic {0} not received'", ".", "format", "(", "topic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write_all": [[60, 63], ["crazyflie_env.RolloutRosbag.write", "msg_dict.get", "stamp_dict.get"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write"], ["", "", "def", "write_all", "(", "self", ",", "topics", ",", "msg_dict", ",", "stamp_dict", ")", ":", "\n", "        ", "for", "topic", "in", "topics", ":", "\n", "            ", "self", ".", "write", "(", "topic", ",", "msg_dict", ".", "get", "(", "topic", ")", ",", "stamp_dict", ".", "get", "(", "topic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close": [[64, 70], ["crazyflie_env.RolloutRosbag._rosbag.close"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_open", ")", "\n", "\n", "self", ".", "_rosbag", ".", "close", "(", ")", "\n", "self", ".", "_rosbag", "=", "None", "\n", "self", ".", "_last_write", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.trash": [[71, 80], ["os.remove", "crazyflie_env.RolloutRosbag.close", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close"], ["", "def", "trash", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_open", ")", "\n", "bag_fname", "=", "self", ".", "_rosbag", ".", "filename", "\n", "try", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_rosbag_dir", ",", "bag_fname", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.__init__": [[83, 187], ["params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "params.setdefault", "numpy.random.uniform", "crazyflie.msg.CFMotion", "crazyflie_env.CrazyflieEnv._setup_spec", "gcg.envs.env_spec.EnvSpec", "rospy.init_node", "time.sleep", "dict", "dict", "dict", "crazyflie_env.CrazyflieEnv._ros_topics_and_types.items", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher", "crazyflie_env.RolloutRosbag", "threading.Thread().start", "time.sleep", "int", "rospy.Subscriber", "gcg.data.logger.logger.debug", "rospy.Subscriber", "threading.Thread"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv._setup_spec", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug"], ["    ", "def", "__init__", "(", "self", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "params", ".", "setdefault", "(", "'dt'", ",", "0.25", ")", "\n", "params", ".", "setdefault", "(", "'horizon'", ",", "int", "(", "5.", "*", "60.", "/", "params", "[", "'dt'", "]", ")", ")", "# 5 minutes worth", "\n", "params", ".", "setdefault", "(", "'ros_namespace'", ",", "'/crazyflie/'", ")", "\n", "params", ".", "setdefault", "(", "'obs_shape'", ",", "(", "72", ",", "96", ",", "1", ")", ")", "\n", "params", ".", "setdefault", "(", "'yaw_limits'", ",", "[", "-", "120", ",", "120", "]", ")", "#default yaw rate range", "\n", "params", ".", "setdefault", "(", "'fixed_alt'", ",", "0.4", ")", "\n", "params", ".", "setdefault", "(", "'fixed_velocity_range'", ",", "[", "0.4", ",", "0.4", "]", ")", "\n", "params", ".", "setdefault", "(", "'press_enter_on_reset'", ",", "False", ")", "\n", "params", ".", "setdefault", "(", "'prompt_save_rollout_on_coll'", ",", "False", ")", "\n", "params", ".", "setdefault", "(", "'enable_adjustment_on_start'", ",", "True", ")", "\n", "params", ".", "setdefault", "(", "'use_joy_commands'", ",", "True", ")", "\n", "params", ".", "setdefault", "(", "'joy_start_btn'", ",", "1", ")", "#A", "\n", "params", ".", "setdefault", "(", "'joy_stop_btn'", ",", "2", ")", "#B", "\n", "params", ".", "setdefault", "(", "'joy_coll_stop_btn'", ",", "0", ")", "#X", "\n", "params", ".", "setdefault", "(", "'joy_trash_rollout_btn'", ",", "3", ")", "# Y", "\n", "params", ".", "setdefault", "(", "'joy_topic'", ",", "'/joy'", ")", "\n", "params", ".", "setdefault", "(", "'collision_reward'", ",", "1", ")", "\n", "params", ".", "setdefault", "(", "'collision_reward_only'", ",", "True", ")", "\n", "\n", "self", ".", "_obs_shape", "=", "params", "[", "'obs_shape'", "]", "\n", "self", ".", "_yaw_limits", "=", "params", "[", "'yaw_limits'", "]", "\n", "self", ".", "_fixed_alt", "=", "params", "[", "'fixed_alt'", "]", "\n", "self", ".", "_collision_reward", "=", "params", "[", "'collision_reward'", "]", "\n", "self", ".", "_collision_reward_only", "=", "params", "[", "'collision_reward_only'", "]", "\n", "self", ".", "_fixed_velocity_range", "=", "params", "[", "'fixed_velocity_range'", "]", "\n", "self", ".", "_fixed_velocity", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "_fixed_velocity_range", "[", "0", "]", ",", "self", ".", "_fixed_velocity_range", "[", "1", "]", ")", "\n", "self", ".", "_dt", "=", "params", "[", "'dt'", "]", "\n", "self", ".", "horizon", "=", "params", "[", "'horizon'", "]", "\n", "\n", "# start stop and pause", "\n", "self", ".", "_enable_adjustment_on_start", "=", "params", "[", "'enable_adjustment_on_start'", "]", "\n", "self", ".", "_use_joy_commands", "=", "params", "[", "'use_joy_commands'", "]", "\n", "self", ".", "_joy_topic", "=", "params", "[", "'joy_topic'", "]", "\n", "self", ".", "_joy_stop_btn", "=", "params", "[", "'joy_stop_btn'", "]", "\n", "self", ".", "_joy_coll_stop_btn", "=", "params", "[", "'joy_coll_stop_btn'", "]", "\n", "self", ".", "_joy_start_btn", "=", "params", "[", "'joy_start_btn'", "]", "\n", "self", ".", "_joy_trash_rollout_btn", "=", "params", "[", "'joy_trash_rollout_btn'", "]", "\n", "self", ".", "_press_enter_on_reset", "=", "params", "[", "'press_enter_on_reset'", "]", "\n", "self", ".", "_prompt_save_rollout_on_coll", "=", "params", "[", "'prompt_save_rollout_on_coll'", "]", "\n", "self", ".", "_start_pressed", "=", "False", "\n", "self", ".", "_stop_pressed", "=", "False", "\n", "self", ".", "_trash_rollout", "=", "False", "\n", "self", ".", "_coll_stop_pressed", "=", "False", "\n", "self", ".", "_curr_joy", "=", "None", "\n", "self", ".", "_curr_motion", "=", "crazyflie", ".", "msg", ".", "CFMotion", "(", ")", "\n", "\n", "self", ".", "_setup_spec", "(", ")", "\n", "assert", "(", "self", ".", "observation_im_space", ".", "shape", "[", "-", "1", "]", "==", "1", "or", "self", ".", "observation_im_space", ".", "shape", "[", "-", "1", "]", "==", "3", ")", "\n", "self", ".", "spec", "=", "EnvSpec", "(", "\n", "observation_im_space", "=", "self", ".", "observation_im_space", ",", "\n", "action_space", "=", "self", ".", "action_space", ",", "\n", "action_selection_space", "=", "self", ".", "action_selection_space", ",", "\n", "observation_vec_spec", "=", "self", ".", "observation_vec_spec", ",", "\n", "action_spec", "=", "self", ".", "action_spec", ",", "\n", "action_selection_spec", "=", "self", ".", "action_selection_spec", ",", "\n", "goal_spec", "=", "self", ".", "goal_spec", ")", "\n", "\n", "self", ".", "_last_step_time", "=", "None", "\n", "self", ".", "_is_collision", "=", "False", "\n", "\n", "rospy", ".", "init_node", "(", "'CrazyflieEnv'", ",", "anonymous", "=", "True", ")", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "self", ".", "_ros_namespace", "=", "params", "[", "'ros_namespace'", "]", "\n", "self", ".", "_ros_topics_and_types", "=", "dict", "(", "[", "\n", "(", "'cf/0/image'", ",", "sensor_msgs", ".", "msg", ".", "CompressedImage", ")", ",", "\n", "(", "'cf/0/data'", ",", "crazyflie", ".", "msg", ".", "CFData", ")", ",", "\n", "(", "'cf/0/coll'", ",", "std_msgs", ".", "msg", ".", "Bool", ")", ",", "\n", "(", "'cf/0/motion'", ",", "crazyflie", ".", "msg", ".", "CFMotion", ")", "\n", "\n", "]", ")", "\n", "self", ".", "_ros_msgs", "=", "dict", "(", ")", "\n", "self", ".", "_ros_msg_times", "=", "dict", "(", ")", "\n", "for", "topic", ",", "type", "in", "self", ".", "_ros_topics_and_types", ".", "items", "(", ")", ":", "\n", "            ", "rospy", ".", "Subscriber", "(", "topic", ",", "type", ",", "self", ".", "ros_msg_update", ",", "(", "topic", ",", ")", ")", "\n", "\n", "", "self", ".", "_ros_motion_pub", "=", "rospy", ".", "Publisher", "(", "\"/cf/0/motion\"", ",", "crazyflie", ".", "msg", ".", "CFMotion", ",", "queue_size", "=", "10", ")", "\n", "self", ".", "_ros_command_pub", "=", "rospy", ".", "Publisher", "(", "\"/cf/0/command\"", ",", "crazyflie", ".", "msg", ".", "CFCommand", ",", "queue_size", "=", "10", ")", "\n", "self", ".", "_ros_stop_pub", "=", "rospy", ".", "Publisher", "(", "'/joystop'", ",", "crazyflie", ".", "msg", ".", "JoyStop", ",", "queue_size", "=", "10", ")", "\n", "if", "self", ".", "_use_joy_commands", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Environment using joystick commands\"", ")", "\n", "self", ".", "_ros_joy_sub", "=", "rospy", ".", "Subscriber", "(", "self", ".", "_joy_topic", ",", "sensor_msgs", ".", "msg", ".", "Joy", ",", "self", ".", "_joy_cb", ")", "\n", "\n", "\n", "\n", "# I don't think this is needed", "\n", "# self._ros_pid_enable_pub = rospy.Publisher(self._ros_namespace + 'pid/enable', std_msgs.msg.Empty,", "\n", "#                                            queue_size=10)", "\n", "# self._ros_pid_disable_pub = rospy.Publisher(self._ros_namespace + 'pid/disable', std_msgs.msg.Empty,", "\n", "#                                             queue_size=10)", "\n", "\n", "", "self", ".", "_ros_rolloutbag", "=", "RolloutRosbag", "(", ")", "\n", "self", ".", "_t", "=", "0", "\n", "\n", "\n", "self", ".", "suppress_output", "=", "False", "\n", "self", ".", "resetting", "=", "False", "\n", "self", ".", "_send_override", "=", "False", "# set true only when resetting but still wanting to send background thread motion commands", "\n", "threading", ".", "Thread", "(", "target", "=", "self", ".", "_background_thread", ")", ".", "start", "(", ")", "\n", "\n", "time", ".", "sleep", "(", "1.0", ")", "#waiting for some messages before resetting", "\n", "\n", "self", ".", "delete_this_variable", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._setup_spec": [[188, 204], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "numpy.logical_and().all", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.discrete.Discrete", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.logical_and"], "methods", ["None"], ["", "def", "_setup_spec", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "action_selection_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "observation_vec_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "goal_spec", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "action_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "-", "180", ",", "high", "=", "180", ")", "\n", "self", ".", "action_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "self", ".", "action_selection_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "self", ".", "_yaw_limits", "[", "0", "]", ",", "high", "=", "self", ".", "_yaw_limits", "[", "1", "]", ")", "\n", "self", ".", "action_selection_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "\n", "assert", "(", "np", ".", "logical_and", "(", "self", ".", "action_selection_space", ".", "low", ">=", "self", ".", "action_space", ".", "low", ",", "\n", "self", ".", "action_selection_space", ".", "high", "<=", "self", ".", "action_space", ".", "high", ")", ".", "all", "(", ")", ")", "\n", "\n", "self", ".", "observation_im_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "self", ".", "_obs_shape", ")", "\n", "self", ".", "observation_vec_spec", "[", "'coll'", "]", "=", "Discrete", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._log": [[206, 218], ["gcg.data.logger.logger.info", "gcg.data.logger.logger.debug", "gcg.data.logger.logger.warn", "gcg.data.logger.logger.error", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.error"], ["", "def", "_log", "(", "self", ",", "msg", ",", "lvl", ")", ":", "\n", "        ", "if", "not", "self", ".", "suppress_output", ":", "\n", "            ", "if", "lvl", "==", "\"info\"", ":", "\n", "                ", "logger", ".", "info", "(", "msg", ")", "\n", "", "elif", "lvl", "==", "\"debug\"", ":", "\n", "                ", "logger", ".", "debug", "(", "msg", ")", "\n", "", "elif", "lvl", "==", "\"warn\"", ":", "\n", "                ", "logger", ".", "warn", "(", "msg", ")", "\n", "", "elif", "lvl", "==", "\"error\"", ":", "\n", "                ", "logger", ".", "error", "(", "msg", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"NOT VALID LOG LEVEL\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_observation": [[220, 243], ["io.BytesIO", "PIL.Image.open", "numpy.array", "PIL.Image.open.convert", "Image.open.convert.resize", "numpy.expand_dims", "PIL.Image.open.resize", "numpy.array", "crazyflie_env.CrazyflieEnv._get_collision", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._log", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_collision", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log"], ["", "", "", "def", "_get_observation", "(", "self", ")", ":", "\n", "        ", "msg", "=", "self", ".", "_ros_msgs", "[", "'cf/0/image'", "]", "\n", "\n", "recon_pil_jpg", "=", "BytesIO", "(", "msg", ".", "data", ")", "\n", "recon_pil_arr", "=", "Image", ".", "open", "(", "recon_pil_jpg", ")", "\n", "\n", "is_grayscale", "=", "(", "self", ".", "observation_im_space", ".", "shape", "[", "-", "1", "]", "==", "1", ")", "\n", "if", "is_grayscale", ":", "\n", "            ", "grayscale", "=", "recon_pil_arr", ".", "convert", "(", "'L'", ")", "\n", "grayscale_resized", "=", "grayscale", ".", "resize", "(", "self", ".", "observation_im_space", ".", "shape", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "\n", "Image", ".", "ANTIALIAS", ")", "# b/c (width, height)", "\n", "im", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "grayscale_resized", ")", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "rgb_resized", "=", "recon_pil_arr", ".", "resize", "(", "self", ".", "observation_im_space", ".", "shape", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "\n", "Image", ".", "ANTIALIAS", ")", "# b/c (width, height)", "\n", "im", "=", "np", ".", "array", "(", "rgb_resized", ")", "\n", "\n", "", "coll", "=", "self", ".", "_get_collision", "(", ")", "or", "self", ".", "_get_joy_coll_stop", "(", ")", "\n", "vec", "=", "np", ".", "array", "(", "[", "coll", "]", ")", "\n", "\n", "if", "(", "vec", "[", "0", "]", "==", "1", ")", ":", "\n", "            ", "self", ".", "_log", "(", "\"COLLISION!!\"", ",", "\"info\"", ")", "\n", "", "return", "im", ",", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_goal": [[244, 246], ["numpy.array"], "methods", ["None"], ["", "def", "_get_goal", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_reward": [[247, 253], ["None"], "methods", ["None"], ["", "def", "_get_reward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_is_collision", ":", "\n", "            ", "reward", "=", "self", ".", "_collision_reward", "\n", "", "else", ":", "\n", "            ", "reward", "=", "0", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_stop": [[256, 259], ["None"], "methods", ["None"], ["", "def", "_get_joy_stop", "(", "self", ")", ":", "\n", "#in this order", "\n", "        ", "return", "self", ".", "_use_joy_commands", "and", "self", ".", "_stop_pressed", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop": [[260, 262], ["None"], "methods", ["None"], ["", "def", "_get_joy_coll_stop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_use_joy_commands", "and", "self", ".", "_coll_stop_pressed", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout": [[263, 265], ["None"], "methods", ["None"], ["", "def", "_get_trash_rollout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_use_joy_commands", "and", "self", ".", "_trash_rollout", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_start": [[266, 270], ["None"], "methods", ["None"], ["", "def", "_get_joy_start", "(", "self", ")", ":", "\n", "#in this order", "\n", "        ", "return", "self", ".", "_use_joy_commands", "and", "self", ".", "_start_pressed", "\n", "self", ".", "_curr_joy", "and", "self", ".", "_curr_joy", ".", "buttons", "[", "self", ".", "_joy_start_btn", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_collision": [[273, 275], ["None"], "methods", ["None"], ["", "def", "_get_collision", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_is_collision", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_done": [[276, 278], ["crazyflie_env.CrazyflieEnv._get_joy_stop", "crazyflie_env.CrazyflieEnv._get_collision", "crazyflie_env.CrazyflieEnv._get_trash_rollout", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_collision", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop"], ["", "def", "_get_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_joy_stop", "(", ")", "or", "self", ".", "_get_collision", "(", ")", "or", "self", ".", "_get_trash_rollout", "(", ")", "or", "self", ".", "_get_joy_coll_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._background_thread": [[279, 285], ["rospy.Rate", "rospy.is_shutdown", "rospy.Rate.sleep", "crazyflie_env.CrazyflieEnv._ros_motion_pub.publish"], "methods", ["None"], ["", "def", "_background_thread", "(", "self", ")", ":", "\n", "        ", "rate", "=", "rospy", ".", "Rate", "(", "10", ")", "\n", "while", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "            ", "if", "(", "self", ".", "_use_joy_commands", "and", "not", "self", ".", "resetting", ")", "or", "self", ".", "_send_override", ":", "\n", "                ", "self", ".", "_ros_motion_pub", ".", "publish", "(", "self", ".", "_curr_motion", ")", "\n", "", "rate", ".", "sleep", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion": [[286, 294], ["crazyflie.msg.CFMotion"], "methods", ["None"], ["", "", "def", "_set_motion", "(", "self", ",", "x", ",", "y", ",", "yaw", ",", "dz", ")", ":", "\n", "        ", "motion", "=", "crazyflie", ".", "msg", ".", "CFMotion", "(", ")", "\n", "motion", ".", "x", "=", "x", "\n", "motion", ".", "y", "=", "y", "\n", "motion", ".", "yaw", "=", "yaw", "\n", "motion", ".", "dz", "=", "dz", "\n", "motion", ".", "is_flow_motion", "=", "True", "\n", "self", ".", "_curr_motion", "=", "motion", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_command": [[295, 300], ["crazyflie.msg.CFCommand", "crazyflie_env.CrazyflieEnv._ros_command_pub.publish"], "methods", ["None"], ["", "def", "_set_command", "(", "self", ",", "cmd", ")", ":", "\n", "#0 is ESTOP, 1 IS LAND, 2 IS TAKEOFF", "\n", "        ", "command", "=", "crazyflie", ".", "msg", ".", "CFCommand", "(", ")", "\n", "command", ".", "cmd", "=", "cmd", "\n", "self", ".", "_ros_command_pub", ".", "publish", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_stop": [[301, 306], ["crazyflie.msg.JoyStop", "crazyflie_env.CrazyflieEnv._ros_stop_pub.publish"], "methods", ["None"], ["", "def", "_set_stop", "(", "self", ",", "msg", ")", ":", "\n", "#0 is no coll stop, 1 is coll stop", "\n", "        ", "stop", "=", "crazyflie", ".", "msg", ".", "JoyStop", "(", ")", "\n", "stop", ".", "stop", "=", "msg", "\n", "self", ".", "_ros_stop_pub", ".", "publish", "(", "stop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._joy_cb": [[307, 323], ["crazyflie_env.CrazyflieEnv._set_stop", "crazyflie_env.CrazyflieEnv._set_stop"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_stop"], ["", "def", "_joy_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "_curr_joy", "=", "msg", "\n", "#permanent state", "\n", "if", "self", ".", "_curr_joy", ".", "buttons", "[", "self", ".", "_joy_start_btn", "]", ":", "\n", "            ", "self", ".", "_start_pressed", "=", "True", "\n", "\n", "", "if", "self", ".", "_curr_joy", ".", "buttons", "[", "self", ".", "_joy_stop_btn", "]", ":", "\n", "            ", "self", ".", "_stop_pressed", "=", "True", "\n", "self", ".", "_set_stop", "(", "0", ")", "\n", "\n", "", "if", "self", ".", "_curr_joy", ".", "buttons", "[", "self", ".", "_joy_coll_stop_btn", "]", ":", "\n", "            ", "self", ".", "_coll_stop_pressed", "=", "True", "\n", "self", ".", "_set_stop", "(", "1", ")", "\n", "\n", "", "if", "self", ".", "_curr_joy", ".", "buttons", "[", "self", ".", "_joy_trash_rollout_btn", "]", ":", "\n", "            ", "self", ".", "_trash_rollout", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.step": [[324, 379], ["numpy.asarray", "crazyflie_env.CrazyflieEnv._get_done", "crazyflie_env.CrazyflieEnv._get_observation", "crazyflie_env.CrazyflieEnv._get_goal", "crazyflie_env.CrazyflieEnv._get_reward", "dict", "crazyflie_env.CrazyflieEnv.ros_is_good", "crazyflie_env.CrazyflieEnv._get_joy_start", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.open", "numpy.logical_and().all", "crazyflie_env.CrazyflieEnv._log", "numpy.clip", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._get_trash_rollout", "crazyflie_env.CrazyflieEnv._set_motion", "crazyflie_env.CrazyflieEnv._set_motion", "rospy.sleep", "rospy.Time.now", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._get_collision", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.write_all", "crazyflie_env.CrazyflieEnv._log", "max", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_topics_and_types.keys", "crazyflie_env.CrazyflieEnv._log", "numpy.logical_and", "crazyflie_env.CrazyflieEnv._get_joy_stop", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._get_trash_rollout", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._log", "rospy.Time.now"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_done", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_goal", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_reward", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.ros_is_good", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_start", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_collision", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write_all", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log"], ["", "", "def", "step", "(", "self", ",", "action", ",", "offline", "=", "False", ")", ":", "\n", "        ", "if", "not", "offline", ":", "\n", "            ", "assert", "(", "self", ".", "ros_is_good", "(", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "_ros_rolloutbag", ".", "is_open", "and", "self", ".", "_get_joy_start", "(", ")", ":", "\n", "            ", "self", ".", "_log", "(", "\"Beginning Episode...\"", ",", "\"info\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "open", "(", ")", "\n", "", "elif", "not", "self", ".", "_ros_rolloutbag", ".", "is_open", ":", "\n", "            ", "self", ".", "_log", "(", "\"Waiting for Joystick input ...\"", ",", "\"debug\"", ")", "\n", "\n", "", "action", "=", "np", ".", "asarray", "(", "action", ")", "\n", "if", "not", "(", "np", ".", "logical_and", "(", "action", ">=", "self", ".", "action_space", ".", "low", ",", "action", "<=", "self", ".", "action_space", ".", "high", ")", ".", "all", "(", ")", ")", ":", "\n", "            ", "self", ".", "_log", "(", "'Action {0} will be clipped to beget_obser within bounds: {1}, {2}'", ".", "format", "(", "action", ",", "\n", "self", ".", "action_space", ".", "low", ",", "\n", "self", ".", "action_space", ".", "high", ")", ",", "\"warn\"", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "\n", "", "if", "self", ".", "_get_joy_coll_stop", "(", ")", "or", "self", ".", "_get_trash_rollout", "(", ")", ":", "\n", "            ", "self", ".", "_set_motion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "yaw", "=", "action", "[", "0", "]", "\n", "self", ".", "_set_motion", "(", "self", ".", "_fixed_velocity", ",", "0", ",", "yaw", ",", "0", ")", "\n", "\n", "", "if", "not", "offline", ":", "\n", "            ", "rospy", ".", "sleep", "(", "max", "(", "0.", ",", "self", ".", "_dt", "-", "(", "rospy", ".", "Time", ".", "now", "(", ")", "-", "self", ".", "_last_step_time", ")", ".", "to_sec", "(", ")", ")", ")", "\n", "self", ".", "_last_step_time", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "\n", "", "done", "=", "self", ".", "_get_done", "(", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "_log", "(", "'Done after {0} steps'", ".", "format", "(", "self", ".", "_t", ")", ",", "\"warn\"", ")", "\n", "if", "self", ".", "_get_collision", "(", ")", ":", "\n", "                ", "self", ".", "_log", "(", "'-- COLLISION --'", ",", "\"warn\"", ")", "\n", "", "elif", "self", ".", "_get_joy_stop", "(", ")", "or", "self", ".", "_get_joy_coll_stop", "(", ")", ":", "\n", "                ", "self", ".", "_log", "(", "'-- MANUALLY STOPPED --'", ",", "\"warn\"", ")", "\n", "", "elif", "self", ".", "_get_trash_rollout", "(", ")", ":", "\n", "                ", "self", ".", "_log", "(", "'-- TRASHING ROLLOUT --'", ",", "\"warn\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_log", "(", "'-- DONE for unknown reason --'", ",", "\"warn\"", ")", "\n", "\n", "", "", "if", "not", "offline", "and", "self", ".", "_ros_rolloutbag", ".", "is_open", ":", "\n", "#change last collision msg to have a 1 if manually noted a collision", "\n", "            ", "if", "self", ".", "_get_joy_coll_stop", "(", ")", ":", "\n", "                ", "self", ".", "_ros_msgs", "[", "[", "topic", "for", "topic", "in", "self", ".", "_ros_msgs", "if", "'coll'", "in", "topic", "]", "[", "0", "]", "]", ".", "data", "=", "1", "\n", "", "self", ".", "_ros_rolloutbag", ".", "write_all", "(", "self", ".", "_ros_topics_and_types", ".", "keys", "(", ")", ",", "self", ".", "_ros_msgs", ",", "self", ".", "_ros_msg_times", ")", "\n", "if", "done", ":", "\n", "                ", "self", ".", "_log", "(", "'Done after {0} steps'", ".", "format", "(", "self", ".", "_t", ")", ",", "\"debug\"", ")", "\n", "self", ".", "_t", "=", "0", "\n", "\n", "", "", "next_observation", "=", "self", ".", "_get_observation", "(", ")", "\n", "goal", "=", "self", ".", "_get_goal", "(", ")", "\n", "reward", "=", "self", ".", "_get_reward", "(", ")", "\n", "env_info", "=", "dict", "(", ")", "\n", "self", ".", "_t", "+=", "1", "\n", "\n", "return", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.reset_state": [[381, 394], ["rospy.Time.now", "numpy.random.uniform", "crazyflie_env.CrazyflieEnv._log"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "_last_step_time", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "self", ".", "_is_collision", "=", "False", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_done", "=", "False", "\n", "self", ".", "_curr_joy", "=", "None", "\n", "self", ".", "_start_pressed", "=", "False", "\n", "self", ".", "_stop_pressed", "=", "False", "\n", "self", ".", "_trash_rollout", "=", "False", "\n", "self", ".", "_coll_stop_pressed", "=", "False", "\n", "self", ".", "_send_override", "=", "False", "\n", "self", ".", "_fixed_velocity", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "_fixed_velocity_range", "[", "0", "]", ",", "self", ".", "_fixed_velocity_range", "[", "1", "]", ")", "\n", "self", ".", "_log", "(", "'Velocity: {0}'", ".", "format", "(", "self", ".", "_fixed_velocity", ")", ",", "\"debug\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.reset": [[396, 499], ["crazyflie_env.CrazyflieEnv.ros_is_good", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._get_trash_rollout", "crazyflie_env.CrazyflieEnv.reset_state", "crazyflie_env.CrazyflieEnv.ros_is_good", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.trash", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._get_joy_stop", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._set_command", "rospy.sleep", "crazyflie_env.CrazyflieEnv._set_motion", "time.sleep", "crazyflie_env.CrazyflieEnv._log", "input", "crazyflie_env.CrazyflieEnv._log", "rospy.sleep", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._set_command", "rospy.sleep", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._set_motion", "crazyflie_env.CrazyflieEnv._set_motion", "crazyflie_env.CrazyflieEnv.reset_state", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.open", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.open", "crazyflie_env.CrazyflieEnv._get_observation", "crazyflie_env.CrazyflieEnv._get_goal", "crazyflie_env.CrazyflieEnv._get_observation", "crazyflie_env.CrazyflieEnv._get_goal", "crazyflie_env.CrazyflieEnv._get_joy_stop", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "crazyflie_env.CrazyflieEnv._log", "input", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.close", "crazyflie_env.CrazyflieEnv.is_upside_down", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._log", "input", "crazyflie_env.CrazyflieEnv._get_joy_start", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._get_trash_rollout", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.close", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._ros_rolloutbag.trash", "crazyflie_env.CrazyflieEnv._set_motion", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._log"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.ros_is_good", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.ros_is_good", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.trash", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_command", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_command", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_goal", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_goal", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_coll_stop", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.is_upside_down", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_joy_start", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._get_trash_rollout", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.trash", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv._set_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log"], ["", "def", "reset", "(", "self", ",", "offline", "=", "False", ",", "keep_rosbag", "=", "True", ")", ":", "\n", "        ", "self", ".", "resetting", "=", "True", "\n", "if", "offline", ":", "\n", "            ", "self", ".", "_is_collision", "=", "False", "\n", "return", "self", ".", "_get_observation", "(", ")", ",", "self", ".", "_get_goal", "(", ")", "\n", "", "assert", "self", ".", "ros_is_good", "(", ")", ",", "\"On End: ROS IS NOT GOOD\"", "\n", "\n", "manual_collision_label", "=", "self", ".", "_get_joy_coll_stop", "(", ")", "\n", "trash_rollout", "=", "self", ".", "_get_trash_rollout", "(", ")", "\n", "\n", "\n", "if", "self", ".", "_ros_rolloutbag", ".", "is_open", "and", "(", "trash_rollout", "or", "not", "keep_rosbag", "or", "self", ".", "_get_joy_stop", "(", ")", ")", ":", "\n", "# should've been closed in step when done", "\n", "            ", "self", ".", "_log", "(", "'Trashing bag'", ",", "\"debug\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "trash", "(", ")", "\n", "\n", "", "if", "self", ".", "_is_collision", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting (collision)'", ",", "\"debug\"", ")", "\n", "", "elif", "self", ".", "_get_joy_stop", "(", ")", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting (joy stop)'", ",", "\"debug\"", ")", "\n", "", "elif", "self", ".", "_get_joy_coll_stop", "(", ")", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting (joy collision stop)'", ",", "\"debug\"", ")", "\n", "# if manual collision label pressed, start new episode, but skip landing and takeoff", "\n", "", "elif", "self", ".", "_get_trash_rollout", "(", ")", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting (trash rollout)'", ",", "\"debug\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting (other)'", ",", "\"debug\"", ")", "\n", "\n", "# end behavior", "\n", "", "if", "not", "manual_collision_label", "and", "not", "trash_rollout", ":", "\n", "            ", "self", ".", "_log", "(", "\"Landing.\"", ",", "'debug'", ")", "\n", "self", ".", "_set_command", "(", "0", ")", "# land", "\n", "rospy", ".", "sleep", "(", "2.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_send_override", "=", "True", "\n", "self", ".", "_set_motion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "# stay hovering", "\n", "time", ".", "sleep", "(", "1.0", ")", "# stopping motion", "\n", "\n", "# if its still open, that means it wasn't flagged to be trashed", "\n", "# this happens after landing to save battery", "\n", "", "if", "self", ".", "_ros_rolloutbag", ".", "is_open", ":", "\n", "#if is collision and config says we need to save, then save on user input, else just save always", "\n", "            ", "if", "self", ".", "_is_collision", "and", "self", ".", "_prompt_save_rollout_on_coll", ":", "\n", "                ", "self", ".", "_log", "(", "\"Real Collision Happened. Save Rollout? (y/n) default [y]: \"", ",", "\"warn\"", ")", "\n", "res", "=", "input", "(", ")", "\n", "if", "res", "is", "''", "or", "res", "is", "'y'", ":", "\n", "                    ", "self", ".", "_log", "(", "'Saving bag'", ",", "\"debug\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_log", "(", "'Trashing bag'", ",", "\"debug\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "trash", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_ros_rolloutbag", ".", "close", "(", ")", "\n", "\n", "# other cases", "\n", "", "", "if", "self", ".", "_press_enter_on_reset", ":", "\n", "            ", "self", ".", "_log", "(", "'Resetting, press enter to continue'", ",", "\"info\"", ")", "\n", "input", "(", ")", "\n", "", "elif", "not", "manual_collision_label", "and", "not", "trash_rollout", "and", "self", ".", "is_upside_down", "(", ")", ":", "\n", "            ", "self", ".", "_log", "(", "'Crazyflie is upside down'", ",", "\"info\"", ")", "\n", "self", ".", "_log", "(", "'Resetting, press enter to continue'", ",", "\"info\"", ")", "\n", "input", "(", ")", "\n", "\n", "", "self", ".", "reset_state", "(", ")", "\n", "\n", "assert", "self", ".", "ros_is_good", "(", ")", "# \"On Start: ROS IS NOT GOOD\"", "\n", "\n", "if", "not", "manual_collision_label", "and", "not", "trash_rollout", ":", "\n", "            ", "self", ".", "_log", "(", "\"Waiting to takeoff ...\"", ",", "\"debug\"", ")", "\n", "rospy", ".", "sleep", "(", "1.0", ")", "\n", "\n", "self", ".", "_log", "(", "\"Taking off\"", ",", "\"debug\"", ")", "\n", "self", ".", "_set_command", "(", "2", ")", "\n", "rospy", ".", "sleep", "(", "2.0", ")", "\n", "\n", "\n", "#readjustment means full joystick control until you press A (this replaces Wait For Start)", "\n", "", "if", "self", ".", "_use_joy_commands", "and", "self", ".", "_enable_adjustment_on_start", ":", "\n", "#orientation adjustment mode", "\n", "            ", "self", ".", "_send_override", "=", "True", "\n", "self", ".", "_log", "(", "\"Starting Position Adjustment Mode. Press Start Button to proceed.\"", ",", "'info'", ")", "\n", "self", ".", "_set_motion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "# full stop", "\n", "while", "not", "self", ".", "_get_joy_start", "(", ")", ":", "\n", "                ", "if", "self", ".", "_use_joy_commands", "and", "self", ".", "_curr_joy", ":", "\n", "# use yaw axis, and vx axis", "\n", "                    ", "self", ".", "_set_motion", "(", "self", ".", "_curr_joy", ".", "axes", "[", "3", "]", "*", "0.5", ",", "0", ",", "self", ".", "_curr_joy", ".", "axes", "[", "0", "]", "*", "-", "120", ",", "0", ")", "\n", "\n", "", "", "self", ".", "_set_motion", "(", "0", ",", "0", ",", "0", ",", "0", ")", "# full stop", "\n", "\n", "#once more to reset any other variables that may have changed", "\n", "self", ".", "reset_state", "(", ")", ";", "\n", "\n", "self", ".", "_log", "(", "\"Exiting Position Mode.\"", ",", "'info'", ")", "\n", "self", ".", "_log", "(", "\"Beginning Episode...\"", ",", "\"info\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "open", "(", ")", "\n", "\n", "", "self", ".", "resetting", "=", "False", "\n", "\n", "if", "not", "self", ".", "_use_joy_commands", ":", "\n", "            ", "self", ".", "_log", "(", "\"Beginning Episode...\"", ",", "\"info\"", ")", "\n", "self", ".", "_ros_rolloutbag", ".", "open", "(", ")", "\n", "\n", "", "return", "self", ".", "_get_observation", "(", ")", ",", "self", ".", "_get_goal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.ros_msg_update": [[504, 561], ["rospy.Time.now", "rospy.Time.now", "rospy.Time.now", "rospy.Time.now", "rospy.Time.now", "rospy.Time.now", "rospy.Time.now"], "methods", ["None"], ["", "def", "ros_msg_update", "(", "self", ",", "msg", ",", "args", ")", ":", "\n", "        ", "topic", "=", "args", "[", "0", "]", "\n", "\n", "\n", "if", "'coll'", "in", "topic", ":", "\n", "            ", "if", "msg", ".", "data", "==", "1", ":", "\n", "                ", "self", ".", "_is_collision", "=", "False", "\n", "\n", "", "if", "self", ".", "_is_collision", ":", "\n", "                ", "if", "msg", ".", "data", "==", "1", ":", "\n", "# if is_collision and current is collision, update", "\n", "                    ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "_ros_msgs", "[", "topic", "]", ".", "data", "!=", "1", ":", "\n", "# if is collision, but previous message is not collision, then this topic didn't cause a colision", "\n", "                        ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "", "", "", "else", ":", "\n", "# always update if not in collision", "\n", "                ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "\n", "", "", "elif", "'stop'", "in", "topic", ":", "\n", "            ", "if", "msg", ".", "stop", "==", "1", ":", "\n", "                ", "self", ".", "_is_collision", "=", "True", "\n", "\n", "", "if", "self", ".", "_is_collision", ":", "\n", "                ", "if", "msg", ".", "stop", "==", "1", ":", "\n", "# if is_collision and current is collision, update", "\n", "                    ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "_ros_msgs", "[", "topic", "]", ".", "data", "!=", "1", ":", "\n", "# if is collision, but previous message is not collision, then this topic didn't cause a colision", "\n", "                        ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "", "", "", "else", ":", "\n", "# always update if not in collision", "\n", "                ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "", "", "else", ":", "\n", "#CF data unpacking", "\n", "# if 'data' in topic:", "\n", "#     self._ros_msgs['accel_x'] = msg.accel_x", "\n", "#     self._ros_msg_times['accel_x'] = rospy.Time.now()", "\n", "#     self._ros_msgs['accel_y'] = msg.accel_y", "\n", "#     self._ros_msg_times['accel_y'] = rospy.Time.now()", "\n", "#     self._ros_msgs['accel_z'] = msg.accel_z", "\n", "#     self._ros_msg_times['accel_z'] = rospy.Time.now()", "\n", "#     self._ros_msgs['alt'] = msg.alt", "\n", "#     self._ros_msg_times['alt'] = rospy.Time.now()", "\n", "#     self._ros_msgs['v_batt'] = msg.v_batt", "\n", "#     self._ros_msg_times['v_batt'] = rospy.Time.now()", "\n", "# else:", "\n", "            ", "self", ".", "_ros_msgs", "[", "topic", "]", "=", "msg", "\n", "self", ".", "_ros_msg_times", "[", "topic", "]", "=", "rospy", ".", "Time", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.ros_is_good": [[562, 575], ["crazyflie_env.CrazyflieEnv._ros_topics_and_types.keys", "crazyflie_env.CrazyflieEnv._log", "crazyflie_env.CrazyflieEnv._log", "rospy.Time.now"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log"], ["", "", "def", "ros_is_good", "(", "self", ",", "print", "=", "True", ")", ":", "\n", "        ", "for", "topic", "in", "self", ".", "_ros_topics_and_types", ".", "keys", "(", ")", ":", "\n", "            ", "if", "'cmd'", "not", "in", "topic", "and", "'coll'", "not", "in", "topic", "and", "'motion'", "not", "in", "topic", "and", "'stop'", "not", "in", "topic", ":", "\n", "                ", "if", "topic", "not", "in", "self", ".", "_ros_msg_times", ":", "\n", "                    ", "if", "print", ":", "\n", "                        ", "self", ".", "_log", "(", "'Topic {0} has never been received'", ".", "format", "(", "topic", ")", ",", "\"debug\"", ")", "\n", "", "return", "False", "\n", "", "elapsed", "=", "(", "rospy", ".", "Time", ".", "now", "(", ")", "-", "self", ".", "_ros_msg_times", "[", "topic", "]", ")", ".", "to_sec", "(", ")", "\n", "if", "elapsed", ">", "self", ".", "_dt", "*", "50", ":", "\n", "                    ", "if", "print", ":", "\n", "                        ", "self", ".", "_log", "(", "'Topic {0} was received {1} seconds ago (dt is {2})'", ".", "format", "(", "topic", ",", "elapsed", ",", "self", ".", "_dt", ")", ",", "\"debug\"", ")", "\n", "", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.CrazyflieEnv.is_upside_down": [[576, 581], ["None"], "methods", ["None"], ["", "def", "is_upside_down", "(", "self", ")", ":", "\n", "        ", "alt", "=", "self", ".", "_ros_msgs", "[", "'cf/0/data'", "]", ".", "alt", "\n", "if", "(", "alt", ">", "0.05", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference.__init__": [[15, 35], ["gcg.algos.gcg_inference.GCGinference.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "exp_name", ",", "\n", "env_params", ",", "env_eval_params", ",", "\n", "rp_params", ",", "rp_eval_params", ",", "\n", "labeller_params", ",", "\n", "policy_params", ",", "\n", "alg_params", ",", "\n", "log_level", "=", "'info'", ",", "log_fname", "=", "'log.txt'", ",", "seed", "=", "None", ",", "is_continue", "=", "False", ",", "params_txt", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "_train_holdout_pct", "=", "alg_params", "[", "'train_holdout_pct'", "]", "\n", "self", ".", "_added_rosbag_filenames", "=", "[", "]", "\n", "\n", "super", "(", "CrazyflieGCGinference", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", "=", "exp_name", ",", "\n", "env_params", "=", "env_params", ",", "env_eval_params", "=", "env_eval_params", ",", "\n", "rp_params", "=", "rp_params", ",", "rp_eval_params", "=", "rp_eval_params", ",", "\n", "labeller_params", "=", "labeller_params", ",", "\n", "policy_params", "=", "policy_params", ",", "\n", "alg_params", "=", "alg_params", ",", "\n", "log_level", "=", "log_level", ",", "log_fname", "=", "log_fname", ",", "seed", "=", "seed", ",", "is_continue", "=", "is_continue", ",", "params_txt", "=", "params_txt", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._rosbag_dir": [[42, 45], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "_rosbag_dir", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_fm", ".", "exp_dir", ",", "'rosbags'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._rosbag_file_name": [[46, 48], ["os.path.join"], "methods", ["None"], ["", "def", "_rosbag_file_name", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_rosbag_dir", ",", "'rosbag{0:04d}.bag'", ".", "format", "(", "num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._split_rollouts": [[53, 69], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.set_state", "sorted", "sorted", "numpy.random.random", "train_rollouts.append", "holdout_rollouts.append"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_state"], ["", "def", "_split_rollouts", "(", "self", ",", "filenames", ")", ":", "\n", "### ensure that the training and holdout sets are always split the same", "\n", "        ", "np_random_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "train_rollouts", "=", "[", "]", "\n", "holdout_rollouts", "=", "[", "]", "\n", "for", "fname", "in", "filenames", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "self", ".", "_train_holdout_pct", ":", "\n", "                ", "train_rollouts", ".", "append", "(", "fname", ")", "\n", "", "else", ":", "\n", "                ", "holdout_rollouts", ".", "append", "(", "fname", ")", "\n", "\n", "", "", "np", ".", "random", ".", "set_state", "(", "np_random_state", ")", "\n", "\n", "return", "sorted", "(", "train_rollouts", ")", ",", "sorted", "(", "holdout_rollouts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags": [[70, 163], ["gcg.data.logger.logger.info", "crazyflie_gcg_inference.CrazyflieGCGinference._added_rosbag_filenames.append", "collections.defaultdict", "rosbag.Bag.read_messages", "rosbag.Bag.close", "collections.defaultdict", "range", "numpy.array", "numpy.array", "gcg.data.logger.logger.info", "crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags.update_env"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "def", "_add_rosbags", "(", "self", ",", "sampler", ",", "rosbag_filenames", ")", ":", "\n", "\n", "        ", "timesteps_kept", "=", "0", "\n", "timesteps_total", "=", "0", "\n", "for", "fname", "in", "rosbag_filenames", ":", "\n", "            ", "self", ".", "_added_rosbag_filenames", ".", "append", "(", "fname", ")", "\n", "\n", "### read bag file", "\n", "try", ":", "\n", "                ", "bag", "=", "rosbag", ".", "Bag", "(", "fname", ",", "'r'", ",", "compression", "=", "'bz2'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "warn", "(", "'{0}: could not open'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "print", "(", "e", ")", "\n", "continue", "\n", "", "d_bag", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# bag.read_messages", "\n", "for", "topic", ",", "msg", ",", "t", "in", "bag", ".", "read_messages", "(", ")", ":", "\n", "                ", "if", "topic", "==", "'joystop'", "and", "msg", ".", "stop", "==", "1", ":", "\n", "                    ", "logger", ".", "warn", "(", "'{0}: has incorrect collision detection. Skipping.'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "continue", "\n", "", "elif", "topic", "==", "'joystop'", "and", "msg", ".", "stop", "==", "0", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "d_bag", "[", "topic", "]", ".", "append", "(", "msg", ")", "\n", "\n", "", "", "bag", ".", "close", "(", ")", "\n", "\n", "if", "len", "(", "d_bag", "[", "'cf/0/data'", "]", ")", "==", "0", ":", "\n", "                ", "logger", ".", "warn", "(", "'{0}: has no entries. Skipping.'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "continue", "\n", "\n", "", "timesteps_total", "+=", "len", "(", "d_bag", "[", "'cf/0/data'", "]", ")", "-", "1", "\n", "\n", "d_bag_parsed", "=", "defaultdict", "(", "list", ")", "\n", "time_of_coll", "=", "0", "\n", "\n", "for", "t", "in", "range", "(", "min", "(", "[", "len", "(", "d_bag", "[", "'cf/0/data'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/motion'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/coll'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/image'", "]", ")", "]", ")", ")", ":", "\n", "                ", "for", "topic", "in", "d_bag", ":", "\n", "                    ", "try", ":", "\n", "                        ", "d_bag_parsed", "[", "topic", "]", ".", "append", "(", "d_bag", "[", "topic", "]", "[", "t", "]", ")", "\n", "", "except", ":", "\n", "                        ", "import", "IPython", ";", "IPython", ".", "embed", "(", ")", "\n", "", "", "if", "d_bag", "[", "'cf/0/coll'", "]", "[", "t", "]", ".", "data", "==", "1", ":", "\n", "                    ", "time_of_coll", "=", "t", "\n", "break", "\n", "\n", "", "", "parsed_colls", "=", "np", ".", "array", "(", "[", "msg", ".", "data", "for", "msg", "in", "d_bag_parsed", "[", "'cf/0/coll'", "]", "]", ")", "\n", "colls", "=", "np", ".", "array", "(", "[", "msg", ".", "data", "for", "msg", "in", "d_bag", "[", "'cf/0/coll'", "]", "]", ")", "\n", "\n", "if", "len", "(", "parsed_colls", ")", "<", "10", ":", "\n", "                ", "logger", ".", "warn", "(", "'{0}: had a collision too early: at timestep {1}. Skipping'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ",", "len", "(", "parsed_colls", ")", ")", ")", "\n", "continue", "\n", "\n", "", "logger", ".", "info", "(", "'Added rosbag: {0}, with {1}/{2} timesteps'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ",", "len", "(", "parsed_colls", ")", ",", "len", "(", "colls", ")", ")", ")", "\n", "timesteps_kept", "+=", "len", "(", "parsed_colls", ")", "-", "1", "\n", "\n", "### update env and step", "\n", "def", "update_env", "(", "t", ")", ":", "\n", "                ", "for", "key", "in", "d_bag", ".", "keys", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "sampler", ".", "env", ".", "ros_msg_update", "(", "d_bag", "[", "key", "]", "[", "t", "]", ",", "[", "key", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "\"Issue updating env: \"", ",", "str", "(", "e", ")", ")", "\n", "import", "IPython", ";", "IPython", ".", "embed", "(", ")", "\n", "\n", "#makes sure no statements are printed", "\n", "", "", "", "self", ".", "_env", ".", "suppress_output", "=", "True", "\n", "\n", "update_env", "(", "0", ")", "\n", "if", "len", "(", "sampler", ")", "==", "0", ":", "\n", "                ", "logger", ".", "warn", "(", "'Resetting!'", ")", "\n", "sampler", ".", "reset", "(", "offline", "=", "True", ")", "\n", "\n", "", "bag_length", "=", "min", "(", "[", "len", "(", "d_bag", "[", "'cf/0/data'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/motion'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/coll'", "]", ")", ",", "len", "(", "d_bag", "[", "'cf/0/image'", "]", ")", "]", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "bag_length", ")", ":", "\n", "                ", "update_env", "(", "t", ")", "\n", "motion", "=", "d_bag", "[", "'cf/0/motion'", "]", "[", "t", "-", "1", "]", "\n", "action", "=", "np", ".", "array", "(", "[", "motion", ".", "x", ",", "motion", ".", "y", ",", "motion", ".", "yaw", ",", "motion", ".", "dz", "]", ")", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "sampler", ".", "step", "(", "len", "(", "sampler", ")", ",", "action", "=", "action", ",", "offline", "=", "True", ")", "\n", "endt", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "self", ".", "_env", ".", "suppress_output", "=", "False", "\n", "\n", "if", "not", "sampler", ".", "is_done_nexts", ":", "\n", "                ", "logger", ".", "warn", "(", "'{0}: did not end in done, manually resetting'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "fname", ")", ")", ")", "\n", "sampler", ".", "reset", "(", "offline", "=", "True", ")", "\n", "\n", "", "num_steps", "=", "len", "(", "d_bag", "[", "'mode'", "]", ")", "-", "1", "\n", "timesteps_kept", "+=", "num_steps", "if", "num_steps", ">", "0", "else", "0", "\n", "\n", "", "logger", ".", "info", "(", "'Adding {0:d} timesteps ({1:.2f} kept)'", ".", "format", "(", "timesteps_kept", ",", "timesteps_kept", "/", "float", "(", "timesteps_total", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._add_offpolicy": [[165, 178], ["gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "sorted", "crazyflie_gcg_inference.CrazyflieGCGinference._split_rollouts", "gcg.data.logger.logger.info", "crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags", "gcg.data.logger.logger.info", "crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags", "os.path.exists", "len", "len", "os.path.join", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._split_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._add_rosbags"], ["", "def", "_add_offpolicy", "(", "self", ",", "folders", ",", "max_to_add", ")", ":", "\n", "        ", "for", "folder", "in", "folders", ":", "\n", "            ", "assert", "(", "os", ".", "path", ".", "exists", "(", "folder", ")", ",", "'offpolicy folder {0} does not exist'", ".", "format", "(", "folder", ")", ")", "\n", "logger", ".", "info", "(", "'Loading rosbag data from {0}'", ".", "format", "(", "folder", ")", ")", "\n", "rosbag_filenames", "=", "sorted", "(", "\n", "[", "os", ".", "path", ".", "join", "(", "folder", ",", "fname", ")", "for", "fname", "in", "os", ".", "listdir", "(", "folder", ")", "if", "'.bag'", "in", "fname", "]", ")", "\n", "train_rosbag_filenames", ",", "holdout_rosbag_filenames", "=", "self", ".", "_split_rollouts", "(", "rosbag_filenames", ")", "\n", "logger", ".", "info", "(", "'Adding train...'", ")", "\n", "self", ".", "_add_rosbags", "(", "self", ".", "_sampler", ",", "self", ".", "_replay_pool", ",", "train_rosbag_filenames", ")", "\n", "logger", ".", "info", "(", "'Adding holdout...'", ")", "\n", "self", ".", "_add_rosbags", "(", "self", ".", "_sampler_eval", ",", "self", ".", "_replay_pool_eval", ",", "holdout_rosbag_filenames", ")", "\n", "", "logger", ".", "info", "(", "'Added {0} train samples'", ".", "format", "(", "len", "(", "self", ".", "_replay_pool", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Added {0} holdout samples'", ".", "format", "(", "len", "(", "self", ".", "_replay_pool_eval", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._run_env_step": [[183, 191], ["gcg.data.timer.timeit.start", "crazyflie_gcg_inference.CrazyflieGCGinference._sampler.step", "gcg.data.timer.timeit.stop"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start", "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop"], ["", "def", "_run_env_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "timeit", ".", "start", "(", "'sample'", ")", "\n", "self", ".", "_sampler", ".", "step", "(", "step", ",", "\n", "take_random_actions", "=", "(", "step", "<", "self", ".", "_onpolicy_after_n_steps", ")", ",", "\n", "explore", "=", "True", ")", "\n", "timeit", ".", "stop", "(", "'sample'", ")", "\n", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._run_reset_sampler": [[192, 202], ["crazyflie_gcg_inference.CrazyflieGCGinference._sampler.reset", "gcg.data.logger.logger.warn", "gcg.data.logger.logger.warn", "crazyflie_gcg_inference.CrazyflieGCGinference._env.ros_is_good", "time.sleep", "str"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.ros_is_good"], ["", "def", "_run_reset_sampler", "(", "self", ",", "keep_rosbag", "=", "True", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_sampler", ".", "reset", "(", "keep_rosbag", "=", "keep_rosbag", ")", "\n", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "warn", "(", "'Reset exception {0}'", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "while", "not", "self", ".", "_env", ".", "ros_is_good", "(", "print", "=", "False", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.25", ")", "\n", "", "logger", ".", "warn", "(", "'Continuing...'", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.EvalCrazyflieGCG.__init__": [[15, 31], ["gcg.algos.gcg_eval.GCGeval.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "eval_itr", ",", "\n", "eval_params", ",", "\n", "exp_name", ",", "\n", "env_eval_params", ",", "\n", "policy_params", ",", "\n", "rp_eval_params", ",", "\n", "seed", "=", "None", ",", "log_level", "=", "'info'", ",", "log_fname", "=", "'log_eval.txt'", ")", ":", "\n", "        ", "GCGeval", ".", "__init__", "(", "self", ",", "\n", "eval_itr", ",", "\n", "eval_params", ",", "\n", "exp_name", ",", "\n", "env_eval_params", ",", "\n", "policy_params", ",", "\n", "rp_eval_params", ",", "\n", "seed", "=", "None", ",", "log_level", "=", "'info'", ",", "log_fname", "=", "'log_eval.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.EvalCrazyflieGCG._eval_reset": [[36, 46], ["eval_crazyflie_gcg.EvalCrazyflieGCG._sampler.reset", "gcg.data.logger.logger.warn", "gcg.data.logger.logger.info", "input", "gcg.data.logger.logger.info", "str"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "def", "_eval_reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_sampler", ".", "reset", "(", "**", "kwargs", ")", "\n", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "warn", "(", "'Reset exception reset{0}'", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Press enter to continue'", ")", "\n", "input", "(", ")", "\n", "logger", ".", "info", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.EvalCrazyflieGCG._eval_step": [[47, 59], ["eval_crazyflie_gcg.EvalCrazyflieGCG._sampler.step", "gcg.data.logger.logger.warn", "eval_crazyflie_gcg.EvalCrazyflieGCG._sampler.trash_current_rollouts", "gcg.data.logger.logger.info", "input", "eval_crazyflie_gcg.EvalCrazyflieGCG._eval_reset", "str"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.EvalCrazyflieGCG._eval_reset"], ["", "", "", "def", "_eval_step", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "_sampler", ".", "step", "(", "step", "=", "0", ",", "\n", "take_random_actions", "=", "False", ",", "\n", "explore", "=", "False", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logger", ".", "warn", "(", "'Sampler exception step{0}'", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "self", ".", "_sampler", ".", "trash_current_rollouts", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Press enter to continue'", ")", "\n", "input", "(", ")", "\n", "self", ".", "_eval_reset", "(", "keep_rosbag", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.EvalCrazyflieGCG._eval_save": [[60, 72], ["gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "input", "gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "eval_crazyflie_gcg.EvalCrazyflieGCG._save_eval_rollouts"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "", "def", "_eval_save", "(", "self", ",", "rollouts", ",", "new_rollouts", ")", ":", "\n", "        ", "logger", ".", "info", "(", "''", ")", "\n", "logger", ".", "info", "(", "'Keep rollout?'", ")", "\n", "response", "=", "input", "(", ")", "\n", "if", "response", "!=", "'y'", ":", "\n", "            ", "logger", ".", "info", "(", "'NOT saving rollouts'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Saving rollouts'", ")", "\n", "rollouts", "+=", "new_rollouts", "\n", "self", ".", "_save_eval_rollouts", "(", "rollouts", ")", "\n", "\n", "", "return", "rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.eval_crazyflie_gcg.eval_crazyflie_gcg": [[73, 75], ["gcg.algos.gcg_eval.run_eval_gcg"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.run_eval_gcg"], ["", "", "def", "eval_crazyflie_gcg", "(", "params", ",", "itr", ")", ":", "\n", "    ", "run_eval_gcg", "(", "params", ",", "itr", ",", "EvalClass", "=", "EvalCrazyflieGCG", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train.GCGtrain.__init__": [[7, 25], ["gcg.algos.gcg.GCG.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "exp_name", ",", "\n", "env_params", ",", "env_eval_params", ",", "\n", "rp_params", ",", "rp_eval_params", ",", "\n", "labeller_params", ",", "\n", "policy_params", ",", "\n", "alg_params", ",", "\n", "log_level", "=", "'info'", ",", "log_fname", "=", "'log.txt'", ",", "seed", "=", "None", ",", "is_continue", "=", "False", ",", "params_txt", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "alg_params", "[", "'offpolicy'", "]", ")", ">", "0", ",", "'Must pass in training data for GCGtrain'", "\n", "\n", "super", "(", "GCGtrain", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", "=", "exp_name", ",", "\n", "env_params", "=", "env_params", ",", "env_eval_params", "=", "env_eval_params", ",", "\n", "rp_params", "=", "rp_params", ",", "rp_eval_params", "=", "rp_eval_params", ",", "\n", "labeller_params", "=", "labeller_params", ",", "\n", "policy_params", "=", "policy_params", ",", "\n", "alg_params", "=", "alg_params", ",", "\n", "log_level", "=", "log_level", ",", "log_fname", "=", "log_fname", ",", "seed", "=", "seed", ",", "is_continue", "=", "is_continue", ",", "params_txt", "=", "params_txt", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train.GCGtrain._run_init_train": [[31, 44], ["gcg_train.GCGtrain._fm.get_train_itr", "gcg.data.timer.timeit.reset", "gcg.data.timer.timeit.start", "gcg.data.logger.logger.info", "gcg_train.GCGtrain._policy.restore", "gcg_train.GCGtrain._fm.train_policy_fname"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.get_train_itr", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.restore", "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.train_policy_fname"], ["", "def", "_run_init_train", "(", "self", ")", ":", "\n", "        ", "train_itr", "=", "self", ".", "_fm", ".", "get_train_itr", "(", ")", "\n", "if", "train_itr", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Restore train iteration {0}'", ".", "format", "(", "train_itr", "-", "1", ")", ")", "\n", "self", ".", "_policy", ".", "restore", "(", "self", ".", "_fm", ".", "train_policy_fname", "(", "train_itr", "-", "1", ")", ",", "train", "=", "True", ")", "\n", "\n", "", "save_itr", "=", "train_itr", "\n", "start_step", "=", "save_itr", "*", "self", ".", "_save_every_n_steps", "\n", "\n", "timeit", ".", "reset", "(", ")", "\n", "timeit", ".", "start", "(", "'total'", ")", "\n", "\n", "return", "start_step", ",", "save_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train.GCGtrain.run": [[45, 69], ["gcg_train.GCGtrain._run_init_train", "gcg.data.logger.logger.info", "gcg_train.GCGtrain._save_train", "gcg_train.GCGtrain._run_env_eval", "gcg_train.GCGtrain._run_train_step", "gcg_train.GCGtrain._run_log", "gcg.data.logger.logger.info", "gcg_train.GCGtrain._save_train"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train.GCGtrain._run_init_train", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._run_env_eval", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._run_train_step", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "start_step", ",", "save_itr", "=", "self", ".", "_run_init_train", "(", ")", "\n", "\n", "step", "=", "start_step", "\n", "while", "step", "<", "self", ".", "_total_steps", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "if", "step", "%", "self", ".", "_eval_every_n_steps", "==", "0", ":", "\n", "                ", "self", ".", "_run_env_eval", "(", "step", ",", "do_sampler_step", "=", "False", ",", "calculate_holdout", "=", "True", ")", "\n", "\n", "", "if", "step", ">=", "self", ".", "_learn_after_n_steps", ":", "\n", "                ", "self", ".", "_run_train_step", "(", "step", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "_log_every_n_steps", "==", "0", ":", "\n", "                ", "self", ".", "_run_log", "(", "step", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "_save_every_n_steps", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving files for itr {0}'", ".", "format", "(", "save_itr", ")", ")", "\n", "self", ".", "_save_train", "(", "save_itr", ")", "\n", "save_itr", "+=", "1", "\n", "\n", "", "", "if", "step", ">=", "self", ".", "_total_steps", ":", "\n", "            ", "logger", ".", "info", "(", "'Saving files for itr {0}'", ".", "format", "(", "save_itr", ")", ")", "\n", "self", ".", "_save_train", "(", "save_itr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval.__init__": [[13, 56], ["gcg.data.file_manager.FileManager", "gcg.data.logger.logger.debug", "gcg.data.logger.logger.debug", "gcg.data.logger.logger.debug", "gcg.data.logger.logger.debug", "gcg.misc.utils.set_seed", "gcg.samplers.sampler.Sampler", "subprocess.check_output().decode().strip", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.set_seed"], ["    ", "def", "__init__", "(", "self", ",", "\n", "eval_itr", ",", "\n", "eval_params", ",", "\n", "exp_name", ",", "\n", "env_eval_params", ",", "\n", "policy_params", ",", "\n", "rp_eval_params", ",", "\n", "seed", "=", "None", ",", "log_level", "=", "'info'", ",", "log_fname", "=", "'log_eval.txt'", ")", ":", "\n", "        ", "self", ".", "_eval_itr", "=", "eval_itr", "\n", "\n", "### create file manager and setup logger", "\n", "self", ".", "_fm", "=", "FileManager", "(", "exp_name", ",", "is_continue", "=", "True", ",", "log_level", "=", "log_level", ",", "log_fname", "=", "log_fname", ",", "\n", "log_folder", "=", "'eval_itr_{0:04d}'", ".", "format", "(", "self", ".", "_eval_itr", ")", ")", "\n", "\n", "logger", ".", "debug", "(", "'Git current'", ")", "\n", "logger", ".", "debug", "(", "subprocess", ".", "check_output", "(", "'git status | head -n 1'", ",", "shell", "=", "True", ")", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", ")", "\n", "logger", ".", "debug", "(", "subprocess", ".", "check_output", "(", "'git log -n 1| head -n 1'", ",", "shell", "=", "True", ")", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", ")", "\n", "\n", "logger", ".", "debug", "(", "'Seed {0}'", ".", "format", "(", "seed", ")", ")", "\n", "utils", ".", "set_seed", "(", "seed", ")", "\n", "\n", "### create environments", "\n", "self", ".", "_env_eval", "=", "env_eval_params", "[", "'class'", "]", "(", "params", "=", "env_eval_params", "[", "'kwargs'", "]", ")", "\n", "\n", "### create policy", "\n", "self", ".", "_policy", "=", "policy_params", "[", "'class'", "]", "(", "\n", "env_spec", "=", "self", ".", "_env_eval", ".", "spec", ",", "\n", "exploration_strategies", "=", "[", "]", ",", "\n", "**", "policy_params", "[", "'kwargs'", "]", "\n", ")", "\n", "\n", "### create replay pools", "\n", "self", ".", "_replay_pool_eval", "=", "rp_eval_params", "[", "'class'", "]", "(", "env_spec", "=", "self", ".", "_env_eval", ".", "spec", ",", "\n", "obs_history_len", "=", "self", ".", "_policy", ".", "obs_history_len", ",", "\n", "N", "=", "self", ".", "_policy", ".", "N", ",", "\n", "labeller", "=", "None", ",", "\n", "**", "rp_eval_params", "[", "'kwargs'", "]", ")", "\n", "\n", "### create samplers", "\n", "self", ".", "_sampler_eval", "=", "Sampler", "(", "\n", "env", "=", "self", ".", "_env_eval", ",", "\n", "policy", "=", "self", ".", "_policy", ",", "\n", "replay_pool", "=", "self", ".", "_replay_pool_eval", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._save_dir": [[62, 67], ["os.path.join", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "_save_dir", "(", "self", ")", ":", "\n", "        ", "eval_save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_fm", ".", "exp_dir", ",", "'eval_itr_{0:04d}'", ".", "format", "(", "self", ".", "_eval_itr", ")", ")", "\n", "os", ".", "makedirs", "(", "eval_save_dir", ",", "exist_ok", "=", "True", ")", "\n", "return", "eval_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._rollouts_file_name": [[68, 70], ["os.path.join"], "methods", ["None"], ["", "def", "_rollouts_file_name", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_save_dir", ",", "'itr_{0:04d}_eval_rollouts.pkl'", ".", "format", "(", "itr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._save_rollouts": [[75, 78], ["gcg_eval.GCGeval._rollouts_file_name", "gcg.data.mypickle.dump"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._rollouts_file_name", "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantDict.dump"], ["", "def", "_save_rollouts", "(", "self", ",", "itr", ",", "rollouts", ")", ":", "\n", "        ", "fname", "=", "self", ".", "_rollouts_file_name", "(", "itr", ")", "\n", "mypickle", ".", "dump", "(", "{", "'rollouts'", ":", "rollouts", "}", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._load_rollouts": [[83, 90], ["gcg_eval.GCGeval._rollouts_file_name", "os.path.exists", "gcg.data.mypickle.load"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._rollouts_file_name"], ["", "def", "_load_rollouts", "(", "self", ",", "itr", ")", ":", "\n", "        ", "fname", "=", "self", ".", "_rollouts_file_name", "(", "itr", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "            ", "rollouts", "=", "mypickle", ".", "load", "(", "fname", ")", "[", "'rollouts'", "]", "\n", "", "else", ":", "\n", "            ", "rollouts", "=", "[", "]", "\n", "", "return", "rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._reset": [[95, 97], ["gcg_eval.GCGeval._sampler_eval.reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset"], ["", "def", "_reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_sampler_eval", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._step": [[98, 102], ["gcg_eval.GCGeval._sampler_eval.step"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step"], ["", "def", "_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sampler_eval", ".", "step", "(", "step", "=", "0", ",", "\n", "take_random_actions", "=", "False", ",", "\n", "explore", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log": [[103, 108], ["gcg_eval.GCGeval._env_eval.log", "gcg_eval.GCGeval._replay_pool_eval.log", "gcg_eval.GCGeval._policy.log", "gcg.data.logger.logger.dump_tabular"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.log", "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.log", "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.log", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.dump_tabular"], ["", "def", "_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "_env_eval", ".", "log", "(", ")", "\n", "self", ".", "_replay_pool_eval", ".", "log", "(", ")", "\n", "self", ".", "_policy", ".", "log", "(", ")", "\n", "logger", ".", "dump_tabular", "(", "print_func", "=", "logger", ".", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._save": [[109, 117], ["gcg.data.logger.logger.info", "gcg_eval.GCGeval._save_rollouts", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._save_rollouts"], ["", "def", "_save", "(", "self", ",", "rollouts", ",", "new_rollouts", ")", ":", "\n", "        ", "assert", "(", "len", "(", "new_rollouts", ")", ">", "0", ")", "\n", "\n", "logger", ".", "info", "(", "'Saving rollouts'", ")", "\n", "rollouts", "+=", "new_rollouts", "\n", "self", ".", "_save_rollouts", "(", "self", ".", "_eval_itr", ",", "rollouts", ")", "\n", "\n", "return", "rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval.run": [[118, 146], ["gcg_eval.GCGeval._fm.inference_policy_fname", "gcg.data.logger.logger.info", "gcg_eval.GCGeval._policy.restore", "gcg.data.logger.logger.info", "gcg_eval.GCGeval._load_rollouts", "gcg.data.logger.logger.info", "gcg_eval.GCGeval._reset", "gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "len", "gcg.data.logger.logger.error", "sys.exit", "gcg_eval.GCGeval._step", "gcg_eval.GCGeval._replay_pool_eval.get_recent_rollouts", "glob.glob", "len", "len", "len", "gcg_eval.GCGeval._log", "gcg_eval.GCGeval._save", "gcg.data.logger.logger.info", "gcg.data.logger.logger.info", "len", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.inference_policy_fname", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.restore", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment._load_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.error", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._step", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._log", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.GCGeval._save", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "def", "run", "(", "self", ")", ":", "\n", "### Load policy", "\n", "        ", "policy_fname", "=", "self", ".", "_fm", ".", "inference_policy_fname", "(", "self", ".", "_eval_itr", ")", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "splitext", "(", "policy_fname", ")", "[", "0", "]", "+", "'*'", ")", ")", "==", "0", ":", "\n", "            ", "logger", ".", "error", "(", "'Policy for {0} does not exist'", ".", "format", "(", "policy_fname", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "logger", ".", "info", "(", "'Restoring policy for itr {0}'", ".", "format", "(", "self", ".", "_eval_itr", ")", ")", "\n", "self", ".", "_policy", ".", "restore", "(", "policy_fname", ",", "train", "=", "False", ")", "\n", "\n", "### Load previous eval rollouts", "\n", "logger", ".", "info", "(", "'Loading previous eval rollouts'", ")", "\n", "rollouts", "=", "self", ".", "_load_rollouts", "(", "self", ".", "_eval_itr", ")", "\n", "logger", ".", "info", "(", "'Loaded {0} rollouts'", ".", "format", "(", "len", "(", "rollouts", ")", ")", ")", "\n", "\n", "self", ".", "_reset", "(", ")", "\n", "\n", "logger", ".", "info", "(", "''", ")", "\n", "logger", ".", "info", "(", "'Rollout {0}'", ".", "format", "(", "len", "(", "rollouts", ")", ")", ")", "\n", "while", "True", ":", "\n", "            ", "self", ".", "_step", "(", ")", "\n", "\n", "new_rollouts", "=", "self", ".", "_replay_pool_eval", ".", "get_recent_rollouts", "(", ")", "\n", "if", "len", "(", "new_rollouts", ")", ">", "0", ":", "\n", "                ", "self", ".", "_log", "(", ")", "\n", "rollouts", "=", "self", ".", "_save", "(", "rollouts", ",", "new_rollouts", ")", "\n", "\n", "logger", ".", "info", "(", "''", ")", "\n", "logger", ".", "info", "(", "'Rollout {0}'", ".", "format", "(", "len", "(", "rollouts", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_eval.run_eval_gcg": [[148, 159], ["EvalClass", "EvalClass.run"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "", "", "", "def", "run_eval_gcg", "(", "params", ",", "itr", ")", ":", "\n", "    ", "EvalClass", "=", "params", "[", "'eval'", "]", "[", "'class'", "]", "\n", "algo_eval", "=", "EvalClass", "(", "eval_itr", "=", "itr", ",", "\n", "eval_params", "=", "params", "[", "'eval'", "]", "[", "'kwargs'", "]", ",", "\n", "exp_name", "=", "params", "[", "'exp_name'", "]", ",", "\n", "env_eval_params", "=", "params", "[", "'env_eval'", "]", ",", "\n", "policy_params", "=", "params", "[", "'policy'", "]", ",", "\n", "rp_eval_params", "=", "params", "[", "'replay_pool_eval'", "]", ",", "\n", "seed", "=", "params", "[", "'seed'", "]", ",", "\n", "log_level", "=", "params", "[", "'log_level'", "]", ")", "\n", "algo_eval", ".", "run", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord.__init__": [[7, 38], ["gcg.algos.gcg_train.GCGtrain.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "exp_name", ",", "\n", "env_params", ",", "env_eval_params", ",", "\n", "rp_params", ",", "rp_eval_params", ",", "\n", "labeller_params", ",", "\n", "policy_params", ",", "\n", "alg_params", ",", "\n", "log_level", "=", "'info'", ",", "log_fname", "=", "'log.txt'", ",", "seed", "=", "None", ",", "is_continue", "=", "False", ",", "params_txt", "=", "None", ")", ":", "\n", "        ", "policy_params", "[", "'kwargs'", "]", "[", "'tfrecord_folders'", "]", "=", "alg_params", "[", "'offpolicy'", "]", "\n", "policy_params", "[", "'kwargs'", "]", "[", "'batch_size'", "]", "=", "alg_params", "[", "'batch_size'", "]", "\n", "\n", "# labelling was done to make the tfrecords", "\n", "labeller_params", "=", "{", "\n", "'class'", ":", "None", ",", "\n", "'kwargs'", ":", "{", "}", "\n", "}", "\n", "\n", "# since evaluation is in tfrecords", "\n", "env_eval_params", "=", "None", "\n", "\n", "super", "(", "GCGtrainTfrecord", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", "=", "exp_name", ",", "\n", "env_params", "=", "env_params", ",", "env_eval_params", "=", "env_eval_params", ",", "\n", "rp_params", "=", "rp_params", ",", "rp_eval_params", "=", "rp_eval_params", ",", "\n", "labeller_params", "=", "labeller_params", ",", "\n", "policy_params", "=", "policy_params", ",", "\n", "alg_params", "=", "alg_params", ",", "\n", "log_level", "=", "log_level", ",", "log_fname", "=", "log_fname", ",", "seed", "=", "seed", ",", "is_continue", "=", "is_continue", ",", "params_txt", "=", "params_txt", "\n", ")", "\n", "\n", "assert", "isinstance", "(", "self", ".", "_policy", ",", "GCGPolicyTfrecord", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._add_offpolicy": [[43, 45], ["None"], "methods", ["None"], ["", "def", "_add_offpolicy", "(", "self", ",", "folders", ",", "max_to_add", ")", ":", "\n", "        ", "pass", "# don't add to replay pools since these are tfrecords", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._run_env_eval": [[50, 57], ["gcg.data.timer.timeit.start", "gcg_train_tfrecord.GCGtrainTfrecord._policy.eval_holdout", "gcg.data.timer.timeit.stop"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord.eval_holdout", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop"], ["", "def", "_run_env_eval", "(", "self", ",", "step", ",", "do_sampler_step", "=", "True", ",", "calculate_holdout", "=", "True", ")", ":", "\n", "        ", "timeit", ".", "start", "(", "'eval'", ")", "\n", "\n", "### calculate holdout costs", "\n", "self", ".", "_policy", ".", "eval_holdout", "(", ")", "\n", "\n", "timeit", ".", "stop", "(", "'eval'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._run_train_step": [[58, 74], ["gcg.data.timer.timeit.start", "gcg_train_tfrecord.GCGtrainTfrecord._policy.train_step", "gcg.data.timer.timeit.stop", "range", "gcg_train_tfrecord.GCGtrainTfrecord._policy.update_target", "gcg_train_tfrecord.GCGtrainTfrecord._run_train_step.do_train_step"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord.train_step", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.update_target"], ["", "def", "_run_train_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "def", "do_train_step", "(", ")", ":", "\n", "            ", "timeit", ".", "start", "(", "'train'", ")", "\n", "self", ".", "_policy", ".", "train_step", "(", "step", ")", "\n", "timeit", ".", "stop", "(", "'train'", ")", "\n", "\n", "", "if", "self", ".", "_train_every_n_steps", ">=", "1", ":", "\n", "            ", "if", "step", "%", "int", "(", "self", ".", "_train_every_n_steps", ")", "==", "0", ":", "\n", "                ", "do_train_step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "_", "in", "range", "(", "int", "(", "1.", "/", "self", ".", "_train_every_n_steps", ")", ")", ":", "\n", "                ", "do_train_step", "(", ")", "\n", "\n", "### update target network", "\n", "", "", "if", "step", ">", "self", ".", "_update_target_after_n_steps", "and", "step", "%", "self", ".", "_update_target_every_n_steps", "==", "0", ":", "\n", "            ", "self", ".", "_policy", ".", "update_target", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_inference.GCGinference.__init__": [[7, 28], ["gcg.algos.gcg.GCG.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "exp_name", ",", "\n", "env_params", ",", "env_eval_params", ",", "\n", "rp_params", ",", "rp_eval_params", ",", "\n", "labeller_params", ",", "\n", "policy_params", ",", "\n", "alg_params", ",", "\n", "log_level", "=", "'info'", ",", "log_fname", "=", "'log.txt'", ",", "seed", "=", "None", ",", "is_continue", "=", "False", ",", "params_txt", "=", "None", ")", ":", "\n", "        ", "env_eval_params", "=", "None", "\n", "if", "not", "alg_params", "[", "'init_inference_ckpt'", "]", ":", "\n", "            ", "print", "(", "'\\n\\n!!!!!!!!! No checkpoint being loaded !!!!!!!!!\\n\\n'", ")", "\n", "", "alg_params", "[", "'init_train_ckpt'", "]", "=", "None", "\n", "\n", "super", "(", "GCGinference", ",", "self", ")", ".", "__init__", "(", "\n", "exp_name", "=", "exp_name", ",", "\n", "env_params", "=", "env_params", ",", "env_eval_params", "=", "env_eval_params", ",", "\n", "rp_params", "=", "rp_params", ",", "rp_eval_params", "=", "rp_eval_params", ",", "\n", "labeller_params", "=", "labeller_params", ",", "\n", "policy_params", "=", "policy_params", ",", "\n", "alg_params", "=", "alg_params", ",", "\n", "log_level", "=", "log_level", ",", "log_fname", "=", "log_fname", ",", "seed", "=", "seed", ",", "is_continue", "=", "is_continue", ",", "params_txt", "=", "params_txt", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_inference.GCGinference._run_init_inference": [[34, 46], ["gcg_inference.GCGinference._fm.get_inference_itr", "gcg_inference.GCGinference._restore_rollouts", "gcg_inference.GCGinference._restore_rollouts", "gcg.data.timer.timeit.reset", "gcg.data.timer.timeit.start"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.get_inference_itr", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start"], ["", "def", "_run_init_inference", "(", "self", ")", ":", "\n", "        ", "inference_itr", "=", "self", ".", "_fm", ".", "get_inference_itr", "(", ")", "\n", "self", ".", "_restore_rollouts", "(", "'train'", ")", "\n", "self", ".", "_restore_rollouts", "(", "'eval'", ")", "\n", "\n", "save_itr", "=", "inference_itr", "\n", "start_step", "=", "save_itr", "*", "self", ".", "_save_every_n_steps", "\n", "\n", "timeit", ".", "reset", "(", ")", "\n", "timeit", ".", "start", "(", "'total'", ")", "\n", "\n", "return", "start_step", ",", "save_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_inference.GCGinference.run": [[47, 77], ["gcg_inference.GCGinference._run_init_inference", "gcg.data.logger.logger.info", "gcg_inference.GCGinference._save_inference", "gcg_inference.GCGinference._run_env_step", "gcg_inference.GCGinference._run_env_eval", "gcg_inference.GCGinference._run_log", "gcg.data.logger.logger.info", "gcg_inference.GCGinference._save_inference", "gcg_inference.GCGinference._replay_pool.get_recent_rollouts", "gcg_inference.GCGinference._replay_pool_eval.get_recent_rollouts", "gcg_inference.GCGinference._replay_pool.get_recent_rollouts", "gcg_inference.GCGinference._replay_pool_eval.get_recent_rollouts"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_inference.GCGinference._run_init_inference", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.crazyflie_gcg_inference.CrazyflieGCGinference._run_env_step", "home.repos.pwc.inspect_result.gkahn13_GtS.algos.gcg_train_tfrecord.GCGtrainTfrecord._run_env_eval", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "start_step", ",", "save_itr", "=", "self", ".", "_run_init_inference", "(", ")", "\n", "last_eval_step", "=", "0", "\n", "\n", "step", "=", "start_step", "\n", "while", "step", "<", "self", ".", "_total_steps", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "if", "step", ">=", "self", ".", "_sample_after_n_steps", ":", "\n", "                ", "step", "=", "self", ".", "_run_env_step", "(", "step", ")", "\n", "\n", "", "if", "step", "-", "last_eval_step", ">=", "self", ".", "_eval_every_n_steps", "and", "self", ".", "_replay_pool", ".", "finished_storing_rollout", ":", "\n", "                ", "self", ".", "_run_env_eval", "(", "step", ",", "do_sampler_step", "=", "True", ",", "calculate_holdout", "=", "False", ")", "\n", "last_eval_step", "=", "step", "\n", "\n", "", "if", "step", "%", "self", ".", "_log_every_n_steps", "==", "0", ":", "\n", "                ", "self", ".", "_run_log", "(", "step", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "_save_every_n_steps", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving files for itr {0}'", ".", "format", "(", "save_itr", ")", ")", "\n", "self", ".", "_save_inference", "(", "save_itr", ",", "\n", "self", ".", "_replay_pool", ".", "get_recent_rollouts", "(", ")", ",", "\n", "self", ".", "_replay_pool_eval", ".", "get_recent_rollouts", "(", ")", ")", "\n", "save_itr", "+=", "1", "\n", "\n", "", "", "if", "step", ">=", "self", ".", "_total_steps", ":", "\n", "            ", "logger", ".", "info", "(", "'Saving files for itr {0}'", ".", "format", "(", "save_itr", ")", ")", "\n", "self", ".", "_save_inference", "(", "save_itr", ",", "\n", "self", ".", "_replay_pool", ".", "get_recent_rollouts", "(", ")", ",", "\n", "self", ".", "_replay_pool_eval", ".", "get_recent_rollouts", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.__init__": [[39, 54], ["os.path.join", "robot_bases.BaseRobot._load_model", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot._load_model"], ["def", "__init__", "(", "self", ",", "model_file", ",", "robot_name", ",", "scale", "=", "1", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "parts", "=", "None", "\n", "self", ".", "jdict", "=", "None", "\n", "self", ".", "ordered_joints", "=", "None", "\n", "self", ".", "robot_body", "=", "None", "\n", "\n", "self", ".", "robot_ids", "=", "None", "\n", "self", ".", "model_file", "=", "model_file", "\n", "self", ".", "robot_name", "=", "robot_name", "\n", "self", ".", "physics_model_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "assets", ".", "__file__", ")", ")", ",", "\"models\"", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "_load_model", "(", ")", "\n", "self", ".", "eyes", "=", "self", ".", "parts", "[", "\"eyes\"", "]", "\n", "\n", "self", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.addToScene": [[56, 116], ["range", "len", "range", "pybullet.getNumJoints", "pybullet.getBodyInfo", "robot_name.decode.decode.decode", "part_name.decode.decode.decode", "robot_bases.BodyPart", "pybullet.getNumJoints", "pybullet.setJointMotorControl2", "pybullet.getJointInfo", "joint_name.decode.decode.decode", "part_name.decode.decode.decode", "robot_bases.BodyPart", "print", "print", "print", "robot_bases.BodyPart", "robot_bases.Joint.disable_motor", "robot_bases.Joint", "ordered_joints.append", "robot_bases.Joint"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.disable_motor"], ["", "def", "addToScene", "(", "self", ",", "bodies", ")", ":", "\n", "        ", "if", "self", ".", "parts", "is", "not", "None", ":", "\n", "            ", "parts", "=", "self", ".", "parts", "\n", "", "else", ":", "\n", "            ", "parts", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "jdict", "is", "not", "None", ":", "\n", "            ", "joints", "=", "self", ".", "jdict", "\n", "", "else", ":", "\n", "            ", "joints", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "ordered_joints", "is", "not", "None", ":", "\n", "            ", "ordered_joints", "=", "self", ".", "ordered_joints", "\n", "", "else", ":", "\n", "            ", "ordered_joints", "=", "[", "]", "\n", "\n", "", "dump", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "bodies", ")", ")", ":", "\n", "            ", "if", "p", ".", "getNumJoints", "(", "bodies", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "part_name", ",", "robot_name", "=", "p", ".", "getBodyInfo", "(", "bodies", "[", "i", "]", ",", "0", ")", "\n", "robot_name", "=", "robot_name", ".", "decode", "(", "\"utf8\"", ")", "\n", "part_name", "=", "part_name", ".", "decode", "(", "\"utf8\"", ")", "\n", "parts", "[", "part_name", "]", "=", "BodyPart", "(", "part_name", ",", "bodies", ",", "i", ",", "-", "1", ",", "self", ".", "scale", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "p", ".", "getNumJoints", "(", "bodies", "[", "i", "]", ")", ")", ":", "\n", "                ", "p", ".", "setJointMotorControl2", "(", "bodies", "[", "i", "]", ",", "j", ",", "p", ".", "POSITION_CONTROL", ",", "positionGain", "=", "0.1", ",", "velocityGain", "=", "0.1", ",", "force", "=", "0", ")", "\n", "## TODO (hzyjerry): the following is diabled due to pybullet update", "\n", "#_,joint_name,joint_type, _,_,_, _,_,_,_, _,_, part_name = p.getJointInfo(bodies[i], j)", "\n", "_", ",", "joint_name", ",", "joint_type", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "part_name", ",", "_", ",", "_", ",", "_", ",", "_", "=", "p", ".", "getJointInfo", "(", "bodies", "[", "i", "]", ",", "j", ")", "\n", "\n", "joint_name", "=", "joint_name", ".", "decode", "(", "\"utf8\"", ")", "\n", "part_name", "=", "part_name", ".", "decode", "(", "\"utf8\"", ")", "\n", "\n", "if", "dump", ":", "print", "(", "\"ROBOT PART '%s'\"", "%", "part_name", ")", "\n", "if", "dump", ":", "print", "(", "\"ROBOT JOINT '%s'\"", "%", "joint_name", ")", "# limits = %+0.2f..%+0.2f effort=%0.3f speed=%0.3f\" % ((joint_name,) + j.limits()) )", "\n", "parts", "[", "part_name", "]", "=", "BodyPart", "(", "part_name", ",", "bodies", ",", "i", ",", "j", ",", "self", ".", "scale", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "\n", "if", "part_name", "==", "self", ".", "robot_name", ":", "\n", "                    ", "self", ".", "robot_body", "=", "parts", "[", "part_name", "]", "\n", "\n", "", "if", "i", "==", "0", "and", "j", "==", "0", "and", "self", ".", "robot_body", "is", "None", ":", "# if nothing else works, we take this as robot_body", "\n", "                    ", "parts", "[", "self", ".", "robot_name", "]", "=", "BodyPart", "(", "self", ".", "robot_name", ",", "bodies", ",", "0", ",", "-", "1", ",", "self", ".", "scale", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "self", ".", "robot_body", "=", "parts", "[", "self", ".", "robot_name", "]", "\n", "\n", "", "if", "joint_name", "[", ":", "6", "]", "==", "\"ignore\"", ":", "\n", "                    ", "Joint", "(", "joint_name", ",", "bodies", ",", "i", ",", "j", ",", "self", ".", "scale", ")", ".", "disable_motor", "(", ")", "\n", "continue", "\n", "\n", "", "if", "joint_name", "[", ":", "8", "]", "!=", "\"jointfix\"", "and", "joint_type", "!=", "p", ".", "JOINT_FIXED", ":", "\n", "                    ", "joints", "[", "joint_name", "]", "=", "Joint", "(", "joint_name", ",", "bodies", ",", "i", ",", "j", ",", "self", ".", "scale", ",", "model_type", "=", "self", ".", "model_type", ")", "\n", "ordered_joints", ".", "append", "(", "joints", "[", "joint_name", "]", ")", "\n", "\n", "joints", "[", "joint_name", "]", ".", "power_coef", "=", "100.0", "\n", "\n", "", "", "", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "for", "j", "in", "ordered_joints", ":", "\n", "                ", "print", "(", "j", ",", "j", ".", "power_coef", ")", "\n", "", "", "return", "parts", ",", "joints", ",", "ordered_joints", ",", "self", ".", "robot_body", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot._load_model": [[117, 123], ["robot_bases.BaseRobot.addToScene", "pybullet.loadMJCF", "os.path.join", "pybullet.loadURDF", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.addToScene"], ["", "def", "_load_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model_type", "==", "\"MJCF\"", ":", "\n", "            ", "self", ".", "robot_ids", "=", "p", ".", "loadMJCF", "(", "os", ".", "path", ".", "join", "(", "self", ".", "physics_model_dir", ",", "self", ".", "model_file", ")", ",", "flags", "=", "p", ".", "URDF_USE_SELF_COLLISION", "+", "p", ".", "URDF_USE_SELF_COLLISION_EXCLUDE_ALL_PARENTS", ")", "\n", "", "if", "self", ".", "model_type", "==", "\"URDF\"", ":", "\n", "            ", "self", ".", "robot_ids", "=", "(", "p", ".", "loadURDF", "(", "os", ".", "path", ".", "join", "(", "self", ".", "physics_model_dir", ",", "self", ".", "model_file", ")", ",", "globalScaling", "=", "self", ".", "scale", ")", ",", ")", "\n", "", "self", ".", "parts", ",", "self", ".", "jdict", ",", "self", ".", "ordered_joints", ",", "self", ".", "robot_body", "=", "self", ".", "addToScene", "(", "self", ".", "robot_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.reset": [[124, 147], ["random.uniform", "random.uniform", "random.randint", "i_p.append", "random.uniform", "robot_bases.BaseRobot.robot_body.reset_orientation", "robot_bases.BaseRobot.robot_body.reset_position", "robot_bases.BaseRobot.robot_specific_reset", "robot_bases.BaseRobot.calc_state", "robot_bases.BaseRobot._load_model", "robot_bases.quatToXYZW", "transforms3d.euler.euler2quat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.reset_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot._load_model", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.quatToXYZW"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "robot_ids", "is", "None", ":", "\n", "            ", "self", ".", "_load_model", "(", ")", "\n", "\n", "", "self", ".", "height", "=", "random", ".", "uniform", "(", "self", ".", "config", "[", "'height_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'height_limits'", "]", "[", "1", "]", ")", "\n", "self", ".", "pitch", "=", "random", ".", "uniform", "(", "self", ".", "config", "[", "'pitch_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'pitch_limits'", "]", "[", "1", "]", ")", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_initial'", "]", "-", "1", ")", "\n", "i_p", "=", "(", "self", ".", "config", "[", "'initial_pos'", "]", "[", "index", "]", ")", "[", ":", "]", "\n", "\n", "i_p", ".", "append", "(", "self", ".", "height", ")", "#height +- 0.1", "\n", "\n", "i_o", "=", "[", "0", ",", "self", ".", "pitch", ",", "self", ".", "config", "[", "'initial_yaw'", "]", "[", "index", "]", "]", "\n", "\n", "self", ".", "vx", "=", "random", ".", "uniform", "(", "self", ".", "config", "[", "'velocity_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'velocity_limits'", "]", "[", "1", "]", ")", "\n", "\n", "\n", "self", ".", "robot_body", ".", "reset_orientation", "(", "quatToXYZW", "(", "euler2quat", "(", "*", "i_o", ")", ",", "'wxyz'", ")", ")", "#*self.config[\"initial_orn\"]), 'wxyz'))", "\n", "self", ".", "robot_body", ".", "reset_position", "(", "i_p", ")", "#self.config[\"initial_pos\"])", "\n", "# self.reset_random_pos()", "\n", "self", ".", "robot_specific_reset", "(", ")", "\n", "\n", "state", "=", "self", ".", "calc_state", "(", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.reset_new_pose": [[172, 175], ["robot_bases.BaseRobot.robot_body.reset_orientation", "robot_bases.BaseRobot.robot_body.reset_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.reset_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_position"], ["", "def", "reset_new_pose", "(", "self", ",", "pos", ",", "orn", ")", ":", "\n", "        ", "self", ".", "robot_body", ".", "reset_orientation", "(", "orn", ")", "\n", "self", ".", "robot_body", ".", "reset_position", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.calc_potential": [[176, 178], ["None"], "methods", ["None"], ["", "def", "calc_potential", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.__init__": [[180, 182], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "body_part", ")", ":", "\n", "        ", "self", ".", "body_part", "=", "body_part", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz": [[183, 185], ["robot_bases.Pose_Helper.body_part.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "xyz", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body_part", ".", "get_position", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.rpy": [[186, 188], ["pybullet.getEulerFromQuaternion", "robot_bases.Pose_Helper.body_part.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "rpy", "(", "self", ")", ":", "\n", "        ", "return", "p", ".", "getEulerFromQuaternion", "(", "self", ".", "body_part", ".", "get_orientation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.orientation": [[189, 191], ["robot_bases.Pose_Helper.body_part.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "orientation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body_part", ".", "get_orientation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.__init__": [[194, 206], ["robot_bases.BodyPart.get_orientation", "robot_bases.Pose_Helper", "robot_bases.BodyPart.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["    ", "def", "__init__", "(", "self", ",", "body_name", ",", "bodies", ",", "bodyIndex", ",", "bodyPartIndex", ",", "scale", ",", "model_type", ")", ":", "\n", "        ", "self", ".", "bodies", "=", "bodies", "\n", "self", ".", "body_name", "=", "body_name", "\n", "self", ".", "bodyIndex", "=", "bodyIndex", "\n", "self", ".", "bodyPartIndex", "=", "bodyPartIndex", "\n", "if", "model_type", "==", "\"MJCF\"", ":", "\n", "            ", "self", ".", "scale", "=", "scale", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "1", "\n", "", "self", ".", "initialPosition", "=", "self", ".", "get_position", "(", ")", "/", "self", ".", "scale", "\n", "self", ".", "initialOrientation", "=", "self", ".", "get_orientation", "(", ")", "\n", "self", ".", "bp_pose", "=", "Pose_Helper", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_name": [[207, 209], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "body_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._state_fields_of_pose_of": [[210, 222], ["numpy.array", "pybullet.getBasePositionAndOrientation", "pybullet.getLinkState"], "methods", ["None"], ["", "def", "_state_fields_of_pose_of", "(", "self", ",", "body_id", ",", "link_id", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"Calls native pybullet method for getting real (scaled) robot body pose\n           \n           Note that there is difference between xyz in real world scale and xyz\n           in simulation. Thus you should never call pybullet methods directly\n        \"\"\"", "\n", "if", "link_id", "==", "-", "1", ":", "\n", "            ", "(", "x", ",", "y", ",", "z", ")", ",", "(", "a", ",", "b", ",", "c", ",", "d", ")", "=", "p", ".", "getBasePositionAndOrientation", "(", "body_id", ")", "\n", "", "else", ":", "\n", "            ", "(", "x", ",", "y", ",", "z", ")", ",", "(", "a", ",", "b", ",", "c", ",", "d", ")", ",", "_", ",", "_", ",", "_", ",", "_", "=", "p", ".", "getLinkState", "(", "body_id", ",", "link_id", ")", "\n", "", "x", ",", "y", ",", "z", "=", "x", "*", "self", ".", "scale", ",", "y", "*", "self", ".", "scale", ",", "z", "*", "self", ".", "scale", "\n", "return", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", ",", "a", ",", "b", ",", "c", ",", "d", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._set_fields_of_pose_of": [[223, 226], ["pybullet.resetBasePositionAndOrientation", "numpy.array"], "methods", ["None"], ["", "def", "_set_fields_of_pose_of", "(", "self", ",", "pos", ",", "orn", ")", ":", "\n", "        ", "\"\"\"Calls native pybullet method for setting real (scaled) robot body pose\"\"\"", "\n", "p", ".", "resetBasePositionAndOrientation", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "np", ".", "array", "(", "pos", ")", "/", "self", ".", "scale", ",", "orn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_pose": [[227, 229], ["robot_bases.BodyPart._state_fields_of_pose_of"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._state_fields_of_pose_of"], ["", "def", "get_pose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_fields_of_pose_of", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "bodyPartIndex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_position": [[230, 234], ["robot_bases.BodyPart.get_pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_pose"], ["", "def", "get_position", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get position of body part\n           Position is defined in real world scale \"\"\"", "\n", "return", "self", ".", "get_pose", "(", ")", "[", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_orientation": [[235, 239], ["robot_bases.BodyPart.get_pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_pose"], ["", "def", "get_orientation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get orientation of body part\n           Orientation is by default defined in [x,y,z,w]\"\"\"", "\n", "return", "self", ".", "get_pose", "(", ")", "[", "3", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_position": [[242, 246], ["robot_bases.BodyPart._set_fields_of_pose_of", "robot_bases.BodyPart.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._set_fields_of_pose_of", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "set_position", "(", "self", ",", "position", ")", ":", "\n", "        ", "\"\"\"Get position of body part\n           Position is defined in real world scale \"\"\"", "\n", "self", ".", "_set_fields_of_pose_of", "(", "position", ",", "self", ".", "get_orientation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_orientation": [[247, 251], ["robot_bases.BodyPart._set_fields_of_pose_of", "robot_bases.BodyPart.current_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._set_fields_of_pose_of", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.current_position"], ["", "def", "set_orientation", "(", "self", ",", "orientation", ")", ":", "\n", "        ", "\"\"\"Get position of body part\n           Orientation is defined in [x,y,z,w]\"\"\"", "\n", "self", ".", "_set_fields_of_pose_of", "(", "self", ".", "current_position", "(", ")", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_pose": [[252, 254], ["robot_bases.BodyPart._set_fields_of_pose_of"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart._set_fields_of_pose_of"], ["", "def", "set_pose", "(", "self", ",", "position", ",", "orientation", ")", ":", "\n", "        ", "self", ".", "_set_fields_of_pose_of", "(", "position", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose": [[255, 257], ["None"], "methods", ["None"], ["", "def", "pose", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bp_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.current_position": [[258, 260], ["robot_bases.BodyPart.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "current_position", "(", "self", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "get_position", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.current_orientation": [[261, 263], ["robot_bases.BodyPart.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "current_orientation", "(", "self", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "get_orientation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.reset_position": [[264, 266], ["robot_bases.BodyPart.set_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.set_position"], ["", "def", "reset_position", "(", "self", ",", "position", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "set_position", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.reset_orientation": [[267, 269], ["robot_bases.BodyPart.set_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_orientation"], ["", "def", "reset_orientation", "(", "self", ",", "orientation", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "set_orientation", "(", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.reset_pose": [[270, 272], ["robot_bases.BodyPart.set_pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_pose"], ["", "def", "reset_pose", "(", "self", ",", "position", ",", "orientation", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "set_pose", "(", "position", ",", "orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.speed": [[273, 279], ["numpy.array", "pybullet.getBaseVelocity", "pybullet.getLinkState"], "methods", ["None"], ["", "def", "speed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "bodyPartIndex", "==", "-", "1", ":", "\n", "            ", "(", "vx", ",", "vy", ",", "vz", ")", ",", "_", "=", "p", ".", "getBaseVelocity", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ")", "\n", "", "else", ":", "\n", "            ", "(", "x", ",", "y", ",", "z", ")", ",", "(", "a", ",", "b", ",", "c", ",", "d", ")", ",", "_", ",", "_", ",", "_", ",", "_", ",", "(", "vx", ",", "vy", ",", "vz", ")", ",", "(", "vr", ",", "vp", ",", "vyaw", ")", "=", "p", ".", "getLinkState", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "bodyPartIndex", ",", "computeLinkVelocity", "=", "1", ")", "\n", "", "return", "np", ".", "array", "(", "[", "vx", ",", "vy", ",", "vz", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.angular_speed": [[280, 286], ["numpy.array", "pybullet.getBaseVelocity", "pybullet.getLinkState"], "methods", ["None"], ["", "def", "angular_speed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "bodyPartIndex", "==", "-", "1", ":", "\n", "            ", "_", ",", "(", "vr", ",", "vp", ",", "vyaw", ")", "=", "p", ".", "getBaseVelocity", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ")", "\n", "", "else", ":", "\n", "            ", "(", "x", ",", "y", ",", "z", ")", ",", "(", "a", ",", "b", ",", "c", ",", "d", ")", ",", "_", ",", "_", ",", "_", ",", "_", ",", "(", "vx", ",", "vy", ",", "vz", ")", ",", "(", "vr", ",", "vp", ",", "vyaw", ")", "=", "p", ".", "getLinkState", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "bodyPartIndex", ",", "computeLinkVelocity", "=", "1", ")", "\n", "", "return", "np", ".", "array", "(", "[", "vr", ",", "vp", ",", "vyaw", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.contact_list": [[287, 289], ["pybullet.getContactPoints"], "methods", ["None"], ["", "def", "contact_list", "(", "self", ")", ":", "\n", "        ", "return", "p", ".", "getContactPoints", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "-", "1", ",", "self", ".", "bodyPartIndex", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.__init__": [[292, 306], ["pybullet.getJointInfo"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "joint_name", ",", "bodies", ",", "bodyIndex", ",", "jointIndex", ",", "scale", ",", "model_type", ")", ":", "\n", "        ", "self", ".", "bodies", "=", "bodies", "\n", "self", ".", "bodyIndex", "=", "bodyIndex", "\n", "self", ".", "jointIndex", "=", "jointIndex", "\n", "self", ".", "joint_name", "=", "joint_name", "\n", "_", ",", "_", ",", "self", ".", "jointType", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "self", ".", "lowerLimit", ",", "self", ".", "upperLimit", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "p", ".", "getJointInfo", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ")", "\n", "self", ".", "power_coeff", "=", "0", "\n", "if", "model_type", "==", "\"MJCF\"", ":", "\n", "            ", "self", ".", "scale", "=", "scale", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale", "=", "1", "\n", "", "if", "self", ".", "jointType", "==", "p", ".", "JOINT_PRISMATIC", ":", "\n", "            ", "self", ".", "upperLimit", "*=", "self", ".", "scale", "\n", "self", ".", "lowerLimit", "*=", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.__str__": [[307, 309], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"idx: {}, name: {}\"", ".", "format", "(", "self", ".", "jointIndex", ",", "self", ".", "joint_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_state": [[310, 318], ["pybullet.getJointState"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get state of joint\n           Position is defined in real world scale \"\"\"", "\n", "x", ",", "vx", ",", "_", ",", "_", "=", "p", ".", "getJointState", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ")", "\n", "if", "self", ".", "jointType", "==", "p", ".", "JOINT_PRISMATIC", ":", "\n", "            ", "x", "*=", "self", ".", "scale", "\n", "vx", "*=", "self", ".", "scale", "\n", "", "return", "x", ",", "vx", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_state": [[319, 326], ["pybullet.resetJointState"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "x", ",", "vx", ")", ":", "\n", "        ", "\"\"\"Set state of joint\n           x is defined in real world scale \"\"\"", "\n", "if", "self", ".", "jointType", "==", "p", ".", "JOINT_PRISMATIC", ":", "\n", "            ", "x", "/=", "self", ".", "scale", "\n", "vx", "/=", "self", ".", "scale", "\n", "", "p", ".", "resetJointState", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ",", "x", ",", "vx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_relative_state": [[327, 333], ["robot_bases.Joint.get_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_state"], ["", "def", "get_relative_state", "(", "self", ")", ":", "\n", "        ", "pos", ",", "vel", "=", "self", ".", "get_state", "(", ")", "\n", "pos_mid", "=", "0.5", "*", "(", "self", ".", "lowerLimit", "+", "self", ".", "upperLimit", ")", ";", "\n", "return", "(", "\n", "2", "*", "(", "pos", "-", "pos_mid", ")", "/", "(", "self", ".", "upperLimit", "-", "self", ".", "lowerLimit", ")", ",", "\n", "0.1", "*", "vel", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_position": [[335, 341], ["pybullet.setJointMotorControl2", "numpy.array"], "methods", ["None"], ["", "def", "set_position", "(", "self", ",", "position", ")", ":", "\n", "        ", "\"\"\"Set position of joint\n           Position is defined in real world scale \"\"\"", "\n", "if", "self", ".", "jointType", "==", "p", ".", "JOINT_PRISMATIC", ":", "\n", "            ", "position", "=", "np", ".", "array", "(", "position", ")", "/", "self", ".", "scale", "\n", "", "p", ".", "setJointMotorControl2", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ",", "p", ".", "POSITION_CONTROL", ",", "targetPosition", "=", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_velocity": [[342, 348], ["pybullet.setJointMotorControl2", "numpy.array"], "methods", ["None"], ["", "def", "set_velocity", "(", "self", ",", "velocity", ")", ":", "\n", "        ", "\"\"\"Set velocity of joint\n           Velocity is defined in real world scale \"\"\"", "\n", "if", "self", ".", "jointType", "==", "p", ".", "JOINT_PRISMATIC", ":", "\n", "            ", "velocity", "=", "np", ".", "array", "(", "velocity", ")", "/", "self", ".", "scale", "\n", "", "p", ".", "setJointMotorControl2", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ",", "p", ".", "VELOCITY_CONTROL", ",", "targetVelocity", "=", "velocity", ")", "# , positionGain=0.1, velocityGain=0.1)", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_torque": [[349, 351], ["pybullet.setJointMotorControl2"], "methods", ["None"], ["", "def", "set_torque", "(", "self", ",", "torque", ")", ":", "\n", "        ", "p", ".", "setJointMotorControl2", "(", "bodyIndex", "=", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "jointIndex", "=", "self", ".", "jointIndex", ",", "controlMode", "=", "p", ".", "TORQUE_CONTROL", ",", "force", "=", "torque", ")", "#, positionGain=0.1, velocityGain=0.1)", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state": [[352, 354], ["robot_bases.Joint.set_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_state"], ["", "def", "reset_state", "(", "self", ",", "pos", ",", "vel", ")", ":", "\n", "        ", "self", ".", "set_state", "(", "pos", ",", "vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.disable_motor": [[355, 357], ["pybullet.setJointMotorControl2"], "methods", ["None"], ["", "def", "disable_motor", "(", "self", ")", ":", "\n", "        ", "p", ".", "setJointMotorControl2", "(", "self", ".", "bodies", "[", "self", ".", "bodyIndex", "]", ",", "self", ".", "jointIndex", ",", "controlMode", "=", "p", ".", "POSITION_CONTROL", ",", "targetPosition", "=", "0", ",", "targetVelocity", "=", "0", ",", "positionGain", "=", "0.1", ",", "velocityGain", "=", "0.1", ",", "force", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_joint_relative_state": [[358, 360], ["robot_bases.Joint.get_relative_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_relative_state"], ["", "def", "get_joint_relative_state", "(", "self", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "get_relative_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_position": [[361, 363], ["robot_bases.Joint.set_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.set_position"], ["", "def", "set_motor_position", "(", "self", ",", "pos", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "set_position", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_torque": [[364, 366], ["robot_bases.Joint.set_torque"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_torque"], ["", "def", "set_motor_torque", "(", "self", ",", "torque", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "set_torque", "(", "torque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_velocity": [[367, 369], ["robot_bases.Joint.set_velocity"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_velocity"], ["", "def", "set_motor_velocity", "(", "self", ",", "vel", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "set_velocity", "(", "vel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_joint_state": [[370, 372], ["robot_bases.Joint.reset_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state"], ["", "def", "reset_joint_state", "(", "self", ",", "position", ",", "velocity", ")", ":", "# Synonym method", "\n", "        ", "return", "self", ".", "reset_state", "(", "position", ",", "velocity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.current_position": [[373, 375], ["robot_bases.Joint.get_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_state"], ["", "def", "current_position", "(", "self", ")", ":", "# Backward compatibility", "\n", "        ", "return", "self", ".", "get_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.current_relative_position": [[376, 378], ["robot_bases.Joint.get_relative_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_relative_state"], ["", "def", "current_relative_position", "(", "self", ")", ":", "# Backward compatibility", "\n", "        ", "return", "self", ".", "get_relative_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_current_position": [[379, 381], ["robot_bases.Joint.reset_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state"], ["", "def", "reset_current_position", "(", "self", ",", "position", ",", "velocity", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "reset_state", "(", "position", ",", "velocity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_position": [[382, 384], ["robot_bases.Joint.reset_state"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_state"], ["", "def", "reset_position", "(", "self", ",", "position", ",", "velocity", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "reset_state", "(", "position", ",", "velocity", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.quatFromXYZW": [[17, 24], ["seq.index", "seq.index", "seq.index", "seq.index", "len"], "function", ["None"], ["def", "quatFromXYZW", "(", "xyzw", ",", "seq", "=", "'xyzw'", ")", ":", "\n", "    ", "\"\"\"Convert quaternion from arbitrary sequence to XYZW (pybullet convention)\n    \"\"\"", "\n", "assert", "len", "(", "seq", ")", "==", "4", "and", "'x'", "in", "seq", "and", "'y'", "in", "seq", "and", "'z'", "in", "seq", "and", "'w'", "in", "seq", ",", "\"Quaternion sequence {} is not valid, please double check.\"", ".", "format", "(", "seq", ")", "\n", "inds", "=", "[", "seq", ".", "index", "(", "'x'", ")", ",", "seq", ".", "index", "(", "'y'", ")", ",", "seq", ".", "index", "(", "'z'", ")", ",", "seq", ".", "index", "(", "'w'", ")", "]", "\n", "return", "xyzw", "[", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.quatToXYZW": [[25, 32], ["seq.index", "seq.index", "seq.index", "seq.index", "len"], "function", ["None"], ["", "def", "quatToXYZW", "(", "orn", ",", "seq", "=", "'xyzw'", ")", ":", "\n", "    ", "\"\"\"Convert quaternion from XYZW (pybullet convention) to arbitrary sequence\n    \"\"\"", "\n", "assert", "len", "(", "seq", ")", "==", "4", "and", "'x'", "in", "seq", "and", "'y'", "in", "seq", "and", "'z'", "in", "seq", "and", "'w'", "in", "seq", ",", "\"Quaternion sequence {} is not valid, please double check.\"", ".", "format", "(", "seq", ")", "\n", "inds", "=", "[", "seq", ".", "index", "(", "'x'", ")", ",", "seq", ".", "index", "(", "'y'", ")", ",", "seq", ".", "index", "(", "'z'", ")", ",", "seq", ".", "index", "(", "'w'", ")", "]", "\n", "return", "orn", "[", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv.__init__": [[38, 52], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.env_modalities.CameraRobotEnv.__init__", "drone_env.DroneNavigateEnv.robot_introduce", "drone_env.DroneNavigateEnv.scene_introduce", "sandbox.crazyflie.src.gcg.envs.GibsonEnv.robot_locomotors.Quadrotor3"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.robot_introduce", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.scene_introduce"], ["def", "__init__", "(", "self", ",", "config", ",", "gpu_count", "=", "0", ")", ":", "\n", "#self.config = self.parse_config(config)", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "\n", "CameraRobotEnv", ".", "__init__", "(", "self", ",", "self", ".", "config", ",", "gpu_count", ",", "\n", "scene_type", "=", "\"building\"", ",", "\n", "tracking_camera", "=", "tracking_camera", ")", "\n", "\n", "self", ".", "robot_introduce", "(", "Quadrotor3", "(", "self", ".", "config", ",", "env", "=", "self", ")", ")", "\n", "self", ".", "scene_introduce", "(", ")", "\n", "self", ".", "gui", "=", "self", ".", "config", "[", "\"mode\"", "]", "==", "\"gui\"", "\n", "self", ".", "total_reward", "=", "0", "\n", "self", ".", "total_frame", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv.add_text": [[55, 64], ["cv2.putText", "cv2.putText", "cv2.putText", "cv2.putText"], "methods", ["None"], ["", "def", "add_text", "(", "self", ",", "img", ")", ":", "\n", "        ", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "x", ",", "y", ",", "z", "=", "self", ".", "robot", ".", "body_xyz", "\n", "r", ",", "p", ",", "ya", "=", "self", ".", "robot", ".", "body_rpy", "\n", "cv2", ".", "putText", "(", "img", ",", "'x:{0:.4f} y:{1:.4f} z:{2:.4f}'", ".", "format", "(", "x", ",", "y", ",", "z", ")", ",", "(", "10", ",", "20", ")", ",", "font", ",", "0.5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "'ro:{0:.4f} pth:{1:.4f} ya:{2:.4f}'", ".", "format", "(", "r", ",", "p", ",", "ya", ")", ",", "(", "10", ",", "40", ")", ",", "font", ",", "0.5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "'potential:{0:.4f}'", ".", "format", "(", "self", ".", "potential", ")", ",", "(", "10", ",", "60", ")", ",", "font", ",", "0.5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "'fps:{0:.4f}'", ".", "format", "(", "self", ".", "fps", ")", ",", "(", "10", ",", "80", ")", ",", "font", ",", "0.5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv._rewards": [[65, 128], ["drone_env.DroneNavigateEnv.robot.calc_potential", "float", "enumerate", "float", "set", "float", "len", "drone_env.DroneNavigateEnv.robot.dist_to_target", "print", "print", "print", "print", "numpy.square().mean", "drone_env.DroneNavigateEnv.robot.parts[].contact_list", "len", "f.contact_list", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HuskyClimber.calc_potential", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.dist_to_target", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.contact_list", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.contact_list"], ["", "def", "_rewards", "(", "self", ",", "action", "=", "None", ",", "debugmode", "=", "False", ")", ":", "\n", "        ", "a", "=", "action", "\n", "potential_old", "=", "self", ".", "potential", "\n", "self", ".", "potential", "=", "self", ".", "robot", ".", "calc_potential", "(", ")", "\n", "progress", "=", "float", "(", "self", ".", "potential", "-", "potential_old", ")", "\n", "\n", "feet_collision_cost", "=", "0.0", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "\n", "self", ".", "robot", ".", "feet", ")", ":", "# TODO: Maybe calculating feet contacts could be done within the robot code", "\n", "# print(f.contact_list())", "\n", "            ", "contact_ids", "=", "set", "(", "(", "x", "[", "2", "]", ",", "x", "[", "4", "]", ")", "for", "x", "in", "f", ".", "contact_list", "(", ")", ")", "\n", "# print(\"CONTACT OF '%d' WITH %d\" % (contact_ids, \",\".join(contact_names)) )", "\n", "if", "(", "self", ".", "ground_ids", "&", "contact_ids", ")", ":", "\n", "# see Issue 63: https://github.com/openai/roboschool/issues/63", "\n", "# feet_collision_cost += self.foot_collision_cost", "\n", "                ", "self", ".", "robot", ".", "feet_contact", "[", "i", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "self", ".", "robot", ".", "feet_contact", "[", "i", "]", "=", "0.0", "\n", "# print(self.robot.feet_contact)", "\n", "\n", "#electricity_cost  = self.electricity_cost  * float(np.abs(a*self.robot.joint_speeds).mean())  # let's assume we ", "\n", "", "", "electricity_cost", "=", "self", ".", "stall_torque_cost", "*", "float", "(", "np", ".", "square", "(", "a", ")", ".", "mean", "(", ")", ")", "\n", "\n", "\n", "debugmode", "=", "0", "\n", "wall_contact", "=", "[", "pt", "for", "pt", "in", "self", ".", "robot", ".", "parts", "[", "'base_link'", "]", ".", "contact_list", "(", ")", "if", "pt", "[", "6", "]", "[", "2", "]", ">", "0.15", "]", "\n", "wall_collision_cost", "=", "self", ".", "wall_collision_cost", "*", "len", "(", "wall_contact", ")", "\n", "\n", "joints_at_limit_cost", "=", "float", "(", "self", ".", "joints_at_limit_cost", "*", "self", ".", "robot", ".", "joints_at_limit", ")", "\n", "close_to_goal", "=", "0", "\n", "if", "self", ".", "robot", ".", "dist_to_target", "(", ")", "<", "2", ":", "\n", "            ", "close_to_goal", "=", "0.5", "\n", "\n", "", "obstacle_penalty", "=", "0", "\n", "\n", "debugmode", "=", "0", "\n", "\n", "debugmode", "=", "0", "\n", "if", "(", "debugmode", ")", ":", "\n", "            ", "print", "(", "\"Wall contact points\"", ",", "len", "(", "wall_contact", ")", ")", "\n", "print", "(", "\"Collision cost\"", ",", "wall_collision_cost", ")", "\n", "print", "(", "\"electricity_cost\"", ",", "electricity_cost", ")", "\n", "print", "(", "\"close to goal\"", ",", "close_to_goal", ")", "\n", "#print(\"progress\")", "\n", "#print(progress)", "\n", "#print(\"electricity_cost\")", "\n", "#print(electricity_cost)", "\n", "#print(\"joints_at_limit_cost\")", "\n", "#print(joints_at_limit_cost)", "\n", "#print(\"feet_collision_cost\")", "\n", "#print(feet_collision_cost)", "\n", "\n", "", "rewards", "=", "[", "\n", "#alive,", "\n", "progress", ",", "\n", "#wall_collision_cost,", "\n", "close_to_goal", ",", "\n", "obstacle_penalty", "\n", "#electricity_cost,", "\n", "#joints_at_limit_cost,", "\n", "#feet_collision_cost", "\n", "]", "\n", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv._termination": [[129, 133], ["drone_env.DroneNavigateEnv.robot.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "_termination", "(", "self", ",", "debugmode", "=", "False", ")", ":", "\n", "\n", "        ", "done", "=", "self", ".", "nframe", ">", "250", "or", "self", ".", "robot", ".", "get_position", "(", ")", "[", "2", "]", "<", "0", "\n", "return", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv._reset": [[134, 140], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.env_modalities.CameraRobotEnv._reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_frame", "=", "0", "\n", "self", ".", "total_reward", "=", "0", "\n", "\n", "obs", "=", "CameraRobotEnv", ".", "_reset", "(", "self", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.__init__": [[143, 154], ["drone_env.DroneNavigateEnv.__init__", "drone_env.GcgDroneNavigateEnv._setup_spec", "gcg.envs.env_spec.EnvSpec"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv._setup_spec"], ["    ", "def", "__init__", "(", "self", ",", "params", "=", "{", "}", ",", "gpu_count", "=", "0", ")", ":", "\n", "        ", "DroneNavigateEnv", ".", "__init__", "(", "self", ",", "params", ",", "gpu_count", ")", "\n", "\n", "self", ".", "_obs_shape", "=", "params", "[", "'obs_shape'", "]", "\n", "self", ".", "_yaw_limits", "=", "params", "[", "'yaw_limits'", "]", "\n", "\n", "self", ".", "_horizon", "=", "params", "[", "'horizon'", "]", "\n", "self", ".", "_model_id", "=", "params", "[", "'model_id'", "]", "\n", "self", ".", "_setup_spec", "(", ")", "\n", "assert", "(", "self", ".", "observation_im_space", ".", "shape", "[", "-", "1", "]", "==", "1", "or", "self", ".", "observation_im_space", ".", "shape", "[", "-", "1", "]", "==", "3", ")", "\n", "self", ".", "spec", "=", "EnvSpec", "(", "self", ".", "observation_im_space", ",", "self", ".", "action_space", ",", "self", ".", "action_selection_space", ",", "self", ".", "observation_vec_spec", ",", "self", ".", "action_spec", ",", "self", ".", "action_selection_spec", ",", "self", ".", "goal_spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.horizon": [[155, 158], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv._setup_spec": [[160, 179], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "numpy.logical_and().all", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.discrete.Discrete", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.logical_and"], "methods", ["None"], ["", "def", "_setup_spec", "(", "self", ")", ":", "\n", "        ", "self", ".", "action_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "action_selection_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "observation_vec_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "goal_spec", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "action_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "-", "180", ",", "high", "=", "180", ")", "\n", "\n", "self", ".", "action_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "\n", "self", ".", "action_selection_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "self", ".", "_yaw_limits", "[", "0", "]", ",", "high", "=", "self", ".", "_yaw_limits", "[", "1", "]", ")", "\n", "\n", "self", ".", "action_selection_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "assert", "(", "np", ".", "logical_and", "(", "self", ".", "action_selection_space", ".", "low", ">=", "self", ".", "action_space", ".", "low", ",", "\n", "self", ".", "action_selection_space", ".", "high", "<=", "self", ".", "action_space", ".", "high", ")", ".", "all", "(", ")", ")", "\n", "\n", "self", ".", "observation_im_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "self", ".", "_obs_shape", ")", "\n", "self", ".", "observation_vec_spec", "[", "'coll'", "]", "=", "Discrete", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.step": [[180, 186], ["DroneNavigateEnv._step", "drone_env.GcgDroneNavigateEnv.get_collision", "drone_env.GcgDroneNavigateEnv.get_filtered_observation", "dict", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._step", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_collision", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_filtered_observation"], ["", "def", "step", "(", "self", ",", "a", ")", ":", "\n", "        ", "observations", ",", "reward", ",", "_", ",", "env_info_internal", "=", "DroneNavigateEnv", ".", "_step", "(", "self", ",", "a", ")", "\n", "done", "=", "self", ".", "get_collision", "(", ")", "\n", "filtered_obs", "=", "self", ".", "get_filtered_observation", "(", "observations", ")", "\n", "env_info", "=", "dict", "(", "x", "=", "env_info_internal", "[", "\"x\"", "]", ",", "y", "=", "env_info_internal", "[", "\"y\"", "]", ",", "yaw", "=", "env_info_internal", "[", "\"yaw\"", "]", ",", "height", "=", "env_info_internal", "[", "\"height\"", "]", ",", "speed", "=", "env_info_internal", "[", "\"speed\"", "]", ",", "model_id", "=", "self", ".", "_model_id", ")", "\n", "return", "filtered_obs", ",", "np", ".", "array", "(", "[", "]", ")", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.reset": [[187, 192], ["drone_env.DroneNavigateEnv._reset", "drone_env.GcgDroneNavigateEnv.get_filtered_observation_reset", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_filtered_observation_reset"], ["", "def", "reset", "(", "self", ",", "offline", "=", "False", ",", "keep_rosbag", "=", "True", ")", ":", "\n", "        ", "observations", "=", "DroneNavigateEnv", ".", "_reset", "(", "self", ")", "\n", "filtered_obs", "=", "self", ".", "get_filtered_observation_reset", "(", "observations", ")", "\n", "\n", "return", "filtered_obs", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.ros_is_good": [[193, 195], ["None"], "methods", ["None"], ["", "def", "ros_is_good", "(", "self", ",", "print", "=", "False", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_collision": [[196, 207], ["print", "print", "print", "print", "print", "print", "print", "len", "abs", "abs", "termcolor.colored", "termcolor.colored", "termcolor.colored", "drone_env.GcgDroneNavigateEnv.robot.parts[].contact_list", "drone_env.GcgDroneNavigateEnv.robot.get_orientation_eulerian", "drone_env.GcgDroneNavigateEnv.robot.get_orientation_eulerian"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.contact_list", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation_eulerian", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation_eulerian"], ["", "def", "get_collision", "(", "self", ")", ":", "\n", "        ", "collision", "=", "(", "len", "(", "self", ".", "robot", ".", "parts", "[", "'base_link'", "]", ".", "contact_list", "(", ")", ")", ">", "0", ")", "or", "(", "abs", "(", "self", ".", "robot", ".", "get_orientation_eulerian", "(", ")", "[", "0", "]", ")", ">", "0.5", ")", "or", "(", "abs", "(", "self", ".", "robot", ".", "get_orientation_eulerian", "(", ")", "[", "1", "]", ")", ">", "0.5", ")", "\n", "if", "collision", ":", "\n", "            ", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "colored", "(", "\"COLLISION!!!!!\"", ",", "\"green\"", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "colored", "(", "\"COLLISION!!!!!\"", ",", "\"red\"", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "print", "(", "colored", "(", "\"COLLISION!!!!!\"", ",", "\"yellow\"", ")", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "", "return", "collision", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_filtered_observation": [[208, 214], ["cv2.cvtColor", "cv2.imshow", "cv2.waitKey", "numpy.array", "cv2.resize", "int", "drone_env.GcgDroneNavigateEnv.get_collision"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_collision"], ["", "def", "get_filtered_observation", "(", "self", ",", "observations", ")", ":", "\n", "        ", "image", "=", "observations", "[", "'rgb_filled'", "]", "\n", "image_resized", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "resize", "(", "image", ",", "(", "96", ",", "96", ")", ")", "[", "12", ":", "84", "]", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "cv2", ".", "imshow", "(", "'image'", ",", "image_resized", ")", "\n", "cv2", ".", "waitKey", "(", "5", ")", "\n", "return", "(", "image_resized", ",", "np", ".", "array", "(", "[", "int", "(", "self", ".", "get_collision", "(", ")", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.GcgDroneNavigateEnv.get_filtered_observation_reset": [[215, 221], ["cv2.cvtColor", "cv2.imshow", "cv2.waitKey", "numpy.array", "cv2.resize"], "methods", ["None"], ["", "def", "get_filtered_observation_reset", "(", "self", ",", "observations", ")", ":", "\n", "        ", "image", "=", "observations", "[", "'rgb_filled'", "]", "\n", "image_resized", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "resize", "(", "image", ",", "(", "96", ",", "96", ")", ")", "[", "12", ":", "84", "]", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "cv2", ".", "imshow", "(", "'image'", ",", "image_resized", ")", "\n", "cv2", ".", "waitKey", "(", "5", ")", "\n", "return", "(", "image_resized", ",", "np", ".", "array", "(", "[", "0", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.__init__": [[23, 65], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.robot_bases.BaseRobot.__init__", "numpy.ones", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "type", "type", "type", "type", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filename", ",", "# robot file name ", "\n", "robot_name", ",", "# robot name", "\n", "action_dim", ",", "# action dimension", "\n", "power", ",", "\n", "initial_pos", ",", "\n", "target_pos", ",", "\n", "scale", ",", "\n", "sensor_dim", "=", "None", ",", "\n", "resolution", "=", "512", ",", "\n", "control", "=", "'torque'", ",", "\n", "env", "=", "None", "\n", ")", ":", "\n", "        ", "BaseRobot", ".", "__init__", "(", "self", ",", "filename", ",", "robot_name", ",", "scale", ",", "env", ")", "\n", "self", ".", "control", "=", "control", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "obs_dim", "=", "None", "\n", "self", ".", "obs_dim", "=", "[", "self", ".", "resolution", ",", "self", ".", "resolution", ",", "0", "]", "\n", "\n", "if", "\"rgb_filled\"", "in", "self", ".", "env", ".", "config", "[", "\"output\"", "]", ":", "\n", "            ", "self", ".", "obs_dim", "[", "2", "]", "+=", "3", "\n", "", "if", "\"depth\"", "in", "self", ".", "env", ".", "config", "[", "\"output\"", "]", ":", "\n", "            ", "self", ".", "obs_dim", "[", "2", "]", "+=", "1", "\n", "\n", "", "assert", "type", "(", "sensor_dim", ")", "==", "int", ",", "\"Sensor dimension must be int, got {}\"", ".", "format", "(", "type", "(", "sensor_dim", ")", ")", "\n", "assert", "type", "(", "action_dim", ")", "==", "int", ",", "\"Action dimension must be int, got {}\"", ".", "format", "(", "type", "(", "action_dim", ")", ")", "\n", "\n", "action_high", "=", "np", ".", "ones", "(", "[", "action_dim", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "obs_high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "obs_dim", ")", "+", "OBSERVATION_EPS", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "obs_high", ",", "obs_high", ")", "\n", "sensor_high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "[", "sensor_dim", "]", ")", "\n", "self", ".", "sensor_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "sensor_high", ",", "sensor_high", ")", "\n", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "camera_x", "=", "0", "\n", "self", ".", "target_pos", "=", "target_pos", "\n", "self", ".", "initial_pos", "=", "initial_pos", "\n", "self", ".", "body_xyz", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "angle_to_target", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.robot_specific_reset": [[68, 77], ["numpy.array", "robot_locomotors.WalkerBase.scene.actor_introduce", "j.reset_joint_state", "robot_locomotors.WalkerBase.np_random.uniform"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_joint_state"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "for", "j", "in", "self", ".", "ordered_joints", ":", "\n", "            ", "j", ".", "reset_joint_state", "(", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", "0.1", ",", "high", "=", "0.1", ")", ",", "0", ")", "\n", "\n", "", "self", ".", "feet", "=", "[", "self", ".", "parts", "[", "f", "]", "for", "f", "in", "self", ".", "foot_list", "]", "\n", "self", ".", "feet_contact", "=", "np", ".", "array", "(", "[", "0.0", "for", "f", "in", "self", ".", "foot_list", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "scene", ".", "actor_introduce", "(", "self", ")", "\n", "self", ".", "initial_z", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position": [[78, 82], ["robot_locomotors.WalkerBase.robot_body.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "get_position", "(", "self", ")", ":", "\n", "        ", "'''Get current robot position\n        '''", "\n", "return", "self", ".", "robot_body", ".", "get_position", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation": [[83, 87], ["robot_locomotors.WalkerBase.robot_body.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "get_orientation", "(", "self", ")", ":", "\n", "        ", "'''Return robot orientation\n        '''", "\n", "return", "self", ".", "robot_body", ".", "get_orientation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation_eulerian": [[88, 90], ["pybullet.getEulerFromQuaternion", "robot_locomotors.WalkerBase.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "get_orientation_eulerian", "(", "self", ")", ":", "\n", "        ", "return", "p", ".", "getEulerFromQuaternion", "(", "self", ".", "get_orientation", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.set_position": [[91, 93], ["robot_locomotors.WalkerBase.robot_body.reset_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_position"], ["", "def", "set_position", "(", "self", ",", "pos", ")", ":", "\n", "        ", "self", ".", "robot_body", ".", "reset_position", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.move_by": [[94, 97], ["robot_locomotors.WalkerBase.robot_body.reset_position", "numpy.array", "robot_locomotors.WalkerBase.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.reset_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "move_by", "(", "self", ",", "delta", ")", ":", "\n", "        ", "new_pos", "=", "np", ".", "array", "(", "delta", ")", "+", "self", ".", "get_position", "(", ")", "\n", "self", ".", "robot_body", ".", "reset_position", "(", "new_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.move_forward": [[98, 101], ["robot_locomotors.WalkerBase.robot_body.get_orientation", "robot_locomotors.WalkerBase.move_by", "transforms3d.quaternions.quat2mat().dot", "numpy.array", "transforms3d.quaternions.quat2mat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.move_by"], ["", "def", "move_forward", "(", "self", ",", "forward", "=", "0.05", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "w", "=", "self", ".", "robot_body", ".", "get_orientation", "(", ")", "\n", "self", ".", "move_by", "(", "quat2mat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ".", "dot", "(", "np", ".", "array", "(", "[", "forward", ",", "0", ",", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.move_backward": [[102, 105], ["robot_locomotors.WalkerBase.robot_body.get_orientation", "robot_locomotors.WalkerBase.move_by", "transforms3d.quaternions.quat2mat().dot", "numpy.array", "transforms3d.quaternions.quat2mat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.move_by"], ["", "def", "move_backward", "(", "self", ",", "backward", "=", "0.05", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", ",", "w", "=", "self", ".", "robot_body", ".", "get_orientation", "(", ")", "\n", "self", ".", "move_by", "(", "quat2mat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ".", "dot", "(", "np", ".", "array", "(", "[", "-", "backward", ",", "0", ",", "0", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.turn_left": [[106, 110], ["robot_locomotors.WalkerBase.robot_body.get_orientation", "transforms3d.quaternions.qmult", "robot_locomotors.WalkerBase.robot_body.set_orientation", "transforms3d.euler.euler2quat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_orientation"], ["", "def", "turn_left", "(", "self", ",", "delta", "=", "0.03", ")", ":", "\n", "        ", "orn", "=", "self", ".", "robot_body", ".", "get_orientation", "(", ")", "\n", "new_orn", "=", "qmult", "(", "(", "euler2quat", "(", "-", "delta", ",", "0", ",", "0", ")", ")", ",", "orn", ")", "\n", "self", ".", "robot_body", ".", "set_orientation", "(", "new_orn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.turn_right": [[111, 115], ["robot_locomotors.WalkerBase.robot_body.get_orientation", "transforms3d.quaternions.qmult", "robot_locomotors.WalkerBase.robot_body.set_orientation", "transforms3d.euler.euler2quat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_orientation"], ["", "def", "turn_right", "(", "self", ",", "delta", "=", "0.03", ")", ":", "\n", "        ", "orn", "=", "self", ".", "robot_body", ".", "get_orientation", "(", ")", "\n", "new_orn", "=", "qmult", "(", "(", "euler2quat", "(", "delta", ",", "0", ",", "0", ")", ")", ",", "orn", ")", "\n", "self", ".", "robot_body", ".", "set_orientation", "(", "new_orn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_rpy": [[116, 118], ["robot_locomotors.WalkerBase.robot_body.bp_pose.rpy"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.rpy"], ["", "def", "get_rpy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "robot_body", ".", "bp_pose", ".", "rpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.apply_action": [[119, 141], ["enumerate", "j.set_motor_torque", "enumerate", "j.set_motor_velocity", "enumerate", "float", "j.set_motor_position", "enumerate", "numpy.clip", "float", "type", "type", "numpy.clip", "j.set_motor_torque", "j.set_motor_velocity", "float", "j.set_motor_position", "numpy.clip", "float", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_torque", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_velocity", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_torque", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_velocity", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_position"], ["", "def", "apply_action", "(", "self", ",", "a", ")", ":", "\n", "#print(self.ordered_joints)", "\n", "        ", "if", "self", ".", "control", "==", "'torque'", ":", "\n", "            ", "for", "n", ",", "j", "in", "enumerate", "(", "self", ".", "ordered_joints", ")", ":", "\n", "                ", "j", ".", "set_motor_torque", "(", "self", ".", "power", "*", "j", ".", "power_coef", "*", "float", "(", "np", ".", "clip", "(", "a", "[", "n", "]", ",", "-", "1", ",", "+", "1", ")", ")", ")", "\n", "", "", "elif", "self", ".", "control", "==", "'velocity'", ":", "\n", "            ", "for", "n", ",", "j", "in", "enumerate", "(", "self", ".", "ordered_joints", ")", ":", "\n", "                ", "j", ".", "set_motor_velocity", "(", "self", ".", "power", "*", "j", ".", "power_coef", "*", "float", "(", "np", ".", "clip", "(", "a", "[", "n", "]", ",", "-", "1", ",", "+", "1", ")", ")", ")", "\n", "", "", "elif", "self", ".", "control", "==", "'position'", ":", "\n", "            ", "for", "n", ",", "j", "in", "enumerate", "(", "self", ".", "ordered_joints", ")", ":", "\n", "                ", "j", ".", "set_motor_position", "(", "a", "[", "n", "]", ")", "\n", "", "", "elif", "type", "(", "self", ".", "control", ")", "is", "list", "or", "type", "(", "self", ".", "control", ")", "is", "tuple", ":", "#if control is a tuple, set different control", "\n", "# type for each joint", "\n", "            ", "for", "n", ",", "j", "in", "enumerate", "(", "self", ".", "ordered_joints", ")", ":", "\n", "                ", "if", "self", ".", "control", "[", "n", "]", "==", "'torque'", ":", "\n", "                    ", "j", ".", "set_motor_torque", "(", "self", ".", "power", "*", "j", ".", "power_coef", "*", "float", "(", "np", ".", "clip", "(", "a", "[", "n", "]", ",", "-", "1", ",", "+", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "control", "[", "n", "]", "==", "'velocity'", ":", "\n", "                    ", "j", ".", "set_motor_velocity", "(", "self", ".", "power", "*", "j", ".", "power_coef", "*", "float", "(", "np", ".", "clip", "(", "a", "[", "n", "]", ",", "-", "1", ",", "+", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "control", "[", "n", "]", "==", "'position'", ":", "\n", "                    ", "j", ".", "set_motor_position", "(", "a", "[", "n", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_target_position": [[142, 144], ["None"], "methods", ["None"], ["", "", "def", "get_target_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.set_target_position": [[145, 147], ["None"], "methods", ["None"], ["", "def", "set_target_position", "(", "self", ",", "pos", ")", ":", "\n", "        ", "self", ".", "target_pos", "=", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.calc_state": [[148, 209], ["numpy.array().flatten", "numpy.count_nonzero", "robot_locomotors.WalkerBase.robot_body.pose", "numpy.array().flatten", "robot_locomotors.WalkerBase.rpy", "robot_locomotors.WalkerBase.get_rpy", "numpy.arctan2", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.abs", "numpy.linalg.norm", "numpy.array", "numpy.dot", "numpy.array", "numpy.clip", "parts_xyz[].mean", "parts_xyz[].mean", "print", "print", "print", "robot_locomotors.WalkerBase.robot_body.speed", "print", "print", "numpy.array().flatten.fill", "numpy.array.fill", "numpy.concatenate", "numpy.array", "numpy.abs", "numpy.array", "robot_locomotors.WalkerBase.xyz", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.array().flatten.get_joint_relative_state", "pybullet.pose().xyz", "numpy.sin", "robot_locomotors.WalkerBase.parts.values", "pybullet.pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.rpy", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_rpy", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.speed", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.get_joint_relative_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose"], ["", "def", "calc_state", "(", "self", ")", ":", "\n", "        ", "j", "=", "np", ".", "array", "(", "[", "j", ".", "get_joint_relative_state", "(", ")", "for", "j", "in", "self", ".", "ordered_joints", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "self", ".", "joint_speeds", "=", "j", "[", "1", ":", ":", "2", "]", "\n", "self", ".", "joints_at_limit", "=", "np", ".", "count_nonzero", "(", "np", ".", "abs", "(", "j", "[", "0", ":", ":", "2", "]", ")", ">", "0.99", ")", "\n", "\n", "body_pose", "=", "self", ".", "robot_body", ".", "pose", "(", ")", "\n", "parts_xyz", "=", "np", ".", "array", "(", "[", "p", ".", "pose", "(", ")", ".", "xyz", "(", ")", "for", "p", "in", "self", ".", "parts", ".", "values", "(", ")", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "body_xyz", "=", "(", "\n", "parts_xyz", "[", "0", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "parts_xyz", "[", "1", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "body_pose", ".", "xyz", "(", ")", "[", "2", "]", ")", "# torso z is more informative than mean z", "\n", "self", ".", "body_rpy", "=", "body_pose", ".", "rpy", "(", ")", "\n", "z", "=", "self", ".", "body_xyz", "[", "2", "]", "\n", "if", "self", ".", "initial_z", "==", "None", ":", "\n", "            ", "self", ".", "initial_z", "=", "z", "\n", "", "r", ",", "p", ",", "yaw", "=", "self", ".", "body_rpy", "\n", "robot_orn", "=", "self", ".", "get_rpy", "(", ")", "\n", "\n", "self", ".", "walk_target_theta", "=", "np", ".", "arctan2", "(", "self", ".", "target_pos", "[", "1", "]", "-", "self", ".", "body_xyz", "[", "1", "]", ",", "\n", "self", ".", "target_pos", "[", "0", "]", "-", "self", ".", "body_xyz", "[", "0", "]", ")", "\n", "self", ".", "walk_target_dist", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "[", "self", ".", "target_pos", "[", "1", "]", "-", "self", ".", "body_xyz", "[", "1", "]", ",", "self", ".", "target_pos", "[", "0", "]", "-", "self", ".", "body_xyz", "[", "0", "]", "]", ")", "\n", "self", ".", "walk_target_dist_xyz", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "[", "self", ".", "target_pos", "[", "2", "]", "-", "self", ".", "body_xyz", "[", "2", "]", ",", "self", ".", "target_pos", "[", "0", "]", "-", "self", ".", "body_xyz", "[", "1", "]", ",", "self", ".", "target_pos", "[", "0", "]", "-", "self", ".", "body_xyz", "[", "0", "]", "]", ")", "\n", "\n", "self", ".", "angle_to_target", "=", "self", ".", "walk_target_theta", "-", "yaw", "\n", "if", "self", ".", "angle_to_target", ">", "np", ".", "pi", ":", "\n", "            ", "self", ".", "angle_to_target", "-=", "2", "*", "np", ".", "pi", "\n", "", "elif", "self", ".", "angle_to_target", "<", "-", "np", ".", "pi", ":", "\n", "            ", "self", ".", "angle_to_target", "+=", "2", "*", "np", ".", "pi", "\n", "\n", "", "self", ".", "walk_height_diff", "=", "np", ".", "abs", "(", "self", ".", "target_pos", "[", "2", "]", "-", "self", ".", "body_xyz", "[", "2", "]", ")", "\n", "\n", "self", ".", "dist_to_start", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "self", ".", "body_xyz", ")", "-", "np", ".", "array", "(", "self", ".", "initial_pos", ")", ")", "\n", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Robot dsebug mode: walk_height_diff\"", ",", "self", ".", "walk_height_diff", ")", "\n", "print", "(", "\"Robot dsebug mode: walk_target_z\"", ",", "self", ".", "target_pos", "[", "2", "]", ")", "\n", "print", "(", "\"Robot dsebug mode: body_xyz\"", ",", "self", ".", "body_xyz", "[", "2", "]", ")", "\n", "\n", "", "rot_speed", "=", "np", ".", "array", "(", "\n", "[", "[", "np", ".", "cos", "(", "-", "yaw", ")", ",", "-", "np", ".", "sin", "(", "-", "yaw", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "-", "yaw", ")", ",", "np", ".", "cos", "(", "-", "yaw", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", "\n", ")", "\n", "vx", ",", "vy", ",", "vz", "=", "np", ".", "dot", "(", "rot_speed", ",", "self", ".", "robot_body", ".", "speed", "(", ")", ")", "# rotate speed back to body point of view", "\n", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Robot state\"", ",", "self", ".", "target_pos", "[", "1", "]", "-", "self", ".", "body_xyz", "[", "1", "]", ",", "self", ".", "target_pos", "[", "0", "]", "-", "self", ".", "body_xyz", "[", "0", "]", ")", "\n", "\n", "", "more", "=", "np", ".", "array", "(", "[", "z", ",", "vx", ",", "vy", ",", "vz", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Robot more\"", ",", "more", ")", "\n", "\n", "\n", "", "if", "not", "'nonviz_sensor'", "in", "self", ".", "env", ".", "config", "[", "\"output\"", "]", ":", "\n", "            ", "j", ".", "fill", "(", "0", ")", "\n", "more", ".", "fill", "(", "0", ")", "\n", "\n", "", "return", "np", ".", "clip", "(", "np", ".", "concatenate", "(", "[", "more", "]", ")", ",", "-", "5", ",", "+", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.calc_potential": [[210, 218], ["print", "print"], "methods", ["None"], ["", "def", "calc_potential", "(", "self", ")", ":", "\n", "# progress in potential field is speed*dt, typical speed is about 2-3 meter per second, this potential will change 2-3 per frame (not per second),", "\n", "# all rewards have rew/frame units and close to 1.0 (hzyjerry) ==> make rewards similar scale", "\n", "        ", "debugmode", "=", "0", "\n", "if", "(", "debugmode", ")", ":", "\n", "            ", "print", "(", "\"calc_potential: self.walk_target_dist x y\"", ",", "self", ".", "walk_target_dist", ")", "\n", "print", "(", "\"robot position\"", ",", "self", ".", "body_xyz", ",", "\"target position\"", ",", "[", "self", ".", "target_pos", "[", "0", "]", ",", "self", ".", "target_pos", "[", "1", "]", ",", "self", ".", "target_pos", "[", "2", "]", "]", ")", "\n", "", "return", "-", "self", ".", "walk_target_dist", "/", "self", ".", "scene", ".", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.calc_goalless_potential": [[220, 222], ["None"], "methods", ["None"], ["", "def", "calc_goalless_potential", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dist_to_start", "/", "self", ".", "scene", ".", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.dist_to_target": [[223, 225], ["numpy.linalg.norm", "numpy.array", "numpy.array", "robot_locomotors.WalkerBase.get_target_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_target_position"], ["", "def", "dist_to_target", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "self", ".", "body_xyz", ")", "-", "np", ".", "array", "(", "self", ".", "get_target_position", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase._is_close_to_goal": [[226, 233], ["robot_locomotors.WalkerBase.robot_body.pose", "numpy.array().flatten", "numpy.linalg.norm", "parts_xyz[].mean", "parts_xyz[].mean", "numpy.array", "robot_locomotors.WalkerBase.xyz", "pybullet.pose().xyz", "robot_locomotors.WalkerBase.parts.values", "pybullet.pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose"], ["", "def", "_is_close_to_goal", "(", "self", ")", ":", "\n", "        ", "body_pose", "=", "self", ".", "robot_body", ".", "pose", "(", ")", "\n", "parts_xyz", "=", "np", ".", "array", "(", "[", "p", ".", "pose", "(", ")", ".", "xyz", "(", ")", "for", "p", "in", "self", ".", "parts", ".", "values", "(", ")", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "body_xyz", "=", "(", "\n", "parts_xyz", "[", "0", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "parts_xyz", "[", "1", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "body_pose", ".", "xyz", "(", ")", "[", "2", "]", ")", "# torso z is more informative than mean z", "\n", "dist_to_goal", "=", "np", ".", "linalg", ".", "norm", "(", "[", "self", ".", "body_xyz", "[", "0", "]", "-", "self", ".", "target_pos", "[", "0", "]", ",", "self", ".", "body_xyz", "[", "1", "]", "-", "self", ".", "target_pos", "[", "1", "]", "]", ")", "\n", "return", "dist_to_goal", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase._get_scaled_position": [[234, 239], ["robot_locomotors.WalkerBase.robot_body.get_position"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["", "def", "_get_scaled_position", "(", "self", ")", ":", "\n", "        ", "'''Private method, please don't use this method outside\n        Used for downscaling MJCF models\n        '''", "\n", "return", "self", ".", "robot_body", ".", "get_position", "(", ")", "/", "self", ".", "mjcf_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Hopper.__init__": [[244, 248], ["robot_locomotors.WalkerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "\"MJCF\"", "\n", "self", ".", "mjcf_scaling", "=", "1", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"hopper.xml\"", ",", "\"torso\"", ",", "action_dim", "=", "3", ",", "sensor_dim", "=", "15", ",", "power", "=", "0.75", ",", "scale", "=", "self", ".", "mjcf_scaling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Hopper.alive_bonus": [[249, 251], ["abs"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.8", "and", "abs", "(", "pitch", ")", "<", "1.0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Walker2D.__init__": [[256, 260], ["robot_locomotors.WalkerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "\"MJCF\"", "\n", "self", ".", "mjcf_scaling", "=", "1", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"walker2d.xml\"", ",", "\"torso\"", ",", "action_dim", "=", "6", ",", "sensor_dim", "=", "22", ",", "power", "=", "0.40", ",", "scale", "=", "self", ".", "mjcf_scaling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Walker2D.alive_bonus": [[261, 263], ["abs"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.8", "and", "abs", "(", "pitch", ")", "<", "1.0", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Walker2D.robot_specific_reset": [[264, 268], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "for", "n", "in", "[", "\"foot_joint\"", ",", "\"foot_left_joint\"", "]", ":", "\n", "            ", "self", ".", "jdict", "[", "n", "]", ".", "power_coef", "=", "30.0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HalfCheetah.__init__": [[273, 277], ["robot_locomotors.WalkerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "\"MJCF\"", "\n", "self", ".", "mjcf_scaling", "=", "1", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"half_cheetah.xml\"", ",", "\"torso\"", ",", "action_dim", "=", "6", ",", "sensor_dim", "=", "26", ",", "power", "=", "0.90", ",", "scale", "=", "self", ".", "mjcf_scaling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HalfCheetah.alive_bonus": [[278, 281], ["numpy.abs"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "# Use contact other than feet to terminate episode: due to a lot of strange walks using knees", "\n", "        ", "return", "+", "1", "if", "np", ".", "abs", "(", "pitch", ")", "<", "1.0", "and", "not", "self", ".", "feet_contact", "[", "1", "]", "and", "not", "self", ".", "feet_contact", "[", "2", "]", "and", "not", "self", ".", "feet_contact", "[", "4", "]", "and", "not", "self", ".", "feet_contact", "[", "5", "]", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HalfCheetah.robot_specific_reset": [[282, 290], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "self", ".", "jdict", "[", "\"bthigh\"", "]", ".", "power_coef", "=", "120.0", "\n", "self", ".", "jdict", "[", "\"bshin\"", "]", ".", "power_coef", "=", "90.0", "\n", "self", ".", "jdict", "[", "\"bfoot\"", "]", ".", "power_coef", "=", "60.0", "\n", "self", ".", "jdict", "[", "\"fthigh\"", "]", ".", "power_coef", "=", "140.0", "\n", "self", ".", "jdict", "[", "\"fshin\"", "]", ".", "power_coef", "=", "60.0", "\n", "self", ".", "jdict", "[", "\"ffoot\"", "]", ".", "power_coef", "=", "30.0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Ant.__init__": [[295, 335], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.Ant.setup_keys_to_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "model_type", "=", "\"MJCF\"", "\n", "self", ".", "mjcf_scaling", "=", "0.25", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"ant.xml\"", ",", "\"torso\"", ",", "action_dim", "=", "8", ",", "\n", "sensor_dim", "=", "28", ",", "power", "=", "2.5", ",", "scale", "=", "self", ".", "mjcf_scaling", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "r_f", "=", "0.1", "\n", "if", "config", "[", "\"is_discrete\"", "]", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "17", ")", "\n", "self", ".", "torque", "=", "10", "\n", "## Hip_1, Ankle_1, Hip_2, Ankle_2, Hip_3, Ankle_3, Hip_4, Ankle_4 ", "\n", "self", ".", "action_list", "=", "[", "[", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "self", ".", "r_f", "*", "self", ".", "torque", "]", ",", "\n", "[", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "-", "self", ".", "r_f", "*", "self", ".", "torque", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", "\n", "'''\n            [[self.r_f * self.torque, 0, 0, -self.r_f * self.torque, 0, 0, 0, 0], \n                                [0, 0, self.r_f * self.torque, self.r_f * self.torque, 0, 0, 0, 0], \n                                [0, 0, 0, 0, self.r_f * self.torque, self.r_f * self.torque, 0, 0], \n                                [0, 0, 0, 0, 0, 0, self.r_f * self.torque, self.r_f * self.torque], \n                                [0, 0, 0, 0, 0, 0, 0, 0]]\n            '''", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Ant.apply_action": [[336, 342], ["robot_locomotors.WalkerBase.apply_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action"], ["", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "config", "[", "\"is_discrete\"", "]", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "", "WalkerBase", ".", "apply_action", "(", "self", ",", "realaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Ant.robot_specific_reset": [[343, 345], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Ant.alive_bonus": [[346, 348], ["None"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.26", "else", "-", "1", "# 0.25 is central sphere rad, die if it scrapes the ground", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Ant.setup_keys_to_action": [[349, 368], ["ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'1'", ")", ",", ")", ":", "0", ",", "\n", "(", "ord", "(", "'2'", ")", ",", ")", ":", "1", ",", "\n", "(", "ord", "(", "'3'", ")", ",", ")", ":", "2", ",", "\n", "(", "ord", "(", "'4'", ")", ",", ")", ":", "3", ",", "\n", "(", "ord", "(", "'5'", ")", ",", ")", ":", "4", ",", "\n", "(", "ord", "(", "'6'", ")", ",", ")", ":", "5", ",", "\n", "(", "ord", "(", "'7'", ")", ",", ")", ":", "6", ",", "\n", "(", "ord", "(", "'8'", ")", ",", ")", ":", "7", ",", "\n", "(", "ord", "(", "'9'", ")", ",", ")", ":", "8", ",", "\n", "(", "ord", "(", "'0'", ")", ",", ")", ":", "9", ",", "\n", "(", "ord", "(", "'q'", ")", ",", ")", ":", "10", ",", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "11", ",", "\n", "(", "ord", "(", "'e'", ")", ",", ")", ":", "12", ",", "\n", "(", "ord", "(", "'r'", ")", ",", ")", ":", "13", ",", "\n", "(", "ord", "(", "'t'", ")", ",", ")", ":", "14", ",", "\n", "(", "ord", "(", "'y'", ")", ",", ")", ":", "15", ",", "\n", "(", ")", ":", "4", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.AntClimber.__init__": [[372, 374], ["robot_locomotors.Ant.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "Ant", ".", "__init__", "(", "self", ",", "config", ",", "env", "=", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.AntClimber.robot_specific_reset": [[375, 390], ["robot_locomotors.Ant.robot_specific_reset", "robot_locomotors.AntClimber.jdict.keys", "robot_locomotors.AntClimber.jdict.keys", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "Ant", ".", "robot_specific_reset", "(", "self", ")", "\n", "amplify", "=", "1", "\n", "for", "j", "in", "self", ".", "jdict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "jdict", "[", "j", "]", ".", "power_coef", "*=", "amplify", "\n", "", "'''\n        self.jdict[\"ankle_1\"].power_coef = amplify * self.jdict[\"ankle_1\"].power_coef\n        self.jdict[\"ankle_2\"].power_coef = amplify * self.jdict[\"ankle_2\"].power_coef\n        self.jdict[\"ankle_3\"].power_coef = amplify * self.jdict[\"ankle_3\"].power_coef\n        self.jdict[\"ankle_4\"].power_coef = amplify * self.jdict[\"ankle_4\"].power_coef\n        '''", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "for", "k", "in", "self", ".", "jdict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"Power coef\"", ",", "self", ".", "jdict", "[", "k", "]", ".", "power_coef", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.AntClimber.calc_potential": [[391, 399], ["print"], "methods", ["None"], ["", "", "", "def", "calc_potential", "(", "self", ")", ":", "\n", "#base_potential = Ant.calc_potential(self)", "\n", "#height_coeff   = 3", "\n", "#height_potential = - height_coeff * self.walk_height_diff / self.scene.dt", "\n", "        ", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Ant xyz potential\"", ",", "self", ".", "walk_target_dist_xyz", ")", "\n", "", "return", "-", "self", ".", "walk_target_dist_xyz", "/", "self", ".", "scene", ".", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.AntClimber.alive_bonus": [[400, 412], ["print", "print", "print", "print"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "roll", ",", "pitch", ")", ":", "\n", "        ", "\"\"\"Alive requires the ant's head to not touch the ground, it's roll\n        and pitch cannot be too large\"\"\"", "\n", "#return +1 if z > 0.26 else -1  # 0.25 is central sphere rad, die if it scrapes the ground", "\n", "alive", "=", "roll", "<", "np", ".", "pi", "/", "2", "and", "roll", ">", "-", "np", ".", "pi", "/", "2", "and", "pitch", ">", "-", "np", ".", "pi", "/", "2", "and", "pitch", "<", "np", ".", "pi", "/", "2", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"roll, pitch\"", ")", "\n", "print", "(", "roll", ",", "pitch", ")", "\n", "print", "(", "\"alive\"", ")", "\n", "print", "(", "alive", ")", "\n", "", "return", "+", "1", "if", "alive", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.AntClimber._is_close_to_goal": [[413, 422], ["robot_locomotors.AntClimber.robot_body.pose", "numpy.array().flatten", "numpy.linalg.norm", "parts_xyz[].mean", "parts_xyz[].mean", "print", "numpy.array", "robot_locomotors.AntClimber.xyz", "numpy.linalg.norm", "pybullet.pose().xyz", "robot_locomotors.AntClimber.parts.values", "pybullet.pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Pose_Helper.xyz", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose"], ["", "def", "_is_close_to_goal", "(", "self", ")", ":", "\n", "        ", "body_pose", "=", "self", ".", "robot_body", ".", "pose", "(", ")", "\n", "parts_xyz", "=", "np", ".", "array", "(", "[", "p", ".", "pose", "(", ")", ".", "xyz", "(", ")", "for", "p", "in", "self", ".", "parts", ".", "values", "(", ")", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "body_xyz", "=", "(", "parts_xyz", "[", "0", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "parts_xyz", "[", "1", ":", ":", "3", "]", ".", "mean", "(", ")", ",", "body_pose", ".", "xyz", "(", ")", "[", "2", "]", ")", "# torso z is more informative than mean z", "\n", "dist_to_goal", "=", "np", ".", "linalg", ".", "norm", "(", "[", "self", ".", "body_xyz", "[", "0", "]", "-", "self", ".", "target_pos", "[", "0", "]", ",", "self", ".", "body_xyz", "[", "1", "]", "-", "self", ".", "target_pos", "[", "1", "]", ",", "self", ".", "body_xyz", "[", "2", "]", "-", "self", ".", "target_pos", "[", "2", "]", "]", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "np", ".", "linalg", ".", "norm", "(", "[", "self", ".", "body_xyz", "[", "0", "]", "-", "self", ".", "target_pos", "[", "0", "]", ",", "self", ".", "body_xyz", "[", "1", "]", "-", "self", ".", "target_pos", "[", "1", "]", ",", "self", ".", "body_xyz", "[", "2", "]", "-", "self", ".", "target_pos", "[", "2", "]", "]", ")", ",", "[", "self", ".", "body_xyz", "[", "0", "]", ",", "self", ".", "body_xyz", "[", "1", "]", ",", "self", ".", "body_xyz", "[", "2", "]", "]", ",", "[", "self", ".", "target_pos", "[", "0", "]", ",", "self", ".", "target_pos", "[", "1", "]", ",", "self", ".", "target_pos", "[", "2", "]", "]", ")", "\n", "", "return", "dist_to_goal", "<", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Humanoid.__init__": [[428, 446], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "numpy.concatenate().tolist", "robot_locomotors.Humanoid.setup_keys_to_action", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "model_type", "=", "\"MJCF\"", "\n", "self", ".", "mjcf_scaling", "=", "0.6", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"humanoid.xml\"", ",", "\"torso\"", ",", "action_dim", "=", "17", ",", "\n", "sensor_dim", "=", "44", ",", "power", "=", "2.5", ",", "scale", "=", "self", ".", "mjcf_scaling", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "glass_id", "=", "None", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "5", ")", "\n", "self", ".", "torque", "=", "0.1", "\n", "self", ".", "action_list", "=", "np", ".", "concatenate", "(", "(", "np", ".", "ones", "(", "(", "1", ",", "17", ")", ")", ",", "np", ".", "zeros", "(", "(", "1", ",", "17", ")", ")", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Humanoid.robot_specific_reset": [[447, 474], ["robot_locomotors.WalkerBase.robot_specific_reset", "pybullet.getNumBodies", "range", "pybullet.getBodyInfo", "pybullet.changeVisualShape", "pybullet.createConstraint", "bodyInfo[].decode", "pybullet.loadMJCF", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n", "humanoidId", "=", "-", "1", "\n", "numBodies", "=", "p", ".", "getNumBodies", "(", ")", "\n", "for", "i", "in", "range", "(", "numBodies", ")", ":", "\n", "            ", "bodyInfo", "=", "p", ".", "getBodyInfo", "(", "i", ")", "\n", "if", "bodyInfo", "[", "1", "]", ".", "decode", "(", "\"ascii\"", ")", "==", "'humanoid'", ":", "\n", "                ", "humanoidId", "=", "i", "\n", "## Spherical radiance/glass shield to protect the robot's camera", "\n", "", "", "if", "self", ".", "glass_id", "is", "None", ":", "\n", "            ", "glass_id", "=", "p", ".", "loadMJCF", "(", "os", ".", "path", ".", "join", "(", "self", ".", "physics_model_dir", ",", "\"glass.xml\"", ")", ")", "[", "0", "]", "\n", "#print(\"setting up glass\", glass_id, humanoidId)", "\n", "p", ".", "changeVisualShape", "(", "glass_id", ",", "-", "1", ",", "rgbaColor", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "cid", "=", "p", ".", "createConstraint", "(", "humanoidId", ",", "-", "1", ",", "glass_id", ",", "-", "1", ",", "p", ".", "JOINT_FIXED", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1.4", "]", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "self", ".", "motor_names", "=", "[", "\"abdomen_z\"", ",", "\"abdomen_y\"", ",", "\"abdomen_x\"", "]", "\n", "self", ".", "motor_power", "=", "[", "100", ",", "100", ",", "100", "]", "\n", "self", ".", "motor_names", "+=", "[", "\"right_hip_x\"", ",", "\"right_hip_z\"", ",", "\"right_hip_y\"", ",", "\"right_knee\"", "]", "\n", "self", ".", "motor_power", "+=", "[", "100", ",", "100", ",", "300", ",", "200", "]", "\n", "self", ".", "motor_names", "+=", "[", "\"left_hip_x\"", ",", "\"left_hip_z\"", ",", "\"left_hip_y\"", ",", "\"left_knee\"", "]", "\n", "self", ".", "motor_power", "+=", "[", "100", ",", "100", ",", "300", ",", "200", "]", "\n", "self", ".", "motor_names", "+=", "[", "\"right_shoulder1\"", ",", "\"right_shoulder2\"", ",", "\"right_elbow\"", "]", "\n", "self", ".", "motor_power", "+=", "[", "75", ",", "75", ",", "75", "]", "\n", "self", ".", "motor_names", "+=", "[", "\"left_shoulder1\"", ",", "\"left_shoulder2\"", ",", "\"left_elbow\"", "]", "\n", "self", ".", "motor_power", "+=", "[", "75", ",", "75", ",", "75", "]", "\n", "self", ".", "motors", "=", "[", "self", ".", "jdict", "[", "n", "]", "for", "n", "in", "self", ".", "motor_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Humanoid.apply_action": [[476, 483], ["zip", "range", "m.set_motor_torque", "float"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.Joint.set_motor_torque"], ["", "def", "apply_action", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "a", "]", "\n", "", "else", ":", "\n", "            ", "force_gain", "=", "1", "\n", "for", "i", ",", "m", ",", "power", "in", "zip", "(", "range", "(", "17", ")", ",", "self", ".", "motors", ",", "self", ".", "motor_power", ")", ":", "\n", "                ", "m", ".", "set_motor_torque", "(", "float", "(", "force_gain", "*", "power", "*", "self", ".", "power", "*", "a", "[", "i", "]", ")", ")", "\n", "#m.set_motor_torque(float(force_gain * power * self.power * np.clip(a[i], -1, +1)))", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Humanoid.alive_bonus": [[485, 487], ["None"], "methods", ["None"], ["", "", "", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "2", "if", "z", ">", "0.78", "else", "-", "1", "# 2 here because 17 joints produce a lot of electricity cost just from policy noise, living must be better than dying", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Humanoid.setup_keys_to_action": [[488, 492], ["ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "\n", "(", ")", ":", "1", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.__init__": [[500, 523], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.Husky.setup_keys_to_action", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"husky.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "23", ",", "power", "=", "2.5", ",", "scale", "=", "0.6", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "5", ")", "\n", "self", ".", "torque", "=", "0.03", "\n", "self", ".", "action_list", "=", "[", "[", "self", ".", "torque", ",", "self", ".", "torque", ",", "self", ".", "torque", ",", "self", ".", "torque", "]", ",", "\n", "[", "-", "self", ".", "torque", ",", "-", "self", ".", "torque", ",", "-", "self", ".", "torque", ",", "-", "self", ".", "torque", "]", ",", "\n", "[", "self", ".", "torque", ",", "-", "self", ".", "torque", ",", "self", ".", "torque", ",", "-", "self", ".", "torque", "]", ",", "\n", "[", "-", "self", ".", "torque", ",", "self", ".", "torque", ",", "-", "self", ".", "torque", ",", "self", ".", "torque", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "\n", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "action_high", "=", "0.02", "*", "np", ".", "ones", "(", "[", "4", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.apply_action": [[524, 530], ["robot_locomotors.WalkerBase.apply_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action"], ["", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "", "WalkerBase", ".", "apply_action", "(", "self", ",", "realaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.steering_cost": [[531, 538], ["None"], "methods", ["None"], ["", "def", "steering_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_discrete", ":", "\n", "            ", "return", "0", "\n", "", "if", "action", "==", "2", "or", "action", "==", "3", ":", "\n", "            ", "return", "-", "0.1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.angle_cost": [[539, 551], ["numpy.abs", "numpy.abs", "print", "print", "print", "print", "numpy.abs"], "methods", ["None"], ["", "", "def", "angle_cost", "(", "self", ")", ":", "\n", "        ", "angle_const", "=", "0.2", "\n", "diff_to_half", "=", "np", ".", "abs", "(", "self", ".", "angle_to_target", "-", "1.57", ")", "\n", "is_forward", "=", "self", ".", "angle_to_target", ">", "1.57", "\n", "diff_angle", "=", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "if", "is_forward", "else", "3.14", "-", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"is forward\"", ",", "is_forward", ")", "\n", "print", "(", "\"diff to half\"", ",", "diff_to_half", ")", "\n", "print", "(", "\"angle to target\"", ",", "self", ".", "angle_to_target", ")", "\n", "print", "(", "\"diff angle\"", ",", "diff_angle", ")", "\n", "", "return", "-", "angle_const", "*", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.robot_specific_reset": [[553, 555], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.alive_bonus": [[556, 558], ["None"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.26", "else", "-", "1", "# 0.25 is central sphere rad, die if it scrapes the ground", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.setup_keys_to_action": [[559, 566], ["ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "## forward", "\n", "(", "ord", "(", "'s'", ")", ",", ")", ":", "1", ",", "## backward", "\n", "(", "ord", "(", "'d'", ")", ",", ")", ":", "2", ",", "## turn right", "\n", "(", "ord", "(", "'a'", ")", ",", ")", ":", "3", ",", "## turn left", "\n", "(", ")", ":", "4", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Husky.calc_state": [[568, 573], ["robot_locomotors.WalkerBase.calc_state", "robot_locomotors.Husky.robot_body.angular_speed", "numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.angular_speed"], ["", "def", "calc_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "WalkerBase", ".", "calc_state", "(", "self", ")", "\n", "\n", "angular_speed", "=", "self", ".", "robot_body", ".", "angular_speed", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "base_state", ",", "np", ".", "array", "(", "angular_speed", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HuskyClimber.calc_potential": [[578, 583], ["robot_locomotors.WalkerBase.calc_potential", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HuskyClimber.calc_potential"], ["    ", "def", "calc_potential", "(", "self", ")", ":", "\n", "        ", "base_potential", "=", "Husky", ".", "calc_potential", "(", "self", ")", "\n", "height_potential", "=", "-", "4", "*", "self", ".", "walk_height_diff", "/", "self", ".", "scene", ".", "dt", "\n", "print", "(", "\"Husky climber\"", ",", "base_potential", ",", "height_potential", ")", "\n", "return", "base_potential", "+", "height_potential", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HuskyClimber.robot_specific_reset": [[584, 593], ["robot_locomotors.Ant.robot_specific_reset", "robot_locomotors.HuskyClimber.jdict.keys", "robot_locomotors.HuskyClimber.jdict.keys", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "Ant", ".", "robot_specific_reset", "(", "self", ")", "\n", "for", "j", "in", "self", ".", "jdict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "jdict", "[", "j", "]", ".", "power_coef", "=", "1.5", "*", "self", ".", "jdict", "[", "j", "]", ".", "power_coef", "\n", "\n", "", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "for", "k", "in", "self", ".", "jdict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"Power coef\"", ",", "self", ".", "jdict", "[", "k", "]", ".", "power_coef", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor.__init__": [[596, 624], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.Quadrotor.setup_keys_to_action", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "\"URDF\"", "\n", "self", ".", "mjcf_scaling", "=", "1", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"quadrotor.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "20", ",", "power", "=", "2.5", ",", "scale", "=", "self", ".", "mjcf_scaling", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "env", "=", "env", ")", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "7", ")", "\n", "\n", "self", ".", "action_list", "=", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "]", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "action_high", "=", "0.02", "*", "np", ".", "ones", "(", "[", "6", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "\n", "", "self", ".", "foot_list", "=", "[", "]", "\n", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor.apply_action": [[624, 632], ["pybullet.setGravity", "pybullet.resetBaseVelocity"], "methods", ["None"], ["", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "\n", "", "p", ".", "setGravity", "(", "0", ",", "0", ",", "0", ")", "\n", "p", ".", "resetBaseVelocity", "(", "self", ".", "robot_ids", "[", "0", "]", ",", "realaction", "[", ":", "3", "]", ",", "realaction", "[", "3", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor.robot_specific_reset": [[633, 635], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor.setup_keys_to_action": [[636, 645], ["ord", "ord", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "## +x", "\n", "(", "ord", "(", "'s'", ")", ",", ")", ":", "1", ",", "## -x", "\n", "(", "ord", "(", "'d'", ")", ",", ")", ":", "2", ",", "## +y", "\n", "(", "ord", "(", "'a'", ")", ",", ")", ":", "3", ",", "## -y", "\n", "(", "ord", "(", "'z'", ")", ",", ")", ":", "4", ",", "## +z", "\n", "(", "ord", "(", "'x'", ")", ",", ")", ":", "5", ",", "## -z", "\n", "(", ")", ":", "6", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor3.__init__": [[649, 668], ["random.uniform", "random.randint", "i_p.append", "random.uniform", "config.setdefault", "robot_locomotors.WalkerBase.__init__", "config.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "\"URDF\"", "\n", "self", ".", "mjcf_scaling", "=", "config", "[", "\"robot_scale\"", "]", "if", "\"robot_scale\"", "in", "config", ".", "keys", "(", ")", "else", "1", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "self", ".", "height", "=", "random", ".", "uniform", "(", "self", ".", "config", "[", "'height_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'height_limits'", "]", "[", "1", "]", ")", "\n", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "config", "[", "'num_initial'", "]", "-", "1", ")", "\n", "i_p", "=", "(", "self", ".", "config", "[", "'initial_pos'", "]", "[", "index", "]", ")", "[", ":", "]", "\n", "i_p", ".", "append", "(", "self", ".", "height", ")", "#height +- 0.1", "\n", "self", ".", "vx", "=", "random", ".", "uniform", "(", "config", "[", "'velocity_limits'", "]", "[", "0", "]", ",", "config", "[", "'velocity_limits'", "]", "[", "1", "]", ")", "\n", "config", ".", "setdefault", "(", "\"target_pos\"", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"quadrotor.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "20", ",", "power", "=", "2.5", ",", "scale", "=", "self", ".", "mjcf_scaling", ",", "\n", "initial_pos", "=", "i_p", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "foot_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor3.apply_action": [[669, 683], ["pybullet.getBasePositionAndOrientation", "pybullet.getEulerFromQuaternion", "print", "print", "min", "pybullet.getQuaternionFromEuler", "robot_locomotors.Quadrotor3.robot_body.set_pose", "max", "random.uniform", "random.uniform", "random.uniform", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_pose"], ["", "def", "apply_action", "(", "self", ",", "a", ")", ":", "\n", "        ", "yaw", "=", "a", "\n", "pos", ",", "ornQuaternion", "=", "p", ".", "getBasePositionAndOrientation", "(", "self", ".", "robot_ids", "[", "0", "]", ")", "\n", "ornEuler", "=", "p", ".", "getEulerFromQuaternion", "(", "ornQuaternion", ")", "\n", "currAngle", "=", "ornEuler", "[", "2", "]", "-", "self", ".", "config", "[", "'yaw_constant'", "]", "*", "yaw", "\n", "print", "(", "pos", ")", "\n", "print", "(", "ornEuler", ")", "\n", "pos", "=", "[", "pos", "[", "0", "]", "+", "self", ".", "config", "[", "'vx_constant'", "]", "*", "self", ".", "vx", "*", "math", ".", "cos", "(", "currAngle", ")", "+", "random", ".", "uniform", "(", "self", ".", "config", "[", "'wind_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'wind_limits'", "]", "[", "1", "]", ")", ",", "\n", "pos", "[", "1", "]", "+", "self", ".", "config", "[", "'vx_constant'", "]", "*", "self", ".", "vx", "*", "math", ".", "sin", "(", "currAngle", ")", "+", "random", ".", "uniform", "(", "self", ".", "config", "[", "'wind_limits'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'wind_limits'", "]", "[", "1", "]", ")", ",", "self", ".", "height", "]", "\n", "pitch", "=", "min", "(", "max", "(", "ornEuler", "[", "0", "]", "+", "random", ".", "uniform", "(", "self", ".", "config", "[", "'d_roll_per_step'", "]", "[", "0", "]", ",", "self", ".", "config", "[", "'d_roll_per_step'", "]", "[", "1", "]", ")", ",", "self", ".", "config", "[", "'roll_limits'", "]", "[", "0", "]", ")", ",", "self", ".", "config", "[", "'roll_limits'", "]", "[", "1", "]", ")", "\n", "ornEuler", "=", "[", "pitch", ",", "ornEuler", "[", "1", "]", ",", "currAngle", "]", "\n", "ornQuaternion", "=", "p", ".", "getQuaternionFromEuler", "(", "ornEuler", ")", "\n", "self", ".", "robot_body", ".", "set_pose", "(", "pos", ",", "ornQuaternion", ")", "\n", "return", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "ornEuler", "[", "2", "]", ",", "self", ".", "height", ",", "self", ".", "vx", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Quadrotor3.robot_specific_reset": [[684, 686], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.__init__": [[696, 720], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.Turtlebot.setup_keys_to_action", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"turtlebot/turtlebot.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "20", ",", "power", "=", "2.5", ",", "scale", "=", "1", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "control", "=", "'velocity'", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "5", ")", "\n", "self", ".", "vel", "=", "0.1", "\n", "self", ".", "action_list", "=", "[", "[", "self", ".", "vel", ",", "self", ".", "vel", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "-", "self", ".", "vel", "]", ",", "\n", "[", "self", ".", "vel", ",", "-", "self", ".", "vel", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "self", ".", "vel", "]", ",", "\n", "[", "0", ",", "0", "]", "]", "\n", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "action_high", "=", "0.02", "*", "np", ".", "ones", "(", "[", "4", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.apply_action": [[721, 727], ["robot_locomotors.WalkerBase.apply_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action"], ["", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "", "WalkerBase", ".", "apply_action", "(", "self", ",", "realaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.steering_cost": [[728, 735], ["None"], "methods", ["None"], ["", "def", "steering_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_discrete", ":", "\n", "            ", "return", "0", "\n", "", "if", "action", "==", "2", "or", "action", "==", "3", ":", "\n", "            ", "return", "-", "0.1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.angle_cost": [[736, 748], ["numpy.abs", "numpy.abs", "print", "print", "print", "print", "numpy.abs"], "methods", ["None"], ["", "", "def", "angle_cost", "(", "self", ")", ":", "\n", "        ", "angle_const", "=", "0.2", "\n", "diff_to_half", "=", "np", ".", "abs", "(", "self", ".", "angle_to_target", "-", "1.57", ")", "\n", "is_forward", "=", "self", ".", "angle_to_target", ">", "1.57", "\n", "diff_angle", "=", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "if", "is_forward", "else", "3.14", "-", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"is forward\"", ",", "is_forward", ")", "\n", "print", "(", "\"diff to half\"", ",", "diff_to_half", ")", "\n", "print", "(", "\"angle to target\"", ",", "self", ".", "angle_to_target", ")", "\n", "print", "(", "\"diff angle\"", ",", "diff_angle", ")", "\n", "", "return", "-", "angle_const", "*", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.robot_specific_reset": [[749, 751], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.alive_bonus": [[752, 754], ["None"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.26", "else", "-", "1", "# 0.25 is central sphere rad, die if it scrapes the ground", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.setup_keys_to_action": [[755, 762], ["ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "## forward", "\n", "(", "ord", "(", "'s'", ")", ",", ")", ":", "1", ",", "## backward", "\n", "(", "ord", "(", "'d'", ")", ",", ")", ":", "2", ",", "## turn right", "\n", "(", "ord", "(", "'a'", ")", ",", ")", ":", "3", ",", "## turn left", "\n", "(", ")", ":", "4", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.Turtlebot.calc_state": [[764, 769], ["robot_locomotors.WalkerBase.calc_state", "robot_locomotors.Turtlebot.robot_body.angular_speed", "numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.angular_speed"], ["", "def", "calc_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "WalkerBase", ".", "calc_state", "(", "self", ")", "\n", "\n", "angular_speed", "=", "self", ".", "robot_body", ".", "angular_speed", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "base_state", ",", "np", ".", "array", "(", "angular_speed", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.__init__": [[777, 801], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.JR.setup_keys_to_action", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"jr1_urdf/jr1_gibson.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "20", ",", "power", "=", "2.5", ",", "scale", "=", "0.6", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "control", "=", "'velocity'", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "5", ")", "\n", "self", ".", "vel", "=", "0.1", "\n", "self", ".", "action_list", "=", "[", "[", "self", ".", "vel", ",", "self", ".", "vel", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "-", "self", ".", "vel", "]", ",", "\n", "[", "self", ".", "vel", ",", "-", "self", ".", "vel", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "self", ".", "vel", "]", ",", "\n", "[", "0", ",", "0", "]", "]", "\n", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "action_high", "=", "0.02", "*", "np", ".", "ones", "(", "[", "4", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.apply_action": [[802, 808], ["robot_locomotors.WalkerBase.apply_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action"], ["", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "", "WalkerBase", ".", "apply_action", "(", "self", ",", "realaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.steering_cost": [[809, 816], ["None"], "methods", ["None"], ["", "def", "steering_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_discrete", ":", "\n", "            ", "return", "0", "\n", "", "if", "action", "==", "2", "or", "action", "==", "3", ":", "\n", "            ", "return", "-", "0.1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.angle_cost": [[817, 829], ["numpy.abs", "numpy.abs", "print", "print", "print", "print", "numpy.abs"], "methods", ["None"], ["", "", "def", "angle_cost", "(", "self", ")", ":", "\n", "        ", "angle_const", "=", "0.2", "\n", "diff_to_half", "=", "np", ".", "abs", "(", "self", ".", "angle_to_target", "-", "1.57", ")", "\n", "is_forward", "=", "self", ".", "angle_to_target", ">", "1.57", "\n", "diff_angle", "=", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "if", "is_forward", "else", "3.14", "-", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"is forward\"", ",", "is_forward", ")", "\n", "print", "(", "\"diff to half\"", ",", "diff_to_half", ")", "\n", "print", "(", "\"angle to target\"", ",", "self", ".", "angle_to_target", ")", "\n", "print", "(", "\"diff angle\"", ",", "diff_angle", ")", "\n", "", "return", "-", "angle_const", "*", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.robot_specific_reset": [[830, 832], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.alive_bonus": [[833, 835], ["None"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.26", "else", "-", "1", "# 0.25 is central sphere rad, die if it scrapes the ground", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.setup_keys_to_action": [[836, 843], ["ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "## forward", "\n", "(", "ord", "(", "'s'", ")", ",", ")", ":", "1", ",", "## backward", "\n", "(", "ord", "(", "'d'", ")", ",", ")", ":", "2", ",", "## turn right", "\n", "(", "ord", "(", "'a'", ")", ",", ")", ":", "3", ",", "## turn left", "\n", "(", ")", ":", "4", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR.calc_state": [[845, 850], ["robot_locomotors.WalkerBase.calc_state", "robot_locomotors.JR.robot_body.angular_speed", "numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.angular_speed"], ["", "def", "calc_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "WalkerBase", ".", "calc_state", "(", "self", ")", "\n", "\n", "angular_speed", "=", "self", ".", "robot_body", ".", "angular_speed", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "base_state", ",", "np", ".", "array", "(", "angular_speed", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.__init__": [[857, 881], ["robot_locomotors.WalkerBase.__init__", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "robot_locomotors.JR2.setup_keys_to_action", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action"], ["def", "__init__", "(", "self", ",", "config", ",", "env", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "WalkerBase", ".", "__init__", "(", "self", ",", "\"jr2_urdf/jr2.urdf\"", ",", "\"base_link\"", ",", "action_dim", "=", "4", ",", "\n", "sensor_dim", "=", "20", ",", "power", "=", "2.5", ",", "scale", "=", "0.6", ",", "\n", "initial_pos", "=", "config", "[", "'initial_pos'", "]", ",", "\n", "target_pos", "=", "config", "[", "\"target_pos\"", "]", ",", "\n", "resolution", "=", "config", "[", "\"resolution\"", "]", ",", "\n", "control", "=", "[", "'velocity'", ",", "'velocity'", ",", "'position'", ",", "'position'", "]", ",", "\n", "env", "=", "env", ")", "\n", "self", ".", "is_discrete", "=", "config", "[", "\"is_discrete\"", "]", "\n", "\n", "if", "self", ".", "is_discrete", ":", "\n", "            ", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Discrete", "(", "5", ")", "\n", "self", ".", "vel", "=", "0.01", "\n", "self", ".", "action_list", "=", "[", "[", "self", ".", "vel", ",", "self", ".", "vel", ",", "0", ",", "0.2", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "-", "self", ".", "vel", ",", "0", ",", "-", "0.2", "]", ",", "\n", "[", "self", ".", "vel", ",", "-", "self", ".", "vel", ",", "-", "0.5", ",", "0", "]", ",", "\n", "[", "-", "self", ".", "vel", ",", "self", ".", "vel", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "\n", "\n", "self", ".", "setup_keys_to_action", "(", ")", "\n", "", "else", ":", "\n", "            ", "action_high", "=", "0.02", "*", "np", ".", "ones", "(", "[", "4", "]", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "action_high", ",", "action_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action": [[882, 888], ["robot_locomotors.WalkerBase.apply_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action"], ["", "", "def", "apply_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "is_discrete", ":", "\n", "            ", "realaction", "=", "self", ".", "action_list", "[", "action", "]", "\n", "", "else", ":", "\n", "            ", "realaction", "=", "action", "\n", "", "WalkerBase", ".", "apply_action", "(", "self", ",", "realaction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.steering_cost": [[889, 896], ["None"], "methods", ["None"], ["", "def", "steering_cost", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_discrete", ":", "\n", "            ", "return", "0", "\n", "", "if", "action", "==", "2", "or", "action", "==", "3", ":", "\n", "            ", "return", "-", "0.1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.angle_cost": [[897, 909], ["numpy.abs", "numpy.abs", "print", "print", "print", "print", "numpy.abs"], "methods", ["None"], ["", "", "def", "angle_cost", "(", "self", ")", ":", "\n", "        ", "angle_const", "=", "0.2", "\n", "diff_to_half", "=", "np", ".", "abs", "(", "self", ".", "angle_to_target", "-", "1.57", ")", "\n", "is_forward", "=", "self", ".", "angle_to_target", ">", "1.57", "\n", "diff_angle", "=", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "if", "is_forward", "else", "3.14", "-", "np", ".", "abs", "(", "1.57", "-", "diff_to_half", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"is forward\"", ",", "is_forward", ")", "\n", "print", "(", "\"diff to half\"", ",", "diff_to_half", ")", "\n", "print", "(", "\"angle to target\"", ",", "self", ".", "angle_to_target", ")", "\n", "print", "(", "\"diff angle\"", ",", "diff_angle", ")", "\n", "", "return", "-", "angle_const", "*", "diff_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset": [[910, 912], ["robot_locomotors.WalkerBase.robot_specific_reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.robot_specific_reset"], ["", "def", "robot_specific_reset", "(", "self", ")", ":", "\n", "        ", "WalkerBase", ".", "robot_specific_reset", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.alive_bonus": [[913, 915], ["None"], "methods", ["None"], ["", "def", "alive_bonus", "(", "self", ",", "z", ",", "pitch", ")", ":", "\n", "        ", "return", "+", "1", "if", "z", ">", "0.26", "else", "-", "1", "# 0.25 is central sphere rad, die if it scrapes the ground", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.setup_keys_to_action": [[916, 923], ["ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "setup_keys_to_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "keys_to_action", "=", "{", "\n", "(", "ord", "(", "'w'", ")", ",", ")", ":", "0", ",", "## forward", "\n", "(", "ord", "(", "'s'", ")", ",", ")", ":", "1", ",", "## backward", "\n", "(", "ord", "(", "'d'", ")", ",", ")", ":", "2", ",", "## turn right", "\n", "(", "ord", "(", "'a'", ")", ",", ")", ":", "3", ",", "## turn left", "\n", "(", ")", ":", "4", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state": [[925, 930], ["robot_locomotors.WalkerBase.calc_state", "robot_locomotors.JR2.robot_body.angular_speed", "numpy.concatenate", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.angular_speed"], ["", "def", "calc_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "WalkerBase", ".", "calc_state", "(", "self", ")", "\n", "\n", "angular_speed", "=", "self", ".", "robot_body", ".", "angular_speed", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "base_state", ",", "np", ".", "array", "(", "angular_speed", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.__init__": [[52, 78], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.env_bases.BaseEnv.__init__", "env_modalities.BaseRobotEnv.assign_ports"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.assign_ports"], ["def", "__init__", "(", "self", ",", "config", ",", "tracking_camera", ",", "scene_type", "=", "\"building\"", ",", "gpu_idx", "=", "0", ")", ":", "\n", "        ", "BaseEnv", ".", "__init__", "(", "self", ",", "config", ",", "scene_type", ",", "tracking_camera", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "camera_x", "=", "0", "\n", "self", ".", "walk_target_x", "=", "1e3", "# kilometer away", "\n", "self", ".", "walk_target_y", "=", "0", "\n", "self", ".", "k", "=", "5", "\n", "self", ".", "robot_tracking_id", "=", "-", "1", "\n", "\n", "self", ".", "scale_up", "=", "4", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "ground_ids", "=", "None", "\n", "if", "self", ".", "gui", ":", "\n", "            ", "assert", "(", "self", ".", "tracking_camera", "is", "not", "None", ")", "\n", "", "self", ".", "gpu_idx", "=", "gpu_idx", "\n", "self", ".", "assign_ports", "(", ")", "\n", "self", ".", "nframe", "=", "0", "\n", "self", ".", "eps_reward", "=", "0", "\n", "\n", "self", ".", "reward", "=", "0", "\n", "self", ".", "eps_count", "=", "0", "\n", "\n", "self", ".", "_robot_introduced", "=", "False", "\n", "self", ".", "_scene_introduced", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.assign_ports": [[79, 96], ["None"], "methods", ["None"], ["", "def", "assign_ports", "(", "self", ")", ":", "\n", "        ", "'''Rendering multiple modalities (RGB, depth, normal) needs to be done \n        on different ports. Assign individual ports to each modality:\n\n        | Rendering | Port         |\n        | RGB       | Default      |\n        | Depth     | Default - 1  |\n        | Normal    | Default - 2  |\n        | Semantics | Default - 3  |\n        | UI        | Default - 4  |\n        Default depends on how many Gibson environments are running simultanously\n        '''", "\n", "self", ".", "port_rgb", "=", "self", ".", "DEFAULT_PORT", "-", "self", ".", "gpu_idx", "*", "5", "\n", "self", ".", "port_depth", "=", "self", ".", "port_rgb", "-", "1", "\n", "self", ".", "port_normal", "=", "self", ".", "port_rgb", "-", "2", "\n", "self", ".", "port_sem", "=", "self", ".", "port_rgb", "-", "3", "\n", "self", ".", "port_ui", "=", "self", ".", "port_rgb", "-", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.robot_introduce": [[97, 131], ["int"], "methods", ["None"], ["", "def", "robot_introduce", "(", "self", ",", "robot", ")", ":", "\n", "        ", "self", ".", "robot", "=", "robot", "\n", "self", ".", "robot", ".", "env", "=", "self", "\n", "self", ".", "action_space", "=", "self", ".", "robot", ".", "action_space", "\n", "## Robot's eye observation, in sensor mode black pixels are returned", "\n", "self", ".", "observation_space", "=", "self", ".", "robot", ".", "observation_space", "\n", "self", ".", "sensor_space", "=", "self", ".", "robot", ".", "sensor_space", "\n", "# seed for robot", "\n", "self", ".", "robot", ".", "np_random", "=", "self", ".", "np_random", "\n", "self", ".", "_robot_introduced", "=", "True", "\n", "assert", "(", "self", ".", "robot", ".", "resolution", "<=", "512", "and", "self", ".", "robot", ".", "resolution", ">=", "64", ")", ",", "\"Robot resolution must in [64, 512]\"", "\n", "#if self.robot.resolution == 64:", "\n", "#    self.windowsz = 64", "\n", "#    self.scale_up = 4", "\n", "#elif self.robot.resolution == 128:", "\n", "#    self.windowsz = 128", "\n", "#    self.scale_up = 4", "\n", "#elif self.robot.resolution == 256:", "\n", "#    self.windowsz = 256", "\n", "#    self.scale_up = 2", "\n", "#else:", "\n", "#    self.windowsz = 512", "\n", "#    self.scale_up = 1", "\n", "\n", "self", ".", "windowsz", "=", "self", ".", "robot", ".", "resolution", "\n", "self", ".", "scale_up", "=", "int", "(", "512", "/", "self", ".", "windowsz", ")", "\n", "\n", "if", "\"fast_lq_render\"", "in", "self", ".", "config", "and", "self", ".", "config", "[", "\"fast_lq_render\"", "]", "==", "True", ":", "\n", "            ", "self", ".", "scale_up", "*=", "2", "\n", "# if fast render, use lower quality point cloud", "\n", "\n", "", "self", ".", "_render_width", "=", "self", ".", "windowsz", "\n", "self", ".", "_render_height", "=", "self", ".", "windowsz", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.scene_introduce": [[132, 136], ["env_modalities.BaseRobotEnv.create_scene"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_scene"], ["", "def", "scene_introduce", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_robot_introduced", ")", "\n", "self", ".", "create_scene", "(", ")", "\n", "self", ".", "_scene_introduced", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.get_keys_to_action": [[137, 139], ["None"], "methods", ["None"], ["", "def", "get_keys_to_action", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "robot", ".", "keys_to_action", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv._reset": [[140, 176], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.env_bases.BaseEnv._reset", "range", "env_modalities.BaseRobotEnv.get_eye_pos_orientation", "env_modalities.BaseRobotEnv.render_observations", "env_modalities.BaseRobotEnv.robot._get_scaled_position", "env_modalities.BaseRobotEnv.robot.get_orientation", "pybullet.resetDebugVisualizerCamera", "print", "print", "env_modalities.BaseRobotEnv.robot.addToScene", "set", "pybullet.getNumBodies", "[].decode", "env_modalities.BaseRobotEnv.robot_body.get_name", "pybullet.getBodyInfo"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.get_eye_pos_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_observations", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase._get_scaled_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BaseRobot.addToScene", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.get_name"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_robot_introduced", ")", "\n", "assert", "(", "self", ".", "_scene_introduced", ")", "\n", "debugmode", "=", "1", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Episode: steps:{} score:{}\"", ".", "format", "(", "self", ".", "nframe", ",", "self", ".", "reward", ")", ")", "\n", "body_xyz", "=", "self", ".", "robot", ".", "body_xyz", "\n", "#print(\"[{}, {}, {}],\".format(body_xyz[0], body_xyz[1], body_xyz[2]))", "\n", "print", "(", "\"Episode count: {}\"", ".", "format", "(", "self", ".", "eps_count", ")", ")", "\n", "self", ".", "eps_count", "+=", "1", "\n", "", "self", ".", "nframe", "=", "0", "\n", "self", ".", "eps_reward", "=", "0", "\n", "BaseEnv", ".", "_reset", "(", "self", ")", "\n", "\n", "if", "not", "self", ".", "ground_ids", ":", "\n", "            ", "self", ".", "parts", ",", "self", ".", "jdict", ",", "self", ".", "ordered_joints", ",", "self", ".", "robot_body", "=", "self", ".", "robot", ".", "addToScene", "(", "\n", "[", "]", ")", "\n", "self", ".", "ground_ids", "=", "set", "(", "self", ".", "scene", ".", "scene_obj_list", ")", "\n", "\n", "## Todo: (hzyjerry) this part is not working, robot_tracking_id = -1", "\n", "", "for", "i", "in", "range", "(", "p", ".", "getNumBodies", "(", ")", ")", ":", "\n", "            ", "if", "(", "p", ".", "getBodyInfo", "(", "i", ")", "[", "0", "]", ".", "decode", "(", ")", "==", "self", ".", "robot_body", ".", "get_name", "(", ")", ")", ":", "\n", "               ", "self", ".", "robot_tracking_id", "=", "i", "\n", "#print(p.getBodyInfo(i)[0].decode())", "\n", "", "", "i", "=", "0", "\n", "\n", "eye_pos", ",", "eye_quat", "=", "self", ".", "get_eye_pos_orientation", "(", ")", "\n", "pose", "=", "[", "eye_pos", ",", "eye_quat", "]", "\n", "\n", "observations", "=", "self", ".", "render_observations", "(", "pose", ")", "\n", "pos", "=", "self", ".", "robot", ".", "_get_scaled_position", "(", ")", "\n", "orn", "=", "self", ".", "robot", ".", "get_orientation", "(", ")", "\n", "\n", "pos", "=", "(", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", "+", "self", ".", "tracking_camera", "[", "'z_offset'", "]", ")", "\n", "p", ".", "resetDebugVisualizerCamera", "(", "self", ".", "tracking_camera", "[", "'distance'", "]", ",", "self", ".", "tracking_camera", "[", "'yaw'", "]", ",", "self", ".", "tracking_camera", "[", "'pitch'", "]", ",", "pos", ")", "\n", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv._step": [[185, 233], ["env_modalities.BaseRobotEnv._rewards", "env_modalities.BaseRobotEnv._termination", "sum", "sum", "env_modalities.BaseRobotEnv.get_eye_pos_orientation", "env_modalities.BaseRobotEnv.render_observations", "range", "print", "print", "print", "print", "print", "print", "env_modalities.BaseRobotEnv.robot._get_scaled_position", "env_modalities.BaseRobotEnv.robot.get_orientation", "numpy.array", "pybullet.resetDebugVisualizerCamera", "print", "print", "sum", "bool", "dict", "math.ceil", "env_modalities.BaseRobotEnv.robot.apply_action", "env_modalities.BaseRobotEnv.scene.global_step", "sum", "env_modalities.BaseRobotEnv.robot.get_position", "sum", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.drone_env.DroneNavigateEnv._rewards", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv._termination", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.get_eye_pos_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_observations", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase._get_scaled_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.apply_action", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position"], ["def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "self", ".", "nframe", "+=", "1", "\n", "if", "not", "self", ".", "scene", ".", "multiplayer", ":", "# if multiplayer, action first applied to all robots, then global step() called, then _step() for all robots with the same actions", "\n", "            ", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "self", ".", "config", "[", "'dt'", "]", "/", "self", ".", "config", "[", "'gibson_dt'", "]", ")", ")", ":", "\n", "                ", "state", "=", "self", ".", "robot", ".", "apply_action", "(", "a", ")", "\n", "self", ".", "scene", ".", "global_step", "(", ")", "\n", "\n", "", "", "self", ".", "rewards", "=", "self", ".", "_rewards", "(", "a", ")", "\n", "done", "=", "self", ".", "_termination", "(", ")", "\n", "debugmode", "=", "0", "\n", "if", "(", "debugmode", ")", ":", "\n", "            ", "print", "(", "\"rewards=\"", ")", "\n", "print", "(", "self", ".", "rewards", ")", "\n", "print", "(", "\"sum rewards\"", ")", "\n", "print", "(", "sum", "(", "self", ".", "rewards", ")", ")", "\n", "\n", "", "self", ".", "reward", "+=", "sum", "(", "self", ".", "rewards", ")", "\n", "self", ".", "eps_reward", "+=", "sum", "(", "self", ".", "rewards", ")", "\n", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "print", "(", "\"Eps frame {} reward {}\"", ".", "format", "(", "self", ".", "nframe", ",", "self", ".", "reward", ")", ")", "\n", "print", "(", "\"position\"", ",", "self", ".", "robot", ".", "get_position", "(", ")", ")", "\n", "", "if", "self", ".", "gui", ":", "\n", "            ", "pos", "=", "self", ".", "robot", ".", "_get_scaled_position", "(", ")", "\n", "orn", "=", "self", ".", "robot", ".", "get_orientation", "(", ")", "\n", "pos", "=", "(", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", ",", "pos", "[", "2", "]", "+", "self", ".", "tracking_camera", "[", "'z_offset'", "]", ")", "\n", "pos", "=", "np", ".", "array", "(", "pos", ")", "\n", "dist", "=", "self", ".", "tracking_camera", "[", "'distance'", "]", "/", "self", ".", "robot", ".", "mjcf_scaling", "\n", "p", ".", "resetDebugVisualizerCamera", "(", "dist", ",", "self", ".", "tracking_camera", "[", "'yaw'", "]", ",", "self", ".", "tracking_camera", "[", "'pitch'", "]", ",", "pos", ")", "\n", "\n", "", "eye_pos", ",", "eye_quat", "=", "self", ".", "get_eye_pos_orientation", "(", ")", "\n", "pose", "=", "[", "eye_pos", ",", "eye_quat", "]", "\n", "observations", "=", "self", ".", "render_observations", "(", "pose", ")", "\n", "\n", "debugmode", "=", "0", "\n", "if", "(", "debugmode", ")", ":", "\n", "            ", "print", "(", "\"Camera env eye position\"", ",", "eye_pos", ")", "\n", "print", "(", "\"episode rewards\"", ",", "sum", "(", "self", ".", "rewards", ")", ",", "\"steps\"", ",", "self", ".", "nframe", ")", "\n", "\n", "", "episode", "=", "None", "\n", "if", "done", ":", "\n", "            ", "episode", "=", "{", "'r'", ":", "self", ".", "reward", ",", "\n", "'l'", ":", "self", ".", "nframe", "}", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "                ", "print", "(", "\"return episode:\"", ",", "episode", ")", "\n", "", "", "return", "observations", ",", "sum", "(", "self", ".", "rewards", ")", ",", "bool", "(", "done", ")", ",", "dict", "(", "eye_pos", "=", "eye_pos", ",", "eye_quat", "=", "eye_quat", ",", "episode", "=", "episode", ",", "x", "=", "state", "[", "0", "]", ",", "y", "=", "state", "[", "1", "]", ",", "yaw", "=", "state", "[", "2", "]", ",", "height", "=", "state", "[", "3", "]", ",", "speed", "=", "state", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv._termination": [[234, 236], ["NotImplementedError"], "methods", ["None"], ["", "def", "_termination", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv._reward": [[237, 239], ["NotImplementedError"], "methods", ["None"], ["", "def", "_reward", "(", "self", ",", "action", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.calc_rewards": [[240, 243], ["print", "NotImplementedError"], "methods", ["None"], ["", "def", "calc_rewards", "(", "self", ",", "a", ",", "state", ")", ":", "\n", "        ", "print", "(", "\"Please do not directly instantiate BaseRobotEnv\"", ")", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.get_eye_pos_orientation": [[244, 250], ["env_modalities.BaseRobotEnv.robot.eyes.get_position", "env_modalities.BaseRobotEnv.robot.eyes.get_orientation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "def", "get_eye_pos_orientation", "(", "self", ")", ":", "\n", "        ", "\"\"\"Used in CameraEnv.setup\"\"\"", "\n", "eye_pos", "=", "self", ".", "robot", ".", "eyes", ".", "get_position", "(", ")", "\n", "x", ",", "y", ",", "z", ",", "w", "=", "self", ".", "robot", ".", "eyes", ".", "get_orientation", "(", ")", "\n", "eye_quat", "=", "[", "w", ",", "x", ",", "y", ",", "z", "]", "\n", "return", "eye_pos", ",", "eye_quat", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.move_robot": [[251, 257], ["env_modalities.BaseRobotEnv.cpp_robot.query_position", "env_modalities.BaseRobotEnv.cpp_robot.root_part.pose", "env_modalities.BaseRobotEnv.move_xyz", "env_modalities.BaseRobotEnv.cpp_robot.set_pose"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.pose", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_bases.BodyPart.set_pose"], ["", "def", "move_robot", "(", "self", ",", "init_x", ",", "init_y", ",", "init_z", ")", ":", "\n", "        ", "\"Used by multiplayer building to move sideways, to another running lane.\"", "\n", "self", ".", "cpp_robot", ".", "query_position", "(", ")", "\n", "pose", "=", "self", ".", "cpp_robot", ".", "root_part", ".", "pose", "(", ")", "\n", "pose", ".", "move_xyz", "(", "init_x", ",", "init_y", ",", "init_z", ")", "# Works because robot loads around (0,0,0), and some robots have z != 0 that is left intact", "\n", "self", ".", "cpp_robot", ".", "set_pose", "(", "pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.camera_adjust": [[258, 262], ["env_modalities.BaseRobotEnv.camera.move_and_look_at"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.Camera.move_and_look_at"], ["", "def", "camera_adjust", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "self", ".", "body_xyz", "\n", "self", ".", "camera_x", "=", "0.98", "*", "self", ".", "camera_x", "+", "(", "1", "-", "0.98", ")", "*", "x", "\n", "self", ".", "camera", ".", "move_and_look_at", "(", "self", ".", "camera_x", ",", "y", "-", "2.0", ",", "1.4", ",", "x", ",", "y", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.find_best_k_views": [[263, 292], ["numpy.argsort", "numpy.array", "len", "print", "enumerate", "len", "len", "list", "pybullet.rayTestBatch", "len", "min", "top_k.append", "len", "list", "len", "pybullet.rayTestBatch"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "find_best_k_views", "(", "self", ",", "eye_pos", ",", "all_dist", ",", "all_pos", ",", "avoid_block", "=", "False", ")", ":", "\n", "        ", "least_order", "=", "(", "np", ".", "argsort", "(", "all_dist", ")", ")", "\n", "top_k", "=", "[", "]", "\n", "num_to_test", "=", "self", ".", "k", "*", "2", "\n", "curr_num", "=", "0", "\n", "all_pos", "=", "np", ".", "array", "(", "all_pos", ")", "\n", "\n", "if", "not", "avoid_block", ":", "\n", "            ", "return", "least_order", "[", ":", "self", ".", "k", "]", "\n", "\n", "", "while", "len", "(", "top_k", ")", "<", "self", ".", "k", ":", "\n", "            ", "curr_order", "=", "least_order", "[", "curr_num", ":", "curr_num", "+", "num_to_test", "]", "\n", "curr_pos", "=", "all_pos", "[", "curr_order", "]", "\n", "print", "(", "\"Curr num\"", ",", "curr_num", ",", "\"top k\"", ",", "len", "(", "top_k", ")", ",", "self", ".", "k", ")", "\n", "if", "len", "(", "curr_pos", ")", "<=", "p", ".", "MAX_RAY_INTERSECTION_BATCH_SIZE", ":", "\n", "                ", "collisions", "=", "list", "(", "p", ".", "rayTestBatch", "(", "[", "eye_pos", "]", "*", "len", "(", "curr_pos", ")", ",", "curr_pos", ")", ")", "\n", "", "else", ":", "\n", "                ", "collisions", "=", "[", "]", "\n", "curr_i", "=", "0", "\n", "while", "(", "curr_i", "<", "len", "(", "curr_pos", ")", ")", ":", "\n", "                    ", "curr_n", "=", "min", "(", "len", "(", "curr_pos", ")", ",", "curr_i", "+", "p", ".", "MAX_RAY_INTERSECTION_BATCH_SIZE", "-", "1", ")", "\n", "collisions", "=", "collisions", "+", "list", "(", "p", ".", "rayTestBatch", "(", "[", "eye_pos", "]", "*", "(", "curr_n", "-", "curr_i", ")", ",", "curr_pos", "[", "curr_i", ":", "curr_n", "]", ")", ")", "\n", "curr_i", "=", "curr_n", "\n", "", "", "has_collision", "=", "[", "c", "[", "0", "]", ">", "0", "for", "c", "in", "collisions", "]", "\n", "## (hzyjerry): ray_casting-based view selection occasionally gives unstable behaviour. Will keep watching on this", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "curr_order", ")", ":", "\n", "                ", "if", "not", "has_collision", "[", "i", "]", ":", "\n", "                    ", "top_k", ".", "append", "(", "x", ")", "\n", "", "", "", "return", "top_k", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.getExtendedObservation": [[294, 296], ["None"], "methods", ["None"], ["", "def", "getExtendedObservation", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.__init__": [[307, 341], ["env_modalities.BaseRobotEnv.__init__", "gibson.data.datasets.get_model_path", "numpy.zeros", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "os.environ.keys", "env_modalities.CameraRobotEnv.config.keys", "env_modalities.CameraRobotEnv.config.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "gpu_idx", ",", "scene_type", ",", "tracking_camera", ")", ":", "\n", "## The following properties are already instantiated inside xxx_env.py:", "\n", "        ", "BaseRobotEnv", ".", "__init__", "(", "self", ",", "config", ",", "tracking_camera", ",", "scene_type", ",", "gpu_idx", ")", "\n", "\n", "if", "self", ".", "gui", ":", "\n", "            ", "self", ".", "screen_arr", "=", "np", ".", "zeros", "(", "[", "512", ",", "512", ",", "3", "]", ")", "\n", "\n", "", "self", ".", "test_env", "=", "\"TEST_ENV\"", "in", "os", ".", "environ", ".", "keys", "(", ")", "and", "os", ".", "environ", "[", "'TEST_ENV'", "]", "==", "\"True\"", "\n", "self", ".", "_use_filler", "=", "config", "[", "\"use_filler\"", "]", "\n", "self", ".", "_require_camera_input", "=", "'rgb_filled'", "in", "self", ".", "config", "[", "\"output\"", "]", "or", "'rgb_prefilled'", "in", "self", ".", "config", "[", "\"output\"", "]", "or", "'depth'", "in", "self", ".", "config", "[", "\"output\"", "]", "or", "'normal'", "in", "self", ".", "config", "[", "\"output\"", "]", "or", "'semantics'", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "self", ".", "_require_rgb", "=", "'rgb_filled'", "in", "self", ".", "config", "[", "\"output\"", "]", "or", "\"rgb_prefilled\"", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "self", ".", "_require_depth", "=", "'depth'", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "self", ".", "_require_normal", "=", "'depth'", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "self", ".", "_require_semantics", "=", "'semantics'", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "self", ".", "_semantic_source", "=", "1", "\n", "self", ".", "_semantic_color", "=", "1", "\n", "if", "self", ".", "_require_semantics", ":", "\n", "            ", "assert", "\"semantic_source\"", "in", "self", ".", "config", ".", "keys", "(", ")", ",", "\"semantic_source not specified in configuration\"", "\n", "assert", "\"semantic_color\"", "in", "self", ".", "config", ".", "keys", "(", ")", ",", "\"semantic_color not specified in configuration\"", "\n", "assert", "self", ".", "config", "[", "\"semantic_source\"", "]", "in", "[", "1", ",", "2", "]", ",", "\"semantic_source not valid\"", "\n", "assert", "self", ".", "config", "[", "\"semantic_color\"", "]", "in", "[", "1", ",", "2", ",", "3", "]", ",", "\"semantic_source not valid\"", "\n", "self", ".", "_semantic_source", "=", "self", ".", "config", "[", "\"semantic_source\"", "]", "\n", "self", ".", "_semantic_color", "=", "self", ".", "config", "[", "\"semantic_color\"", "]", "\n", "", "self", ".", "_require_normal", "=", "'normal'", "in", "self", ".", "config", "[", "\"output\"", "]", "\n", "\n", "#if self._require_camera_input:", "\n", "self", ".", "model_path", "=", "get_model_path", "(", "self", ".", "model_id", ")", "\n", "\n", "self", ".", "save_frame", "=", "0", "\n", "self", ".", "fps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.reset_observations": [[343, 350], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset_observations", "(", "self", ")", ":", "\n", "## Initialize blank render image", "\n", "        ", "self", ".", "render_rgb_filled", "=", "np", ".", "zeros", "(", "(", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "3", ")", ")", "\n", "self", ".", "render_rgb_prefilled", "=", "np", ".", "zeros", "(", "(", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "3", ")", ")", "\n", "self", ".", "render_depth", "=", "np", ".", "zeros", "(", "(", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "1", ")", ")", "\n", "self", ".", "render_normal", "=", "np", ".", "zeros", "(", "(", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "3", ")", ")", "\n", "self", ".", "render_semantics", "=", "np", ".", "zeros", "(", "(", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.robot_introduce": [[351, 354], ["env_modalities.BaseRobotEnv.robot_introduce", "env_modalities.CameraRobotEnv.setup_rendering_camera"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.robot_introduce", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_rendering_camera"], ["", "def", "robot_introduce", "(", "self", ",", "robot", ")", ":", "\n", "        ", "BaseRobotEnv", ".", "robot_introduce", "(", "self", ",", "robot", ")", "\n", "self", ".", "setup_rendering_camera", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.scene_introduce": [[355, 357], ["env_modalities.BaseRobotEnv.scene_introduce"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.scene_introduce"], ["", "def", "scene_introduce", "(", "self", ")", ":", "\n", "        ", "BaseRobotEnv", ".", "scene_introduce", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_rendering_camera": [[358, 385], ["len", "env_modalities.CameraRobotEnv.setup_camera_multi", "env_modalities.CameraRobotEnv.setup_camera_pc"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_camera_multi", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_camera_pc"], ["", "def", "setup_rendering_camera", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "test_env", ":", "\n", "            ", "return", "\n", "", "self", ".", "r_camera_rgb", "=", "None", "## Rendering engine", "\n", "self", ".", "r_camera_mul", "=", "None", "## Multi channel rendering engine", "\n", "self", ".", "r_camera_dep", "=", "None", "\n", "#self.check_port_available()", "\n", "\n", "ui_map", "=", "{", "\n", "1", ":", "OneViewUI", ",", "\n", "2", ":", "TwoViewUI", ",", "\n", "3", ":", "ThreeViewUI", ",", "\n", "4", ":", "FourViewUI", ",", "\n", "}", "\n", "\n", "assert", "self", ".", "config", "[", "\"ui_num\"", "]", "==", "len", "(", "self", ".", "config", "[", "'ui_components'", "]", ")", ",", "\"In configuration, ui_num is not equal to the number of ui components\"", "\n", "if", "self", ".", "config", "[", "\"display_ui\"", "]", ":", "\n", "            ", "ui_num", "=", "self", ".", "config", "[", "\"ui_num\"", "]", "\n", "self", ".", "UI", "=", "ui_map", "[", "ui_num", "]", "(", "self", ".", "windowsz", ",", "self", ",", "self", ".", "port_ui", ")", "\n", "\n", "", "if", "self", ".", "_require_camera_input", ":", "\n", "            ", "self", ".", "setup_camera_multi", "(", ")", "\n", "self", ".", "setup_camera_pc", "(", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "\"mode\"", "]", "==", "\"web_ui\"", ":", "\n", "            ", "ui_num", "=", "self", ".", "config", "[", "\"ui_num\"", "]", "\n", "self", ".", "webUI", "=", "ui_map", "[", "ui_num", "]", "(", "self", ".", "windowsz", ",", "self", ",", "self", ".", "port_ui", ",", "use_pygame", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._reset": [[386, 395], ["env_modalities.CameraRobotEnv.reset_observations", "env_modalities.BaseRobotEnv._reset", "env_modalities.CameraRobotEnv.robot.calc_potential", "env_modalities.CameraRobotEnv.get_eye_pos_orientation", "env_modalities.CameraRobotEnv.render_observations"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.reset_observations", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.HuskyClimber.calc_potential", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.get_eye_pos_orientation", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_observations"], ["", "", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_observations", "(", ")", "\n", "sensor_state", "=", "BaseRobotEnv", ".", "_reset", "(", "self", ")", "\n", "self", ".", "potential", "=", "self", ".", "robot", ".", "calc_potential", "(", ")", "\n", "eye_pos", ",", "eye_quat", "=", "self", ".", "get_eye_pos_orientation", "(", ")", "\n", "pose", "=", "[", "eye_pos", ",", "eye_quat", "]", "\n", "\n", "observations", "=", "self", ".", "render_observations", "(", "pose", ")", "\n", "return", "observations", "#, sensor_state", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.add_text": [[397, 399], ["None"], "methods", ["None"], ["", "def", "add_text", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._step": [[400, 440], ["time.time", "env_modalities.BaseRobotEnv._step", "sensor_meta.pop", "sensor_meta.pop", "time.time", "env_modalities.CameraRobotEnv.render_to_webUI", "env_modalities.CameraRobotEnv.robot.get_position", "env_modalities.CameraRobotEnv.render_to_UI", "env_modalities.CameraRobotEnv.add_text", "print", "print", "env_modalities.CameraRobotEnv.r_camera_rgb.renderToScreen"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._step", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_to_webUI", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_to_UI", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.add_text"], ["", "def", "_step", "(", "self", ",", "a", ")", ":", "\n", "        ", "t", "=", "time", ".", "time", "(", ")", "\n", "base_obs", ",", "sensor_reward", ",", "done", ",", "sensor_meta", "=", "BaseRobotEnv", ".", "_step", "(", "self", ",", "a", ")", "\n", "_dt_internal", "=", "time", ".", "time", "(", ")", "-", "t", "\n", "# Speed bottleneck", "\n", "observations", "=", "base_obs", "\n", "self", ".", "fps", "=", "0.9", "*", "self", ".", "fps", "+", "0.1", "*", "1", "/", "_dt_internal", "\n", "\n", "pose", "=", "[", "sensor_meta", "[", "'eye_pos'", "]", ",", "sensor_meta", "[", "'eye_quat'", "]", "]", "\n", "sensor_meta", ".", "pop", "(", "\"eye_pos\"", ",", "None", ")", "\n", "sensor_meta", ".", "pop", "(", "\"eye_quat\"", ",", "None", ")", "\n", "#sensor_meta[\"sensor\"] = sensor_state", "\n", "\n", "if", "self", ".", "gui", ":", "\n", "            ", "if", "self", ".", "config", "[", "\"display_ui\"", "]", ":", "\n", "                ", "self", ".", "render_to_UI", "(", ")", "\n", "#print('render to ui')", "\n", "self", ".", "save_frame", "+=", "1", "\n", "", "elif", "self", ".", "_require_camera_input", ":", "\n", "# Use non-pygame GUI", "\n", "                ", "self", ".", "r_camera_rgb", ".", "renderToScreen", "(", ")", "\n", "\n", "", "", "if", "self", ".", "config", "[", "\"mode\"", "]", "==", "'web_ui'", ":", "\n", "            ", "self", ".", "render_to_webUI", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_require_camera_input", "or", "self", ".", "test_env", ":", "\n", "## No camera input (rgb/depth/normal/semantics)", "\n", "            ", "return", "base_obs", ",", "sensor_reward", ",", "done", ",", "sensor_meta", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", "[", "\"show_diagnostics\"", "]", "and", "self", ".", "_require_rgb", ":", "\n", "                ", "self", ".", "render_rgb_filled", "=", "self", ".", "add_text", "(", "self", ".", "render_rgb_filled", ")", "\n", "\n", "", "robot_pos", "=", "self", ".", "robot", ".", "get_position", "(", ")", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "                ", "print", "(", "\"Eye position\"", ",", "sensor_meta", "[", "'eye_pos'", "]", ")", "\n", "", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "                ", "print", "(", "\"Environment observation keys\"", ",", "observations", ".", "keys", ")", "\n", "", "return", "observations", ",", "sensor_reward", ",", "done", ",", "sensor_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_component": [[442, 462], ["env_modalities.CameraRobotEnv.render_depth.copy", "print", "env_modalities.CameraRobotEnv.render_physics", "env_modalities.CameraRobotEnv.render_map", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.render_physics", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.render_map"], ["", "", "def", "render_component", "(", "self", ",", "tag", ")", ":", "\n", "        ", "if", "tag", "==", "View", ".", "RGB_FILLED", ":", "\n", "            ", "return", "self", ".", "render_rgb_filled", "\n", "", "if", "tag", "==", "View", ".", "RGB_PREFILLED", ":", "\n", "            ", "return", "self", ".", "render_rgb_prefilled", "\n", "", "if", "tag", "==", "View", ".", "DEPTH", ":", "\n", "            ", "scaled_depth", "=", "self", ".", "render_depth", ".", "copy", "(", ")", "\n", "scaled_depth", "=", "scaled_depth", "*", "DEPTH_SCALE_FACTOR", "+", "DEPTH_OFFSET_FACTOR", "\n", "overflow", "=", "scaled_depth", ">", "255.", "\n", "scaled_depth", "[", "overflow", "]", "=", "255.", "\n", "return", "scaled_depth", "\n", "", "if", "tag", "==", "View", ".", "NORMAL", ":", "\n", "            ", "return", "self", ".", "render_normal", "\n", "", "if", "tag", "==", "View", ".", "SEMANTICS", ":", "\n", "            ", "print", "(", "\"Render components: semantics\"", ",", "np", ".", "mean", "(", "self", ".", "render_semantics", ")", ")", "\n", "return", "self", ".", "render_semantics", "\n", "", "if", "tag", "==", "View", ".", "PHYSICS", ":", "\n", "            ", "return", "self", ".", "render_physics", "(", ")", "\n", "", "if", "tag", "==", "View", ".", "MAP", ":", "\n", "            ", "return", "self", ".", "render_map", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_to_UI": [[463, 473], ["env_modalities.CameraRobotEnv.UI.refresh", "env_modalities.CameraRobotEnv.UI.update_view", "env_modalities.CameraRobotEnv.render_component"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_component"], ["", "", "def", "render_to_UI", "(", "self", ")", ":", "\n", "        ", "'''Works for different UI: UI_SIX, UI_FOUR, UI_TWO\n        '''", "\n", "if", "not", "self", ".", "config", "[", "\"display_ui\"", "]", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "UI", ".", "refresh", "(", ")", "\n", "\n", "for", "component", "in", "self", ".", "UI", ".", "components", ":", "\n", "            ", "self", ".", "UI", ".", "update_view", "(", "self", ".", "render_component", "(", "component", ")", ",", "component", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_to_webUI": [[474, 484], ["env_modalities.CameraRobotEnv.webUI.refresh", "env_modalities.CameraRobotEnv.webUI.update_view", "env_modalities.CameraRobotEnv.render_component"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_component"], ["", "", "def", "render_to_webUI", "(", "self", ")", ":", "\n", "        ", "'''Works for different UI: UI_SIX, UI_FOUR, UI_TWO\n        '''", "\n", "if", "not", "self", ".", "config", "[", "\"mode\"", "]", "==", "'web_ui'", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "webUI", ".", "refresh", "(", ")", "\n", "\n", "for", "component", "in", "self", ".", "webUI", ".", "components", ":", "\n", "            ", "self", ".", "webUI", ".", "update_view", "(", "self", ".", "render_component", "(", "component", ")", ",", "component", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv._close": [[487, 503], ["sandbox.crazyflie.src.gcg.envs.GibsonEnv.env_bases.BaseEnv._close", "env_modalities.CameraRobotEnv.r_camera_mul.terminate", "env_modalities.CameraRobotEnv.r_camera_rgb._close", "env_modalities.CameraRobotEnv.UI._close", "env_modalities.CameraRobotEnv.r_camera_dep.terminate", "env_modalities.CameraRobotEnv.r_camera_norm.terminate", "env_modalities.CameraRobotEnv.r_camera_semt.terminate"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._close", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._close", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._close", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate"], ["", "", "def", "_close", "(", "self", ")", ":", "\n", "        ", "BaseEnv", ".", "_close", "(", "self", ")", "\n", "\n", "if", "self", ".", "_require_camera_input", ":", "\n", "            ", "self", ".", "r_camera_mul", ".", "terminate", "(", ")", "\n", "self", ".", "r_camera_rgb", ".", "_close", "(", ")", "\n", "\n", "if", "self", ".", "r_camera_dep", "is", "not", "None", ":", "\n", "                ", "self", ".", "r_camera_dep", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_normal", ":", "\n", "                ", "self", ".", "r_camera_norm", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_semantics", ":", "\n", "                ", "self", ".", "r_camera_semt", ".", "terminate", "(", ")", "\n", "\n", "", "", "if", "self", ".", "config", "[", "\"display_ui\"", "]", ":", "\n", "            ", "self", ".", "UI", ".", "_close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.get_key_pressed": [[504, 511], ["pybullet.getKeyboardEvents", "pybullet.getKeyboardEvents.keys", "pressed_keys.append"], "methods", ["None"], ["", "", "def", "get_key_pressed", "(", "self", ",", "relevant", "=", "None", ")", ":", "\n", "        ", "pressed_keys", "=", "[", "]", "\n", "events", "=", "p", ".", "getKeyboardEvents", "(", ")", "\n", "key_codes", "=", "events", ".", "keys", "(", ")", "\n", "for", "key", "in", "key_codes", ":", "\n", "            ", "pressed_keys", ".", "append", "(", "key", ")", "\n", "", "return", "pressed_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.get_blank_visuals": [[512, 514], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_blank_visuals", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.render_observations": [[515, 544], ["env_modalities.CameraRobotEnv.robot.calc_state", "env_modalities.CameraRobotEnv.r_camera_rgb.setNewPose", "env_modalities.CameraRobotEnv.r_camera_rgb.getAllPoseDist", "env_modalities.CameraRobotEnv.find_best_k_views", "env_modalities.CameraRobotEnv.r_camera_rgb.renderOffScreen", "getattr", "Exception"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.JR2.calc_state", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.BaseRobotEnv.find_best_k_views"], ["", "def", "render_observations", "(", "self", ",", "pose", ")", ":", "\n", "        ", "'''Render all environment observations, called inside every step()\n        Input\n            @pose: current robot pose\n        Return:\n            @observation: dict with key values being output components user\n            specified in config file\n        TODO:\n            @hzyjerry: add noise to observation\n        '''", "\n", "\n", "self", ".", "render_nonviz_sensor", "=", "self", ".", "robot", ".", "calc_state", "(", ")", "\n", "\n", "if", "self", ".", "_require_camera_input", ":", "\n", "            ", "self", ".", "r_camera_rgb", ".", "setNewPose", "(", "pose", ")", "\n", "all_dist", ",", "all_pos", "=", "self", ".", "r_camera_rgb", ".", "getAllPoseDist", "(", "pose", ")", "\n", "top_k", "=", "self", ".", "find_best_k_views", "(", "pose", "[", "0", "]", ",", "all_dist", ",", "all_pos", ",", "avoid_block", "=", "False", ")", "\n", "#with Profiler(\"Render to screen\"):", "\n", "self", ".", "render_rgb_filled", ",", "self", ".", "render_depth", ",", "self", ".", "render_semantics", ",", "self", ".", "render_normal", ",", "self", ".", "render_rgb_prefilled", "=", "self", ".", "r_camera_rgb", ".", "renderOffScreen", "(", "pose", ",", "top_k", ",", "rgb", "=", "self", ".", "_require_rgb", ")", "\n", "\n", "", "observations", "=", "{", "}", "\n", "for", "output", "in", "self", ".", "config", "[", "\"output\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "observations", "[", "output", "]", "=", "getattr", "(", "self", ",", "\"render_\"", "+", "output", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "\"Output component {} is not available\"", ".", "format", "(", "output", ")", ")", "\n", "\n", "#visuals = np.concatenate(visuals, 2)", "\n", "", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.get_observations": [[545, 555], ["getattr", "Exception"], "methods", ["None"], ["", "def", "get_observations", "(", "self", ")", ":", "\n", "        ", "observations", "=", "{", "}", "\n", "for", "output", "in", "self", ".", "config", "[", "\"output\"", "]", ":", "\n", "            ", "try", ":", "\n", "                ", "observations", "[", "output", "]", "=", "getattr", "(", "self", ",", "\"render_\"", "+", "output", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "\"Output component {} is not available\"", ".", "format", "(", "output", ")", ")", "\n", "\n", "#visuals = np.concatenate(visuals, 2)", "\n", "", "", "return", "observations", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_camera_pc": [[556, 641], ["dict", "env_modalities.CameraRobotEnv.dataset.get_scene_info", "gibson.core.render.pcrender.PCRenderer", "gibson.data.datasets.ViewDataSet3D", "zip", "gym.error.Error", "env_modalities.CameraRobotEnv.dataset.get_multi_index", "enumerate", "env_modalities.CameraRobotEnv.dataset.get_multi_index", "enumerate", "range", "dict.keys", "[].numpy", "targets.append", "poses.append", "sources.append", "source_depths.append", "[].numpy", "targets.append", "poses.append", "sources.append", "source_depths.append", "len", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize"], "methods", ["None"], ["", "def", "setup_camera_pc", "(", "self", ")", ":", "\n", "## Camera specific", "\n", "        ", "assert", "(", "self", ".", "_require_camera_input", ")", "\n", "if", "self", ".", "scene_type", "==", "\"building\"", ":", "\n", "            ", "self", ".", "dataset", "=", "ViewDataSet3D", "(", "\n", "transform", "=", "np", ".", "array", ",", "\n", "mist_transform", "=", "np", ".", "array", ",", "\n", "seqlen", "=", "2", ",", "\n", "off_3d", "=", "False", ",", "\n", "train", "=", "False", ",", "\n", "overwrite_fofn", "=", "True", ",", "env", "=", "self", ",", "only_load", "=", "self", ".", "config", "[", "\"model_id\"", "]", ")", "\n", "\n", "", "scene_dict", "=", "dict", "(", "zip", "(", "self", ".", "dataset", ".", "scenes", ",", "range", "(", "len", "(", "self", ".", "dataset", ".", "scenes", ")", ")", ")", ")", "\n", "## Todo: (hzyjerry) more error handling", "\n", "if", "not", "self", ".", "model_id", "in", "scene_dict", ".", "keys", "(", ")", ":", "\n", "             ", "raise", "error", ".", "Error", "(", "\"Dataset not found: model {} cannot be loaded\"", ".", "format", "(", "self", ".", "model_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "scene_id", "=", "scene_dict", "[", "self", ".", "model_id", "]", "\n", "", "uuids", ",", "rts", "=", "self", ".", "dataset", ".", "get_scene_info", "(", "scene_id", ")", "\n", "\n", "targets", ",", "sources", ",", "source_depths", ",", "poses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "source_semantics", "=", "[", "]", "\n", "\n", "if", "not", "self", ".", "multiprocessing", "or", "self", ".", "config", "[", "\"envname\"", "]", "==", "\"TestEnv\"", ":", "\n", "            ", "all_data", "=", "self", ".", "dataset", ".", "get_multi_index", "(", "[", "v", "for", "k", ",", "v", "in", "uuids", "]", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "all_data", ")", ":", "\n", "                ", "target", ",", "target_depth", "=", "data", "[", "1", "]", ",", "data", "[", "3", "]", "\n", "if", "not", "self", ".", "_require_rgb", ":", "\n", "                    ", "continue", "\n", "", "ww", "=", "target", ".", "shape", "[", "0", "]", "//", "8", "+", "2", "\n", "target", "[", ":", "ww", ",", ":", ",", ":", "]", "=", "target", "[", "ww", ",", ":", ",", ":", "]", "\n", "target", "[", "-", "ww", ":", ",", ":", ",", ":", "]", "=", "target", "[", "-", "ww", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "scale_up", "!=", "1", ":", "\n", "                    ", "target", "=", "cv2", ".", "resize", "(", "\n", "target", ",", "None", ",", "\n", "fx", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "fy", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "target_depth", "=", "cv2", ".", "resize", "(", "\n", "target_depth", ",", "None", ",", "\n", "fx", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "fy", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "pose", "=", "data", "[", "-", "1", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "poses", ".", "append", "(", "pose", ")", "\n", "sources", ".", "append", "(", "target", ")", "\n", "source_depths", ".", "append", "(", "target_depth", ")", "\n", "", "", "else", ":", "\n", "            ", "all_data", "=", "self", ".", "dataset", ".", "get_multi_index", "(", "[", "v", "for", "k", ",", "v", "in", "uuids", "]", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "all_data", ")", ":", "\n", "                ", "target", ",", "target_depth", "=", "data", "[", "1", "]", ",", "data", "[", "3", "]", "\n", "if", "not", "self", ".", "_require_rgb", ":", "\n", "                    ", "continue", "\n", "", "ww", "=", "target", ".", "shape", "[", "0", "]", "//", "8", "+", "2", "\n", "target", "[", ":", "ww", ",", ":", ",", ":", "]", "=", "target", "[", "ww", ",", ":", ",", ":", "]", "\n", "target", "[", "-", "ww", ":", ",", ":", ",", ":", "]", "=", "target", "[", "-", "ww", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "scale_up", "!=", "1", ":", "\n", "\n", "                    ", "target", "=", "cv2", ".", "resize", "(", "\n", "target", ",", "None", ",", "\n", "fx", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "fy", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "target_depth", "=", "cv2", ".", "resize", "(", "\n", "target_depth", ",", "None", ",", "\n", "fx", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "fy", "=", "1.0", "/", "self", ".", "scale_up", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "", "pose", "=", "data", "[", "-", "1", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "poses", ".", "append", "(", "pose", ")", "\n", "sources", ".", "append", "(", "target", ")", "\n", "source_depths", ".", "append", "(", "target_depth", ")", "\n", "\n", "", "", "self", ".", "r_camera_rgb", "=", "PCRenderer", "(", "self", ".", "port_rgb", ",", "sources", ",", "source_depths", ",", "target", ",", "rts", ",", "\n", "scale_up", "=", "self", ".", "scale_up", ",", "\n", "semantics", "=", "source_semantics", ",", "\n", "gui", "=", "self", ".", "gui", ",", "\n", "use_filler", "=", "self", ".", "_use_filler", ",", "\n", "gpu_idx", "=", "self", ".", "gpu_idx", ",", "\n", "windowsz", "=", "self", ".", "windowsz", ",", "\n", "env", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.setup_camera_multi": [[642, 683], ["os.join", "os.join", "os.join", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "subprocess.Popen", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "print", "env_modalities.CameraRobotEnv.r_camera_mul.terminate", "print", "os.dirname", "os.dirname", "os.dirname", "shlex.split", "subprocess.Popen", "subprocess.Popen", "env_modalities.CameraRobotEnv.r_camera_dep.terminate", "env_modalities.CameraRobotEnv.r_camera_norm.terminate", "env_modalities.CameraRobotEnv.r_camera_semt.terminate", "print", "os.abspath", "os.abspath", "os.abspath", "shlex.split", "shlex.split", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate"], ["", "def", "setup_camera_multi", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_require_camera_input", ")", "\n", "def", "camera_multi_excepthook", "(", "exctype", ",", "value", ",", "tb", ")", ":", "\n", "            ", "print", "(", "\"killing\"", ",", "self", ".", "r_camera_mul", ")", "\n", "self", ".", "r_camera_mul", ".", "terminate", "(", ")", "\n", "if", "self", ".", "r_camera_dep", "is", "not", "None", ":", "\n", "                ", "self", ".", "r_camera_dep", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_normal", ":", "\n", "                ", "self", ".", "r_camera_norm", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_semantics", ":", "\n", "                ", "self", ".", "r_camera_semt", ".", "terminate", "(", ")", "\n", "", "while", "tb", ":", "\n", "                ", "if", "exctype", "==", "KeyboardInterrupt", ":", "\n", "                    ", "print", "(", "\"Exiting Gibson...\"", ")", "\n", "return", "\n", "", "filename", "=", "tb", ".", "tb_frame", ".", "f_code", ".", "co_filename", "\n", "name", "=", "tb", ".", "tb_frame", ".", "f_code", ".", "co_name", "\n", "lineno", "=", "tb", ".", "tb_lineno", "\n", "print", "(", "'   File \"%.500s\", line %d, in %.500s'", "%", "(", "filename", ",", "lineno", ",", "name", ")", ")", "\n", "tb", "=", "tb", ".", "tb_next", "\n", "", "print", "(", "' %s: %s'", "%", "(", "exctype", ".", "__name__", ",", "value", ")", ")", "\n", "\n", "", "sys", ".", "excepthook", "=", "camera_multi_excepthook", "\n", "enable_render_smooth", "=", "0", "\n", "\n", "dr_path", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "gibson", ".", "__file__", ")", ")", ",", "'core'", ",", "'channels'", ",", "'depth_render'", ")", "\n", "cur_path", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "dr_path", ")", "\n", "\n", "render_main", "=", "\"./depth_render --GPU {} --modelpath {} -w {} -h {} -f {} -p {}\"", ".", "format", "(", "self", ".", "gpu_idx", ",", "self", ".", "model_path", ",", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "self", ".", "config", "[", "\"fov\"", "]", "/", "np", ".", "pi", "*", "180", ",", "self", ".", "port_depth", ")", "\n", "render_norm", "=", "\"./depth_render --GPU {} --modelpath {} -n 1 -w {} -h {} -f {} -p {}\"", ".", "format", "(", "self", ".", "gpu_idx", ",", "self", ".", "model_path", ",", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "self", ".", "config", "[", "\"fov\"", "]", "/", "np", ".", "pi", "*", "180", ",", "self", ".", "port_normal", ")", "\n", "render_semt", "=", "\"./depth_render --GPU {} --modelpath {} -t 1 -r {} -c {} -w {} -h {} -f {} -p {}\"", ".", "format", "(", "self", ".", "gpu_idx", ",", "self", ".", "model_path", ",", "self", ".", "_semantic_source", ",", "self", ".", "_semantic_color", ",", "self", ".", "windowsz", ",", "self", ".", "windowsz", ",", "self", ".", "config", "[", "\"fov\"", "]", "/", "np", ".", "pi", "*", "180", ",", "self", ".", "port_sem", ")", "\n", "\n", "self", ".", "r_camera_mul", "=", "subprocess", ".", "Popen", "(", "shlex", ".", "split", "(", "render_main", ")", ",", "shell", "=", "False", ")", "\n", "#self.r_camera_dep = subprocess.Popen(shlex.split(render_depth), shell=False)", "\n", "if", "self", ".", "_require_normal", ":", "\n", "            ", "self", ".", "r_camera_norm", "=", "subprocess", ".", "Popen", "(", "shlex", ".", "split", "(", "render_norm", ")", ",", "shell", "=", "False", ")", "\n", "", "if", "self", ".", "_require_semantics", ":", "\n", "            ", "self", ".", "r_camera_semt", "=", "subprocess", ".", "Popen", "(", "shlex", ".", "split", "(", "render_semt", ")", ",", "shell", "=", "False", ")", "\n", "\n", "", "os", ".", "chdir", "(", "cur_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.CameraRobotEnv.check_port_available": [[685, 699], ["ports.append", "ports.append", "ports.append", "socket.socket", "socket.socket.bind", "gym.error.Error"], "methods", ["None"], ["", "def", "check_port_available", "(", "self", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_require_camera_input", ")", "\n", "# TODO (hzyjerry)", "\n", "ports", "=", "[", "]", "\n", "if", "self", ".", "_require_depth", ":", "ports", ".", "append", "(", "self", ".", "port_depth", ")", "\n", "if", "self", ".", "_require_normal", ":", "ports", ".", "append", "(", "self", ".", "port_normal", ")", "\n", "if", "self", ".", "_require_semantics", ":", "ports", ".", "append", "(", "self", ".", "port_sem", ")", "\n", "for", "port", "in", "ports", ":", "\n", "            ", "s", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "try", ":", "\n", "                ", "result", "=", "s", ".", "bind", "(", "(", "\"127.0.0.1\"", ",", "port", "-", "1", ")", ")", "\n", "", "except", "socket", ".", "error", "as", "e", ":", "\n", "                ", "raise", "e", "\n", "raise", "error", ".", "Error", "(", "\"Gibson initialization Error: port {} is in use\"", ".", "format", "(", "port", ")", ")", "\n", "# Gym v0.10.5 compatibility", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.__init__": [[706, 708], ["env_modalities.CameraRobotEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "gpu_idx", ",", "scene_type", ",", "tracking_camera", ")", ":", "\n", "        ", "CameraRobotEnv", ".", "__init__", "(", "self", ",", "config", ",", "gpu_idx", ",", "scene_type", ",", "tracking_camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.robot_introduce": [[709, 712], ["env_modalities.CameraRobotEnv.robot_introduce", "env_modalities.SemanticRobotEnv.setup_semantic_parser"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.robot_introduce", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.setup_semantic_parser"], ["", "def", "robot_introduce", "(", "self", ",", "robot", ")", ":", "\n", "        ", "CameraRobotEnv", ".", "robot_introduce", "(", "self", ",", "robot", ")", "\n", "self", ".", "setup_semantic_parser", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.setup_semantic_parser": [[713, 761], ["os.join", "os.join", "os.join", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "subprocess.Popen", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "os.chdir", "zmq.Context", "env_modalities.SemanticRobotEnv._context_sem.socket", "env_modalities.SemanticRobotEnv.semantic_client.connect", "env_modalities.SemanticRobotEnv.semantic_client.send_string", "env_modalities.SemanticRobotEnv.semantic_client.recv", "numpy.frombuffer().reshape", "print", "env_modalities.SemanticRobotEnv.r_camera_mul.terminate", "print", "os.dirname", "os.dirname", "os.dirname", "shlex.split", "get_segmentId_by_name_MP3D", "numpy.array", "env_modalities.SemanticRobotEnv.r_camera_dep.terminate", "env_modalities.SemanticRobotEnv.r_camera_norm.terminate", "env_modalities.SemanticRobotEnv.r_camera_semt.terminate", "print", "os.abspath", "os.abspath", "os.abspath", "numpy.frombuffer", "os.join", "os.join", "os.join", "get_segmentId_by_name_2D3DS", "print", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate"], ["", "def", "setup_semantic_parser", "(", "self", ")", ":", "\n", "#assert('semantics' in self.config[\"output\"])", "\n", "        ", "def", "semantic_excepthook", "(", "exctype", ",", "value", ",", "tb", ")", ":", "\n", "            ", "print", "(", "\"killing\"", ",", "self", ".", "r_camera_mul", ")", "\n", "self", ".", "r_camera_mul", ".", "terminate", "(", ")", "\n", "if", "self", ".", "r_camera_dep", ":", "\n", "                ", "self", ".", "r_camera_dep", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_normal", ":", "\n", "                ", "self", ".", "r_camera_norm", ".", "terminate", "(", ")", "\n", "", "if", "self", ".", "_require_semantics", ":", "\n", "                ", "self", ".", "r_camera_semt", ".", "terminate", "(", ")", "\n", "", "while", "tb", ":", "\n", "                ", "if", "exctype", "==", "KeyboardInterrupt", ":", "\n", "                    ", "print", "(", "\"Exiting Gibson...\"", ")", "\n", "return", "\n", "", "filename", "=", "tb", ".", "tb_frame", ".", "f_code", ".", "co_filename", "\n", "name", "=", "tb", ".", "tb_frame", ".", "f_code", ".", "co_name", "\n", "lineno", "=", "tb", ".", "tb_lineno", "\n", "print", "(", "'   File \"%.500s\", line %d, in %.500s'", "%", "(", "filename", ",", "lineno", ",", "name", ")", ")", "\n", "tb", "=", "tb", ".", "tb_next", "\n", "", "print", "(", "' %s: %s'", "%", "(", "exctype", ".", "__name__", ",", "value", ")", ")", "\n", "\n", "", "sys", ".", "excepthook", "=", "semantic_excepthook", "\n", "dr_path", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "abspath", "(", "gibson", ".", "__file__", ")", ")", ",", "'core'", ",", "'channels'", ",", "'depth_render'", ")", "\n", "cur_path", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "dr_path", ")", "\n", "load_semantic", "=", "\"./semantic --modelpath {} -r {} \"", ".", "format", "(", "self", ".", "model_path", ",", "self", ".", "_semantic_source", ")", "\n", "self", ".", "semantic_server", "=", "subprocess", ".", "Popen", "(", "shlex", ".", "split", "(", "load_semantic", ")", ",", "shell", "=", "False", ")", "\n", "os", ".", "chdir", "(", "cur_path", ")", "\n", "\n", "self", ".", "_context_sem", "=", "zmq", ".", "Context", "(", ")", "\n", "self", ".", "semantic_client", "=", "self", ".", "_context_sem", ".", "socket", "(", "zmq", ".", "REQ", ")", "\n", "self", ".", "semantic_client", ".", "connect", "(", "\"tcp://localhost:{}\"", ".", "format", "(", "5055", ")", ")", "\n", "\n", "self", ".", "semantic_client", ".", "send_string", "(", "\"Ready\"", ")", "\n", "semantic_msg", "=", "self", ".", "semantic_client", ".", "recv", "(", ")", "\n", "self", ".", "semantic_pos", "=", "np", ".", "frombuffer", "(", "semantic_msg", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "if", "self", ".", "_semantic_source", "==", "2", ":", "\n", "            ", "_", ",", "semantic_ids", ",", "_", "=", "get_segmentId_by_name_MP3D", "(", "osp", ".", "join", "(", "self", ".", "model_path", ",", "\"semantic.house\"", ")", ",", "\"chair\"", ")", "\n", "", "elif", "self", ".", "_semantic_source", "==", "1", ":", "\n", "            ", "_", ",", "semantic_ids", ",", "_", "=", "get_segmentId_by_name_2D3DS", "(", "osp", ".", "join", "(", "self", ".", "model_path", ",", "\"semantic.mtl\"", ")", ",", "osp", ".", "join", "(", "self", ".", "model_path", ",", "\"semantic.obj\"", ")", ",", "\"chair\"", ")", "\n", "\n", "", "self", ".", "semantic_pos", "=", "self", ".", "semantic_pos", "[", "semantic_ids", ",", ":", "]", "\n", "\n", "debugmode", "=", "0", "\n", "if", "debugmode", ":", "\n", "            ", "self", ".", "semantic_pos", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0.2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.dist_to_semantic_pos": [[762, 776], ["env_modalities.SemanticRobotEnv.robot.get_position", "env_modalities.SemanticRobotEnv.robot.get_orientation", "numpy.sqrt", "transforms3d.quaternions.quat2mat().dot", "numpy.arccos", "numpy.sum", "numpy.array", "diff_unit.dot", "transforms3d.quaternions.quat2mat"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_position", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.robot_locomotors.WalkerBase.get_orientation"], ["", "", "def", "dist_to_semantic_pos", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "robot", ".", "get_position", "(", ")", "\n", "x", ",", "y", ",", "z", ",", "w", "=", "self", ".", "robot", ".", "get_orientation", "(", ")", "\n", "#print(self.semantic_pos)", "\n", "#print(pos, orn)", "\n", "\n", "diff_pos", "=", "self", ".", "semantic_pos", "-", "pos", "\n", "dist_to_robot", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "diff_pos", "*", "diff_pos", ",", "axis", "=", "1", ")", ")", "\n", "diff_unit", "=", "(", "diff_pos", ".", "T", "/", "dist_to_robot", ")", ".", "T", "\n", "\n", "#TODO: (hzyjerry) orientation is still buggy", "\n", "orn_unit", "=", "quat2mat", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", ".", "dot", "(", "np", ".", "array", "(", "[", "-", "1", ",", "0", ",", "0", "]", ")", ")", "\n", "orn_to_robot", "=", "np", ".", "arccos", "(", "diff_unit", ".", "dot", "(", "orn_unit", ")", ")", "\n", "return", "dist_to_robot", ",", "orn_to_robot", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.get_close_semantic_pos": [[777, 785], ["env_modalities.SemanticRobotEnv.dist_to_semantic_pos", "range"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.dist_to_semantic_pos"], ["", "def", "get_close_semantic_pos", "(", "self", ",", "dist_max", "=", "1.0", ",", "orn_max", "=", "np", ".", "pi", "/", "5", ")", ":", "\n", "        ", "'''Find the index of semantic positions close to the agent, within max\n        distance and max orientation\n        Return: list of index of the semantic positions, corresponding the index\n            in self.semantic_pos\n        '''", "\n", "dists", ",", "orns", "=", "self", ".", "dist_to_semantic_pos", "(", ")", "\n", "return", "[", "i", "for", "i", "in", "range", "(", "self", ".", "semantic_pos", ".", "shape", "[", "0", "]", ")", "if", "dists", "[", "i", "]", "<", "dist_max", "and", "orns", "[", "i", "]", "<", "orn_max", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_modalities.SemanticRobotEnv.step": [[786, 789], ["CameraRobotEnv.step"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step"], ["", "def", "step", "(", "self", ",", "action", ",", "tag", "=", "True", ")", ":", "\n", "#self.close_semantic_ids = self.get_close_semantic_pos()", "\n", "        ", "return", "CameraRobotEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.__init__": [[32, 60], ["env_bases.Camera", "env_bases.BaseEnv._seed", "pybullet.connect", "pybullet.configureDebugVisualizer", "pybullet.connect", "pybullet.connect"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._seed"], ["def", "__init__", "(", "self", ",", "config", ",", "scene_type", ",", "tracking_camera", ")", ":", "\n", "## Properties already instantiated from SensorEnv/CameraEnv", "\n", "#   @self.robot", "\n", "        ", "self", ".", "gui", "=", "config", "[", "\"mode\"", "]", "==", "\"gui\"", "\n", "self", ".", "model_id", "=", "config", "[", "\"model_id\"", "]", "\n", "self", ".", "timestep", "=", "0.1", "#internal gibson", "\n", "self", ".", "frame_skip", "=", "1", "#internal gibson", "\n", "self", ".", "resolution", "=", "config", "[", "\"resolution\"", "]", "\n", "self", ".", "tracking_camera", "=", "tracking_camera", "\n", "self", ".", "robot", "=", "None", "\n", "# initial_orn, initial_pos = config[\"initial_orn\"], self.config[\"initial_pos\"]", "\n", "\n", "if", "config", "[", "\"display_ui\"", "]", ":", "\n", "#self.physicsClientId = p.connect(p.DIRECT)", "\n", "            ", "self", ".", "physicsClientId", "=", "p", ".", "connect", "(", "p", ".", "GUI", ",", "\"--opengl2\"", ")", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_GUI", ",", "0", ")", "\n", "", "elif", "(", "self", ".", "gui", ")", ":", "\n", "            ", "self", ".", "physicsClientId", "=", "p", ".", "connect", "(", "p", ".", "GUI", ",", "\"--opengl2\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "physicsClientId", "=", "p", ".", "connect", "(", "p", ".", "DIRECT", ")", "\n", "\n", "", "self", ".", "camera", "=", "Camera", "(", ")", "\n", "self", ".", "_seed", "(", ")", "\n", "self", ".", "_cam_dist", "=", "3", "\n", "self", ".", "_cam_yaw", "=", "0", "\n", "self", ".", "_cam_pitch", "=", "-", "30", "\n", "self", ".", "scene_type", "=", "scene_type", "\n", "self", ".", "scene", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._close": [[192, 196], ["pybullet.disconnect"], "methods", ["None"], ["", "def", "_close", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "physicsClientId", ">=", "0", ")", ":", "\n", "            ", "p", ".", "disconnect", "(", "self", ".", "physicsClientId", ")", "\n", "self", ".", "physicsClientId", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.parse_config": [[64, 68], ["open", "yaml.load"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open"], ["", "def", "parse_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "with", "open", "(", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config_data", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "return", "config_data", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_scene": [[69, 79], ["env_bases.BaseEnv.create_single_player_stadium_scene", "env_bases.BaseEnv.create_single_player_building_scene", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_single_player_stadium_scene", "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_single_player_building_scene"], ["", "def", "create_scene", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scene", "is", "not", "None", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "scene_type", "==", "\"stadium\"", ":", "\n", "            ", "self", ".", "scene", "=", "self", ".", "create_single_player_stadium_scene", "(", ")", "\n", "", "elif", "self", ".", "scene_type", "==", "\"building\"", ":", "\n", "            ", "self", ".", "scene", "=", "self", ".", "create_single_player_building_scene", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AssertionError", "(", ")", "\n", "", "self", ".", "robot", ".", "scene", "=", "self", ".", "scene", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_single_player_building_scene": [[80, 82], ["gibson.core.physics.scene_building.SinglePlayerBuildingScene"], "methods", ["None"], ["", "def", "create_single_player_building_scene", "(", "self", ")", ":", "\n", "        ", "return", "SinglePlayerBuildingScene", "(", "self", ".", "robot", ",", "model_id", "=", "self", ".", "model_id", ",", "gravity", "=", "9.8", ",", "timestep", "=", "self", ".", "timestep", ",", "frame_skip", "=", "self", ".", "frame_skip", ",", "env", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.create_single_player_stadium_scene": [[83, 85], ["gibson.core.physics.scene_stadium.SinglePlayerStadiumScene"], "methods", ["None"], ["", "def", "create_single_player_stadium_scene", "(", "self", ")", ":", "\n", "        ", "return", "SinglePlayerStadiumScene", "(", "self", ".", "robot", ",", "gravity", "=", "9.8", ",", "timestep", "=", "self", ".", "timestep", ",", "frame_skip", "=", "self", ".", "frame_skip", ",", "env", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.configure": [[87, 89], ["None"], "methods", ["None"], ["", "def", "configure", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "robot", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._seed": [[90, 93], ["gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random", "gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "_seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "gym", ".", "utils", ".", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._reset": [[94, 109], ["pybullet.configureDebugVisualizer", "pybullet.configureDebugVisualizer", "pybullet.configureDebugVisualizer", "pybullet.configureDebugVisualizer", "pybullet.configureDebugVisualizer", "env_bases.BaseEnv.robot.reset", "env_bases.BaseEnv.scene.episode_restart"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "robot", "is", "not", "None", ",", "\"Pleases introduce robot to environment before resetting.\"", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_GUI", ",", "0", ")", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_KEYBOARD_SHORTCUTS", ",", "0", ")", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_MOUSE_PICKING", ",", "1", ")", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_SHADOWS", ",", "1", ")", "\n", "p", ".", "configureDebugVisualizer", "(", "p", ".", "COV_ENABLE_RENDERING", ",", "1", ")", "\n", "\n", "self", ".", "frame", "=", "0", "\n", "self", ".", "done", "=", "0", "\n", "self", ".", "reward", "=", "0", "\n", "dump", "=", "0", "\n", "state", "=", "self", ".", "robot", ".", "reset", "(", ")", "\n", "self", ".", "scene", ".", "episode_restart", "(", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv._render": [[110, 135], ["hasattr", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "pybullet.getCameraImage", "numpy.array().reshape", "hasattr", "numpy.array", "float"], "methods", ["None"], ["", "def", "_render", "(", "self", ",", "mode", ",", "close", ")", ":", "\n", "        ", "base_pos", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "if", "(", "hasattr", "(", "self", ",", "'robot'", ")", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "self", ".", "robot", ",", "'body_xyz'", ")", ")", ":", "\n", "                ", "base_pos", "=", "self", ".", "robot", ".", "body_xyz", "\n", "\n", "", "", "view_matrix", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "\n", "cameraTargetPosition", "=", "base_pos", ",", "\n", "distance", "=", "self", ".", "_cam_dist", ",", "\n", "yaw", "=", "self", ".", "_cam_yaw", ",", "\n", "pitch", "=", "self", ".", "_cam_pitch", ",", "\n", "roll", "=", "0", ",", "\n", "upAxisIndex", "=", "2", ")", "\n", "proj_matrix", "=", "p", ".", "computeProjectionMatrixFOV", "(", "\n", "fov", "=", "60", ",", "aspect", "=", "float", "(", "self", ".", "_render_width", ")", "/", "self", ".", "_render_height", ",", "\n", "nearVal", "=", "0.1", ",", "farVal", "=", "100.0", ")", "\n", "(", "_", ",", "_", ",", "px", ",", "_", ",", "_", ")", "=", "p", ".", "getCameraImage", "(", "\n", "width", "=", "self", ".", "_render_width", ",", "height", "=", "self", ".", "_render_height", ",", "viewMatrix", "=", "view_matrix", ",", "\n", "projectionMatrix", "=", "proj_matrix", ",", "\n", "renderer", "=", "p", ".", "ER_BULLET_HARDWARE_OPENGL", "\n", ")", "\n", "rgb_array", "=", "np", ".", "array", "(", "px", ")", ".", "reshape", "(", "(", "self", ".", "_render_width", ",", "self", ".", "_render_height", ",", "-", "1", ")", ")", "\n", "if", "close", ":", "return", "None", "\n", "rgb_array", "=", "rgb_array", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "return", "rgb_array", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.render_physics": [[136, 158], ["pybullet.getBasePositionAndOrientation", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "numpy.array().reshape", "gibson.core.render.profiler.Profiler", "pybullet.getCameraImage", "numpy.array", "float"], "methods", ["None"], ["", "def", "render_physics", "(", "self", ")", ":", "\n", "        ", "robot_pos", ",", "_", "=", "p", ".", "getBasePositionAndOrientation", "(", "self", ".", "robot_tracking_id", ")", "\n", "\n", "view_matrix", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "\n", "cameraTargetPosition", "=", "robot_pos", ",", "\n", "distance", "=", "self", ".", "tracking_camera", "[", "\"distance\"", "]", ",", "\n", "yaw", "=", "self", ".", "tracking_camera", "[", "\"yaw\"", "]", ",", "\n", "pitch", "=", "self", ".", "tracking_camera", "[", "\"pitch\"", "]", ",", "\n", "roll", "=", "0", ",", "\n", "upAxisIndex", "=", "2", ")", "\n", "proj_matrix", "=", "p", ".", "computeProjectionMatrixFOV", "(", "\n", "fov", "=", "60", ",", "aspect", "=", "float", "(", "self", ".", "_render_width", ")", "/", "self", ".", "_render_height", ",", "\n", "nearVal", "=", "0.1", ",", "farVal", "=", "100.0", ")", "\n", "with", "Profiler", "(", "\"render physics: Get camera image\"", ")", ":", "\n", "            ", "(", "_", ",", "_", ",", "px", ",", "_", ",", "_", ")", "=", "p", ".", "getCameraImage", "(", "\n", "width", "=", "self", ".", "_render_width", ",", "height", "=", "self", ".", "_render_height", ",", "viewMatrix", "=", "view_matrix", ",", "\n", "projectionMatrix", "=", "proj_matrix", ",", "\n", "renderer", "=", "p", ".", "ER_TINY_RENDERER", "\n", ")", "\n", "", "rgb_array", "=", "np", ".", "array", "(", "px", ")", ".", "reshape", "(", "(", "self", ".", "_render_width", ",", "self", ".", "_render_height", ",", "-", "1", ")", ")", "\n", "rgb_array", "=", "rgb_array", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "return", "rgb_array", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.render_map": [[160, 185], ["hasattr", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "pybullet.getCameraImage", "numpy.array().reshape", "hasattr", "numpy.array", "float"], "methods", ["None"], ["", "def", "render_map", "(", "self", ")", ":", "\n", "        ", "base_pos", "=", "[", "0", ",", "0", ",", "-", "3", "]", "\n", "if", "(", "hasattr", "(", "self", ",", "'robot'", ")", ")", ":", "\n", "            ", "if", "(", "hasattr", "(", "self", ".", "robot", ",", "'body_xyz'", ")", ")", ":", "\n", "                ", "base_pos", "[", "0", "]", "=", "self", ".", "robot", ".", "body_xyz", "[", "0", "]", "\n", "base_pos", "[", "1", "]", "=", "self", ".", "robot", ".", "body_xyz", "[", "1", "]", "\n", "\n", "", "", "view_matrix", "=", "p", ".", "computeViewMatrixFromYawPitchRoll", "(", "\n", "cameraTargetPosition", "=", "base_pos", ",", "\n", "distance", "=", "35", ",", "\n", "yaw", "=", "0", ",", "\n", "pitch", "=", "-", "89", ",", "\n", "roll", "=", "0", ",", "\n", "upAxisIndex", "=", "2", ")", "\n", "proj_matrix", "=", "p", ".", "computeProjectionMatrixFOV", "(", "\n", "fov", "=", "60", ",", "aspect", "=", "float", "(", "self", ".", "_render_width", ")", "/", "self", ".", "_render_height", ",", "\n", "nearVal", "=", "0.1", ",", "farVal", "=", "100.0", ")", "\n", "(", "_", ",", "_", ",", "px", ",", "_", ",", "_", ")", "=", "p", ".", "getCameraImage", "(", "\n", "width", "=", "self", ".", "_render_width", ",", "height", "=", "self", ".", "_render_height", ",", "viewMatrix", "=", "view_matrix", ",", "\n", "projectionMatrix", "=", "proj_matrix", ",", "\n", "renderer", "=", "p", ".", "ER_BULLET_HARDWARE_OPENGL", "\n", ")", "\n", "rgb_array", "=", "np", ".", "array", "(", "px", ")", ".", "reshape", "(", "(", "self", ".", "_render_width", ",", "self", ".", "_render_height", ",", "-", "1", ")", ")", "\n", "rgb_array", "=", "rgb_array", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "return", "rgb_array", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.get_action_dim": [[186, 188], ["len"], "methods", ["None"], ["", "def", "get_action_dim", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "robot", ".", "ordered_joints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.get_observation_dim": [[189, 191], ["None"], "methods", ["None"], ["", "def", "get_observation_dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.BaseEnv.set_window": [[197, 211], ["os.system", "os.system", "int", "int", "int", "int"], "methods", ["None"], ["", "", "def", "set_window", "(", "self", ",", "posX", ",", "posY", ",", "sizeX", ",", "sizeY", ")", ":", "\n", "        ", "values", "=", "{", "\n", "'name'", ":", "\"Robot\"", ",", "\n", "'gravity'", ":", "0", ",", "\n", "'posX'", ":", "int", "(", "posX", ")", ",", "\n", "'posY'", ":", "int", "(", "posY", ")", ",", "\n", "'sizeX'", ":", "int", "(", "sizeX", ")", ",", "\n", "'sizeY'", ":", "int", "(", "sizeY", ")", "\n", "}", "\n", "cmd", "=", "'wmctrl -r \\\"Bullet Physics\\\" -e {gravity},{posX},{posY},{sizeX},{sizeY}'", ".", "format", "(", "**", "values", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n", "cmd", "=", "\"xdotool search --name \\\"Bullet Physics\\\" set_window --name \\\"Robot's world\\\"\"", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.Camera.__init__": [[214, 216], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.GibsonEnv.env_bases.Camera.move_and_look_at": [[217, 221], ["None"], "methods", ["None"], ["", "def", "move_and_look_at", "(", "self", ",", "i", ",", "j", ",", "k", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "lookat", "=", "[", "x", ",", "y", ",", "z", "]", "\n", "distance", "=", "10", "\n", "yaw", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tfrecords.tfrecords_env.TfrecordsEnv.__init__": [[12, 41], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.box.Box", "gcg.envs.spaces.discrete.Discrete", "gcg.envs.env_spec.EnvSpec", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "_yaw_limits", "=", "params", "[", "'yaw_limits'", "]", "\n", "self", ".", "_obs_shape", "=", "params", "[", "'obs_shape'", "]", "\n", "self", ".", "_horizon", "=", "params", "[", "'horizon'", "]", "\n", "\n", "self", ".", "action_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "action_selection_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "observation_vec_spec", "=", "OrderedDict", "(", ")", "\n", "self", ".", "goal_spec", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "action_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "-", "180", ",", "high", "=", "180", ")", "\n", "\n", "self", ".", "action_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "\n", "self", ".", "action_selection_spec", "[", "'yaw'", "]", "=", "Box", "(", "low", "=", "self", ".", "_yaw_limits", "[", "0", "]", ",", "high", "=", "self", ".", "_yaw_limits", "[", "1", "]", ")", "\n", "\n", "self", ".", "action_selection_space", "=", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "low", "[", "0", "]", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "self", ".", "action_selection_spec", "[", "'yaw'", "]", ".", "high", "[", "0", "]", "]", ")", ")", "\n", "\n", "self", ".", "observation_im_space", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "self", ".", "_obs_shape", ")", "\n", "self", ".", "observation_vec_spec", "[", "'coll'", "]", "=", "Discrete", "(", "1", ")", "\n", "self", ".", "spec", "=", "EnvSpec", "(", "\n", "observation_im_space", "=", "self", ".", "observation_im_space", ",", "\n", "action_space", "=", "self", ".", "action_space", ",", "\n", "action_selection_space", "=", "self", ".", "action_selection_space", ",", "\n", "observation_vec_spec", "=", "self", ".", "observation_vec_spec", ",", "\n", "action_spec", "=", "self", ".", "action_spec", ",", "\n", "action_selection_spec", "=", "self", ".", "action_selection_spec", ",", "\n", "goal_spec", "=", "self", ".", "goal_spec", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tfrecords.tfrecords_env.TfrecordsEnv.horizon": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "horizon", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_horizon", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tfrecords.tfrecords_env.TfrecordsEnv.step": [[47, 54], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_observation", "=", "None", "\n", "goal", "=", "None", "\n", "reward", "=", "None", "\n", "done", "=", "None", "\n", "env_info", "=", "None", "\n", "return", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tfrecords.tfrecords_env.TfrecordsEnv.reset": [[55, 59], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "None", "\n", "goal", "=", "None", "\n", "return", "observation", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tfrecords.tfrecords_env.TfrecordsEnv.log": [[60, 62], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.__init__": [[44, 79], ["bool", "rospy.Subscriber", "list", "list", "list", "numpy.prod", "len", "len", "len", "zero.CrazyflieZeroPolicy._env_spec.observation_vec_spec.keys", "zero.CrazyflieZeroPolicy._env_spec.action_spec.keys", "zero.CrazyflieZeroPolicy._env_spec.goal_spec.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "#used to get joystick input", "\n", "# rospy.init_node(\"CrazyflieTeleopPolicy\", anonymous=True)", "\n", "\n", "# self._outputs = kwargs['outputs'] ", "\n", "        ", "self", ".", "_joy_topic", "=", "kwargs", "[", "'joy_topic'", "]", "\n", "\n", "self", ".", "curr_joy", "=", "None", "\n", "self", ".", "cmd", "=", "-", "1", "# -1 : NONE", "\n", "\n", "self", ".", "is_flow_motion", "=", "bool", "(", "kwargs", "[", "'flow_motion'", "]", ")", "\n", "\n", "rospy", ".", "Subscriber", "(", "self", ".", "_joy_topic", ",", "Joy", ",", "self", ".", "joy_cb", ")", "\n", "# self._rew_fn = kwargs['rew_fn']", "\n", "\n", "self", ".", "_N", "=", "kwargs", "[", "'N'", "]", "\n", "self", ".", "_gamma", "=", "kwargs", "[", "'gamma'", "]", "\n", "\n", "### environment", "\n", "self", ".", "_env_spec", "=", "kwargs", "[", "'env_spec'", "]", "\n", "self", ".", "_obs_vec_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "observation_vec_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_action_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "action_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_goal_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "goal_spec", ".", "keys", "(", ")", ")", "\n", "# self._output_keys = sorted([output['name'] for output in self._outputs])", "\n", "self", ".", "_obs_im_shape", "=", "self", ".", "_env_spec", ".", "observation_im_space", ".", "shape", "\n", "\n", "\n", "self", ".", "_obs_im_dim", "=", "np", ".", "prod", "(", "self", ".", "_obs_im_shape", ")", "\n", "self", ".", "_obs_vec_dim", "=", "len", "(", "self", ".", "_obs_vec_keys", ")", "\n", "self", ".", "_action_dim", "=", "len", "(", "self", ".", "_action_keys", ")", "\n", "self", ".", "_goal_dim", "=", "len", "(", "self", ".", "_goal_keys", ")", "\n", "\n", "# self._output_dim = len(self._output_keys)", "\n", "self", ".", "prevSpikeButton", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.dead_band": [[84, 89], ["range", "len", "len", "abs"], "methods", ["None"], ["", "def", "dead_band", "(", "self", ",", "signal", ")", ":", "\n", "        ", "new_axes", "=", "[", "0", "]", "*", "len", "(", "signal", ".", "axes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "signal", ".", "axes", ")", ")", ":", "\n", "            ", "new_axes", "[", "i", "]", "=", "signal", ".", "axes", "[", "i", "]", "if", "abs", "(", "signal", ".", "axes", "[", "i", "]", ")", ">", "TOLERANCE", "else", "0", "\n", "", "signal", ".", "axes", "=", "new_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.joy_cb": [[90, 119], ["zero.CrazyflieZeroPolicy.dead_band"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.dead_band"], ["", "def", "joy_cb", "(", "self", ",", "msg", ")", ":", "\n", "# if self.curr_joy:", "\n", "#     if msg.buttons[ESTOP_CHANNEL] and not self.curr_joy.buttons[ESTOP_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.ESTOP", "\n", "#         print(\"CALLING ESTOP\")", "\n", "#     elif msg.buttons[TAKEOFF_CHANNEL] and not self.curr_joy.buttons[TAKEOFF_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.TAKEOFF", "\n", "#         print(\"CALLING TAKEOFF\")", "\n", "#     elif msg.buttons[LAND_CHANNEL] and not self.curr_joy.buttons[LAND_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.LAND", "\n", "#         print(\"CALLING LAND\")", "\n", "# else:", "\n", "#     if msg.buttons[ESTOP_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.ESTOP", "\n", "#         print(\"CALLING ESTOP\")", "\n", "#     elif msg.buttons[TAKEOFF_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.TAKEOFF", "\n", "#         print(\"CALLING TAKEOFF\")", "\n", "#     elif msg.buttons[LAND_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.LAND", "\n", "#         print(\"CALLING LAND\")", "\n", "        ", "self", ".", "dead_band", "(", "msg", ")", "\n", "self", ".", "curr_joy", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.N": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.gamma": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gamma", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.obs_history_len": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obs_history_len", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.session": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "session", "(", "self", ")", ":", "\n", "        ", "return", "\n", "################", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.get_action": [[146, 157], ["crazyflie.msg.CFMotion", "print", "dict"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "step", ",", "current_episode_step", ",", "observation", ",", "goal", ",", "explore", ")", ":", "\n", "# chosen_actions, chosen_values, action_infos = self.get_actions([step], [current_episode_step] [observation],", "\n", "#                                                               [goal], explore=explore)", "\n", "# return chosen_actions[0], chosen_values[0], action_infos[0]", "\n", "        ", "motion", "=", "CFMotion", "(", ")", "\n", "\n", "motion", ".", "yaw", "=", "0", "\n", "\n", "# return motion", "\n", "print", "(", "\"TELEOP POLICY got action:\"", ",", "[", "motion", ".", "x", ",", "motion", ".", "y", ",", "motion", ".", "yaw", ",", "motion", ".", "dz", "]", ")", "\n", "return", "[", "motion", ".", "yaw", "]", ",", "None", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.get_actions": [[158, 167], ["zero.CrazyflieZeroPolicy.get_action", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_action"], ["", "def", "get_actions", "(", "self", ",", "steps", ",", "current_episode_steps", ",", "observations", ",", "goals", ",", "explore", ")", ":", "\n", "        ", "ds", "=", "[", "{", "}", "for", "_", "in", "steps", "]", "\n", "observations_im", ",", "observations_vec", "=", "observations", "\n", "\n", "values", "=", "[", "0", "for", "_", "in", "steps", "]", "\n", "joy_action", "=", "self", ".", "get_action", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "#args don't matter", "\n", "actions", "=", "[", "joy_action", "]", "*", "len", "(", "steps", ")", "\n", "\n", "return", "actions", ",", "values", ",", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.reset_get_action": [[168, 171], ["None"], "methods", ["None"], ["", "def", "reset_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.terminate": [[172, 175], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "curr_joy", "=", "None", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.get_model_outputs": [[180, 182], ["None"], "methods", ["None"], ["", "def", "get_model_outputs", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.save": [[192, 202], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ")", ":", "\n", "# if train:", "\n", "#     savers_keys = [k for k in self._tf_dict['savers_dict'].keys() if 'inference' not in k]", "\n", "# else:", "\n", "#     savers_keys = ['inference']", "\n", "\n", "# for saver_name in savers_keys:", "\n", "#     saver = self._tf_dict['savers_dict'][saver_name]", "\n", "#     saver.save(self._tf_dict['sess'], self._saver_ckpt_name(ckpt_name, saver_name), write_meta_graph=False)", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.restore": [[203, 213], ["None"], "methods", ["None"], ["", "def", "restore", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ",", "train_restore", "=", "(", "'train'", ",", ")", ")", ":", "\n", "        ", "\"\"\"\n        :param: train_restore: 'train', 'image', 'observation', 'action', 'rnn', 'output\n        # \"\"\"", "\n", "# savers_keys = train_restore if train else ['inference']", "\n", "\n", "# for saver_name in savers_keys:", "\n", "#     saver = self._tf_dict['savers_dict'][saver_name]", "\n", "#     saver.restore(self._tf_dict['sess'], self._saver_ckpt_name(ckpt_name, saver_name))", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.zero.CrazyflieZeroPolicy.log": [[218, 227], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "# for k in sorted(self._log_stats.keys()):", "\n", "#     if k == 'Depth':", "\n", "#         logger.record_tabular(k+'Mean', np.mean(self._log_stats[k]))", "\n", "#         logger.record_tabular(k+'Std', np.std(self._log_stats[k]))", "\n", "#     else:", "\n", "#         logger.record_tabular(k, np.mean(self._log_stats[k]))", "\n", "# self._log_stats.clear()", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.__init__": [[19, 93], ["list", "list", "list", "sorted", "numpy.prod", "len", "len", "len", "kwargs.get", "gcg.misc.schedules.PiecewiseSchedule", "isinstance", "dict", "gcg_policy.GCGPolicy._graph_setup", "collections.defaultdict", "gcg_policy.GCGPolicy.update_target", "gcg_policy.GCGPolicy._env_spec.observation_vec_spec.keys", "gcg_policy.GCGPolicy._env_spec.action_spec.keys", "gcg_policy.GCGPolicy._env_spec.goal_spec.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.update_target"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "### environment", "\n", "        ", "self", ".", "_env_spec", "=", "kwargs", "[", "'env_spec'", "]", "\n", "self", ".", "_obs_vec_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "observation_vec_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_action_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "action_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_goal_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "goal_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_output_keys", "=", "sorted", "(", "[", "output", "[", "'name'", "]", "for", "output", "in", "kwargs", "[", "'outputs'", "]", "]", ")", "\n", "self", ".", "_obs_im_shape", "=", "self", ".", "_env_spec", ".", "observation_im_space", ".", "shape", "\n", "self", ".", "_obs_im_num_channels", "=", "self", ".", "_obs_im_shape", "[", "2", "]", "\n", "self", ".", "_obs_im_dim", "=", "np", ".", "prod", "(", "self", ".", "_obs_im_shape", ")", "\n", "self", ".", "_obs_vec_dim", "=", "len", "(", "self", ".", "_obs_vec_keys", ")", "\n", "self", ".", "_action_dim", "=", "len", "(", "self", ".", "_action_keys", ")", "\n", "self", ".", "_goal_dim", "=", "len", "(", "self", ".", "_goal_keys", ")", "\n", "\n", "### model", "\n", "self", ".", "_outputs", "=", "kwargs", "[", "'outputs'", "]", "\n", "self", ".", "_action_selection_value", "=", "kwargs", "[", "'action_selection_value'", "]", "\n", "self", ".", "_goals_to_input", "=", "kwargs", "[", "'goals_to_input'", "]", "\n", "for", "goal", "in", "self", ".", "_goals_to_input", ":", "\n", "            ", "assert", "goal", "in", "self", ".", "_goal_keys", ",", "'{0} goal is not in goal_keys'", ".", "format", "(", "goal", ")", "\n", "### architecture", "\n", "", "self", ".", "_inference_only", "=", "kwargs", ".", "get", "(", "'inference_only'", ",", "False", ")", "\n", "self", ".", "_image_graph", "=", "kwargs", "[", "'image_graph'", "]", "\n", "self", ".", "_observation_graph", "=", "kwargs", "[", "'observation_graph'", "]", "\n", "self", ".", "_action_graph", "=", "kwargs", "[", "'action_graph'", "]", "\n", "self", ".", "_rnn_graph", "=", "kwargs", "[", "'rnn_graph'", "]", "\n", "self", ".", "_output_graph", "=", "kwargs", "[", "'output_graph'", "]", "\n", "### scopes", "\n", "self", ".", "_gcg_scope", "=", "'gcg_scope'", "\n", "self", ".", "_policy_scope", "=", "'policy_scope'", "\n", "self", ".", "_target_scope", "=", "'target_scope'", "\n", "self", ".", "_image_scope", "=", "'image_scope'", "\n", "self", ".", "_observation_scope", "=", "'observation_scope'", "\n", "self", ".", "_action_scope", "=", "'action_scope'", "\n", "self", ".", "_rnn_scope", "=", "'rnn_scope'", "\n", "self", ".", "_output_scope", "=", "'output_scope'", "\n", "\n", "### model horizons", "\n", "self", ".", "_N", "=", "kwargs", "[", "'N'", "]", "# number of returns to use (N-step)", "\n", "self", ".", "_H", "=", "kwargs", "[", "'H'", "]", "# action planning horizon for training", "\n", "self", ".", "_gamma", "=", "kwargs", "[", "'gamma'", "]", "# reward decay", "\n", "self", ".", "_obs_history_len", "=", "kwargs", "[", "'obs_history_len'", "]", "# how many previous observations to use", "\n", "\n", "### target network", "\n", "self", ".", "_use_target", "=", "kwargs", "[", "'use_target'", "]", "\n", "\n", "### training", "\n", "self", ".", "_optimizer", "=", "kwargs", "[", "'optimizer'", "]", "\n", "self", ".", "_weight_decay", "=", "kwargs", "[", "'weight_decay'", "]", "\n", "self", ".", "_lr_schedule", "=", "schedules", ".", "PiecewiseSchedule", "(", "**", "kwargs", "[", "'lr_schedule'", "]", ")", "\n", "self", ".", "_grad_clip_norm", "=", "kwargs", "[", "'grad_clip_norm'", "]", "\n", "self", ".", "_gpu_device", "=", "kwargs", "[", "'gpu_device'", "]", "\n", "self", ".", "_gpu_frac", "=", "kwargs", "[", "'gpu_frac'", "]", "\n", "\n", "### action selection and exploration", "\n", "assert", "(", "isinstance", "(", "self", ".", "_env_spec", ".", "action_selection_space", ",", "Box", ")", ")", "\n", "self", ".", "_get_action_test", "=", "kwargs", "[", "'get_action_test'", "]", "\n", "self", ".", "_get_action_target", "=", "kwargs", "[", "'get_action_target'", "]", "\n", "assert", "(", "self", ".", "_get_action_target", "[", "'type'", "]", "==", "'random'", ")", "\n", "self", ".", "_exploration_stragies", "=", "[", "es", "[", "'class'", "]", "(", "self", ".", "_env_spec", ",", "**", "es", "[", "'params'", "]", ")", "\n", "for", "es", "in", "kwargs", "[", "'exploration_strategies'", "]", "]", "\n", "\n", "### setup the model", "\n", "self", ".", "_seed", "=", "kwargs", "[", "'seed'", "]", "\n", "self", ".", "_tf_debug", "=", "dict", "(", ")", "\n", "self", ".", "_tf_dict", "=", "self", ".", "_graph_setup", "(", ")", "\n", "\n", "### logging", "\n", "self", ".", "_log_stats", "=", "defaultdict", "(", "list", ")", "\n", "\n", "assert", "(", "self", ".", "_N", ">=", "self", ".", "_H", ")", "\n", "\n", "### copy over target weights immediately (if there is a target)", "\n", "self", ".", "update_target", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.N": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.gamma": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gamma", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.session": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "session", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tf_dict", "[", "'sess'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.obs_history_len": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obs_history_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_obs_history_len", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_input_output_placeholders": [[118, 138], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_graph_input_output_placeholders", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'input_output_placeholders'", ")", ":", "\n", "### policy inputs", "\n", "            ", "tf_obs_im_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "None", ",", "self", ".", "_obs_history_len", ",", "self", ".", "_obs_im_dim", "]", ",", "name", "=", "'tf_obs_im_ph'", ")", "\n", "tf_obs_vec_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_obs_history_len", ",", "self", ".", "_obs_vec_dim", "]", ",", "name", "=", "'tf_obs_vec_ph'", ")", "\n", "tf_actions_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_H", ",", "self", ".", "_action_dim", "]", ",", "name", "=", "'tf_actions_ph'", ")", "\n", "tf_dones_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "[", "None", ",", "self", ".", "_N", "+", "1", "]", ",", "name", "=", "'tf_dones_ph'", ")", "\n", "tf_goals_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_goal_dim", "]", ",", "name", "=", "'tf_goals_ph'", ")", "\n", "### policy outputs", "\n", "tf_rewards_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_N", "]", ",", "name", "=", "'tf_rewards_ph'", ")", "\n", "tf_weights_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "'tf_weights_ph'", ")", "\n", "### target inputs", "\n", "tf_obs_im_target_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "None", ",", "self", ".", "_N", "+", "self", ".", "_obs_history_len", "-", "0", ",", "self", ".", "_obs_im_dim", "]", ",", "name", "=", "'tf_obs_im_target_ph'", ")", "\n", "tf_obs_vec_target_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_N", "+", "self", ".", "_obs_history_len", "-", "0", ",", "self", ".", "_obs_vec_dim", "]", ",", "name", "=", "'tf_obs_vec_target_ph'", ")", "\n", "tf_goals_target_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_N", "+", "1", ",", "self", ".", "_goal_dim", "]", ",", "name", "=", "'tf_goals_target_ph'", ")", "\n", "### episode timesteps", "\n", "tf_episode_timesteps_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'tf_episode_timesteps'", ")", "\n", "\n", "", "return", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_actions_ph", ",", "tf_dones_ph", ",", "tf_goals_ph", ",", "tf_rewards_ph", ",", "tf_weights_ph", ",", "tf_obs_im_target_ph", ",", "tf_obs_vec_target_ph", ",", "tf_goals_target_ph", ",", "tf_episode_timesteps_ph", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd": [[141, 195], ["tensorflow.name_scope", "tensorflow.name_scope", "copy.deepcopy", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "gcg.tf.networks.convnn", "tensorflow.flatten", "tensorflow.flatten", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg.tf.networks.fullyconnectednn", "gcg_policy.GCGPolicy._graph_whiten", "concat_list.append", "len", "gcg_policy.GCGPolicy._graph_whiten", "len", "tensorflow.concat", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "gcg_policy.GCGPolicy._goal_keys.index", "concat_list.append", "tf_obs_vec_ph.get_shape"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.convnn", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.fullyconnectednn", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_whiten", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_whiten"], ["", "def", "_graph_obs_to_lowd", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "is_training", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'obs_to_lowd'", ")", ":", "\n", "            ", "assert", "(", "self", ".", "_obs_im_dim", ">", "0", ")", "\n", "assert", "(", "self", ".", "_image_graph", "is", "not", "None", ")", "\n", "assert", "(", "tf_obs_im_ph", ".", "dtype", "==", "tf", ".", "uint8", ")", "\n", "image_graph", "=", "copy", ".", "deepcopy", "(", "self", ".", "_image_graph", ")", "\n", "\n", "### CNN", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_image_scope", ")", ":", "\n", "### whiten image", "\n", "                ", "tf_obs_im_whitened", "=", "(", "tf", ".", "cast", "(", "tf_obs_im_ph", ",", "tf", ".", "float32", ")", "-", "128.", ")", "/", "128.", "\n", "\n", "height", ",", "width", ",", "channels", "=", "self", ".", "_obs_im_shape", "\n", "layer", "=", "tf", ".", "reshape", "(", "tf_obs_im_whitened", ",", "[", "-", "1", ",", "self", ".", "_obs_history_len", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "# [batch_size, hist_len, height, width, channels]", "\n", "\n", "layer", "=", "tf", ".", "transpose", "(", "layer", ",", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", ")", "\n", "# [batch_size, height, width, channels, hist_len]", "\n", "\n", "layer", "=", "tf", ".", "reshape", "(", "layer", ",", "[", "-", "1", ",", "height", ",", "width", ",", "channels", "*", "self", ".", "_obs_history_len", "]", ")", "\n", "# [batch_size, height, width, channels * hist_len]", "\n", "\n", "# convert to NCHW because faster", "\n", "layer", "=", "tf", ".", "transpose", "(", "layer", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "# [batch_size, channels * hist_len, height, width]", "\n", "\n", "layer", "=", "networks", ".", "convnn", "(", "layer", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_step_tensor", "=", "self", ".", "global_step", ",", "\n", "data_format", "=", "'NCHW'", ",", "\n", "**", "image_graph", ")", "\n", "layer", "=", "layers", ".", "flatten", "(", "layer", ")", "\n", "# pass through cnn to get [batch_size, ??]", "\n", "\n", "### FCNN", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "_observation_scope", ")", ":", "\n", "                ", "concat_list", "=", "[", "layer", "]", "\n", "if", "tf_obs_vec_ph", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", ">", "0", ":", "\n", "                    ", "tf_obs_vec_whitened", "=", "self", ".", "_graph_whiten", "(", "tf_obs_vec_ph", ",", "self", ".", "_env_spec", ".", "observation_vec_spec", ")", "\n", "concat_list", ".", "append", "(", "tf", ".", "reshape", "(", "tf_obs_vec_whitened", ",", "[", "-", "1", ",", "self", ".", "_obs_history_len", "*", "self", ".", "_obs_vec_dim", "]", ")", ")", "\n", "", "if", "len", "(", "self", ".", "_goals_to_input", ")", ">", "0", ":", "\n", "                    ", "tf_goals_whitened", "=", "self", ".", "_graph_whiten", "(", "tf_goals_ph", ",", "self", ".", "_env_spec", ".", "goal_spec", ")", "\n", "for", "goal_key", "in", "self", ".", "_goals_to_input", ":", "\n", "                        ", "idx", "=", "self", ".", "_goal_keys", ".", "index", "(", "goal_key", ")", "\n", "concat_list", ".", "append", "(", "tf_goals_whitened", "[", ":", ",", "idx", ":", "idx", "+", "1", "]", ")", "\n", "", "", "if", "len", "(", "concat_list", ")", ">", "1", ":", "\n", "                    ", "layer", "=", "tf", ".", "concat", "(", "concat_list", ",", "axis", "=", "1", ")", "\n", "\n", "", "tf_obs_lowd", "=", "networks", ".", "fullyconnectednn", "(", "layer", ",", "\n", "**", "self", ".", "_observation_graph", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_step_tensor", "=", "self", ".", "global_step", ")", "\n", "\n", "", "", "return", "tf_obs_lowd", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_whiten": [[196, 213], ["spec.keys", "isinstance", "min", "numpy.array", "mean.append", "scale.append", "isinstance", "numpy.array", "mean.append", "scale.append", "float", "float"], "methods", ["None"], ["", "def", "_graph_whiten", "(", "self", ",", "tf_x", ",", "spec", ")", ":", "\n", "        ", "mean", "=", "[", "]", "\n", "scale", "=", "[", "]", "\n", "for", "k", "in", "spec", ".", "keys", "(", ")", ":", "\n", "            ", "spec_k", "=", "spec", "[", "k", "]", "\n", "if", "isinstance", "(", "spec_k", ",", "Box", ")", ":", "\n", "                ", "mean", ".", "append", "(", "0.5", "*", "(", "spec_k", ".", "high", "[", "0", "]", "+", "spec_k", ".", "low", "[", "0", "]", ")", ")", "\n", "scale", ".", "append", "(", "0.5", "*", "(", "spec_k", ".", "high", "[", "0", "]", "-", "spec_k", ".", "low", "[", "0", "]", ")", ")", "\n", "", "elif", "isinstance", "(", "spec_k", ",", "Discrete", ")", ":", "\n", "                ", "mean", ".", "append", "(", "float", "(", "spec_k", ".", "n", ")", "/", "2.", ")", "\n", "scale", ".", "append", "(", "float", "(", "spec_k", ".", "n", ")", "/", "2.", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "assert", "(", "min", "(", "scale", ")", ">", "1e-4", ")", "\n", "tf_x_whitened", "=", "(", "tf_x", "-", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", ")", "/", "np", ".", "array", "(", "scale", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "tf_x_whitened", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference": [[214, 276], ["gcg_policy.GCGPolicy._graph_calculate_value", "tensorflow.variable_scope", "tensorflow.variable_scope", "numpy.tile", "numpy.tile", "gcg_policy.GCGPolicy._action_graph.update", "gcg.tf.networks.fullyconnectednn", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg.tf.networks.rnn", "tensorflow.variable_scope", "tensorflow.variable_scope", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tf_actions_ph.get_shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "copy.copy", "copy.copy.update", "tensorflow.variable_scope", "tensorflow.variable_scope", "output.get", "output.get", "copy.copy", "copy.copy.update", "gcg.tf.networks.fullyconnectednn", "len", "gcg.tf.networks.fullyconnectednn", "len", "yhats[].get_shape", "bhats[].get_shape"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_calculate_value", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.fullyconnectednn", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.rnn", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.fullyconnectednn", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.fullyconnectednn"], ["", "def", "_graph_inference", "(", "self", ",", "tf_obs_lowd", ",", "obs_vec", ",", "goals", ",", "tf_actions_ph", ",", "is_training", ")", ":", "\n", "        ", "H", "=", "tf_actions_ph", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_action_scope", ")", ":", "\n", "### whiten the actions", "\n", "            ", "action_space", "=", "self", ".", "_env_spec", ".", "action_space", "\n", "action_mean", "=", "np", ".", "tile", "(", "0.5", "*", "(", "action_space", ".", "low", "+", "action_space", ".", "high", ")", ",", "(", "H", ",", "1", ")", ")", "\n", "action_scale", "=", "np", ".", "tile", "(", "action_space", ".", "high", "-", "action_space", ".", "low", ",", "(", "H", ",", "1", ")", ")", "\n", "tf_actions", "=", "(", "tf_actions_ph", "-", "action_mean", ")", "/", "action_scale", "\n", "\n", "self", ".", "_action_graph", ".", "update", "(", "{", "'output_dim'", ":", "self", ".", "_observation_graph", "[", "'output_dim'", "]", "}", ")", "\n", "rnn_inputs", "=", "networks", ".", "fullyconnectednn", "(", "tf_actions", ",", "\n", "**", "self", ".", "_action_graph", ",", "\n", "T", "=", "H", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_step_tensor", "=", "self", ".", "global_step", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "_rnn_scope", ")", ":", "\n", "            ", "rnn_outputs", "=", "networks", ".", "rnn", "(", "rnn_inputs", ",", "\n", "**", "self", ".", "_rnn_graph", ",", "\n", "initial_state", "=", "tf_obs_lowd", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "_output_scope", ")", ":", "\n", "            ", "yhats", "=", "OrderedDict", "(", ")", "\n", "pre_yhats", "=", "OrderedDict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'yhats'", ")", ":", "\n", "                ", "yhat_graph", "=", "copy", ".", "copy", "(", "self", ".", "_output_graph", ")", "\n", "yhat_graph", ".", "update", "(", "{", "'output_dim'", ":", "1", "}", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "                    ", "key", "=", "output", "[", "'name'", "]", "\n", "if", "output", ".", "get", "(", "'yhat'", ")", ":", "\n", "                        ", "pre_yhat", "=", "networks", ".", "fullyconnectednn", "(", "rnn_outputs", ",", "\n", "**", "yhat_graph", ",", "\n", "T", "=", "H", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "key", ",", "\n", "global_step_tensor", "=", "self", ".", "global_step", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "pre_yhats", "[", "key", "]", "=", "pre_yhat", "\n", "yhats", "[", "key", "]", "=", "output", "[", "'yhat'", "]", "(", "pre_yhat", "=", "pre_yhat", ",", "obs_vec", "=", "obs_vec", ")", "\n", "assert", "(", "len", "(", "yhats", "[", "key", "]", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "\n", "", "", "", "bhats", "=", "OrderedDict", "(", ")", "\n", "pre_bhats", "=", "OrderedDict", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'bhats'", ")", ":", "\n", "                ", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "                    ", "key", "=", "output", "[", "'name'", "]", "\n", "if", "output", ".", "get", "(", "'bhat'", ")", ":", "\n", "                        ", "bhat_graph", "=", "copy", ".", "copy", "(", "self", ".", "_output_graph", ")", "\n", "bhat_graph", ".", "update", "(", "{", "'output_dim'", ":", "1", "}", ")", "\n", "pre_bhat", "=", "networks", ".", "fullyconnectednn", "(", "rnn_outputs", ",", "\n", "**", "bhat_graph", ",", "\n", "T", "=", "H", ",", "\n", "is_training", "=", "is_training", ",", "\n", "scope", "=", "key", ",", "\n", "global_step_tensor", "=", "self", ".", "global_step", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "pre_bhats", "[", "key", "]", "=", "pre_bhat", "\n", "bhats", "[", "key", "]", "=", "output", "[", "'bhat'", "]", "(", "pre_bhat", "=", "pre_bhat", ",", "obs_vec", "=", "obs_vec", ")", "\n", "assert", "(", "len", "(", "bhats", "[", "key", "]", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "\n", "", "", "", "", "values", "=", "self", ".", "_graph_calculate_value", "(", "yhats", ",", "bhats", ",", "goals", ",", "H", ")", "\n", "return", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_calculate_value": [[277, 286], ["collections.OrderedDict", "output.get", "tensorflow.expand_dims", "tensorflow.expand_dims", "len", "value.get_shape"], "methods", ["None"], ["", "def", "_graph_calculate_value", "(", "self", ",", "yhats", ",", "bhats", ",", "goals", ",", "H", ")", ":", "\n", "        ", "values", "=", "OrderedDict", "(", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "if", "output", ".", "get", "(", "'value'", ")", ":", "\n", "                ", "value", "=", "output", "[", "'value'", "]", "(", "yhats", "=", "yhats", ",", "bhats", "=", "bhats", ",", "goals", "=", "goals", ",", "gamma", "=", "self", ".", "_gamma", ")", "\n", "assert", "(", "len", "(", "value", ".", "get_shape", "(", ")", ")", "==", "1", ")", "\n", "values", "[", "output", "[", "'name'", "]", "]", "=", "tf", ".", "expand_dims", "(", "value", ",", "1", ")", "\n", "\n", "", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action": [[289, 301], ["gcg_policy.GCGPolicy._graph_get_action_random", "gcg_policy.GCGPolicy._graph_get_action_cem"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action_random", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action_cem"], ["", "def", "_graph_get_action", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_action_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", ":", "\n", "        ", "get_action_type", "=", "get_action_params", "[", "'type'", "]", "\n", "\n", "if", "get_action_type", "==", "'random'", ":", "\n", "            ", "return", "self", ".", "_graph_get_action_random", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_action_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", "\n", "", "elif", "get_action_type", "==", "'cem'", ":", "\n", "            ", "return", "self", ".", "_graph_get_action_cem", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_action_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action_random": [[302, 400], ["get_action_params.get", "random_params.get", "gcg_policy.GCGPolicy._graph_generate_random_actions", "tensorflow.tile", "tensorflow.tile", "gcg.tf.tf_utils.repeat_2d", "gcg.tf.tf_utils.repeat_2d", "collections.OrderedDict", "enumerate", "collections.OrderedDict", "collections.OrderedDict", "gcg_policy.GCGPolicy._get_action_value", "gcg_policy.GCGPolicy._get_action_value", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "collections.OrderedDict", "values_all_eval.keys", "collections.OrderedDict", "yhats_all_eval.keys", "collections.OrderedDict", "bhats_all_eval.keys", "tensorflow.shape", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_obs_to_lowd", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_obs_to_lowd", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_inference", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_inference", "gcg.tf.tf_utils.repeat_2d", "gcg.tf.tf_utils.repeat_2d", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum.get_shape"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_generate_random_actions", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d", "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d"], ["", "", "def", "_graph_get_action_random", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_action_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", ":", "\n", "        ", "H", "=", "get_action_params", "[", "'H'", "]", "\n", "N", "=", "self", ".", "_N", "\n", "h_select", "=", "get_action_params", ".", "get", "(", "'h_select'", ",", "0", ")", "\n", "assert", "(", "H", "<=", "N", ")", "\n", "assert", "(", "h_select", "<", "H", ")", "\n", "num_obs", "=", "tf", ".", "shape", "(", "tf_obs_im_ph", ")", "[", "0", "]", "\n", "\n", "random_params", "=", "get_action_params", "[", "'random'", "]", "\n", "K", "=", "random_params", "[", "'K'", "]", "\n", "get_action_selection", "=", "random_params", ".", "get", "(", "'selection'", ",", "'argmax'", ")", "\n", "\n", "### create actions", "\n", "tf_actions_all", "=", "self", ".", "_graph_generate_random_actions", "(", "[", "K", ",", "H", "]", ")", "\n", "\n", "### process to lowd", "\n", "with", "tf", ".", "variable_scope", "(", "scope_select", ",", "reuse", "=", "reuse_select", ")", ":", "\n", "            ", "tf_obs_lowd_select", "=", "self", ".", "_graph_obs_to_lowd", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "\n", "is_training", "=", "False", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope_eval", ",", "reuse", "=", "reuse_eval", ")", ":", "\n", "            ", "tf_obs_lowd_eval", "=", "self", ".", "_graph_obs_to_lowd", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "\n", "is_training", "=", "False", ")", "\n", "### tile", "\n", "", "tf_actions_all", "=", "tf", ".", "tile", "(", "tf_actions_all", ",", "(", "num_obs", ",", "1", ",", "1", ")", ")", "\n", "tf_obs_lowd_repeat_select", "=", "tf_utils", ".", "repeat_2d", "(", "tf_obs_lowd_select", ",", "K", ",", "0", ")", "\n", "tf_obs_lowd_repeat_eval", "=", "tf_utils", ".", "repeat_2d", "(", "tf_obs_lowd_eval", ",", "K", ",", "0", ")", "\n", "### inference to get values", "\n", "with", "tf", ".", "variable_scope", "(", "scope_select", ",", "reuse", "=", "reuse_select", ")", ":", "\n", "            ", "values_all_select", ",", "yhats_all_select", ",", "bhats_all_select", ",", "_", ",", "_", "=", "self", ".", "_graph_inference", "(", "tf_obs_lowd_repeat_select", ",", "obs_vec", ",", "goals", ",", "tf_actions_all", ",", "\n", "is_training", "=", "False", ")", "# [num_obs*K, H]", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope_eval", ",", "reuse", "=", "reuse_eval", ")", ":", "\n", "            ", "values_all_eval", ",", "yhats_all_eval", ",", "bhats_all_eval", ",", "_", ",", "_", "=", "self", ".", "_graph_inference", "(", "tf_obs_lowd_repeat_eval", ",", "obs_vec", ",", "goals", ",", "tf_actions_all", ",", "\n", "is_training", "=", "False", ")", "\n", "\n", "", "actions", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_action_keys", ")", ":", "\n", "            ", "actions", "[", "key", "]", "=", "tf_actions_all", "[", ":", ",", ":", ",", "i", "]", "\n", "\n", "", "act_inputs", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "obs_vec", ":", "\n", "            ", "act_inputs", "[", "key", "]", "=", "tf_utils", ".", "repeat_2d", "(", "obs_vec", "[", "key", "]", ",", "K", ",", "0", ")", "\n", "\n", "", "act_goals", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "goals", ":", "\n", "            ", "act_goals", "[", "key", "]", "=", "tf_utils", ".", "repeat_2d", "(", "goals", "[", "key", "]", ",", "K", ",", "0", ")", "\n", "\n", "", "tf_values_select", "=", "self", ".", "_get_action_value", "(", "actions", ",", "values_all_select", ",", "yhats_all_select", ",", "bhats_all_select", ",", "act_inputs", ",", "act_goals", ")", "\n", "tf_values_eval", "=", "self", ".", "_get_action_value", "(", "actions", ",", "values_all_eval", ",", "yhats_all_eval", ",", "bhats_all_eval", ",", "act_inputs", ",", "act_goals", ")", "\n", "\n", "### get_action based on select (policy)", "\n", "tf_values_select", "=", "tf", ".", "reshape", "(", "tf_values_select", ",", "(", "num_obs", ",", "K", ")", ")", "# [num_obs, K]", "\n", "if", "get_action_selection", "==", "'argmax'", ":", "\n", "            ", "tf_select_chosen", "=", "tf", ".", "argmax", "(", "tf_values_select", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "tf_select_mask", "=", "tf", ".", "expand_dims", "(", "tf", ".", "one_hot", "(", "tf_select_chosen", ",", "depth", "=", "K", ")", ",", "axis", "=", "2", ")", "# [num_obs, K, 1]", "\n", "tf_get_action", "=", "tf", ".", "reduce_sum", "(", "\n", "tf_select_mask", "*", "tf", ".", "reshape", "(", "tf_actions_all", ",", "(", "num_obs", ",", "K", ",", "H", ",", "self", ".", "_action_dim", ")", ")", "[", ":", ",", ":", ",", "h_select", ",", ":", "]", ",", "\n", "reduction_indices", "=", "1", ")", "# [num_obs, action_dim]", "\n", "### get_action_value based on eval (target)", "\n", "if", "get_action_selection", "==", "'argmax'", ":", "\n", "            ", "tf_values_eval", "=", "tf", ".", "reshape", "(", "tf_values_eval", ",", "(", "num_obs", ",", "K", ",", "1", ")", ")", "# [num_obs, K, 1]", "\n", "tf_get_action_value", "=", "tf", ".", "reduce_sum", "(", "tf_select_mask", "*", "tf_values_eval", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "action_values", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "values_all_eval", ".", "keys", "(", ")", ":", "\n", "            ", "action_values", "[", "key", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "values_all_eval", "[", "key", "]", ",", "(", "num_obs", ",", "K", ",", "H", ")", ")", "*", "tf_select_mask", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "", "action_yhats", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "yhats_all_eval", ".", "keys", "(", ")", ":", "\n", "            ", "action_yhats", "[", "key", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "yhats_all_eval", "[", "key", "]", ",", "(", "num_obs", ",", "K", ",", "H", ")", ")", "*", "tf_select_mask", ",", "axis", "=", "1", ")", "\n", "yhats_all_eval", "[", "key", "]", "=", "tf", ".", "reshape", "(", "yhats_all_eval", "[", "key", "]", ",", "(", "num_obs", ",", "K", ",", "H", ")", ")", "\n", "\n", "", "action_bhats", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "bhats_all_eval", ".", "keys", "(", ")", ":", "\n", "            ", "action_bhats", "[", "key", "]", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "bhats_all_eval", "[", "key", "]", ",", "(", "num_obs", ",", "K", ",", "H", ")", ")", "*", "tf_select_mask", ",", "\n", "axis", "=", "1", ")", "\n", "bhats_all_eval", "[", "key", "]", "=", "tf", ".", "reshape", "(", "bhats_all_eval", "[", "key", "]", ",", "(", "num_obs", ",", "K", ",", "H", ")", ")", "\n", "\n", "### check shapes", "\n", "", "assert", "(", "tf_get_action", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "self", ".", "_action_dim", ")", "\n", "\n", "tf_get_action_reset_ops", "=", "[", "]", "\n", "\n", "# action selection", "\n", "# target values", "\n", "# action reset (e.g., for CEM)", "\n", "# extra info (for debugging)", "\n", "return", "tf_get_action", ",", "tf_get_action_value", ",", "action_values", ",", "action_yhats", ",", "action_bhats", ",", "tf_get_action_reset_ops", ",", "tf_actions_all", ",", "tf_values_select", ",", "yhats_all_eval", ",", "bhats_all_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action_cem": [[401, 503], ["get_action_params.get", "tensorflow.shape", "tensorflow.shape", "tensorflow.assert_equal", "tensorflow.assert_equal", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.contrib.distributions.Uniform", "tensorflow.contrib.distributions.Uniform", "zip", "tensorflow.expand_dims", "tensorflow.expand_dims", "gcg_policy.GCGPolicy._get_action_value", "tensorflow.expand_dims", "tensorflow.expand_dims", "yhats_all_select.keys", "bhats_all_select.keys", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_obs_to_lowd", "tensorflow.contrib.distributions.MultivariateNormalFullCovariance.sample", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reshape", "tensorflow.reshape", "gcg_policy.GCGPolicy._get_action_value", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.contrib.distributions.MultivariateNormalFullCovariance", "tensorflow.contrib.distributions.MultivariateNormalFullCovariance", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_obs_to_lowd", "gcg_policy.GCGPolicy._graph_inference", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "list", "list", "numpy.array", "numpy.array", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_inference", "tensorflow.matmul", "tensorflow.matmul", "float", "tensorflow.contrib.distributions.MultivariateNormalFullCovariance.mean", "tensorflow.tile", "tensorflow.tile", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.eye", "tensorflow.eye", "tf_get_action.get_shape", "list", "list"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "_graph_get_action_cem", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_action_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", ":", "\n", "        ", "H", "=", "get_action_params", "[", "'H'", "]", "\n", "N", "=", "self", ".", "_N", "\n", "h_select", "=", "get_action_params", ".", "get", "(", "'h_select'", ",", "0", ")", "\n", "assert", "(", "H", "<=", "N", ")", "\n", "assert", "(", "h_select", "<", "H", ")", "\n", "get_action_type", "=", "get_action_params", "[", "'type'", "]", "\n", "num_obs", "=", "tf", ".", "shape", "(", "tf_obs_im_ph", ")", "[", "0", "]", "\n", "aspace_select", "=", "self", ".", "_env_spec", ".", "action_selection_space", "\n", "\n", "assert", "(", "get_action_type", "==", "'cem'", ")", "\n", "\n", "cem_params", "=", "get_action_params", "[", "'cem'", "]", "\n", "M_init", "=", "cem_params", "[", "'M_init'", "]", "\n", "M", "=", "cem_params", "[", "'M'", "]", "\n", "K", "=", "cem_params", "[", "'K'", "]", "\n", "itrs", "=", "cem_params", "[", "'itrs'", "]", "\n", "eps", "=", "cem_params", "[", "'eps'", "]", "\n", "\n", "control_dependencies", "=", "[", "]", "\n", "control_dependencies", "+=", "[", "tf", ".", "assert_equal", "(", "num_obs", ",", "1", ")", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "control_dependencies", ")", ":", "\n", "### process to lowd", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "scope_select", ",", "reuse", "=", "reuse_select", ")", ":", "\n", "                ", "tf_obs_lowd_select", "=", "self", ".", "_graph_obs_to_lowd", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "is_training", "=", "False", ")", "\n", "\n", "### initialize CEM", "\n", "", "Ms", "=", "[", "M_init", "]", "+", "[", "M", "]", "*", "(", "itrs", "-", "1", ")", "\n", "Ks", "=", "[", "K", "]", "*", "(", "itrs", "-", "1", ")", "+", "[", "1", "]", "\n", "tf_obs_lowd_select_repeats", "=", "[", "tf", ".", "tile", "(", "tf_obs_lowd_select", ",", "(", "M_init", ",", "1", ")", ")", "]", "+", "[", "tf", ".", "tile", "(", "tf_obs_lowd_select", ",", "(", "M", ",", "1", ")", ")", "]", "*", "(", "itrs", "-", "1", ")", "\n", "distribution", "=", "tf", ".", "contrib", ".", "distributions", ".", "Uniform", "(", "list", "(", "aspace_select", ".", "low", ")", "*", "H", ",", "\n", "list", "(", "aspace_select", ".", "high", ")", "*", "H", ")", "\n", "\n", "### run CEM", "\n", "for", "M_i", ",", "K_i", ",", "tf_obs_lowd_select_repeat_i", "in", "zip", "(", "Ms", ",", "Ks", ",", "tf_obs_lowd_select_repeats", ")", ":", "\n", "                ", "tf_flat_actions_preclip", "=", "distribution", ".", "sample", "(", "(", "M_i", ",", ")", ")", "\n", "tf_flat_actions", "=", "tf", ".", "clip_by_value", "(", "\n", "tf_flat_actions_preclip", ",", "\n", "np", ".", "array", "(", "[", "list", "(", "aspace_select", ".", "low", ")", "*", "H", "]", "*", "M_i", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "list", "(", "aspace_select", ".", "high", ")", "*", "H", "]", "*", "M_i", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "tf_actions", "=", "tf", ".", "reshape", "(", "tf_flat_actions", ",", "(", "M_i", ",", "H", ",", "aspace_select", ".", "flat_dim", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope_select", ",", "reuse", "=", "True", ")", ":", "\n", "                    ", "values_all_select", ",", "yhats_all_select", ",", "bhats_all_select", ",", "_", ",", "_", "=", "self", ".", "_graph_inference", "(", "tf_obs_lowd_select_repeat_i", ",", "obs_vec", ",", "goals", ",", "tf_actions", ",", "\n", "is_training", "=", "False", ")", "# [num_obs*M_i, H]", "\n", "\n", "", "tf_values_select", "=", "self", ".", "_get_action_value", "(", "tf_actions", ",", "values_all_select", ",", "yhats_all_select", ",", "bhats_all_select", ",", "obs_vec", ",", "goals", ")", "\n", "\n", "### get top k", "\n", "_", ",", "top_indices", "=", "tf", ".", "nn", ".", "top_k", "(", "tf_values_select", ",", "k", "=", "K_i", ")", "\n", "top_controls", "=", "tf", ".", "gather", "(", "tf_flat_actions", ",", "indices", "=", "top_indices", ")", "\n", "\n", "### set new distribution based on top k", "\n", "mean", "=", "tf", ".", "reduce_mean", "(", "top_controls", ",", "axis", "=", "0", ")", "\n", "covar", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "top_controls", ")", ",", "top_controls", ")", "/", "float", "(", "K", ")", "\n", "sigma", "=", "covar", "+", "eps", "*", "tf", ".", "eye", "(", "H", "*", "aspace_select", ".", "flat_dim", ")", "\n", "\n", "distribution", "=", "tf", ".", "contrib", ".", "distributions", ".", "MultivariateNormalFullCovariance", "(", "\n", "loc", "=", "mean", ",", "\n", "covariance_matrix", "=", "sigma", "\n", ")", "\n", "\n", "### eval mean of final distribution", "\n", "\n", "", "tf_get_actions", "=", "tf", ".", "expand_dims", "(", "tf", ".", "reshape", "(", "distribution", ".", "mean", "(", ")", ",", "(", "H", ",", "aspace_select", ".", "flat_dim", ")", ")", ",", "0", ")", "\n", "tf_get_action", "=", "tf_get_actions", "[", ":", ",", "h_select", ",", ":", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope_eval", ",", "reuse", "=", "reuse_eval", ")", ":", "\n", "                ", "tf_obs_lowd_select", "=", "self", ".", "_graph_obs_to_lowd", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "is_training", "=", "False", ")", "\n", "values_all_eval", ",", "yhats_all_eval", ",", "bhats_all_eval", ",", "_", ",", "_", "=", "self", ".", "_graph_inference", "(", "tf_obs_lowd_select", ",", "obs_vec", ",", "goals", ",", "tf_get_actions", ",", "\n", "is_training", "=", "False", ")", "\n", "", "tf_get_action_value", "=", "self", ".", "_get_action_value", "(", "tf_get_actions", ",", "values_all_eval", ",", "yhats_all_eval", ",", "bhats_all_eval", ",", "obs_vec", ",", "goals", ")", "\n", "\n", "# can't use CEM for target computation, so no need", "\n", "action_values", "=", "None", "\n", "action_yhats", "=", "None", "\n", "action_bhats", "=", "None", "\n", "\n", "### check shapes", "\n", "assert", "(", "tf_get_action", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "self", ".", "_action_dim", ")", "\n", "\n", "tf_get_action_reset_ops", "=", "[", "]", "\n", "\n", "### make them all have num_obs=1 as the first dimension", "\n", "tf_values_select", "=", "tf", ".", "expand_dims", "(", "tf_values_select", ",", "0", ")", "\n", "for", "key", "in", "yhats_all_select", ".", "keys", "(", ")", ":", "\n", "                ", "yhats_all_select", "[", "key", "]", "=", "tf", ".", "expand_dims", "(", "yhats_all_select", "[", "key", "]", ",", "0", ")", "\n", "", "for", "key", "in", "bhats_all_select", ".", "keys", "(", ")", ":", "\n", "                ", "bhats_all_select", "[", "key", "]", "=", "tf", ".", "expand_dims", "(", "bhats_all_select", "[", "key", "]", ",", "0", ")", "\n", "\n", "# action selection", "\n", "# target values", "\n", "# action reset (e.g., for CEM)", "\n", "# extra info (for debugging)", "\n", "", "return", "tf_get_action", ",", "tf_get_action_value", ",", "action_values", ",", "action_yhats", ",", "action_bhats", ",", "tf_get_action_reset_ops", ",", "tf_actions", ",", "tf_values_select", ",", "yhats_all_select", ",", "bhats_all_select", "# select b/c eval is just one, the mean", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_generate_random_actions": [[504, 512], ["numpy.tile", "numpy.tile", "gcg.misc.utils.multiple_expand_dims", "gcg.misc.utils.multiple_expand_dims", "tensorflow.random_uniform", "tensorflow.random_uniform", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims"], ["", "", "def", "_graph_generate_random_actions", "(", "self", ",", "shape", ")", ":", "\n", "        ", "action_lb", "=", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "self", ".", "_env_spec", ".", "action_selection_space", ".", "low", ",", "[", "0", "]", "*", "len", "(", "shape", ")", ")", ",", "\n", "shape", "+", "[", "1", "]", ")", "\n", "action_ub", "=", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "self", ".", "_env_spec", ".", "action_selection_space", ".", "high", ",", "[", "0", "]", "*", "len", "(", "shape", ")", ")", ",", "\n", "shape", "+", "[", "1", "]", ")", "\n", "tf_actions", "=", "(", "action_ub", "-", "action_lb", ")", "*", "tf", ".", "random_uniform", "(", "shape", "+", "[", "self", ".", "_action_dim", "]", ")", "+", "action_lb", "\n", "\n", "return", "tf_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value": [[513, 529], ["gcg_policy.GCGPolicy._action_selection_value", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "isinstance", "collections.OrderedDict", "enumerate", "len"], "methods", ["None"], ["", "def", "_get_action_value", "(", "self", ",", "actions", ",", "values", ",", "yhats", ",", "bhats", ",", "obs_vec", ",", "goals", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "actions", ",", "OrderedDict", ")", ":", "\n", "            ", "d_actions", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_action_keys", ")", ":", "\n", "                ", "d_actions", "[", "key", "]", "=", "actions", "[", ":", ",", ":", ",", "i", "]", "\n", "", "actions", "=", "d_actions", "\n", "\n", "", "value", "=", "self", ".", "_action_selection_value", "(", "actions", "=", "actions", ",", "\n", "yhats", "=", "yhats", ",", "\n", "bhats", "=", "bhats", ",", "\n", "values", "=", "values", ",", "\n", "goals", "=", "goals", ")", "\n", "\n", "value", "=", "tf", ".", "reduce_sum", "(", "value", ",", "axis", "=", "1", ")", "\n", "assert", "(", "len", "(", "value", ".", "shape", ")", "==", "1", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_target_values": [[530, 563], ["copy.deepcopy", "gcg_policy.GCGPolicy._graph_get_action", "collections.OrderedDict", "pre_target_values.keys", "collections.OrderedDict", "pre_target_yhats.keys", "collections.OrderedDict", "pre_target_bhats.keys", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action"], ["", "def", "_graph_get_target_values", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "get_target_params", ",", "\n", "scope_select", ",", "reuse_select", ",", "scope_eval", ",", "reuse_eval", ",", "tf_episode_timesteps_ph", ")", ":", "\n", "        ", "get_target_params", "=", "copy", ".", "deepcopy", "(", "get_target_params", ")", "\n", "assert", "(", "get_target_params", "[", "'type'", "]", "==", "'random'", ")", "\n", "\n", "# pre just means before reorganization. it doesn't refer to pre_yhat or pre_bhat", "\n", "_", ",", "_", ",", "pre_target_values", ",", "pre_target_yhats", ",", "pre_target_bhats", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_graph_get_action", "(", "tf_obs_im_ph", ",", "\n", "tf_obs_vec_ph", ",", "\n", "tf_goals_ph", ",", "\n", "obs_vec", ",", "\n", "goals", ",", "\n", "get_target_params", ",", "\n", "scope_select", ",", "\n", "reuse_select", ",", "\n", "scope_eval", ",", "\n", "reuse_eval", ",", "\n", "tf_episode_timesteps_ph", ")", "\n", "\n", "H_target", "=", "get_target_params", "[", "'H'", "]", "\n", "target_values", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "pre_target_values", ".", "keys", "(", ")", ":", "\n", "            ", "target_values", "[", "key", "]", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "pre_target_values", "[", "key", "]", ",", "(", "self", ".", "_N", ",", "-", "1", ")", ")", ",", "(", "1", ",", "0", ")", ")", "\n", "\n", "", "target_yhats", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "pre_target_yhats", ".", "keys", "(", ")", ":", "\n", "            ", "target_yhats", "[", "key", "]", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "pre_target_yhats", "[", "key", "]", ",", "(", "self", ".", "_N", ",", "-", "1", ",", "H_target", ")", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "", "target_bhats", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "pre_target_bhats", ".", "keys", "(", ")", ":", "\n", "            ", "target_bhats", "[", "key", "]", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "pre_target_bhats", "[", "key", "]", ",", "(", "self", ".", "_N", ",", "-", "1", ",", "H_target", ")", ")", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "", "return", "target_values", ",", "target_yhats", ",", "target_bhats", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_cost": [[566, 689], ["dict", "dict", "dict", "dict", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "control_dependencies.append", "tensorflow.sequence_mask", "tensorflow.sequence_mask", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.ones", "tensorflow.ones", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "collections.OrderedDict", "collections.OrderedDict", "gcg_policy.GCGPolicy._graph_calculate_value", "gcg_policy.GCGPolicy._get_action_value", "gcg_policy.GCGPolicy._get_action_value", "tensorflow.abs", "tensorflow.abs", "tensorflow.assert_greater", "tensorflow.assert_greater", "tensorflow.cast", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape", "len", "len", "len", "len", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "output.get", "output.get", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.sequence_mask.get_shape", "tensorflow.expand_dims.get_shape", "tensorflow.ones.get_shape", "tensorflow.expand_dims.get_shape", "output.get", "output.get", "output.get", "output.get", "gcg_policy.GCGPolicy._graph_sub_cost", "output.get", "output.get", "output.get", "output.get", "gcg_policy.GCGPolicy._graph_sub_cost", "list", "len", "float", "tf_rewards_ph.get_shape", "tf_dones_ph.get_shape", "yhat_label.shape.as_list", "yhat.shape.as_list", "bhat_label.shape.as_list", "bhat.shape.as_list", "dict.values", "numpy.sum", "tensorflow.add_n", "tensorflow.add_n", "numpy.prod", "v.shape.as_list", "tensorflow.trainable_variables", "tensorflow.trainable_variables"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_calculate_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_sub_cost", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_sub_cost", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "_graph_cost", "(", "self", ",", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", ",", "obs_vec", ",", "goals", ",", "future_goals", ",", "\n", "actions", ",", "tf_obs_vec_target_ph", ",", "tf_rewards_ph", ",", "tf_dones_ph", ",", "\n", "target_obs_vec", ",", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "\n", "tf_weights_ph", ",", "N", "=", "None", ")", ":", "\n", "        ", "N", "=", "self", ".", "_N", "if", "N", "is", "None", "else", "N", "\n", "assert", "(", "tf_rewards_ph", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "N", ")", "\n", "assert", "(", "tf_dones_ph", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "N", "+", "1", ")", "\n", "\n", "control_dependencies", "=", "[", "]", "\n", "costs", "=", "dict", "(", ")", "\n", "costs_yhat", "=", "dict", "(", ")", "\n", "costs_bhat", "=", "dict", "(", ")", "\n", "accs_yhat", "=", "dict", "(", ")", "\n", "\n", "### mask", "\n", "tf_weights", "=", "tf", ".", "expand_dims", "(", "tf_weights_ph", ",", "axis", "=", "1", ")", "\n", "tf_dones", "=", "tf", ".", "cast", "(", "tf_dones_ph", ",", "tf", ".", "float32", ")", "\n", "lengths", "=", "tf", ".", "reduce_sum", "(", "1", "-", "tf_dones", ",", "axis", "=", "1", ")", "\n", "control_dependencies", ".", "append", "(", "tf", ".", "assert_greater", "(", "lengths", ",", "0.", ",", "name", "=", "'length_assert'", ")", ")", "\n", "\n", "clip_mask", "=", "tf", ".", "sequence_mask", "(", "\n", "tf", ".", "cast", "(", "lengths", ",", "tf", ".", "int32", ")", ",", "\n", "maxlen", "=", "self", ".", "_H", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "clip_mask", "/=", "tf", ".", "reduce_sum", "(", "clip_mask", ")", "\n", "\n", "no_clip_mask", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "clip_mask", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "no_clip_mask", "/=", "tf", ".", "reduce_sum", "(", "no_clip_mask", ")", "\n", "\n", "clip_mask", "*=", "tf_weights", "\n", "no_clip_mask", "*=", "tf_weights", "\n", "\n", "assert", "(", "len", "(", "clip_mask", ".", "get_shape", "(", ")", ")", "==", "len", "(", "tf_weights", ".", "get_shape", "(", ")", ")", ")", "\n", "assert", "(", "len", "(", "no_clip_mask", ".", "get_shape", "(", ")", ")", "==", "len", "(", "tf_weights", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "yhat_labels", "=", "OrderedDict", "(", ")", "\n", "bhat_labels", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "key", "=", "output", "[", "'name'", "]", "\n", "if", "output", "[", "'clip_with_done'", "]", ":", "\n", "                ", "mask", "=", "clip_mask", "\n", "", "else", ":", "\n", "                ", "mask", "=", "no_clip_mask", "\n", "\n", "", "cost", "=", "0.", "\n", "cost_yhat", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "cost_bhat", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "acc_yhat", "=", "None", "\n", "\n", "if", "output", ".", "get", "(", "'yhat'", ")", ":", "\n", "                ", "yhat", "=", "yhats", "[", "output", "[", "'name'", "]", "]", "\n", "pre_yhat", "=", "pre_yhats", "[", "output", "[", "'name'", "]", "]", "\n", "yhat_label", "=", "output", "[", "'yhat_label'", "]", "(", "rewards", "=", "tf_rewards_ph", ",", "\n", "dones", "=", "tf_dones", ",", "\n", "goals", "=", "goals", ",", "\n", "future_goals", "=", "future_goals", ",", "\n", "target_obs_vec", "=", "target_obs_vec", ",", "\n", "gamma", "=", "self", ".", "_gamma", ")", "\n", "yhat_labels", "[", "output", "[", "'name'", "]", "]", "=", "yhat_label", "\n", "assert", "(", "yhat_label", ".", "shape", ".", "as_list", "(", ")", "==", "yhat", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "yhat_loss", "=", "output", "[", "'yhat_loss'", "]", "\n", "yhat_loss_use_pre", "=", "output", ".", "get", "(", "'yhat_loss_use_pre'", ",", "False", ")", "\n", "yhat_loss_xentropy_posweight", "=", "output", ".", "get", "(", "'yhat_loss_xentropy_posweight'", ",", "1", ")", "\n", "yhat_scale", "=", "output", ".", "get", "(", "'yhat_scale'", ",", "1.0", ")", "\n", "yhat_loss_weight", "=", "output", ".", "get", "(", "'yhat_loss_weight'", ",", "1.0", ")", "\n", "cost_yhat", ",", "acc_yhat", ",", "cost_dep", "=", "self", ".", "_graph_sub_cost", "(", "yhat", ",", "pre_yhat", ",", "yhat_loss_use_pre", ",", "yhat_label", ",", "\n", "mask", ",", "yhat_loss", ",", "yhat_scale", ",", "yhat_loss_weight", ",", "\n", "xentropy_posweight", "=", "yhat_loss_xentropy_posweight", ")", "\n", "cost", "+=", "cost_yhat", "\n", "control_dependencies", "+=", "cost_dep", "\n", "\n", "", "if", "output", ".", "get", "(", "'bhat'", ")", ":", "\n", "                ", "bhat", "=", "bhats", "[", "output", "[", "'name'", "]", "]", "\n", "pre_bhat", "=", "pre_bhats", "[", "output", "[", "'name'", "]", "]", "\n", "bhat_label", "=", "output", "[", "'bhat_label'", "]", "(", "rewards", "=", "tf_rewards_ph", ",", "\n", "dones", "=", "tf_dones", ",", "\n", "goals", "=", "goals", ",", "\n", "target_obs_vec", "=", "target_obs_vec", ",", "\n", "gamma", "=", "self", ".", "_gamma", ",", "\n", "future_goals", "=", "future_goals", ",", "\n", "target_yhats", "=", "target_yhats", ",", "\n", "target_bhats", "=", "target_bhats", ",", "\n", "target_values", "=", "target_values", ")", "\n", "bhat_labels", "[", "output", "[", "'name'", "]", "]", "=", "bhat_label", "\n", "assert", "(", "bhat_label", ".", "shape", ".", "as_list", "(", ")", "==", "bhat", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "bhat_loss", "=", "output", "[", "'bhat_loss'", "]", "\n", "bhat_loss_use_pre", "=", "output", ".", "get", "(", "'bhat_loss_use_pre'", ",", "False", ")", "\n", "bhat_loss_xentropy_posweight", "=", "output", ".", "get", "(", "'bhat_loss_xentropy_posweight'", ",", "1", ")", "\n", "bhat_scale", "=", "output", ".", "get", "(", "'bhat_scale'", ",", "1.0", ")", "\n", "bhat_loss_weight", "=", "output", ".", "get", "(", "'bhat_loss_weight'", ",", "1.0", ")", "\n", "cost_bhat", ",", "_", ",", "cost_dep", "=", "self", ".", "_graph_sub_cost", "(", "bhat", ",", "pre_bhat", ",", "bhat_loss_use_pre", ",", "bhat_label", ",", "\n", "mask", ",", "bhat_loss", ",", "bhat_scale", ",", "bhat_loss_weight", ",", "\n", "xentropy_posweight", "=", "bhat_loss_xentropy_posweight", ")", "\n", "cost", "+=", "cost_bhat", "\n", "control_dependencies", "+=", "cost_dep", "\n", "\n", "", "costs", "[", "key", "]", "=", "cost", "\n", "costs_yhat", "[", "key", "]", "=", "cost_yhat", "\n", "costs_bhat", "[", "key", "]", "=", "cost_bhat", "\n", "if", "acc_yhat", "is", "not", "None", ":", "\n", "                ", "accs_yhat", "[", "key", "]", "=", "acc_yhat", "\n", "\n", "", "", "value_labels", "=", "self", ".", "_graph_calculate_value", "(", "yhat_labels", ",", "bhat_labels", ",", "goals", ",", "self", ".", "_H", ")", "\n", "\n", "rew", "=", "self", ".", "_get_action_value", "(", "actions", ",", "values", ",", "yhats", ",", "bhats", ",", "obs_vec", ",", "goals", ")", "\n", "rew_label", "=", "self", ".", "_get_action_value", "(", "actions", ",", "value_labels", ",", "yhat_labels", ",", "bhat_labels", ",", "obs_vec", ",", "goals", ")", "\n", "\n", "rew_errors", "=", "tf", ".", "abs", "(", "rew", "-", "rew_label", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "control_dependencies", ")", ":", "\n", "            ", "total_cost", "=", "tf", ".", "reduce_sum", "(", "list", "(", "costs", ".", "values", "(", ")", ")", ")", "\n", "\n", "### weight decay", "\n", "reg_losses", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", "\n", "if", "len", "(", "reg_losses", ")", ">", "0", ":", "\n", "                ", "num_trainable_vars", "=", "float", "(", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", ")", "\n", "weight_decay", "=", "(", "self", ".", "_weight_decay", "/", "num_trainable_vars", ")", "*", "tf", ".", "add_n", "(", "reg_losses", ")", "\n", "", "else", ":", "\n", "                ", "weight_decay", "=", "0", "\n", "", "total_cost_with_reg", "=", "total_cost", "+", "weight_decay", "\n", "\n", "", "return", "total_cost_with_reg", ",", "total_cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", ",", "rew_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_sub_cost": [[690, 724], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "len", "len", "len", "len", "tensorflow.abs", "tensorflow.abs", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.nn.weighted_cross_entropy_with_logits.get_shape", "preds.get_shape", "labels.get_shape", "tensorflow.square", "tensorflow.square", "len", "len", "kwargs.get", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.nn.weighted_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "preds.get_shape", "labels.get_shape", "len", "len", "tensorflow.assert_greater_equal", "tensorflow.assert_greater_equal", "tensorflow.assert_less_equal", "tensorflow.assert_less_equal", "tensorflow.assert_greater_equal", "tensorflow.assert_greater_equal", "tensorflow.assert_less_equal", "tensorflow.assert_less_equal", "tensorflow.cast", "tensorflow.cast", "pre_preds.get_shape", "labels.get_shape", "tensorflow.equal", "tensorflow.equal"], "methods", ["None"], ["", "def", "_graph_sub_cost", "(", "self", ",", "preds", ",", "pre_preds", ",", "use_pre", ",", "labels", ",", "mask", ",", "loss", ",", "scale", ",", "loss_weight", ",", "**", "kwargs", ")", ":", "\n", "        ", "control_dependencies", "=", "[", "]", "\n", "acc", "=", "None", "\n", "if", "loss", "==", "'mse'", ":", "\n", "            ", "assert", "(", "not", "use_pre", ")", "\n", "assert", "(", "len", "(", "preds", ".", "get_shape", "(", ")", ")", "==", "len", "(", "labels", ".", "get_shape", "(", ")", ")", ")", "\n", "cost", "=", "0.5", "*", "tf", ".", "square", "(", "preds", "-", "labels", ")", "/", "scale", "\n", "", "elif", "loss", "==", "'huber'", ":", "\n", "# Used implementation similar to tf github to avoid gradient issues", "\n", "            ", "assert", "(", "not", "use_pre", ")", "\n", "assert", "(", "len", "(", "preds", ".", "get_shape", "(", ")", ")", "==", "len", "(", "labels", ".", "get_shape", "(", ")", ")", ")", "\n", "delta", "=", "1.0", "*", "scale", "\n", "abs_diff", "=", "tf", ".", "abs", "(", "preds", "-", "labels", ")", "\n", "quadratic", "=", "tf", ".", "minimum", "(", "abs_diff", ",", "delta", ")", "\n", "linear", "=", "(", "abs_diff", "-", "quadratic", ")", "\n", "cost", "=", "(", "0.5", "*", "quadratic", "**", "2", "+", "delta", "*", "linear", ")", "/", "scale", "\n", "", "elif", "loss", "==", "'xentropy'", ":", "\n", "            ", "assert", "(", "use_pre", ")", "\n", "assert", "(", "len", "(", "pre_preds", ".", "get_shape", "(", ")", ")", "==", "len", "(", "labels", ".", "get_shape", "(", ")", ")", ")", "\n", "labels", "/=", "scale", "\n", "preds", "/=", "scale", "\n", "control_dependencies", "+=", "[", "tf", ".", "assert_greater_equal", "(", "labels", ",", "0.", ",", "name", "=", "'cost_assert_2'", ")", "]", "\n", "control_dependencies", "+=", "[", "tf", ".", "assert_less_equal", "(", "labels", ",", "1.", ",", "name", "=", "'cost_assert_3'", ",", "summarize", "=", "1000", ")", "]", "\n", "control_dependencies", "+=", "[", "tf", ".", "assert_greater_equal", "(", "preds", ",", "0.", ",", "name", "=", "'cost_assert_4'", ")", "]", "\n", "control_dependencies", "+=", "[", "tf", ".", "assert_less_equal", "(", "preds", ",", "1.", ",", "name", "=", "'cost_assert_5'", ")", "]", "\n", "xentropy_posweight", "=", "kwargs", ".", "get", "(", "'xentropy_posweight'", ",", "1", ")", "\n", "cost", "=", "tf", ".", "nn", ".", "weighted_cross_entropy_with_logits", "(", "logits", "=", "pre_preds", ",", "targets", "=", "labels", ",", "\n", "pos_weight", "=", "xentropy_posweight", ")", "\n", "acc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "preds", ">", "0.5", ",", "labels", ">", "0.5", ")", ",", "tf", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "assert", "(", "len", "(", "cost", ".", "get_shape", "(", ")", ")", "==", "len", "(", "(", "mask", "*", "loss_weight", ")", ".", "get_shape", "(", ")", ")", ")", "\n", "cost", "=", "tf", ".", "reduce_sum", "(", "cost", "*", "mask", "*", "loss_weight", ")", "\n", "return", "cost", ",", "acc", ",", "control_dependencies", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_optimize": [[725, 744], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_collection", "tensorflow.get_collection", "gcg.data.logger.logger.debug", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.GradientDescentOptimizer.compute_gradients", "enumerate", "tensorflow.train.GradientDescentOptimizer.apply_gradients", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "int", "float", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer", "numpy.prod", "var.get_shape().as_list", "tensorflow.clip_by_norm", "tensorflow.clip_by_norm", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug"], ["", "def", "_graph_optimize", "(", "self", ",", "tf_cost", ",", "tf_policy_vars", ")", ":", "\n", "        ", "tf_lr_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", ")", ",", "name", "=", "\"learning_rate\"", ")", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "num_parameters", "=", "0", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "if", "self", ".", "_optimizer", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "tf_lr_ph", ",", "epsilon", "=", "1e-4", ")", "\n", "", "elif", "self", ".", "_optimizer", "==", "'sgd'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "tf_lr_ph", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "tf_cost", ",", "var_list", "=", "tf_policy_vars", ")", "\n", "for", "i", ",", "(", "grad", ",", "var", ")", "in", "enumerate", "(", "gradients", ")", ":", "\n", "                ", "num_parameters", "+=", "int", "(", "np", ".", "prod", "(", "var", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ")", "\n", "if", "grad", "is", "not", "None", ":", "\n", "                    ", "gradients", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "self", ".", "_grad_clip_norm", ")", ",", "var", ")", "\n", "", "", "tf_opt", "=", "optimizer", ".", "apply_gradients", "(", "gradients", ",", "global_step", "=", "self", ".", "global_step", ")", "\n", "", "logger", ".", "debug", "(", "'Number of parameters: {0:e}'", ".", "format", "(", "float", "(", "num_parameters", ")", ")", ")", "\n", "return", "tf_opt", ",", "tf_lr_ph", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_init_vars": [[745, 747], ["tf_sess.run", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "_graph_init_vars", "(", "self", ",", "tf_sess", ")", ":", "\n", "        ", "tf_sess", ".", "run", "(", "[", "tf", ".", "global_variables_initializer", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_savers": [[748, 772], ["dict", "dict", "dict.items", "name_and_vars.append", "gcg_policy.GCGPolicy._graph_setup_savers.filter_policy_vars"], "methods", ["None"], ["", "def", "_graph_setup_savers", "(", "self", ",", "tf_inference_vars", ",", "tf_all_vars", ",", "inference_only", ")", ":", "\n", "        ", "savers_dict", "=", "dict", "(", ")", "\n", "\n", "def", "filter_policy_vars", "(", "vars", ",", "must_contain", ")", ":", "\n", "            ", "return", "[", "v", "for", "v", "in", "vars", "if", "must_contain", "in", "v", ".", "name", "]", "\n", "\n", "", "name_and_vars", "=", "[", "(", "'inference'", ",", "tf_inference_vars", ")", "]", "\n", "if", "not", "inference_only", ":", "\n", "            ", "name_and_vars", ".", "append", "(", "(", "'train'", ",", "tf_all_vars", ")", ")", "\n", "\n", "", "savers_vars", "=", "dict", "(", ")", "\n", "for", "name", ",", "vars", "in", "name_and_vars", ":", "\n", "            ", "savers_vars", "[", "name", "]", "=", "vars", "\n", "savers_vars", "[", "name", "+", "'_image'", "]", "=", "filter_policy_vars", "(", "vars", ",", "self", ".", "_image_scope", ")", "\n", "savers_vars", "[", "name", "+", "'_observation'", "]", "=", "filter_policy_vars", "(", "vars", ",", "self", ".", "_observation_scope", ")", "\n", "savers_vars", "[", "name", "+", "'_action'", "]", "=", "filter_policy_vars", "(", "vars", ",", "self", ".", "_action_scope", ")", "\n", "savers_vars", "[", "name", "+", "'_rnn'", "]", "=", "filter_policy_vars", "(", "vars", ",", "self", ".", "_rnn_scope", ")", "\n", "savers_vars", "[", "name", "+", "'_output'", "]", "=", "filter_policy_vars", "(", "vars", ",", "self", ".", "_output_scope", ")", "\n", "\n", "", "for", "name", ",", "vars", "in", "savers_vars", ".", "items", "(", ")", ":", "\n", "            ", "assert", "name", "not", "in", "savers_dict", ".", "keys", "(", ")", "\n", "savers_dict", "[", "name", "]", "=", "tf", ".", "train", ".", "Saver", "(", "vars", ",", "max_to_keep", "=", "None", ")", "\n", "\n", "", "return", "savers_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_policy": [[775, 786], ["tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_obs_to_lowd", "gcg_policy.GCGPolicy._graph_inference"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_obs_to_lowd", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_inference"], ["", "def", "_graph_setup_policy", "(", "self", ",", "obs_vec", ",", "goals", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "tf_actions_ph", ",", "\n", "reuse", "=", "False", ",", "is_training", "=", "True", ")", ":", "\n", "### policy", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_policy_scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "### process obs to lowd", "\n", "            ", "tf_obs_lowd", "=", "self", ".", "_graph_obs_to_lowd", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "is_training", "=", "is_training", ")", "\n", "### create training policy", "\n", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "=", "self", ".", "_graph_inference", "(", "tf_obs_lowd", ",", "obs_vec", ",", "goals", ",", "tf_actions_ph", "[", ":", ",", ":", "self", ".", "_H", ",", ":", "]", ",", "is_training", "=", "is_training", ")", "\n", "\n", "", "return", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_action_selection": [[787, 798], ["gcg_policy.GCGPolicy._graph_get_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_action"], ["", "def", "_graph_setup_action_selection", "(", "self", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "\n", "tf_episode_timesteps_ph", ")", ":", "\n", "### action selection", "\n", "        ", "tf_get_action", ",", "tf_get_action_value", ",", "_", ",", "_", ",", "_", ",", "tf_get_action_reset_ops", ",", "tf_actions_all", ",", "tf_values_select", ",", "tf_yhats_all_eval", ",", "tf_bhats_all_eval", "=", "self", ".", "_graph_get_action", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "self", ".", "_get_action_test", ",", "\n", "self", ".", "_policy_scope", ",", "True", ",", "self", ".", "_policy_scope", ",", "True", ",", "\n", "tf_episode_timesteps_ph", ")", "\n", "\n", "return", "tf_get_action", ",", "tf_get_action_value", ",", "tf_get_action_reset_ops", ",", "tf_actions_all", ",", "tf_values_select", ",", "tf_yhats_all_eval", ",", "tf_bhats_all_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_target": [[799, 848], ["tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "gcg.tf.tf_utils.repeat_2d", "gcg_policy.GCGPolicy._graph_get_target_values", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "sorted", "zip", "tensorflow.group", "tensorflow.group", "tensorflow.get_collection", "tensorflow.get_collection", "len", "len", "len", "tensorflow.group.append", "var.name.replace", "var_target.name.replace", "var_target.assign", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_get_target_values"], ["", "def", "_graph_setup_target", "(", "self", ",", "tf_obs_im_target_ph", ",", "tf_obs_vec_target_ph", ",", "tf_goals_target_ph", ",", "\n", "target_obs_vec", ",", "goals", ",", "tf_policy_vars", ",", "reuse_eval", "=", "False", ")", ":", "\n", "### create target network", "\n", "        ", "if", "self", ".", "_use_target", ":", "\n", "### action selection", "\n", "            ", "tf_obs_im_target_ph_packed", "=", "tf", ".", "concat", "(", "[", "tf_obs_im_target_ph", "[", ":", ",", "h", "-", "self", ".", "_obs_history_len", ":", "h", ",", ":", "]", "\n", "for", "h", "in", "range", "(", "self", ".", "_obs_history_len", "+", "1", ",", "\n", "self", ".", "_obs_history_len", "+", "self", ".", "_N", "+", "1", ")", "]", ",", "\n", "0", ")", "\n", "tf_obs_vec_target_ph_packed", "=", "tf", ".", "concat", "(", "[", "tf_obs_vec_target_ph", "[", ":", ",", "h", "-", "self", ".", "_obs_history_len", ":", "h", ",", ":", "]", "\n", "for", "h", "in", "range", "(", "self", ".", "_obs_history_len", "+", "1", ",", "\n", "self", ".", "_obs_history_len", "+", "self", ".", "_N", "+", "1", ")", "]", ",", "\n", "0", ")", "\n", "tf_goals_target_ph_packed", "=", "tf_utils", ".", "repeat_2d", "(", "tf_goals_target_ph", "[", ":", ",", "0", ",", ":", "]", ",", "self", ".", "_N", ",", "0", ")", "\n", "\n", "target_values", ",", "target_yhats", ",", "target_bhats", "=", "self", ".", "_graph_get_target_values", "(", "tf_obs_im_target_ph_packed", ",", "\n", "tf_obs_vec_target_ph_packed", ",", "\n", "tf_goals_target_ph_packed", ",", "\n", "target_obs_vec", ",", "goals", ",", "\n", "self", ".", "_get_action_target", ",", "\n", "scope_select", "=", "self", ".", "_policy_scope", ",", "\n", "reuse_select", "=", "True", ",", "\n", "scope_eval", "=", "self", ".", "_target_scope", ",", "\n", "reuse_eval", "=", "reuse_eval", "or", "(", "self", ".", "_target_scope", "==", "self", ".", "_policy_scope", ")", ",", "\n", "tf_episode_timesteps_ph", "=", "None", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "target_values", "=", "OrderedDict", "(", ")", "\n", "target_yhats", "=", "OrderedDict", "(", ")", "\n", "target_bhats", "=", "OrderedDict", "(", ")", "\n", "### update target network", "\n", "", "if", "self", ".", "_use_target", ":", "\n", "            ", "tf_target_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "self", ".", "_target_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "assert", "(", "len", "(", "tf_policy_vars", ")", ">", "0", ")", "\n", "assert", "(", "len", "(", "tf_policy_vars", ")", "==", "len", "(", "tf_target_vars", ")", ")", "\n", "tf_update_target_fn", "=", "[", "]", "\n", "for", "var", ",", "var_target", "in", "zip", "(", "tf_policy_vars", ",", "tf_target_vars", ")", ":", "\n", "                ", "assert", "(", "var", ".", "name", ".", "replace", "(", "self", ".", "_policy_scope", ",", "''", ")", "==", "var_target", ".", "name", ".", "replace", "(", "self", ".", "_target_scope", ",", "''", ")", ")", "\n", "tf_update_target_fn", ".", "append", "(", "var_target", ".", "assign", "(", "var", ")", ")", "\n", "", "tf_update_target_fn", "=", "tf", ".", "group", "(", "*", "tf_update_target_fn", ")", "\n", "", "else", ":", "\n", "            ", "tf_target_vars", "=", "None", "\n", "tf_update_target_fn", "=", "None", "\n", "\n", "", "return", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "tf_target_vars", ",", "tf_update_target_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_ordered_dicts": [[849, 867], ["collections.OrderedDict", "enumerate", "collections.OrderedDict", "enumerate", "collections.OrderedDict", "enumerate", "collections.OrderedDict", "enumerate"], "methods", ["None"], ["", "def", "_graph_setup_ordered_dicts", "(", "self", ",", "tf_obs_vec", ",", "tf_goals", ",", "tf_goals_target", ",", "tf_actions", ")", ":", "\n", "        ", "obs_vec", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_obs_vec_keys", ")", ":", "\n", "            ", "obs_vec", "[", "key", "]", "=", "tf_obs_vec", "[", ":", ",", "-", "1", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "", "goals", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_goal_keys", ")", ":", "\n", "            ", "goals", "[", "key", "]", "=", "tf_goals", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "", "future_goals", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_goal_keys", ")", ":", "\n", "            ", "future_goals", "[", "key", "]", "=", "tf_goals_target", "[", ":", ",", ":", "-", "1", ",", "i", "]", "\n", "\n", "", "actions", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_action_keys", ")", ":", "\n", "            ", "actions", "[", "key", "]", "=", "tf_actions", "[", ":", ",", ":", ",", "i", "]", "\n", "\n", "", "return", "obs_vec", ",", "goals", ",", "future_goals", ",", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup": [[868, 977], ["tensorflow.get_default_session", "tensorflow.get_default_session", "gcg.tf.tf_utils.create_session_and_graph", "tensorflow.get_default_session.as_default", "tf_graph.as_default", "tensorflow.set_random_seed", "tensorflow.set_random_seed", "sorted", "gcg_policy.GCGPolicy._graph_setup_savers", "gcg_policy.GCGPolicy._graph_init_vars", "tensorflow.variable_scope", "tensorflow.variable_scope", "gcg_policy.GCGPolicy._graph_input_output_placeholders", "tensorflow.Variable", "tensorflow.Variable", "gcg_policy.GCGPolicy._graph_setup_ordered_dicts", "gcg_policy.GCGPolicy._graph_setup_policy", "gcg_policy.GCGPolicy._get_action_value", "gcg_policy.GCGPolicy._graph_setup_action_selection", "sorted", "sorted", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "collections.OrderedDict", "enumerate", "gcg_policy.GCGPolicy._graph_setup_target", "gcg_policy.GCGPolicy._graph_cost", "gcg_policy.GCGPolicy._graph_optimize", "len", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.create_session_and_graph", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_savers", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_init_vars", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_placeholders", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_ordered_dicts", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_policy", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_action_selection", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_target", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_cost", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_optimize"], ["", "def", "_graph_setup", "(", "self", ")", ":", "\n", "### create session and graph", "\n", "        ", "tf_sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "tf_sess", "is", "None", ":", "\n", "            ", "tf_sess", ",", "tf_graph", "=", "tf_utils", ".", "create_session_and_graph", "(", "gpu_device", "=", "self", ".", "_gpu_device", ",", "gpu_frac", "=", "self", ".", "_gpu_frac", ")", "\n", "", "tf_graph", "=", "tf_sess", ".", "graph", "\n", "\n", "with", "tf_sess", ".", "as_default", "(", ")", ",", "tf_graph", ".", "as_default", "(", ")", ":", "\n", "            ", "tf", ".", "set_random_seed", "(", "self", ".", "_seed", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_gcg_scope", ")", ":", "\n", "### create input output placeholders", "\n", "                ", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_actions_ph", ",", "tf_dones_ph", ",", "tf_goals_ph", ",", "tf_rewards_ph", ",", "tf_weights_ph", ",", "tf_obs_im_target_ph", ",", "tf_obs_vec_target_ph", ",", "tf_goals_target_ph", ",", "tf_episode_timesteps_ph", "=", "self", ".", "_graph_input_output_placeholders", "(", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "'{0}/global_step'", ".", "format", "(", "self", ".", "_gcg_scope", ")", ")", "\n", "\n", "obs_vec", ",", "goals", ",", "future_goals", ",", "actions", "=", "self", ".", "_graph_setup_ordered_dicts", "(", "tf_obs_vec_ph", ",", "\n", "tf_goals_ph", ",", "\n", "tf_goals_target_ph", ",", "\n", "tf_actions_ph", ")", "\n", "\n", "### setup policy", "\n", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "=", "self", ".", "_graph_setup_policy", "(", "obs_vec", ",", "goals", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "tf_actions_ph", ")", "\n", "action_value", "=", "self", ".", "_get_action_value", "(", "tf_actions_ph", ",", "values", ",", "yhats", ",", "bhats", ",", "obs_vec", ",", "goals", ")", "\n", "\n", "### get action", "\n", "tf_get_action", ",", "tf_get_action_value", ",", "tf_get_action_reset_ops", ",", "tf_get_action_all", ",", "tf_get_action_value_all", ",", "tf_get_action_yhats_all", ",", "tf_get_action_bhats_all", "=", "self", ".", "_graph_setup_action_selection", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "\n", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "tf_episode_timesteps_ph", ")", "\n", "\n", "### get policy variables", "\n", "tf_inference_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "self", ".", "_policy_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "tf_trainable_policy_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "self", ".", "_policy_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "\n", "if", "not", "self", ".", "_inference_only", ":", "\n", "                    ", "assert", "(", "len", "(", "tf_trainable_policy_vars", ")", ">", "0", ")", "\n", "\n", "target_obs_vec", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_obs_vec_keys", ")", ":", "\n", "                        ", "target_obs_vec", "[", "key", "]", "=", "tf_obs_vec_target_ph", "[", ":", ",", "-", "self", ".", "_N", ":", ",", "i", "]", "\n", "\n", "### setup target", "\n", "", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "tf_target_vars", ",", "tf_update_target_fn", "=", "self", ".", "_graph_setup_target", "(", "tf_obs_im_target_ph", ",", "tf_obs_vec_target_ph", ",", "\n", "tf_goals_target_ph", ",", "target_obs_vec", ",", "goals", ",", "tf_inference_vars", ")", "\n", "\n", "### optimization", "\n", "tf_cost_with_reg", ",", "tf_cost", ",", "tf_costs", ",", "tf_costs_yhat", ",", "tf_costs_bhat", ",", "tf_accs_yhat", ",", "tf_rew_errors", "=", "self", ".", "_graph_cost", "(", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", ",", "obs_vec", ",", "goals", ",", "future_goals", ",", "\n", "actions", ",", "tf_obs_vec_target_ph", ",", "tf_rewards_ph", ",", "tf_dones_ph", ",", "\n", "target_obs_vec", ",", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "tf_weights_ph", ")", "\n", "tf_opt", ",", "tf_lr_ph", "=", "self", ".", "_graph_optimize", "(", "tf_cost_with_reg", ",", "tf_trainable_policy_vars", ")", "\n", "", "else", ":", "\n", "                    ", "tf_cost_with_reg", ",", "tf_cost", ",", "tf_costs", ",", "tf_costs_yhat", ",", "tf_costs_bhat", ",", "tf_accs_yhat", "=", "None", ",", "None", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "tf_target_vars", "=", "tf_update_target_fn", "=", "tf_cost", "=", "tf_opt", "=", "tf_lr_ph", "=", "tf_rew_errors", "=", "None", "\n", "\n", "### savers", "\n", "", "", "tf_all_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "_gcg_scope", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "tf_savers_dict", "=", "self", ".", "_graph_setup_savers", "(", "tf_inference_vars", ",", "tf_all_vars", ",", "self", ".", "_inference_only", ")", "\n", "\n", "### initialize", "\n", "self", ".", "_graph_init_vars", "(", "tf_sess", ")", "\n", "\n", "### what to return", "\n", "", "return", "{", "\n", "'sess'", ":", "tf_sess", ",", "\n", "'graph'", ":", "tf_graph", ",", "\n", "'obs_im_ph'", ":", "tf_obs_im_ph", ",", "\n", "'obs_vec_ph'", ":", "tf_obs_vec_ph", ",", "\n", "'goals_ph'", ":", "tf_goals_ph", ",", "\n", "'actions_ph'", ":", "tf_actions_ph", ",", "\n", "'dones_ph'", ":", "tf_dones_ph", ",", "\n", "'rewards_ph'", ":", "tf_rewards_ph", ",", "\n", "'weights_ph'", ":", "tf_weights_ph", ",", "\n", "'obs_im_target_ph'", ":", "tf_obs_im_target_ph", ",", "\n", "'obs_vec_target_ph'", ":", "tf_obs_vec_target_ph", ",", "\n", "'goals_target_ph'", ":", "tf_goals_target_ph", ",", "\n", "'episode_timesteps_ph'", ":", "tf_episode_timesteps_ph", ",", "\n", "'yhats'", ":", "yhats", ",", "\n", "'bhats'", ":", "bhats", ",", "\n", "'values'", ":", "values", ",", "\n", "'action_value'", ":", "action_value", ",", "\n", "'get_action'", ":", "tf_get_action", ",", "\n", "'get_action_value'", ":", "tf_get_action_value", ",", "\n", "'get_action_reset_ops'", ":", "tf_get_action_reset_ops", ",", "\n", "'get_action_all'", ":", "tf_get_action_all", ",", "\n", "'get_action_value_all'", ":", "tf_get_action_value_all", ",", "\n", "'get_action_yhats_all'", ":", "tf_get_action_yhats_all", ",", "\n", "'get_action_bhats_all'", ":", "tf_get_action_bhats_all", ",", "\n", "'update_target_fn'", ":", "tf_update_target_fn", ",", "\n", "'cost_with_reg'", ":", "tf_cost_with_reg", ",", "\n", "'cost'", ":", "tf_cost", ",", "\n", "'costs'", ":", "tf_costs", ",", "\n", "'costs_yhat'", ":", "tf_costs_yhat", ",", "\n", "'costs_bhat'", ":", "tf_costs_bhat", ",", "\n", "'accs_yhat'", ":", "tf_accs_yhat", ",", "\n", "'rew_errors'", ":", "tf_rew_errors", ",", "\n", "'opt'", ":", "tf_opt", ",", "\n", "'lr_ph'", ":", "tf_lr_ph", ",", "\n", "'savers_dict'", ":", "tf_savers_dict", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.update_target": [[983, 986], ["gcg_policy.GCGPolicy._tf_dict[].run"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "update_target", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_use_target", "and", "not", "self", ".", "_inference_only", "and", "self", ".", "_tf_dict", "[", "'update_target_fn'", "]", ":", "\n", "            ", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "self", ".", "_tf_dict", "[", "'update_target_fn'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.train_step": [[987, 1045], ["gcg_policy.GCGPolicy._tf_dict[].run", "numpy.isfinite", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._lr_schedule.value", "numpy.isnan().any", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value"], ["", "", "def", "train_step", "(", "self", ",", "step", ",", "steps", ",", "observations", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "weights", ")", ":", "\n", "        ", "\"\"\"\n        :param steps: [batch_size, N+1]\n        :param observations_im: [batch_size, N+1 + obs_history_len-1, obs_im_dim]\n        :param observations_vec: [batch_size, N+1 + obs_history_len-1, obs_vec_dim]\n        :param goals: [batch_size, N+1, goal_dim]\n        :param actions: [batch_size, H+1, action_dim]\n        :param rewards: [batch_size, N+1]\n        :param dones: [batch_size, N+1]\n        \"\"\"", "\n", "for", "v", "in", "(", "steps", ",", "observations", "[", "0", "]", ",", "observations", "[", "1", "]", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "weights", ")", ":", "\n", "            ", "assert", "not", "np", ".", "isnan", "(", "v", ")", ".", "any", "(", ")", ",", "'{0} is nan in train_step'", ".", "format", "(", "v", ")", "\n", "\n", "", "observations_im", ",", "observations_vec", "=", "observations", "\n", "feed_dict", "=", "{", "\n", "### parameters", "\n", "self", ".", "_tf_dict", "[", "'lr_ph'", "]", ":", "self", ".", "_lr_schedule", ".", "value", "(", "step", ")", ",", "\n", "### policy", "\n", "self", ".", "_tf_dict", "[", "'obs_im_ph'", "]", ":", "observations_im", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_ph'", "]", ":", "observations_vec", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'actions_ph'", "]", ":", "actions", "[", ":", ",", ":", "self", ".", "_H", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'dones_ph'", "]", ":", "dones", "[", ":", ",", ":", "self", ".", "_N", "+", "1", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_ph'", "]", ":", "goals", "[", ":", ",", "0", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'rewards_ph'", "]", ":", "rewards", "[", ":", ",", ":", "self", ".", "_N", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'weights_ph'", "]", ":", "weights", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_target_ph'", "]", ":", "observations_vec", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_target_ph'", "]", ":", "goals", ",", "\n", "}", "\n", "if", "self", ".", "_use_target", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_tf_dict", "[", "'obs_im_target_ph'", "]", "]", "=", "observations_im", "\n", "\n", "", "rew_errors", ",", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", ",", "_", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'rew_errors'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'cost_with_reg'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'cost'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_bhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'accs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'opt'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "assert", "(", "np", ".", "isfinite", "(", "cost", ")", ")", "\n", "\n", "self", ".", "_log_stats", "[", "'cost'", "]", ".", "append", "(", "cost", ")", "\n", "self", ".", "_log_stats", "[", "'cost with reg'", "]", ".", "append", "(", "cost_with_reg", ")", "\n", "self", ".", "_log_stats", "[", "'cost fraction reg'", "]", ".", "append", "(", "(", "cost_with_reg", "-", "cost", ")", "/", "cost_with_reg", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "name", "=", "output", "[", "'name'", "]", "\n", "if", "name", "in", "costs", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost yhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "accs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} acc yhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "accs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_bhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost bhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_bhat", "[", "name", "]", ")", "\n", "\n", "", "", "return", "rew_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.eval_holdout": [[1046, 1089], ["gcg_policy.GCGPolicy._tf_dict[].run", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "numpy.ones", "numpy.isnan().any", "len", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "gcg_policy.GCGPolicy._log_stats[].append", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "eval_holdout", "(", "self", ",", "step", ",", "steps", ",", "observations", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "for", "v", "in", "(", "steps", ",", "observations", "[", "0", "]", ",", "observations", "[", "1", "]", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ")", ":", "\n", "            ", "assert", "not", "np", ".", "isnan", "(", "v", ")", ".", "any", "(", ")", ",", "'{0} is nan in eval_holdout'", ".", "format", "(", "v", ")", "\n", "\n", "", "observations_im", ",", "observations_vec", "=", "observations", "\n", "feed_dict", "=", "{", "\n", "### policy", "\n", "self", ".", "_tf_dict", "[", "'obs_im_ph'", "]", ":", "observations_im", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_ph'", "]", ":", "observations_vec", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'actions_ph'", "]", ":", "actions", "[", ":", ",", ":", "self", ".", "_H", ",", ":", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'dones_ph'", "]", ":", "dones", "[", ":", ",", ":", "self", ".", "_N", "+", "1", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_ph'", "]", ":", "goals", "[", ":", ",", "0", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'rewards_ph'", "]", ":", "rewards", "[", ":", ",", ":", "self", ".", "_N", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'weights_ph'", "]", ":", "np", ".", "ones", "(", "len", "(", "steps", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_target_ph'", "]", ":", "observations_vec", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_target_ph'", "]", ":", "goals", ",", "\n", "}", "\n", "if", "self", ".", "_use_target", ":", "\n", "            ", "feed_dict", "[", "self", ".", "_tf_dict", "[", "'obs_im_target_ph'", "]", "]", "=", "observations_im", "\n", "\n", "", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'cost_with_reg'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'cost'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_bhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'accs_yhat'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "self", ".", "_log_stats", "[", "'cost holdout'", "]", ".", "append", "(", "cost", ")", "\n", "self", ".", "_log_stats", "[", "'cost with reg holdout'", "]", ".", "append", "(", "cost_with_reg", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "name", "=", "output", "[", "'name'", "]", "\n", "if", "name", "in", "costs", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost yhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "accs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} acc yhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "accs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_bhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost bhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_bhat", "[", "name", "]", ")", "\n", "\n", "", "", "return", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.reset_weights": [[1090, 1095], ["tf_sess.as_default", "tf_graph.as_default", "gcg_policy.GCGPolicy._graph_init_vars"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_init_vars"], ["", "def", "reset_weights", "(", "self", ")", ":", "\n", "        ", "tf_sess", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", "\n", "tf_graph", "=", "tf_sess", ".", "graph", "\n", "with", "tf_sess", ".", "as_default", "(", ")", ",", "tf_graph", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "_graph_init_vars", "(", "tf_sess", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.get_action": [[1100, 1108], ["gcg_policy.GCGPolicy.get_actions"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_actions"], ["", "", "def", "get_action", "(", "self", ",", "step", ",", "current_episode_step", ",", "observation", ",", "goal", ",", "explore", ",", "debug", "=", "False", ")", ":", "\n", "        ", "chosen_actions", ",", "chosen_values", ",", "action_infos", "=", "self", ".", "get_actions", "(", "step", ",", "\n", "[", "current_episode_step", "]", ",", "\n", "(", "[", "observation", "[", "0", "]", "]", ",", "[", "observation", "[", "1", "]", "]", ")", ",", "\n", "[", "goal", "]", ",", "\n", "explore", "=", "explore", ",", "\n", "debug", "=", "debug", ")", "\n", "return", "chosen_actions", "[", "0", "]", ",", "chosen_values", "[", "0", "]", ",", "action_infos", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.get_actions": [[1109, 1150], ["numpy.isnan().any", "numpy.isnan().any", "gcg_policy.GCGPolicy._goal_keys.index", "gcg_policy.GCGPolicy._tf_dict[].run", "gcg_policy.GCGPolicy._tf_dict[].run", "enumerate", "[].any", "range", "collections.OrderedDict", "collections.OrderedDict", "es.add_exploration", "numpy.isnan", "numpy.isnan", "len", "numpy.isnan", "yhats_all.keys", "bhats_all.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run", "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.epsilon_greedy_strategy.EpsilonGreedyStrategy.add_exploration"], ["", "def", "get_actions", "(", "self", ",", "step", ",", "current_episode_steps", ",", "observations", ",", "goals", ",", "explore", ",", "debug", "=", "False", ")", ":", "\n", "        ", "assert", "(", "not", "np", ".", "isnan", "(", "observations", "[", "0", "]", ")", ".", "any", "(", ")", ")", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "observations", "[", "1", "]", ")", ".", "any", "(", ")", ")", "\n", "for", "input_goal_key", "in", "self", ".", "_goals_to_input", ":", "\n", "            ", "idx", "=", "self", ".", "_goal_keys", ".", "index", "(", "input_goal_key", ")", "\n", "assert", "(", "not", "np", ".", "isnan", "(", "goals", ")", "[", ":", ",", "idx", "]", ".", "any", "(", ")", ")", "\n", "\n", "", "ds", "=", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "current_episode_steps", ")", ")", "]", "\n", "observations_im", ",", "observations_vec", "=", "observations", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_tf_dict", "[", "'obs_im_ph'", "]", ":", "observations_im", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_ph'", "]", ":", "observations_vec", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_ph'", "]", ":", "goals", ",", "\n", "self", ".", "_tf_dict", "[", "'episode_timesteps_ph'", "]", ":", "current_episode_steps", "\n", "}", "\n", "\n", "if", "not", "debug", ":", "\n", "            ", "actions", ",", "values", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'get_action'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_value'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "", "else", ":", "\n", "            ", "actions", ",", "values", ",", "actions_all", ",", "values_all", ",", "yhats_all", ",", "bhats_all", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'get_action'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_value'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_all'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_value_all'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_yhats_all'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'get_action_bhats_all'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "for", "i", ",", "d_i", "in", "enumerate", "(", "ds", ")", ":", "\n", "                ", "d_i", "[", "'actions_all'", "]", "=", "actions_all", "\n", "d_i", "[", "'values_all'", "]", "=", "values_all", "[", "i", "]", "\n", "d_i", "[", "'yhats_all'", "]", "=", "OrderedDict", "(", "[", "(", "k", ",", "yhats_all", "[", "k", "]", "[", "i", "]", ")", "for", "k", "in", "yhats_all", ".", "keys", "(", ")", "]", ")", "\n", "d_i", "[", "'bhats_all'", "]", "=", "OrderedDict", "(", "[", "(", "k", ",", "bhats_all", "[", "k", "]", "[", "i", "]", ")", "for", "k", "in", "bhats_all", ".", "keys", "(", ")", "]", ")", "\n", "\n", "", "", "if", "explore", ":", "\n", "            ", "for", "es", "in", "self", ".", "_exploration_stragies", ":", "\n", "                ", "actions", "=", "es", ".", "add_exploration", "(", "step", ",", "actions", ")", "\n", "\n", "", "", "return", "actions", ",", "values", ",", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.reset_get_action": [[1151, 1153], ["gcg_policy.GCGPolicy._tf_dict[].run"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "reset_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "self", ".", "_tf_dict", "[", "'get_action_reset_ops'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.get_model_outputs": [[1158, 1174], ["gcg_policy.GCGPolicy._tf_dict[].run"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "get_model_outputs", "(", "self", ",", "observations", ",", "actions", ",", "goals", ")", ":", "\n", "        ", "observations_im", ",", "observations_vec", "=", "observations", "\n", "feed_dict", "=", "{", "\n", "self", ".", "_tf_dict", "[", "'obs_im_ph'", "]", ":", "observations_im", ",", "\n", "self", ".", "_tf_dict", "[", "'obs_vec_ph'", "]", ":", "observations_vec", ",", "\n", "self", ".", "_tf_dict", "[", "'actions_ph'", "]", ":", "actions", ",", "\n", "self", ".", "_tf_dict", "[", "'goals_ph'", "]", ":", "goals", ",", "\n", "}", "\n", "\n", "yhats", ",", "bhats", ",", "values", ",", "action_value", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'yhats'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'bhats'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'values'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'action_value'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "yhats", ",", "bhats", ",", "values", ",", "action_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._saver_ckpt_name": [[1179, 1183], ["os.path.splitext"], "methods", ["None"], ["", "def", "_saver_ckpt_name", "(", "self", ",", "ckpt_name", ",", "saver_name", ")", ":", "\n", "        ", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "ckpt_name", ")", "\n", "saver_ckpt_name", "=", "'{0}_{1}{2}'", ".", "format", "(", "name", ",", "saver_name", ",", "ext", ")", "\n", "return", "saver_ckpt_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.save": [[1184, 1188], ["saver.save", "gcg_policy.GCGPolicy._saver_ckpt_name"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.save", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._saver_ckpt_name"], ["", "def", "save", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ")", ":", "\n", "        ", "saver_name", "=", "'train'", "if", "train", "else", "'inference'", "\n", "saver", "=", "self", ".", "_tf_dict", "[", "'savers_dict'", "]", "[", "saver_name", "]", "\n", "saver", ".", "save", "(", "self", ".", "_tf_dict", "[", "'sess'", "]", ",", "self", ".", "_saver_ckpt_name", "(", "ckpt_name", ",", "saver_name", ")", ",", "write_meta_graph", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.restore": [[1189, 1202], ["saver.restore", "gcg_policy.GCGPolicy._saver_ckpt_name"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.restore", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._saver_ckpt_name"], ["", "def", "restore", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ",", "restore_subgraphs", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param: restore_subgraphs: 'image', 'observation', 'action', 'rnn', 'output\n        \"\"\"", "\n", "name", "=", "'train'", "if", "train", "else", "'inference'", "\n", "if", "restore_subgraphs", "is", "None", ":", "\n", "            ", "restore_subgraphs", "=", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "restore_subgraphs", "=", "[", "'{0}_{1}'", ".", "format", "(", "name", ",", "subgraph", ")", "for", "subgraph", "in", "restore_subgraphs", "]", "\n", "\n", "", "for", "saver_name", "in", "restore_subgraphs", ":", "\n", "            ", "saver", "=", "self", ".", "_tf_dict", "[", "'savers_dict'", "]", "[", "saver_name", "]", "\n", "saver", ".", "restore", "(", "self", ".", "_tf_dict", "[", "'sess'", "]", ",", "self", ".", "_saver_ckpt_name", "(", "ckpt_name", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.terminate": [[1203, 1205], ["gcg_policy.GCGPolicy._tf_dict[].close"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close"], ["", "", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy.log": [[1210, 1218], ["sorted", "gcg_policy.GCGPolicy._log_stats.clear", "gcg_policy.GCGPolicy._log_stats.keys", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "numpy.mean", "numpy.std", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "sorted", "(", "self", ".", "_log_stats", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "k", "==", "'Depth'", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "k", "+", "'Mean'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "k", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "k", "+", "'Std'", ",", "np", ".", "std", "(", "self", ".", "_log_stats", "[", "k", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "record_tabular", "(", "k", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "k", "]", ")", ")", "\n", "", "", "self", ".", "_log_stats", ".", "clear", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord.__init__": [[18, 48], ["kwargs.get", "gcg.policies.gcg_policy.GCGPolicy.__init__", "random.shuffle", "random.shuffle", "os.path.join", "gcg.data.logger.logger.debug", "os.listdir", "gcg_policy_tfrecord.GCGPolicyTfrecord._tfrecord_train_fnames.append", "os.path.splitext", "os.path.splitext", "gcg_policy_tfrecord.GCGPolicyTfrecord._tfrecord_holdout_fnames.append", "ValueError", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_batch_size", "=", "None", "\n", "self", ".", "_tfrecord_train_fnames", "=", "[", "]", "\n", "self", ".", "_tfrecord_holdout_fnames", "=", "[", "]", "\n", "\n", "inference_only", "=", "kwargs", ".", "get", "(", "'inference_only'", ",", "False", ")", "\n", "if", "not", "inference_only", ":", "\n", "            ", "self", ".", "_batch_size", "=", "kwargs", "[", "'batch_size'", "]", "\n", "\n", "for", "folder", "in", "kwargs", "[", "'tfrecord_folders'", "]", ":", "\n", "                ", "tfrecord_fnames", "=", "[", "os", ".", "path", ".", "join", "(", "folder", ",", "fname", ")", "for", "fname", "in", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "fname", ")", "[", "1", "]", "==", "'.tfrecord'", "]", "\n", "\n", "for", "tfrecord_fname", "in", "tfrecord_fnames", ":", "\n", "                    ", "logger", ".", "debug", "(", "'Tfrecord {0}'", ".", "format", "(", "tfrecord_fname", ")", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "FileManager", ".", "train_rollouts_fname_suffix", ")", "[", "0", "]", "in", "os", ".", "path", ".", "splitext", "(", "tfrecord_fname", ")", "[", "0", "]", ":", "\n", "                        ", "self", ".", "_tfrecord_train_fnames", ".", "append", "(", "tfrecord_fname", ")", "\n", "", "elif", "os", ".", "path", ".", "splitext", "(", "FileManager", ".", "eval_rollouts_fname_suffix", ")", "[", "0", "]", "in", "os", ".", "path", ".", "splitext", "(", "tfrecord_fname", ")", "[", "0", "]", ":", "\n", "                        ", "self", ".", "_tfrecord_holdout_fnames", ".", "append", "(", "tfrecord_fname", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'tfrecord {0} does not end in {1} or {2}'", ".", "format", "(", "\n", "tfrecord_fname", ",", "\n", "os", ".", "path", ".", "splitext", "(", "FileManager", ".", "train_rollouts_fname_suffix", ")", "[", "0", "]", ",", "\n", "os", ".", "path", ".", "splitext", "(", "FileManager", ".", "eval_rollouts_fname_suffix", ")", "[", "0", "]", ")", "\n", ")", "\n", "\n", "", "", "", "random", ".", "shuffle", "(", "self", ".", "_tfrecord_train_fnames", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "_tfrecord_holdout_fnames", ")", "\n", "\n", "", "super", "(", "GCGPolicyTfrecord", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_placeholders": [[53, 64], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_graph_input_output_placeholders", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'input_output_placeholders'", ")", ":", "\n", "### policy inputs", "\n", "            ", "tf_obs_im_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "None", ",", "self", ".", "_obs_history_len", ",", "self", ".", "_obs_im_dim", "]", ",", "name", "=", "'tf_obs_im_ph'", ")", "\n", "tf_obs_vec_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_obs_history_len", ",", "self", ".", "_obs_vec_dim", "]", ",", "name", "=", "'tf_obs_vec_ph'", ")", "\n", "tf_actions_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_H", ",", "self", ".", "_action_dim", "]", ",", "name", "=", "'tf_actions_ph'", ")", "\n", "tf_goals_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "_goal_dim", "]", ",", "name", "=", "'tf_goals_ph'", ")", "\n", "### episode timesteps", "\n", "tf_episode_timesteps_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'tf_episode_timesteps'", ")", "\n", "\n", "", "return", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_actions_ph", ",", "tf_goals_ph", ",", "tf_episode_timesteps_ph", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_tfrecord": [[65, 201], ["tensorflow.data.TFRecordDataset", "dataset.prefetch.prefetch.map", "dataset.prefetch.prefetch.map", "dataset.prefetch.prefetch.map", "dataset.prefetch.prefetch.apply", "dataset.prefetch.prefetch.apply", "dataset.prefetch.prefetch.batch", "dataset.prefetch.prefetch.prefetch", "tensorflow.data.Iterator.from_structure", "tensorflow.data.Iterator.from_structure.get_next", "zip", "tensorflow.data.Iterator.from_structure.make_initializer", "tensorflow.cast", "tensorflow.ones", "tensorflow.parse_single_sequence_example", "d.items", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "d.items", "tensorflow.TensorShape", "tensorflow.contrib.data.unbatch", "tensorflow.contrib.data.shuffle_and_repeat", "next_element_i.set_shape", "tensorflow.FixedLenSequenceFeature", "set_shape"], "methods", ["None"], ["", "def", "_graph_input_output_tfrecord", "(", "self", ",", "tfrecord_fnames", ",", "\n", "num_parallel_calls", "=", "4", ",", "shuffle_buffer_size", "=", "10000", ",", "prefetch_buffer_size_multiplier", "=", "4", ")", ":", "\n", "        ", "def", "parse", "(", "ex", ")", ":", "\n", "            ", "sequence_features", "=", "{", "k", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "1", "]", ",", "dtype", "=", "tf", ".", "string", ")", "\n", "for", "k", "in", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", "}", "\n", "\n", "context_parsed", ",", "sequence_parsed", "=", "tf", ".", "parse_single_sequence_example", "(", "\n", "serialized", "=", "ex", ",", "\n", "sequence_features", "=", "sequence_features", "\n", ")", "\n", "\n", "sequence_parsed", "=", "{", "k", ":", "tf", ".", "decode_raw", "(", "sequence_parsed", "[", "k", "]", ",", "tf_dtype", ")", "[", ":", ",", "0", "]", "for", "k", ",", "tf_dtype", "in", "\n", "zip", "(", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", ",", "GCGPolicyTfrecord", ".", "tfrecord_feature_tf_types", ")", "}", "\n", "\n", "def", "set_shape", "(", "tensor", ",", "shape", ")", ":", "\n", "                ", "if", "len", "(", "shape", ")", "==", "0", ":", "\n", "                    ", "tensor", ".", "set_shape", "(", "[", "None", ",", "1", "]", ")", "\n", "tensor", "=", "tensor", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                    ", "tensor", ".", "set_shape", "(", "[", "None", "]", "+", "shape", ")", "\n", "", "return", "tensor", "\n", "\n", "", "for", "k", ",", "shape", "in", "[", "(", "'observations_im'", ",", "[", "self", ".", "_obs_im_dim", "]", ")", ",", "\n", "(", "'observations_vec'", ",", "[", "self", ".", "_obs_vec_dim", "]", ")", ",", "\n", "(", "'actions'", ",", "[", "self", ".", "_action_dim", "]", ")", ",", "\n", "(", "'dones'", ",", "[", "]", ")", ",", "\n", "(", "'goals'", ",", "[", "self", ".", "_goal_dim", "]", ")", ",", "\n", "(", "'rewards'", ",", "[", "]", ")", "]", ":", "\n", "                ", "sequence_parsed", "[", "k", "]", "=", "set_shape", "(", "sequence_parsed", "[", "k", "]", ",", "shape", ")", "\n", "\n", "", "return", "[", "sequence_parsed", "[", "k", "]", "for", "k", "in", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", "]", "\n", "\n", "", "def", "pad", "(", "observations_im", ",", "observations_vec", ",", "actions", ",", "dones", ",", "goals", ",", "rewards", ")", ":", "\n", "            ", "d", "=", "{", "\n", "'observations_im'", ":", "observations_im", ",", "\n", "'observations_vec'", ":", "observations_vec", ",", "\n", "'actions'", ":", "actions", ",", "\n", "'dones'", ":", "dones", ",", "\n", "'goals'", ":", "goals", ",", "\n", "'rewards'", ":", "rewards", "\n", "}", "\n", "\n", "# pre-pend obs_history_len - 1", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "v", ".", "get_shape", "(", ")", ")", "==", "1", ":", "\n", "                    ", "pad_shape", "=", "[", "self", ".", "_obs_history_len", "]", "\n", "", "elif", "len", "(", "v", ".", "get_shape", "(", ")", ")", "==", "2", ":", "\n", "                    ", "pad_shape", "=", "[", "self", ".", "_obs_history_len", ",", "v", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "\n", "", "d", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "pad_shape", ",", "dtype", "=", "v", ".", "dtype", ")", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# post-pend N", "\n", "\n", "", "v", "=", "d", "[", "'observations_im'", "]", "\n", "d", "[", "'observations_im'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "tf", ".", "zeros", "(", "[", "self", ".", "_N", ",", "v", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "]", ",", "dtype", "=", "v", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "v", "=", "d", "[", "'observations_vec'", "]", "\n", "d", "[", "'observations_vec'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "tf", ".", "zeros", "(", "[", "self", ".", "_N", ",", "v", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "]", ",", "dtype", "=", "v", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "v", "=", "d", "[", "'rewards'", "]", "\n", "d", "[", "'rewards'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "tf", ".", "zeros", "(", "self", ".", "_N", ",", "dtype", "=", "v", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "v", "=", "d", "[", "'dones'", "]", "\n", "d", "[", "'dones'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "tf", ".", "ones", "(", "self", ".", "_N", ",", "dtype", "=", "v", ".", "dtype", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "v", "=", "d", "[", "'actions'", "]", "\n", "d", "[", "'actions'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "self", ".", "_graph_generate_random_actions", "(", "[", "self", ".", "_N", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "v", "=", "d", "[", "'goals'", "]", "\n", "d", "[", "'goals'", "]", "=", "tf", ".", "concat", "(", "[", "v", ",", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "v", "[", "-", "1", "]", ",", "axis", "=", "0", ")", ",", "(", "self", ".", "_N", ",", "1", ")", ")", ",", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "return", "[", "d", "[", "k", "]", "for", "k", "in", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", "]", "\n", "\n", "", "subsequence_length", "=", "self", ".", "_obs_history_len", "+", "self", ".", "_N", "\n", "def", "subsequence_generator", "(", "observations_im", ",", "observations_vec", ",", "actions", ",", "dones", ",", "goals", ",", "rewards", ")", ":", "\n", "            ", "d", "=", "{", "\n", "'observations_im'", ":", "observations_im", ",", "\n", "'observations_vec'", ":", "observations_vec", ",", "\n", "'actions'", ":", "actions", ",", "\n", "'dones'", ":", "dones", ",", "\n", "'goals'", ":", "goals", ",", "\n", "'rewards'", ":", "rewards", "\n", "}", "\n", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "                ", "d", "[", "k", "]", "=", "np", ".", "array", "(", "[", "v", "[", "h", "-", "self", ".", "_obs_history_len", "+", "1", ":", "h", "+", "self", ".", "_N", "+", "1", "]", "\n", "for", "h", "in", "range", "(", "self", ".", "_obs_history_len", ",", "len", "(", "v", ")", "-", "self", ".", "_N", "-", "1", ")", "]", ")", "\n", "assert", "d", "[", "k", "]", ".", "shape", "[", "1", "]", "==", "subsequence_length", "\n", "\n", "", "return", "[", "d", "[", "k", "]", "for", "k", "in", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", "]", "\n", "\n", "", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "tfrecord_fnames", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "parse", ",", "num_parallel_calls", "=", "num_parallel_calls", ")", "\n", "dataset_shapes", "=", "dataset", ".", "output_shapes", "\n", "dataset", "=", "dataset", ".", "map", "(", "pad", ",", "num_parallel_calls", "=", "num_parallel_calls", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "lambda", "observations_im", ",", "observations_vec", ",", "actions", ",", "dones", ",", "goals", ",", "rewards", ":", "\n", "tf", ".", "py_func", "(", "subsequence_generator", ",", "\n", "[", "observations_im", ",", "observations_vec", ",", "actions", ",", "dones", ",", "goals", ",", "rewards", "]", ",", "\n", "Tout", "=", "GCGPolicyTfrecord", ".", "tfrecord_feature_tf_types", ")", ",", "\n", "num_parallel_calls", "=", "num_parallel_calls", ")", "\n", "dataset_shapes", "=", "[", "tf", ".", "TensorShape", "(", "s", ".", "as_list", "(", ")", "[", ":", "1", "]", "+", "[", "subsequence_length", "]", "+", "s", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "for", "s", "in", "dataset_shapes", "]", "\n", "dataset", "=", "dataset", ".", "apply", "(", "tf", ".", "contrib", ".", "data", ".", "unbatch", "(", ")", ")", "\n", "dataset", "=", "dataset", ".", "apply", "(", "tf", ".", "contrib", ".", "data", ".", "shuffle_and_repeat", "(", "buffer_size", "=", "shuffle_buffer_size", ")", ")", "\n", "dataset", "=", "dataset", ".", "batch", "(", "self", ".", "_batch_size", ")", "\n", "dataset", "=", "dataset", ".", "prefetch", "(", "buffer_size", "=", "prefetch_buffer_size_multiplier", "*", "self", ".", "_batch_size", ")", "\n", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_structure", "(", "dataset", ".", "output_types", ",", "dataset", ".", "output_shapes", ")", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "for", "next_element_i", ",", "shape_i", "in", "zip", "(", "next_element", ",", "dataset_shapes", ")", ":", "\n", "            ", "next_element_i", ".", "set_shape", "(", "shape_i", ")", "\n", "\n", "", "dataset_init_op", "=", "iterator", ".", "make_initializer", "(", "dataset", ")", "\n", "\n", "assert", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", "==", "(", "'observations_im'", ",", "'observations_vec'", ",", "'actions'", ",", "'dones'", ",", "'goals'", ",", "'rewards'", ")", "\n", "\n", "ss_obs_im", ",", "ss_obs_vec", ",", "ss_actions", ",", "ss_dones", ",", "ss_goals", ",", "ss_rewards", "=", "next_element", "\n", "\n", "ss_dones", "=", "tf", ".", "cast", "(", "ss_dones", ",", "tf", ".", "bool", ")", "\n", "\n", "tf_obs_im_tr", "=", "ss_obs_im", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", "\n", "tf_obs_vec_tr", "=", "ss_obs_vec", "[", ":", ",", ":", "self", ".", "_obs_history_len", ",", ":", "]", "\n", "tf_actions_tr", "=", "ss_actions", "[", ":", ",", "self", ".", "_obs_history_len", "-", "1", ":", "self", ".", "_obs_history_len", "-", "1", "+", "self", ".", "_H", ",", ":", "]", "\n", "tf_dones_tr", "=", "ss_dones", "[", ":", ",", "self", ".", "_obs_history_len", "-", "1", ":", "self", ".", "_obs_history_len", "-", "1", "+", "self", ".", "_N", "+", "1", "]", "\n", "tf_goals_tr", "=", "ss_goals", "[", ":", ",", "self", ".", "_obs_history_len", "-", "1", ",", ":", "]", "\n", "tf_rewards_tr", "=", "ss_rewards", "[", ":", ",", "self", ".", "_obs_history_len", "-", "1", ":", "self", ".", "_obs_history_len", "-", "1", "+", "self", ".", "_N", "]", "\n", "tf_weights_tr", "=", "tf", ".", "ones", "(", "self", ".", "_batch_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "tf_obs_im_target_tr", "=", "ss_obs_im", "\n", "tf_obs_vec_target_tr", "=", "ss_obs_vec", "\n", "tf_goals_target_tr", "=", "ss_goals", "[", ":", ",", "self", ".", "_obs_history_len", "-", "1", ":", "self", ".", "_obs_history_len", "-", "1", "+", "self", ".", "_N", "+", "1", "]", "\n", "tf_episode_timesteps_tr", "=", "None", "# fill this in if we ever do use it", "\n", "\n", "return", "dataset_init_op", ",", "tf_obs_im_tr", ",", "tf_obs_vec_tr", ",", "tf_actions_tr", ",", "tf_dones_tr", ",", "tf_goals_tr", ",", "tf_rewards_tr", ",", "tf_weights_tr", ",", "tf_obs_im_target_tr", ",", "tf_obs_vec_target_tr", ",", "tf_goals_target_tr", ",", "tf_episode_timesteps_tr", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_feed_dict": [[204, 256], ["gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_placeholders", "tensorflow.Variable", "collections.OrderedDict", "enumerate", "collections.OrderedDict", "enumerate", "collections.OrderedDict", "enumerate", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_policy", "gcg_policy_tfrecord.GCGPolicyTfrecord._get_action_value", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_action_selection"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_placeholders", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_policy", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._get_action_value", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_action_selection"], ["", "def", "_graph_setup_feed_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        this part of the setup is needed for get_actions(...) and get_model_outputs(...)\n        \"\"\"", "\n", "\n", "### create input output placeholders", "\n", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_actions_ph", ",", "tf_goals_ph", ",", "tf_episode_timesteps_ph", "=", "self", ".", "_graph_input_output_placeholders", "(", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "'{0}/global_step'", ".", "format", "(", "self", ".", "_gcg_scope", ")", ")", "\n", "\n", "obs_vec", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_obs_vec_keys", ")", ":", "\n", "            ", "obs_vec", "[", "key", "]", "=", "tf_obs_vec_ph", "[", ":", ",", "0", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "", "goals", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_goal_keys", ")", ":", "\n", "            ", "goals", "[", "key", "]", "=", "tf_goals_ph", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "\n", "", "actions", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_action_keys", ")", ":", "\n", "            ", "actions", "[", "key", "]", "=", "tf_actions_ph", "[", ":", ",", ":", ",", "i", "]", "\n", "\n", "### setup policy", "\n", "", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "=", "self", ".", "_graph_setup_policy", "(", "obs_vec", ",", "goals", ",", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "tf_goals_ph", ",", "tf_actions_ph", ",", "\n", "reuse", "=", "False", ",", "is_training", "=", "False", ")", "\n", "action_value", "=", "self", ".", "_get_action_value", "(", "tf_actions_ph", ",", "values", ",", "yhats", ",", "bhats", ",", "obs_vec", ",", "goals", ")", "\n", "\n", "### get action", "\n", "tf_get_action", ",", "tf_get_action_value", ",", "tf_get_action_reset_ops", ",", "tf_get_action_all", ",", "tf_get_action_value_all", ",", "tf_get_action_yhats_all", ",", "tf_get_action_bhats_all", "=", "self", ".", "_graph_setup_action_selection", "(", "tf_obs_im_ph", ",", "tf_obs_vec_ph", ",", "\n", "tf_goals_ph", ",", "obs_vec", ",", "goals", ",", "tf_episode_timesteps_ph", ")", "\n", "\n", "return", "{", "\n", "'obs_im_ph'", ":", "tf_obs_im_ph", ",", "\n", "'obs_vec_ph'", ":", "tf_obs_vec_ph", ",", "\n", "'goals_ph'", ":", "tf_goals_ph", ",", "\n", "'actions_ph'", ":", "tf_actions_ph", ",", "\n", "'episode_timesteps_ph'", ":", "tf_episode_timesteps_ph", ",", "\n", "'get_action'", ":", "tf_get_action", ",", "\n", "'get_action_value'", ":", "tf_get_action_value", ",", "\n", "'get_action_reset_ops'", ":", "tf_get_action_reset_ops", ",", "\n", "'get_action_all'", ":", "tf_get_action_all", ",", "\n", "'get_action_value_all'", ":", "tf_get_action_value_all", ",", "\n", "'get_action_yhats_all'", ":", "tf_get_action_yhats_all", ",", "\n", "'get_action_bhats_all'", ":", "tf_get_action_bhats_all", ",", "\n", "'yhats'", ":", "yhats", ",", "\n", "'bhats'", ":", "bhats", ",", "\n", "'values'", ":", "values", ",", "\n", "'action_value'", ":", "action_value", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_tfrecord": [[258, 333], ["gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_tfrecord", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_ordered_dicts", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_policy", "sorted", "sorted", "tensorflow.get_collection", "tensorflow.get_collection", "len", "collections.OrderedDict", "enumerate", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_target", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_cost", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_optimize", "dict", "dict", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_input_output_tfrecord", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_ordered_dicts", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_policy", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_target", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_cost", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_optimize"], ["", "def", "_graph_setup_tfrecord", "(", "self", ",", "is_train", ")", ":", "\n", "        ", "tfrecord_fnames", "=", "self", ".", "_tfrecord_train_fnames", "if", "is_train", "else", "self", ".", "_tfrecord_holdout_fnames", "\n", "dataset_init_op", ",", "tf_obs_im_tr", ",", "tf_obs_vec_tr", ",", "tf_actions_tr", ",", "tf_dones_tr", ",", "tf_goals_tr", ",", "tf_rewards_tr", ",", "tf_weights_tr", ",", "tf_obs_im_target_tr", ",", "tf_obs_vec_target_tr", ",", "tf_goals_target_tr", ",", "tf_episode_timesteps_tr", "=", "self", ".", "_graph_input_output_tfrecord", "(", "tfrecord_fnames", ")", "\n", "\n", "obs_vec", ",", "goals", ",", "future_goals", ",", "actions", "=", "self", ".", "_graph_setup_ordered_dicts", "(", "tf_obs_vec_tr", ",", "\n", "tf_goals_tr", ",", "\n", "tf_goals_target_tr", ",", "\n", "tf_actions_tr", ")", "\n", "\n", "### setup policy", "\n", "policy_scope", "=", "'policy'", "\n", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", "=", "self", ".", "_graph_setup_policy", "(", "obs_vec", ",", "goals", ",", "tf_obs_im_tr", ",", "tf_obs_vec_tr", ",", "tf_goals_tr", ",", "tf_actions_tr", ",", "\n", "reuse", "=", "True", ")", "\n", "\n", "### get policy variables", "\n", "tf_inference_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "policy_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "tf_trainable_policy_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "policy_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "assert", "(", "len", "(", "tf_trainable_policy_vars", ")", ">", "0", ")", "\n", "\n", "if", "not", "self", ".", "_inference_only", ":", "\n", "            ", "target_obs_vec", "=", "OrderedDict", "(", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "_obs_vec_keys", ")", ":", "\n", "                ", "target_obs_vec", "[", "key", "]", "=", "tf_obs_vec_target_tr", "[", ":", ",", "-", "self", ".", "_N", ":", ",", "i", "]", "\n", "\n", "### setup target", "\n", "", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "tf_target_vars", ",", "tf_update_target_fn", "=", "self", ".", "_graph_setup_target", "(", "tf_obs_im_target_tr", ",", "tf_obs_vec_target_tr", ",", "tf_goals_target_tr", ",", "target_obs_vec", ",", "\n", "goals", ",", "tf_inference_vars", ",", "reuse_eval", "=", "not", "is_train", ")", "\n", "\n", "### optimization", "\n", "tf_cost_with_reg", ",", "tf_cost", ",", "tf_costs", ",", "tf_costs_yhat", ",", "tf_costs_bhat", ",", "tf_accs_yhat", ",", "tf_rew_errors", "=", "self", ".", "_graph_cost", "(", "values", ",", "yhats", ",", "bhats", ",", "pre_yhats", ",", "pre_bhats", ",", "obs_vec", ",", "goals", ",", "future_goals", ",", "\n", "actions", ",", "tf_obs_vec_target_tr", ",", "tf_rewards_tr", ",", "tf_dones_tr", ",", "\n", "target_obs_vec", ",", "target_values", ",", "target_yhats", ",", "target_bhats", ",", "tf_weights_tr", ")", "\n", "\n", "if", "is_train", ":", "\n", "                ", "tf_opt", ",", "tf_lr_ph", "=", "self", ".", "_graph_optimize", "(", "tf_cost_with_reg", ",", "tf_trainable_policy_vars", ")", "\n", "", "else", ":", "\n", "                ", "tf_opt", "=", "tf_lr_ph", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "tf_cost_with_reg", ",", "tf_cost", ",", "tf_costs", ",", "tf_costs_yhat", ",", "tf_costs_bhat", ",", "tf_accs_yhat", "=", "None", ",", "None", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "tf_target_vars", "=", "tf_update_target_fn", "=", "tf_cost", "=", "tf_opt", "=", "tf_lr_ph", "=", "tf_rew_errors", "=", "None", "\n", "\n", "", "if", "is_train", ":", "\n", "            ", "return", "{", "\n", "'dataset_init_op'", ":", "dataset_init_op", ",", "\n", "'cost_with_reg'", ":", "tf_cost_with_reg", ",", "\n", "'cost'", ":", "tf_cost", ",", "\n", "'costs'", ":", "tf_costs", ",", "\n", "'costs_yhat'", ":", "tf_costs_yhat", ",", "\n", "'costs_bhat'", ":", "tf_costs_bhat", ",", "\n", "'accs_yhat'", ":", "tf_accs_yhat", ",", "\n", "'rew_errors'", ":", "tf_rew_errors", ",", "\n", "'lr_ph'", ":", "tf_lr_ph", ",", "\n", "'opt'", ":", "tf_opt", ",", "\n", "'update_target_fn'", ":", "tf_update_target_fn", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'holdout_dataset_init_op'", ":", "dataset_init_op", ",", "\n", "'holdout_cost_with_reg'", ":", "tf_cost_with_reg", ",", "\n", "'holdout_cost'", ":", "tf_cost", ",", "\n", "'holdout_costs'", ":", "tf_costs", ",", "\n", "'holdout_costs_yhat'", ":", "tf_costs_yhat", ",", "\n", "'holdout_costs_bhat'", ":", "tf_costs_bhat", ",", "\n", "'holdout_accs_yhat'", ":", "tf_accs_yhat", ",", "\n", "'holdout_rew_errors'", ":", "tf_rew_errors", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup": [[335, 380], ["tensorflow.get_default_session", "gcg.tf.tf_utils.create_session_and_graph", "tensorflow.get_default_session.as_default", "tf_graph.as_default", "tensorflow.set_random_seed", "sorted", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_savers", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_init_vars", "len", "tensorflow.variable_scope", "tensorflow.Variable", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_feed_dict", "sorted", "tensorflow.get_collection", "tensorflow.get_default_session.run", "set", "len", "tensorflow.get_collection", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_tfrecord", "gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_tfrecord", "dict", "dict", "len", "len", "dict.keys", "list", "gcg_policy_tfrecord.GCGPolicyTfrecord.keys", "dict.keys", "list", "list", "dict.keys", "gcg_policy_tfrecord.GCGPolicyTfrecord.keys", "dict.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.create_session_and_graph", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_setup_savers", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy.GCGPolicy._graph_init_vars", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_feed_dict", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_tfrecord", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord._graph_setup_tfrecord", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "", "def", "_graph_setup", "(", "self", ")", ":", "\n", "### create session and graph", "\n", "        ", "tf_sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "tf_sess", "is", "None", ":", "\n", "            ", "tf_sess", ",", "tf_graph", "=", "tf_utils", ".", "create_session_and_graph", "(", "gpu_device", "=", "self", ".", "_gpu_device", ",", "gpu_frac", "=", "self", ".", "_gpu_frac", ")", "\n", "", "tf_graph", "=", "tf_sess", ".", "graph", "\n", "\n", "with", "tf_sess", ".", "as_default", "(", ")", ",", "tf_graph", ".", "as_default", "(", ")", ":", "\n", "            ", "tf", ".", "set_random_seed", "(", "self", ".", "_seed", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_gcg_scope", ")", ":", "\n", "                ", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "d_feed_dict", "=", "self", ".", "_graph_setup_feed_dict", "(", ")", "\n", "\n", "### get policy variables", "\n", "tf_inference_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\n", "scope", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "_gcg_scope", ",", "self", ".", "_policy_scope", ")", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "\n", "if", "not", "self", ".", "_inference_only", ":", "\n", "                    ", "d_tfrecord_train", "=", "self", ".", "_graph_setup_tfrecord", "(", "is_train", "=", "True", ")", "\n", "d_tfrecord_holdout", "=", "self", ".", "_graph_setup_tfrecord", "(", "is_train", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "d_tfrecord_train", "=", "dict", "(", ")", "\n", "d_tfrecord_holdout", "=", "dict", "(", ")", "\n", "\n", "### savers", "\n", "", "", "tf_all_vars", "=", "sorted", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "_gcg_scope", ")", ",", "\n", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "tf_savers_dict", "=", "self", ".", "_graph_setup_savers", "(", "tf_inference_vars", ",", "tf_all_vars", ",", "self", ".", "_inference_only", ")", "\n", "\n", "### initialize", "\n", "self", ".", "_graph_init_vars", "(", "tf_sess", ")", "\n", "if", "not", "self", ".", "_inference_only", ":", "\n", "                ", "tf_sess", ".", "run", "(", "[", "d_tfrecord_train", "[", "'dataset_init_op'", "]", ",", "d_tfrecord_holdout", "[", "'holdout_dataset_init_op'", "]", "]", ")", "\n", "\n", "", "", "assert", "len", "(", "set", "(", "list", "(", "d_feed_dict", ".", "keys", "(", ")", ")", "+", "list", "(", "d_tfrecord_train", ".", "keys", "(", ")", ")", "+", "list", "(", "d_tfrecord_holdout", ".", "keys", "(", ")", ")", ")", ")", "==", "len", "(", "d_feed_dict", ".", "keys", "(", ")", ")", "+", "len", "(", "d_tfrecord_train", ".", "keys", "(", ")", ")", "+", "len", "(", "d_tfrecord_holdout", ".", "keys", "(", ")", ")", ",", "'Some overlap in the keys...'", "\n", "return", "{", "\n", "'sess'", ":", "tf_sess", ",", "\n", "'graph'", ":", "tf_graph", ",", "\n", "'savers_dict'", ":", "tf_savers_dict", ",", "\n", "**", "d_feed_dict", ",", "\n", "**", "d_tfrecord_train", ",", "\n", "**", "d_tfrecord_holdout", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord.train_step": [[387, 437], ["gcg_policy_tfrecord.GCGPolicyTfrecord._tf_dict[].run", "numpy.isfinite", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._lr_schedule.value", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value"], ["", "def", "train_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "_tf_dict", "[", "'lr_ph'", "]", ":", "self", ".", "_lr_schedule", ".", "value", "(", "step", ")", ",", "\n", "}", "\n", "\n", "# print('step: {0}'.format(step))", "\n", "# debug_keys = list(self._tf_debug.keys())", "\n", "# debug_outputs = self._tf_dict['sess'].run([self._tf_debug[k] for k in debug_keys])", "\n", "# d = {k: v for k, v in zip(debug_keys, debug_outputs)}", "\n", "#", "\n", "# import matplotlib.pyplot as plt", "\n", "# for vae_in, vae_out in zip(d['vae_input'], d['vae_reconstr_mean']):", "\n", "#     vae_out = np.reshape(vae_out, vae_in.shape)", "\n", "#     f, axes = plt.subplots(2, self._obs_history_len)", "\n", "#     for i, ax in enumerate(axes[0]):", "\n", "#         ax.imshow(vae_in[..., i], cmap='Greys_r')", "\n", "#     for i, ax in enumerate(axes[1]):", "\n", "#         ax.imshow(vae_out[..., i], cmap='Greys_r')", "\n", "#     plt.show()", "\n", "#", "\n", "# import IPython; IPython.embed()", "\n", "\n", "\n", "rew_errors", ",", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", ",", "_", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'rew_errors'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'cost_with_reg'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'cost'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'costs_bhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'accs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'opt'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "assert", "(", "np", ".", "isfinite", "(", "cost", ")", ")", "\n", "\n", "self", ".", "_log_stats", "[", "'cost'", "]", ".", "append", "(", "cost", ")", "\n", "self", ".", "_log_stats", "[", "'cost with reg'", "]", ".", "append", "(", "cost_with_reg", ")", "\n", "self", ".", "_log_stats", "[", "'cost fraction reg'", "]", ".", "append", "(", "(", "cost_with_reg", "-", "cost", ")", "/", "cost_with_reg", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "name", "=", "output", "[", "'name'", "]", "\n", "if", "name", "in", "costs", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost yhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "accs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} acc yhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "accs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_bhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost bhat'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_bhat", "[", "name", "]", ")", "\n", "\n", "", "", "return", "rew_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.gcg_policy_tfrecord.GCGPolicyTfrecord.eval_holdout": [[438, 461], ["gcg_policy_tfrecord.GCGPolicyTfrecord._tf_dict[].run", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append", "gcg_policy_tfrecord.GCGPolicyTfrecord._log_stats[].append"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run"], ["", "def", "eval_holdout", "(", "self", ")", ":", "\n", "        ", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", "=", "self", ".", "_tf_dict", "[", "'sess'", "]", ".", "run", "(", "[", "self", ".", "_tf_dict", "[", "'holdout_cost_with_reg'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'holdout_cost'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'holdout_costs'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'holdout_costs_yhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'holdout_costs_bhat'", "]", ",", "\n", "self", ".", "_tf_dict", "[", "'holdout_accs_yhat'", "]", "]", ")", "\n", "\n", "self", ".", "_log_stats", "[", "'cost holdout'", "]", ".", "append", "(", "cost", ")", "\n", "self", ".", "_log_stats", "[", "'cost with reg holdout'", "]", ".", "append", "(", "cost_with_reg", ")", "\n", "for", "output", "in", "self", ".", "_outputs", ":", "\n", "            ", "name", "=", "output", "[", "'name'", "]", "\n", "if", "name", "in", "costs", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost yhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "accs_yhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} acc yhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "accs_yhat", "[", "name", "]", ")", "\n", "", "if", "name", "in", "costs_bhat", ":", "\n", "                ", "self", ".", "_log_stats", "[", "'{0} cost bhat holdout'", ".", "format", "(", "name", ")", "]", ".", "append", "(", "costs_bhat", "[", "name", "]", ")", "\n", "\n", "", "", "return", "cost_with_reg", ",", "cost", ",", "costs", ",", "costs_yhat", ",", "costs_bhat", ",", "accs_yhat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.__init__": [[44, 79], ["bool", "rospy.Subscriber", "list", "list", "list", "numpy.prod", "len", "len", "len", "random.CrazyflieRandomPolicy._env_spec.observation_vec_spec.keys", "random.CrazyflieRandomPolicy._env_spec.action_spec.keys", "random.CrazyflieRandomPolicy._env_spec.goal_spec.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "#used to get joystick input", "\n", "# rospy.init_node(\"CrazyflieTeleopPolicy\", anonymous=True)", "\n", "\n", "# self._outputs = kwargs['outputs'] ", "\n", "        ", "self", ".", "_joy_topic", "=", "kwargs", "[", "'joy_topic'", "]", "\n", "\n", "self", ".", "curr_joy", "=", "None", "\n", "self", ".", "cmd", "=", "-", "1", "# -1 : NONE", "\n", "\n", "self", ".", "is_flow_motion", "=", "bool", "(", "kwargs", "[", "'flow_motion'", "]", ")", "\n", "\n", "rospy", ".", "Subscriber", "(", "self", ".", "_joy_topic", ",", "Joy", ",", "self", ".", "joy_cb", ")", "\n", "# self._rew_fn = kwargs['rew_fn']", "\n", "\n", "self", ".", "_N", "=", "kwargs", "[", "'N'", "]", "\n", "self", ".", "_gamma", "=", "kwargs", "[", "'gamma'", "]", "\n", "\n", "### environment", "\n", "self", ".", "_env_spec", "=", "kwargs", "[", "'env_spec'", "]", "\n", "self", ".", "_obs_vec_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "observation_vec_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_action_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "action_spec", ".", "keys", "(", ")", ")", "\n", "self", ".", "_goal_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "goal_spec", ".", "keys", "(", ")", ")", "\n", "# self._output_keys = sorted([output['name'] for output in self._outputs])", "\n", "self", ".", "_obs_im_shape", "=", "self", ".", "_env_spec", ".", "observation_im_space", ".", "shape", "\n", "\n", "\n", "self", ".", "_obs_im_dim", "=", "np", ".", "prod", "(", "self", ".", "_obs_im_shape", ")", "\n", "self", ".", "_obs_vec_dim", "=", "len", "(", "self", ".", "_obs_vec_keys", ")", "\n", "self", ".", "_action_dim", "=", "len", "(", "self", ".", "_action_keys", ")", "\n", "self", ".", "_goal_dim", "=", "len", "(", "self", ".", "_goal_keys", ")", "\n", "\n", "# self._output_dim = len(self._output_keys)", "\n", "self", ".", "prevSpikeButton", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.dead_band": [[84, 89], ["range", "len", "len", "abs"], "methods", ["None"], ["", "def", "dead_band", "(", "self", ",", "signal", ")", ":", "\n", "        ", "new_axes", "=", "[", "0", "]", "*", "len", "(", "signal", ".", "axes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "signal", ".", "axes", ")", ")", ":", "\n", "            ", "new_axes", "[", "i", "]", "=", "signal", ".", "axes", "[", "i", "]", "if", "abs", "(", "signal", ".", "axes", "[", "i", "]", ")", ">", "TOLERANCE", "else", "0", "\n", "", "signal", ".", "axes", "=", "new_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.joy_cb": [[90, 119], ["random.CrazyflieRandomPolicy.dead_band"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.dead_band"], ["", "def", "joy_cb", "(", "self", ",", "msg", ")", ":", "\n", "# if self.curr_joy:", "\n", "#     if msg.buttons[ESTOP_CHANNEL] and not self.curr_joy.buttons[ESTOP_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.ESTOP", "\n", "#         print(\"CALLING ESTOP\")", "\n", "#     elif msg.buttons[TAKEOFF_CHANNEL] and not self.curr_joy.buttons[TAKEOFF_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.TAKEOFF", "\n", "#         print(\"CALLING TAKEOFF\")", "\n", "#     elif msg.buttons[LAND_CHANNEL] and not self.curr_joy.buttons[LAND_CHANNEL]:", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.LAND", "\n", "#         print(\"CALLING LAND\")", "\n", "# else:", "\n", "#     if msg.buttons[ESTOP_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.ESTOP", "\n", "#         print(\"CALLING ESTOP\")", "\n", "#     elif msg.buttons[TAKEOFF_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.TAKEOFF", "\n", "#         print(\"CALLING TAKEOFF\")", "\n", "#     elif msg.buttons[LAND_CHANNEL] :", "\n", "#         #takeoff", "\n", "#         self.cmd = CFCommand.LAND", "\n", "#         print(\"CALLING LAND\")", "\n", "        ", "self", ".", "dead_band", "(", "msg", ")", "\n", "self", ".", "curr_joy", "=", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.N": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.gamma": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gamma", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.obs_history_len": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obs_history_len", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.session": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "session", "(", "self", ")", ":", "\n", "        ", "return", "\n", "################", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_action": [[146, 158], ["crazyflie.msg.CFMotion", "random.uniform", "print", "dict"], "methods", ["None"], ["", "def", "get_action", "(", "self", ",", "step", ",", "current_episode_step", ",", "observation", ",", "goal", ",", "explore", ")", ":", "\n", "# chosen_actions, chosen_values, action_infos = self.get_actions([step], [current_episode_step] [observation],", "\n", "#                                                               [goal], explore=explore)", "\n", "# return chosen_actions[0], chosen_values[0], action_infos[0]", "\n", "        ", "motion", "=", "CFMotion", "(", ")", "\n", "\n", "\n", "motion", ".", "yaw", "=", "random", ".", "uniform", "(", "-", "120", ",", "120", ")", "\n", "\n", "# return motion", "\n", "print", "(", "\"RANDOM POLICY chose action:\"", ",", "[", "motion", ".", "x", ",", "motion", ".", "y", ",", "motion", ".", "yaw", ",", "motion", ".", "dz", "]", ")", "\n", "return", "[", "motion", ".", "yaw", "]", ",", "None", ",", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_actions": [[159, 168], ["random.CrazyflieRandomPolicy.get_action", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_action"], ["", "def", "get_actions", "(", "self", ",", "steps", ",", "current_episode_steps", ",", "observations", ",", "goals", ",", "explore", ")", ":", "\n", "        ", "ds", "=", "[", "{", "}", "for", "_", "in", "steps", "]", "\n", "observations_im", ",", "observations_vec", "=", "observations", "\n", "\n", "values", "=", "[", "0", "for", "_", "in", "steps", "]", "\n", "joy_action", "=", "self", ".", "get_action", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "#args don't matter", "\n", "actions", "=", "[", "joy_action", "]", "*", "len", "(", "steps", ")", "\n", "\n", "return", "actions", ",", "values", ",", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.reset_get_action": [[169, 172], ["None"], "methods", ["None"], ["", "def", "reset_get_action", "(", "self", ")", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate": [[173, 176], ["None"], "methods", ["None"], ["", "def", "terminate", "(", "self", ")", ":", "\n", "        ", "self", ".", "curr_joy", "=", "None", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_model_outputs": [[181, 183], ["None"], "methods", ["None"], ["", "def", "get_model_outputs", "(", "self", ",", "observations", ",", "actions", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.save": [[193, 203], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ")", ":", "\n", "# if train:", "\n", "#     savers_keys = [k for k in self._tf_dict['savers_dict'].keys() if 'inference' not in k]", "\n", "# else:", "\n", "#     savers_keys = ['inference']", "\n", "\n", "# for saver_name in savers_keys:", "\n", "#     saver = self._tf_dict['savers_dict'][saver_name]", "\n", "#     saver.save(self._tf_dict['sess'], self._saver_ckpt_name(ckpt_name, saver_name), write_meta_graph=False)", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.restore": [[204, 214], ["None"], "methods", ["None"], ["", "def", "restore", "(", "self", ",", "ckpt_name", ",", "train", "=", "True", ",", "train_restore", "=", "(", "'train'", ",", ")", ")", ":", "\n", "        ", "\"\"\"\n        :param: train_restore: 'train', 'image', 'observation', 'action', 'rnn', 'output\n        # \"\"\"", "\n", "# savers_keys = train_restore if train else ['inference']", "\n", "\n", "# for saver_name in savers_keys:", "\n", "#     saver = self._tf_dict['savers_dict'][saver_name]", "\n", "#     saver.restore(self._tf_dict['sess'], self._saver_ckpt_name(ckpt_name, saver_name))", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.log": [[219, 228], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "# for k in sorted(self._log_stats.keys()):", "\n", "#     if k == 'Depth':", "\n", "#         logger.record_tabular(k+'Mean', np.mean(self._log_stats[k]))", "\n", "#         logger.record_tabular(k+'Std', np.std(self._log_stats[k]))", "\n", "#     else:", "\n", "#         logger.record_tabular(k, np.mean(self._log_stats[k]))", "\n", "# self._log_stats.clear()", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool.__init__": [[7, 20], ["gcg.replay_pools.replay_pool.ReplayPool.__init__", "numpy.zeros", "per_pool.PERPool._init_ps"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._init_ps"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "env_spec", ",", "obs_history_len", ",", "N", ",", "size", ",", "\n", "labeller", "=", "None", ",", "save_rollouts", "=", "False", ",", "save_rollouts_observations", "=", "True", ",", "save_env_infos", "=", "False", ")", ":", "\n", "        ", "super", "(", "PERPool", ",", "self", ")", ".", "__init__", "(", "env_spec", "=", "env_spec", ",", "\n", "obs_history_len", "=", "obs_history_len", ",", "\n", "N", "=", "N", ",", "\n", "size", "=", "size", ",", "\n", "labeller", "=", "labeller", ",", "\n", "save_rollouts", "=", "save_rollouts", ",", "\n", "save_rollouts_observations", "=", "save_rollouts_observations", ",", "\n", "save_env_infos", "=", "save_env_infos", ")", "\n", "self", ".", "_priorities", "=", "np", ".", "zeros", "(", "(", "self", ".", "_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_init_ps", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool._init_ps": [[25, 28], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_init_ps", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool.update_priorities": [[29, 32], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update_priorities", "(", "self", ",", "indices", ",", "priorities", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool._sample_start_indices": [[37, 40], ["numpy.ones", "numpy.ones"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_sample_start_indices", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "batch_size", ")", "*", "np", ".", "nan", ",", "np", ".", "ones", "(", "batch_size", ")", "*", "np", ".", "nan", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool.store_effect": [[45, 48], ["per_pool.PERPool.update_priorities", "gcg.replay_pools.replay_pool.ReplayPool.store_effect", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.update_priorities", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_effect"], ["", "def", "store_effect", "(", "self", ",", "action", ",", "reward", ",", "done", ",", "env_info", ",", "flatten_action", "=", "True", ",", "update_log_stats", "=", "True", ")", ":", "\n", "        ", "self", ".", "update_priorities", "(", "np", ".", "array", "(", "[", "self", ".", "_index", "]", ")", ",", "np", ".", "array", "(", "[", "np", ".", "inf", "if", "not", "done", "else", "0.0", "]", ")", ")", "\n", "ReplayPool", ".", "store_effect", "(", "self", ",", "action", ",", "reward", ",", "done", ",", "env_info", ",", "flatten_action", "=", "flatten_action", ",", "update_log_stats", "=", "update_log_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.per_pool.PERPool.trash_current_rollout": [[53, 58], ["per_pool.PERPool.update_priorities", "gcg.replay_pools.replay_pool.ReplayPool.trash_current_rollout", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.update_priorities", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.trash_current_rollout"], ["", "def", "trash_current_rollout", "(", "self", ")", ":", "\n", "        ", "new_indices", "=", "self", ".", "_new_indices", "\n", "self", ".", "_priorities", "[", "new_indices", "]", "=", "0.", "\n", "self", ".", "update_priorities", "(", "new_indices", ",", "np", ".", "zeros", "(", "len", "(", "self", ".", "_new_indices", ")", ")", ")", "\n", "ReplayPool", ".", "trash_current_rollout", "(", "self", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool.__init__": [[9, 26], ["gcg.misc.schedules.PiecewiseSchedule", "set", "gcg.replay_pools.per_pool.PERPool.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ",", "obs_history_len", ",", "N", ",", "size", ",", "\n", "labeller", "=", "None", ",", "save_rollouts", "=", "False", ",", "save_rollouts_observations", "=", "True", ",", "save_env_infos", "=", "False", ",", "\n", "alpha", "=", "None", ",", "beta_schedule", "=", "None", ")", ":", "\n", "        ", "assert", "(", "alpha", "is", "not", "None", ")", "\n", "assert", "(", "beta_schedule", "is", "not", "None", ")", "\n", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_beta_schedule", "=", "schedules", ".", "PiecewiseSchedule", "(", "**", "beta_schedule", ")", "\n", "self", ".", "_max_pri_set", "=", "set", "(", ")", "\n", "super", "(", "PERPool", ",", "self", ")", ".", "__init__", "(", "env_spec", "=", "env_spec", ",", "\n", "obs_history_len", "=", "obs_history_len", ",", "\n", "N", "=", "N", ",", "\n", "size", "=", "size", ",", "\n", "labeller", "=", "labeller", ",", "\n", "save_rollouts", "=", "save_rollouts", ",", "\n", "save_rollouts_observations", "=", "save_rollouts_observations", ",", "\n", "save_env_infos", "=", "save_env_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._init_ps": [[31, 33], ["proportional_per_pool.SumTree"], "methods", ["None"], ["", "def", "_init_ps", "(", "self", ")", ":", "\n", "        ", "self", ".", "_sum_tree", "=", "SumTree", "(", "self", ".", "_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._pri_to_weights": [[34, 39], ["proportional_per_pool.ProportionalPERPool._beta_schedule.value", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value"], ["", "def", "_pri_to_weights", "(", "self", ",", "priorities", ")", ":", "\n", "        ", "beta", "=", "self", ".", "_beta_schedule", ".", "value", "(", "self", ".", "_data_step", ")", "\n", "weights", "=", "(", "1.", "/", "(", "self", ".", "_curr_size", "*", "priorities", ")", ")", "**", "beta", "\n", "weights", "=", "weights", "/", "np", ".", "max", "(", "weights", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool.update_priorities": [[40, 50], ["proportional_per_pool.ProportionalPERPool._max_pri_set.difference_update", "proportional_per_pool.ProportionalPERPool._max_pri_set.update", "proportional_per_pool.ProportionalPERPool._sum_tree.push_or_update"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.push_or_update"], ["", "def", "update_priorities", "(", "self", ",", "indices", ",", "priorities", ")", ":", "\n", "        ", "self", ".", "_priorities", "[", "indices", "]", "=", "priorities", "\n", "new_inf_indices", "=", "indices", "[", "priorities", "==", "np", ".", "inf", "]", "\n", "non_inf", "=", "priorities", "!=", "np", ".", "inf", "\n", "non_inf_indices", "=", "indices", "[", "non_inf", "]", "\n", "non_inf_priorities", "=", "priorities", "[", "non_inf", "]", "\n", "\n", "self", ".", "_max_pri_set", ".", "difference_update", "(", "non_inf_indices", ")", "\n", "self", ".", "_max_pri_set", ".", "update", "(", "new_inf_indices", ")", "\n", "self", ".", "_sum_tree", ".", "push_or_update", "(", "non_inf_indices", ",", "non_inf_priorities", "**", "self", ".", "_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._sample_start_indices": [[55, 68], ["proportional_per_pool.ProportionalPERPool.can_sample", "range", "proportional_per_pool.ProportionalPERPool._pri_to_weights", "proportional_per_pool.ProportionalPERPool._ran_sample_start_index", "start_indices.append", "priorities.append", "numpy.array", "numpy.array", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.can_sample", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._pri_to_weights", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._ran_sample_start_index"], ["", "def", "_sample_start_indices", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "assert", "(", "self", ".", "can_sample", "(", "batch_size", ")", ")", "\n", "start_indices", "=", "[", "]", "\n", "priorities", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "ran", "=", "(", "np", ".", "random", ".", "random", "(", ")", "+", "i", ")", "/", "batch_size", "\n", "index", ",", "priority", "=", "self", ".", "_ran_sample_start_index", "(", "ran", ")", "\n", "assert", "(", "priority", ">", "0", ")", "\n", "assert", "(", "not", "self", ".", "_dones", "[", "index", "]", ")", "\n", "start_indices", ".", "append", "(", "index", ")", "\n", "priorities", ".", "append", "(", "priority", ")", "\n", "", "weights", "=", "self", ".", "_pri_to_weights", "(", "np", ".", "array", "(", "priorities", ")", ")", "\n", "return", "np", ".", "array", "(", "start_indices", ")", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.ProportionalPERPool._ran_sample_start_index": [[69, 93], ["set", "set.update", "len", "proportional_per_pool.ProportionalPERPool._max_pri_set.pop", "proportional_per_pool.ProportionalPERPool._sum_tree.sample", "len", "set.add", "float"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.add"], ["", "def", "_ran_sample_start_index", "(", "self", ",", "ran", ")", ":", "\n", "        ", "assert", "(", "ran", ">", "0", ")", "\n", "assert", "(", "ran", "<=", "1", ")", "\n", "max_pri", "=", "self", ".", "_sum_tree", ".", "max_priority", "if", "self", ".", "_sum_tree", ".", "max_priority", ">", "0", "else", "1.", "\n", "\n", "false_indices_set", "=", "set", "(", ")", "\n", "if", "self", ".", "_only_completed_episodes", ":", "\n", "            ", "false_indices_set", ".", "update", "(", "self", ".", "_new_indices", ")", "\n", "", "elif", "len", "(", "self", ".", "_new_indices", ")", ">", "0", ":", "\n", "            ", "false_indices_set", ".", "add", "(", "self", ".", "_new_indices", "[", "-", "1", "]", ")", "\n", "", "false_indices_set", "&=", "self", ".", "_max_pri_set", "\n", "self", ".", "_max_pri_set", "-=", "false_indices_set", "\n", "max_pri_weight", "=", "len", "(", "self", ".", "_max_pri_set", ")", "*", "max_pri", "\n", "tot_sum", "=", "self", ".", "_sum_tree", ".", "total_weight", "+", "max_pri_weight", "\n", "search_val", "=", "ran", "*", "tot_sum", "\n", "if", "search_val", "<=", "max_pri_weight", ":", "\n", "            ", "value", "=", "self", ".", "_max_pri_set", ".", "pop", "(", ")", "\n", "pri", "=", "max_pri", "\n", "", "else", ":", "\n", "            ", "assert", "(", "self", ".", "_sum_tree", ".", "can_sample", ")", "\n", "new_ran", "=", "float", "(", "search_val", "-", "max_pri_weight", ")", "/", "self", ".", "_sum_tree", ".", "total_weight", "\n", "value", ",", "pri", "=", "self", ".", "_sum_tree", ".", "sample", "(", "new_ran", ")", "\n", "", "self", ".", "_max_pri_set", "|=", "false_indices_set", "\n", "return", "value", ",", "pri", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.__init__": [[95, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "_size", "=", "size", "\n", "self", ".", "_tree", "=", "[", "]", "\n", "self", ".", "_curr_size", "=", "0", "\n", "self", ".", "_index", "=", "0", "\n", "self", ".", "_v2i", "=", "{", "}", "\n", "self", ".", "_max_priority", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.__len__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curr_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.total_weight": [[106, 112], ["proportional_per_pool.SumTree._get_val"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val"], ["", "@", "property", "\n", "def", "total_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_curr_size", "==", "0", ":", "\n", "            ", "return", "0.", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_get_val", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.max_priority": [[113, 116], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_priority", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_priority", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.can_sample": [[117, 119], ["None"], "methods", ["None"], ["", "def", "can_sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curr_size", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.push": [[120, 142], ["proportional_per_pool.SumTree._update_max_pri", "gcg.data.logger.logger.warn", "proportional_per_pool.SumTree._tree.append", "isinstance", "proportional_per_pool.SumTree._tree.append", "proportional_per_pool.SumTree._tree.append", "proportional_per_pool.SumTree._update_up"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_max_pri", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_up"], ["", "def", "push", "(", "self", ",", "value", ",", "priority", ")", ":", "\n", "        ", "assert", "(", "priority", ">=", "0", ")", "\n", "assert", "(", "priority", "<", "np", ".", "inf", ")", "\n", "if", "self", ".", "_curr_size", "<", "self", ".", "_size", ":", "\n", "            ", "self", ".", "_update_max_pri", "(", "priority", ")", "\n", "if", "self", ".", "_index", "==", "0", ":", "\n", "                ", "self", ".", "_tree", ".", "append", "(", "(", "priority", ",", "value", ")", ")", "\n", "self", ".", "_v2i", "[", "value", "]", "=", "self", ".", "_index", "\n", "self", ".", "_index", "=", "1", "\n", "", "else", ":", "\n", "                ", "up_index", "=", "(", "self", ".", "_index", "-", "1", ")", "//", "2", "\n", "tup", "=", "self", ".", "_tree", "[", "up_index", "]", "\n", "assert", "(", "isinstance", "(", "tup", ",", "tuple", ")", ")", "\n", "self", ".", "_tree", ".", "append", "(", "tup", ")", "\n", "self", ".", "_v2i", "[", "tup", "[", "1", "]", "]", "=", "self", ".", "_index", "\n", "self", ".", "_tree", ".", "append", "(", "(", "priority", ",", "value", ")", ")", "\n", "self", ".", "_v2i", "[", "value", "]", "=", "self", ".", "_index", "+", "1", "\n", "self", ".", "_update_up", "(", "self", ".", "_index", ")", "\n", "self", ".", "_index", "+=", "2", "\n", "", "self", ".", "_curr_size", "+=", "1", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warn", "(", "'Attempting to add data beyond Priority Sum Tree capacity!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.update_priority": [[143, 150], ["proportional_per_pool.SumTree._update_max_pri", "proportional_per_pool.SumTree._update_up"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_max_pri", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_up"], ["", "", "def", "update_priority", "(", "self", ",", "value", ",", "priority", ")", ":", "\n", "        ", "assert", "(", "priority", ">=", "0", ")", "\n", "assert", "(", "priority", "<", "np", ".", "inf", ")", "\n", "self", ".", "_update_max_pri", "(", "priority", ")", "\n", "index", "=", "self", ".", "_v2i", "[", "value", "]", "\n", "self", ".", "_tree", "[", "index", "]", "=", "(", "priority", ",", "value", ")", "\n", "self", ".", "_update_up", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.push_or_update": [[151, 157], ["zip", "proportional_per_pool.SumTree.update_priority", "proportional_per_pool.SumTree.push"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.update_priority", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.push"], ["", "def", "push_or_update", "(", "self", ",", "values", ",", "priorities", ")", ":", "\n", "        ", "for", "value", ",", "priority", "in", "zip", "(", "values", ",", "priorities", ")", ":", "\n", "            ", "if", "value", "in", "self", ".", "_v2i", ":", "\n", "                ", "self", ".", "update_priority", "(", "value", ",", "priority", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "push", "(", "value", ",", "priority", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree.sample": [[158, 168], ["len", "proportional_per_pool.SumTree._sample_down"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._sample_down"], ["", "", "", "def", "sample", "(", "self", ",", "ran", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_curr_size", ">", "0", ")", "\n", "assert", "(", "ran", ">=", "0", ")", "\n", "assert", "(", "ran", "<=", "1", ")", "\n", "search_index", "=", "0", "\n", "search_val", "=", "ran", "*", "self", ".", "total_weight", "\n", "if", "len", "(", "self", ".", "_tree", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "_tree", "[", "0", "]", "[", "1", "]", ",", "self", ".", "_tree", "[", "0", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_sample_down", "(", "search_index", ",", "search_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val": [[173, 179], ["isinstance"], "methods", ["None"], ["", "", "def", "_get_val", "(", "self", ",", "index", ")", ":", "\n", "        ", "val", "=", "self", ".", "_tree", "[", "index", "]", "\n", "if", "isinstance", "(", "val", ",", "tuple", ")", ":", "\n", "            ", "return", "val", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_up": [[180, 191], ["proportional_per_pool.SumTree._get_val", "proportional_per_pool.SumTree._update_up", "proportional_per_pool.SumTree._get_val", "proportional_per_pool.SumTree._get_val"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_up", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val"], ["", "", "def", "_update_up", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "!=", "0", ":", "\n", "            ", "val_1", "=", "self", ".", "_get_val", "(", "index", ")", "\n", "if", "index", "%", "2", "==", "0", ":", "\n", "                ", "val_2", "=", "self", ".", "_get_val", "(", "index", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "val_2", "=", "self", ".", "_get_val", "(", "index", "+", "1", ")", "\n", "", "val", "=", "val_1", "+", "val_2", "\n", "index", "=", "(", "index", "-", "1", ")", "//", "2", "\n", "self", ".", "_tree", "[", "index", "]", "=", "val", "\n", "self", ".", "_update_up", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._sample_down": [[192, 204], ["isinstance", "proportional_per_pool.SumTree._get_val", "proportional_per_pool.SumTree._sample_down", "proportional_per_pool.SumTree._sample_down"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._get_val", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._sample_down", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._sample_down"], ["", "", "def", "_sample_down", "(", "self", ",", "search_index", ",", "search_val", ")", ":", "\n", "        ", "val", "=", "self", ".", "_tree", "[", "search_index", "]", "\n", "if", "isinstance", "(", "val", ",", "tuple", ")", ":", "\n", "            ", "return", "val", "[", "1", "]", ",", "val", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "left_index", "=", "(", "search_index", "*", "2", ")", "+", "1", "\n", "right_index", "=", "left_index", "+", "1", "\n", "left_val", "=", "self", ".", "_get_val", "(", "left_index", ")", "\n", "if", "search_val", "<=", "left_val", ":", "\n", "                ", "return", "self", ".", "_sample_down", "(", "left_index", ",", "search_val", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_sample_down", "(", "right_index", ",", "search_val", "-", "left_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.proportional_per_pool.SumTree._update_max_pri": [[205, 207], ["numpy.maximum"], "methods", ["None"], ["", "", "", "def", "_update_max_pri", "(", "self", ",", "priority", ")", ":", "\n", "        ", "self", ".", "_max_priority", "=", "np", ".", "maximum", "(", "priority", ",", "self", ".", "_max_priority", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.__init__": [[12, 54], ["int", "numpy.prod", "len", "len", "numpy.empty", "numpy.empty", "numpy.ones", "numpy.ones", "numpy.empty", "collections.defaultdict", "len", "list", "list", "numpy.ones", "numpy.ones", "numpy.ones", "replay_pool.ReplayPool._env_spec.observation_vec_spec.keys", "replay_pool.ReplayPool._env_spec.goal_spec.keys"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ",", "obs_history_len", ",", "N", ",", "size", ",", "\n", "labeller", "=", "None", ",", "save_rollouts", "=", "False", ",", "save_rollouts_observations", "=", "True", ",", "save_env_infos", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param env_spec: for observation/action dimensions\n        :param N: horizon length\n        :param size: size of pool\n        :param obs_history_len: how many previous obs to include when sampling? (= 1 is only current observation)\n        :param save_rollouts: for debugging\n        \"\"\"", "\n", "self", ".", "_env_spec", "=", "env_spec", "\n", "self", ".", "_N", "=", "N", "\n", "self", ".", "_size", "=", "int", "(", "size", ")", "\n", "self", ".", "_obs_history_len", "=", "obs_history_len", "\n", "self", ".", "_labeller", "=", "labeller", "\n", "self", ".", "_save_rollouts", "=", "save_rollouts", "\n", "self", ".", "_save_rollouts_observations", "=", "save_rollouts_observations", "\n", "self", ".", "_save_env_infos", "=", "save_env_infos", "\n", "\n", "### buffer", "\n", "self", ".", "_obs_im_shape", "=", "self", ".", "_env_spec", ".", "observation_im_space", ".", "shape", "\n", "assert", "(", "len", "(", "self", ".", "_obs_im_shape", ")", "==", "3", ")", "\n", "self", ".", "_obs_im_dim", "=", "np", ".", "prod", "(", "self", ".", "_obs_im_shape", ")", "\n", "self", ".", "_obs_vec_dim", "=", "len", "(", "list", "(", "self", ".", "_env_spec", ".", "observation_vec_spec", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "_goal_dim", "=", "len", "(", "list", "(", "self", ".", "_env_spec", ".", "goal_spec", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "_action_dim", "=", "self", ".", "_env_spec", ".", "action_space", ".", "flat_dim", "\n", "self", ".", "_steps", "=", "np", ".", "empty", "(", "(", "self", ".", "_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "_observations_im", "=", "np", ".", "empty", "(", "(", "self", ".", "_size", ",", "self", ".", "_obs_im_dim", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_observations_vec", "=", "np", ".", "ones", "(", "(", "self", ".", "_size", ",", "self", ".", "_obs_vec_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_goals", "=", "np", ".", "nan", "*", "np", ".", "ones", "(", "(", "self", ".", "_size", ",", "self", ".", "_goal_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_actions", "=", "np", ".", "nan", "*", "np", ".", "ones", "(", "(", "self", ".", "_size", ",", "self", ".", "_action_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_rewards", "=", "np", ".", "nan", "*", "np", ".", "ones", "(", "(", "self", ".", "_size", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_dones", "=", "np", ".", "ones", "(", "(", "self", ".", "_size", ",", ")", ",", "dtype", "=", "bool", ")", "# initialize as all done", "\n", "self", ".", "_env_infos", "=", "np", ".", "empty", "(", "(", "self", ".", "_size", ",", ")", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "_index", "=", "0", "\n", "self", ".", "_curr_size", "=", "0", "\n", "self", ".", "_data_step", "=", "0", "\n", "\n", "### logging", "\n", "self", ".", "_last_done_index", "=", "0", "\n", "self", ".", "_log_stats", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_log_paths", "=", "[", "]", "\n", "self", ".", "_last_get_log_stats_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.__len__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_curr_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.size": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices": [[62, 69], ["numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "_get_indices", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "        ", "start", "=", "start", "%", "self", ".", "_size", "\n", "end", "=", "end", "%", "self", ".", "_size", "\n", "if", "start", "<=", "end", ":", "\n", "            ", "return", "np", ".", "arange", "(", "start", ",", "end", ")", "\n", "", "elif", "start", ">", "end", ":", "\n", "            ", "return", "np", ".", "arange", "(", "start", "-", "self", ".", "_size", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._new_indices": [[70, 73], ["replay_pool.ReplayPool._get_indices"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices"], ["", "", "@", "property", "\n", "def", "_new_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_indices", "(", "self", ".", "_last_done_index", ",", "self", ".", "_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._prev_index": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_prev_index", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_index", "-", "1", ")", "%", "self", ".", "_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_observation": [[82, 99], ["gcg.misc.utils.imresize", "gcg.misc.utils.imresize.reshape", "obs_vec.reshape", "numpy.any", "numpy.isnan", "replay_pool.ReplayPool._labeller.label"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.imresize", "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller.label"], ["", "def", "store_observation", "(", "self", ",", "step", ",", "observation", ",", "goal", ",", "use_labeller", "=", "True", ")", ":", "\n", "        ", "self", ".", "_data_step", "=", "step", "\n", "self", ".", "_steps", "[", "self", ".", "_index", "]", "=", "step", "\n", "obs_im_full", ",", "obs_vec", "=", "observation", "\n", "\n", "if", "self", ".", "_labeller", "and", "use_labeller", ":", "\n", "            ", "assert", "(", "np", ".", "any", "(", "np", ".", "isnan", "(", "goal", ")", ")", ")", "\n", "goal", "=", "self", ".", "_labeller", ".", "label", "(", "(", "[", "obs_im_full", "]", ",", "[", "obs_vec", "]", ")", ",", "[", "goal", "]", ")", "[", "0", "]", "\n", "\n", "#import IPython; IPython.embed()", "\n", "", "obs_im", "=", "utils", ".", "imresize", "(", "obs_im_full", ",", "self", ".", "_obs_im_shape", ")", "\n", "assert", "(", "obs_im", ".", "shape", "==", "self", ".", "_obs_im_shape", ")", "\n", "self", ".", "_observations_im", "[", "self", ".", "_index", ",", ":", "]", "=", "obs_im", ".", "reshape", "(", "(", "self", ".", "_obs_im_dim", ",", ")", ")", "\n", "self", ".", "_observations_vec", "[", "self", ".", "_index", ",", ":", "]", "=", "obs_vec", ".", "reshape", "(", "(", "self", ".", "_obs_vec_dim", ",", ")", ")", "\n", "self", ".", "_goals", "[", "self", ".", "_index", ",", ":", "]", "=", "goal", "\n", "\n", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._encode_observation": [[100, 115], ["replay_pool.ReplayPool._get_indices", "range", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices"], ["", "def", "_encode_observation", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Encodes observation starting at index by concatenating obs_history_len previous \"\"\"", "\n", "indices", "=", "self", ".", "_get_indices", "(", "index", "-", "self", ".", "_obs_history_len", "+", "1", ",", "(", "index", "+", "1", ")", "%", "self", ".", "_size", ")", "# plus 1 b/c inclusive", "\n", "observations_im", "=", "self", ".", "_observations_im", "[", "indices", "]", "\n", "observations_vec", "=", "self", ".", "_observations_vec", "[", "indices", "]", "\n", "dones", "=", "self", ".", "_dones", "[", "indices", "]", "\n", "\n", "encountered_done", "=", "False", "\n", "for", "i", "in", "range", "(", "len", "(", "dones", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "# skip the most current frame since don't know if it's done", "\n", "            ", "encountered_done", "=", "encountered_done", "or", "dones", "[", "i", "]", "\n", "if", "encountered_done", ":", "\n", "                ", "observations_im", "[", "i", ",", "...", "]", "=", "0.", "\n", "observations_vec", "[", "i", ",", "...", "]", "=", "0.", "\n", "\n", "", "", "return", "observations_im", ",", "observations_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.encode_recent_observation": [[116, 118], ["replay_pool.ReplayPool._encode_observation"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._encode_observation"], ["", "def", "encode_recent_observation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_encode_observation", "(", "self", ".", "_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._done_update": [[119, 128], ["replay_pool.ReplayPool._update_log_stats"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._update_log_stats"], ["", "def", "_done_update", "(", "self", ",", "update_log_stats", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "_last_done_index", "==", "self", ".", "_index", ":", "\n", "            ", "return", "\n", "\n", "### update log stats", "\n", "", "if", "update_log_stats", ":", "\n", "            ", "self", ".", "_update_log_stats", "(", ")", "\n", "\n", "", "self", ".", "_last_done_index", "=", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_effect": [[129, 141], ["max", "replay_pool.ReplayPool._env_spec.action_space.flatten", "replay_pool.ReplayPool._done_update"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._done_update"], ["", "def", "store_effect", "(", "self", ",", "action", ",", "reward", ",", "done", ",", "env_info", ",", "flatten_action", "=", "True", ",", "update_log_stats", "=", "True", ")", ":", "\n", "        ", "self", ".", "_actions", "[", "self", ".", "_index", ",", ":", "]", "=", "self", ".", "_env_spec", ".", "action_space", ".", "flatten", "(", "action", ")", "if", "flatten_action", "else", "action", "\n", "self", ".", "_rewards", "[", "self", ".", "_index", "]", "=", "reward", "\n", "\n", "self", ".", "_dones", "[", "self", ".", "_index", "]", "=", "done", "\n", "self", ".", "_env_infos", "[", "self", ".", "_index", "]", "=", "env_info", "if", "self", ".", "_save_env_infos", "else", "None", "\n", "self", ".", "_curr_size", "=", "max", "(", "self", ".", "_curr_size", ",", "self", ".", "_index", "+", "1", ")", "\n", "self", ".", "_index", "=", "(", "self", ".", "_index", "+", "1", ")", "%", "self", ".", "_size", "\n", "\n", "### compute values", "\n", "if", "done", ":", "\n", "            ", "self", ".", "_done_update", "(", "update_log_stats", "=", "update_log_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.force_done": [[142, 148], ["replay_pool.ReplayPool._done_update", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._done_update"], ["", "", "def", "force_done", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_dones", "[", "self", ".", "_prev_index", "]", "=", "True", "\n", "self", ".", "_done_update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._store_rollout": [[149, 170], ["len", "range", "gcg.data.logger.logger.warn", "numpy.reshape", "replay_pool.ReplayPool.store_observation", "replay_pool.ReplayPool.store_effect", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_effect"], ["", "def", "_store_rollout", "(", "self", ",", "start_step", ",", "rollout", ")", ":", "\n", "        ", "if", "not", "rollout", "[", "'dones'", "]", "[", "-", "1", "]", ":", "\n", "            ", "logger", ".", "warn", "(", "'Rollout not ending in done. Not being added to replay pool.'", ")", "\n", "return", "\n", "\n", "", "r_len", "=", "len", "(", "rollout", "[", "'dones'", "]", ")", "\n", "for", "i", "in", "range", "(", "r_len", ")", ":", "\n", "            ", "obs_im", "=", "np", ".", "reshape", "(", "rollout", "[", "'observations_im'", "]", "[", "i", "]", ",", "self", ".", "_obs_im_shape", ")", "\n", "obs_vec", "=", "rollout", "[", "'observations_vec'", "]", "[", "i", "]", "\n", "if", "'goals'", "in", "rollout", ":", "\n", "                ", "goal", "=", "rollout", "[", "'goals'", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "goal", "=", "np", ".", "zeros", "(", "(", "self", ".", "_goal_dim", ",", ")", ")", "\n", "\n", "", "self", ".", "store_observation", "(", "start_step", "+", "i", ",", "(", "obs_im", ",", "obs_vec", ")", ",", "goal", ")", "\n", "\n", "self", ".", "store_effect", "(", "rollout", "[", "'actions'", "]", "[", "i", "]", ",", "\n", "rollout", "[", "'rewards'", "]", "[", "i", "]", ",", "\n", "rollout", "[", "'dones'", "]", "[", "i", "]", ",", "\n", "None", ",", "# TODO rollout['env_infos'][i],", "\n", "update_log_stats", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_rollouts": [[171, 192], ["len", "type", "issubclass", "len", "replay_pool.ReplayPool._store_rollout", "gcg.data.mypickle.load", "type"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._store_rollout"], ["", "", "def", "store_rollouts", "(", "self", ",", "rlist", ",", "max_to_add", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        rlist can be a list of pkl filenames, or rollout dictionaries\n        \"\"\"", "\n", "step", "=", "len", "(", "self", ")", "\n", "\n", "for", "rlist_entry", "in", "rlist", ":", "\n", "            ", "if", "type", "(", "rlist_entry", ")", "is", "str", ":", "\n", "                ", "rollouts", "=", "mypickle", ".", "load", "(", "rlist_entry", ")", "[", "'rollouts'", "]", "\n", "", "elif", "issubclass", "(", "type", "(", "rlist_entry", ")", ",", "dict", ")", ":", "\n", "                ", "rollouts", "=", "[", "rlist_entry", "]", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "for", "rollout", "in", "rollouts", ":", "\n", "                ", "r_len", "=", "len", "(", "rollout", "[", "'dones'", "]", ")", "\n", "if", "max_to_add", "is", "not", "None", "and", "step", "+", "r_len", ">=", "max_to_add", ":", "\n", "                    ", "return", "\n", "\n", "", "self", ".", "_store_rollout", "(", "step", ",", "rollout", ")", "\n", "step", "+=", "r_len", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.update_priorities": [[193, 195], ["None"], "methods", ["None"], ["", "", "", "def", "update_priorities", "(", "self", ",", "indices", ",", "priorities", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.trash_current_rollout": [[200, 209], ["len"], "methods", ["None"], ["", "def", "trash_current_rollout", "(", "self", ")", ":", "\n", "        ", "new_indices", "=", "self", ".", "_new_indices", "\n", "self", ".", "_actions", "[", "new_indices", ",", ":", "]", "=", "np", ".", "nan", "\n", "self", ".", "_rewards", "[", "new_indices", "]", "=", "np", ".", "nan", "\n", "self", ".", "_dones", "[", "new_indices", "]", "=", "True", "\n", "self", ".", "_env_infos", "[", "new_indices", "]", "=", "np", ".", "object", "\n", "self", ".", "_index", "=", "self", ".", "_last_done_index", "\n", "\n", "return", "len", "(", "new_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.can_sample": [[214, 216], ["len", "len"], "methods", ["None"], ["", "def", "can_sample", "(", "self", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", ">", "self", ".", "_obs_history_len", "and", "len", "(", "self", ")", ">", "self", ".", "_N", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._sample_start_indices": [[217, 226], ["numpy.logical_not", "numpy.random.choice", "numpy.ones", "len", "len", "numpy.where"], "methods", ["None"], ["", "def", "_sample_start_indices", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "valid_indices", "=", "np", ".", "logical_not", "(", "self", ".", "_dones", "[", ":", "self", ".", "_curr_size", "]", ")", "\n", "if", "len", "(", "self", ".", "_new_indices", ")", ">", "0", ":", "\n", "            ", "valid_indices", "[", "self", ".", "_new_indices", "[", "-", "1", "]", "]", "=", "False", "\n", "\n", "", "start_indices", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "where", "(", "valid_indices", ")", "[", "0", "]", ",", "batch_size", ")", "\n", "weights", "=", "np", ".", "ones", "(", "len", "(", "start_indices", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "start_indices", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.sample": [[227, 288], ["replay_pool.ReplayPool._sample_start_indices", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "replay_pool.ReplayPool.can_sample", "replay_pool.ReplayPool._get_indices", "replay_pool.ReplayPool._encode_observation", "numpy.vstack", "numpy.vstack", "numpy.any", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "numpy.vstack.append", "Exception", "numpy.argmax", "replay_pool.ReplayPool._env_spec.action_space.flatten_n", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "len", "replay_pool.ReplayPool._env_spec.action_space.sample_n", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._sample_start_indices", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.can_sample", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._encode_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten_n", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample_n"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "include_env_infos", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :return observations, actions, and rewards of horizon H+1\n        \"\"\"", "\n", "if", "not", "self", ".", "can_sample", "(", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "steps", ",", "observations_im", ",", "observations_vec", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "env_infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "start_indices", ",", "weights", "=", "self", ".", "_sample_start_indices", "(", "batch_size", ")", "\n", "\n", "for", "start_index", "in", "start_indices", ":", "\n", "            ", "indices", "=", "self", ".", "_get_indices", "(", "start_index", ",", "(", "start_index", "+", "self", ".", "_N", "+", "1", ")", "%", "self", ".", "_size", ")", "\n", "steps_i", "=", "self", ".", "_steps", "[", "indices", "]", "\n", "obs_im_i", ",", "obs_vec_i", "=", "self", ".", "_encode_observation", "(", "start_index", ")", "\n", "observations_im_i", "=", "np", ".", "vstack", "(", "[", "obs_im_i", ",", "self", ".", "_observations_im", "[", "indices", "[", "1", ":", "]", "]", "]", ")", "\n", "observations_vec_i", "=", "np", ".", "vstack", "(", "[", "obs_vec_i", ",", "self", ".", "_observations_vec", "[", "indices", "[", "1", ":", "]", "]", "]", ")", "\n", "goals_i", "=", "self", ".", "_goals", "[", "indices", "]", "\n", "actions_i", "=", "self", ".", "_actions", "[", "indices", "]", "\n", "rewards_i", "=", "self", ".", "_rewards", "[", "indices", "]", "\n", "dones_i", "=", "self", ".", "_dones", "[", "indices", "]", "\n", "env_infos_i", "=", "self", ".", "_env_infos", "[", "indices", "]", "if", "include_env_infos", "else", "[", "None", "]", "*", "len", "(", "dones_i", ")", "\n", "if", "dones_i", "[", "0", "]", ":", "\n", "                ", "raise", "Exception", "(", "'Should not ever happen'", ")", "\n", "", "if", "np", ".", "any", "(", "dones_i", ")", ":", "\n", "# H = 3", "\n", "# observations = [0 1 2 3]", "\n", "# actions = [10 11 12 13]", "\n", "# rewards = [20 21 22 23]", "\n", "# dones = [False True False False]", "\n", "\n", "                ", "d_idx", "=", "np", ".", "argmax", "(", "dones_i", ")", "\n", "rewards_i", "[", "d_idx", ":", "len", "(", "dones_i", ")", "]", "=", "0.", "\n", "dones_i", "[", "d_idx", ":", "len", "(", "dones_i", ")", "]", "=", "True", "\n", "actions_i", "[", "d_idx", ":", "len", "(", "dones_i", ")", "]", "=", "self", ".", "_env_spec", ".", "action_space", ".", "flatten_n", "(", "self", ".", "_env_spec", ".", "action_space", ".", "sample_n", "(", "len", "(", "dones_i", ")", "-", "d_idx", ")", ")", "\n", "goals_i", "[", "d_idx", ":", "len", "(", "dones_i", ")", "]", "=", "goals_i", "[", "d_idx", "-", "1", "]", "\n", "\n", "# observations = [0 1 2 3]", "\n", "# actions = [10 11 rand rand]", "\n", "# rewards = [20 21 0 0]", "\n", "# dones = [False True True True]", "\n", "\n", "", "steps", ".", "append", "(", "np", ".", "expand_dims", "(", "steps_i", ",", "0", ")", ")", "\n", "observations_im", ".", "append", "(", "np", ".", "expand_dims", "(", "observations_im_i", ",", "0", ")", ")", "\n", "observations_vec", ".", "append", "(", "np", ".", "expand_dims", "(", "observations_vec_i", ",", "0", ")", ")", "\n", "goals", ".", "append", "(", "np", ".", "expand_dims", "(", "goals_i", ",", "0", ")", ")", "\n", "actions", ".", "append", "(", "np", ".", "expand_dims", "(", "actions_i", ",", "0", ")", ")", "\n", "rewards", ".", "append", "(", "np", ".", "expand_dims", "(", "rewards_i", ",", "0", ")", ")", "\n", "dones", ".", "append", "(", "np", ".", "expand_dims", "(", "dones_i", ",", "0", ")", ")", "\n", "env_infos", ".", "append", "(", "np", ".", "expand_dims", "(", "env_infos_i", ",", "0", ")", ")", "\n", "\n", "", "steps", "=", "np", ".", "vstack", "(", "steps", ")", "\n", "observations_im", "=", "np", ".", "vstack", "(", "observations_im", ")", "\n", "observations_vec", "=", "np", ".", "vstack", "(", "observations_vec", ")", "\n", "goals", "=", "np", ".", "vstack", "(", "goals", ")", "\n", "actions", "=", "np", ".", "vstack", "(", "actions", ")", "\n", "rewards", "=", "np", ".", "vstack", "(", "rewards", ")", "\n", "dones", "=", "np", ".", "vstack", "(", "dones", ")", "\n", "env_infos", "=", "np", ".", "vstack", "(", "env_infos", ")", "\n", "\n", "return", "start_indices", ",", "weights", ",", "steps", ",", "(", "observations_im", ",", "observations_vec", ")", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "env_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.sample_all_generator": [[289, 334], ["range", "replay_pool.ReplayPool.can_sample", "replay_pool.ReplayPool._get_indices", "replay_pool.ReplayPool._encode_observation", "numpy.vstack", "numpy.vstack", "start_indices.append", "weights.append", "steps.append", "observations_im.append", "observations_vec.append", "goals.append", "actions.append", "rewards.append", "dones.append", "env_infos.append", "len", "len", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "len", "len", "numpy.asarray", "numpy.asarray", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.asarray", "numpy.asarray", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.can_sample", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._encode_observation"], ["", "def", "sample_all_generator", "(", "self", ",", "batch_size", ",", "include_env_infos", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "can_sample", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "start_indices", ",", "weights", ",", "steps", ",", "observations_im", ",", "observations_vec", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "env_infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "start_index", "in", "range", "(", "len", "(", "self", ")", "-", "1", ")", ":", "\n", "            ", "indices", "=", "self", ".", "_get_indices", "(", "start_index", ",", "(", "start_index", "+", "self", ".", "_N", "+", "1", ")", "%", "self", ".", "_curr_size", ")", "\n", "\n", "steps_i", "=", "self", ".", "_steps", "[", "indices", "]", "\n", "obs_im_i", ",", "obs_vec_i", "=", "self", ".", "_encode_observation", "(", "start_index", ")", "\n", "observations_im_i", "=", "np", ".", "vstack", "(", "[", "obs_im_i", ",", "self", ".", "_observations_im", "[", "indices", "[", "1", ":", "]", "]", "]", ")", "\n", "observations_vec_i", "=", "np", ".", "vstack", "(", "[", "obs_vec_i", ",", "self", ".", "_observations_vec", "[", "indices", "[", "1", ":", "]", "]", "]", ")", "\n", "goals_i", "=", "self", ".", "_goals", "[", "indices", "]", "\n", "actions_i", "=", "self", ".", "_actions", "[", "indices", "]", "\n", "rewards_i", "=", "self", ".", "_rewards", "[", "indices", "]", "\n", "dones_i", "=", "self", ".", "_dones", "[", "indices", "]", "\n", "env_infos_i", "=", "self", ".", "_env_infos", "[", "indices", "]", "if", "include_env_infos", "else", "[", "None", "]", "*", "len", "(", "dones_i", ")", "\n", "\n", "if", "dones_i", "[", "0", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "start_indices", ".", "append", "(", "start_index", ")", "\n", "weights", ".", "append", "(", "1.", ")", "\n", "steps", ".", "append", "(", "np", ".", "expand_dims", "(", "steps_i", ",", "0", ")", ")", "\n", "observations_im", ".", "append", "(", "np", ".", "expand_dims", "(", "observations_im_i", ",", "0", ")", ")", "\n", "observations_vec", ".", "append", "(", "np", ".", "expand_dims", "(", "observations_vec_i", ",", "0", ")", ")", "\n", "goals", ".", "append", "(", "np", ".", "expand_dims", "(", "goals_i", ",", "0", ")", ")", "\n", "actions", ".", "append", "(", "np", ".", "expand_dims", "(", "actions_i", ",", "0", ")", ")", "\n", "rewards", ".", "append", "(", "np", ".", "expand_dims", "(", "rewards_i", ",", "0", ")", ")", "\n", "dones", ".", "append", "(", "np", ".", "expand_dims", "(", "dones_i", ",", "0", ")", ")", "\n", "env_infos", ".", "append", "(", "np", ".", "expand_dims", "(", "env_infos_i", ",", "0", ")", ")", "\n", "\n", "if", "len", "(", "steps", ")", ">=", "batch_size", ":", "\n", "                ", "yield", "np", ".", "asarray", "(", "start_indices", ")", ",", "np", ".", "asarray", "(", "weights", ")", ",", "np", ".", "vstack", "(", "steps", ")", ",", "(", "np", ".", "vstack", "(", "observations_im", ")", ",", "np", ".", "vstack", "(", "observations_vec", ")", ")", ",", "np", ".", "vstack", "(", "goals", ")", ",", "np", ".", "vstack", "(", "actions", ")", ",", "np", ".", "vstack", "(", "rewards", ")", ",", "np", ".", "vstack", "(", "dones", ")", ",", "np", ".", "vstack", "(", "env_infos", ")", "\n", "start_indices", ",", "weights", ",", "steps", ",", "observations_im", ",", "observations_vec", ",", "goals", ",", "actions", ",", "rewards", ",", "dones", ",", "env_infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "", "", "if", "len", "(", "start_indices", ")", ">", "0", ":", "\n", "            ", "yield", "np", ".", "asarray", "(", "start_indices", ")", ",", "np", ".", "asarray", "(", "weights", ")", ",", "np", ".", "vstack", "(", "steps", ")", ",", "(", "np", ".", "vstack", "(", "observations_im", ")", ",", "np", ".", "vstack", "(", "observations_vec", ")", ")", ",", "np", ".", "vstack", "(", "goals", ")", ",", "np", ".", "vstack", "(", "actions", ")", ",", "np", ".", "vstack", "(", "rewards", ")", ",", "np", ".", "vstack", "(", "dones", ")", ",", "np", ".", "vstack", "(", "env_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.sample_rollouts": [[335, 368], ["range", "len", "start_indices.append", "numpy.random.randint", "replay_pool.ReplayPool._get_indices", "rollouts.append", "rollout[].sum", "len", "len", "replay_pool.ReplayPool._dones[].nonzero"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._get_indices"], ["", "", "def", "sample_rollouts", "(", "self", ",", "num_rollouts", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_save_rollouts_observations", ")", "\n", "\n", "### get start indices", "\n", "start_indices", "=", "[", "]", "\n", "if", "len", "(", "self", ")", "<", "self", ".", "_size", ":", "\n", "            ", "start_indices", ".", "append", "(", "0", ")", "\n", "start_indices", "+=", "(", "(", "self", ".", "_dones", "[", ":", "self", ".", "_curr_size", "]", ".", "nonzero", "(", ")", "[", "0", "]", "+", "1", ")", "%", "self", ".", "_curr_size", ")", ".", "tolist", "(", ")", "\n", "\n", "", "rollouts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_rollouts", ")", ":", "\n", "            ", "start_index_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "start_indices", ")", "-", "1", ")", "\n", "start_index", "=", "start_indices", "[", "start_index_index", "]", "\n", "end_index", "=", "start_indices", "[", "(", "start_index_index", "+", "1", ")", "%", "len", "(", "start_indices", ")", "]", "\n", "\n", "indices", "=", "self", ".", "_get_indices", "(", "start_index", ",", "end_index", ")", "\n", "\n", "rollout", "=", "{", "\n", "'steps'", ":", "self", ".", "_steps", "[", "indices", "]", ",", "\n", "'observations_im'", ":", "self", ".", "_observations_im", "[", "indices", "]", ",", "\n", "'observations_vec'", ":", "self", ".", "_observations_vec", "[", "indices", "]", ",", "\n", "'goals'", ":", "self", ".", "_goals", "[", "indices", "]", ",", "\n", "'actions'", ":", "self", ".", "_actions", "[", "indices", "]", ",", "\n", "'rewards'", ":", "self", ".", "_rewards", "[", "indices", "]", ",", "\n", "'dones'", ":", "self", ".", "_dones", "[", "indices", "]", ",", "\n", "'env_infos'", ":", "None", ",", "\n", "}", "\n", "\n", "assert", "(", "rollout", "[", "'dones'", "]", "[", "-", "1", "]", "==", "True", ")", "\n", "assert", "(", "rollout", "[", "'dones'", "]", ".", "sum", "(", ")", "==", "1", ")", "\n", "rollouts", ".", "append", "(", "rollout", ")", "\n", "\n", "", "return", "rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool._update_log_stats": [[373, 407], ["replay_pool.ReplayPool._log_stats[].append", "replay_pool.ReplayPool._log_stats[].append", "replay_pool.ReplayPool._log_stats[].append", "replay_pool.ReplayPool._log_stats[].append", "numpy.mean", "numpy.sum", "len", "replay_pool.ReplayPool._log_paths.append", "env_infos[].keys", "numpy.array"], "methods", ["None"], ["", "def", "_update_log_stats", "(", "self", ")", ":", "\n", "        ", "indices", "=", "self", ".", "_new_indices", "\n", "\n", "### update log", "\n", "rewards", "=", "self", ".", "_rewards", "[", "indices", "]", "\n", "# Use 2nd to last because last reward should be dummy done", "\n", "self", ".", "_log_stats", "[", "'FinalReward'", "]", ".", "append", "(", "rewards", "[", "-", "2", "]", ")", "\n", "self", ".", "_log_stats", "[", "'AvgReward'", "]", ".", "append", "(", "np", ".", "mean", "(", "rewards", ")", ")", "\n", "self", ".", "_log_stats", "[", "'CumReward'", "]", ".", "append", "(", "np", ".", "sum", "(", "rewards", ")", ")", "\n", "self", ".", "_log_stats", "[", "'EpisodeLength'", "]", ".", "append", "(", "len", "(", "rewards", ")", ")", "\n", "\n", "## update paths", "\n", "if", "self", ".", "_save_rollouts", ":", "\n", "\n", "            ", "if", "self", ".", "_save_env_infos", ":", "\n", "                ", "env_infos", "=", "self", ".", "_env_infos", "[", "indices", "]", "[", ":", "-", "1", "]", "# b/c last will be empty", "\n", "env_info_keys", "=", "env_infos", "[", "0", "]", ".", "keys", "(", ")", "\n", "env_infos", "=", "{", "k", ":", "np", ".", "array", "(", "[", "ei", "[", "k", "]", "for", "ei", "in", "env_infos", "]", ")", "for", "k", "in", "env_info_keys", "}", "\n", "", "else", ":", "\n", "                ", "env_infos", "=", "None", "\n", "\n", "", "self", ".", "_log_paths", ".", "append", "(", "{", "\n", "'steps'", ":", "self", ".", "_steps", "[", "indices", "]", ",", "\n", "'observations_im'", ":", "self", ".", "_observations_im", "[", "indices", "]", "if", "self", ".", "_save_rollouts_observations", "else", "None", ",", "\n", "'observations_vec'", ":", "self", ".", "_observations_vec", "[", "indices", "]", "if", "self", ".", "_save_rollouts_observations", "else", "None", ",", "\n", "'goals'", ":", "self", ".", "_goals", "[", "indices", "]", ",", "\n", "'actions'", ":", "self", ".", "_actions", "[", "indices", "]", ",", "\n", "'rewards'", ":", "self", ".", "_rewards", "[", "indices", "]", ",", "\n", "'dones'", ":", "self", ".", "_dones", "[", "indices", "]", ",", "\n", "'env_infos'", ":", "env_infos", ",", "\n", "}", ")", "\n", "\n", "# clear env_infos so we save memory, but won't be able to access with sample(...)", "\n", "", "self", ".", "_env_infos", "[", "indices", "]", "=", "np", ".", "object", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.log": [[408, 425], ["gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "gcg.data.logger.logger.record_tabular", "time.time", "collections.defaultdict", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "len", "numpy.mean", "time.time"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular", "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular"], ["", "def", "log", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "self", ".", "_log_stats", "[", "'Time'", "]", "=", "[", "time", ".", "time", "(", ")", "-", "self", ".", "_last_get_log_stats_time", "]", "if", "self", ".", "_last_get_log_stats_time", "else", "[", "0.", "]", "\n", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'CumRewardMean'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "'CumReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'CumRewardStd'", ",", "np", ".", "std", "(", "self", ".", "_log_stats", "[", "'CumReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'AvgRewardMean'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "'AvgReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'AvgRewardStd'", ",", "np", ".", "std", "(", "self", ".", "_log_stats", "[", "'AvgReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'FinalRewardMean'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "'FinalReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'FinalRewardStd'", ",", "np", ".", "std", "(", "self", ".", "_log_stats", "[", "'FinalReward'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'EpisodeLengthMean'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "'EpisodeLength'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'EpisodeLengthStd'", ",", "np", ".", "std", "(", "self", ".", "_log_stats", "[", "'EpisodeLength'", "]", ")", ")", "\n", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'NumEpisodes'", ",", "len", "(", "self", ".", "_log_stats", "[", "'EpisodeLength'", "]", ")", ")", "\n", "logger", ".", "record_tabular", "(", "prefix", "+", "'Time'", ",", "np", ".", "mean", "(", "self", ".", "_log_stats", "[", "'Time'", "]", ")", ")", "\n", "\n", "self", ".", "_last_get_log_stats_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_log_stats", "=", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.get_recent_rollouts": [[426, 430], ["None"], "methods", ["None"], ["", "def", "get_recent_rollouts", "(", "self", ")", ":", "\n", "        ", "paths", "=", "self", ".", "_log_paths", "\n", "self", ".", "_log_paths", "=", "[", "]", "\n", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.finished_storing_rollout": [[431, 434], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "finished_storing_rollout", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_last_done_index", "==", "self", ".", "_index", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.__init__": [[6, 12], ["sampler.OneStepDelayAndHorizonEnvWrapper"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "policy", ",", "replay_pool", ")", ":", "\n", "        ", "self", ".", "_env", "=", "OneStepDelayAndHorizonEnvWrapper", "(", "env", ")", "\n", "self", ".", "_policy", "=", "policy", "\n", "self", ".", "_replay_pool", "=", "replay_pool", "\n", "\n", "self", ".", "_curr_observation", ",", "self", ".", "_curr_goal", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.env": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "env", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.step": [[17, 60], ["sampler.Sampler._replay_pool.store_observation", "sampler.Sampler._replay_pool.encode_recent_observation", "dict", "sampler.Sampler._env.step", "env_info.update", "sampler.Sampler._replay_pool.store_effect", "sampler.Sampler.reset", "sampler.Sampler._env.action_selection_space.sample", "sampler.Sampler._policy.reset_get_action", "sampler.Sampler._policy.get_action"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.encode_recent_observation", "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.store_effect", "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.reset_get_action", "home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.get_action"], ["", "def", "step", "(", "self", ",", "step", ",", "take_random_actions", "=", "False", ",", "explore", "=", "True", ",", "action", "=", "None", ",", "goal_override", "=", "None", ",", "use_labeller", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_curr_observation", "is", "None", "or", "self", ".", "_curr_goal", "is", "None", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "\n", "", "\"\"\" Takes one step and adds to replay pool \"\"\"", "\n", "assert", "(", "self", ".", "_env", "is", "not", "None", ")", "\n", "obs_im", ",", "obs_vec", "=", "curr_obs", "=", "self", ".", "_curr_observation", "\n", "curr_goal", "=", "self", ".", "_curr_goal", "\n", "if", "goal_override", "is", "not", "None", ":", "\n", "            ", "curr_goal", "=", "goal_override", "\n", "\n", "### store last observations and get encoded", "\n", "", "curr_goal", "=", "self", ".", "_replay_pool", ".", "store_observation", "(", "step", ",", "(", "obs_im", ",", "obs_vec", ")", ",", "curr_goal", ",", "use_labeller", "=", "use_labeller", ")", "\n", "encoded_observation", "=", "self", ".", "_replay_pool", ".", "encode_recent_observation", "(", ")", "\n", "\n", "### get actions", "\n", "action_info", "=", "dict", "(", ")", "\n", "if", "take_random_actions", ":", "\n", "            ", "assert", "(", "action", "is", "None", ")", "\n", "action", "=", "self", ".", "_env", ".", "action_selection_space", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "action", "is", "None", ":", "\n", "                ", "action", ",", "_", ",", "action_info", "=", "self", ".", "_policy", ".", "get_action", "(", "\n", "step", "=", "step", ",", "\n", "current_episode_step", "=", "self", ".", "_env", ".", "current_episode_step", ",", "\n", "observation", "=", "encoded_observation", ",", "\n", "goal", "=", "curr_goal", ",", "\n", "explore", "=", "explore", ")", "\n", "\n", "### take step", "\n", "", "", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "=", "self", ".", "_env", ".", "step", "(", "action", ",", "**", "kwargs", ")", "\n", "env_info", ".", "update", "(", "action_info", ")", "\n", "\n", "if", "done", ":", "\n", "            ", "self", ".", "_policy", ".", "reset_get_action", "(", ")", "\n", "\n", "### add to replay pool", "\n", "", "self", ".", "_replay_pool", ".", "store_effect", "(", "action", ",", "reward", ",", "done", ",", "env_info", ")", "\n", "\n", "self", ".", "_curr_observation", "=", "next_observation", "\n", "self", ".", "_curr_goal", "=", "goal", "\n", "\n", "return", "curr_obs", ",", "curr_goal", ",", "action", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.reset": [[61, 66], ["sampler.Sampler._env.reset", "sampler.Sampler._replay_pool.force_done"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.replay_pools.replay_pool.ReplayPool.force_done"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_env", "is", "not", "None", ")", "\n", "\n", "self", ".", "_curr_observation", ",", "self", ".", "_curr_goal", "=", "self", ".", "_env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "_replay_pool", ".", "force_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.get_current_goal": [[67, 72], ["labeller.label"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller.label"], ["", "def", "get_current_goal", "(", "self", ",", "labeller", "=", "None", ")", ":", "\n", "        ", "if", "labeller", ":", "\n", "            ", "return", "labeller", ".", "label", "(", "(", "[", "self", ".", "_curr_observation", "[", "0", "]", "]", ",", "[", "self", ".", "_curr_observation", "[", "1", "]", "]", ")", ",", "[", "self", ".", "_curr_goal", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_curr_goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.Sampler.is_done": [[73, 76], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "is_done", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.__init__": [[80, 86], ["numpy.isfinite"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "self", ".", "_env", "=", "env", "\n", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_skip", "=", "False", "\n", "assert", "(", "np", ".", "isfinite", "(", "self", ".", "_env", ".", "horizon", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.env": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "env", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.step": [[91, 113], ["sampler.OneStepDelayAndHorizonEnvWrapper._env.reset", "dict", "sampler.OneStepDelayAndHorizonEnvWrapper._env.step"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset", "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step"], ["", "def", "step", "(", "self", ",", "action", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_skip", ":", "\n", "            ", "next_observation", ",", "goal", "=", "self", ".", "_env", ".", "reset", "(", "**", "kwargs", ")", "\n", "reward", "=", "0", "\n", "done", "=", "True", "\n", "env_info", "=", "dict", "(", ")", "\n", "self", ".", "_t", "=", "0", "\n", "", "else", ":", "\n", "            ", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "=", "self", ".", "_env", ".", "step", "(", "action", ",", "**", "kwargs", ")", "\n", "self", ".", "_t", "+=", "1", "\n", "\n", "", "if", "self", ".", "_t", ">=", "self", ".", "_env", ".", "horizon", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "if", "self", ".", "_skip", ":", "\n", "            ", "self", ".", "_skip", "=", "False", "\n", "", "elif", "done", ":", "\n", "# delay done by one timestep", "\n", "            ", "self", ".", "_skip", "=", "True", "\n", "done", "=", "False", "\n", "\n", "", "return", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.reset": [[114, 119], ["sampler.OneStepDelayAndHorizonEnvWrapper._env.reset"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "obs", ",", "goal", "=", "self", ".", "_env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "_t", "=", "0", "\n", "self", ".", "_skip", "=", "False", "\n", "return", "obs", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.action_selection_space": [[120, 123], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_selection_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_env", ".", "action_selection_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.current_episode_step": [[124, 127], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "current_episode_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.samplers.sampler.OneStepDelayAndHorizonEnvWrapper.is_done": [[128, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.__init__": [[5, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "observation_im_space", ",", "\n", "action_space", ",", "\n", "action_selection_space", ",", "\n", "observation_vec_spec", ",", "\n", "action_spec", ",", "\n", "action_selection_spec", ",", "\n", "goal_spec", ")", ":", "\n", "        ", "\"\"\"\n        :type observation_im_space: Space\n        :type action_space: Space\n        :type observation_vec_spec: dictionary of Space\n        :type action_spec: dictionary of Space\n        :type goal_spec: dictionary of Space\n        \"\"\"", "\n", "self", ".", "_observation_im_space", "=", "observation_im_space", "\n", "self", ".", "_action_space", "=", "action_space", "\n", "self", ".", "_action_selection_space", "=", "action_selection_space", "\n", "self", ".", "_observation_vec_spec", "=", "observation_vec_spec", "\n", "self", ".", "_action_spec", "=", "action_spec", "\n", "self", ".", "_action_selection_spec", "=", "action_selection_spec", "\n", "self", ".", "_goal_spec", "=", "goal_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.observation_im_space": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_im_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_im_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.action_space": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.action_selection_space": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_selection_space", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_selection_space", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.observation_vec_spec": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "observation_vec_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_observation_vec_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.action_spec": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.action_selection_spec": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_selection_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_action_selection_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env_spec.EnvSpec.goal_spec": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "goal_spec", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_goal_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.__init__": [[8, 25], ["gcg.envs.env_spec.EnvSpec"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "observation_im_space", "=", "None", "\n", "self", ".", "action_space", "=", "None", "\n", "self", ".", "action_selection_space", "=", "None", "\n", "self", ".", "observation_vec_spec", "=", "None", "\n", "self", ".", "action_spec", "=", "None", "\n", "self", ".", "action_selection_spec", "=", "None", "\n", "self", ".", "goal_spec", "=", "None", "\n", "self", ".", "spec", "=", "EnvSpec", "(", "\n", "observation_im_space", "=", "self", ".", "observation_im_space", ",", "\n", "action_space", "=", "self", ".", "action_space", ",", "\n", "action_selection_space", "=", "self", ".", "action_selection_space", ",", "\n", "observation_vec_spec", "=", "self", ".", "observation_vec_spec", ",", "\n", "action_spec", "=", "self", ".", "action_spec", ",", "\n", "action_selection_spec", "=", "self", ".", "action_selection_spec", ",", "\n", "goal_spec", "=", "self", ".", "goal_spec", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.step": [[27, 35], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "next_observation", "=", "None", "\n", "goal", "=", "None", "\n", "reward", "=", "None", "\n", "done", "=", "None", "\n", "env_info", "=", "None", "\n", "return", "next_observation", ",", "goal", ",", "reward", ",", "done", ",", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.reset": [[36, 41], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "observation", "=", "None", "\n", "goal", "=", "None", "\n", "return", "observation", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.envs.env.Env.log": [[46, 48], ["None"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.sample": [[11, 16], ["None"], "methods", ["None"], ["def", "sample", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Uniformly randomly sample a random element of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.sample_n": [[17, 22], ["None"], "methods", ["None"], ["", "def", "sample_n", "(", "self", ",", "num_samples", ",", "seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Uniformly randomly sample random elements of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.contains": [[23, 29], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Return boolean specifying if x is a valid\n        member of this space\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.flatten": [[30, 32], ["None"], "methods", ["None"], ["", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.unflatten": [[33, 35], ["None"], "methods", ["None"], ["", "def", "unflatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.flatten_n": [[36, 38], ["None"], "methods", ["None"], ["", "def", "flatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.unflatten_n": [[39, 41], ["None"], "methods", ["None"], ["", "def", "unflatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.flat_dim": [[42, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "flat_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The dimension of the flattened vector of the tensor representation\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.base.Space.new_tensor_variable": [[49, 57], ["None"], "methods", ["None"], ["", "def", "new_tensor_variable", "(", "self", ",", "name", ",", "extra_dims", ")", ":", "\n", "        ", "\"\"\"\n        Create a Theano tensor variable given the name and extra dimensions prepended\n        :param name: name of the variable\n        :param extra_dims: extra dimensions in the front\n        :return: the created tensor variable\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.__init__": [[13, 34], ["box.Box.low.astype", "box.Box.high.astype", "numpy.isscalar", "numpy.isscalar", "numpy.array", "numpy.array", "numpy.isscalar", "numpy.isscalar", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "low", ",", "high", ",", "shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Two kinds of valid input:\n            Box(-1.0, 1.0, (3,4)) # low and high are scalars, and shape is provided\n            Box(np.array([-1.0,-2.0]), np.array([2.0,4.0])) # low and high are arrays of the same shape\n        \"\"\"", "\n", "if", "shape", "is", "None", ":", "\n", "            ", "if", "np", ".", "isscalar", "(", "low", ")", "and", "np", ".", "isscalar", "(", "high", ")", ":", "\n", "                ", "self", ".", "low", "=", "np", ".", "array", "(", "[", "low", "]", ")", "\n", "self", ".", "high", "=", "np", ".", "array", "(", "[", "high", "]", ")", "\n", "", "else", ":", "\n", "                ", "assert", "low", ".", "shape", "==", "high", ".", "shape", "\n", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "", "", "else", ":", "\n", "            ", "assert", "np", ".", "isscalar", "(", "low", ")", "and", "np", ".", "isscalar", "(", "high", ")", "\n", "self", ".", "low", "=", "low", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "self", ".", "high", "=", "high", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "\n", "", "self", ".", "low", "=", "self", ".", "low", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "high", "=", "self", ".", "high", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.sample": [[35, 37], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ",", "size", "=", "self", ".", "low", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.sample_n": [[38, 40], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "sample_n", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ",", "size", "=", "(", "n", ",", "*", "self", ".", "low", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.contains": [[41, 43], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "shape", "==", "self", ".", "shape", "and", "(", "x", ">=", "self", ".", "low", ")", ".", "all", "(", ")", "and", "(", "x", "<=", "self", ".", "high", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.flat_dim": [[48, 51], ["numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "flat_dim", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "prod", "(", "self", ".", "low", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.bounds": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bounds", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "low", ",", "self", ".", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.volume": [[56, 59], ["numpy.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "volume", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "prod", "(", "self", ".", "high", "-", "self", ".", "low", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.flatten": [[60, 62], ["numpy.asarray().flatten", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten"], ["", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.unflatten": [[63, 65], ["numpy.asarray().reshape", "numpy.asarray"], "methods", ["None"], ["", "def", "unflatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "x", ")", ".", "reshape", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.flatten_n": [[66, 69], ["numpy.asarray", "numpy.asarray.reshape"], "methods", ["None"], ["", "def", "flatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "xs", "=", "np", ".", "asarray", "(", "xs", ")", "\n", "return", "xs", ".", "reshape", "(", "(", "xs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.unflatten_n": [[70, 73], ["numpy.asarray", "numpy.asarray.reshape"], "methods", ["None"], ["", "def", "unflatten_n", "(", "self", ",", "xs", ")", ":", "\n", "        ", "xs", "=", "np", ".", "asarray", "(", "xs", ")", "\n", "return", "xs", ".", "reshape", "(", "(", "xs", ".", "shape", "[", "0", "]", ",", ")", "+", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.__repr__": [[74, 76], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Box\"", "+", "str", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.__eq__": [[77, 80], ["isinstance", "numpy.allclose", "numpy.allclose"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "isinstance", "(", "other", ",", "Box", ")", "and", "np", ".", "allclose", "(", "self", ".", "low", ",", "other", ".", "low", ")", "and", "np", ".", "allclose", "(", "self", ".", "high", ",", "other", ".", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.__hash__": [[81, 83], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "self", ".", "low", ",", "self", ".", "high", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.new_tensor_variable": [[84, 88], ["tensorflow.placeholder", "tensorflow.placeholder", "list"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "new_tensor_variable", "(", "self", ",", "name", ",", "extra_dims", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "if", "flatten", ":", "\n", "            ", "return", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "extra_dims", "+", "[", "self", ".", "flat_dim", "]", ",", "name", "=", "name", ")", "\n", "", "return", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", "*", "extra_dims", "+", "list", "(", "self", ".", "shape", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.dtype": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "float32", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.__init__": [[13, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.n": [[16, 19], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample": [[20, 22], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample_n": [[23, 25], ["numpy.random.randint"], "methods", ["None"], ["", "def", "sample_n", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n", ",", "size", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.contains": [[26, 29], ["numpy.asarray"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "return", "x", ".", "shape", "==", "(", ")", "and", "x", ".", "dtype", ".", "kind", "==", "'i'", "and", "x", ">=", "0", "and", "x", "<", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.__repr__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Discrete(%d)\"", "%", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.__eq__": [[67, 71], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "Discrete", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "self", ".", "n", "==", "other", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten": [[36, 38], ["gcg.envs.spaces.utils.to_onehot"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.to_onehot"], ["", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "utils", ".", "to_onehot", "(", "x", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.unflatten": [[39, 41], ["gcg.envs.spaces.utils.from_onehot"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.from_onehot"], ["", "def", "unflatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "utils", ".", "from_onehot", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flatten_n": [[42, 44], ["gcg.envs.spaces.utils.to_onehot_n"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.to_onehot_n"], ["", "def", "flatten_n", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "utils", ".", "to_onehot_n", "(", "x", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.unflatten_n": [[45, 47], ["gcg.envs.spaces.utils.from_onehot_n"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.from_onehot_n"], ["", "def", "unflatten_n", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "utils", ".", "from_onehot_n", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.default_value": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "default_value", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.flat_dim": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "flat_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.weighted_sample": [[56, 58], ["gcg.envs.spaces.utils.weighted_sample", "range"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.weighted_sample"], ["", "def", "weighted_sample", "(", "self", ",", "weights", ")", ":", "\n", "        ", "return", "utils", ".", "weighted_sample", "(", "weights", ",", "range", "(", "self", ".", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.new_tensor_variable": [[59, 62], ["tensorflow.placeholder"], "methods", ["None"], ["", "def", "new_tensor_variable", "(", "self", ",", "name", ",", "extra_dims", ")", ":", "\n", "# needed for safe conversion to float32", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "uint8", ",", "shape", "=", "[", "None", "]", "*", "extra_dims", "+", "[", "self", ".", "flat_dim", "]", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.dtype": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.__hash__": [[72, 74], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.weighted_sample": [[3, 13], ["numpy.cumsum", "sum", "numpy.random.rand", "min", "len"], "function", ["None"], ["def", "weighted_sample", "(", "weights", ",", "objects", ")", ":", "\n", "    ", "\"\"\"\n    Return a random item from objects, with the weighting defined by weights\n    (which must sum to 1).\n    \"\"\"", "\n", "# An array of the weights, cumulatively summed.", "\n", "cs", "=", "np", ".", "cumsum", "(", "weights", ")", "\n", "# Find the index of the first weight over a random value.", "\n", "idx", "=", "sum", "(", "cs", "<", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "return", "objects", "[", "min", "(", "idx", ",", "len", "(", "objects", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.to_onehot": [[14, 18], ["numpy.zeros"], "function", ["None"], ["", "def", "to_onehot", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "ret", "[", "ind", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.to_onehot_n": [[19, 23], ["numpy.zeros", "len", "numpy.arange", "len"], "function", ["None"], ["", "def", "to_onehot_n", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds", ")", ",", "dim", ")", ")", "\n", "ret", "[", "np", ".", "arange", "(", "len", "(", "inds", ")", ")", ",", "inds", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.from_onehot": [[24, 26], ["numpy.nonzero"], "function", ["None"], ["", "def", "from_onehot", "(", "v", ")", ":", "\n", "    ", "return", "np", ".", "nonzero", "(", "v", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.utils.from_onehot_n": [[27, 31], ["len", "numpy.nonzero"], "function", ["None"], ["", "def", "from_onehot_n", "(", "v", ")", ":", "\n", "    ", "if", "len", "(", "v", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "np", ".", "nonzero", "(", "v", ")", "[", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "experiment_groups", ")", ":", "\n", "        ", "self", ".", "_experiment_groups", "=", "experiment_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.__getitem__": [[22, 31], ["Exception"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        return experiment with params['exp_name'] == item\n        \"\"\"", "\n", "for", "exp", "in", "self", ".", "list", ":", "\n", "            ", "if", "exp", ".", "name", "==", "item", ":", "\n", "                ", "return", "exp", "\n", "\n", "", "", "raise", "Exception", "(", "'Experiment {0} not found'", ".", "format", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list": [[32, 35], ["experiment.MultiExperimentComparison.list"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "@", "property", "\n", "def", "list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "itertools", ".", "chain", "(", "*", "[", "eg", ".", "experiments", "for", "eg", "in", "self", ".", "_experiment_groups", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.plot_csv": [[40, 60], ["len", "matplotlib.subplots", "zip", "hasattr", "experiment.MultiExperimentComparison._plot_csv", "matplotlib.show", "f.savefig", "numpy.array", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison._plot_csv"], ["", "def", "plot_csv", "(", "self", ",", "keys", ",", "save_path", "=", "None", ",", "xkey", "=", "'Step'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param keys: which keys from the csvs do you want to plot\n        :param kwargs: save_path, plot_std, avg_window, xlim, ylim\n        \"\"\"", "\n", "num_plots", "=", "len", "(", "keys", ")", "\n", "\n", "f", ",", "axes", "=", "plt", ".", "subplots", "(", "1", ",", "num_plots", ",", "figsize", "=", "5", "*", "np", ".", "array", "(", "[", "num_plots", ",", "1", "]", ")", ")", "\n", "if", "not", "hasattr", "(", "axes", ",", "'__iter__'", ")", ":", "\n", "            ", "axes", "=", "[", "axes", "]", "\n", "\n", "", "for", "ax", ",", "key", "in", "zip", "(", "axes", "[", ":", "num_plots", "]", ",", "keys", ")", ":", "\n", "            ", "self", ".", "_plot_csv", "(", "ax", ",", "key", ",", "xkey", "=", "xkey", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "save_path", "is", "None", ":", "\n", "            ", "plt", ".", "show", "(", "block", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "f", ".", "savefig", "(", "save_path", ",", "\n", "bbox_inches", "=", "'tight'", ",", "\n", "dpi", "=", "kwargs", ".", "get", "(", "'dpi'", ",", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison._plot_csv": [[61, 103], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "ax.ticklabel_format", "ax.set_title", "ax.legend", "utils.DataAverageInterpolation", "utils.DataAverageInterpolation", "utils.DataAverageInterpolation.eval", "ax.plot", "ax.set_xlabel", "ax.set_xlim", "ax.set_ylim", "utils.DataAverageInterpolation.add_data", "max", "min", "numpy.linspace", "utils.DataAverageInterpolation.eval", "copy.deepcopy", "ax.fill_between", "utils.moving_avg_std", "utils.DataAverageInterpolation.add_data", "min", "max", "int"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.eval", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.add_data", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.eval", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.moving_avg_std", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.add_data"], ["", "", "def", "_plot_csv", "(", "self", ",", "ax", ",", "key", ",", "xkey", "=", "'Step'", ",", "**", "kwargs", ")", ":", "\n", "        ", "avg_window", "=", "kwargs", ".", "get", "(", "'avg_window'", ",", "None", ")", "\n", "plot_std", "=", "kwargs", ".", "get", "(", "'plot_std'", ",", "True", ")", "\n", "xlim", "=", "kwargs", ".", "get", "(", "'xlim'", ",", "None", ")", "\n", "ylim", "=", "kwargs", ".", "get", "(", "'ylim'", ",", "None", ")", "\n", "\n", "for", "experiment_group", "in", "self", ".", "_experiment_groups", ":", "\n", "            ", "csvs", "=", "experiment_group", ".", "csv", "\n", "\n", "data_interp", "=", "utils", ".", "DataAverageInterpolation", "(", ")", "\n", "data_interp_stds", "=", "utils", ".", "DataAverageInterpolation", "(", ")", "\n", "min_step", ",", "max_step", "=", "-", "np", ".", "inf", ",", "np", ".", "inf", "\n", "for", "csv", "in", "csvs", ":", "\n", "                ", "steps", ",", "values", "=", "csv", "[", "xkey", "]", ",", "csv", "[", "key", "]", "\n", "if", "avg_window", "is", "not", "None", ":", "\n", "                    ", "steps", ",", "values", ",", "values_stds", "=", "utils", ".", "moving_avg_std", "(", "steps", ",", "values", ",", "window", "=", "avg_window", ")", "\n", "data_interp_stds", ".", "add_data", "(", "steps", ",", "values_stds", ")", "\n", "", "data_interp", ".", "add_data", "(", "steps", ",", "values", ")", "\n", "\n", "min_step", "=", "max", "(", "min_step", ",", "min", "(", "steps", ")", ")", "\n", "max_step", "=", "min", "(", "max_step", ",", "max", "(", "steps", ")", ")", "\n", "\n", "", "steps", "=", "np", ".", "linspace", "(", "min_step", ",", "max_step", ",", "int", "(", "1e3", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "values_mean", ",", "_", "=", "data_interp", ".", "eval", "(", "steps", ")", "\n", "if", "avg_window", "is", "not", "None", ":", "\n", "                ", "values_std", ",", "_", "=", "data_interp_stds", ".", "eval", "(", "steps", ")", "\n", "\n", "", "ax", ".", "plot", "(", "steps", ",", "values_mean", ",", "**", "experiment_group", ".", "plot", ")", "\n", "if", "plot_std", ":", "\n", "                ", "plot_params", "=", "copy", ".", "deepcopy", "(", "experiment_group", ".", "plot", ")", "\n", "plot_params", "[", "'label'", "]", "=", "None", "\n", "ax", ".", "fill_between", "(", "steps", ",", "values_mean", "-", "values_std", ",", "values_mean", "+", "values_std", ",", "alpha", "=", "0.4", ",", "**", "plot_params", ")", "\n", "", "ax", ".", "set_xlabel", "(", "xkey", ")", "\n", "\n", "", "ax", ".", "ticklabel_format", "(", "style", "=", "'sci'", ",", "axis", "=", "'x'", ",", "scilimits", "=", "(", "0", ",", "0", ")", ")", "\n", "if", "xlim", ":", "\n", "            ", "ax", ".", "set_xlim", "(", "xlim", ")", "\n", "", "if", "ylim", ":", "\n", "            ", "ax", ".", "set_ylim", "(", "ylim", ")", "\n", "", "ax", ".", "set_title", "(", "key", ",", "fontdict", "=", "{", "'fontsize'", ":", "8", "}", ")", "\n", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.__init__": [[111, 121], ["dict", "experiment.Experiment", "experiment.ExperimentGroup.get_plot_label"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.get_plot_label"], ["    ", "def", "__init__", "(", "self", ",", "exp_names", ",", "plot", "=", "dict", "(", ")", ",", "clear_obs", "=", "False", ",", "label_params", "=", "None", ")", ":", "\n", "        ", "self", ".", "plot", "=", "plot", "\n", "\n", "### load experiments", "\n", "self", ".", "experiments", "=", "[", "Experiment", "(", "exp_name", ",", "plot", "=", "plot", ",", "clear_obs", "=", "clear_obs", ")", "for", "exp_name", "in", "exp_names", "]", "\n", "\n", "if", "label_params", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "get_plot_label", "(", "label_params", ")", "\n", "for", "plot", "in", "[", "self", ".", "plot", "]", "+", "[", "exp", ".", "plot", "for", "exp", "in", "self", ".", "experiments", "]", ":", "\n", "                ", "plot", "[", "'label'", "]", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.params": [[127, 130], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "return", "[", "exp", ".", "params", "for", "exp", "in", "self", ".", "experiments", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.name": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "[", "exp", ".", "name", "for", "exp", "in", "self", ".", "experiments", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.csv": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "csv", "(", "self", ")", ":", "\n", "        ", "return", "[", "exp", ".", "csv", "for", "exp", "in", "self", ".", "experiments", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.train_rollouts": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_rollouts", "(", "self", ")", ":", "\n", "        ", "return", "[", "exp", ".", "train_rollouts", "for", "exp", "in", "self", ".", "experiments", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.eval_rollouts": [[143, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "eval_rollouts", "(", "self", ")", ":", "\n", "        ", "return", "[", "exp", ".", "eval_rollouts", "for", "exp", "in", "self", ".", "experiments", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.ExperimentGroup.get_plot_label": [[147, 161], ["experiment.ExperimentGroup.get_plot_label.nested_get"], "methods", ["None"], ["", "def", "get_plot_label", "(", "self", ",", "label_params", ")", ":", "\n", "            ", "\"\"\"\n            :param keys_list: list of keys from self.params to generate label from\n            e.g.\n                [('policy', 'H'), ('policy', 'get_action', 'K'), ...]\n            :return: str\n            \"\"\"", "\n", "def", "nested_get", "(", "dct", ",", "keys", ")", ":", "\n", "                ", "for", "key", "in", "keys", ":", "\n", "                    ", "dct", "=", "dct", "[", "key", "]", "\n", "", "return", "dct", "\n", "\n", "", "label", "=", "', '", ".", "join", "(", "[", "'{0}: {1}'", ".", "format", "(", "k", ",", "nested_get", "(", "self", ".", "params", "[", "0", "]", ",", "v", ")", ")", "for", "k", ",", "v", "in", "label_params", "]", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.__init__": [[168, 182], ["dict", "gcg.data.file_manager.FileManager"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "exp_name", ",", "plot", "=", "dict", "(", ")", ",", "clear_obs", "=", "False", ")", ":", "\n", "        ", "self", ".", "_exp_name", "=", "exp_name", "\n", "self", ".", "_fm", "=", "FileManager", "(", "exp_name", ",", "is_continue", "=", "True", ",", "log_level", "=", "'debug'", ",", "log_fname", "=", "'/tmp/log_post_experiment.txt'", ")", "\n", "\n", "self", ".", "plot", "=", "plot", "\n", "self", ".", "_clear_obs", "=", "clear_obs", "\n", "\n", "self", ".", "_internal_params", "=", "None", "\n", "self", ".", "_internal_csv", "=", "None", "\n", "self", ".", "_internal_train_rollouts", "=", "None", "\n", "self", ".", "_internal_eval_rollouts", "=", "None", "\n", "\n", "self", ".", "env", "=", "None", "\n", "self", ".", "policy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.create_env": [[187, 191], ["None"], "methods", ["None"], ["", "def", "create_env", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "env", "is", "None", ":", "\n", "            ", "env_params", "=", "self", ".", "params", "[", "'env'", "]", "\n", "self", ".", "env", "=", "env_params", "[", "'class'", "]", "(", "params", "=", "env_params", "[", "'kwargs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.create_policy": [[192, 206], ["None"], "methods", ["None"], ["", "", "def", "create_policy", "(", "self", ",", "gpu_device", "=", "None", ",", "gpu_frac", "=", "None", ")", ":", "\n", "        ", "assert", "(", "self", ".", "env", "is", "not", "None", ")", "\n", "policy_params", "=", "self", ".", "params", "[", "'policy'", "]", "\n", "\n", "if", "gpu_device", "is", "not", "None", ":", "\n", "            ", "policy_params", "[", "'gpu_device'", "]", "=", "gpu_device", "\n", "", "if", "gpu_frac", "is", "not", "None", ":", "\n", "            ", "policy_params", "[", "'gpu_frac'", "]", "=", "gpu_frac", "\n", "\n", "", "self", ".", "policy", "=", "policy_params", "[", "'class'", "]", "(", "\n", "env_spec", "=", "self", ".", "env", ".", "spec", ",", "\n", "exploration_strategies", "=", "[", "]", ",", "\n", "inference_only", "=", "True", ",", "\n", "**", "policy_params", "[", "'kwargs'", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.restore_policy": [[208, 222], ["print", "experiment.Experiment.policy.restore", "len", "experiment.Experiment._fm.inference_policy_fname", "glob.glob", "experiment.Experiment._fm.inference_policy_fname"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.restore", "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.inference_policy_fname", "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.inference_policy_fname"], ["", "def", "restore_policy", "(", "self", ",", "itr", "=", "None", ")", ":", "\n", "        ", "assert", "(", "self", ".", "policy", "is", "not", "None", ")", "\n", "\n", "if", "itr", "is", "None", ":", "\n", "            ", "itr", "=", "0", "\n", "while", "len", "(", "glob", ".", "glob", "(", "self", ".", "_fm", ".", "inference_policy_fname", "(", "itr", ")", "+", "'*'", ")", ")", ">", "0", ":", "\n", "                ", "itr", "+=", "1", "\n", "", "itr", "-=", "1", "\n", "\n", "", "if", "itr", ">=", "0", ":", "\n", "            ", "print", "(", "'Loading train policy from iteration {0}...'", ".", "format", "(", "itr", ")", ")", "\n", "self", ".", "policy", ".", "restore", "(", "self", ".", "_fm", ".", "inference_policy_fname", "(", "itr", ")", ",", "train", "=", "False", ")", "\n", "\n", "", "return", "itr", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.close_policy": [[223, 226], ["experiment.Experiment.policy.terminate"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.policies.random.CrazyflieRandomPolicy.terminate"], ["", "def", "close_policy", "(", "self", ")", ":", "\n", "        ", "self", ".", "policy", ".", "terminate", "(", ")", "\n", "self", ".", "policy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment._csv_file": [[231, 249], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "_csv_file", "(", "self", ")", ":", "\n", "        ", "log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_fm", ".", "exp_dir", ",", "'log.csv'", ")", "\n", "log_train", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_fm", ".", "exp_dir", ",", "'log_train.csv'", ")", "\n", "log_inference", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_fm", ".", "exp_dir", ",", "'log_inference.csv'", ")", "\n", "\n", "exists_log", "=", "os", ".", "path", ".", "exists", "(", "log", ")", "\n", "exists_log_train", "=", "os", ".", "path", ".", "exists", "(", "log_train", ")", "\n", "exists_log_inference", "=", "os", ".", "path", ".", "exists", "(", "log_inference", ")", "\n", "\n", "assert", "(", "sum", "(", "[", "exists_log", ",", "exists_log_train", ",", "exists_log_inference", "]", ")", "==", "1", ")", "\n", "\n", "if", "exists_log", ":", "\n", "            ", "return", "log", "\n", "", "if", "exists_log_train", ":", "\n", "            ", "return", "log_train", "\n", "", "if", "exists_log_inference", ":", "\n", "            ", "return", "log_inference", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.params": [[254, 260], ["gcg.misc.utils.import_params"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.import_params"], ["", "", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_internal_params", "is", "None", ":", "\n", "            ", "self", ".", "_internal_params", "=", "import_params", "(", "self", ".", "_fm", ".", "params_fname", ")", "\n", "\n", "", "return", "self", ".", "_internal_params", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.name": [[261, 264], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_exp_name", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.csv": [[265, 275], ["pandas.read_csv"], "methods", ["None"], ["", "@", "property", "\n", "def", "csv", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_internal_csv", "is", "None", ":", "\n", "            ", "self", ".", "_internal_csv", "=", "pandas", ".", "read_csv", "(", "self", ".", "_csv_file", ")", "\n", "\n", "save_every_n_steps", "=", "self", ".", "params", "[", "'alg'", "]", "[", "'kwargs'", "]", "[", "'save_every_n_steps'", "]", "\n", "itrs", "=", "(", "self", ".", "_internal_csv", "[", "'Step'", "]", "-", "save_every_n_steps", ")", "/", "save_every_n_steps", "\n", "self", ".", "_internal_csv", "[", "'itr'", "]", "=", "itrs", "\n", "\n", "", "return", "self", ".", "_internal_csv", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.train_rollouts": [[276, 282], ["experiment.Experiment._load_rollouts"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment._load_rollouts"], ["", "@", "property", "\n", "def", "train_rollouts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_internal_train_rollouts", "is", "None", ":", "\n", "            ", "self", ".", "_internal_train_rollouts", "=", "self", ".", "_load_rollouts", "(", "self", ".", "_fm", ".", "train_rollouts_fname", ")", "\n", "\n", "", "return", "self", ".", "_internal_train_rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment.eval_rollouts": [[283, 289], ["experiment.Experiment._load_rollouts"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment._load_rollouts"], ["", "@", "property", "\n", "def", "eval_rollouts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_internal_eval_rollouts", "is", "None", ":", "\n", "            ", "self", ".", "_internal_eval_rollouts", "=", "self", ".", "_load_rollouts", "(", "self", ".", "_fm", ".", "eval_rollouts_fname", ")", "\n", "\n", "", "return", "self", ".", "_internal_eval_rollouts", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.Experiment._load_rollouts": [[290, 302], ["os.path.exists", "file_func", "rollouts_itrs.append", "gcg.data.mypickle.load", "file_func"], "methods", ["None"], ["", "def", "_load_rollouts", "(", "self", ",", "file_func", ")", ":", "\n", "        ", "rollouts_itrs", "=", "[", "]", "\n", "itr", "=", "0", "\n", "while", "os", ".", "path", ".", "exists", "(", "file_func", "(", "itr", ")", ")", ":", "\n", "            ", "rollouts", "=", "mypickle", ".", "load", "(", "file_func", "(", "itr", ")", ")", "[", "'rollouts'", "]", "\n", "if", "self", ".", "_clear_obs", ":", "\n", "                ", "for", "r", "in", "rollouts", ":", "\n", "                    ", "r", "[", "'observations'", "]", "=", "None", "\n", "", "", "rollouts_itrs", ".", "append", "(", "rollouts", ")", "\n", "itr", "+=", "1", "\n", "\n", "", "return", "rollouts_itrs", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.__init__": [[14, 18], ["None"], "methods", ["None"], ["", "def", "to_onehot", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "ret", "[", "ind", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.add_data": [[19, 23], ["utils.DataAverageInterpolation.xs.append", "utils.DataAverageInterpolation.ys.append", "utils.DataAverageInterpolation.fs.append", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d"], "methods", ["None"], ["", "def", "to_onehot_n", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds", ")", ",", "dim", ")", ")", "\n", "ret", "[", "np", ".", "arange", "(", "len", "(", "inds", ")", ")", ",", "inds", "]", "=", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.DataAverageInterpolation.eval": [[24, 27], ["f", "numpy.array", "numpy.array", "numpy.mean", "numpy.std"], "methods", ["None"], ["", "def", "from_onehot", "(", "v", ")", ":", "\n", "    ", "return", "np", ".", "nonzero", "(", "v", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "def", "from_onehot_n", "(", "v", ")", ":", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.utils.moving_avg_std": [[5, 12], ["range", "avg_idxs.append", "means.append", "stds.append", "numpy.asarray", "numpy.asarray", "len", "numpy.mean", "numpy.mean", "numpy.std"], "function", ["None"], ["\n", "# An array of the weights, cumulatively summed.", "\n", "cs", "=", "np", ".", "cumsum", "(", "weights", ")", "\n", "# Find the index of the first weight over a random value.", "\n", "idx", "=", "sum", "(", "cs", "<", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "return", "objects", "[", "min", "(", "idx", ",", "len", "(", "objects", ")", "-", "1", ")", "]", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.gaussian_strategy.GaussianStrategy.__init__": [[11, 16], ["gcg.exploration_strategies.exploration_strategy.ExplorationStrategy.__init__", "isinstance", "gcg.misc.schedules.PiecewiseSchedule"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ",", "env_spec", ",", "endpoints", ",", "outside_value", ")", ":", "\n", "        ", "super", "(", "GaussianStrategy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "assert", "isinstance", "(", "env_spec", ".", "action_space", ",", "Box", ")", "\n", "self", ".", "schedule", "=", "schedules", ".", "PiecewiseSchedule", "(", "endpoints", "=", "endpoints", ",", "outside_value", "=", "outside_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.gaussian_strategy.GaussianStrategy.reset": [[17, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.gaussian_strategy.GaussianStrategy.add_exploration": [[20, 54], ["numpy.asarray", "list", "numpy.tile", "numpy.tile", "numpy.clip", "len", "gcg.misc.utils.multiple_expand_dims", "gcg.misc.utils.multiple_expand_dims", "numpy.random.normal", "gaussian_strategy.GaussianStrategy.schedule.value", "numpy.tile", "numpy.tile", "gcg.misc.utils.multiple_expand_dims", "gcg.misc.utils.multiple_expand_dims", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims"], ["", "def", "add_exploration", "(", "self", ",", "t", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        :param t: step in training (for schedule)\n        :param actions: [...., action_dim]\n        :return: actions + noise\n        \"\"\"", "\n", "aspace", "=", "self", ".", "_env_spec", ".", "action_space", "\n", "actions", "=", "np", ".", "asarray", "(", "actions", ")", "\n", "assert", "(", "len", "(", "actions", ".", "shape", ")", ">", "1", ")", "\n", "assert", "(", "actions", ".", "shape", "[", "-", "1", "]", "==", "aspace", ".", "flat_dim", ")", "\n", "other_shape", "=", "list", "(", "actions", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "# whiten", "\n", "mean", "=", "0.5", "*", "(", "aspace", ".", "low", "+", "aspace", ".", "high", ")", "\n", "scale", "=", "(", "aspace", ".", "high", "-", "aspace", ".", "low", ")", "\n", "mean", "=", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "mean", ",", "[", "0", "]", "*", "len", "(", "other_shape", ")", ")", ",", "other_shape", "+", "[", "1", "]", ")", "\n", "scale", "=", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "scale", ",", "[", "0", "]", "*", "len", "(", "other_shape", ")", ")", ",", "other_shape", "+", "[", "1", "]", ")", "\n", "actions", "=", "(", "actions", "-", "mean", ")", "/", "scale", "\n", "\n", "# add noise", "\n", "actions", "+=", "np", ".", "random", ".", "normal", "(", "size", "=", "actions", ".", "shape", ")", "*", "self", ".", "schedule", ".", "value", "(", "t", ")", "\n", "\n", "# de-whiten", "\n", "actions", "=", "(", "actions", "*", "scale", ")", "+", "mean", "\n", "\n", "# clip", "\n", "aspace_select", "=", "self", ".", "_env_spec", ".", "action_selection_space", "\n", "actions", "=", "np", ".", "clip", "(", "actions", ",", "\n", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "aspace_select", ".", "low", ",", "[", "0", "]", "*", "len", "(", "other_shape", ")", ")", ",", "\n", "other_shape", "+", "[", "1", "]", ")", ",", "\n", "np", ".", "tile", "(", "utils", ".", "multiple_expand_dims", "(", "aspace_select", ".", "high", ",", "[", "0", "]", "*", "len", "(", "other_shape", ")", ")", ",", "\n", "other_shape", "+", "[", "1", "]", ")", ")", "\n", "\n", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.exploration_strategy.ExplorationStrategy.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ")", ":", "\n", "        ", "self", ".", "_env_spec", "=", "env_spec", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.exploration_strategy.ExplorationStrategy.reset": [[8, 11], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractclassmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.exploration_strategy.ExplorationStrategy.add_exploration": [[12, 20], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractclassmethod", "\n", "def", "add_exploration", "(", "self", ",", "t", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        :param t: step in training (for schedule)\n        :param actions: [...., action_dim]\n        :return: actions + noise\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.epsilon_greedy_strategy.EpsilonGreedyStrategy.__init__": [[10, 14], ["gcg.exploration_strategies.exploration_strategy.ExplorationStrategy.__init__", "gcg.misc.schedules.PiecewiseSchedule"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["def", "__init__", "(", "self", ",", "env_spec", ",", "endpoints", ",", "outside_value", ")", ":", "\n", "        ", "super", "(", "EpsilonGreedyStrategy", ",", "self", ")", ".", "__init__", "(", "env_spec", ")", "\n", "\n", "self", ".", "schedule", "=", "schedules", ".", "PiecewiseSchedule", "(", "endpoints", "=", "endpoints", ",", "outside_value", "=", "outside_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.epsilon_greedy_strategy.EpsilonGreedyStrategy.reset": [[15, 17], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.exploration_strategies.epsilon_greedy_strategy.EpsilonGreedyStrategy.add_exploration": [[18, 34], ["numpy.asarray", "list", "numpy.reshape", "range", "numpy.reshape", "len", "len", "numpy.random.random", "epsilon_greedy_strategy.EpsilonGreedyStrategy.schedule.value", "aspace_select.sample"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample"], ["", "def", "add_exploration", "(", "self", ",", "t", ",", "actions", ")", ":", "\n", "        ", "aspace", "=", "self", ".", "_env_spec", ".", "action_space", "\n", "actions", "=", "np", ".", "asarray", "(", "actions", ")", "\n", "assert", "(", "len", "(", "actions", ".", "shape", ")", ">", "1", ")", "\n", "assert", "(", "actions", ".", "shape", "[", "-", "1", "]", "==", "aspace", ".", "flat_dim", ")", "\n", "other_shape", "=", "list", "(", "actions", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "aspace_select", "=", "self", ".", "_env_spec", ".", "action_selection_space", "\n", "actions", "=", "np", ".", "reshape", "(", "actions", ",", "(", "-", "1", ",", "aspace", ".", "flat_dim", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "actions", ")", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "schedule", ".", "value", "(", "t", ")", ":", "\n", "                ", "actions", "[", "i", "]", "=", "aspace_select", ".", "sample", "(", ")", "\n", "\n", "", "", "actions", "=", "np", ".", "reshape", "(", "actions", ",", "other_shape", "+", "[", "aspace", ".", "flat_dim", "]", ")", "\n", "return", "actions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.__init__": [[12, 25], ["os.path.join", "os.path.join", "os.makedirs", "gcg.data.logger.logger.setup", "os.path.exists", "print", "sys.exit", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.setup"], ["    ", "def", "__init__", "(", "self", ",", "exp_name", ",", "is_continue", "=", "False", ",", "log_level", "=", "'info'", ",", "log_fname", "=", "'log.txt'", ",", "log_folder", "=", "''", ")", ":", "\n", "        ", "self", ".", "_exp_name", "=", "exp_name", "\n", "\n", "### create logger", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "log_fname", ")", "\n", "if", "not", "is_continue", "and", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "            ", "print", "(", "'Save directory {0} exists. You need to explicitly say to continue if you want to start training '", "\n", "'from where you left off'", ".", "format", "(", "self", ".", "exp_dir", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "log_folder_full", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "log_folder", ")", "\n", "os", ".", "makedirs", "(", "log_folder_full", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "setup", "(", "display_name", "=", "self", ".", "_exp_name", ",", "log_path", "=", "os", ".", "path", ".", "join", "(", "log_folder_full", ",", "log_fname", ")", ",", "lvl", "=", "log_level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.exp_dir": [[30, 39], ["os.path.dirname", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.makedirs", "os.path.dirname.find"], "methods", ["None"], ["", "@", "property", "\n", "def", "exp_dir", "(", "self", ")", ":", "\n", "        ", "curr_dir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "curr_dir", "[", ":", "curr_dir", ".", "find", "(", "'src/gcg'", ")", "]", ",", "'data'", ")", "\n", "assert", "(", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ")", "\n", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "self", ".", "_exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "exp_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "return", "exp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.params_fname": [[44, 47], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "params_fname", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'params.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.train_rollouts_fname": [[50, 52], ["os.path.join"], "methods", ["None"], ["def", "train_rollouts_fname", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'itr_{0:04d}_{1}'", ".", "format", "(", "itr", ",", "FileManager", ".", "train_rollouts_fname_suffix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.eval_rollouts_fname": [[55, 57], ["os.path.join"], "methods", ["None"], ["def", "eval_rollouts_fname", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'itr_{0:04d}_{1}'", ".", "format", "(", "itr", ",", "FileManager", ".", "eval_rollouts_fname_suffix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.train_policy_fname": [[58, 60], ["os.path.join"], "methods", ["None"], ["", "def", "train_policy_fname", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'itr_{0:04d}_train_policy.ckpt'", ".", "format", "(", "itr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.inference_policy_fname": [[61, 63], ["os.path.join"], "methods", ["None"], ["", "def", "inference_policy_fname", "(", "self", ",", "itr", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'itr_{0:04d}_inference_policy.ckpt'", ".", "format", "(", "itr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.get_train_itr": [[68, 74], ["len", "glob.glob", "os.path.splitext", "file_manager.FileManager.inference_policy_fname"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.inference_policy_fname"], ["", "def", "get_train_itr", "(", "self", ")", ":", "\n", "        ", "train_itr", "=", "0", "\n", "while", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "splitext", "(", "self", ".", "inference_policy_fname", "(", "train_itr", ")", ")", "[", "0", "]", "+", "'*'", ")", ")", ">", "0", ":", "\n", "            ", "train_itr", "+=", "1", "\n", "\n", "", "return", "train_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.file_manager.FileManager.get_inference_itr": [[75, 80], ["int", "max", "os.listdir", "f.split"], "methods", ["None"], ["", "def", "get_inference_itr", "(", "self", ")", ":", "\n", "        ", "itrs", "=", "[", "int", "(", "f", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "exp_dir", ")", "if", "self", ".", "train_rollouts_fname_suffix", "in", "f", "]", "\n", "inference_itr", "=", "max", "(", "[", "-", "1", "]", "+", "itrs", ")", "+", "1", "\n", "\n", "return", "inference_itr", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.AttrDict.__init__": [[4, 7], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantDict.__init__": [[9, 12], ["variants.AttrDict.__init__"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "hidden_keys", ")", ":", "\n", "        ", "super", "(", "VariantDict", ",", "self", ")", ".", "__init__", "(", "d", ")", "\n", "self", ".", "_hidden_keys", "=", "hidden_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantDict.dump": [[13, 15], ["variants.VariantDict.items"], "methods", ["None"], ["", "def", "dump", "(", "self", ")", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "if", "k", "not", "in", "self", ".", "_hidden_keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.__init__": [[32, 39], ["variants.VariantGenerator._populate_variants", "cfg.get", "variants.VariantGenerator._hidden_keys.append"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator._populate_variants"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_variants", "=", "[", "]", "\n", "self", ".", "_populate_variants", "(", ")", "\n", "self", ".", "_hidden_keys", "=", "[", "]", "\n", "for", "k", ",", "vs", ",", "cfg", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "cfg", ".", "get", "(", "\"hide\"", ",", "False", ")", ":", "\n", "                ", "self", ".", "_hidden_keys", ".", "append", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.add": [[40, 42], ["variants.VariantGenerator._variants.append"], "methods", ["None"], ["", "", "", "def", "add", "(", "self", ",", "key", ",", "vals", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_variants", ".", "append", "(", "(", "key", ",", "vals", ",", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator._populate_variants": [[43, 50], ["inspect.getmembers", "x[].__get__", "variants.VariantGenerator.add", "getattr", "getattr", "inspect.isfunction", "inspect.ismethod", "dict"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.add"], ["", "def", "_populate_variants", "(", "self", ")", ":", "\n", "        ", "methods", "=", "inspect", ".", "getmembers", "(", "\n", "self", ".", "__class__", ",", "predicate", "=", "lambda", "x", ":", "inspect", ".", "isfunction", "(", "x", ")", "or", "inspect", ".", "ismethod", "(", "x", ")", ")", "\n", "methods", "=", "[", "x", "[", "1", "]", ".", "__get__", "(", "self", ",", "self", ".", "__class__", ")", "\n", "for", "x", "in", "methods", "if", "getattr", "(", "x", "[", "1", "]", ",", "'__is_variant'", ",", "False", ")", "]", "\n", "for", "m", "in", "methods", ":", "\n", "            ", "self", ".", "add", "(", "m", ".", "__name__", ",", "m", ",", "**", "getattr", "(", "m", ",", "\"__variant_config\"", ",", "dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.variants": [[51, 56], ["list", "list", "variants.VariantGenerator.ivariants", "np.random.shuffle", "map"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.ivariants"], ["", "", "def", "variants", "(", "self", ",", "randomized", "=", "False", ")", ":", "\n", "        ", "ret", "=", "list", "(", "self", ".", "ivariants", "(", ")", ")", "\n", "if", "randomized", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "ret", ")", "\n", "", "return", "list", "(", "map", "(", "self", ".", "variant_dict", ",", "ret", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.variant_dict": [[57, 59], ["variants.VariantDict"], "methods", ["None"], ["", "def", "variant_dict", "(", "self", ",", "variant", ")", ":", "\n", "        ", "return", "VariantDict", "(", "variant", ",", "self", ".", "_hidden_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.to_name_suffix": [[60, 66], ["cfg.get", "suffix.append", "str"], "methods", ["None"], ["", "def", "to_name_suffix", "(", "self", ",", "variant", ")", ":", "\n", "        ", "suffix", "=", "[", "]", "\n", "for", "k", ",", "vs", ",", "cfg", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "not", "cfg", ".", "get", "(", "\"hide\"", ",", "False", ")", ":", "\n", "                ", "suffix", ".", "append", "(", "k", "+", "\"_\"", "+", "str", "(", "variant", "[", "k", "]", ")", ")", "\n", "", "", "return", "\"_\"", ".", "join", "(", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.ivariants": [[67, 96], ["list", "variants.VariantGenerator._ivariants_sorted", "hasattr", "len", "len", "list.append", "list.append", "len", "ValueError", "v.difference_update", "inspect.getargspec", "hasattr", "hasattr", "set", "set", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator._ivariants_sorted"], ["", "def", "ivariants", "(", "self", ")", ":", "\n", "        ", "dependencies", "=", "list", "(", ")", "\n", "for", "key", ",", "vals", ",", "_", "in", "self", ".", "_variants", ":", "\n", "            ", "if", "hasattr", "(", "vals", ",", "\"__call__\"", ")", ":", "\n", "                ", "args", "=", "inspect", ".", "getargspec", "(", "vals", ")", ".", "args", "\n", "if", "hasattr", "(", "vals", ",", "'im_self'", ")", "or", "hasattr", "(", "vals", ",", "\"__self__\"", ")", ":", "\n", "# remove the first 'self' parameter", "\n", "                    ", "args", "=", "args", "[", "1", ":", "]", "\n", "", "dependencies", ".", "append", "(", "(", "key", ",", "set", "(", "args", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "dependencies", ".", "append", "(", "(", "key", ",", "set", "(", ")", ")", ")", "\n", "", "", "sorted_keys", "=", "[", "]", "\n", "# topo sort all nodes", "\n", "while", "len", "(", "sorted_keys", ")", "<", "len", "(", "self", ".", "_variants", ")", ":", "\n", "# get all nodes with zero in-degree", "\n", "            ", "free_nodes", "=", "[", "k", "for", "k", ",", "v", "in", "dependencies", "if", "len", "(", "v", ")", "==", "0", "]", "\n", "if", "len", "(", "free_nodes", ")", "==", "0", ":", "\n", "                ", "error_msg", "=", "\"Invalid parameter dependency: \\n\"", "\n", "for", "k", ",", "v", "in", "dependencies", ":", "\n", "                    ", "if", "len", "(", "v", ")", ">", "0", ":", "\n", "                        ", "error_msg", "+=", "k", "+", "\" depends on \"", "+", "\" & \"", ".", "join", "(", "v", ")", "+", "\"\\n\"", "\n", "", "", "raise", "ValueError", "(", "error_msg", ")", "\n", "", "dependencies", "=", "[", "(", "k", ",", "v", ")", "\n", "for", "k", ",", "v", "in", "dependencies", "if", "k", "not", "in", "free_nodes", "]", "\n", "# remove the free nodes from the remaining dependencies", "\n", "for", "_", ",", "v", "in", "dependencies", ":", "\n", "                ", "v", ".", "difference_update", "(", "free_nodes", ")", "\n", "", "sorted_keys", "+=", "free_nodes", "\n", "", "return", "self", ".", "_ivariants_sorted", "(", "sorted_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator._ivariants_sorted": [[97, 120], ["len", "variants.VariantGenerator._ivariants_sorted", "hasattr", "dict", "hasattr", "inspect.getargspec", "hasattr", "hasattr", "last_vals", "variants.AttrDict", "variants.AttrDict"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator._ivariants_sorted"], ["", "def", "_ivariants_sorted", "(", "self", ",", "sorted_keys", ")", ":", "\n", "        ", "if", "len", "(", "sorted_keys", ")", "==", "0", ":", "\n", "            ", "yield", "dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "first_keys", "=", "sorted_keys", "[", ":", "-", "1", "]", "\n", "first_variants", "=", "self", ".", "_ivariants_sorted", "(", "first_keys", ")", "\n", "last_key", "=", "sorted_keys", "[", "-", "1", "]", "\n", "last_vals", "=", "[", "v", "for", "k", ",", "v", ",", "_", "in", "self", ".", "_variants", "if", "k", "==", "last_key", "]", "[", "0", "]", "\n", "if", "hasattr", "(", "last_vals", ",", "\"__call__\"", ")", ":", "\n", "                ", "last_val_keys", "=", "inspect", ".", "getargspec", "(", "last_vals", ")", ".", "args", "\n", "if", "hasattr", "(", "last_vals", ",", "'im_self'", ")", "or", "hasattr", "(", "last_vals", ",", "'__self__'", ")", ":", "\n", "                    ", "last_val_keys", "=", "last_val_keys", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "last_val_keys", "=", "None", "\n", "", "for", "variant", "in", "first_variants", ":", "\n", "                ", "if", "hasattr", "(", "last_vals", ",", "\"__call__\"", ")", ":", "\n", "                    ", "last_variants", "=", "last_vals", "(", "\n", "**", "{", "k", ":", "variant", "[", "k", "]", "for", "k", "in", "last_val_keys", "}", ")", "\n", "for", "last_choice", "in", "last_variants", ":", "\n", "                        ", "yield", "AttrDict", "(", "variant", ",", "**", "{", "last_key", ":", "last_choice", "}", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "last_choice", "in", "last_vals", ":", "\n", "                        ", "yield", "AttrDict", "(", "variant", ",", "**", "{", "last_key", ":", "last_choice", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pipe_segment_with_colons": [[78, 90], ["None"], "function", ["None"], ["def", "_pipe_segment_with_colons", "(", "align", ",", "colwidth", ")", ":", "\n", "    ", "\"\"\"Return a segment of a horizontal line with optional colons which\n    indicate column's alignment (as in `pipe` output format).\"\"\"", "\n", "w", "=", "colwidth", "\n", "if", "align", "in", "[", "\"right\"", ",", "\"decimal\"", "]", ":", "\n", "        ", "return", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"center\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "2", ")", ")", "+", "\":\"", "\n", "", "elif", "align", "==", "\"left\"", ":", "\n", "        ", "return", "\":\"", "+", "(", "'-'", "*", "(", "w", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "'-'", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pipe_line_with_colons": [[92, 97], ["tabulate._pipe_segment_with_colons", "zip"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pipe_segment_with_colons"], ["", "", "def", "_pipe_line_with_colons", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Return a horizontal line with optional colons to indicate column's\n    alignment (as in `pipe` output format).\"\"\"", "\n", "segments", "=", "[", "_pipe_segment_with_colons", "(", "a", ",", "w", ")", "for", "a", ",", "w", "in", "zip", "(", "colaligns", ",", "colwidths", ")", "]", "\n", "return", "\"|\"", "+", "\"|\"", ".", "join", "(", "segments", ")", "+", "\"|\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._mediawiki_row_with_attrs": [[99, 110], ["zip", "colsep.join", "alignment.get"], "function", ["None"], ["", "def", "_mediawiki_row_with_attrs", "(", "separator", ",", "cell_values", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "''", ",", "\n", "\"right\"", ":", "'align=\"right\"| '", ",", "\n", "\"center\"", ":", "'align=\"center\"| '", ",", "\n", "\"decimal\"", ":", "'align=\"right\"| '", "}", "\n", "# hard-coded padding _around_ align attribute and value together", "\n", "# rather than padding parameter which affects only the value", "\n", "values_with_attrs", "=", "[", "' '", "+", "alignment", ".", "get", "(", "a", ",", "''", ")", "+", "c", "+", "' '", "\n", "for", "c", ",", "a", "in", "zip", "(", "cell_values", ",", "colaligns", ")", "]", "\n", "colsep", "=", "separator", "*", "2", "\n", "return", "(", "separator", "+", "colsep", ".", "join", "(", "values_with_attrs", ")", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._latex_line_begin_tabular": [[112, 116], ["alignment.get"], "function", ["None"], ["", "def", "_latex_line_begin_tabular", "(", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "alignment", "=", "{", "\"left\"", ":", "\"l\"", ",", "\"right\"", ":", "\"r\"", ",", "\"center\"", ":", "\"c\"", ",", "\"decimal\"", ":", "\"r\"", "}", "\n", "tabular_columns_fmt", "=", "\"\"", ".", "join", "(", "[", "alignment", ".", "get", "(", "a", ",", "\"l\"", ")", "for", "a", "in", "colaligns", "]", ")", "\n", "return", "\"\\\\begin{tabular}{\"", "+", "tabular_columns_fmt", "+", "\"}\\n\\hline\"", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate.simple_separated_format": [[198, 210], ["TableFormat", "DataRow", "DataRow"], "function", ["None"], ["def", "simple_separated_format", "(", "separator", ")", ":", "\n", "    ", "\"\"\"Construct a simple TableFormat with columns separated by a separator.\n\n    >>> tsv = simple_separated_format(\"\\\\t\") ; \\\n        tabulate([[\"foo\", 1], [\"spam\", 23]], tablefmt=tsv) == 'foo \\\\t 1\\\\nspam\\\\t23'\n    True\n\n    \"\"\"", "\n", "return", "TableFormat", "(", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "headerrow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "datarow", "=", "DataRow", "(", "''", ",", "separator", ",", "''", ")", ",", "\n", "padding", "=", "0", ",", "with_header_hide", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isconvertible": [[212, 218], ["conv"], "function", ["None"], ["", "def", "_isconvertible", "(", "conv", ",", "string", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "n", "=", "conv", "(", "string", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isnumber": [[220, 230], ["tabulate._isconvertible"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isconvertible"], ["", "", "def", "_isnumber", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isnumber(\"123.45\")\n    True\n    >>> _isnumber(\"123\")\n    True\n    >>> _isnumber(\"spam\")\n    False\n    \"\"\"", "\n", "return", "_isconvertible", "(", "float", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isint": [[232, 242], ["type", "tabulate._isconvertible", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isconvertible"], ["", "def", "_isint", "(", "string", ")", ":", "\n", "    ", "\"\"\"\n    >>> _isint(\"123\")\n    True\n    >>> _isint(\"123.45\")\n    False\n    \"\"\"", "\n", "return", "type", "(", "string", ")", "is", "int", "or", "(", "isinstance", "(", "string", ",", "_binary_type", ")", "or", "isinstance", "(", "string", ",", "_text_type", ")", ")", "and", "_isconvertible", "(", "int", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._type": [[244, 276], ["tabulate._strip_invisible", "hasattr", "isinstance", "isinstance", "tabulate._isint", "tabulate._isnumber", "isinstance"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isint", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isnumber"], ["", "def", "_type", "(", "string", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type (type(None), int, float, str, unicode).\n\n    >>> _type(None) is type(None)\n    True\n    >>> _type(\"foo\") is type(\"\")\n    True\n    >>> _type(\"1\") is type(1)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n    >>> _type('\\x1b[31m42\\x1b[0m') is type(42)\n    True\n\n    \"\"\"", "\n", "\n", "if", "has_invisible", "and", "(", "isinstance", "(", "string", ",", "_text_type", ")", "or", "isinstance", "(", "string", ",", "_binary_type", ")", ")", ":", "\n", "        ", "string", "=", "_strip_invisible", "(", "string", ")", "\n", "\n", "", "if", "string", "is", "None", ":", "\n", "        ", "return", "_none_type", "\n", "", "elif", "hasattr", "(", "string", ",", "\"isoformat\"", ")", ":", "# datetime.datetime, date, and time", "\n", "        ", "return", "_text_type", "\n", "", "elif", "_isint", "(", "string", ")", ":", "\n", "        ", "return", "int", "\n", "", "elif", "_isnumber", "(", "string", ")", ":", "\n", "        ", "return", "float", "\n", "", "elif", "isinstance", "(", "string", ",", "_binary_type", ")", ":", "\n", "        ", "return", "_binary_type", "\n", "", "else", ":", "\n", "        ", "return", "_text_type", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._afterpoint": [[278, 303], ["tabulate._isnumber", "tabulate._isint", "string.rfind", "string.lower().rfind", "string.lower", "len"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isnumber", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._isint"], ["", "", "def", "_afterpoint", "(", "string", ")", ":", "\n", "    ", "\"\"\"Symbols after a decimal point, -1 if the string lacks the decimal point.\n\n    >>> _afterpoint(\"123.45\")\n    2\n    >>> _afterpoint(\"1001\")\n    -1\n    >>> _afterpoint(\"eggs\")\n    -1\n    >>> _afterpoint(\"123e45\")\n    2\n\n    \"\"\"", "\n", "if", "_isnumber", "(", "string", ")", ":", "\n", "        ", "if", "_isint", "(", "string", ")", ":", "\n", "            ", "return", "-", "1", "\n", "", "else", ":", "\n", "            ", "pos", "=", "string", ".", "rfind", "(", "\".\"", ")", "\n", "pos", "=", "string", ".", "lower", "(", ")", ".", "rfind", "(", "\"e\"", ")", "if", "pos", "<", "0", "else", "pos", "\n", "if", "pos", ">=", "0", ":", "\n", "                ", "return", "len", "(", "string", ")", "-", "pos", "-", "1", "\n", "", "else", ":", "\n", "                ", "return", "-", "1", "# no point", "\n", "", "", "", "else", ":", "\n", "        ", "return", "-", "1", "# not a number", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padleft": [[305, 315], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible"], ["", "", "def", "_padleft", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush right.\n\n    >>> _padleft(6, '\\u044f\\u0439\\u0446\\u0430') == '  \\u044f\\u0439\\u0446\\u0430'\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:>%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padright": [[317, 327], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible"], ["", "def", "_padright", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Flush left.\n\n    >>> _padright(6, '\\u044f\\u0439\\u0446\\u0430') == '\\u044f\\u0439\\u0446\\u0430  '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:<%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padboth": [[329, 339], ["fmt.format", "len", "len", "tabulate._strip_invisible"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible"], ["", "def", "_padboth", "(", "width", ",", "s", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"Center string.\n\n    >>> _padboth(6, '\\u044f\\u0439\\u0446\\u0430') == ' \\u044f\\u0439\\u0446\\u0430 '\n    True\n\n    \"\"\"", "\n", "iwidth", "=", "width", "+", "len", "(", "s", ")", "-", "len", "(", "_strip_invisible", "(", "s", ")", ")", "if", "has_invisible", "else", "width", "\n", "fmt", "=", "\"{0:^%ds}\"", "%", "iwidth", "\n", "return", "fmt", ".", "format", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible": [[341, 347], ["isinstance", "re.sub", "re.sub"], "function", ["None"], ["", "def", "_strip_invisible", "(", "s", ")", ":", "\n", "    ", "\"Remove invisible ANSI color codes.\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes", ",", "\"\"", ",", "s", ")", "\n", "", "else", ":", "# a bytestring", "\n", "        ", "return", "re", ".", "sub", "(", "_invisible_codes_bytes", ",", "\"\"", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._visible_width": [[349, 360], ["isinstance", "isinstance", "len", "len", "tabulate._strip_invisible", "_text_type"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._strip_invisible"], ["", "", "def", "_visible_width", "(", "s", ")", ":", "\n", "    ", "\"\"\"Visible width of a printed string. ANSI color codes are removed.\n\n    >>> _visible_width('\\x1b[31mhello\\x1b[0m'), _visible_width(\"world\")\n    (5, 5)\n\n    \"\"\"", "\n", "if", "isinstance", "(", "s", ",", "_text_type", ")", "or", "isinstance", "(", "s", ",", "_binary_type", ")", ":", "\n", "        ", "return", "len", "(", "_strip_invisible", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "len", "(", "_text_type", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._align_column": [[362, 398], ["max", "max", "padfn", "s.strip", "list", "s.strip", "max", "map", "tabulate._afterpoint", "zip", "s.strip"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._afterpoint"], ["", "", "def", "_align_column", "(", "strings", ",", "alignment", ",", "minwidth", "=", "0", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"[string] -> [padded_string]\n\n    >>> list(map(str,_align_column([\"12.345\", \"-1234.5\", \"1.23\", \"1234.5\", \"1e+234\", \"1.0e234\"], \"decimal\")))\n    ['   12.345  ', '-1234.5    ', '    1.23   ', ' 1234.5    ', '    1e+234 ', '    1.0e234']\n\n    >>> list(map(str,_align_column(['123.4', '56.7890'], None)))\n    ['123.4', '56.7890']\n\n    \"\"\"", "\n", "if", "alignment", "==", "\"right\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padboth", "\n", "", "elif", "alignment", "==", "\"decimal\"", ":", "\n", "        ", "decimals", "=", "[", "_afterpoint", "(", "s", ")", "for", "s", "in", "strings", "]", "\n", "maxdecimals", "=", "max", "(", "decimals", ")", "\n", "strings", "=", "[", "s", "+", "(", "maxdecimals", "-", "decs", ")", "*", "\" \"", "\n", "for", "s", ",", "decs", "in", "zip", "(", "strings", ",", "decimals", ")", "]", "\n", "padfn", "=", "_padleft", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "strings", "\n", "", "else", ":", "\n", "        ", "strings", "=", "[", "s", ".", "strip", "(", ")", "for", "s", "in", "strings", "]", "\n", "padfn", "=", "_padright", "\n", "\n", "", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "", "maxwidth", "=", "max", "(", "max", "(", "list", "(", "map", "(", "width_fn", ",", "strings", ")", ")", ")", ",", "minwidth", ")", "\n", "padded_strings", "=", "[", "padfn", "(", "maxwidth", ",", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "padded_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._more_generic": [[400, 405], ["max", "types.get", "types.get"], "function", ["None"], ["", "def", "_more_generic", "(", "type1", ",", "type2", ")", ":", "\n", "    ", "types", "=", "{", "_none_type", ":", "0", ",", "int", ":", "1", ",", "float", ":", "2", ",", "_binary_type", ":", "3", ",", "_text_type", ":", "4", "}", "\n", "invtypes", "=", "{", "4", ":", "_text_type", ",", "3", ":", "_binary_type", ",", "2", ":", "float", ",", "1", ":", "int", ",", "0", ":", "_none_type", "}", "\n", "moregeneric", "=", "max", "(", "types", ".", "get", "(", "type1", ",", "4", ")", ",", "types", ".", "get", "(", "type2", ",", "4", ")", ")", "\n", "return", "invtypes", "[", "moregeneric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._column_type": [[407, 429], ["reduce", "tabulate._type"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._type"], ["", "def", "_column_type", "(", "strings", ",", "has_invisible", "=", "True", ")", ":", "\n", "    ", "\"\"\"The least generic type all column values are convertible to.\n\n    >>> _column_type([\"1\", \"2\"]) is _int_type\n    True\n    >>> _column_type([\"1\", \"2.3\"]) is _float_type\n    True\n    >>> _column_type([\"1\", \"2.3\", \"four\"]) is _text_type\n    True\n    >>> _column_type([\"four\", '\\u043f\\u044f\\u0442\\u044c']) is _text_type\n    True\n    >>> _column_type([None, \"brux\"]) is _text_type\n    True\n    >>> _column_type([1, 2, None]) is _int_type\n    True\n    >>> import datetime as dt\n    >>> _column_type([dt.datetime(1991,2,19), dt.time(17,35)]) is _text_type\n    True\n\n    \"\"\"", "\n", "types", "=", "[", "_type", "(", "s", ",", "has_invisible", ")", "for", "s", "in", "strings", "]", "\n", "return", "reduce", "(", "_more_generic", ",", "types", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._format": [[431, 454], ["_text_type", "format", "float"], "function", ["None"], ["", "def", "_format", "(", "val", ",", "valtype", ",", "floatfmt", ",", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a value accoding to its type.\n\n    Unicode is supported:\n\n    >>> hrow = ['\\u0431\\u0443\\u043a\\u0432\\u0430', '\\u0446\\u0438\\u0444\\u0440\\u0430'] ; \\\n        tbl = [['\\u0430\\u0437', 2], ['\\u0431\\u0443\\u043a\\u0438', 4]] ; \\\n        good_result = '\\\\u0431\\\\u0443\\\\u043a\\\\u0432\\\\u0430      \\\\u0446\\\\u0438\\\\u0444\\\\u0440\\\\u0430\\\\n-------  -------\\\\n\\\\u0430\\\\u0437             2\\\\n\\\\u0431\\\\u0443\\\\u043a\\\\u0438           4' ; \\\n        tabulate(tbl, headers=hrow) == good_result\n    True\n\n    \"\"\"", "\n", "if", "val", "is", "None", ":", "\n", "        ", "return", "missingval", "\n", "\n", "", "if", "valtype", "in", "[", "int", ",", "_text_type", "]", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "", "elif", "valtype", "is", "_binary_type", ":", "\n", "        ", "return", "_text_type", "(", "val", ",", "\"ascii\"", ")", "\n", "", "elif", "valtype", "is", "float", ":", "\n", "        ", "return", "format", "(", "float", "(", "val", ")", ",", "floatfmt", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._align_header": [[456, 465], ["tabulate._padright", "tabulate._padboth", "tabulate._padleft"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padright", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padboth", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._padleft"], ["", "", "def", "_align_header", "(", "header", ",", "alignment", ",", "width", ")", ":", "\n", "    ", "if", "alignment", "==", "\"left\"", ":", "\n", "        ", "return", "_padright", "(", "width", ",", "header", ")", "\n", "", "elif", "alignment", "==", "\"center\"", ":", "\n", "        ", "return", "_padboth", "(", "width", ",", "header", ")", "\n", "", "elif", "not", "alignment", ":", "\n", "        ", "return", "\"{0}\"", ".", "format", "(", "header", ")", "\n", "", "else", ":", "\n", "        ", "return", "_padleft", "(", "width", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._normalize_tabular_data": [[467, 539], ["list", "list", "hasattr", "hasattr", "hasattr", "list", "list", "map", "len", "len", "list", "list", "hasattr", "list", "hasattr", "getattr", "len", "map", "len", "tabular_data.keys", "zip_longest", "list", "ValueError", "map", "isinstance", "hasattr", "list", "tabular_data.keys", "len", "map", "list", "list", "list", "zip", "len", "map", "tabular_data.values", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "", "def", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", ":", "\n", "    ", "\"\"\"Transform a supported data type to a list of lists, and a list of headers.\n\n    Supported tabular data types:\n\n    * list-of-lists or another iterable of iterables\n\n    * list of named tuples (usually used with headers=\"keys\")\n\n    * 2D NumPy arrays\n\n    * NumPy record arrays (usually used with headers=\"keys\")\n\n    * dict of iterables (usually used with headers=\"keys\")\n\n    * pandas.DataFrame (usually used with headers=\"keys\")\n\n    The first row can be used as headers if headers=\"firstrow\",\n    column indices can be used as headers if headers=\"keys\".\n\n    \"\"\"", "\n", "\n", "if", "hasattr", "(", "tabular_data", ",", "\"keys\"", ")", "and", "hasattr", "(", "tabular_data", ",", "\"values\"", ")", ":", "\n", "# dict-like and pandas.DataFrame?", "\n", "        ", "if", "hasattr", "(", "tabular_data", ".", "values", ",", "\"__call__\"", ")", ":", "\n", "# likely a conventional dict", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "rows", "=", "list", "(", "zip_longest", "(", "*", "list", "(", "tabular_data", ".", "values", "(", ")", ")", ")", ")", "# columns have to be transposed", "\n", "", "elif", "hasattr", "(", "tabular_data", ",", "\"index\"", ")", ":", "\n", "# values is a property, has .index => it's likely a pandas.DataFrame (pandas 0.11.0)", "\n", "            ", "keys", "=", "list", "(", "tabular_data", ".", "keys", "(", ")", ")", "\n", "vals", "=", "tabular_data", ".", "values", "# values matrix doesn't need to be transposed", "\n", "names", "=", "tabular_data", ".", "index", "\n", "rows", "=", "[", "[", "v", "]", "+", "list", "(", "row", ")", "for", "v", ",", "row", "in", "zip", "(", "names", ",", "vals", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"tabular data doesn't appear to be a dict or a DataFrame\"", ")", "\n", "\n", "", "if", "headers", "==", "\"keys\"", ":", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "keys", ")", ")", "# headers should be strings", "\n", "\n", "", "", "else", ":", "# it's a usual an iterable of iterables, or a NumPy array", "\n", "        ", "rows", "=", "list", "(", "tabular_data", ")", "\n", "\n", "if", "(", "headers", "==", "\"keys\"", "and", "\n", "hasattr", "(", "tabular_data", ",", "\"dtype\"", ")", "and", "\n", "getattr", "(", "tabular_data", ".", "dtype", ",", "\"names\"", ")", ")", ":", "\n", "# numpy record array", "\n", "            ", "headers", "=", "tabular_data", ".", "dtype", ".", "names", "\n", "", "elif", "(", "headers", "==", "\"keys\"", "\n", "and", "len", "(", "rows", ")", ">", "0", "\n", "and", "isinstance", "(", "rows", "[", "0", "]", ",", "tuple", ")", "\n", "and", "hasattr", "(", "rows", "[", "0", "]", ",", "\"_fields\"", ")", ")", ":", "# namedtuple", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ".", "_fields", ")", ")", "\n", "", "elif", "headers", "==", "\"keys\"", "and", "len", "(", "rows", ")", ">", "0", ":", "# keys are column indices", "\n", "            ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "list", "(", "range", "(", "len", "(", "rows", "[", "0", "]", ")", ")", ")", ")", ")", "\n", "\n", "# take headers from the first row if necessary", "\n", "", "", "if", "headers", "==", "\"firstrow\"", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "        ", "headers", "=", "list", "(", "map", "(", "_text_type", ",", "rows", "[", "0", "]", ")", ")", "# headers should be strings", "\n", "rows", "=", "rows", "[", "1", ":", "]", "\n", "\n", "", "headers", "=", "list", "(", "headers", ")", "\n", "rows", "=", "list", "(", "map", "(", "list", ",", "rows", ")", ")", "\n", "\n", "# pad with empty headers for initial columns if necessary", "\n", "if", "headers", "and", "len", "(", "rows", ")", ">", "0", ":", "\n", "       ", "nhs", "=", "len", "(", "headers", ")", "\n", "ncols", "=", "len", "(", "rows", "[", "0", "]", ")", "\n", "if", "nhs", "<", "ncols", ":", "\n", "           ", "headers", "=", "[", "\"\"", "]", "*", "(", "ncols", "-", "nhs", ")", "+", "headers", "\n", "\n", "", "", "return", "rows", ",", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate.tabulate": [[541, 778], ["tabulate._normalize_tabular_data", "re.search", "list", "list", "tabulate._format_table", "zip", "map", "tabulate._align_column", "list", "list", "isinstance", "_table_formats.get", "tabulate._format", "zip", "len", "zip", "max", "tabulate._align_header", "zip", "width_fn", "zip", "width_fn", "width_fn", "zip", "zip", "map", "map"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._normalize_tabular_data", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._format_table", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._align_column", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._format", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._align_header"], ["", "def", "tabulate", "(", "tabular_data", ",", "headers", "=", "[", "]", ",", "tablefmt", "=", "\"simple\"", ",", "\n", "floatfmt", "=", "\"g\"", ",", "numalign", "=", "\"decimal\"", ",", "stralign", "=", "\"left\"", ",", "\n", "missingval", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Format a fixed width table for pretty printing.\n\n    >>> print(tabulate([[1, 2.34], [-56, \"8.999\"], [\"2\", \"10001\"]]))\n    ---  ---------\n      1      2.34\n    -56      8.999\n      2  10001\n    ---  ---------\n\n    The first required argument (`tabular_data`) can be a\n    list-of-lists (or another iterable of iterables), a list of named\n    tuples, a dictionary of iterables, a two-dimensional NumPy array,\n    NumPy record array, or a Pandas' dataframe.\n\n\n    Table headers\n    -------------\n\n    To print nice column headers, supply the second argument (`headers`):\n\n      - `headers` can be an explicit list of column headers\n      - if `headers=\"firstrow\"`, then the first row of data is used\n      - if `headers=\"keys\"`, then dictionary keys or column indices are used\n\n    Otherwise a headerless table is produced.\n\n    If the number of headers is less than the number of columns, they\n    are supposed to be names of the last columns. This is consistent\n    with the plain-text format of R and Pandas' dataframes.\n\n    >>> print(tabulate([[\"sex\",\"age\"],[\"Alice\",\"F\",24],[\"Bob\",\"M\",19]],\n    ...       headers=\"firstrow\"))\n           sex      age\n    -----  -----  -----\n    Alice  F         24\n    Bob    M         19\n\n\n    Column alignment\n    ----------------\n\n    `tabulate` tries to detect column types automatically, and aligns\n    the values properly. By default it aligns decimal points of the\n    numbers (or flushes integer numbers to the right), and flushes\n    everything else to the left. Possible column alignments\n    (`numalign`, `stralign`) are: \"right\", \"center\", \"left\", \"decimal\"\n    (only for `numalign`), and None (to disable alignment).\n\n\n    Table formats\n    -------------\n\n    `floatfmt` is a format specification used for columns which\n    contain numeric data with a decimal point.\n\n    `None` values are replaced with a `missingval` string:\n\n    >>> print(tabulate([[\"spam\", 1, None],\n    ...                 [\"eggs\", 42, 3.14],\n    ...                 [\"other\", None, 2.7]], missingval=\"?\"))\n    -----  --  ----\n    spam    1  ?\n    eggs   42  3.14\n    other   ?  2.7\n    -----  --  ----\n\n    Various plain-text table formats (`tablefmt`) are supported:\n    'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst', 'mediawiki',\n    and 'latex'. Variable `tabulate_formats` contains the list of\n    currently supported formats.\n\n    \"plain\" format doesn't use any pseudographics to draw tables,\n    it separates columns with a double space:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"plain\"))\n    strings      numbers\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"plain\"))\n    spam   41.9999\n    eggs  451\n\n    \"simple\" format is like Pandoc simple_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                 [\"strings\", \"numbers\"], \"simple\"))\n    strings      numbers\n    ---------  ---------\n    spam         41.9999\n    eggs        451\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"simple\"))\n    ----  --------\n    spam   41.9999\n    eggs  451\n    ----  --------\n\n    \"grid\" is similar to tables produced by Emacs table.el package or\n    Pandoc grid_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"grid\"))\n    +-----------+-----------+\n    | strings   |   numbers |\n    +===========+===========+\n    | spam      |   41.9999 |\n    +-----------+-----------+\n    | eggs      |  451      |\n    +-----------+-----------+\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"grid\"))\n    +------+----------+\n    | spam |  41.9999 |\n    +------+----------+\n    | eggs | 451      |\n    +------+----------+\n\n    \"pipe\" is like tables in PHP Markdown Extra extension or Pandoc\n    pipe_tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"pipe\"))\n    | strings   |   numbers |\n    |:----------|----------:|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"pipe\"))\n    |:-----|---------:|\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"orgtbl\" is like tables in Emacs org-mode and orgtbl-mode. They\n    are slightly different from \"pipe\" format by not using colons to\n    define column alignment, and using a \"+\" sign to indicate line\n    intersections:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"orgtbl\"))\n    | strings   |   numbers |\n    |-----------+-----------|\n    | spam      |   41.9999 |\n    | eggs      |  451      |\n\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"orgtbl\"))\n    | spam |  41.9999 |\n    | eggs | 451      |\n\n    \"rst\" is like a simple table format from reStructuredText; please\n    note that reStructuredText accepts also \"grid\" tables:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                [\"strings\", \"numbers\"], \"rst\"))\n    =========  =========\n    strings      numbers\n    =========  =========\n    spam         41.9999\n    eggs        451\n    =========  =========\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"rst\"))\n    ====  ========\n    spam   41.9999\n    eggs  451\n    ====  ========\n\n    \"mediawiki\" produces a table markup used in Wikipedia and on other\n    MediaWiki-based sites:\n\n    >>> print(tabulate([[\"strings\", \"numbers\"], [\"spam\", 41.9999], [\"eggs\", \"451.0\"]],\n    ...                headers=\"firstrow\", tablefmt=\"mediawiki\"))\n    {| class=\"wikitable\" style=\"text-align: left;\"\n    |+ <!-- caption -->\n    |-\n    ! strings   !! align=\"right\"|   numbers\n    |-\n    | spam      || align=\"right\"|   41.9999\n    |-\n    | eggs      || align=\"right\"|  451\n    |}\n\n    \"latex\" produces a tabular environment of LaTeX document markup:\n\n    >>> print(tabulate([[\"spam\", 41.9999], [\"eggs\", \"451.0\"]], tablefmt=\"latex\"))\n    \\\\begin{tabular}{lr}\n    \\\\hline\n     spam &  41.9999 \\\\\\\\\n     eggs & 451      \\\\\\\\\n    \\\\hline\n    \\\\end{tabular}\n\n    \"\"\"", "\n", "\n", "list_of_lists", ",", "headers", "=", "_normalize_tabular_data", "(", "tabular_data", ",", "headers", ")", "\n", "\n", "# optimization: look for ANSI control codes once,", "\n", "# enable smart width functions only if a control code is found", "\n", "plain_text", "=", "'\\n'", ".", "join", "(", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "headers", ")", ")", "]", "+", "[", "'\\t'", ".", "join", "(", "map", "(", "_text_type", ",", "row", ")", ")", "for", "row", "in", "list_of_lists", "]", ")", "\n", "has_invisible", "=", "re", ".", "search", "(", "_invisible_codes", ",", "plain_text", ")", "\n", "if", "has_invisible", ":", "\n", "        ", "width_fn", "=", "_visible_width", "\n", "", "else", ":", "\n", "        ", "width_fn", "=", "len", "\n", "\n", "# format rows and columns, convert numeric values to strings", "\n", "", "cols", "=", "list", "(", "zip", "(", "*", "list_of_lists", ")", ")", "\n", "coltypes", "=", "list", "(", "map", "(", "_column_type", ",", "cols", ")", ")", "\n", "cols", "=", "[", "[", "_format", "(", "v", ",", "ct", ",", "floatfmt", ",", "missingval", ")", "for", "v", "in", "c", "]", "\n", "for", "c", ",", "ct", "in", "zip", "(", "cols", ",", "coltypes", ")", "]", "\n", "\n", "# align columns", "\n", "aligns", "=", "[", "numalign", "if", "ct", "in", "[", "int", ",", "float", "]", "else", "stralign", "for", "ct", "in", "coltypes", "]", "\n", "minwidths", "=", "[", "width_fn", "(", "h", ")", "+", "2", "for", "h", "in", "headers", "]", "if", "headers", "else", "[", "0", "]", "*", "len", "(", "cols", ")", "\n", "cols", "=", "[", "_align_column", "(", "c", ",", "a", ",", "minw", ",", "has_invisible", ")", "\n", "for", "c", ",", "a", ",", "minw", "in", "zip", "(", "cols", ",", "aligns", ",", "minwidths", ")", "]", "\n", "\n", "if", "headers", ":", "\n", "# align headers and add headers", "\n", "        ", "minwidths", "=", "[", "max", "(", "minw", ",", "width_fn", "(", "c", "[", "0", "]", ")", ")", "for", "minw", ",", "c", "in", "zip", "(", "minwidths", ",", "cols", ")", "]", "\n", "headers", "=", "[", "_align_header", "(", "h", ",", "a", ",", "minw", ")", "\n", "for", "h", ",", "a", ",", "minw", "in", "zip", "(", "headers", ",", "aligns", ",", "minwidths", ")", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "", "else", ":", "\n", "        ", "minwidths", "=", "[", "width_fn", "(", "c", "[", "0", "]", ")", "for", "c", "in", "cols", "]", "\n", "rows", "=", "list", "(", "zip", "(", "*", "cols", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "tablefmt", ",", "TableFormat", ")", ":", "\n", "        ", "tablefmt", "=", "_table_formats", ".", "get", "(", "tablefmt", ",", "_table_formats", "[", "\"simple\"", "]", ")", "\n", "\n", "", "return", "_format_table", "(", "tablefmt", ",", "headers", ",", "rows", ",", "minwidths", ",", "aligns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_simple_row": [[780, 784], ["sep.join"], "function", ["None"], ["", "def", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", ":", "\n", "    ", "\"Format row according to DataRow format without padding.\"", "\n", "begin", ",", "sep", ",", "end", "=", "rowfmt", "\n", "return", "(", "begin", "+", "sep", ".", "join", "(", "padded_cells", ")", "+", "end", ")", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_row": [[786, 794], ["hasattr", "rowfmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_simple_row"], ["", "def", "_build_row", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ",", "rowfmt", ")", ":", "\n", "    ", "\"Return a string which represents a row of data cells.\"", "\n", "if", "not", "rowfmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "rowfmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "rowfmt", "(", "padded_cells", ",", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_simple_row", "(", "padded_cells", ",", "rowfmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_line": [[796, 806], ["hasattr", "linefmt", "tabulate._build_simple_row"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_simple_row"], ["", "", "def", "_build_line", "(", "colwidths", ",", "colaligns", ",", "linefmt", ")", ":", "\n", "    ", "\"Return a string which represents a horizontal line.\"", "\n", "if", "not", "linefmt", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "linefmt", ",", "\"__call__\"", ")", ":", "\n", "        ", "return", "linefmt", "(", "colwidths", ",", "colaligns", ")", "\n", "", "else", ":", "\n", "        ", "begin", ",", "fill", ",", "sep", ",", "end", "=", "linefmt", "\n", "cells", "=", "[", "fill", "*", "w", "for", "w", "in", "colwidths", "]", "\n", "return", "_build_simple_row", "(", "cells", ",", "(", "begin", ",", "sep", ",", "end", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pad_row": [[808, 815], ["None"], "function", ["None"], ["", "", "def", "_pad_row", "(", "cells", ",", "padding", ")", ":", "\n", "    ", "if", "cells", ":", "\n", "        ", "pad", "=", "\" \"", "*", "padding", "\n", "padded_cells", "=", "[", "pad", "+", "cell", "+", "pad", "for", "cell", "in", "cells", "]", "\n", "return", "padded_cells", "\n", "", "else", ":", "\n", "        ", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._format_table": [[817, 851], ["tabulate._pad_row", "tabulate._pad_row", "lines.append", "lines.append", "lines.append", "lines.append", "tabulate._build_line", "tabulate._build_row", "lines.append", "lines.append", "lines.append", "tabulate._build_row", "lines.append", "tabulate._build_line", "tabulate._build_line", "tabulate._build_row", "tabulate._build_line", "tabulate._build_row"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pad_row", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._pad_row", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_line", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_row", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_row", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_line", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_line", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_row", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_line", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate._build_row"], ["", "", "def", "_format_table", "(", "fmt", ",", "headers", ",", "rows", ",", "colwidths", ",", "colaligns", ")", ":", "\n", "    ", "\"\"\"Produce a plain-text representation of the table.\"\"\"", "\n", "lines", "=", "[", "]", "\n", "hidden", "=", "fmt", ".", "with_header_hide", "if", "(", "headers", "and", "fmt", ".", "with_header_hide", ")", "else", "[", "]", "\n", "pad", "=", "fmt", ".", "padding", "\n", "headerrow", "=", "fmt", ".", "headerrow", "\n", "\n", "padded_widths", "=", "[", "(", "w", "+", "2", "*", "pad", ")", "for", "w", "in", "colwidths", "]", "\n", "padded_headers", "=", "_pad_row", "(", "headers", ",", "pad", ")", "\n", "padded_rows", "=", "[", "_pad_row", "(", "row", ",", "pad", ")", "for", "row", "in", "rows", "]", "\n", "\n", "if", "fmt", ".", "lineabove", "and", "\"lineabove\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "lineabove", ")", ")", "\n", "\n", "", "if", "padded_headers", ":", "\n", "        ", "lines", ".", "append", "(", "_build_row", "(", "padded_headers", ",", "padded_widths", ",", "colaligns", ",", "headerrow", ")", ")", "\n", "if", "fmt", ".", "linebelowheader", "and", "\"linebelowheader\"", "not", "in", "hidden", ":", "\n", "            ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelowheader", ")", ")", "\n", "\n", "", "", "if", "padded_rows", "and", "fmt", ".", "linebetweenrows", "and", "\"linebetweenrows\"", "not", "in", "hidden", ":", "\n", "# initial rows with a line below", "\n", "        ", "for", "row", "in", "padded_rows", "[", ":", "-", "1", "]", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebetweenrows", ")", ")", "\n", "# the last row without a line below", "\n", "", "lines", ".", "append", "(", "_build_row", "(", "padded_rows", "[", "-", "1", "]", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "row", "in", "padded_rows", ":", "\n", "            ", "lines", ".", "append", "(", "_build_row", "(", "row", ",", "padded_widths", ",", "colaligns", ",", "fmt", ".", "datarow", ")", ")", "\n", "\n", "", "", "if", "fmt", ".", "linebelow", "and", "\"linebelow\"", "not", "in", "hidden", ":", "\n", "        ", "lines", ".", "append", "(", "_build_line", "(", "padded_widths", ",", "colaligns", ",", "fmt", ".", "linebelow", ")", ")", "\n", "\n", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.__init__": [[5, 9], ["dict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "start_times", "=", "dict", "(", ")", "\n", "self", ".", "elapsed_times", "=", "defaultdict", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start": [[10, 13], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "(", "name", "not", "in", "self", ".", "start_times", ")", "\n", "self", ".", "start_times", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop": [[14, 18], ["timer.TimeIt.start_times.pop", "time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "(", "name", "in", "self", ".", "start_times", ")", "\n", "self", ".", "elapsed_times", "[", "name", "]", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "start_times", "[", "name", "]", "\n", "self", ".", "start_times", ".", "pop", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.elapsed": [[19, 21], ["None"], "methods", ["None"], ["", "def", "elapsed", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "elapsed_times", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.reset": [[22, 25], ["dict", "collections.defaultdict"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_times", "=", "dict", "(", ")", "\n", "self", ".", "elapsed_times", "=", "defaultdict", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.__str__": [[26, 43], ["sorted", "timer.TimeIt.elapsed_times.items", "sum", "max", "timer.TimeIt.elapsed_times.values", "timer.TimeIt.elapsed_times.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "names_elapsed", "=", "sorted", "(", "self", ".", "elapsed_times", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "name", ",", "elapsed", "in", "names_elapsed", ":", "\n", "            ", "if", "'total'", "not", "in", "self", ".", "elapsed_times", ":", "\n", "                ", "s", "+=", "'{0}: {1: <10} {2:.1f}\\n'", ".", "format", "(", "self", ".", "prefix", ",", "name", ",", "elapsed", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "self", ".", "elapsed_times", "[", "'total'", "]", ">=", "max", "(", "self", ".", "elapsed_times", ".", "values", "(", ")", ")", ")", "\n", "pct", "=", "100.", "*", "elapsed", "/", "self", ".", "elapsed_times", "[", "'total'", "]", "\n", "s", "+=", "'{0}: {1: <10} {2:.1f} ({3:.1f}%)\\n'", ".", "format", "(", "self", ".", "prefix", ",", "name", ",", "elapsed", ",", "pct", ")", "\n", "", "", "if", "'total'", "in", "self", ".", "elapsed_times", ":", "\n", "            ", "times_summed", "=", "sum", "(", "[", "t", "for", "k", ",", "t", "in", "self", ".", "elapsed_times", ".", "items", "(", ")", "if", "k", "!=", "'total'", "]", ")", "\n", "other_time", "=", "self", ".", "elapsed_times", "[", "'total'", "]", "-", "times_summed", "\n", "assert", "(", "other_time", ">=", "0", ")", "\n", "pct", "=", "100.", "*", "other_time", "/", "self", ".", "elapsed_times", "[", "'total'", "]", "\n", "s", "+=", "'{0}: {1: <10} {2:.1f} ({3:.1f}%)\\n'", ".", "format", "(", "self", ".", "prefix", ",", "'other'", ",", "other_time", ",", "pct", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.__init__": [[36, 44], ["collections.defaultdict", "list"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_dir", "=", "None", "\n", "self", ".", "_logger", "=", "None", "\n", "self", ".", "_log_path", "=", "None", "\n", "self", ".", "_csv_path", "=", "None", "\n", "self", ".", "_tabular", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "_curr_recorded", "=", "list", "(", ")", "\n", "self", ".", "_num_dump_tabular_calls", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.dir": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.setup": [[53, 65], ["os.path.dirname", "logger.LoggerClass._get_logger", "os.path.exists", "len", "os.path.splitext", "list", "pandas.read_csv().items", "tuple", "logger.LoggerClass._tabular.values", "pandas.read_csv"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass._get_logger", "home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "setup", "(", "self", ",", "display_name", ",", "log_path", ",", "lvl", ")", ":", "\n", "        ", "self", ".", "_dir", "=", "os", ".", "path", ".", "dirname", "(", "log_path", ")", "\n", "self", ".", "_logger", "=", "self", ".", "_get_logger", "(", "LoggerClass", ".", "GLOBAL_LOGGER_NAME", ",", "\n", "log_path", ",", "\n", "lvl", "=", "lvl", ",", "\n", "display_name", "=", "display_name", ")", "\n", "self", ".", "_csv_path", "=", "os", ".", "path", ".", "splitext", "(", "log_path", ")", "[", "0", "]", "+", "'.csv'", "\n", "\n", "### load csv if exists", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "_csv_path", ")", ":", "\n", "            ", "self", ".", "_tabular", "=", "{", "k", ":", "list", "(", "v", ")", "for", "k", ",", "v", "in", "pandas", ".", "read_csv", "(", "self", ".", "_csv_path", ")", ".", "items", "(", ")", "}", "\n", "self", ".", "_num_dump_tabular_calls", "=", "len", "(", "tuple", "(", "self", ".", "_tabular", ".", "values", "(", ")", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass._get_logger": [[66, 96], ["isinstance", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "lvl.lower().strip.lower().strip.lower().strip", "lvl.lower().strip.lower().strip.lower", "ValueError"], "methods", ["None"], ["", "", "def", "_get_logger", "(", "self", ",", "name", ",", "log_path", ",", "lvl", "=", "logging", ".", "INFO", ",", "display_name", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "lvl", ",", "str", ")", ":", "\n", "            ", "lvl", "=", "lvl", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "lvl", "==", "'debug'", ":", "\n", "                ", "lvl", "=", "logging", ".", "DEBUG", "\n", "", "elif", "lvl", "==", "'info'", ":", "\n", "                ", "lvl", "=", "logging", ".", "INFO", "\n", "", "elif", "lvl", "==", "'warn'", "or", "lvl", "==", "'warning'", ":", "\n", "                ", "lvl", "=", "logging", ".", "WARN", "\n", "", "elif", "lvl", "==", "'error'", ":", "\n", "                ", "lvl", "=", "logging", ".", "ERROR", "\n", "", "elif", "lvl", "==", "'fatal'", "or", "lvl", "==", "'critical'", ":", "\n", "                ", "lvl", "=", "logging", ".", "CRITICAL", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'unknown logging level'", ")", "\n", "\n", "", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_path", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "LoggerClass", ".", "_normal_formatter", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "lvl", ")", "\n", "console_handler", ".", "setFormatter", "(", "LoggerClass", ".", "_color_formatter", ")", "\n", "if", "display_name", "is", "None", ":", "\n", "            ", "display_name", "=", "name", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "display_name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug": [[101, 104], ["logger.LoggerClass._logger.debug"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.debug"], ["", "def", "debug", "(", "self", ",", "s", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_logger", "is", "not", "None", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info": [[105, 108], ["logger.LoggerClass._logger.info"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.info"], ["", "def", "info", "(", "self", ",", "s", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_logger", "is", "not", "None", ")", "\n", "self", ".", "_logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn": [[109, 112], ["logger.LoggerClass._logger.warn"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.warn"], ["", "def", "warn", "(", "self", ",", "s", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_logger", "is", "not", "None", ")", "\n", "self", ".", "_logger", ".", "warn", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.error": [[113, 116], ["logger.LoggerClass._logger.error"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.error"], ["", "def", "error", "(", "self", ",", "s", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_logger", "is", "not", "None", ")", "\n", "self", ".", "_logger", ".", "error", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.critical": [[117, 120], ["logger.LoggerClass._logger.critical"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.critical"], ["", "def", "critical", "(", "self", ",", "s", ")", ":", "\n", "        ", "assert", "(", "self", ".", "_logger", "is", "not", "None", ")", "\n", "self", ".", "_logger", ".", "critical", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.record_tabular": [[125, 133], ["logger.LoggerClass._curr_recorded.append", "str", "str", "logger.LoggerClass._tabular[].append"], "methods", ["None"], ["", "def", "record_tabular", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "assert", "(", "str", "(", "key", ")", "not", "in", "self", ".", "_curr_recorded", ")", "\n", "self", ".", "_curr_recorded", ".", "append", "(", "str", "(", "key", ")", ")", "\n", "\n", "if", "key", "in", "self", ".", "_tabular", ":", "\n", "            ", "self", ".", "_tabular", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_tabular", "[", "key", "]", "=", "[", "np", ".", "nan", "]", "*", "self", ".", "_num_dump_tabular_calls", "+", "[", "val", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.data.logger.LoggerClass.dump_tabular": [[134, 161], ["list", "logger.LoggerClass._tabular.items", "pandas.DataFrame", "pandas.DataFrame.to_csv", "len", "tabulate.tabulate.tabulate", "tabulate.tabulate.tabulate.split", "len", "sorted", "print_func", "pandas.Series", "len", "logger.LoggerClass._tabular[].append", "ValueError", "logger.LoggerClass._tabular.items", "len", "logger.LoggerClass._tabular.items"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.data.tabulate.tabulate"], ["", "", "def", "dump_tabular", "(", "self", ",", "print_func", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_curr_recorded", ")", "==", "0", ":", "\n", "            ", "return", "''", "\n", "\n", "### reset", "\n", "", "self", ".", "_curr_recorded", "=", "list", "(", ")", "\n", "self", ".", "_num_dump_tabular_calls", "+=", "1", "\n", "\n", "### make sure all same length", "\n", "for", "k", ",", "v", "in", "self", ".", "_tabular", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "v", ")", "==", "self", ".", "_num_dump_tabular_calls", ":", "\n", "                ", "pass", "\n", "", "elif", "len", "(", "v", ")", "==", "self", ".", "_num_dump_tabular_calls", "-", "1", ":", "\n", "                ", "self", ".", "_tabular", "[", "k", "]", ".", "append", "(", "np", ".", "nan", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'key {0} should not have {1} items when {2} calls have been made'", ".", "format", "(", "\n", "k", ",", "len", "(", "v", ")", ",", "self", ".", "_num_dump_tabular_calls", ")", ")", "\n", "\n", "### print", "\n", "", "", "if", "print_func", "is", "not", "None", ":", "\n", "            ", "log_str", "=", "tabulate", "(", "sorted", "(", "[", "(", "k", ",", "v", "[", "-", "1", "]", ")", "for", "k", ",", "v", "in", "self", ".", "_tabular", ".", "items", "(", ")", "]", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "0", "]", ")", ")", "\n", "for", "line", "in", "log_str", ".", "split", "(", "'\\n'", ")", ":", "\n", "                ", "print_func", "(", "line", ")", "\n", "\n", "### write to file", "\n", "", "", "tabular_pandas", "=", "pandas", ".", "DataFrame", "(", "{", "k", ":", "pandas", ".", "Series", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "_tabular", ".", "items", "(", ")", "}", ")", "\n", "tabular_pandas", ".", "to_csv", "(", "self", ".", "_csv_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.create_session_and_graph": [[8, 31], ["str", "tensorflow.Graph", "tensorflow.Session", "len", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "str"], "function", ["None"], ["def", "create_session_and_graph", "(", "gpu_device", "=", "None", ",", "gpu_frac", "=", "None", ")", ":", "\n", "    ", "if", "gpu_device", "is", "None", ":", "\n", "        ", "gpu_device", "=", "0", "\n", "", "if", "gpu_frac", "is", "None", ":", "\n", "        ", "gpu_frac", "=", "0.95", "\n", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_device", ")", "\n", "tf_graph", "=", "tf", ".", "Graph", "(", ")", "\n", "if", "len", "(", "str", "(", "gpu_device", ")", ")", ">", "0", ":", "\n", "        ", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "gpu_frac", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "gpu_options", "=", "gpu_options", ",", "\n", "log_device_placement", "=", "False", ",", "\n", "allow_soft_placement", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "device_count", "=", "{", "'GPU'", ":", "0", "}", ",", "\n", "log_device_placement", "=", "False", ",", "\n", "allow_soft_placement", "=", "True", ",", "\n", ")", "\n", "", "tf_sess", "=", "tf", ".", "Session", "(", "graph", "=", "tf_graph", ",", "config", "=", "config", ")", "\n", "return", "tf_sess", ",", "tf_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.minimize_and_clip": [[36, 46], ["optimizer.compute_gradients", "enumerate", "optimizer.apply_gradients", "tensorflow.clip_by_norm"], "function", ["None"], ["", "def", "minimize_and_clip", "(", "optimizer", ",", "objective", ",", "var_list", ",", "clip_val", "=", "10", ")", ":", "\n", "    ", "\"\"\"Minimized `objective` using `optimizer` w.r.t. variables in\n    `var_list` while ensure the norm of the gradients for each\n    variable is clipped to `clip_val`\n    \"\"\"", "\n", "gradients", "=", "optimizer", ".", "compute_gradients", "(", "objective", ",", "var_list", "=", "var_list", ")", "\n", "for", "i", ",", "(", "grad", ",", "var", ")", "in", "enumerate", "(", "gradients", ")", ":", "\n", "        ", "if", "grad", "is", "not", "None", ":", "\n", "            ", "gradients", "[", "i", "]", "=", "(", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_val", ")", ",", "var", ")", "\n", "", "", "return", "optimizer", ".", "apply_gradients", "(", "gradients", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.spatial_soft_argmax": [[51, 75], ["tf.reshape.get_shape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.shape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.stack", "tensorflow.range", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "spatial_soft_argmax", "(", "features", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    features shape is [N, H, W, C]\n    \"\"\"", "\n", "N", "=", "tf", ".", "shape", "(", "features", ")", "[", "0", "]", "\n", "val_shape", "=", "features", ".", "get_shape", "(", ")", "\n", "H", ",", "W", ",", "C", "=", "val_shape", "[", "1", "]", ".", "value", ",", "val_shape", "[", "2", "]", ".", "value", ",", "val_shape", "[", "3", "]", ".", "value", "\n", "features", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "transpose", "(", "features", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ",", "\n", "[", "-", "1", ",", "H", "*", "W", "]", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "features", ")", "\n", "spatial_softmax", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "softmax", ",", "[", "N", ",", "C", ",", "H", ",", "W", "]", ")", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "spatial_softmax_pos", "=", "tf", ".", "expand_dims", "(", "spatial_softmax", ",", "-", "1", ")", "\n", "# TODO shape [H, W, 1, 2]", "\n", "# TODO H or W is 1", "\n", "assert", "(", "H", "!=", "1", "and", "W", "!=", "1", ")", "\n", "delta_h", "=", "2.", "/", "tf", ".", "cast", "(", "H", "-", "1", ",", "dtype", ")", "\n", "delta_w", "=", "2.", "/", "tf", ".", "cast", "(", "W", "-", "1", ",", "dtype", ")", "\n", "ran_h", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "-", "1.", ",", "1.", "+", "delta_h", ",", "delta_h", ",", "dtype", "=", "dtype", ")", ",", "1", ")", ",", "[", "1", ",", "W", "]", ")", "\n", "ran_w", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "-", "1.", ",", "1", "+", "delta_w", ",", "delta_w", ",", "dtype", "=", "dtype", ")", ",", "0", ")", ",", "[", "H", ",", "1", "]", ")", "\n", "image_pos", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "[", "ran_h", ",", "ran_w", "]", ",", "2", ")", ",", "2", ")", "\n", "spatial_soft_amax", "=", "tf", ".", "reduce_sum", "(", "spatial_softmax_pos", "*", "image_pos", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "shaped_ssamax", "=", "tf", ".", "reshape", "(", "spatial_soft_amax", ",", "[", "N", ",", "C", "*", "2", "]", ")", "\n", "return", "shaped_ssamax", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d": [[76, 93], ["list", "tensorflow.shape", "tensorflow.reshape", "tf.transpose.set_shape", "tensorflow.transpose", "tf.transpose.get_shape", "tensorflow.tile", "tensorflow.Dimension", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "repeat_2d", "(", "x", ",", "reps", ",", "axis", ")", ":", "\n", "    ", "assert", "(", "axis", "==", "0", "or", "axis", "==", "1", ")", "\n", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ")", "\n", "\n", "", "static_shape", "=", "list", "(", "x", ".", "get_shape", "(", ")", ")", "\n", "dyn_shape", "=", "tf", ".", "shape", "(", "x", ")", "\n", "x_repeat", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "reps", "]", ")", ",", "(", "dyn_shape", "[", "0", "]", "*", "reps", ",", "dyn_shape", "[", "1", "]", ")", ")", "\n", "if", "static_shape", "[", "0", "]", ".", "value", "is", "not", "None", ":", "\n", "        ", "static_shape", "[", "0", "]", "=", "tf", ".", "Dimension", "(", "static_shape", "[", "0", "]", ".", "value", "*", "reps", ")", "\n", "", "x_repeat", ".", "set_shape", "(", "static_shape", ")", "\n", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "x_repeat", "=", "tf", ".", "transpose", "(", "x_repeat", ")", "\n", "\n", "", "return", "x_repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.batch_outer_product": [[94, 106], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.batch_matmul"], "function", ["None"], ["", "def", "batch_outer_product", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n    :param X: [N, U]\n    :param Y: [N, V]\n    \"\"\"", "\n", "# tf.assert_equal(tf.shape(X)[0], tf.shape(Y)[0])", "\n", "\n", "X_batch", "=", "tf", ".", "expand_dims", "(", "X", ",", "2", ")", "# [N, U, 1]", "\n", "Y_batch", "=", "tf", ".", "expand_dims", "(", "Y", ",", "1", ")", "# [N, 1, V]", "\n", "results", "=", "tf", ".", "batch_matmul", "(", "X_batch", ",", "Y_batch", ")", "# [N, U, V]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.batch_outer_product_2d": [[107, 121], ["tensorflow.tile", "tf_utils.repeat_2d", "tensorflow.multiply", "X.get_shape", "Y.get_shape"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.repeat_2d"], ["", "def", "batch_outer_product_2d", "(", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"\n    :param X: [N, U]\n    :param Y: [N, V]\n    :return [N, U * V]\n    \"\"\"", "\n", "U", "=", "X", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "V", "=", "Y", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "assert", "(", "U", "is", "not", "None", ")", "\n", "assert", "(", "V", "is", "not", "None", ")", "\n", "\n", "X_tile", "=", "tf", ".", "tile", "(", "X", ",", "(", "1", ",", "V", ")", ")", "\n", "Y_repeat", "=", "repeat_2d", "(", "Y", ",", "U", ",", "1", ")", "\n", "return", "tf", ".", "multiply", "(", "X_tile", ",", "Y_repeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.gather_2d": [[122, 135], ["tensorflow.assert_equal", "tensorflow.transpose", "tensorflow.gather_nd", "len", "tensorflow.pack", "x.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.range", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "gather_2d", "(", "x", ",", "idxs", ")", ":", "\n", "    ", "\"\"\"\n    :param x: 2d tensor\n    :param idxs: 1d tensor indexing the columns of x to gather\n    :return: 1d tensor\n    \"\"\"", "\n", "assert", "(", "len", "(", "x", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "tf", ".", "assert_equal", "(", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "idxs", ")", "[", "0", "]", ")", "\n", "\n", "idxs", "=", "tf", ".", "transpose", "(", "tf", ".", "pack", "(", "[", "tf", ".", "range", "(", "tf", ".", "shape", "(", "idxs", ")", "[", "0", "]", ")", ",", "idxs", "]", ")", ")", "\n", "x_gather", "=", "tf", ".", "gather_nd", "(", "x", ",", "idxs", ")", "\n", "\n", "return", "x_gather", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.block_diagonal": [[136, 176], ["tensorflow.Dimension", "tensorflow.Dimension", "tensorflow.TensorShape", "tensorflow.add_n", "tensorflow.concat", "tf.concat.set_shape", "tensorflow.convert_to_tensor", "matrix.get_shape().with_rank_at_least", "batch_shape.merge_with.merge_with", "tensorflow.shape", "ret_columns_list.append", "tensorflow.shape", "row_blocks.append", "batch_shape.merge_with.concatenate", "tensorflow.pad", "matrix.get_shape", "tensorflow.concat", "tensorflow.zeros", "tensorflow.rank"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape", "home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "block_diagonal", "(", "matrices", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "\"\"\"Constructs block-diagonal matrices from a list of batched 2D tensors.\n\n    Args:\n        matrices: A list of Tensors with shape [..., N_i, M_i] (i.e. a list of\n        matrices with the same batch dimension).\n        dtype: Data type to use. The Tensors in `matrices` must match this dtype.\n    Returns:\n        A matrix with the input matrices stacked along its main diagonal, having\n        shape [..., \\sum_i N_i, \\sum_i M_i].\n  \"\"\"", "\n", "matrices", "=", "[", "tf", ".", "convert_to_tensor", "(", "matrix", ",", "dtype", "=", "dtype", ")", "for", "matrix", "in", "matrices", "]", "\n", "blocked_rows", "=", "tf", ".", "Dimension", "(", "0", ")", "\n", "blocked_cols", "=", "tf", ".", "Dimension", "(", "0", ")", "\n", "batch_shape", "=", "tf", ".", "TensorShape", "(", "None", ")", "\n", "for", "matrix", "in", "matrices", ":", "\n", "        ", "full_matrix_shape", "=", "matrix", ".", "get_shape", "(", ")", ".", "with_rank_at_least", "(", "2", ")", "\n", "batch_shape", "=", "batch_shape", ".", "merge_with", "(", "full_matrix_shape", "[", ":", "-", "2", "]", ")", "\n", "blocked_rows", "+=", "full_matrix_shape", "[", "-", "2", "]", "\n", "blocked_cols", "+=", "full_matrix_shape", "[", "-", "1", "]", "\n", "", "ret_columns_list", "=", "[", "]", "\n", "for", "matrix", "in", "matrices", ":", "\n", "        ", "matrix_shape", "=", "tf", ".", "shape", "(", "matrix", ")", "\n", "ret_columns_list", ".", "append", "(", "matrix_shape", "[", "-", "1", "]", ")", "\n", "", "ret_columns", "=", "tf", ".", "add_n", "(", "ret_columns_list", ")", "\n", "row_blocks", "=", "[", "]", "\n", "current_column", "=", "0", "\n", "for", "matrix", "in", "matrices", ":", "\n", "        ", "matrix_shape", "=", "tf", ".", "shape", "(", "matrix", ")", "\n", "row_before_length", "=", "current_column", "\n", "current_column", "+=", "matrix_shape", "[", "-", "1", "]", "\n", "row_after_length", "=", "ret_columns", "-", "current_column", "\n", "row_blocks", ".", "append", "(", "tf", ".", "pad", "(", "\n", "tensor", "=", "matrix", ",", "\n", "paddings", "=", "tf", ".", "concat", "(", "0", ",", "\n", "[", "tf", ".", "zeros", "(", "[", "tf", ".", "rank", "(", "matrix", ")", "-", "1", ",", "2", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "[", "(", "row_before_length", ",", "row_after_length", ")", "]", "]", ")", ")", ")", "\n", "", "blocked", "=", "tf", ".", "concat", "(", "-", "2", ",", "row_blocks", ")", "\n", "blocked", ".", "set_shape", "(", "batch_shape", ".", "concatenate", "(", "(", "blocked_rows", ",", "blocked_cols", ")", ")", ")", "\n", "return", "blocked", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.sample_categorical": [[177, 182], ["tensorflow.contrib.distributions.Categorical", "tf.contrib.distributions.Categorical.sample"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.discrete.Discrete.sample"], ["", "def", "sample_categorical", "(", "p", ")", ":", "\n", "# TODO change to tf.distributions once update tf version", "\n", "    ", "dist", "=", "tf", ".", "contrib", ".", "distributions", ".", "Categorical", "(", "probs", "=", "p", ")", "\n", "sample", "=", "dist", ".", "sample", "(", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.assert_shape": [[187, 192], ["tensorflow.shape", "enumerate", "len", "len", "tensorflow.assert_equal", "tensor.get_shape", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "assert_shape", "(", "tensor", ",", "shape", ")", ":", "\n", "    ", "assert", "(", "len", "(", "tensor", ".", "get_shape", "(", ")", ")", "==", "len", "(", "shape", ")", ")", "\n", "tensor_shape", "=", "tf", ".", "shape", "(", "tensor", ")", "\n", "for", "i", ",", "s_i", "in", "enumerate", "(", "shape", ")", ":", "\n", "        ", "tf", ".", "assert_equal", "(", "tensor_shape", "[", "i", "]", ",", "tf", ".", "cast", "(", "s_i", ",", "tf", ".", "int32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.tf_utils.assert_equal_approx": [[193, 195], ["tensorflow.assert_equal", "tensorflow.cast", "tensorflow.abs"], "function", ["None"], ["", "", "def", "assert_equal_approx", "(", "tensor", ",", "value", ",", "eps", "=", "1e-5", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "tf", ".", "assert_equal", "(", "tf", ".", "cast", "(", "tf", ".", "abs", "(", "tensor", "-", "value", ")", "<", "1e-5", ",", "tf", ".", "int32", ")", ",", "1", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.convnn": [[4, 50], ["tensorflow.variable_scope", "range", "len", "tensorflow.variable_scope", "conv_class", "conv_class.", "len", "tensorflow.contrib.layers.xavier_initializer_conv2d", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer", "conv_call_fn.get_shape", "data_format.index"], "function", ["None"], ["def", "convnn", "(", "inputs", ",", "\n", "conv_class", ",", "\n", "conv_args", ",", "\n", "filters", ",", "\n", "kernels", ",", "\n", "strides", ",", "\n", "padding", ",", "\n", "hidden_activation", ",", "\n", "output_activation", ",", "\n", "trainable", "=", "True", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "scope", "=", "'convnn'", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "data_format", "=", "'NCHW'", ",", "\n", "reuse", "=", "False", ",", "\n", "is_training", "=", "True", ",", "\n", "global_step_tensor", "=", "None", ")", ":", "\n", "\n", "    ", "next_layer_input", "=", "inputs", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "kernels", ")", ")", ":", "\n", "            ", "activation", "=", "hidden_activation", "if", "i", "<", "len", "(", "kernels", ")", "-", "1", "else", "output_activation", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"conv{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "conv_call_fn", "=", "conv_class", "(", "\n", "num_in_channels", "=", "next_layer_input", ".", "get_shape", "(", ")", "[", "data_format", ".", "index", "(", "'C'", ")", "]", ".", "value", ",", "\n", "num_out_channels", "=", "filters", "[", "i", "]", ",", "\n", "data_format", "=", "data_format", ",", "\n", "kernel_size", "=", "kernels", "[", "i", "]", ",", "\n", "stride", "=", "strides", "[", "i", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "activation_fn", "=", "activation", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "normalizer_params", "=", "normalizer_params", ",", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer_conv2d", "(", "dtype", "=", "dtype", ")", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ",", "dtype", "=", "dtype", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "trainable", "=", "trainable", ",", "\n", "**", "conv_args", ")", "\n", "\n", "next_layer_input", "=", "conv_call_fn", "(", "next_layer_input", ")", "\n", "\n", "", "", "", "output", "=", "next_layer_input", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.fullyconnectednn": [[52, 98], ["tensorflow.reshape", "tensorflow.variable_scope", "enumerate", "len", "len", "tensorflow.reshape", "inputs.get_shape", "inputs.get_shape", "tensorflow.variable_scope", "fullyconnected_class", "fullyconnected_class.", "inputs.get_shape", "inputs.get_shape", "len", "tf.reshape.get_shape", "fc_call_fn.get_shape"], "function", ["None"], ["", "def", "fullyconnectednn", "(", "inputs", ",", "\n", "fullyconnected_class", ",", "\n", "fullyconnected_args", ",", "\n", "hidden_layers", ",", "\n", "output_dim", ",", "\n", "hidden_activation", ",", "\n", "output_activation", ",", "\n", "trainable", "=", "True", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "scope", "=", "'fcnn'", ",", "\n", "reuse", "=", "False", ",", "\n", "T", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_step_tensor", "=", "None", ")", ":", "\n", "    ", "if", "T", "is", "None", ":", "\n", "        ", "assert", "(", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", "==", "2", ")", "\n", "next_layer_input", "=", "inputs", "\n", "", "else", ":", "\n", "        ", "assert", "(", "len", "(", "inputs", ".", "get_shape", "(", ")", ")", "==", "3", ")", "\n", "assert", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "==", "T", ")", "\n", "next_layer_input", "=", "tf", ".", "reshape", "(", "inputs", ",", "(", "-", "1", ",", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "dims", "=", "hidden_layers", "+", "[", "output_dim", "]", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "dims", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'l{0}'", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "activation", "=", "hidden_activation", "if", "i", "<", "len", "(", "dims", ")", "-", "1", "else", "output_activation", "\n", "\n", "fc_call_fn", "=", "fullyconnected_class", "(", "\n", "num_inputs", "=", "next_layer_input", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", ",", "\n", "num_outputs", "=", "dim", ",", "\n", "activation_fn", "=", "activation", ",", "\n", "trainable", "=", "trainable", ",", "\n", "normalizer_fn", "=", "normalizer_fn", ",", "\n", "normalizer_params", "=", "normalizer_params", ",", "\n", "**", "fullyconnected_args", ")", "\n", "\n", "next_layer_input", "=", "fc_call_fn", "(", "next_layer_input", ")", "\n", "\n", "", "", "output", "=", "next_layer_input", "\n", "\n", "if", "T", "is", "not", "None", ":", "\n", "            ", "output", "=", "tf", ".", "reshape", "(", "output", ",", "(", "-", "1", ",", "T", ",", "output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.networks.rnn": [[100, 156], ["tuple", "tensorflow.variable_scope", "range", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.nn.dynamic_rnn", "tensorflow.split", "tensorflow.split", "range", "rnncell_class", "cells.append", "tensorflow.cast", "tf.split.append", "initial_state[].get_shape", "states[].get_shape", "tensorflow.nn.rnn_cell.LSTMStateTuple", "inputs.get_shape", "type"], "function", ["None"], ["", "def", "rnn", "(", "inputs", ",", "\n", "rnncell_class", ",", "\n", "rnncell_args", ",", "\n", "num_cells", ",", "\n", "state_tuple_size", ",", "\n", "initial_state", "=", "None", ",", "\n", "num_units", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "'rnn'", ",", "\n", "reuse", "=", "False", ",", "\n", "is_training", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    inputs is shape [batch_size x T x features].\n    \"\"\"", "\n", "if", "initial_state", "is", "not", "None", ":", "\n", "        ", "assert", "(", "num_units", "is", "None", ")", "\n", "\n", "if", "state_tuple_size", "==", "1", ":", "\n", "            ", "initial_state", "=", "tf", ".", "split", "(", "initial_state", ",", "num_cells", ",", "axis", "=", "1", ")", "\n", "num_units", "=", "initial_state", "[", "0", "]", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "", "else", ":", "\n", "            ", "states", "=", "tf", ".", "split", "(", "initial_state", ",", "2", "*", "num_cells", ",", "axis", "=", "1", ")", "\n", "num_units", "=", "states", "[", "0", "]", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "initial_state", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_cells", ")", ":", "\n", "                ", "initial_state", ".", "append", "(", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "states", "[", "i", "*", "2", "]", ",", "states", "[", "i", "*", "2", "+", "1", "]", ")", ")", "\n", "\n", "", "", "initial_state", "=", "tuple", "(", "initial_state", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "num_units", "is", "not", "None", ")", "\n", "\n", "", "cells", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "num_inputs", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "if", "i", "==", "0", "else", "num_units", "\n", "\n", "cell", "=", "rnncell_class", "(", "\n", "num_units", ",", "\n", "dtype", "=", "dtype", ",", "\n", "num_inputs", "=", "num_inputs", ",", "\n", "weights_scope", "=", "'{0}_{1}'", ".", "format", "(", "type", "(", "rnncell_class", ")", ".", "__name__", ",", "i", ")", ",", "\n", "trainable", "=", "trainable", ",", "\n", "**", "rnncell_args", ")", "\n", "\n", "cells", ".", "append", "(", "cell", ")", "\n", "\n", "", "multi_cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "cells", ")", "\n", "outputs", ",", "state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "multi_cell", ",", "\n", "tf", ".", "cast", "(", "inputs", ",", "dtype", ")", ",", "\n", "initial_state", "=", "initial_state", ",", "\n", "dtype", "=", "dtype", ",", "\n", "time_major", "=", "False", ")", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.pkls_to_tfrecords.PklsToTfrecords.__init__": [[14, 44], ["os.path.join", "hasattr", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "pkl_folders", ",", "\n", "output_folder", ",", "\n", "env_params", ",", "\n", "labeller_params", ",", "\n", "num_processes", "=", "1", ")", ":", "\n", "        ", "self", ".", "_pkl_folders", "=", "pkl_folders", "\n", "self", ".", "_output_folder", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "output_folder", ")", "\n", "self", ".", "_num_processes", "=", "num_processes", "\n", "\n", "### create env", "\n", "self", ".", "_env", "=", "env_params", "[", "'class'", "]", "(", "params", "=", "env_params", "[", "'kwargs'", "]", ")", "\n", "\n", "### create labeller", "\n", "self", ".", "_labeller", "=", "labeller_params", "[", "'class'", "]", "(", "env_spec", "=", "self", ".", "_env", ".", "spec", ",", "\n", "policy", "=", "None", ",", "# TODO", "\n", "**", "labeller_params", "[", "'kwargs'", "]", ")", "if", "labeller_params", "[", "'class'", "]", "else", "None", "\n", "if", "self", ".", "_labeller", ":", "\n", "            ", "assert", "self", ".", "_num_processes", "==", "1", ",", "'can only have one process when labelling'", "\n", "\n", "### modify rollouts?", "\n", "", "if", "hasattr", "(", "self", ".", "_env", ",", "'create_rollout'", ")", ":", "\n", "            ", "print", "(", "'\\nenv has create_rollout method'", ")", "\n", "self", ".", "_create_rollout", "=", "self", ".", "_env", ".", "create_rollout", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\nenv does not have create_rollout method, defaulting to identity'", ")", "\n", "\n", "def", "create_rollout", "(", "rollout", ",", "labeller", ")", ":", "\n", "                ", "return", "rollout", "\n", "", "self", ".", "_create_rollout", "=", "create_rollout", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.pkls_to_tfrecords.PklsToTfrecords._convert_rollout": [[45, 70], ["os.path.join", "tensorflow.python_io.TFRecordWriter", "tensorflow.python_io.TFRecordWriter.close", "gcg.data.mypickle.load", "pkls_to_tfrecords.PklsToTfrecords._create_rollout", "tensorflow.train.SequenceExample", "zip", "tensorflow.python_io.TFRecordWriter.write", "tensorflow.train.SequenceExample.SerializeToString", "pkls_to_tfrecords.PklsToTfrecords.keys", "fl.feature.add().bytes_list.value.append", "feature.astype().tostring", "feature.astype", "fl.feature.add"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.write", "home.repos.pwc.inspect_result.gkahn13_GtS.data.variants.VariantGenerator.add"], ["", "", "def", "_convert_rollout", "(", "self", ",", "i", ",", "pkl_fname", ",", "pkl_suffix", ")", ":", "\n", "        ", "rollouts", "=", "mypickle", ".", "load", "(", "pkl_fname", ")", "[", "'rollouts'", "]", "\n", "\n", "tfrecord_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_output_folder", ",", "'{0:05d}_{1}.tfrecord'", ".", "format", "(", "i", ",", "pkl_suffix", ")", ")", "\n", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfrecord_fname", ")", "\n", "\n", "for", "r", "in", "rollouts", ":", "\n", "\n", "### modify the rollout (in case the env is different)!", "\n", "            ", "r", "=", "self", ".", "_create_rollout", "(", "r", ",", "self", ".", "_labeller", ")", "\n", "\n", "for", "k", "in", "(", "'observations_im'", ",", "'observations_vec'", ",", "'actions'", ",", "'dones'", ",", "'steps'", ",", "'goals'", ")", ":", "\n", "                ", "assert", "k", "in", "r", ".", "keys", "(", ")", ",", "'{0} not in rollout!'", ".", "format", "(", "k", ")", "\n", "\n", "", "ex", "=", "tf", ".", "train", ".", "SequenceExample", "(", ")", "\n", "for", "k", ",", "np_dtype", "in", "zip", "(", "GCGPolicyTfrecord", ".", "tfrecord_feature_names", ",", "\n", "GCGPolicyTfrecord", ".", "tfrecord_feature_np_types", ")", ":", "\n", "                ", "fl", "=", "ex", ".", "feature_lists", ".", "feature_list", "[", "k", "]", "\n", "for", "feature", "in", "r", "[", "k", "]", ":", "\n", "                    ", "fl", ".", "feature", ".", "add", "(", ")", ".", "bytes_list", ".", "value", ".", "append", "(", "feature", ".", "astype", "(", "np_dtype", ")", ".", "tostring", "(", ")", ")", "\n", "\n", "", "", "writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.tf.pkls_to_tfrecords.PklsToTfrecords.run": [[71, 105], ["sorted", "sorted", "os.path.join", "os.path.exists", "os.path.join", "os.makedirs", "os.path.join", "os.path.join", "len", "os.path.splitext", "multiprocessing.Pool", "multiprocessing.Pool.starmap", "enumerate", "os.listdir", "os.listdir", "os.listdir", "pkls_to_tfrecords.PklsToTfrecords._convert_rollout", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.tf.pkls_to_tfrecords.PklsToTfrecords._convert_rollout"], ["", "def", "run", "(", "self", ")", ":", "\n", "### get pkl fnames", "\n", "        ", "train_pkl_fnames", "=", "[", "]", "\n", "eval_pkl_fnames", "=", "[", "]", "\n", "for", "folder", "in", "self", ".", "_pkl_folders", ":", "\n", "            ", "folder", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "folder", ")", "\n", "train_pkl_fnames", "+=", "[", "os", ".", "path", ".", "join", "(", "folder", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "FileManager", ".", "train_rollouts_fname_suffix", "in", "f", "]", "\n", "eval_pkl_fnames", "+=", "[", "os", ".", "path", ".", "join", "(", "folder", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", "\n", "if", "FileManager", ".", "eval_rollouts_fname_suffix", "in", "f", "]", "\n", "\n", "", "train_pkl_fnames", "=", "sorted", "(", "train_pkl_fnames", ")", "\n", "eval_pkl_fnames", "=", "sorted", "(", "eval_pkl_fnames", ")", "\n", "\n", "### create output folder", "\n", "output_folder", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "self", ".", "_output_folder", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "            ", "assert", "len", "(", "os", ".", "listdir", "(", "output_folder", ")", ")", "==", "0", ",", "'{0} output_folder is not empty'", ".", "format", "(", "output_folder", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "### convert pkls to tfrecords", "\n", "", "for", "pkl_fnames", ",", "pkl_suffix", "in", "[", "(", "train_pkl_fnames", ",", "FileManager", ".", "train_rollouts_fname_suffix", ")", ",", "\n", "(", "eval_pkl_fnames", ",", "FileManager", ".", "eval_rollouts_fname_suffix", ")", "]", ":", "\n", "            ", "pkl_suffix", "=", "os", ".", "path", ".", "splitext", "(", "pkl_suffix", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "_num_processes", ">", "1", ":", "\n", "                ", "p", "=", "multiprocessing", ".", "Pool", "(", "self", ".", "_num_processes", ")", "\n", "p", ".", "starmap", "(", "self", ".", "_convert_rollout", ",", "\n", "[", "(", "i", ",", "pkl_fname", ",", "pkl_suffix", ")", "for", "i", ",", "pkl_fname", "in", "enumerate", "(", "pkl_fnames", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "i", ",", "pkl_fname", "in", "enumerate", "(", "pkl_fnames", ")", ":", "\n", "# print(pkl_fnames)", "\n", "                    ", "self", ".", "_convert_rollout", "(", "i", ",", "pkl_fname", ",", "pkl_suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell.__call__": [[156, 187], ["getattr", "tensorflow.python.ops.variable_scope.variable_scope", "super().__call__", "tensorflow.python.ops.variable_scope.variable_scope", "setattr", "super().__call__", "tensorflow.python.ops.variable_scope.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected.__call__", "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected.__call__"], ["def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run this RNN cell on inputs, starting from the given state.\n\n    Args:\n      inputs: `2-D` tensor with shape `[batch_size, input_size]`.\n      state: if `self.state_size` is an integer, this should be a `2-D Tensor`\n        with shape `[batch_size, self.state_size]`.  Otherwise, if\n        `self.state_size` is a tuple of integers, this should be a tuple\n        with shapes `[batch_size, s] for s in self.state_size`.\n      scope: VariableScope for the created subgraph; defaults to class name.\n\n    Returns:\n      A pair containing:\n\n      - Output: A `2-D` tensor with shape `[batch_size, self.output_size]`.\n      - New state: Either a single `2-D` tensor, or a tuple of tensors matching\n        the arity and shapes of `state`.\n    \"\"\"", "\n", "if", "scope", "is", "not", "None", ":", "\n", "      ", "with", "vs", ".", "variable_scope", "(", "scope", ",", "\n", "custom_getter", "=", "self", ".", "_rnn_get_variable", ")", "as", "scope", ":", "\n", "        ", "return", "super", "(", "RNNCell", ",", "self", ")", ".", "__call__", "(", "inputs", ",", "state", ",", "scope", "=", "scope", ")", "\n", "", "", "else", ":", "\n", "      ", "scope_attrname", "=", "\"rnncell_scope\"", "\n", "scope", "=", "getattr", "(", "self", ",", "scope_attrname", ",", "None", ")", "\n", "if", "scope", "is", "None", ":", "\n", "        ", "scope", "=", "vs", ".", "variable_scope", "(", "vs", ".", "get_variable_scope", "(", ")", ",", "\n", "custom_getter", "=", "self", ".", "_rnn_get_variable", ")", "\n", "setattr", "(", "self", ",", "scope_attrname", ",", "scope", ")", "\n", "", "with", "scope", ":", "\n", "        ", "return", "super", "(", "RNNCell", ",", "self", ")", ".", "__call__", "(", "inputs", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell._rnn_get_variable": [[188, 198], ["getter", "rnn_dropout.RNNCell._trainable_weights.append", "tensorflow.python.ops.variables.trainable_variables", "isinstance", "rnn_dropout.RNNCell._non_trainable_weights.append", "tensorflow.python.ops.variables.trainable_variables", "list"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "", "", "def", "_rnn_get_variable", "(", "self", ",", "getter", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "variable", "=", "getter", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "trainable", "=", "(", "variable", "in", "tf_variables", ".", "trainable_variables", "(", ")", "or", "\n", "(", "isinstance", "(", "variable", ",", "tf_variables", ".", "PartitionedVariable", ")", "and", "\n", "list", "(", "variable", ")", "[", "0", "]", "in", "tf_variables", ".", "trainable_variables", "(", ")", ")", ")", "\n", "if", "trainable", "and", "variable", "not", "in", "self", ".", "_trainable_weights", ":", "\n", "      ", "self", ".", "_trainable_weights", ".", "append", "(", "variable", ")", "\n", "", "elif", "not", "trainable", "and", "variable", "not", "in", "self", ".", "_non_trainable_weights", ":", "\n", "      ", "self", ".", "_non_trainable_weights", ".", "append", "(", "variable", ")", "\n", "", "return", "variable", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell.state_size": [[199, 207], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"size(s) of state(s) used by this cell.\n\n    It can be represented by an Integer, a TensorShape or a tuple of Integers\n    or TensorShapes.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Abstract method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell.output_size": [[208, 212], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "\"\"\"Integer or TensorShape: size of outputs produced by this cell.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Abstract method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell.build": [[213, 217], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "_", ")", ":", "\n", "# This tells the parent Layer object that it's OK to call", "\n", "# self.add_variable() inside the call() method.", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.RNNCell.zero_state": [[218, 239], ["tensorflow.python.framework.ops.name_scope", "rnn_dropout._zero_state_tensors", "type"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._zero_state_tensors"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Return zero-filled state tensor(s).\n\n    Args:\n      batch_size: int, float, or unit Tensor representing the batch size.\n      dtype: the data type to use for the state.\n\n    Returns:\n      If `state_size` is an int or TensorShape, then the return value is a\n      `N-D` tensor of shape `[batch_size, state_size]` filled with zeros.\n\n      If `state_size` is a nested list or tuple, then the return value is\n      a nested list or tuple (of the same structure) of `2-D` tensors with\n      the shapes `[batch_size, s]` for each s in `state_size`.\n    \"\"\"", "\n", "# Try to use the last cached zero_state. This is done to avoid recreating", "\n", "# zeros, especially when eager execution is enabled.", "\n", "state_size", "=", "self", ".", "state_size", "\n", "with", "ops", ".", "name_scope", "(", "type", "(", "self", ")", ".", "__name__", "+", "\"ZeroState\"", ",", "values", "=", "[", "batch_size", "]", ")", ":", "\n", "      ", "output", "=", "_zero_state_tensors", "(", "state_size", ",", "batch_size", ",", "dtype", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.__init__": [[269, 403], ["rnn_dropout._like_rnncell", "TypeError", "TypeError", "tensorflow.python.framework.ops.name_scope", "rnn_dropout._enumerated_map_structure_up_to", "rnn_dropout._enumerated_map_structure_up_to", "callable", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.tensor_util.constant_value", "rnn_dropout.DropoutWrapper.__init__.tensor_and_const_value"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._like_rnncell", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._enumerated_map_structure_up_to", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._enumerated_map_structure_up_to"], ["def", "__init__", "(", "self", ",", "cell", ",", "input_keep_prob", "=", "1.0", ",", "output_keep_prob", "=", "1.0", ",", "\n", "state_keep_prob", "=", "1.0", ",", "variational_recurrent", "=", "False", ",", "\n", "input_size", "=", "None", ",", "dtype", "=", "None", ",", "seed", "=", "None", ",", "\n", "dropout_state_filter_visitor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a cell with added input, state, and/or output dropout.\n\n    If `variational_recurrent` is set to `True` (**NOT** the default behavior),\n    then the same dropout mask is applied at every step, as described in:\n\n    Y. Gal, Z Ghahramani.  \"A Theoretically Grounded Application of Dropout in\n    Recurrent Neural Networks\".  https://arxiv.org/abs/1512.05287\n\n    Otherwise a different dropout mask is applied at every time step.\n\n    Note, by default (unless a custom `dropout_state_filter` is provided),\n    the memory state (`c` component of any `LSTMStateTuple`) passing through\n    a `DropoutWrapper` is never modified.  This behavior is described in the\n    above article.\n\n    Args:\n      cell: an RNNCell, a projection to output_size is added to it.\n      input_keep_prob: unit Tensor or float between 0 and 1, input keep\n        probability; if it is constant and 1, no input dropout will be added.\n      output_keep_prob: unit Tensor or float between 0 and 1, output keep\n        probability; if it is constant and 1, no output dropout will be added.\n      state_keep_prob: unit Tensor or float between 0 and 1, output keep\n        probability; if it is constant and 1, no output dropout will be added.\n        State dropout is performed on the outgoing states of the cell.\n        **Note** the state components to which dropout is applied when\n        `state_keep_prob` is in `(0, 1)` are also determined by\n        the argument `dropout_state_filter_visitor` (e.g. by default dropout\n        is never applied to the `c` component of an `LSTMStateTuple`).\n      variational_recurrent: Python bool.  If `True`, then the same\n        dropout pattern is applied across all time steps per run call.\n        If this parameter is set, `input_size` **must** be provided.\n      input_size: (optional) (possibly nested tuple of) `TensorShape` objects\n        containing the depth(s) of the input tensors expected to be passed in to\n        the `DropoutWrapper`.  Required and used **iff**\n         `variational_recurrent = True` and `input_keep_prob < 1`.\n      dtype: (optional) The `dtype` of the input, state, and output tensors.\n        Required and used **iff** `variational_recurrent = True`.\n      seed: (optional) integer, the randomness seed.\n      dropout_state_filter_visitor: (optional), default: (see below).  Function\n        that takes any hierarchical level of the state and returns\n        a scalar or depth=1 structure of Python booleans describing\n        which terms in the state should be dropped out.  In addition, if the\n        function returns `True`, dropout is applied across this sublevel.  If\n        the function returns `False`, dropout is not applied across this entire\n        sublevel.\n        Default behavior: perform dropout on all terms except the memory (`c`)\n        state of `LSTMCellState` objects, and don't try to apply dropout to\n        `TensorArray` objects:\n        ```\n        def dropout_state_filter_visitor(s):\n          if isinstance(s, LSTMCellState):\n            # Never perform dropout on the c state.\n            return LSTMCellState(c=False, h=True)\n          elif isinstance(s, TensorArray):\n            return False\n          return True\n        ```\n\n    Raises:\n      TypeError: if `cell` is not an `RNNCell`, or `keep_state_fn` is provided\n        but not `callable`.\n      ValueError: if any of the keep_probs are not between 0 and 1.\n    \"\"\"", "\n", "if", "not", "_like_rnncell", "(", "cell", ")", ":", "\n", "      ", "raise", "TypeError", "(", "\"The parameter cell is not a RNNCell.\"", ")", "\n", "", "if", "(", "dropout_state_filter_visitor", "is", "not", "None", "\n", "and", "not", "callable", "(", "dropout_state_filter_visitor", ")", ")", ":", "\n", "      ", "raise", "TypeError", "(", "\"dropout_state_filter_visitor must be callable\"", ")", "\n", "", "self", ".", "_dropout_state_filter", "=", "(", "\n", "dropout_state_filter_visitor", "or", "_default_dropout_state_filter_visitor", ")", "\n", "with", "ops", ".", "name_scope", "(", "\"DropoutWrapperInit\"", ")", ":", "\n", "      ", "def", "tensor_and_const_value", "(", "v", ")", ":", "\n", "        ", "tensor_value", "=", "ops", ".", "convert_to_tensor", "(", "v", ")", "\n", "const_value", "=", "tensor_util", ".", "constant_value", "(", "tensor_value", ")", "\n", "return", "(", "tensor_value", ",", "const_value", ")", "\n", "", "for", "prob", ",", "attr", "in", "[", "(", "input_keep_prob", ",", "\"input_keep_prob\"", ")", ",", "\n", "(", "state_keep_prob", ",", "\"state_keep_prob\"", ")", ",", "\n", "(", "output_keep_prob", ",", "\"output_keep_prob\"", ")", "]", ":", "\n", "        ", "tensor_prob", ",", "const_prob", "=", "tensor_and_const_value", "(", "prob", ")", "\n", "if", "const_prob", "is", "not", "None", ":", "\n", "          ", "if", "const_prob", "<", "0", "or", "const_prob", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter %s must be between 0 and 1: %d\"", "\n", "%", "(", "attr", ",", "const_prob", ")", ")", "\n", "", "setattr", "(", "self", ",", "\"_%s\"", "%", "attr", ",", "float", "(", "const_prob", ")", ")", "\n", "", "else", ":", "\n", "          ", "setattr", "(", "self", ",", "\"_%s\"", "%", "attr", ",", "tensor_prob", ")", "\n", "\n", "# Set cell, variational_recurrent, seed before running the code below", "\n", "", "", "", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_variational_recurrent", "=", "variational_recurrent", "\n", "self", ".", "_seed", "=", "seed", "\n", "\n", "self", ".", "_recurrent_input_noise", "=", "None", "\n", "self", ".", "_recurrent_state_noise", "=", "None", "\n", "self", ".", "_recurrent_output_noise", "=", "None", "\n", "\n", "if", "variational_recurrent", ":", "\n", "      ", "if", "dtype", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"When variational_recurrent=True, dtype must be provided\"", ")", "\n", "\n", "", "def", "convert_to_batch_shape", "(", "s", ")", ":", "\n", "# Prepend a 1 for the batch dimension; for recurrent", "\n", "# variational dropout we use the same dropout mask for all", "\n", "# batch elements.", "\n", "        ", "return", "array_ops", ".", "concat", "(", "\n", "(", "[", "1", "]", ",", "tensor_shape", ".", "TensorShape", "(", "s", ")", ".", "as_list", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "def", "batch_noise", "(", "s", ",", "inner_seed", ")", ":", "\n", "        ", "shape", "=", "convert_to_batch_shape", "(", "s", ")", "\n", "return", "random_ops", ".", "random_uniform", "(", "shape", ",", "seed", "=", "inner_seed", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "self", ".", "_input_keep_prob", ",", "numbers", ".", "Real", ")", "or", "\n", "self", ".", "_input_keep_prob", "<", "1.0", ")", ":", "\n", "        ", "if", "input_size", "is", "None", ":", "\n", "          ", "raise", "ValueError", "(", "\n", "\"When variational_recurrent=True and input_keep_prob < 1.0 or \"", "\n", "\"is unknown, input_size must be provided\"", ")", "\n", "", "self", ".", "_recurrent_input_noise", "=", "_enumerated_map_structure_up_to", "(", "\n", "input_size", ",", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"input\"", ",", "i", ")", ")", ",", "\n", "input_size", ")", "\n", "", "self", ".", "_recurrent_state_noise", "=", "_enumerated_map_structure_up_to", "(", "\n", "cell", ".", "state_size", ",", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"state\"", ",", "i", ")", ")", ",", "\n", "cell", ".", "state_size", ")", "\n", "self", ".", "_recurrent_output_noise", "=", "_enumerated_map_structure_up_to", "(", "\n", "cell", ".", "output_size", ",", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"output\"", ",", "i", ")", ")", ",", "\n", "cell", ".", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper._gen_seed": [[404, 410], ["int", "str", "hashlib.md5().hexdigest", "hashlib.md5"], "methods", ["None"], ["", "", "def", "_gen_seed", "(", "self", ",", "salt_prefix", ",", "index", ")", ":", "\n", "    ", "if", "self", ".", "_seed", "is", "None", ":", "\n", "      ", "return", "None", "\n", "", "salt", "=", "\"%s_%d\"", "%", "(", "salt_prefix", ",", "index", ")", "\n", "string", "=", "(", "str", "(", "self", ".", "_seed", ")", "+", "salt", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", "return", "int", "(", "hashlib", ".", "md5", "(", "string", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", ",", "16", ")", "&", "0x7FFFFFFF", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.wrapped_cell": [[411, 414], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "wrapped_cell", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.state_size": [[415, 418], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.output_size": [[419, 422], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.zero_state": [[423, 426], ["tensorflow.python.framework.ops.name_scope", "rnn_dropout.DropoutWrapper._cell.zero_state", "type"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.zero_state"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "type", "(", "self", ")", ".", "__name__", "+", "\"ZeroState\"", ",", "values", "=", "[", "batch_size", "]", ")", ":", "\n", "      ", "return", "self", ".", "_cell", ".", "zero_state", "(", "batch_size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper._variational_recurrent_dropout_value": [[427, 438], ["tensorflow.python.ops.math_ops.floor", "ret.set_shape", "tensorflow.python.ops.math_ops.div", "value.get_shape"], "methods", ["None"], ["", "", "def", "_variational_recurrent_dropout_value", "(", "\n", "self", ",", "index", ",", "value", ",", "noise", ",", "keep_prob", ")", ":", "\n", "    ", "\"\"\"Performs dropout given the pre-calculated noise tensor.\"\"\"", "\n", "# uniform [keep_prob, 1.0 + keep_prob)", "\n", "random_tensor", "=", "keep_prob", "+", "noise", "\n", "\n", "# 0. if [keep_prob, 1.0) and 1. if [1.0, 1.0 + keep_prob)", "\n", "binary_tensor", "=", "math_ops", ".", "floor", "(", "random_tensor", ")", "\n", "ret", "=", "math_ops", ".", "div", "(", "value", ",", "keep_prob", ")", "*", "binary_tensor", "\n", "ret", ".", "set_shape", "(", "value", ".", "get_shape", "(", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper._dropout": [[439, 467], ["rnn_dropout._enumerated_map_structure_up_to", "rnn_dropout._enumerated_map_structure_up_to", "tensorflow.python.ops.nn_ops.dropout", "rnn_dropout.DropoutWrapper._variational_recurrent_dropout_value", "isinstance", "isinstance", "rnn_dropout.DropoutWrapper._gen_seed"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._enumerated_map_structure_up_to", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._enumerated_map_structure_up_to", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper._variational_recurrent_dropout_value", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper._gen_seed"], ["", "def", "_dropout", "(", "self", ",", "values", ",", "salt_prefix", ",", "recurrent_noise", ",", "keep_prob", ",", "\n", "shallow_filtered_substructure", "=", "None", ")", ":", "\n", "    ", "\"\"\"Decides whether to perform standard dropout or recurrent dropout.\"\"\"", "\n", "\n", "if", "shallow_filtered_substructure", "is", "None", ":", "\n", "# Put something so we traverse the entire structure; inside the", "\n", "# dropout function we check to see if leafs of this are bool or not.", "\n", "      ", "shallow_filtered_substructure", "=", "values", "\n", "\n", "", "if", "not", "self", ".", "_variational_recurrent", ":", "\n", "      ", "def", "dropout", "(", "i", ",", "do_dropout", ",", "v", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "do_dropout", ",", "bool", ")", "or", "do_dropout", ":", "\n", "          ", "return", "nn_ops", ".", "dropout", "(", "\n", "v", ",", "keep_prob", "=", "keep_prob", ",", "seed", "=", "self", ".", "_gen_seed", "(", "salt_prefix", ",", "i", ")", ")", "\n", "", "else", ":", "\n", "          ", "return", "v", "\n", "", "", "return", "_enumerated_map_structure_up_to", "(", "\n", "shallow_filtered_substructure", ",", "dropout", ",", "\n", "*", "[", "shallow_filtered_substructure", ",", "values", "]", ")", "\n", "", "else", ":", "\n", "      ", "def", "dropout", "(", "i", ",", "do_dropout", ",", "v", ",", "n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "do_dropout", ",", "bool", ")", "or", "do_dropout", ":", "\n", "          ", "return", "self", ".", "_variational_recurrent_dropout_value", "(", "i", ",", "v", ",", "n", ",", "keep_prob", ")", "\n", "", "else", ":", "\n", "          ", "return", "v", "\n", "", "", "return", "_enumerated_map_structure_up_to", "(", "\n", "shallow_filtered_substructure", ",", "dropout", ",", "\n", "*", "[", "shallow_filtered_substructure", ",", "values", ",", "recurrent_noise", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout.DropoutWrapper.__call__": [[468, 493], ["rnn_dropout.DropoutWrapper.__call__._should_dropout"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the cell with the declared dropouts.\"\"\"", "\n", "def", "_should_dropout", "(", "p", ")", ":", "\n", "      ", "return", "(", "not", "isinstance", "(", "p", ",", "float", ")", ")", "or", "p", "<", "1", "\n", "\n", "", "if", "_should_dropout", "(", "self", ".", "_input_keep_prob", ")", ":", "\n", "      ", "inputs", "=", "self", ".", "_dropout", "(", "inputs", ",", "\"input\"", ",", "\n", "self", ".", "_recurrent_input_noise", ",", "\n", "self", ".", "_input_keep_prob", ")", "\n", "", "output", ",", "new_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ",", "scope", "=", "scope", ")", "\n", "if", "_should_dropout", "(", "self", ".", "_state_keep_prob", ")", ":", "\n", "# Identify which subsets of the state to perform dropout on and", "\n", "# which ones to keep.", "\n", "#shallow_filtered_substructure = nest.get_traverse_shallow_structure(", "\n", "#    self._dropout_state_filter, new_state)", "\n", "      ", "shallow_filtered_substructure", "=", "self", ".", "_dropout_state_filter", "(", "new_state", ")", "# TODO: GK hack", "\n", "new_state", "=", "self", ".", "_dropout", "(", "new_state", ",", "\"state\"", ",", "\n", "self", ".", "_recurrent_state_noise", ",", "\n", "self", ".", "_state_keep_prob", ",", "\n", "shallow_filtered_substructure", ")", "\n", "", "if", "_should_dropout", "(", "self", ".", "_output_keep_prob", ")", ":", "\n", "      ", "output", "=", "self", ".", "_dropout", "(", "output", ",", "\"output\"", ",", "\n", "self", ".", "_recurrent_output_noise", ",", "\n", "self", ".", "_output_keep_prob", ")", "\n", "", "return", "output", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._like_rnncell": [[55, 60], ["all", "hasattr", "hasattr", "hasattr", "callable"], "function", ["None"], ["def", "_like_rnncell", "(", "cell", ")", ":", "\n", "  ", "\"\"\"Checks that a given object is an RNNCell by using duck typing.\"\"\"", "\n", "conditions", "=", "[", "hasattr", "(", "cell", ",", "\"output_size\"", ")", ",", "hasattr", "(", "cell", ",", "\"state_size\"", ")", ",", "\n", "hasattr", "(", "cell", ",", "\"zero_state\"", ")", ",", "callable", "(", "cell", ")", "]", "\n", "return", "all", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._concat": [[62, 120], ["isinstance", "isinstance", "tensorflow.python.framework.tensor_util.constant_value", "tensorflow.python.framework.tensor_shape.as_shape", "tensorflow.python.framework.tensor_util.constant_value", "tensorflow.python.framework.tensor_shape.as_shape", "tensorflow.python.framework.tensor_shape.as_shape().concatenate", "tensorflow.python.ops.array_ops.concat", "tensorflow.python.ops.array_ops.expand_dims", "array_ops.expand_dims.as_list", "array_ops.expand_dims.is_fully_defined", "tensorflow.python.framework.constant_op.constant", "tensorflow.python.ops.array_ops.expand_dims", "array_ops.expand_dims.as_list", "array_ops.expand_dims.is_fully_defined", "tensorflow.python.framework.constant_op.constant", "array_ops.concat.as_list", "ValueError", "ValueError", "array_ops.expand_dims.as_list", "ValueError", "array_ops.expand_dims.as_list", "tensorflow.python.framework.tensor_shape.as_shape"], "function", ["None"], ["", "def", "_concat", "(", "prefix", ",", "suffix", ",", "static", "=", "False", ")", ":", "\n", "  ", "\"\"\"Concat that enables int, Tensor, or TensorShape values.\n\n  This function takes a size specification, which can be an integer, a\n  TensorShape, or a Tensor, and converts it into a concatenated Tensor\n  (if static = False) or a list of integers (if static = True).\n\n  Args:\n    prefix: The prefix; usually the batch size (and/or time step size).\n      (TensorShape, int, or Tensor.)\n    suffix: TensorShape, int, or Tensor.\n    static: If `True`, return a python list with possibly unknown dimensions.\n      Otherwise return a `Tensor`.\n\n  Returns:\n    shape: the concatenation of prefix and suffix.\n\n  Raises:\n    ValueError: if `suffix` is not a scalar or vector (or TensorShape).\n    ValueError: if prefix or suffix was `None` and asked for dynamic\n      Tensors out.\n  \"\"\"", "\n", "if", "isinstance", "(", "prefix", ",", "ops", ".", "Tensor", ")", ":", "\n", "    ", "p", "=", "prefix", "\n", "p_static", "=", "tensor_util", ".", "constant_value", "(", "prefix", ")", "\n", "if", "p", ".", "shape", ".", "ndims", "==", "0", ":", "\n", "      ", "p", "=", "array_ops", ".", "expand_dims", "(", "p", ",", "0", ")", "\n", "", "elif", "p", ".", "shape", ".", "ndims", "!=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\"prefix tensor must be either a scalar or vector, \"", "\n", "\"but saw tensor: %s\"", "%", "p", ")", "\n", "", "", "else", ":", "\n", "    ", "p", "=", "tensor_shape", ".", "as_shape", "(", "prefix", ")", "\n", "p_static", "=", "p", ".", "as_list", "(", ")", "if", "p", ".", "ndims", "is", "not", "None", "else", "None", "\n", "p", "=", "(", "constant_op", ".", "constant", "(", "p", ".", "as_list", "(", ")", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "if", "p", ".", "is_fully_defined", "(", ")", "else", "None", ")", "\n", "", "if", "isinstance", "(", "suffix", ",", "ops", ".", "Tensor", ")", ":", "\n", "    ", "s", "=", "suffix", "\n", "s_static", "=", "tensor_util", ".", "constant_value", "(", "suffix", ")", "\n", "if", "s", ".", "shape", ".", "ndims", "==", "0", ":", "\n", "      ", "s", "=", "array_ops", ".", "expand_dims", "(", "s", ",", "0", ")", "\n", "", "elif", "s", ".", "shape", ".", "ndims", "!=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\"suffix tensor must be either a scalar or vector, \"", "\n", "\"but saw tensor: %s\"", "%", "s", ")", "\n", "", "", "else", ":", "\n", "    ", "s", "=", "tensor_shape", ".", "as_shape", "(", "suffix", ")", "\n", "s_static", "=", "s", ".", "as_list", "(", ")", "if", "s", ".", "ndims", "is", "not", "None", "else", "None", "\n", "s", "=", "(", "constant_op", ".", "constant", "(", "s", ".", "as_list", "(", ")", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "if", "s", ".", "is_fully_defined", "(", ")", "else", "None", ")", "\n", "\n", "", "if", "static", ":", "\n", "    ", "shape", "=", "tensor_shape", ".", "as_shape", "(", "p_static", ")", ".", "concatenate", "(", "s_static", ")", "\n", "shape", "=", "shape", ".", "as_list", "(", ")", "if", "shape", ".", "ndims", "is", "not", "None", "else", "None", "\n", "", "else", ":", "\n", "    ", "if", "p", "is", "None", "or", "s", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "\"Provided a prefix or suffix of None: %s and %s\"", "\n", "%", "(", "prefix", ",", "suffix", ")", ")", "\n", "", "shape", "=", "array_ops", ".", "concat", "(", "(", "p", ",", "s", ")", ",", "0", ")", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._zero_state_tensors": [[122, 132], ["tensorflow.python.util.nest.map_structure", "rnn_dropout._concat", "rnn_dropout._concat", "tensorflow.python.ops.array_ops.zeros", "array_ops.zeros.set_shape"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._concat", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._concat"], ["", "def", "_zero_state_tensors", "(", "state_size", ",", "batch_size", ",", "dtype", ")", ":", "\n", "  ", "\"\"\"Create tensors of zeros based on state_size, batch_size, and dtype.\"\"\"", "\n", "def", "get_state_shape", "(", "s", ")", ":", "\n", "    ", "\"\"\"Combine s with batch_size to get a proper tensor shape.\"\"\"", "\n", "c", "=", "_concat", "(", "batch_size", ",", "s", ")", "\n", "c_static", "=", "_concat", "(", "batch_size", ",", "s", ",", "static", "=", "True", ")", "\n", "size", "=", "array_ops", ".", "zeros", "(", "c", ",", "dtype", "=", "dtype", ")", "\n", "size", ".", "set_shape", "(", "c_static", ")", "\n", "return", "size", "\n", "", "return", "nest", ".", "map_structure", "(", "get_state_shape", ",", "state_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._enumerated_map_structure_up_to": [[247, 255], ["tensorflow.python.util.nest.map_structure_up_to", "map_fn"], "function", ["None"], ["def", "_enumerated_map_structure_up_to", "(", "shallow_structure", ",", "map_fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "ix", "=", "[", "0", "]", "\n", "def", "enumerated_fn", "(", "*", "inner_args", ",", "**", "inner_kwargs", ")", ":", "\n", "    ", "r", "=", "map_fn", "(", "ix", "[", "0", "]", ",", "*", "inner_args", ",", "**", "inner_kwargs", ")", "\n", "ix", "[", "0", "]", "+=", "1", "\n", "return", "r", "\n", "", "return", "nest", ".", "map_structure_up_to", "(", "shallow_structure", ",", "\n", "enumerated_fn", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_dropout._default_dropout_state_filter_visitor": [[257, 264], ["isinstance", "tensorflow.python.ops.rnn_cell_impl.LSTMStateTuple", "isinstance"], "function", ["None"], ["", "def", "_default_dropout_state_filter_visitor", "(", "substate", ")", ":", "\n", "  ", "if", "isinstance", "(", "substate", ",", "LSTMStateTuple", ")", ":", "\n", "# Do not perform dropout on the memory state.", "\n", "    ", "return", "LSTMStateTuple", "(", "c", "=", "False", ",", "h", "=", "True", ")", "\n", "", "elif", "isinstance", "(", "substate", ",", "tensor_array_ops", ".", "TensorArray", ")", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpRNNCell.__init__": [[166, 190], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_units", ",", "\n", "dropout_mask", "=", "None", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "num_inputs", "=", "None", ",", "\n", "weights_scope", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_dropout_mask", "=", "dropout_mask", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "weights_scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "            ", "self", ".", "_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"weights\"", ",", "\n", "[", "num_inputs", "+", "num_units", ",", "num_units", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "dtype", "=", "dtype", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpRNNCell.__call__": [[192, 207], ["tensorflow.variable_scope", "tensorflow.concat", "rnn_cell.DpRNNCell._activation", "tensorflow.matmul", "type"], "methods", ["None"], ["", "", "def", "__call__", "(", "\n", "self", ",", "\n", "inputs", ",", "\n", "state", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Most basic RNN: output = new_state = tanh(W * input + U * state + B). With same dropout at every time step.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"BasicRNNCell\"", "\n", "\n", "            ", "ins", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "state", "]", ",", "axis", "=", "1", ")", "\n", "output", "=", "self", ".", "_activation", "(", "tf", ".", "matmul", "(", "ins", ",", "self", ".", "_weights", ")", ")", "\n", "\n", "if", "self", ".", "_dropout_mask", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "*", "self", ".", "_dropout_mask", "\n", "\n", "", "", "return", "output", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpMulintRNNCell.__init__": [[210, 246], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_units", ",", "\n", "dropout_mask", "=", "None", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "num_inputs", "=", "None", ",", "\n", "use_layer_norm", "=", "False", ",", "\n", "weights_scope", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_dropout_mask", "=", "dropout_mask", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_use_layer_norm", "=", "use_layer_norm", "\n", "self", ".", "_trainable", "=", "trainable", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "weights_scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "            ", "self", ".", "_weights_W", "=", "tf", ".", "get_variable", "(", "\n", "\"weights_W\"", ",", "\n", "[", "num_inputs", ",", "num_units", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "dtype", "=", "dtype", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n", "\n", "self", ".", "_weights_U", "=", "tf", ".", "get_variable", "(", "\n", "\"weights_U\"", ",", "\n", "[", "num_units", ",", "num_units", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "dtype", "=", "dtype", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpMulintRNNCell.__call__": [[248, 278], ["tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.matmul", "rnn_cell.DpMulintRNNCell._activation", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "rnn_cell.multiplicative_integration", "type"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.multiplicative_integration"], ["", "", "def", "__call__", "(", "\n", "self", ",", "\n", "inputs", ",", "\n", "state", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Most basic RNN: output = new_state = tanh(W * input + U * state + B).\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"BasicRNNCell\"", "\n", "            ", "Wx", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "_weights_W", ")", "\n", "Uz", "=", "tf", ".", "matmul", "(", "state", ",", "self", ".", "_weights_U", ")", "\n", "if", "self", ".", "_use_layer_norm", ":", "\n", "                ", "Wx", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "Wx", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ")", "\n", "Uz", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "Uz", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ")", "\n", "", "output", "=", "self", ".", "_activation", "(", "\n", "multiplicative_integration", "(", "\n", "[", "Wx", ",", "Uz", "]", ",", "\n", "self", ".", "_num_units", ",", "\n", "dtype", "=", "self", ".", "_dtype", ",", "\n", "weights_already_calculated", "=", "True", ",", "\n", "trainable", "=", "self", ".", "_trainable", ")", ")", "\n", "\n", "if", "self", ".", "_dropout_mask", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "*", "self", ".", "_dropout_mask", "\n", "\n", "", "", "return", "output", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpLSTMCell.__init__": [[281, 308], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_units", ",", "\n", "forget_bias", "=", "1.0", ",", "\n", "dropout_mask", "=", "None", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "num_inputs", "=", "None", ",", "\n", "weights_scope", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_forget_bias", "=", "forget_bias", "\n", "self", ".", "_dropout_mask", "=", "dropout_mask", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_state_is_tuple", "=", "True", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "weights_scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "            ", "self", ".", "_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"weights\"", ",", "\n", "[", "num_inputs", "+", "num_units", ",", "4", "*", "num_units", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "dtype", "=", "dtype", ")", ",", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpLSTMCell.__call__": [[310, 336], ["tensorflow.variable_scope", "tensorflow.concat", "rnn_cell.DpLSTMCell._activation", "tensorflow.split", "tensorflow.nn.rnn_cell.LSTMStateTuple", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "rnn_cell.DpLSTMCell._activation", "rnn_cell.DpLSTMCell._activation", "tensorflow.nn.sigmoid", "type"], "methods", ["None"], ["", "", "def", "__call__", "(", "\n", "self", ",", "\n", "inputs", ",", "\n", "state", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Most basic LSTM with same dropout at every time step.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"BasicRNNCell\"", "\n", "\n", "            ", "c", ",", "h", "=", "state", "\n", "ins", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "h", "]", ",", "axis", "=", "1", ")", "\n", "output", "=", "self", ".", "_activation", "(", "tf", ".", "matmul", "(", "ins", ",", "self", ".", "_weights", ")", ")", "\n", "\n", "i", ",", "j", ",", "f", ",", "o", "=", "tf", ".", "split", "(", "output", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "forget", "=", "c", "*", "tf", ".", "nn", ".", "sigmoid", "(", "f", "+", "self", ".", "_forget_bias", ")", "\n", "new", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "*", "self", ".", "_activation", "(", "j", ")", "\n", "new_c", "=", "forget", "+", "new", "\n", "\n", "# TODO make sure this is correct", "\n", "if", "self", ".", "_dropout_mask", "is", "not", "None", ":", "\n", "                ", "new_c", "=", "new_c", "*", "self", ".", "_dropout_mask", "\n", "\n", "", "new_h", "=", "self", ".", "_activation", "(", "new_c", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "new_state", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "new_c", ",", "new_h", ")", "\n", "\n", "", "return", "new_h", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpMulintLSTMCell.__init__": [[339, 382], ["tensorflow.variable_scope", "tensorflow.variable_scope", "layer_class", "tensorflow.variable_scope", "layer_class", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_units", ",", "\n", "forget_bias", "=", "1.0", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "num_inputs", "=", "None", ",", "\n", "use_layer_norm", "=", "False", ",", "\n", "weights_scope", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "layer_class", "=", "FullyConnected", ",", "\n", "layer_args", "=", "{", "}", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "(", "num_inputs", "is", "not", "None", ")", "\n", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_forget_bias", "=", "forget_bias", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_use_layer_norm", "=", "use_layer_norm", "\n", "self", ".", "_state_is_tuple", "=", "True", "\n", "self", ".", "_trainable", "=", "trainable", "\n", "self", ".", "_concrete_dropout_layer", "=", "None", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "weights_scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'W'", ")", ":", "\n", "                ", "self", ".", "_W_layer_call_func", "=", "layer_class", "(", "\n", "num_inputs", "=", "num_inputs", ",", "\n", "num_outputs", "=", "4", "*", "num_units", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "trainable", "=", "trainable", ",", "\n", "**", "layer_args", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'U'", ")", ":", "\n", "                ", "self", ".", "_U_layer_call_func", "=", "layer_class", "(", "\n", "num_inputs", "=", "num_units", ",", "\n", "num_outputs", "=", "4", "*", "num_units", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "trainable", "=", "trainable", ",", "\n", "**", "layer_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.DpMulintLSTMCell.__call__": [[384, 433], ["tensorflow.variable_scope", "rnn_cell.DpMulintLSTMCell._W_layer_call_func", "rnn_cell.DpMulintLSTMCell._U_layer_call_func", "rnn_cell.DpMulintLSTMCell._activation", "tensorflow.split", "tensorflow.nn.rnn_cell.LSTMStateTuple", "tensorflow.contrib.layers.layer_norm", "tensorflow.contrib.layers.layer_norm", "rnn_cell.multiplicative_integration", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "rnn_cell.DpMulintLSTMCell._activation", "rnn_cell.DpMulintLSTMCell._concrete_dropout_layer.apply_soft_dropout_mask", "tensorflow.contrib.layers.layer_norm", "rnn_cell.DpMulintLSTMCell._activation", "tensorflow.nn.sigmoid", "rnn_cell.DpMulintLSTMCell._activation", "tensorflow.nn.sigmoid", "type"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.multiplicative_integration", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm"], ["", "", "", "def", "__call__", "(", "\n", "self", ",", "\n", "inputs", ",", "\n", "state", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Most basic RNN: output = new_state = tanh(W * input + U * state + B).\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "type", "(", "self", ")", ".", "__name__", ")", ":", "# \"BasicRNNCell\"", "\n", "\n", "            ", "c", ",", "h", "=", "state", "\n", "\n", "Wx", "=", "self", ".", "_W_layer_call_func", "(", "inputs", ")", "\n", "Uz", "=", "self", ".", "_U_layer_call_func", "(", "h", ")", "\n", "\n", "if", "self", ".", "_use_layer_norm", ":", "\n", "                ", "Wx", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "Wx", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ")", "\n", "Uz", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "Uz", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ")", "\n", "", "output", "=", "self", ".", "_activation", "(", "\n", "multiplicative_integration", "(", "\n", "[", "Wx", ",", "Uz", "]", ",", "\n", "4", "*", "self", ".", "_num_units", ",", "\n", "dtype", "=", "self", ".", "_dtype", ",", "\n", "weights_already_calculated", "=", "True", ",", "\n", "trainable", "=", "self", ".", "_trainable", ")", ")", "\n", "\n", "i", ",", "j", ",", "f", ",", "o", "=", "tf", ".", "split", "(", "output", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "forget", "=", "c", "*", "tf", ".", "nn", ".", "sigmoid", "(", "f", "+", "self", ".", "_forget_bias", ")", "\n", "new", "=", "tf", ".", "nn", ".", "sigmoid", "(", "i", ")", "*", "self", ".", "_activation", "(", "j", ")", "\n", "new_c", "=", "forget", "+", "new", "\n", "\n", "if", "self", ".", "_concrete_dropout_layer", "is", "not", "None", ":", "\n", "                ", "new_c", "=", "self", ".", "_concrete_dropout_layer", ".", "apply_soft_dropout_mask", "(", "new_c", ")", "\n", "\n", "", "if", "self", ".", "_use_layer_norm", ":", "\n", "                ", "norm_c", "=", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "new_c", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ")", "\n", "new_h", "=", "self", ".", "_activation", "(", "norm_c", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "", "else", ":", "\n", "                ", "new_h", "=", "self", ".", "_activation", "(", "new_c", ")", "*", "tf", ".", "nn", ".", "sigmoid", "(", "o", ")", "\n", "", "new_state", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "new_c", ",", "new_h", ")", "\n", "", "return", "new_h", ",", "new_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.linear": [[10, 37], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "isinstance", "isinstance", "a.get_shape", "len", "tensorflow.concat", "ValueError", "tensorflow.contrib.layers.xavier_initializer"], "function", ["None"], ["def", "linear", "(", "args", ",", "output_size", ",", "dtype", "=", "tf", ".", "float32", ",", "scope", "=", "None", ",", "trainable", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"linear\"", ")", ":", "\n", "        ", "if", "isinstance", "(", "args", ",", "list", ")", "or", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "args", ")", "!=", "1", ":", "\n", "                ", "inputs", "=", "tf", ".", "concat", "(", "args", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "args", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "inputs", "=", "args", "\n", "args", "=", "[", "args", "]", "\n", "", "total_arg_size", "=", "0", "\n", "shapes", "=", "[", "a", ".", "get_shape", "(", ")", "for", "a", "in", "args", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "            ", "if", "shape", ".", "ndims", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"linear is expecting 2D arguments: %s\"", "%", "shapes", ")", "\n", "", "else", ":", "\n", "                ", "total_arg_size", "+=", "shape", "[", "1", "]", ".", "value", "\n", "", "", "dtype", "=", "args", "[", "0", "]", ".", "dtype", "\n", "weights", "=", "tf", ".", "get_variable", "(", "\n", "\"weights\"", ",", "\n", "[", "total_arg_size", ",", "output_size", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "dtype", "=", "dtype", ")", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.multiplicative_integration": [[38, 115], ["tensorflow.variable_scope", "len", "ValueError", "rnn_cell.linear", "rnn_cell.linear", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.split", "tensorflow.get_variable", "len", "tensorflow.get_variable", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.linear", "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.linear"], ["", "def", "multiplicative_integration", "(", "\n", "list_of_inputs", ",", "\n", "output_size", ",", "\n", "initial_bias_value", "=", "0.0", ",", "\n", "weights_already_calculated", "=", "False", ",", "\n", "reg_collection", "=", "None", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "scope", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "    ", "'''\n    expects len(2) for list of inputs and will perform integrative multiplication\n    weights_already_calculated will treat the list of inputs as Wx and Uz and is useful for batch normed inputs\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'double_inputs_multiple_integration'", ")", ":", "\n", "        ", "if", "len", "(", "list_of_inputs", ")", "!=", "2", ":", "raise", "ValueError", "(", "'list of inputs must be 2, you have:'", ",", "len", "(", "list_of_inputs", ")", ")", "\n", "\n", "assert", "(", "weights_already_calculated", ")", "# TODO", "\n", "if", "weights_already_calculated", ":", "# if you already have weights you want to insert from batch norm", "\n", "            ", "Wx", "=", "list_of_inputs", "[", "0", "]", "\n", "Uz", "=", "list_of_inputs", "[", "1", "]", "\n", "\n", "", "else", ":", "\n", "            ", "Wx", "=", "linear", "(", "\n", "list_of_inputs", "[", "0", "]", ",", "\n", "output_size", ",", "\n", "dtype", "=", "dtype", ",", "\n", "reg_collection", "=", "reg_collection", ",", "\n", "scope", "=", "\"Calculate_Wx_mulint\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n", "\n", "Uz", "=", "linear", "(", "\n", "list_of_inputs", "[", "1", "]", ",", "\n", "output_size", ",", "\n", "dtype", "=", "dtype", ",", "\n", "reg_collection", "=", "reg_collection", ",", "\n", "scope", "=", "\"Calculate_Uz_mulint\"", ",", "\n", "trainable", "=", "trainable", "\n", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"multiplicative_integration\"", ")", ":", "\n", "            ", "alpha", "=", "tf", ".", "get_variable", "(", "\n", "'mulint_alpha'", ",", "\n", "[", "output_size", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "\n", "mean", "=", "1.0", ",", "\n", "stddev", "=", "0.1", ",", "\n", "dtype", "=", "dtype", ")", ",", "\n", "trainable", "=", "trainable", ")", "\n", "\n", "beta1", ",", "beta2", "=", "tf", ".", "split", "(", "\n", "tf", ".", "get_variable", "(", "\n", "'mulint_params_betas'", ",", "\n", "[", "output_size", "*", "2", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "\n", "mean", "=", "0.5", ",", "\n", "stddev", "=", "0.1", ",", "\n", "dtype", "=", "dtype", ")", ",", "\n", "trainable", "=", "trainable", ")", ",", "\n", "2", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "original_bias", "=", "tf", ".", "get_variable", "(", "\n", "'mulint_original_bias'", ",", "\n", "[", "output_size", "]", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "\n", "mean", "=", "initial_bias_value", ",", "\n", "stddev", "=", "0.1", ",", "\n", "dtype", "=", "dtype", ")", ",", "\n", "trainable", "=", "trainable", ")", "\n", "\n", "", "final_output", "=", "alpha", "*", "Wx", "*", "Uz", "+", "beta1", "*", "Uz", "+", "beta2", "*", "Wx", "+", "original_bias", "\n", "\n", "", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.rnn.rnn_cell.layer_norm": [[116, 160], ["tensorflow.variable_scope", "tensorflow.shape", "tensorflow.zeros", "tensorflow.ones", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.fused_batch_norm", "tensorflow.transpose", "tensorflow.reshape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.spaces.box.Box.shape"], ["", "def", "layer_norm", "(", "\n", "inputs", ",", "\n", "center", "=", "True", ",", "\n", "scale", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "trainable", "=", "True", ",", "\n", "epsilon", "=", "1e-4", ",", "\n", "scope", "=", "None", ")", ":", "\n", "# TODO", "\n", "# Assumes that inputs is 2D", "\n", "# add to collections in order to do l2 norm", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\n", "scope", ",", "\n", "default_name", "=", "'LayerNorm'", ",", "\n", "reuse", "=", "reuse", ")", ":", "\n", "        ", "shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "param_shape", "=", "(", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ",", ")", "\n", "dtype", "=", "inputs", ".", "dtype", ".", "base_dtype", "\n", "beta", "=", "tf", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", ")", ")", "\n", "gamma", "=", "tf", ".", "ones", "(", "(", "shape", "[", "0", "]", ",", ")", ")", "\n", "#        beta = tf.get_variable(", "\n", "#            'beta',", "\n", "#            shape=param_shape,", "\n", "#            dtype=dtype,", "\n", "#            initializer=tf.zeros_initializer(),", "\n", "#            trainable=trainable and center)", "\n", "#        gamma = tf.get_variable(", "\n", "#            'gamma',", "\n", "#            shape=param_shape,", "\n", "#            dtype=dtype,", "\n", "#            initializer=tf.ones_initializer(),", "\n", "#            trainable=trainable and scale)", "\n", "inputs_T", "=", "tf", ".", "transpose", "(", "inputs", ")", "\n", "inputs_T_reshaped", "=", "tf", ".", "reshape", "(", "inputs_T", ",", "(", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "outputs_T_reshaped", ",", "_", ",", "_", "=", "tf", ".", "nn", ".", "fused_batch_norm", "(", "\n", "inputs_T_reshaped", ",", "\n", "scale", "=", "gamma", ",", "\n", "offset", "=", "beta", ",", "\n", "is_training", "=", "True", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "data_format", "=", "'NCHW'", ")", "\n", "outputs_reshaped", "=", "tf", ".", "transpose", "(", "outputs_T_reshaped", ",", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", "\n", "outputs", "=", "tf", ".", "reshape", "(", "outputs_reshaped", ",", "shape", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.cnn.convolution.Convolution.__init__": [[5, 51], ["convolution.Convolution._create_variable", "convolution.Convolution._create_variable", "data_format.index", "data_format.index", "data_format.index"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected._create_variable", "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected._create_variable"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_in_channels", ",", "\n", "num_out_channels", ",", "\n", "data_format", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation_fn", ",", "\n", "normalizer_fn", ",", "\n", "normalizer_params", ",", "\n", "weights_initializer", ",", "\n", "weights_regularizer", ",", "\n", "biases_initializer", ",", "\n", "biases_regularizer", ",", "\n", "trainable", ")", ":", "\n", "\n", "        ", "self", ".", "_data_format", "=", "data_format", "\n", "filter_height", "=", "kernel_size", "\n", "filter_width", "=", "kernel_size", "\n", "self", ".", "_strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "# init N H W C indexes", "\n", "self", ".", "_strides", "[", "data_format", ".", "index", "(", "'H'", ")", "]", "=", "stride", "\n", "self", ".", "_strides", "[", "data_format", ".", "index", "(", "'W'", ")", "]", "=", "stride", "\n", "self", ".", "_padding", "=", "padding", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "if", "normalizer_fn", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "normalizer_params", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "_trainable", "=", "trainable", "\n", "\n", "# create filter", "\n", "self", ".", "_filter", "=", "self", ".", "_create_variable", "(", "name_or_scope", "=", "'filter'", ",", "\n", "shape", "=", "[", "filter_height", ",", "filter_width", ",", "num_in_channels", ",", "num_out_channels", "]", ",", "\n", "initializer", "=", "weights_initializer", ",", "\n", "regularizer", "=", "weights_regularizer", ")", "\n", "\n", "# create biases", "\n", "if", "biases_initializer", "is", "None", ":", "\n", "            ", "self", ".", "_biases", "=", "None", "\n", "", "else", ":", "\n", "            ", "biases_shape", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "biases_shape", "[", "data_format", ".", "index", "(", "'C'", ")", "-", "1", "]", "=", "num_out_channels", "\n", "self", ".", "_biases", "=", "self", ".", "_create_variable", "(", "name_or_scope", "=", "'biases'", ",", "\n", "shape", "=", "biases_shape", ",", "\n", "initializer", "=", "biases_initializer", ",", "\n", "regularizer", "=", "biases_regularizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.cnn.convolution.Convolution._create_variable": [[53, 56], ["tensorflow.get_variable"], "methods", ["None"], ["", "", "def", "_create_variable", "(", "self", ",", "name_or_scope", ",", "shape", ",", "initializer", ",", "regularizer", ")", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "name", "=", "name_or_scope", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ",", "regularizer", "=", "regularizer", ",", "\n", "trainable", "=", "self", ".", "_trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.cnn.convolution.Convolution.__call__": [[57, 75], ["tensorflow.nn.conv2d", "convolution.Convolution._activation_fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "# [batch, ih, iw, ic]", "\n", "\n", "# convolve", "\n", "        ", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "input", "=", "inputs", ",", "\n", "filter", "=", "self", ".", "_filter", ",", "\n", "strides", "=", "self", ".", "_strides", ",", "\n", "padding", "=", "self", ".", "_padding", ",", "\n", "data_format", "=", "self", ".", "_data_format", ")", "\n", "\n", "# bias", "\n", "if", "self", ".", "_biases", "is", "not", "None", ":", "\n", "            ", "outputs", "+=", "self", ".", "_biases", "\n", "\n", "# apply activation", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "self", ".", "_activation_fn", "(", "outputs", ")", "\n", "\n", "", "return", "outputs", "# [batch, oh, ow, oc]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected.__init__": [[5, 30], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.constant_initializer", "fully_connected.FullyConnected._create_variable", "fully_connected.FullyConnected._create_variable"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected._create_variable", "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected._create_variable"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_inputs", ",", "\n", "num_outputs", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.5", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "\n", "biases_regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_normalizer_fn", "=", "normalizer_fn", "\n", "self", ".", "_normalizer_params", "=", "normalizer_params", "\n", "self", ".", "_trainable", "=", "trainable", "\n", "\n", "# create weight", "\n", "self", ".", "_weights", "=", "self", ".", "_create_variable", "(", "\"weights\"", ",", "[", "num_inputs", ",", "num_outputs", "]", ",", "weights_initializer", ",", "weights_regularizer", ")", "\n", "\n", "# create biases", "\n", "if", "biases_initializer", "is", "None", ":", "\n", "            ", "self", ".", "_biases", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_biases", "=", "self", ".", "_create_variable", "(", "\"biases\"", ",", "[", "num_outputs", "]", ",", "biases_initializer", ",", "biases_regularizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected._create_variable": [[32, 35], ["tensorflow.get_variable"], "methods", ["None"], ["", "", "def", "_create_variable", "(", "self", ",", "name_or_scope", ",", "shape", ",", "initializer", ",", "regularizer", ")", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "name", "=", "name_or_scope", ",", "shape", "=", "shape", ",", "initializer", "=", "initializer", ",", "regularizer", "=", "regularizer", ",", "\n", "trainable", "=", "self", ".", "_trainable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.fullyconnectednn.fully_connected.FullyConnected.__call__": [[36, 49], ["tensorflow.matmul", "fully_connected.FullyConnected._normalizer_fn", "fully_connected.FullyConnected._activation_fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "_weights", ")", "\n", "\n", "if", "self", ".", "_normalizer_fn", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "_normalizer_fn", "(", "output", ",", "**", "self", ".", "_normalizer_params", ")", "\n", "\n", "", "if", "self", ".", "_biases", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "_biases", "\n", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "_activation_fn", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.Schedule.value": [[6, 9], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Value of the schedule at time t\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.ConstantSchedule.__init__": [[11, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Value remains constant over time.\n        Parameters\n        ----------\n        value: float\n            Constant value of the schedule\n        \"\"\"", "\n", "self", ".", "_v", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.ConstantSchedule.value": [[20, 23], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "return", "self", ".", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.PiecewiseSchedule.__init__": [[28, 51], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoints", ",", "interpolation", "=", "linear_interpolation", ",", "outside_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise schedule.\n        endpoints: [(int, int)]\n            list of pairs `(time, value)` meanining that schedule should output\n            `value` when `t==time`. All the values for time must be sorted in\n            an increasing order. When t is between two times, e.g. `(time_a, value_a)`\n            and `(time_b, value_b)`, such that `time_a <= t < time_b` then value outputs\n            `interpolation(value_a, value_b, alpha)` where alpha is a fraction of\n            time passed between `time_a` and `time_b` for time `t`.\n        interpolation: lambda float, float, float: float\n            a function that takes value to the left and to the right of t according\n            to the `endpoints`. Alpha is the fraction of distance from left endpoint to\n            right endpoint that t has covered. See linear_interpolation for example.\n        outside_value: float\n            if the value is requested outside of all the intervals sepecified in\n            `endpoints` this value is returned. If None then AssertionError is\n            raised when outside value is requested.\n        \"\"\"", "\n", "idxes", "=", "[", "e", "[", "0", "]", "for", "e", "in", "endpoints", "]", "\n", "assert", "idxes", "==", "sorted", "(", "idxes", ")", "\n", "self", ".", "_interpolation", "=", "interpolation", "\n", "self", ".", "_outside_value", "=", "outside_value", "\n", "self", ".", "_endpoints", "=", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.PiecewiseSchedule.value": [[52, 62], ["zip", "schedules.PiecewiseSchedule._interpolation", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "for", "(", "l_t", ",", "l", ")", ",", "(", "r_t", ",", "r", ")", "in", "zip", "(", "self", ".", "_endpoints", "[", ":", "-", "1", "]", ",", "self", ".", "_endpoints", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "l_t", "<=", "t", "and", "t", "<", "r_t", ":", "\n", "                ", "alpha", "=", "float", "(", "t", "-", "l_t", ")", "/", "(", "r_t", "-", "l_t", ")", "\n", "return", "self", ".", "_interpolation", "(", "l", ",", "r", ",", "alpha", ")", "\n", "\n", "# t does not belong to any of the pieces, so doom.", "\n", "", "", "assert", "self", ".", "_outside_value", "is", "not", "None", "\n", "return", "self", ".", "_outside_value", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.__init__": [[64, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schedule_timesteps", ",", "final_p", ",", "initial_p", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Linear interpolation between initial_p and final_p over\n        schedule_timesteps. After this many timesteps pass final_p is\n        returned.\n        Parameters\n        ----------\n        schedule_timesteps: int\n            Number of timesteps for which to linearly anneal initial_p\n            to final_p\n        initial_p: float\n            initial output value\n        final_p: float\n            final output value\n        \"\"\"", "\n", "self", ".", "schedule_timesteps", "=", "schedule_timesteps", "\n", "self", ".", "final_p", "=", "final_p", "\n", "self", ".", "initial_p", "=", "initial_p", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.LinearSchedule.value": [[82, 86], ["min", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "fraction", "=", "min", "(", "float", "(", "t", ")", "/", "self", ".", "schedule_timesteps", ",", "1.0", ")", "\n", "return", "self", ".", "initial_p", "+", "fraction", "*", "(", "self", ".", "final_p", "-", "self", ".", "initial_p", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.schedules.linear_interpolation": [[24, 26], ["None"], "function", ["None"], ["", "", "def", "linear_interpolation", "(", "l", ",", "r", ",", "alpha", ")", ":", "\n", "    ", "return", "l", "+", "alpha", "*", "(", "r", "-", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.set_seed": [[8, 12], ["random.seed", "numpy.random.seed", "tensorflow.set_random_seed"], "function", ["None"], ["# An array of the weights, cumulatively summed.", "\n", "cs", "=", "np", ".", "cumsum", "(", "weights", ")", "\n", "# Find the index of the first weight over a random value.", "\n", "idx", "=", "sum", "(", "cs", "<", "np", ".", "random", ".", "rand", "(", ")", ")", "\n", "return", "objects", "[", "min", "(", "idx", ",", "len", "(", "objects", ")", "-", "1", ")", "]", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.imresize": [[13, 32], ["PIL.Image.fromarray", "np.expand_dims.resize", "numpy.array", "len", "len", "numpy.expand_dims", "tuple", "len"], "function", ["None"], ["\n", "", "def", "to_onehot", "(", "ind", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "ret", "[", "ind", "]", "=", "1", "\n", "return", "ret", "\n", "\n", "", "def", "to_onehot_n", "(", "inds", ",", "dim", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds", ")", ",", "dim", ")", ")", "\n", "ret", "[", "np", ".", "arange", "(", "len", "(", "inds", ")", ")", ",", "inds", "]", "=", "1", "\n", "return", "ret", "\n", "\n", "", "def", "from_onehot", "(", "v", ")", ":", "\n", "    ", "return", "np", ".", "nonzero", "(", "v", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "def", "from_onehot_n", "(", "v", ")", ":", "\n", "    ", "if", "len", "(", "v", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "np", ".", "nonzero", "(", "v", ")", "[", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.im2gray": [[33, 37], ["numpy.dot"], "function", ["None"], []], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.multiple_expand_dims": [[38, 42], ["numpy.expand_dims"], "function", ["None"], []], "home.repos.pwc.inspect_result.gkahn13_GtS.misc.utils.import_params": [[43, 48], ["importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], []], "home.repos.pwc.inspect_result.gkahn13_GtS.labellers.labeller.Labeller.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ",", "policy", ")", ":", "\n", "        ", "self", ".", "_env_spec", "=", "env_spec", "\n", "self", ".", "_policy", "=", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.labellers.labeller.Labeller.label": [[9, 15], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "label", "(", "self", ",", "observations", ",", "goals", ")", ":", "\n", "        ", "\"\"\"\n        :return goals\n        \"\"\"", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller.__init__": [[10, 26], ["gcg.labellers.labeller.Labeller.__init__", "os.getcwd", "os.chdir", "darkflow.net.build.TFNet", "os.chdir", "os.path.join", "str", "food_labeller.FoodLabeller._labels.append", "pathlib.Path.home"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env_spec", ",", "policy", ",", "options", "=", "None", ",", "darkflow_path", "=", "None", ",", "im_is_rgb", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FoodLabeller", ",", "self", ")", ".", "__init__", "(", "env_spec", ",", "policy", ")", "\n", "\n", "if", "options", "is", "None", ":", "\n", "            ", "options", "=", "{", "\"model\"", ":", "\"cfg/yolo.cfg\"", ",", "\"load\"", ":", "\"bin/yolov2.weights\"", ",", "\"threshold\"", ":", "1.e-2", ",", "\"gpu\"", ":", "True", "}", "\n", "", "if", "darkflow_path", "is", "None", ":", "\n", "            ", "darkflow_path", "=", "os", ".", "path", ".", "join", "(", "str", "(", "Path", ".", "home", "(", ")", ")", ",", "'darkflow'", ")", "\n", "", "old_cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "darkflow_path", ")", "\n", "self", ".", "_tfnet", "=", "TFNet", "(", "options", ")", "\n", "os", ".", "chdir", "(", "old_cwd", ")", "\n", "self", ".", "_labels", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "_env_spec", ".", "goal_spec", ":", "\n", "            ", "if", "key", "[", "-", "5", ":", "]", "==", "'_diff'", ":", "\n", "                ", "self", ".", "_labels", ".", "append", "(", "key", "[", ":", "-", "5", "]", ")", "\n", "", "", "self", ".", "_im_is_rgb", "=", "im_is_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller.label": [[27, 40], ["zip", "food_labeller.FoodLabeller._tfnet.return_predict", "food_labeller.FoodLabeller._get_boxes", "food_labeller.FoodLabeller._get_goal", "goals.append"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_boxes", "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_goal"], ["", "def", "label", "(", "self", ",", "observations", ",", "curr_goals", ")", ":", "\n", "        ", "obs_ims", "=", "observations", "[", "0", "]", "\n", "goals", "=", "[", "]", "\n", "for", "obs_im", ",", "curr_goal", "in", "zip", "(", "obs_ims", ",", "curr_goals", ")", ":", "\n", "            ", "if", "self", ".", "_im_is_rgb", ":", "\n", "                ", "obs_im", "=", "obs_im", "[", "...", ",", ":", ":", "-", "1", "]", "# make bgr", "\n", "", "im_height", ",", "im_width", ",", "_", "=", "obs_im", ".", "shape", "\n", "\n", "results", "=", "self", ".", "_tfnet", ".", "return_predict", "(", "obs_im", ")", "\n", "boxes", "=", "self", ".", "_get_boxes", "(", "results", ")", "\n", "goal", "=", "self", ".", "_get_goal", "(", "boxes", ",", "curr_goal", ",", "im_height", ",", "im_width", ")", "\n", "goals", ".", "append", "(", "goal", ")", "\n", "", "return", "goals", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_boxes": [[41, 47], ["boxes.append"], "methods", ["None"], ["", "def", "_get_boxes", "(", "self", ",", "results", ")", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "            ", "if", "result", "[", "'label'", "]", "in", "self", ".", "_labels", ":", "\n", "                ", "boxes", ".", "append", "(", "result", ")", "\n", "", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.yolo.food_labeller.FoodLabeller._get_goal": [[48, 81], ["list", "numpy.array", "food_labeller.FoodLabeller._env_spec.goal_spec.keys", "min", "numpy.array", "enumerate"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.analyze.experiment.MultiExperimentComparison.list"], ["", "def", "_get_goal", "(", "self", ",", "boxes", ",", "curr_goal", ",", "im_height", ",", "im_width", ")", ":", "\n", "# goal is weight of each goal and then desired center pixel", "\n", "        ", "goals", "=", "{", "}", "\n", "min_areas", "=", "{", "}", "\n", "for", "label", "in", "self", ".", "_labels", ":", "\n", "            ", "goals", "[", "label", "]", "=", "(", "0.", ",", "0.", ")", "# (in image, normalized diff to middle)", "\n", "min_areas", "[", "label", "]", "=", "np", ".", "inf", "\n", "\n", "", "im_mid", "=", "0.5", "*", "(", "im_width", "-", "1.", ")", "\n", "\n", "for", "box", "in", "boxes", ":", "\n", "            ", "label", "=", "box", "[", "'label'", "]", "\n", "br_x", "=", "box", "[", "'bottomright'", "]", "[", "'x'", "]", "\n", "br_y", "=", "box", "[", "'bottomright'", "]", "[", "'y'", "]", "\n", "tl_x", "=", "box", "[", "'topleft'", "]", "[", "'x'", "]", "\n", "tl_y", "=", "box", "[", "'topleft'", "]", "[", "'y'", "]", "\n", "mid_point", "=", "0.5", "*", "np", ".", "array", "(", "(", "br_x", "+", "tl_x", ",", "br_y", "+", "tl_y", ")", ")", "\n", "assert", "(", "mid_point", "[", "0", "]", ">=", "0", "and", "mid_point", "[", "0", "]", "<", "im_width", ")", "\n", "assert", "(", "mid_point", "[", "1", "]", ">=", "0", "and", "mid_point", "[", "1", "]", "<", "im_height", ")", "\n", "area", "=", "(", "tl_x", "-", "br_x", ")", "*", "(", "tl_y", "-", "br_y", ")", "\n", "if", "area", "<", "min_areas", "[", "label", "]", ":", "\n", "                ", "min_areas", "[", "label", "]", "=", "area", "\n", "norm_diff", "=", "(", "im_mid", "-", "mid_point", "[", "0", "]", ")", "/", "im_mid", "\n", "goals", "[", "label", "]", "=", "(", "1.", ",", "norm_diff", ")", "\n", "\n", "", "", "goal_keys", "=", "list", "(", "self", ".", "_env_spec", ".", "goal_spec", ".", "keys", "(", ")", ")", "\n", "goal", "=", "np", ".", "array", "(", "curr_goal", ")", "\n", "\n", "for", "label", "in", "self", ".", "_labels", ":", "\n", "            ", "idx", "=", "min", "(", "[", "idx", "for", "idx", ",", "k", "in", "enumerate", "(", "goal_keys", ")", "if", "label", "in", "k", "]", ")", "\n", "goal", "[", "idx", ":", "idx", "+", "2", "]", "=", "goals", "[", "label", "]", "# NOTE: assumes in image, normalized diff to middle", "\n", "\n", "", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.ros.rosbag2video.print_help": [[31, 42], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "function", ["None"], ["def", "print_help", "(", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'rosbag2video.py [--fps 25] [-o outputfile] [-s (show video)] [-t topic] bagfile1 [bagfile2] ...'", ")", "\n", "print", "(", ")", "\n", "print", "(", "'converts image sequence(s) in ros bag file(s) to video file(s) with fixed frame rate using avconv'", ")", "\n", "print", "(", "'avconv needs to be installed! (sudo apt-get install libav-tools)'", ")", "\n", "print", "(", "'if no output file (-o) is given the filename \\'<topic>.mp4\\' is used and default output codec is h264'", ")", "\n", "print", "(", "'multiple image topics are supported only when -o option is _not_ used'", ")", "\n", "print", "(", "'avconv will guess the format according to given extension'", ")", "\n", "print", "(", "'compressed and raw image messages are supportet with mono8 and bgr8/rgb8'", ")", "\n", "print", "(", "'Maximilian Laiacker 2016'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.ros.rosbag2video.filter_image_msgs": [[72, 90], ["print", "print", "print", "print", "print", "print", "str", "str", "str"], "function", ["None"], ["", "", "", "def", "filter_image_msgs", "(", "topic", ",", "datatype", ",", "md5sum", ",", "msg_def", ",", "header", ")", ":", "\n", "    ", "if", "(", "datatype", "==", "\"sensor_msgs/CompressedImage\"", ")", ":", "\n", "        ", "if", "(", "opt_topic", "!=", "\"\"", "and", "opt_topic", "==", "topic", ")", "or", "opt_topic", "==", "\"\"", ":", "\n", "            ", "print", "(", "\"############# USING ######################\"", ")", "\n", "print", "(", "topic", ",", "' with datatype:'", ",", "str", "(", "datatype", ")", ")", "\n", "return", "True", ";", "\n", "", "", "if", "(", "datatype", "==", "\"theora_image_transport/Packet\"", ")", ":", "\n", "        ", "if", "(", "opt_topic", "!=", "\"\"", "and", "opt_topic", "==", "topic", ")", "or", "opt_topic", "==", "\"\"", ":", "\n", "            ", "print", "(", "topic", ",", "' with datatype:'", ",", "str", "(", "datatype", ")", ")", "\n", "#            print \"############# USING ######################\"", "\n", "print", "(", "'!!! theora not supportet, sorry !!!'", ")", "\n", "return", "False", ";", "\n", "", "", "if", "(", "datatype", "==", "\"sensor_msgs/Image\"", ")", ":", "\n", "        ", "if", "(", "opt_topic", "!=", "\"\"", "and", "opt_topic", "==", "topic", ")", "or", "opt_topic", "==", "\"\"", ":", "\n", "            ", "print", "(", "\"############# USING ######################\"", ")", "\n", "print", "(", "topic", ",", "' with datatype:'", ",", "str", "(", "datatype", ")", ")", "\n", "return", "True", ";", "\n", "", "", "return", "False", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.__init__": [[43, 57], ["Controller.Controller.Controller.__init__", "rospy.Subscriber", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ID", ",", "use_joy", ",", "joystick_topic", ",", "flow_motion", "=", "True", ")", ":", "\n", "\n", "        ", "Controller", ".", "__init__", "(", "self", ",", "ID", ")", "\n", "self", ".", "use_joy", "=", "use_joy", "\n", "\n", "if", "self", ".", "use_joy", ":", "\n", "            ", "self", ".", "joy_sub", "=", "rospy", ".", "Subscriber", "(", "joystick_topic", ",", "Joy", ",", "self", ".", "joy_cb", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"------ JOYSTICK NOT BEING USED BY CONTROLLER NODE ------\"", ")", "\n", "", "self", ".", "curr_joy", "=", "None", "\n", "\n", "self", ".", "cmd", "=", "-", "1", "# -1 : NONE", "\n", "\n", "self", ".", "is_flow_motion", "=", "True", "#flow_motion", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.compute_motion": [[59, 104], ["crazyflie.msg.CFCommand", "crazyflie.msg.CFMotion"], "methods", ["None"], ["", "def", "compute_motion", "(", "self", ")", ":", "\n", "#pulls latest joystick data", "\n", "        ", "if", "not", "self", ".", "use_joy", ":", "\n", "# no motion input from controller", "\n", "            ", "return", "None", "\n", "\n", "", "motion", "=", "None", "\n", "\n", "if", "self", ".", "cmd", "!=", "-", "1", ":", "\n", "            ", "motion", "=", "CFCommand", "(", ")", "\n", "if", "self", ".", "cmd", "==", "CFCommand", ".", "ESTOP", ":", "\n", "                ", "motion", ".", "cmd", "=", "CFCommand", ".", "ESTOP", "\n", "\n", "", "elif", "self", ".", "cmd", "==", "CFCommand", ".", "TAKEOFF", ":", "\n", "                ", "motion", ".", "cmd", "=", "CFCommand", ".", "TAKEOFF", "\n", "\n", "", "elif", "self", ".", "cmd", "==", "CFCommand", ".", "LAND", ":", "\n", "                ", "motion", ".", "cmd", "=", "CFCommand", ".", "LAND", "\n", "\n", "#reset", "\n", "", "self", ".", "cmd", "=", "-", "1", "\n", "\n", "#repeat send at 10Hz", "\n", "", "elif", "self", ".", "curr_joy", ":", "\n", "            ", "motion", "=", "CFMotion", "(", ")", "\n", "\n", "motion", ".", "is_flow_motion", "=", "self", ".", "is_flow_motion", "\n", "# computing regular vx, vy, yaw, alt motion", "\n", "\n", "if", "self", ".", "is_flow_motion", ":", "\n", "                ", "motion", ".", "y", "=", "self", ".", "curr_joy", ".", "axes", "[", "ROLL_AXIS", "]", "*", "VY_SCALE", "\n", "motion", ".", "x", "=", "self", ".", "curr_joy", ".", "axes", "[", "PITCH_AXIS", "]", "*", "VX_SCALE", "\n", "", "else", ":", "\n", "                ", "motion", ".", "y", "=", "self", ".", "curr_joy", ".", "axes", "[", "ROLL_AXIS", "]", "*", "ROLL_SCALE", "\n", "motion", ".", "x", "=", "self", ".", "curr_joy", ".", "axes", "[", "PITCH_AXIS", "]", "*", "PITCH_SCALE", "\n", "\n", "#common", "\n", "", "motion", ".", "yaw", "=", "self", ".", "curr_joy", ".", "axes", "[", "YAW_AXIS", "]", "*", "YAW_SCALE", "\n", "\n", "\n", "# print(self.curr_joy.axes)", "\n", "motion", ".", "dz", "=", "self", ".", "curr_joy", ".", "axes", "[", "THROTTLE_AXIS", "]", "*", "THROTTLE_SCALE", "\n", "# print(\"ALT CHANGE: %.3f\" % motion.dz)", "\n", "\n", "", "return", "motion", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.dead_band": [[107, 112], ["range", "len", "len", "abs"], "methods", ["None"], ["", "def", "dead_band", "(", "self", ",", "signal", ")", ":", "\n", "        ", "new_axes", "=", "[", "0", "]", "*", "len", "(", "signal", ".", "axes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "signal", ".", "axes", ")", ")", ":", "\n", "            ", "new_axes", "[", "i", "]", "=", "signal", ".", "axes", "[", "i", "]", "if", "abs", "(", "signal", ".", "axes", "[", "i", "]", ")", ">", "TOLERANCE", "else", "0", "\n", "", "signal", ".", "axes", "=", "new_axes", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.joy_cb": [[114, 144], ["JoyController.JoyController.dead_band", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.JoyController.JoyController.dead_band"], ["", "def", "joy_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "if", "self", ".", "curr_joy", ":", "\n", "            ", "if", "msg", ".", "buttons", "[", "ESTOP_CHANNEL", "]", "and", "not", "self", ".", "curr_joy", ".", "buttons", "[", "ESTOP_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "ESTOP", "\n", "print", "(", "\"CALLING ESTOP\"", ")", "\n", "", "elif", "msg", ".", "buttons", "[", "TAKEOFF_CHANNEL", "]", "and", "not", "self", ".", "curr_joy", ".", "buttons", "[", "TAKEOFF_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "TAKEOFF", "\n", "print", "(", "\"CALLING TAKEOFF\"", ")", "\n", "", "elif", "msg", ".", "buttons", "[", "LAND_CHANNEL", "]", "and", "not", "self", ".", "curr_joy", ".", "buttons", "[", "LAND_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "LAND", "\n", "print", "(", "\"CALLING LAND\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "msg", ".", "buttons", "[", "ESTOP_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "ESTOP", "\n", "print", "(", "\"CALLING ESTOP\"", ")", "\n", "", "elif", "msg", ".", "buttons", "[", "TAKEOFF_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "TAKEOFF", "\n", "print", "(", "\"CALLING TAKEOFF\"", ")", "\n", "", "elif", "msg", ".", "buttons", "[", "LAND_CHANNEL", "]", ":", "\n", "#takeoff", "\n", "                ", "self", ".", "cmd", "=", "CFCommand", ".", "LAND", "\n", "print", "(", "\"CALLING LAND\"", ")", "\n", "\n", "", "", "self", ".", "dead_band", "(", "msg", ")", "\n", "self", ".", "curr_joy", "=", "msg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.__init__": [[39, 89], ["signal.signal", "cflib.crtp.init_drivers", "cflib.crazyflie.Crazyflie", "cflib.crazyflie.Crazyflie.Crazyflie.cf.connected.add_callback", "cflib.crazyflie.Crazyflie.Crazyflie.cf.disconnected.add_callback", "cflib.crazyflie.Crazyflie.Crazyflie.cf.connection_failed.add_callback", "cflib.crazyflie.Crazyflie.Crazyflie.cf.connection_lost.add_callback", "print", "cflib.crazyflie.Crazyflie.Crazyflie.cf.open_link", "rospy.Publisher", "rospy.Subscriber", "rospy.Subscriber"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cf_id", ",", "radio_uri", ",", "data_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "_id", "=", "cf_id", "\n", "self", ".", "_uri", "=", "radio_uri", "\n", "\n", "self", ".", "stop_sig", "=", "False", "\n", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "signal_handler", ")", "\n", "\n", "self", ".", "cf_active", "=", "False", "\n", "\n", "self", ".", "accept_commands", "=", "False", "\n", "self", ".", "data_only", "=", "data_only", "\n", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "alt", "=", "0", "\n", "\n", "# self.bridge = CvBridge()", "\n", "\n", "cflib", ".", "crtp", ".", "init_drivers", "(", "enable_debug_driver", "=", "False", ")", "\n", "# try:", "\n", "# with SyncCrazyflie(self._uri) as scf:", "\n", "\n", "self", ".", "cf", "=", "CF", "(", "rw_cache", "=", "\"./cache\"", ")", "\n", "self", ".", "cf", ".", "connected", ".", "add_callback", "(", "self", ".", "connected", ")", "\n", "self", ".", "cf", ".", "disconnected", ".", "add_callback", "(", "self", ".", "disconnected", ")", "\n", "self", ".", "cf", ".", "connection_failed", ".", "add_callback", "(", "self", ".", "connection_lost", ")", "\n", "self", ".", "cf", ".", "connection_lost", ".", "add_callback", "(", "self", ".", "connection_failed", ")", "\n", "\n", "print", "(", "'Connecting to %s'", "%", "radio_uri", ")", "\n", "self", ".", "cf", ".", "open_link", "(", "radio_uri", ")", "\n", "\n", "# self.cf.param.set_value('kalman.resetEstimation', '1')", "\n", "# time.sleep(0.1)", "\n", "# self.cf.param.set_value('kalman.resetEstimation', '0')", "\n", "# time.sleep(1.5)", "\n", "\n", "\n", "# except Exception as e:", "\n", "#     print(type(e))", "\n", "#     print(\"Unable to connect to CF %d at URI %s\" % (self._id, self._uri))", "\n", "#     self.scf = None", "\n", "#     self.cf = None", "\n", "\n", "\n", "\n", "self", ".", "data_pub", "=", "rospy", ".", "Publisher", "(", "'cf/%d/data'", "%", "self", ".", "_id", ",", "CFData", ",", "queue_size", "=", "10", ")", "\n", "# self.image_pub = rospy.Publisher('cf/%d/image'%self._id, Image, queue_size=10)", "\n", "if", "not", "self", ".", "data_only", ":", "\n", "            ", "self", ".", "cmd_sub", "=", "rospy", ".", "Subscriber", "(", "'cf/%d/command'", "%", "self", ".", "_id", ",", "CFCommand", ",", "self", ".", "command_cb", ")", "\n", "self", ".", "motion_sub", "=", "rospy", ".", "Subscriber", "(", "'cf/%d/motion'", "%", "self", ".", "_id", ",", "CFMotion", ",", "self", ".", "motion_cb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.signal_handler": [[90, 98], ["rospy.signal_shutdown", "os.kill", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_estop", "os.getpgrp"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_estop"], ["", "", "def", "signal_handler", "(", "self", ",", "sig", ",", "frame", ")", ":", "\n", "        ", "if", "self", ".", "cf_active", ":", "\n", "            ", "self", ".", "cmd_estop", "(", ")", "\n", "", "self", ".", "stop_sig", "=", "True", "\n", "rospy", ".", "signal_shutdown", "(", "\"CtrlC\"", ")", "\n", "\n", "#killing", "\n", "os", ".", "kill", "(", "os", ".", "getpgrp", "(", ")", ",", "signal", ".", "SIGKILL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.connected": [[100, 125], ["print", "cflib.crazyflie.log.LogConfig", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.add_variable", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.add_variable", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.add_variable", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.add_variable", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.add_variable", "cflib.crazyflie.Crazyflie.Crazyflie.cf.log.add_config", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.data_received_cb.add_callback", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.start", "print", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.start"], ["", "def", "connected", "(", "self", ",", "uri", ")", ":", "\n", "        ", "print", "(", "\"Connected to Crazyflie at URI: %s\"", "%", "uri", ")", "\n", "\n", "self", ".", "cf_active", "=", "True", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "log_data", "=", "LogConfig", "(", "name", "=", "\"Data\"", ",", "period_in_ms", "=", "10", ")", "\n", "self", ".", "log_data", ".", "add_variable", "(", "'acc.x'", ",", "'float'", ")", "\n", "self", ".", "log_data", ".", "add_variable", "(", "'acc.y'", ",", "'float'", ")", "\n", "self", ".", "log_data", ".", "add_variable", "(", "'acc.z'", ",", "'float'", ")", "\n", "self", ".", "log_data", ".", "add_variable", "(", "'pm.vbat'", ",", "'float'", ")", "\n", "self", ".", "log_data", ".", "add_variable", "(", "'stateEstimate.z'", ",", "'float'", ")", "\n", "self", ".", "cf", ".", "log", ".", "add_config", "(", "self", ".", "log_data", ")", "\n", "self", ".", "log_data", ".", "data_received_cb", ".", "add_callback", "(", "self", ".", "received_data", ")", "\n", "\n", "\n", "#begins logging and publishing", "\n", "self", ".", "log_data", ".", "start", "(", ")", "\n", "\n", "print", "(", "\"Logging Setup Complete. Starting...\"", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "            ", "print", "(", "'Could not start log configuration,'", "\n", "'{} not found in TOC'", ".", "format", "(", "str", "(", "e", ")", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "print", "(", "'Could not add log config, bad configuration.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.disconnected": [[127, 130], ["print"], "methods", ["None"], ["", "", "def", "disconnected", "(", "self", ",", "uri", ")", ":", "\n", "        ", "self", ".", "cf_active", "=", "False", "\n", "print", "(", "\"Disconnected from Crazyflie at URI: %s\"", "%", "uri", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.connection_failed": [[131, 134], ["print"], "methods", ["None"], ["", "def", "connection_failed", "(", "self", ",", "uri", ",", "msg", ")", ":", "\n", "        ", "self", ".", "cf_active", "=", "False", "\n", "print", "(", "\"Connection Failed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.connection_lost": [[135, 138], ["print"], "methods", ["None"], ["", "def", "connection_lost", "(", "self", ",", "uri", ",", "msg", ")", ":", "\n", "        ", "self", ".", "cf_active", "=", "False", "\n", "print", "(", "\"Connection Lost\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.command_cb": [[139, 158], ["print", "print", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_estop", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_takeoff", "print", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_land", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_takeoff", "print"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_estop", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_takeoff", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_land", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_takeoff"], ["", "def", "command_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "\"ALT: %.3f\"", "%", "self", ".", "alt", ")", "\n", "if", "self", ".", "accept_commands", ":", "\n", "            ", "print", "(", "\"RECEIVED COMMAND : %s\"", "%", "cmd_type", "[", "msg", ".", "cmd", "]", ")", "\n", "if", "cmd_type", "[", "msg", ".", "cmd", "]", "==", "'ESTOP'", ":", "\n", "                ", "self", ".", "cmd_estop", "(", ")", "\n", "", "elif", "cmd_type", "[", "msg", ".", "cmd", "]", "==", "'LAND'", ":", "\n", "                ", "self", ".", "alt", "=", "0", "\n", "self", ".", "cmd_land", "(", ")", "\n", "", "elif", "cmd_type", "[", "msg", ".", "cmd", "]", "==", "'TAKEOFF'", ":", "\n", "                ", "self", ".", "alt", "=", "0.4", "\n", "self", ".", "cmd_takeoff", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Invalid Command! %d'", "%", "msg", ".", "cmd", ")", "\n", "", "", "elif", "cmd_type", "[", "msg", ".", "cmd", "]", "==", "'TAKEOFF'", ":", "\n", "            ", "self", ".", "alt", "=", "0.4", "\n", "self", ".", "cmd_takeoff", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not Accepting Commands -- but one was sent!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.motion_cb": [[159, 172], ["print", "print", "cflib.crazyflie.Crazyflie.Crazyflie.update_alt", "print", "cflib.crazyflie.Crazyflie.Crazyflie.set_flow_motion", "cflib.crazyflie.Crazyflie.Crazyflie.set_rp_motion"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.update_alt", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.set_flow_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.set_rp_motion"], ["", "", "def", "motion_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "print", "(", "\"ALT: %.3f\"", "%", "self", ".", "alt", ")", "\n", "print", "(", "msg", ")", "\n", "if", "self", ".", "accept_commands", ":", "\n", "            ", "self", ".", "update_alt", "(", "msg", ")", "\n", "# switching between optical flow and roll pitch motion", "\n", "if", "msg", ".", "is_flow_motion", ":", "\n", "                ", "self", ".", "set_flow_motion", "(", "msg", ".", "x", ",", "msg", ".", "y", ",", "msg", ".", "yaw", ",", "self", ".", "alt", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "set_rp_motion", "(", "msg", ".", "x", ",", "msg", ".", "y", ",", "msg", ".", "yaw", ",", "self", ".", "alt", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Not Accepting Motion Commands -- but one was sent!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.update_alt": [[173, 182], ["None"], "methods", ["None"], ["", "", "def", "update_alt", "(", "self", ",", "msg", ")", ":", "\n", "\n", "#what exactly does this do?", "\n", "#motion.alt = self.data.alt * 100 if self.data.alt > ALT_TOLERANCE else 0", "\n", "        ", "self", ".", "alt", "+=", "msg", ".", "dz", "\n", "if", "self", ".", "alt", "<", "0", ":", "\n", "            ", "self", ".", "alt", "=", "0", "\n", "", "elif", "self", ".", "alt", ">", "MAX_ALT", ":", "\n", "            ", "self", ".", "alt", "=", "MAX_ALT", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.received_data": [[183, 197], ["crazyflie.msg.CFData", "float", "float", "float", "float", "float", "cflib.crazyflie.Crazyflie.Crazyflie.data_pub.publish"], "methods", ["None"], ["", "", "def", "received_data", "(", "self", ",", "timestamp", ",", "data", ",", "logconf", ")", ":", "\n", "# print(\"DATA RECEIVED\")", "\n", "# print(self.data)", "\n", "        ", "self", ".", "data", "=", "data", "\n", "d", "=", "CFData", "(", ")", "\n", "d", ".", "ID", "=", "self", ".", "_id", "\n", "d", ".", "accel_x", "=", "float", "(", "data", "[", "'acc.x'", "]", ")", "\n", "d", ".", "accel_y", "=", "float", "(", "data", "[", "'acc.y'", "]", ")", "\n", "d", ".", "accel_z", "=", "float", "(", "data", "[", "'acc.z'", "]", ")", "\n", "d", ".", "v_batt", "=", "float", "(", "data", "[", "'pm.vbat'", "]", ")", "\n", "d", ".", "alt", "=", "float", "(", "data", "[", "'stateEstimate.z'", "]", ")", "\n", "# d.alt = float(data['posEstimatorAlt.estimatedZ'])", "\n", "# print(d.v_batt)", "\n", "self", ".", "data_pub", ".", "publish", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.set_flow_motion": [[200, 202], ["cflib.crazyflie.Crazyflie.Crazyflie.cf.commander.send_hover_setpoint"], "methods", ["None"], ["", "def", "set_flow_motion", "(", "self", ",", "vx", ",", "vy", ",", "yaw", ",", "alt", ")", ":", "\n", "        ", "self", ".", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "vx", ",", "vy", ",", "yaw", ",", "alt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.set_rp_motion": [[203, 205], ["cflib.crazyflie.Crazyflie.Crazyflie.cf.commander.send_zdistance_setpoint"], "methods", ["None"], ["", "def", "set_rp_motion", "(", "self", ",", "roll_a", ",", "pitch_a", ",", "yaw_r", ",", "alt", ")", ":", "\n", "        ", "self", ".", "cf", ".", "commander", ".", "send_zdistance_setpoint", "(", "roll_a", ",", "pitch_a", ",", "yaw_r", ",", "alt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_estop": [[206, 210], ["print", "cflib.crazyflie.Crazyflie.Crazyflie.cf.commander.send_stop_setpoint"], "methods", ["None"], ["", "def", "cmd_estop", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"---- Crazyflie %d Emergency Stopping ----\"", "%", "self", ".", "_id", ")", "\n", "self", ".", "cf", ".", "commander", ".", "send_stop_setpoint", "(", ")", "\n", "self", ".", "accept_commands", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_takeoff": [[211, 217], ["range", "print", "cflib.crazyflie.Crazyflie.Crazyflie.cf.commander.send_hover_setpoint", "time.sleep"], "methods", ["None"], ["", "def", "cmd_takeoff", "(", "self", ",", "alt", "=", "0.4", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "10", ")", ":", "\n", "            ", "print", "(", "\"taking off\"", ")", "\n", "self", ".", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "0", ",", "0", ",", "0", ",", "y", "/", "10", "*", "alt", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "self", ".", "accept_commands", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_land": [[218, 226], ["print", "range", "cflib.crazyflie.Crazyflie.Crazyflie.cmd_estop", "cflib.crazyflie.Crazyflie.Crazyflie.cf.commander.send_hover_setpoint", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.cmd_estop"], ["", "def", "cmd_land", "(", "self", ",", "alt", "=", "0.4", ")", ":", "\n", "        ", "if", "self", ".", "accept_commands", "==", "False", ":", "\n", "            ", "print", "(", "\"cannot land right now\"", ")", "\n", "", "else", ":", "\n", "            ", "for", "y", "in", "range", "(", "10", ")", ":", "\n", "                ", "self", ".", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "0", ",", "0", ",", "0", ",", "alt", "-", "(", "y", "/", "10", "*", "alt", ")", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "self", ".", "cmd_estop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Crazyflie.Crazyflie.run": [[227, 241], ["print", "print", "rospy.Rate", "rospy.spin", "cflib.crazyflie.Crazyflie.Crazyflie.log_data.stop"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"WAITING FOR ACTIVE CONNECTION\"", ")", "\n", "while", "not", "self", ".", "cf_active", ":", "\n", "            ", "pass", "\n", "", "print", "(", "\"FOUND ACTIVE CONNECTION\"", ")", "\n", "\n", "#handles image reads", "\n", "# threading.Thread(target=self.image_thread).start()", "\n", "\n", "rate", "=", "rospy", ".", "Rate", "(", "25", ")", "\n", "\n", "rospy", ".", "spin", "(", ")", "\n", "\n", "self", ".", "log_data", ".", "stop", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.__init__": [[31, 45], ["rospy.Subscriber", "rospy.Subscriber", "rospy.Publisher", "rospy.Publisher", "rospy.Publisher"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ID", ")", ":", "\n", "        ", "self", ".", "id", "=", "ID", "\n", "\n", "self", ".", "mat", "=", "None", "\n", "self", ".", "data", "=", "None", "\n", "\n", "#need to facilitate a set of publishers per cf node", "\n", "\n", "self", ".", "data_sub", "=", "rospy", ".", "Subscriber", "(", "'cf/%d/data'", "%", "ID", ",", "CFData", ",", "self", ".", "data_cb", ")", "\n", "self", ".", "image_sub", "=", "rospy", ".", "Subscriber", "(", "'cf/%d/image'", "%", "ID", ",", "CompressedImage", ",", "self", ".", "image_cb", ")", "\n", "\n", "self", ".", "cmd_pub", "=", "rospy", ".", "Publisher", "(", "'cf/%d/command'", "%", "self", ".", "id", ",", "CFCommand", ",", "queue_size", "=", "10", ")", "\n", "self", ".", "motion_pub", "=", "rospy", ".", "Publisher", "(", "'cf/%d/motion'", "%", "self", ".", "id", ",", "CFMotion", ",", "queue_size", "=", "10", ")", "\n", "self", ".", "coll_pub", "=", "rospy", ".", "Publisher", "(", "'cf/%d/coll'", "%", "self", ".", "id", ",", "Bool", ",", "queue_size", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.compute_motion": [[46, 49], ["print"], "methods", ["None"], ["", "def", "compute_motion", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Doing nothing -- \"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.observedCollision": [[50, 57], ["None"], "methods", ["None"], ["", "def", "observedCollision", "(", "self", ")", ":", "\n", "# if not self.data:", "\n", "#     return False", "\n", "# xy_mag = math.sqrt(self.data.accel_x ** 2 + self.data.accel_y ** 2)", "\n", "# print(\"-- COLLIDED --\") if xy_mag > self.COLLISION_THRESH else None", "\n", "# return xy_mag > self.COLLISION_THRESH", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.image_cb": [[62, 68], ["io.BytesIO", "PIL.Image.open().convert", "numpy.array", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.open"], ["", "def", "image_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "pil_jpg", "=", "io", ".", "BytesIO", "(", "msg", ".", "data", ")", "\n", "pil_arr", "=", "Image", ".", "open", "(", "pil_jpg", ")", ".", "convert", "(", "'L'", ")", "#grayscale", "\n", "\n", "self", ".", "mat", "=", "np", ".", "array", "(", "pil_arr", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.data_cb": [[69, 72], ["None"], "methods", ["None"], ["", "def", "data_cb", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "data", "=", "msg", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.run": [[76, 109], ["rospy.Rate", "rospy.is_shutdown", "Controller.Controller.compute_motion", "isinstance", "rospy.Rate.sleep", "Controller.Controller.observedCollision", "print", "crazyflie.msg.CFCommand", "Controller.Controller.cmd_pub.publish", "Controller.Controller.coll_pub.publish", "rospy.Rate().sleep", "print", "Controller.Controller.coll_pub.publish", "Controller.Controller.motion_pub.publish", "isinstance", "Controller.Controller.cmd_pub.publish", "print", "rospy.Rate"], "methods", ["home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.compute_motion", "home.repos.pwc.inspect_result.gkahn13_GtS.src.Controller.Controller.observedCollision"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "rate", "=", "rospy", ".", "Rate", "(", "10", ")", "# 10Hz", "\n", "while", "not", "rospy", ".", "is_shutdown", "(", ")", ":", "\n", "            ", "action", "=", "self", ".", "compute_motion", "(", ")", "\n", "\n", "if", "self", ".", "data", "and", "self", ".", "observedCollision", "(", ")", ":", "\n", "                ", "print", "(", "\"-- COLLISION : E-stopping --\"", ")", "\n", "action", "=", "CFCommand", "(", ")", "\n", "action", ".", "cmd", "=", "CFCommand", ".", "ESTOP", "\n", "self", ".", "cmd_pub", ".", "publish", "(", "action", ")", "\n", "self", ".", "coll_pub", ".", "publish", "(", "True", ")", "\n", "#sleep for 2 seconds", "\n", "rospy", ".", "Rate", "(", "1.0", "/", "2", ")", ".", "sleep", "(", ")", "\n", "print", "(", "\"Back Online\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "coll_pub", ".", "publish", "(", "False", ")", "\n", "\n", "\n", "", "if", "isinstance", "(", "action", ",", "CFMotion", ")", ":", "\n", "# if action != Controller.DO_NOTHING_CMD:", "\n", "                ", "self", ".", "motion_pub", ".", "publish", "(", "action", ")", "\n", "\n", "# else:", "\n", "#     print(\"--- DO NOTHING CMD SENT ---\")", "\n", "", "elif", "isinstance", "(", "action", ",", "CFCommand", ")", ":", "\n", "                ", "self", ".", "cmd_pub", ".", "publish", "(", "action", ")", "\n", "print", "(", "\"CALLED COMMAND -> %s\"", "%", "cmd_type", "[", "action", ".", "cmd", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# rospy.spinOnce()", "\n", "", "rate", ".", "sleep", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.hover_end_bat.signal_handler": [[10, 20], ["print", "range", "hover_end_bat.close_terminate", "sys.exit", "cf.commander.send_hover_setpoint", "time.sleep"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.close_terminate"], ["def", "signal_handler", "(", "signal", ",", "frame", ")", ":", "\n", "    ", "print", "(", "\"**** Crazyflie Stopping ****\"", ")", "\n", "#land seq", "\n", "for", "y", "in", "range", "(", "10", ")", ":", "\n", "        ", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "0", ",", "0", ",", "0", ",", "(", "10", "-", "y", ")", "/", "25", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "close_terminate", "(", ")", ";", "\n", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.hover_end_bat.close_terminate": [[21, 28], ["cf.commander.send_stop_setpoint", "log_bat.stop", "logFile.close", "print", "str"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.data.timer.TimeIt.stop", "home.repos.pwc.inspect_result.gkahn13_GtS.crazyflie.crazyflie_env.RolloutRosbag.close"], ["", "def", "close_terminate", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "cf", ".", "commander", ".", "send_stop_setpoint", "(", ")", "\n", "log_bat", ".", "stop", "(", ")", "\n", "logFile", ".", "close", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error in stopping log: %s\"", "%", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.hover_end_bat.received_bat_data": [[42, 46], ["float"], "function", ["None"], ["def", "received_bat_data", "(", "timestamp", ",", "data", ",", "logconf", ")", ":", "\n", "    ", "global", "vbat", "\n", "#print('[%d][%s]: %f' % (timestamp, logconf.name, float(data['pm.vbat'])))", "\n", "vbat", "=", "float", "(", "data", "[", "'pm.vbat'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.hover_end_bat.error_bat_data": [[47, 49], ["print"], "function", ["None"], ["", "def", "error_bat_data", "(", "logconf", ",", "msg", ")", ":", "\n", "    ", "print", "(", "'Error when logging %s: %s'", "%", "(", "logconf", ".", "name", ",", "msg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.signal_handler": [[16, 27], ["print", "range", "key_control.close_terminate", "sys.exit", "sys.exit", "cf.commander.send_hover_setpoint", "time.sleep"], "function", ["home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.close_terminate"], ["def", "signal_handler", "(", "signal", ",", "frame", ")", ":", "\n", "    ", "print", "(", "\"**** Crazyflie Stopping ****\"", ")", "\n", "#land seq", "\n", "for", "y", "in", "range", "(", "10", ")", ":", "\n", "        ", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "0", ",", "0", ",", "0", ",", "(", "10", "-", "y", ")", "/", "25", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "global", "done", "\n", "done", "=", "True", "\n", "close_terminate", "(", ")", ";", "\n", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.close_terminate": [[28, 33], ["cf.commander.send_stop_setpoint", "print", "str"], "function", ["None"], ["", "def", "close_terminate", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "cf", ".", "commander", ".", "send_stop_setpoint", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "\"Error in stopping: %s\"", "%", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.on_key_down": [[56, 91], ["active.append"], "function", ["None"], ["def", "on_key_down", "(", "key", ")", ":", "\n", "    ", "global", "upDown", "\n", "global", "leftRight", "\n", "global", "forwardBack", "\n", "global", "yawLeftRight", "\n", "\n", "if", "key", "in", "active", ":", "\n", "        ", "return", "\n", "\n", "# print(\"PRESSED \" + str(key))", "\n", "", "active", ".", "append", "(", "key", ")", "\n", "if", "key", "==", "key", ".", "W", ":", "\n", "# print('Alt Up')", "\n", "        ", "upDown", "=", "-", "1", "\n", "", "elif", "key", "==", "key", ".", "S", ":", "\n", "# print('Alt Down')", "\n", "        ", "upDown", "=", "1", "\n", "", "elif", "key", "==", "key", ".", "A", ":", "\n", "# print('Yaw Left')", "\n", "        ", "yawLeftRight", "=", "-", "1", "\n", "", "elif", "key", "==", "key", ".", "D", ":", "\n", "# print('Yaw Right')", "\n", "        ", "yawLeftRight", "=", "1", "\n", "", "elif", "key", "==", "key", ".", "UP", ":", "\n", "# print('Pitch Forward')", "\n", "        ", "forwardBack", "=", "-", "1", "\n", "", "elif", "key", "==", "key", ".", "DOWN", ":", "\n", "# print('Pitch Back')", "\n", "        ", "forwardBack", "=", "1", "\n", "", "elif", "key", "==", "key", ".", "LEFT", ":", "\n", "# print('Roll Left')", "\n", "        ", "leftRight", "=", "-", "1", "\n", "", "elif", "key", "==", "key", ".", "RIGHT", ":", "\n", "# print('Roll Right')", "\n", "        ", "leftRight", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.on_key_up": [[92, 114], ["active.remove"], "function", ["None"], ["", "", "def", "on_key_up", "(", "key", ")", ":", "\n", "    ", "global", "upDown", "\n", "global", "leftRight", "\n", "global", "forwardBack", "\n", "global", "yawLeftRight", "\n", "\n", "if", "key", "in", "active", ":", "\n", "        ", "active", ".", "remove", "(", "key", ")", "\n", "# print(\"RELEASED \" + str(key))", "\n", "#releasing", "\n", "", "if", "key", "==", "key", ".", "W", "or", "key", "==", "key", ".", "S", ":", "\n", "# print('Release Alt')", "\n", "        ", "upDown", "=", "0", "\n", "", "elif", "key", "==", "key", ".", "A", "or", "key", "==", "key", ".", "D", ":", "\n", "# print('Release Yaw')", "\n", "        ", "yawLeftRight", "=", "0", "\n", "", "elif", "key", "==", "key", ".", "UP", "or", "key", "==", "key", ".", "DOWN", ":", "\n", "# print('Release Pitch')", "\n", "        ", "forwardBack", "=", "0", "\n", "", "elif", "key", "==", "key", ".", "LEFT", "or", "key", "==", "key", ".", "RIGHT", ":", "\n", "# print('Release Roll')", "\n", "        ", "leftRight", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.scripts.key_control.main_thread": [[118, 193], ["print", "cflib.crtp.init_drivers", "cflib.crazyflie.syncCrazyflie.SyncCrazyflie", "cf.param.set_value", "time.sleep", "cf.param.set_value", "time.sleep", "print", "range", "print", "cf.commander.send_hover_setpoint", "time.sleep", "cf.commander.send_hover_setpoint", "print", "time.sleep"], "function", ["None"], ["def", "main_thread", "(", ")", ":", "\n", "    ", "ALT", "=", "0.4", "\n", "VX", "=", "0", "\n", "VY", "=", "0", "\n", "YAW", "=", "0", "\n", "\n", "global", "cf", "\n", "\n", "print", "(", "\"STARTING MAIN\"", ")", "\n", "\n", "# Initialize the low-level drivers (don't list the debug drivers)", "\n", "cflib", ".", "crtp", ".", "init_drivers", "(", "enable_debug_driver", "=", "False", ")", "\n", "\n", "with", "SyncCrazyflie", "(", "URI", ")", "as", "scf", ":", "\n", "        ", "cf", "=", "scf", ".", "cf", "\n", "\n", "cf", ".", "param", ".", "set_value", "(", "'kalman.resetEstimation'", ",", "'1'", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "cf", ".", "param", ".", "set_value", "(", "'kalman.resetEstimation'", ",", "'0'", ")", "\n", "time", ".", "sleep", "(", "1.5", ")", "\n", "\n", "print", "(", "\"--------- Initiating Sequence ---------\"", ")", "\n", "\n", "for", "y", "in", "range", "(", "10", ")", ":", "\n", "            ", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "0", ",", "0", ",", "0", ",", "y", "*", "ALT", "/", "10", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "print", "(", "\"**** Crazyflie in the air! ****\"", ")", "\n", "global", "done", "\n", "done", "=", "False", "\n", "\n", "while", "not", "done", ":", "\n", "#ROLL BLOCK", "\n", "            ", "if", "leftRight", "==", "-", "1", ":", "\n", "#left", "\n", "                ", "VY", "=", "XY_VEL", "\n", "", "elif", "leftRight", "==", "1", ":", "\n", "#right", "\n", "                ", "VY", "=", "-", "XY_VEL", "\n", "", "else", ":", "\n", "                ", "VY", "=", "0", "\n", "\n", "#FORWARD BLOCK", "\n", "", "if", "forwardBack", "==", "-", "1", ":", "\n", "#forward", "\n", "                ", "VX", "=", "XY_VEL", "\n", "", "elif", "forwardBack", "==", "1", ":", "\n", "#back", "\n", "                ", "VX", "=", "-", "XY_VEL", "\n", "", "else", ":", "\n", "                ", "VX", "=", "0", "\n", "\n", "#ALT BLOCK", "\n", "", "if", "upDown", "==", "-", "1", ":", "\n", "#up", "\n", "                ", "ALT", "+=", "Z_STEP", "\n", "", "elif", "upDown", "==", "1", ":", "\n", "#down", "\n", "                ", "ALT", "-=", "Z_STEP", "\n", "if", "ALT", "<", "0.4", ":", "\n", "                    ", "ALT", "=", "0.4", "\n", "\n", "#YAW BLOCK", "\n", "", "", "if", "yawLeftRight", "==", "-", "1", ":", "\n", "#left", "\n", "                ", "YAW", "=", "-", "YAW_RATE", "\n", "", "elif", "yawLeftRight", "==", "1", ":", "\n", "#right", "\n", "                ", "YAW", "=", "YAW_RATE", "\n", "", "else", ":", "\n", "                ", "YAW", "=", "0", "\n", "\n", "", "cf", ".", "commander", ".", "send_hover_setpoint", "(", "VX", ",", "VY", ",", "YAW", ",", "ALT", ")", "\n", "print", "(", "\"VALS: (VX %.2f, VY %.2f, YAW %.2f, ALT %.2f\"", "%", "(", "VX", ",", "VY", ",", "YAW", ",", "ALT", ")", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.configs.train_in_sim.bhat_label_func": [[175, 183], ["np.power", "np.arange", "rewards.get_shape"], "function", ["None"], ["def", "bhat_label_func", "(", "rewards", ",", "dones", ",", "goals", ",", "target_obs_vec", ",", "gamma", ",", "\n", "future_goals", ",", "target_yhats", ",", "target_bhats", ",", "target_values", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "H", "=", "rewards", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "gammas", "=", "np", ".", "power", "(", "gamma", ",", "np", ".", "arange", "(", "1", ",", "H", "+", "1", ")", ")", "\n", "bhat_label", "=", "target_obs_vec", "[", "'coll'", "]", "+", "(", "1.", "-", "dones", "[", ":", ",", "1", ":", "]", ")", "*", "gammas", "*", "target_values", "[", "'coll'", "]", "\n", "\n", "return", "bhat_label", "\n", "\n"]], "home.repos.pwc.inspect_result.gkahn13_GtS.configs.eval_in_sim.bhat_label_func": [[180, 188], ["np.power", "np.arange", "rewards.get_shape"], "function", ["None"], ["def", "bhat_label_func", "(", "rewards", ",", "dones", ",", "goals", ",", "target_obs_vec", ",", "gamma", ",", "\n", "future_goals", ",", "target_yhats", ",", "target_bhats", ",", "target_values", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "H", "=", "rewards", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "gammas", "=", "np", ".", "power", "(", "gamma", ",", "np", ".", "arange", "(", "1", ",", "H", "+", "1", ")", ")", "\n", "bhat_label", "=", "target_obs_vec", "[", "'coll'", "]", "+", "(", "1.", "-", "dones", "[", ":", ",", "1", ":", "]", ")", "*", "gammas", "*", "target_values", "[", "'coll'", "]", "\n", "\n", "return", "bhat_label", "\n", "\n"]]}