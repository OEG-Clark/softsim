{"home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.convert_to_idx": [[13, 15], ["vocab.word2id"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id"], ["    ", "def", "convert_to_idx", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "return", "[", "vocab", ".", "word2id", "(", "node", ")", "for", "node", "in", "self", ".", "nodes", "]", "\n", "", "def", "convert_to_idx_nei", "(", "self", ",", "vocab", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.convert_to_idx_nei": [[15, 17], ["vocab.word2id"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id"], ["", "def", "convert_to_idx_nei", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "return", "[", "vocab", ".", "word2id", "(", "node", ")", "for", "node", "in", "self", ".", "neibour", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.sparse_to_dense": [[18, 25], ["len", "range", "range"], "methods", ["None"], ["", "def", "sparse_to_dense", "(", "self", ")", ":", "\n", "        ", "node_num", "=", "len", "(", "self", ".", "nodes", ")", "\n", "adj", "=", "[", "[", "0", "for", "_", "in", "range", "(", "node_num", ")", "]", "for", "_", "in", "range", "(", "node_num", ")", "]", "\n", "for", "word_id_1", "in", "self", ".", "graph", ":", "\n", "            ", "for", "word_id_2", "in", "self", ".", "graph", "[", "word_id_1", "]", ":", "\n", "                ", "adj", "[", "word_id_1", "]", "[", "word_id_2", "]", "=", "self", ".", "graph", "[", "word_id_1", "]", "[", "word_id_2", "]", "\n", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_full.__init__": [[28, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_keywords", ",", "title", ")", ":", "\n", "#self.query = query", "\n", "        ", "self", ".", "query_keywords", "=", "query_keywords", "\n", "self", ".", "title_keywords", "=", "title", "\n", "# the core component of subgraph, holds the connection between keywords, stored in the format of dict[dict]", "\n", "self", ".", "graph", "=", "{", "}", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "word2node", "=", "{", "}", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_full.build_subgraph": [[39, 63], ["set", "set", "set().union", "list", "set", "set", "range", "file.SubGraph_full.word_type.append", "len", "file.SubGraph_full.word_type.append", "file.SubGraph_full.word_type.append"], "methods", ["None"], ["", "def", "build_subgraph", "(", "self", ",", "kg", ")", ":", "\n", "        ", "word_set_query", "=", "set", "(", "self", ".", "query_keywords", ")", "\n", "word_set_title", "=", "set", "(", "self", ".", "title_keywords", ")", "\n", "word_set", "=", "set", "(", "self", ".", "query_keywords", ")", ".", "union", "(", "set", "(", "self", ".", "title_keywords", ")", ")", "\n", "self", ".", "nodes", "=", "list", "(", "word_set", ")", "\n", "self", ".", "word2node", "=", "{", "self", ".", "nodes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nodes", ")", ")", "}", "\n", "for", "word", "in", "self", ".", "nodes", ":", "\n", "            ", "if", "word", "in", "word_set_query", "and", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "1", ")", "\n", "", "elif", "word", "in", "word_set_query", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "2", ")", "\n", "", "elif", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "3", ")", "\n", "", "", "for", "word_1", "in", "self", ".", "nodes", ":", "\n", "            ", "for", "word_2", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "word_1", "==", "word_2", ":", "\n", "                    ", "continue", "\n", "", "if", "word_1", "in", "kg", "and", "word_2", "in", "kg", "[", "word_1", "]", ":", "\n", "                    ", "if", "self", ".", "word2node", "[", "word_1", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "{", "}", "\n", "", "if", "self", ".", "word2node", "[", "word_2", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "{", "}", "\n", "", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_full.__init__": [[65, 72], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subgraph", ",", "subgraph_full", ")", ":", "\n", "        ", "self", ".", "nodes_min", "=", "copy", ".", "deepcopy", "(", "subgraph", ".", "nodes", ")", "\n", "self", ".", "nodes", "=", "copy", ".", "deepcopy", "(", "subgraph_full", ".", "nodes", ")", "\n", "self", ".", "graph", "=", "copy", ".", "deepcopy", "(", "subgraph_full", ".", "graph", ")", "\n", "self", ".", "word2node", "=", "copy", ".", "deepcopy", "(", "subgraph_full", ".", "word2node", ")", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type_extend", "=", "copy", ".", "deepcopy", "(", "subgraph_full", ".", "word_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_full.extend": [[74, 102], ["list", "set", "file.ExtendGraph_full.nodes.append", "file.ExtendGraph_full.word_type_extend.append", "KG[].keys", "list.append", "neibour_add.append", "KG[].keys", "len", "len"], "methods", ["None"], ["", "def", "extend", "(", "self", ",", "KG", ")", ":", "\n", "        ", "node_set", "=", "list", "(", "set", "(", "self", ".", "nodes_min", ")", ")", "\n", "neibour_add", "=", "[", "]", "\n", "\n", "for", "node", "in", "self", ".", "nodes_min", ":", "\n", "            ", "if", "node", "in", "KG", ":", "\n", "                ", "neighbors", "=", "KG", "[", "node", "]", ".", "keys", "(", ")", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "                    ", "if", "neighbor", "not", "in", "node_set", "and", "neighbor", "not", "in", "neibour_add", ":", "\n", "                        ", "node_set", ".", "append", "(", "neighbor", ")", "\n", "neibour_add", ".", "append", "(", "neighbor", ")", "\n", "self", ".", "word2node", "[", "neighbor", "]", "=", "len", "(", "self", ".", "nodes", ")", "+", "len", "(", "neibour_add", ")", "-", "1", "\n", "\n", "", "", "", "", "for", "neighbor", "in", "neibour_add", ":", "\n", "            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "{", "}", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "node", "in", "KG", ":", "\n", "                    ", "if", "neighbor", "in", "KG", "[", "node", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "self", ".", "word2node", "[", "node", "]", "not", "in", "self", ".", "graph", ":", "\n", "                            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "{", "}", "\n", "", "edge", "=", "KG", "[", "node", "]", "[", "neighbor", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "edge", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "edge", "\n", "\n", "", "", "", "", "for", "neibour", "in", "neibour_add", ":", "\n", "            ", "self", ".", "nodes", ".", "append", "(", "neibour", ")", "\n", "self", ".", "word_type_extend", ".", "append", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph.__init__": [[106, 113], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subgraph", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "copy", ".", "deepcopy", "(", "subgraph", ".", "nodes", ")", "\n", "self", ".", "graph", "=", "copy", ".", "deepcopy", "(", "subgraph", ".", "graph", ")", "\n", "self", ".", "word2node", "=", "copy", ".", "deepcopy", "(", "subgraph", ".", "word2node", ")", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type_extend", "=", "copy", ".", "deepcopy", "(", "subgraph", ".", "word_type", ")", "\n", "self", ".", "neibour", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph.extend": [[114, 144], ["list", "set", "file.ExtendGraph.neibour.append", "file.ExtendGraph.nodes.append", "file.ExtendGraph.word_type_extend.append", "KG[].keys", "list.append", "neibour_add.append", "KG[].keys", "len", "len"], "methods", ["None"], ["", "def", "extend", "(", "self", ",", "KG", ")", ":", "\n", "        ", "node_set", "=", "list", "(", "set", "(", "self", ".", "nodes", ")", ")", "\n", "neibour_add", "=", "[", "]", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "            ", "if", "node", "in", "KG", ":", "\n", "                ", "neighbors", "=", "KG", "[", "node", "]", ".", "keys", "(", ")", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "                    ", "if", "neighbor", "not", "in", "node_set", "and", "neighbor", "not", "in", "neibour_add", ":", "\n", "                        ", "node_set", ".", "append", "(", "neighbor", ")", "\n", "neibour_add", ".", "append", "(", "neighbor", ")", "\n", "self", ".", "word2node", "[", "neighbor", "]", "=", "len", "(", "self", ".", "nodes", ")", "+", "len", "(", "neibour_add", ")", "-", "1", "\n", "\n", "", "", "", "", "for", "neighbor", "in", "neibour_add", ":", "\n", "            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "{", "}", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "node", "in", "KG", ":", "\n", "                    ", "if", "neighbor", "in", "KG", "[", "node", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "self", ".", "word2node", "[", "node", "]", "not", "in", "self", ".", "graph", ":", "\n", "                            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "{", "}", "\n", "\n", "", "edge", "=", "KG", "[", "node", "]", "[", "neighbor", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "edge", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "edge", "\n", "\n", "", "", "", "", "for", "neibour", "in", "neibour_add", ":", "\n", "            ", "self", ".", "neibour", ".", "append", "(", "neibour", ")", "\n", "self", ".", "nodes", ".", "append", "(", "neibour", ")", "\n", "self", ".", "word_type_extend", ".", "append", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph.__init__": [[148, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_keywords", ",", "title_keywords", ")", ":", "\n", "#self.query = query", "\n", "        ", "self", ".", "query_keywords", "=", "query_keywords", "\n", "self", ".", "title_keywords", "=", "title_keywords", "\n", "# the core component of subgraph, holds the connection between keywords, stored in the format of dict[dict]", "\n", "self", ".", "graph", "=", "{", "}", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "word2node", "=", "{", "}", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph.build_subgraph": [[159, 183], ["set", "set", "set().union", "list", "set", "set", "range", "file.SubGraph.word_type.append", "len", "file.SubGraph.word_type.append", "file.SubGraph.word_type.append"], "methods", ["None"], ["", "def", "build_subgraph", "(", "self", ",", "kg", ")", ":", "\n", "        ", "word_set_query", "=", "set", "(", "self", ".", "query_keywords", ")", "\n", "word_set_title", "=", "set", "(", "self", ".", "title_keywords", ")", "\n", "word_set", "=", "set", "(", "self", ".", "query_keywords", ")", ".", "union", "(", "set", "(", "self", ".", "title_keywords", ")", ")", "\n", "self", ".", "nodes", "=", "list", "(", "word_set", ")", "\n", "self", ".", "word2node", "=", "{", "self", ".", "nodes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nodes", ")", ")", "}", "\n", "for", "word", "in", "self", ".", "nodes", ":", "\n", "            ", "if", "word", "in", "word_set_query", "and", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "1", ")", "\n", "", "elif", "word", "in", "word_set_query", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "2", ")", "\n", "", "elif", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "3", ")", "\n", "", "", "for", "word_1", "in", "self", ".", "nodes", ":", "\n", "            ", "for", "word_2", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "word_1", "==", "word_2", ":", "\n", "                    ", "continue", "\n", "", "if", "word_1", "in", "kg", "and", "word_2", "in", "kg", "[", "word_1", "]", ":", "\n", "                    ", "if", "self", ".", "word2node", "[", "word_1", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "{", "}", "\n", "", "if", "self", ".", "word2node", "[", "word_2", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "{", "}", "\n", "", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "# if self.word2node[word_2] in kg[self.word2node[word_1]]:", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.__init__": [[187, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "query_keywords", ",", "title_keywords", ")", ":", "\n", "        ", "self", ".", "query_keywords", "=", "query_keywords", "\n", "self", ".", "title_keywords", "=", "title_keywords", "\n", "# the core component of subgraph, holds the connection between keywords, stored in the format of dict[dict]", "\n", "self", ".", "graph", "=", "{", "}", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "word2node", "=", "{", "}", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.build_subgraph": [[198, 222], ["set", "set", "set", "list", "range", "file.SubGraph_k.word_type.append", "len", "file.SubGraph_k.word_type.append", "file.SubGraph_k.word_type.append"], "methods", ["None"], ["", "def", "build_subgraph", "(", "self", ",", "kg", ")", ":", "\n", "        ", "word_set_query", "=", "set", "(", "self", ".", "query_keywords", ")", "\n", "word_set_title", "=", "set", "(", "self", ".", "title_keywords", ")", "\n", "word_set", "=", "set", "(", "self", ".", "title_keywords", ")", "\n", "self", ".", "nodes", "=", "list", "(", "word_set", ")", "\n", "self", ".", "word2node", "=", "{", "self", ".", "nodes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "nodes", ")", ")", "}", "\n", "for", "word", "in", "self", ".", "nodes", ":", "\n", "            ", "if", "word", "in", "word_set_query", "and", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "1", ")", "\n", "", "elif", "word", "in", "word_set_query", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "2", ")", "\n", "", "elif", "word", "in", "word_set_title", ":", "\n", "                ", "self", ".", "word_type", ".", "append", "(", "3", ")", "\n", "", "", "for", "word_1", "in", "self", ".", "nodes", ":", "\n", "            ", "for", "word_2", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "word_1", "==", "word_2", ":", "\n", "                    ", "continue", "\n", "", "if", "word_1", "in", "kg", "and", "word_2", "in", "kg", "[", "word_1", "]", ":", "\n", "                    ", "if", "self", ".", "word2node", "[", "word_1", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "{", "}", "\n", "", "if", "self", ".", "word2node", "[", "word_2", "]", "not", "in", "self", ".", "graph", ":", "\n", "                        ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "{", "}", "\n", "", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "word_2", "]", "]", "[", "self", ".", "word2node", "[", "word_1", "]", "]", "=", "kg", "[", "word_1", "]", "[", "word_2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.__init__": [[225, 232], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subgraph_k", ")", ":", "\n", "        ", "self", ".", "nodes", "=", "copy", ".", "deepcopy", "(", "subgraph_k", ".", "nodes", ")", "\n", "self", ".", "graph", "=", "copy", ".", "deepcopy", "(", "subgraph_k", ".", "graph", ")", "\n", "self", ".", "word2node", "=", "copy", ".", "deepcopy", "(", "subgraph_k", ".", "word2node", ")", "\n", "self", ".", "adj", "=", "[", "]", "\n", "self", ".", "word_type_extend", "=", "copy", ".", "deepcopy", "(", "subgraph_k", ".", "word_type", ")", "\n", "self", ".", "neibour", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.extend": [[233, 262], ["list", "set", "file.ExtendGraph_k.neibour.append", "file.ExtendGraph_k.nodes.append", "file.ExtendGraph_k.word_type_extend.append", "KG[].keys", "list.append", "neibour_add.append", "KG[].keys", "len", "len"], "methods", ["None"], ["", "def", "extend", "(", "self", ",", "KG", ")", ":", "\n", "        ", "node_set", "=", "list", "(", "set", "(", "self", ".", "nodes", ")", ")", "\n", "neibour_add", "=", "[", "]", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "            ", "if", "node", "in", "KG", ":", "\n", "                ", "neighbors", "=", "KG", "[", "node", "]", ".", "keys", "(", ")", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "                    ", "if", "neighbor", "not", "in", "node_set", "and", "neighbor", "not", "in", "neibour_add", ":", "\n", "                        ", "node_set", ".", "append", "(", "neighbor", ")", "\n", "neibour_add", ".", "append", "(", "neighbor", ")", "\n", "self", ".", "word2node", "[", "neighbor", "]", "=", "len", "(", "self", ".", "nodes", ")", "+", "len", "(", "neibour_add", ")", "-", "1", "\n", "\n", "", "", "", "", "for", "neighbor", "in", "neibour_add", ":", "\n", "            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "{", "}", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "if", "node", "in", "KG", ":", "\n", "                    ", "if", "neighbor", "in", "KG", "[", "node", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "self", ".", "word2node", "[", "node", "]", "not", "in", "self", ".", "graph", ":", "\n", "                            ", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "{", "}", "\n", "", "edge", "=", "KG", "[", "node", "]", "[", "neighbor", "]", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "node", "]", "]", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "=", "edge", "\n", "self", ".", "graph", "[", "self", ".", "word2node", "[", "neighbor", "]", "]", "[", "self", ".", "word2node", "[", "node", "]", "]", "=", "edge", "\n", "\n", "", "", "", "", "for", "neibour", "in", "neibour_add", ":", "\n", "            ", "self", ".", "neibour", ".", "append", "(", "neibour", ")", "\n", "self", ".", "nodes", ".", "append", "(", "neibour", ")", "\n", "self", ".", "word_type_extend", ".", "append", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.__init__": [[267, 275], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "map", "=", "{", "}", "\n", "self", ".", "total_word_appearance", "=", "0", "\n", "self", ".", "word_appearance", "=", "{", "}", "\n", "self", ".", "pmi", "=", "{", "}", "\n", "# the core component of graph, holds the connection between words, stored in the format of dict[dict]", "\n", "self", ".", "KG", "=", "{", "}", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.build_kg": [[276, 295], ["json.load", "open", "list", "file.KnowledgeGraph.map_keywords", "set", "list.remove", "removelist.append"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.map_keywords"], ["", "def", "build_kg", "(", "self", ",", "data", ",", "vocab_file", ")", ":", "\n", "        ", "vocab_words", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ")", ")", "\n", "for", "item", "in", "data", ":", "\n", "            ", "q_keywords", ",", "t_keywords", ",", "ad_keywords", "=", "item", "\n", "#print(q_keywords)", "\n", "#print(ad_keywords)", "\n", "words", "=", "list", "(", "set", "(", "q_keywords", "+", "ad_keywords", ")", ")", "\n", "#words = list(set(ad_keywords))", "\n", "#print(words)", "\n", "removelist", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                ", "if", "word", "not", "in", "vocab_words", "and", "word", "not", "in", "removelist", ":", "\n", "                    ", "removelist", ".", "append", "(", "word", ")", "\n", "", "", "for", "i", "in", "removelist", ":", "\n", "\n", "                ", "words", ".", "remove", "(", "i", ")", "\n", "#print(word)", "\n", "\n", "", "self", ".", "map_keywords", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.get_kg": [[296, 311], ["print", "print", "print"], "methods", ["None"], ["", "", "def", "get_kg", "(", "self", ")", ":", "\n", "        ", "kg_node", "=", "0", "\n", "kg_edge", "=", "0", "\n", "for", "word1", "in", "self", ".", "pmi", ":", "\n", "            ", "for", "word2", "in", "self", ".", "pmi", "[", "word1", "]", ":", "\n", "                ", "if", "self", ".", "pmi", "[", "word1", "]", "[", "word2", "]", ">", "0", ":", "\n", "                    ", "if", "word1", "not", "in", "self", ".", "KG", ":", "\n", "                        ", "self", ".", "KG", "[", "word1", "]", "=", "{", "}", "\n", "kg_node", "+=", "1", "\n", "", "self", ".", "KG", "[", "word1", "]", "[", "word2", "]", "=", "self", ".", "pmi", "[", "word1", "]", "[", "word2", "]", "\n", "kg_edge", "+=", "1", "\n", "", "", "if", "kg_node", "%", "1000", "==", "0", "and", "kg_edge", "!=", "0", ":", "\n", "                ", "print", "(", "(", "'\u8fdb\u7a0b{}\uff0c\u5e73\u5747\u8fb9{}'", ")", ".", "format", "(", "kg_node", ",", "kg_edge", "/", "kg_node", ")", ")", "\n", "", "", "print", "(", "kg_node", ")", "\n", "print", "(", "kg_edge", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.cal_pmi": [[316, 340], ["file.KnowledgeGraph.cal_pmi.pmi"], "methods", ["None"], ["", "def", "cal_pmi", "(", "self", ")", ":", "\n", "\n", "        ", "def", "pmi", "(", "pmi_map", ",", "frequency_map", ")", ":", "\n", "            ", "kg_edge", "=", "0", "\n", "word_num", "=", "0", "\n", "for", "word_1", "in", "frequency_map", ":", "\n", "                ", "pmi_map", "[", "word_1", "]", "=", "{", "}", "\n", "word_num", "+=", "1", "\n", "for", "word_2", "in", "frequency_map", "[", "word_1", "]", ":", "\n", "                    ", "pmi_1_2", "=", "math", ".", "log", "(", "(", "frequency_map", "[", "word_1", "]", "[", "word_2", "]", "*", "self", ".", "total_word_appearance", ")", "/", "(", "self", ".", "word_appearance", "[", "word_1", "]", "*", "self", ".", "word_appearance", "[", "word_2", "]", ")", ")", "\n", "if", "pmi_1_2", ">", "0", ":", "\n", "                        ", "pmi_map", "[", "word_1", "]", "[", "word_2", "]", "=", "pmi_1_2", "\n", "kg_edge", "+=", "1", "\n", "", "", "if", "word_num", "%", "1000", "==", "0", ":", "\n", "                    ", "print", "(", "'word_num:{},edge:{}'", ".", "format", "(", "word_num", ",", "kg_edge", ")", ")", "\n", "", "", "print", "(", "kg_edge", ")", "\n", "\n", "#pmi(self.pmi, self.map)", "\n", "", "pmi", "(", "self", ".", "KG", ",", "self", ".", "map", ")", "\n", "\n", "word_sum", "=", "list", "(", "self", ".", "KG", ".", "keys", "(", ")", ")", "\n", "print", "(", "len", "(", "word_sum", ")", ")", "\n", "#print(self.pmi)", "\n", "print", "(", "'pmi get'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.KnowledgeGraph.map_keywords": [[342, 360], ["len", "file.KnowledgeGraph.map_keywords.mapping"], "methods", ["None"], ["", "def", "map_keywords", "(", "self", ",", "words", ")", ":", "\n", "# Using self.q_t, q_q, t_t map", "\n", "        ", "def", "mapping", "(", "words", ",", "word_map", ")", ":", "\n", "            ", "for", "word_1", "in", "words", ":", "\n", "                ", "if", "word_1", "not", "in", "word_map", ":", "\n", "                    ", "word_map", "[", "word_1", "]", "=", "{", "}", "\n", "", "for", "word_2", "in", "words", ":", "\n", "                    ", "if", "word_2", "!=", "word_1", ":", "\n", "                        ", "if", "word_2", "not", "in", "word_map", "[", "word_1", "]", ":", "\n", "                            ", "word_map", "[", "word_1", "]", "[", "word_2", "]", "=", "0", "\n", "", "word_map", "[", "word_1", "]", "[", "word_2", "]", "+=", "1", "\n", "\n", "", "", "", "", "self", ".", "total_word_appearance", "+=", "len", "(", "words", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word", "not", "in", "self", ".", "word_appearance", ":", "\n", "                ", "self", ".", "word_appearance", "[", "word", "]", "=", "0", "\n", "", "self", ".", "word_appearance", "[", "word", "]", "+=", "1", "\n", "", "mapping", "(", "words", ",", "self", ".", "map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.set_parameters": [[8, 22], ["list", "torch.SGD", "torch.SGD", "torch.RMSprop", "torch.RMSprop", "torch.Adagrad", "torch.Adagrad", "torch.Adadelta", "torch.Adadelta", "torch.Adam", "torch.Adam", "RuntimeError"], "methods", ["None"], ["    ", "def", "set_parameters", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "list", "(", "params", ")", "# careful: params may be a generator", "\n", "if", "self", ".", "method", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "method", "==", "'rmsprop'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "method", "==", "'adagrad'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adagrad", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "method", "==", "'adadelta'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adadelta", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "elif", "self", ".", "method", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Invalid optim method: \"", "+", "self", ".", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.__init__": [[23, 31], ["None"], "methods", ["None"], ["", "", "def", "__init__", "(", "self", ",", "method", ",", "lr", ",", "max_grad_norm", ",", "lr_decay", "=", "1", ",", "start_decay_at", "=", "None", ")", ":", "\n", "        ", "self", ".", "last_ppl", "=", "None", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "lr_decay", "=", "lr_decay", "\n", "self", ".", "start_decay_at", "=", "start_decay_at", "\n", "self", ".", "start_decay", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.step": [[32, 37], ["optims.Optim.optimizer.step", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "# Compute gradients norm.", "\n", "        ", "if", "self", ".", "max_grad_norm", ":", "\n", "            ", "clip_grad_norm_", "(", "self", ".", "params", ",", "self", ".", "max_grad_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.updateLearningRate": [[39, 51], ["print"], "methods", ["None"], ["", "def", "updateLearningRate", "(", "self", ",", "ppl", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "start_decay_at", "is", "not", "None", "and", "epoch", ">=", "self", ".", "start_decay_at", ":", "\n", "            ", "self", ".", "start_decay", "=", "True", "\n", "", "if", "self", ".", "last_ppl", "is", "not", "None", "and", "ppl", ">", "self", ".", "last_ppl", ":", "\n", "            ", "self", ".", "start_decay", "=", "True", "\n", "\n", "", "if", "self", ".", "start_decay", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "lr", "*", "self", ".", "lr_decay", "\n", "print", "(", "\"Decaying learning rate to %g\"", "%", "self", ".", "lr", ")", "\n", "\n", "", "self", ".", "last_ppl", "=", "ppl", "\n", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.parse_args": [[30, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "util.utils.read_config"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.parse_args", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.read_config"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'train.py'", ")", "\n", "parser", ".", "add_argument", "(", "'-config'", ",", "default", "=", "'config.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"config file\"", ")", "\n", "parser", ".", "add_argument", "(", "'-model'", ",", "default", "=", "'transformer_gcn'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'seq2seq'", ",", "'transformer'", ",", "'transformer_gcn'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'-gpus'", ",", "default", "=", "[", "1", "]", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Use CUDA on the listed devices.\"", ")", "\n", "parser", ".", "add_argument", "(", "'-restore'", ",", "\n", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "\"restore checkpoint\"", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "type", "=", "int", ",", "default", "=", "2222", ",", "\n", "help", "=", "\"Random seed\"", ")", "\n", "parser", ".", "add_argument", "(", "'-type'", ",", "default", "=", "'train'", ",", "choices", "=", "[", "'train'", ",", "'eval'", "]", ",", "\n", "help", "=", "'train type or eval'", ")", "\n", "parser", ".", "add_argument", "(", "'-log'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "\"log directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'-train_type'", ",", "default", "=", "'generate'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'generate'", ",", "'sample_rl'", "]", ")", "\n", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "# \u7528config.data\u6765\u5f97\u5230config\u4e2d\u7684data\u9009\u9879", "\n", "config", "=", "util", ".", "utils", ".", "read_config", "(", "opt", ".", "config", ")", "\n", "return", "opt", ",", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.set_up_logging": [[65, 83], ["util.utils.logging", "util.utils.logging_csv", "config.items", "utils.logging.", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "utils.logging.", "util.utils.format_time", "time.localtime", "str", "str"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging_csv", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.format_time"], ["def", "set_up_logging", "(", ")", ":", "\n", "# log\u4e3a\u8bb0\u5f55\u6587\u4ef6", "\n", "# config.log\u662f\u8bb0\u5f55\u7684\u6587\u4ef6\u5939, \u6700\u540e\u4e00\u5b9a\u662f/", "\n", "# opt.log\u662f\u6b64\u6b21\u8fd0\u884c\u65f6\u8bb0\u5f55\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "log", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", ".", "log", ")", "\n", "", "if", "args", ".", "log", "==", "''", ":", "\n", "        ", "log_path", "=", "config", ".", "log", "+", "utils", ".", "format_time", "(", "time", ".", "localtime", "(", ")", ")", "+", "'/'", "\n", "", "else", ":", "\n", "        ", "log_path", "=", "config", ".", "log", "+", "args", ".", "log", "+", "'/'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_path", ")", "\n", "", "logging", "=", "utils", ".", "logging", "(", "log_path", "+", "'log.txt'", ")", "# \u5f80\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5199\u8bb0\u5f55", "\n", "logging_csv", "=", "utils", ".", "logging_csv", "(", "log_path", "+", "'record.csv'", ")", "# \u5f80\u8fd9\u4e2a\u6587\u4ef6\u91cc\u5199\u8bb0\u5f55", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "logging", "(", "\"%s:\\t%s\\n\"", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "logging", "(", "\"\\n\"", ")", "\n", "return", "logging", ",", "logging_csv", ",", "log_path", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train": [[90, 224], ["range", "train.get_dataloader", "train.get_dataloader", "train.eval", "time.time", "model_sample.train", "model_generate.train", "tqdm.tqdm", "scheduler_sample.step", "scheduler_generate.step", "print", "print", "model_sample.zero_grad", "model_generate.zero_grad", "model_sample", "len", "model_generate", "model_generate.compute_loss", "torch.isnan", "torch.isnan", "torch.tanh.backward", "optim_generate.step", "torch.stack", "torch.stack", "torch.sigmoid.size", "torch.tanh.data.item", "torch.tanh.data.item", "logging", "logging", "print", "train.eval", "scores.append", "model_sample.train", "model_generate.train", "time.time", "train.save_model", "s.cuda", "logging", "model_generate", "model_generate.compute_loss_sample", "torch.tanh.mean", "torch.stack", "torch.stack", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.size", "torch.tanh", "torch.tanh", "torch.mul", "torch.mul", "torch.mul.backward", "optim_sample.step", "print", "train.save_model", "scheduler_sample.get_lr", "scheduler_generate.get_lr", "torch.sigmoid.sum", "s.cuda", "torch.log", "torch.log", "torch.tanh.detach", "torch.mul.sum", "logging", "torch.stack.sum", "scheduler_generate.get_lr", "str", "time.time", "str"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.compute_loss", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.save_model", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.compute_loss_sample", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.save_model", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.get_lr", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.get_lr", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.get_lr"], ["def", "train", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_train", ",", "dataloader_dev", ",", "dataloader_dev_qk", ",", "scheduler_sample", ",", "scheduler_generate", ",", "optim_sample", ",", "optim_generate", ",", "updates", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "max_bleu", "=", "0.", "\n", "for", "epoch", "in", "range", "(", "1", ",", "config", ".", "epoch", "+", "1", ")", ":", "\n", "        ", "total_acc", "=", "0.", "\n", "total_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "model_sample", ".", "train", "(", ")", "\n", "model_generate", ".", "train", "(", ")", "\n", "\n", "\n", "if", "config", ".", "schedule", ":", "\n", "            ", "scheduler_sample", ".", "step", "(", ")", "\n", "scheduler_generate", ".", "step", "(", ")", "\n", "print", "(", "\"Decaying sample learning rate to %g\"", "%", "scheduler_sample", ".", "get_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "\"Decaying generate learning rate to %g\"", "%", "scheduler_generate", ".", "get_lr", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "loss_view", "=", "0", "\n", "prob_view", "=", "0", "\n", "batch_view", "=", "0", "\n", "loss_rl_view", "=", "0", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader_train", ")", ":", "\n", "            ", "if", "len", "(", "batch", ".", "sub_node_idx", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "model_sample", ".", "zero_grad", "(", ")", "\n", "model_generate", ".", "zero_grad", "(", ")", "\n", "\n", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "sample_prob", ",", "tgt", ",", "word_type", ",", "query_batch", ",", "sub_batch", "=", "model_sample", "(", "\n", "batch", ",", "train_type", "=", "args", ".", "train_type", ",", "sample", "=", "True", ",", "sample_type", "=", "'train'", ")", "\n", "\n", "assert", "args", ".", "train_type", "in", "[", "'generate'", ",", "'sample_rl'", "]", "\n", "if", "args", ".", "train_type", "==", "'generate'", ":", "\n", "                ", "output", ",", "x", ",", "state", "=", "model_generate", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "tgt", ",", "word_type", ")", "\n", "generate_loss", ",", "acc", "=", "model_generate", ".", "compute_loss", "(", "output", ",", "tgt", ")", "\n", "if", "torch", ".", "isnan", "(", "generate_loss", ")", ":", "\n", "                    ", "break", "\n", "", "generate_loss", ".", "backward", "(", ")", "\n", "\n", "optim_generate", ".", "step", "(", ")", "\n", "sample_prob", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sample_prob", "]", "\n", "sample_prob", "=", "torch", ".", "stack", "(", "sample_prob", ",", "0", ")", "\n", "prob_num", "=", "sample_prob", ".", "size", "(", "0", ")", "\n", "\n", "updates", "+=", "1", "\n", "\n", "total_loss", "+=", "generate_loss", ".", "data", ".", "item", "(", ")", "\n", "loss_view", "+=", "generate_loss", ".", "data", ".", "item", "(", ")", "\n", "prob_view", "+=", "(", "(", "sample_prob", ".", "sum", "(", ")", ")", "/", "prob_num", ")", ".", "data", "\n", "batch_view", "+=", "1", "\n", "if", "batch_view", "==", "100", ":", "\n", "                    ", "logging", "(", "'loss {} prob {} epoch {} update {} \\n'", ".", "format", "(", "loss_view", ",", "prob_view", ",", "epoch", ",", "updates", ")", ")", "\n", "loss_view", "=", "0", "\n", "prob_view", "=", "0", "\n", "batch_view", "=", "0", "\n", "", "total_acc", "+=", "acc", "\n", "\n", "\n", "", "elif", "args", ".", "train_type", "==", "'sample_rl'", ":", "\n", "\n", "                ", "output", ",", "x", ",", "state", "=", "model_generate", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "tgt", ",", "word_type", ")", "\n", "generate_loss", ",", "acc", "=", "model_generate", ".", "compute_loss_sample", "(", "output", ",", "tgt", ")", "\n", "loss_view_batch", "=", "generate_loss", ".", "mean", "(", ")", "\n", "\n", "sample_prob", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sample_prob", "]", "\n", "sample_prob_ori", "=", "torch", ".", "stack", "(", "sample_prob", ",", "0", ")", "\n", "sample_prob", "=", "torch", ".", "sigmoid", "(", "sample_prob_ori", "-", "1", ")", "\n", "sample_prob", "=", "-", "torch", ".", "log", "(", "sample_prob", ")", "\n", "\n", "prob_num", "=", "sample_prob", ".", "size", "(", "0", ")", "\n", "generate_loss", "=", "torch", ".", "tanh", "(", "generate_loss", ")", "\n", "generate_loss", "=", "generate_loss", ".", "detach", "(", ")", ".", "data", "\n", "\n", "reward", "=", "1", "-", "generate_loss", "\n", "\n", "\n", "loss", "=", "torch", ".", "mul", "(", "reward", ",", "sample_prob", ")", "\n", "loss", "=", "(", "loss", ".", "sum", "(", "0", ")", ")", "/", "prob_num", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "optim_sample", ".", "step", "(", ")", "\n", "\n", "updates", "+=", "1", "\n", "\n", "\n", "prob_view", "+=", "(", "(", "sample_prob_ori", ".", "sum", "(", ")", ")", "/", "prob_num", ")", ".", "data", "\n", "total_loss", "+=", "loss_view_batch", ".", "data", "\n", "loss_view", "+=", "loss_view_batch", ".", "data", "\n", "loss_rl_view", "+=", "loss", ".", "data", "\n", "\n", "batch_view", "+=", "1", "\n", "if", "batch_view", "==", "100", ":", "\n", "                    ", "logging", "(", "'loss {} prob {} loss_rl{}  epoch {} update {} \\n'", ".", "format", "(", "loss_view", ",", "prob_view", ",", "loss_rl_view", ",", "epoch", ",", "updates", ")", ")", "\n", "loss_view", "=", "0", "\n", "prob_view", "=", "0", "\n", "batch_view", "=", "0", "\n", "loss_rl_view", "=", "0", "\n", "", "total_acc", "+=", "acc", "\n", "\n", "", "else", ":", "\n", "                ", "print", "(", "'error'", ")", "\n", "break", "\n", "\n", "\n", "\n", "", "if", "updates", "%", "config", ".", "eval_interval", "==", "0", ":", "\n", "                ", "logging", "(", "\"time: %6.3f, epoch: %3d, updates: %8d, train loss: %6.3f, train acc: %.3f\\n\"", "\n", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "epoch", ",", "updates", ",", "total_loss", "/", "config", ".", "eval_interval", ",", "\n", "total_acc", "/", "config", ".", "eval_interval", ")", ")", "\n", "logging", "(", "\"learning rate to %g\"", "%", "scheduler_generate", ".", "get_lr", "(", ")", "[", "0", "]", ")", "\n", "print", "(", "'evaluating after %d updates...\\r'", "%", "updates", ")", "\n", "# TODO: fix eval and print bleu, ppl", "\n", "score", "=", "eval", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_dev", ",", "dataloader_dev_qk", ",", "epoch", ",", "updates", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "if", "score", ">=", "max_bleu", ":", "\n", "                    ", "save_model", "(", "log_path", "+", "str", "(", "score", ")", "+", "'_checkpoint.pt'", ",", "model_sample", ",", "model_generate", ",", "optim_sample", ",", "optim_generate", ",", "updates", ")", "\n", "max_bleu", "=", "score", "\n", "\n", "", "model_sample", ".", "train", "(", ")", "\n", "model_generate", ".", "train", "(", ")", "\n", "total_loss", "=", "0.", "\n", "total_acc", "=", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "updates", "%", "config", ".", "save_interval", "==", "0", ":", "\n", "                ", "save_model", "(", "log_path", "+", "str", "(", "updates", ")", "+", "'_updates_checkpoint.pt'", ",", "model_sample", ",", "model_generate", ",", "optim_sample", ",", "optim_generate", ",", "updates", ")", "\n", "", "", "", "dataloader_test", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'test'", ",", "train_type", "=", "'k'", ")", "\n", "dataloader_test_qk", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'test'", ",", "train_type", "=", "'qk'", ")", "\n", "\n", "eval", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_test", ",", "dataloader_test_qk", ",", "0", ",", "updates", ")", "\n", "return", "max_bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval": [[227, 317], ["model_sample.eval", "model_generate.eval", "tqdm.tqdm", "tqdm.tqdm", "util.utils.eval_bleu", "util.utils.eval_bleu", "util.utils.eval_bleu", "util.utils.eval_bleu", "logging_csv", "util.utils.write_result_to_file", "zip", "model_sample", "model_generate.sample", "model_sample", "model_generate.sample", "model_sample", "model_generate.sample", "model_sample", "model_generate.sample", "open", "json.dump", "metric.get_metric", "logging", "logging_csv", "int", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent", "vocab.id2sent"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging_csv", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.write_result_to_file", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.sample", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.sample", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.sample", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.sample", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_metric", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging_csv", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent"], ["", "def", "eval", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_k", ",", "dataloader_qk", ",", "epoch", ",", "updates", ")", ":", "\n", "    ", "model_sample", ".", "eval", "(", ")", "\n", "model_generate", ".", "eval", "(", ")", "\n", "\n", "multi_ref", ",", "query", ",", "keyword", ",", "keyword_ng", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "candidate", ",", "candidate_s", ",", "candidate_qk", ",", "candidate_qk_s", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "expose_sum", "=", "[", "]", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader_k", ")", ":", "\n", "\n", "        ", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "sample_prob", ",", "tgt", ",", "word_type", ",", "query_batch", ",", "sub_node_idx_batch", "=", "model_sample", "(", "batch", ",", "train_type", "=", "args", ".", "train_type", ",", "\n", "sample", "=", "False", ",", "\n", "sample_type", "=", "'eval'", ")", "\n", "expose", "=", "batch", ".", "expose", "\n", "expose", "=", "[", "int", "(", "e", ")", "for", "e", "in", "expose", "]", "\n", "expose_sum", "+=", "expose", "\n", "\n", "sub_batch_sent", "=", "[", "vocab", ".", "id2sent", "(", "k", ")", "for", "k", "in", "sub_node_idx_batch", "]", "\n", "query_batch_sent", "=", "[", "vocab", ".", "id2sent", "(", "s", ")", "for", "s", "in", "query_batch", "]", "\n", "ref", "=", "[", "vocab", ".", "id2sent", "(", "t", "[", "1", ":", "]", ")", "for", "t", "in", "tgt", "]", "\n", "\n", "multi_ref", "+=", "ref", "\n", "keyword", "+=", "sub_batch_sent", "\n", "query", "+=", "query_batch_sent", "\n", "\n", "samples", "=", "model_generate", ".", "sample", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "word_type", ")", "\n", "cand", "=", "[", "vocab", ".", "id2sent", "(", "s", ")", "for", "s", "in", "samples", "]", "\n", "candidate", "+=", "cand", "\n", "\n", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "sample_prob", ",", "tgt", ",", "word_type", ",", "query_batch_s", ",", "sub_node_idx_batch_s", "=", "model_sample", "(", "batch", ",", "train_type", "=", "args", ".", "train_type", ",", "sample", "=", "True", ",", "sample_type", "=", "'eval'", ")", "\n", "samples_s", "=", "model_generate", ".", "sample", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "word_type", ")", "\n", "cand_s", "=", "[", "vocab", ".", "id2sent", "(", "s", ")", "for", "s", "in", "samples_s", "]", "\n", "candidate_s", "+=", "cand_s", "\n", "\n", "", "for", "batch", "in", "tqdm", "(", "dataloader_qk", ")", ":", "\n", "\n", "        ", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "sample_prob", ",", "tgt", ",", "word_type", ",", "query_batch_qk", ",", "sub_node_idx_batch_qk", "=", "model_sample", "(", "\n", "batch", ",", "train_type", "=", "args", ".", "train_type", ",", "\n", "sample", "=", "False", ",", "\n", "sample_type", "=", "'eval'", ")", "\n", "key", "=", "[", "vocab", ".", "id2sent", "(", "k", ")", "for", "k", "in", "sub_node_idx_batch_qk", "]", "\n", "'''for i in key:\n            print(i)\n        a = 1\n        assert a == 0'''", "\n", "keyword_ng", "+=", "key", "\n", "\n", "samples_qk", "=", "model_generate", ".", "sample", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "word_type", ")", "\n", "cand_qk", "=", "[", "vocab", ".", "id2sent", "(", "s", ")", "for", "s", "in", "samples_qk", "]", "\n", "candidate_qk", "+=", "cand_qk", "\n", "\n", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "sample_prob", ",", "tgt", ",", "word_type", ",", "query_batch", ",", "sub_node_idx_batch", "=", "model_sample", "(", "\n", "batch", ",", "train_type", "=", "args", ".", "train_type", ",", "\n", "sample", "=", "True", ",", "\n", "sample_type", "=", "'eval'", ")", "\n", "samples_qk_s", "=", "model_generate", ".", "sample", "(", "sample_node_idx", ",", "sample_adj", ",", "sample_adj_weight", ",", "word_type", ")", "\n", "cand_qk_s", "=", "[", "vocab", ".", "id2sent", "(", "s", ")", "for", "s", "in", "samples_qk_s", "]", "\n", "candidate_qk_s", "+=", "cand_qk_s", "\n", "\n", "\n", "", "text_result", ",", "bleu", "=", "utils", ".", "eval_bleu", "(", "multi_ref", ",", "candidate", ",", "log_path", ")", "\n", "text_result_s", ",", "bleu_s", "=", "utils", ".", "eval_bleu", "(", "multi_ref", ",", "candidate_s", ",", "log_path", ")", "\n", "text_result_qk", ",", "bleu_qk", "=", "utils", ".", "eval_bleu", "(", "multi_ref", ",", "candidate_qk", ",", "log_path", ")", "\n", "text_result_qk_s", ",", "bleu_qk_s", "=", "utils", ".", "eval_bleu", "(", "multi_ref", ",", "candidate_qk_s", ",", "log_path", ")", "\n", "\n", "\n", "logging_csv", "(", "[", "epoch", ",", "updates", ",", "text_result", ",", "text_result_s", ",", "text_result_qk", ",", "text_result_qk_s", "]", ")", "\n", "\n", "print_list", "=", "[", "query", ",", "keyword", ",", "multi_ref", ",", "candidate", ",", "candidate_s", ",", "candidate_qk", ",", "candidate_qk_s", ",", "expose_sum", "]", "\n", "\n", "with", "open", "(", "log_path", "+", "\"test_ppl.json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "print_list", ",", "f", ")", "\n", "", "print_list", "=", "[", "query", ",", "keyword", ",", "multi_ref", ",", "candidate", ",", "candidate_s", ",", "candidate_qk", ",", "candidate_qk_s", "]", "\n", "utils", ".", "write_result_to_file", "(", "print_list", ",", "log_path", ")", "\n", "\n", "candidate_list", "=", "[", "multi_ref", ",", "candidate", ",", "candidate_s", ",", "candidate_qk", ",", "candidate_qk_s", "]", "\n", "name", "=", "[", "'ori'", ",", "'nosample'", ",", "'sample'", ",", "'nosample+q'", ",", "'sample+q'", "]", "\n", "bleu_target", "=", "0", "\n", "for", "c", ",", "n", "in", "zip", "(", "candidate_list", ",", "name", ")", ":", "\n", "        ", "bleu", ",", "recall_q", ",", "recall_k", ",", "recall_qk", ",", "dist1", ",", "dist2", "=", "metric", ".", "get_metric", "(", "c", ",", "multi_ref", ",", "keyword", ",", "query", ",", "keyword_ng", ",", "\n", "expose_sum", ",", "log_path", ")", "\n", "logging", "(", "\n", "'{}: bleu {}, recall_q {}, recall_k {}, recall_qk {}, dist1 {}, dist2 {} \\n'", ".", "format", "(", "n", ",", "bleu", ",", "recall_q", ",", "recall_k", ",", "\n", "recall_qk", ",", "dist1", ",", "dist2", ")", ")", "\n", "logging_csv", "(", "[", "epoch", ",", "updates", ",", "n", ",", "bleu", ",", "recall_q", ",", "recall_k", ",", "recall_qk", ",", "dist1", ",", "dist2", "]", ")", "\n", "if", "n", "==", "'sample'", ":", "\n", "            ", "bleu_target", "=", "bleu", "\n", "\n", "\n", "", "", "return", "bleu_target", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.save_model": [[319, 331], ["torch.save", "torch.save", "model_sample.module.state_dict", "model_sample.state_dict", "model_generate.module.state_dict", "model_generate.state_dict", "len", "len"], "function", ["None"], ["", "def", "save_model", "(", "path", ",", "model_sample", ",", "model_generate", ",", "optim_sample", ",", "optim_generate", ",", "updates", ")", ":", "\n", "\n", "    ", "model_state_dict_sample", "=", "model_sample", ".", "module", ".", "state_dict", "(", ")", "if", "len", "(", "args", ".", "gpus", ")", ">", "1", "else", "model_sample", ".", "state_dict", "(", ")", "\n", "model_state_dict_generate", "=", "model_generate", ".", "module", ".", "state_dict", "(", ")", "if", "len", "(", "args", ".", "gpus", ")", ">", "1", "else", "model_generate", ".", "state_dict", "(", ")", "\n", "checkpoints", "=", "{", "\n", "'model_sample'", ":", "model_state_dict_sample", ",", "\n", "'model_generate'", ":", "model_state_dict_generate", ",", "\n", "'config'", ":", "config", ",", "\n", "'optim_sample'", ":", "optim_sample", ",", "\n", "'optim_generate'", ":", "optim_generate", ",", "\n", "'updates'", ":", "updates", "}", "\n", "torch", ".", "save", "(", "checkpoints", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader": [[332, 342], ["DataLoader.", "DataLoader", "DataLoader"], "function", ["None"], ["", "def", "get_dataloader", "(", "vocab", ",", "split", "=", "None", ",", "train_type", "=", "None", ")", ":", "\n", "    ", "assert", "split", "in", "[", "'train'", ",", "'dev'", ",", "'test'", ",", "'variant'", "]", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "dataloader", "=", "DataLoader", "(", "config", ",", "config", ".", "data", "+", "split", "+", "'.json'", ",", "config", ".", "batch_size", ",", "vocab", ",", "data_type", "=", "'train'", ",", "train_type", "=", "train_type", ")", "\n", "", "else", ":", "\n", "        ", "dataloader", "=", "DataLoader", "(", "config", ",", "config", ".", "data", "+", "split", "+", "'.json'", ",", "config", ".", "batch_size", ",", "vocab", ",", "data_type", "=", "'eval'", ",", "train_type", "=", "train_type", ")", "\n", "\n", "\n", "", "return", "dataloader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.main": [[344, 479], ["torch.manual_seed", "torch.manual_seed", "Vocab", "print", "print", "logging", "logging", "graph2seq_rl.parameters", "Transformer_gcn.parameters", "logging", "logging", "print", "optims.Optim", "optims.Optim", "optims.Optim.set_parameters", "optims.Optim.set_parameters", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "seq2seq", "print", "torch.load", "torch.load", "Transformer_gcn.load_state_dict", "graph2seq_rl", "graph2seq_rl.cuda", "Transformer_gcn.cuda", "sum", "graph2seq_rl.parameters", "Transformer_gcn.parameters", "lr_scheduler.SetLR", "lr_scheduler.SetLR", "time.time", "train.get_dataloader", "train.get_dataloader", "train.get_dataloader", "print", "print", "train.train", "logging", "Transformer", "os.path.join", "graph2seq_rl", "repr", "repr", "param.view().size", "param.view().size", "time.time", "train.get_dataloader", "train.get_dataloader", "print", "print", "train.eval", "print", "Transformer_gcn", "graph2seq_rl", "graph2seq_rl.load_state_dict", "print", "param.numel", "param.view", "param.view", "Transformer_gcn.parameters", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.set_parameters", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.optims.Optim.set_parameters", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.train", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.get_dataloader", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.train.eval"], ["", "def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "vocab", "=", "Vocab", "(", "config", ".", "vocab_file", ",", "config", ".", "emb_size", ",", "use_pre_emb", "=", "False", ",", "vocab_size", "=", "config", ".", "vocab_size", ")", "\n", "print", "(", "'vocab clear'", ")", "\n", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# model", "\n", "print", "(", "'building model...\\n'", ")", "\n", "# configure the model", "\n", "# Model and optimizer", "\n", "\n", "\n", "if", "args", ".", "model", "==", "'seq2seq'", ":", "\n", "        ", "model_generate", "=", "seq2seq", "(", "config", ",", "vocab", ",", "use_cuda", ",", "pretrain", "=", "None", ")", "\n", "", "elif", "args", ".", "model", "==", "'transformer'", ":", "\n", "        ", "model_generate", "=", "Transformer", "(", "config", ",", "vocab", ",", "use_cuda", ",", "pretrain", "=", "None", ")", "\n", "", "elif", "args", ".", "model", "==", "'transformer_gcn'", ":", "\n", "        ", "model_generate", "=", "Transformer_gcn", "(", "config", ",", "vocab", ",", "use_cuda", ",", "pretrain", "=", "None", ")", "\n", "\n", "\n", "\n", "\n", "", "if", "args", ".", "restore", ":", "\n", "        ", "print", "(", "'loading checkpoint...\\n'", ")", "\n", "checkpoints", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "log_path", ",", "args", ".", "restore", ")", ")", "\n", "model_generate", ".", "load_state_dict", "(", "checkpoints", "[", "'model_generate'", "]", ")", "\n", "if", "args", ".", "train_type", "==", "'sample_rl'", ":", "\n", "            ", "emb", "=", "model_generate", ".", "embedding", "\n", "model_sample", "=", "graph2seq_rl", "(", "config", ",", "vocab", ",", "use_cuda", ",", "emb", ",", "pretrain", "=", "None", ")", "\n", "", "elif", "args", ".", "train_type", "==", "'generate'", ":", "\n", "            ", "model_sample", "=", "graph2seq_rl", "(", "config", ",", "vocab", ",", "use_cuda", ",", "0", ",", "pretrain", "=", "None", ")", "\n", "model_sample", ".", "load_state_dict", "(", "checkpoints", "[", "'model_sample'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'err'", ")", "\n", "", "", "else", ":", "\n", "#model_sample = graph2seq_rl(config, vocab, use_cuda, model_generate.embedding, pretrain=None)", "\n", "        ", "model_sample", "=", "graph2seq_rl", "(", "config", ",", "vocab", ",", "use_cuda", ",", "0", ",", "pretrain", "=", "None", ")", "\n", "\n", "", "'''if args.restore:\n        print('loading checkpoint...\\n')\n        checkpoints = torch.load(os.path.join(log_path, args.restore))\n\n        model_sample.load_state_dict(checkpoints['model_sample'])\n        model_generate.load_state_dict(checkpoints['model_generate'])'''", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model_sample", ".", "cuda", "(", ")", "\n", "model_generate", ".", "cuda", "(", ")", "\n", "\n", "# if len(args.gpus) > 1:  # \u5e76\u884c", "\n", "# model = nn.DataParallel(model, device_ids=args.gpus, dim=1)", "\n", "", "logging", "(", "repr", "(", "model_sample", ")", "+", "\"\\n\\n\"", ")", "# \u8bb0\u5f55\u8fd9\u4e2a\u6587\u4ef6\u7684\u6846\u67b6", "\n", "logging", "(", "repr", "(", "model_generate", ")", "+", "\"\\n\\n\"", ")", "\n", "\n", "# total number of parameters", "\n", "sample_param_count", "=", "0", "\n", "generate_param_count", "=", "0", "\n", "\n", "for", "param", "in", "model_sample", ".", "parameters", "(", ")", ":", "\n", "        ", "sample_param_count", "+=", "param", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "[", "0", "]", "\n", "", "for", "param", "in", "model_generate", ".", "parameters", "(", ")", ":", "\n", "        ", "generate_param_count", "+=", "param", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "", "logging", "(", "'total number of sample parameters: %d\\n\\n'", "%", "sample_param_count", ")", "\n", "logging", "(", "'total number of generate parameters: %d\\n\\n'", "%", "generate_param_count", ")", "\n", "\n", "print", "(", "'# generator parameters:'", ",", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "model_generate", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "# updates\u662f\u5df2\u7ecf\u8fdb\u884c\u4e86\u51e0\u4e2aepoch, \u9632\u6b62\u4e2d\u95f4\u51fa\u73b0\u7a0b\u5e8f\u4e2d\u65ad\u7684\u60c5\u51b5.", "\n", "if", "args", ".", "restore", ":", "\n", "        ", "updates", "=", "checkpoints", "[", "'updates'", "]", "\n", "ori_updates", "=", "updates", "\n", "", "else", ":", "\n", "        ", "updates", "=", "0", "\n", "\n", "# optimizer", "\n", "", "'''if args.restore:\n        optim_sample = checkpoints['optim_sample']\n        optim_generate = checkpoints['optim_generate']\n    else:'''", "\n", "#optimizer = optim.Adam(self.params, lr=self.lr)", "\n", "optim_sample", "=", "Optim", "(", "config", ".", "optim", ",", "config", ".", "learning_rate_sample", ",", "config", ".", "max_grad_norm", ",", "\n", "lr_decay", "=", "config", ".", "learning_rate_decay", ",", "start_decay_at", "=", "config", ".", "start_decay_at", ")", "\n", "optim_generate", "=", "Optim", "(", "config", ".", "optim", ",", "config", ".", "learning_rate", ",", "config", ".", "max_grad_norm", ",", "\n", "lr_decay", "=", "config", ".", "learning_rate_decay", ",", "start_decay_at", "=", "config", ".", "start_decay_at", ")", "\n", "\n", "\n", "optim_sample", ".", "set_parameters", "(", "model_sample", ".", "parameters", "(", ")", ")", "\n", "optim_generate", ".", "set_parameters", "(", "model_generate", ".", "parameters", "(", ")", ")", "\n", "if", "config", ".", "schedule", ":", "\n", "        ", "scheduler_sample", "=", "L", ".", "SetLR", "(", "optim_sample", ".", "optimizer", ")", "\n", "scheduler_generate", "=", "L", ".", "SetLR", "(", "optim_generate", ".", "optimizer", ")", "\n", "\n", "", "else", ":", "\n", "        ", "scheduler_sample", "=", "None", "\n", "scheduler_generate", "=", "None", "\n", "\n", "\n", "", "if", "args", ".", "type", "==", "'train'", ":", "\n", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "#dataloader_train = get_dataloader(vocab, split='train', train_type='qk')", "\n", "dataloader_train", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'train'", ",", "train_type", "=", "'k'", ")", "\n", "dataloader_dev", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'dev'", ",", "train_type", "=", "'k'", ")", "\n", "dataloader_dev_qk", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'dev'", ",", "train_type", "=", "'qk'", ")", "\n", "\n", "print", "(", "'loading data...\\n'", ")", "\n", "print", "(", "'loading time cost: %.3f'", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "\n", "max_bleu", "=", "train", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_train", ",", "dataloader_dev", ",", "dataloader_dev_qk", ",", "scheduler_sample", ",", "scheduler_generate", ",", "\n", "optim_sample", ",", "optim_generate", ",", "\n", "updates", ")", "\n", "logging", "(", "\"Best bleu score: %.2f\\n\"", "%", "(", "max_bleu", ")", ")", "\n", "\n", "", "elif", "args", ".", "type", "==", "'eval'", ":", "\n", "# Load data", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "dataloader_test", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'test'", ",", "train_type", "=", "'k'", ")", "\n", "dataloader_test_qk", "=", "get_dataloader", "(", "vocab", ",", "split", "=", "'test'", ",", "train_type", "=", "'qk'", ")", "\n", "\n", "\n", "print", "(", "'loading data...\\n'", ")", "\n", "print", "(", "'loading time cost: %.3f'", "%", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "assert", "args", ".", "restore", "is", "not", "None", "\n", "eval", "(", "model_sample", ",", "model_generate", ",", "vocab", ",", "dataloader_test", ",", "dataloader_test_qk", ",", "0", ",", "updates", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'error'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler._LRScheduler.__init__": [[7, 23], ["list", "lr_scheduler._LRScheduler.step", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "step", "(", "last_epoch", "+", "1", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler._LRScheduler.get_lr": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler._LRScheduler.step": [[27, 33], ["zip", "lr_scheduler._LRScheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.LambdaLR.__init__": [[54, 65], ["lr_scheduler._LRScheduler.__init__", "list", "isinstance", "isinstance", "len", "len", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "not", "isinstance", "(", "lr_lambda", ",", "list", ")", "and", "not", "isinstance", "(", "lr_lambda", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "lr_lambdas", "=", "[", "lr_lambda", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "lr_lambda", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected {} lr_lambdas, but got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "lr_lambda", ")", ")", ")", "\n", "", "self", ".", "lr_lambdas", "=", "list", "(", "lr_lambda", ")", "\n", "", "self", ".", "last_epoch", "=", "last_epoch", "\n", "super", "(", "LambdaLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.LambdaLR.get_lr": [[66, 69], ["lmbda", "zip"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "lmbda", "(", "self", ".", "last_epoch", ")", "\n", "for", "lmbda", ",", "base_lr", "in", "zip", "(", "self", ".", "lr_lambdas", ",", "self", ".", "base_lrs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.StepLR.__init__": [[94, 98], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "step_size", ",", "gamma", "=", "0.8", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "StepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.StepLR.get_lr": [[99, 102], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "(", "self", ".", "last_epoch", "//", "self", ".", "step_size", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.SetLR.__init__": [[106, 112], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "gamma1", "=", "0.97", ",", "gamma2", "=", "0.92", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "# def __init__(self, optimizer, gamma1=1, gamma2=1, last_epoch=-1):", "\n", "        ", "self", ".", "gamma1", "=", "gamma1", "\n", "self", ".", "gamma2", "=", "gamma2", "\n", "# self.gamma3=gamma3", "\n", "super", "(", "SetLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.SetLR.get_lr": [[113, 118], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\n", "        ", "last_epoch", "=", "self", ".", "last_epoch", "\n", "return", "[", "base_lr", "*", "self", ".", "gamma1", "**", "last_epoch", "*", "self", ".", "gamma2", "**", "(", "(", "last_epoch", "-", "1", ")", "*", "last_epoch", "/", "2", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.MultiStepLR.__init__": [[141, 148], ["lr_scheduler._LRScheduler.__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Milestones should be a list of'", "\n", "' increasing integers. Got {}'", ",", "milestones", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.MultiStepLR.get_lr": [[149, 152], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ExponentialLR.__init__": [[163, 166], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "gamma", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ExponentialLR.get_lr": [[167, 170], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "base_lr", "*", "self", ".", "gamma", "**", "self", ".", "last_epoch", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.__init__": [[192, 196], ["lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.CosineAnnealingLR.get_lr": [[197, 201], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "+", "math", ".", "cos", "(", "self", ".", "last_epoch", "/", "self", ".", "T_max", "*", "math", ".", "pi", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.__init__": [[246, 283], ["lr_scheduler.ReduceLROnPlateau._init_is_better", "lr_scheduler.ReduceLROnPlateau._reset", "ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "list", "len", "len", "ValueError", "len", "type", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._init_is_better", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._reset"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "\n", "verbose", "=", "False", ",", "threshold", "=", "1e-4", ",", "threshold_mode", "=", "'rel'", ",", "\n", "cooldown", "=", "0", ",", "min_lr", "=", "0", ",", "eps", "=", "1e-8", ")", ":", "\n", "\n", "        ", "if", "factor", ">=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "'Factor should be < 1.0.'", ")", "\n", "", "self", ".", "factor", "=", "factor", "\n", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "isinstance", "(", "min_lr", ",", "list", ")", "or", "isinstance", "(", "min_lr", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "min_lr", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} min_lrs, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "min_lr", ")", ")", ")", "\n", "", "self", ".", "min_lrs", "=", "list", "(", "min_lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "min_lrs", "=", "[", "min_lr", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n", "", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "cooldown", "=", "cooldown", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "threshold_mode", "=", "threshold_mode", "\n", "self", ".", "best", "=", "None", "\n", "self", ".", "num_bad_epochs", "=", "None", "\n", "self", ".", "mode_worse", "=", "None", "# the worse value for the chosen mode", "\n", "self", ".", "is_better", "=", "None", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "last_epoch", "=", "-", "1", "\n", "self", ".", "_init_is_better", "(", "mode", "=", "mode", ",", "threshold", "=", "threshold", ",", "\n", "threshold_mode", "=", "threshold_mode", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._reset": [[284, 289], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets num_bad_epochs counter and cooldown counter.\"\"\"", "\n", "self", ".", "best", "=", "self", ".", "mode_worse", "\n", "self", ".", "cooldown_counter", "=", "0", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.step": [[290, 310], ["lr_scheduler.ReduceLROnPlateau.is_better", "lr_scheduler.ReduceLROnPlateau._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._reduce_lr"], ["", "def", "step", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "current", "=", "metrics", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "\n", "if", "self", ".", "is_better", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_bad_epochs", "+=", "1", "\n", "\n", "", "if", "self", ".", "in_cooldown", ":", "\n", "            ", "self", ".", "cooldown_counter", "-=", "1", "\n", "self", ".", "num_bad_epochs", "=", "0", "# ignore any bad epochs in cooldown", "\n", "\n", "", "if", "self", ".", "num_bad_epochs", ">", "self", ".", "patience", ":", "\n", "            ", "self", ".", "_reduce_lr", "(", "epoch", ")", "\n", "self", ".", "cooldown_counter", "=", "self", ".", "cooldown", "\n", "self", ".", "num_bad_epochs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._reduce_lr": [[311, 320], ["enumerate", "float", "max", "print"], "methods", ["None"], ["", "", "def", "_reduce_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "new_lr", "=", "max", "(", "old_lr", "*", "self", ".", "factor", ",", "self", ".", "min_lrs", "[", "i", "]", ")", "\n", "if", "old_lr", "-", "new_lr", ">", "self", ".", "eps", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'Epoch {:5d}: reducing learning rate'", "\n", "' of group {} to {:.4e}.'", ".", "format", "(", "epoch", ",", "i", ",", "new_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau.in_cooldown": [[321, 324], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "in_cooldown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cooldown_counter", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.lr_scheduler.ReduceLROnPlateau._init_is_better": [[325, 344], ["ValueError", "ValueError", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "_init_is_better", "(", "self", ",", "mode", ",", "threshold", ",", "threshold_mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "{", "'min'", ",", "'max'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'mode '", "+", "mode", "+", "' is unknown!'", ")", "\n", "", "if", "threshold_mode", "not", "in", "{", "'rel'", ",", "'abs'", "}", ":", "\n", "            ", "raise", "ValueError", "(", "'threshold mode '", "+", "mode", "+", "' is unknown!'", ")", "\n", "", "if", "mode", "==", "'min'", "and", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "1.", "-", "threshold", "\n", "self", ".", "is_better", "=", "lambda", "a", ",", "best", ":", "a", "<", "best", "*", "rel_epsilon", "\n", "self", ".", "mode_worse", "=", "float", "(", "'Inf'", ")", "\n", "", "elif", "mode", "==", "'min'", "and", "threshold_mode", "==", "'abs'", ":", "\n", "            ", "self", ".", "is_better", "=", "lambda", "a", ",", "best", ":", "a", "<", "best", "-", "threshold", "\n", "self", ".", "mode_worse", "=", "float", "(", "'Inf'", ")", "\n", "", "elif", "mode", "==", "'max'", "and", "threshold_mode", "==", "'rel'", ":", "\n", "            ", "rel_epsilon", "=", "threshold", "+", "1.", "\n", "self", ".", "is_better", "=", "lambda", "a", ",", "best", ":", "a", ">", "best", "*", "rel_epsilon", "\n", "self", ".", "mode_worse", "=", "-", "float", "(", "'Inf'", ")", "\n", "", "else", ":", "# mode == 'max' and epsilon_mode == 'abs':", "\n", "            ", "self", ".", "is_better", "=", "lambda", "a", ",", "best", ":", "a", ">", "best", "+", "threshold", "\n", "self", ".", "mode_worse", "=", "-", "float", "(", "'Inf'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_recall": [[6, 13], ["zip", "metric.recall", "recall_list.append"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.recall"], ["def", "get_recall", "(", "cand", ",", "ref", ")", ":", "\n", "#\u5168\u90e8recall\u8ba1\u7b97\u51fd\u6570", "\n", "    ", "recall_list", "=", "[", "]", "\n", "for", "c", ",", "r", "in", "zip", "(", "cand", ",", "ref", ")", ":", "\n", "        ", "recall_i", "=", "recall", "(", "c", ",", "r", ")", "\n", "recall_list", ".", "append", "(", "recall_i", ")", "\n", "", "return", "recall_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.recall": [[14, 24], ["len", "len"], "function", ["None"], ["", "def", "recall", "(", "c", ",", "r", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "word", "in", "r", ":", "\n", "        ", "if", "word", "in", "c", ":", "\n", "            ", "count", "+=", "1", "\n", "", "", "if", "len", "(", "r", ")", "!=", "0", ":", "\n", "        ", "recall_value", "=", "count", "/", "(", "len", "(", "r", ")", ")", "\n", "", "else", ":", "\n", "        ", "recall_value", "=", "1", "\n", "", "return", "recall_value", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_bleu": [[35, 39], ["util.utils.eval_bleu"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu"], ["def", "get_bleu", "(", "cand", ",", "ref", ",", "log_path", ")", ":", "\n", "#\u5168\u90e8bleu\u8ba1\u7b97\u51fd\u6570", "\n", "    ", "result", ",", "bleu", "=", "utils", ".", "eval_bleu", "(", "ref", ",", "cand", ",", "log_path", ")", "\n", "return", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.count_gram": [[40, 51], ["nltk.util.ngrams", "len", "gram_uni.append"], "function", ["None"], ["", "def", "count_gram", "(", "text", ",", "n", ")", ":", "\n", "    ", "gram_sum", "=", "0", "\n", "gram_uni", "=", "[", "]", "\n", "for", "sent", "in", "text", ":", "\n", "        ", "gram", "=", "ngrams", "(", "sent", ",", "n", ")", "\n", "for", "g", "in", "gram", ":", "\n", "            ", "gram_sum", "+=", "1", "\n", "if", "g", "not", "in", "gram_uni", ":", "\n", "                ", "gram_uni", ".", "append", "(", "g", ")", "\n", "#return len(gram_uni),gram_sum, len(gram_uni)/gram_sum", "\n", "", "", "", "return", "len", "(", "gram_uni", ")", "/", "gram_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_dist": [[52, 59], ["metric.count_gram", "dist.append"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.count_gram"], ["", "def", "get_dist", "(", "cand", ")", ":", "\n", "    ", "gram", "=", "[", "1", ",", "2", "]", "\n", "dist", "=", "[", "]", "\n", "for", "n", "in", "gram", ":", "\n", "        ", "dist_n", "=", "count_gram", "(", "cand", ",", "n", ")", "\n", "dist", ".", "append", "(", "dist_n", ")", "\n", "", "return", "dist", "[", "0", "]", ",", "dist", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.weight_metric": [[60, 67], ["torch.tensor", "torch.tensor", "weighted_metric.sum.sum"], "function", ["None"], ["", "def", "weight_metric", "(", "metric", ",", "weight", ",", "item_num", ")", ":", "\n", "    ", "metric", "=", "torch", ".", "tensor", "(", "metric", ",", "dtype", "=", "float", ")", "\n", "weight", "=", "torch", ".", "tensor", "(", "weight", ",", "dtype", "=", "float", ")", "\n", "weighted_metric", "=", "metric", "/", "weight", "\n", "weighted_metric", "=", "weighted_metric", ".", "sum", "(", ")", "\n", "weighted_metric", "=", "weighted_metric", "/", "item_num", "\n", "return", "weighted_metric", "\n", "#\u5bf9\u6307\u6807\u52a0\u6743", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_weight": [[69, 77], ["weight_list.append", "item.count"], "function", ["None"], ["", "def", "get_weight", "(", "item", ")", ":", "\n", "#\u8ba1\u7b97\u5546\u54c1\u5728\u6570\u636e\u96c6\u4e2d\u51fa\u73b0\u6b21\u6570", "\n", "    ", "weight_list", "=", "[", "]", "\n", "for", "i", "in", "item", ":", "\n", "        ", "weight_list", ".", "append", "(", "item", ".", "count", "(", "i", ")", ")", "\n", "\n", "\n", "", "return", "weight_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_max_expose": [[78, 98], ["len", "range", "item_idx.values", "str", "cand_new.append", "adv_new.append", "sorted"], "function", ["None"], ["", "def", "get_max_expose", "(", "cand", ",", "adv", ",", "item", ",", "expose", ")", ":", "\n", "    ", "cand_new", "=", "[", "]", "\n", "adv_new", "=", "[", "]", "\n", "num", "=", "len", "(", "cand", ")", "\n", "item_expose", "=", "{", "}", "\n", "item_idx", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "key", "=", "str", "(", "sorted", "(", "item", "[", "i", "]", ")", ")", "\n", "if", "key", "not", "in", "item_expose", ":", "\n", "            ", "item_expose", "[", "key", "]", "=", "expose", "[", "i", "]", "\n", "item_idx", "[", "key", "]", "=", "i", "\n", "", "elif", "item_expose", "[", "key", "]", "<", "expose", "[", "i", "]", ":", "\n", "            ", "item_expose", "[", "key", "]", "=", "expose", "[", "i", "]", "\n", "item_idx", "[", "key", "]", "=", "i", "\n", "\n", "", "", "for", "idx", "in", "item_idx", ".", "values", "(", ")", ":", "\n", "        ", "cand_new", ".", "append", "(", "cand", "[", "idx", "]", ")", "\n", "adv_new", ".", "append", "(", "adv", "[", "idx", "]", ")", "\n", "\n", "", "return", "cand_new", ",", "adv_new", "\n", "", "def", "get_item_num", "(", "item", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_item_num": [[98, 102], ["len", "str", "list", "sorted", "set"], "function", ["None"], ["", "def", "get_item_num", "(", "item", ")", ":", "\n", "    ", "item", "=", "[", "str", "(", "sorted", "(", "i", ")", ")", "for", "i", "in", "item", "]", "\n", "item_num", "=", "len", "(", "list", "(", "set", "(", "item", ")", ")", ")", "\n", "return", "item_num", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_metric": [[104, 125], ["metric.get_weight", "metric.get_item_num", "print", "metric.get_max_expose", "print", "metric.get_bleu", "metric.get_recall", "metric.weight_metric", "metric.get_recall", "metric.weight_metric", "metric.get_recall", "metric.weight_metric", "metric.get_dist", "len"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_weight", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_item_num", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_max_expose", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_bleu", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_recall", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.weight_metric", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_recall", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.weight_metric", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_recall", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.weight_metric", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.metric.get_dist"], ["", "def", "get_metric", "(", "cand", ",", "adv", ",", "item", ",", "query", ",", "item_query", ",", "expose", ",", "log_path", ")", ":", "\n", "    ", "weight_list", "=", "get_weight", "(", "item", ")", "\n", "item_num", "=", "get_item_num", "(", "item", ")", "\n", "print", "(", "item_num", ")", "\n", "\n", "cand_max_expose", ",", "adv_max_expose", "=", "get_max_expose", "(", "cand", ",", "adv", ",", "item", ",", "expose", ")", "\n", "print", "(", "len", "(", "cand_max_expose", ")", ")", "\n", "bleu", "=", "get_bleu", "(", "cand_max_expose", ",", "adv_max_expose", ",", "log_path", ")", "\n", "\n", "recall_q", "=", "get_recall", "(", "cand", ",", "query", ")", "\n", "recall_q", "=", "weight_metric", "(", "recall_q", ",", "weight_list", ",", "item_num", ")", "\n", "\n", "recall_k", "=", "get_recall", "(", "cand", ",", "item", ")", "\n", "recall_k", "=", "weight_metric", "(", "recall_k", ",", "weight_list", ",", "item_num", ")", "\n", "\n", "recall_qk", "=", "get_recall", "(", "cand", ",", "item_query", ")", "\n", "recall_qk", "=", "weight_metric", "(", "recall_qk", ",", "weight_list", ",", "item_num", ")", "\n", "\n", "dist1", ",", "dist2", "=", "get_dist", "(", "cand", ")", "\n", "\n", "return", "bleu", ",", "recall_q", ",", "recall_k", ",", "recall_qk", ",", "dist1", ",", "dist2", "", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Dataset.__init__": [[35, 46], ["Data.Dataset.load_graph", "json.load", "len", "open"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Dataset.load_graph"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ",", "data_path", ",", "train_type", ")", ":", "\n", "        ", "self", ".", "train_type", "=", "train_type", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "config", "=", "config", "\n", "#self.graph, self.graph_weight= self.load_graph(config)", "\n", "self", ".", "graph", "=", "self", ".", "load_graph", "(", "config", ")", "\n", "\n", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "data_all", "=", "json", ".", "load", "(", "open", "(", "data_path", ",", "'r'", ")", ")", "\n", "self", ".", "number", "=", "len", "(", "self", ".", "data_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Dataset.load_graph": [[48, 54], ["json.load", "print", "open"], "methods", ["None"], ["", "def", "load_graph", "(", "self", ",", "config", ")", ":", "\n", "#KG=json.load(open(config.KG))", "\n", "        ", "KG", "=", "json", ".", "load", "(", "open", "(", "config", ".", "KG_weight", ")", ")", "\n", "print", "(", "'get kg'", ")", "\n", "\n", "return", "KG", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Dataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "number", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Dataset.__getitem__": [[57, 90], ["Data.Example", "Data.Example.to_tensor", "Data.Dataset.vocab.word2id", "file.SubGraph_k", "file.SubGraph_full.build_subgraph", "file.ExtendGraph_k", "file.ExtendGraph_full.extend", "file.SubGraph", "file.SubGraph_full.build_subgraph", "file.ExtendGraph", "file.ExtendGraph_full.extend", "file.SubGraph", "file.SubGraph.build_subgraph", "file.SubGraph_full", "file.SubGraph_full.build_subgraph", "file.ExtendGraph_full", "file.ExtendGraph_full.extend"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Example.to_tensor", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.build_subgraph", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.extend", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.build_subgraph", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.extend", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.build_subgraph", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.SubGraph_k.build_subgraph", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.extend"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "self", ".", "data_all", "[", "index", "]", "\n", "\n", "ads_title", ",", "query_keywords", ",", "title_keywords", ",", "expose", ",", "click", "=", "data", "[", "'adv'", "]", ",", "data", "[", "'query'", "]", ",", "data", "[", "'keyword'", "]", ",", "data", "[", "'expose'", "]", ",", "data", "[", "'click'", "]", "\n", "query", "=", "[", "self", ".", "vocab", ".", "word2id", "(", "word", ")", "for", "word", "in", "data", "[", "'query'", "]", "]", "\n", "assert", "self", ".", "train_type", "in", "[", "'k'", ",", "'qk'", ",", "'qt'", "]", "\n", "if", "self", ".", "train_type", "==", "'k'", ":", "\n", "            ", "sub", "=", "SubGraph_k", "(", "query_keywords", ",", "title_keywords", ")", "\n", "sub", ".", "build_subgraph", "(", "self", ".", "graph", ")", "\n", "\n", "extend", "=", "ExtendGraph_k", "(", "sub", ")", "\n", "extend", ".", "extend", "(", "self", ".", "graph", ")", "\n", "", "elif", "self", ".", "train_type", "==", "'qk'", ":", "\n", "            ", "sub", "=", "SubGraph", "(", "query_keywords", ",", "title_keywords", ")", "\n", "sub", ".", "build_subgraph", "(", "self", ".", "graph", ")", "\n", "\n", "extend", "=", "ExtendGraph", "(", "sub", ")", "\n", "extend", ".", "extend", "(", "self", ".", "graph", ")", "\n", "", "else", ":", "\n", "            ", "sub_ori", "=", "SubGraph", "(", "query_keywords", ",", "title_keywords", ")", "\n", "sub_ori", ".", "build_subgraph", "(", "self", ".", "graph", ")", "\n", "\n", "sub", "=", "SubGraph_full", "(", "query_keywords", ",", "ads_title", ")", "\n", "sub", ".", "build_subgraph", "(", "self", ".", "graph", ")", "\n", "\n", "extend", "=", "ExtendGraph_full", "(", "sub_ori", ",", "sub", ")", "\n", "extend", ".", "extend", "(", "self", ".", "graph", ")", "\n", "\n", "\n", "", "example", "=", "Example", "(", "sub", ",", "extend", ",", "ads_title", ",", "query", ",", "self", ".", "vocab", ",", "expose", ",", "click", ")", "\n", "example", ".", "to_tensor", "(", ")", "\n", "\n", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Collate.__init__": [[92, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_type", ")", ":", "\n", "        ", "self", ".", "data_type", "=", "data_type", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Collate.__call__": [[95, 97], ["Data.Batch"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "example_list", ")", ":", "\n", "        ", "return", "Batch", "(", "example_list", ",", "self", ".", "data_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Batch.__init__": [[103, 126], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "example_list", ",", "data_type", ")", ":", "\n", "        ", "assert", "data_type", "in", "[", "'train'", ",", "'eval'", "]", "\n", "\n", "self", ".", "ads", "=", "[", "e", ".", "ads", "for", "e", "in", "example_list", "]", "\n", "self", ".", "mask", "=", "[", "e", ".", "mask", "for", "e", "in", "example_list", "]", "\n", "\n", "self", ".", "sub_node_idx", "=", "[", "e", ".", "sub_node_idx", "for", "e", "in", "example_list", "]", "\n", "self", ".", "extend_node_idx", "=", "[", "e", ".", "extend_node_idx", "for", "e", "in", "example_list", "]", "\n", "self", ".", "neibour_node_idx", "=", "[", "e", ".", "neibour_node_idx", "for", "e", "in", "example_list", "]", "\n", "\n", "self", ".", "sub_adj", "=", "[", "e", ".", "sub_adj", "for", "e", "in", "example_list", "]", "\n", "self", ".", "extend_adj", "=", "[", "e", ".", "extend_adj", "for", "e", "in", "example_list", "]", "\n", "self", ".", "sub_adj_weight", "=", "[", "e", ".", "sub_adj_weight", "for", "e", "in", "example_list", "]", "\n", "#self.extend_adj_weight=[e.extend_adj_weight for e in example_list]", "\n", "\n", "self", ".", "word_type", "=", "[", "e", ".", "word_type", "for", "e", "in", "example_list", "]", "\n", "self", ".", "word_type_sub", "=", "[", "e", ".", "word_type_sub", "for", "e", "in", "example_list", "]", "\n", "\n", "self", ".", "expose", "=", "[", "e", ".", "expose", "for", "e", "in", "example_list", "]", "\n", "self", ".", "click", "=", "[", "e", ".", "click", "for", "e", "in", "example_list", "]", "\n", "self", ".", "query", "=", "[", "e", ".", "query", "for", "e", "in", "example_list", "]", "\n", "\n", "self", ".", "sub_neibour_mask", "=", "[", "e", ".", "sub_neibour_mask", "for", "e", "in", "example_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Example.__init__": [[129, 156], ["Data.Example.padding", "len", "len", "Data.Example.subgraph.sparse_to_dense", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Data.Example.subgraph.convert_to_idx", "Data.Example.extend.convert_to_idx", "Data.Example.extend.convert_to_idx_nei", "Data.Example.extend_adj[].float", "vocab.sent2id", "numpy.array", "Data.Example.extend.sparse_to_dense"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Example.padding", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.sparse_to_dense", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.convert_to_idx", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.convert_to_idx", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.convert_to_idx_nei", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.sent2id", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.Graph.sparse_to_dense"], ["    ", "def", "__init__", "(", "self", ",", "subgraph", ",", "extend", ",", "ads", ",", "query", ",", "vocab", ",", "expose", ",", "click", ")", ":", "\n", "        ", "self", ".", "ads", ",", "self", ".", "mask", "=", "self", ".", "padding", "(", "vocab", ".", "sent2id", "(", "ads", ")", ")", "\n", "\n", "self", ".", "subgraph", "=", "subgraph", "\n", "self", ".", "extend", "=", "extend", "\n", "\n", "self", ".", "sub_node_num", "=", "len", "(", "self", ".", "subgraph", ".", "nodes", ")", "\n", "self", ".", "extend_node_num", "=", "len", "(", "self", ".", "extend", ".", "nodes", ")", "\n", "\n", "self", ".", "sub_adj", "=", "self", ".", "subgraph", ".", "sparse_to_dense", "(", ")", "\n", "self", ".", "extend_adj", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "extend", ".", "sparse_to_dense", "(", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "self", ".", "sub_adj_weight", "=", "1", "\n", "\n", "self", ".", "sub_node_idx", "=", "self", ".", "subgraph", ".", "convert_to_idx", "(", "vocab", ")", "\n", "self", ".", "extend_node_idx", "=", "self", ".", "extend", ".", "convert_to_idx", "(", "vocab", ")", "\n", "self", ".", "neibour_node_idx", "=", "self", ".", "extend", ".", "convert_to_idx_nei", "(", "vocab", ")", "\n", "\n", "self", ".", "word_type_sub", "=", "self", ".", "subgraph", ".", "word_type", "\n", "self", ".", "word_type", "=", "self", ".", "extend", ".", "word_type_extend", "\n", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "expose", "=", "expose", "\n", "self", ".", "click", "=", "click", "\n", "\n", "#self.sub_neibour_mask=self.extend_adj[self.sub_node_num:, :self.sub_node_num].ne(0).float()", "\n", "self", ".", "sub_neibour_mask", "=", "self", ".", "extend_adj", "[", "self", ".", "sub_node_num", ":", ",", ":", "self", ".", "sub_node_num", "]", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Example.to_tensor": [[157, 175], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch_geometric.utils.dense_to_sparse", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "to_tensor", "(", "self", ")", ":", "\n", "        ", "self", ".", "ads", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "ads", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n", "self", ".", "mask", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "mask", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n", "self", ".", "sub_node_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "sub_node_idx", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "self", ".", "extend_node_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "extend_node_idx", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "self", ".", "neibour_node_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "neibour_node_idx", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n", "self", ".", "sub_adj", ",", "self", ".", "sub_adj_weight", "=", "dense_to_sparse", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "sub_adj", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "#self.extend_adj,self.extend_adj_weight=dense_to_sparse(torch.from_numpy(np.array(self.extend_adj, dtype=np.float32)))", "\n", "\n", "self", ".", "word_type_sub", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "word_type_sub", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "self", ".", "word_type", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "word_type", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n", "self", ".", "expose", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "expose", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "self", ".", "click", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "click", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "self", ".", "query", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "query", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Example.padding": [[176, 185], ["len", "print", "print", "len", "tgt.append", "mask.append", "range", "len"], "methods", ["None"], ["", "def", "padding", "(", "self", ",", "tgt", ",", "max_len", "=", "22", ")", ":", "\n", "        ", "if", "len", "(", "tgt", ")", ">", "22", ":", "\n", "            ", "print", "(", "'tgt length error'", ")", "\n", "print", "(", "tgt", ")", "\n", "", "mask", "=", "[", "1.", "for", "_", "in", "range", "(", "len", "(", "tgt", ")", ")", "]", "\n", "while", "len", "(", "tgt", ")", "<", "max_len", ":", "\n", "            ", "tgt", ".", "append", "(", "0", ")", "\n", "mask", ".", "append", "(", "0", ")", "\n", "", "return", "tgt", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.__init__": [[190, 209], ["len", "Data.Vocab.load_glove", "Data.Vocab.load_vocab", "numpy.array", "Data.Vocab.load_vocab"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.load_glove", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.load_vocab", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.load_vocab"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ",", "emb_size", ",", "use_pre_emb", "=", "False", ",", "vocab_size", "=", "50000", ")", ":", "\n", "        ", "self", ".", "emb_size", "=", "emb_size", "\n", "'''self._word2id = {'[PADDING]': 0, '[START]': 1, '[END]': 2, '[OOV]': 3, '[COM]': 4}\n        self._id2word = ['[PADDING]', '[START]', '[END]', '[OOV]', '[COM]']\n        self._wordcount = {'[PADDING]': 1, '[START]': 1, '[END]': 1, '[OOV]': 1, '[COM]': 1}'''", "\n", "self", ".", "_word2id", "=", "{", "'[PADDING]'", ":", "0", ",", "'[START]'", ":", "1", ",", "'[END]'", ":", "2", ",", "'[OOV]'", ":", "3", "}", "\n", "self", ".", "_id2word", "=", "[", "'[PADDING]'", ",", "'[START]'", ",", "'[END]'", ",", "'[OOV]'", "]", "\n", "self", ".", "_wordcount", "=", "{", "'[PADDING]'", ":", "1", ",", "'[START]'", ":", "1", ",", "'[END]'", ":", "1", ",", "'[OOV]'", ":", "1", "}", "\n", "\n", "if", "use_pre_emb", ":", "\n", "            ", "emb", "=", "self", ".", "load_glove", "(", ")", "\n", "self", ".", "load_vocab", "(", "vocab_file", ",", "vocab_size", "=", "vocab_size", ",", "emb_size", "=", "emb_size", ",", "word_emb", "=", "emb", ")", "\n", "self", ".", "emb", "=", "np", ".", "array", "(", "self", ".", "emb", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb", "=", "None", "\n", "self", ".", "load_vocab", "(", "vocab_file", ",", "emb_size", "=", "emb_size", ",", "vocab_size", "=", "vocab_size", ")", "\n", "", "self", ".", "voc_size", "=", "len", "(", "self", ".", "_word2id", ")", "\n", "self", ".", "UNK_token", "=", "3", "\n", "self", ".", "PAD_token", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.load_glove": [[211, 220], ["open", "line.strip().split", "numpy.array", "line.strip", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_glove", "(", "fname", "=", "'glove.txt'", ")", ":", "\n", "        ", "emb", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "fname", ")", ":", "\n", "            ", "tem", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "word", "=", "tem", "[", "0", "]", "\n", "vec", "=", "np", ".", "array", "(", "[", "float", "(", "num", ")", "for", "num", "in", "tem", "[", "1", ":", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "emb", "[", "word", "]", "=", "vec", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.load_vocab": [[221, 236], ["json.load", "open", "len", "len", "numpy.zeros", "len", "Data.Vocab._id2word.append", "Data.Vocab.emb.append", "range", "len", "Data.Vocab._id2word.append", "len"], "methods", ["None"], ["", "def", "load_vocab", "(", "self", ",", "vocab_file", ",", "emb_size", ",", "word_emb", "=", "None", ",", "vocab_size", "=", "None", ")", ":", "\n", "        ", "if", "word_emb", "is", "not", "None", ":", "\n", "            ", "self", ".", "emb", "=", "[", "np", ".", "zeros", "(", "emb_size", ")", "for", "_", "in", "range", "(", "5", ")", "]", "\n", "", "words", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ")", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word_emb", "is", "not", "None", "and", "word", "in", "word_emb", ":", "\n", "                ", "self", ".", "_word2id", "[", "word", "]", "=", "len", "(", "self", ".", "_word2id", ")", "\n", "self", ".", "_id2word", ".", "append", "(", "word", ")", "\n", "self", ".", "emb", ".", "append", "(", "word_emb", "[", "word", "]", ")", "\n", "", "elif", "word_emb", "is", "None", ":", "\n", "                ", "self", ".", "_word2id", "[", "word", "]", "=", "len", "(", "self", ".", "_word2id", ")", "\n", "self", ".", "_id2word", ".", "append", "(", "word", ")", "\n", "", "if", "vocab_size", ">", "0", "and", "len", "(", "self", ".", "_word2id", ")", ">=", "vocab_size", ":", "\n", "                ", "break", "\n", "", "", "assert", "len", "(", "self", ".", "_word2id", ")", "==", "len", "(", "self", ".", "_id2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id": [[237, 243], ["None"], "methods", ["None"], ["", "def", "word2id", "(", "self", ",", "word", ")", ":", "\n", "        ", "'''if word.upper() in self._company:\n            return self._word2id['[COM]']'''", "\n", "if", "word", "in", "self", ".", "_word2id", ":", "\n", "            ", "return", "self", ".", "_word2id", "[", "word", "]", "\n", "", "return", "self", ".", "_word2id", "[", "'[OOV]'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.sent2id": [[244, 252], ["Data.Vocab.word2id"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id"], ["", "def", "sent2id", "(", "self", ",", "sent", ",", "add_start", "=", "True", ",", "add_end", "=", "True", ")", ":", "\n", "        ", "result", "=", "[", "self", ".", "word2id", "(", "word", ")", "for", "word", "in", "sent", "]", "\n", "if", "add_start", ":", "\n", "            ", "result", "=", "[", "self", ".", "_word2id", "[", "'[START]'", "]", "]", "+", "result", "\n", "\n", "", "if", "add_end", ":", "\n", "            ", "result", "=", "result", "+", "[", "self", ".", "_word2id", "[", "'[END]'", "]", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2word": [[255, 257], ["None"], "methods", ["None"], ["", "def", "id2word", "(", "self", ",", "word_id", ")", ":", "\n", "        ", "return", "self", ".", "_id2word", "[", "word_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2sent": [[258, 267], ["result.append"], "methods", ["None"], ["", "def", "id2sent", "(", "self", ",", "sent_id", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "id", "in", "sent_id", ":", "\n", "            ", "if", "id", "==", "self", ".", "_word2id", "[", "'[END]'", "]", ":", "\n", "                ", "break", "\n", "", "elif", "id", "==", "self", ".", "_word2id", "[", "'[PADDING]'", "]", "or", "id", "==", "self", ".", "_word2id", "[", "'[OOV]'", "]", ":", "\n", "                ", "continue", "\n", "", "result", ".", "append", "(", "self", ".", "_id2word", "[", "id", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.id2words": [[268, 278], ["result.append", "result.append"], "methods", ["None"], ["", "def", "id2words", "(", "self", ",", "sent_id", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "id", "in", "sent_id", ":", "\n", "            ", "if", "id", "==", "self", ".", "_word2id", "[", "'[END]'", "]", ":", "\n", "                ", "break", "\n", "", "elif", "id", "==", "self", ".", "_word2id", "[", "'[PADDING]'", "]", "or", "id", "==", "self", ".", "_word2id", "[", "'[OOV]'", "]", ":", "\n", "                ", "continue", "\n", "", "result", ".", "append", "(", "self", ".", "_id2word", "[", "id", "]", ")", "\n", "result", ".", "append", "(", "','", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.DataLoader.__init__": [[281, 286], ["Data.Dataset"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "data_path", ",", "batch_size", ",", "vocab", ",", "data_type", "=", "None", ",", "train_type", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "train_type", "=", "train_type", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "Dataset", "(", "config", ",", "vocab", ",", "data_path", ",", "train_type", ")", "\n", "", "def", "__call__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.DataLoader.__call__": [[286, 296], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Data.Collate", "Data.Collate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "data_type", "in", "[", "'train'", ",", "'eval'", "]", "\n", "if", "self", ".", "data_type", "==", "'train'", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "self", ".", "dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "Collate", "(", "self", ".", "data_type", ")", ",", "shuffle", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "self", ".", "dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "Collate", "(", "self", ".", "data_type", ")", ",", "shuffle", "=", "False", ")", "\n", "\n", "", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.filt_sent_id": [[22, 32], ["result.append"], "function", ["None"], ["def", "filt_sent_id", "(", "sent_id", ")", ":", "\n", "    ", "filt_id", "=", "[", "0", ",", "1", ",", "3", "]", "\n", "result", "=", "[", "]", "\n", "for", "id", "in", "sent_id", ":", "\n", "        ", "if", "id", "==", "2", ":", "\n", "            ", "break", "\n", "", "elif", "id", "in", "filt_id", ":", "\n", "            ", "continue", "\n", "", "result", ".", "append", "(", "id", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.list_utils.common": [[4, 6], ["list", "set().intersection", "set"], "function", ["None"], ["def", "common", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "return", "list", "(", "set", "(", "list1", ")", ".", "intersection", "(", "list2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.list_utils.substract": [[8, 10], ["list", "set", "set"], "function", ["None"], ["", "def", "substract", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "return", "list", "(", "set", "(", "list1", ")", "-", "set", "(", "list2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.list_utils.remove_values_from_list": [[12, 14], ["None"], "function", ["None"], ["", "def", "remove_values_from_list", "(", "l", ",", "val", ")", ":", "\n", "    ", "return", "[", "value", "for", "value", "in", "l", "if", "value", "!=", "val", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.vis_utils.make_dot": [[6, 53], ["print", "dict", "graphviz.Digraph", "set", "vis_utils.make_dot.add_nodes"], "function", ["None"], ["def", "make_dot", "(", "var", ",", "params", ")", ":", "\n", "    ", "\"\"\" Produces Graphviz representation of PyTorch autograd graph\n    Blue nodes are the Variables that require grad, orange are Tensors\n    saved for backward in torch.autograd.Function\n    Args:\n        var: output Variable\n        params: dict of (name, Variable) to add names to node that\n            require grad (TODO: make optional)\n    \"\"\"", "\n", "param_map", "=", "{", "id", "(", "v", ")", ":", "k", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", "}", "\n", "print", "(", "param_map", ")", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "\n", "shape", "=", "'box'", ",", "\n", "align", "=", "'left'", ",", "\n", "fontsize", "=", "'12'", ",", "\n", "ranksep", "=", "'0.1'", ",", "\n", "height", "=", "'0.2'", ")", "\n", "dot", "=", "Digraph", "(", "node_attr", "=", "node_attr", ",", "graph_attr", "=", "dict", "(", "size", "=", "\"12,12\"", ")", ")", "\n", "seen", "=", "set", "(", ")", "\n", "\n", "def", "size_to_str", "(", "size", ")", ":", "\n", "        ", "return", "'('", "+", "(", "', '", ")", ".", "join", "(", "[", "'%d'", "%", "v", "for", "v", "in", "size", "]", ")", "+", "')'", "\n", "\n", "", "def", "add_nodes", "(", "var", ")", ":", "\n", "        ", "if", "var", "not", "in", "seen", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "var", ")", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "size_to_str", "(", "\n", "var", ".", "size", "(", ")", ")", ",", "fillcolor", "=", "'orange'", ")", "\n", "", "elif", "hasattr", "(", "var", ",", "'variable'", ")", ":", "\n", "                ", "u", "=", "var", ".", "variable", "\n", "node_name", "=", "'%s\\n %s'", "%", "(", "\n", "param_map", ".", "get", "(", "id", "(", "u", ")", ")", ",", "size_to_str", "(", "u", ".", "size", "(", ")", ")", ")", "\n", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "node_name", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "", "else", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "str", "(", "type", "(", "var", ")", ".", "__name__", ")", ")", "\n", "", "seen", ".", "add", "(", "var", ")", "\n", "if", "hasattr", "(", "var", ",", "'next_functions'", ")", ":", "\n", "                ", "for", "u", "in", "var", ".", "next_functions", ":", "\n", "                    ", "if", "u", "[", "0", "]", "is", "not", "None", ":", "\n", "                        ", "dot", ".", "edge", "(", "str", "(", "id", "(", "u", "[", "0", "]", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "u", "[", "0", "]", ")", "\n", "", "", "", "if", "hasattr", "(", "var", ",", "'saved_tensors'", ")", ":", "\n", "                ", "for", "t", "in", "var", ".", "saved_tensors", ":", "\n", "                    ", "dot", ".", "edge", "(", "str", "(", "id", "(", "t", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "t", ")", "\n", "", "", "", "", "add_nodes", "(", "var", ".", "grad_fn", ")", "\n", "return", "dot", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.split_sentence": [[12, 25], ["nlp_utils.split_chinese_sentence", "nlp_utils.split_english_sentence", "print"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.split_chinese_sentence", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.split_english_sentence"], ["def", "split_sentence", "(", "text", ",", "language", ")", ":", "\n", "    ", "\"\"\"\n    Segment a input text into a list of sentences.\n    :param text: a segmented input string.\n    :param language: language type. \"Chinese\" or \"English\".\n    :return: a list of segmented sentences.\n    \"\"\"", "\n", "if", "language", "==", "\"Chinese\"", ":", "\n", "        ", "return", "split_chinese_sentence", "(", "text", ")", "\n", "", "elif", "language", "==", "\"English\"", ":", "\n", "        ", "return", "split_english_sentence", "(", "text", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently only support Chinese and English.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.split_chinese_sentence": [[27, 55], ["type", "str().split", "list().pop", "len", "sents.append", "sents.append", "list().pop", "str", "list", "list"], "function", ["None"], ["", "", "def", "split_chinese_sentence", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Segment a input Chinese text into a list of sentences.\n    :param text: a segmented input string.\n    :return: a list of segmented sentences.\n    \"\"\"", "\n", "if", "type", "(", "text", ")", "==", "list", ":", "# already segmented", "\n", "        ", "words", "=", "text", "\n", "", "else", ":", "\n", "        ", "words", "=", "str", "(", "text", ")", ".", "split", "(", ")", "\n", "", "start", "=", "0", "\n", "i", "=", "0", "\n", "sents", "=", "[", "]", "\n", "punt_list", "=", "'\u3002!\uff01?\uff1f;\uff1b~\uff5e'", "\n", "for", "word", "in", "words", ":", "\n", "        ", "word", "=", "word", "\n", "token", "=", "list", "(", "words", "[", "start", ":", "i", "+", "2", "]", ")", ".", "pop", "(", ")", "\n", "if", "word", "in", "punt_list", "and", "token", "not", "in", "punt_list", ":", "\n", "            ", "sents", ".", "append", "(", "words", "[", "start", ":", "i", "+", "1", "]", ")", "\n", "start", "=", "i", "+", "1", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "i", "+=", "1", "\n", "token", "=", "list", "(", "words", "[", "start", ":", "i", "+", "2", "]", ")", ".", "pop", "(", ")", "\n", "", "", "if", "start", "<", "len", "(", "words", ")", ":", "\n", "        ", "sents", ".", "append", "(", "words", "[", "start", ":", "]", ")", "\n", "", "sents", "=", "[", "\" \"", ".", "join", "(", "x", ")", "for", "x", "in", "sents", "]", "\n", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.split_english_sentence": [[57, 66], ["nltk.tokenize.punkt.PunktSentenceTokenizer", "nltk.tokenize.punkt.PunktSentenceTokenizer.tokenize"], "function", ["None"], ["", "def", "split_english_sentence", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Segment a input English text into a list of sentences.\n    :param text: a segmented input string.\n    :return: a list of segmented sentences.\n    \"\"\"", "\n", "sentence_tokenizer", "=", "PunktSentenceTokenizer", "(", ")", "\n", "sentences", "=", "sentence_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.load_w2v": [[68, 95], ["print", "gensim.models.KeyedVectors.load_word2vec_format", "numpy.zeros", "numpy.random.uniform", "print", "sys.exit", "open", "fread.readlines", "line.strip().split", "numpy.fromstring", "line.strip"], "function", ["None"], ["", "def", "load_w2v", "(", "fin", ",", "type", ",", "vector_size", ")", ":", "\n", "    ", "\"\"\"\n    Load word vector file.\n    :param fin: input word vector file name.\n    :param type: word vector type, \"Google\" or \"Glove\" or \"Tencent\".\n    :param vector_size: vector length.\n    :return: Output Gensim word2vector model.\n    \"\"\"", "\n", "model", "=", "{", "}", "\n", "if", "type", "==", "\"Google\"", "or", "type", "==", "\"Glove\"", ":", "\n", "        ", "model", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fin", ",", "binary", "=", "True", ")", "\n", "", "elif", "type", "==", "\"Tencent\"", ":", "\n", "        ", "model", "[", "\"PADDING\"", "]", "=", "np", ".", "zeros", "(", "vector_size", ")", "\n", "model", "[", "\"UNKNOWN\"", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "vector_size", ")", "\n", "with", "open", "(", "fin", ",", "\"r\"", ")", "as", "fread", ":", "\n", "            ", "for", "line", "in", "fread", ".", "readlines", "(", ")", ":", "\n", "                ", "line_list", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "line_list", "[", "0", "]", "\n", "word_vec", "=", "np", ".", "fromstring", "(", "\" \"", ".", "join", "(", "line_list", "[", "1", ":", "]", ")", ",", "\n", "dtype", "=", "float", ",", "sep", "=", "\" \"", ")", "\n", "model", "[", "word", "]", "=", "word_vec", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"type must be Glove or Google or Tencent.\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "print", "(", "type", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.transform_w2v": [[97, 105], ["dict", "collections.OrderedDict", "collections.OrderedDict.keys", "enumerate", "collections.OrderedDict.keys", "len"], "function", ["None"], ["", "def", "transform_w2v", "(", "W2V", ",", "vector_size", ")", ":", "\n", "    ", "W2V", "=", "dict", "(", "(", "k", ",", "W2V", "[", "k", "]", ")", "for", "k", "in", "W2V", ".", "keys", "(", ")", "\n", "if", "len", "(", "W2V", "[", "k", "]", ")", "==", "vector_size", ")", "\n", "W2V", "=", "OrderedDict", "(", "W2V", ")", "\n", "W2V_VOCAB", "=", "W2V", ".", "keys", "(", ")", "\n", "W2V_VOCAB", "=", "[", "w", "for", "w", "in", "W2V_VOCAB", "]", "\n", "word2ix", "=", "{", "word", ":", "i", "for", "i", ",", "word", "in", "enumerate", "(", "W2V", ")", "}", "\n", "return", "W2V", ",", "W2V_VOCAB", ",", "word2ix", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.remove_OOV": [[107, 115], ["str().split", "str"], "function", ["None"], ["", "def", "remove_OOV", "(", "text", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Remove OOV words in a text.\n    \"\"\"", "\n", "tokens", "=", "str", "(", "text", ")", ".", "split", "(", ")", "\n", "tokens", "=", "[", "word", "for", "word", "in", "tokens", "if", "word", "in", "vocab", "]", "\n", "new_text", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.replace_OOV": [[117, 130], ["str().split", "str", "new_tokens.append", "new_tokens.append"], "function", ["None"], ["", "def", "replace_OOV", "(", "text", ",", "replace", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Replace OOV words in a text with a specific word.\n    \"\"\"", "\n", "tokens", "=", "str", "(", "text", ")", ".", "split", "(", ")", "\n", "new_tokens", "=", "[", "]", "\n", "for", "word", "in", "tokens", ":", "\n", "        ", "if", "word", "in", "vocab", ":", "\n", "            ", "new_tokens", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "new_tokens", ".", "append", "(", "replace", ")", "\n", "", "", "new_text", "=", "\" \"", ".", "join", "(", "new_tokens", ")", "\n", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.remove_stopwords": [[132, 140], ["str().split", "str"], "function", ["None"], ["", "def", "remove_stopwords", "(", "text", ",", "stopwords", ")", ":", "\n", "    ", "\"\"\"\n    Remove stop words in a text.\n    \"\"\"", "\n", "tokens", "=", "str", "(", "text", ")", ".", "split", "(", ")", "\n", "tokens", "=", "[", "word", "for", "word", "in", "tokens", "if", "word", "not", "in", "stopwords", "]", "\n", "new_text", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "return", "new_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.right_pad_zeros_2d": [[142, 156], ["numpy.zeros", "enumerate", "enumerate", "len"], "function", ["None"], ["", "def", "right_pad_zeros_2d", "(", "lst", ",", "max_len", ",", "dtype", "=", "np", ".", "int64", ")", ":", "\n", "    ", "\"\"\"\n    Given a 2d list, padding or truncating each sublist to max_len.\n    :param lst: input 2d list.\n    :param max_len: maximum length.\n    :return: padded list.\n    \"\"\"", "\n", "result", "=", "np", ".", "zeros", "(", "[", "len", "(", "lst", ")", ",", "max_len", "]", ",", "dtype", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "lst", ")", ":", "\n", "        ", "for", "j", ",", "val", "in", "enumerate", "(", "row", ")", ":", "\n", "            ", "if", "j", ">=", "max_len", ":", "\n", "                ", "break", "\n", "", "result", "[", "i", "]", "[", "j", "]", "=", "val", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.nlp_utils.right_pad_zeros_1d": [[158, 168], ["lst.extend", "len"], "function", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.file.ExtendGraph_k.extend"], ["", "def", "right_pad_zeros_1d", "(", "lst", ",", "max_len", ")", ":", "\n", "    ", "\"\"\"\n    Given a 1d list, padding or truncating each sublist to max_len.\n    :param lst: input 1d list.\n    :param max_len: maximum length.\n    :return: padded list.\n    \"\"\"", "\n", "lst", "=", "lst", "[", "0", ":", "max_len", "]", "\n", "lst", ".", "extend", "(", "[", "0", "]", "*", "(", "max_len", "-", "len", "(", "lst", ")", ")", ")", "\n", "return", "lst", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.file_utils.replace_sep": [[4, 14], ["open", "open", "open.close", "open.close", "open.write", "line.replace"], "function", ["None"], ["def", "replace_sep", "(", "fin", ",", "fout", ",", "sep_ini", ",", "sep_fin", ")", ":", "\n", "    ", "\"\"\"\n    Replace delimiter in a file.\n    \"\"\"", "\n", "fin", "=", "open", "(", "fin", ",", "\"r\"", ")", "\n", "fout", "=", "open", "(", "fout", ",", "\"w\"", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "fout", ".", "write", "(", "line", ".", "replace", "(", "sep_ini", ",", "sep_fin", ")", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.file_utils.remove_quotes": [[16, 26], ["open", "open", "open.close", "open.close", "open.write", "line.replace"], "function", ["None"], ["", "def", "remove_quotes", "(", "fin", ",", "fout", ")", ":", "\n", "    ", "\"\"\" Remove quotes in lines.\n    If a line has odd number quotes, remove all quotes in this line.\n    \"\"\"", "\n", "fin", "=", "open", "(", "fin", ")", "\n", "fout", "=", "open", "(", "fout", ",", "\"w\"", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "fout", ".", "write", "(", "line", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "fout", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.gen_idf": [[9, 26], ["open", "open.readlines", "sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", "dict", "f.close", "open.close", "zip", "codecs.open", "dict.items", "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names", "f.write", "str"], "function", ["None"], ["def", "gen_idf", "(", "corpusfile", ",", "idffile", ")", ":", "\n", "    ", "\"\"\"\n    Generate a dictionary of idf from a corpus. Each line is a doc.\n    :param corpusfile: file of corpus.\n    :param idffile: output file that saves idf dictionary.\n    \"\"\"", "\n", "fcorpus", "=", "open", "(", "corpusfile", ",", "\"r\"", ")", "\n", "corpus", "=", "fcorpus", ".", "readlines", "(", ")", "\n", "vectorizer", "=", "TfidfVectorizer", "(", "encoding", "=", "\"utf8\"", ")", "\n", "vectorizer", ".", "fit_transform", "(", "corpus", ")", "\n", "idf", "=", "vectorizer", ".", "idf_", "\n", "idf_dict", "=", "dict", "(", "zip", "(", "vectorizer", ".", "get_feature_names", "(", ")", ",", "idf", ")", ")", "\n", "with", "codecs", ".", "open", "(", "idffile", ",", "'w'", ",", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "for", "key", ",", "value", "in", "idf_dict", ".", "items", "(", ")", ":", "\n", "            ", "f", ".", "write", "(", "key", "+", "\" \"", "+", "str", "(", "value", ")", "+", "'\\n'", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "fcorpus", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.load_idf": [[28, 41], ["print", "codecs.open", "float", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "load_idf", "(", "idffile", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "idf_dict", "=", "{", "}", "\n", "with", "codecs", ".", "open", "(", "idffile", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "word", ",", "freq", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "cnt", "+=", "1", "\n", "", "except", "Exception", ":", "\n", "                ", "pass", "\n", "", "idf_dict", "[", "word", "]", "=", "float", "(", "freq", ")", "\n", "", "", "print", "(", "'Vocabularies loaded: %d'", "%", "cnt", ")", "\n", "return", "idf_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.gen_tf": [[43, 55], ["text.split", "len", "tf_dict.get"], "function", ["None"], ["", "def", "gen_tf", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Given a segmented string, return a dict of tf.\n    \"\"\"", "\n", "tokens", "=", "text", ".", "split", "(", ")", "\n", "total", "=", "len", "(", "tokens", ")", "\n", "tf_dict", "=", "{", "}", "\n", "for", "w", "in", "tokens", ":", "\n", "        ", "tf_dict", "[", "w", "]", "=", "tf_dict", ".", "get", "(", "w", ",", "0.0", ")", "+", "1.0", "\n", "", "for", "k", "in", "tf_dict", ":", "\n", "        ", "tf_dict", "[", "k", "]", "/=", "total", "\n", "", "return", "tf_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.gen_tfidf": [[57, 69], ["text.split", "len", "tfidf_dict.get", "idf_dict.get"], "function", ["None"], ["", "def", "gen_tfidf", "(", "text", ",", "idf_dict", ")", ":", "\n", "    ", "\"\"\"\n    Given a segmented string and idf dict, return a dict of tfidf.\n    \"\"\"", "\n", "tokens", "=", "text", ".", "split", "(", ")", "\n", "total", "=", "len", "(", "tokens", ")", "\n", "tfidf_dict", "=", "{", "}", "\n", "for", "w", "in", "tokens", ":", "\n", "        ", "tfidf_dict", "[", "w", "]", "=", "tfidf_dict", ".", "get", "(", "w", ",", "0.0", ")", "+", "1.0", "# count tf", "\n", "", "for", "k", "in", "tfidf_dict", ":", "\n", "        ", "tfidf_dict", "[", "k", "]", "*=", "idf_dict", ".", "get", "(", "k", ",", "0.0", ")", "/", "total", "\n", "", "return", "tfidf_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.load_stopwords": [[71, 77], ["codecs.open", "f.readlines", "x.strip"], "function", ["None"], ["", "def", "load_stopwords", "(", "stopwordsfile", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "stopwordsfile", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.tfidf_utils.remove_stopwords": [[79, 83], ["text.split"], "function", ["None"], ["", "def", "remove_stopwords", "(", "text", ",", "stopwords", ")", ":", "\n", "    ", "tokens", "=", "text", ".", "split", "(", ")", "\n", "filtered_tokens", "=", "[", "word", "for", "word", "in", "tokens", "if", "word", "not", "in", "stopwords", "]", "\n", "return", "\" \"", ".", "join", "(", "filtered_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.pd_utils.export_columns": [[6, 14], ["pandas.read_csv", "df_out.to_csv"], "function", ["None"], ["def", "export_columns", "(", "fin", ",", "fout", ",", "col_list", ",", "\n", "sep_in", ",", "sep_out", ",", "keep_header", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Export column(s) from a file.\n    \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "fin", ",", "sep", "=", "sep_in", ")", "\n", "df_out", "=", "df", "[", "col_list", "]", "\n", "df_out", ".", "to_csv", "(", "fout", ",", "sep", "=", "sep_out", ",", "header", "=", "keep_header", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.pd_utils.import_column": [[16, 26], ["open", "open.read().splitlines", "pandas.read_csv", "pd.read_csv.to_csv", "open.read"], "function", ["None"], ["", "def", "import_column", "(", "fin", ",", "fcol", ",", "fout", ",", "col", ",", "\n", "sep_in", ",", "sep_out", ",", "contain_header", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Merge a column from a file.\n    \"\"\"", "\n", "fcol", "=", "open", "(", "fcol", ",", "\"r\"", ")", "\n", "lines", "=", "fcol", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "fin", ",", "sep", "=", "sep_in", ",", "quoting", "=", "csv", ".", "QUOTE_NONE", ")", "\n", "df", "[", "col", "]", "=", "lines", "\n", "df", ".", "to_csv", "(", "fout", ",", "sep", "=", "sep_out", ",", "header", "=", "True", ",", "index", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.__init__": [[13, 19], ["visdom.Visdom"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "env", "=", "'default'", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "env", ",", "**", "kwargs", ")", "\n", "# \u753b\u7684\u7b2c\u51e0\u4e2a\u6570\uff0c\u76f8\u5f53\u4e8e\u6a2a\u5ea7\u6807", "\n", "# \u4fdd\u5b58\uff08\u2019loss',23\uff09 \u5373loss\u7684\u7b2c23\u4e2a\u70b9", "\n", "self", ".", "index", "=", "{", "}", "\n", "self", ".", "log_text", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.reinit": [[20, 25], ["visdom.Visdom"], "methods", ["None"], ["", "def", "reinit", "(", "self", ",", "env", "=", "'default'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" To change visdom configuration.\n        \"\"\"", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "env", ",", "**", "kwargs", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.plot_many": [[26, 32], ["d.iteritems", "visualize.Visualizer.plot"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.plot"], ["", "def", "plot_many", "(", "self", ",", "d", ")", ":", "\n", "        ", "\"\"\" \u4e00\u6b21plot\u591a\u4e2a\n        @params d: dict (name,value) i.e. ('loss',0.11)\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "d", ".", "iteritems", "(", ")", ":", "\n", "            ", "self", ".", "plot", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.plot": [[33, 44], ["visualize.Visualizer.index.get", "visualize.Visualizer.vis.line", "numpy.array", "numpy.array", "unicode", "dict"], "methods", ["None"], ["", "", "def", "plot", "(", "self", ",", "name", ",", "y", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" self.plot('loss',1.00)\n        \"\"\"", "\n", "x", "=", "self", ".", "index", ".", "get", "(", "name", ",", "0", ")", "\n", "self", ".", "vis", ".", "line", "(", "Y", "=", "np", ".", "array", "(", "[", "y", "]", ")", ",", "X", "=", "np", ".", "array", "(", "[", "x", "]", ")", ",", "\n", "win", "=", "unicode", "(", "name", ")", ",", "\n", "opts", "=", "dict", "(", "title", "=", "name", ")", ",", "\n", "update", "=", "None", "if", "x", "==", "0", "else", "'append'", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "index", "[", "name", "]", "=", "x", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log": [[45, 52], ["visualize.Visualizer.vis.text", "time.strftime"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "info", ",", "win", "=", "'log_text'", ")", ":", "\n", "        ", "\"\"\" self.log({'loss':1,'lr':0.0001})\n        \"\"\"", "\n", "self", ".", "log_text", "+=", "(", "'[{time}] {info} <br>'", ".", "format", "(", "\n", "time", "=", "time", ".", "strftime", "(", "'%m%d_%H%M%S'", ")", ",", "\n", "info", "=", "info", ")", ")", "\n", "self", ".", "vis", ".", "text", "(", "self", ".", "log_text", ",", "win", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.__getattr__": [[53, 55], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "vis", ",", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.ml_utils.encode_onehot": [[6, 13], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.ml_utils.normalize": [[15, 23], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.ml_utils.accuracy": [[25, 30], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.ml_utils.sparse_mx_to_torch_sparse_tensor": [[32, 40], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy().long", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "sparse_mx.tocoo().astype.tocoo", "torch.from_numpy", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "\n", "sparse_mx", ".", "col", ")", ")", ")", ".", "long", "(", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.AttrDict.__init__": [[12, 15], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.read_config": [[17, 21], ["utils.AttrDict", "yaml.load", "open"], "function", ["None"], ["", "", "def", "read_config", "(", "path", ")", ":", "\n", "    ", "'''\u8bfb\u53d6config\u6587\u4ef6'''", "\n", "\n", "return", "AttrDict", "(", "yaml", ".", "load", "(", "open", "(", "path", ",", "'r'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.read_datas": [[23, 29], ["open().readlines", "list", "map", "open", "list", "x.split", "map"], "function", ["None"], ["", "def", "read_datas", "(", "filename", ",", "trans_to_num", "=", "False", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "lines", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", ")", ",", "lines", ")", ")", "\n", "if", "trans_to_num", ":", "\n", "        ", "lines", "=", "[", "list", "(", "map", "(", "int", ",", "line", ")", ")", "for", "line", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.save_datas": [[31, 37], ["list", "map", "open", "f.write", "list", "map"], "function", ["None"], ["", "def", "save_datas", "(", "data", ",", "filename", ",", "trans_to_str", "=", "False", ")", ":", "\n", "    ", "if", "trans_to_str", ":", "\n", "        ", "data", "=", "[", "list", "(", "map", "(", "str", ",", "line", ")", ")", "for", "line", "in", "data", "]", "\n", "", "lines", "=", "list", "(", "map", "(", "lambda", "x", ":", "\" \"", ".", "join", "(", "x", ")", ",", "data", ")", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging": [[39, 46], ["print", "open", "f.write"], "function", ["None"], ["", "", "def", "logging", "(", "file", ")", ":", "\n", "    ", "def", "write_log", "(", "s", ")", ":", "\n", "        ", "print", "(", "s", ")", "\n", "with", "open", "(", "file", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", ")", "\n", "\n", "", "", "return", "write_log", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.logging_csv": [[48, 55], ["open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "def", "logging_csv", "(", "file", ")", ":", "\n", "    ", "def", "write_csv", "(", "s", ")", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "s", ")", "\n", "\n", "", "", "return", "write_csv", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.format_time": [[57, 59], ["time.strftime"], "function", ["None"], ["", "def", "format_time", "(", "t", ")", ":", "\n", "    ", "return", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H:%M:%S\"", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_multi_bleu": [[61, 112], ["zip", "log_path.strip.strip", "os.system", "os.remove", "ref_1.append", "os.path.exists", "os.mkdir", "codecs.open", "codecs.open", "codecs.open", "codecs.open", "codecs.open", "open", "ft.read", "float", "len", "ref_2.append", "ref_2.append", "len", "ref_3.append", "ref_3.append", "len", "ref_4.append", "ref_4.append", "f.write", "f.write", "f.write", "f.write", "f.write", "ft.read.split"], "function", ["None"], ["", "def", "eval_multi_bleu", "(", "references", ",", "candidate", ",", "log_path", ")", ":", "\n", "    ", "ref_1", ",", "ref_2", ",", "ref_3", ",", "ref_4", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "refs", ",", "cand", "in", "zip", "(", "references", ",", "candidate", ")", ":", "\n", "        ", "ref_1", ".", "append", "(", "refs", "[", "0", "]", ")", "\n", "if", "len", "(", "refs", ")", ">", "1", ":", "\n", "            ", "ref_2", ".", "append", "(", "refs", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "ref_2", ".", "append", "(", "[", "]", ")", "\n", "", "if", "len", "(", "refs", ")", ">", "2", ":", "\n", "            ", "ref_3", ".", "append", "(", "refs", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "ref_3", ".", "append", "(", "[", "]", ")", "\n", "", "if", "len", "(", "refs", ")", ">", "3", ":", "\n", "            ", "ref_4", ".", "append", "(", "refs", "[", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "ref_4", ".", "append", "(", "[", "]", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_path", ")", "\n", "", "log_path", "=", "log_path", ".", "strip", "(", "'/'", ")", "\n", "ref_file_1", "=", "log_path", "+", "'/reference_1.txt'", "\n", "ref_file_2", "=", "log_path", "+", "'/reference_2.txt'", "\n", "ref_file_3", "=", "log_path", "+", "'/reference_3.txt'", "\n", "ref_file_4", "=", "log_path", "+", "'/reference_4.txt'", "\n", "cand_file", "=", "log_path", "+", "'/candidate.txt'", "\n", "with", "codecs", ".", "open", "(", "ref_file_1", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "ref_1", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", "+", "'\\n'", ")", "\n", "", "", "with", "codecs", ".", "open", "(", "ref_file_2", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "ref_2", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", "+", "'\\n'", ")", "\n", "", "", "with", "codecs", ".", "open", "(", "ref_file_3", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "ref_3", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", "+", "'\\n'", ")", "\n", "", "", "with", "codecs", ".", "open", "(", "ref_file_4", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "ref_4", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", "+", "'\\n'", ")", "\n", "", "", "with", "codecs", ".", "open", "(", "cand_file", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "candidate", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "temp", "=", "log_path", "+", "\"/result.txt\"", "\n", "command", "=", "\"perl multi-bleu.perl \"", "+", "ref_file_1", "+", "\" \"", "+", "ref_file_2", "+", "\" \"", "+", "ref_file_3", "+", "\" \"", "+", "ref_file_4", "+", "\"<\"", "+", "cand_file", "+", "\"> \"", "+", "temp", "\n", "os", ".", "system", "(", "command", ")", "\n", "with", "open", "(", "temp", ")", "as", "ft", ":", "\n", "        ", "result", "=", "ft", ".", "read", "(", ")", "\n", "", "os", ".", "remove", "(", "temp", ")", "\n", "try", ":", "\n", "        ", "bleu", "=", "float", "(", "result", ".", "split", "(", "','", ")", "[", "0", "]", "[", "7", ":", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "bleu", "=", "0", "\n", "", "return", "result", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.eval_bleu": [[114, 140], ["log_path.strip.strip", "os.system", "os.remove", "os.path.exists", "os.mkdir", "codecs.open", "codecs.open", "open", "ft.read", "float", "f.write", "f.write", "ft.read.split"], "function", ["None"], ["", "def", "eval_bleu", "(", "reference", ",", "candidate", ",", "log_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_path", ")", "\n", "", "log_path", "=", "log_path", ".", "strip", "(", "'/'", ")", "\n", "ref_file", "=", "log_path", "+", "'/reference.txt'", "\n", "cand_file", "=", "log_path", "+", "'/candidate.txt'", "\n", "with", "codecs", ".", "open", "(", "ref_file", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "reference", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", "+", "'\\n'", ")", "\n", "", "", "with", "codecs", ".", "open", "(", "cand_file", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "s", "in", "candidate", ":", "\n", "            ", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", ".", "strip", "(", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "temp", "=", "log_path", "+", "\"/result.txt\"", "\n", "command", "=", "\"perl multi-bleu.perl \"", "+", "ref_file", "+", "\"<\"", "+", "cand_file", "+", "\"> \"", "+", "temp", "\n", "os", ".", "system", "(", "command", ")", "\n", "with", "open", "(", "temp", ")", "as", "ft", ":", "\n", "        ", "result", "=", "ft", ".", "read", "(", ")", "\n", "", "os", ".", "remove", "(", "temp", ")", "\n", "#print(result)", "\n", "#bleu = float(result.split(',')[0][7:])", "\n", "try", ":", "\n", "        ", "bleu", "=", "float", "(", "result", ".", "split", "(", "','", ")", "[", "0", "]", "[", "7", ":", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "bleu", "=", "0", "\n", "", "return", "result", ",", "bleu", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.write_result_to_file": [[142, 166], ["len", "len", "log_path.strip.strip", "os.path.exists", "os.mkdir", "codecs.open", "range", "range", "f.write", "f.write"], "function", ["None"], ["", "def", "write_result_to_file", "(", "printlist", ",", "log_path", ")", ":", "\n", "    ", "list_num", "=", "len", "(", "printlist", ")", "\n", "line_num", "=", "len", "(", "printlist", "[", "0", "]", ")", "\n", "#print(list_num)", "\n", "#print(line_num)", "\n", "\n", "#assert len(title) == len(candidate_no)==len(candidate_withtgt)==len(query), (len(title), len(candidate_no),len(candidate_withtgt),len(query))", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_path", ")", "\n", "", "log_path", "=", "log_path", ".", "strip", "(", "'/'", ")", "\n", "log_file", "=", "log_path", "+", "'/observe_result.tsv'", "\n", "with", "codecs", ".", "open", "(", "log_file", ",", "'w'", ",", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", "in", "range", "(", "line_num", ")", ":", "\n", "            ", "for", "list_idx", "in", "range", "(", "list_num", ")", ":", "\n", "#print(printlist[line_idx][list_idx])", "\n", "                ", "f", ".", "write", "(", "\"\"", ".", "join", "(", "printlist", "[", "list_idx", "]", "[", "line_idx", "]", ")", ".", "strip", "(", ")", "+", "'\\t'", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "'''for q,t, c1,c2 in zip(query,title,candidate_no,candidate_withtgt ):\n            f.write(\"\".join(q).strip() + '\\t')\n            f.write(\"\".join(t).strip() + '\\t')\n            f.write(\"\".join(c1).strip() + '\\t')\n            f.write(\"\".join(c2).strip() + '\\t')\n            f.write(\"\\n\")'''", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.count_entity_num": [[168, 176], ["zip", "float", "type", "type", "len"], "function", ["None"], ["", "", "def", "count_entity_num", "(", "candidates", ",", "tags", ")", ":", "\n", "    ", "assert", "type", "(", "candidates", ")", "==", "list", "and", "type", "(", "tags", ")", "==", "list", "\n", "num", "=", "0.", "\n", "for", "c", ",", "t", "in", "zip", "(", "candidates", ",", "tags", ")", ":", "\n", "        ", "for", "word", "in", "c", ":", "\n", "            ", "if", "word", "in", "t", ":", "\n", "                ", "num", "+=", "1.", "\n", "", "", "", "return", "num", "/", "float", "(", "len", "(", "candidates", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.utils.bow": [[178, 185], ["None"], "function", ["None"], ["", "def", "bow", "(", "word_list", ")", ":", "\n", "    ", "word_dict", "=", "{", "}", "\n", "for", "word", "in", "word_list", ":", "\n", "        ", "if", "word", "not", "in", "word_dict", ":", "\n", "            ", "word_dict", "[", "word", "]", "=", "1", "\n", "#word_dict[word] += 1", "\n", "", "", "return", "word_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.str_utils.longestCommonPrefix": [[4, 19], ["len", "range", "len", "len", "len"], "function", ["None"], ["def", "longestCommonPrefix", "(", "strs", ")", ":", "\n", "    ", "\"\"\"\n    Get the longest prefix of a list of strings.\n    \"\"\"", "\n", "if", "len", "(", "strs", ")", "==", "0", ":", "\n", "        ", "return", "\"\"", "\n", "", "str", "=", "strs", "[", "0", "]", "\n", "Min", "=", "len", "(", "str", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "strs", ")", ")", ":", "\n", "        ", "j", "=", "0", "\n", "p", "=", "strs", "[", "i", "]", "\n", "while", "j", "<", "Min", "and", "j", "<", "len", "(", "p", ")", "and", "p", "[", "j", "]", "==", "str", "[", "j", "]", ":", "\n", "            ", "j", "+=", "1", "\n", "", "Min", "=", "Min", "if", "Min", "<", "j", "else", "j", "\n", "", "return", "str", "[", ":", "Min", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.dict_utils.sort_dict_by_key_str": [[6, 12], ["collections.OrderedDict", "sorted", "d.items"], "function", ["None"], ["def", "sort_dict_by_key_str", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Sort dictionary by its key values.\n    \"\"\"", "\n", "return", "OrderedDict", "(", "\n", "sorted", "(", "d", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.dict_utils.cosine_sim": [[14, 27], ["a.items", "len", "len", "b.get", "scipy.linalg.norm", "scipy.linalg.norm", "list", "list", "b.values", "a.values"], "function", ["None"], ["", "def", "cosine_sim", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "len", "(", "b", ")", "<", "len", "(", "a", ")", ":", "\n", "        ", "a", ",", "b", "=", "b", ",", "a", "\n", "", "res", "=", "0", "\n", "for", "key", ",", "a_value", "in", "a", ".", "items", "(", ")", ":", "\n", "        ", "res", "+=", "a_value", "*", "b", ".", "get", "(", "key", ",", "0", ")", "\n", "", "if", "res", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "try", ":", "\n", "        ", "res", "=", "res", "/", "norm", "(", "list", "(", "a", ".", "values", "(", ")", ")", ")", "/", "norm", "(", "list", "(", "b", ".", "values", "(", ")", ")", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "res", "=", "0", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_lstm.Graph_encoder_sample_weight.__init__": [[11, 29], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embedding", "=", "None", ",", "word_type_emb", "=", "None", ")", ":", "\n", "        ", "super", "(", "Graph_encoder_sample_weight", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "word_type_emb", "=", "word_type_emb", "\n", "self", ".", "gcn1", "=", "GCNConv", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "gcn2", "=", "GCNConv", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "config", ".", "emb_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "Linear", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "Linear", "(", "config", ".", "decoder_hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "x_w", "=", "nn", ".", "Linear", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "g_w", "=", "nn", ".", "Linear", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "\n", "self", ".", "lstm_x", "=", "nn", ".", "LSTM", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "lstm_g", "=", "nn", ".", "LSTM", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_lstm.Graph_encoder_sample_weight.pooling": [[31, 48], ["x.view.view.view", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "mask.size", "mask.size", "gcn_lstm.Graph_encoder_sample_weight.pool1", "gcn_lstm.Graph_encoder_sample_weight.pool2", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "pooling", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "h", "=", "torch", ".", "tanh", "(", "self", ".", "pool1", "(", "x", ")", ")", "\n", "# print(h)", "\n", "score", "=", "torch", ".", "squeeze", "(", "self", ".", "pool2", "(", "h", ")", ",", "-", "1", ")", "\n", "#print(score.size())", "\n", "#print(mask.size())", "\n", "\n", "score", "=", "score", "+", "mask", "\n", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "-", "1", ")", "\n", "# print(alpha)", "\n", "x_weight", "=", "torch", ".", "unsqueeze", "(", "alpha", ",", "-", "1", ")", "*", "x", "\n", "#print(x_weight.size())", "\n", "graph_out", "=", "torch", ".", "sum", "(", "x_weight", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "#print(graph_out.size())", "\n", "\n", "return", "graph_out", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_lstm.Graph_encoder_sample_weight.forward": [[50, 89], ["gcn_lstm.Graph_encoder_sample_weight.embedding", "gcn_lstm.Graph_encoder_sample_weight.w", "gcn_lstm.Graph_encoder_sample_weight.gcn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn_lstm.Graph_encoder_sample_weight.pooling", "gcn_lstm.Graph_encoder_sample_weight.gcn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn_lstm.Graph_encoder_sample_weight.pooling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "gcn_lstm.Graph_encoder_sample_weight.tanh", "x.view.view.view", "mask_pad.expand.expand.expand", "gcn_lstm.Graph_encoder_sample_weight.word_type_emb", "mask_pad.expand.expand.size", "mask_pad.expand.expand.size", "x.view.view.size", "x.view.view.size", "x.view.view.size", "x.view.view.unsqueeze", "gcn_lstm.Graph_encoder_sample_weight.unsqueeze", "gcn_lstm.Graph_encoder_sample_weight.lstm_x", "x1.unsqueeze", "gcn_lstm.Graph_encoder_sample_weight.unsqueeze", "gcn_lstm.Graph_encoder_sample_weight.lstm_x", "gcn_lstm.Graph_encoder_sample_weight.lstm_g"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_lstm.Graph_encoder_sample_weight.pooling", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_lstm.Graph_encoder_sample_weight.pooling"], ["", "def", "forward", "(", "self", ",", "data_batch", ",", "mask_pad", ",", "mask_score", ")", ":", "\n", "#length_x=mask_pad.sum(1).long()", "\n", "        ", "x", "=", "data_batch", ".", "x", "\n", "word_type", "=", "data_batch", ".", "word_type", "\n", "edge_index", "=", "data_batch", ".", "edge_index", "\n", "edge_attr", "=", "data_batch", ".", "edge_attr", "\n", "x", "=", "self", ".", "embedding", "(", "x", ")", "\n", "if", "self", ".", "config", ".", "use_wordtype", "==", "True", ":", "\n", "            ", "word_type", "=", "self", ".", "word_type_emb", "(", "word_type", ")", "\n", "x", "=", "x", "+", "word_type", "\n", "", "x", "=", "self", ".", "w", "(", "x", ")", "\n", "\n", "x1_mid", "=", "self", ".", "gcn1", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_attr", ")", "# maybe use highway", "\n", "x1_cat", "=", "torch", ".", "cat", "(", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "x1_mid", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "x1", "=", "self", ".", "lstm_x", "(", "x1_cat", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "x", "=", "x1", "\n", "\n", "graph_out_tensor1", "=", "self", ".", "pooling", "(", "x", ",", "mask_score", ")", "\n", "\n", "x2_mid", "=", "self", ".", "gcn2", "(", "x1", ",", "edge_index", ",", "edge_weight", "=", "edge_attr", ")", "\n", "\n", "x2_cat", "=", "torch", ".", "cat", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "x2_mid", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "lstm_x", "(", "x2_cat", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "x", "=", "x2", "\n", "\n", "graph_out_tensor2", "=", "self", ".", "pooling", "(", "x", ",", "mask_score", ")", "\n", "\n", "graph_out_tensor_cat", "=", "torch", ".", "cat", "(", "(", "graph_out_tensor1", ",", "graph_out_tensor2", ")", ",", "1", ")", "\n", "\n", "graph_out_tensor", "=", "self", ".", "lstm_g", "(", "graph_out_tensor_cat", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "graph_out_tensor", "=", "torch", ".", "squeeze", "(", "graph_out_tensor", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "mask_pad", ".", "size", "(", "0", ")", ",", "mask_pad", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "mask_pad", "=", "mask_pad", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "x", "=", "x", "*", "mask_pad", "\n", "return", "x", ",", "graph_out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.__init__": [[49, 88], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "models.Graph_encoder_sample_weight", "models.rl_sample", "torch.Embedding", "torch.Embedding", "torch.Embedding", "g2s_rl.graph2seq_rl.parameters"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ",", "use_cuda", ",", "emb", ",", "pretrain", "=", "None", ")", ":", "\n", "        ", "super", "(", "graph2seq_rl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "vocab", ".", "voc_size", "\n", "#self.occupy=nn.Linear(1,1)", "\n", "if", "pretrain", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "pretrain", "[", "'emb'", "]", "\n", "", "elif", "emb", "==", "0", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "config", ".", "emb_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "emb", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "word_type_emb", "=", "nn", ".", "Embedding", "(", "config", ".", "type_num_sam", ",", "config", ".", "emb_size", ")", "\n", "self", ".", "encoder", "=", "models", ".", "Graph_encoder_sample_weight", "(", "config", ",", "embedding", "=", "self", ".", "embedding", ",", "\n", "word_type_emb", "=", "self", ".", "word_type_emb", ")", "\n", "\n", "'''assert config.graph_model in ['gcn-uni','gat-lstm','gcn-lstm','gcn-lstm-n','gcn-gat-lstm']\n\n        if config.graph_model == 'gcn-uni':\n            self.encoder = models.Graph_encoder_sample_weight_uni(config, embedding=self.embedding,\n                                                           word_type_emb=self.word_type_emb)\n        elif config.graph_model == 'gat-lstm':\n            self.encoder = models.Graph_encoder_sample(config, embedding=self.embedding,\n                                                word_type_emb=self.word_type_emb)\n        elif config.graph_model == 'gcn-lstm':\n            self.encoder = models.Graph_encoder_sample_weight(config, embedding=self.embedding,\n                                                       word_type_emb=self.word_type_emb)\n        elif config.graph_model == 'gcn-lstm-n':\n            self.encoder = models.Graph_encoder_sample_weight_n(config, embedding=self.embedding,\n                                                         word_type_emb=self.word_type_emb)\n        elif config.graph_model == 'gcn-gat-lstm':\n            self.encoder = models.Graph_encoder_sample_combine(config, embedding=self.embedding,\n                                                               word_type_emb=self.word_type_emb)'''", "\n", "\n", "self", ".", "rl_sample", "=", "models", ".", "rl_sample", "(", "config", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.get_sample_neibour": [[92, 130], ["g2s_rl.graph2seq_rl.embedding", "g2s_rl.graph2seq_rl.rl_sample", "sub_num.squeeze().unbind.squeeze().unbind.long", "sample_ids.unbind.unbind.unbind", "nei_num.squeeze().unbind.squeeze().unbind.squeeze().unbind", "sub_num.squeeze().unbind.squeeze().unbind.squeeze().unbind", "zip", "g2s_rl.graph2seq_rl.get_sample_adj", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sample_node_idx_batch.append", "sample_adj_batch.append", "sample_adj_weight_batch.append", "word_type_batch.append", "nei_num.squeeze().unbind.squeeze().unbind.squeeze", "sub_num.squeeze().unbind.squeeze().unbind.squeeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "list", "range"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.get_sample_adj"], ["", "def", "get_sample_neibour", "(", "self", ",", "sub_x", ",", "sub_graph", ",", "extend_node_idx", ",", "neibour_node_idx", ",", "extend_adj", ",", "word_type_extend", ",", "sub_neibour_mask", ",", "nei_pad_mask", ",", "nei_num", ",", "sub_num", ",", "sample_type", "=", "None", ")", ":", "\n", "\n", "        ", "neibour_node_emb", "=", "self", ".", "embedding", "(", "neibour_node_idx", ")", "\n", "sample_ids", ",", "sample_prob_batch", "=", "self", ".", "rl_sample", "(", "sub_x", ",", "sub_graph", ",", "neibour_node_emb", ",", "sub_neibour_mask", ",", "nei_pad_mask", ",", "nei_num", ",", "sub_num", ",", "sample_type", "=", "sample_type", ")", "\n", "\n", "sub_num", "=", "sub_num", ".", "long", "(", ")", "\n", "sample_ids", "=", "sample_ids", ".", "unbind", "(", "0", ")", "\n", "sample_adj_batch", "=", "[", "]", "\n", "sample_adj_weight_batch", "=", "[", "]", "\n", "sample_node_idx_batch", "=", "[", "]", "\n", "word_type_batch", "=", "[", "]", "\n", "nei_num", "=", "nei_num", ".", "squeeze", "(", "-", "1", ")", ".", "unbind", "(", "0", ")", "\n", "sub_num", "=", "sub_num", ".", "squeeze", "(", "-", "1", ")", ".", "unbind", "(", "0", ")", "\n", "\n", "#print(sample_ids)", "\n", "#print(nei_num)", "\n", "\n", "\n", "for", "sub_node_num", ",", "sample_id", ",", "extend_adj", ",", "nei_num", ",", "extend_node_idx", ",", "word_type_extend", "in", "zip", "(", "sub_num", ",", "sample_ids", ",", "extend_adj", ",", "nei_num", ",", "extend_node_idx", ",", "word_type_extend", ")", ":", "\n", "            ", "if", "nei_num", "<", "self", ".", "config", ".", "sample_num", ":", "\n", "                ", "sample_id", "=", "sample_id", "[", ":", "nei_num", "]", "\n", "#print(sub_node_num)", "\n", "#print(sample_id)", "\n", "#print(extend_adj)", "\n", "#print(nei_num)", "\n", "", "sample_adj", ",", "sample_adj_weight", "=", "self", ".", "get_sample_adj", "(", "extend_adj", ",", "sub_node_num", ",", "sample_id", ")", "\n", "sub_id", "=", "torch", ".", "tensor", "(", "list", "(", "range", "(", "sub_node_num", ")", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "#print(sub_id)", "\n", "id", "=", "torch", ".", "cat", "(", "(", "sub_id", ",", "sample_id", ")", ",", "0", ")", "\n", "#print(extend_node_idx)", "\n", "sample_node_idx", "=", "extend_node_idx", "[", "id", "]", "\n", "word_type", "=", "word_type_extend", "[", "id", "]", "\n", "sample_node_idx_batch", ".", "append", "(", "sample_node_idx", ")", "\n", "sample_adj_batch", ".", "append", "(", "sample_adj", ")", "\n", "sample_adj_weight_batch", ".", "append", "(", "sample_adj_weight", ")", "\n", "word_type_batch", ".", "append", "(", "word_type", ")", "\n", "\n", "", "return", "sample_node_idx_batch", ",", "sample_adj_batch", ",", "sample_adj_weight_batch", ",", "sample_prob_batch", ",", "word_type_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.get_sample_adj": [[132, 141], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.utils.dense_to_sparse"], "methods", ["None"], ["", "def", "get_sample_adj", "(", "self", ",", "extend_adj", ",", "sub_node_num", ",", "sample_id", ")", ":", "\n", "        ", "sample1", "=", "extend_adj", "[", "sample_id", ",", ":", "]", "\n", "#print(sub_node_num)", "\n", "sample_adj_mid", "=", "torch", ".", "cat", "(", "(", "extend_adj", "[", ":", "sub_node_num", ",", ":", "]", ",", "sample1", ")", ",", "0", ")", "\n", "sample2", "=", "sample_adj_mid", "[", ":", ",", "sample_id", "]", "\n", "sample_adj", "=", "torch", ".", "cat", "(", "(", "sample_adj_mid", "[", ":", ",", ":", "sub_node_num", "]", ",", "sample2", ")", ",", "1", ")", "\n", "sample_adj", ",", "sample_adj_weight", "=", "dense_to_sparse", "(", "sample_adj", ")", "\n", "\n", "return", "sample_adj", ",", "sample_adj_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.get_match_reward": [[143, 161], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.ne().sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "x.cuda.cuda.cuda", "state.cuda.cuda.cuda", "word_type.cuda.cuda.cuda", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], ["", "def", "get_match_reward", "(", "self", ",", "x", ",", "state", ",", "e", ")", ":", "\n", "        ", "word_type", "=", "e", ".", "word_type", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "state", "=", "state", ".", "cuda", "(", ")", "\n", "word_type", "=", "word_type", ".", "cuda", "(", ")", "\n", "", "x", "=", "torch", ".", "squeeze", "(", "x", ",", "0", ")", "\n", "state", "=", "torch", ".", "squeeze", "(", "state", "[", "0", "]", "[", "-", "1", "]", ",", "0", ")", "\n", "#print(state)", "\n", "#print(x)", "\n", "query_num", "=", "torch", ".", "ne", "(", "(", "torch", ".", "eq", "(", "word_type", ",", "1", ")", "+", "torch", ".", "eq", "(", "word_type", ",", "2", ")", ")", ",", "0", ")", ".", "sum", "(", ")", "\n", "query", "=", "x", "[", ":", "query_num", "]", "\n", "query", "=", "F", ".", "softmax", "(", "query", ",", "-", "1", ")", "\n", "state", "=", "F", ".", "softmax", "(", "state", ",", "-", "1", ")", "\n", "match_reward", "=", "torch", ".", "mul", "(", "state", ",", "query", ")", ".", "sum", "(", ")", "\n", "match_reward", "=", "match_reward", "/", "query_num", "\n", "\n", "return", "match_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.forward": [[165, 324], ["range", "g2s_rl.sort_list", "g2s_rl.sort_list", "g2s_rl.sort_list", "torch.ones().fill_().cuda.index_select", "torch.ones().fill_().cuda.index_select", "torch.ones().fill_().cuda.index_select", "g2s_rl.sort_list", "g2s_rl.sort_list", "g2s_rl.sort_list", "g2s_rl.sort_list", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "g2s_rl.word_type_trans", "word_type_batch.unbind.unbind.unbind", "len", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "list.ne().float().unsqueeze", "list.ne().float().unsqueeze.sum", "g2s_rl.mask_trans", "list", "list", "zip", "torch_geometric.data.Batch.from_data_list", "g2s_rl.graph2seq_rl.encoder", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence.ne", "torch.nn.utils.rnn.pad_sequence.ne", "torch.nn.utils.rnn.pad_sequence.ne", "mask_trans.sum().unsqueeze", "g2s_rl.mask_trans", "g2s_rl.pad_martix", "g2s_rl.graph2seq_rl.get_sample_neibour", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "prob_no.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "torch.ones().fill_().cuda", "s.cuda", "e.cuda", "n.cuda", "s.cuda", "s.cuda", "e.cuda", "w.cuda", "w.cuda", "t.cuda", "s.cuda", "q.cuda", "neibour_node_idx[].size", "sub_node_idx_no.append", "sub_adj_no.append", "sub_adj_weight_no.append", "extend_node_idx_no.append", "torch_geometric.utils.dense_to_sparse", "extend_adj_no.append", "extend_adj_weight_no.append", "word_type_no.append", "word_type_sub_no.append", "tgt_no.append", "query_no.append", "index_no.append", "list.append", "extend_node_idx_s.append", "torch.nn.utils.rnn.pad_sequence.append", "torch.nn.utils.rnn.pad_sequence.append", "torch.nn.utils.rnn.pad_sequence.append", "sub_adj_s.append", "sub_adj_weight_s.append", "extend_adj_s.append", "word_type_s.append", "list.append", "pad_martix.append", "tgt_s.append", "query_s.append", "index_s.append", "list.ne().float", "torch_geometric.data.Data", "torch_geometric.data.Batch.from_data_list.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "prob_avg.detach", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "list.ne().float", "mask_trans.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "list.ne", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "list.ne", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.size", "len"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.word_type_trans", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.mask_trans", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.mask_trans", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.pad_martix", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.graph2seq_rl.get_sample_neibour"], ["", "def", "forward", "(", "self", ",", "batch", ",", "train_type", "=", "None", ",", "sample", "=", "True", ",", "sample_type", "=", "None", ")", ":", "\n", "        ", "sub_node_idx", ",", "extend_node_idx", ",", "neibour_node_idx", ",", "sub_adj", ",", "sub_adj_weight", ",", "extend_adj", ",", "word_type", ",", "tgt", ",", "sub_neibour_mask", ",", "word_type_sub", "=", "batch", ".", "sub_node_idx", ",", "batch", ".", "extend_node_idx", ",", "batch", ".", "neibour_node_idx", ",", "batch", ".", "sub_adj", ",", "batch", ".", "sub_adj_weight", ",", "batch", ".", "extend_adj", ",", "batch", ".", "word_type", ",", "batch", ".", "ads", ",", "batch", ".", "sub_neibour_mask", ",", "batch", ".", "word_type_sub", "\n", "query", "=", "batch", ".", "query", "\n", "#extend_adj_weight=batch.extend_adj_weight", "\n", "if", "self", ".", "use_cuda", "==", "True", ":", "\n", "            ", "sub_node_idx", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sub_node_idx", "]", "\n", "extend_node_idx", "=", "[", "e", ".", "cuda", "(", ")", "for", "e", "in", "extend_node_idx", "]", "\n", "neibour_node_idx", "=", "[", "n", ".", "cuda", "(", ")", "for", "n", "in", "neibour_node_idx", "]", "\n", "sub_adj", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sub_adj", "]", "\n", "sub_adj_weight", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sub_adj_weight", "]", "\n", "extend_adj", "=", "[", "e", ".", "cuda", "(", ")", "for", "e", "in", "extend_adj", "]", "\n", "word_type", "=", "[", "w", ".", "cuda", "(", ")", "for", "w", "in", "word_type", "]", "\n", "word_type_sub", "=", "[", "w", ".", "cuda", "(", ")", "for", "w", "in", "word_type_sub", "]", "\n", "tgt", "=", "[", "t", ".", "cuda", "(", ")", "for", "t", "in", "tgt", "]", "\n", "sub_neibour_mask", "=", "[", "s", ".", "cuda", "(", ")", "for", "s", "in", "sub_neibour_mask", "]", "\n", "# print(query)", "\n", "query", "=", "[", "q", ".", "cuda", "(", ")", "for", "q", "in", "query", "]", "\n", "#extend_adj_weight=[e.cuda() for e in extend_adj_weight]", "\n", "\n", "# =====\u5206\u89e3=====", "\n", "", "sub_node_idx_no", "=", "[", "]", "\n", "sub_adj_no", "=", "[", "]", "\n", "sub_adj_weight_no", "=", "[", "]", "\n", "extend_node_idx_no", "=", "[", "]", "\n", "extend_adj_no", "=", "[", "]", "\n", "extend_adj_weight_no", "=", "[", "]", "\n", "word_type_no", "=", "[", "]", "\n", "word_type_sub_no", "=", "[", "]", "\n", "tgt_no", "=", "[", "]", "\n", "query_no", "=", "[", "]", "\n", "index_no", "=", "[", "]", "\n", "\n", "sub_node_idx_s", "=", "[", "]", "\n", "extend_node_idx_s", "=", "[", "]", "\n", "neibour_node_idx_s", "=", "[", "]", "\n", "sub_adj_s", "=", "[", "]", "\n", "sub_adj_weight_s", "=", "[", "]", "\n", "extend_adj_s", "=", "[", "]", "\n", "word_type_s", "=", "[", "]", "\n", "word_type_sub_s", "=", "[", "]", "\n", "sub_neibour_mask_s", "=", "[", "]", "\n", "tgt_s", "=", "[", "]", "\n", "query_s", "=", "[", "]", "\n", "index_s", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sub_node_idx", ")", ")", ":", "\n", "            ", "if", "neibour_node_idx", "[", "i", "]", ".", "size", "(", "0", ")", "<", "self", ".", "config", ".", "sample_num", ":", "\n", "                ", "sub_node_idx_no", ".", "append", "(", "sub_node_idx", "[", "i", "]", ")", "\n", "sub_adj_no", ".", "append", "(", "sub_adj", "[", "i", "]", ")", "\n", "sub_adj_weight_no", ".", "append", "(", "sub_adj_weight", "[", "i", "]", ")", "\n", "extend_node_idx_no", ".", "append", "(", "extend_node_idx", "[", "i", "]", ")", "\n", "extend_adj_i", ",", "extend_adj_weight_i", "=", "dense_to_sparse", "(", "extend_adj", "[", "i", "]", ")", "\n", "extend_adj_no", ".", "append", "(", "extend_adj_i", ")", "\n", "extend_adj_weight_no", ".", "append", "(", "extend_adj_weight_i", ")", "\n", "word_type_no", ".", "append", "(", "word_type", "[", "i", "]", ")", "\n", "word_type_sub_no", ".", "append", "(", "word_type_sub", "[", "i", "]", ")", "\n", "tgt_no", ".", "append", "(", "tgt", "[", "i", "]", ")", "\n", "query_no", ".", "append", "(", "query", "[", "i", "]", ")", "\n", "index_no", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "sub_node_idx_s", ".", "append", "(", "sub_node_idx", "[", "i", "]", ")", "\n", "extend_node_idx_s", ".", "append", "(", "extend_node_idx", "[", "i", "]", ")", "\n", "neibour_node_idx_s", ".", "append", "(", "neibour_node_idx", "[", "i", "]", ")", "\n", "sub_adj_s", ".", "append", "(", "sub_adj", "[", "i", "]", ")", "\n", "sub_adj_weight_s", ".", "append", "(", "sub_adj_weight", "[", "i", "]", ")", "\n", "extend_adj_s", ".", "append", "(", "extend_adj", "[", "i", "]", ")", "\n", "word_type_s", ".", "append", "(", "word_type", "[", "i", "]", ")", "\n", "word_type_sub_s", ".", "append", "(", "word_type_sub", "[", "i", "]", ")", "\n", "sub_neibour_mask_s", ".", "append", "(", "sub_neibour_mask", "[", "i", "]", ")", "\n", "tgt_s", ".", "append", "(", "tgt", "[", "i", "]", ")", "\n", "query_s", ".", "append", "(", "query", "[", "i", "]", ")", "\n", "index_s", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "sample", "==", "True", ":", "\n", "#==\u91c7\u6837======", "\n", "            ", "data_batch", "=", "[", "]", "\n", "sub_node_idx_s", "=", "pad_sequence", "(", "sub_node_idx_s", ",", "batch_first", "=", "True", ")", "\n", "word_type_sub_s", "=", "pad_sequence", "(", "word_type_sub_s", ",", "batch_first", "=", "True", ")", "\n", "mask_pad", "=", "sub_node_idx_s", ".", "ne", "(", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "sub_num", "=", "mask_pad", ".", "sum", "(", "1", ")", "\n", "mask_score", "=", "mask_trans", "(", "sub_node_idx_s", ".", "ne", "(", "0", ")", ".", "float", "(", ")", ")", "\n", "sub_node_idx_s", "=", "list", "(", "sub_node_idx_s", ")", "\n", "word_type_sub_s", "=", "list", "(", "word_type_sub_s", ")", "\n", "\n", "for", "x", ",", "a", ",", "aw", ",", "w", "in", "zip", "(", "sub_node_idx_s", ",", "sub_adj_s", ",", "sub_adj_weight_s", ",", "word_type_sub_s", ")", ":", "\n", "                ", "data", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "a", ",", "edge_attr", "=", "aw", ",", "word_type", "=", "w", "[", ":", "x", ".", "size", "(", "0", ")", "]", ")", "\n", "data_batch", ".", "append", "(", "data", ")", "\n", "\n", "", "data_batch", "=", "Batch", ".", "from_data_list", "(", "data_batch", ",", "follow_batch", "=", "[", "]", ")", "\n", "sub_x", ",", "sub_graph", "=", "self", ".", "encoder", "(", "data_batch", ",", "mask_pad", ",", "mask_score", ")", "\n", "#extend_node_idx=pad_sequence(extend_node_idx,batch_first=True)", "\n", "neibour_node_idx_s", "=", "pad_sequence", "(", "neibour_node_idx_s", ",", "batch_first", "=", "True", ")", "\n", "nei_pad_mask", "=", "neibour_node_idx_s", ".", "ne", "(", "0", ")", "\n", "nei_num", "=", "nei_pad_mask", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "nei_pad_mask", "=", "mask_trans", "(", "nei_pad_mask", ")", "\n", "#print(nei_pad_mask)", "\n", "sub_neibour_mask_s", "=", "pad_martix", "(", "sub_neibour_mask_s", ")", "\n", "\n", "sample_node_idx_batch", ",", "sample_adj_batch", ",", "sample_adj_weight_batch", ",", "sample_prob_batch", ",", "word_type_batch", "=", "self", ".", "get_sample_neibour", "(", "sub_x", ",", "sub_graph", ",", "\n", "extend_node_idx_s", ",", "neibour_node_idx_s", ",", "\n", "extend_adj_s", ",", "word_type_s", ",", "\n", "sub_neibour_mask_s", ",", "nei_pad_mask", ",", "nei_num", ",", "sub_num", ",", "sample_type", "=", "sample_type", ")", "\n", "\n", "prob_avg", "=", "torch", ".", "mean", "(", "sample_prob_batch", ",", "0", ",", "keepdim", "=", "False", ")", ".", "data", "\n", "# print(prob_avg)", "\n", "prob_no", "=", "torch", ".", "ones", "(", "len", "(", "tgt_no", ")", ")", ".", "fill_", "(", "prob_avg", ".", "detach", "(", ")", ")", "\n", "prob_no", "=", "prob_no", ".", "cuda", "(", ")", "\n", "# print(sample_prob_batch)", "\n", "\n", "# ===\u5408\u5e76====", "\n", "#if train_type == 'sample_sup' or train_type == 'generate':", "\n", "\n", "sample_node_idx_batch", "=", "sample_node_idx_batch", "+", "extend_node_idx_no", "\n", "sample_adj_batch", "=", "sample_adj_batch", "+", "extend_adj_no", "\n", "sample_adj_weight_batch", "=", "sample_adj_weight_batch", "+", "extend_adj_weight_no", "\n", "sample_prob_batch", "=", "torch", ".", "cat", "(", "(", "sample_prob_batch", ",", "prob_no", ")", ",", "0", ")", "\n", "\n", "word_type_batch", "=", "word_type_batch", "+", "word_type_no", "\n", "sub_node_idx", "=", "sub_node_idx_s", "+", "sub_node_idx_no", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "word_type_batch", "=", "word_type_sub_s", "+", "word_type_sub_no", "\n", "sample_node_idx_batch", "=", "sub_node_idx_s", "+", "sub_node_idx_no", "\n", "sample_adj_batch", "=", "sub_adj_s", "+", "sub_adj_no", "\n", "sample_adj_weight_batch", "=", "sub_adj_weight_s", "+", "sub_adj_weight_no", "\n", "sample_prob_batch", "=", "torch", ".", "ones", "(", "len", "(", "sample_node_idx_batch", ")", ")", ".", "fill_", "(", "1", ")", ".", "cuda", "(", ")", "\n", "sub_node_idx", "=", "sub_node_idx_s", "+", "sub_node_idx_no", "\n", "\n", "\n", "", "tgt", "=", "tgt_s", "+", "tgt_no", "\n", "query", "=", "query_s", "+", "query_no", "\n", "index", "=", "index_s", "+", "index_no", "\n", "\n", "# ===\u6392\u5e8f====", "\n", "sample_node_idx_batch", "=", "sort_list", "(", "sample_node_idx_batch", ",", "index", ")", "\n", "sample_adj_batch", "=", "sort_list", "(", "sample_adj_batch", ",", "index", ")", "\n", "sample_adj_weight_batch", "=", "sort_list", "(", "sample_adj_weight_batch", ",", "index", ")", "\n", "sample_prob_batch", "=", "sample_prob_batch", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "torch", ".", "tensor", "(", "index", ")", ".", "cuda", "(", ")", ")", "\n", "tgt", "=", "sort_list", "(", "tgt", ",", "index", ")", "\n", "word_type_batch", "=", "sort_list", "(", "word_type_batch", ",", "index", ")", "\n", "sub_node_idx", "=", "sort_list", "(", "sub_node_idx", ",", "index", ")", "\n", "query", "=", "sort_list", "(", "query", ",", "index", ")", "\n", "\n", "\n", "tgt", "=", "torch", ".", "stack", "(", "tgt", ",", "dim", "=", "0", ")", "\n", "#print(sample_prob_batch)", "\n", "#word_type_batch = word_type", "\n", "word_type_batch", "=", "pad_sequence", "(", "word_type_batch", ",", "batch_first", "=", "True", ")", "\n", "word_type_batch", "=", "word_type_trans", "(", "word_type_batch", ")", "\n", "word_type_batch", "=", "word_type_batch", ".", "unbind", "(", "0", ")", "\n", "'''sample_node_idx_batch=extend_node_idx\n        sample_adj_batch=extend_adj\n        sample_adj_weight_batch=extend_adj_weight\n        sample_prob_batch=torch.tensor([1])'''", "\n", "\n", "return", "sample_node_idx_batch", ",", "sample_adj_batch", ",", "sample_adj_weight_batch", ",", "sample_prob_batch", ",", "tgt", ",", "word_type_batch", ",", "query", ",", "sub_node_idx", "\n", "", "", "def", "get_key", "(", "item", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.word_type_trans": [[12, 21], ["word_type.eq", "word_type.eq", "word_type.eq", "mask_ori.ne().long.ne().long", "word_type.eq().long", "mask_ori.ne().long.ne", "word_type.eq"], "function", ["None"], ["def", "word_type_trans", "(", "word_type", ")", ":", "\n", "    ", "mask1", "=", "word_type", ".", "eq", "(", "1", ")", "\n", "mask2", "=", "word_type", ".", "eq", "(", "2", ")", "\n", "mask3", "=", "word_type", ".", "eq", "(", "3", ")", "\n", "mask_nei", "=", "(", "word_type", ".", "eq", "(", "4", ")", ".", "long", "(", ")", ")", "*", "2", "\n", "mask_ori", "=", "mask1", "+", "mask2", "+", "mask3", "\n", "mask_ori", "=", "mask_ori", ".", "ne", "(", "0", ")", ".", "long", "(", ")", "\n", "word_type", "=", "mask_ori", "+", "mask_nei", "\n", "return", "word_type", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.pad_martix": [[22, 43], ["max", "max", "zip", "torch.stack", "torch.stack", "torch.stack", "pad.size", "pad.size", "torch.ZeroPad2d", "nn.ZeroPad2d.", "torch.stack.append"], "function", ["None"], ["", "def", "pad_martix", "(", "martix_list", ")", ":", "\n", "\n", "    ", "length", "=", "[", "martix", ".", "size", "(", "0", ")", "for", "martix", "in", "martix_list", "]", "\n", "wide", "=", "[", "martix", ".", "size", "(", "1", ")", "for", "martix", "in", "martix_list", "]", "\n", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "#print(max_length)", "\n", "max_wide", "=", "max", "(", "wide", ")", "\n", "#print(max_wide)", "\n", "martix_pad", "=", "[", "]", "\n", "for", "martix", ",", "l", ",", "w", "in", "zip", "(", "martix_list", ",", "length", ",", "wide", ")", ":", "\n", "        ", "pad_l", "=", "max_length", "-", "l", "\n", "#print(pad_l)", "\n", "pad_w", "=", "max_wide", "-", "w", "\n", "pad", "=", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "pad_w", ",", "0", ",", "pad_l", ")", ")", "\n", "martix", "=", "pad", "(", "martix", ")", "\n", "martix_pad", ".", "append", "(", "martix", ")", "\n", "#print(martix_pad)", "\n", "\n", "", "martix_pad", "=", "torch", ".", "stack", "(", "martix_pad", ",", "0", ")", "\n", "return", "martix_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.mask_trans": [[45, 48], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill", "float", "mask.float().masked_fill().masked_fill.float"], "function", ["None"], ["", "def", "mask_trans", "(", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "", "class", "graph2seq_rl", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.get_key": [[324, 326], ["None"], "function", ["None"], ["", "", "def", "get_key", "(", "item", ")", ":", "\n", "    ", "return", "item", "[", "1", "]", "\n", "", "def", "sort_list", "(", "list", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.g2s_rl.sort_list": [[326, 335], ["zip", "list_sort.sort", "list_sort.append", "list_out.append"], "function", ["None"], ["", "def", "sort_list", "(", "list", ",", "index", ")", ":", "\n", "    ", "list_sort", "=", "[", "]", "\n", "for", "l", ",", "i", "in", "zip", "(", "list", ",", "index", ")", ":", "\n", "        ", "list_sort", ".", "append", "(", "(", "l", ",", "i", ")", ")", "\n", "", "list_sort", ".", "sort", "(", "key", "=", "get_key", ")", "\n", "list_out", "=", "[", "]", "\n", "for", "item", "in", "list_sort", ":", "\n", "        ", "list_out", ".", "append", "(", "item", "[", "0", "]", ")", "\n", "", "return", "list_out", "", "", ""]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.score.Score.__init__": [[34, 37], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Score", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_w", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.score.Score.compute_score": [[38, 53], ["sub_graph.expand.expand.unsqueeze", "sub_graph.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.softmax.Score.n_w", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax.sum", "torch.softmax", "torch.softmax", "torch.softmax", "x.size", "neibour.size", "sub_graph.expand.expand.size", "sub_graph.expand.expand.size", "neibour.size", "sub_graph.expand.expand.size"], "methods", ["None"], ["", "def", "compute_score", "(", "self", ",", "x", ",", "neibour", ",", "sub_graph", ",", "pmi", ",", "nei_pad_mask", ")", ":", "\n", "\n", "        ", "assert", "x", ".", "size", "(", "1", ")", "!=", "0", "\n", "assert", "neibour", ".", "size", "(", "1", ")", "!=", "0", "\n", "assert", "sub_graph", ".", "size", "(", "0", ")", "!=", "0", "\n", "sub_graph", "=", "sub_graph", ".", "unsqueeze", "(", "1", ")", "\n", "sub_graph", "=", "sub_graph", ".", "expand", "(", "sub_graph", ".", "size", "(", "0", ")", ",", "neibour", ".", "size", "(", "1", ")", ",", "sub_graph", ".", "size", "(", "2", ")", ")", "\n", "mid", "=", "torch", ".", "cat", "(", "(", "neibour", ",", "sub_graph", ")", ",", "2", ")", "\n", "score", "=", "self", ".", "n_w", "(", "mid", ")", "\n", "score", "=", "torch", ".", "sigmoid", "(", "score", ")", "\n", "score", "=", "score", ".", "sum", "(", "2", ")", "\n", "score", "=", "score", "+", "nei_pad_mask", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "-", "1", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.score.rl_sample.__init__": [[55, 62], ["torch.Module.__init__", "score.Score", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "rl_sample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "config", ".", "emb_size", "\n", "self", ".", "hidden_size", "=", "config", ".", "encoder_hidden_size", "\n", "self", ".", "score", "=", "Score", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "sample_num", "=", "config", ".", "sample_num", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.score.rl_sample.forward": [[63, 100], ["nei_pad_mask.size", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "neibour_id.cuda.cuda.cuda", "nei_num.expand().float.expand().float.expand().float", "sub_num.expand().float.expand().float.expand().float", "score.rl_sample.linear2", "score.rl_sample.score.compute_score", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "one_hot.bool.bool.cuda", "one_hot.bool.bool.scatter_", "one_hot.bool.bool.bool", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "sample_prob.view().float.view().float.view().float", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "sample_id.long.long.view().float", "sample_id.long.long.long", "score.rl_sample.size", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "score.rl_sample.size", "torch.multinomial.long", "torch.multinomial.long", "torch.multinomial.long", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "nei_num.expand().float.expand().float.expand", "sub_num.expand().float.expand().float.expand", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "sample_prob.view().float.view().float.view", "sample_id.long.long.view", "nei_num.expand().float.expand().float.size", "sub_num.expand().float.expand().float.size", "score.rl_sample.size", "score.rl_sample.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.score.Score.compute_score"], ["", "def", "forward", "(", "self", ",", "x", ",", "sub_graph", ",", "neibour", ",", "mask", ",", "nei_pad_mask", ",", "nei_num", ",", "sub_num", ",", "sample_type", "=", "None", ")", ":", "\n", "        ", "nei_pad_size", "=", "nei_pad_mask", ".", "size", "(", "1", ")", "\n", "neibour_id", "=", "torch", ".", "arange", "(", "0", ",", "nei_pad_size", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "neibour", ".", "size", "(", "0", ")", ",", "nei_pad_size", ")", "\n", "neibour_id", "=", "neibour_id", ".", "cuda", "(", ")", "\n", "sample_num", "=", "self", ".", "sample_num", "\n", "nei_num", "=", "nei_num", ".", "expand", "(", "nei_num", ".", "size", "(", "0", ")", ",", "sample_num", ")", ".", "float", "(", ")", "\n", "sub_num", "=", "sub_num", ".", "expand", "(", "sub_num", ".", "size", "(", "0", ")", ",", "sample_num", ")", ".", "float", "(", ")", "\n", "\n", "neibour", "=", "self", ".", "linear2", "(", "neibour", ")", "\n", "att", "=", "self", ".", "score", ".", "compute_score", "(", "x", ",", "neibour", ",", "sub_graph", ",", "mask", ",", "nei_pad_mask", ")", "\n", "\n", "assert", "sample_type", "in", "[", "'train'", ",", "'eval'", "]", "\n", "if", "sample_type", "==", "'train'", ":", "\n", "            ", "sample_index", "=", "torch", ".", "multinomial", "(", "att", ",", "sample_num", ",", "replacement", "=", "False", ")", "\n", "#sth, sample_index = torch.topk(att, sample_num)", "\n", "\n", "", "elif", "sample_type", "==", "'eval'", ":", "\n", "            ", "sth", ",", "sample_index", "=", "torch", ".", "topk", "(", "att", ",", "sample_num", ")", "\n", "#sample_index = torch.multinomial(att, sample_num, replacement=False)", "\n", "#sample_index=torch.randint_like(att,low=0,high=att.size(0))", "\n", "\n", "", "one_hot", "=", "torch", ".", "zeros", "(", "att", ".", "size", "(", ")", ")", "\n", "one_hot", "=", "one_hot", ".", "cuda", "(", ")", "\n", "one_hot", "=", "one_hot", ".", "scatter_", "(", "1", ",", "sample_index", ".", "long", "(", ")", ",", "1", ")", "# \u91c7\u6837\u6240\u5728\u4f4d\u7f6e\u53d8\u62101", "\n", "one_hot", "=", "one_hot", ".", "bool", "(", ")", "\n", "\n", "sample_prob", "=", "torch", ".", "masked_select", "(", "att", ",", "one_hot", ")", "# \u53d6\u51fa\u6240\u5728\u4f4d\u7f6e\u7684\u6982\u7387", "\n", "\n", "sample_prob", "=", "sample_prob", ".", "view", "(", "att", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "sample_prob", "=", "(", "sample_prob", "*", "nei_num", ")", ".", "mean", "(", "1", ",", "False", ")", "\n", "\n", "sample_id", "=", "torch", ".", "masked_select", "(", "neibour_id", ",", "one_hot", ")", "\n", "sample_id", "=", "sample_id", ".", "view", "(", "att", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "sample_id", "=", "sample_id", "+", "sub_num", "\n", "sample_id", "=", "sample_id", ".", "long", "(", ")", "\n", "\n", "return", "sample_id", ",", "sample_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.PositionalEncoding.__init__": [[43, 57], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "transformer_gcn.PositionalEncoding.pe.unsqueeze", "transformer_gcn.PositionalEncoding.pe.cuda", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "20", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "self", ".", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "#print(self.pe)", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "self", ".", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "self", ".", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "self", ".", "pe", "=", "self", ".", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "pe", "=", "self", ".", "pe", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.PositionalEncoding.forward": [[60, 65], ["transformer_gcn.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#print(x.size())", "\n", "#print(self.pe.size())", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.__init__": [[67, 94], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "models.Graph_encoder", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.TransformerDecoder", "torch.TransformerDecoder", "torch.TransformerDecoder", "torch.Linear", "torch.Linear", "torch.Linear", "transformer_gcn.PositionalEncoding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ",", "use_cuda", ",", "pretrain", "=", "None", ")", ":", "\n", "        ", "super", "(", "Transformer_gcn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "vocab_size", "=", "vocab", ".", "voc_size", "\n", "if", "pretrain", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "pretrain", "[", "'emb'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "config", ".", "emb_size", ")", "\n", "", "self", ".", "word_type_emb", "=", "nn", ".", "Embedding", "(", "config", ".", "type_num_gen", ",", "config", ".", "emb_size", ")", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "config", ".", "emb_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "#self.transformer=nn.Transformer(d_model=config.decoder_hidden_size, nhead=config.num_head, num_encoder_layers=6, num_decoder_layers=6, dim_feedforward=config.dim_feedforward, dropout=0.1, custom_encoder=None, custom_decoder=None)", "\n", "\n", "self", ".", "graph_encoder", "=", "models", ".", "Graph_encoder", "(", "config", ")", "\n", "num_encoder_layers", "=", "2", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "num_head", ",", "dim_feedforward", "=", "config", ".", "dim_feedforward", ",", "dropout", "=", "0.1", ")", "\n", "encoder_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "TransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ",", "encoder_norm", ")", "\n", "\n", "num_decoder_layers", "=", "3", "\n", "decoder_layer", "=", "nn", ".", "TransformerDecoderLayer", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "num_head", ",", "dim_feedforward", "=", "config", ".", "dim_feedforward", ",", "dropout", "=", "0.1", ")", "\n", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "TransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "decoder_norm", ")", "\n", "\n", "self", ".", "o", "=", "nn", ".", "Linear", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "vocab_size", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "pos_emb", "=", "PositionalEncoding", "(", "config", ".", "emb_size", ",", "0.1", ",", "max_len", "=", "config", ".", "max_tgt_len", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.forward": [[95, 152], ["tgt.transpose.transpose.cuda", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "x.transpose.transpose.ne().float().unsqueeze", "transformer_gcn.Transformer_gcn.embedding", "transformer_gcn.Transformer_gcn.word_type_emb", "transformer_gcn.Transformer_gcn.embedding", "transformer_gcn.Transformer_gcn.pos_emb", "generate_square_subsequent_mask().cuda", "x.transpose.transpose.eq().cuda", "tgt.transpose.transpose.eq().cuda", "x.transpose.transpose.eq().cuda", "transformer_gcn.Transformer_gcn.w", "transformer_gcn.Transformer_gcn.w", "x.transpose.transpose.unbind", "zip", "torch_geometric.data.Batch.from_data_list", "transformer_gcn.Transformer_gcn.graph_encoder", "x.transpose.transpose.transpose", "tgt.transpose.transpose.transpose", "transformer_gcn.Transformer_gcn.encoder", "transformer_gcn.Transformer_gcn.decoder", "transformer_gcn.Transformer_gcn.o", "torch.softmax.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "i.cuda", "w.cuda", "torch_geometric.data.Data", "torch_geometric.data.Batch.from_data_list.append", "x.transpose.transpose.ne().float", "transformer_gcn.generate_square_subsequent_mask", "x.transpose.transpose.eq", "tgt.transpose.transpose.eq", "x.transpose.transpose.eq", "tgt.transpose.transpose.size", "x.transpose.transpose.ne"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.generate_square_subsequent_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "adj_weight", ",", "tgt", ",", "word_type", ")", ":", "\n", "        ", "x", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "x", "]", "\n", "word_type", "=", "[", "w", ".", "cuda", "(", ")", "for", "w", "in", "word_type", "]", "\n", "tgt", "=", "tgt", ".", "cuda", "(", ")", "\n", "\n", "tgt", "=", "tgt", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "x", "=", "pad_sequence", "(", "x", ",", "batch_first", "=", "True", ")", "\n", "word_type", "=", "pad_sequence", "(", "word_type", ",", "batch_first", "=", "True", ")", "\n", "\n", "mask_pad_g", "=", "x", ".", "ne", "(", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "\n", "x_emb", "=", "self", ".", "embedding", "(", "x", ")", "\n", "word_type_emb", "=", "self", ".", "word_type_emb", "(", "word_type", ")", "\n", "x_emb", "=", "x_emb", "+", "word_type_emb", "\n", "\n", "tgt_emb", "=", "self", ".", "embedding", "(", "tgt", ")", "\n", "tgt_emb", "=", "self", ".", "pos_emb", "(", "tgt_emb", ")", "\n", "\n", "#src_mask=generate_square_subsequent_mask(x.size(1)).cuda()", "\n", "tgt_mask", "=", "generate_square_subsequent_mask", "(", "tgt", ".", "size", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "src_pad_mask", "=", "x", ".", "eq", "(", "0", ")", ".", "cuda", "(", ")", "\n", "tgt_pad_mask", "=", "tgt", ".", "eq", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "memory_pad_mask", "=", "x", ".", "eq", "(", "0", ")", ".", "cuda", "(", ")", "\n", "#print(memory_pad_mask.size())", "\n", "\n", "x", "=", "self", ".", "w", "(", "x_emb", ")", "\n", "tgt", "=", "self", ".", "w", "(", "tgt_emb", ")", "\n", "\n", "x", "=", "x", ".", "unbind", "(", "0", ")", "\n", "data_batch", "=", "[", "]", "\n", "for", "x", ",", "adj", ",", "adj_weight", "in", "zip", "(", "x", ",", "adj", ",", "adj_weight", ")", ":", "\n", "            ", "data", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "adj", ",", "edge_attr", "=", "adj_weight", ")", "\n", "data_batch", ".", "append", "(", "data", ")", "\n", "\n", "", "data_batch", "=", "Batch", ".", "from_data_list", "(", "data_batch", ",", "follow_batch", "=", "[", "]", ")", "\n", "x", "=", "self", ".", "graph_encoder", "(", "data_batch", ",", "mask_pad_g", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tgt", "=", "tgt", ".", "transpose", "(", "0", ",", "1", ")", "\n", "#print(tgt)", "\n", "#print(x.size())", "\n", "#print(tgt.size())", "\n", "\n", "memory", "=", "self", ".", "encoder", "(", "x", ",", "src_key_padding_mask", "=", "src_pad_mask", ")", "\n", "#print(memory.size())", "\n", "output", "=", "self", ".", "decoder", "(", "tgt", "=", "tgt", ",", "memory", "=", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "memory_mask", "=", "None", ",", "tgt_key_padding_mask", "=", "tgt_pad_mask", ",", "memory_key_padding_mask", "=", "memory_pad_mask", ")", "\n", "\n", "output", "=", "self", ".", "o", "(", "output", ")", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "-", "1", ")", "\n", "#print(output.size())", "\n", "\n", "return", "output", ",", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.sample": [[153, 212], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "x.transpose.transpose.ne().float().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.zeros().long().fill_().unsqueeze", "torch.cat.cuda", "torch.cat.cuda", "torch.cat.cuda", "transformer_gcn.Transformer_gcn.embedding", "transformer_gcn.Transformer_gcn.word_type_emb", "x.transpose.transpose.eq().cuda", "x.transpose.transpose.eq().cuda", "transformer_gcn.Transformer_gcn.w", "x.transpose.transpose.unbind", "zip", "torch_geometric.data.Batch.from_data_list", "transformer_gcn.Transformer_gcn.graph_encoder", "x.transpose.transpose.transpose", "transformer_gcn.Transformer_gcn.encoder", "range", "i.cuda", "w.cuda", "torch_geometric.data.Data", "torch_geometric.data.Batch.from_data_list.append", "generate_square_subsequent_mask().cuda", "transformer_gcn.Transformer_gcn.embedding", "transformer_gcn.Transformer_gcn.pos_emb", "transformer_gcn.Transformer_gcn.w", "input.transpose.transpose.transpose", "transformer_gcn.Transformer_gcn.decoder", "[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.transpose.transpose.ne().float", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "torch.zeros().long().fill_", "x.transpose.transpose.eq", "x.transpose.transpose.eq", "transformer_gcn.Transformer_gcn.o", "transformer_gcn.Transformer_gcn.vocab.word2id", "transformer_gcn.generate_square_subsequent_mask", "x.transpose.transpose.ne", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.cat.size", "torch.cat.size", "torch.cat.size", "transformer_gcn.Transformer_gcn.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.transpose.transpose.size"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.AD_generation-main.Data.Vocab.word2id", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.generate_square_subsequent_mask"], ["", "def", "sample", "(", "self", ",", "x", ",", "adj", ",", "adj_weight", ",", "word_type", ")", ":", "\n", "\n", "\n", "        ", "x", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "x", "]", "\n", "word_type", "=", "[", "w", ".", "cuda", "(", ")", "for", "w", "in", "word_type", "]", "\n", "\n", "\n", "x", "=", "pad_sequence", "(", "x", ",", "batch_first", "=", "True", ")", "\n", "word_type", "=", "pad_sequence", "(", "word_type", ",", "batch_first", "=", "True", ")", "\n", "\n", "mask_pad_g", "=", "x", ".", "ne", "(", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "tgt", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "fill_", "(", "self", ".", "vocab", ".", "word2id", "(", "'[START]'", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tgt", "=", "tgt", ".", "cuda", "(", ")", "\n", "\n", "x_emb", "=", "self", ".", "embedding", "(", "x", ")", "\n", "word_type_emb", "=", "self", ".", "word_type_emb", "(", "word_type", ")", "\n", "x_emb", "=", "x_emb", "+", "word_type_emb", "\n", "\n", "#src_mask = generate_square_subsequent_mask(x.size(1)).cuda()", "\n", "\n", "src_pad_mask", "=", "x", ".", "eq", "(", "0", ")", ".", "cuda", "(", ")", "\n", "memory_pad_mask", "=", "x", ".", "eq", "(", "0", ")", ".", "cuda", "(", ")", "\n", "x", "=", "self", ".", "w", "(", "x_emb", ")", "\n", "\n", "x", "=", "x", ".", "unbind", "(", "0", ")", "\n", "data_batch", "=", "[", "]", "\n", "for", "x", ",", "adj", ",", "adj_weight", "in", "zip", "(", "x", ",", "adj", ",", "adj_weight", ")", ":", "\n", "            ", "data", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "adj", ",", "edge_attr", "=", "adj_weight", ")", "\n", "data_batch", ".", "append", "(", "data", ")", "\n", "\n", "", "data_batch", "=", "Batch", ".", "from_data_list", "(", "data_batch", ",", "follow_batch", "=", "[", "]", ")", "\n", "x", "=", "self", ".", "graph_encoder", "(", "data_batch", ",", "mask_pad_g", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "\n", "memory", "=", "self", ".", "encoder", "(", "x", ",", "src_key_padding_mask", "=", "src_pad_mask", ")", "\n", "\n", "#print(tgt)", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "config", ".", "max_tgt_len", "+", "1", ")", ":", "\n", "            ", "tgt_mask", "=", "generate_square_subsequent_mask", "(", "tgt", ".", "size", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "input", "=", "self", ".", "embedding", "(", "tgt", ")", "\n", "input", "=", "self", ".", "pos_emb", "(", "input", ")", "\n", "input", "=", "self", ".", "w", "(", "input", ")", "\n", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "output", "=", "self", ".", "decoder", "(", "tgt", "=", "input", ",", "memory", "=", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_pad_mask", ")", "\n", "#output = self.decoder(input, memory)", "\n", "output", "=", "self", ".", "o", "(", "output", ")", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "pred", "=", "output", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "tgt", "=", "torch", ".", "cat", "(", "(", "tgt", ",", "pred", ")", ",", "1", ")", "\n", "\n", "", "tgt", "=", "tgt", "[", ":", ",", "1", ":", "]", "\n", "#pred_id=torch.unbind(tgt,0)", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.compute_loss": [[237, 265], ["hidden_outputs.contiguous().view", "targets.contiguous().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "weight.to.to.to", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "loss.sum.sum.view", "loss.sum.sum.sum", "num_none.eq", "num_total_loss.ne().sum.ne().sum.ne().sum", "num_total_loss.ne().sum.ne().sum.data.sum", "loss.sum.sum.div", "float", "loss.sum.sum.div", "loss.sum.sum.sum", "pred.data.eq().masked_select().sum", "hidden_outputs.size", "hidden_outputs.contiguous().view.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "targets.size", "targets.size", "targets.eq", "targets.eq", "num_total_loss.ne().sum.ne().sum.float", "loss.sum.sum.size", "hidden_outputs.contiguous().view.max", "pred.data.eq().masked_select().sum.float", "num_total_loss.ne().sum.data.sum.float", "hidden_outputs.size", "targets.size", "hidden_outputs.size", "targets.size", "hidden_outputs.contiguous", "targets.contiguous", "num_total_loss.ne().sum.ne().sum.ne", "pred.data.eq().masked_select", "pred.data.eq", "targets.contiguous().view.ne"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log"], ["def", "compute_loss", "(", "self", ",", "hidden_outputs", ",", "targets", ")", ":", "\n", "        ", "targets", "=", "targets", "[", ":", ",", "1", ":", "]", "\n", "assert", "hidden_outputs", ".", "size", "(", "1", ")", "==", "targets", ".", "size", "(", "1", ")", "and", "hidden_outputs", ".", "size", "(", "0", ")", "==", "targets", ".", "size", "(", "0", ")", "\n", "outputs", "=", "hidden_outputs", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden_outputs", ".", "size", "(", "2", ")", ")", "\n", "targets_l", "=", "targets", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "outputs", ".", "size", "(", "-", "1", ")", ")", "\n", "weight", "[", "0", "]", "=", "0", "\n", "weight", "[", "3", "]", "=", "0", "\n", "weight", "=", "weight", ".", "to", "(", "outputs", ".", "device", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "outputs", ")", ",", "targets_l", ",", "weight", "=", "weight", ",", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss", ".", "view", "(", "targets", ".", "size", "(", "0", ")", ",", "targets", ".", "size", "(", "1", ")", ")", "\n", "loss", "=", "loss", ".", "sum", "(", "1", ")", "\n", "num_none", "=", "targets", ".", "eq", "(", "0", ")", "+", "targets", ".", "eq", "(", "3", ")", "\n", "num_total_loss", "=", "num_none", ".", "eq", "(", "0", ")", "\n", "num_total_loss", "=", "num_total_loss", ".", "ne", "(", "0", ")", ".", "sum", "(", "1", ")", "\n", "num_total", "=", "num_total_loss", ".", "data", ".", "sum", "(", ")", "\n", "loss", "=", "loss", ".", "div", "(", "num_total_loss", ".", "float", "(", ")", ")", "\n", "case_num", "=", "float", "(", "loss", ".", "size", "(", "0", ")", ")", "\n", "loss", "=", "loss", ".", "div", "(", "case_num", ")", "\n", "\n", "#loss = loss.div(num_total.float())", "\n", "loss", "=", "loss", ".", "sum", "(", "0", ")", "\n", "\n", "pred", "=", "outputs", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "num_correct", "=", "pred", ".", "data", ".", "eq", "(", "targets_l", ".", "data", ")", ".", "masked_select", "(", "targets_l", ".", "ne", "(", "PAD", ")", ".", "data", ")", ".", "sum", "(", ")", "\n", "acc", "=", "num_correct", ".", "float", "(", ")", "/", "num_total", ".", "float", "(", ")", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.Transformer_gcn.compute_loss_sample": [[266, 295], ["hidden_outputs.contiguous().view", "targets.contiguous().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "weight.to.to.to", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "loss.div.div.view", "loss.div.div.sum", "num_none.eq", "num_total_loss.ne().sum.ne().sum.ne().sum", "num_total_loss.ne().sum.ne().sum.data.sum", "loss.div.div.div", "pred.data.eq().masked_select().sum", "hidden_outputs.size", "hidden_outputs.contiguous().view.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "targets.size", "targets.size", "targets.eq", "targets.eq", "num_total_loss.ne().sum.ne().sum.float", "hidden_outputs.contiguous().view.max", "pred.data.eq().masked_select().sum.float", "num_total_loss.ne().sum.data.sum.float", "hidden_outputs.size", "targets.size", "hidden_outputs.size", "targets.size", "hidden_outputs.contiguous", "targets.contiguous", "num_total_loss.ne().sum.ne().sum.ne", "pred.data.eq().masked_select", "pred.data.eq", "targets.contiguous().view.ne"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log", "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.util.visualize.Visualizer.log"], ["", "def", "compute_loss_sample", "(", "self", ",", "hidden_outputs", ",", "targets", ")", ":", "\n", "\n", "        ", "targets", "=", "targets", "[", ":", ",", "1", ":", "]", "\n", "assert", "hidden_outputs", ".", "size", "(", "1", ")", "==", "targets", ".", "size", "(", "1", ")", "and", "hidden_outputs", ".", "size", "(", "0", ")", "==", "targets", ".", "size", "(", "0", ")", "\n", "outputs", "=", "hidden_outputs", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hidden_outputs", ".", "size", "(", "2", ")", ")", "\n", "targets_l", "=", "targets", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "outputs", ".", "size", "(", "-", "1", ")", ")", "\n", "weight", "[", "0", "]", "=", "0", "\n", "weight", "[", "3", "]", "=", "0", "\n", "weight", "=", "weight", ".", "to", "(", "outputs", ".", "device", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "torch", ".", "log", "(", "outputs", ")", ",", "targets_l", ",", "weight", "=", "weight", ",", "reduction", "=", "'none'", ")", "\n", "#print(loss.size())", "\n", "loss", "=", "loss", ".", "view", "(", "targets", ".", "size", "(", "0", ")", ",", "targets", ".", "size", "(", "1", ")", ")", "\n", "#print(loss.size())", "\n", "loss", "=", "loss", ".", "sum", "(", "1", ")", "\n", "num_none", "=", "targets", ".", "eq", "(", "0", ")", "+", "targets", ".", "eq", "(", "3", ")", "\n", "num_total_loss", "=", "num_none", ".", "eq", "(", "0", ")", "\n", "num_total_loss", "=", "num_total_loss", ".", "ne", "(", "0", ")", ".", "sum", "(", "1", ")", "\n", "num_total", "=", "num_total_loss", ".", "data", ".", "sum", "(", ")", "\n", "loss", "=", "loss", ".", "div", "(", "num_total_loss", ".", "float", "(", ")", ")", "\n", "#loss = loss.div(num_total.float())", "\n", "#case_num = float(loss.size(0))", "\n", "#loss = loss.div(case_num)", "\n", "\n", "pred", "=", "outputs", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "num_correct", "=", "pred", ".", "data", ".", "eq", "(", "targets_l", ".", "data", ")", ".", "masked_select", "(", "targets_l", ".", "ne", "(", "PAD", ")", ".", "data", ")", ".", "sum", "(", ")", "\n", "acc", "=", "num_correct", ".", "float", "(", ")", "/", "num_total", ".", "float", "(", ")", "\n", "\n", "return", "loss", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.padding_mask": [[14, 19], ["seq_q.size", "seq_k.eq", "pad_mask.unsqueeze().expand.unsqueeze().expand", "pad_mask.unsqueeze().expand.unsqueeze"], "function", ["None"], ["def", "padding_mask", "(", "seq_k", ",", "seq_q", ")", ":", "\n", "    ", "len_q", "=", "seq_q", ".", "size", "(", "1", ")", "\n", "pad_mask", "=", "seq_k", ".", "eq", "(", "0", ")", "\n", "pad_mask", "=", "pad_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len_q", ",", "-", "1", ")", "# shape [B, L_q, L_k]", "\n", "return", "pad_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.sequence_mask": [[20, 26], ["seq.size", "torch.triu", "torch.triu", "torch.triu", "mask.unsqueeze().expand.unsqueeze().expand", "torch.ones", "torch.ones", "torch.ones", "mask.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "def", "sequence_mask", "(", "seq", ")", ":", "\n", "    ", "batch_size", ",", "seq_len", "=", "seq", ".", "size", "(", ")", "\n", "mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "(", "seq_len", ",", "seq_len", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ",", "\n", "diagonal", "=", "1", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "# [B, L, L]", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.mask_trans": [[27, 30], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill", "float", "mask.float().masked_fill().masked_fill.float"], "function", ["None"], ["", "def", "mask_trans", "(", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.transformer_gcn.generate_square_subsequent_mask": [[31, 38], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float"], "function", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "sz", ")", ":", "\n", "\n", "    ", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__": [[10, 16], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Graph_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn1", "=", "GCNConv", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "self", ".", "gcn2", "=", "GCNConv", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ")", "\n", "#self.tanh = nn.Tanh()", "\n", "self", ".", "lstm_x", "=", "nn", ".", "LSTM", "(", "config", ".", "decoder_hidden_size", ",", "config", ".", "decoder_hidden_size", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cissyduan_query_variant_ad.models.gcn_encode.Graph_encoder.forward": [[17, 34], ["gcn_encode.Graph_encoder.gcn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gcn_encode.Graph_encoder.gcn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "mask_pad.expand.expand.expand", "mask_pad.expand.expand.size", "mask_pad.expand.expand.size", "x.view.view.size", "x.view.view.size", "x.view.view.size", "x.view.view.unsqueeze", "gcn_encode.Graph_encoder.unsqueeze", "gcn_encode.Graph_encoder.lstm_x", "x1.unsqueeze", "gcn_encode.Graph_encoder.unsqueeze", "gcn_encode.Graph_encoder.lstm_x"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_batch", ",", "mask_pad", ")", ":", "\n", "        ", "x", "=", "data_batch", ".", "x", "\n", "edge_index", "=", "data_batch", ".", "edge_index", "\n", "edge_attr", "=", "data_batch", ".", "edge_attr", "\n", "x1_mid", "=", "self", ".", "gcn1", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_attr", ")", "# maybe use highway", "\n", "x1_cat", "=", "torch", ".", "cat", "(", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "x1_mid", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "x1", "=", "self", ".", "lstm_x", "(", "x1_cat", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "x2_mid", "=", "self", ".", "gcn2", "(", "x1", ",", "edge_index", ",", "edge_weight", "=", "edge_attr", ")", "\n", "x2_cat", "=", "torch", ".", "cat", "(", "(", "x1", ".", "unsqueeze", "(", "1", ")", ",", "x2_mid", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "x2", "=", "self", ".", "lstm_x", "(", "x2_cat", ")", "[", "0", "]", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "#x = self.tanh(x2)", "\n", "x", "=", "x2", "\n", "x", "=", "x", ".", "view", "(", "mask_pad", ".", "size", "(", "0", ")", ",", "mask_pad", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "mask_pad", "=", "mask_pad", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "x", "=", "x", "*", "mask_pad", "\n", "\n", "return", "x", "\n", "\n"]]}