{"home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.train.train_net": [[24, 334], ["scripts.dataset.LearningAVSegData", "int", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.tensorboard.SummaryWriter", "logging.info", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "range", "torch.utils.tensorboard.SummaryWriter.close", "os.path.isdir", "os.makedirs", "len", "net_G.parameters", "net_D.parameters", "net_G_A.parameters", "net_G_V.parameters", "net_G.train", "net_D.train", "net_G_A.train", "net_G_V.train", "len", "torch.Generator().manual_seed", "torch.Generator().manual_seed", "tqdm.tqdm", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imgs.to.to", "true_masks.to.to", "true_masks_a.to.to", "true_masks_v.to.to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "optim.Adam.zero_grad", "torch.cat", "torch.cat", "net_D", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "net_G_A", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "D_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "optim.Adam.step", "optim.Adam.zero_grad", "torch.cat", "torch.cat", "net_D", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "net_G_V", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "D_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "optim.Adam.step", "optim.Adam.zero_grad", "torch.cat", "torch.cat", "net_D", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "torch.sigmoid.detach", "torch.sigmoid.detach", "net_G", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "L_adv_BCE.backward", "D_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "optim.Adam.step", "optim.Adam.zero_grad", "net_G_A", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "G_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "G_Loss.backward", "optim.Adam.step", "optim.Adam.zero_grad", "net_G_V", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "G_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "G_Loss.backward", "optim.Adam.step", "optim.Adam.zero_grad", "torch.sigmoid.detach", "torch.sigmoid.detach", "net_G", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "net_D", "torch.sigmoid", "torch.sigmoid", "nn.BCEWithLogitsLoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "nn.BCEWithLogitsLoss.", "nn.MSELoss.", "G_Loss.item", "torch.utils.tensorboard.SummaryWriter.add_scalar", "pbar.set_postfix", "G_Loss.backward", "optim.Adam.step", "pbar.update", "torch.Generator", "torch.Generator", "D_Loss.item", "D_Loss.item", "D_Loss.item", "net_G_V.flatten", "true_masks_a.to.flatten", "G_Loss.item", "net_G_V.flatten", "true_masks_v.to.flatten", "G_Loss.item", "net_G_V.flatten", "true_masks.to.flatten", "side_1.flatten", "true_masks.to.flatten", "side_2.flatten", "true_masks.to.flatten", "side_3.flatten", "true_masks.to.flatten", "G_Loss.item", "optim.lr_scheduler.ReduceLROnPlateau.step", "optim.lr_scheduler.ReduceLROnPlateau.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "prediction_binary.to", "prediction_binary.to.nelement", "real_predict_binary.to", "fake_predict_binary.to", "real_predict_binary.to.eq().sum().item", "fake_predict_binary.to.eq().sum().item", "logging.info", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logging.info", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "scripts.eval.eval_net", "G_Loss.item", "D_Loss.item", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "os.mkdir", "logging.info", "net_G.state_dict", "net_G_A.state_dict", "net_G_V.state_dict", "D_Loss.item", "D_Loss.item", "D_Loss.item", "G_Loss.item", "G_Loss.item", "G_Loss.item", "real_predict_binary.to.eq().sum", "fake_predict_binary.to.eq().sum", "true_masks.to.size", "true_masks.to.size", "true_masks.to.size", "true_masks.to.size", "true_masks.to.size", "true_masks.to.size", "real_predict_binary.to.eq", "fake_predict_binary.to.eq"], "function", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.eval_net"], ["def", "train_net", "(", "net_G", ",", "\n", "net_D", ",", "\n", "net_G_A", ",", "\n", "net_G_V", ",", "\n", "device", ",", "\n", "epochs", "=", "5", ",", "\n", "batch_size", "=", "1", ",", "\n", "alpha_hyper", "=", "0.5", ",", "\n", "beta_hyper", "=", "1.1", ",", "\n", "gama_hyper", "=", "0.08", ",", "\n", "lr", "=", "0.001", ",", "\n", "val_percent", "=", "0.1", ",", "\n", "image_size", "=", "(", "592", ",", "880", ")", ",", "\n", "save_cp", "=", "True", ",", "\n", ")", ":", "\n", "\n", "# define data path and checkpoint path", "\n", "    ", "dir_checkpoint", "=", "\"./{}/{}/Discriminator_{}/\"", ".", "format", "(", "args", ".", "dataset", ",", "args", ".", "jn", ",", "args", ".", "dis", ")", "\n", "train_dir", "=", "\"./data/{}/training/images/\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "label_dir", "=", "\"./data/{}/training/1st_manual/\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "mask_dir", "=", "\"./data/{}/training/mask/\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "\n", "# create folders", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_checkpoint", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_checkpoint", ")", "\n", "\n", "", "dataset", "=", "LearningAVSegData", "(", "train_dir", ",", "label_dir", ",", "mask_dir", ",", "image_size", ",", "args", ".", "dataset", ",", "train_or", "=", "True", ")", "\n", "n_val", "=", "int", "(", "len", "(", "dataset", ")", "*", "val_percent", ")", "\n", "n_train", "=", "len", "(", "dataset", ")", "-", "n_val", "\n", "train", ",", "val", "=", "random_split", "(", "dataset", ",", "[", "n_train", ",", "n_val", "]", ",", "generator", "=", "torch", ".", "Generator", "(", ")", ".", "manual_seed", "(", "args", ".", "seed", ")", ")", "\n", "train_loader", "=", "DataLoader", "(", "train", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "f'LR_{lr}_BS_{batch_size}'", ")", "\n", "global_step", "=", "0", "\n", "\n", "logging", ".", "info", "(", "f'''Starting training:\n        Epochs:          {epochs}\n        Batch size:      {batch_size}\n        Learning rate:   {lr}\n        Training size:   {n_train}\n        Validation size: {n_val}\n        Checkpoints:     {save_cp}\n        Device:          {device.type}\n        alpha:           {alpha_hyper}\n    '''", ")", "\n", "\n", "optimizer_G", "=", "optim", ".", "Adam", "(", "net_G", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "net_D", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "optimizer_G_A", "=", "optim", ".", "Adam", "(", "net_G_A", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "optimizer_G_V", "=", "optim", ".", "Adam", "(", "net_G_V", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "eps", "=", "1e-08", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", "\n", "\n", "scheduler_G", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer_G", ",", "'min'", ",", "factor", "=", "0.5", ",", "patience", "=", "50", ")", "\n", "scheduler_D", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer_D", ",", "'min'", ",", "factor", "=", "0.5", ",", "patience", "=", "50", ")", "\n", "\n", "L_seg_CE", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "L_seg_MSE", "=", "nn", ".", "MSELoss", "(", ")", "\n", "L_adv_BCE", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "net_G", ".", "train", "(", ")", "\n", "net_D", ".", "train", "(", ")", "\n", "net_G_A", ".", "train", "(", ")", "\n", "net_G_V", ".", "train", "(", ")", "\n", "total_train_pixel", "=", "0", "\n", "epoch_loss_G", "=", "0", "\n", "epoch_loss_D", "=", "0", "\n", "\n", "with", "tqdm", "(", "total", "=", "n_train", ",", "desc", "=", "f'Epoch {epoch + 1}/{epochs}'", ",", "unit", "=", "'img'", ")", "as", "pbar", ":", "\n", "            ", "for", "batch", "in", "train_loader", ":", "\n", "                ", "imgs", "=", "batch", "[", "'image'", "]", "\n", "true_masks", "=", "batch", "[", "'label'", "]", "\n", "\n", "[", "true_masks_a", ",", "_", ",", "true_masks_v", "]", "=", "torch", ".", "split", "(", "true_masks", ",", "split_size_or_sections", "=", "1", ",", "dim", "=", "1", ")", "\n", "true_masks_a", "=", "torch", ".", "cat", "(", "(", "true_masks_a", ",", "true_masks_a", ",", "true_masks_a", ")", ",", "dim", "=", "1", ")", "\n", "true_masks_v", "=", "torch", ".", "cat", "(", "(", "true_masks_v", ",", "true_masks_v", ",", "true_masks_v", ")", ",", "dim", "=", "1", ")", "\n", "\n", "assert", "imgs", ".", "shape", "[", "1", "]", "==", "net_G", ".", "n_channels", ",", "f'Network has been defined with {net_G.n_channels} input channels, '", "f'but loaded images have {imgs.shape[1]} channels. Please check that '", "'the images are loaded correctly.'", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "mask_type", "=", "torch", ".", "float32", "if", "net_G", ".", "n_classes", "==", "1", "else", "torch", ".", "float32", "\n", "true_masks", "=", "true_masks", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "true_masks_a", "=", "true_masks_a", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "true_masks_v", "=", "true_masks_v", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "real_labels", "=", "torch", ".", "ones", "(", "(", "true_masks", ".", "size", "(", "0", ")", ",", "3", ",", "true_masks", ".", "size", "(", "2", ")", ",", "true_masks", ".", "size", "(", "3", ")", ")", ")", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "fake_labels", "=", "torch", ".", "zeros", "(", "(", "true_masks", ".", "size", "(", "0", ")", ",", "3", ",", "true_masks", ".", "size", "(", "2", ")", ",", "true_masks", ".", "size", "(", "3", ")", ")", ")", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "#################### train D using true_masks_a ##########################", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "real_patch", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "true_masks_a", "]", ",", "dim", "=", "1", ")", "\n", "real_predict_D", "=", "net_D", "(", "real_patch", ")", "\n", "loss_adv_CE_real", "=", "L_adv_BCE", "(", "real_predict_D", ",", "real_labels", ")", "\n", "loss_adv_CE_real", ".", "backward", "(", ")", "\n", "#########################", "\n", "\n", "masks_pred_D", "=", "net_G_A", "(", "imgs", ")", "\n", "masks_pred_D_sigmoid_A", "=", "torch", ".", "sigmoid", "(", "masks_pred_D", ")", "\n", "fake_patch_D", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_D_sigmoid_A", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_D", "=", "net_D", "(", "fake_patch_D", ")", "\n", "fake_predict_D_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_D", ")", "\n", "loss_adv_CE_fake", "=", "L_adv_BCE", "(", "fake_predict_D", ",", "fake_labels", ")", "\n", "loss_adv_CE_fake", ".", "backward", "(", ")", "\n", "\n", "D_Loss", "=", "(", "loss_adv_CE_real", "+", "loss_adv_CE_fake", ")", "\n", "epoch_loss_D", "+=", "D_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/D_train'", ",", "D_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "D_Loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "\n", "#################### train D using true_masks_v ##########################", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "real_patch", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "true_masks_v", "]", ",", "dim", "=", "1", ")", "\n", "real_predict_D", "=", "net_D", "(", "real_patch", ")", "\n", "loss_adv_CE_real", "=", "L_adv_BCE", "(", "real_predict_D", ",", "real_labels", ")", "\n", "loss_adv_CE_real", ".", "backward", "(", ")", "\n", "#########################", "\n", "\n", "masks_pred_D", "=", "net_G_V", "(", "imgs", ")", "\n", "masks_pred_D_sigmoid_V", "=", "torch", ".", "sigmoid", "(", "masks_pred_D", ")", "\n", "fake_patch_D", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_D_sigmoid_V", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_D_V", "=", "net_D", "(", "fake_patch_D", ")", "\n", "fake_predict_D_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_D_V", ")", "\n", "loss_adv_CE_fake", "=", "L_adv_BCE", "(", "fake_predict_D_V", ",", "fake_labels", ")", "\n", "loss_adv_CE_fake", ".", "backward", "(", ")", "\n", "\n", "D_Loss", "=", "(", "loss_adv_CE_real", "+", "loss_adv_CE_fake", ")", "\n", "epoch_loss_D", "+=", "D_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/D_train'", ",", "D_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "D_Loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "\n", "#################### train D using true_masks##########################", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "real_patch", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "true_masks", "]", ",", "dim", "=", "1", ")", "\n", "real_predict_D", "=", "net_D", "(", "real_patch", ")", "\n", "loss_adv_CE_real", "=", "L_adv_BCE", "(", "real_predict_D", ",", "real_labels", ")", "\n", "loss_adv_CE_real", ".", "backward", "(", ")", "\n", "\n", "#########################", "\n", "masks_pred_D_sigmoid_A_part", "=", "masks_pred_D_sigmoid_A", ".", "detach", "(", ")", "\n", "masks_pred_D_sigmoid_V_part", "=", "masks_pred_D_sigmoid_V", ".", "detach", "(", ")", "\n", "\n", "masks_pred_D", ",", "_", ",", "_", ",", "_", "=", "net_G", "(", "imgs", ",", "masks_pred_D_sigmoid_A_part", ",", "masks_pred_D_sigmoid_V_part", ")", "\n", "masks_pred_D_sigmoid", "=", "torch", ".", "sigmoid", "(", "masks_pred_D", ")", "\n", "fake_patch_D", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_D_sigmoid", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_D", "=", "net_D", "(", "fake_patch_D", ")", "\n", "fake_predict_D_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_D", ")", "\n", "loss_adv_CE_fake", "=", "L_adv_BCE", "(", "fake_predict_D", ",", "fake_labels", ")", "\n", "\n", "loss_adv_CE_fake", ".", "backward", "(", ")", "\n", "D_Loss", "=", "(", "loss_adv_CE_real", "+", "loss_adv_CE_fake", ")", "\n", "\n", "epoch_loss_D", "+=", "D_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/D_train'", ",", "D_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "D_Loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "\n", "################### train G_A ###########################", "\n", "optimizer_G_A", ".", "zero_grad", "(", ")", "\n", "masks_pred_G", "=", "net_G_A", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_A", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "fake_patch_G", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_G_sigmoid_A", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_G", "=", "net_D", "(", "fake_patch_G", ")", "\n", "fake_predict_G_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_G", ")", "\n", "\n", "loss_adv_G_fake", "=", "L_adv_BCE", "(", "fake_predict_G", ",", "real_labels", ")", "\n", "loss_seg_CE", "=", "L_seg_CE", "(", "masks_pred_G", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks_a", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE", "=", "L_seg_MSE", "(", "masks_pred_G_sigmoid_A", ",", "true_masks_a", ")", "\n", "\n", "G_Loss", "=", "gama_hyper", "*", "loss_adv_G_fake", "+", "beta_hyper", "*", "loss_seg_CE", "+", "alpha_hyper", "*", "loss_seg_MSE", "\n", "\n", "epoch_loss_G", "+=", "G_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/G_train_A'", ",", "G_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "G_Loss", ".", "item", "(", ")", "}", ")", "\n", "G_Loss", ".", "backward", "(", ")", "\n", "optimizer_G_A", ".", "step", "(", ")", "\n", "\n", "################### train G_V ###########################", "\n", "optimizer_G_V", ".", "zero_grad", "(", ")", "\n", "masks_pred_G", "=", "net_G_V", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_V", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "fake_patch_G", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_G_sigmoid_V", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_G", "=", "net_D", "(", "fake_patch_G", ")", "\n", "fake_predict_G_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_G", ")", "\n", "\n", "loss_adv_G_fake", "=", "L_adv_BCE", "(", "fake_predict_G", ",", "real_labels", ")", "\n", "loss_seg_CE", "=", "L_seg_CE", "(", "masks_pred_G", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks_v", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE", "=", "L_seg_MSE", "(", "masks_pred_G_sigmoid_V", ",", "true_masks_v", ")", "\n", "G_Loss", "=", "gama_hyper", "*", "loss_adv_G_fake", "+", "beta_hyper", "*", "loss_seg_CE", "+", "alpha_hyper", "*", "loss_seg_MSE", "\n", "\n", "epoch_loss_G", "+=", "G_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/G_train_A'", ",", "G_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "G_Loss", ".", "item", "(", ")", "}", ")", "\n", "G_Loss", ".", "backward", "(", ")", "\n", "optimizer_G_V", ".", "step", "(", ")", "\n", "\n", "################### train G ###########################", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "masks_pred_G_sigmoid_A_part", "=", "masks_pred_G_sigmoid_A", ".", "detach", "(", ")", "\n", "masks_pred_G_sigmoid_V_part", "=", "masks_pred_G_sigmoid_V", ".", "detach", "(", ")", "\n", "masks_pred_G", ",", "side_1", ",", "side_2", ",", "side_3", "=", "net_G", "(", "imgs", ",", "masks_pred_G_sigmoid_A_part", ",", "masks_pred_G_sigmoid_V_part", ")", "\n", "masks_pred_G_sigmoid", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "side_1_sigmoid", "=", "torch", ".", "sigmoid", "(", "side_1", ")", "\n", "side_2_sigmoid", "=", "torch", ".", "sigmoid", "(", "side_2", ")", "\n", "side_3_sigmoid", "=", "torch", ".", "sigmoid", "(", "side_3", ")", "\n", "fake_patch_G", "=", "torch", ".", "cat", "(", "[", "imgs", ",", "masks_pred_G_sigmoid", "]", ",", "dim", "=", "1", ")", "\n", "fake_predict_G", "=", "net_D", "(", "fake_patch_G", ")", "\n", "fake_predict_G_sigmoid", "=", "torch", ".", "sigmoid", "(", "fake_predict_G", ")", "\n", "\n", "loss_adv_G_fake", "=", "L_adv_BCE", "(", "fake_predict_G", ",", "real_labels", ")", "\n", "loss_seg_CE", "=", "L_seg_CE", "(", "masks_pred_G", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE", "=", "L_seg_MSE", "(", "masks_pred_G_sigmoid", ",", "true_masks", ")", "\n", "# S1 output", "\n", "loss_seg_CE_1", "=", "L_seg_CE", "(", "side_1", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE_1", "=", "L_seg_MSE", "(", "side_1_sigmoid", ",", "true_masks", ")", "\n", "# S2 output", "\n", "loss_seg_CE_2", "=", "L_seg_CE", "(", "side_2", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE_2", "=", "L_seg_MSE", "(", "side_2_sigmoid", ",", "true_masks", ")", "\n", "# S3 output", "\n", "loss_seg_CE_3", "=", "L_seg_CE", "(", "side_3", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ",", "true_masks", ".", "flatten", "(", "start_dim", "=", "1", ",", "end_dim", "=", "3", ")", ")", "\n", "loss_seg_MSE_3", "=", "L_seg_MSE", "(", "side_3_sigmoid", ",", "true_masks", ")", "\n", "\n", "G_Loss", "=", "gama_hyper", "*", "loss_adv_G_fake", "+", "beta_hyper", "*", "loss_seg_CE", "+", "alpha_hyper", "*", "loss_seg_MSE", "+", "1", "/", "2", "*", "(", "alpha_hyper", "*", "loss_seg_MSE_1", "+", "beta_hyper", "*", "loss_seg_CE_1", ")", "+", "1", "/", "4", "*", "(", "alpha_hyper", "*", "loss_seg_MSE_2", "+", "beta_hyper", "*", "loss_seg_CE_2", ")", "+", "1", "/", "8", "*", "(", "alpha_hyper", "*", "loss_seg_MSE_3", "+", "beta_hyper", "*", "loss_seg_CE_3", ")", "\n", "\n", "\n", "epoch_loss_G", "+=", "G_Loss", ".", "item", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/G_train'", ",", "G_Loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "pbar", ".", "set_postfix", "(", "**", "{", "'loss (batch)'", ":", "G_Loss", ".", "item", "(", ")", "}", ")", "\n", "G_Loss", ".", "backward", "(", ")", "\n", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "##########################################################", "\n", "\n", "pbar", ".", "update", "(", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "(", "n_train", "//", "(", "batch_size", ")", ")", "==", "0", ":", "\n", "#if True:", "\n", "                    ", "acc", ",", "sensitivity", ",", "specificity", ",", "precision", ",", "G", ",", "F1_score_2", ",", "auc_roc", ",", "auc_pr", ",", "mse", ",", "iou", ",", "_", "=", "eval_net", "(", "epoch", ",", "net_G", ",", "net_G_A", ",", "net_G_V", ",", "args", ".", "dataset", ",", "val_loader", ",", "device", ",", "mode", "=", "'whole'", ",", "train_or", "=", "'train'", ")", "[", "0", ":", "11", "]", "\n", "\n", "scheduler_G", ".", "step", "(", "G_Loss", ".", "item", "(", ")", ")", "\n", "scheduler_D", ".", "step", "(", "D_Loss", ".", "item", "(", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "optimizer_G", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation sensitivity: {}'", ".", "format", "(", "sensitivity", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'sensitivity/val_G'", ",", "sensitivity", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation specificity: {}'", ".", "format", "(", "specificity", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'specificity/val_G'", ",", "specificity", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation precision: {}'", ".", "format", "(", "precision", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'precision/val_G'", ",", "precision", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation G: {}'", ".", "format", "(", "G", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'G/val_G'", ",", "G", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation F1_score: {}'", ".", "format", "(", "F1_score_2", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'F1_score/val_G'", ",", "F1_score_2", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation mse: {}'", ".", "format", "(", "mse", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'mse/val_G'", ",", "mse", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation iou: {}'", ".", "format", "(", "iou", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'iou/val_G'", ",", "iou", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation acc: {}'", ".", "format", "(", "acc", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/val_G'", ",", "acc", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation auc_roc: {}'", ".", "format", "(", "auc_roc", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Auc_roc/val_G'", ",", "auc_roc", ",", "global_step", ")", "\n", "logging", ".", "info", "(", "'Validation auc_pr: {}'", ".", "format", "(", "auc_pr", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Auc_pr/val_G'", ",", "auc_pr", ",", "global_step", ")", "\n", "\n", "prediction_binary", "=", "(", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", ">", "0.5", ")", "\n", "prediction_binary_gpu", "=", "prediction_binary", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "total_train_pixel", "+=", "prediction_binary_gpu", ".", "nelement", "(", ")", "\n", "real_predict_binary", "=", "(", "torch", ".", "sigmoid", "(", "real_predict_D", ")", ">", "0.5", ")", "\n", "real_predict_binary_gpu", "=", "real_predict_binary", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "fake_predict_binary", "=", "(", "torch", ".", "sigmoid", "(", "fake_predict_D", ")", ">", "0.5", ")", "\n", "fake_predict_binary_gpu", "=", "fake_predict_binary", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "prediction_binary_DR", "=", "real_predict_binary_gpu", ".", "eq", "(", "real_labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "prediction_binary_DF", "=", "fake_predict_binary_gpu", ".", "eq", "(", "fake_labels", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "aver_prediction_binary_D", "=", "(", "prediction_binary_DR", "+", "prediction_binary_DF", ")", "/", "2", "\n", "train_accuracy_D", "=", "100", "*", "aver_prediction_binary_D", "/", "total_train_pixel", "\n", "logging", ".", "info", "(", "'Validation accuracy: {}'", ".", "format", "(", "train_accuracy_D", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc/Val_D'", ",", "train_accuracy_D", ",", "global_step", ")", "\n", "\n", "total_train_pixel", "=", "0", "\n", "\n", "", "", "", "if", "epoch", ">", "1300", ":", "\n", "            ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                ", "if", "save_cp", ":", "\n", "                    ", "try", ":", "\n", "                        ", "os", ".", "mkdir", "(", "dir_checkpoint", ")", "\n", "logging", ".", "info", "(", "'Created checkpoint directory'", ")", "\n", "", "except", "OSError", ":", "\n", "                        ", "pass", "\n", "", "torch", ".", "save", "(", "net_G", ".", "state_dict", "(", ")", ",", "\n", "dir_checkpoint", "+", "f'CP_epoch{epoch + 1}_all.pth'", ")", "\n", "torch", ".", "save", "(", "net_G_A", ".", "state_dict", "(", ")", ",", "\n", "dir_checkpoint", "+", "f'CP_epoch{epoch + 1}_A.pth'", ")", "\n", "torch", ".", "save", "(", "net_G_V", ".", "state_dict", "(", ")", ",", "\n", "dir_checkpoint", "+", "f'CP_epoch{epoch + 1}_V.pth'", ")", "\n", "logging", ".", "info", "(", "f'Checkpoint {epoch + 1} saved !'", ")", "\n", "\n", "\n", "", "", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.train.get_args": [[337, 354], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train the UNet on images and target masks'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "240", ",", "help", "=", "'Number of epochs'", ",", "dest", "=", "'epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'Batch size'", ",", "dest", "=", "'batchsize'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning-rate'", ",", "type", "=", "float", ",", "nargs", "=", "'?'", ",", "default", "=", "2e-4", ",", "help", "=", "'Learning rate'", ",", "dest", "=", "'lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--load'", ",", "type", "=", "str", ",", "default", "=", "False", ",", "help", "=", "'Load model from a .pth file'", ",", "dest", "=", "'load'", ")", "\n", "parser", ".", "add_argument", "(", "'--job_name'", ",", "type", "=", "str", ",", "default", "=", "'J'", ",", "help", "=", "'type of discriminator'", ",", "dest", "=", "'jn'", ")", "\n", "parser", ".", "add_argument", "(", "'--discriminator'", ",", "type", "=", "str", ",", "default", "=", "False", ",", "help", "=", "'type of discriminator'", ",", "dest", "=", "'dis'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'dataset name'", ",", "dest", "=", "'dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--validation'", ",", "type", "=", "float", ",", "default", "=", "5.0", ",", "help", "=", "'Percent of the data validation'", ",", "dest", "=", "'val'", ")", "\n", "parser", ".", "add_argument", "(", "'--uniform'", ",", "type", "=", "str", ",", "default", "=", "'False'", ",", "help", "=", "'whether to uniform the image size'", ",", "dest", "=", "'uniform'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed_num'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'Validation split seed'", ",", "dest", "=", "'seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "dest", "=", "'alpha'", ",", "type", "=", "float", ",", "help", "=", "'alpha'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "dest", "=", "'beta'", ",", "type", "=", "float", ",", "help", "=", "'beta'", ")", "\n", "parser", ".", "add_argument", "(", "'--gama'", ",", "dest", "=", "'gama'", ",", "type", "=", "float", ",", "help", "=", "'gama'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.test_customise.test_net": [[27, 79], ["net_all.eval", "net_a.eval", "net_v.eval", "len", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "tqdm.tqdm", "imgs.to.to", "torch.no_grad", "torch.no_grad", "net_a", "torch.sigmoid", "torch.sigmoid", "net_v", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.detach", "torch.sigmoid.detach", "net_all", "torch.unsqueeze.clone().detach", "torch.sigmoid", "torch.sigmoid", "torch.squeeze", "torch.squeeze", "torchvision.utils.save_image", "PIL.Image.open().resize", "torch.unsqueeze", "torch.unsqueeze", "torchvision.utils.save_image", "torchvision.transforms.ToTensor", "torch.unsqueeze.clone", "PIL.Image.open"], "function", ["None"], ["def", "test_net", "(", "net_all", ",", "net_a", ",", "net_v", ",", "loader", ",", "device", ",", "mode", ",", "dataset", ")", ":", "\n", "\n", "    ", "net_all", ".", "eval", "(", ")", "\n", "net_a", ".", "eval", "(", ")", "\n", "net_v", ".", "eval", "(", ")", "\n", "\n", "mask_type", "=", "torch", ".", "float32", "if", "net_all", ".", "n_classes", "==", "1", "else", "torch", ".", "float32", "\n", "n_val", "=", "len", "(", "loader", ")", "\n", "\n", "num", "=", "0", "\n", "\n", "seg_results_small_path", "=", "args", ".", "custoutput", "+", "'/resized/'", "\n", "seg_results_raw_path", "=", "args", ".", "custoutput", "+", "'/raw_size/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "seg_results_small_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "seg_results_small_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "seg_results_raw_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "seg_results_raw_path", ")", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "n_val", ",", "desc", "=", "'Validation round'", ",", "unit", "=", "'batch'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "imgs", "=", "batch", "[", "'image'", "]", "\n", "ori_width", "=", "batch", "[", "'width'", "]", "\n", "ori_height", "=", "batch", "[", "'height'", "]", "\n", "img_name", "=", "batch", "[", "'name'", "]", "[", "0", "]", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "num", "+=", "1", "\n", "masks_pred_G", "=", "net_a", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_A", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "\n", "masks_pred_G", "=", "net_v", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_V", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "\n", "masks_pred_G_sigmoid_A_part", "=", "masks_pred_G_sigmoid_A", ".", "detach", "(", ")", "\n", "masks_pred_G_sigmoid_V_part", "=", "masks_pred_G_sigmoid_V", ".", "detach", "(", ")", "\n", "\n", "mask_pred", ",", "_", ",", "_", ",", "_", "=", "net_all", "(", "imgs", ",", "masks_pred_G_sigmoid_A_part", ",", "masks_pred_G_sigmoid_V_part", ")", "\n", "\n", "mask_pred_tensor_small", "=", "mask_pred", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mask_pred_tensor_small", "=", "torch", ".", "sigmoid", "(", "mask_pred_tensor_small", ")", "\n", "mask_pred_tensor_small", "=", "torch", ".", "squeeze", "(", "mask_pred_tensor_small", ")", "\n", "\n", "save_image", "(", "mask_pred_tensor_small", ",", "seg_results_small_path", "+", "img_name", "+", "'.png'", ")", "\n", "mask_pred_img", "=", "Image", ".", "open", "(", "seg_results_small_path", "+", "img_name", "+", "'.png'", ")", ".", "resize", "(", "(", "ori_width", ",", "ori_height", ")", ")", "\n", "mask_pred", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "mask_pred_img", ")", "\n", "mask_pred", "=", "torch", ".", "unsqueeze", "(", "mask_pred", ",", "0", ")", "\n", "save_image", "(", "mask_pred", ",", "seg_results_raw_path", "+", "img_name", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.test_customise.get_args": [[82, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train the UNet on images and target masks'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'Batch size'", ",", "dest", "=", "'batchsize'", ")", "\n", "parser", ".", "add_argument", "(", "'--job_name'", ",", "type", "=", "str", ",", "default", "=", "'J'", ",", "help", "=", "'type of discriminator'", ",", "dest", "=", "'jn'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'test dataset name'", ",", "dest", "=", "'dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkstart'", ",", "type", "=", "int", ",", "help", "=", "'test dataset name'", ",", "dest", "=", "'CS'", ")", "\n", "parser", ".", "add_argument", "(", "'--uniform'", ",", "type", "=", "str", ",", "default", "=", "'False'", ",", "help", "=", "'whether to uniform the image size'", ",", "dest", "=", "'uniform'", ")", "\n", "parser", ".", "add_argument", "(", "'--customise_data'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'path to customise data'", ",", "dest", "=", "'custdata'", ")", "\n", "parser", ".", "add_argument", "(", "'--customise_output'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'path to customise output'", ",", "dest", "=", "'custoutput'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.test.test_net": [[21, 57], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "scripts.eval.eval_net", "scripts.eval.eval_net", "print", "print"], "function", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.eval_net", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.eval_net"], ["def", "test_net", "(", "net_all", ",", "net_a", ",", "net_v", ",", "loader", ",", "device", ",", "mode", ",", "dataset", ")", ":", "\n", "\n", "    ", "epoch", "=", "0", "\n", "\n", "if", "mode", "!=", "'vessel'", ":", "\n", "\n", "        ", "acc", ",", "sent", ",", "spet", ",", "pret", ",", "G_t", ",", "F1t", ",", "auc_roct", ",", "auc_prt", ",", "mset", ",", "iout", ",", "acc_a", ",", "sent_a", ",", "spet_a", ",", "pret_a", ",", "G_t_a", ",", "F1t_a", ",", "auc_roct_a", ",", "auc_prt_a", ",", "mset_a", ",", "iout_a", ",", "acc_v", ",", "sent_v", ",", "spet_v", ",", "pret_v", ",", "G_t_v", ",", "F1t_v", ",", "auc_roct_v", ",", "auc_prt_v", ",", "mset_v", ",", "iout_v", ",", "acc_u", ",", "sent_u", ",", "spet_u", ",", "pret_u", ",", "G_t_u", ",", "F1t_u", ",", "auc_roct_u", ",", "auc_prt_u", ",", "mset_u", ",", "iout_u", "=", "eval_net", "(", "epoch", ",", "net_all", ",", "net_a", ",", "net_v", ",", "dataset", ",", "loader", "=", "loader", ",", "device", "=", "device", ",", "mode", "=", "mode", ",", "train_or", "=", "'val'", ")", "\n", "", "else", ":", "\n", "\n", "        ", "acc", ",", "sensitivity", ",", "specificity", ",", "precision", ",", "G", ",", "F1_score_2", "=", "eval_net", "(", "epoch", ",", "net_all", ",", "net_a", ",", "net_v", ",", "dataset", ",", "loader", "=", "loader", ",", "device", "=", "device", ",", "mask", "=", "True", ",", "mode", "=", "'vessel'", ")", "\n", "", "print", "(", "'Accuracy: '", ",", "acc", ")", "\n", "print", "(", "'Sensitivity: '", ",", "sent", ")", "\n", "print", "(", "'specificity: '", ",", "spet", ")", "\n", "print", "(", "'precision: '", ",", "pret", ")", "\n", "print", "(", "'G: '", ",", "G_t", ")", "\n", "print", "(", "'F1_score_2: '", ",", "F1t", ")", "\n", "print", "(", "'MSE: '", ",", "mset", ")", "\n", "print", "(", "'IOU: '", ",", "iout", ")", "\n", "if", "mode", "!=", "'vessel'", ":", "\n", "        ", "print", "(", "'auc_roc: '", ",", "auc_roct", ")", "\n", "print", "(", "'auc_pr: '", ",", "auc_prt", ")", "\n", "\n", "", "print", "(", "'################################'", ")", "\n", "print", "(", "''", ")", "\n", "\n", "if", "mode", "!=", "'vessel'", ":", "\n", "#return acc, sensitivity, specificity, precision, G, F1_score_2, auc_roc, auc_pr, mse", "\n", "        ", "return", "acc", ",", "sent", ",", "spet", ",", "pret", ",", "G_t", ",", "F1t", ",", "auc_roct", ",", "auc_prt", ",", "mset", ",", "iout", ",", "acc_a", ",", "sent_a", ",", "spet_a", ",", "pret_a", ",", "G_t_a", ",", "F1t_a", ",", "auc_roct_a", ",", "auc_prt_a", ",", "mset_a", ",", "iout_a", ",", "acc_v", ",", "sent_v", ",", "spet_v", ",", "pret_v", ",", "G_t_v", ",", "F1t_v", ",", "auc_roct_v", ",", "auc_prt_v", ",", "mset_v", ",", "iout_v", ",", "acc_u", ",", "sent_u", ",", "spet_u", ",", "pret_u", ",", "G_t_u", ",", "F1t_u", ",", "auc_roct_u", ",", "auc_prt_u", ",", "mset_u", ",", "iout_u", "\n", "", "else", ":", "\n", "        ", "return", "acc", ",", "sensitivity", ",", "specificity", ",", "precision", ",", "G", ",", "F1_score_2", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.None.test.get_args": [[60, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train the UNet on images and target masks'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "help", "=", "'Batch size'", ",", "dest", "=", "'batchsize'", ")", "\n", "parser", ".", "add_argument", "(", "'--job_name'", ",", "type", "=", "str", ",", "default", "=", "'J'", ",", "help", "=", "'type of discriminator'", ",", "dest", "=", "'jn'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'test dataset name'", ",", "dest", "=", "'dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkstart'", ",", "type", "=", "int", ",", "help", "=", "'test dataset name'", ",", "dest", "=", "'CS'", ")", "\n", "parser", ".", "add_argument", "(", "'--uniform'", ",", "type", "=", "str", ",", "default", "=", "'False'", ",", "help", "=", "'whether to uniform the image size'", ",", "dest", "=", "'uniform'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.pixel_values_in_mask": [[16, 33], ["numpy.squeeze", "numpy.squeeze", "np.squeeze.flatten", "np.squeeze.flatten", "numpy.max", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["def", "pixel_values_in_mask", "(", "true_vessels", ",", "pred_vessels", ",", "mask", ",", "train_or", ",", "dataset", ")", ":", "\n", "\n", "    ", "if", "train_or", "==", "'val'", ":", "\n", "        ", "true_vessels", "=", "np", ".", "squeeze", "(", "true_vessels", ")", "\n", "pred_vessels", "=", "np", ".", "squeeze", "(", "pred_vessels", ")", "\n", "\n", "if", "dataset", "==", "'HRF-AV'", ":", "\n", "            ", "true_vessels", "=", "(", "true_vessels", "[", "mask", "[", "0", ",", "...", "]", "!=", "0", "]", ")", "\n", "pred_vessels", "=", "(", "pred_vessels", "[", "mask", "[", "0", ",", "...", "]", "!=", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "true_vessels", "=", "(", "true_vessels", "[", "mask", "!=", "0", "]", ")", "\n", "pred_vessels", "=", "(", "pred_vessels", "[", "mask", "!=", "0", "]", ")", "\n", "\n", "", "assert", "np", ".", "max", "(", "pred_vessels", ")", "<=", "1.0", "and", "np", ".", "min", "(", "pred_vessels", ")", ">=", "0.0", "\n", "assert", "np", ".", "max", "(", "true_vessels", ")", "==", "1.0", "and", "np", ".", "min", "(", "true_vessels", ")", "==", "0.0", "\n", "\n", "", "return", "true_vessels", ".", "flatten", "(", ")", ",", "pred_vessels", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_ROC": [[34, 38], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "AUC_ROC", "(", "true_vessel_arr", ",", "pred_vessel_arr", ")", ":", "\n", "\n", "    ", "AUC_ROC", "=", "roc_auc_score", "(", "true_vessel_arr", ",", "pred_vessel_arr", ")", "\n", "return", "AUC_ROC", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.threshold_by_otsu": [[39, 46], ["skimage.filters.threshold_otsu", "numpy.zeros"], "function", ["None"], ["", "def", "threshold_by_otsu", "(", "pred_vessels", ")", ":", "\n", "\n", "    ", "threshold", "=", "filters", ".", "threshold_otsu", "(", "pred_vessels", ")", "\n", "pred_vessels_bin", "=", "np", ".", "zeros", "(", "pred_vessels", ".", "shape", ")", "\n", "pred_vessels_bin", "[", "pred_vessels", ">=", "threshold", "]", "=", "1", "\n", "\n", "return", "pred_vessels_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_PR": [[47, 52], ["sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "true_vessel_img.flatten", "pred_vessel_img.flatten"], "function", ["None"], ["", "def", "AUC_PR", "(", "true_vessel_img", ",", "pred_vessel_img", ")", ":", "\n", "\n", "    ", "precision", ",", "recall", ",", "_", "=", "precision_recall_curve", "(", "true_vessel_img", ".", "flatten", "(", ")", ",", "pred_vessel_img", ".", "flatten", "(", ")", ",", "pos_label", "=", "1", ")", "\n", "AUC_prec_rec", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "return", "AUC_prec_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.misc_measures": [[53, 70], ["sklearn.metrics.confusion_matrix", "sklearn.metrics.mean_squared_error", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "misc_measures", "(", "true_vessel_arr", ",", "pred_vessel_arr", ")", ":", "\n", "    ", "cm", "=", "confusion_matrix", "(", "true_vessel_arr", ",", "pred_vessel_arr", ")", "\n", "mse", "=", "mean_squared_error", "(", "true_vessel_arr", ",", "pred_vessel_arr", ")", "\n", "\n", "try", ":", "\n", "        ", "acc", "=", "1.", "*", "(", "cm", "[", "0", ",", "0", "]", "+", "cm", "[", "1", ",", "1", "]", ")", "/", "np", ".", "sum", "(", "cm", ")", "\n", "sensitivity", "=", "1.", "*", "cm", "[", "1", ",", "1", "]", "/", "(", "cm", "[", "1", ",", "0", "]", "+", "cm", "[", "1", ",", "1", "]", ")", "\n", "specificity", "=", "1.", "*", "cm", "[", "0", ",", "0", "]", "/", "(", "cm", "[", "0", ",", "1", "]", "+", "cm", "[", "0", ",", "0", "]", ")", "\n", "precision", "=", "1.", "*", "cm", "[", "1", ",", "1", "]", "/", "(", "cm", "[", "1", ",", "1", "]", "+", "cm", "[", "0", ",", "1", "]", ")", "\n", "G", "=", "np", ".", "sqrt", "(", "sensitivity", "*", "specificity", ")", "\n", "F1_score_2", "=", "2", "*", "precision", "*", "sensitivity", "/", "(", "precision", "+", "sensitivity", ")", "\n", "iou", "=", "1.", "*", "cm", "[", "1", ",", "1", "]", "/", "(", "cm", "[", "1", ",", "0", "]", "+", "cm", "[", "0", ",", "1", "]", "+", "cm", "[", "1", ",", "1", "]", ")", "\n", "return", "acc", ",", "sensitivity", ",", "specificity", ",", "precision", ",", "G", ",", "F1_score_2", ",", "mse", ",", "iou", "\n", "\n", "", "except", ":", "\n", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.eval_net": [[72, 289], ["net.eval", "print", "len", "net.train", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "tqdm.tqdm", "imgs.to.to", "label.to.to", "torch.no_grad", "torch.no_grad", "net_a", "torch.sigmoid", "torch.sigmoid", "net_v", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.detach", "torch.sigmoid.detach", "net", "torch.unsqueeze.clone().detach", "torch.sigmoid", "torch.sigmoid", "torch.squeeze", "torch.squeeze", "mask_pred_sigmoid.detach().cpu().numpy", "numpy.squeeze", "label.to.detach().cpu().numpy", "numpy.squeeze", "mask.detach().cpu().numpy", "numpy.squeeze", "label_cpu.transpose.transpose", "mask_pred_sigmoid_cpu.transpose.transpose", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.sum", "numpy.sum", "numpy.sum", "eval.pixel_values_in_mask", "eval.AUC_ROC", "eval.AUC_PR", "eval.misc_measures", "eval.pixel_values_in_mask", "eval.AUC_ROC", "eval.AUC_PR", "eval.misc_measures", "eval.pixel_values_in_mask", "eval.AUC_ROC", "eval.AUC_PR", "eval.misc_measures", "numpy.isnan", "torchvision.utils.save_image", "torch.unsqueeze", "torch.unsqueeze", "torchvision.utils.save_image", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "torch.unsqueeze.clone", "PIL.Image.open().resize", "PIL.Image.open", "torchvision.transforms.ToTensor", "mask_pred_sigmoid.detach().cpu", "label.to.detach().cpu", "mask.detach().cpu", "PIL.Image.open", "mask_pred_sigmoid.detach", "label.to.detach", "mask.detach", "mask.repeat"], "function", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.pixel_values_in_mask", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_ROC", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_PR", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.misc_measures", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.pixel_values_in_mask", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_ROC", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_PR", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.misc_measures", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.pixel_values_in_mask", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_ROC", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.AUC_PR", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.eval.misc_measures"], ["", "", "def", "eval_net", "(", "epoch", ",", "net", ",", "net_a", ",", "net_v", ",", "dataset", ",", "loader", ",", "device", ",", "mode", ",", "train_or", ")", ":", "\n", "    ", "\"\"\"Evaluation without the densecrf with the dice coefficient\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "print", "(", "dataset", ")", "\n", "if", "dataset", "==", "'HRF-AV'", ":", "\n", "        ", "image_size", "=", "(", "3504", ",", "2336", ")", "\n", "", "elif", "dataset", "==", "'LES-AV'", ":", "\n", "        ", "image_size", "=", "(", "1620", ",", "1444", ")", "\n", "", "else", ":", "\n", "        ", "image_size", "=", "(", "592", ",", "592", ")", "\n", "", "mask_type", "=", "torch", ".", "float32", "if", "net", ".", "n_classes", "==", "1", "else", "torch", ".", "float32", "\n", "n_val", "=", "len", "(", "loader", ")", "\n", "acc_a", ",", "sent_a", ",", "spet_a", ",", "pret_a", ",", "G_t_a", ",", "F1t_a", ",", "mset_a", ",", "iout_a", ",", "auc_roct_a", ",", "auc_prt_a", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "acc_v", ",", "sent_v", ",", "spet_v", ",", "pret_v", ",", "G_t_v", ",", "F1t_v", ",", "mset_v", ",", "iout_v", ",", "auc_roct_v", ",", "auc_prt_v", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "acc_u", ",", "sent_u", ",", "spet_u", ",", "pret_u", ",", "G_t_u", ",", "F1t_u", ",", "mset_u", ",", "iout_u", ",", "auc_roct_u", ",", "auc_prt_u", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "acc", ",", "sent", ",", "spet", ",", "pret", ",", "G_t", ",", "F1t", ",", "mset", ",", "iout", ",", "auc_roct", ",", "auc_prt", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "num", "=", "0", "\n", "\n", "seg_results_small_path", "=", "dataset", "+", "'/Final_pre/small_pre/'", "\n", "seg_results_raw_path", "=", "dataset", "+", "'/Final_pre/raw_pre/'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "seg_results_small_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "seg_results_small_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "seg_results_raw_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "seg_results_raw_path", ")", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "n_val", ",", "desc", "=", "'Validation round'", ",", "unit", "=", "'batch'", ",", "leave", "=", "False", ")", "as", "pbar", ":", "\n", "        ", "for", "batch", "in", "loader", ":", "\n", "            ", "imgs", ",", "label", ",", "mask", "=", "batch", "[", "'image'", "]", ",", "batch", "[", "'label'", "]", ",", "batch", "[", "'mask'", "]", "\n", "img_name", "=", "batch", "[", "'name'", "]", "[", "0", "]", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "label", "=", "label", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "mask_type", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "num", "+=", "1", "\n", "masks_pred_G", "=", "net_a", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_A", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "\n", "masks_pred_G", "=", "net_v", "(", "imgs", ")", "\n", "masks_pred_G_sigmoid_V", "=", "torch", ".", "sigmoid", "(", "masks_pred_G", ")", "\n", "\n", "masks_pred_G_sigmoid_A_part", "=", "masks_pred_G_sigmoid_A", ".", "detach", "(", ")", "\n", "masks_pred_G_sigmoid_V_part", "=", "masks_pred_G_sigmoid_V", ".", "detach", "(", ")", "\n", "\n", "mask_pred", ",", "_", ",", "_", ",", "_", "=", "net", "(", "imgs", ",", "masks_pred_G_sigmoid_A_part", ",", "masks_pred_G_sigmoid_V_part", ")", "\n", "\n", "mask_pred_tensor_small", "=", "mask_pred", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mask_pred_tensor_small", "=", "torch", ".", "sigmoid", "(", "mask_pred_tensor_small", ")", "\n", "mask_pred_tensor_small", "=", "torch", ".", "squeeze", "(", "mask_pred_tensor_small", ")", "\n", "\n", "if", "train_or", "==", "'val'", ":", "\n", "\n", "                    ", "save_image", "(", "mask_pred_tensor_small", ",", "seg_results_small_path", "+", "img_name", "+", "'.png'", ")", "\n", "if", "dataset", "!=", "'DRIVE_AV'", ":", "\n", "                        ", "mask_pred_img", "=", "Image", ".", "open", "(", "seg_results_small_path", "+", "img_name", "+", "'.png'", ")", ".", "resize", "(", "(", "image_size", ")", ")", "\n", "", "else", ":", "\n", "                        ", "mask_pred_img", "=", "Image", ".", "open", "(", "seg_results_small_path", "+", "img_name", "+", "'.png'", ")", "\n", "", "mask_pred", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "mask_pred_img", ")", "\n", "mask_pred", "=", "torch", ".", "unsqueeze", "(", "mask_pred", ",", "0", ")", "\n", "\n", "if", "dataset", "!=", "'HRF-AV'", ":", "\n", "                        ", "mask_pred", "[", "mask", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "==", "0", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "mask_pred", "[", "mask", "==", "0", "]", "=", "0", "\n", "", "save_image", "(", "mask_pred", ",", "seg_results_raw_path", "+", "img_name", "+", "'.png'", ")", "\n", "\n", "\n", "", "", "if", "mode", "==", "'whole'", ":", "\n", "########################################", "\n", "\n", "# based on the whole images", "\n", "\n", "########################################", "\n", "                ", "mask_pred_sigmoid", "=", "mask_pred", "\n", "mask_pred_sigmoid_cpu", "=", "mask_pred_sigmoid", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_pred_sigmoid_cpu", "=", "np", ".", "squeeze", "(", "mask_pred_sigmoid_cpu", ")", "\n", "\n", "label_cpu", "=", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_cpu", "=", "np", ".", "squeeze", "(", "label_cpu", ")", "\n", "\n", "mask_cpu", "=", "mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_cpu", "=", "np", ".", "squeeze", "(", "mask_cpu", ")", "\n", "\n", "label_cpu", "=", "label_cpu", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "mask_pred_sigmoid_cpu", "=", "mask_pred_sigmoid_cpu", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "binarys_in_mask_vessel", "=", "(", "(", "mask_pred_sigmoid_cpu", ")", ">", "0.5", ")", ".", "astype", "(", "'float'", ")", "\n", "\n", "encoded_pred_a", "=", "np", ".", "zeros", "(", "binarys_in_mask_vessel", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "encoded_pred_u", "=", "np", ".", "zeros", "(", "binarys_in_mask_vessel", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "encoded_pred_v", "=", "np", ".", "zeros", "(", "binarys_in_mask_vessel", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "encoded_gt_a", "=", "np", ".", "zeros", "(", "label_cpu", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "encoded_gt_u", "=", "np", ".", "zeros", "(", "label_cpu", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "encoded_gt_v", "=", "np", ".", "zeros", "(", "label_cpu", ".", "shape", "[", "0", ":", "2", "]", ",", "dtype", "=", "int", ")", "\n", "\n", "white_ind", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "label_cpu", "[", ":", ",", ":", ",", "0", "]", "==", "1", ",", "label_cpu", "[", ":", ",", ":", ",", "1", "]", "==", "1", ",", "label_cpu", "[", ":", ",", ":", ",", "2", "]", "==", "1", ")", ")", "\n", "if", "white_ind", "[", "0", "]", ".", "size", "!=", "0", ":", "\n", "                    ", "label_cpu", "[", "white_ind", "]", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "\n", "", "white_ind_pre", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "0", "]", "==", "1", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "1", "]", "==", "1", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "2", "]", "==", "1", ")", ")", "\n", "if", "white_ind_pre", "[", "0", "]", ".", "size", "!=", "0", ":", "\n", "                    ", "binarys_in_mask_vessel", "[", "white_ind_pre", "]", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "\n", "", "arteriole", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "label_cpu", "[", ":", ",", ":", ",", "0", "]", "==", "1", ",", "label_cpu", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", ")", ";", "encoded_gt_a", "[", "arteriole", "]", "=", "1", "\n", "venule", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "label_cpu", "[", ":", ",", ":", ",", "2", "]", "==", "1", ",", "label_cpu", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", ")", ";", "encoded_gt_v", "[", "venule", "]", "=", "1", "\n", "uncertainty", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "label_cpu", "[", ":", ",", ":", ",", "1", "]", "==", "1", ",", "label_cpu", "[", ":", ",", ":", ",", "0", "]", "==", "0", ",", "label_cpu", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", ")", ";", "encoded_gt_u", "[", "uncertainty", "]", "=", "1", "\n", "arteriole", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "0", "]", "==", "1", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", ")", ";", "encoded_pred_a", "[", "arteriole", "]", "=", "1", "\n", "venule", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "2", "]", "==", "1", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", ")", ";", "encoded_pred_v", "[", "venule", "]", "=", "1", "\n", "uncertainty", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "1", "]", "==", "1", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "0", "]", "==", "0", ",", "binarys_in_mask_vessel", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", ")", ";", "encoded_pred_u", "[", "uncertainty", "]", "=", "1", "\n", "\n", "count_artery", "=", "np", ".", "sum", "(", "encoded_gt_a", "==", "1", ")", "\n", "count_vein", "=", "np", ".", "sum", "(", "encoded_gt_v", "==", "1", ")", "\n", "count_uncertainty", "=", "np", ".", "sum", "(", "encoded_gt_u", "==", "1", ")", "\n", "count_total", "=", "count_artery", "+", "count_vein", "+", "count_uncertainty", "\n", "\n", "##########################################", "\n", "#artery", "\n", "#######################################", "\n", "encoded_gt_vessel_point_a", ",", "encoded_pred_vessel_point_a", "=", "pixel_values_in_mask", "(", "encoded_gt_a", ",", "encoded_pred_a", ",", "mask_cpu", ",", "train_or", ",", "dataset", ")", "\n", "\n", "auc_roc_a", "=", "AUC_ROC", "(", "encoded_gt_vessel_point_a", ",", "encoded_pred_vessel_point_a", ")", "\n", "auc_pr_a", "=", "AUC_PR", "(", "encoded_gt_vessel_point_a", ",", "encoded_pred_vessel_point_a", ")", "\n", "\n", "acc_ve_a", ",", "sensitivity_ve_a", ",", "specificity_ve_a", ",", "precision_ve_a", ",", "G_ve_a", ",", "F1_score_ve_a", ",", "mse_a", ",", "iou_a", "=", "misc_measures", "(", "encoded_gt_vessel_point_a", ",", "encoded_pred_vessel_point_a", ")", "\n", "\n", "acc_a", "+=", "acc_ve_a", "\n", "sent_a", "+=", "sensitivity_ve_a", "\n", "spet_a", "+=", "specificity_ve_a", "\n", "pret_a", "+=", "precision_ve_a", "\n", "G_t_a", "+=", "G_ve_a", "\n", "F1t_a", "+=", "F1_score_ve_a", "\n", "mset_a", "+=", "mse_a", "\n", "iout_a", "+=", "iou_a", "\n", "auc_roct_a", "+=", "auc_roc_a", "\n", "auc_prt_a", "+=", "auc_pr_a", "\n", "\n", "\n", "##########################################", "\n", "#vein", "\n", "#######################################", "\n", "encoded_gt_vessel_point_v", ",", "encoded_pred_vessel_point_v", "=", "pixel_values_in_mask", "(", "encoded_gt_v", ",", "encoded_pred_v", ",", "mask_cpu", ",", "train_or", ",", "dataset", ")", "\n", "\n", "auc_roc_v", "=", "AUC_ROC", "(", "encoded_gt_vessel_point_v", ",", "encoded_pred_vessel_point_v", ")", "\n", "auc_pr_v", "=", "AUC_PR", "(", "encoded_gt_vessel_point_v", ",", "encoded_pred_vessel_point_v", ")", "\n", "\n", "acc_ve_v", ",", "sensitivity_ve_v", ",", "specificity_ve_v", ",", "precision_ve_v", ",", "G_ve_v", ",", "F1_score_ve_v", ",", "mse_v", ",", "iou_v", "=", "misc_measures", "(", "encoded_gt_vessel_point_v", ",", "encoded_pred_vessel_point_v", ")", "\n", "\n", "acc_v", "+=", "acc_ve_v", "\n", "sent_v", "+=", "sensitivity_ve_v", "\n", "spet_v", "+=", "specificity_ve_v", "\n", "pret_v", "+=", "precision_ve_v", "\n", "G_t_v", "+=", "G_ve_v", "\n", "F1t_v", "+=", "F1_score_ve_v", "\n", "mset_v", "+=", "mse_v", "\n", "iout_v", "+=", "iou_v", "\n", "auc_roct_v", "+=", "auc_roc_v", "\n", "auc_prt_v", "+=", "auc_pr_v", "\n", "\n", "\n", "##########################################", "\n", "#uncertainty", "\n", "#######################################", "\n", "encoded_gt_vessel_point_u", ",", "encoded_pred_vessel_point_u", "=", "pixel_values_in_mask", "(", "encoded_gt_u", ",", "encoded_pred_u", ",", "mask_cpu", ",", "train_or", ",", "dataset", ")", "\n", "\n", "auc_roc_u", "=", "AUC_ROC", "(", "encoded_gt_vessel_point_u", ",", "encoded_pred_vessel_point_u", ")", "\n", "auc_pr_u", "=", "AUC_PR", "(", "encoded_gt_vessel_point_u", ",", "encoded_pred_vessel_point_u", ")", "\n", "\n", "acc_ve_u", ",", "sensitivity_ve_u", ",", "specificity_ve_u", ",", "precision_ve_u", ",", "G_ve_u", ",", "F1_score_ve_u", ",", "mse_u", ",", "iou_u", "=", "misc_measures", "(", "encoded_gt_vessel_point_u", ",", "encoded_pred_vessel_point_u", ")", "\n", "\n", "\n", "if", "np", ".", "isnan", "(", "F1_score_ve_u", ")", ":", "\n", "                    ", "acc_ve_u", "=", "0", "\n", "sensitivity_ve_u", "=", "0", "\n", "specificity_ve_u", "=", "0", "\n", "precision_ve_u", "=", "0", "\n", "G_ve_u", "=", "0", "\n", "F1_score_ve_u", "=", "0", "\n", "mse_u", "=", "0", "\n", "iou_u", "=", "0", "\n", "auc_roc_u", "=", "0", "\n", "auc_pr_u", "=", "0", "\n", "\n", "\n", "", "acc_u", "+=", "acc_ve_u", "\n", "sent_u", "+=", "sensitivity_ve_u", "\n", "spet_u", "+=", "specificity_ve_u", "\n", "pret_u", "+=", "precision_ve_u", "\n", "G_t_u", "+=", "G_ve_u", "\n", "F1t_u", "+=", "F1_score_ve_u", "\n", "mset_u", "+=", "mse_u", "\n", "iout_u", "+=", "iou_u", "\n", "auc_roct_u", "+=", "auc_roc_u", "\n", "auc_prt_u", "+=", "auc_pr_u", "\n", "\n", "acc", "+=", "(", "count_artery", "*", "acc_ve_a", "+", "count_vein", "*", "acc_ve_v", "+", "count_uncertainty", "*", "acc_ve_u", ")", "/", "count_total", "\n", "sent", "+=", "(", "count_artery", "*", "sensitivity_ve_a", "+", "count_vein", "*", "sensitivity_ve_v", "+", "count_uncertainty", "*", "sensitivity_ve_u", ")", "/", "count_total", "\n", "spet", "+=", "(", "count_artery", "*", "specificity_ve_a", "+", "count_vein", "*", "specificity_ve_v", "+", "count_uncertainty", "*", "specificity_ve_u", ")", "/", "count_total", "\n", "pret", "+=", "(", "count_artery", "*", "precision_ve_a", "+", "count_vein", "*", "precision_ve_v", "+", "count_uncertainty", "*", "precision_ve_u", ")", "/", "count_total", "\n", "G_t", "+=", "(", "count_artery", "*", "G_ve_a", "+", "count_vein", "*", "G_ve_v", "+", "count_uncertainty", "*", "G_ve_u", ")", "/", "count_total", "\n", "F1t", "+=", "(", "count_artery", "*", "F1_score_ve_a", "+", "count_vein", "*", "F1_score_ve_v", "+", "count_uncertainty", "*", "F1_score_ve_u", ")", "/", "count_total", "\n", "mset", "+=", "(", "count_artery", "*", "mse_a", "+", "count_vein", "*", "mse_v", "+", "count_uncertainty", "*", "mse_u", ")", "/", "count_total", "\n", "iout", "+=", "(", "count_artery", "*", "iou_a", "+", "count_vein", "*", "iou_v", "+", "count_uncertainty", "*", "iou_u", ")", "/", "count_total", "\n", "auc_roct", "+=", "(", "count_artery", "*", "auc_roc_a", "+", "count_vein", "*", "auc_roc_v", "+", "count_uncertainty", "*", "auc_roc_u", ")", "/", "count_total", "\n", "auc_prt", "+=", "(", "count_artery", "*", "auc_pr_a", "+", "count_vein", "*", "auc_pr_v", "+", "count_uncertainty", "*", "auc_pr_u", ")", "/", "count_total", "\n", "\n", "\n", "", "", "", "net", ".", "train", "(", ")", "\n", "\n", "return", "acc", "/", "n_val", ",", "sent", "/", "n_val", ",", "spet", "/", "n_val", ",", "pret", "/", "n_val", ",", "G_t", "/", "n_val", ",", "F1t", "/", "n_val", ",", "auc_roct", "/", "n_val", ",", "auc_prt", "/", "n_val", ",", "mset", "/", "n_val", ",", "iout", "/", "n_val", ",", "acc_a", "/", "n_val", ",", "sent_a", "/", "n_val", ",", "spet_a", "/", "n_val", ",", "pret_a", "/", "n_val", ",", "G_t_a", "/", "n_val", ",", "F1t_a", "/", "n_val", ",", "auc_roct_a", "/", "n_val", ",", "auc_prt_a", "/", "n_val", ",", "mset_a", "/", "n_val", ",", "iout_a", "/", "n_val", ",", "acc_v", "/", "n_val", ",", "sent_v", "/", "n_val", ",", "spet_v", "/", "n_val", ",", "pret_v", "/", "n_val", ",", "G_t_v", "/", "n_val", ",", "F1t_v", "/", "n_val", ",", "auc_roct_v", "/", "n_val", ",", "auc_prt_v", "/", "n_val", ",", "mset_v", "/", "n_val", ",", "iout_v", "/", "n_val", ",", "acc_u", "/", "n_val", ",", "sent_u", "/", "n_val", ",", "spet_u", "/", "n_val", ",", "pret_u", "/", "n_val", ",", "G_t_u", "/", "n_val", ",", "F1t_u", "/", "n_val", ",", "auc_roct_u", "/", "n_val", ",", "auc_prt_u", "/", "n_val", ",", "mset_u", "/", "n_val", ",", "iout_u", "/", "n_val", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.__init__": [[18, 32], ["logging.info", "logging.info", "os.path.splitext", "os.listdir", "file.startswith", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgs_dir", ",", "label_dir", ",", "mask_dir", ",", "img_size", ",", "dataset_name", ",", "train_or", "=", "True", ",", "mask_suffix", "=", "''", ")", ":", "\n", "        ", "self", ".", "imgs_dir", "=", "imgs_dir", "\n", "self", ".", "label_dir", "=", "label_dir", "\n", "self", ".", "mask_dir", "=", "mask_dir", "\n", "self", ".", "mask_suffix", "=", "mask_suffix", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "train_or", "=", "train_or", "\n", "\n", "i", "=", "0", "\n", "self", ".", "ids", "=", "[", "splitext", "(", "file", ")", "[", "0", "]", "for", "file", "in", "listdir", "(", "imgs_dir", ")", "\n", "if", "not", "file", ".", "startswith", "(", "'.'", ")", "]", "\n", "logging", ".", "info", "(", "f'Creating dataset with {(self.ids)} '", ")", "\n", "logging", ".", "info", "(", "f'Creating dataset with {len(self.ids)} examples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.__len__": [[33, 35], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.pad_imgs": [[36, 48], ["len", "numpy.zeros", "len", "numpy.zeros"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "pad_imgs", "(", "self", ",", "imgs", ",", "img_size", ")", ":", "\n", "        ", "img_h", ",", "img_w", "=", "imgs", ".", "shape", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", "\n", "target_h", ",", "target_w", "=", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "\n", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "d", "=", "imgs", ".", "shape", "[", "2", "]", "\n", "padded", "=", "np", ".", "zeros", "(", "(", "target_h", ",", "target_w", ",", "d", ")", ")", "\n", "", "elif", "len", "(", "imgs", ".", "shape", ")", "==", "2", ":", "\n", "            ", "padded", "=", "np", ".", "zeros", "(", "(", "target_h", ",", "target_w", ")", ")", "\n", "", "padded", "[", "(", "target_h", "-", "img_h", ")", "//", "2", ":", "(", "target_h", "-", "img_h", ")", "//", "2", "+", "img_h", ",", "(", "target_w", "-", "img_w", ")", "//", "2", ":", "(", "target_w", "-", "img_w", ")", "//", "2", "+", "img_w", ",", "...", "]", "=", "imgs", "\n", "#print(np.shape(padded))", "\n", "return", "padded", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.random_perturbation": [[49, 57], ["range", "PIL.Image.fromarray", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color.enhance", "numpy.asarray().astype", "imgs[].astype", "random.uniform", "numpy.asarray"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "random_perturbation", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "im", "=", "Image", ".", "fromarray", "(", "imgs", "[", "i", ",", "...", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "en", "=", "ImageEnhance", ".", "Color", "(", "im", ")", "\n", "im", "=", "en", ".", "enhance", "(", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", ")", "\n", "imgs", "[", "i", ",", "...", "]", "=", "np", ".", "asarray", "(", "im", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.preprocess": [[58, 112], ["numpy.array", "numpy.mean", "numpy.std", "numpy.expand_dims.transpose", "numpy.expand_dims.transpose", "numpy.expand_dims.transpose", "numpy.where", "numpy.where", "numpy.array", "numpy.array", "dataset.LearningAVSegData.pad_imgs", "dataset.LearningAVSegData.pad_imgs", "dataset.LearningAVSegData.pad_imgs", "scipy.ndimage.rotate", "dataset.LearningAVSegData.random_perturbation", "numpy.round", "numpy.round", "len", "numpy.expand_dims", "len", "numpy.expand_dims", "len", "numpy.expand_dims", "numpy.array", "numpy.random.random", "numpy.random.randint", "scipy.ndimage.rotate", "scipy.ndimage.rotate"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.pad_imgs", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.pad_imgs", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.pad_imgs", "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.random_perturbation"], ["", "@", "classmethod", "\n", "def", "preprocess", "(", "self", ",", "pil_img", ",", "label", ",", "mask", ",", "dataset_name", ",", "img_size", ",", "train_or", ")", ":", "\n", "\n", "        ", "newW", ",", "newH", "=", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "\n", "assert", "newW", ">", "0", "and", "newH", ">", "0", ",", "'Scale is too small'", "\n", "\n", "img_array", "=", "np", ".", "array", "(", "pil_img", ")", "\n", "label_array", "=", "np", ".", "array", "(", "label", ")", "/", "255", "\n", "if", "dataset_name", "==", "'LES-AV'", ":", "\n", "            ", "mask_array", "=", "np", ".", "array", "(", "mask", ")", "\n", "", "else", ":", "\n", "            ", "mask_array", "=", "np", ".", "array", "(", "mask", ")", "/", "255", "\n", "\n", "", "if", "dataset_name", "==", "'DRIVE_AV'", ":", "\n", "            ", "img_array", "=", "self", ".", "pad_imgs", "(", "img_array", ",", "img_size", ")", "\n", "label_array", "=", "self", ".", "pad_imgs", "(", "label_array", ",", "img_size", ")", "\n", "mask_array", "=", "self", ".", "pad_imgs", "(", "mask_array", ",", "img_size", ")", "\n", "\n", "", "if", "train_or", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "                ", "img_array", "=", "img_array", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "# flipped imgs", "\n", "label_array", "=", "label_array", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "mask_array", "=", "mask_array", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "angle", "=", "3", "*", "np", ".", "random", ".", "randint", "(", "120", ")", "\n", "img_array", "=", "rotate", "(", "img_array", ",", "angle", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "reshape", "=", "False", ")", "\n", "\n", "img_array", "=", "self", ".", "random_perturbation", "(", "img_array", ")", "\n", "label_array", "=", "np", ".", "round", "(", "rotate", "(", "label_array", ",", "angle", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "reshape", "=", "False", ")", ")", "\n", "mask_array", "=", "np", ".", "round", "(", "rotate", "(", "mask_array", ",", "angle", ",", "axes", "=", "(", "0", ",", "1", ")", ",", "reshape", "=", "False", ")", ")", "\n", "\n", "", "mean", "=", "np", ".", "mean", "(", "img_array", "[", "img_array", "[", "...", ",", "0", "]", ">", "00.0", "]", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "std", "(", "img_array", "[", "img_array", "[", "...", ",", "0", "]", ">", "00.0", "]", ",", "axis", "=", "0", ")", "\n", "img_array", "=", "(", "img_array", "-", "1.0", "*", "mean", ")", "/", "1.0", "*", "std", "\n", "\n", "\n", "if", "len", "(", "img_array", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img_array", "=", "np", ".", "expand_dims", "(", "img_array", ",", "axis", "=", "2", ")", "\n", "\n", "", "if", "len", "(", "label_array", ".", "shape", ")", "==", "2", ":", "\n", "            ", "label_array", "=", "np", ".", "expand_dims", "(", "label_array", ",", "axis", "=", "2", ")", "\n", "\n", "", "if", "len", "(", "mask_array", ".", "shape", ")", "==", "2", ":", "\n", "            ", "mask_array", "=", "np", ".", "expand_dims", "(", "mask_array", ",", "axis", "=", "2", ")", "\n", "\n", "", "img_array", "=", "img_array", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "label_array", "=", "label_array", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "mask_array", "=", "mask_array", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "label_array", "=", "np", ".", "where", "(", "label_array", ">", "0.5", ",", "1", ",", "0", ")", "\n", "mask_array", "=", "np", ".", "where", "(", "mask_array", ">", "0.5", ",", "1", ",", "0", ")", "\n", "\n", "\n", "return", "img_array", ",", "label_array", ",", "mask_array", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData.__getitem__": [[114, 150], ["dataset.LearningAVSegData.preprocess", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "PIL.Image.open().resize", "PIL.Image.open().resize", "PIL.Image.open().resize", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "PIL.Image.open", "PIL.Image.open().resize", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.preprocess"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "idx", "=", "self", ".", "ids", "[", "i", "]", "\n", "\n", "if", "self", ".", "dataset_name", "==", "'HRF-AV'", ":", "\n", "            ", "label_file", "=", "glob", "(", "self", ".", "label_dir", "+", "idx", "+", "'_AVmanual'", "+", "'.*'", ")", "\n", "img_file", "=", "glob", "(", "self", ".", "imgs_dir", "+", "idx", "+", "'.*'", ")", "\n", "mask_file", "=", "glob", "(", "self", ".", "mask_dir", "+", "idx", "+", "'_mask'", "+", "'.*'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "label_file", "=", "glob", "(", "self", ".", "label_dir", "+", "idx", "+", "'.*'", ")", "\n", "img_file", "=", "glob", "(", "self", ".", "imgs_dir", "+", "idx", "+", "'.*'", ")", "\n", "mask_file", "=", "glob", "(", "self", ".", "mask_dir", "+", "idx", "+", "'_mask'", "+", "'.*'", ")", "\n", "\n", "\n", "", "if", "self", ".", "train_or", ":", "\n", "            ", "label", "=", "Image", ".", "open", "(", "label_file", "[", "0", "]", ")", ".", "resize", "(", "self", ".", "img_size", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", "[", "0", "]", ")", ".", "resize", "(", "self", ".", "img_size", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_file", "[", "0", "]", ")", ".", "resize", "(", "self", ".", "img_size", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "dataset_name", "!=", "'DRIVE_AV'", ":", "\n", "                ", "label", "=", "Image", ".", "open", "(", "label_file", "[", "0", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", "[", "0", "]", ")", ".", "resize", "(", "self", ".", "img_size", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_file", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "Image", ".", "open", "(", "label_file", "[", "0", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_file", "[", "0", "]", ")", "\n", "mask", "=", "Image", ".", "open", "(", "mask_file", "[", "0", "]", ")", "\n", "\n", "", "", "img", ",", "label", ",", "mask", "=", "self", ".", "preprocess", "(", "img", ",", "label", ",", "mask", ",", "self", ".", "dataset_name", ",", "self", ".", "img_size", ",", "self", ".", "train_or", ")", "\n", "i", "+=", "1", "\n", "return", "{", "\n", "'name'", ":", "idx", ",", "\n", "'image'", ":", "torch", ".", "from_numpy", "(", "img", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "\n", "'label'", ":", "torch", ".", "from_numpy", "(", "label", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ",", "\n", "'mask'", ":", "torch", ".", "from_numpy", "(", "mask", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.__init__": [[155, 167], ["logging.info", "logging.info", "os.path.splitext", "os.listdir", "file.startswith", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgs_dir", ",", "img_size", ",", "dataset_name", ",", "train_or", "=", "True", ",", "mask_suffix", "=", "''", ")", ":", "\n", "        ", "self", ".", "imgs_dir", "=", "imgs_dir", "\n", "self", ".", "mask_suffix", "=", "mask_suffix", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "train_or", "=", "train_or", "\n", "\n", "i", "=", "0", "\n", "self", ".", "ids", "=", "[", "splitext", "(", "file", ")", "[", "0", "]", "for", "file", "in", "listdir", "(", "imgs_dir", ")", "\n", "if", "not", "file", ".", "startswith", "(", "'.'", ")", "]", "\n", "logging", ".", "info", "(", "f'Creating dataset with {(self.ids)} '", ")", "\n", "logging", ".", "info", "(", "f'Creating dataset with {len(self.ids)} examples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.__len__": [[168, 170], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.pad_imgs": [[171, 183], ["len", "numpy.zeros", "len", "numpy.zeros"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "pad_imgs", "(", "self", ",", "imgs", ",", "img_size", ")", ":", "\n", "        ", "img_h", ",", "img_w", "=", "imgs", ".", "shape", "[", "0", "]", ",", "imgs", ".", "shape", "[", "1", "]", "\n", "target_h", ",", "target_w", "=", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "\n", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "d", "=", "imgs", ".", "shape", "[", "2", "]", "\n", "padded", "=", "np", ".", "zeros", "(", "(", "target_h", ",", "target_w", ",", "d", ")", ")", "\n", "", "elif", "len", "(", "imgs", ".", "shape", ")", "==", "2", ":", "\n", "            ", "padded", "=", "np", ".", "zeros", "(", "(", "target_h", ",", "target_w", ")", ")", "\n", "", "padded", "[", "(", "target_h", "-", "img_h", ")", "//", "2", ":", "(", "target_h", "-", "img_h", ")", "//", "2", "+", "img_h", ",", "(", "target_w", "-", "img_w", ")", "//", "2", ":", "(", "target_w", "-", "img_w", ")", "//", "2", "+", "img_w", ",", "...", "]", "=", "imgs", "\n", "#print(np.shape(padded))", "\n", "return", "padded", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.random_perturbation": [[184, 192], ["range", "PIL.Image.fromarray", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color.enhance", "numpy.asarray().astype", "imgs[].astype", "random.uniform", "numpy.asarray"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "random_perturbation", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "im", "=", "Image", ".", "fromarray", "(", "imgs", "[", "i", ",", "...", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "en", "=", "ImageEnhance", ".", "Color", "(", "im", ")", "\n", "im", "=", "en", ".", "enhance", "(", "random", ".", "uniform", "(", "0.8", ",", "1.2", ")", ")", "\n", "imgs", "[", "i", ",", "...", "]", "=", "np", ".", "asarray", "(", "im", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.preprocess": [[193, 211], ["numpy.array", "numpy.mean", "numpy.std", "numpy.expand_dims.transpose", "len", "numpy.expand_dims"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "preprocess", "(", "self", ",", "pil_img", ",", "dataset_name", ",", "img_size", ",", "train_or", ")", ":", "\n", "\n", "        ", "newW", ",", "newH", "=", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "\n", "assert", "newW", ">", "0", "and", "newH", ">", "0", ",", "'Scale is too small'", "\n", "\n", "img_array", "=", "np", ".", "array", "(", "pil_img", ")", "\n", "mean", "=", "np", ".", "mean", "(", "img_array", "[", "img_array", "[", "...", ",", "0", "]", ">", "00.0", "]", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "std", "(", "img_array", "[", "img_array", "[", "...", ",", "0", "]", ">", "00.0", "]", ",", "axis", "=", "0", ")", "\n", "img_array", "=", "(", "img_array", "-", "1.0", "*", "mean", ")", "/", "1.0", "*", "std", "\n", "\n", "\n", "if", "len", "(", "img_array", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img_array", "=", "np", ".", "expand_dims", "(", "img_array", ",", "axis", "=", "2", ")", "\n", "\n", "", "img_array", "=", "img_array", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "img_array", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.__getitem__": [[213, 230], ["glob.glob.glob", "PIL.Image.open", "dataset.LearningAVSegData_Out.resize", "dataset.LearningAVSegData_Out.preprocess", "torch.from_numpy().type", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.dataset.LearningAVSegData_Out.preprocess"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "idx", "=", "self", ".", "ids", "[", "i", "]", "\n", "img_file", "=", "glob", "(", "self", ".", "imgs_dir", "+", "idx", "+", "'.*'", ")", "\n", "\n", "\n", "img", "=", "Image", ".", "open", "(", "img_file", "[", "0", "]", ")", "\n", "ori_width", ",", "ori_height", "=", "img", ".", "size", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "img_size", ")", "\n", "\n", "img", "=", "self", ".", "preprocess", "(", "img", ",", "self", ".", "dataset_name", ",", "self", ".", "img_size", ",", "self", ".", "train_or", ")", "\n", "i", "+=", "1", "\n", "return", "{", "\n", "'name'", ":", "idx", ",", "\n", "'width'", ":", "ori_width", ",", "\n", "'height'", ":", "ori_height", ",", "\n", "'image'", ":", "torch", ".", "from_numpy", "(", "img", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.UNet.__init__": [[20, 37], ["torch.Module.__init__", "model.DoubleConv", "model.Down", "model.Down", "model.Down", "model.Down", "model.Up", "model.Up", "model.Up", "model.Up", "model.OutConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "Down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "Down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "Down", "(", "256", ",", "512", ")", "\n", "factor", "=", "2", "if", "bilinear", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "512", ",", "1024", "//", "factor", ")", "\n", "self", ".", "up1", "=", "Up", "(", "1024", ",", "512", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "512", ",", "256", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "256", ",", "128", "//", "factor", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.UNet.forward": [[38, 50], ["model.UNet.inc", "model.UNet.down1", "model.UNet.down2", "model.UNet.down3", "model.UNet.down4", "model.UNet.up1", "model.UNet.up2", "model.UNet.up3", "model.UNet.up4", "model.UNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Generator_main.__init__": [[54, 81], ["torch.Module.__init__", "model.DoubleConv", "model.Down", "model.Down", "model.Down", "model.Down", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model.Up_new", "model.side_one", "model.Up_new", "model.side_two", "model.Up_new", "model.side_three", "model.Up_new", "model.OutConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "n_filters", ",", "n_classes", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "Generator_main", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "input_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "input_channels", ",", "n_filters", ")", "\n", "self", ".", "down1", "=", "Down", "(", "n_filters", ",", "2", "*", "n_filters", ")", "\n", "self", ".", "down2", "=", "Down", "(", "2", "*", "n_filters", ",", "4", "*", "n_filters", ")", "\n", "self", ".", "down3", "=", "Down", "(", "4", "*", "n_filters", ",", "8", "*", "n_filters", ")", "\n", "self", ".", "down4", "=", "Down", "(", "8", "*", "n_filters", ",", "16", "*", "n_filters", ")", "\n", "\n", "self", ".", "downsample", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "\n", "self", ".", "up1", "=", "Up_new", "(", "16", "*", "n_filters", ",", "8", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "S1", "=", "side_one", "(", "8", "*", "n_filters", ",", "n_classes", ")", "\n", "\n", "self", ".", "up2", "=", "Up_new", "(", "8", "*", "n_filters", ",", "4", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "S2", "=", "side_two", "(", "4", "*", "n_filters", ",", "n_classes", ")", "\n", "\n", "self", ".", "up3", "=", "Up_new", "(", "4", "*", "n_filters", ",", "2", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "S3", "=", "side_three", "(", "2", "*", "n_filters", ",", "n_classes", ")", "\n", "\n", "self", ".", "up4", "=", "Up_new", "(", "2", "*", "n_filters", ",", "1", "*", "n_filters", ",", "bilinear", ")", "\n", "\n", "self", ".", "outc", "=", "OutConv", "(", "(", "n_filters", "+", "6", ")", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Generator_main.forward": [[83, 104], ["model.Generator_main.inc", "model.Generator_main.down1", "model.Generator_main.down2", "model.Generator_main.down3", "model.Generator_main.down4", "model.Generator_main.up1", "model.Generator_main.S1", "model.Generator_main.up2", "model.Generator_main.S2", "model.Generator_main.up3", "model.Generator_main.S3", "model.Generator_main.up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Generator_main.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_a", ",", "x_v", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "s1", "=", "self", ".", "S1", "(", "x", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "s2", "=", "self", ".", "S2", "(", "x", ")", "\n", "\n", "#x = torch.cat([x_a, x, x_v], dim=1)", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "s3", "=", "self", ".", "S3", "(", "x", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "\n", "x_fusion", "=", "torch", ".", "cat", "(", "[", "x_a", ",", "x", ",", "x_v", "]", ",", "dim", "=", "1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x_fusion", ")", "\n", "#logits = self.outc(x)", "\n", "\n", "return", "logits", ",", "s1", ",", "s2", ",", "s3", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Generator_branch.__init__": [[107, 125], ["torch.Module.__init__", "model.DoubleConv", "model.Down", "model.Down", "model.Down", "model.Down", "model.Up_new", "model.Up_new", "model.Up_new", "model.Up_new", "model.OutConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "n_filters", ",", "n_classes", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "Generator_branch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "input_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "input_channels", ",", "n_filters", ")", "\n", "self", ".", "down1", "=", "Down", "(", "n_filters", ",", "2", "*", "n_filters", ")", "\n", "self", ".", "down2", "=", "Down", "(", "2", "*", "n_filters", ",", "4", "*", "n_filters", ")", "\n", "self", ".", "down3", "=", "Down", "(", "4", "*", "n_filters", ",", "8", "*", "n_filters", ")", "\n", "self", ".", "down4", "=", "Down", "(", "8", "*", "n_filters", ",", "16", "*", "n_filters", ")", "\n", "\n", "self", ".", "up1", "=", "Up_new", "(", "16", "*", "n_filters", ",", "8", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up_new", "(", "8", "*", "n_filters", ",", "4", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up_new", "(", "4", "*", "n_filters", ",", "2", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up_new", "(", "2", "*", "n_filters", ",", "1", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "n_filters", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Generator_branch.forward": [[127, 139], ["model.Generator_branch.inc", "model.Generator_branch.down1", "model.Generator_branch.down2", "model.Generator_branch.down3", "model.Generator_branch.down4", "model.Generator_branch.up1", "model.Generator_branch.up2", "model.Generator_branch.up3", "model.Generator_branch.up4", "model.Generator_branch.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Discriminator.__init__": [[147, 165], ["torch.Module.__init__", "model.DoubleConv", "model.Down", "model.Down", "model.Down", "model.Down", "model.Up", "model.Up", "model.Up", "model.Up", "model.OutConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "n_filters", ",", "n_classes", ",", "bilinear", "=", "True", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_channels", "=", "input_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "bilinear", "=", "bilinear", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "input_channels", ",", "n_filters", ")", "\n", "self", ".", "down1", "=", "Down", "(", "n_filters", ",", "2", "*", "n_filters", ")", "\n", "self", ".", "down2", "=", "Down", "(", "2", "*", "n_filters", ",", "4", "*", "n_filters", ")", "\n", "self", ".", "down3", "=", "Down", "(", "4", "*", "n_filters", ",", "8", "*", "n_filters", ")", "\n", "self", ".", "down4", "=", "Down", "(", "8", "*", "n_filters", ",", "16", "*", "n_filters", ")", "\n", "\n", "self", ".", "up1", "=", "Up", "(", "16", "*", "n_filters", ",", "8", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "Up", "(", "8", "*", "n_filters", ",", "4", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "Up", "(", "4", "*", "n_filters", ",", "2", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "Up", "(", "2", "*", "n_filters", ",", "1", "*", "n_filters", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "n_filters", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Discriminator.forward": [[167, 179], ["model.Discriminator.inc", "model.Discriminator.down1", "model.Discriminator.down2", "model.Discriminator.down3", "model.Discriminator.down4", "model.Discriminator.up1", "model.Discriminator.up2", "model.Discriminator.up3", "model.Discriminator.up4", "model.Discriminator.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "logits", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.DoubleConv.__init__": [[186, 198], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.DoubleConv.forward": [[200, 202], ["model.DoubleConv.double_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Down.__init__": [[207, 212], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "model.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Down.forward": [[214, 216], ["model.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Up.__init__": [[221, 232], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "model.DoubleConv", "model.bottom_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "model.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_bottom", "=", "bottom_conv", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Up.forward": [[234, 246], ["model.Up.conv_bottom", "model.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv_bottom", "(", "x1", ")", "\n", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.bottom_conv.__init__": [[251, 260], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "single_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.bottom_conv.forward": [[262, 264], ["model.bottom_conv.single_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "single_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.DoubleAdd.__init__": [[269, 276], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "", "self", ".", "activation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.DoubleAdd.forward": [[278, 290], ["list", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "model.DoubleAdd.sum", "model.DoubleAdd.activation", "list", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "model.DoubleAdd.sum", "model.DoubleAdd.activation", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DoubleAdd.size", "model.DoubleAdd.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "list", "(", "x1", ".", "size", "(", ")", ")", "\n", "x1", "=", "torch", ".", "reshape", "(", "input", "=", "x1", ",", "shape", "=", "(", "n", ",", "c", "//", "2", ",", "2", ",", "h", ",", "w", ")", ")", "\n", "x1", "=", "x1", ".", "sum", "(", "dim", "=", "2", ")", "\n", "x1", "=", "self", ".", "activation", "(", "x1", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "list", "(", "x2", ".", "size", "(", ")", ")", "\n", "x2", "=", "torch", ".", "reshape", "(", "input", "=", "x2", ",", "shape", "=", "(", "n", ",", "c", "//", "2", ",", "2", ",", "h", ",", "w", ")", ")", "\n", "x2", "=", "x2", ".", "sum", "(", "dim", "=", "2", ")", "\n", "x2", "=", "self", ".", "activation", "(", "x2", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Up_new.__init__": [[296, 302], ["torch.Module.__init__", "model.bottom_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "model.DoubleAdd", "model.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_bottom", "=", "bottom_conv", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "add", "=", "DoubleAdd", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Up_new.forward": [[304, 316], ["model.Up_new.conv_bottom", "model.Up_new.up", "model.Up_new.add", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Up_new.conv", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_bottom", "(", "x1", ")", "\n", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "#road 1", "\n", "\n", "x_1", "=", "self", ".", "add", "(", "x", ",", "x2", ")", "\n", "\n", "#road 2", "\n", "x_2", "=", "torch", ".", "cat", "(", "[", "x", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "x_2", "=", "self", ".", "conv", "(", "x_2", ")", "\n", "\n", "return", "torch", ".", "add", "(", "x_1", ",", "x_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Side_block.__init__": [[321, 328], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.Side_block.forward": [[330, 333], ["model.Side_block.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_one.__init__": [[338, 345], ["torch.Module.__init__", "model.Side_block", "model.Side_block", "model.Side_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "side_block_1", "=", "Side_block", "(", "in_channels", ",", "in_channels", "//", "2", ")", "\n", "self", ".", "side_block_2", "=", "Side_block", "(", "in_channels", "//", "2", ",", "in_channels", "//", "4", ")", "\n", "self", ".", "side_block_3", "=", "Side_block", "(", "in_channels", "//", "4", ",", "in_channels", "//", "8", ")", "\n", "self", ".", "side_output", "=", "nn", ".", "Conv2d", "(", "32", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_one.forward": [[346, 354], ["model.side_one.side_block_1", "model.side_one.side_block_2", "model.side_one.side_block_3", "model.side_one.side_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "side_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "side_block_2", "(", "x", ")", "\n", "x", "=", "self", ".", "side_block_3", "(", "x", ")", "\n", "x", "=", "self", ".", "side_output", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_two.__init__": [[359, 365], ["torch.Module.__init__", "model.Side_block", "model.Side_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "side_block_1", "=", "Side_block", "(", "in_channels", ",", "in_channels", "//", "2", ")", "\n", "self", ".", "side_block_2", "=", "Side_block", "(", "in_channels", "//", "2", ",", "in_channels", "//", "4", ")", "\n", "self", ".", "side_output", "=", "nn", ".", "Conv2d", "(", "32", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_two.forward": [[366, 373], ["model.side_two.side_block_1", "model.side_two.side_block_2", "model.side_two.side_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "side_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "side_block_2", "(", "x", ")", "\n", "x", "=", "self", ".", "side_output", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_three.__init__": [[378, 383], ["torch.Module.__init__", "model.Side_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "side_block_1", "=", "Side_block", "(", "in_channels", ",", "in_channels", "//", "2", ")", "\n", "self", ".", "side_output", "=", "nn", ".", "Conv2d", "(", "32", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.side_three.forward": [[384, 390], ["model.side_three.side_block_1", "model.side_three.side_output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "side_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "side_output", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__": [[393, 396], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.model.OutConv.forward": [[397, 399], ["model.OutConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rmaphoh_Learning-AVSegmentation.scripts.utils.Define_image_size": [[9, 22], ["None"], "function", ["None"], ["def", "Define_image_size", "(", "uniform", ",", "dataset", ")", ":", "\n", "\n", "    ", "if", "uniform", "==", "'True'", ":", "\n", "        ", "img_size", "=", "(", "720", ",", "720", ")", "\n", "", "else", ":", "\n", "        ", "if", "dataset", "==", "'HRF-AV'", ":", "\n", "            ", "img_size", "=", "(", "880", ",", "592", ")", "\n", "", "elif", "dataset", "==", "'DRIVE_AV'", ":", "\n", "            ", "img_size", "=", "(", "592", ",", "592", ")", "\n", "", "elif", "dataset", "==", "'LES-AV'", ":", "\n", "            ", "img_size", "=", "(", "800", ",", "720", ")", "\n", "\n", "", "", "return", "img_size", "\n", "\n"]]}