{"home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.predictor.parse_args": [[26, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# Hyper Parameters", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'testCollection'", ",", "type", "=", "str", ",", "help", "=", "'test collection'", ")", "\n", "parser", ".", "add_argument", "(", "'--rootpath'", ",", "type", "=", "str", ",", "default", "=", "ROOT_PATH", ",", "help", "=", "'path to datasets. (default: %s)'", "%", "ROOT_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "help", "=", "'overwrite existed file. (default: 0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Size of a training mini-batch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of data loader workers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--logger_name'", ",", "default", "=", "'runs'", ",", "help", "=", "'Path to save the model and Tensorboard log.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_name'", ",", "default", "=", "'model_best.pth.tar'", ",", "type", "=", "str", ",", "help", "=", "'name of checkpoint (default: model_best.pth.tar)'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_sets'", ",", "type", "=", "str", ",", "default", "=", "'tv16.avs.txt'", ",", "help", "=", "'test query sets,  tv16.avs.txt,tv17.avs.txt,tv18.avs.txt for TRECVID 16/17/18.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.predictor.encode_data": [[42, 71], ["basic.generic_utils.Progbar", "enumerate", "len", "len", "encoder", "encoder.data.cpu().numpy().copy", "enumerate", "basic.generic_utils.Progbar.add", "numpy.zeros", "len", "encoder.data.cpu().numpy", "len", "encoder.size", "encoder.data.cpu"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add"], ["", "def", "encode_data", "(", "encoder", ",", "data_loader", ",", "return_ids", "=", "True", ")", ":", "\n", "    ", "\"\"\"Encode all videos and captions loadable by `data_loader`\n    \"\"\"", "\n", "# numpy array to keep all the embeddings", "\n", "embeddings", "=", "None", "\n", "ids", "=", "[", "''", "]", "*", "len", "(", "data_loader", ".", "dataset", ")", "\n", "pbar", "=", "Progbar", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "for", "i", ",", "(", "datas", ",", "idxs", ",", "data_ids", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "# compute the embeddings", "\n", "        ", "emb", "=", "encoder", "(", "datas", ")", "\n", "\n", "# initialize the numpy arrays given the size of the embeddings", "\n", "if", "embeddings", "is", "None", ":", "\n", "            ", "embeddings", "=", "np", ".", "zeros", "(", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "emb", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "# preserve the embeddings by copying from gpu and converting to numpy", "\n", "", "embeddings", "[", "idxs", "]", "=", "emb", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "idxs", ")", ":", "\n", "            ", "ids", "[", "idx", "]", "=", "data_ids", "[", "j", "]", "\n", "\n", "", "del", "datas", "\n", "pbar", ".", "add", "(", "len", "(", "idxs", ")", ")", "\n", "\n", "", "if", "return_ids", "==", "True", ":", "\n", "        ", "return", "embeddings", ",", "ids", ",", "\n", "", "else", ":", "\n", "        ", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.predictor.main": [[73, 168], ["predictor.parse_args", "print", "os.path.join", "torch.load", "print", "model.load_state_dict", "model.val_start", "basic.bigfile.BigFile", "basic.util.read_dict", "util.get_vis_data_loader", "os.path.join", "pickle.load", "len", "os.path.join", "pickle.load", "len", "os.path.join.replace", "parse_args.query_sets.strip().split", "json.dumps", "os.path.exists", "logging.info", "sys.exit", "hasattr", "setattr", "model.get_model", "os.path.join", "os.path.join", "open", "util.text2vec.get_text_encoder", "open", "resume.replace.replace", "output_dir_tmp.replace.replace", "os.path.join", "print", "basic.common.checkToSkip", "os.path.join", "util.get_txt_data_loader", "time.time", "predictor.encode_data", "print", "time.time", "query_embs.dot", "numpy.argsort", "print", "vars", "parse_args.query_sets.strip", "basic.common.makedirsforfile", "time.time", "predictor.encode_data", "print", "open", "range", "templete.replace", "striptStr.replace.replace", "striptStr.replace.replace", "striptStr.replace.replace", "striptStr.replace.replace", "open().write", "os.system", "print", "fout.write", "open().readlines", "str", "time.time", "time.time", "query_set.split", "open", "time.time", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.val_start", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.read_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_vis_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_model", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.get_text_encoder", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_txt_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_data", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.makedirsforfile", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_data"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "opt", ")", ",", "indent", "=", "2", ")", ")", "\n", "\n", "rootpath", "=", "opt", ".", "rootpath", "\n", "testCollection", "=", "opt", ".", "testCollection", "\n", "resume", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "opt", ".", "checkpoint_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "resume", ")", ":", "\n", "        ", "logging", ".", "info", "(", "resume", "+", "' not exists.'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_rsum", "=", "checkpoint", "[", "'best_rsum'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}, best_rsum {})\"", "\n", ".", "format", "(", "resume", ",", "start_epoch", ",", "best_rsum", ")", ")", "\n", "\n", "options", "=", "checkpoint", "[", "'opt'", "]", "\n", "if", "not", "hasattr", "(", "options", ",", "'concate'", ")", ":", "\n", "        ", "setattr", "(", "options", ",", "\"concate\"", ",", "\"full\"", ")", "\n", "", "model", "=", "get_model", "(", "options", ".", "model", ")", "(", "options", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", ".", "val_start", "(", ")", "\n", "\n", "trainCollection", "=", "options", ".", "trainCollection", "\n", "valCollection", "=", "options", ".", "valCollection", "\n", "\n", "visual_feat_file", "=", "BigFile", "(", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'FeatureData'", ",", "options", ".", "visual_feature", ")", ")", "\n", "assert", "options", ".", "visual_feat_dim", "==", "visual_feat_file", ".", "ndims", "\n", "video2frame", "=", "read_dict", "(", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'FeatureData'", ",", "options", ".", "visual_feature", ",", "'video2frames.txt'", ")", ")", "\n", "visual_loader", "=", "data", ".", "get_vis_data_loader", "(", "visual_feat_file", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "video2frame", ")", "\n", "vis_embs", "=", "None", "\n", "\n", "# set bow vocabulary and encoding", "\n", "bow_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "options", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'bow'", ",", "options", ".", "vocab", "+", "'.pkl'", ")", "\n", "bow_vocab", "=", "pickle", ".", "load", "(", "open", "(", "bow_vocab_file", ",", "'rb'", ")", ")", "\n", "bow2vec", "=", "get_text_encoder", "(", "'bow'", ")", "(", "bow_vocab", ")", "\n", "options", ".", "bow_vocab_size", "=", "len", "(", "bow_vocab", ")", "\n", "\n", "# set rnn vocabulary ", "\n", "rnn_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "options", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'rnn'", ",", "options", ".", "vocab", "+", "'.pkl'", ")", "\n", "rnn_vocab", "=", "pickle", ".", "load", "(", "open", "(", "rnn_vocab_file", ",", "'rb'", ")", ")", "\n", "options", ".", "vocab_size", "=", "len", "(", "rnn_vocab", ")", "\n", "\n", "output_dir", "=", "resume", ".", "replace", "(", "trainCollection", ",", "testCollection", ")", "\n", "for", "query_set", "in", "opt", ".", "query_sets", ".", "strip", "(", ")", ".", "split", "(", "','", ")", ":", "\n", "        ", "output_dir_tmp", "=", "output_dir", ".", "replace", "(", "valCollection", ",", "'%s/%s/%s'", "%", "(", "query_set", ",", "trainCollection", ",", "valCollection", ")", ")", "\n", "output_dir_tmp", "=", "output_dir_tmp", ".", "replace", "(", "'/%s/'", "%", "options", ".", "cv_name", ",", "'/results/'", ")", "\n", "pred_result_file", "=", "os", ".", "path", ".", "join", "(", "output_dir_tmp", ",", "'id.sent.score.txt'", ")", "\n", "print", "(", "pred_result_file", ")", "\n", "if", "checkToSkip", "(", "pred_result_file", ",", "opt", ".", "overwrite", ")", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "makedirsforfile", "(", "pred_result_file", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "# data loader prepare", "\n", "", "query_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'TextData'", ",", "query_set", ")", "\n", "\n", "# set data loader", "\n", "query_loader", "=", "data", ".", "get_txt_data_loader", "(", "query_file", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ")", "\n", "\n", "if", "vis_embs", "is", "None", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "vis_embs", ",", "vis_ids", "=", "encode_data", "(", "model", ".", "embed_vis", ",", "visual_loader", ")", "\n", "print", "(", "\"encode image time: %.3f s\"", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "query_embs", ",", "query_ids", "=", "encode_data", "(", "model", ".", "embed_txt", ",", "query_loader", ")", "\n", "print", "(", "\"encode text time: %.3f s\"", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "t2i_matrix", "=", "query_embs", ".", "dot", "(", "vis_embs", ".", "T", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "t2i_matrix", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"compute similarity time: %.3f s\"", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "with", "open", "(", "pred_result_file", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "for", "index", "in", "range", "(", "inds", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "ind", "=", "inds", "[", "index", "]", "[", ":", ":", "-", "1", "]", "\n", "fout", ".", "write", "(", "query_ids", "[", "index", "]", "+", "' '", "+", "' '", ".", "join", "(", "[", "vis_ids", "[", "i", "]", "+", "' %s'", "%", "t2i_matrix", "[", "index", "]", "[", "i", "]", "\n", "for", "i", "in", "ind", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "if", "testCollection", "==", "'iacc.3'", ":", "\n", "            ", "templete", "=", "''", ".", "join", "(", "open", "(", "'tv-avs-eval/TEMPLATE_do_eval.sh'", ")", ".", "readlines", "(", ")", ")", "\n", "striptStr", "=", "templete", ".", "replace", "(", "'@@@rootpath@@@'", ",", "rootpath", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@testCollection@@@'", ",", "testCollection", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@topic_set@@@'", ",", "query_set", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@overwrite@@@'", ",", "str", "(", "opt", ".", "overwrite", ")", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@score_file@@@'", ",", "pred_result_file", ")", "\n", "\n", "runfile", "=", "'do_eval_%s.sh'", "%", "testCollection", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "'tv-avs-eval'", ",", "runfile", ")", ",", "'w'", ")", ".", "write", "(", "striptStr", "+", "'\\n'", ")", "\n", "os", ".", "system", "(", "'cd tv-avs-eval; chmod +x %s; bash %s; cd -'", "%", "(", "runfile", ",", "runfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.parse_args": [[32, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# Hyper Parameters", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rootpath'", ",", "type", "=", "str", ",", "default", "=", "ROOT_PATH", ",", "\n", "help", "=", "'path to datasets. (default: %s)'", "%", "ROOT_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'trainCollection'", ",", "type", "=", "str", ",", "help", "=", "'train collection'", ")", "\n", "parser", ".", "add_argument", "(", "'valCollection'", ",", "type", "=", "str", ",", "help", "=", "'validation collection'", ")", "\n", "parser", ".", "add_argument", "(", "'testCollection'", ",", "type", "=", "str", ",", "help", "=", "'test collection'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_caption'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of captions of each image/video (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "help", "=", "'overwrite existed file. (default: 0)'", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'dual_encoding'", ",", "help", "=", "'model name. (default: dual_encoding)'", ")", "\n", "parser", ".", "add_argument", "(", "'--concate'", ",", "type", "=", "str", ",", "default", "=", "'full'", ",", "help", "=", "'feature concatenation style. (full|reduced) full=level 1+2+3; reduced=level 2+3'", ")", "\n", "parser", ".", "add_argument", "(", "'--measure'", ",", "type", "=", "str", ",", "default", "=", "'cosine'", ",", "help", "=", "'measure method. (default: cosine)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.2", ",", "type", "=", "float", ",", "help", "=", "'dropout rate (default: 0.2)'", ")", "\n", "# text-side multi-level encoding", "\n", "parser", ".", "add_argument", "(", "'--vocab'", ",", "type", "=", "str", ",", "default", "=", "'word_vocab_5'", ",", "help", "=", "'word vocabulary. (default: word_vocab_5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--word_dim'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'word embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_rnn_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'text rnn encoder size. (default: 1024)'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_kernel_num'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "help", "=", "'number of each kind of text kernel'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_kernel_sizes'", ",", "default", "=", "'2-3-4'", ",", "type", "=", "str", ",", "help", "=", "'dash-separated kernel size to use for text convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--text_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'normalize the text embeddings at last layer'", ")", "\n", "# video-side multi-level encoding", "\n", "parser", ".", "add_argument", "(", "'--visual_feature'", ",", "type", "=", "str", ",", "default", "=", "'resnet-152-img1k-flatten0_outputos'", ",", "help", "=", "'visual feature.'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_rnn_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "help", "=", "'visual rnn encoder size'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_kernel_num'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "help", "=", "'number of each kind of visual kernel'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_kernel_sizes'", ",", "default", "=", "'2-3-4-5'", ",", "type", "=", "str", ",", "help", "=", "'dash-separated kernel size to use for visual convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'normalize the visual embeddings at last layer'", ")", "\n", "# common space learning", "\n", "parser", ".", "add_argument", "(", "'--text_mapping_layers'", ",", "type", "=", "str", ",", "default", "=", "'0-2048'", ",", "help", "=", "'text fully connected layers for common space learning. (default: 0-2048)'", ")", "\n", "parser", ".", "add_argument", "(", "'--visual_mapping_layers'", ",", "type", "=", "str", ",", "default", "=", "'0-2048'", ",", "help", "=", "'visual fully connected layers  for common space learning. (default: 0-2048)'", ")", "\n", "# loss", "\n", "parser", ".", "add_argument", "(", "'--loss_fun'", ",", "type", "=", "str", ",", "default", "=", "'mrl'", ",", "help", "=", "'loss function'", ")", "\n", "parser", ".", "add_argument", "(", "'--margin'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'rank loss margin'", ")", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'all'", ",", "help", "=", "'retrieval direction (all|t2i|i2t)'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_violation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use max instead of sum in the rank loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--cost_style'", ",", "type", "=", "str", ",", "default", "=", "'sum'", ",", "help", "=", "'cost style (sum, mean). (default: sum)'", ")", "\n", "# optimizer", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "help", "=", "'optimizer. (default: rmsprop)'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "default", "=", "0.99", ",", "type", "=", "float", ",", "help", "=", "'learning rate decay rate. (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "2", ",", "help", "=", "'gradient clipping threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_metric'", ",", "default", "=", "'recall'", ",", "type", "=", "str", ",", "help", "=", "'performance metric for validation (mir|recall)'", ")", "\n", "# misc", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Number of training epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Size of a training mini-batch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of data loader workers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--postfix'", ",", "default", "=", "'runs_0'", ",", "help", "=", "'Path to save the model and Tensorboard log.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_step'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Number of steps to print and record the log.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cv_name'", ",", "default", "=", "'cvpr_2019'", ",", "type", "=", "str", ",", "help", "=", "''", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.main": [[88, 293], ["trainer.parse_args", "print", "os.path.join", "print", "basic.common.checkToSkip", "basic.common.checkToSkip", "basic.common.makedirsforfile", "logging.basicConfig", "tensorboard_logger.configure", "map", "map", "os.path.join", "pickle.load", "len", "os.path.join", "pickle.load", "len", "map", "map", "testCollection.startswith", "open", "range", "open.close", "print", "templete.replace.replace", "templete.replace.replace", "templete.replace.replace", "templete.replace.replace", "open().write", "os.system", "json.dumps", "os.path.join", "sys.exit", "os.path.join", "sys.exit", "os.path.join", "parse_args.text_kernel_sizes.split", "parse_args.visual_kernel_sizes.split", "os.path.join", "os.path.join", "basic.bigfile.BigFile", "open", "util.text2vec.get_text_encoder", "open", "os.path.join", "model.get_we_parameter", "parse_args.text_mapping_layers.split", "parse_args.visual_mapping_layers.split", "basic.util.read_dict", "util.get_train_data_loaders", "util.read_video_ids", "util.get_vis_data_loader", "util.get_txt_data_loader", "util.get_data_loaders", "model.get_model", "os.path.isfile", "os.path.join", "print", "print", "trainer.train", "testCollection.startswith", "max", "print", "print", "print", "open.write", "open.flush", "trainer.decay_learning_rate", "open", "fout.write", "templete.replace", "templete.replace", "str", "vars", "NotImplementedError", "os.path.join", "print", "torch.load", "model.load_state_dict", "print", "testCollection.startswith", "print", "trainer.validate_split", "trainer.validate", "trainer.save_checkpoint", "os.path.join", "open().readlines", "open().readlines", "str", "open", "len", "len", "trainer.validate_split", "trainer.validate", "print", "trainer.decay_learning_rate", "str", "len", "len", "trainer.get_learning_rate", "model.state_dict", "open", "open"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.makedirsforfile", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.get_text_encoder", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_we_parameter", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.read_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_train_data_loaders", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.read_video_ids", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_vis_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_txt_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_data_loaders", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_model", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.train", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.decay_learning_rate", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate_split", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.save_checkpoint", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate_split", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.decay_learning_rate", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.get_learning_rate", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.state_dict"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "opt", ")", ",", "indent", "=", "2", ")", ")", "\n", "\n", "rootpath", "=", "opt", ".", "rootpath", "\n", "trainCollection", "=", "opt", ".", "trainCollection", "\n", "valCollection", "=", "opt", ".", "valCollection", "\n", "testCollection", "=", "opt", ".", "testCollection", "\n", "\n", "if", "opt", ".", "loss_fun", "==", "\"mrl\"", "and", "opt", ".", "measure", "==", "\"cosine\"", ":", "\n", "        ", "assert", "opt", ".", "text_norm", "is", "True", "\n", "assert", "opt", ".", "visual_norm", "is", "True", "\n", "\n", "# checkpoint path", "\n", "", "model_info", "=", "'%s_concate_%s_dp_%.1f_measure_%s'", "%", "(", "opt", ".", "model", ",", "opt", ".", "concate", ",", "opt", ".", "dropout", ",", "opt", ".", "measure", ")", "\n", "# text-side multi-level encoding info", "\n", "text_encode_info", "=", "'vocab_%s_word_dim_%s_text_rnn_size_%s_text_norm_%s'", "%", "(", "opt", ".", "vocab", ",", "opt", ".", "word_dim", ",", "opt", ".", "text_rnn_size", ",", "opt", ".", "text_norm", ")", "\n", "text_encode_info", "+=", "\"_kernel_sizes_%s_num_%s\"", "%", "(", "opt", ".", "text_kernel_sizes", ",", "opt", ".", "text_kernel_num", ")", "\n", "# video-side multi-level encoding info", "\n", "visual_encode_info", "=", "'visual_feature_%s_visual_rnn_size_%d_visual_norm_%s'", "%", "(", "opt", ".", "visual_feature", ",", "opt", ".", "visual_rnn_size", ",", "opt", ".", "visual_norm", ")", "\n", "visual_encode_info", "+=", "\"_kernel_sizes_%s_num_%s\"", "%", "(", "opt", ".", "visual_kernel_sizes", ",", "opt", ".", "visual_kernel_num", ")", "\n", "# common space learning info", "\n", "mapping_info", "=", "\"mapping_text_%s_img_%s\"", "%", "(", "opt", ".", "text_mapping_layers", ",", "opt", ".", "visual_mapping_layers", ")", "\n", "loss_info", "=", "'loss_func_%s_margin_%s_direction_%s_max_violation_%s_cost_style_%s'", "%", "(", "opt", ".", "loss_fun", ",", "opt", ".", "margin", ",", "opt", ".", "direction", ",", "opt", ".", "max_violation", ",", "opt", ".", "cost_style", ")", "\n", "optimizer_info", "=", "'optimizer_%s_lr_%s_decay_%.2f_grad_clip_%.1f_val_metric_%s'", "%", "(", "opt", ".", "optimizer", ",", "opt", ".", "learning_rate", ",", "opt", ".", "lr_decay_rate", ",", "opt", ".", "grad_clip", ",", "opt", ".", "val_metric", ")", "\n", "\n", "opt", ".", "logger_name", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "trainCollection", ",", "opt", ".", "cv_name", ",", "valCollection", ",", "model_info", ",", "text_encode_info", ",", "\n", "visual_encode_info", ",", "mapping_info", ",", "loss_info", ",", "optimizer_info", ",", "opt", ".", "postfix", ")", "\n", "print", "(", "opt", ".", "logger_name", ")", "\n", "\n", "if", "checkToSkip", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "'model_best.pth.tar'", ")", ",", "opt", ".", "overwrite", ")", ":", "\n", "        ", "sys", ".", "exit", "(", "0", ")", "\n", "", "if", "checkToSkip", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "'val_metric.txt'", ")", ",", "opt", ".", "overwrite", ")", ":", "\n", "        ", "sys", ".", "exit", "(", "0", ")", "\n", "", "makedirsforfile", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "'val_metric.txt'", ")", ")", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s %(message)s'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "tb_logger", ".", "configure", "(", "opt", ".", "logger_name", ",", "flush_secs", "=", "5", ")", "\n", "\n", "\n", "opt", ".", "text_kernel_sizes", "=", "map", "(", "int", ",", "opt", ".", "text_kernel_sizes", ".", "split", "(", "'-'", ")", ")", "\n", "opt", ".", "visual_kernel_sizes", "=", "map", "(", "int", ",", "opt", ".", "visual_kernel_sizes", ".", "split", "(", "'-'", ")", ")", "\n", "# collections: trian, val", "\n", "collections", "=", "{", "'train'", ":", "trainCollection", ",", "'val'", ":", "valCollection", "}", "\n", "cap_file", "=", "{", "'train'", ":", "'%s.caption.txt'", "%", "trainCollection", ",", "\n", "'val'", ":", "'%s.caption.txt'", "%", "valCollection", "}", "\n", "# caption", "\n", "caption_files", "=", "{", "x", ":", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collections", "[", "x", "]", ",", "'TextData'", ",", "cap_file", "[", "x", "]", ")", "\n", "for", "x", "in", "collections", "}", "\n", "# Load visual features", "\n", "visual_feat_path", "=", "{", "x", ":", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collections", "[", "x", "]", ",", "'FeatureData'", ",", "opt", ".", "visual_feature", ")", "\n", "for", "x", "in", "collections", "}", "\n", "visual_feats", "=", "{", "x", ":", "BigFile", "(", "visual_feat_path", "[", "x", "]", ")", "for", "x", "in", "visual_feat_path", "}", "\n", "opt", ".", "visual_feat_dim", "=", "visual_feats", "[", "'train'", "]", ".", "ndims", "\n", "\n", "# set bow vocabulary and encoding", "\n", "bow_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "opt", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'bow'", ",", "opt", ".", "vocab", "+", "'.pkl'", ")", "\n", "bow_vocab", "=", "pickle", ".", "load", "(", "open", "(", "bow_vocab_file", ",", "'rb'", ")", ")", "\n", "bow2vec", "=", "get_text_encoder", "(", "'bow'", ")", "(", "bow_vocab", ")", "\n", "opt", ".", "bow_vocab_size", "=", "len", "(", "bow_vocab", ")", "\n", "\n", "# set rnn vocabulary ", "\n", "rnn_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "opt", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'rnn'", ",", "opt", ".", "vocab", "+", "'.pkl'", ")", "\n", "rnn_vocab", "=", "pickle", ".", "load", "(", "open", "(", "rnn_vocab_file", ",", "'rb'", ")", ")", "\n", "opt", ".", "vocab_size", "=", "len", "(", "rnn_vocab", ")", "\n", "\n", "# initialize word embedding", "\n", "opt", ".", "we_parameter", "=", "None", "\n", "if", "opt", ".", "word_dim", "==", "500", ":", "\n", "        ", "w2v_data_path", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "\"word2vec\"", ",", "'flickr'", ",", "'vec500flickr30m'", ")", "\n", "opt", ".", "we_parameter", "=", "get_we_parameter", "(", "rnn_vocab", ",", "w2v_data_path", ")", "\n", "\n", "# mapping layer structure", "\n", "", "opt", ".", "text_mapping_layers", "=", "map", "(", "int", ",", "opt", ".", "text_mapping_layers", ".", "split", "(", "'-'", ")", ")", "\n", "opt", ".", "visual_mapping_layers", "=", "map", "(", "int", ",", "opt", ".", "visual_mapping_layers", ".", "split", "(", "'-'", ")", ")", "\n", "if", "opt", ".", "concate", "==", "'full'", ":", "\n", "        ", "opt", ".", "text_mapping_layers", "[", "0", "]", "=", "opt", ".", "bow_vocab_size", "+", "opt", ".", "text_rnn_size", "*", "2", "+", "opt", ".", "text_kernel_num", "*", "len", "(", "opt", ".", "text_kernel_sizes", ")", "\n", "opt", ".", "visual_mapping_layers", "[", "0", "]", "=", "opt", ".", "visual_feat_dim", "+", "opt", ".", "visual_rnn_size", "*", "2", "+", "opt", ".", "visual_kernel_num", "*", "len", "(", "opt", ".", "visual_kernel_sizes", ")", "\n", "", "elif", "opt", ".", "concate", "==", "'reduced'", ":", "\n", "        ", "opt", ".", "text_mapping_layers", "[", "0", "]", "=", "opt", ".", "text_rnn_size", "*", "2", "+", "opt", ".", "text_kernel_num", "*", "len", "(", "opt", ".", "text_kernel_sizes", ")", "\n", "opt", ".", "visual_mapping_layers", "[", "0", "]", "=", "opt", ".", "visual_rnn_size", "*", "2", "+", "opt", ".", "visual_kernel_num", "*", "len", "(", "opt", ".", "visual_kernel_sizes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model %s not implemented'", "%", "opt", ".", "model", ")", "\n", "\n", "\n", "# set data loader", "\n", "", "video2frames", "=", "{", "x", ":", "read_dict", "(", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collections", "[", "x", "]", ",", "'FeatureData'", ",", "opt", ".", "visual_feature", ",", "'video2frames.txt'", ")", ")", "\n", "for", "x", "in", "collections", "}", "\n", "if", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "        ", "data_loaders", "=", "data", ".", "get_train_data_loaders", "(", "\n", "caption_files", ",", "visual_feats", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "opt", ".", "n_caption", ",", "video2frames", "=", "video2frames", ")", "\n", "val_video_ids_list", "=", "data", ".", "read_video_ids", "(", "caption_files", "[", "'val'", "]", ")", "\n", "val_vid_data_loader", "=", "data", ".", "get_vis_data_loader", "(", "visual_feats", "[", "'val'", "]", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "video2frames", "[", "'val'", "]", ",", "video_ids", "=", "val_video_ids_list", ")", "\n", "val_text_data_loader", "=", "data", ".", "get_txt_data_loader", "(", "caption_files", "[", "'val'", "]", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ")", "\n", "", "else", ":", "\n", "        ", "data_loaders", "=", "data", ".", "get_data_loaders", "(", "\n", "caption_files", ",", "visual_feats", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "opt", ".", "n_caption", ",", "video2frames", "=", "video2frames", ")", "\n", "\n", "\n", "# Construct the model", "\n", "", "model", "=", "get_model", "(", "opt", ".", "model", ")", "(", "opt", ")", "\n", "opt", ".", "we_parameter", "=", "None", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "opt", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "opt", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "opt", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_rsum", "=", "checkpoint", "[", "'best_rsum'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "# Eiters is used to show logs as the continuation of another", "\n", "# training", "\n", "model", ".", "Eiters", "=", "checkpoint", "[", "'Eiters'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}, best_rsum {})\"", "\n", ".", "format", "(", "opt", ".", "resume", ",", "start_epoch", ",", "best_rsum", ")", ")", "\n", "if", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "                ", "validate_split", "(", "opt", ",", "val_vid_data_loader", ",", "val_text_data_loader", ",", "model", ",", "measure", "=", "opt", ".", "measure", ")", "\n", "", "else", ":", "\n", "                ", "validate", "(", "opt", ",", "data_loaders", "[", "'val'", "]", ",", "model", ",", "measure", "=", "opt", ".", "measure", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "opt", ".", "resume", ")", ")", "\n", "\n", "\n", "# Train the Model", "\n", "", "", "best_rsum", "=", "0", "\n", "no_impr_counter", "=", "0", "\n", "lr_counter", "=", "0", "\n", "best_epoch", "=", "None", "\n", "fout_val_metric_hist", "=", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "'val_metric_hist.txt'", ")", ",", "'w'", ")", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "num_epochs", ")", ":", "\n", "        ", "print", "(", "'Epoch[{0} / {1}] LR: {2}'", ".", "format", "(", "epoch", ",", "opt", ".", "num_epochs", ",", "get_learning_rate", "(", "model", ".", "optimizer", ")", "[", "0", "]", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "# train for one epoch", "\n", "train", "(", "opt", ",", "data_loaders", "[", "'train'", "]", ",", "model", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "            ", "rsum", "=", "validate_split", "(", "opt", ",", "val_vid_data_loader", ",", "val_text_data_loader", ",", "model", ",", "measure", "=", "opt", ".", "measure", ")", "\n", "", "else", ":", "\n", "            ", "rsum", "=", "validate", "(", "opt", ",", "data_loaders", "[", "'val'", "]", ",", "model", ",", "measure", "=", "opt", ".", "measure", ")", "\n", "\n", "\n", "# remember best R@ sum and save checkpoint", "\n", "", "is_best", "=", "rsum", ">", "best_rsum", "\n", "best_rsum", "=", "max", "(", "rsum", ",", "best_rsum", ")", "\n", "print", "(", "' * Current perf: {}'", ".", "format", "(", "rsum", ")", ")", "\n", "print", "(", "' * Best perf: {}'", ".", "format", "(", "best_rsum", ")", ")", "\n", "print", "(", "''", ")", "\n", "fout_val_metric_hist", ".", "write", "(", "'epoch_%d: %f\\n'", "%", "(", "epoch", ",", "rsum", ")", ")", "\n", "fout_val_metric_hist", ".", "flush", "(", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_rsum'", ":", "best_rsum", ",", "\n", "'opt'", ":", "opt", ",", "\n", "'Eiters'", ":", "model", ".", "Eiters", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "'checkpoint_epoch_%s.pth.tar'", "%", "epoch", ",", "prefix", "=", "opt", ".", "logger_name", "+", "'/'", ",", "best_epoch", "=", "best_epoch", ")", "\n", "best_epoch", "=", "epoch", "\n", "\n", "", "lr_counter", "+=", "1", "\n", "decay_learning_rate", "(", "opt", ",", "model", ".", "optimizer", ",", "opt", ".", "lr_decay_rate", ")", "\n", "if", "not", "is_best", ":", "\n", "# Early stop occurs if the validation performance does not improve in ten consecutive epochs", "\n", "            ", "no_impr_counter", "+=", "1", "\n", "if", "no_impr_counter", ">", "10", ":", "\n", "                ", "print", "(", "'Early stopping happended.\\n'", ")", "\n", "break", "\n", "\n", "# When the validation performance decreased after an epoch,", "\n", "# we divide the learning rate by 2 and continue training;", "\n", "# but we use each learning rate for at least 3 epochs.", "\n", "", "if", "lr_counter", ">", "2", ":", "\n", "                ", "decay_learning_rate", "(", "opt", ",", "model", ".", "optimizer", ",", "0.5", ")", "\n", "lr_counter", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "no_impr_counter", "=", "0", "\n", "\n", "", "", "fout_val_metric_hist", ".", "close", "(", ")", "\n", "\n", "print", "(", "'best performance on validation: {}\\n'", ".", "format", "(", "best_rsum", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "'val_metric.txt'", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "'best performance on validation: '", "+", "str", "(", "best_rsum", ")", ")", "\n", "\n", "# generate evaluation shell script", "\n", "", "if", "testCollection", "==", "'iacc.3'", ":", "\n", "        ", "templete", "=", "''", ".", "join", "(", "open", "(", "'util/TEMPLATE_do_predict.sh'", ")", ".", "readlines", "(", ")", ")", "\n", "striptStr", "=", "templete", ".", "replace", "(", "'@@@query_sets@@@'", ",", "'tv16.avs.txt,tv17.avs.txt,tv18.avs.txt'", ")", "\n", "", "else", ":", "\n", "        ", "templete", "=", "''", ".", "join", "(", "open", "(", "'util/TEMPLATE_do_test.sh'", ")", ".", "readlines", "(", ")", ")", "\n", "striptStr", "=", "templete", ".", "replace", "(", "'@@@n_caption@@@'", ",", "str", "(", "opt", ".", "n_caption", ")", ")", "\n", "", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@rootpath@@@'", ",", "rootpath", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@testCollection@@@'", ",", "testCollection", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@logger_name@@@'", ",", "opt", ".", "logger_name", ")", "\n", "striptStr", "=", "striptStr", ".", "replace", "(", "'@@@overwrite@@@'", ",", "str", "(", "opt", ".", "overwrite", ")", ")", "\n", "\n", "# perform evaluation on test set", "\n", "runfile", "=", "'do_test_%s_%s.sh'", "%", "(", "opt", ".", "model", ",", "testCollection", ")", "\n", "open", "(", "runfile", ",", "'w'", ")", ".", "write", "(", "striptStr", "+", "'\\n'", ")", "\n", "os", ".", "system", "(", "'chmod +x %s'", "%", "runfile", ")", "\n", "# os.system('./'+runfile)", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.train": [[296, 330], ["basic.util.AverageMeter", "basic.util.AverageMeter", "basic.util.LogCollector", "model.train_start", "basic.generic_utils.Progbar", "time.time", "enumerate", "len", "basic.util.AverageMeter.update", "model.train_emb", "basic.generic_utils.Progbar.add", "basic.util.AverageMeter.update", "time.time", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "model.logger.tb_log", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.train_start", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.train_emb", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.LogCollector.tb_log"], ["", "def", "train", "(", "opt", ",", "train_loader", ",", "model", ",", "epoch", ")", ":", "\n", "# average meters to record the training statistics", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "train_logger", "=", "LogCollector", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train_start", "(", ")", "\n", "\n", "progbar", "=", "Progbar", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# make sure train logger is used", "\n", "model", ".", "logger", "=", "train_logger", "\n", "\n", "# Update the model", "\n", "b_size", ",", "loss", "=", "model", ".", "train_emb", "(", "*", "train_data", ")", "\n", "\n", "progbar", ".", "add", "(", "b_size", ",", "values", "=", "[", "(", "'loss'", ",", "loss", ")", "]", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Record logs in tensorboard", "\n", "tb_logger", ".", "log_value", "(", "'epoch'", ",", "epoch", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'step'", ",", "i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'batch_time'", ",", "batch_time", ".", "val", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'data_time'", ",", "data_time", ".", "val", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "model", ".", "logger", ".", "tb_log", "(", "tb_logger", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate": [[332, 406], ["evaluation.encode_data", "set", "evaluation.cal_error", "tensorboard_logger.log_value", "feature_mask.append", "set.add", "opt.testCollection.startswith", "print", "print", "print", "print", "opt.testCollection.startswith", "print", "print", "print", "print", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "enumerate", "evaluation.t2i_varied", "evaluation.t2i", "evaluation.i2t_varied", "evaluation.i2t", "evaluation.i2t_map", "evaluation.t2i_map", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "print", "print", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_data", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.cal_error", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_map", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_map"], ["", "", "def", "validate", "(", "opt", ",", "val_loader", ",", "model", ",", "measure", "=", "'cosine'", ")", ":", "\n", "# compute the encoding for all the validation video and captions", "\n", "    ", "video_embs", ",", "cap_embs", ",", "video_ids", ",", "caption_ids", "=", "evaluation", ".", "encode_data", "(", "model", ",", "val_loader", ",", "opt", ".", "log_step", ",", "logging", ".", "info", ")", "\n", "\n", "# we load data as video-sentence pairs", "\n", "# but we only need to forward each video once for evaluation", "\n", "# so we get the video set and mask out same videos with feature_mask", "\n", "feature_mask", "=", "[", "]", "\n", "evaluate_videos", "=", "set", "(", ")", "\n", "for", "video_id", "in", "video_ids", ":", "\n", "        ", "feature_mask", ".", "append", "(", "video_id", "not", "in", "evaluate_videos", ")", "\n", "evaluate_videos", ".", "add", "(", "video_id", ")", "\n", "", "video_embs", "=", "video_embs", "[", "feature_mask", "]", "\n", "video_ids", "=", "[", "x", "for", "idx", ",", "x", "in", "enumerate", "(", "video_ids", ")", "if", "feature_mask", "[", "idx", "]", "is", "True", "]", "\n", "\n", "c2i_all_errors", "=", "evaluation", ".", "cal_error", "(", "video_embs", ",", "cap_embs", ",", "measure", ")", "\n", "if", "opt", ".", "val_metric", "==", "\"recall\"", ":", "\n", "\n", "# video retrieval", "\n", "        ", "if", "opt", ".", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "            ", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ",", "t2i_map_score", ")", "=", "evaluation", ".", "t2i_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "", "else", ":", "\n", "            ", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ")", "=", "evaluation", ".", "t2i", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "", "print", "(", "\" * Text to video:\"", ")", "\n", "print", "(", "\" * r_1_5_10: {}\"", ".", "format", "(", "[", "round", "(", "r1i", ",", "3", ")", ",", "round", "(", "r5i", ",", "3", ")", ",", "round", "(", "r10i", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "medri", ",", "3", ")", ",", "round", "(", "meanri", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n", "# caption retrieval", "\n", "if", "opt", ".", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "            ", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ",", "i2t_map_score", ")", "=", "evaluation", ".", "i2t_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "", "else", ":", "\n", "            ", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ")", "=", "evaluation", ".", "i2t", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "", "print", "(", "\" * Video to text:\"", ")", "\n", "print", "(", "\" * r_1_5_10: {}\"", ".", "format", "(", "[", "round", "(", "r1", ",", "3", ")", ",", "round", "(", "r5", ",", "3", ")", ",", "round", "(", "r10", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "medr", ",", "3", ")", ",", "round", "(", "meanr", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n", "# record metrics in tensorboard", "\n", "tb_logger", ".", "log_value", "(", "'r1'", ",", "r1", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r5'", ",", "r5", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r10'", ",", "r10", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'medr'", ",", "medr", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'meanr'", ",", "meanr", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r1i'", ",", "r1i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r5i'", ",", "r5i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r10i'", ",", "r10i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'medri'", ",", "medri", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'meanri'", ",", "meanri", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "\n", "\n", "", "elif", "opt", ".", "val_metric", "==", "\"map\"", ":", "\n", "        ", "i2t_map_score", "=", "evaluation", ".", "i2t_map", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "t2i_map_score", "=", "evaluation", ".", "t2i_map", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "tb_logger", ".", "log_value", "(", "'i2t_map'", ",", "i2t_map_score", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'t2i_map'", ",", "t2i_map_score", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "print", "(", "'i2t_map'", ",", "i2t_map_score", ")", "\n", "print", "(", "'t2i_map'", ",", "t2i_map_score", ")", "\n", "\n", "", "currscore", "=", "0", "\n", "if", "opt", ".", "val_metric", "==", "\"recall\"", ":", "\n", "        ", "if", "opt", ".", "direction", "==", "'i2t'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "(", "r1", "+", "r5", "+", "r10", ")", "\n", "", "if", "opt", ".", "direction", "==", "'t2i'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "(", "r1i", "+", "r5i", "+", "r10i", ")", "\n", "", "", "elif", "opt", ".", "val_metric", "==", "\"map\"", ":", "\n", "        ", "if", "opt", ".", "direction", "==", "'i2t'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "i2t_map_score", "\n", "", "if", "opt", ".", "direction", "==", "'t2i'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "t2i_map_score", "\n", "\n", "", "", "tb_logger", ".", "log_value", "(", "'rsum'", ",", "currscore", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "\n", "return", "currscore", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.validate_split": [[408, 474], ["model.val_start", "evaluation.encode_text_or_vid", "evaluation.encode_text_or_vid", "evaluation.cal_error", "tensorboard_logger.log_value", "opt.testCollection.startswith", "print", "print", "print", "print", "opt.testCollection.startswith", "print", "print", "print", "print", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "evaluation.t2i_varied", "evaluation.t2i", "evaluation.i2t_varied", "evaluation.i2t", "evaluation.i2t_map", "evaluation.t2i_map", "tensorboard_logger.log_value", "tensorboard_logger.log_value", "print", "print", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.val_start", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_text_or_vid", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_text_or_vid", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.cal_error", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_map", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_map"], ["", "def", "validate_split", "(", "opt", ",", "vid_data_loader", ",", "text_data_loader", ",", "model", ",", "measure", "=", "'cosine'", ")", ":", "\n", "# compute the encoding for all the validation video and captions", "\n", "\n", "    ", "model", ".", "val_start", "(", ")", "\n", "video_embs", ",", "video_ids", "=", "evaluation", ".", "encode_text_or_vid", "(", "model", ".", "embed_vis", ",", "vid_data_loader", ")", "\n", "cap_embs", ",", "caption_ids", "=", "evaluation", ".", "encode_text_or_vid", "(", "model", ".", "embed_txt", ",", "text_data_loader", ")", "\n", "\n", "c2i_all_errors", "=", "evaluation", ".", "cal_error", "(", "video_embs", ",", "cap_embs", ",", "measure", ")", "\n", "if", "opt", ".", "val_metric", "==", "\"recall\"", ":", "\n", "\n", "# video retrieval", "\n", "        ", "if", "opt", ".", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "            ", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ",", "t2i_map_score", ")", "=", "evaluation", ".", "t2i_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "", "else", ":", "\n", "            ", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ")", "=", "evaluation", ".", "t2i", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "", "print", "(", "\" * Text to video:\"", ")", "\n", "print", "(", "\" * r_1_5_10: {}\"", ".", "format", "(", "[", "round", "(", "r1i", ",", "3", ")", ",", "round", "(", "r5i", ",", "3", ")", ",", "round", "(", "r10i", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "medri", ",", "3", ")", ",", "round", "(", "meanri", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n", "# caption retrieval", "\n", "if", "opt", ".", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "\n", "            ", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ",", "i2t_map_score", ")", "=", "evaluation", ".", "i2t_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "", "else", ":", "\n", "            ", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ")", "=", "evaluation", ".", "i2t", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "", "print", "(", "\" * Video to text:\"", ")", "\n", "print", "(", "\" * r_1_5_10: {}\"", ".", "format", "(", "[", "round", "(", "r1", ",", "3", ")", ",", "round", "(", "r5", ",", "3", ")", ",", "round", "(", "r10", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "medr", ",", "3", ")", ",", "round", "(", "meanr", ",", "3", ")", "]", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n", "# record metrics in tensorboard", "\n", "tb_logger", ".", "log_value", "(", "'r1'", ",", "r1", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r5'", ",", "r5", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r10'", ",", "r10", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'medr'", ",", "medr", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'meanr'", ",", "meanr", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r1i'", ",", "r1i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r5i'", ",", "r5i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'r10i'", ",", "r10i", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'medri'", ",", "medri", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'meanri'", ",", "meanri", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "\n", "\n", "", "elif", "opt", ".", "val_metric", "==", "\"map\"", ":", "\n", "        ", "i2t_map_score", "=", "evaluation", ".", "i2t_map", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "t2i_map_score", "=", "evaluation", ".", "t2i_map", "(", "c2i_all_errors", ",", "n_caption", "=", "opt", ".", "n_caption", ")", "\n", "tb_logger", ".", "log_value", "(", "'i2t_map'", ",", "i2t_map_score", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "tb_logger", ".", "log_value", "(", "'t2i_map'", ",", "t2i_map_score", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "print", "(", "'i2t_map'", ",", "i2t_map_score", ")", "\n", "print", "(", "'t2i_map'", ",", "t2i_map_score", ")", "\n", "\n", "", "currscore", "=", "0", "\n", "if", "opt", ".", "val_metric", "==", "\"recall\"", ":", "\n", "        ", "if", "opt", ".", "direction", "==", "'i2t'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "(", "r1", "+", "r5", "+", "r10", ")", "\n", "", "if", "opt", ".", "direction", "==", "'t2i'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "(", "r1i", "+", "r5i", "+", "r10i", ")", "\n", "", "", "elif", "opt", ".", "val_metric", "==", "\"map\"", ":", "\n", "        ", "if", "opt", ".", "direction", "==", "'i2t'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "i2t_map_score", "\n", "", "if", "opt", ".", "direction", "==", "'t2i'", "or", "opt", ".", "direction", "==", "'all'", ":", "\n", "            ", "currscore", "+=", "t2i_map_score", "\n", "\n", "", "", "tb_logger", ".", "log_value", "(", "'rsum'", ",", "currscore", ",", "step", "=", "model", ".", "Eiters", ")", "\n", "\n", "return", "currscore", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.save_checkpoint": [[477, 484], ["torch.save", "shutil.copyfile", "os.remove"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "prefix", "=", "''", ",", "best_epoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"save checkpoint at specific path\"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "prefix", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "prefix", "+", "filename", ",", "prefix", "+", "'model_best.pth.tar'", ")", "\n", "", "if", "best_epoch", "is", "not", "None", ":", "\n", "        ", "os", ".", "remove", "(", "prefix", "+", "'checkpoint_epoch_%s.pth.tar'", "%", "best_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.decay_learning_rate": [[485, 489], ["None"], "function", ["None"], ["", "", "def", "decay_learning_rate", "(", "opt", ",", "optimizer", ",", "decay", ")", ":", "\n", "    ", "\"\"\"decay learning rate to the last LR\"\"\"", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.get_learning_rate": [[490, 496], ["lr_list.append"], "function", ["None"], ["", "", "def", "get_learning_rate", "(", "optimizer", ")", ":", "\n", "    ", "\"\"\"Return learning rate\"\"\"", "\n", "lr_list", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "lr_list", ".", "append", "(", "param_group", "[", "'lr'", "]", ")", "\n", "", "return", "lr_list", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.accuracy": [[497, 511], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.loss.TripletLoss.__init__": [[36, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0", ",", "measure", "=", "False", ",", "max_violation", "=", "False", ",", "cost_style", "=", "'sum'", ",", "direction", "=", "'all'", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "cost_style", "=", "cost_style", "\n", "self", ".", "direction", "=", "direction", "\n", "if", "measure", "==", "'order'", ":", "\n", "            ", "self", ".", "sim", "=", "order_sim", "\n", "", "elif", "measure", "==", "'euclidean'", ":", "\n", "            ", "self", ".", "sim", "=", "euclidean_sim", "\n", "", "else", ":", "\n", "            ", "self", ".", "sim", "=", "cosine_sim", "\n", "\n", "", "self", ".", "max_violation", "=", "max_violation", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.loss.TripletLoss.forward": [[50, 92], ["loss.TripletLoss.sim", "loss.TripletLoss.diag().view", "loss.TripletLoss.diag().view.expand_as", "loss.TripletLoss.diag().view.t().expand_as", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "im.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "I.cuda.cuda.cuda", "torch.autograd.Variable().cuda.masked_fill_", "torch.autograd.Variable().cuda.masked_fill_", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "loss.TripletLoss.diag", "loss.TripletLoss.diag().view.t", "loss.TripletLoss.size", "torch.autograd.Variable().cuda.sum", "torch.autograd.Variable().cuda.sum", "torch.autograd.Variable().cuda.mean", "torch.autograd.Variable().cuda.mean", "torch.autograd.Variable().cuda.max", "torch.autograd.Variable().cuda.max", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "im", ")", ":", "\n", "# compute image-sentence score matrix", "\n", "        ", "scores", "=", "self", ".", "sim", "(", "im", ",", "s", ")", "\n", "diagonal", "=", "scores", ".", "diag", "(", ")", ".", "view", "(", "im", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "d1", "=", "diagonal", ".", "expand_as", "(", "scores", ")", "\n", "d2", "=", "diagonal", ".", "t", "(", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "# clear diagonals", "\n", "mask", "=", "torch", ".", "eye", "(", "scores", ".", "size", "(", "0", ")", ")", ">", ".5", "\n", "I", "=", "Variable", "(", "mask", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "\n", "", "cost_s", "=", "None", "\n", "cost_im", "=", "None", "\n", "# compare every diagonal score to scores in its column", "\n", "if", "self", ".", "direction", "in", "[", "'i2t'", ",", "'all'", "]", ":", "\n", "# caption retrieval", "\n", "            ", "cost_s", "=", "(", "self", ".", "margin", "+", "scores", "-", "d1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "cost_s", "=", "cost_s", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "# compare every diagonal score to scores in its row", "\n", "", "if", "self", ".", "direction", "in", "[", "'t2i'", ",", "'all'", "]", ":", "\n", "# image retrieval", "\n", "            ", "cost_im", "=", "(", "self", ".", "margin", "+", "scores", "-", "d2", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "cost_im", "=", "cost_im", ".", "masked_fill_", "(", "I", ",", "0", ")", "\n", "\n", "# keep the maximum violating negative for each query", "\n", "", "if", "self", ".", "max_violation", ":", "\n", "            ", "if", "cost_s", "is", "not", "None", ":", "\n", "                ", "cost_s", "=", "cost_s", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "if", "cost_im", "is", "not", "None", ":", "\n", "                ", "cost_im", "=", "cost_im", ".", "max", "(", "0", ")", "[", "0", "]", "\n", "\n", "", "", "if", "cost_s", "is", "None", ":", "\n", "            ", "cost_s", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "if", "cost_im", "is", "None", ":", "\n", "            ", "cost_im", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "cost_style", "==", "'sum'", ":", "\n", "            ", "return", "cost_s", ".", "sum", "(", ")", "+", "cost_im", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "cost_s", ".", "mean", "(", ")", "+", "cost_im", ".", "mean", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.loss.cosine_sim": [[7, 11], ["im.mm", "s.t"], "function", ["None"], ["def", "cosine_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Cosine similarity between all the image and sentence pairs\n    \"\"\"", "\n", "return", "im", ".", "mm", "(", "s", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.loss.order_sim": [[13, 20], ["s.unsqueeze().expand", "im.unsqueeze().expand", "YmX.clamp().pow().sum().sqrt().t", "s.size", "im.size", "s.size", "s.size", "im.size", "s.size", "s.unsqueeze", "im.unsqueeze", "YmX.clamp().pow().sum().sqrt", "YmX.clamp().pow().sum", "YmX.clamp().pow", "YmX.clamp"], "function", ["None"], ["", "def", "order_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Order embeddings similarity measure $max(0, s-im)$\n    \"\"\"", "\n", "YmX", "=", "(", "s", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", "\n", "-", "im", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", ")", "\n", "score", "=", "-", "YmX", ".", "clamp", "(", "min", "=", "0", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "sqrt", "(", ")", ".", "t", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.loss.euclidean_sim": [[22, 29], ["s.unsqueeze().expand", "im.unsqueeze().expand", "YmX.pow().sum().t", "s.size", "im.size", "s.size", "s.size", "im.size", "s.size", "s.unsqueeze", "im.unsqueeze", "YmX.pow().sum", "YmX.pow"], "function", ["None"], ["", "def", "euclidean_sim", "(", "im", ",", "s", ")", ":", "\n", "    ", "\"\"\"Order embeddings similarity measure $max(0, s-im)$\n    \"\"\"", "\n", "YmX", "=", "(", "s", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", "\n", "-", "im", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "s", ".", "size", "(", "0", ")", ",", "im", ".", "size", "(", "0", ")", ",", "s", ".", "size", "(", "1", ")", ")", ")", "\n", "score", "=", "-", "YmX", ".", "pow", "(", "2", ")", ".", "sum", "(", "2", ")", ".", "t", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.MFC.__init__": [[53, 74], ["torch.Module.__init__", "len", "model.MFC.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Text_multilevel_encoding.init_weights"], ["def", "__init__", "(", "self", ",", "fc_layers", ",", "dropout", ",", "have_dp", "=", "True", ",", "have_bn", "=", "False", ",", "have_last_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "MFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# fc layers", "\n", "self", ".", "n_fc", "=", "len", "(", "fc_layers", ")", "\n", "if", "self", ".", "n_fc", ">", "1", ":", "\n", "            ", "if", "self", ".", "n_fc", ">", "1", ":", "\n", "                ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "fc_layers", "[", "0", "]", ",", "fc_layers", "[", "1", "]", ")", "\n", "\n", "# dropout", "\n", "", "self", ".", "have_dp", "=", "have_dp", "\n", "if", "self", ".", "have_dp", ":", "\n", "                ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# batch normalization", "\n", "", "self", ".", "have_bn", "=", "have_bn", "\n", "self", ".", "have_last_bn", "=", "have_last_bn", "\n", "if", "self", ".", "have_bn", ":", "\n", "                ", "if", "self", ".", "n_fc", "==", "2", "and", "self", ".", "have_last_bn", ":", "\n", "                    ", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm1d", "(", "fc_layers", "[", "1", "]", ")", "\n", "\n", "", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.MFC.init_weights": [[75, 80], ["model.xavier_init_fc"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.xavier_init_fc"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Xavier initialization for the fully connected layer\n        \"\"\"", "\n", "if", "self", ".", "n_fc", ">", "1", ":", "\n", "            ", "xavier_init_fc", "(", "self", ".", "fc1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.MFC.forward": [[81, 95], ["model.MFC.fc1", "model.MFC.bn_1", "model.MFC.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "n_fc", "<=", "1", ":", "\n", "            ", "features", "=", "inputs", "\n", "\n", "", "elif", "self", ".", "n_fc", "==", "2", ":", "\n", "            ", "features", "=", "self", ".", "fc1", "(", "inputs", ")", "\n", "# batch noarmalization", "\n", "if", "self", ".", "have_bn", "and", "self", ".", "have_last_bn", ":", "\n", "                ", "features", "=", "self", ".", "bn_1", "(", "features", ")", "\n", "", "if", "self", ".", "have_dp", ":", "\n", "                ", "features", "=", "self", ".", "dropout", "(", "features", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Video_multilevel_encoding.__init__": [[102, 121], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.MFC", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Video_multilevel_encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn_output_size", "=", "opt", ".", "visual_rnn_size", "*", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "opt", ".", "dropout", ")", "\n", "self", ".", "visual_norm", "=", "opt", ".", "visual_norm", "\n", "self", ".", "concate", "=", "opt", ".", "concate", "\n", "\n", "# visual bidirectional rnn encoder", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "opt", ".", "visual_feat_dim", ",", "opt", ".", "visual_rnn_size", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# visual 1-d convolutional network", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "opt", ".", "visual_kernel_num", ",", "(", "window_size", ",", "self", ".", "rnn_output_size", ")", ",", "padding", "=", "(", "window_size", "-", "1", ",", "0", ")", ")", "\n", "for", "window_size", "in", "opt", ".", "visual_kernel_sizes", "\n", "]", ")", "\n", "\n", "# visual mapping", "\n", "self", ".", "visual_mapping", "=", "MFC", "(", "opt", ".", "visual_mapping_layers", ",", "opt", ".", "dropout", ",", "have_bn", "=", "True", ",", "have_last_bn", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Video_multilevel_encoding.forward": [[123, 160], ["model.Video_multilevel_encoding.rnn", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "enumerate", "model.Video_multilevel_encoding.dropout", "vidoes_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "gru_init_out.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Video_multilevel_encoding.dropout", "model.Video_multilevel_encoding.visual_mapping", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "gru_init_out.size", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.l2norm", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "vidoes_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "gru_init_out.size", "conv", "i.size"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.l2norm"], ["", "def", "forward", "(", "self", ",", "videos", ")", ":", "\n", "        ", "\"\"\"Extract video feature vectors.\"\"\"", "\n", "\n", "videos", ",", "videos_origin", ",", "lengths", ",", "vidoes_mask", "=", "videos", "\n", "\n", "# Level 1. Global Encoding by Mean Pooling According", "\n", "org_out", "=", "videos_origin", "\n", "\n", "# Level 2. Temporal-Aware Encoding by biGRU", "\n", "gru_init_out", ",", "_", "=", "self", ".", "rnn", "(", "videos", ")", "\n", "mean_gru", "=", "Variable", "(", "torch", ".", "zeros", "(", "gru_init_out", ".", "size", "(", "0", ")", ",", "self", ".", "rnn_output_size", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "gru_init_out", ")", ":", "\n", "            ", "mean_gru", "[", "i", "]", "=", "torch", ".", "mean", "(", "batch", "[", ":", "lengths", "[", "i", "]", "]", ",", "0", ")", "\n", "", "gru_out", "=", "mean_gru", "\n", "gru_out", "=", "self", ".", "dropout", "(", "gru_out", ")", "\n", "\n", "# Level 3. Local-Enhanced Encoding by biGRU-CNN", "\n", "vidoes_mask", "=", "vidoes_mask", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "gru_init_out", ".", "size", "(", "2", ")", ")", "# (N,C,F1)", "\n", "gru_init_out", "=", "gru_init_out", "*", "vidoes_mask", "\n", "con_out", "=", "gru_init_out", ".", "unsqueeze", "(", "1", ")", "\n", "con_out", "=", "[", "F", ".", "relu", "(", "conv", "(", "con_out", ")", ")", ".", "squeeze", "(", "3", ")", "for", "conv", "in", "self", ".", "convs1", "]", "\n", "con_out", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "con_out", "]", "\n", "con_out", "=", "torch", ".", "cat", "(", "con_out", ",", "1", ")", "\n", "con_out", "=", "self", ".", "dropout", "(", "con_out", ")", "\n", "\n", "# concatenation", "\n", "if", "self", ".", "concate", "==", "'full'", ":", "# level 1+2+3", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "(", "gru_out", ",", "con_out", ",", "org_out", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "concate", "==", "'reduced'", ":", "# level 2+3", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "(", "gru_out", ",", "con_out", ")", ",", "1", ")", "\n", "\n", "# mapping to common space", "\n", "", "features", "=", "self", ".", "visual_mapping", "(", "features", ")", "\n", "if", "self", ".", "visual_norm", ":", "\n", "            ", "features", "=", "l2norm", "(", "features", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Video_multilevel_encoding.load_state_dict": [[161, 172], ["model.Video_multilevel_encoding.state_dict", "collections.OrderedDict", "state_dict.items", "super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Copies parameters. overwritting the default one to\n        accept state_dict from Full model\n        \"\"\"", "\n", "own_state", "=", "self", ".", "state_dict", "(", ")", "\n", "new_state", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "own_state", ":", "\n", "                ", "new_state", "[", "name", "]", "=", "param", "\n", "\n", "", "", "super", "(", "Video_multilevel_encoding", ",", "self", ")", ".", "load_state_dict", "(", "new_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Text_multilevel_encoding.__init__": [[179, 202], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.MFC", "model.Text_multilevel_encoding.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Text_multilevel_encoding.init_weights"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Text_multilevel_encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "text_norm", "=", "opt", ".", "text_norm", "\n", "self", ".", "word_dim", "=", "opt", ".", "word_dim", "\n", "self", ".", "we_parameter", "=", "opt", ".", "we_parameter", "\n", "self", ".", "rnn_output_size", "=", "opt", ".", "text_rnn_size", "*", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "opt", ".", "dropout", ")", "\n", "self", ".", "concate", "=", "opt", ".", "concate", "\n", "\n", "# visual bidirectional rnn encoder", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "opt", ".", "vocab_size", ",", "opt", ".", "word_dim", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "opt", ".", "word_dim", ",", "opt", ".", "text_rnn_size", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# visual 1-d convolutional network", "\n", "self", ".", "convs1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "opt", ".", "text_kernel_num", ",", "(", "window_size", ",", "self", ".", "rnn_output_size", ")", ",", "padding", "=", "(", "window_size", "-", "1", ",", "0", ")", ")", "\n", "for", "window_size", "in", "opt", ".", "text_kernel_sizes", "\n", "]", ")", "\n", "\n", "# multi fc layers", "\n", "self", ".", "text_mapping", "=", "MFC", "(", "opt", ".", "text_mapping_layers", ",", "opt", ".", "dropout", ",", "have_bn", "=", "True", ",", "have_last_bn", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Text_multilevel_encoding.init_weights": [[203, 208], ["model.Text_multilevel_encoding.embed.weight.data.copy_", "model.Text_multilevel_encoding.embed.weight.data.uniform_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "word_dim", "==", "500", "and", "self", ".", "we_parameter", "is", "not", "None", ":", "\n", "            ", "self", ".", "embed", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "self", ".", "we_parameter", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Text_multilevel_encoding.forward": [[210, 249], ["model.Text_multilevel_encoding.embed", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model.Text_multilevel_encoding.rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "enumerate", "model.Text_multilevel_encoding.dropout", "gru_init_out.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Text_multilevel_encoding.dropout", "model.Text_multilevel_encoding.text_mapping", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.relu().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.l2norm", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "padded[].size", "conv", "i.size"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.l2norm"], ["", "", "def", "forward", "(", "self", ",", "text", ",", "*", "args", ")", ":", "\n", "# Embed word ids to vectors", "\n", "# cap_wids, cap_w2vs, cap_bows, cap_mask = x", "\n", "        ", "cap_wids", ",", "cap_bows", ",", "lengths", ",", "cap_mask", "=", "text", "\n", "\n", "# Level 1. Global Encoding by Mean Pooling According", "\n", "org_out", "=", "cap_bows", "\n", "\n", "# Level 2. Temporal-Aware Encoding by biGRU", "\n", "cap_wids", "=", "self", ".", "embed", "(", "cap_wids", ")", "\n", "packed", "=", "pack_padded_sequence", "(", "cap_wids", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "gru_init_out", ",", "_", "=", "self", ".", "rnn", "(", "packed", ")", "\n", "# Reshape *final* output to (batch_size, hidden_size)", "\n", "padded", "=", "pad_packed_sequence", "(", "gru_init_out", ",", "batch_first", "=", "True", ")", "\n", "gru_init_out", "=", "padded", "[", "0", "]", "\n", "gru_out", "=", "Variable", "(", "torch", ".", "zeros", "(", "padded", "[", "0", "]", ".", "size", "(", "0", ")", ",", "self", ".", "rnn_output_size", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "padded", "[", "0", "]", ")", ":", "\n", "            ", "gru_out", "[", "i", "]", "=", "torch", ".", "mean", "(", "batch", "[", ":", "lengths", "[", "i", "]", "]", ",", "0", ")", "\n", "", "gru_out", "=", "self", ".", "dropout", "(", "gru_out", ")", "\n", "\n", "# Level 3. Local-Enhanced Encoding by biGRU-CNN", "\n", "con_out", "=", "gru_init_out", ".", "unsqueeze", "(", "1", ")", "\n", "con_out", "=", "[", "F", ".", "relu", "(", "conv", "(", "con_out", ")", ")", ".", "squeeze", "(", "3", ")", "for", "conv", "in", "self", ".", "convs1", "]", "\n", "con_out", "=", "[", "F", ".", "max_pool1d", "(", "i", ",", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "for", "i", "in", "con_out", "]", "\n", "con_out", "=", "torch", ".", "cat", "(", "con_out", ",", "1", ")", "\n", "con_out", "=", "self", ".", "dropout", "(", "con_out", ")", "\n", "\n", "# concatenation", "\n", "if", "self", ".", "concate", "==", "'full'", ":", "# level 1+2+3", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "(", "gru_out", ",", "con_out", ",", "org_out", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "concate", "==", "'reduced'", ":", "# level 2+3", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "(", "gru_out", ",", "con_out", ")", ",", "1", ")", "\n", "\n", "# mapping to common space", "\n", "", "features", "=", "self", ".", "text_mapping", "(", "features", ")", "\n", "if", "self", ".", "text_norm", ":", "\n", "            ", "features", "=", "l2norm", "(", "features", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.state_dict": [[255, 258], ["model.BaseModel.vid_encoding.state_dict", "model.BaseModel.text_encoding.state_dict"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.state_dict"], ["    ", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "state_dict", "=", "[", "self", ".", "vid_encoding", ".", "state_dict", "(", ")", ",", "self", ".", "text_encoding", ".", "state_dict", "(", ")", "]", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict": [[259, 262], ["model.BaseModel.vid_encoding.load_state_dict", "model.BaseModel.text_encoding.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "vid_encoding", ".", "load_state_dict", "(", "state_dict", "[", "0", "]", ")", "\n", "self", ".", "text_encoding", ".", "load_state_dict", "(", "state_dict", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.train_start": [[263, 268], ["model.BaseModel.vid_encoding.train", "model.BaseModel.text_encoding.train"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.train", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.trainer.train"], ["", "def", "train_start", "(", "self", ")", ":", "\n", "        ", "\"\"\"switch to train mode\n        \"\"\"", "\n", "self", ".", "vid_encoding", ".", "train", "(", ")", "\n", "self", ".", "text_encoding", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.val_start": [[269, 274], ["model.BaseModel.vid_encoding.eval", "model.BaseModel.text_encoding.eval"], "methods", ["None"], ["", "def", "val_start", "(", "self", ")", ":", "\n", "        ", "\"\"\"switch to evaluate mode\n        \"\"\"", "\n", "self", ".", "vid_encoding", ".", "eval", "(", ")", "\n", "self", ".", "text_encoding", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.forward_loss": [[276, 285], ["model.BaseModel.criterion", "model.BaseModel.logger.update", "model.BaseModel.logger.update", "vid_emb.size", "model.BaseModel.item", "vid_emb.size"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "forward_loss", "(", "self", ",", "cap_emb", ",", "vid_emb", ",", "*", "agrs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Compute the loss given pairs of video and caption embeddings\n        \"\"\"", "\n", "loss", "=", "self", ".", "criterion", "(", "cap_emb", ",", "vid_emb", ")", "\n", "if", "torch", ".", "__version__", "==", "'0.3.1'", ":", "# loss.item() for 0.4.0, loss.data[0] for 0.3.1", "\n", "            ", "self", ".", "logger", ".", "update", "(", "'Le'", ",", "loss", ".", "data", "[", "0", "]", ",", "vid_emb", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "update", "(", "'Le'", ",", "loss", ".", "item", "(", ")", ",", "vid_emb", ".", "size", "(", "0", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.train_emb": [[286, 312], ["model.BaseModel.logger.update", "model.BaseModel.logger.update", "model.BaseModel.forward_emb", "model.BaseModel.optimizer.zero_grad", "model.BaseModel.forward_loss", "model.BaseModel.backward", "model.BaseModel.optimizer.step", "model.BaseModel.item", "torch.nn.utils.clip_grad.clip_grad_norm", "torch.nn.utils.clip_grad.clip_grad_norm", "torch.nn.utils.clip_grad.clip_grad_norm", "torch.nn.utils.clip_grad.clip_grad_norm", "torch.nn.utils.clip_grad.clip_grad_norm", "vid_emb.size"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.forward_emb", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.forward_loss"], ["", "def", "train_emb", "(", "self", ",", "videos", ",", "captions", ",", "lengths", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"One training step given videos and captions.\n        \"\"\"", "\n", "self", ".", "Eiters", "+=", "1", "\n", "self", ".", "logger", ".", "update", "(", "'Eit'", ",", "self", ".", "Eiters", ")", "\n", "self", ".", "logger", ".", "update", "(", "'lr'", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "\n", "# compute the embeddings", "\n", "vid_emb", ",", "cap_emb", "=", "self", ".", "forward_emb", "(", "videos", ",", "captions", ",", "False", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "forward_loss", "(", "cap_emb", ",", "vid_emb", ")", "\n", "\n", "if", "torch", ".", "__version__", "==", "'0.3.1'", ":", "\n", "            ", "loss_value", "=", "loss", ".", "data", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", ">", "0", ":", "\n", "            ", "clip_grad_norm", "(", "self", ".", "params", ",", "self", ".", "grad_clip", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "vid_emb", ".", "size", "(", "0", ")", ",", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.__init__": [[319, 349], ["model.Video_multilevel_encoding", "model.Text_multilevel_encoding", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "list", "list", "model.Dual_Encoding.vid_encoding.cuda", "model.Dual_Encoding.text_encoding.cuda", "loss.TripletLoss", "model.Dual_Encoding.text_encoding.parameters", "model.Dual_Encoding.vid_encoding.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# Build Models", "\n", "        ", "self", ".", "grad_clip", "=", "opt", ".", "grad_clip", "\n", "self", ".", "vid_encoding", "=", "Video_multilevel_encoding", "(", "opt", ")", "\n", "self", ".", "text_encoding", "=", "Text_multilevel_encoding", "(", "opt", ")", "\n", "print", "(", "self", ".", "vid_encoding", ")", "\n", "print", "(", "self", ".", "text_encoding", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "vid_encoding", ".", "cuda", "(", ")", "\n", "self", ".", "text_encoding", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Loss and Optimizer", "\n", "", "if", "opt", ".", "loss_fun", "==", "'mrl'", ":", "\n", "            ", "self", ".", "criterion", "=", "TripletLoss", "(", "margin", "=", "opt", ".", "margin", ",", "\n", "measure", "=", "opt", ".", "measure", ",", "\n", "max_violation", "=", "opt", ".", "max_violation", ",", "\n", "cost_style", "=", "opt", ".", "cost_style", ",", "\n", "direction", "=", "opt", ".", "direction", ")", "\n", "\n", "", "params", "=", "list", "(", "self", ".", "text_encoding", ".", "parameters", "(", ")", ")", "\n", "params", "+=", "list", "(", "self", ".", "vid_encoding", ".", "parameters", "(", ")", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n", "if", "opt", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "opt", ".", "learning_rate", ")", "\n", "", "elif", "opt", ".", "optimizer", "==", "'rmsprop'", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "params", ",", "lr", "=", "opt", ".", "learning_rate", ")", "\n", "\n", "", "self", ".", "Eiters", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.forward_emb": [[351, 391], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.Dual_Encoding.vid_encoding", "model.Dual_Encoding.text_encoding", "frames.cuda.cuda.cuda", "mean_origin.cuda.cuda.cuda", "vidoes_mask.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "captions.cuda.cuda.cuda", "cap_bows.cuda.cuda.cuda", "cap_masks.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "forward_emb", "(", "self", ",", "videos", ",", "targets", ",", "volatile", "=", "False", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Compute the video and caption embeddings\n        \"\"\"", "\n", "# video data", "\n", "frames", ",", "mean_origin", ",", "video_lengths", ",", "vidoes_mask", "=", "videos", "\n", "frames", "=", "Variable", "(", "frames", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "frames", "=", "frames", ".", "cuda", "(", ")", "\n", "\n", "", "mean_origin", "=", "Variable", "(", "mean_origin", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mean_origin", "=", "mean_origin", ".", "cuda", "(", ")", "\n", "\n", "", "vidoes_mask", "=", "Variable", "(", "vidoes_mask", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "vidoes_mask", "=", "vidoes_mask", ".", "cuda", "(", ")", "\n", "", "videos_data", "=", "(", "frames", ",", "mean_origin", ",", "video_lengths", ",", "vidoes_mask", ")", "\n", "\n", "# text data", "\n", "captions", ",", "cap_bows", ",", "lengths", ",", "cap_masks", "=", "targets", "\n", "if", "captions", "is", "not", "None", ":", "\n", "            ", "captions", "=", "Variable", "(", "captions", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "cap_bows", "is", "not", "None", ":", "\n", "            ", "cap_bows", "=", "Variable", "(", "cap_bows", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "cap_bows", "=", "cap_bows", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "cap_masks", "is", "not", "None", ":", "\n", "            ", "cap_masks", "=", "Variable", "(", "cap_masks", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "cap_masks", "=", "cap_masks", ".", "cuda", "(", ")", "\n", "", "", "text_data", "=", "(", "captions", ",", "cap_bows", ",", "lengths", ",", "cap_masks", ")", "\n", "\n", "\n", "vid_emb", "=", "self", ".", "vid_encoding", "(", "videos_data", ")", "\n", "cap_emb", "=", "self", ".", "text_encoding", "(", "text_data", ")", "\n", "return", "vid_emb", ",", "cap_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.embed_vis": [[392, 409], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model.Dual_Encoding.vid_encoding", "frames.cuda.cuda.cuda", "mean_origin.cuda.cuda.cuda", "vidoes_mask.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "embed_vis", "(", "self", ",", "vis_data", ",", "volatile", "=", "True", ")", ":", "\n", "# video data", "\n", "        ", "frames", ",", "mean_origin", ",", "video_lengths", ",", "vidoes_mask", "=", "vis_data", "\n", "frames", "=", "Variable", "(", "frames", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "frames", "=", "frames", ".", "cuda", "(", ")", "\n", "\n", "", "mean_origin", "=", "Variable", "(", "mean_origin", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mean_origin", "=", "mean_origin", ".", "cuda", "(", ")", "\n", "\n", "", "vidoes_mask", "=", "Variable", "(", "vidoes_mask", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "vidoes_mask", "=", "vidoes_mask", ".", "cuda", "(", ")", "\n", "", "vis_data", "=", "(", "frames", ",", "mean_origin", ",", "video_lengths", ",", "vidoes_mask", ")", "\n", "\n", "return", "self", ".", "vid_encoding", "(", "vis_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.embed_txt": [[411, 431], ["model.Dual_Encoding.text_encoding", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "captions.cuda.cuda.cuda", "cap_bows.cuda.cuda.cuda", "cap_masks.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "embed_txt", "(", "self", ",", "txt_data", ",", "volatile", "=", "True", ")", ":", "\n", "# text data", "\n", "        ", "captions", ",", "cap_bows", ",", "lengths", ",", "cap_masks", "=", "txt_data", "\n", "if", "captions", "is", "not", "None", ":", "\n", "            ", "captions", "=", "Variable", "(", "captions", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "cap_bows", "is", "not", "None", ":", "\n", "            ", "cap_bows", "=", "Variable", "(", "cap_bows", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "cap_bows", "=", "cap_bows", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "cap_masks", "is", "not", "None", ":", "\n", "            ", "cap_masks", "=", "Variable", "(", "cap_masks", ",", "volatile", "=", "volatile", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "cap_masks", "=", "cap_masks", ".", "cuda", "(", ")", "\n", "", "", "txt_data", "=", "(", "captions", ",", "cap_bows", ",", "lengths", ",", "cap_masks", ")", "\n", "\n", "return", "self", ".", "text_encoding", "(", "txt_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_we_parameter": [[17, 31], ["basic.bigfile.BigFile", "range", "print", "numpy.array", "len", "we.append", "numpy.shape", "basic.bigfile.BigFile.read_one", "numpy.random.uniform"], "function", ["None"], ["def", "get_we_parameter", "(", "vocab", ",", "w2v_file", ")", ":", "\n", "    ", "w2v_reader", "=", "BigFile", "(", "w2v_file", ")", "\n", "ndims", "=", "w2v_reader", ".", "ndims", "\n", "\n", "we", "=", "[", "]", "\n", "# we.append([0]*ndims)", "\n", "for", "i", "in", "range", "(", "len", "(", "vocab", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "vec", "=", "w2v_reader", ".", "read_one", "(", "vocab", ".", "idx2word", "[", "i", "]", ")", "\n", "", "except", ":", "\n", "            ", "vec", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "ndims", ")", "\n", "", "we", ".", "append", "(", "vec", ")", "\n", "", "print", "(", "'getting pre-trained parameter for word embedding initialization'", ",", "np", ".", "shape", "(", "we", ")", ")", "\n", "return", "np", ".", "array", "(", "we", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.l2norm": [[32, 38], ["torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "l2norm", "(", "X", ")", ":", "\n", "    ", "\"\"\"L2-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "torch", ".", "pow", "(", "X", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "X", "=", "torch", ".", "div", "(", "X", ",", "norm", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.xavier_init_fc": [[39, 46], ["fc.weight.data.uniform_", "fc.bias.data.fill_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "xavier_init_fc", "(", "fc", ")", ":", "\n", "    ", "\"\"\"Xavier initialization for the fully connected layer\n    \"\"\"", "\n", "r", "=", "np", ".", "sqrt", "(", "6.", ")", "/", "np", ".", "sqrt", "(", "fc", ".", "in_features", "+", "\n", "fc", ".", "out_features", ")", "\n", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "r", ",", "r", ")", "\n", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_model": [[436, 439], ["None"], "function", ["None"], ["def", "get_model", "(", "name", ")", ":", "\n", "    ", "assert", "name", "in", "NAME_TO_MODELS", ",", "'%s not supported.'", "%", "name", "\n", "return", "NAME_TO_MODELS", "[", "name", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args": [[24, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# Hyper Parameters", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'testCollection'", ",", "type", "=", "str", ",", "help", "=", "'test collection'", ")", "\n", "parser", ".", "add_argument", "(", "'--rootpath'", ",", "type", "=", "str", ",", "default", "=", "ROOT_PATH", ",", "help", "=", "'path to datasets. (default: %s)'", "%", "ROOT_PATH", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "help", "=", "'overwrite existed file. (default: 0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_step'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "'Number of steps to print and record the log.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Size of a training mini-batch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Number of data loader workers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--logger_name'", ",", "default", "=", "'runs'", ",", "help", "=", "'Path to save the model and Tensorboard log.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_name'", ",", "default", "=", "'model_best.pth.tar'", ",", "type", "=", "str", ",", "help", "=", "'name of checkpoint (default: model_best.pth.tar)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_caption'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of captions of each image/video (default: 1)'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.load_config": [[40, 44], ["exec", "compile", "open().read", "open"], "function", ["None"], ["", "def", "load_config", "(", "config_path", ")", ":", "\n", "    ", "variables", "=", "{", "}", "\n", "exec", "(", "compile", "(", "open", "(", "config_path", ",", "\"rb\"", ")", ".", "read", "(", ")", ",", "config_path", ",", "'exec'", ")", ",", "variables", ")", "\n", "return", "variables", "[", "'config'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.main": [[45, 151], ["tester.parse_args", "print", "os.path.join", "torch.load", "print", "os.path.join.replace", "output_dir.replace.replace", "os.path.join", "os.path.join", "basic.common.checkToSkip", "basic.common.makedirsforfile", "os.path.join", "os.path.join", "pickle.load", "len", "os.path.join", "pickle.load", "len", "model.load_state_dict", "model.val_start", "testCollection.startswith", "evaluation.cal_error", "torch.save", "print", "testCollection.startswith", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "json.dumps", "os.path.exists", "logging.info", "sys.exit", "hasattr", "setattr", "sys.exit", "os.path.join", "basic.bigfile.BigFile", "basic.util.read_dict", "open", "util.text2vec.get_text_encoder", "open", "model.get_model", "util.read_video_ids", "util.get_vis_data_loader", "util.get_txt_data_loader", "evaluation.encode_text_or_vid", "evaluation.encode_text_or_vid", "util.get_test_data_loaders", "evaluation.encode_data", "range", "evaluation.i2t_varied", "evaluation.t2i_varied", "evaluation.t2i", "evaluation.t2i_map", "evaluation.i2t", "evaluation.i2t_map", "vars", "os.path.join", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.makedirsforfile", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.load_state_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.val_start", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.cal_error", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.read_dict", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.get_text_encoder", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.get_model", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.read_video_ids", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_vis_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_txt_data_loader", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_text_or_vid", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_text_or_vid", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_test_data_loaders", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_data", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_varied", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_map", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_map"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "opt", ")", ",", "indent", "=", "2", ")", ")", "\n", "\n", "rootpath", "=", "opt", ".", "rootpath", "\n", "testCollection", "=", "opt", ".", "testCollection", "\n", "n_caption", "=", "opt", ".", "n_caption", "\n", "resume", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "logger_name", ",", "opt", ".", "checkpoint_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "resume", ")", ":", "\n", "        ", "logging", ".", "info", "(", "resume", "+", "' not exists.'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_rsum", "=", "checkpoint", "[", "'best_rsum'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {}, best_rsum {})\"", "\n", ".", "format", "(", "resume", ",", "start_epoch", ",", "best_rsum", ")", ")", "\n", "options", "=", "checkpoint", "[", "'opt'", "]", "\n", "if", "not", "hasattr", "(", "options", ",", "'concate'", ")", ":", "\n", "        ", "setattr", "(", "options", ",", "\"concate\"", ",", "\"full\"", ")", "\n", "\n", "", "trainCollection", "=", "options", ".", "trainCollection", "\n", "output_dir", "=", "resume", ".", "replace", "(", "trainCollection", ",", "testCollection", ")", "\n", "output_dir", "=", "output_dir", ".", "replace", "(", "'/%s/'", "%", "options", ".", "cv_name", ",", "'/results/%s/'", "%", "trainCollection", ")", "\n", "result_pred_sents", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'id.sent.score.txt'", ")", "\n", "pred_error_matrix_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'pred_errors_matrix.pth.tar'", ")", "\n", "if", "checkToSkip", "(", "pred_error_matrix_file", ",", "opt", ".", "overwrite", ")", ":", "\n", "        ", "sys", ".", "exit", "(", "0", ")", "\n", "", "makedirsforfile", "(", "pred_error_matrix_file", ")", "\n", "\n", "# data loader prepare", "\n", "caption_files", "=", "{", "'test'", ":", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'TextData'", ",", "'%s.caption.txt'", "%", "testCollection", ")", "}", "\n", "img_feat_path", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'FeatureData'", ",", "options", ".", "visual_feature", ")", "\n", "visual_feats", "=", "{", "'test'", ":", "BigFile", "(", "img_feat_path", ")", "}", "\n", "assert", "options", ".", "visual_feat_dim", "==", "visual_feats", "[", "'test'", "]", ".", "ndims", "\n", "video2frames", "=", "{", "'test'", ":", "read_dict", "(", "os", ".", "path", ".", "join", "(", "rootpath", ",", "testCollection", ",", "'FeatureData'", ",", "options", ".", "visual_feature", ",", "'video2frames.txt'", ")", ")", "}", "\n", "\n", "# set bow vocabulary and encoding", "\n", "bow_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "options", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'bow'", ",", "options", ".", "vocab", "+", "'.pkl'", ")", "\n", "bow_vocab", "=", "pickle", ".", "load", "(", "open", "(", "bow_vocab_file", ",", "'rb'", ")", ")", "\n", "bow2vec", "=", "get_text_encoder", "(", "'bow'", ")", "(", "bow_vocab", ")", "\n", "options", ".", "bow_vocab_size", "=", "len", "(", "bow_vocab", ")", "\n", "\n", "# set rnn vocabulary ", "\n", "rnn_vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "options", ".", "trainCollection", ",", "'TextData'", ",", "'vocabulary'", ",", "'rnn'", ",", "options", ".", "vocab", "+", "'.pkl'", ")", "\n", "rnn_vocab", "=", "pickle", ".", "load", "(", "open", "(", "rnn_vocab_file", ",", "'rb'", ")", ")", "\n", "options", ".", "vocab_size", "=", "len", "(", "rnn_vocab", ")", "\n", "\n", "# Construct the model", "\n", "model", "=", "get_model", "(", "options", ".", "model", ")", "(", "options", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", ".", "Eiters", "=", "checkpoint", "[", "'Eiters'", "]", "\n", "model", ".", "val_start", "(", ")", "\n", "\n", "if", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "# or testCollection.startswith('msrvtt'):", "\n", "# set data loader", "\n", "        ", "video_ids_list", "=", "data", ".", "read_video_ids", "(", "caption_files", "[", "'test'", "]", ")", "\n", "vid_data_loader", "=", "data", ".", "get_vis_data_loader", "(", "visual_feats", "[", "'test'", "]", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "video2frames", "[", "'test'", "]", ",", "video_ids", "=", "video_ids_list", ")", "\n", "text_data_loader", "=", "data", ".", "get_txt_data_loader", "(", "caption_files", "[", "'test'", "]", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ")", "\n", "# mapping", "\n", "video_embs", ",", "video_ids", "=", "evaluation", ".", "encode_text_or_vid", "(", "model", ".", "embed_vis", ",", "vid_data_loader", ")", "\n", "cap_embs", ",", "caption_ids", "=", "evaluation", ".", "encode_text_or_vid", "(", "model", ".", "embed_txt", ",", "text_data_loader", ")", "\n", "", "else", ":", "\n", "# set data loader", "\n", "        ", "data_loader", "=", "data", ".", "get_test_data_loaders", "(", "\n", "caption_files", ",", "visual_feats", ",", "rnn_vocab", ",", "bow2vec", ",", "opt", ".", "batch_size", ",", "opt", ".", "workers", ",", "opt", ".", "n_caption", ",", "video2frames", "=", "video2frames", ")", "\n", "# mapping", "\n", "video_embs", ",", "cap_embs", ",", "video_ids", ",", "caption_ids", "=", "evaluation", ".", "encode_data", "(", "model", ",", "data_loader", "[", "'test'", "]", ",", "opt", ".", "log_step", ",", "logging", ".", "info", ")", "\n", "# remove duplicate videos", "\n", "idx", "=", "range", "(", "0", ",", "video_embs", ".", "shape", "[", "0", "]", ",", "n_caption", ")", "\n", "video_embs", "=", "video_embs", "[", "idx", ",", ":", "]", "\n", "video_ids", "=", "video_ids", "[", ":", ":", "opt", ".", "n_caption", "]", "\n", "\n", "", "c2i_all_errors", "=", "evaluation", ".", "cal_error", "(", "video_embs", ",", "cap_embs", ",", "options", ".", "measure", ")", "\n", "torch", ".", "save", "(", "{", "'errors'", ":", "c2i_all_errors", ",", "'videos'", ":", "video_ids", ",", "'captions'", ":", "caption_ids", "}", ",", "pred_error_matrix_file", ")", "\n", "print", "(", "\"write into: %s\"", "%", "pred_error_matrix_file", ")", "\n", "\n", "\n", "if", "testCollection", ".", "startswith", "(", "'msvd'", ")", ":", "# or testCollection.startswith('msrvtt'):", "\n", "# caption retrieval", "\n", "        ", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ",", "i2t_map_score", ")", "=", "evaluation", ".", "i2t_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "# video retrieval", "\n", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ",", "t2i_map_score", ")", "=", "evaluation", ".", "t2i_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", "\n", "", "else", ":", "\n", "# caption retrieval", "\n", "        ", "(", "r1i", ",", "r5i", ",", "r10i", ",", "medri", ",", "meanri", ")", "=", "evaluation", ".", "t2i", "(", "c2i_all_errors", ",", "n_caption", "=", "n_caption", ")", "\n", "t2i_map_score", "=", "evaluation", ".", "t2i_map", "(", "c2i_all_errors", ",", "n_caption", "=", "n_caption", ")", "\n", "\n", "# video retrieval", "\n", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ")", "=", "evaluation", ".", "i2t", "(", "c2i_all_errors", ",", "n_caption", "=", "n_caption", ")", "\n", "i2t_map_score", "=", "evaluation", ".", "i2t_map", "(", "c2i_all_errors", ",", "n_caption", "=", "n_caption", ")", "\n", "\n", "", "print", "(", "\" * Text to Video:\"", ")", "\n", "print", "(", "\" * r_1_5_10, medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "r1i", ",", "1", ")", ",", "round", "(", "r5i", ",", "1", ")", ",", "round", "(", "r10i", ",", "1", ")", ",", "round", "(", "medri", ",", "1", ")", ",", "round", "(", "meanri", ",", "1", ")", "]", ")", ")", "\n", "print", "(", "\" * recall sum: {}\"", ".", "format", "(", "round", "(", "r1i", "+", "r5i", "+", "r10i", ",", "1", ")", ")", ")", "\n", "print", "(", "\" * mAP: {}\"", ".", "format", "(", "round", "(", "t2i_map_score", ",", "3", ")", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n", "# caption retrieval", "\n", "print", "(", "\" * Video to text:\"", ")", "\n", "print", "(", "\" * r_1_5_10, medr, meanr: {}\"", ".", "format", "(", "[", "round", "(", "r1", ",", "1", ")", ",", "round", "(", "r5", ",", "1", ")", ",", "round", "(", "r10", ",", "1", ")", ",", "round", "(", "medr", ",", "1", ")", ",", "round", "(", "meanr", ",", "1", ")", "]", ")", ")", "\n", "print", "(", "\" * recall sum: {}\"", ".", "format", "(", "round", "(", "r1", "+", "r5", "+", "r10", ",", "1", ")", ")", ")", "\n", "print", "(", "\" * mAP: {}\"", ".", "format", "(", "round", "(", "i2t_map_score", ",", "3", ")", ")", ")", "\n", "print", "(", "\" * \"", "+", "'-'", "*", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.l2norm": [[15, 20], ["numpy.linalg.norm"], "function", ["None"], ["def", "l2norm", "(", "X", ")", ":", "\n", "    ", "\"\"\"L2-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "1.0", "*", "X", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.cal_error": [[21, 29], ["evaluation.l2norm", "evaluation.l2norm", "numpy.dot", "numpy.dot", "scipy.spatial.distance.cdist"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.l2norm", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.l2norm"], ["", "def", "cal_error", "(", "videos", ",", "captions", ",", "measure", "=", "'cosine'", ")", ":", "\n", "    ", "if", "measure", "==", "'cosine'", ":", "\n", "        ", "captions", "=", "l2norm", "(", "captions", ")", "\n", "videos", "=", "l2norm", "(", "videos", ")", "\n", "errors", "=", "-", "1", "*", "numpy", ".", "dot", "(", "captions", ",", "videos", ".", "T", ")", "\n", "", "elif", "measure", "==", "'euclidean'", ":", "\n", "        ", "errors", "=", "distance", ".", "cdist", "(", "captions", ",", "videos", ",", "'euclidean'", ")", "\n", "", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_data": [[33, 86], ["basic.util.AverageMeter", "basic.util.LogCollector", "model.val_start", "time.time", "enumerate", "len", "len", "model.forward_emb", "vid_emb.data.cpu().numpy().copy", "cap_emb.data.cpu().numpy().copy", "enumerate", "basic.util.AverageMeter.update", "time.time", "numpy.zeros", "numpy.zeros", "logging", "vid_emb.data.cpu().numpy", "cap_emb.data.cpu().numpy", "time.time", "len", "vid_emb.size", "len", "cap_emb.size", "len", "vid_emb.data.cpu", "cap_emb.data.cpu", "str"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.BaseModel.val_start", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.model.Dual_Encoding.forward_emb", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "encode_data", "(", "model", ",", "data_loader", ",", "log_step", "=", "10", ",", "logging", "=", "print", ",", "return_ids", "=", "True", ")", ":", "\n", "    ", "\"\"\"Encode all videos and captions loadable by `data_loader`\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "val_logger", "=", "LogCollector", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "val_start", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# numpy array to keep all the embeddings", "\n", "video_embs", "=", "None", "\n", "cap_embs", "=", "None", "\n", "video_ids", "=", "[", "''", "]", "*", "len", "(", "data_loader", ".", "dataset", ")", "\n", "caption_ids", "=", "[", "''", "]", "*", "len", "(", "data_loader", ".", "dataset", ")", "\n", "for", "i", ",", "(", "videos", ",", "captions", ",", "idxs", ",", "cap_ids", ",", "vid_ids", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# make sure val logger is used", "\n", "        ", "model", ".", "logger", "=", "val_logger", "\n", "\n", "# compute the embeddings", "\n", "vid_emb", ",", "cap_emb", "=", "model", ".", "forward_emb", "(", "videos", ",", "captions", ",", "True", ")", "\n", "\n", "# initialize the numpy arrays given the size of the embeddings", "\n", "if", "video_embs", "is", "None", ":", "\n", "            ", "video_embs", "=", "np", ".", "zeros", "(", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "vid_emb", ".", "size", "(", "1", ")", ")", ")", "\n", "cap_embs", "=", "np", ".", "zeros", "(", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "cap_emb", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "# preserve the embeddings by copying from gpu and converting to numpy", "\n", "", "video_embs", "[", "idxs", "]", "=", "vid_emb", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "cap_embs", "[", "idxs", "]", "=", "cap_emb", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "idxs", ")", ":", "\n", "            ", "caption_ids", "[", "idx", "]", "=", "cap_ids", "[", "j", "]", "\n", "video_ids", "[", "idx", "]", "=", "vid_ids", "[", "j", "]", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "log_step", "==", "0", ":", "\n", "            ", "logging", "(", "'Test: [{0:2d}/{1:2d}]\\t'", "\n", "'{e_log}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", ".", "format", "(", "\n", "i", ",", "len", "(", "data_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "e_log", "=", "str", "(", "model", ".", "logger", ")", ")", ")", "\n", "", "del", "videos", ",", "captions", "\n", "\n", "", "if", "return_ids", "==", "True", ":", "\n", "        ", "return", "video_embs", ",", "cap_embs", ",", "video_ids", ",", "caption_ids", "\n", "", "else", ":", "\n", "        ", "return", "video_embs", ",", "cap_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.encode_text_or_vid": [[89, 118], ["basic.generic_utils.Progbar", "enumerate", "len", "len", "encoder", "encoder.data.cpu().numpy().copy", "enumerate", "basic.generic_utils.Progbar.add", "numpy.zeros", "len", "encoder.data.cpu().numpy", "len", "encoder.size", "encoder.data.cpu"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add"], ["", "", "def", "encode_text_or_vid", "(", "encoder", ",", "data_loader", ",", "return_ids", "=", "True", ")", ":", "\n", "    ", "\"\"\"Encode all videos and captions loadable by `data_loader`\n    \"\"\"", "\n", "# numpy array to keep all the embeddings", "\n", "embeddings", "=", "None", "\n", "ids", "=", "[", "''", "]", "*", "len", "(", "data_loader", ".", "dataset", ")", "\n", "pbar", "=", "Progbar", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "for", "i", ",", "(", "datas", ",", "idxs", ",", "data_ids", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "# compute the embeddings", "\n", "        ", "emb", "=", "encoder", "(", "datas", ")", "\n", "\n", "# initialize the numpy arrays given the size of the embeddings", "\n", "if", "embeddings", "is", "None", ":", "\n", "            ", "embeddings", "=", "np", ".", "zeros", "(", "(", "len", "(", "data_loader", ".", "dataset", ")", ",", "emb", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "# preserve the embeddings by copying from gpu and converting to numpy", "\n", "", "embeddings", "[", "idxs", "]", "=", "emb", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "idxs", ")", ":", "\n", "            ", "ids", "[", "idx", "]", "=", "data_ids", "[", "j", "]", "\n", "\n", "", "del", "datas", "\n", "pbar", ".", "add", "(", "len", "(", "idxs", ")", ")", "\n", "\n", "", "if", "return_ids", "==", "True", ":", "\n", "        ", "return", "embeddings", ",", "ids", ",", "\n", "", "else", ":", "\n", "        ", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i": [[121, 146], ["numpy.zeros", "range", "map", "len", "numpy.argsort", "len", "len", "len", "numpy.floor", "np.zeros.mean", "len", "len", "len", "numpy.median", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "def", "t2i", "(", "c2i", ",", "vis_details", "=", "False", ",", "n_caption", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Text->Videos (Text-to-Video Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    vis_details: if true, return a dictionary for ROC visualization purposes\n    \"\"\"", "\n", "# print(\"errors matrix shape: \", c2i.shape)", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "ranks", "=", "np", ".", "zeros", "(", "c2i", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ranks", ")", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", "i", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "d_i", ")", "\n", "\n", "rank", "=", "np", ".", "where", "(", "inds", "==", "i", "/", "n_caption", ")", "[", "0", "]", "[", "0", "]", "\n", "ranks", "[", "i", "]", "=", "rank", "\n", "\n", "# Compute metrics", "\n", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "meanr", "=", "ranks", ".", "mean", "(", ")", "+", "1", "\n", "\n", "return", "map", "(", "float", ",", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t": [[150, 174], ["numpy.zeros", "range", "map", "len", "numpy.argsort", "len", "len", "len", "numpy.floor", "np.zeros.mean", "len", "len", "len", "numpy.median", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "i2t", "(", "c2i", ",", "n_caption", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Videos->Text (Video-to-Text Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    \"\"\"", "\n", "#remove duplicate videos", "\n", "# print(\"errors matrix shape: \", c2i.shape)", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "ranks", "=", "np", ".", "zeros", "(", "c2i", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ranks", ")", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", ":", ",", "i", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "d_i", ")", "\n", "\n", "rank", "=", "np", ".", "where", "(", "inds", "/", "n_caption", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "ranks", "[", "i", "]", "=", "rank", "\n", "\n", "# Compute metrics", "\n", "", "r1", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "1", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r5", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "5", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "r10", "=", "100.0", "*", "len", "(", "np", ".", "where", "(", "ranks", "<", "10", ")", "[", "0", "]", ")", "/", "len", "(", "ranks", ")", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "+", "1", "\n", "meanr", "=", "ranks", ".", "mean", "(", ")", "+", "1", "\n", "return", "map", "(", "float", ",", "[", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_map": [[177, 197], ["basic.metric.getScorer", "range", "numpy.mean", "basic.metric.getScorer.score", "perf_list.append", "len", "numpy.argsort"], "function", ["None"], ["", "def", "t2i_map", "(", "c2i", ",", "n_caption", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Text->Videos (Text-to-Video Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    \"\"\"", "\n", "# print(\"errors matrix shape: \", c2i.shape)", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "\n", "scorer", "=", "getScorer", "(", "'AP'", ")", "\n", "perf_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "c2i", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", "i", ",", ":", "]", "\n", "labels", "=", "[", "0", "]", "*", "len", "(", "d_i", ")", "\n", "labels", "[", "i", "/", "n_caption", "]", "=", "1", "\n", "\n", "sorted_labels", "=", "[", "labels", "[", "x", "]", "for", "x", "in", "np", ".", "argsort", "(", "d_i", ")", "]", "\n", "current_score", "=", "scorer", ".", "score", "(", "sorted_labels", ")", "\n", "perf_list", ".", "append", "(", "current_score", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "perf_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_map": [[200, 220], ["basic.metric.getScorer", "range", "numpy.mean", "basic.metric.getScorer.score", "perf_list.append", "len", "numpy.argsort"], "function", ["None"], ["", "def", "i2t_map", "(", "c2i", ",", "n_caption", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Videos->Text (Video-to-Text Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    \"\"\"", "\n", "# print(\"errors matrix shape: \", c2i.shape)", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "\n", "scorer", "=", "getScorer", "(", "'AP'", ")", "\n", "perf_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "c2i", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", ":", ",", "i", "]", "\n", "labels", "=", "[", "0", "]", "*", "len", "(", "d_i", ")", "\n", "labels", "[", "i", "*", "n_caption", ":", "(", "i", "+", "1", ")", "*", "n_caption", "]", "=", "[", "1", "]", "*", "n_caption", "\n", "\n", "sorted_labels", "=", "[", "labels", "[", "x", "]", "for", "x", "in", "np", ".", "argsort", "(", "d_i", ")", "]", "\n", "current_score", "=", "scorer", ".", "score", "(", "sorted_labels", ")", "\n", "perf_list", ".", "append", "(", "current_score", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "perf_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_inv_rank": [[222, 239], ["numpy.zeros", "range", "numpy.mean", "len", "numpy.argsort", "sum", "numpy.where"], "function", ["None"], ["", "def", "t2i_inv_rank", "(", "c2i", ",", "n_caption", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Text->Videos (Text-to-Video Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    n_caption: number of captions of each image/video\n    \"\"\"", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "inv_ranks", "=", "np", ".", "zeros", "(", "c2i", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "inv_ranks", ")", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", "i", ",", ":", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "d_i", ")", "\n", "\n", "rank", "=", "np", ".", "where", "(", "inds", "==", "i", "/", "n_caption", ")", "[", "0", "]", "\n", "inv_ranks", "[", "i", "]", "=", "sum", "(", "1.0", "/", "(", "rank", "+", "1", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "inv_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_inv_rank": [[242, 259], ["numpy.zeros", "range", "numpy.mean", "len", "numpy.argsort", "sum", "numpy.where"], "function", ["None"], ["", "def", "i2t_inv_rank", "(", "c2i", ",", "n_caption", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Videos->Text (Video-to-Text Retrieval)\n    c2i: (5N, N) matrix of caption to video errors\n    n_caption: number of captions of each image/video\n    \"\"\"", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "inv_ranks", "=", "np", ".", "zeros", "(", "c2i", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "inv_ranks", ")", ")", ":", "\n", "        ", "d_i", "=", "c2i", "[", ":", ",", "i", "]", "\n", "inds", "=", "np", ".", "argsort", "(", "d_i", ")", "\n", "\n", "rank", "=", "np", ".", "where", "(", "inds", "/", "n_caption", "==", "i", ")", "[", "0", "]", "\n", "inv_ranks", "[", "i", "]", "=", "sum", "(", "1.0", "/", "(", "rank", "+", "1", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "inv_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_inv_rank_multi": [[263, 280], ["numpy.zeros", "range", "range", "evaluation.i2t_inv_rank", "result.append"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_inv_rank"], ["", "def", "i2t_inv_rank_multi", "(", "c2i", ",", "n_caption", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Text->videos (Image Search)\n    c2i: (5N, N) matrix of caption to image errors\n    n_caption: number of captions of each image/video\n    \"\"\"", "\n", "# print(\"errors matrix shape: \", c2i.shape)", "\n", "assert", "c2i", ".", "shape", "[", "0", "]", "/", "c2i", ".", "shape", "[", "1", "]", "==", "n_caption", ",", "c2i", ".", "shape", "\n", "inv_ranks", "=", "np", ".", "zeros", "(", "c2i", ".", "shape", "[", "1", "]", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_caption", ")", ":", "\n", "        ", "idx", "=", "range", "(", "i", ",", "c2i", ".", "shape", "[", "0", "]", ",", "n_caption", ")", "\n", "sub_c2i", "=", "c2i", "[", "idx", ",", ":", "]", "\n", "score", "=", "i2t_inv_rank", "(", "sub_c2i", ",", "n_caption", "=", "1", ")", "\n", "result", ".", "append", "(", "score", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.eval_varied": [[285, 302], ["numpy.zeros", "numpy.zeros", "range", "numpy.floor", "np.zeros.mean", "np.zeros.mean", "len", "numpy.mean", "numpy.median", "numpy.mean", "numpy.where", "range", "len"], "function", ["None"], ["", "def", "eval_varied", "(", "label_matrix", ")", ":", "\n", "    ", "ranks", "=", "np", ".", "zeros", "(", "label_matrix", ".", "shape", "[", "0", "]", ")", "\n", "aps", "=", "np", ".", "zeros", "(", "label_matrix", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "index", "in", "range", "(", "len", "(", "ranks", ")", ")", ":", "\n", "        ", "rank", "=", "np", ".", "where", "(", "label_matrix", "[", "index", "]", "==", "1", ")", "[", "0", "]", "+", "1", "\n", "ranks", "[", "index", "]", "=", "rank", "[", "0", "]", "\n", "\n", "aps", "[", "index", "]", "=", "np", ".", "mean", "(", "[", "(", "i", "+", "1.", ")", "/", "rank", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "rank", ")", ")", "]", ")", "\n", "\n", "", "r1", ",", "r5", ",", "r10", "=", "[", "100.0", "*", "np", ".", "mean", "(", "[", "x", "<=", "k", "for", "x", "in", "ranks", "]", ")", "for", "k", "in", "[", "1", ",", "5", ",", "10", "]", "]", "\n", "medr", "=", "np", ".", "floor", "(", "np", ".", "median", "(", "ranks", ")", ")", "\n", "meanr", "=", "ranks", ".", "mean", "(", ")", "\n", "# mir = (1.0/ranks).mean()", "\n", "mAP", "=", "aps", ".", "mean", "(", ")", "\n", "\n", "return", "(", "r1", ",", "r5", ",", "r10", ",", "medr", ",", "meanr", ",", "mAP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.t2i_varied": [[304, 311], ["numpy.argsort", "numpy.zeros", "range", "evaluation.eval_varied", "numpy.where", "numpy.array", "caption_ids[].split"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.eval_varied"], ["", "def", "t2i_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", ":", "\n", "    ", "inds", "=", "np", ".", "argsort", "(", "-", "c2i_all_errors", ",", "axis", "=", "1", ")", "\n", "label_matrix", "=", "np", ".", "zeros", "(", "inds", ".", "shape", ")", "\n", "for", "index", "in", "range", "(", "inds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ind", "=", "inds", "[", "index", "]", "[", ":", ":", "-", "1", "]", "\n", "label_matrix", "[", "index", "]", "[", "np", ".", "where", "(", "np", ".", "array", "(", "video_ids", ")", "[", "ind", "]", "==", "caption_ids", "[", "index", "]", ".", "split", "(", "'#'", ")", "[", "0", "]", ")", "[", "0", "]", "]", "=", "1", "\n", "", "return", "eval_varied", "(", "label_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.i2t_varied": [[313, 321], ["numpy.argsort", "numpy.zeros", "range", "evaluation.eval_varied", "txt_id.split", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.evaluation.eval_varied"], ["", "def", "i2t_varied", "(", "c2i_all_errors", ",", "caption_ids", ",", "video_ids", ")", ":", "\n", "    ", "inds", "=", "np", ".", "argsort", "(", "-", "c2i_all_errors", ".", "T", ",", "axis", "=", "1", ")", "\n", "label_matrix", "=", "np", ".", "zeros", "(", "inds", ".", "shape", ")", "\n", "caption_ids", "=", "[", "txt_id", ".", "split", "(", "'#'", ")", "[", "0", "]", "for", "txt_id", "in", "caption_ids", "]", "\n", "for", "index", "in", "range", "(", "inds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ind", "=", "inds", "[", "index", "]", "[", ":", ":", "-", "1", "]", "\n", "label_matrix", "[", "index", "]", "[", "np", ".", "where", "(", "np", ".", "array", "(", "caption_ids", ")", "[", "ind", "]", "==", "video_ids", "[", "index", "]", ")", "[", "0", "]", "]", "=", "1", "\n", "", "return", "eval_varied", "(", "label_matrix", ")", "", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.read_topics": [[26, 33], ["map", "open().readlines", "line.split", "qry_list.append", "open"], "function", ["None"], ["def", "read_topics", "(", "topics_file", ")", ":", "\n", "    ", "lines", "=", "map", "(", "str", ".", "strip", ",", "open", "(", "topics_file", ")", ".", "readlines", "(", ")", ")", "\n", "qry_list", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "tnum", ",", "query", "=", "line", ".", "split", "(", "' '", ",", "1", ")", "\n", "qry_list", ".", "append", "(", "(", "tnum", ",", "query", ")", ")", "\n", "", "return", "qry_list", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.wrap_topic_result": [[35, 41], ["enumerate", "new_res.append", "new_res.append"], "function", ["None"], ["", "def", "wrap_topic_result", "(", "tNum", ",", "elapsedTime", ",", "topicResult", ")", ":", "\n", "    ", "new_res", "=", "[", "'<videoAdhocSearchTopicResult tNum=\"%s\" elapsedTime=\"%g\">'", "%", "(", "tNum", ",", "elapsedTime", ")", "]", "\n", "for", "i", ",", "shot_id", "in", "enumerate", "(", "topicResult", ")", ":", "\n", "        ", "new_res", ".", "append", "(", "'<item seqNum=\"%d\" shotId=\"%s\" />'", "%", "(", "i", "+", "1", ",", "shot_id", ")", ")", "\n", "", "new_res", ".", "append", "(", "'</videoAdhocSearchTopicResult>'", ")", "\n", "return", "new_res", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.process": [[43, 111], ["os.path.exists", "os.path.join", "os.path.join", "txt2xml.read_topics", "set", "set", "logger.info", "map", "xml_file.append", "xml_file.append", "xml_file.append", "xml_file.append", "xml_file.append", "xml_file.append", "open().write", "logger.info", "map", "len", "len", "open().readlines", "len", "len", "line.split", "logger.debug", "range", "txt2xml.wrap_topic_result", "xml_content.append", "os.path.exists", "os.makedirs", "logger.info", "logger.info", "open().readlines", "len", "float", "topic_res.append", "open", "open", "os.path.split", "os.path.split", "open"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.read_topics", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.wrap_topic_result"], ["", "def", "process", "(", "options", ",", "collection", ",", "input_txt_file", ")", ":", "\n", "    ", "rootpath", "=", "options", ".", "rootpath", "\n", "overwrite", "=", "options", ".", "overwrite", "\n", "trtype", "=", "options", ".", "trtype", "\n", "pclass", "=", "options", ".", "pclass", "\n", "pid", "=", "options", ".", "pid", "\n", "priority", "=", "options", ".", "priority", "\n", "edition", "=", "options", ".", "edition", "\n", "desc", "=", "options", ".", "desc", "\n", "etime", "=", "options", ".", "etime", "\n", "topk", "=", "options", ".", "topk", "\n", "\n", "output_xml_file", "=", "input_txt_file", "+", "'.xml'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "output_xml_file", ")", ":", "\n", "        ", "if", "overwrite", ":", "\n", "            ", "logger", ".", "info", "(", "'%s exists. Overwrite'", "%", "output_xml_file", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'%s exists. Use \"--overwrite 1\" if you want to overwrite'", "%", "output_xml_file", ")", "\n", "return", "\n", "\n", "", "", "topics_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'TextData'", ",", "'%s.avs.txt'", "%", "edition", ")", "\n", "shots_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'VideoSets'", ",", "'%s.txt'", "%", "collection", ")", "\n", "\n", "topics", "=", "read_topics", "(", "topics_file", ")", "\n", "tnum_set", "=", "set", "(", "[", "x", "[", "0", "]", "for", "x", "in", "topics", "]", ")", "\n", "shot_set", "=", "set", "(", "map", "(", "str", ".", "strip", ",", "open", "(", "shots_file", ")", ".", "readlines", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'%s -> %d testing topics, %d shots'", ",", "edition", ",", "len", "(", "tnum_set", ")", ",", "len", "(", "shot_set", ")", ")", "\n", "\n", "data", "=", "map", "(", "str", ".", "strip", ",", "open", "(", "input_txt_file", ")", ".", "readlines", "(", ")", ")", "\n", "assert", "(", "len", "(", "data", ")", "==", "len", "(", "tnum_set", ")", ")", ",", "\"number of topics does not match\"", "\n", "\n", "xml_content", "=", "[", "]", "\n", "for", "line", "in", "data", ":", "\n", "        ", "elems", "=", "line", ".", "split", "(", ")", "\n", "tNum", "=", "elems", "[", "0", "]", "\n", "del", "elems", "[", "0", "]", "\n", "\n", "assert", "(", "len", "(", "elems", ")", ">=", "(", "2", "*", "topk", ")", ")", "# shall contain at least topk pairs", "\n", "\n", "logger", ".", "debug", "(", "'processing testing topic %s'", ",", "tNum", ")", "\n", "prev_score", "=", "1e8", "\n", "topic_res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "topk", ",", "2", ")", ":", "\n", "            ", "shot_id", "=", "elems", "[", "i", "]", "\n", "score", "=", "float", "(", "elems", "[", "i", "+", "1", "]", ")", "\n", "assert", "(", "shot_id", "in", "shot_set", ")", ",", "\"invalid shot id: %s\"", "%", "shot_id", "\n", "assert", "(", "score", "<", "(", "prev_score", "+", "1e-8", ")", ")", ",", "\"shots have not been sorted\"", "\n", "prev_score", "=", "score", "\n", "topic_res", ".", "append", "(", "shot_id", ")", "\n", "\n", "", "xml_content", "+=", "wrap_topic_result", "(", "tNum", ",", "etime", ",", "topic_res", ")", "\n", "xml_content", ".", "append", "(", "''", ")", "# add a new line", "\n", "\n", "", "xml_file", "=", "[", "XML_HEAD", "]", "\n", "xml_file", ".", "append", "(", "''", ")", "# add a new line", "\n", "xml_file", ".", "append", "(", "'<videoAdhocSearchResults>'", ")", "\n", "xml_file", ".", "append", "(", "'<videoAdhocSearchRunResult trType=\"%s\" class=\"%s\" pid=\"%s\" priority=\"%s\" desc=\"%s\">'", "%", "(", "trtype", ",", "pclass", ",", "pid", ",", "priority", ",", "desc", ")", ")", "\n", "xml_file", "+=", "xml_content", "\n", "xml_file", ".", "append", "(", "''", ")", "# add a new line", "\n", "xml_file", ".", "append", "(", "'</videoAdhocSearchRunResult>'", ")", "\n", "xml_file", ".", "append", "(", "'</videoAdhocSearchResults>'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "split", "(", "output_xml_file", ")", "[", "0", "]", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "output_xml_file", ")", "[", "0", "]", ")", "\n", "\n", "", "open", "(", "output_xml_file", ",", "'w'", ")", ".", "write", "(", "'\\n'", ".", "join", "(", "xml_file", ")", ")", "\n", "logger", ".", "info", "(", "'%s -> %s'", "%", "(", "input_txt_file", ",", "output_xml_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.tv-avs-eval.txt2xml.main": [[113, 136], ["OptionParser", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.parse_args", "txt2xml.process", "len", "OptionParser.print_help"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.combine_features.process"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "if", "argv", "is", "None", ":", "\n", "        ", "argv", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "from", "optparse", "import", "OptionParser", "\n", "parser", "=", "OptionParser", "(", "usage", "=", "\"\"\"usage: %prog [options] collection input_txt_file\"\"\"", ")", "\n", "parser", ".", "add_option", "(", "'--rootpath'", ",", "type", "=", "str", ",", "default", "=", "ROOT_PATH", ",", "help", "=", "'path to datasets. (default: %s)'", "%", "ROOT_PATH", ")", "\n", "parser", ".", "add_option", "(", "\"--overwrite\"", ",", "default", "=", "0", ",", "type", "=", "\"int\"", ",", "help", "=", "\"overwrite existing file (default: 0)\"", ")", "\n", "parser", ".", "add_option", "(", "\"--trtype\"", ",", "default", "=", "TRAIN_TYPE", ",", "type", "=", "\"string\"", ",", "help", "=", "\"training type (default: %s)\"", "%", "TRAIN_TYPE", ")", "\n", "parser", ".", "add_option", "(", "\"--edition\"", ",", "default", "=", "EDITION", ",", "type", "=", "\"string\"", ",", "help", "=", "\"trecvid edition (default: %s)\"", "%", "EDITION", ")", "\n", "parser", ".", "add_option", "(", "\"--pclass\"", ",", "default", "=", "PCLASS", ",", "type", "=", "\"string\"", ",", "help", "=", "\"processing type (default: %s)\"", "%", "PCLASS", ")", "\n", "parser", ".", "add_option", "(", "\"--pid\"", ",", "default", "=", "PID", ",", "type", "=", "\"string\"", ",", "help", "=", "\"participant ID (default: %s)\"", "%", "PID", ")", "\n", "parser", ".", "add_option", "(", "\"--desc\"", ",", "default", "=", "DESC", ",", "type", "=", "\"string\"", ",", "help", "=", "\"description of this run (default: %s)\"", "%", "DESC", ")", "\n", "parser", ".", "add_option", "(", "\"--etime\"", ",", "default", "=", "ETIME", ",", "type", "=", "\"float\"", ",", "help", "=", "\"elapsed time in seconds (default: %g)\"", "%", "ETIME", ")", "\n", "parser", ".", "add_option", "(", "\"--topk\"", ",", "default", "=", "TOPK", ",", "type", "=", "\"int\"", ",", "help", "=", "\"number of returned shots per query (default: %d)\"", "%", "TOPK", ")", "\n", "parser", ".", "add_option", "(", "\"--priority\"", ",", "default", "=", "PRIORITY", ",", "type", "=", "\"int\"", ",", "help", "=", "\"priority (default: %d)\"", "%", "PRIORITY", ")", "\n", "\n", "(", "options", ",", "args", ")", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "if", "len", "(", "args", ")", "<", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "return", "1", "\n", "\n", "", "return", "process", "(", "options", ",", "args", "[", "0", "]", ",", "args", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.makedirsforfile": [[17, 22], ["os.makedirs", "os.path.split"], "function", ["None"], ["def", "makedirsforfile", "(", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "filename", ")", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.checkToSkip": [[25, 35], ["os.path.exists", "print", "print", "print"], "function", ["None"], ["", "", "def", "checkToSkip", "(", "filename", ",", "overwrite", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"%s exists.\"", "%", "filename", ")", ",", "\n", "if", "overwrite", ":", "\n", "            ", "print", "(", "\"overwrite\"", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"skip\"", ")", "\n", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.printMessage": [[37, 39], ["print", "time.strftime"], "function", ["None"], ["", "def", "printMessage", "(", "message_type", ",", "trace", ",", "message", ")", ":", "\n", "    ", "print", "(", "'%s %s [%s] %s'", "%", "(", "time", ".", "strftime", "(", "'%d/%m/%Y %H:%M:%S'", ")", ",", "message_type", ",", "trace", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.printStatus": [[40, 42], ["common.printMessage"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.printMessage"], ["", "def", "printStatus", "(", "trace", ",", "message", ")", ":", "\n", "    ", "printMessage", "(", "'INFO'", ",", "trace", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.printError": [[43, 45], ["common.printMessage"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.printMessage"], ["", "def", "printError", "(", "trace", ",", "message", ")", ":", "\n", "    ", "printMessage", "(", "'ERROR'", ",", "trace", ",", "message", ")", "", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.CustomObjectScope.__init__": [[41, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "custom_objects", "=", "args", "\n", "self", ".", "backup", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.CustomObjectScope.__enter__": [[45, 50], ["_GLOBAL_CUSTOM_OBJECTS.copy", "_GLOBAL_CUSTOM_OBJECTS.update"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "backup", "=", "_GLOBAL_CUSTOM_OBJECTS", ".", "copy", "(", ")", "\n", "for", "objects", "in", "self", ".", "custom_objects", ":", "\n", "            ", "_GLOBAL_CUSTOM_OBJECTS", ".", "update", "(", "objects", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.CustomObjectScope.__exit__": [[51, 54], ["_GLOBAL_CUSTOM_OBJECTS.clear", "_GLOBAL_CUSTOM_OBJECTS.update"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "_GLOBAL_CUSTOM_OBJECTS", ".", "clear", "(", ")", "\n", "_GLOBAL_CUSTOM_OBJECTS", ".", "update", "(", "self", ".", "backup", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.Progbar.__init__": [[299, 318], ["collections.OrderedDict", "time.time", "set", "set", "hasattr", "sys.stdout.isatty"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target", ",", "width", "=", "30", ",", "verbose", "=", "1", ",", "interval", "=", "0.05", ",", "\n", "stateful_metrics", "=", "None", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "interval", "=", "interval", "\n", "if", "stateful_metrics", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", "stateful_metrics", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", ")", "\n", "\n", "", "self", ".", "_dynamic_display", "=", "(", "(", "hasattr", "(", "sys", ".", "stdout", ",", "'isatty'", ")", "and", "\n", "sys", ".", "stdout", ".", "isatty", "(", ")", ")", "or", "\n", "'ipykernel'", "in", "sys", ".", "modules", ")", "\n", "self", ".", "_total_width", "=", "0", "\n", "self", ".", "_seen_so_far", "=", "0", "\n", "self", ".", "_values", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_last_update", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.Progbar.update": [[319, 437], ["time.time", "len", "sys.stdout.write", "len", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "int", "isinstance", "int", "float", "numpy.mean", "sys.stdout.write", "sys.stdout.flush", "numpy.floor", "abs", "numpy.mean", "numpy.log10", "max", "max"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the progress bar.\n\n        # Arguments\n            current: Index of current step.\n            values: List of tuples:\n                `(name, value_for_last_step)`.\n                If `name` is in `stateful_metrics`,\n                `value_for_last_step` will be displayed as-is.\n                Else, an average of the metric over time will be displayed.\n        \"\"\"", "\n", "values", "=", "values", "or", "[", "]", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stateful_metrics", ":", "\n", "                ", "if", "k", "not", "in", "self", ".", "_values", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", ",", "\n", "current", "-", "self", ".", "_seen_so_far", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "self", ".", "_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_values", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "_seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "info", "=", "' - %.0fs'", "%", "(", "now", "-", "self", ".", "_start", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "if", "(", "now", "-", "self", ".", "_last_update", "<", "self", ".", "interval", "and", "\n", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ")", ":", "\n", "                ", "return", "\n", "\n", "", "prev_total_width", "=", "self", ".", "_total_width", "\n", "if", "self", ".", "_dynamic_display", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "                ", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%d ['", "%", "(", "numdigits", ",", "self", ".", "target", ")", "\n", "bar", "=", "barstr", "%", "current", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                    ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                        ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                        ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "", "else", ":", "\n", "                ", "bar", "=", "'%7d/Unknown'", "%", "current", "\n", "\n", "", "self", ".", "_total_width", "=", "len", "(", "bar", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "\n", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "_start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ":", "\n", "                ", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "if", "eta", ">", "3600", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d:%02d'", "%", "(", "eta", "//", "3600", ",", "(", "eta", "%", "3600", ")", "//", "60", ",", "eta", "%", "60", ")", "\n", "", "elif", "eta", ">", "60", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d'", "%", "(", "eta", "//", "60", ",", "eta", "%", "60", ")", "\n", "", "else", ":", "\n", "                    ", "eta_format", "=", "'%ds'", "%", "eta", "\n", "\n", "", "info", "=", "' - ETA: %s'", "%", "eta_format", "\n", "", "else", ":", "\n", "                ", "if", "time_per_unit", ">=", "1", ":", "\n", "                    ", "info", "+=", "' %.0fs/step'", "%", "time_per_unit", "\n", "", "elif", "time_per_unit", ">=", "1e-3", ":", "\n", "                    ", "info", "+=", "' %.0fms/step'", "%", "(", "time_per_unit", "*", "1e3", ")", "\n", "", "else", ":", "\n", "                    ", "info", "+=", "' %.0fus/step'", "%", "(", "time_per_unit", "*", "1e6", ")", "\n", "\n", "", "", "for", "k", "in", "self", ".", "_values", ":", "\n", "                ", "info", "+=", "' - %s:'", "%", "k", "\n", "if", "isinstance", "(", "self", ".", "_values", "[", "k", "]", ",", "list", ")", ":", "\n", "                    ", "avg", "=", "np", ".", "mean", "(", "\n", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "abs", "(", "avg", ")", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "else", ":", "\n", "                    ", "info", "+=", "' %s'", "%", "self", ".", "_values", "[", "k", "]", "\n", "\n", "", "", "self", ".", "_total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "_total_width", ":", "\n", "                ", "info", "+=", "(", "' '", "*", "(", "prev_total_width", "-", "self", ".", "_total_width", ")", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "+=", "'\\n'", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "elif", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "self", ".", "target", "is", "None", "or", "current", ">=", "self", ".", "target", ":", "\n", "                ", "for", "k", "in", "self", ".", "_values", ":", "\n", "                    ", "info", "+=", "' - %s:'", "%", "k", "\n", "avg", "=", "np", ".", "mean", "(", "\n", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "avg", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "info", "+=", "'\\n'", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "self", ".", "_last_update", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.Progbar.add": [[438, 440], ["generic_utils.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "add", "(", "self", ",", "n", ",", "values", "=", "None", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "_seen_so_far", "+", "n", ",", "values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.custom_object_scope": [[56, 84], ["generic_utils.CustomObjectScope"], "function", ["None"], ["", "", "def", "custom_object_scope", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Provides a scope that changes to `_GLOBAL_CUSTOM_OBJECTS` cannot escape.\n\n    Convenience wrapper for `CustomObjectScope`.\n    Code within a `with` statement will be able to access custom objects\n    by name. Changes to global custom objects persist\n    within the enclosing `with` statement. At end of the `with` statement,\n    global custom objects are reverted to state\n    at beginning of the `with` statement.\n\n    # Example\n\n    Consider a custom object `MyObject`\n\n    ```python\n        with custom_object_scope({'MyObject':MyObject}):\n            layer = Dense(..., kernel_regularizer='MyObject')\n            # save, load, etc. will recognize custom object by name\n    ```\n\n    # Arguments\n        *args: Variable length list of dictionaries of name,\n            class pairs to add to custom objects.\n\n    # Returns\n        Object of type `CustomObjectScope`.\n    \"\"\"", "\n", "return", "CustomObjectScope", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.get_custom_objects": [[86, 104], ["None"], "function", ["None"], ["", "def", "get_custom_objects", "(", ")", ":", "\n", "    ", "\"\"\"Retrieves a live reference to the global dictionary of custom objects.\n\n    Updating and clearing custom objects using `custom_object_scope`\n    is preferred, but `get_custom_objects` can\n    be used to directly access `_GLOBAL_CUSTOM_OBJECTS`.\n\n    # Example\n\n    ```python\n        get_custom_objects().clear()\n        get_custom_objects()['MyObject'] = MyObject\n    ```\n\n    # Returns\n        Global dictionary of names to classes (`_GLOBAL_CUSTOM_OBJECTS`).\n    \"\"\"", "\n", "return", "_GLOBAL_CUSTOM_OBJECTS", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.serialize_keras_object": [[106, 118], ["hasattr", "hasattr", "ValueError", "instance.get_config"], "function", ["None"], ["", "def", "serialize_keras_object", "(", "instance", ")", ":", "\n", "    ", "if", "instance", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "hasattr", "(", "instance", ",", "'get_config'", ")", ":", "\n", "        ", "return", "{", "\n", "'class_name'", ":", "instance", ".", "__class__", ".", "__name__", ",", "\n", "'config'", ":", "instance", ".", "get_config", "(", ")", "\n", "}", "\n", "", "if", "hasattr", "(", "instance", ",", "'__name__'", ")", ":", "\n", "        ", "return", "instance", ".", "__name__", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot serialize'", ",", "instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.deserialize_keras_object": [[120, 169], ["isinstance", "hasattr", "isinstance", "ValueError", "generic_utils.has_arg", "ValueError", "module_objects.get", "module_objects.get.from_config", "generic_utils.CustomObjectScope", "module_objects.get.from_config", "generic_utils.CustomObjectScope", "module_objects.get.", "custom_objects.get", "str", "ValueError", "module_objects.get", "dict", "ValueError", "list", "list", "_GLOBAL_CUSTOM_OBJECTS.items", "custom_objects.items"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.has_arg"], ["", "", "def", "deserialize_keras_object", "(", "identifier", ",", "module_objects", "=", "None", ",", "\n", "custom_objects", "=", "None", ",", "\n", "printable_module_name", "=", "'object'", ")", ":", "\n", "    ", "if", "isinstance", "(", "identifier", ",", "dict", ")", ":", "\n", "# In this case we are dealing with a Keras config dictionary.", "\n", "        ", "config", "=", "identifier", "\n", "if", "'class_name'", "not", "in", "config", "or", "'config'", "not", "in", "config", ":", "\n", "            ", "raise", "ValueError", "(", "'Improper config format: '", "+", "str", "(", "config", ")", ")", "\n", "", "class_name", "=", "config", "[", "'class_name'", "]", "\n", "if", "custom_objects", "and", "class_name", "in", "custom_objects", ":", "\n", "            ", "cls", "=", "custom_objects", "[", "class_name", "]", "\n", "", "elif", "class_name", "in", "_GLOBAL_CUSTOM_OBJECTS", ":", "\n", "            ", "cls", "=", "_GLOBAL_CUSTOM_OBJECTS", "[", "class_name", "]", "\n", "", "else", ":", "\n", "            ", "module_objects", "=", "module_objects", "or", "{", "}", "\n", "cls", "=", "module_objects", ".", "get", "(", "class_name", ")", "\n", "if", "cls", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown '", "+", "printable_module_name", "+", "\n", "': '", "+", "class_name", ")", "\n", "", "", "if", "hasattr", "(", "cls", ",", "'from_config'", ")", ":", "\n", "            ", "custom_objects", "=", "custom_objects", "or", "{", "}", "\n", "if", "has_arg", "(", "cls", ".", "from_config", ",", "'custom_objects'", ")", ":", "\n", "                ", "return", "cls", ".", "from_config", "(", "config", "[", "'config'", "]", ",", "\n", "custom_objects", "=", "dict", "(", "list", "(", "_GLOBAL_CUSTOM_OBJECTS", ".", "items", "(", ")", ")", "+", "\n", "list", "(", "custom_objects", ".", "items", "(", ")", ")", ")", ")", "\n", "", "with", "CustomObjectScope", "(", "custom_objects", ")", ":", "\n", "                ", "return", "cls", ".", "from_config", "(", "config", "[", "'config'", "]", ")", "\n", "", "", "else", ":", "\n", "# Then `cls` may be a function returning a class.", "\n", "# in this case by convention `config` holds", "\n", "# the kwargs of the function.", "\n", "            ", "custom_objects", "=", "custom_objects", "or", "{", "}", "\n", "with", "CustomObjectScope", "(", "custom_objects", ")", ":", "\n", "                ", "return", "cls", "(", "**", "config", "[", "'config'", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "identifier", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "function_name", "=", "identifier", "\n", "if", "custom_objects", "and", "function_name", "in", "custom_objects", ":", "\n", "            ", "fn", "=", "custom_objects", ".", "get", "(", "function_name", ")", "\n", "", "elif", "function_name", "in", "_GLOBAL_CUSTOM_OBJECTS", ":", "\n", "            ", "fn", "=", "_GLOBAL_CUSTOM_OBJECTS", "[", "function_name", "]", "\n", "", "else", ":", "\n", "            ", "fn", "=", "module_objects", ".", "get", "(", "function_name", ")", "\n", "if", "fn", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown '", "+", "printable_module_name", "+", "\n", "':'", "+", "function_name", ")", "\n", "", "", "return", "fn", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Could not interpret serialized '", "+", "\n", "printable_module_name", "+", "': '", "+", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.func_dump": [[171, 188], ["marshal.dumps", "codecs.encode().decode", "tuple", "codecs.encode"], "function", ["None"], ["", "", "def", "func_dump", "(", "func", ")", ":", "\n", "    ", "\"\"\"Serializes a user defined function.\n\n    # Arguments\n        func: the function to serialize.\n\n    # Returns\n        A tuple `(code, defaults, closure)`.\n    \"\"\"", "\n", "raw_code", "=", "marshal", ".", "dumps", "(", "func", ".", "__code__", ")", "\n", "code", "=", "codecs", ".", "encode", "(", "raw_code", ",", "'base64'", ")", ".", "decode", "(", "'ascii'", ")", "\n", "defaults", "=", "func", ".", "__defaults__", "\n", "if", "func", ".", "__closure__", ":", "\n", "        ", "closure", "=", "tuple", "(", "c", ".", "cell_contents", "for", "c", "in", "func", ".", "__closure__", ")", "\n", "", "else", ":", "\n", "        ", "closure", "=", "None", "\n", "", "return", "code", ",", "defaults", ",", "closure", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.func_load": [[190, 241], ["isinstance", "types.FunctionType", "isinstance", "tuple", "codecs.decode", "marshal.loads", "globals", "tuple", "isinstance", "marshal.loads.encode", "marshal.loads.encode", "marshal.loads", "type", "generic_utils.func_load.ensure_value_to_cell"], "function", ["None"], ["", "def", "func_load", "(", "code", ",", "defaults", "=", "None", ",", "closure", "=", "None", ",", "globs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Deserializes a user defined function.\n\n    # Arguments\n        code: bytecode of the function.\n        defaults: defaults of the function.\n        closure: closure of the function.\n        globs: dictionary of global objects.\n\n    # Returns\n        A function object.\n    \"\"\"", "\n", "if", "isinstance", "(", "code", ",", "(", "tuple", ",", "list", ")", ")", ":", "# unpack previous dump", "\n", "        ", "code", ",", "defaults", ",", "closure", "=", "code", "\n", "if", "isinstance", "(", "defaults", ",", "list", ")", ":", "\n", "            ", "defaults", "=", "tuple", "(", "defaults", ")", "\n", "\n", "", "", "def", "ensure_value_to_cell", "(", "value", ")", ":", "\n", "        ", "\"\"\"Ensures that a value is converted to a python cell object.\n\n        # Arguments\n            value: Any value that needs to be casted to the cell type\n\n        # Returns\n            A value wrapped as a cell object (see function \"func_load\")\n\n        \"\"\"", "\n", "def", "dummy_fn", "(", ")", ":", "\n", "            ", "value", "# just access it so it gets captured in .__closure__", "\n", "\n", "", "cell_value", "=", "dummy_fn", ".", "__closure__", "[", "0", "]", "\n", "if", "not", "isinstance", "(", "value", ",", "type", "(", "cell_value", ")", ")", ":", "\n", "            ", "return", "cell_value", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "\n", "", "", "if", "closure", "is", "not", "None", ":", "\n", "        ", "closure", "=", "tuple", "(", "ensure_value_to_cell", "(", "_", ")", "for", "_", "in", "closure", ")", "\n", "", "try", ":", "\n", "        ", "raw_code", "=", "codecs", ".", "decode", "(", "code", ".", "encode", "(", "'ascii'", ")", ",", "'base64'", ")", "\n", "code", "=", "marshal", ".", "loads", "(", "raw_code", ")", "\n", "", "except", "(", "UnicodeEncodeError", ",", "binascii", ".", "Error", ",", "ValueError", ")", ":", "\n", "# backwards compatibility for models serialized prior to 2.1.2", "\n", "        ", "raw_code", "=", "code", ".", "encode", "(", "'raw_unicode_escape'", ")", "\n", "code", "=", "marshal", ".", "loads", "(", "raw_code", ")", "\n", "", "if", "globs", "is", "None", ":", "\n", "        ", "globs", "=", "globals", "(", ")", "\n", "", "return", "python_types", ".", "FunctionType", "(", "code", ",", "globs", ",", "\n", "name", "=", "code", ".", "co_name", ",", "\n", "argdefs", "=", "defaults", ",", "\n", "closure", "=", "closure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.generic_utils.has_arg": [[243, 283], ["inspect.getargspec", "inspect.getfullargspec", "inspect.signature", "inspect.signature.parameters.get", "inspect.signature.parameters.values"], "function", ["None"], ["", "def", "has_arg", "(", "fn", ",", "name", ",", "accept_all", "=", "False", ")", ":", "\n", "    ", "\"\"\"Checks if a callable accepts a given keyword argument.\n\n    For Python 2, checks if there is an argument with the given name.\n\n    For Python 3, checks if there is an argument with the given name, and\n    also whether this argument can be called with a keyword (i.e. if it is\n    not a positional-only argument).\n\n    # Arguments\n        fn: Callable to inspect.\n        name: Check if `fn` can be called with `name` as a keyword argument.\n        accept_all: What to return if there is no parameter called `name`\n                    but the function accepts a `**kwargs` argument.\n\n    # Returns\n        bool, whether `fn` accepts a `name` keyword argument.\n    \"\"\"", "\n", "if", "sys", ".", "version_info", "<", "(", "3", ",", ")", ":", "\n", "        ", "arg_spec", "=", "inspect", ".", "getargspec", "(", "fn", ")", "\n", "if", "accept_all", "and", "arg_spec", ".", "keywords", "is", "not", "None", ":", "\n", "            ", "return", "True", "\n", "", "return", "(", "name", "in", "arg_spec", ".", "args", ")", "\n", "", "elif", "sys", ".", "version_info", "<", "(", "3", ",", "3", ")", ":", "\n", "        ", "arg_spec", "=", "inspect", ".", "getfullargspec", "(", "fn", ")", "\n", "if", "accept_all", "and", "arg_spec", ".", "varkw", "is", "not", "None", ":", "\n", "            ", "return", "True", "\n", "", "return", "(", "name", "in", "arg_spec", ".", "args", "or", "\n", "name", "in", "arg_spec", ".", "kwonlyargs", ")", "\n", "", "else", ":", "\n", "        ", "signature", "=", "inspect", ".", "signature", "(", "fn", ")", "\n", "parameter", "=", "signature", ".", "parameters", ".", "get", "(", "name", ")", "\n", "if", "parameter", "is", "None", ":", "\n", "            ", "if", "accept_all", ":", "\n", "                ", "for", "param", "in", "signature", ".", "parameters", ".", "values", "(", ")", ":", "\n", "                    ", "if", "param", ".", "kind", "==", "inspect", ".", "Parameter", ".", "VAR_KEYWORD", ":", "\n", "                        ", "return", "True", "\n", "", "", "", "return", "False", "\n", "", "return", "(", "parameter", ".", "kind", "in", "(", "inspect", ".", "Parameter", ".", "POSITIONAL_OR_KEYWORD", ",", "\n", "inspect", ".", "Parameter", ".", "KEYWORD_ONLY", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.AverageMeter.__init__": [[10, 12], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "(", ".0001", "+", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.AverageMeter.__str__": [[25, 33], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"String representation for logging\n        \"\"\"", "\n", "# for values that should be recorded exactly e.g. iteration number", "\n", "if", "self", ".", "count", "==", "0", ":", "\n", "            ", "return", "str", "(", "self", ".", "val", ")", "\n", "# for stats", "\n", "", "return", "'%.4f (%.4f)'", "%", "(", "self", ".", "val", ",", "self", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.LogCollector.__init__": [[38, 41], ["collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# to keep the order of logged variables deterministic", "\n", "        ", "self", ".", "meters", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.LogCollector.update": [[42, 47], ["util.LogCollector.meters[].update", "util.AverageMeter"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "update", "(", "self", ",", "k", ",", "v", ",", "n", "=", "1", ")", ":", "\n", "# create a new meter if previously not recorded", "\n", "        ", "if", "k", "not", "in", "self", ".", "meters", ":", "\n", "            ", "self", ".", "meters", "[", "k", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.LogCollector.__str__": [[48, 57], ["enumerate", "util.LogCollector.meters.iteritems", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Concatenate the meters in one log line\n        \"\"\"", "\n", "s", "=", "''", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "self", ".", "meters", ".", "iteritems", "(", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "s", "+=", "'  '", "\n", "", "s", "+=", "k", "+", "' '", "+", "str", "(", "v", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.LogCollector.tb_log": [[58, 63], ["util.LogCollector.meters.iteritems", "tb_logger.log_value"], "methods", ["None"], ["", "def", "tb_log", "(", "self", ",", "tb_logger", ",", "prefix", "=", "''", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log using tensorboard\n        \"\"\"", "\n", "for", "k", ",", "v", "in", "self", ".", "meters", ".", "iteritems", "(", ")", ":", "\n", "            ", "tb_logger", ".", "log_value", "(", "prefix", "+", "k", ",", "v", ".", "val", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.__init__": [[101, 120], ["collections.OrderedDict", "time.time", "set", "set", "hasattr", "sys.stdout.isatty"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target", ",", "width", "=", "30", ",", "verbose", "=", "1", ",", "interval", "=", "0.05", ",", "\n", "stateful_metrics", "=", "None", ")", ":", "\n", "        ", "self", ".", "target", "=", "target", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "interval", "=", "interval", "\n", "if", "stateful_metrics", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", "stateful_metrics", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stateful_metrics", "=", "set", "(", ")", "\n", "\n", "", "self", ".", "_dynamic_display", "=", "(", "(", "hasattr", "(", "sys", ".", "stdout", ",", "'isatty'", ")", "and", "\n", "sys", ".", "stdout", ".", "isatty", "(", ")", ")", "or", "\n", "'ipykernel'", "in", "sys", ".", "modules", ")", "\n", "self", ".", "_total_width", "=", "0", "\n", "self", ".", "_seen_so_far", "=", "0", "\n", "self", ".", "_values", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_last_update", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update": [[121, 239], ["time.time", "len", "sys.stdout.write", "len", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "int", "isinstance", "int", "float", "numpy.mean", "sys.stdout.write", "sys.stdout.flush", "numpy.floor", "abs", "numpy.mean", "numpy.log10", "max", "max"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the progress bar.\n\n        # Arguments\n            current: Index of current step.\n            values: List of tuples:\n                `(name, value_for_last_step)`.\n                If `name` is in `stateful_metrics`,\n                `value_for_last_step` will be displayed as-is.\n                Else, an average of the metric over time will be displayed.\n        \"\"\"", "\n", "values", "=", "values", "or", "[", "]", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "stateful_metrics", ":", "\n", "                ", "if", "k", "not", "in", "self", ".", "_values", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", ",", "\n", "current", "-", "self", ".", "_seen_so_far", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "self", ".", "_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "_seen_so_far", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_values", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "_seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "info", "=", "' - %.0fs'", "%", "(", "now", "-", "self", ".", "_start", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "if", "(", "now", "-", "self", ".", "_last_update", "<", "self", ".", "interval", "and", "\n", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ")", ":", "\n", "                ", "return", "\n", "\n", "", "prev_total_width", "=", "self", ".", "_total_width", "\n", "if", "self", ".", "_dynamic_display", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", ":", "\n", "                ", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%d ['", "%", "(", "numdigits", ",", "self", ".", "target", ")", "\n", "bar", "=", "barstr", "%", "current", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                    ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                        ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                        ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "", "else", ":", "\n", "                ", "bar", "=", "'%7d/Unknown'", "%", "current", "\n", "\n", "", "self", ".", "_total_width", "=", "len", "(", "bar", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "\n", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "_start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", "<", "self", ".", "target", ":", "\n", "                ", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "if", "eta", ">", "3600", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d:%02d'", "%", "(", "eta", "//", "3600", ",", "(", "eta", "%", "3600", ")", "//", "60", ",", "eta", "%", "60", ")", "\n", "", "elif", "eta", ">", "60", ":", "\n", "                    ", "eta_format", "=", "'%d:%02d'", "%", "(", "eta", "//", "60", ",", "eta", "%", "60", ")", "\n", "", "else", ":", "\n", "                    ", "eta_format", "=", "'%ds'", "%", "eta", "\n", "\n", "", "info", "=", "' - ETA: %s'", "%", "eta_format", "\n", "", "else", ":", "\n", "                ", "if", "time_per_unit", ">=", "1", ":", "\n", "                    ", "info", "+=", "' %.0fs/step'", "%", "time_per_unit", "\n", "", "elif", "time_per_unit", ">=", "1e-3", ":", "\n", "                    ", "info", "+=", "' %.0fms/step'", "%", "(", "time_per_unit", "*", "1e3", ")", "\n", "", "else", ":", "\n", "                    ", "info", "+=", "' %.0fus/step'", "%", "(", "time_per_unit", "*", "1e6", ")", "\n", "\n", "", "", "for", "k", "in", "self", ".", "_values", ":", "\n", "                ", "info", "+=", "' - %s:'", "%", "k", "\n", "if", "isinstance", "(", "self", ".", "_values", "[", "k", "]", ",", "list", ")", ":", "\n", "                    ", "avg", "=", "np", ".", "mean", "(", "\n", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "abs", "(", "avg", ")", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "else", ":", "\n", "                    ", "info", "+=", "' %s'", "%", "self", ".", "_values", "[", "k", "]", "\n", "\n", "", "", "self", ".", "_total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "_total_width", ":", "\n", "                ", "info", "+=", "(", "' '", "*", "(", "prev_total_width", "-", "self", ".", "_total_width", ")", ")", "\n", "\n", "", "if", "self", ".", "target", "is", "not", "None", "and", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "+=", "'\\n'", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "elif", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "self", ".", "target", "is", "None", "or", "current", ">=", "self", ".", "target", ":", "\n", "                ", "for", "k", "in", "self", ".", "_values", ":", "\n", "                    ", "info", "+=", "' - %s:'", "%", "k", "\n", "avg", "=", "np", ".", "mean", "(", "\n", "self", ".", "_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "avg", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "info", "+=", "'\\n'", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "self", ".", "_last_update", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add": [[240, 242], ["util.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update"], ["", "def", "add", "(", "self", ",", "n", ",", "values", "=", "None", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "_seen_so_far", "+", "n", ",", "values", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.read_dict": [[64, 70], ["open", "open.read", "eval", "open.close"], "function", ["None"], ["", "", "", "def", "read_dict", "(", "filepath", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'r'", ")", "\n", "a", "=", "f", ".", "read", "(", ")", "\n", "dict_data", "=", "eval", "(", "a", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "dict_data", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.write_dict": [[72, 76], ["open", "open.write", "open.close", "str"], "function", ["None"], ["", "def", "write_dict", "(", "filepath", ",", "dict_data", ")", ":", "\n", "    ", "f", "=", "open", "(", "filepath", ",", "'w'", ")", "\n", "f", ".", "write", "(", "str", "(", "dict_data", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.getVideoId": [[79, 84], ["cap_id.split", "vid_id.endswith", "vid_id.endswith"], "function", ["None"], ["", "def", "getVideoId", "(", "cap_id", ")", ":", "\n", "    ", "vid_id", "=", "cap_id", ".", "split", "(", "'#'", ")", "[", "0", "]", "\n", "if", "vid_id", ".", "endswith", "(", "'.jpg'", ")", "or", "vid_id", ".", "endswith", "(", "'.mp4'", ")", ":", "\n", "        ", "vid_id", "=", "vid_id", "[", ":", "-", "4", "]", "\n", "", "return", "vid_id", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip": [[9, 19], ["os.path.exists", "print", "print", "print"], "function", ["None"], ["def", "checkToSkip", "(", "filename", ",", "overwrite", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"%s exists.\"", "%", "filename", ")", ",", "\n", "if", "overwrite", ":", "\n", "            ", "print", "(", "\"overwrite\"", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"skip\"", ")", "\n", "return", "1", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.process": [[21, 76], ["os.path.join", "os.path.join", "txt2bin.checkToSkip", "open", "set", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.close", "print", "os.path.isdir", "os.makedirs", "print", "open", "os.path.join", "line.strip().split", "set.add", "numpy.array", "np.array.tofile", "imset.append", "map", "math.isnan", "len", "len", "len", "len", "line.strip", "len", "len"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add"], ["", "def", "process", "(", "feat_dim", ",", "inputTextFiles", ",", "resultdir", ",", "overwrite", ")", ":", "\n", "    ", "res_binary_file", "=", "os", ".", "path", ".", "join", "(", "resultdir", ",", "'feature.bin'", ")", "\n", "res_id_file", "=", "os", ".", "path", ".", "join", "(", "resultdir", ",", "'id.txt'", ")", "\n", "\n", "if", "checkToSkip", "(", "res_binary_file", ",", "overwrite", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "resultdir", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "resultdir", ")", "\n", "\n", "", "fw", "=", "open", "(", "res_binary_file", ",", "'wb'", ")", "\n", "processed", "=", "set", "(", ")", "\n", "imset", "=", "[", "]", "\n", "count_line", "=", "0", "\n", "failed", "=", "0", "\n", "\n", "for", "filename", "in", "inputTextFiles", ":", "\n", "        ", "print", "(", "'>>> Processing %s'", "%", "filename", ")", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "            ", "count_line", "+=", "1", "\n", "elems", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "elems", ":", "\n", "                ", "continue", "\n", "", "name", "=", "elems", "[", "0", "]", "\n", "if", "name", "in", "processed", ":", "\n", "                ", "continue", "\n", "", "processed", ".", "add", "(", "name", ")", "\n", "\n", "del", "elems", "[", "0", "]", "\n", "vec", "=", "np", ".", "array", "(", "map", "(", "float", ",", "elems", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "okay", "=", "True", "\n", "for", "x", "in", "vec", ":", "\n", "                ", "if", "math", ".", "isnan", "(", "x", ")", ":", "\n", "                    ", "okay", "=", "False", "\n", "break", "\n", "", "", "if", "not", "okay", ":", "\n", "                ", "failed", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "feat_dim", "==", "0", ":", "\n", "                ", "feat_dim", "=", "len", "(", "vec", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "len", "(", "vec", ")", "==", "feat_dim", ")", ",", "\"dimensionality mismatch: required %d, input %d, id=%s, inputfile=%s\"", "%", "(", "feat_dim", ",", "len", "(", "vec", ")", ",", "name", ",", "filename", ")", "\n", "", "vec", ".", "tofile", "(", "fw", ")", "\n", "#print name, vec", "\n", "imset", ".", "append", "(", "name", ")", "\n", "", "", "fw", ".", "close", "(", ")", "\n", "\n", "fw", "=", "open", "(", "res_id_file", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "' '", ".", "join", "(", "imset", ")", ")", "\n", "fw", ".", "close", "(", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "resultdir", ",", "'shape.txt'", ")", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "'%d %d'", "%", "(", "len", "(", "imset", ")", ",", "feat_dim", ")", ")", "\n", "fw", ".", "close", "(", ")", "\n", "print", "(", "'%d lines parsed, %d ids,  %d failed ->  %d unique ids'", "%", "(", "count_line", ",", "len", "(", "processed", ")", ",", "failed", ",", "len", "(", "imset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.main": [[78, 97], ["optparse.OptionParser", "optparse.OptionParser.add_option", "optparse.OptionParser.parse_args", "int", "txt2bin.process", "len", "optparse.OptionParser.print_help", "int", "x.strip", "open().readlines", "x.strip", "open", "x.strip().startswith", "x.strip"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.combine_features.process"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "if", "argv", "is", "None", ":", "\n", "        ", "argv", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "parser", "=", "OptionParser", "(", "usage", "=", "\"\"\"usage: %prog [options] nDims inputTextFile isFileList resultDir\"\"\"", ")", "\n", "parser", ".", "add_option", "(", "\"--overwrite\"", ",", "default", "=", "0", ",", "type", "=", "\"int\"", ",", "help", "=", "\"overwrite existing file (default=0)\"", ")", "\n", "\n", "(", "options", ",", "args", ")", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "if", "len", "(", "args", ")", "<", "4", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "return", "1", "\n", "\n", "", "fea_dim", "=", "int", "(", "args", "[", "0", "]", ")", "\n", "inputTextFile", "=", "args", "[", "1", "]", "\n", "if", "int", "(", "args", "[", "2", "]", ")", "==", "1", ":", "\n", "        ", "inputTextFiles", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "inputTextFile", ")", ".", "readlines", "(", ")", "if", "x", ".", "strip", "(", ")", "and", "not", "x", ".", "strip", "(", ")", ".", "startswith", "(", "'#'", ")", "]", "\n", "", "else", ":", "\n", "        ", "inputTextFiles", "=", "[", "inputTextFile", "]", "\n", "", "return", "process", "(", "fea_dim", ",", "inputTextFiles", ",", "args", "[", "3", "]", ",", "options", ".", "overwrite", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.combine_features.process": [[18, 61], ["os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "sub_collections.split.split", "os.path.exists", "os.makedirs", "open", "open", "fw_id.write", "logger.info", "logger.info", "logger.info", "sys.exit", "os.path.join", "basic.bigfile.BigFile", "print", "basic.generic_utils.Progbar", "img_ids.extend", "os.path.exists", "os.makedirs", "open", "fw_img.write", "len", "basic.bigfile.BigFile.read_one", "fw_feat.write", "basic.generic_utils.Progbar.add", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add"], ["def", "process", "(", "options", ",", "collection", ",", "featname", ",", "sub_collections", ",", "set_style", ")", ":", "\n", "    ", "rootpath", "=", "options", ".", "rootpath", "\n", "target_feat_dir", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'FeatureData'", ",", "featname", ")", "\n", "target_img_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "set_style", ",", "collection", "+", "'.txt'", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "target_feat_dir", ")", ":", "\n", "        ", "if", "options", ".", "overwrite", ":", "\n", "            ", "logger", ".", "info", "(", "'%s exists! overwrite.'", ",", "target_feat_dir", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'%s exists! quit.'", ",", "target_feat_dir", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_feat_dir", ")", "\n", "\n", "", "target_feat_file", "=", "os", ".", "path", ".", "join", "(", "target_feat_dir", ",", "'id.feature.txt'", ")", "\n", "target_id_file", "=", "os", ".", "path", ".", "join", "(", "target_feat_dir", ",", "'id.txt'", ")", "\n", "sub_collections", "=", "sub_collections", ".", "split", "(", "'@'", ")", "\n", "img_ids", "=", "[", "]", "\n", "\n", "with", "open", "(", "target_feat_file", ",", "'w'", ")", "as", "fw_feat", ",", "open", "(", "target_id_file", ",", "'w'", ")", "as", "fw_id", ":", "\n", "        ", "for", "collect", "in", "sub_collections", ":", "\n", "            ", "feat_dir", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collect", ",", "'FeatureData'", ",", "featname", ")", "\n", "featfile", "=", "BigFile", "(", "feat_dir", ")", "\n", "\n", "print", "(", "\">>> Process %s\"", "%", "collect", ")", "\n", "progbar", "=", "Progbar", "(", "len", "(", "featfile", ".", "names", ")", ")", "\n", "for", "name", "in", "featfile", ".", "names", ":", "\n", "                ", "feat", "=", "featfile", ".", "read_one", "(", "name", ")", "\n", "fw_feat", ".", "write", "(", "'%s %s\\n'", "%", "(", "name", ",", "' '", ".", "join", "(", "[", "'%g'", "%", "x", "for", "x", "in", "feat", "]", ")", ")", ")", "\n", "progbar", ".", "add", "(", "1", ")", "\n", "\n", "", "img_ids", ".", "extend", "(", "featfile", ".", "names", ")", "\n", "\n", "", "fw_id", ".", "write", "(", "' '", ".", "join", "(", "img_ids", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "target_img_file", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'%s exists! quit.'", ",", "target_img_file", ")", "\n", "return", "0", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "target_img_file", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "target_img_file", ")", ")", "\n", "", "with", "open", "(", "target_img_file", ",", "'w'", ")", "as", "fw_img", ":", "\n", "            ", "fw_img", ".", "write", "(", "'\\n'", ".", "join", "(", "img_ids", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.combine_features.main": [[63, 78], ["OptionParser", "OptionParser.add_option", "OptionParser.add_option", "OptionParser.parse_args", "combine_features.process", "len", "OptionParser.print_help"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.None.tester.parse_args", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.combine_features.process"], ["", "", "", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "if", "argv", "is", "None", ":", "\n", "        ", "argv", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "from", "optparse", "import", "OptionParser", "\n", "parser", "=", "OptionParser", "(", "usage", "=", "\"\"\"usage: %prog [options] collection featname sub_collections set_style\"\"\"", ")", "\n", "parser", ".", "add_option", "(", "\"--rootpath\"", ",", "default", "=", "ROOT_PATH", ",", "type", "=", "\"string\"", ",", "help", "=", "\"rootpath (default: %s)\"", "%", "ROOT_PATH", ")", "\n", "parser", ".", "add_option", "(", "\"--overwrite\"", ",", "default", "=", "0", ",", "type", "=", "\"int\"", ",", "help", "=", "\"overwrite existing file (default=0)\"", ")", "\n", "\n", "(", "options", ",", "args", ")", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "if", "len", "(", "args", ")", "<", "4", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "return", "1", "\n", "\n", "", "return", "process", "(", "options", ",", "args", "[", "0", "]", ",", "args", "[", "1", "]", ",", "args", "[", "2", "]", ",", "args", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.__init__": [[12, 20], ["basic.constant.logger.info"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datafile", ",", "ndims", "=", "0", ",", "L1_norm", "=", "0", ",", "L2_norm", "=", "0", ")", ":", "\n", "        ", "logger", ".", "info", "(", "INFO", "+", "'.'", "+", "self", ".", "__class__", ".", "__name__", "+", "' initializing ...'", ")", "\n", "self", ".", "datafile", "=", "datafile", "\n", "self", ".", "nidms", "=", "ndims", "\n", "self", ".", "L1_norm", "=", "L1_norm", "\n", "self", ".", "L2_norm", "=", "L2_norm", "\n", "\n", "assert", "(", "L1_norm", "+", "L2_norm", ")", "<=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.preprocess": [[21, 27], ["vocab.clean_str", "query.strip().split", "query.strip"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.clean_str"], ["", "def", "preprocess", "(", "self", ",", "query", ",", "clear", ")", ":", "\n", "        ", "if", "clear", ":", "\n", "            ", "words", "=", "clean_str", "(", "query", ")", "\n", "", "else", ":", "\n", "            ", "words", "=", "query", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L1_norm": [[28, 31], ["numpy.linalg.norm", "numpy.array"], "methods", ["None"], ["", "def", "do_L1_norm", "(", "self", ",", "vec", ")", ":", "\n", "        ", "L1_norm", "=", "np", ".", "linalg", ".", "norm", "(", "vec", ",", "1", ")", "\n", "return", "1.0", "*", "np", ".", "array", "(", "vec", ")", "/", "L1_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L2_norm": [[32, 35], ["numpy.linalg.norm", "numpy.array"], "methods", ["None"], ["", "def", "do_L2_norm", "(", "self", ",", "vec", ")", ":", "\n", "        ", "L2_norm", "=", "np", ".", "linalg", ".", "norm", "(", "vec", ",", "2", ")", "\n", "return", "1.0", "*", "np", ".", "array", "(", "vec", ")", "/", "L2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.embedding": [[36, 41], ["text2vec.Text2Vec.mapping", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.AveWord2Vec.mapping"], ["", "def", "embedding", "(", "self", ",", "query", ")", ":", "\n", "        ", "vec", "=", "self", ".", "mapping", "(", "query", ")", "\n", "if", "vec", "is", "not", "None", ":", "\n", "            ", "vec", "=", "np", ".", "array", "(", "vec", ")", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Bow2Vec.__init__": [[45, 54], ["text2vec.Text2Vec.__init__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "ndims", "=", "0", ",", "L1_norm", "=", "0", ",", "L2_norm", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bow2Vec", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "ndims", ",", "L1_norm", ",", "L2_norm", ")", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "if", "ndims", "!=", "0", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "vocab", ")", "==", "ndims", ")", ",", "\"feature dimension not match %d != %d\"", "%", "(", "len", "(", "self", ".", "vocab", ")", ",", "self", ".", "ndims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ndims", "=", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Bow2Vec.mapping": [[55, 75], ["text2vec.Bow2Vec.preprocess", "sum", "numpy.array", "text2vec.Bow2Vec.do_L1_norm", "text2vec.Bow2Vec.do_L2_norm", "text2vec.Bow2Vec.vocab"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.preprocess", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L1_norm", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L2_norm"], ["", "", "def", "mapping", "(", "self", ",", "query", ",", "clear", "=", "True", ")", ":", "\n", "        ", "words", "=", "self", ".", "preprocess", "(", "query", ",", "clear", ")", "\n", "\n", "vec", "=", "[", "0.0", "]", "*", "self", ".", "ndims", "\n", "\n", "for", "word", "in", "words", ":", "\n", "            ", "if", "word", "in", "self", ".", "vocab", ".", "word2idx", ":", "\n", "                ", "vec", "[", "self", ".", "vocab", "(", "word", ")", "]", "+=", "1", "\n", "\n", "", "", "if", "sum", "(", "vec", ")", ">", "0", ":", "\n", "\n", "            ", "if", "self", ".", "L1_norm", ":", "\n", "                ", "return", "self", ".", "do_L1_norm", "(", "vec", ")", "\n", "", "if", "self", ".", "L2_norm", ":", "\n", "                ", "return", "self", ".", "do_L2_norm", "(", "vec", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "vec", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.AveWord2Vec.__init__": [[80, 89], ["text2vec.Text2Vec.__init__", "basic.bigfile.BigFile"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__"], ["    ", "def", "__init__", "(", "self", ",", "datafile", ",", "ndims", "=", "0", ",", "L1_norm", "=", "0", ",", "L2_norm", "=", "0", ")", ":", "\n", "        ", "super", "(", "AveWord2Vec", ",", "self", ")", ".", "__init__", "(", "datafile", ",", "ndims", ",", "L1_norm", ",", "L2_norm", ")", "\n", "\n", "self", ".", "word2vec", "=", "BigFile", "(", "datafile", ")", "\n", "if", "ndims", "!=", "0", ":", "\n", "            ", "assert", "(", "self", ".", "word2vec", ".", "ndims", "==", "ndims", ")", ",", "\"feature dimension not match %d != %d\"", "%", "(", "self", ".", "word2vec", ".", "ndims", ",", "self", ".", "ndims", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ndims", "=", "self", ".", "word2vec", ".", "ndims", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.AveWord2Vec.mapping": [[90, 114], ["text2vec.AveWord2Vec.preprocess", "text2vec.AveWord2Vec.word2vec.read", "len", "len", "dict", "len", "numpy.array().mean", "zip", "text2vec.AveWord2Vec.do_L1_norm", "text2vec.AveWord2Vec.do_L2_norm", "vectors.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.preprocess", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L1_norm", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.Text2Vec.do_L2_norm"], ["", "", "def", "mapping", "(", "self", ",", "query", ",", "clear", "=", "True", ")", ":", "\n", "        ", "words", "=", "self", ".", "preprocess", "(", "query", ",", "clear", ")", "\n", "\n", "renamed", ",", "vectors", "=", "self", ".", "word2vec", ".", "read", "(", "words", ")", "\n", "\n", "if", "len", "(", "renamed", ")", "!=", "len", "(", "words", ")", ":", "\n", "            ", "renamed2vec", "=", "dict", "(", "zip", "(", "renamed", ",", "vectors", ")", ")", "\n", "vectors", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                ", "if", "word", "in", "renamed2vec", ":", "\n", "                    ", "vectors", ".", "append", "(", "renamed2vec", "[", "word", "]", ")", "\n", "\n", "\n", "", "", "", "if", "len", "(", "vectors", ")", ">", "0", ":", "\n", "            ", "vec", "=", "np", ".", "array", "(", "vectors", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "if", "self", ".", "L1_norm", ":", "\n", "                ", "return", "self", ".", "do_L1_norm", "(", "vec", ")", "\n", "", "if", "self", ".", "L2_norm", ":", "\n", "                ", "return", "self", ".", "do_L2_norm", "(", "vec", ")", "\n", "\n", "", "return", "vec", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.get_text_encoder": [[120, 123], ["None"], "function", ["None"], ["def", "get_text_encoder", "(", "name", ")", ":", "\n", "    ", "assert", "name", "in", "NAME_TO_ENCODER", "\n", "return", "NAME_TO_ENCODER", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.Dataset4DualEncoding.__init__": [[121, 138], ["set", "len", "open", "cap_reader.readlines", "line.strip().split", "basic.util.getVideoId", "data_provider.Dataset4DualEncoding.cap_ids.append", "data_provider.Dataset4DualEncoding.video_ids.add", "line.strip"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.getVideoId", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add"], ["def", "__init__", "(", "self", ",", "cap_file", ",", "visual_feat", ",", "bow2vec", ",", "vocab", ",", "n_caption", "=", "None", ",", "video2frames", "=", "None", ")", ":", "\n", "# Captions", "\n", "        ", "self", ".", "captions", "=", "{", "}", "\n", "self", ".", "cap_ids", "=", "[", "]", "\n", "self", ".", "video_ids", "=", "set", "(", ")", "\n", "self", ".", "video2frames", "=", "video2frames", "\n", "with", "open", "(", "cap_file", ",", "'r'", ")", "as", "cap_reader", ":", "\n", "            ", "for", "line", "in", "cap_reader", ".", "readlines", "(", ")", ":", "\n", "                ", "cap_id", ",", "caption", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "video_id", "=", "getVideoId", "(", "cap_id", ")", "\n", "self", ".", "captions", "[", "cap_id", "]", "=", "caption", "\n", "self", ".", "cap_ids", ".", "append", "(", "cap_id", ")", "\n", "self", ".", "video_ids", ".", "add", "(", "video_id", ")", "\n", "", "", "self", ".", "visual_feat", "=", "visual_feat", "\n", "self", ".", "bow2vec", "=", "bow2vec", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "cap_ids", ")", "\n", "# if n_caption is not None:", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.Dataset4DualEncoding.__getitem__": [[141, 174], ["basic.util.getVideoId", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "frame_vecs.append", "data_provider.Dataset4DualEncoding.bow2vec.mapping", "vocab.clean_str", "caption.append", "caption.extend", "caption.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_provider.Dataset4DualEncoding.visual_feat.read_one", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_provider.Dataset4DualEncoding.vocab", "data_provider.Dataset4DualEncoding.vocab", "data_provider.Dataset4DualEncoding.vocab"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.getVideoId", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.AveWord2Vec.mapping", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.clean_str"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "cap_id", "=", "self", ".", "cap_ids", "[", "index", "]", "\n", "video_id", "=", "getVideoId", "(", "cap_id", ")", "\n", "\n", "# video", "\n", "frame_list", "=", "self", ".", "video2frames", "[", "video_id", "]", "\n", "frame_vecs", "=", "[", "]", "\n", "for", "frame_id", "in", "frame_list", ":", "\n", "            ", "frame_vecs", ".", "append", "(", "self", ".", "visual_feat", ".", "read_one", "(", "frame_id", ")", ")", "\n", "", "frames_tensor", "=", "torch", ".", "Tensor", "(", "frame_vecs", ")", "\n", "\n", "# text", "\n", "caption", "=", "self", ".", "captions", "[", "cap_id", "]", "\n", "if", "self", ".", "bow2vec", "is", "not", "None", ":", "\n", "            ", "cap_bow", "=", "self", ".", "bow2vec", ".", "mapping", "(", "caption", ")", "\n", "if", "cap_bow", "is", "None", ":", "\n", "                ", "cap_bow", "=", "torch", ".", "zeros", "(", "self", ".", "bow2vec", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "cap_bow", "=", "torch", ".", "Tensor", "(", "cap_bow", ")", "\n", "", "", "else", ":", "\n", "            ", "cap_bow", "=", "None", "\n", "\n", "", "if", "self", ".", "vocab", "is", "not", "None", ":", "\n", "            ", "tokens", "=", "clean_str", "(", "caption", ")", "\n", "caption", "=", "[", "]", "\n", "caption", ".", "append", "(", "self", ".", "vocab", "(", "'<start>'", ")", ")", "\n", "caption", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "tokens", "]", ")", "\n", "caption", ".", "append", "(", "self", ".", "vocab", "(", "'<end>'", ")", ")", "\n", "cap_tensor", "=", "torch", ".", "Tensor", "(", "caption", ")", "\n", "", "else", ":", "\n", "            ", "cap_tensor", "=", "None", "\n", "\n", "", "return", "frames_tensor", ",", "cap_tensor", ",", "cap_bow", ",", "index", ",", "cap_id", ",", "video_id", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.Dataset4DualEncoding.__len__": [[175, 177], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.VisDataSet4DualEncoding.__init__": [[183, 192], ["len", "video2frames.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "visual_feat", ",", "video2frames", "=", "None", ",", "video_ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "visual_feat", "=", "visual_feat", "\n", "self", ".", "video2frames", "=", "video2frames", "\n", "\n", "if", "video_ids", "is", "None", ":", "\n", "            ", "self", ".", "video_ids", "=", "video2frames", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "video_ids", "=", "video_ids", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "video_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.VisDataSet4DualEncoding.__getitem__": [[193, 203], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "frame_vecs.append", "data_provider.VisDataSet4DualEncoding.visual_feat.read_one"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_id", "=", "self", ".", "video_ids", "[", "index", "]", "\n", "\n", "frame_list", "=", "self", ".", "video2frames", "[", "video_id", "]", "\n", "frame_vecs", "=", "[", "]", "\n", "for", "frame_id", "in", "frame_list", ":", "\n", "            ", "frame_vecs", ".", "append", "(", "self", ".", "visual_feat", ".", "read_one", "(", "frame_id", ")", ")", "\n", "", "frames_tensor", "=", "torch", ".", "Tensor", "(", "frame_vecs", ")", "\n", "\n", "return", "frames_tensor", ",", "index", ",", "video_id", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.VisDataSet4DualEncoding.__len__": [[204, 206], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.TxtDataSet4DualEncoding.__init__": [[212, 224], ["len", "open", "cap_reader.readlines", "line.strip().split", "data_provider.TxtDataSet4DualEncoding.cap_ids.append", "line.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cap_file", ",", "bow2vec", ",", "vocab", ")", ":", "\n", "# Captions", "\n", "        ", "self", ".", "captions", "=", "{", "}", "\n", "self", ".", "cap_ids", "=", "[", "]", "\n", "with", "open", "(", "cap_file", ",", "'r'", ")", "as", "cap_reader", ":", "\n", "            ", "for", "line", "in", "cap_reader", ".", "readlines", "(", ")", ":", "\n", "                ", "cap_id", ",", "caption", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "self", ".", "captions", "[", "cap_id", "]", "=", "caption", "\n", "self", ".", "cap_ids", ".", "append", "(", "cap_id", ")", "\n", "", "", "self", ".", "bow2vec", "=", "bow2vec", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "cap_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.TxtDataSet4DualEncoding.__getitem__": [[225, 249], ["data_provider.TxtDataSet4DualEncoding.bow2vec.mapping", "vocab.clean_str", "caption.append", "caption.extend", "caption.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_provider.TxtDataSet4DualEncoding.vocab", "data_provider.TxtDataSet4DualEncoding.vocab", "data_provider.TxtDataSet4DualEncoding.vocab"], "methods", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.text2vec.AveWord2Vec.mapping", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.clean_str"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "cap_id", "=", "self", ".", "cap_ids", "[", "index", "]", "\n", "\n", "caption", "=", "self", ".", "captions", "[", "cap_id", "]", "\n", "if", "self", ".", "bow2vec", "is", "not", "None", ":", "\n", "            ", "cap_bow", "=", "self", ".", "bow2vec", ".", "mapping", "(", "caption", ")", "\n", "if", "cap_bow", "is", "None", ":", "\n", "                ", "cap_bow", "=", "torch", ".", "zeros", "(", "self", ".", "bow2vec", ".", "ndims", ")", "\n", "", "else", ":", "\n", "                ", "cap_bow", "=", "torch", ".", "Tensor", "(", "cap_bow", ")", "\n", "", "", "else", ":", "\n", "            ", "cap_bow", "=", "None", "\n", "\n", "", "if", "self", ".", "vocab", "is", "not", "None", ":", "\n", "            ", "tokens", "=", "clean_str", "(", "caption", ")", "\n", "caption", "=", "[", "]", "\n", "caption", ".", "append", "(", "self", ".", "vocab", "(", "'<start>'", ")", ")", "\n", "caption", ".", "extend", "(", "[", "self", ".", "vocab", "(", "token", ")", "for", "token", "in", "tokens", "]", ")", "\n", "caption", ".", "append", "(", "self", ".", "vocab", "(", "'<end>'", ")", ")", "\n", "cap_tensor", "=", "torch", ".", "Tensor", "(", "caption", ")", "\n", "", "else", ":", "\n", "            ", "cap_tensor", "=", "None", "\n", "\n", "", "return", "cap_tensor", ",", "cap_bow", ",", "index", ",", "cap_id", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.TxtDataSet4DualEncoding.__len__": [[250, 252], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.read_video_ids": [[12, 21], ["open", "cap_reader.readlines", "line.strip().split", "basic.util.getVideoId", "video_ids_list.append", "line.strip"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.getVideoId"], ["def", "read_video_ids", "(", "cap_file", ")", ":", "\n", "    ", "video_ids_list", "=", "[", "]", "\n", "with", "open", "(", "cap_file", ",", "'r'", ")", "as", "cap_reader", ":", "\n", "        ", "for", "line", "in", "cap_reader", ".", "readlines", "(", ")", ":", "\n", "            ", "cap_id", ",", "caption", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "video_id", "=", "getVideoId", "(", "cap_id", ")", "\n", "if", "video_id", "not", "in", "video_ids_list", ":", "\n", "                ", "video_ids_list", ".", "append", "(", "video_id", ")", "\n", "", "", "", "return", "video_ids_list", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.collate_frame_gru_fn": [[24, 66], ["zip", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.sort", "min", "len", "max", "len", "len", "max", "torch.mean", "torch.mean", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "enumerate", "torch.stack", "torch.stack", "len", "len", "len", "max", "torch.zeros", "torch.zeros", "len", "len", "max"], "function", ["None"], ["", "def", "collate_frame_gru_fn", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Build mini-batch tensors from a list of (video, caption) tuples.\n    \"\"\"", "\n", "# Sort a data list by caption length", "\n", "if", "data", "[", "0", "]", "[", "1", "]", "is", "not", "None", ":", "\n", "        ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "\n", "", "videos", ",", "captions", ",", "cap_bows", ",", "idxs", ",", "cap_ids", ",", "video_ids", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# Merge videos (convert tuple of 1D tensor to 4D tensor)", "\n", "video_lengths", "=", "[", "min", "(", "VIDEO_MAX_LEN", ",", "len", "(", "frame", ")", ")", "for", "frame", "in", "videos", "]", "\n", "frame_vec_len", "=", "len", "(", "videos", "[", "0", "]", "[", "0", "]", ")", "\n", "vidoes", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "max", "(", "video_lengths", ")", ",", "frame_vec_len", ")", "\n", "videos_origin", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "frame_vec_len", ")", "\n", "vidoes_mask", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "max", "(", "video_lengths", ")", ")", "\n", "for", "i", ",", "frames", "in", "enumerate", "(", "videos", ")", ":", "\n", "            ", "end", "=", "video_lengths", "[", "i", "]", "\n", "vidoes", "[", "i", ",", ":", "end", ",", ":", "]", "=", "frames", "[", ":", "end", ",", ":", "]", "\n", "videos_origin", "[", "i", ",", ":", "]", "=", "torch", ".", "mean", "(", "frames", ",", "0", ")", "\n", "vidoes_mask", "[", "i", ",", ":", "end", "]", "=", "1.0", "\n", "\n", "", "if", "captions", "[", "0", "]", "is", "not", "None", ":", "\n", "# Merge captions (convert tuple of 1D tensor to 2D tensor)", "\n", "        ", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "words_mask", "=", "torch", ".", "zeros", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "i", "]", "\n", "target", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "words_mask", "[", "i", ",", ":", "end", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "target", "=", "None", "\n", "lengths", "=", "None", "\n", "words_mask", "=", "None", "\n", "\n", "\n", "", "cap_bows", "=", "torch", ".", "stack", "(", "cap_bows", ",", "0", ")", "if", "cap_bows", "[", "0", "]", "is", "not", "None", "else", "None", "\n", "\n", "video_data", "=", "(", "vidoes", ",", "videos_origin", ",", "video_lengths", ",", "vidoes_mask", ")", "\n", "text_data", "=", "(", "target", ",", "cap_bows", ",", "lengths", ",", "words_mask", ")", "\n", "\n", "return", "video_data", ",", "text_data", ",", "idxs", ",", "cap_ids", ",", "video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.collate_frame": [[68, 87], ["zip", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "min", "len", "max", "len", "len", "max", "torch.mean", "torch.mean", "len"], "function", ["None"], ["", "def", "collate_frame", "(", "data", ")", ":", "\n", "\n", "    ", "videos", ",", "idxs", ",", "video_ids", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# Merge videos (convert tuple of 1D tensor to 4D tensor)", "\n", "video_lengths", "=", "[", "min", "(", "VIDEO_MAX_LEN", ",", "len", "(", "frame", ")", ")", "for", "frame", "in", "videos", "]", "\n", "frame_vec_len", "=", "len", "(", "videos", "[", "0", "]", "[", "0", "]", ")", "\n", "vidoes", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "max", "(", "video_lengths", ")", ",", "frame_vec_len", ")", "\n", "videos_origin", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "frame_vec_len", ")", "\n", "vidoes_mask", "=", "torch", ".", "zeros", "(", "len", "(", "videos", ")", ",", "max", "(", "video_lengths", ")", ")", "\n", "for", "i", ",", "frames", "in", "enumerate", "(", "videos", ")", ":", "\n", "            ", "end", "=", "video_lengths", "[", "i", "]", "\n", "vidoes", "[", "i", ",", ":", "end", ",", ":", "]", "=", "frames", "[", ":", "end", ",", ":", "]", "\n", "videos_origin", "[", "i", ",", ":", "]", "=", "torch", ".", "mean", "(", "frames", ",", "0", ")", "\n", "vidoes_mask", "[", "i", ",", ":", "end", "]", "=", "1.0", "\n", "\n", "", "video_data", "=", "(", "vidoes", ",", "videos_origin", ",", "video_lengths", ",", "vidoes_mask", ")", "\n", "\n", "return", "video_data", ",", "idxs", ",", "video_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.collate_text": [[89, 114], ["zip", "torch.sort", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "enumerate", "torch.stack", "torch.stack", "len", "len", "max", "torch.zeros", "torch.zeros", "len", "len", "max"], "function", ["None"], ["", "def", "collate_text", "(", "data", ")", ":", "\n", "    ", "if", "data", "[", "0", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", "\n", "", "captions", ",", "cap_bows", ",", "idxs", ",", "cap_ids", "=", "zip", "(", "*", "data", ")", "\n", "\n", "if", "captions", "[", "0", "]", "is", "not", "None", ":", "\n", "# Merge captions (convert tuple of 1D tensor to 2D tensor)", "\n", "        ", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "captions", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "words_mask", "=", "torch", ".", "zeros", "(", "len", "(", "captions", ")", ",", "max", "(", "lengths", ")", ")", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "captions", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "i", "]", "\n", "target", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "words_mask", "[", "i", ",", ":", "end", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "target", "=", "None", "\n", "lengths", "=", "None", "\n", "words_mask", "=", "None", "\n", "\n", "\n", "", "cap_bows", "=", "torch", ".", "stack", "(", "cap_bows", ",", "0", ")", "if", "cap_bows", "[", "0", "]", "is", "not", "None", "else", "None", "\n", "\n", "text_data", "=", "(", "target", ",", "cap_bows", ",", "lengths", ",", "words_mask", ")", "\n", "\n", "return", "text_data", ",", "idxs", ",", "cap_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_data_loaders": [[253, 271], ["data_provider.Dataset4DualEncoding", "data_provider.Dataset4DualEncoding", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_data_loaders", "(", "cap_files", ",", "visual_feats", ",", "vocab", ",", "bow2vec", ",", "batch_size", "=", "100", ",", "num_workers", "=", "2", ",", "n_caption", "=", "2", ",", "video2frames", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns torch.utils.data.DataLoader for train and validation datasets\n    Args:\n        cap_files: caption files (dict) keys: [train, val]\n        visual_feats: image feats (dict) keys: [train, val]\n    \"\"\"", "\n", "dset", "=", "{", "'train'", ":", "Dataset4DualEncoding", "(", "cap_files", "[", "'train'", "]", ",", "visual_feats", "[", "'train'", "]", ",", "bow2vec", ",", "vocab", ",", "video2frames", "=", "video2frames", "[", "'train'", "]", ")", ",", "\n", "'val'", ":", "Dataset4DualEncoding", "(", "cap_files", "[", "'val'", "]", ",", "visual_feats", "[", "'val'", "]", ",", "bow2vec", ",", "vocab", ",", "n_caption", ",", "video2frames", "=", "video2frames", "[", "'val'", "]", ")", "}", "\n", "\n", "data_loaders", "=", "{", "x", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dset", "[", "x", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "(", "x", "==", "'train'", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_frame_gru_fn", ")", "\n", "for", "x", "in", "cap_files", "}", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_train_data_loaders": [[273, 290], ["data_provider.Dataset4DualEncoding", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_train_data_loaders", "(", "cap_files", ",", "visual_feats", ",", "vocab", ",", "bow2vec", ",", "batch_size", "=", "100", ",", "num_workers", "=", "2", ",", "n_caption", "=", "2", ",", "video2frames", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns torch.utils.data.DataLoader for train and validation datasets\n    Args:\n        cap_files: caption files (dict) keys: [train, val]\n        visual_feats: image feats (dict) keys: [train, val]\n    \"\"\"", "\n", "dset", "=", "{", "'train'", ":", "Dataset4DualEncoding", "(", "cap_files", "[", "'train'", "]", ",", "visual_feats", "[", "'train'", "]", ",", "bow2vec", ",", "vocab", ",", "video2frames", "=", "video2frames", "[", "'train'", "]", ")", "}", "\n", "\n", "data_loaders", "=", "{", "x", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dset", "[", "x", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "(", "x", "==", "'train'", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_frame_gru_fn", ")", "\n", "for", "x", "in", "cap_files", "if", "x", "==", "'train'", "}", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_test_data_loaders": [[292, 310], ["data_provider.Dataset4DualEncoding", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_test_data_loaders", "(", "cap_files", ",", "visual_feats", ",", "vocab", ",", "bow2vec", ",", "batch_size", "=", "100", ",", "num_workers", "=", "2", ",", "n_caption", "=", "2", ",", "video2frames", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns torch.utils.data.DataLoader for test dataset\n    Args:\n        cap_files: caption files (dict) keys: [test]\n        visual_feats: image feats (dict) keys: [test]\n    \"\"\"", "\n", "dset", "=", "{", "'test'", ":", "Dataset4DualEncoding", "(", "cap_files", "[", "'test'", "]", ",", "visual_feats", "[", "'test'", "]", ",", "bow2vec", ",", "vocab", ",", "n_caption", ",", "video2frames", "=", "video2frames", "[", "'test'", "]", ")", "}", "\n", "\n", "\n", "data_loaders", "=", "{", "x", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dset", "[", "x", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_frame_gru_fn", ")", "\n", "for", "x", "in", "cap_files", "}", "\n", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_vis_data_loader": [[312, 322], ["data_provider.VisDataSet4DualEncoding", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_vis_data_loader", "(", "vis_feat", ",", "batch_size", "=", "100", ",", "num_workers", "=", "2", ",", "video2frames", "=", "None", ",", "video_ids", "=", "None", ")", ":", "\n", "    ", "dset", "=", "VisDataSet4DualEncoding", "(", "vis_feat", ",", "video2frames", ",", "video_ids", "=", "video_ids", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_frame", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.data_provider.get_txt_data_loader": [[324, 334], ["data_provider.TxtDataSet4DualEncoding", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_txt_data_loader", "(", "cap_file", ",", "vocab", ",", "bow2vec", ",", "batch_size", "=", "100", ",", "num_workers", "=", "2", ")", ":", "\n", "    ", "dset", "=", "TxtDataSet4DualEncoding", "(", "cap_file", ",", "bow2vec", ",", "vocab", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_text", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__init__": [[19, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "text_style", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "text_style", "=", "text_style", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word": [[25, 30], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__call__": [[31, 35], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2idx", "and", "'bow'", "not", "in", "self", ".", "text_style", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.from_flickr_json": [[40, 47], ["enumerate", "json.load", "open", "str"], "function", ["None"], ["", "", "def", "from_flickr_json", "(", "path", ")", ":", "\n", "    ", "dataset", "=", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ")", ")", "[", "'images'", "]", "\n", "captions", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "captions", "+=", "[", "str", "(", "x", "[", "'raw'", "]", ")", "for", "x", "in", "d", "[", "'sentences'", "]", "]", "\n", "\n", "", "return", "captions", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.clean_str": [[48, 51], ["re.sub", "re.sub.strip().lower().split", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9]\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.from_txt": [[52, 59], ["open", "line.split", "captions.append", "caption.strip"], "function", ["None"], ["", "def", "from_txt", "(", "txt", ")", ":", "\n", "    ", "captions", "=", "[", "]", "\n", "with", "open", "(", "txt", ",", "'rb'", ")", "as", "reader", ":", "\n", "        ", "for", "line", "in", "reader", ":", "\n", "            ", "cap_id", ",", "caption", "=", "line", ".", "split", "(", "' '", ",", "1", ")", "\n", "captions", ".", "append", "(", "caption", ".", "strip", "(", ")", ")", "\n", "", "", "return", "captions", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.build_vocab": [[60, 90], ["collections.Counter", "os.path.join", "vocab.from_txt", "basic.generic_utils.Progbar", "enumerate", "vocab.Vocabulary", "enumerate", "len", "vocab.clean_str", "collections.Counter.update", "basic.generic_utils.Progbar.add", "vocab.Vocabulary.add_word", "vocab.Vocabulary.add_word", "vocab.Vocabulary.add_word", "vocab.Vocabulary.add_word", "vocab.Vocabulary.add_word", "caption.lower", "collections.Counter.items"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.from_txt", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.clean_str", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.update", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.util.Progbar.add", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.Vocabulary.add_word"], ["", "def", "build_vocab", "(", "collection", ",", "text_style", ",", "threshold", "=", "4", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "\"\"\"Build a simple vocabulary wrapper.\"\"\"", "\n", "counter", "=", "Counter", "(", ")", "\n", "cap_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'TextData'", ",", "'%s.caption.txt'", "%", "collection", ")", "\n", "captions", "=", "from_txt", "(", "cap_file", ")", "\n", "pbar", "=", "Progbar", "(", "len", "(", "captions", ")", ")", "\n", "\n", "for", "i", ",", "caption", "in", "enumerate", "(", "captions", ")", ":", "\n", "        ", "tokens", "=", "clean_str", "(", "caption", ".", "lower", "(", ")", ")", "\n", "counter", ".", "update", "(", "tokens", ")", "\n", "\n", "pbar", ".", "add", "(", "1", ")", "\n", "# if i % 1000 == 0:", "\n", "#     print(\"[%d/%d] tokenized the captions.\" % (i, len(captions)))", "\n", "\n", "# Discard if the occurrence of the word is less than min_word_cnt.", "\n", "", "words", "=", "[", "word", "for", "word", ",", "cnt", "in", "counter", ".", "items", "(", ")", "if", "cnt", ">=", "threshold", "]", "\n", "\n", "# Create a vocab wrapper and add some special tokens.", "\n", "vocab", "=", "Vocabulary", "(", "text_style", ")", "\n", "if", "'rnn'", "in", "text_style", ":", "\n", "        ", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "\n", "# Add words to the vocabulary.", "\n", "", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "vocab", ".", "add_word", "(", "word", ")", "\n", "", "return", "vocab", ",", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.main": [[92, 117], ["os.path.join", "os.path.join", "basic.common.checkToSkip", "basic.common.makedirsforfile", "vocab.build_vocab", "basic.constant.logger.info", "word_counter.sort", "basic.constant.logger.info", "os.path.dirname", "sys.exit", "open", "pickle.dump", "open", "writer.write", "word_counter.items", "map"], "function", ["home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.txt2bin.checkToSkip", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.basic.common.makedirsforfile", "home.repos.pwc.inspect_result.danieljf24_dual_encoding.util.vocab.build_vocab"], ["", "def", "main", "(", "option", ")", ":", "\n", "    ", "rootpath", "=", "option", ".", "rootpath", "\n", "collection", "=", "option", ".", "collection", "\n", "threshold", "=", "option", ".", "threshold", "\n", "text_style", "=", "option", ".", "text_style", "\n", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'TextData'", ",", "'vocabulary'", ",", "\n", "text_style", ",", "'word_vocab_%d.pkl'", "%", "threshold", ")", "\n", "counter_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "vocab_file", ")", ",", "'word_vocab_counter_%s.txt'", "%", "threshold", ")", "\n", "\n", "if", "checkToSkip", "(", "vocab_file", ",", "option", ".", "overwrite", ")", ":", "\n", "        ", "sys", ".", "exit", "(", "0", ")", "\n", "", "makedirsforfile", "(", "vocab_file", ")", "\n", "\n", "\n", "vocab", ",", "word_counter", "=", "build_vocab", "(", "collection", ",", "text_style", ",", "threshold", "=", "threshold", ",", "rootpath", "=", "rootpath", ")", "\n", "with", "open", "(", "vocab_file", ",", "'wb'", ")", "as", "writer", ":", "\n", "        ", "pickle", ".", "dump", "(", "vocab", ",", "writer", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "logger", ".", "info", "(", "\"Saved vocabulary file to %s\"", ",", "vocab_file", ")", "\n", "\n", "word_counter", "=", "[", "(", "word", ",", "cnt", ")", "for", "word", ",", "cnt", "in", "word_counter", ".", "items", "(", ")", "if", "cnt", ">=", "threshold", "]", "\n", "word_counter", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "with", "open", "(", "counter_file", ",", "'w'", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "'\\n'", ".", "join", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", "+", "' %d'", "%", "x", "[", "1", "]", ",", "word_counter", ")", ")", ")", "\n", "", "logger", ".", "info", "(", "\"Saved vocabulary counter file to %s\"", ",", "counter_file", ")", "\n", "\n"]]}