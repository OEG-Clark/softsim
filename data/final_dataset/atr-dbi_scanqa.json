{"home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.process_punctuation": [[73, 83], ["period_strip.sub", "outText.replace.replace", "outText.replace.replace", "re.search"], "function", ["None"], ["def", "process_punctuation", "(", "inText", ")", ":", "\n", "    ", "outText", "=", "inText", "\n", "for", "p", "in", "punct", ":", "\n", "        ", "if", "(", "p", "+", "' '", "in", "inText", "or", "' '", "+", "p", "in", "inText", ")", "or", "(", "re", ".", "search", "(", "comma_strip", ",", "inText", ")", "!=", "None", ")", ":", "\n", "            ", "outText", "=", "outText", ".", "replace", "(", "p", ",", "''", ")", "\n", "", "else", ":", "\n", "            ", "outText", "=", "outText", ".", "replace", "(", "p", ",", "' '", ")", "\n", "", "", "outText", "=", "period_strip", ".", "sub", "(", "\"\"", ",", "outText", ",", "re", ".", "UNICODE", ")", "\n", "return", "outText", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.process_digit_article": [[85, 99], ["inText.lower().split", "enumerate", "manual_map.setdefault", "inText.lower", "outText.append"], "function", ["None"], ["", "def", "process_digit_article", "(", "inText", ")", ":", "\n", "    ", "outText", "=", "[", "]", "\n", "tempText", "=", "inText", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "for", "word", "in", "tempText", ":", "\n", "        ", "word", "=", "manual_map", ".", "setdefault", "(", "word", ",", "word", ")", "\n", "if", "word", "not", "in", "articles", ":", "\n", "            ", "outText", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "for", "wordId", ",", "word", "in", "enumerate", "(", "outText", ")", ":", "\n", "        ", "if", "word", "in", "contractions", ":", "\n", "            ", "outText", "[", "wordId", "]", "=", "contractions", "[", "word", "]", "\n", "", "", "outText", "=", "' '", ".", "join", "(", "outText", ")", "\n", "return", "outText", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.prep_ans": [[101, 105], ["qa_helper.process_digit_article", "answer.replace.replace", "qa_helper.process_punctuation"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.process_digit_article", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.process_punctuation"], ["", "def", "prep_ans", "(", "answer", ")", ":", "\n", "    ", "answer", "=", "process_digit_article", "(", "process_punctuation", "(", "answer", ")", ")", "\n", "answer", "=", "answer", ".", "replace", "(", "','", ",", "''", ")", "\n", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.normalize_answer_counter": [[107, 117], ["collections.Counter", "answer_counter.keys", "qa_helper.prep_ans", "print"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.prep_ans"], ["", "def", "normalize_answer_counter", "(", "answer_counter", ")", ":", "\n", "    ", "norm_answer_counter", "=", "collections", ".", "Counter", "(", "[", "]", ")", "\n", "for", "answer", "in", "answer_counter", ".", "keys", "(", ")", ":", "\n", "        ", "norm_answer", "=", "prep_ans", "(", "answer", ")", "\n", "if", "norm_answer", "!=", "answer", ":", "\n", "            ", "print", "(", "norm_answer", ",", "'|'", ",", "answer", ")", "\n", "", "if", "answer", "==", "''", "or", "norm_answer", "==", "''", ":", "\n", "            ", "continue", "\n", "", "norm_answer_counter", "[", "norm_answer", "]", "=", "norm_answer_counter", "[", "norm_answer", "]", "+", "answer_counter", "[", "answer", "]", "\n", "", "return", "norm_answer_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.normalize_answers_in_qa_data": [[119, 133], ["normalized_records.append", "qa_helper.prep_ans", "norm_answers.append", "len"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.prep_ans"], ["", "def", "normalize_answers_in_qa_data", "(", "records", ")", ":", "\n", "    ", "normalized_records", "=", "[", "]", "\n", "for", "record", "in", "records", ":", "\n", "        ", "norm_answers", "=", "[", "]", "\n", "for", "answer", "in", "record", "[", "\"answers\"", "]", ":", "\n", "            ", "norm_answer", "=", "prep_ans", "(", "answer", ")", "\n", "if", "norm_answer", "==", "\"\"", ":", "\n", "                ", "continue", "\n", "", "norm_answers", ".", "append", "(", "norm_answer", ")", "\n", "", "if", "len", "(", "norm_answers", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "record", "[", "\"answers\"", "]", "=", "norm_answers", "\n", "normalized_records", ".", "append", "(", "record", ")", "\n", "", "return", "normalized_records", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.gelu_new": [[134, 140], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Implementation of the GELU activation function currently in Google BERT repo (identical to OpenAI GPT). Also see\n    the Gaussian Error Linear Units paper: https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2.0", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3.0", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.info_value_of_dtype": [[141, 148], ["TypeError", "torch.finfo", "torch.iinfo"], "function", ["None"], ["", "def", "info_value_of_dtype", "(", "dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "if", "dtype", "==", "torch", ".", "bool", ":", "\n", "        ", "raise", "TypeError", "(", "\"Does not support torch.bool\"", ")", "\n", "", "elif", "dtype", ".", "is_floating_point", ":", "\n", "        ", "return", "torch", ".", "finfo", "(", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "iinfo", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.min_value_of_dtype": [[149, 151], ["qa_helper.info_value_of_dtype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.info_value_of_dtype"], ["", "", "def", "min_value_of_dtype", "(", "dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "return", "info_value_of_dtype", "(", "dtype", ")", ".", "min", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.tiny_value_of_dtype": [[152, 161], ["TypeError", "TypeError", "str"], "function", ["None"], ["", "def", "tiny_value_of_dtype", "(", "dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "if", "not", "dtype", ".", "is_floating_point", ":", "\n", "        ", "raise", "TypeError", "(", "\"Only supports floating point dtypes.\"", ")", "\n", "", "if", "dtype", "==", "torch", ".", "float", "or", "dtype", "==", "torch", ".", "double", ":", "\n", "        ", "return", "1e-13", "\n", "", "elif", "dtype", "==", "torch", ".", "half", ":", "\n", "        ", "return", "1e-4", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Does not support dtype \"", "+", "str", "(", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.masked_softmax": [[162, 187], ["torch.nn.functional.softmax", "mask.unsqueeze.dim", "vector.dim", "mask.unsqueeze.unsqueeze", "torch.nn.functional.softmax", "vector.masked_fill", "torch.nn.functional.softmax", "qa_helper.min_value_of_dtype", "torch.nn.functional.softmax.sum", "qa_helper.tiny_value_of_dtype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.min_value_of_dtype", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.qa_helper.tiny_value_of_dtype"], ["", "", "def", "masked_softmax", "(", "\n", "vector", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "BoolTensor", ",", "\n", "dim", ":", "int", "=", "-", "1", ",", "\n", "memory_efficient", ":", "bool", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    https://github.com/allenai/allennlp/blob/master/allennlp/nn/util.py#L278-L309\n    \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "        ", "while", "mask", ".", "dim", "(", ")", "<", "vector", ".", "dim", "(", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "not", "memory_efficient", ":", "\n", "# To limit numerical errors from large vector elements outside the mask, we zero these out.", "\n", "            ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", "*", "mask", ",", "dim", "=", "dim", ")", "\n", "result", "=", "result", "*", "mask", "\n", "result", "=", "result", "/", "(", "\n", "result", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "tiny_value_of_dtype", "(", "result", ".", "dtype", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "masked_vector", "=", "vector", ".", "masked_fill", "(", "~", "mask", ",", "min_value_of_dtype", "(", "vector", ".", "dtype", ")", ")", "\n", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "masked_vector", ",", "dim", "=", "dim", ")", "\n", "", "", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver.__init__": [[118, 222], ["dataloader.keys", "os.makedirs", "os.makedirs", "os.path.join", "open", "float", "float", "float", "float", "float", "float", "float", "float", "os.path.join", "os.path.join", "tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter", "isinstance", "lib.pointnet2.pytorch_utils.BNMomentumScheduler", "float", "float", "float", "float", "float", "float", "float", "float", "float", "os.path.join", "os.path.join", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "max", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "config", ",", "dataloader", ",", "optimizer", ",", "stamp", ",", "val_step", "=", "10", ",", "\n", "cur_criterion", "=", "\"answer_acc_at1\"", ",", "detection", "=", "True", ",", "use_reference", "=", "True", ",", "use_lang_classifier", "=", "True", ",", "use_answer", "=", "True", ",", "\n", "max_grad_norm", "=", "None", ",", "lr_decay_step", "=", "None", ",", "lr_decay_rate", "=", "None", ",", "bn_decay_step", "=", "None", ",", "bn_decay_rate", "=", "None", ",", "loss_weights", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "self", ".", "verbose", "=", "0", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "stamp", "=", "stamp", "\n", "self", ".", "val_step", "=", "val_step", "\n", "self", ".", "cur_criterion", "=", "cur_criterion", "\n", "\n", "self", ".", "answerable_data_size", "=", "{", "}", "\n", "self", ".", "all_data_size", "=", "{", "}", "\n", "for", "phase", "in", "dataloader", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "answerable_data_size", "[", "phase", "]", "=", "dataloader", "[", "phase", "]", ".", "dataset", ".", "answerable_data_size", "\n", "self", ".", "all_data_size", "[", "phase", "]", "=", "dataloader", "[", "phase", "]", ".", "dataset", ".", "all_data_size", "\n", "\n", "", "self", ".", "detection", "=", "detection", "\n", "self", ".", "use_reference", "=", "use_reference", "\n", "self", ".", "use_answer", "=", "use_answer", "\n", "self", ".", "use_lang_classifier", "=", "use_lang_classifier", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "lr_decay_step", "=", "lr_decay_step", "\n", "self", ".", "lr_decay_rate", "=", "lr_decay_rate", "\n", "self", ".", "bn_decay_step", "=", "bn_decay_step", "\n", "self", ".", "bn_decay_rate", "=", "bn_decay_rate", "\n", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n", "self", ".", "best", "=", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"ref_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"answer_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"lang_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"objectness_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"vote_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"box_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"sem_cls_loss\"", ":", "float", "(", "\"inf\"", ")", ",", "\n", "\"answer_acc_at1\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"answer_acc_at10\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"lang_acc\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"ref_acc\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"obj_acc\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"pos_ratio\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"neg_ratio\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"iou_rate_0.25\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "\"iou_rate_0.5\"", ":", "-", "float", "(", "\"inf\"", ")", ",", "\n", "}", "\n", "\n", "# init log", "\n", "# contains all necessary info for all phases", "\n", "self", ".", "log", "=", "{", "\n", "\"train\"", ":", "{", "}", ",", "\n", "\"val\"", ":", "{", "}", "\n", "}", "\n", "\n", "# tensorboard", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ",", "\"tensorboard/train\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ",", "\"tensorboard/val\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_log_writer", "=", "{", "\n", "\"train\"", ":", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ",", "\"tensorboard/train\"", ")", ")", ",", "\n", "\"val\"", ":", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ",", "\"tensorboard/val\"", ")", ")", "\n", "}", "\n", "\n", "# training log", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ",", "\"log.txt\"", ")", "\n", "self", ".", "log_fout", "=", "open", "(", "log_path", ",", "\"a\"", ")", "\n", "\n", "# private", "\n", "# only for internal access and temporary results", "\n", "self", ".", "_running_log", "=", "{", "}", "\n", "self", ".", "_global_iter_id", "=", "0", "\n", "self", ".", "_total_iter", "=", "{", "}", "# set in __call__", "\n", "\n", "# templates", "\n", "self", ".", "__iter_report_template", "=", "ITER_REPORT_TEMPLATE", "\n", "self", ".", "__epoch_report_template", "=", "EPOCH_REPORT_TEMPLATE", "\n", "self", ".", "__best_report_template", "=", "BEST_REPORT_TEMPLATE", "\n", "\n", "# lr scheduler", "\n", "if", "lr_decay_step", "and", "lr_decay_rate", ":", "\n", "            ", "if", "isinstance", "(", "lr_decay_step", ",", "list", ")", ":", "\n", "                ", "self", ".", "lr_scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "lr_decay_step", ",", "lr_decay_rate", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_scheduler", "=", "StepLR", "(", "optimizer", ",", "lr_decay_step", ",", "lr_decay_rate", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lr_scheduler", "=", "None", "\n", "\n", "# bn scheduler", "\n", "", "if", "bn_decay_step", "and", "bn_decay_rate", ":", "\n", "            ", "it", "=", "-", "1", "\n", "start_epoch", "=", "0", "\n", "BN_MOMENTUM_INIT", "=", "0.5", "\n", "BN_MOMENTUM_MAX", "=", "0.001", "\n", "bn_lbmd", "=", "lambda", "it", ":", "max", "(", "BN_MOMENTUM_INIT", "*", "bn_decay_rate", "**", "(", "int", "(", "it", "/", "bn_decay_step", ")", ")", ",", "BN_MOMENTUM_MAX", ")", "\n", "self", ".", "bn_scheduler", "=", "BNMomentumScheduler", "(", "model", ",", "bn_lambda", "=", "bn_lbmd", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn_scheduler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver.__call__": [[223, 259], ["solver.Solver._start", "range", "solver.Solver._finish", "len", "len", "solver.Solver._log", "solver.Solver._feed", "solver.Solver._log", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver.model.state_dict", "os.path.join", "print", "solver.Solver.lr_scheduler.step", "print", "solver.Solver.bn_scheduler.step", "solver.Solver._finish", "exit", "solver.Solver.lr_scheduler.get_lr", "solver.Solver.bn_scheduler.lmbd"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._start", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._finish", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._feed", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._finish", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.get_lr"], ["", "", "def", "__call__", "(", "self", ",", "epoch", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "_start", "(", ")", "\n", "# setting", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "_total_iter", "[", "\"train\"", "]", "=", "len", "(", "self", ".", "dataloader", "[", "\"train\"", "]", ")", "*", "epoch", "\n", "self", ".", "_total_iter", "[", "\"val\"", "]", "=", "len", "(", "self", ".", "dataloader", "[", "\"val\"", "]", ")", "*", "self", ".", "val_step", "\n", "\n", "for", "epoch_id", "in", "range", "(", "epoch", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_log", "(", "\"epoch {} starting...\"", ".", "format", "(", "epoch_id", "+", "1", ")", ")", "\n", "# feed ", "\n", "self", ".", "_feed", "(", "self", ".", "dataloader", "[", "\"train\"", "]", ",", "\"train\"", ",", "epoch_id", ")", "\n", "\n", "self", ".", "_log", "(", "\"saving last models...\\n\"", ")", "\n", "model_root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_root", ",", "\"model_last.pth\"", ")", ")", "\n", "\n", "# update lr scheduler", "\n", "if", "self", ".", "lr_scheduler", ":", "\n", "                    ", "print", "(", "\"update learning rate --> {}\\n\"", ".", "format", "(", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", ")", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# update bn scheduler", "\n", "", "if", "self", ".", "bn_scheduler", ":", "\n", "                    ", "print", "(", "\"update batch normalization momentum --> {}\\n\"", ".", "format", "(", "self", ".", "bn_scheduler", ".", "lmbd", "(", "self", ".", "bn_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "self", ".", "bn_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "# finish training", "\n", "                ", "self", ".", "_finish", "(", "epoch_id", ")", "\n", "exit", "(", ")", "\n", "\n", "# finish training", "\n", "", "", "self", ".", "_finish", "(", "epoch_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._start": [[260, 266], ["os.path.join", "open().write", "wandb.save", "open"], "methods", ["None"], ["", "def", "_start", "(", "self", ")", ":", "\n", "# save commandline ", "\n", "        ", "cmd", "=", "\" \"", ".", "join", "(", "[", "v", "for", "v", "in", "sys", ".", "argv", "]", ")", "\n", "cmd_file", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ",", "\"cmdline.txt\"", ")", "\n", "open", "(", "cmd_file", ",", "'w'", ")", ".", "write", "(", "cmd", ")", "\n", "wandb", ".", "save", "(", "cmd_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log": [[267, 271], ["solver.Solver.log_fout.write", "solver.Solver.log_fout.flush", "print"], "methods", ["None"], ["", "def", "_log", "(", "self", ",", "info_str", ")", ":", "\n", "        ", "self", ".", "log_fout", ".", "write", "(", "info_str", "+", "\"\\n\"", ")", "\n", "self", ".", "log_fout", ".", "flush", "(", ")", "\n", "print", "(", "info_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._reset_log": [[272, 304], ["None"], "methods", ["None"], ["", "def", "_reset_log", "(", "self", ",", "phase", ")", ":", "\n", "        ", "self", ".", "log", "[", "phase", "]", "=", "{", "\n", "# info", "\n", "\"forward\"", ":", "[", "]", ",", "\n", "\"backward\"", ":", "[", "]", ",", "\n", "\"eval\"", ":", "[", "]", ",", "\n", "\"fetch\"", ":", "[", "]", ",", "\n", "\"iter_time\"", ":", "[", "]", ",", "\n", "# loss", "\n", "\"loss\"", ":", "[", "]", ",", "\n", "\"ref_loss\"", ":", "[", "]", ",", "\n", "\"answer_loss\"", ":", "[", "]", ",", "\n", "\"lang_loss\"", ":", "[", "]", ",", "\n", "\"objectness_loss\"", ":", "[", "]", ",", "\n", "\"vote_loss\"", ":", "[", "]", ",", "\n", "\"box_loss\"", ":", "[", "]", ",", "\n", "\"sem_cls_loss\"", ":", "[", "]", ",", "\n", "# scores", "\n", "\"answer_acc_at1\"", ":", "[", "]", ",", "\n", "\"answer_acc_at10\"", ":", "[", "]", ",", "\n", "\"lang_acc\"", ":", "[", "]", ",", "\n", "\"ref_acc\"", ":", "[", "]", ",", "\n", "\"obj_acc\"", ":", "[", "]", ",", "\n", "\"pos_ratio\"", ":", "[", "]", ",", "\n", "\"neg_ratio\"", ":", "[", "]", ",", "\n", "\"iou_rate_0.25\"", ":", "[", "]", ",", "\n", "\"iou_rate_0.5\"", ":", "[", "]", ",", "\n", "# pred_answers", "\n", "\"pred_lang\"", ":", "[", "]", ",", "\n", "\"pred_answer\"", ":", "[", "]", ",", "\n", "\"scene_id\"", ":", "[", "]", ",", "\n", "\"question_id\"", ":", "[", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._set_phase": [[306, 313], ["solver.Solver.model.train", "solver.Solver.model.eval", "ValueError"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.train"], ["", "def", "_set_phase", "(", "self", ",", "phase", ")", ":", "\n", "        ", "if", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "elif", "phase", "==", "\"val\"", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid phase\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._forward": [[314, 317], ["solver.Solver.model"], "methods", ["None"], ["", "", "def", "_forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "data_dict", "=", "self", ".", "model", "(", "data_dict", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._backward": [[318, 328], ["solver.Solver.optimizer.zero_grad", "solver.Solver._running_log[].backward", "solver.Solver.optimizer.step", "torch.utils.clip_grad_value_", "torch.utils.clip_grad_value_", "solver.Solver.model.parameters"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step"], ["", "def", "_backward", "(", "self", ")", ":", "\n", "# optimize", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "_running_log", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "\n", "# gradient clipping", "\n", "if", "self", ".", "max_grad_norm", "is", "not", "None", "and", "self", ".", "max_grad_norm", ">", "0", ":", "\n", "            ", "nn", ".", "utils", ".", "clip_grad_value_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "clip_value", "=", "self", ".", "max_grad_norm", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._compute_loss": [[329, 349], ["lib.loss_helper.get_loss"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.get_loss"], ["", "def", "_compute_loss", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "_", ",", "data_dict", "=", "get_loss", "(", "\n", "data_dict", "=", "data_dict", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "detection", "=", "self", ".", "detection", ",", "\n", "use_reference", "=", "self", ".", "use_reference", ",", "\n", "use_answer", "=", "self", ".", "use_answer", ",", "\n", "use_lang_classifier", "=", "self", ".", "use_lang_classifier", ",", "\n", "loss_weights", "=", "self", ".", "loss_weights", ",", "\n", ")", "\n", "\n", "# dump", "\n", "self", ".", "_running_log", "[", "\"ref_loss\"", "]", "=", "data_dict", "[", "\"ref_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"answer_loss\"", "]", "=", "data_dict", "[", "\"answer_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"lang_loss\"", "]", "=", "data_dict", "[", "\"lang_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"objectness_loss\"", "]", "=", "data_dict", "[", "\"objectness_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"vote_loss\"", "]", "=", "data_dict", "[", "\"vote_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"box_loss\"", "]", "=", "data_dict", "[", "\"box_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"sem_cls_loss\"", "]", "=", "data_dict", "[", "\"sem_cls_loss\"", "]", "\n", "self", ".", "_running_log", "[", "\"loss\"", "]", "=", "data_dict", "[", "\"loss\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._eval": [[350, 373], ["lib.eval_helper.get_eval", "data_dict[].item", "data_dict[].item", "data_dict[].item", "data_dict[].item", "data_dict[].item", "numpy.mean", "data_dict[].item", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.get_eval"], ["", "def", "_eval", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "data_dict", "=", "get_eval", "(", "\n", "data_dict", "=", "data_dict", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "answer_vocab", "=", "self", ".", "dataloader", "[", "\"train\"", "]", ".", "dataset", ".", "answer_vocab", ",", "\n", "use_reference", "=", "True", ",", "\n", "use_lang_classifier", "=", "self", ".", "use_lang_classifier", "\n", ")", "\n", "\n", "# dump", "\n", "if", "\"ref_acc\"", "in", "data_dict", ":", "\n", "            ", "self", ".", "_running_log", "[", "\"ref_acc\"", "]", "=", "np", ".", "mean", "(", "data_dict", "[", "\"ref_acc\"", "]", ")", "\n", "", "if", "\"lang_acc\"", "in", "data_dict", ":", "\n", "            ", "self", ".", "_running_log", "[", "\"lang_acc\"", "]", "=", "data_dict", "[", "\"lang_acc\"", "]", ".", "item", "(", ")", "\n", "", "self", ".", "_running_log", "[", "\"answer_acc_at1\"", "]", "=", "data_dict", "[", "\"answer_acc_at1\"", "]", ".", "item", "(", ")", "\n", "self", ".", "_running_log", "[", "\"answer_acc_at10\"", "]", "=", "data_dict", "[", "\"answer_acc_at10\"", "]", ".", "item", "(", ")", "\n", "self", ".", "_running_log", "[", "\"obj_acc\"", "]", "=", "data_dict", "[", "\"obj_acc\"", "]", ".", "item", "(", ")", "\n", "self", ".", "_running_log", "[", "\"pos_ratio\"", "]", "=", "data_dict", "[", "\"pos_ratio\"", "]", ".", "item", "(", ")", "\n", "self", ".", "_running_log", "[", "\"neg_ratio\"", "]", "=", "data_dict", "[", "\"neg_ratio\"", "]", ".", "item", "(", ")", "\n", "if", "\"ref_iou_rate_0.25\"", "in", "data_dict", ":", "\n", "            ", "self", ".", "_running_log", "[", "\"iou_rate_0.25\"", "]", "=", "np", ".", "mean", "(", "data_dict", "[", "\"ref_iou_rate_0.25\"", "]", ")", "\n", "", "if", "\"ref_iou_rate_0.5\"", "in", "data_dict", ":", "\n", "            ", "self", ".", "_running_log", "[", "\"iou_rate_0.5\"", "]", "=", "np", ".", "mean", "(", "data_dict", "[", "\"ref_iou_rate_0.5\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._feed": [[374, 525], ["solver.Solver._set_phase", "solver.Solver._reset_log", "tqdm.tqdm.tqdm", "[].append", "time.time", "solver.Solver._eval", "[].append", "solver.Solver._running_log.keys", "data_dict[].tolist", "numpy.mean", "data_dict[].sum().item", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "time.time", "solver.Solver._forward", "solver.Solver._compute_loss", "[].append", "[].append", "data_dict[].argmax().tolist", "data_dict[].tolist", "[].append", "solver.Solver._dump_log", "solver.Solver._log", "solver.Solver._log", "solver.Solver._log", "solver.Solver._log", "solver.Solver._log", "solver.Solver.best.items", "solver.Solver._log", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "type", "data_dict[].cuda", "time.time", "solver.Solver._backward", "[].append", "time.time", "type", "value.item.item.item", "data_dict[].tolist", "solver.Solver._train_report", "print", "solver.Solver._feed", "solver.Solver._dump_log", "solver.Solver._set_phase", "solver.Solver._epoch_report", "numpy.mean", "wandb.log", "pandas.concat", "pandas.concat.to_csv", "solver.Solver.model.state_dict", "os.path.join", "v.cuda", "data_dict[].sum", "time.time", "data_dict[].argmax", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "solver.Solver.dataloader[].dataset.answer_vocab.itos", "pandas.DataFrame", "len", "os.path.join", "data_dict[].items", "time.time", "round", "pandas.DataFrame", "pandas.DataFrame"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._set_phase", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._reset_log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._eval", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._forward", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._compute_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._dump_log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._backward", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._train_report", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._feed", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._dump_log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._set_phase", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._epoch_report", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.itos"], ["", "", "def", "_feed", "(", "self", ",", "dataloader", ",", "phase", ",", "epoch_id", ")", ":", "\n", "# switch mode", "\n", "        ", "self", ".", "_set_phase", "(", "phase", ")", "\n", "\n", "# re-init log", "\n", "self", ".", "_reset_log", "(", "phase", ")", "\n", "\n", "scene_number_to_id", "=", "dataloader", ".", "dataset", ".", "scene_number_to_id", "\n", "\n", "# change dataloader", "\n", "dataloader", "=", "dataloader", "if", "phase", "==", "\"train\"", "else", "tqdm", "(", "dataloader", ")", "\n", "\n", "for", "data_dict", "in", "dataloader", ":", "\n", "# move to cuda", "\n", "            ", "for", "key", "in", "data_dict", ":", "\n", "                ", "if", "type", "(", "data_dict", "[", "key", "]", ")", "is", "dict", ":", "\n", "                    ", "data_dict", "[", "key", "]", "=", "{", "k", ":", "v", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "data_dict", "[", "key", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                    ", "data_dict", "[", "key", "]", "=", "data_dict", "[", "key", "]", ".", "cuda", "(", ")", "\n", "\n", "# initialize the running loss", "\n", "", "", "self", ".", "_running_log", "=", "{", "\n", "# loss", "\n", "\"loss\"", ":", "0", ",", "\n", "\"ref_loss\"", ":", "0", ",", "\n", "\"answer_loss\"", ":", "0", ",", "\n", "\"lang_loss\"", ":", "0", ",", "\n", "\"objectness_loss\"", ":", "0", ",", "\n", "\"vote_loss\"", ":", "0", ",", "\n", "\"box_loss\"", ":", "0", ",", "\n", "\"sem_cls_loss\"", ":", "0", ",", "\n", "# score", "\n", "\"ref_acc\"", ":", "0", ",", "\n", "\"lang_acc\"", ":", "0", ",", "\n", "\"answer_acc_at1\"", ":", "0", ",", "\n", "\"answer_acc_at10\"", ":", "0", ",", "\n", "\"obj_acc\"", ":", "0", ",", "\n", "\"pos_ratio\"", ":", "0", ",", "\n", "\"neg_ratio\"", ":", "0", ",", "\n", "\"iou_rate_0.25\"", ":", "0", ",", "\n", "\"iou_rate_0.5\"", ":", "0", ",", "\n", "}", "\n", "\n", "# load", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"fetch\"", "]", ".", "append", "(", "data_dict", "[", "\"load_time\"", "]", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "with", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", ":", "\n", "# forward", "\n", "                ", "start", "=", "time", ".", "time", "(", ")", "\n", "data_dict", "=", "self", ".", "_forward", "(", "data_dict", ")", "\n", "self", ".", "_compute_loss", "(", "data_dict", ")", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"forward\"", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "# backward", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "                    ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_backward", "(", ")", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"backward\"", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "# eval", "\n", "", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "_eval", "(", "data_dict", ")", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"eval\"", "]", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "# record log", "\n", "for", "key", "in", "self", ".", "_running_log", ".", "keys", "(", ")", ":", "\n", "                ", "value", "=", "self", ".", "_running_log", "[", "key", "]", "# score or loss", "\n", "if", "type", "(", "value", ")", "==", "torch", ".", "Tensor", ":", "\n", "                    ", "value", "=", "value", ".", "item", "(", ")", "# if loss", "\n", "", "self", ".", "log", "[", "phase", "]", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "answerable_rate", "=", "self", ".", "answerable_data_size", "[", "phase", "]", "/", "self", ".", "all_data_size", "[", "phase", "]", "\n", "\n", "if", "\"pred_langs\"", "in", "data_dict", ":", "\n", "                ", "self", ".", "log", "[", "phase", "]", "[", "\"pred_lang\"", "]", "+=", "data_dict", "[", "\"pred_langs\"", "]", ".", "argmax", "(", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "if", "\"pred_answers\"", "in", "data_dict", ":", "\n", "                ", "self", ".", "log", "[", "phase", "]", "[", "\"pred_answer\"", "]", "+=", "data_dict", "[", "\"pred_answers\"", "]", ".", "tolist", "(", ")", "\n", "\n", "", "self", ".", "log", "[", "phase", "]", "[", "\"scene_id\"", "]", "+=", "[", "scene_number_to_id", "[", "scene_number", "]", "for", "scene_number", "in", "data_dict", "[", "\"scene_id\"", "]", ".", "tolist", "(", ")", "]", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"question_id\"", "]", "+=", "data_dict", "[", "\"question_id\"", "]", ".", "tolist", "(", ")", "\n", "\n", "# report", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "                ", "iter_time", "=", "self", ".", "log", "[", "phase", "]", "[", "\"fetch\"", "]", "[", "-", "1", "]", "\n", "iter_time", "+=", "self", ".", "log", "[", "phase", "]", "[", "\"forward\"", "]", "[", "-", "1", "]", "\n", "iter_time", "+=", "self", ".", "log", "[", "phase", "]", "[", "\"backward\"", "]", "[", "-", "1", "]", "\n", "iter_time", "+=", "self", ".", "log", "[", "phase", "]", "[", "\"eval\"", "]", "[", "-", "1", "]", "\n", "self", ".", "log", "[", "phase", "]", "[", "\"iter_time\"", "]", ".", "append", "(", "iter_time", ")", "\n", "\n", "if", "(", "self", ".", "_global_iter_id", "+", "1", ")", "%", "self", ".", "verbose", "==", "0", ":", "\n", "                    ", "self", ".", "_train_report", "(", "epoch_id", ")", "\n", "\n", "# evaluation", "\n", "", "if", "self", ".", "_global_iter_id", "%", "self", ".", "val_step", "==", "0", ":", "\n", "                    ", "print", "(", "\"evaluating...\"", ")", "\n", "# val", "\n", "self", ".", "_feed", "(", "self", ".", "dataloader", "[", "\"val\"", "]", ",", "\"val\"", ",", "epoch_id", ")", "\n", "self", ".", "_dump_log", "(", "\"val\"", ")", "\n", "self", ".", "_set_phase", "(", "\"train\"", ")", "\n", "self", ".", "_epoch_report", "(", "epoch_id", ")", "\n", "\n", "# dump log", "\n", "", "self", ".", "_dump_log", "(", "\"train\"", ")", "\n", "self", ".", "_global_iter_id", "+=", "1", "\n", "\n", "# check best", "\n", "", "", "if", "phase", "==", "\"val\"", ":", "\n", "            ", "cur_best", "=", "np", ".", "mean", "(", "self", ".", "log", "[", "phase", "]", "[", "self", ".", "cur_criterion", "]", ")", "\n", "if", "cur_best", ">", "self", ".", "best", "[", "self", ".", "cur_criterion", "]", ":", "\n", "                ", "self", ".", "_log", "(", "\"best val_{} achieved: {}\"", ".", "format", "(", "self", ".", "cur_criterion", ",", "cur_best", ")", ")", "\n", "self", ".", "_log", "(", "\"current train_loss: {}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "log", "[", "\"train\"", "]", "[", "\"loss\"", "]", ")", ")", ")", "\n", "self", ".", "_log", "(", "\"current val_loss: {}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "log", "[", "\"val\"", "]", "[", "\"loss\"", "]", ")", ")", ")", "\n", "self", ".", "_log", "(", "\"current val_iou_rate_0.5: {}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "log", "[", "\"val\"", "]", "[", "\"iou_rate_0.5\"", "]", ")", ")", ")", "\n", "self", ".", "_log", "(", "\"current val_iou_rate_0.5: {}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "log", "[", "\"val\"", "]", "[", "\"iou_rate_0.5\"", "]", ")", ")", ")", "\n", "self", ".", "best", "[", "\"epoch\"", "]", "=", "epoch_id", "+", "1", "\n", "\n", "for", "key", "in", "LOG_SCORE_KEYS", "[", "\"loss\"", "]", "+", "LOG_SCORE_KEYS", "[", "\"score\"", "]", ":", "\n", "                    ", "self", ".", "best", "[", "key", "]", "=", "np", ".", "mean", "(", "self", ".", "log", "[", "phase", "]", "[", "key", "]", ")", "\n", "\n", "# WandB logging of best_val_score", "\n", "", "for", "key", ",", "value", "in", "self", ".", "best", ".", "items", "(", ")", ":", "\n", "                    ", "wandb", ".", "log", "(", "{", "\"best_val/{}\"", ".", "format", "(", "key", ")", ":", "round", "(", "value", ",", "5", ")", "}", ",", "step", "=", "self", ".", "_global_iter_id", ")", "\n", "\n", "# save model", "\n", "", "self", ".", "_log", "(", "\"saving best models...\\n\"", ")", "\n", "model_root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ")", "\n", "\n", "if", "\"pred_answer\"", "in", "self", ".", "log", "[", "phase", "]", ":", "\n", "                    ", "pred_answer_idxs", "=", "self", ".", "log", "[", "phase", "]", "[", "\"pred_answer\"", "]", "\n", "pred_answers", "=", "[", "self", ".", "dataloader", "[", "\"val\"", "]", ".", "dataset", ".", "answer_vocab", ".", "itos", "(", "pred_answer_idx", ")", "for", "pred_answer_idx", "in", "pred_answer_idxs", "]", "\n", "\n", "qa_id_df", "=", "pd", ".", "DataFrame", "(", "[", "self", ".", "log", "[", "phase", "]", "[", "\"scene_id\"", "]", ",", "self", ".", "log", "[", "phase", "]", "[", "\"question_id\"", "]", "]", ")", ".", "T", "\n", "qa_id_df", ".", "columns", "=", "[", "\"scene_id\"", ",", "\"question_id\"", "]", "\n", "if", "len", "(", "self", ".", "log", "[", "phase", "]", "[", "\"pred_lang\"", "]", ")", "!=", "0", ":", "\n", "                        ", "pred_lang_idxs", "=", "self", ".", "log", "[", "phase", "]", "[", "\"pred_lang\"", "]", "\n", "\n", "# dataloader.iterable", "\n", "pred_langs", "=", "[", "self", ".", "dataloader", "[", "\"val\"", "]", ".", "dataset", ".", "label2raw", "[", "pred_lang_idx", "]", "for", "pred_lang_idx", "in", "pred_lang_idxs", "]", "\n", "pred_ansewr_df", "=", "pd", ".", "DataFrame", "(", "[", "pred_lang_idxs", ",", "pred_langs", ",", "pred_answer_idxs", ",", "pred_answers", "]", ")", ".", "T", "\n", "pred_ansewr_df", ".", "columns", "=", "[", "\"pred_lang_idx\"", ",", "\"pred_lang\"", ",", "\"pred_answer_idx\"", ",", "\"pred_answer\"", "]", "\n", "", "else", ":", "\n", "                        ", "pred_ansewr_df", "=", "pd", ".", "DataFrame", "(", "[", "pred_answer_idxs", ",", "pred_answers", "]", ")", ".", "T", "\n", "pred_ansewr_df", ".", "columns", "=", "[", "\"pred_answer_idx\"", ",", "\"pred_answer\"", "]", "\n", "\n", "# save pred_answers", "\n", "", "pred_ansewr_df", "=", "pd", ".", "concat", "(", "[", "qa_id_df", ",", "pred_ansewr_df", "]", ",", "axis", "=", "1", ")", "\n", "pred_ansewr_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "model_root", ",", "\"best_val_pred_answers.csv\"", ")", ",", "index", "=", "False", ")", "\n", "\n", "# save model", "\n", "", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_root", ",", "\"model.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._dump_log": [[527, 540], ["numpy.mean", "solver.Solver._log_writer[].add_scalar", "wandb.log"], "methods", ["None"], ["", "", "", "def", "_dump_log", "(", "self", ",", "phase", ")", ":", "\n", "        ", "for", "loss_or_score", "in", "[", "\"loss\"", ",", "\"score\"", "]", ":", "\n", "            ", "for", "key", "in", "LOG_SCORE_KEYS", "[", "loss_or_score", "]", ":", "\n", "                ", "value", "=", "np", ".", "mean", "(", "[", "v", "for", "v", "in", "self", ".", "log", "[", "phase", "]", "[", "key", "]", "]", ")", "\n", "# TensorBoard", "\n", "self", ".", "_log_writer", "[", "phase", "]", ".", "add_scalar", "(", "\n", "\"{}/{}\"", ".", "format", "(", "loss_or_score", ",", "key", ")", ",", "\n", "value", ",", "\n", "self", ".", "_global_iter_id", "\n", ")", "\n", "# WandB", "\n", "# phase, key, item -> val/score/ref_acc", "\n", "wandb", ".", "log", "(", "{", "\"{}/{}/{}\"", ".", "format", "(", "phase", ",", "loss_or_score", ",", "key", ")", ":", "value", "}", ",", "step", "=", "self", ".", "_global_iter_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._finish": [[542, 564], ["solver.Solver._best_report", "solver.Solver._log", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver._log", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "solver.Solver.model.state_dict", "solver.Solver.optimizer.state_dict", "os.path.join", "solver.Solver.model.state_dict", "os.path.join", "solver.Solver._log_writer[].export_scalars_to_json", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._best_report", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "", "def", "_finish", "(", "self", ",", "epoch_id", ")", ":", "\n", "# print best", "\n", "        ", "self", ".", "_best_report", "(", ")", "\n", "\n", "# save check point", "\n", "self", ".", "_log", "(", "\"saving checkpoint...\\n\"", ")", "\n", "save_dict", "=", "{", "\n", "\"epoch\"", ":", "epoch_id", ",", "\n", "\"model_state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer_state_dict\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "checkpoint_root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "checkpoint_root", ",", "\"checkpoint.tar\"", ")", ")", "\n", "\n", "# save model", "\n", "self", ".", "_log", "(", "\"saving last models...\\n\"", ")", "\n", "model_root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_root", ",", "\"model_last.pth\"", ")", ")", "\n", "\n", "# export", "\n", "for", "phase", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "self", ".", "_log_writer", "[", "phase", "]", ".", "export_scalars_to_json", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ",", "\"tensorboard/{}\"", ".", "format", "(", "phase", ")", ",", "\"all_scalars.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._train_report": [[565, 597], ["numpy.mean", "numpy.mean", "utils.eta.decode_eta", "round", "round", "round", "round", "round", "solver.Solver.__iter_report_template.format", "solver.Solver._log", "round", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "len", "numpy.ceil", "numpy.mean", "zip", "re.sub"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eta.decode_eta", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log"], ["", "", "def", "_train_report", "(", "self", ",", "epoch_id", ")", ":", "\n", "# compute ETA", "\n", "        ", "fetch_time", "=", "self", ".", "log", "[", "\"train\"", "]", "[", "\"fetch\"", "]", "\n", "forward_time", "=", "self", ".", "log", "[", "\"train\"", "]", "[", "\"forward\"", "]", "\n", "backward_time", "=", "self", ".", "log", "[", "\"train\"", "]", "[", "\"backward\"", "]", "\n", "eval_time", "=", "self", ".", "log", "[", "\"train\"", "]", "[", "\"eval\"", "]", "\n", "iter_time", "=", "self", ".", "log", "[", "\"train\"", "]", "[", "\"iter_time\"", "]", "\n", "\n", "mean_train_time", "=", "np", ".", "mean", "(", "iter_time", ")", "\n", "mean_est_val_time", "=", "np", ".", "mean", "(", "[", "fetch", "+", "forward", "for", "fetch", ",", "forward", "in", "zip", "(", "fetch_time", ",", "forward_time", ")", "]", ")", "\n", "eta_sec", "=", "(", "self", ".", "_total_iter", "[", "\"train\"", "]", "-", "self", ".", "_global_iter_id", "-", "1", ")", "*", "mean_train_time", "\n", "eta_sec", "+=", "len", "(", "self", ".", "dataloader", "[", "\"val\"", "]", ")", "*", "np", ".", "ceil", "(", "self", ".", "_total_iter", "[", "\"train\"", "]", "/", "self", ".", "val_step", ")", "*", "mean_est_val_time", "\n", "eta", "=", "decode_eta", "(", "eta_sec", ")", "\n", "\n", "iter_report_dic", "=", "{", "}", "\n", "phase", "=", "\"train\"", "\n", "for", "key", "in", "LOG_SCORE_KEYS", "[", "\"loss\"", "]", "+", "LOG_SCORE_KEYS", "[", "\"score\"", "]", ":", "\n", "            ", "iter_report_dic", "[", "phase", "+", "\"_\"", "+", "re", ".", "sub", "(", "'0.'", ",", "''", ",", "key", ")", "]", "=", "round", "(", "np", ".", "mean", "(", "[", "v", "for", "v", "in", "self", ".", "log", "[", "phase", "]", "[", "key", "]", "]", ")", ",", "5", ")", "\n", "", "iter_report_dic", "[", "\"epoch_id\"", "]", "=", "epoch_id", "+", "1", "\n", "iter_report_dic", "[", "\"iter_id\"", "]", "=", "self", ".", "_global_iter_id", "+", "1", "\n", "iter_report_dic", "[", "\"total_iter\"", "]", "=", "self", ".", "_total_iter", "[", "phase", "]", "\n", "iter_report_dic", "[", "\"mean_fetch_time\"", "]", "=", "round", "(", "np", ".", "mean", "(", "fetch_time", ")", ",", "5", ")", "\n", "iter_report_dic", "[", "\"mean_forward_time\"", "]", "=", "round", "(", "np", ".", "mean", "(", "forward_time", ")", ",", "5", ")", "\n", "iter_report_dic", "[", "\"mean_backward_time\"", "]", "=", "round", "(", "np", ".", "mean", "(", "backward_time", ")", ",", "5", ")", "\n", "iter_report_dic", "[", "\"mean_eval_time\"", "]", "=", "round", "(", "np", ".", "mean", "(", "eval_time", ")", ",", "5", ")", "\n", "iter_report_dic", "[", "\"mean_iter_time\"", "]", "=", "round", "(", "np", ".", "mean", "(", "iter_time", ")", ",", "5", ")", "\n", "iter_report_dic", "[", "\"eta_h\"", "]", "=", "eta", "[", "\"h\"", "]", "\n", "iter_report_dic", "[", "\"eta_m\"", "]", "=", "eta", "[", "\"m\"", "]", "\n", "iter_report_dic", "[", "\"eta_s\"", "]", "=", "eta", "[", "\"s\"", "]", "\n", "\n", "iter_report", "=", "self", ".", "__iter_report_template", ".", "format", "(", "**", "iter_report_dic", ")", "\n", "self", ".", "_log", "(", "iter_report", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._epoch_report": [[599, 607], ["solver.Solver._log", "solver.Solver.__epoch_report_template.format", "solver.Solver._log", "round", "numpy.mean", "re.sub"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log"], ["", "def", "_epoch_report", "(", "self", ",", "epoch_id", ")", ":", "\n", "        ", "self", ".", "_log", "(", "\"epoch [{}/{}] done...\"", ".", "format", "(", "epoch_id", "+", "1", ",", "self", ".", "epoch", ")", ")", "\n", "epoch_report_dic", "=", "{", "}", "\n", "for", "phase", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "for", "key", "in", "LOG_SCORE_KEYS", "[", "\"loss\"", "]", "+", "LOG_SCORE_KEYS", "[", "\"score\"", "]", ":", "\n", "                ", "epoch_report_dic", "[", "phase", "+", "\"_\"", "+", "re", ".", "sub", "(", "'0.'", ",", "''", ",", "key", ")", "]", "=", "round", "(", "np", ".", "mean", "(", "[", "v", "for", "v", "in", "self", ".", "log", "[", "phase", "]", "[", "key", "]", "]", ")", ",", "5", ")", "\n", "", "", "epoch_report", "=", "self", ".", "__epoch_report_template", ".", "format", "(", "**", "epoch_report_dic", ")", "\n", "self", ".", "_log", "(", "epoch_report", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._best_report": [[609, 622], ["solver.Solver._log", "solver.Solver.__best_report_template.format", "solver.Solver.best.items", "solver.Solver._log", "os.path.join", "wandb.save", "re.sub", "wandb.log", "open", "f.write", "solver.Solver.best.items", "round"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.solver.Solver._log"], ["", "def", "_best_report", "(", "self", ")", ":", "\n", "        ", "self", ".", "_log", "(", "\"training completed...\"", ")", "\n", "best_report_dic", "=", "{", "re", ".", "sub", "(", "'0.'", ",", "''", ",", "k", ")", ":", "v", "for", "k", ",", "v", "in", "self", ".", "best", ".", "items", "(", ")", "}", "\n", "best_report", "=", "self", ".", "__best_report_template", ".", "format", "(", "**", "best_report_dic", ")", "\n", "# WandB logging of best_val_score", "\n", "for", "key", ",", "value", "in", "self", ".", "best", ".", "items", "(", ")", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"best_val/{}\"", ".", "format", "(", "key", ")", ":", "round", "(", "value", ",", "5", ")", "}", ")", "\n", "\n", "", "self", ".", "_log", "(", "best_report", ")", "\n", "best_report_file", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "self", ".", "stamp", ",", "\"best.txt\"", ")", "\n", "with", "open", "(", "best_report_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "best_report", ")", "\n", "", "wandb", ".", "save", "(", "best_report_file", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaBase.__init__": [[21, 24], ["torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "LambdaBase", ",", "self", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "lambda_func", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaBase.forward_prepare": [[25, 30], ["enet.LambdaBase._modules.values", "output.append", "module"], "methods", ["None"], ["", "def", "forward_prepare", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "output", ".", "append", "(", "module", "(", "input", ")", ")", "\n", "", "return", "output", "if", "output", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.Lambda.forward": [[33, 35], ["enet.Lambda.lambda_func", "enet.Lambda.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "lambda_func", "(", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaMap.forward": [[38, 41], ["list", "map", "enet.LambdaMap.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# result is Variables list [Variable1, Variable2, ...]", "\n", "        ", "return", "list", "(", "map", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaReduce.forward": [[44, 47], ["functools.reduce", "enet.LambdaReduce.forward_prepare"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.LambdaBase.forward_prepare"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# result is a Variable", "\n", "        ", "return", "reduce", "(", "self", ".", "lambda_func", ",", "self", ".", "forward_prepare", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.Padding.__init__": [[55, 64], ["torch.Module.__init__", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "pad", ",", "value", ",", "index", ",", "nInputDim", ")", ":", "\n", "        ", "super", "(", "Padding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "value", "=", "value", "\n", "# self.index = index", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "nInputDim", "=", "nInputDim", "\n", "if", "index", "!=", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Padding: index != 0 not implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.Padding.forward": [[65, 78], ["list", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.size", "input.data.new().fill_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.dim", "input.data.new"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "dim", "=", "self", ".", "dim", "\n", "if", "self", ".", "nInputDim", "!=", "0", ":", "\n", "            ", "dim", "+=", "input", ".", "dim", "(", ")", "-", "self", ".", "nInputDim", "\n", "", "pad_size", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "pad_size", "[", "dim", "]", "=", "self", ".", "pad", "\n", "padder", "=", "Variable", "(", "input", ".", "data", ".", "new", "(", "*", "pad_size", ")", ".", "fill_", "(", "self", ".", "value", ")", ")", "\n", "\n", "if", "self", ".", "pad", "<", "0", ":", "\n", "            ", "padded", "=", "torch", ".", "cat", "(", "(", "padder", ",", "input", ")", ",", "dim", ")", "\n", "", "else", ":", "\n", "            ", "padded", "=", "torch", ".", "cat", "(", "(", "input", ",", "padder", ")", ",", "dim", ")", "\n", "", "return", "padded", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.Dropout.forward": [[84, 87], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.forward"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", "*", "(", "1", "-", "self", ".", "p", ")", "\n", "return", "super", "(", "Dropout", ",", "self", ")", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.Dropout2d.forward": [[93, 96], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.forward"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", "*", "(", "1", "-", "self", ".", "p", ")", "\n", "return", "super", "(", "Dropout2d", ",", "self", ")", ".", "forward", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.StatefulMaxPool2d.__init__": [[100, 104], ["torch.MaxPool2d.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "StatefulMaxPool2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "indices", "=", "None", "\n", "self", ".", "input_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.StatefulMaxPool2d.forward": [[105, 114], ["super().forward", "x.size"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return_indices", ",", "self", ".", "return_indices", "=", "self", ".", "return_indices", ",", "True", "\n", "output", ",", "indices", "=", "super", "(", "StatefulMaxPool2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "self", ".", "return_indices", "=", "return_indices", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "input_size", "=", "x", ".", "size", "(", ")", "\n", "if", "return_indices", ":", "\n", "            ", "return", "output", ",", "indices", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.StatefulMaxUnpool2d.__init__": [[117, 121], ["torch.Module.__init__", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pooling", ")", ":", "\n", "        ", "super", "(", "StatefulMaxUnpool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "unpooling", "=", "nn", ".", "MaxUnpool2d", "(", "pooling", ".", "kernel_size", ",", "pooling", ".", "stride", ",", "pooling", ".", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.StatefulMaxUnpool2d.forward": [[122, 124], ["enet.StatefulMaxUnpool2d.unpooling.forward"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "unpooling", ".", "forward", "(", "x", ",", "self", ".", "pooling", ".", "indices", ",", "self", ".", "pooling", ".", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.create_enet": [[130, 695], ["torch.Sequential", "enet.LambdaMap", "enet.LambdaReduce", "torch.BatchNorm2d", "torch.PReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "enet.LambdaMap", "enet.LambdaReduce", "torch.PReLU", "torch.Conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "enet.Padding", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "enet.Padding", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "torch.Conv2d", "torch.BatchNorm2d", "enet.Dropout2d", "enet.Lambda"], "function", ["None"], ["def", "create_enet", "(", "num_classes", ")", ":", "\n", "    ", "enet", "=", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Conv2d", "(", "3", ",", "13", ",", "(", "3", ",", "3", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "pooling_0", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "torch", ".", "cat", "(", "(", "x", ",", "y", ")", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.01", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", "pooling_1", ",", "\n", "Padding", "(", "0", ",", "48", ",", "0", ",", "0", ",", "3", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "64", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "64", ",", "16", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.01", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "64", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "64", ",", "16", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.01", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "64", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "64", ",", "16", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.01", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "64", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "64", ",", "16", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "16", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "16", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "64", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.01", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "64", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", "pooling_2", ",", "\n", "Padding", "(", "0", ",", "64", ",", "0", ",", "0", ",", "3", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "1", ",", "5", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "5", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "8", ",", "8", ")", ",", "(", "8", ",", "8", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "1", ",", "5", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "5", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "16", ",", "16", ")", ",", "(", "16", ",", "16", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "1", ",", "5", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "5", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "8", ",", "8", ")", ",", "(", "8", ",", "8", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "1", ",", "5", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "5", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "LambdaMap", "(", "lambda", "x", ":", "x", ",", "# ConcatTable, ", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "(", "16", ",", "16", ")", ",", "(", "16", ",", "16", ")", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "128", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "0.001", ",", "0.1", ",", "True", ")", ",", "\n", "Dropout2d", "(", "0.1", ")", ",", "\n", ")", ",", "\n", "nn", ".", "Sequential", "(", "# Sequential, ", "\n", "Lambda", "(", "lambda", "x", ":", "x", ")", ",", "# Identity, ", "\n", ")", ",", "\n", ")", ",", "\n", "LambdaReduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ")", ",", "# CAddTable, ", "\n", "nn", ".", "PReLU", "(", "128", ")", ",", "\n", ")", ",", "\n", "# ENCODER END (add classifier)", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "0", ",", "0", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "#nn.Sequential( # Sequential, ", "\n", "#    LambdaMap(lambda x: x, # ConcatTable, ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            nn.Conv2d(128, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.ConvTranspose2d(16, 16, (3, 3), (2, 2), (1, 1), (1, 1)), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.Conv2d(16, 64, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(64, 0.001, 0.1, True), ", "\n", "#        ), ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            Lambda(lambda x: x), # Identity, ", "\n", "#            nn.Conv2d(128, 64, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(64, 0.001, 0.1, True), ", "\n", "#            StatefulMaxUnpool2d(pooling_2), #SpatialMaxUnpooling, ", "\n", "#        ), ", "\n", "#    ), ", "\n", "#    LambdaReduce(lambda x,y: x+y), # CAddTable, ", "\n", "#    nn.PReLU(64), ", "\n", "#), ", "\n", "#nn.Sequential( # Sequential, ", "\n", "#    LambdaMap(lambda x: x, # ConcatTable, ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            nn.Conv2d(64, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.Conv2d(16, 16, (3, 3), (1, 1), (1, 1), (1, 1), 1), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.Conv2d(16, 64, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(64, 0.001, 0.1, True), ", "\n", "#        ), ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            Lambda(lambda x: x), # Identity, ", "\n", "#        ), ", "\n", "#    ), ", "\n", "#    LambdaReduce(lambda x,y: x+y), # CAddTable, ", "\n", "#    nn.PReLU(64), ", "\n", "#), ", "\n", "#nn.Sequential( # Sequential, ", "\n", "#    LambdaMap(lambda x: x, # ConcatTable, ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            nn.Conv2d(64, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.Conv2d(16, 16, (3, 3), (1, 1), (1, 1), (1, 1), 1), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(16), ", "\n", "#            nn.Conv2d(16, 64, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(64, 0.001, 0.1, True), ", "\n", "#        ), ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            Lambda(lambda x: x), # Identity, ", "\n", "#        ), ", "\n", "#    ), ", "\n", "#    LambdaReduce(lambda x,y: x+y), # CAddTable, ", "\n", "#    nn.PReLU(64), ", "\n", "#), ", "\n", "#nn.Sequential( # Sequential, ", "\n", "#    LambdaMap(lambda x: x, # ConcatTable, ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            nn.Conv2d(64, 4, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(4, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(4), ", "\n", "#            nn.ConvTranspose2d(4, 4, (3, 3), (2, 2), (1, 1), (1, 1)), ", "\n", "#            nn.BatchNorm2d(4, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(4), ", "\n", "#            nn.Conv2d(4, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#        ), ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            Lambda(lambda x: x), # Identity, ", "\n", "#            nn.Conv2d(64, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#            StatefulMaxUnpool2d(pooling_1), #SpatialMaxUnpooling, ", "\n", "#        ), ", "\n", "#    ), ", "\n", "#    LambdaReduce(lambda x,y: x+y), # CAddTable, ", "\n", "#    nn.PReLU(16), ", "\n", "#), ", "\n", "#nn.Sequential( # Sequential, ", "\n", "#    LambdaMap(lambda x: x, # ConcatTable, ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            nn.Conv2d(16, 4, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(4, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(4), ", "\n", "#            nn.Conv2d(4, 4, (3, 3), (1, 1), (1, 1), (1, 1), 1), ", "\n", "#            nn.BatchNorm2d(4, 0.001, 0.1, True), ", "\n", "#            nn.PReLU(4), ", "\n", "#            nn.Conv2d(4, 16, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False), ", "\n", "#            nn.BatchNorm2d(16, 0.001, 0.1, True), ", "\n", "#        ), ", "\n", "#        nn.Sequential( # Sequential, ", "\n", "#            Lambda(lambda x: x), # Identity, ", "\n", "#        ), ", "\n", "#    ), ", "\n", "#    LambdaReduce(lambda x,y: x+y), # CAddTable, ", "\n", "#    nn.PReLU(16), ", "\n", "#), ", "\n", "#nn.ConvTranspose2d(16, num_classes, (2, 2), (2, 2), (0, 0), (0, 0)), ", "\n", ")", "\n", "return", "enet", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.create_enet_for_3d": [[697, 716], ["enet.create_enet", "create_enet.load_state_dict", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nn.Sequential.parameters", "torch.load", "torch.load", "torch.load", "range", "range"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.create_enet", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "create_enet_for_3d", "(", "num_2d_classes", ",", "model_path", ",", "num_3d_classes", ")", ":", "\n", "    ", "model", "=", "create_enet", "(", "num_2d_classes", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "# remove the classifier", "\n", "n", "=", "len", "(", "model", ")", "\n", "model_trainable", "=", "nn", ".", "Sequential", "(", "*", "(", "model", "[", "i", "]", "for", "i", "in", "range", "(", "n", "-", "9", ",", "n", "-", "1", ")", ")", ")", "\n", "model_fixed", "=", "nn", ".", "Sequential", "(", "*", "(", "model", "[", "i", "]", "for", "i", "in", "range", "(", "n", "-", "9", ")", ")", ")", "\n", "#model_classifier = nn.Sequential(nn.Conv2d(128, num_3d_classes, (1, 1), (1, 1), (0, 0), (1, 1), 1, bias=False))", "\n", "model_classifier", "=", "nn", ".", "Sequential", "(", "model", "[", "n", "-", "1", "]", ")", "\n", "#print 'model_fixed'", "\n", "#print model_fixed", "\n", "#print 'model_trainable'", "\n", "#print model_trainable", "\n", "#print 'model_classifier'", "\n", "#print model_classifier", "\n", "#raw_input('sdflkj')", "\n", "for", "param", "in", "model_fixed", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "return", "model_fixed", ",", "model_trainable", ",", "model_classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.__init__": [[227, 237], ["ap_helper.APCalculator.reset"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.reset"], ["def", "__init__", "(", "self", ",", "ap_iou_thresh", "=", "0.25", ",", "class2type_map", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ap_iou_thresh: float between 0 and 1.0\n                IoU threshold to judge whether a prediction is positive.\n            class2type_map: [optional] dict {class_int:class_name}\n        \"\"\"", "\n", "self", ".", "ap_iou_thresh", "=", "ap_iou_thresh", "\n", "self", ".", "class2type_map", "=", "class2type_map", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.step": [[238, 253], ["len", "range", "len"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", ":", "\n", "        ", "\"\"\" Accumulate one batch of prediction and groundtruth.\n        \n        Args:\n            batch_pred_map_cls: a list of lists [[(pred_cls, pred_box_params, score),...],...]\n            batch_gt_map_cls: a list of lists [[(gt_cls, gt_box_params),...],...]\n                should have the same length with batch_pred_map_cls (batch_size)\n        \"\"\"", "\n", "\n", "bsize", "=", "len", "(", "batch_pred_map_cls", ")", "\n", "assert", "(", "bsize", "==", "len", "(", "batch_gt_map_cls", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "self", ".", "gt_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_gt_map_cls", "[", "i", "]", "\n", "self", ".", "pred_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_pred_map_cls", "[", "i", "]", "\n", "self", ".", "scan_cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.compute_metrics": [[254, 274], ["utils.eval_det.eval_det_multiprocessing", "sorted", "numpy.mean", "sorted", "numpy.mean", "ap.keys", "list", "ap.keys", "str", "ap.values", "str", "rec_list.append", "rec_list.append"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_multiprocessing"], ["", "", "def", "compute_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\" Use accumulated predictions and groundtruths to compute Average Precision.\n        \"\"\"", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_multiprocessing", "(", "self", ".", "pred_map_cls", ",", "self", ".", "gt_map_cls", ",", "ovthresh", "=", "self", ".", "ap_iou_thresh", ",", "get_iou_func", "=", "get_iou_obb", ")", "\n", "ret_dict", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "ret_dict", "[", "'%s Average Precision'", "%", "(", "clsname", ")", "]", "=", "ap", "[", "key", "]", "\n", "", "ret_dict", "[", "'mAP'", "]", "=", "np", ".", "mean", "(", "list", "(", "ap", ".", "values", "(", ")", ")", ")", "\n", "rec_list", "=", "[", "]", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "try", ":", "\n", "                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "rec", "[", "key", "]", "[", "-", "1", "]", "\n", "rec_list", ".", "append", "(", "rec", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "0", "\n", "rec_list", ".", "append", "(", "0", ")", "\n", "", "", "ret_dict", "[", "'AR'", "]", "=", "np", ".", "mean", "(", "rec_list", ")", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.reset": [[275, 279], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "gt_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox)]}", "\n", "self", ".", "pred_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox, score)]}", "\n", "self", ".", "scan_cnt", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.flip_axis_to_camera": [[18, 26], ["numpy.copy"], "function", ["None"], ["def", "flip_axis_to_camera", "(", "pc", ")", ":", "\n", "    ", "''' Flip X-right,Y-forward,Z-up to X-right,Y-down,Z-forward\n    Input and output are both (N,3) array\n    '''", "\n", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "[", "0", ",", "1", ",", "2", "]", "]", "=", "pc2", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# cam X,Y,Z = depth X,-Z,Y", "\n", "pc2", "[", "...", ",", "1", "]", "*=", "-", "1", "\n", "return", "pc2", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.flip_axis_to_depth": [[27, 32], ["numpy.copy"], "function", ["None"], ["", "def", "flip_axis_to_depth", "(", "pc", ")", ":", "\n", "    ", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "[", "0", ",", "1", ",", "2", "]", "]", "=", "pc2", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# depth X,Y,Z = cam X,Z,-Y", "\n", "pc2", "[", "...", ",", "2", "]", "*=", "-", "1", "\n", "return", "pc2", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax": [[33, 39], ["numpy.exp", "numpy.sum", "numpy.max", "len", "len"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "''' Numpy function for softmax'''", "\n", "shape", "=", "x", ".", "shape", "\n", "probs", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_predictions": [[40, 179], ["torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "ap_helper.softmax", "numpy.max", "numpy.zeros", "pred_center.detach().cpu().numpy", "range", "numpy.ones", "end_points[].detach().cpu().numpy", "range", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "end_points[].detach().cpu().numpy", "range", "range", "ap_helper.softmax", "numpy.zeros", "range", "pred_center.detach().cpu", "config_dict[].class2angle", "config_dict[].class2size", "utils.box_util.get_3d_box", "end_points[].cpu().numpy", "range", "end_points[].detach().cpu", "numpy.zeros", "range", "utils.nms.nms_2d_faster", "numpy.zeros", "range", "range", "batch_pred_map_cls.append", "batch_pred_map_cls.append", "torch.argmax.unsqueeze().unsqueeze", "end_points[].detach().cpu", "pred_heading_class[].detach().cpu().numpy", "pred_heading_residual[].detach().cpu().numpy", "int", "pred_size_residual[].detach().cpu().numpy", "data.scannet.model_util_scannet.extract_pc_in_box3d", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "utils.nms.nms_3d_faster", "numpy.zeros", "range", "pred_center.detach", "pred_size_class[].detach().cpu().numpy", "end_points[].cpu", "len", "end_points[].detach", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "utils.nms.nms_3d_faster_samecls", "torch.argmax.unsqueeze", "end_points[].detach", "pred_heading_class[].detach().cpu", "pred_heading_residual[].detach().cpu", "pred_size_residual[].detach().cpu", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "range", "pred_sem_cls[].item", "range", "pred_size_class[].detach().cpu", "pred_heading_class[].detach", "pred_heading_residual[].detach", "pred_size_residual[].detach", "pred_size_class[].detach"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_2d_faster", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.extract_pc_in_box3d", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_3d_faster", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_3d_faster_samecls"], ["", "def", "parse_predictions", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    ", "\"\"\" Parse predictions to OBB parameters and suppress overlapping boxes\n    \n    Args:\n        end_points: dict\n            {point_clouds, center, heading_scores, heading_residuals,\n            size_scores, size_residuals, sem_cls_scores}\n        config_dict: dict\n            {dataset_config, remove_empty_box, use_3d_nms, nms_iou,\n            use_old_type_nms, conf_thresh, per_class_proposal}\n\n    Returns:\n        batch_pred_map_cls: a list of len == batch size (BS)\n            [pred_list_i], i = 0, 1, ..., BS-1\n            where pred_list_i = [(pred_sem_cls, box_params, box_score)_j]\n            where j = 0, ..., num of valid detections - 1 from sample input i\n    \"\"\"", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", "# B,num_proposal,3", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residuals'", "]", ",", "2", ",", "\n", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residuals'", "]", ",", "2", ",", "\n", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_sem_cls", "=", "torch", ".", "argmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "sem_cls_probs", "=", "softmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# B,num_proposal,10", "\n", "pred_sem_cls_prob", "=", "np", ".", "max", "(", "sem_cls_probs", ",", "-", "1", ")", "# B,num_proposal", "\n", "\n", "num_proposal", "=", "pred_center", ".", "shape", "[", "1", "]", "\n", "# Since we operate in upright_depth coord for points, while util functions", "\n", "# assume upright_camera coord.", "\n", "bsize", "=", "pred_center", ".", "shape", "[", "0", "]", "\n", "pred_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "num_proposal", ",", "8", ",", "3", ")", ")", "\n", "# pred_center_upright_camera = flip_axis_to_camera(pred_center.detach().cpu().numpy())", "\n", "pred_center_upright_camera", "=", "pred_center", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_proposal", ")", ":", "\n", "            ", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "pred_heading_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "pred_size_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "pred_size_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "pred_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "K", "=", "pred_center", ".", "shape", "[", "1", "]", "# K==num_proposal", "\n", "nonempty_box_mask", "=", "np", ".", "ones", "(", "(", "bsize", ",", "K", ")", ")", "\n", "\n", "if", "config_dict", "[", "'remove_empty_box'", "]", ":", "\n", "# -------------------------------------", "\n", "# Remove predicted boxes without any point within them..", "\n", "        ", "batch_pc", "=", "end_points", "[", "'point_clouds'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# B,N,3", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "pc", "=", "batch_pc", "[", "i", ",", ":", ",", ":", "]", "# (N,3)", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "box3d", "=", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", ":", "]", "# (8,3)", "\n", "# box3d = flip_axis_to_depth(box3d)", "\n", "pc_in_box", ",", "inds", "=", "extract_pc_in_box3d", "(", "pc", ",", "box3d", ")", "\n", "if", "len", "(", "pc_in_box", ")", "<", "5", ":", "\n", "                    ", "nonempty_box_mask", "[", "i", ",", "j", "]", "=", "0", "\n", "# -------------------------------------", "\n", "\n", "", "", "", "", "obj_logits", "=", "end_points", "[", "'objectness_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "obj_prob", "=", "softmax", "(", "obj_logits", ")", "[", ":", ",", ":", ",", "1", "]", "# (B,K)", "\n", "if", "not", "config_dict", "[", "'use_3d_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_2d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "5", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_2d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "4", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_2d_faster", "(", "boxes_2d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "(", "not", "config_dict", "[", "'cls_nms'", "]", ")", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "7", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "config_dict", "[", "'cls_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,8) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "8", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "boxes_3d_with_prob", "[", "j", ",", "7", "]", "=", "pred_sem_cls", "[", "i", ",", "j", "]", "# only suppress if the two boxes are of the same class!!", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster_samecls", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "\n", "", "batch_pred_map_cls", "=", "[", "]", "# a list (len: batch_size) of list (len: num of predictions per sample) of tuples of pred_cls, pred_box and conf (0-1)", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "if", "config_dict", "[", "'per_class_proposal'", "]", ":", "\n", "            ", "cur_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "config_dict", "[", "'dataset_config'", "]", ".", "num_class", ")", ":", "\n", "                ", "cur_list", "+=", "[", "(", "ii", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "sem_cls_probs", "[", "i", ",", "j", ",", "ii", "]", "*", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", "\n", "", "batch_pred_map_cls", ".", "append", "(", "cur_list", ")", "\n", "", "else", ":", "\n", "            ", "batch_pred_map_cls", ".", "append", "(", "[", "(", "pred_sem_cls", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", ")", "\n", "", "", "end_points", "[", "'batch_pred_map_cls'", "]", "=", "batch_pred_map_cls", "\n", "\n", "return", "batch_pred_map_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_groundtruths": [[180, 224], ["numpy.zeros", "center_label[].detach().cpu().numpy", "range", "range", "range", "batch_gt_map_cls.append", "center_label[].detach().cpu", "config_dict[].class2angle", "config_dict[].class2size", "utils.box_util.get_3d_box", "heading_class_label[].detach().cpu().numpy", "heading_residual_label[].detach().cpu().numpy", "int", "size_residual_label[].detach().cpu().numpy", "center_label[].detach", "size_class_label[].detach().cpu().numpy", "sem_cls_label[].item", "range", "heading_class_label[].detach().cpu", "heading_residual_label[].detach().cpu", "size_residual_label[].detach().cpu", "size_class_label[].detach().cpu", "heading_class_label[].detach", "heading_residual_label[].detach", "size_residual_label[].detach", "size_class_label[].detach"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box"], ["", "def", "parse_groundtruths", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    ", "\"\"\" Parse groundtruth labels to OBB parameters.\n    \n    Args:\n        end_points: dict\n            {center_label, heading_class_label, heading_residual_label,\n            size_class_label, size_residual_label, sem_cls_label,\n            box_label_mask}\n        config_dict: dict\n            {dataset_config}\n\n    Returns:\n        batch_gt_map_cls: a list  of len == batch_size (BS)\n            [gt_list_i], i = 0, 1, ..., BS-1\n            where gt_list_i = [(gt_sem_cls, gt_box_params)_j]\n            where j = 0, ..., num of objects - 1 at sample input i\n    \"\"\"", "\n", "center_label", "=", "end_points", "[", "'center_label'", "]", "\n", "heading_class_label", "=", "end_points", "[", "'heading_class_label'", "]", "\n", "heading_residual_label", "=", "end_points", "[", "'heading_residual_label'", "]", "\n", "size_class_label", "=", "end_points", "[", "'size_class_label'", "]", "\n", "size_residual_label", "=", "end_points", "[", "'size_residual_label'", "]", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "sem_cls_label", "=", "end_points", "[", "'sem_cls_label'", "]", "\n", "bsize", "=", "center_label", ".", "shape", "[", "0", "]", "\n", "\n", "K2", "=", "center_label", ".", "shape", "[", "1", "]", "# K2==MAX_NUM_OBJ", "\n", "gt_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K2", ",", "8", ",", "3", ")", ")", "\n", "# gt_center_upright_camera = flip_axis_to_camera(center_label[:,:,0:3].detach().cpu().numpy())", "\n", "gt_center_upright_camera", "=", "center_label", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K2", ")", ":", "\n", "            ", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "0", ":", "continue", "\n", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "heading_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "heading_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "size_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "size_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "gt_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "batch_gt_map_cls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "batch_gt_map_cls", ".", "append", "(", "[", "(", "sem_cls_label", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "gt_corners_3d_upright_camera", ".", "shape", "[", "1", "]", ")", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "1", "]", ")", "\n", "", "end_points", "[", "'batch_gt_map_cls'", "]", "=", "batch_gt_map_cls", "\n", "\n", "return", "batch_gt_map_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADatasetConfig.__init__": [[48, 51], ["data.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_answers", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.__init__": [[53, 60], ["dict", "enumerate", "dataset.Answer.vocab.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "answers", "=", "None", ",", "unk_token", "=", "'<unk>'", ",", "ignore_idx", "=", "-", "100", ")", ":", "\n", "        ", "if", "answers", "is", "None", ":", "\n", "            ", "answers", "=", "[", "]", "\n", "", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "ignore_idx", "=", "ignore_idx", "\n", "self", ".", "vocab", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "answers", ")", "}", "\n", "self", ".", "rev_vocab", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.itos": [[61, 65], ["None"], "methods", ["None"], ["", "def", "itos", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "==", "self", ".", "ignore_idx", ":", "\n", "            ", "return", "self", ".", "unk_token", "\n", "", "return", "self", ".", "rev_vocab", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.stoi": [[66, 71], ["None"], "methods", ["None"], ["", "def", "stoi", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "v", "not", "in", "self", ".", "vocab", ":", "\n", "#return self.vocab[self.unk_token]", "\n", "            ", "return", "self", ".", "ignore_idx", "\n", "", "return", "self", ".", "vocab", "[", "v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset.__init__": [[77, 165], ["dataset.Answer", "sorted", "dataset.ScannetQADataset._load_data", "len", "len", "print", "print", "len", "set", "int", "English", "Tokenizer", "len", "len", "print", "print", "dataset.ScannetQADataset.scene_id_to_number.items", "sent.replace.replace.replace", "record.update", "record.update", "re.sub().split", "Tokenizer.", "dataset.ScannetQADataset.__init__.tokenize"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._load_data"], ["    ", "def", "__init__", "(", "self", ",", "scanqa", ",", "scanqa_all_scene", ",", "\n", "use_unanswerable", "=", "False", ",", "\n", "answer_cands", "=", "None", ",", "\n", "answer_counter", "=", "None", ",", "\n", "answer_cls_loss", "=", "'ce'", ",", "\n", "split", "=", "'train'", ",", "\n", "num_points", "=", "40000", ",", "\n", "use_height", "=", "False", ",", "\n", "use_color", "=", "False", ",", "\n", "use_normal", "=", "False", ",", "\n", "use_multiview", "=", "False", ",", "\n", "tokenizer", "=", "None", ",", "\n", "augment", "=", "False", ",", "\n", "debug", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "debug", "=", "debug", "\n", "self", ".", "all_data_size", "=", "-", "1", "\n", "self", ".", "answerable_data_size", "=", "-", "1", "\n", "\n", "self", ".", "answer_features", "=", "None", "\n", "self", ".", "use_unanswerable", "=", "use_unanswerable", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "# remove unanswerble qa samples for training", "\n", "            ", "self", ".", "all_data_size", "=", "len", "(", "scanqa", ")", "\n", "if", "use_unanswerable", ":", "\n", "                ", "self", ".", "scanqa", "=", "scanqa", "\n", "", "else", ":", "\n", "                ", "self", ".", "scanqa", "=", "[", "data", "for", "data", "in", "scanqa", "if", "len", "(", "set", "(", "data", "[", "'answers'", "]", ")", "&", "set", "(", "answer_cands", ")", ")", ">", "0", "]", "\n", "", "self", ".", "answerable_data_size", "=", "len", "(", "self", ".", "scanqa", ")", "\n", "print", "(", "'all train:'", ",", "self", ".", "all_data_size", ")", "\n", "print", "(", "'answerable train'", ",", "self", ".", "answerable_data_size", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "all_data_size", "=", "len", "(", "scanqa", ")", "\n", "if", "use_unanswerable", ":", "\n", "                ", "self", ".", "scanqa", "=", "scanqa", "\n", "", "else", ":", "\n", "                ", "self", ".", "scanqa", "=", "[", "data", "for", "data", "in", "scanqa", "if", "len", "(", "set", "(", "data", "[", "'answers'", "]", ")", "&", "set", "(", "answer_cands", ")", ")", ">", "0", "]", "\n", "\n", "", "self", ".", "answerable_data_size", "=", "len", "(", "self", ".", "scanqa", ")", "\n", "print", "(", "'all val:'", ",", "self", ".", "all_data_size", ")", "\n", "print", "(", "'answerable val'", ",", "self", ".", "answerable_data_size", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "scanqa", "=", "scanqa", "\n", "\n", "", "self", ".", "scanqa_all_scene", "=", "scanqa_all_scene", "# all scene_ids in scanqa", "\n", "self", ".", "answer_cls_loss", "=", "answer_cls_loss", "\n", "self", ".", "answer_cands", "=", "answer_cands", "\n", "self", ".", "answer_counter", "=", "answer_counter", "\n", "self", ".", "answer_vocab", "=", "Answer", "(", "answer_cands", ")", "\n", "self", ".", "num_answers", "=", "0", "if", "answer_cands", "is", "None", "else", "len", "(", "answer_cands", ")", "\n", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "use_color", "=", "use_color", "\n", "self", ".", "use_height", "=", "use_height", "\n", "self", ".", "use_normal", "=", "use_normal", "\n", "self", ".", "use_multiview", "=", "use_multiview", "\n", "self", ".", "augment", "=", "augment", "\n", "\n", "# tokenize a question to tokens", "\n", "scene_ids", "=", "sorted", "(", "set", "(", "record", "[", "'scene_id'", "]", "for", "record", "in", "self", ".", "scanqa", ")", ")", "\n", "self", ".", "scene_id_to_number", "=", "{", "scene_id", ":", "int", "(", "''", ".", "join", "(", "re", ".", "sub", "(", "'scene'", ",", "''", ",", "scene_id", ")", ".", "split", "(", "'_'", ")", ")", ")", "for", "scene_id", "in", "scene_ids", "}", "\n", "self", ".", "scene_number_to_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "scene_id_to_number", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "use_bert_embeds", "=", "False", "\n", "if", "tokenizer", "is", "None", ":", "\n", "            ", "from", "spacy", ".", "tokenizer", "import", "Tokenizer", "\n", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "nlp", "=", "English", "(", ")", "\n", "# Create a blank Tokenizer with just the English vocab", "\n", "spacy_tokenizer", "=", "Tokenizer", "(", "nlp", ".", "vocab", ")", "\n", "\n", "def", "tokenize", "(", "sent", ")", ":", "\n", "                ", "sent", "=", "sent", ".", "replace", "(", "'?'", ",", "' ?'", ")", "\n", "return", "[", "token", ".", "text", "for", "token", "in", "spacy_tokenizer", "(", "sent", ")", "]", "\n", "\n", "", "for", "record", "in", "self", ".", "scanqa", ":", "\n", "                ", "record", ".", "update", "(", "token", "=", "tokenize", "(", "record", "[", "'question'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "use_bert_embeds", "=", "True", "\n", "for", "record", "in", "self", ".", "scanqa", ":", "\n", "                ", "record", ".", "update", "(", "token", "=", "tokenizer", "(", "record", "[", "'question'", "]", ",", "return_tensors", "=", "'np'", ")", ")", "\n", "\n", "# load data", "\n", "", "", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "multiview_data", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset.__len__": [[167, 169], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "scanqa", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset.__getitem__": [[170, 412], ["time.time", "dataset.ScannetQADataset.scanqa[].get", "numpy.zeros", "numpy.zeros.argmax", "utils.pc_utils.random_sampling", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.concatenate.astype", "numpy.array().astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.zeros.astype", "dataset.ScannetQADataset.answer_vocab.stoi", "numpy.zeros", "zip", "lang_feat[].astype", "lang_feat[].astype", "len", "numpy.concatenate", "numpy.percentile", "numpy.concatenate", "pickle.load", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.unique", "numpy.tile", "numpy.zeros", "enumerate", "numpy.zeros", "numpy.zeros", "lang_feat.astype", "data.scannet.model_util_scannet.rotate_aligned_boxes_along_axis.astype", "type", "numpy.array().astype", "numpy.array().astype", "time.time", "numpy.zeros.astype", "dataset.get_answer_score", "lang_feat[].astype", "os.path.join", "open", "utils.pc_utils.rotx", "numpy.dot", "data.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "utils.pc_utils.roty", "numpy.dot", "data.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "utils.pc_utils.rotz", "numpy.dot", "data.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "dataset.ScannetQADataset._translate", "numpy.zeros.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "object_name.split", "dataset.ScannetQADataset.answer_counter.get", "numpy.zeros.sum", "numpy.zeros.sum", "numpy.expand_dims", "numpy.random.random", "numpy.random.random", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.where", "int", "int", "int", "int", "numpy.array", "numpy.array", "int", "int", "int", "int", "int", "numpy.random.random", "numpy.random.random", "numpy.random.random", "x.min", "x.max", "question_id.split"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.random_sampling", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.stoi", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.get_answer_score", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotx", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.roty", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotz", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.rotate_aligned_boxes_along_axis", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._translate"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "scene_id", "=", "self", ".", "scanqa", "[", "idx", "]", "[", "'scene_id'", "]", "\n", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "object_ids", "=", "self", ".", "scanqa", "[", "idx", "]", "[", "'object_ids'", "]", "\n", "object_names", "=", "[", "' '", ".", "join", "(", "object_name", ".", "split", "(", "'_'", ")", ")", "for", "object_name", "in", "self", ".", "scanqa", "[", "idx", "]", "[", "'object_names'", "]", "]", "\n", "", "else", ":", "\n", "            ", "object_ids", "=", "None", "\n", "object_names", "=", "None", "\n", "\n", "", "question_id", "=", "self", ".", "scanqa", "[", "idx", "]", "[", "'question_id'", "]", "\n", "answers", "=", "self", ".", "scanqa", "[", "idx", "]", ".", "get", "(", "'answers'", ",", "[", "]", ")", "\n", "\n", "answer_cats", "=", "np", ".", "zeros", "(", "self", ".", "num_answers", ")", "\n", "answer_inds", "=", "[", "self", ".", "answer_vocab", ".", "stoi", "(", "answer", ")", "for", "answer", "in", "answers", "]", "\n", "\n", "if", "self", ".", "answer_counter", "is", "not", "None", ":", "\n", "            ", "answer_cat_scores", "=", "np", ".", "zeros", "(", "self", ".", "num_answers", ")", "\n", "for", "answer", ",", "answer_ind", "in", "zip", "(", "answers", ",", "answer_inds", ")", ":", "\n", "                ", "if", "answer_ind", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "answer_cats", "[", "answer_ind", "]", "=", "1", "\n", "answer_cat_score", "=", "get_answer_score", "(", "self", ".", "answer_counter", ".", "get", "(", "answer", ",", "0", ")", ")", "\n", "answer_cat_scores", "[", "answer_ind", "]", "=", "answer_cat_score", "\n", "\n", "", "if", "not", "self", ".", "use_unanswerable", ":", "\n", "                ", "assert", "answer_cats", ".", "sum", "(", ")", ">", "0", "\n", "assert", "answer_cat_scores", ".", "sum", "(", ")", ">", "0", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "answer_cat", "=", "answer_cats", ".", "argmax", "(", ")", "\n", "\n", "#", "\n", "# get language features", "\n", "#", "\n", "if", "self", ".", "use_bert_embeds", ":", "\n", "            ", "lang_feat", "=", "self", ".", "lang", "[", "scene_id", "]", "[", "question_id", "]", "\n", "lang_feat", "[", "'input_ids'", "]", "=", "lang_feat", "[", "'input_ids'", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "lang_feat", "[", "'attention_mask'", "]", "=", "lang_feat", "[", "'attention_mask'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "'token_type_ids'", "in", "lang_feat", ":", "\n", "                ", "lang_feat", "[", "'token_type_ids'", "]", "=", "lang_feat", "[", "'token_type_ids'", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "lang_len", "=", "self", ".", "scanqa", "[", "idx", "]", "[", "'token'", "]", "[", "'input_ids'", "]", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "lang_feat", "=", "self", ".", "lang", "[", "scene_id", "]", "[", "question_id", "]", "\n", "lang_len", "=", "len", "(", "self", ".", "scanqa", "[", "idx", "]", "[", "'token'", "]", ")", "\n", "\n", "", "lang_len", "=", "lang_len", "if", "lang_len", "<=", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", "else", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", "\n", "#", "\n", "# get point cloud features", "\n", "#", "\n", "mesh_vertices", "=", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'mesh_vertices'", "]", "\n", "instance_labels", "=", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'instance_labels'", "]", "\n", "semantic_labels", "=", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'semantic_labels'", "]", "\n", "instance_bboxes", "=", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'instance_bboxes'", "]", "\n", "\n", "if", "not", "self", ".", "use_color", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pcl_color", "=", "mesh_vertices", "[", ":", ",", "3", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "6", "]", "\n", "point_cloud", "[", ":", ",", "3", ":", "6", "]", "=", "(", "point_cloud", "[", ":", ",", "3", ":", "6", "]", "-", "MEAN_COLOR_RGB", ")", "/", "256.0", "\n", "pcl_color", "=", "point_cloud", "[", ":", ",", "3", ":", "6", "]", "\n", "\n", "", "if", "self", ".", "use_normal", ":", "\n", "            ", "normals", "=", "mesh_vertices", "[", ":", ",", "6", ":", "9", "]", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "normals", "]", ",", "1", ")", "# p (50000, 7)", "\n", "\n", "", "if", "self", ".", "use_height", ":", "\n", "            ", "floor_height", "=", "np", ".", "percentile", "(", "point_cloud", "[", ":", ",", "2", "]", ",", "0.99", ")", "\n", "height", "=", "point_cloud", "[", ":", ",", "2", "]", "-", "floor_height", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "np", ".", "expand_dims", "(", "height", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "", "'''\n        if self.use_multiview:\n            # load multiview database\n            pid = mp.current_process().pid\n            if pid not in self.multiview_data:\n                self.multiview_data[pid] = h5py.File(MULTIVIEW_DATA + '.hdf5', 'r', libver='latest')\n            multiview = self.multiview_data[pid][scene_id]\n            point_cloud = np.concatenate([point_cloud, multiview],1)\n        '''", "\n", "\n", "#'''", "\n", "if", "self", ".", "use_multiview", ":", "\n", "# load multiview database", "\n", "            ", "enet_feats_file", "=", "os", ".", "path", ".", "join", "(", "MULTIVIEW_DATA", ",", "scene_id", ")", "+", "'.pkl'", "\n", "multiview", "=", "pickle", ".", "load", "(", "open", "(", "enet_feats_file", ",", "'rb'", ")", ")", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "multiview", "]", ",", "1", ")", "# p (50000, 135)", "\n", "#'''", "\n", "\n", "", "point_cloud", ",", "choices", "=", "random_sampling", "(", "point_cloud", ",", "self", ".", "num_points", ",", "return_choices", "=", "True", ")", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "pcl_color", "=", "pcl_color", "[", "choices", "]", "\n", "\n", "# ------------------------------- LABELS ------------------------------    ", "\n", "target_bboxes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "6", ")", ")", "\n", "target_bboxes_mask", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "angle_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "angle_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "ref_box_label", "=", "np", ".", "zeros", "(", "MAX_NUM_OBJ", ")", "# bbox label for reference target", "\n", "\n", "ref_center_label", "=", "np", ".", "zeros", "(", "3", ")", "# bbox center for reference target", "\n", "ref_heading_class_label", "=", "0", "\n", "ref_heading_residual_label", "=", "0", "\n", "ref_size_class_label", "=", "0", "\n", "ref_size_residual_label", "=", "np", ".", "zeros", "(", "3", ")", "# bbox size residual for reference target", "\n", "\n", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "num_bbox", "=", "instance_bboxes", ".", "shape", "[", "0", "]", "if", "instance_bboxes", ".", "shape", "[", "0", "]", "<", "MAX_NUM_OBJ", "else", "MAX_NUM_OBJ", "\n", "target_bboxes_mask", "[", "0", ":", "num_bbox", "]", "=", "1", "\n", "target_bboxes", "[", "0", ":", "num_bbox", ",", ":", "]", "=", "instance_bboxes", "[", ":", "MAX_NUM_OBJ", ",", "0", ":", "6", "]", "\n", "\n", "point_votes", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_points", ",", "3", "]", ")", "\n", "point_votes_mask", "=", "np", ".", "zeros", "(", "self", ".", "num_points", ")", "\n", "\n", "# ------------------------------- DATA AUGMENTATION ------------------------------        ", "\n", "if", "self", ".", "augment", "and", "not", "self", ".", "debug", ":", "\n", "                ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the YZ plane", "\n", "                    ", "point_cloud", "[", ":", ",", "0", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "0", "]", "\n", "target_bboxes", "[", ":", ",", "0", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the XZ plane", "\n", "                    ", "point_cloud", "[", ":", ",", "1", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "1", "]", "\n", "target_bboxes", "[", ":", ",", "1", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "1", "]", "\n", "\n", "# Rotation along X-axis", "\n", "", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "18", ")", "-", "np", ".", "pi", "/", "36", "# -5 ~ +5 degree", "\n", "rot_mat", "=", "rotx", "(", "rot_angle", ")", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "target_bboxes", "=", "rotate_aligned_boxes_along_axis", "(", "target_bboxes", ",", "rot_mat", ",", "'x'", ")", "\n", "\n", "# Rotation along Y-axis", "\n", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "18", ")", "-", "np", ".", "pi", "/", "36", "# -5 ~ +5 degree", "\n", "rot_mat", "=", "roty", "(", "rot_angle", ")", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "target_bboxes", "=", "rotate_aligned_boxes_along_axis", "(", "target_bboxes", ",", "rot_mat", ",", "'y'", ")", "\n", "\n", "# Rotation along up-axis/Z-axis", "\n", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "18", ")", "-", "np", ".", "pi", "/", "36", "# -5 ~ +5 degree", "\n", "rot_mat", "=", "rotz", "(", "rot_angle", ")", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "target_bboxes", "=", "rotate_aligned_boxes_along_axis", "(", "target_bboxes", ",", "rot_mat", ",", "'z'", ")", "\n", "\n", "# Translation", "\n", "point_cloud", ",", "target_bboxes", "=", "self", ".", "_translate", "(", "point_cloud", ",", "target_bboxes", ")", "\n", "\n", "# compute votes *AFTER* augmentation", "\n", "# generate votes", "\n", "# Note: since there's no map between bbox instance labels and", "\n", "# pc instance_labels (it had been filtered ", "\n", "# in the data preparation step) we'll compute the instance bbox", "\n", "# from the points sharing the same instance label. ", "\n", "", "for", "i_instance", "in", "np", ".", "unique", "(", "instance_labels", ")", ":", "\n", "# find all points belong to that instance", "\n", "                ", "ind", "=", "np", ".", "where", "(", "instance_labels", "==", "i_instance", ")", "[", "0", "]", "\n", "# find the semantic label            ", "\n", "if", "semantic_labels", "[", "ind", "[", "0", "]", "]", "in", "DC", ".", "nyu40ids", ":", "\n", "                    ", "x", "=", "point_cloud", "[", "ind", ",", ":", "3", "]", "\n", "center", "=", "0.5", "*", "(", "x", ".", "min", "(", "0", ")", "+", "x", ".", "max", "(", "0", ")", ")", "\n", "point_votes", "[", "ind", ",", ":", "]", "=", "center", "-", "x", "\n", "point_votes_mask", "[", "ind", "]", "=", "1.0", "\n", "", "", "point_votes", "=", "np", ".", "tile", "(", "point_votes", ",", "(", "1", ",", "3", ")", ")", "# make 3 votes identical ", "\n", "\n", "class_ind", "=", "[", "DC", ".", "nyu40id2class", "[", "int", "(", "x", ")", "]", "for", "x", "in", "instance_bboxes", "[", ":", "num_bbox", ",", "-", "2", "]", "]", "\n", "# NOTE: set size class as semantic class. Consider use size2class.", "\n", "size_classes", "[", "0", ":", "num_bbox", "]", "=", "class_ind", "\n", "size_residuals", "[", "0", ":", "num_bbox", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "num_bbox", ",", "3", ":", "6", "]", "-", "DC", ".", "mean_size_arr", "[", "class_ind", ",", ":", "]", "\n", "\n", "# construct the reference target label for each bbox", "\n", "ref_box_label", "=", "np", ".", "zeros", "(", "MAX_NUM_OBJ", ")", "\n", "\n", "for", "i", ",", "gt_id", "in", "enumerate", "(", "instance_bboxes", "[", ":", "num_bbox", ",", "-", "1", "]", ")", ":", "\n", "                ", "if", "gt_id", "==", "object_ids", "[", "0", "]", ":", "\n", "                    ", "ref_box_label", "[", "i", "]", "=", "1", "\n", "ref_center_label", "=", "target_bboxes", "[", "i", ",", "0", ":", "3", "]", "\n", "ref_heading_class_label", "=", "angle_classes", "[", "i", "]", "\n", "ref_heading_residual_label", "=", "angle_residuals", "[", "i", "]", "\n", "ref_size_class_label", "=", "size_classes", "[", "i", "]", "\n", "ref_size_residual_label", "=", "size_residuals", "[", "i", "]", "\n", "\n", "\n", "", "", "assert", "ref_box_label", ".", "sum", "(", ")", ">", "0", "\n", "", "else", ":", "\n", "            ", "num_bbox", "=", "1", "\n", "point_votes", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_points", ",", "9", "]", ")", "# make 3 votes identical ", "\n", "point_votes_mask", "=", "np", ".", "zeros", "(", "self", ".", "num_points", ")", "\n", "\n", "", "target_bboxes_semcls", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "try", ":", "\n", "            ", "target_bboxes_semcls", "[", "0", ":", "num_bbox", "]", "=", "[", "DC", ".", "nyu40id2class", "[", "int", "(", "x", ")", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "2", "]", "[", "0", ":", "num_bbox", "]", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "\n", "", "object_name", "=", "None", "if", "object_names", "is", "None", "else", "object_names", "[", "0", "]", "\n", "object_cat", "=", "self", ".", "raw2label", "[", "object_name", "]", "if", "object_name", "in", "self", ".", "raw2label", "else", "17", "\n", "\n", "data_dict", "=", "{", "}", "\n", "if", "self", ".", "use_bert_embeds", ":", "\n", "            ", "data_dict", "[", "'lang_feat'", "]", "=", "lang_feat", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "'lang_feat'", "]", "=", "lang_feat", ".", "astype", "(", "np", ".", "float32", ")", "# language feature vectors", "\n", "", "data_dict", "[", "'point_clouds'", "]", "=", "point_cloud", ".", "astype", "(", "np", ".", "float32", ")", "# point cloud data including features", "\n", "data_dict", "[", "'lang_len'", "]", "=", "np", ".", "array", "(", "lang_len", ")", ".", "astype", "(", "np", ".", "int64", ")", "# length of each description", "\n", "data_dict", "[", "'center_label'", "]", "=", "target_bboxes", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", "0", ":", "3", "]", "# (MAX_NUM_OBJ, 3) for GT box center XYZ", "\n", "data_dict", "[", "'heading_class_label'", "]", "=", "angle_classes", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,) with int values in 0,...,NUM_HEADING_BIN-1", "\n", "data_dict", "[", "'heading_residual_label'", "]", "=", "angle_residuals", ".", "astype", "(", "np", ".", "float32", ")", "# (MAX_NUM_OBJ,)", "\n", "data_dict", "[", "'size_class_label'", "]", "=", "size_classes", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,) with int values in 0,...,NUM_SIZE_CLUSTER", "\n", "data_dict", "[", "'size_residual_label'", "]", "=", "size_residuals", ".", "astype", "(", "np", ".", "float32", ")", "# (MAX_NUM_OBJ, 3)", "\n", "data_dict", "[", "'num_bbox'", "]", "=", "np", ".", "array", "(", "num_bbox", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "data_dict", "[", "'sem_cls_label'", "]", "=", "target_bboxes_semcls", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,) semantic class index", "\n", "data_dict", "[", "'box_label_mask'", "]", "=", "target_bboxes_mask", ".", "astype", "(", "np", ".", "float32", ")", "# (MAX_NUM_OBJ) as 0/1 with 1 indicating a unique box", "\n", "data_dict", "[", "'vote_label'", "]", "=", "point_votes", ".", "astype", "(", "np", ".", "float32", ")", "# ", "\n", "data_dict", "[", "'vote_label_mask'", "]", "=", "point_votes_mask", ".", "astype", "(", "np", ".", "int64", ")", "# point_obj_mask (gf3d)", "\n", "data_dict", "[", "'scan_idx'", "]", "=", "np", ".", "array", "(", "idx", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "data_dict", "[", "'pcl_color'", "]", "=", "pcl_color", "\n", "data_dict", "[", "'ref_box_label'", "]", "=", "ref_box_label", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,) # 0/1 reference labels for each object bbox", "\n", "\n", "data_dict", "[", "'ref_center_label'", "]", "=", "ref_center_label", ".", "astype", "(", "np", ".", "float32", ")", "# (3,)", "\n", "data_dict", "[", "'ref_heading_class_label'", "]", "=", "np", ".", "array", "(", "int", "(", "ref_heading_class_label", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,)", "\n", "data_dict", "[", "'ref_heading_residual_label'", "]", "=", "np", ".", "array", "(", "int", "(", "ref_heading_residual_label", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,)", "\n", "data_dict", "[", "'ref_size_class_label'", "]", "=", "np", ".", "array", "(", "int", "(", "ref_size_class_label", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# (MAX_NUM_OBJ,)", "\n", "data_dict", "[", "'ref_size_residual_label'", "]", "=", "ref_size_residual_label", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data_dict", "[", "'object_cat'", "]", "=", "np", ".", "array", "(", "object_cat", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "data_dict", "[", "'scene_id'", "]", "=", "np", ".", "array", "(", "int", "(", "self", ".", "scene_id_to_number", "[", "scene_id", "]", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "type", "(", "question_id", ")", "==", "str", ":", "\n", "            ", "data_dict", "[", "'question_id'", "]", "=", "np", ".", "array", "(", "int", "(", "question_id", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "'question_id'", "]", "=", "np", ".", "array", "(", "int", "(", "question_id", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "data_dict", "[", "'pcl_color'", "]", "=", "pcl_color", "\n", "data_dict", "[", "'load_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "data_dict", "[", "'answer_cat'", "]", "=", "np", ".", "array", "(", "int", "(", "answer_cat", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", "# 1", "\n", "data_dict", "[", "'answer_cats'", "]", "=", "answer_cats", ".", "astype", "(", "np", ".", "int64", ")", "# num_answers", "\n", "if", "self", ".", "answer_cls_loss", "==", "'bce'", "and", "self", ".", "answer_counter", "is", "not", "None", ":", "\n", "            ", "data_dict", "[", "'answer_cat_scores'", "]", "=", "answer_cat_scores", ".", "astype", "(", "np", ".", "float32", ")", "# num_answers", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._get_raw2label": [[414, 433], ["DC.type2class.keys", "range", "line.rstrip", "len", "set", "lines[].split", "enumerate", "open"], "methods", ["None"], ["", "def", "_get_raw2label", "(", "self", ")", ":", "\n", "# mapping", "\n", "        ", "scannet_labels", "=", "DC", ".", "type2class", ".", "keys", "(", ")", "\n", "scannet2label", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "scannet_labels", ")", "}", "\n", "\n", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "SCANNET_V2_TSV", ")", "]", "\n", "lines", "=", "lines", "[", "1", ":", "]", "\n", "raw2label", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "label_classes_set", "=", "set", "(", "scannet_labels", ")", "\n", "elements", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "raw_name", "=", "elements", "[", "1", "]", "\n", "nyu40_name", "=", "elements", "[", "7", "]", "\n", "if", "nyu40_name", "not", "in", "label_classes_set", ":", "\n", "                ", "raw2label", "[", "raw_name", "]", "=", "scannet2label", "[", "'others'", "]", "\n", "", "else", ":", "\n", "                ", "raw2label", "[", "raw_name", "]", "=", "scannet2label", "[", "nyu40_name", "]", "\n", "\n", "", "", "return", "raw2label", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._get_unique_multiple_lookup": [[434, 485], ["zip", "numpy.array", "zip", "max", "all_sem_labels.keys", "unique_multiples.append", "object_name.split", "object_name.split", "all_sem_labels[].append", "all_sem_labels[].append"], "methods", ["None"], ["", "def", "_get_unique_multiple_lookup", "(", "self", ")", ":", "\n", "        ", "all_sem_labels", "=", "{", "}", "\n", "cache", "=", "{", "}", "\n", "for", "data", "in", "self", ".", "scanqa", ":", "\n", "            ", "scene_id", "=", "data", "[", "'scene_id'", "]", "\n", "\n", "for", "object_id", ",", "object_name", "in", "zip", "(", "data", "[", "'object_ids'", "]", ",", "data", "[", "'object_names'", "]", ")", ":", "\n", "                ", "object_id", "=", "data", "[", "'object_ids'", "]", "[", "0", "]", "\n", "object_name", "=", "' '", ".", "join", "(", "object_name", ".", "split", "(", "'_'", ")", ")", "\n", "\n", "if", "scene_id", "not", "in", "all_sem_labels", ":", "\n", "                    ", "all_sem_labels", "[", "scene_id", "]", "=", "[", "]", "\n", "\n", "", "if", "scene_id", "not", "in", "cache", ":", "\n", "                    ", "cache", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "", "if", "object_id", "not", "in", "cache", "[", "scene_id", "]", ":", "\n", "                    ", "cache", "[", "scene_id", "]", "[", "object_id", "]", "=", "{", "}", "\n", "try", ":", "\n", "                        ", "all_sem_labels", "[", "scene_id", "]", ".", "append", "(", "self", ".", "raw2label", "[", "object_name", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "all_sem_labels", "[", "scene_id", "]", ".", "append", "(", "17", ")", "\n", "\n", "", "", "", "", "all_sem_labels", "=", "{", "scene_id", ":", "np", ".", "array", "(", "all_sem_labels", "[", "scene_id", "]", ")", "for", "scene_id", "in", "all_sem_labels", ".", "keys", "(", ")", "}", "\n", "\n", "unique_multiple_lookup", "=", "{", "}", "\n", "for", "data", "in", "self", ".", "scanqa", ":", "\n", "            ", "scene_id", "=", "data", "[", "'scene_id'", "]", "\n", "question_id", "=", "data", "[", "'question_id'", "]", "\n", "\n", "unique_multiples", "=", "[", "]", "\n", "for", "object_id", ",", "object_name", "in", "zip", "(", "data", "[", "'object_ids'", "]", ",", "data", "[", "'object_names'", "]", ")", ":", "\n", "                ", "object_id", "=", "data", "[", "'object_ids'", "]", "[", "0", "]", "\n", "object_name", "=", "' '", ".", "join", "(", "object_name", ".", "split", "(", "'_'", ")", ")", "\n", "try", ":", "\n", "                    ", "sem_label", "=", "self", ".", "raw2label", "[", "object_name", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "sem_label", "=", "17", "\n", "\n", "", "unique_multiple_", "=", "0", "if", "(", "all_sem_labels", "[", "scene_id", "]", "==", "sem_label", ")", ".", "sum", "(", ")", "==", "1", "else", "1", "\n", "unique_multiples", ".", "append", "(", "unique_multiple_", ")", "\n", "\n", "", "unique_multiple", "=", "max", "(", "unique_multiples", ")", "\n", "\n", "# store", "\n", "if", "scene_id", "not", "in", "unique_multiple_lookup", ":", "\n", "                ", "unique_multiple_lookup", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "", "unique_multiple_lookup", "[", "scene_id", "]", "[", "question_id", "]", "=", "unique_multiple", "\n", "\n", "", "return", "unique_multiple_lookup", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._tranform_text_glove": [[486, 518], ["open", "pickle.load", "numpy.zeros", "range", "len"], "methods", ["None"], ["", "def", "_tranform_text_glove", "(", "self", ",", "token_type", "=", "'token'", ")", ":", "\n", "        ", "with", "open", "(", "GLOVE_PICKLE", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "glove", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "lang", "=", "{", "}", "\n", "for", "data", "in", "self", ".", "scanqa", ":", "\n", "            ", "scene_id", "=", "data", "[", "'scene_id'", "]", "\n", "question_id", "=", "data", "[", "'question_id'", "]", "\n", "\n", "if", "scene_id", "not", "in", "lang", ":", "\n", "                ", "lang", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "", "if", "question_id", "in", "lang", "[", "scene_id", "]", ":", "\n", "                ", "continue", "\n", "\n", "# tokenize the description", "\n", "", "tokens", "=", "data", "[", "token_type", "]", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", ",", "300", ")", ")", "\n", "# tokens = ['sos'] + tokens + ['eos']", "\n", "# embeddings = np.zeros((CONF.TRAIN.MAX_TEXT_LEN + 2, 300))", "\n", "for", "token_id", "in", "range", "(", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", ")", ":", "\n", "                ", "if", "token_id", "<", "len", "(", "tokens", ")", ":", "\n", "                    ", "token", "=", "tokens", "[", "token_id", "]", "\n", "if", "token", "in", "glove", ":", "\n", "                        ", "embeddings", "[", "token_id", "]", "=", "glove", "[", "token", "]", "\n", "", "else", ":", "\n", "                        ", "embeddings", "[", "token_id", "]", "=", "glove", "[", "'unk'", "]", "\n", "\n", "# store", "\n", "", "", "", "lang", "[", "scene_id", "]", "[", "question_id", "]", "=", "embeddings", "\n", "\n", "", "return", "lang", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._tranform_text_bert": [[519, 561], ["numpy.zeros", "numpy.append", "dataset.ScannetQADataset._tranform_text_bert.pad_tokens"], "methods", ["None"], ["", "def", "_tranform_text_bert", "(", "self", ",", "token_type", "=", "'token'", ")", ":", "\n", "        ", "lang", "=", "{", "}", "\n", "\n", "def", "pad_tokens", "(", "tokens", ")", ":", "\n", "            ", "N", "=", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", "-", "2", "\n", "if", "tokens", ".", "ndim", "==", "2", ":", "\n", "                ", "tokens", "=", "tokens", "[", "0", "]", "\n", "", "padded_tokens", "=", "np", ".", "zeros", "(", "CONF", ".", "TRAIN", ".", "MAX_TEXT_LEN", ")", "\n", "tokens", "=", "np", ".", "append", "(", "tokens", "[", ":", "-", "1", "]", "[", ":", "N", "+", "1", "]", ",", "tokens", "[", "-", "1", ":", "]", ")", "\n", "padded_tokens", "[", ":", "len", "(", "tokens", ")", "]", "=", "tokens", "\n", "return", "padded_tokens", "\n", "\n", "", "for", "data", "in", "self", ".", "scanqa", ":", "\n", "            ", "scene_id", "=", "data", "[", "'scene_id'", "]", "\n", "question_id", "=", "data", "[", "'question_id'", "]", "\n", "\n", "if", "scene_id", "not", "in", "lang", ":", "\n", "                ", "lang", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "", "if", "question_id", "in", "lang", "[", "scene_id", "]", ":", "\n", "                ", "continue", "\n", "\n", "# for BERT", "\n", "", "if", "'token_type_ids'", "in", "data", "[", "token_type", "]", ":", "\n", "                ", "padded_input_ids", "=", "pad_tokens", "(", "data", "[", "token_type", "]", "[", "'input_ids'", "]", ")", "\n", "padded_token_type_ids", "=", "pad_tokens", "(", "data", "[", "token_type", "]", "[", "'token_type_ids'", "]", ")", "\n", "padded_attention_mask", "=", "pad_tokens", "(", "data", "[", "token_type", "]", "[", "'attention_mask'", "]", ")", "\n", "# store", "\n", "lang", "[", "scene_id", "]", "[", "question_id", "]", "=", "{", "\n", "'input_ids'", ":", "padded_input_ids", ",", "\n", "'token_type_ids'", ":", "padded_token_type_ids", ",", "\n", "'attention_mask'", ":", "padded_attention_mask", ",", "\n", "}", "\n", "", "else", ":", "# for DistillBERT", "\n", "                ", "padded_input_ids", "=", "pad_tokens", "(", "data", "[", "token_type", "]", "[", "'input_ids'", "]", ")", "\n", "padded_attention_mask", "=", "pad_tokens", "(", "data", "[", "token_type", "]", "[", "'attention_mask'", "]", ")", "\n", "lang", "[", "scene_id", "]", "[", "question_id", "]", "=", "{", "\n", "'input_ids'", ":", "padded_input_ids", ",", "\n", "'attention_mask'", ":", "padded_attention_mask", ",", "\n", "}", "\n", "\n", "", "", "return", "lang", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._load_data": [[563, 599], ["print", "sorted", "range", "dataset.ScannetQADataset._get_raw2label", "dataset.ScannetQADataset._tranform_text_bert", "dataset.ScannetQADataset._tranform_text_glove", "list", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "line.rstrip", "len", "lines[].split", "int", "dataset.ScannetQADataset._get_unique_multiple_lookup", "set", "open", "dataset.ScannetQADataset.raw2label.items", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._get_raw2label", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._tranform_text_bert", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._tranform_text_glove", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._get_unique_multiple_lookup"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "print", "(", "'loading data...'", ")", "\n", "# load language features", "\n", "if", "self", ".", "use_bert_embeds", ":", "\n", "            ", "self", ".", "lang", "=", "self", ".", "_tranform_text_bert", "(", "'token'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lang", "=", "self", ".", "_tranform_text_glove", "(", "'token'", ")", "\n", "\n", "# add scannet data", "\n", "", "self", ".", "scene_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "data", "[", "'scene_id'", "]", "for", "data", "in", "self", ".", "scanqa", "]", ")", ")", ")", "\n", "\n", "# load scene data", "\n", "self", ".", "scene_data", "=", "{", "}", "\n", "for", "scene_id", "in", "self", ".", "scene_list", ":", "\n", "            ", "self", ".", "scene_data", "[", "scene_id", "]", "=", "{", "}", "\n", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'mesh_vertices'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_DATA", ",", "scene_id", ")", "+", "'_aligned_vert.npy'", ")", "# axis-aligned", "\n", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'instance_labels'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_DATA", ",", "scene_id", ")", "+", "'_ins_label.npy'", ")", "\n", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'semantic_labels'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_DATA", ",", "scene_id", ")", "+", "'_sem_label.npy'", ")", "\n", "self", ".", "scene_data", "[", "scene_id", "]", "[", "'instance_bboxes'", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_DATA", ",", "scene_id", ")", "+", "'_aligned_bbox.npy'", ")", "\n", "\n", "# prepare class mapping", "\n", "", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "SCANNET_V2_TSV", ")", "]", "\n", "lines", "=", "lines", "[", "1", ":", "]", "\n", "raw2nyuid", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "elements", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "raw_name", "=", "elements", "[", "1", "]", "\n", "nyu40_name", "=", "int", "(", "elements", "[", "4", "]", ")", "\n", "raw2nyuid", "[", "raw_name", "]", "=", "nyu40_name", "\n", "\n", "# store", "\n", "", "self", ".", "raw2nyuid", "=", "raw2nyuid", "\n", "self", ".", "raw2label", "=", "self", ".", "_get_raw2label", "(", ")", "\n", "self", ".", "label2raw", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "raw2label", ".", "items", "(", ")", "}", "\n", "if", "self", ".", "split", "!=", "'test'", ":", "\n", "            ", "self", ".", "unique_multiple_lookup", "=", "self", ".", "_get_unique_multiple_lookup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.ScannetQADataset._translate": [[600, 614], ["numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "", "def", "_translate", "(", "self", ",", "point_set", ",", "bbox", ")", ":", "\n", "# unpack", "\n", "        ", "coords", "=", "point_set", "[", ":", ",", ":", "3", "]", "\n", "# translation factors", "\n", "x_factor", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "-", "0.5", ",", "0.501", ",", "0.001", ")", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "y_factor", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "-", "0.5", ",", "0.501", ",", "0.001", ")", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "z_factor", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "-", "0.5", ",", "0.501", ",", "0.001", ")", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "factor", "=", "[", "x_factor", ",", "y_factor", ",", "z_factor", "]", "\n", "# dump", "\n", "coords", "+=", "factor", "\n", "point_set", "[", ":", ",", ":", "3", "]", "=", "coords", "\n", "bbox", "[", ":", ",", ":", "3", "]", "+=", "factor", "\n", "\n", "return", "point_set", ",", "bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.get_answer_score": [[35, 46], ["None"], "function", ["None"], ["def", "get_answer_score", "(", "freq", ")", ":", "\n", "    ", "if", "freq", "==", "0", ":", "\n", "        ", "return", ".0", "\n", "", "elif", "freq", "==", "1", ":", "\n", "        ", "return", ".3", "\n", "", "elif", "freq", "==", "2", ":", "\n", "        ", "return", ".6", "\n", "", "elif", "freq", "==", "3", ":", "\n", "        ", "return", ".9", "\n", "", "else", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss.SoftmaxRankingLoss.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss.SoftmaxRankingLoss.forward": [[20, 31], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "# input check", "\n", "        ", "assert", "inputs", ".", "shape", "==", "targets", ".", "shape", "\n", "\n", "# compute the probabilities", "\n", "probs", "=", "torch", ".", "softmax", "(", "inputs", "+", "1e-8", ",", "dim", "=", "1", ")", "\n", "\n", "# reduction", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "probs", "+", "1e-8", ")", "*", "targets", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss.smoothl1_loss": [[6, 10], ["torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["def", "smoothl1_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "diff", "=", "torch", ".", "abs", "(", "error", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "delta", ",", "0.5", "*", "diff", "*", "diff", "/", "delta", ",", "diff", "-", "0.5", "*", "delta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss.l1_loss": [[12, 15], ["torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "l1_loss", "(", "error", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "abs", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.eval_ref_one_sample": [[25, 38], ["utils.box_util.box3d_iou"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_iou"], ["def", "eval_ref_one_sample", "(", "pred_bbox", ",", "gt_bbox", ")", ":", "\n", "    ", "\"\"\" Evaluate one reference prediction\n\n    Args:\n        pred_bbox: 8 corners of prediction bounding box, (8, 3)\n        gt_bbox: 8 corners of ground truth bounding box, (8, 3)\n    Returns:\n        iou: intersection over union score\n    \"\"\"", "\n", "\n", "iou", "=", "box3d_iou", "(", "pred_bbox", ",", "gt_bbox", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.construct_bbox_corners": [[39, 51], ["numpy.vstack", "numpy.transpose"], "function", ["None"], ["", "def", "construct_bbox_corners", "(", "center", ",", "box_size", ")", ":", "\n", "    ", "sx", ",", "sy", ",", "sz", "=", "box_size", "\n", "x_corners", "=", "[", "sx", "/", "2", ",", "sx", "/", "2", ",", "-", "sx", "/", "2", ",", "-", "sx", "/", "2", ",", "sx", "/", "2", ",", "sx", "/", "2", ",", "-", "sx", "/", "2", ",", "-", "sx", "/", "2", "]", "\n", "y_corners", "=", "[", "sy", "/", "2", ",", "-", "sy", "/", "2", ",", "-", "sy", "/", "2", ",", "sy", "/", "2", ",", "sy", "/", "2", ",", "-", "sy", "/", "2", ",", "-", "sy", "/", "2", ",", "sy", "/", "2", "]", "\n", "z_corners", "=", "[", "sz", "/", "2", ",", "sz", "/", "2", ",", "sz", "/", "2", ",", "sz", "/", "2", ",", "-", "sz", "/", "2", ",", "-", "sz", "/", "2", ",", "-", "sz", "/", "2", ",", "-", "sz", "/", "2", "]", "\n", "corners_3d", "=", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "center", "[", "0", "]", ";", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "center", "[", "1", "]", ";", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "center", "[", "2", "]", ";", "\n", "corners_3d", "=", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "\n", "return", "corners_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.get_eval": [[53, 246], ["torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "data_dict[].long", "torch.argmax().long().unsqueeze().repeat", "torch.argmax().long().unsqueeze().repeat", "torch.argmax().long().unsqueeze().repeat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "preds.scatter_.scatter_", "data_dict[].float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "ref_acc.cpu().numpy().tolist", "torch.argmax", "torch.argmax", "torch.argmax", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "data_dict[].argmax", "lib.ap_helper.parse_predictions", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.argmax", "torch.argmax", "torch.argmax", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().unsqueeze", "torch.gather().unsqueeze", "torch.gather().unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_heading_residual.squeeze.squeeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_size_residual.squeeze.squeeze", "config.param2obb", "config.param2obb", "utils.box_util.get_3d_box", "utils.box_util.get_3d_box", "eval_helper.eval_ref_one_sample", "ious.append", "eval_helper.construct_bbox_corners", "eval_helper.construct_bbox_corners", "pred_bboxes.append", "gt_bboxes.append", "data_dict[].cpu().detach().numpy", "[].cuda", "[].cuda", "[].cuda", "torch.argmax", "torch.argmax", "torch.argmax", "[].mean", "[].mean", "torch.sum", "torch.sum", "torch.sum", "data_dict[].sum", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax().long().unsqueeze", "torch.argmax().long().unsqueeze", "torch.argmax().long().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.ones", "ref_acc.cpu().numpy", "torch.gather", "torch.gather", "torch.gather", "data_dict[].unsqueeze().repeat", "data_dict[].unsqueeze().repeat", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "pred_center[].detach().cpu().numpy", "pred_heading_class[].detach().cpu().numpy", "pred_heading_residual[].detach().cpu().numpy", "pred_size_class[].detach().cpu().numpy", "pred_size_residual[].detach().cpu().numpy", "gt_center[].detach().cpu().numpy", "gt_heading_class[].detach().cpu().numpy", "gt_heading_residual[].detach().cpu().numpy", "gt_size_class[].detach().cpu().numpy", "gt_size_residual[].detach().cpu().numpy", "data_dict[].topk", "torch.sum", "torch.sum", "torch.sum", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.gather", "torch.gather", "torch.gather", "data_dict[].cpu().detach", "numpy.array", "numpy.array", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "ref_acc.cpu", "torch.randperm", "torch.randperm", "torch.randperm", "data_dict[].unsqueeze", "data_dict[].unsqueeze", "torch.argmax.unsqueeze().unsqueeze", "pred_center[].detach().cpu", "pred_heading_class[].detach().cpu", "pred_heading_residual[].detach().cpu", "pred_size_class[].detach().cpu", "pred_size_residual[].detach().cpu", "gt_center[].detach().cpu", "gt_heading_class[].detach().cpu", "gt_heading_residual[].detach().cpu", "gt_size_class[].detach().cpu", "gt_size_residual[].detach().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array", "numpy.array", "data_dict[].cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax.unsqueeze", "pred_center[].detach", "pred_heading_class[].detach", "pred_heading_residual[].detach", "pred_size_class[].detach", "pred_size_residual[].detach", "gt_center[].detach", "gt_heading_class[].detach", "gt_heading_residual[].detach", "gt_size_class[].detach", "gt_size_residual[].detach", "torch.argmax", "torch.argmax", "torch.argmax", "numpy.array", "numpy.array", "data_dict[].long", "torch.one_hot().float", "torch.one_hot().sum().float", "torch.one_hot", "torch.one_hot().sum", "torch.one_hot"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.eval_ref_one_sample", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.construct_bbox_corners", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.construct_bbox_corners"], ["", "def", "get_eval", "(", "data_dict", ",", "config", ",", "answer_vocab", "=", "None", ",", "use_reference", "=", "False", ",", "use_lang_classifier", "=", "False", ",", "use_oracle", "=", "False", ",", "use_cat_rand", "=", "False", ",", "use_best", "=", "False", ",", "post_processing", "=", "None", ")", ":", "\n", "    ", "\"\"\" Loss functions\n    Args:\n        data_dict: dict\n        config: dataset config instance\n        reference: flag (False/True)\n        post_processing: config dict\n    Returns:\n        loss: pytorch scalar tensor\n        data_dict: dict\n    \"\"\"", "\n", "\n", "#batch_size, _, _ = data_dict[\"lang_feat\"].shape # batch_size, MAX_DES_LEN (126), glove_size", "\n", "\n", "objectness_preds_batch", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'objectness_scores'", "]", ",", "2", ")", ".", "long", "(", ")", "\n", "objectness_labels_batch", "=", "data_dict", "[", "'objectness_label'", "]", ".", "long", "(", ")", "\n", "\n", "if", "post_processing", ":", "\n", "        ", "_", "=", "parse_predictions", "(", "data_dict", ",", "post_processing", ")", "\n", "nms_masks", "=", "torch", ".", "LongTensor", "(", "data_dict", "[", "'pred_mask'", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# construct valid mask", "\n", "pred_masks", "=", "(", "nms_masks", "*", "objectness_preds_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "label_masks", "=", "(", "objectness_labels_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "# construct valid mask", "\n", "        ", "pred_masks", "=", "(", "objectness_preds_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "label_masks", "=", "(", "objectness_labels_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "cluster_preds", "=", "torch", ".", "argmax", "(", "data_dict", "[", "\"cluster_ref\"", "]", "*", "pred_masks", ",", "1", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "pred_masks", ".", "shape", "[", "1", "]", ")", "\n", "preds", "=", "torch", ".", "zeros", "(", "pred_masks", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "preds", "=", "preds", ".", "scatter_", "(", "1", ",", "cluster_preds", ",", "1", ")", "\n", "cluster_preds", "=", "preds", "\n", "cluster_labels", "=", "data_dict", "[", "\"cluster_labels\"", "]", ".", "float", "(", ")", "\n", "cluster_labels", "*=", "label_masks", "\n", "\n", "# compute classification scores", "\n", "corrects", "=", "torch", ".", "sum", "(", "(", "cluster_preds", "==", "1", ")", "*", "(", "cluster_labels", "==", "1", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "labels", "=", "torch", ".", "ones", "(", "corrects", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "ref_acc", "=", "corrects", "/", "(", "labels", "+", "1e-8", ")", "\n", "\n", "# store", "\n", "data_dict", "[", "\"ref_acc\"", "]", "=", "ref_acc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# compute localization metrics", "\n", "if", "use_best", ":", "\n", "        ", "pred_ref", "=", "torch", ".", "argmax", "(", "data_dict", "[", "\"cluster_labels\"", "]", ",", "1", ")", "# (B,)", "\n", "# store the calibrated predictions and masks", "\n", "data_dict", "[", "'cluster_ref'", "]", "=", "data_dict", "[", "\"cluster_labels\"", "]", "\n", "", "if", "use_cat_rand", ":", "\n", "        ", "cluster_preds", "=", "torch", ".", "zeros", "(", "cluster_labels", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "cluster_preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "num_bbox", "=", "data_dict", "[", "\"num_bbox\"", "]", "[", "i", "]", "\n", "sem_cls_label", "=", "data_dict", "[", "\"sem_cls_label\"", "]", "[", "i", "]", "\n", "# sem_cls_label = torch.argmax(end_points[\"sem_cls_scores\"], 2)[i]", "\n", "sem_cls_label", "[", "num_bbox", ":", "]", "-=", "1", "\n", "candidate_masks", "=", "torch", ".", "gather", "(", "sem_cls_label", "==", "data_dict", "[", "\"object_cat\"", "]", "[", "i", "]", ",", "0", ",", "data_dict", "[", "\"object_assignment\"", "]", "[", "i", "]", ")", "\n", "candidates", "=", "torch", ".", "arange", "(", "cluster_labels", ".", "shape", "[", "1", "]", ")", "[", "candidate_masks", "]", "\n", "try", ":", "\n", "                ", "chosen_idx", "=", "torch", ".", "randperm", "(", "candidates", ".", "shape", "[", "0", "]", ")", "[", "0", "]", "\n", "chosen_candidate", "=", "candidates", "[", "chosen_idx", "]", "\n", "cluster_preds", "[", "i", ",", "chosen_candidate", "]", "=", "1", "\n", "", "except", "IndexError", ":", "\n", "                ", "cluster_preds", "[", "i", ",", "candidates", "]", "=", "1", "\n", "\n", "", "", "pred_ref", "=", "torch", ".", "argmax", "(", "cluster_preds", ",", "1", ")", "# (B,)", "\n", "# store the calibrated predictions and masks", "\n", "data_dict", "[", "'cluster_ref'", "]", "=", "cluster_preds", "\n", "", "else", ":", "\n", "        ", "pred_ref", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'cluster_ref'", "]", "*", "pred_masks", ",", "1", ")", "# (B,)", "\n", "# store the calibrated predictions and masks", "\n", "data_dict", "[", "'cluster_ref'", "]", "=", "data_dict", "[", "'cluster_ref'", "]", "*", "pred_masks", "\n", "\n", "", "if", "use_oracle", ":", "\n", "        ", "pred_center", "=", "data_dict", "[", "'center_label'", "]", "# (B,MAX_NUM_OBJ,3)", "\n", "pred_heading_class", "=", "data_dict", "[", "'heading_class_label'", "]", "# B,K2", "\n", "pred_heading_residual", "=", "data_dict", "[", "'heading_residual_label'", "]", "# B,K2", "\n", "pred_size_class", "=", "data_dict", "[", "'size_class_label'", "]", "# B,K2", "\n", "pred_size_residual", "=", "data_dict", "[", "'size_residual_label'", "]", "# B,K2,3", "\n", "\n", "# assign", "\n", "pred_center", "=", "torch", ".", "gather", "(", "pred_center", ",", "1", ",", "data_dict", "[", "\"object_assignment\"", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "pred_heading_class", "=", "torch", ".", "gather", "(", "pred_heading_class", ",", "1", ",", "data_dict", "[", "\"object_assignment\"", "]", ")", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "pred_heading_residual", ",", "1", ",", "data_dict", "[", "\"object_assignment\"", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pred_size_class", "=", "torch", ".", "gather", "(", "pred_size_class", ",", "1", ",", "data_dict", "[", "\"object_assignment\"", "]", ")", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "pred_size_residual", ",", "1", ",", "data_dict", "[", "\"object_assignment\"", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "        ", "pred_center", "=", "data_dict", "[", "'center'", "]", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'heading_residuals'", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'size_residuals'", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_class", "=", "pred_size_class", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", "# B,num_proposal,3", "\n", "\n", "# store", "\n", "", "data_dict", "[", "\"pred_mask\"", "]", "=", "pred_masks", "\n", "data_dict", "[", "\"label_mask\"", "]", "=", "label_masks", "\n", "data_dict", "[", "'pred_center'", "]", "=", "pred_center", "\n", "data_dict", "[", "'pred_heading_class'", "]", "=", "pred_heading_class", "\n", "data_dict", "[", "'pred_heading_residual'", "]", "=", "pred_heading_residual", "\n", "data_dict", "[", "'pred_size_class'", "]", "=", "pred_size_class", "\n", "data_dict", "[", "'pred_size_residual'", "]", "=", "pred_size_residual", "\n", "\n", "gt_ref", "=", "torch", ".", "argmax", "(", "data_dict", "[", "\"ref_box_label\"", "]", ",", "1", ")", "\n", "gt_center", "=", "data_dict", "[", "'center_label'", "]", "# (B,MAX_NUM_OBJ,3)", "\n", "gt_heading_class", "=", "data_dict", "[", "'heading_class_label'", "]", "# B,K2", "\n", "gt_heading_residual", "=", "data_dict", "[", "'heading_residual_label'", "]", "# B,K2", "\n", "gt_size_class", "=", "data_dict", "[", "'size_class_label'", "]", "# B,K2", "\n", "gt_size_residual", "=", "data_dict", "[", "'size_residual_label'", "]", "# B,K2,3", "\n", "\n", "ious", "=", "[", "]", "\n", "#multiple = []", "\n", "#others = []", "\n", "pred_bboxes", "=", "[", "]", "\n", "gt_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pred_ref", ".", "shape", "[", "0", "]", ")", ":", "\n", "# compute the iou", "\n", "        ", "pred_ref_idx", ",", "gt_ref_idx", "=", "pred_ref", "[", "i", "]", ",", "gt_ref", "[", "i", "]", "\n", "pred_obb", "=", "config", ".", "param2obb", "(", "\n", "pred_center", "[", "i", ",", "pred_ref_idx", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_heading_class", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_heading_residual", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_size_class", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_size_residual", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "gt_obb", "=", "config", ".", "param2obb", "(", "\n", "gt_center", "[", "i", ",", "gt_ref_idx", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "gt_heading_class", "[", "i", ",", "gt_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "gt_heading_residual", "[", "i", ",", "gt_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "gt_size_class", "[", "i", ",", "gt_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "gt_size_residual", "[", "i", ",", "gt_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "pred_bbox", "=", "get_3d_box", "(", "pred_obb", "[", "3", ":", "6", "]", ",", "pred_obb", "[", "6", "]", ",", "pred_obb", "[", "0", ":", "3", "]", ")", "\n", "gt_bbox", "=", "get_3d_box", "(", "gt_obb", "[", "3", ":", "6", "]", ",", "gt_obb", "[", "6", "]", ",", "gt_obb", "[", "0", ":", "3", "]", ")", "\n", "iou", "=", "eval_ref_one_sample", "(", "pred_bbox", ",", "gt_bbox", ")", "\n", "ious", ".", "append", "(", "iou", ")", "\n", "\n", "# NOTE: get_3d_box() will return problematic bboxes", "\n", "pred_bbox", "=", "construct_bbox_corners", "(", "pred_obb", "[", "0", ":", "3", "]", ",", "pred_obb", "[", "3", ":", "6", "]", ")", "\n", "gt_bbox", "=", "construct_bbox_corners", "(", "gt_obb", "[", "0", ":", "3", "]", ",", "gt_obb", "[", "3", ":", "6", "]", ")", "\n", "pred_bboxes", ".", "append", "(", "pred_bbox", ")", "\n", "gt_bboxes", ".", "append", "(", "gt_bbox", ")", "\n", "\n", "# lang", "\n", "", "if", "use_lang_classifier", ":", "\n", "        ", "data_dict", "[", "\"lang_acc\"", "]", "=", "(", "torch", ".", "argmax", "(", "data_dict", "[", "'lang_scores'", "]", ",", "1", ")", "==", "data_dict", "[", "\"object_cat\"", "]", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "data_dict", "[", "\"pred_langs\"", "]", "=", "data_dict", "[", "'lang_scores'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "data_dict", "[", "\"lang_acc\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "", "if", "'answer_scores'", "not", "in", "data_dict", ":", "# if using no_answer", "\n", "        ", "data_dict", "[", "\"answer_acc_at1\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "\"answer_acc_at10\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "# answer", "\n", "# data_dict['answer_scores']: batch_size, num_answers", "\n", "# data_dict[\"answer_cats\"]: batch_, num_answers", "\n", "# pred_answers_at1: batch_size", "\n", "        ", "num_classes", "=", "data_dict", "[", "'answer_scores'", "]", ".", "shape", "[", "1", "]", "\n", "pred_answers_at1", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'answer_scores'", "]", ",", "1", ")", "\n", "# pred_answers: batch_size, num_answers", "\n", "data_dict", "[", "\"answer_acc_at1\"", "]", "=", "(", "F", ".", "one_hot", "(", "pred_answers_at1", ",", "num_classes", "=", "num_classes", ")", ".", "float", "(", ")", "\n", "*", "data_dict", "[", "'answer_cats'", "]", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "topk", "=", "10", "\n", "pred_answers_at10", "=", "data_dict", "[", "'answer_scores'", "]", ".", "topk", "(", "topk", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "data_dict", "[", "\"answer_acc_at10\"", "]", "=", "(", "F", ".", "one_hot", "(", "pred_answers_at10", ",", "num_classes", "=", "num_classes", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "*", "data_dict", "[", "'answer_cats'", "]", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "\n", "# store", "\n", "", "data_dict", "[", "\"ref_iou\"", "]", "=", "ious", "\n", "data_dict", "[", "\"ref_iou_rate_0.25\"", "]", "=", "np", ".", "array", "(", "ious", ")", "[", "np", ".", "array", "(", "ious", ")", ">=", "0.25", "]", ".", "shape", "[", "0", "]", "/", "np", ".", "array", "(", "ious", ")", ".", "shape", "[", "0", "]", "\n", "data_dict", "[", "\"ref_iou_rate_0.5\"", "]", "=", "np", ".", "array", "(", "ious", ")", "[", "np", ".", "array", "(", "ious", ")", ">=", "0.5", "]", ".", "shape", "[", "0", "]", "/", "np", ".", "array", "(", "ious", ")", ".", "shape", "[", "0", "]", "\n", "data_dict", "[", "\"pred_bboxes\"", "]", "=", "pred_bboxes", "\n", "data_dict", "[", "\"gt_bboxes\"", "]", "=", "gt_bboxes", "\n", "\n", "if", "'answer_scores'", "in", "data_dict", ":", "\n", "        ", "data_dict", "[", "\"pred_answers_at10\"", "]", "=", "pred_answers_at10", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "", "obj_pred_val", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "data_dict", "[", "'objectness_label'", "]", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "data_dict", "[", "'objectness_mask'", "]", ")", "/", "(", "torch", ".", "sum", "(", "data_dict", "[", "'objectness_mask'", "]", ")", "+", "1e-6", ")", "\n", "data_dict", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "# detection semantic classification", "\n", "sem_cls_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'sem_cls_label'", "]", ",", "1", ",", "data_dict", "[", "'object_assignment'", "]", ")", "# select (B,K) from (B,K2)", "\n", "sem_cls_pred", "=", "data_dict", "[", "'sem_cls_scores'", "]", ".", "argmax", "(", "-", "1", ")", "# (B,K)", "\n", "sem_match", "=", "(", "sem_cls_label", "==", "sem_cls_pred", ")", ".", "float", "(", ")", "\n", "data_dict", "[", "\"sem_acc\"", "]", "=", "(", "sem_match", "*", "data_dict", "[", "\"pred_mask\"", "]", ")", ".", "sum", "(", ")", "/", "data_dict", "[", "\"pred_mask\"", "]", ".", "sum", "(", ")", "\n", "\n", "return", "data_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.__init__": [[7, 17], ["projection.ProjectionHelper._compute_corner_points"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper._compute_corner_points"], ["    ", "def", "__init__", "(", "self", ",", "intrinsic", ",", "depth_min", ",", "depth_max", ",", "image_dims", ",", "accuracy", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "self", ".", "intrinsic", "=", "intrinsic", "\n", "self", ".", "depth_min", "=", "depth_min", "\n", "self", ".", "depth_max", "=", "depth_max", "\n", "self", ".", "image_dims", "=", "image_dims", "\n", "self", ".", "accuracy", "=", "accuracy", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n", "# precompute", "\n", "self", ".", "_compute_corner_points", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton": [[18, 23], ["torch.Tensor"], "methods", ["None"], ["", "def", "depth_to_skeleton", "(", "self", ",", "ux", ",", "uy", ",", "depth", ")", ":", "\n", "# 2D to 3D coordinates with depth (used in compute_frustum_bounds)", "\n", "        ", "x", "=", "(", "ux", "-", "self", ".", "intrinsic", "[", "0", "]", "[", "2", "]", ")", "/", "self", ".", "intrinsic", "[", "0", "]", "[", "0", "]", "\n", "y", "=", "(", "uy", "-", "self", ".", "intrinsic", "[", "1", "]", "[", "2", "]", ")", "/", "self", ".", "intrinsic", "[", "1", "]", "[", "1", "]", "\n", "return", "torch", ".", "Tensor", "(", "[", "depth", "*", "x", ",", "depth", "*", "y", ",", "depth", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.skeleton_to_depth": [[24, 28], ["torch.Tensor"], "methods", ["None"], ["", "def", "skeleton_to_depth", "(", "self", ",", "p", ")", ":", "\n", "        ", "x", "=", "(", "p", "[", "0", "]", "*", "self", ".", "intrinsic", "[", "0", "]", "[", "0", "]", ")", "/", "p", "[", "2", "]", "+", "self", ".", "intrinsic", "[", "0", "]", "[", "2", "]", "\n", "y", "=", "(", "p", "[", "1", "]", "*", "self", ".", "intrinsic", "[", "1", "]", "[", "1", "]", ")", "/", "p", "[", "2", "]", "+", "self", ".", "intrinsic", "[", "1", "]", "[", "2", "]", "\n", "return", "torch", ".", "Tensor", "(", "[", "x", ",", "y", ",", "p", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper._compute_corner_points": [[29, 48], ["projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "projection.ProjectionHelper.depth_to_skeleton", "torch.ones().cuda", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.depth_to_skeleton"], ["", "def", "_compute_corner_points", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "corner_points", "=", "torch", ".", "ones", "(", "8", ",", "4", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "corner_points", "=", "torch", ".", "ones", "(", "8", ",", "4", ")", "\n", "\n", "# image to camera", "\n", "# depth min", "\n", "", "corner_points", "[", "0", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "0", ",", "0", ",", "self", ".", "depth_min", ")", "\n", "corner_points", "[", "1", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "self", ".", "image_dims", "[", "0", "]", "-", "1", ",", "0", ",", "self", ".", "depth_min", ")", "\n", "corner_points", "[", "2", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "self", ".", "image_dims", "[", "0", "]", "-", "1", ",", "self", ".", "image_dims", "[", "1", "]", "-", "1", ",", "self", ".", "depth_min", ")", "\n", "corner_points", "[", "3", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "0", ",", "self", ".", "image_dims", "[", "1", "]", "-", "1", ",", "self", ".", "depth_min", ")", "\n", "# depth max", "\n", "corner_points", "[", "4", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "0", ",", "0", ",", "self", ".", "depth_max", ")", "\n", "corner_points", "[", "5", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "self", ".", "image_dims", "[", "0", "]", "-", "1", ",", "0", ",", "self", ".", "depth_max", ")", "\n", "corner_points", "[", "6", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "self", ".", "image_dims", "[", "0", "]", "-", "1", ",", "self", ".", "image_dims", "[", "1", "]", "-", "1", ",", "self", ".", "depth_max", ")", "\n", "corner_points", "[", "7", "]", "[", ":", "3", "]", "=", "self", ".", "depth_to_skeleton", "(", "0", ",", "self", ".", "image_dims", "[", "1", "]", "-", "1", ",", "self", ".", "depth_max", ")", "\n", "\n", "self", ".", "corner_points", "=", "corner_points", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.compute_frustum_corners": [[49, 78], ["torch.bmm", "camera_to_world.repeat", "projection.ProjectionHelper.corner_points.unsqueeze"], "methods", ["None"], ["", "def", "compute_frustum_corners", "(", "self", ",", "camera_to_world", ")", ":", "\n", "        ", "\"\"\"\n        Computes the coordinates of the viewing frustum corresponding to one image and given camera parameters\n\n        :param camera_to_world: torch tensor of shape (4, 4)\n        :return: corner_coords: torch tensor of shape (8, 4)\n        \"\"\"", "\n", "# input: camera pose (torch.Size([4, 4]))", "\n", "# output: coordinates of the corner points of the viewing frustum of the camera", "\n", "\n", "# corner_points = camera_to_world.new(8, 4, 1).fill_(1)", "\n", "\n", "# # image to camera", "\n", "# # depth min", "\n", "# corner_points[0][:3] = self.depth_to_skeleton(0, 0, self.depth_min).unsqueeze(1)", "\n", "# corner_points[1][:3] = self.depth_to_skeleton(self.image_dims[0] - 1, 0, self.depth_min).unsqueeze(1)", "\n", "# corner_points[2][:3] = self.depth_to_skeleton(self.image_dims[0] - 1, self.image_dims[1] - 1, self.depth_min).unsqueeze(1)", "\n", "# corner_points[3][:3] = self.depth_to_skeleton(0, self.image_dims[1] - 1, self.depth_min).unsqueeze(1)", "\n", "# # depth max", "\n", "# corner_points[4][:3] = self.depth_to_skeleton(0, 0, self.depth_max).unsqueeze(1)", "\n", "# corner_points[5][:3] = self.depth_to_skeleton(self.image_dims[0] - 1, 0, self.depth_max).unsqueeze(1)", "\n", "# corner_points[6][:3] = self.depth_to_skeleton(self.image_dims[0] - 1, self.image_dims[1] - 1, self.depth_max).unsqueeze(1)", "\n", "# corner_points[7][:3] = self.depth_to_skeleton(0, self.image_dims[1] - 1, self.depth_max).unsqueeze(1)", "\n", "\n", "\n", "# camera to world", "\n", "corner_coords", "=", "torch", ".", "bmm", "(", "camera_to_world", ".", "repeat", "(", "8", ",", "1", ",", "1", ")", ",", "self", ".", "corner_points", ".", "unsqueeze", "(", "2", ")", ")", "\n", "\n", "return", "corner_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.compute_frustum_normals": [[79, 121], ["corner_coords.new", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "torch.cross", "plane_vec1.view", "plane_vec2.view", "plane_vec1.view", "plane_vec2.view", "plane_vec1.view", "plane_vec2.view", "plane_vec1.view", "plane_vec2.view", "plane_vec1.view", "plane_vec2.view", "plane_vec1.view", "plane_vec2.view"], "methods", ["None"], ["", "def", "compute_frustum_normals", "(", "self", ",", "corner_coords", ")", ":", "\n", "        ", "\"\"\"\n        Computes the normal vectors (pointing inwards) to the 6 planes that bound the viewing frustum\n\n        :param corner_coords: torch tensor of shape (8, 4), coordinates of the corner points of the viewing frustum\n        :return: normals: torch tensor of shape (6, 3)\n        \"\"\"", "\n", "\n", "normals", "=", "corner_coords", ".", "new", "(", "6", ",", "3", ")", "\n", "\n", "# compute plane normals", "\n", "# front plane", "\n", "plane_vec1", "=", "corner_coords", "[", "3", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "0", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "1", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "0", "]", "[", ":", "3", "]", "\n", "normals", "[", "0", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# right side plane", "\n", "plane_vec1", "=", "corner_coords", "[", "2", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "1", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "5", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "1", "]", "[", ":", "3", "]", "\n", "normals", "[", "1", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# roof plane", "\n", "plane_vec1", "=", "corner_coords", "[", "3", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "2", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "6", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "2", "]", "[", ":", "3", "]", "\n", "normals", "[", "2", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# left side plane", "\n", "plane_vec1", "=", "corner_coords", "[", "0", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "3", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "7", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "3", "]", "[", ":", "3", "]", "\n", "normals", "[", "3", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# bottom plane", "\n", "plane_vec1", "=", "corner_coords", "[", "1", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "0", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "4", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "0", "]", "[", ":", "3", "]", "\n", "normals", "[", "4", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# back plane", "\n", "plane_vec1", "=", "corner_coords", "[", "6", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "5", "]", "[", ":", "3", "]", "\n", "plane_vec2", "=", "corner_coords", "[", "4", "]", "[", ":", "3", "]", "-", "corner_coords", "[", "5", "]", "[", ":", "3", "]", "\n", "normals", "[", "5", "]", "=", "torch", ".", "cross", "(", "plane_vec1", ".", "view", "(", "-", "1", ")", ",", "plane_vec2", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "return", "normals", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.points_in_frustum": [[122, 156], ["list", "enumerate", "mask.cuda.cuda.cuda", "new_pts.cuda", "[].view", "new_pts.cuda", "[].view", "torch.ones", "torch.sum", "list.append", "list.append", "addMask.squeeze", "torch.round", "torch.round", "torch.mm", "torch.mm", "normal.unsqueeze", "normal.unsqueeze"], "methods", ["None"], ["", "def", "points_in_frustum", "(", "self", ",", "corner_coords", ",", "normals", ",", "new_pts", ",", "return_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether new_pts ly in the frustum defined by the coordinates of the corners coner_coords\n\n        :param corner_coords: torch tensor of shape (8, 4), coordinates of the corners of the viewing frustum\n        :param normals: torch tensor of shape (6, 3), normal vectors of the 6 planes of the viewing frustum\n        :param new_pts: (num_points, 3)\n        :param return_mask: if False, returns number of new_points in frustum\n        :return: if return_mask=True, returns Boolean mask determining whether point is in frustum or not\n        \"\"\"", "\n", "\n", "# create vectors from point set to the planes", "\n", "point_to_plane1", "=", "(", "new_pts", ".", "cuda", "(", ")", "-", "corner_coords", "[", "2", "]", "[", ":", "3", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "point_to_plane2", "=", "(", "new_pts", ".", "cuda", "(", ")", "-", "corner_coords", "[", "4", "]", "[", ":", "3", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# check if the scalar product with the normals is positive", "\n", "masks", "=", "list", "(", ")", "\n", "# for each normal, create a mask for points that lie on the correct side of the plane", "\n", "for", "k", ",", "normal", "in", "enumerate", "(", "normals", ")", ":", "\n", "            ", "if", "k", "<", "3", ":", "\n", "                ", "masks", ".", "append", "(", "torch", ".", "round", "(", "torch", ".", "mm", "(", "point_to_plane1", ",", "normal", ".", "unsqueeze", "(", "1", ")", ")", "*", "100", ")", "/", "100", "<", "0", ")", "\n", "", "else", ":", "\n", "                ", "masks", ".", "append", "(", "torch", ".", "round", "(", "torch", ".", "mm", "(", "point_to_plane2", ",", "normal", ".", "unsqueeze", "(", "1", ")", ")", "*", "100", ")", "/", "100", "<", "0", ")", "\n", "", "", "mask", "=", "torch", ".", "ones", "(", "point_to_plane1", ".", "shape", "[", "0", "]", ")", ">", "0", "\n", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "\n", "# create a combined mask, which keeps only the points that lie on the correct side of each plane", "\n", "for", "addMask", "in", "masks", ":", "\n", "            ", "mask", "=", "mask", "*", "addMask", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "return_mask", ":", "\n", "            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.points_in_frustum_cpu": [[157, 190], ["list", "enumerate", "[].view", "[].view", "torch.ones", "torch.sum", "list.append", "list.append", "addMask.squeeze", "torch.round", "torch.round", "torch.mm", "torch.mm", "normal.unsqueeze", "normal.unsqueeze"], "methods", ["None"], ["", "", "def", "points_in_frustum_cpu", "(", "self", ",", "corner_coords", ",", "normals", ",", "new_pts", ",", "return_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Checks whether new_pts ly in the frustum defined by the coordinates of the corners coner_coords\n\n        :param corner_coords: torch tensor of shape (8, 4), coordinates of the corners of the viewing frustum\n        :param normals: torch tensor of shape (6, 3), normal vectors of the 6 planes of the viewing frustum\n        :param new_pts: (num_points, 3)\n        :param return_mask: if False, returns number of new_points in frustum\n        :return: if return_mask=True, returns Boolean mask determining whether point is in frustum or not\n        \"\"\"", "\n", "\n", "# create vectors from point set to the planes", "\n", "point_to_plane1", "=", "(", "new_pts", "-", "corner_coords", "[", "2", "]", "[", ":", "3", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "point_to_plane2", "=", "(", "new_pts", "-", "corner_coords", "[", "4", "]", "[", ":", "3", "]", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# check if the scalar product with the normals is positive", "\n", "masks", "=", "list", "(", ")", "\n", "# for each normal, create a mask for points that lie on the correct side of the plane", "\n", "for", "k", ",", "normal", "in", "enumerate", "(", "normals", ")", ":", "\n", "            ", "if", "k", "<", "3", ":", "\n", "                ", "masks", ".", "append", "(", "torch", ".", "round", "(", "torch", ".", "mm", "(", "point_to_plane1", ",", "normal", ".", "unsqueeze", "(", "1", ")", ")", "*", "100", ")", "/", "100", "<", "0", ")", "\n", "", "else", ":", "\n", "                ", "masks", ".", "append", "(", "torch", ".", "round", "(", "torch", ".", "mm", "(", "point_to_plane2", ",", "normal", ".", "unsqueeze", "(", "1", ")", ")", "*", "100", ")", "/", "100", "<", "0", ")", "\n", "", "", "mask", "=", "torch", ".", "ones", "(", "point_to_plane1", ".", "shape", "[", "0", "]", ")", ">", "0", "\n", "\n", "# create a combined mask, which keeps only the points that lie on the correct side of each plane", "\n", "for", "addMask", "in", "masks", ":", "\n", "            ", "mask", "=", "mask", "*", "addMask", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "return_mask", ":", "\n", "            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.compute_projection": [[191, 257], ["torch.inverse", "torch.arange().cuda", "camera_to_world.new", "torch.t", "coords[].fill_", "projection.ProjectionHelper.compute_frustum_corners", "projection.ProjectionHelper.compute_frustum_normals", "projection.ProjectionHelper.points_in_frustum().cuda", "torch.mm", "torch.round().long", "torch.index_select", "ind_update.new().fill_", "ind_update.new().fill_", "torch.index_select", "projection.ProjectionHelper.any", "torch.lt", "valid_ind_mask.any", "depth.view", "valid_image_ind.cuda", "torch.abs().le", "depth_mask.any", "torch.arange", "projection.ProjectionHelper.points_in_frustum", "torch.round", "torch.lt", "torch.index_select.ge", "torch.index_select.le", "ind_update.new", "ind_update.new", "torch.nonzero", "torch.ge", "torch.ge", "torch.abs", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.compute_frustum_corners", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.compute_frustum_normals", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.points_in_frustum"], ["", "", "def", "compute_projection", "(", "self", ",", "points", ",", "depth", ",", "camera_to_world", ")", ":", "\n", "        ", "\"\"\"\n        Computes correspondances of points to pixels\n\n        :param points: tensor containing all points of the point cloud (num_points, 3)\n        :param depth: depth map (size: proj_image)\n        :param camera_to_world: camera pose (4, 4)\n        :param num_points: number of points in one sample point cloud (4096)\n        :return: indices_3d (array with point indices that correspond to a pixel),\n                indices_2d (array with pixel indices that correspond to a point)\n        \"\"\"", "\n", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "world_to_camera", "=", "torch", ".", "inverse", "(", "camera_to_world", ")", "\n", "\n", "# create 1-dim array with all indices and array with 4-dim coordinates x, y, z, 1 of points", "\n", "ind_points", "=", "torch", ".", "arange", "(", "0", ",", "num_points", ",", "out", "=", "torch", ".", "LongTensor", "(", ")", ")", ".", "cuda", "(", ")", "\n", "coords", "=", "camera_to_world", ".", "new", "(", "4", ",", "num_points", ")", "\n", "coords", "[", ":", "3", ",", ":", "]", "=", "torch", ".", "t", "(", "points", ")", "\n", "coords", "[", "3", ",", ":", "]", ".", "fill_", "(", "1", ")", "\n", "\n", "# compute viewing frustum", "\n", "corner_coords", "=", "self", ".", "compute_frustum_corners", "(", "camera_to_world", ")", "\n", "normals", "=", "self", ".", "compute_frustum_normals", "(", "corner_coords", ")", "\n", "\n", "# check if points are in viewing frustum and only keep according indices", "\n", "mask_frustum_bounds", "=", "self", ".", "points_in_frustum", "(", "corner_coords", ",", "normals", ",", "points", ",", "return_mask", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "not", "mask_frustum_bounds", ".", "any", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "ind_points", "=", "ind_points", "[", "mask_frustum_bounds", "]", "\n", "coords", "=", "coords", "[", ":", ",", "ind_points", "]", "\n", "\n", "# project world (coords) to camera", "\n", "camera", "=", "torch", ".", "mm", "(", "world_to_camera", ",", "coords", ")", "\n", "\n", "# project camera to image", "\n", "camera", "[", "0", "]", "=", "(", "camera", "[", "0", "]", "*", "self", ".", "intrinsic", "[", "0", "]", "[", "0", "]", ")", "/", "camera", "[", "2", "]", "+", "self", ".", "intrinsic", "[", "0", "]", "[", "2", "]", "\n", "camera", "[", "1", "]", "=", "(", "camera", "[", "1", "]", "*", "self", ".", "intrinsic", "[", "1", "]", "[", "1", "]", ")", "/", "camera", "[", "2", "]", "+", "self", ".", "intrinsic", "[", "1", "]", "[", "2", "]", "\n", "image", "=", "torch", ".", "round", "(", "camera", ")", ".", "long", "(", ")", "\n", "\n", "# keep points that are projected onto the image into the correct pixel range", "\n", "valid_ind_mask", "=", "torch", ".", "ge", "(", "image", "[", "0", "]", ",", "0", ")", "*", "torch", ".", "ge", "(", "image", "[", "1", "]", ",", "0", ")", "*", "torch", ".", "lt", "(", "image", "[", "0", "]", ",", "self", ".", "image_dims", "[", "0", "]", ")", "*", "torch", ".", "lt", "(", "image", "[", "1", "]", ",", "self", ".", "image_dims", "[", "1", "]", ")", "\n", "if", "not", "valid_ind_mask", ".", "any", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "valid_image_ind_x", "=", "image", "[", "0", "]", "[", "valid_ind_mask", "]", "\n", "valid_image_ind_y", "=", "image", "[", "1", "]", "[", "valid_ind_mask", "]", "\n", "valid_image_ind", "=", "valid_image_ind_y", "*", "self", ".", "image_dims", "[", "0", "]", "+", "valid_image_ind_x", "\n", "\n", "# keep only points that are in the correct depth ranges (self.depth_min - self.depth_max)", "\n", "depth_vals", "=", "torch", ".", "index_select", "(", "depth", ".", "view", "(", "-", "1", ")", ",", "0", ",", "valid_image_ind", ".", "cuda", "(", ")", ")", "\n", "depth_mask", "=", "depth_vals", ".", "ge", "(", "self", ".", "depth_min", ")", "*", "depth_vals", ".", "le", "(", "self", ".", "depth_max", ")", "*", "torch", ".", "abs", "(", "depth_vals", "-", "camera", "[", "2", "]", "[", "valid_ind_mask", "]", ")", ".", "le", "(", "self", ".", "accuracy", ")", "\n", "if", "not", "depth_mask", ".", "any", "(", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "# create two vectors for all considered points that establish 3d to 2d correspondence", "\n", "", "ind_update", "=", "ind_points", "[", "valid_ind_mask", "]", "\n", "ind_update", "=", "ind_update", "[", "depth_mask", "]", "\n", "indices_3d", "=", "ind_update", ".", "new", "(", "num_points", "+", "1", ")", ".", "fill_", "(", "0", ")", "# needs to be same size for all in batch... (first element has size)", "\n", "indices_2d", "=", "ind_update", ".", "new", "(", "num_points", "+", "1", ")", ".", "fill_", "(", "0", ")", "# needs to be same size for all in batch... (first element has size)", "\n", "indices_3d", "[", "0", "]", "=", "ind_update", ".", "shape", "[", "0", "]", "# first entry: number of relevant entries (of points)", "\n", "indices_2d", "[", "0", "]", "=", "ind_update", ".", "shape", "[", "0", "]", "\n", "indices_3d", "[", "1", ":", "1", "+", "indices_3d", "[", "0", "]", "]", "=", "ind_update", "# indices of points", "\n", "indices_2d", "[", "1", ":", "1", "+", "indices_2d", "[", "0", "]", "]", "=", "torch", ".", "index_select", "(", "valid_image_ind", ",", "0", ",", "torch", ".", "nonzero", "(", "depth_mask", ")", "[", ":", ",", "0", "]", ")", "# indices of corresponding pixels", "\n", "\n", "return", "indices_3d", ",", "indices_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.ProjectionHelper.project": [[258, 280], ["torch.no_grad", "label.new().fill_", "torch.index_select", "len", "label.new", "label.view", "label.new().fill_.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "project", "(", "self", ",", "label", ",", "lin_indices_3d", ",", "lin_indices_2d", ",", "num_points", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of backprojection for 2d features onto 3d points\n\n        :param label: image features (shape: (num_input_channels, proj_image_dims[0], proj_image_dims[1]))\n        :param lin_indices_3d: point indices from projection (shape: (num_input_channels, num_points_sample))\n        :param lin_indices_2d: pixel indices from projection (shape: (num_input_channels, num_points_sample))\n        :param num_points: number of points in one sample\n        :return: array of points in sample with projected features (shape: (num_input_channels, num_points))\n        \"\"\"", "\n", "\n", "num_label_ft", "=", "1", "if", "len", "(", "label", ".", "shape", ")", "==", "2", "else", "label", ".", "shape", "[", "0", "]", "# = num_input_channels", "\n", "\n", "output", "=", "label", ".", "new", "(", "num_label_ft", ",", "num_points", ")", ".", "fill_", "(", "0", ")", "\n", "num_ind", "=", "lin_indices_3d", "[", "0", "]", "\n", "if", "num_ind", ">", "0", ":", "\n", "# selects values from image_features at indices given by lin_indices_2d", "\n", "            ", "vals", "=", "torch", ".", "index_select", "(", "label", ".", "view", "(", "num_label_ft", ",", "-", "1", ")", ",", "1", ",", "lin_indices_2d", "[", "1", ":", "1", "+", "num_ind", "]", ")", "\n", "output", ".", "view", "(", "num_label_ft", ",", "-", "1", ")", "[", ":", ",", "lin_indices_3d", "[", "1", ":", "1", "+", "num_ind", "]", "]", "=", "vals", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.Projection.forward": [[285, 306], ["label.new().fill_", "torch.index_select", "len", "label.new", "label.view", "label.new().fill_.view"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "label", ",", "lin_indices_3d", ",", "lin_indices_2d", ",", "num_points", ")", ":", "\n", "        ", "\"\"\"\n        forward pass of backprojection for 2d features onto 3d points\n\n        :param label: image features (shape: (num_input_channels, proj_image_dims[0], proj_image_dims[1]))\n        :param lin_indices_3d: point indices from projection (shape: (num_input_channels, num_points_sample))\n        :param lin_indices_2d: pixel indices from projection (shape: (num_input_channels, num_points_sample))\n        :param num_points: number of points in one sample\n        :return: array of points in sample with projected features (shape: (num_input_channels, num_points))\n        \"\"\"", "\n", "# ctx.save_for_backward(lin_indices_3d, lin_indices_2d)", "\n", "num_label_ft", "=", "1", "if", "len", "(", "label", ".", "shape", ")", "==", "2", "else", "label", ".", "shape", "[", "0", "]", "# = num_input_channels", "\n", "\n", "output", "=", "label", ".", "new", "(", "num_label_ft", ",", "num_points", ")", ".", "fill_", "(", "0", ")", "\n", "num_ind", "=", "lin_indices_3d", "[", "0", "]", "\n", "if", "num_ind", ">", "0", ":", "\n", "# selects values from image_features at indices given by lin_indices_2d", "\n", "            ", "vals", "=", "torch", ".", "index_select", "(", "label", ".", "view", "(", "num_label_ft", ",", "-", "1", ")", ",", "1", ",", "lin_indices_2d", "[", "1", ":", "1", "+", "num_ind", "]", ")", "\n", "output", ".", "view", "(", "num_label_ft", ",", "-", "1", ")", "[", ":", ",", "lin_indices_3d", "[", "1", ":", "1", "+", "num_ind", "]", "]", "=", "vals", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.projection.Projection.backward": [[307, 318], ["grad_output.clone", "grad_output.clone.resize_", "torch.index_select", "grad_output.data.contiguous().view", "grad_output.clone.data.view", "grad_output.data.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_label", "=", "grad_output", ".", "clone", "(", ")", "\n", "num_ft", "=", "grad_output", ".", "shape", "[", "0", "]", "\n", "grad_label", ".", "resize_", "(", "num_ft", ",", "32", ",", "41", ")", "\n", "lin_indices_3d", ",", "lin_indices_2d", "=", "ctx", ".", "saved_variables", "\n", "num_ind", "=", "lin_indices_3d", ".", "data", "[", "0", "]", "\n", "vals", "=", "torch", ".", "index_select", "(", "grad_output", ".", "data", ".", "contiguous", "(", ")", ".", "view", "(", "num_ft", ",", "-", "1", ")", ",", "1", ",", "lin_indices_3d", ".", "data", "[", "1", ":", "1", "+", "num_ind", "]", ")", "\n", "grad_label", ".", "data", ".", "view", "(", "num_ft", ",", "-", "1", ")", "[", ":", ",", "lin_indices_2d", ".", "data", "[", "1", ":", "1", "+", "num_ind", "]", "]", "=", "vals", "\n", "\n", "return", "grad_label", ",", "None", ",", "None", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_vote_loss": [[24, 70], ["data_dict[].long", "torch.gather", "torch.gather", "torch.gather", "data_dict[].long.view().repeat", "torch.gather", "torch.gather", "torch.gather", "data_dict[].repeat", "vote_xyz.view", "torch.gather.view", "utils.nn_distance.nn_distance", "torch.min", "torch.min", "torch.min", "votes_dist.view.view", "torch.sum", "torch.sum", "torch.sum", "data_dict[].long.view", "torch.sum", "torch.sum", "torch.sum", "torch.gather.float", "torch.gather.float"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance"], ["def", "compute_vote_loss", "(", "data_dict", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        data_dict: dict (read-only)\n    \n    Returns:\n        vote_loss: scalar Tensor\n            \n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "data_dict", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "data_dict", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "data_dict", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "seed_inds", "=", "data_dict", "[", "'seed_inds'", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "\n", "# Get groundtruth votes for the seed points", "\n", "# vote_label_mask: Use gather to select B,num_seed from B,num_point", "\n", "#   non-object point has no GT vote mask = 0, object point has mask = 1", "\n", "# vote_label: Use gather to select B,num_seed,9 from B,num_point,9", "\n", "#   with inds in shape B,num_seed,9 and 9 = GT_VOTE_FACTOR * 3", "\n", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "data_dict", "[", "'vote_label_mask'", "]", ",", "1", ",", "seed_inds", ")", "\n", "seed_inds_expand", "=", "seed_inds", ".", "view", "(", "batch_size", ",", "num_seed", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "data_dict", "[", "'vote_label'", "]", ",", "1", ",", "seed_inds_expand", ")", "\n", "seed_gt_votes", "+=", "data_dict", "[", "'seed_xyz'", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# Compute the min of min of distance", "\n", "vote_xyz_reshape", "=", "vote_xyz", ".", "view", "(", "batch_size", "*", "num_seed", ",", "-", "1", ",", "3", ")", "# from B,num_seed*vote_factor,3 to B*num_seed,vote_factor,3", "\n", "seed_gt_votes_reshape", "=", "seed_gt_votes", ".", "view", "(", "batch_size", "*", "num_seed", ",", "GT_VOTE_FACTOR", ",", "3", ")", "# from B,num_seed,3*GT_VOTE_FACTOR to B*num_seed,GT_VOTE_FACTOR,3", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz_reshape", ",", "seed_gt_votes_reshape", ",", "l1", "=", "True", ")", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist2", ",", "dim", "=", "1", ")", "# (B*num_seed,vote_factor) to (B*num_seed,)", "\n", "votes_dist", "=", "votes_dist", ".", "view", "(", "batch_size", ",", "num_seed", ")", "\n", "vote_loss", "=", "torch", ".", "sum", "(", "votes_dist", "*", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "+", "1e-6", ")", "\n", "return", "vote_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_objectness_loss": [[71, 115], ["utils.nn_distance.nn_distance", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "objectness_scores.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance"], ["", "def", "compute_objectness_loss", "(", "data_dict", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        data_dict: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_seed) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_seed) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_seed) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Associate proposal and GT objects by point-to-point distances", "\n", "aggregated_vote_xyz", "=", "data_dict", "[", "'aggregated_vote_xyz'", "]", "\n", "gt_center", "=", "data_dict", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "aggregated_vote_xyz", ".", "shape", "[", "1", "]", "\n", "K2", "=", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "aggregated_vote_xyz", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "\n", "# Generate objectness label and mask", "\n", "# objectness_label: 1 if pred object center is within NEAR_THRESHOLD of any GT object", "\n", "# objectness_mask: 0 if pred object center is in gray zone (DONOTCARE), 1 otherwise", "\n", "euclidean_dist1", "=", "torch", ".", "sqrt", "(", "dist1", "+", "1e-6", ")", "\n", "objectness_label", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "objectness_mask", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ")", ".", "cuda", "(", ")", "\n", "objectness_label", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", ">", "FAR_THRESHOLD", "]", "=", "1", "\n", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "data_dict", "[", "'objectness_scores'", "]", "\n", "#print('os', objectness_scores.shape, objectness_label.shape)", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "Tensor", "(", "OBJECTNESS_CLS_WEIGHTS", ")", ".", "cuda", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "objectness_label", ")", "\n", "#print('ol', objectness_loss.shape)", "\n", "#exit()", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "# Set assignment", "\n", "object_assignment", "=", "ind1", "# (B,K) with values in 0,1,...,K2-1", "\n", "\n", "return", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_box_and_sem_cls_loss": [[117, 193], ["utils.nn_distance.nn_distance", "data_dict[].float", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "utils.nn_distance.huber_loss", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cuda.FloatTensor().zero_.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "data_dict[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.gather.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "data_dict[].transpose", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze().repeat", "torch.gather.unsqueeze", "utils.nn_distance.huber_loss", "torch.sum", "torch.sum", "torch.sum", "data_dict[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor().zero_.unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.huber_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.huber_loss"], ["", "def", "compute_box_and_sem_cls_loss", "(", "data_dict", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        data_dict: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "object_assignment", "=", "data_dict", "[", "'object_assignment'", "]", "\n", "batch_size", "=", "object_assignment", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute center loss", "\n", "pred_center", "=", "data_dict", "[", "'center'", "]", "\n", "gt_center", "=", "data_dict", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "pred_center", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "box_label_mask", "=", "data_dict", "[", "'box_label_mask'", "]", "\n", "objectness_label", "=", "data_dict", "[", "'objectness_label'", "]", ".", "float", "(", ")", "\n", "\n", "centroid_reg_loss1", "=", "torch", ".", "sum", "(", "dist1", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "centroid_reg_loss2", "=", "torch", ".", "sum", "(", "dist2", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "center_loss", "=", "centroid_reg_loss1", "+", "centroid_reg_loss2", "\n", "\n", "# Compute heading loss", "\n", "heading_class_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'heading_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_heading_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "heading_class_loss", "=", "criterion_heading_class", "(", "data_dict", "[", "'heading_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "heading_class_label", ")", "# (B,K)", "\n", "heading_class_loss", "=", "torch", ".", "sum", "(", "heading_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "heading_residual_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'heading_residual_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "heading_residual_normalized_label", "=", "heading_residual_label", "/", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "\n", "\n", "# Ref: https://discuss.pytorch.org/t/convert-int-into-one-hot-format/507/3", "\n", "heading_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "heading_class_label", ".", "shape", "[", "1", "]", ",", "num_heading_bin", ")", ".", "zero_", "(", ")", "\n", "heading_label_one_hot", ".", "scatter_", "(", "2", ",", "heading_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_heading_bin)", "\n", "heading_residual_normalized_loss", "=", "huber_loss", "(", "torch", ".", "sum", "(", "data_dict", "[", "'heading_residuals_normalized'", "]", "*", "heading_label_one_hot", ",", "-", "1", ")", "-", "heading_residual_normalized_label", ",", "delta", "=", "1.0", ")", "# (B,K)", "\n", "heading_residual_normalized_loss", "=", "torch", ".", "sum", "(", "heading_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# Compute size loss", "\n", "size_class_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'size_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_size_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "size_class_loss", "=", "criterion_size_class", "(", "data_dict", "[", "'size_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "size_class_label", ")", "# (B,K)", "\n", "size_class_loss", "=", "torch", ".", "sum", "(", "size_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "size_residual_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'size_residual_label'", "]", ",", "1", ",", "object_assignment", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ")", "# select (B,K,3) from (B,K2,3)", "\n", "size_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "size_class_label", ".", "shape", "[", "1", "]", ",", "num_size_cluster", ")", ".", "zero_", "(", ")", "\n", "size_label_one_hot", ".", "scatter_", "(", "2", ",", "size_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_size_cluster)", "\n", "size_label_one_hot_tiled", "=", "size_label_one_hot", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "# (B,K,num_size_cluster,3)", "\n", "predicted_size_residual_normalized", "=", "torch", ".", "sum", "(", "data_dict", "[", "'size_residuals_normalized'", "]", "*", "size_label_one_hot_tiled", ",", "2", ")", "# (B,K,3)", "\n", "\n", "mean_size_arr_expanded", "=", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# (1,1,num_size_cluster,3) ", "\n", "mean_size_label", "=", "torch", ".", "sum", "(", "size_label_one_hot_tiled", "*", "mean_size_arr_expanded", ",", "2", ")", "# (B,K,3)", "\n", "size_residual_label_normalized", "=", "size_residual_label", "/", "mean_size_label", "# (B,K,3)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "mean", "(", "huber_loss", "(", "predicted_size_residual_normalized", "-", "size_residual_label_normalized", ",", "delta", "=", "1.0", ")", ",", "-", "1", ")", "# (B,K,3) -> (B,K)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "sum", "(", "size_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "sem_cls_label", "=", "torch", ".", "gather", "(", "data_dict", "[", "'sem_cls_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_sem_cls", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "sem_cls_loss", "=", "criterion_sem_cls", "(", "data_dict", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "sem_cls_label", ")", "# (B,K)", "\n", "sem_cls_loss", "=", "torch", ".", "sum", "(", "sem_cls_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "return", "center_loss", ",", "heading_class_loss", ",", "heading_residual_normalized_loss", ",", "size_class_loss", ",", "size_residual_normalized_loss", ",", "sem_cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_reference_loss": [[195, 246], ["data_dict[].detach().cpu().numpy", "data_dict[].detach().cpu().numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "data_dict[].cpu().numpy", "data_dict[].cpu().numpy", "data_dict[].cpu().numpy", "data_dict[].cpu().numpy", "data_dict[].cpu().numpy", "config.param2obb_batch", "utils.box_util.get_3d_box_batch", "numpy.zeros", "range", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "lib.loss.SoftmaxRankingLoss", "lib.loss.SoftmaxRankingLoss.", "pred_heading_class.detach().cpu().numpy.unsqueeze", "pred_size_class.detach().cpu().numpy.unsqueeze().unsqueeze().repeat", "config.param2obb_batch", "utils.box_util.get_3d_box_batch", "utils.box_util.box3d_iou_batch", "torch.FloatTensor().cuda.float().clone", "data_dict[].detach().cpu", "data_dict[].detach().cpu", "pred_heading_class.detach().cpu().numpy.detach().cpu", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "pred_size_class.detach().cpu().numpy.detach().cpu", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "data_dict[].cpu", "data_dict[].cpu", "data_dict[].cpu", "data_dict[].cpu", "data_dict[].cpu", "numpy.tile", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pred_size_class.detach().cpu().numpy.unsqueeze().unsqueeze", "torch.FloatTensor().cuda.float", "data_dict[].detach", "data_dict[].detach", "pred_heading_class.detach().cpu().numpy.detach", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach", "pred_size_class.detach().cpu().numpy.detach", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach", "utils.box_util.box3d_iou_batch.argmax", "pred_size_class.detach().cpu().numpy.unsqueeze", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_iou_batch"], ["", "def", "compute_reference_loss", "(", "data_dict", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute cluster reference loss\n    Args:\n        data_dict: dict (read-only)\n    Returns:\n        ref_loss, lang_loss, cluster_preds, cluster_labels\n    \"\"\"", "\n", "\n", "# unpack", "\n", "cluster_preds", "=", "data_dict", "[", "\"cluster_ref\"", "]", "# B, num_proposal", "\n", "\n", "# predicted bbox", "\n", "pred_ref", "=", "data_dict", "[", "'cluster_ref'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B, num_proposal", "\n", "pred_center", "=", "data_dict", "[", "'center'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'heading_residuals'", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'size_residuals'", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_class", "=", "pred_size_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal,3", "\n", "\n", "# ground truth bbox", "\n", "gt_center", "=", "data_dict", "[", "'ref_center_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,3)", "\n", "gt_heading_class", "=", "data_dict", "[", "'ref_heading_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B", "\n", "gt_heading_residual", "=", "data_dict", "[", "'ref_heading_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B", "\n", "gt_size_class", "=", "data_dict", "[", "'ref_size_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B", "\n", "gt_size_residual", "=", "data_dict", "[", "'ref_size_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,3", "\n", "# convert gt bbox parameters to bbox corners", "\n", "gt_obb_batch", "=", "config", ".", "param2obb_batch", "(", "gt_center", "[", ":", ",", "0", ":", "3", "]", ",", "gt_heading_class", ",", "gt_heading_residual", ",", "\n", "gt_size_class", ",", "gt_size_residual", ")", "\n", "gt_bbox_batch", "=", "get_3d_box_batch", "(", "gt_obb_batch", "[", ":", ",", "3", ":", "6", "]", ",", "gt_obb_batch", "[", ":", ",", "6", "]", ",", "gt_obb_batch", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "# compute the iou score for all predictd positive ref", "\n", "batch_size", ",", "num_proposals", "=", "cluster_preds", ".", "shape", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "num_proposals", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "pred_ref", ".", "shape", "[", "0", "]", ")", ":", "\n", "# convert the bbox parameters to bbox corners", "\n", "        ", "pred_obb_batch", "=", "config", ".", "param2obb_batch", "(", "pred_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "pred_heading_class", "[", "i", "]", ",", "pred_heading_residual", "[", "i", "]", ",", "\n", "pred_size_class", "[", "i", "]", ",", "pred_size_residual", "[", "i", "]", ")", "\n", "pred_bbox_batch", "=", "get_3d_box_batch", "(", "pred_obb_batch", "[", ":", ",", "3", ":", "6", "]", ",", "pred_obb_batch", "[", ":", ",", "6", "]", ",", "pred_obb_batch", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "ious", "=", "box3d_iou_batch", "(", "pred_bbox_batch", ",", "np", ".", "tile", "(", "gt_bbox_batch", "[", "i", "]", ",", "(", "num_proposals", ",", "1", ",", "1", ")", ")", ")", "\n", "labels", "[", "i", ",", "ious", ".", "argmax", "(", ")", "]", "=", "1", "# treat the bbox with highest iou score as the gt", "\n", "\n", "", "cluster_labels", "=", "torch", ".", "FloatTensor", "(", "labels", ")", ".", "cuda", "(", ")", "# batch_size, num_proposal", "\n", "# reference loss", "\n", "criterion_ref", "=", "SoftmaxRankingLoss", "(", ")", "\n", "loss_ref", "=", "criterion_ref", "(", "cluster_preds", ",", "cluster_labels", ".", "float", "(", ")", ".", "clone", "(", ")", ")", "\n", "return", "loss_ref", ",", "cluster_preds", ",", "cluster_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_lang_classification_loss": [[248, 251], ["torch.cross_entropy"], "function", ["None"], ["", "def", "compute_lang_classification_loss", "(", "data_dict", ")", ":", "\n", "    ", "loss_lang", "=", "F", ".", "cross_entropy", "(", "data_dict", "[", "\"lang_scores\"", "]", ",", "data_dict", "[", "\"object_cat\"", "]", ")", "\n", "return", "loss_lang", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_answer_classification_loss": [[253, 268], ["torch.cross_entropy", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "compute_answer_classification_loss", "(", "data_dict", ")", ":", "\n", "    ", "\"\"\" Compute cluster reference loss\n\n    Args:\n        data_dict: dict (read-only)\n\n    Returns:\n        ref_loss, lang_loss, cluster_preds, cluster_labels\n    \"\"\"", "\n", "if", "\"answer_cat_scores\"", "in", "data_dict", ":", "\n", "#  data_dict[\"answer_cat_scores\"]: batch_size, num_answers", "\n", "        ", "loss_answer", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "data_dict", "[", "\"answer_scores\"", "]", ",", "data_dict", "[", "\"answer_cat_scores\"", "]", ",", "reduction", "=", "'sum'", ")", "/", "data_dict", "[", "\"answer_scores\"", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "loss_answer", "=", "F", ".", "cross_entropy", "(", "data_dict", "[", "\"answer_scores\"", "]", ",", "data_dict", "[", "\"answer_cat\"", "]", ")", "\n", "", "return", "loss_answer", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.get_loss": [[270, 358], ["loss_helper.compute_vote_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss", "torch.sum", "torch.sum", "torch.sum", "float", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "loss_helper.compute_reference_loss", "objectness_label.new_zeros().cuda", "objectness_label.new_zeros().float().cuda", "[].cuda", "loss_helper.compute_answer_classification_loss", "[].cuda", "loss_helper.compute_lang_classification_loss", "[].cuda", "objectness_label.float().cuda", "torch.sum", "torch.sum", "torch.sum", "float", "loss_weights.get", "objectness_mask.float", "objectness_label.new_zeros", "objectness_label.new_zeros().float", "loss_weights.get", "objectness_label.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "loss_weights.get", "objectness_label.new_zeros", "loss_weights.get", "loss_weights.get", "loss_weights.get", "loss_weights.get"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_vote_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_objectness_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_box_and_sem_cls_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_reference_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_answer_classification_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.compute_lang_classification_loss"], ["", "def", "get_loss", "(", "data_dict", ",", "config", ",", "detection", "=", "True", ",", "use_reference", "=", "True", ",", "use_lang_classifier", "=", "False", ",", "use_answer", "=", "True", ",", "loss_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        data_dict: dict\n        config: dataset config instance\n        reference: flag (False/True)\n    Returns:\n        loss: pytorch scalar tensor\n        data_dict: dict\n    \"\"\"", "\n", "if", "loss_weights", "is", "None", ":", "\n", "        ", "loss_weights", "=", "{", "}", "\n", "\n", "# Vote loss", "\n", "", "vote_loss", "=", "compute_vote_loss", "(", "data_dict", ")", "\n", "\n", "# Obj loss", "\n", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "=", "compute_objectness_loss", "(", "data_dict", ")", "\n", "num_proposal", "=", "objectness_label", ".", "shape", "[", "1", "]", "\n", "total_num_proposal", "=", "objectness_label", ".", "shape", "[", "0", "]", "*", "objectness_label", ".", "shape", "[", "1", "]", "\n", "data_dict", "[", "'objectness_label'", "]", "=", "objectness_label", "\n", "data_dict", "[", "'objectness_mask'", "]", "=", "objectness_mask", "\n", "data_dict", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "data_dict", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "data_dict", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "data_dict", "[", "'pos_ratio'", "]", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss", ",", "size_reg_loss", ",", "sem_cls_loss", "=", "compute_box_and_sem_cls_loss", "(", "data_dict", ",", "config", ")", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss", "+", "size_reg_loss", "\n", "\n", "if", "detection", ":", "\n", "        ", "data_dict", "[", "'vote_loss'", "]", "=", "vote_loss", "\n", "data_dict", "[", "'objectness_loss'", "]", "=", "objectness_loss", "\n", "data_dict", "[", "'center_loss'", "]", "=", "center_loss", "\n", "data_dict", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "data_dict", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "data_dict", "[", "'size_cls_loss'", "]", "=", "size_cls_loss", "\n", "data_dict", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "data_dict", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss", "\n", "data_dict", "[", "'box_loss'", "]", "=", "box_loss", "\n", "", "else", ":", "\n", "        ", "data_dict", "[", "'vote_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'objectness_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'center_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'heading_cls_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'heading_reg_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'size_cls_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'size_reg_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'sem_cls_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "data_dict", "[", "'box_loss'", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "", "if", "use_reference", ":", "\n", "# Reference loss", "\n", "        ", "ref_loss", ",", "_", ",", "cluster_labels", "=", "compute_reference_loss", "(", "data_dict", ",", "config", ")", "\n", "data_dict", "[", "\"cluster_labels\"", "]", "=", "cluster_labels", "\n", "data_dict", "[", "\"ref_loss\"", "]", "=", "ref_loss", "\n", "", "else", ":", "\n", "# Reference loss", "\n", "        ", "data_dict", "[", "\"cluster_labels\"", "]", "=", "objectness_label", ".", "new_zeros", "(", "objectness_label", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "data_dict", "[", "\"cluster_ref\"", "]", "=", "objectness_label", ".", "new_zeros", "(", "objectness_label", ".", "shape", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "# store", "\n", "data_dict", "[", "\"ref_loss\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "", "if", "use_answer", ":", "\n", "        ", "data_dict", "[", "\"answer_loss\"", "]", "=", "compute_answer_classification_loss", "(", "data_dict", ")", "\n", "", "else", ":", "\n", "        ", "data_dict", "[", "\"answer_loss\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "\n", "#if reference and use_lang_classifier:", "\n", "", "if", "use_lang_classifier", ":", "\n", "        ", "data_dict", "[", "\"lang_loss\"", "]", "=", "compute_lang_classification_loss", "(", "data_dict", ")", "\n", "", "else", ":", "\n", "        ", "data_dict", "[", "\"lang_loss\"", "]", "=", "torch", ".", "zeros", "(", "1", ")", "[", "0", "]", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "loss", "=", "loss_weights", ".", "get", "(", "'vote_loss'", ",", "1.", ")", "*", "data_dict", "[", "'vote_loss'", "]", "+", "loss_weights", ".", "get", "(", "'objectness_loss'", ",", "1.", ")", "*", "data_dict", "[", "'objectness_loss'", "]", "+", "loss_weights", ".", "get", "(", "'box_loss'", ",", "1.", ")", "*", "data_dict", "[", "'box_loss'", "]", "+", "loss_weights", ".", "get", "(", "'sem_cls_loss'", ",", "1.", ")", "*", "data_dict", "[", "'sem_cls_loss'", "]", "+", "loss_weights", ".", "get", "(", "'ref_loss'", ",", "1.", ")", "*", "data_dict", "[", "\"ref_loss\"", "]", "+", "loss_weights", ".", "get", "(", "'lang_loss'", ",", "1.", ")", "*", "data_dict", "[", "\"lang_loss\"", "]", "+", "loss_weights", ".", "get", "(", "'answer_loss'", ",", "1.", ")", "*", "data_dict", "[", "'answer_loss'", "]", "\n", "\n", "loss", "*=", "10", "# amplify", "\n", "data_dict", "[", "'loss'", "]", "=", "loss", "\n", "return", "loss", ",", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules._PointnetSAModuleBase.__init__": [[28, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules._PointnetSAModuleBase.forward": [[34, 76], ["xyz.transpose().contiguous", "range", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation", "pointnet2_utils.furthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, N, C) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModuleMSG.__init__": [[95, 125], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModule.__init__": [[144, 161], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "\n", "npoint", "=", "npoint", ",", "\n", "radii", "=", "[", "radius", "]", ",", "\n", "nsamples", "=", "[", "nsample", "]", ",", "\n", "bn", "=", "bn", ",", "\n", "use_xyz", "=", "use_xyz", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModuleVotes.__init__": [[168, 208], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "pooling", ":", "str", "=", "'max'", ",", "\n", "sigma", ":", "float", "=", "None", ",", "# for RBF pooling", "\n", "normalize_xyz", ":", "bool", "=", "False", ",", "# noramlize local XYZ with radius", "\n", "sample_uniformly", ":", "bool", "=", "False", ",", "\n", "ret_unique_cnt", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "mlp_module", "=", "None", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "sigma", "=", "sigma", "\n", "if", "self", ".", "sigma", "is", "None", ":", "\n", "            ", "self", ".", "sigma", "=", "self", ".", "radius", "/", "2", "\n", "", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "\n", "if", "npoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "\n", "use_xyz", "=", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ",", "normalize_xyz", "=", "normalize_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ",", "ret_unique_cnt", "=", "ret_unique_cnt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ")", "\n", "\n", "", "mlp_spec", "=", "mlp", "\n", "if", "use_xyz", "and", "len", "(", "mlp_spec", ")", ">", "0", ":", "\n", "            ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "", "self", ".", "mlp_module", "=", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModuleVotes.forward": [[210, 278], ["xyz.transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.grouper", "pointnet2_modules.PointnetSAModuleVotes.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "xyz.transpose", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, N) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "inds", ".", "shape", "[", "1", "]", "==", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "", "else", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", ",", "unique_cnt", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample), (B,3,npoint,nsample), (B,npoint)", "\n", "\n", "", "new_features", "=", "self", ".", "mlp_module", "(", "\n", "grouped_features", "\n", ")", "# (B, mlp[-1], npoint, nsample) -> (16, 128, 2048 -> 256, 64)", "\n", "\n", "# 16, 128 (proposal_size), 2048, 64 (num_proposals)", "\n", "#print('*', new_features.shape)", "\n", "#exit()", "\n", "\n", "if", "self", ".", "pooling", "==", "'max'", ":", "\n", "            ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'avg'", ":", "\n", "            ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'rbf'", ":", "\n", "# Use radial basis function kernel for weighted sum of features (normalized by nsample and sigma)", "\n", "# Ref: https://en.wikipedia.org/wiki/Radial_basis_function_kernel", "\n", "            ", "rbf", "=", "torch", ".", "exp", "(", "-", "1", "*", "grouped_xyz", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "False", ")", "/", "(", "self", ".", "sigma", "**", "2", ")", "/", "2", ")", "# (B, npoint, nsample)", "\n", "new_features", "=", "torch", ".", "sum", "(", "new_features", "*", "rbf", ".", "unsqueeze", "(", "1", ")", ",", "-", "1", ",", "keepdim", "=", "True", ")", "/", "float", "(", "self", ".", "nsample", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", "\n", "", "else", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", ",", "unique_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.__init__": [[283, 313], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSGVotes.groupers.append", "pointnet2_modules.PointnetSAModuleMSGVotes.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.forward": [[314, 359], ["xyz.transpose().contiguous", "range", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, C) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ",", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetFPModule.__init__": [[372, 375], ["torch.Module.__init__", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "pt_utils", ".", "SharedMLP", "(", "mlp", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetFPModule.forward": [[376, 422], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "\n", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        unknown : torch.Tensor\n            (B, n, 3) tensor of the xyz positions of the unknown features\n        known : torch.Tensor\n            (B, m, 3) tensor of the xyz positions of the known features\n        unknow_feats : torch.Tensor\n            (B, C1, n) tensor of the features to be propigated to\n        known_feats : torch.Tensor\n            (B, C2, m) tensor of features to be propigated\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "\n", "known_feats", ",", "idx", ",", "weight", "\n", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "\n", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", "\n", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "\n", "dim", "=", "1", ")", "#(B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.__init__": [[427, 458], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetLFPModuleMSG.groupers.append", "pointnet2_modules.PointnetLFPModuleMSG.mlps.append", "pointnet2_utils.QueryAndGroup", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "post_mlp", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "post_mlp", "=", "pt_utils", ".", "SharedMLP", "(", "post_mlp", ",", "bn", "=", "bn", ")", "\n", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.forward": [[459, 502], ["range", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetLFPModuleMSG.post_mlp", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz2", ":", "torch", ".", "Tensor", ",", "xyz1", ":", "torch", ".", "Tensor", ",", "\n", "features2", ":", "torch", ".", "Tensor", ",", "features1", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\" Propagate features from xyz1 to xyz2.\n        Parameters\n        ----------\n        xyz2 : torch.Tensor\n            (B, N2, 3) tensor of the xyz coordinates of the features\n        xyz1 : torch.Tensor\n            (B, N1, 3) tensor of the xyz coordinates of the features\n        features2 : torch.Tensor\n            (B, C2, N2) tensor of the descriptors of the the features\n        features1 : torch.Tensor\n            (B, C1, N1) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_features1 : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), N1) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz1", ",", "xyz2", ",", "features1", "\n", ")", "# (B, C1, N2, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], N2, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], N2, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], N2)", "\n", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "new_features", ",", "features2", "]", ",", "\n", "dim", "=", "1", ")", "#(B, mlp[-1] + C2, N2)", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "post_mlp", "(", "new_features", ")", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.RandomDropout.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "RandomDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.RandomDropout.forward": [[46, 49], ["pytorch_utils.feature_dropout_no_scaling", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "theta", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "uniform_", "(", "0", ",", "self", ".", "p", ")", "[", "0", "]", "\n", "return", "pt_utils", ".", "feature_dropout_no_scaling", "(", "X", ",", "theta", ",", "self", ".", "train", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.FurthestPointSampling.forward": [[52, 74], ["_ext.furthest_point_sampling", "ctx.mark_non_differentiable"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ",", "npoint", ")", ":", "\n", "# type: (Any, torch.Tensor, int) -> torch.Tensor", "\n", "        ", "r\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor where N > npoint\n        npoint : int32\n            number of features in the sampled set\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint) tensor containing the set\n        \"\"\"", "\n", "fps_inds", "=", "_ext", ".", "furthest_point_sampling", "(", "xyz", ",", "npoint", ")", "\n", "ctx", ".", "mark_non_differentiable", "(", "fps_inds", ")", "\n", "return", "fps_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.FurthestPointSampling.backward": [[75, 78], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GatherOperation.forward": [[84, 108], ["features.size", "_ext.gather_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor\n\n        idx : torch.Tensor\n            (B, npoint) tensor of the features to gather\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint) tensor\n        \"\"\"", "\n", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "gather_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GatherOperation.backward": [[109, 115], ["_ext.gather_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "gather_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.ThreeNN.forward": [[121, 143], ["_ext.three_nn", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ",", "known", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n            Find the three nearest neighbors of unknown in known\n        Parameters\n        ----------\n        unknown : torch.Tensor\n            (B, n, 3) tensor of known features\n        known : torch.Tensor\n            (B, m, 3) tensor of unknown features\n\n        Returns\n        -------\n        dist : torch.Tensor\n            (B, n, 3) l2 distance to the three nearest neighbors\n        idx : torch.Tensor\n            (B, n, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "dist2", ",", "idx", "=", "_ext", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.ThreeNN.backward": [[144, 147], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[153, 178], ["features.size", "idx.size", "_ext.three_interpolate"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ",", "weight", ")", ":", "\n", "# type(Any, torch.Tensor, torch.Tensor, torch.Tensor) -> Torch.Tensor", "\n", "        ", "r\"\"\"\n            Performs weight linear interpolation on 3 features\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, c, m) Features descriptors to be interpolated from\n        idx : torch.Tensor\n            (B, n, 3) three nearest neighbors of the target features in features\n        weight : torch.Tensor\n            (B, n, 3) weights\n\n        Returns\n        -------\n        torch.Tensor\n            (B, c, n) tensor of the interpolated features\n        \"\"\"", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "\n", "return", "_ext", ".", "three_interpolate", "(", "features", ",", "idx", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[179, 204], ["_ext.three_interpolate_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, c, n) tensor with gradients of ouputs\n\n        Returns\n        -------\n        grad_features : torch.Tensor\n            (B, c, m) tensor with gradients of features\n\n        None\n\n        None\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "\n", "grad_features", "=", "_ext", ".", "three_interpolate_grad", "(", "\n", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "weight", ",", "m", "\n", ")", "\n", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GroupingOperation.forward": [[210, 233], ["idx.size", "features.size", "_ext.group_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor of features to group\n        idx : torch.Tensor\n            (B, npoint, nsample) tensor containing the indicies of features to group with\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "group_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GroupingOperation.backward": [[234, 255], ["_ext.group_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, C, npoint, nsample) tensor of the gradients of the output from forward\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, N) gradient of the features\n        None\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "group_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.BallQuery.forward": [[261, 285], ["_ext.ball_query", "ctx.mark_non_differentiable"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "# type: (Any, float, int, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        radius : float\n            radius of the balls\n        nsample : int\n            maximum number of features in the balls\n        xyz : torch.Tensor\n            (B, N, 3) xyz coordinates of the features\n        new_xyz : torch.Tensor\n            (B, npoint, 3) centers of the ball query\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "inds", "=", "_ext", ".", "ball_query", "(", "new_xyz", ",", "xyz", ",", "radius", ",", "nsample", ")", "\n", "ctx", ".", "mark_non_differentiable", "(", "inds", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.BallQuery.backward": [[286, 289], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.QueryAndGroup.__init__": [[306, 316], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "self", ",", "radius", ",", "nsample", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ",", "normalize_xyz", "=", "False", ",", "sample_uniformly", "=", "False", ",", "ret_unique_cnt", "=", "False", ")", ":", "\n", "# type: (QueryAndGroup, float, int, bool) -> None", "\n", "        ", "super", "(", "QueryAndGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "self", ".", "ret_grouped_xyz", "=", "ret_grouped_xyz", "\n", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "sample_uniformly", "=", "sample_uniformly", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "assert", "(", "self", ".", "sample_uniformly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.QueryAndGroup.forward": [[317, 377], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "grouping_operation", "ret.append", "ret.append", "len", "tuple", "range", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (QueryAndGroup, torch.Tensor. torch.Tensor, torch.Tensor) -> Tuple[Torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            centriods (B, npoint, 3)\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, 3 + C, npoint, nsample) tensor\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "\n", "if", "self", ".", "sample_uniformly", ":", "\n", "            ", "unique_cnt", "=", "torch", ".", "zeros", "(", "(", "idx", ".", "shape", "[", "0", "]", ",", "idx", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i_batch", "in", "range", "(", "idx", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "i_region", "in", "range", "(", "idx", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "unique_ind", "=", "torch", ".", "unique", "(", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", ")", "\n", "num_unique", "=", "unique_ind", ".", "shape", "[", "0", "]", "\n", "unique_cnt", "[", "i_batch", ",", "i_region", "]", "=", "num_unique", "\n", "sample_ind", "=", "torch", ".", "randint", "(", "0", ",", "num_unique", ",", "(", "self", ".", "nsample", "-", "num_unique", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_ind", "=", "torch", ".", "cat", "(", "(", "unique_ind", ",", "unique_ind", "[", "sample_ind", "]", ")", ")", "\n", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", "=", "all_ind", "\n", "\n", "\n", "", "", "", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "self", ".", "normalize_xyz", ":", "\n", "            ", "grouped_xyz", "/=", "self", ".", "radius", "\n", "\n", "", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "use_xyz", "\n", ")", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "ret", "=", "[", "new_features", "]", "\n", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "ret", ".", "append", "(", "grouped_xyz", ")", "\n", "", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "ret", ".", "append", "(", "unique_cnt", ")", "\n", "", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GroupAll.__init__": [[387, 391], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "self", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ")", ":", "\n", "# type: (GroupAll, bool) -> None", "\n", "        ", "super", "(", "GroupAll", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_utils.GroupAll.forward": [[392, 426], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (GroupAll, torch.Tensor, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            Ignored\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, C + 3, 1, N) tensor\n        \"\"\"", "\n", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "return", "new_features", ",", "grouped_xyz", "\n", "", "else", ":", "\n", "            ", "return", "new_features", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.SharedMLP.__init__": [[13, 35], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "range", "pytorch_utils.SharedMLP.add_module", "len", "pytorch_utils.Conv2d"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ":", "List", "[", "int", "]", ",", "\n", "*", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "first", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "name", "+", "'layer{}'", ".", "format", "(", "i", ")", ",", "\n", "Conv2d", "(", "\n", "args", "[", "i", "]", ",", "\n", "args", "[", "i", "+", "1", "]", ",", "\n", "bn", "=", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "and", "bn", ",", "\n", "activation", "=", "activation", "\n", "if", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "else", "None", ",", "\n", "preact", "=", "preact", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils._BNBase.__init__": [[41, 47], ["torch.Sequential.__init__", "pytorch_utils._BNBase.add_module", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "batch_norm"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "batch_norm", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "name", "+", "\"bn\"", ",", "batch_norm", "(", "in_size", ")", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.BatchNorm1d.__init__": [[51, 53], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "*", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm1d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.BatchNorm2d.__init__": [[57, 59], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm2d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.BatchNorm3d.__init__": [[63, 65], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm3d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils._ConvBase.__init__": [[69, 121], ["torch.Sequential.__init__", "conv", "init", "pytorch_utils._ConvBase.add_module", "torch.init.constant_", "torch.init.constant_", "batch_norm", "batch_norm", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "preact", "=", "False", ",", "\n", "name", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "bias", "and", "(", "not", "bn", ")", "\n", "conv_unit", "=", "conv", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "init", "(", "conv_unit", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv_unit", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "out_size", ")", "\n", "", "else", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "in_size", ")", "\n", "\n", "", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv_unit", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.Conv1d.__init__": [[125, 154], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "int", "=", "1", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv1d", ",", "\n", "batch_norm", "=", "BatchNorm1d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.Conv2d.__init__": [[159, 188], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv2d", ",", "\n", "batch_norm", "=", "BatchNorm2d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.Conv3d.__init__": [[193, 222], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv3d", ",", "\n", "batch_norm", "=", "BatchNorm3d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.FC.__init__": [[227, 261], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "torch.Linear", "torch.Linear", "pytorch_utils.FC.add_module", "init", "torch.init.constant_", "torch.init.constant_", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.BatchNorm1d", "pytorch_utils.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "None", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "not", "bn", ")", "\n", "if", "init", "is", "not", "None", ":", "\n", "            ", "init", "(", "fc", ".", "weight", ")", "\n", "", "if", "not", "bn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "in_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'fc'", ",", "fc", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "out_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.BNMomentumScheduler.__init__": [[273, 290], ["pytorch_utils.BNMomentumScheduler.step", "isinstance", "RuntimeError", "type"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ",", "bn_lambda", ",", "last_epoch", "=", "-", "1", ",", "\n", "setter", "=", "set_bn_momentum_default", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Class '{}' is not a PyTorch nn Module\"", ".", "format", "(", "\n", "type", "(", "model", ")", ".", "__name__", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "setter", "=", "setter", "\n", "self", ".", "lmbd", "=", "bn_lambda", "\n", "\n", "self", ".", "step", "(", "last_epoch", "+", "1", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.BNMomentumScheduler.step": [[291, 297], ["pytorch_utils.BNMomentumScheduler.model.apply", "pytorch_utils.BNMomentumScheduler.setter", "pytorch_utils.BNMomentumScheduler.lmbd"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "setter", "(", "self", ".", "lmbd", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pytorch_utils.set_bn_momentum_default": [[262, 269], ["isinstance"], "function", ["None"], ["", "", "", "", "def", "set_bn_momentum_default", "(", "bn_momentum", ")", ":", "\n", "\n", "    ", "def", "fn", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "bn_momentum", "\n", "\n", "", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.pointnet2.pointnet2_test.test_interpolation_grad": [[18, 31], ["torch.randn().float().cuda", "torch.autograd.gradcheck", "torch.from_numpy().int().cuda", "torch.from_numpy().float().cuda", "pointnet2_utils.three_interpolate", "torch.randn().float", "torch.from_numpy().int", "torch.from_numpy().float", "torch.randn", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array"], "function", ["None"], ["def", "test_interpolation_grad", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "feat_dim", "=", "2", "\n", "m", "=", "4", "\n", "feats", "=", "torch", ".", "randn", "(", "batch_size", ",", "feat_dim", ",", "m", ",", "requires_grad", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "def", "interpolate_func", "(", "inputs", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "1", ",", "2", ",", "3", "]", "]", "]", ")", ")", ".", "int", "(", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", "]", "]", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "inputs", ",", "idx", ",", "weight", ")", "\n", "return", "interpolated_feats", "\n", "\n", "", "assert", "(", "gradcheck", "(", "interpolate_func", ",", "feats", ",", "atol", "=", "1e-1", ",", "rtol", "=", "1e-1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_2d": [[9, 39], ["numpy.argsort", "pick.append", "range", "numpy.delete", "max", "max", "min", "min", "print", "suppress.append"], "function", ["None"], ["def", "nms_2d", "(", "boxes", ",", "overlap_threshold", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "suppress", "=", "[", "last", "-", "1", "]", "\n", "for", "pos", "in", "range", "(", "last", "-", "1", ")", ":", "\n", "            ", "j", "=", "I", "[", "pos", "]", "\n", "xx1", "=", "max", "(", "x1", "[", "i", "]", ",", "x1", "[", "j", "]", ")", "\n", "yy1", "=", "max", "(", "y1", "[", "i", "]", ",", "y1", "[", "j", "]", ")", "\n", "xx2", "=", "min", "(", "x2", "[", "i", "]", ",", "x2", "[", "j", "]", ")", "\n", "yy2", "=", "min", "(", "y2", "[", "i", "]", ",", "y2", "[", "j", "]", ")", "\n", "w", "=", "xx2", "-", "xx1", "\n", "h", "=", "yy2", "-", "yy1", "\n", "if", "(", "w", ">", "0", "and", "h", ">", "0", ")", ":", "\n", "                ", "o", "=", "w", "*", "h", "/", "area", "[", "j", "]", "\n", "print", "(", "'Overlap is'", ",", "o", ")", "\n", "if", "(", "o", ">", "overlap_threshold", ")", ":", "\n", "                    ", "suppress", ".", "append", "(", "pos", ")", "\n", "", "", "", "I", "=", "np", ".", "delete", "(", "I", ",", "suppress", ")", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_2d_faster": [[40, 72], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_2d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_3d_faster": [[73, 110], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_3d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_3d_faster_samecls": [[111, 152], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_3d_faster_samecls", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "cls", "=", "boxes", "[", ":", ",", "7", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "cls1", "=", "cls", "[", "i", "]", "\n", "cls2", "=", "cls", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "", "o", "=", "o", "*", "(", "cls1", "==", "cls2", ")", "\n", "\n", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nms.nms_crnr_dist": [[154, 170], ["numpy.argsort", "pick.append", "numpy.delete", "scores.append", "numpy.concatenate", "utils.pc_utils.bbox_corner_dist_measure", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.bbox_corner_dist_measure"], ["", "def", "nms_crnr_dist", "(", "boxes", ",", "conf", ",", "overlap_threshold", ")", ":", "\n", "\n", "    ", "I", "=", "np", ".", "argsort", "(", "conf", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "ind", "in", "I", "[", ":", "-", "1", "]", ":", "\n", "            ", "scores", ".", "append", "(", "bbox_corner_dist_measure", "(", "boxes", "[", "i", ",", ":", "]", ",", "boxes", "[", "ind", ",", ":", "]", ")", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "np", ".", "array", "(", "scores", ")", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eta.get_eta": [[2, 17], ["int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_eta", "(", "start", ",", "end", ",", "extra", ",", "num_left", ")", ":", "\n", "    ", "exe_s", "=", "end", "-", "start", "\n", "eta_s", "=", "(", "exe_s", "+", "extra", ")", "*", "num_left", "\n", "eta", "=", "{", "'h'", ":", "0", ",", "'m'", ":", "0", ",", "'s'", ":", "0", "}", "\n", "if", "eta_s", "<", "60", ":", "\n", "        ", "eta", "[", "'s'", "]", "=", "int", "(", "eta_s", ")", "\n", "", "elif", "eta_s", ">=", "60", "and", "eta_s", "<", "3600", ":", "\n", "        ", "eta", "[", "'m'", "]", "=", "int", "(", "eta_s", "/", "60", ")", "\n", "eta", "[", "'s'", "]", "=", "int", "(", "eta_s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "eta", "[", "'h'", "]", "=", "int", "(", "eta_s", "/", "(", "60", "*", "60", ")", ")", "\n", "eta", "[", "'m'", "]", "=", "int", "(", "eta_s", "%", "(", "60", "*", "60", ")", "/", "60", ")", "\n", "eta", "[", "'s'", "]", "=", "int", "(", "eta_s", "%", "(", "60", "*", "60", ")", "%", "60", ")", "\n", "\n", "", "return", "eta", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eta.decode_eta": [[18, 31], ["int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "decode_eta", "(", "eta_sec", ")", ":", "\n", "    ", "eta", "=", "{", "'h'", ":", "0", ",", "'m'", ":", "0", ",", "'s'", ":", "0", "}", "\n", "if", "eta_sec", "<", "60", ":", "\n", "        ", "eta", "[", "'s'", "]", "=", "int", "(", "eta_sec", ")", "\n", "", "elif", "eta_sec", ">=", "60", "and", "eta_sec", "<", "3600", ":", "\n", "        ", "eta", "[", "'m'", "]", "=", "int", "(", "eta_sec", "/", "60", ")", "\n", "eta", "[", "'s'", "]", "=", "int", "(", "eta_sec", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "eta", "[", "'h'", "]", "=", "int", "(", "eta_sec", "/", "(", "60", "*", "60", ")", ")", "\n", "eta", "[", "'m'", "]", "=", "int", "(", "eta_sec", "%", "(", "60", "*", "60", ")", "/", "60", ")", "\n", "eta", "[", "'s'", "]", "=", "int", "(", "eta_sec", "%", "(", "60", "*", "60", ")", "%", "60", ")", "\n", "\n", "", "return", "eta", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger._ColorfulFormatter.__init__": [[8, 14], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger._ColorfulFormatter.formatMessage": [[15, 25], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger._ColorfulFormatter.formatMessage"], ["", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger.setup_logger": [[28, 84], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logger._ColorfulFormatter", "output.endswith", "output.endswith", "os.path.join", "os.path.dirname", "logger._cached_log_stream", "termcolor.colored", "str"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger._cached_log_stream"], ["", "", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "setup_logger", "(", "\n", "output", "=", "None", ",", "distributed_rank", "=", "0", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"log\"", ",", "abbrev_name", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the detectron2 logger and set its verbosity level to \"INFO\".\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "# stdout logging: master only", "\n", "if", "distributed_rank", "==", "0", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "if", "color", ":", "\n", "            ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# file logging: all workers", "\n", "", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output", ",", "\"log.txt\"", ")", "\n", "", "if", "distributed_rank", ">", "0", ":", "\n", "            ", "filename", "=", "filename", "+", "f\".rank{distributed_rank}\"", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fh", "=", "logging", ".", "StreamHandler", "(", "_cached_log_stream", "(", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "plain_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.logger._cached_log_stream": [[88, 91], ["functools.lru_cache", "open"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "None", ")", "\n", "def", "_cached_log_stream", "(", "filename", ")", ":", "\n", "    ", "return", "open", "(", "filename", ",", "\"a\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.multi_scene_precision_recall": [[17, 45], ["range", "torch.is_tensor", "torch.is_tensor", "numpy.ones", "numpy.ones", "metric_util.single_scene_precision_recall", "metric_util.precision_recall"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.single_scene_precision_recall", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.precision_recall"], ["def", "multi_scene_precision_recall", "(", "labels", ",", "pred", ",", "iou_thresh", ",", "conf_thresh", ",", "label_mask", ",", "pred_mask", "=", "None", ")", ":", "\n", "    ", "'''\n    Args:\n        labels: (B, N, 6)\n        pred: (B, M, 6)\n        iou_thresh: scalar\n        conf_thresh: scalar\n        label_mask: (B, N,) with values in 0 or 1 to indicate which GT boxes to consider.\n        pred_mask: (B, M,) with values in 0 or 1 to indicate which PRED boxes to consider.\n    Returns:\n        TP,FP,FN,Precision,Recall\n    '''", "\n", "# Make sure the masks are not Torch tensor, otherwise the mask==1 returns uint8 array instead", "\n", "# of True/False array as in numpy", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "label_mask", ")", ")", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "pred_mask", ")", ")", "\n", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "if", "label_mask", "is", "None", ":", "label_mask", "=", "np", ".", "ones", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "1", "]", ")", ")", "\n", "if", "pred_mask", "is", "None", ":", "pred_mask", "=", "np", ".", "ones", "(", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "TP_i", ",", "FP_i", ",", "FN_i", "=", "single_scene_precision_recall", "(", "labels", "[", "batch_idx", ",", "label_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "pred", "[", "batch_idx", ",", "pred_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "iou_thresh", ",", "conf_thresh", ")", "\n", "TP", "+=", "TP_i", "\n", "FP", "+=", "FP_i", "\n", "FN", "+=", "FN_i", "\n", "\n", "", "return", "TP", ",", "FP", ",", "FN", ",", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.single_scene_precision_recall": [[47, 83], ["numpy.zeros", "range", "good_match_arr.any().sum", "range", "good_match_arr.any().sum", "metric_util.calc_iou", "good_match_arr.any", "good_match_arr.any", "numpy.where"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.calc_iou"], ["", "def", "single_scene_precision_recall", "(", "labels", ",", "pred", ",", "iou_thresh", ",", "conf_thresh", ")", ":", "\n", "    ", "\"\"\"Compute P and R for predicted bounding boxes. Ignores classes!\n    Args:\n        labels: (N x bbox) ground-truth bounding boxes (6 dims) \n        pred: (M x (bbox + conf)) predicted bboxes with confidence and maybe classification\n    Returns:\n        TP, FP, FN\n    \"\"\"", "\n", "\n", "\n", "# for each pred box with high conf (C), compute IoU with all gt boxes. ", "\n", "# TP = number of times IoU > th ; FP = C - TP ", "\n", "# FN - number of scene objects without good match", "\n", "\n", "gt_bboxes", "=", "labels", "[", ":", ",", ":", "6", "]", "\n", "\n", "num_scene_bboxes", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "conf", "=", "pred", "[", ":", ",", "6", "]", "\n", "\n", "conf_pred_bbox", "=", "pred", "[", "np", ".", "where", "(", "conf", ">", "conf_thresh", ")", "[", "0", "]", ",", ":", "6", "]", "\n", "num_conf_pred_bboxes", "=", "conf_pred_bbox", ".", "shape", "[", "0", "]", "\n", "\n", "# init an array to keep iou between generated and scene bboxes", "\n", "iou_arr", "=", "np", ".", "zeros", "(", "[", "num_conf_pred_bboxes", ",", "num_scene_bboxes", "]", ")", "\n", "for", "g_idx", "in", "range", "(", "num_conf_pred_bboxes", ")", ":", "\n", "        ", "for", "s_idx", "in", "range", "(", "num_scene_bboxes", ")", ":", "\n", "            ", "iou_arr", "[", "g_idx", ",", "s_idx", "]", "=", "calc_iou", "(", "conf_pred_bbox", "[", "g_idx", ",", ":", "]", ",", "gt_bboxes", "[", "s_idx", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "good_match_arr", "=", "(", "iou_arr", ">=", "iou_thresh", ")", "\n", "\n", "TP", "=", "good_match_arr", ".", "any", "(", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "FP", "=", "num_conf_pred_bboxes", "-", "TP", "\n", "FN", "=", "num_scene_bboxes", "-", "good_match_arr", ".", "any", "(", "axis", "=", "0", ")", ".", "sum", "(", ")", "\n", "\n", "return", "TP", ",", "FP", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.precision_recall": [[85, 89], ["None"], "function", ["None"], ["", "def", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", ":", "\n", "    ", "Prec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FP", ")", "if", "TP", "+", "FP", ">", "0", "else", "0", "\n", "Rec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "return", "Prec", ",", "Rec", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.calc_iou": [[91, 114], ["numpy.array().min", "numpy.array().max", "box_a[].prod", "box_b[].prod", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "calc_iou", "(", "box_a", ",", "box_b", ")", ":", "\n", "    ", "\"\"\"Computes IoU of two axis aligned bboxes.\n    Args:\n        box_a, box_b: 6D of center and lengths        \n    Returns:\n        iou\n    \"\"\"", "\n", "\n", "max_a", "=", "box_a", "[", "0", ":", "3", "]", "+", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "max_b", "=", "box_b", "[", "0", ":", "3", "]", "+", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "min_max", "=", "np", ".", "array", "(", "[", "max_a", ",", "max_b", "]", ")", ".", "min", "(", "0", ")", "\n", "\n", "min_a", "=", "box_a", "[", "0", ":", "3", "]", "-", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "min_b", "=", "box_b", "[", "0", ":", "3", "]", "-", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "max_min", "=", "np", ".", "array", "(", "[", "min_a", ",", "min_b", "]", ")", ".", "max", "(", "0", ")", "\n", "if", "not", "(", "(", "min_max", ">", "max_min", ")", ".", "all", "(", ")", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "intersection", "=", "(", "min_max", "-", "max_min", ")", ".", "prod", "(", ")", "\n", "vol_a", "=", "box_a", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "vol_b", "=", "box_b", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "union", "=", "vol_a", "+", "vol_b", "-", "intersection", "\n", "return", "1.0", "*", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.set_seed": [[7, 13], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "seed", ",", "n_gpu", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "n_gpu", ">", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.get_rank": [[31, 37], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.is_main_process": [[21, 23], ["misc.get_rank"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.get_world_size": [[24, 30], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.misc.overwrite_config": [[38, 44], ["past_args.items", "hasattr", "setattr"], "function", ["None"], ["", "def", "overwrite_config", "(", "args", ",", "past_args", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "past_args", ".", "items", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "args", ",", "k", ")", ":", "# skip if args has past_args", "\n", "            ", "continue", "\n", "", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.polygon_clip": [[6, 53], ["box_util.polygon_clip.inside"], "function", ["None"], ["def", "polygon_clip", "(", "subjectPolygon", ",", "clipPolygon", ")", ":", "\n", "   ", "\"\"\" Clip a polygon with another polygon.\n\n   Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python\n\n   Args:\n     subjectPolygon: a list of (x,y) 2d points, any polygon.\n     clipPolygon: a list of (x,y) 2d points, has to be *convex*\n   Note:\n     **points have to be counter-clockwise ordered**\n\n   Return:\n     a list of (x,y) vertex point for the intersection polygon.\n   \"\"\"", "\n", "def", "inside", "(", "p", ")", ":", "\n", "      ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n", "\n", "", "def", "computeIntersection", "(", ")", ":", "\n", "      ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "outputList", "=", "subjectPolygon", "\n", "cp1", "=", "clipPolygon", "[", "-", "1", "]", "\n", "\n", "for", "clipVertex", "in", "clipPolygon", ":", "\n", "      ", "cp2", "=", "clipVertex", "\n", "inputList", "=", "outputList", "\n", "outputList", "=", "[", "]", "\n", "s", "=", "inputList", "[", "-", "1", "]", "\n", "\n", "for", "subjectVertex", "in", "inputList", ":", "\n", "         ", "e", "=", "subjectVertex", "\n", "if", "inside", "(", "e", ")", ":", "\n", "            ", "if", "not", "inside", "(", "s", ")", ":", "\n", "               ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "outputList", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "            ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "outputList", ")", "==", "0", ":", "\n", "          ", "return", "None", "\n", "", "", "return", "(", "outputList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.poly_area": [[54, 57], ["numpy.abs", "numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["", "def", "poly_area", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates \"\"\"", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.poly_area_batch": [[58, 62], ["numpy.abs().squeeze", "numpy.abs", "numpy.matmul", "numpy.matmul", "numpy.expand_dims", "numpy.roll", "numpy.expand_dims", "numpy.roll", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["", "def", "poly_area_batch", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates \"\"\"", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "1", ")", ",", "np", ".", "roll", "(", "np", ".", "expand_dims", "(", "y", ",", "axis", "=", "2", ")", ",", "1", ",", "axis", "=", "1", ")", ")", "-", "np", ".", "matmul", "(", "np", ".", "expand_dims", "(", "y", ",", "axis", "=", "1", ")", ",", "np", ".", "roll", "(", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", ",", "1", ",", "axis", "=", "1", ")", ")", ")", ".", "squeeze", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.convex_hull_intersection": [[63, 74], ["box_util.polygon_clip", "scipy.spatial.ConvexHull"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.polygon_clip"], ["", "def", "convex_hull_intersection", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\" Compute area of two convex hull's intersection area.\n        p1,p2 are a list of (x,y) tuples of hull vertices.\n        return a list of (x,y) for the intersection and its volume\n    \"\"\"", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "p2", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "inter_p", ",", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_vol": [[75, 81], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "box3d_vol", "(", "corners", ")", ":", "\n", "    ", "''' corners: (8,3) no assumption on axis direction '''", "\n", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "1", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "1", ",", ":", "]", "-", "corners", "[", "2", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "4", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "return", "a", "*", "b", "*", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.is_clockwise": [[82, 86], ["numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["", "def", "is_clockwise", "(", "p", ")", ":", "\n", "    ", "x", "=", "p", "[", ":", ",", "0", "]", "\n", "y", "=", "p", "[", ":", ",", "1", "]", "\n", "return", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_iou": [[87, 126], ["box_util.get_box3d_min_max", "box_util.get_box3d_min_max", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max"], ["", "def", "box3d_iou", "(", "corners1", ",", "corners2", ")", ":", "\n", "    ", "''' Compute 3D bounding box IoU.\n\n    Input:\n        corners1: numpy array (8,3), assume up direction is Z\n        corners2: numpy array (8,3), assume up direction is Z\n    Output:\n        iou: 3D bounding box IoU\n\n    '''", "\n", "# # corner points are in counter clockwise order", "\n", "# rect1 = [(corners1[i,0], corners1[i,2]) for i in range(3,-1,-1)]", "\n", "# rect2 = [(corners2[i,0], corners2[i,2]) for i in range(3,-1,-1)] ", "\n", "# area1 = poly_area(np.array(rect1)[:,0], np.array(rect1)[:,1])", "\n", "# area2 = poly_area(np.array(rect2)[:,0], np.array(rect2)[:,1])", "\n", "# inter, inter_area = convex_hull_intersection(rect1, rect2)", "\n", "# iou_2d = inter_area/(area1+area2-inter_area)", "\n", "# ymax = min(corners1[0,1], corners2[0,1])", "\n", "# ymin = max(corners1[4,1], corners2[4,1])", "\n", "# inter_vol = inter_area * max(0.0, ymax-ymin)", "\n", "# vol1 = box3d_vol(corners1)", "\n", "# vol2 = box3d_vol(corners2)", "\n", "# iou = inter_vol / (vol1 + vol2 - inter_vol)", "\n", "# return iou, iou_2d", "\n", "\n", "x_min_1", ",", "x_max_1", ",", "y_min_1", ",", "y_max_1", ",", "z_min_1", ",", "z_max_1", "=", "get_box3d_min_max", "(", "corners1", ")", "\n", "x_min_2", ",", "x_max_2", ",", "y_min_2", ",", "y_max_2", ",", "z_min_2", ",", "z_max_2", "=", "get_box3d_min_max", "(", "corners2", ")", "\n", "xA", "=", "np", ".", "maximum", "(", "x_min_1", ",", "x_min_2", ")", "\n", "yA", "=", "np", ".", "maximum", "(", "y_min_1", ",", "y_min_2", ")", "\n", "zA", "=", "np", ".", "maximum", "(", "z_min_1", ",", "z_min_2", ")", "\n", "xB", "=", "np", ".", "minimum", "(", "x_max_1", ",", "x_max_2", ")", "\n", "yB", "=", "np", ".", "minimum", "(", "y_max_1", ",", "y_max_2", ")", "\n", "zB", "=", "np", ".", "minimum", "(", "z_max_1", ",", "z_max_2", ")", "\n", "inter_vol", "=", "np", ".", "maximum", "(", "(", "xB", "-", "xA", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "yB", "-", "yA", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "zB", "-", "zA", ")", ",", "0", ")", "\n", "box_vol_1", "=", "(", "x_max_1", "-", "x_min_1", ")", "*", "(", "y_max_1", "-", "y_min_1", ")", "*", "(", "z_max_1", "-", "z_min_1", ")", "\n", "box_vol_2", "=", "(", "x_max_2", "-", "x_min_2", ")", "*", "(", "y_max_2", "-", "y_min_2", ")", "*", "(", "z_max_2", "-", "z_min_2", ")", "\n", "iou", "=", "inter_vol", "/", "(", "box_vol_1", "+", "box_vol_2", "-", "inter_vol", "+", "1e-8", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max": [[127, 145], ["corner.min", "corner.max"], "function", ["None"], ["", "def", "get_box3d_min_max", "(", "corner", ")", ":", "\n", "    ", "''' Compute min and max coordinates for 3D bounding box\n        Note: only for axis-aligned bounding boxes\n\n    Input:\n        corners: numpy array (8,3), assume up direction is Z (batch of N samples)\n    Output:\n        box_min_max: an array for min and max coordinates of 3D bounding box IoU\n\n    '''", "\n", "\n", "min_coord", "=", "corner", ".", "min", "(", "axis", "=", "0", ")", "\n", "max_coord", "=", "corner", ".", "max", "(", "axis", "=", "0", ")", "\n", "x_min", ",", "x_max", "=", "min_coord", "[", "0", "]", ",", "max_coord", "[", "0", "]", "\n", "y_min", ",", "y_max", "=", "min_coord", "[", "1", "]", ",", "max_coord", "[", "1", "]", "\n", "z_min", ",", "z_max", "=", "min_coord", "[", "2", "]", ",", "max_coord", "[", "2", "]", "\n", "\n", "return", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", ",", "z_min", ",", "z_max", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_iou_batch": [[146, 172], ["box_util.get_box3d_min_max_batch", "box_util.get_box3d_min_max_batch", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max_batch"], ["", "def", "box3d_iou_batch", "(", "corners1", ",", "corners2", ")", ":", "\n", "    ", "''' Compute 3D bounding box IoU.\n        Note: only for axis-aligned bounding boxes\n\n    Input:\n        corners1: numpy array (N,8,3), assume up direction is Z (batch of N samples)\n        corners2: numpy array (N,8,3), assume up direction is Z (batch of N samples)\n    Output:\n        iou: an array of 3D bounding box IoU\n\n    '''", "\n", "\n", "x_min_1", ",", "x_max_1", ",", "y_min_1", ",", "y_max_1", ",", "z_min_1", ",", "z_max_1", "=", "get_box3d_min_max_batch", "(", "corners1", ")", "\n", "x_min_2", ",", "x_max_2", ",", "y_min_2", ",", "y_max_2", ",", "z_min_2", ",", "z_max_2", "=", "get_box3d_min_max_batch", "(", "corners2", ")", "\n", "xA", "=", "np", ".", "maximum", "(", "x_min_1", ",", "x_min_2", ")", "\n", "yA", "=", "np", ".", "maximum", "(", "y_min_1", ",", "y_min_2", ")", "\n", "zA", "=", "np", ".", "maximum", "(", "z_min_1", ",", "z_min_2", ")", "\n", "xB", "=", "np", ".", "minimum", "(", "x_max_1", ",", "x_max_2", ")", "\n", "yB", "=", "np", ".", "minimum", "(", "y_max_1", ",", "y_max_2", ")", "\n", "zB", "=", "np", ".", "minimum", "(", "z_max_1", ",", "z_max_2", ")", "\n", "inter_vol", "=", "np", ".", "maximum", "(", "(", "xB", "-", "xA", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "yB", "-", "yA", ")", ",", "0", ")", "*", "np", ".", "maximum", "(", "(", "zB", "-", "zA", ")", ",", "0", ")", "\n", "box_vol_1", "=", "(", "x_max_1", "-", "x_min_1", ")", "*", "(", "y_max_1", "-", "y_min_1", ")", "*", "(", "z_max_1", "-", "z_min_1", ")", "\n", "box_vol_2", "=", "(", "x_max_2", "-", "x_min_2", ")", "*", "(", "y_max_2", "-", "y_min_2", ")", "*", "(", "z_max_2", "-", "z_min_2", ")", "\n", "iou", "=", "inter_vol", "/", "(", "box_vol_1", "+", "box_vol_2", "-", "inter_vol", "+", "1e-8", ")", "\n", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_box3d_min_max_batch": [[173, 191], ["corner.min", "corner.max"], "function", ["None"], ["", "def", "get_box3d_min_max_batch", "(", "corner", ")", ":", "\n", "    ", "''' Compute min and max coordinates for 3D bounding box\n        Note: only for axis-aligned bounding boxes\n\n    Input:\n        corners: numpy array (N,8,3), assume up direction is Z (batch of N samples)\n    Output:\n        box_min_max: an array for min and max coordinates of 3D bounding box IoU\n\n    '''", "\n", "\n", "min_coord", "=", "corner", ".", "min", "(", "axis", "=", "1", ")", "\n", "max_coord", "=", "corner", ".", "max", "(", "axis", "=", "1", ")", "\n", "x_min", ",", "x_max", "=", "min_coord", "[", ":", ",", "0", "]", ",", "max_coord", "[", ":", ",", "0", "]", "\n", "y_min", ",", "y_max", "=", "min_coord", "[", ":", ",", "1", "]", ",", "max_coord", "[", ":", ",", "1", "]", "\n", "z_min", ",", "z_max", "=", "min_coord", "[", ":", ",", "2", "]", ",", "max_coord", "[", ":", ",", "2", "]", "\n", "\n", "return", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", ",", "z_min", ",", "z_max", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_iou": [[192, 241], ["max", "max", "min", "min", "float"], "function", ["None"], ["", "def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the Intersection over Union (IoU) of two 2D bounding boxes.\n\n    Parameters\n    ----------\n    bb1 : dict\n        Keys: {'x1', 'x2', 'y1', 'y2'}\n        The (x1, y1) position is at the top left corner,\n        the (x2, y2) position is at the bottom right corner\n    bb2 : dict\n        Keys: {'x1', 'x2', 'y1', 'y2'}\n        The (x, y) position is at the top left corner,\n        the (x2, y2) position is at the bottom right corner\n\n    Returns\n    -------\n    float\n        in [0, 1]\n    \"\"\"", "\n", "assert", "bb1", "[", "'x1'", "]", "<", "bb1", "[", "'x2'", "]", "\n", "assert", "bb1", "[", "'y1'", "]", "<", "bb1", "[", "'y2'", "]", "\n", "assert", "bb2", "[", "'x1'", "]", "<", "bb2", "[", "'x2'", "]", "\n", "assert", "bb2", "[", "'y1'", "]", "<", "bb2", "[", "'y2'", "]", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "x_left", "=", "max", "(", "bb1", "[", "'x1'", "]", ",", "bb2", "[", "'x1'", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "'y1'", "]", ",", "bb2", "[", "'y1'", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "'x2'", "]", ",", "bb2", "[", "'x2'", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "'y2'", "]", ",", "bb2", "[", "'y2'", "]", ")", "\n", "\n", "if", "x_right", "<", "x_left", "or", "y_bottom", "<", "y_top", ":", "\n", "        ", "return", "0.0", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "", "intersection_area", "=", "(", "x_right", "-", "x_left", ")", "*", "(", "y_bottom", "-", "y_top", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'x2'", "]", "-", "bb1", "[", "'x1'", "]", ")", "*", "(", "bb1", "[", "'y2'", "]", "-", "bb1", "[", "'y1'", "]", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'x2'", "]", "-", "bb2", "[", "'x1'", "]", ")", "*", "(", "bb2", "[", "'y2'", "]", "-", "bb2", "[", "'y1'", "]", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "assert", "iou", ">=", "0.0", "\n", "assert", "iou", "<=", "1.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box2d_iou": [[242, 253], ["box_util.get_iou"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.get_iou"], ["", "def", "box2d_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "''' Compute 2D bounding box IoU.\n\n    Input:\n        box1: tuple of (xmin,ymin,xmax,ymax)\n        box2: tuple of (xmin,ymin,xmax,ymax)\n    Output:\n        iou: 2D IoU scalar\n    '''", "\n", "return", "get_iou", "(", "{", "'x1'", ":", "box1", "[", "0", "]", ",", "'y1'", ":", "box1", "[", "1", "]", ",", "'x2'", ":", "box1", "[", "2", "]", ",", "'y2'", ":", "box1", "[", "3", "]", "}", ",", "{", "'x1'", ":", "box2", "[", "0", "]", ",", "'y1'", ":", "box2", "[", "1", "]", ",", "'x2'", ":", "box2", "[", "2", "]", ",", "'y2'", ":", "box2", "[", "3", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.roty": [[257, 264], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.roty_batch": [[265, 280], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["", "def", "roty_batch", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\n    t: (x1,x2,...xn)\n    return: (x1,x2,...,xn,3,3)\n    \"\"\"", "\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "output", "[", "...", ",", "0", ",", "0", "]", "=", "c", "\n", "output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n", "output", "[", "...", ",", "2", ",", "2", "]", "=", "c", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box": [[282, 301], ["box_util.roty", "numpy.dot", "numpy.transpose", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.roty"], ["", "def", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size is array(l,w,h), heading_angle is radius clockwise from pos x axis, center is xyz of box center\n        output (8,3) array for 3D box cornders\n        Similar to utils/compute_orientation_3d\n    '''", "\n", "R", "=", "roty", "(", "heading_angle", ")", "\n", "l", ",", "w", ",", "h", "=", "box_size", "\n", "# x_corners = [l/2,l/2,-l/2,-l/2,l/2,l/2,-l/2,-l/2]", "\n", "# y_corners = [h/2,h/2,h/2,h/2,-h/2,-h/2,-h/2,-h/2]", "\n", "# z_corners = [w/2,-w/2,-w/2,w/2,w/2,-w/2,-w/2,w/2]", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", "\n", "y_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", "\n", "z_corners", "=", "[", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", "]", "\n", "corners_3d", "=", "np", ".", "dot", "(", "R", ",", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", ")", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "center", "[", "0", "]", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "center", "[", "1", "]", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "center", "[", "2", "]", "\n", "corners_3d", "=", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "return", "corners_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box_batch": [[302, 326], ["box_util.roty_batch", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.matmul", "numpy.expand_dims", "tuple", "len", "numpy.transpose", "range", "len", "tuple", "list", "len"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.roty_batch"], ["", "def", "get_3d_box_batch", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size: [x1,x2,...,xn,3]\n        heading_angle: [x1,x2,...,xn]\n        center: [x1,x2,...,xn,3]\n    Return:\n        [x1,x3,...,xn,8,3]\n    '''", "\n", "input_shape", "=", "heading_angle", ".", "shape", "\n", "R", "=", "roty_batch", "(", "heading_angle", ")", "\n", "l", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "0", "]", ",", "-", "1", ")", "# [x1,...,xn,1]", "\n", "w", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "1", "]", ",", "-", "1", ")", "\n", "h", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "2", "]", ",", "-", "1", ")", "\n", "corners_3d", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "8", ",", "3", "]", ")", ")", "\n", "# corners_3d[...,:,0] = np.concatenate((l/2,l/2,-l/2,-l/2,l/2,l/2,-l/2,-l/2), -1)", "\n", "# corners_3d[...,:,1] = np.concatenate((h/2,h/2,h/2,h/2,-h/2,-h/2,-h/2,-h/2), -1)", "\n", "# corners_3d[...,:,2] = np.concatenate((w/2,-w/2,-w/2,w/2,w/2,-w/2,-w/2,w/2), -1)", "\n", "corners_3d", "[", "...", ",", ":", ",", "0", "]", "=", "np", ".", "concatenate", "(", "(", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "1", "]", "=", "np", ".", "concatenate", "(", "(", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "2", "]", "=", "np", ".", "concatenate", "(", "(", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ")", ",", "-", "1", ")", "\n", "tlist", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", "]", "\n", "tlist", "+=", "[", "len", "(", "input_shape", ")", "+", "1", ",", "len", "(", "input_shape", ")", "]", "\n", "corners_3d", "=", "np", ".", "matmul", "(", "corners_3d", ",", "np", ".", "transpose", "(", "R", ",", "tuple", "(", "tlist", ")", ")", ")", "\n", "corners_3d", "+=", "np", ".", "expand_dims", "(", "center", ",", "-", "2", ")", "\n", "return", "corners_3d", "\n", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "warmup_epoch", ",", "after_scheduler", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<=", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater than 1.'", ")", "\n", "", "self", ".", "warmup_epoch", "=", "warmup_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.get_lr": [[25, 31], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "/", "self", ".", "multiplier", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "warmup_epoch", "+", "1.", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step": [[32, 40], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.step", "super().step"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "if", "epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "warmup_epoch", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict": [[41, 50], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.state_dict", "lr_scheduler.GradualWarmupScheduler.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        \"\"\"", "\n", "\n", "state", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "and", "key", "!=", "'after_scheduler'", "}", "\n", "state", "[", "'after_scheduler'", "]", "=", "self", ".", "after_scheduler", ".", "state_dict", "(", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict": [[51, 61], ["state_dict.pop", "lr_scheduler.GradualWarmupScheduler.__dict__.update", "lr_scheduler.GradualWarmupScheduler.after_scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "\n", "after_scheduler_state", "=", "state_dict", ".", "pop", "(", "'after_scheduler'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "self", ".", "after_scheduler", ".", "load_state_dict", "(", "after_scheduler_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.get_scheduler": [[63, 86], ["torch.optim.lr_scheduler.CosineAnnealingLR", "lr_scheduler.GradualWarmupScheduler", "isinstance", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "n_iter_per_epoch", ",", "args", ")", ":", "\n", "    ", "if", "\"cosine\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "eta_min", "=", "0.000001", ",", "\n", "T_max", "=", "(", "args", ".", "max_epoch", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", ")", "\n", "", "elif", "\"step\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "if", "isinstance", "(", "args", ".", "lr_decay_epochs", ",", "int", ")", ":", "\n", "            ", "args", ".", "lr_decay_epochs", "=", "[", "args", ".", "lr_decay_epochs", "]", "\n", "", "scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "gamma", "=", "args", ".", "lr_decay_rate", ",", "\n", "milestones", "=", "[", "(", "m", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", "for", "m", "in", "args", ".", "lr_decay_epochs", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"scheduler {args.lr_scheduler} not supported\"", ")", "\n", "\n", "", "if", "args", ".", "warmup_epoch", ">", "0", ":", "\n", "        ", "scheduler", "=", "GradualWarmupScheduler", "(", "\n", "optimizer", ",", "\n", "multiplier", "=", "args", ".", "warmup_multiplier", ",", "\n", "after_scheduler", "=", "scheduler", ",", "\n", "warmup_epoch", "=", "args", ".", "warmup_epoch", "*", "n_iter_per_epoch", ")", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.huber_loss": [[6, 24], ["torch.abs", "torch.abs", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "huber_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        error: Torch tensor (d1,d2,...,dk)\n    Returns:\n        loss: Torch tensor (d1,d2,...,dk)\n\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    0.5 * d^2 + d * (|x|-d)     if |x|>d\n    Ref: https://github.com/charlesq34/frustum-pointnets/blob/master/models/model_util.py\n    \"\"\"", "\n", "abs_error", "=", "torch", ".", "abs", "(", "error", ")", "\n", "#quadratic = torch.min(abs_error, torch.FloatTensor([delta]))", "\n", "quadratic", "=", "torch", ".", "clamp", "(", "abs_error", ",", "max", "=", "delta", ")", "\n", "linear", "=", "(", "abs_error", "-", "quadratic", ")", "\n", "loss", "=", "0.5", "*", "quadratic", "**", "2", "+", "delta", "*", "linear", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance": [[25, 53], ["pc1.unsqueeze().repeat", "pc2.unsqueeze().repeat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "pc1.unsqueeze", "pc2.unsqueeze", "nn_distance.huber_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.huber_loss"], ["", "def", "nn_distance", "(", "pc1", ",", "pc2", ",", "l1smooth", "=", "False", ",", "delta", "=", "1.0", ",", "l1", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        pc1: (B,N,C) torch tensor\n        pc2: (B,M,C) torch tensor\n        l1smooth: bool, whether to use l1smooth loss\n        delta: scalar, the delta used in l1smooth loss\n    Output:\n        dist1: (B,N) torch float32 tensor\n        idx1: (B,N) torch int64 tensor\n        dist2: (B,M) torch float32 tensor\n        idx2: (B,M) torch int64 tensor\n    \"\"\"", "\n", "N", "=", "pc1", ".", "shape", "[", "1", "]", "\n", "M", "=", "pc2", ".", "shape", "[", "1", "]", "\n", "pc1_expand_tile", "=", "pc1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "M", ",", "1", ")", "\n", "pc2_expand_tile", "=", "pc2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ",", "1", ")", "\n", "pc_diff", "=", "pc1_expand_tile", "-", "pc2_expand_tile", "\n", "\n", "if", "l1smooth", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "huber_loss", "(", "pc_diff", ",", "delta", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "elif", "l1", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "pc_diff", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "else", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "pc_diff", "**", "2", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "dist1", ",", "idx1", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "2", ")", "# (B,N)", "\n", "dist2", ",", "idx2", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "1", ")", "# (B,M)", "\n", "return", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.demo_nn_distance": [[54, 82], ["numpy.random.seed", "numpy.random.random", "numpy.random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "print", "print", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "np.random.random.astype", "np.random.random.astype", "range", "range", "numpy.sum", "numpy.abs", "numpy.minimum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.nn_distance.nn_distance"], ["", "def", "demo_nn_distance", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "pc1arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "5", ",", "3", ")", ")", "\n", "pc2arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "6", ",", "3", ")", ")", "\n", "pc1", "=", "torch", ".", "from_numpy", "(", "pc1arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "pc2", "=", "torch", ".", "from_numpy", "(", "pc2arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "**", "2", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'L1smooth dists:'", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ",", "True", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "error", "=", "np", ".", "abs", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "\n", "quad", "=", "np", ".", "minimum", "(", "error", ",", "1.0", ")", "\n", "linear", "=", "error", "-", "quad", "\n", "loss", "=", "0.5", "*", "quad", "**", "2", "+", "1.0", "*", "linear", "\n", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "loss", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.voc_ap": [[4, 36], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.get_iou": [[41, 48], ["utils.metric_util.calc_iou"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.metric_util.calc_iou"], ["def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "\"\"\" Compute IoU of two bounding boxes.\n        ** Define your bod IoU function HERE **\n    \"\"\"", "\n", "#pass", "\n", "iou3d", "=", "calc_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.get_iou_obb": [[50, 53], ["utils.box_util.box3d_iou"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.box3d_iou"], ["def", "get_iou_obb", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "iou3d", "=", "box3d_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.get_iou_main": [[54, 56], ["get_iou_func"], "function", ["None"], ["", "def", "get_iou_main", "(", "get_iou_func", ",", "args", ")", ":", "\n", "    ", "return", "get_iou_func", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_cls": [[57, 142], ["gt.keys", "pred.keys", "pred.keys", "numpy.array", "numpy.array", "numpy.argsort", "numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "eval_det.voc_ap", "numpy.array", "len", "BB[].astype", "R[].astype", "float", "numpy.maximum", "len", "image_ids.append", "np.array.append", "np.array.append", "range", "numpy.array", "eval_det.get_iou_main", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.voc_ap", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.get_iou_main"], ["", "def", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for a single class.\n        Input:\n            pred: map of {img_id: [(bbox, score)]} where bbox is numpy array\n            gt: map of {img_id: [bbox]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if True use VOC07 11 point method\n        Output:\n            rec: numpy array of length nd\n            prec: numpy array of length nd\n            ap: scalar, average precision\n    \"\"\"", "\n", "\n", "# construct gt objects", "\n", "class_recs", "=", "{", "}", "# {img_id: {'bbox': bbox list, 'det': matched list}}", "\n", "npos", "=", "0", "\n", "for", "img_id", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "gt", "[", "img_id", "]", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "bbox", ")", "\n", "npos", "+=", "len", "(", "bbox", ")", "\n", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "bbox", ",", "'det'", ":", "det", "}", "\n", "# pad empty list to all other imgids", "\n", "", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "if", "img_id", "not", "in", "gt", ":", "\n", "            ", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "'det'", ":", "[", "]", "}", "\n", "\n", "# construct dets", "\n", "", "", "image_ids", "=", "[", "]", "\n", "confidence", "=", "[", "]", "\n", "BB", "=", "[", "]", "\n", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", ",", "score", "in", "pred", "[", "img_id", "]", ":", "\n", "            ", "image_ids", ".", "append", "(", "img_id", ")", "\n", "confidence", ".", "append", "(", "score", ")", "\n", "BB", ".", "append", "(", "box", ")", "\n", "", "", "confidence", "=", "np", ".", "array", "(", "confidence", ")", "\n", "BB", "=", "np", ".", "array", "(", "BB", ")", "# (nd,4 or 8,3 or 6)", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", "...", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "#if d%100==0: print(d)", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", "...", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "            ", "for", "j", "in", "range", "(", "BBGT", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "iou", "=", "get_iou_main", "(", "get_iou_func", ",", "(", "bb", ",", "BBGT", "[", "j", ",", "...", "]", ")", ")", "\n", "if", "iou", ">", "ovmax", ":", "\n", "                    ", "ovmax", "=", "iou", "\n", "jmax", "=", "j", "\n", "\n", "#print d, ovmax", "\n", "", "", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", "+", "1e-8", ")", "\n", "#print('NPOS: ', npos)", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_cls_wrapper": [[143, 147], ["eval_det.eval_det_cls"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_cls"], ["", "def", "eval_det_cls_wrapper", "(", "arguments", ")", ":", "\n", "    ", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", "=", "arguments", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "return", "(", "rec", ",", "prec", ",", "ap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det": [[148, 188], ["pred_all.keys", "gt_all.keys", "gt.keys", "print", "eval_det.eval_det_cls", "print", "[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_cls"], ["", "def", "eval_det", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for multiple classes.\n        Input:\n            pred_all: map of {img_id: [(classname, bbox, score)]}\n            gt_all: map of {img_id: [(classname, bbox)]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if true use VOC07 11 point method\n        Output:\n            rec: {classname: rec}\n            prec: {classname: prec_all}\n            ap: {classname: scalar}\n    \"\"\"", "\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "for", "classname", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Computing AP for class: '", ",", "classname", ")", "\n", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "eval_det_cls", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.eval_det.eval_det_multiprocessing": [[190, 237], ["pred_all.keys", "gt_all.keys", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "enumerate", "gt.keys", "print", "[].append", "[].append", "gt.keys"], "function", ["None"], ["def", "eval_det_multiprocessing", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for multiple classes.\n        Input:\n            pred_all: map of {img_id: [(classname, bbox, score)]}\n            gt_all: map of {img_id: [(classname, bbox)]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if true use VOC07 11 point method\n        Output:\n            rec: {classname: rec}\n            prec: {classname: prec_all}\n            ap: {classname: scalar}\n    \"\"\"", "\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "p", "=", "Pool", "(", "processes", "=", "10", ")", "\n", "ret_values", "=", "p", ".", "map", "(", "eval_det_cls_wrapper", ",", "[", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "for", "classname", "in", "gt", ".", "keys", "(", ")", "if", "classname", "in", "pred", "]", ")", "\n", "p", ".", "close", "(", ")", "\n", "for", "i", ",", "classname", "in", "enumerate", "(", "gt", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "classname", "in", "pred", ":", "\n", "            ", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "ret_values", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "rec", "[", "classname", "]", "=", "0", "\n", "prec", "[", "classname", "]", "=", "0", "\n", "ap", "[", "classname", "]", "=", "0", "\n", "", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.random_sampling": [[25, 34], ["numpy.random.choice"], "function", ["None"], ["def", "random_sampling", "(", "pc", ",", "num_sample", ",", "replace", "=", "None", ",", "return_choices", "=", "False", ")", ":", "\n", "    ", "\"\"\" Input is NxC, output is num_samplexC\n    \"\"\"", "\n", "if", "replace", "is", "None", ":", "replace", "=", "(", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ")", "\n", "choices", "=", "np", ".", "random", ".", "choice", "(", "pc", ".", "shape", "[", "0", "]", ",", "num_sample", ",", "replace", "=", "replace", ")", "\n", "if", "return_choices", ":", "\n", "        ", "return", "pc", "[", "choices", "]", ",", "choices", "\n", "", "else", ":", "\n", "        ", "return", "pc", "[", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume_batch": [[39, 54], ["range", "pc_utils.point_cloud_to_volume", "numpy.vstack", "numpy.concatenate", "numpy.squeeze", "vol_list.append", "vol_list.append", "point_cloud_to_volume.flatten", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume"], ["", "", "def", "point_cloud_to_volume_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 batch of point cloud\n        Output is Bx(vsize^3)\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume", "(", "np", ".", "squeeze", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ")", ",", "vsize", ",", "radius", ")", "\n", "if", "flatten", ":", "\n", "            ", "vol_list", ".", "append", "(", "vol", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "vol", ",", "-", "1", ")", ",", "0", ")", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "vol_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume": [[56, 67], ["numpy.zeros", "locations.astype.astype", "float"], "function", ["None"], ["", "", "def", "point_cloud_to_volume", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points.\n        output is vsize*vsize*vsize\n        assumes points are in range [-radius, radius]\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "vol", "[", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", ",", "locations", "[", ":", ",", "2", "]", "]", "=", "1.0", "\n", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.volume_to_point_cloud": [[68, 84], ["range", "numpy.vstack", "range", "len", "numpy.zeros", "range", "np.vstack.append", "numpy.array"], "function", ["None"], ["", "def", "volume_to_point_cloud", "(", "vol", ")", ":", "\n", "    ", "\"\"\" vol is occupancy grid (value = 0 or 1) of size vsize*vsize*vsize\n        return Nx3 numpy array.\n    \"\"\"", "\n", "vsize", "=", "vol", ".", "shape", "[", "0", "]", "\n", "assert", "(", "vol", ".", "shape", "[", "1", "]", "==", "vsize", "and", "vol", ".", "shape", "[", "1", "]", "==", "vsize", ")", "\n", "points", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "vol", "[", "a", ",", "b", ",", "c", "]", "==", "1", ":", "\n", "                    ", "points", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", ")", "\n", "", "", "", "", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "", "points", "=", "np", ".", "vstack", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume_v2_batch": [[85, 95], ["range", "numpy.concatenate", "pc_utils.point_cloud_to_volume_v2", "vol_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume_v2"], ["", "def", "point_cloud_to_volume_v2_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxVxVxVxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume_v2", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "vsize", ",", "radius", ",", "num_sample", ")", "\n", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "vol", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_volume_v2": [[96, 133], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "range", "numpy.zeros", "numpy.vstack", "pc_utils.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.random_sampling"], ["", "def", "point_cloud_to_volume_v2", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is vsize*vsize*vsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each voxel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ",", "num_sample", ",", "3", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ",", "k", ")", "not", "in", "loc2pc", ":", "\n", "                    ", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ",", "k", ")", "]", "# a list of (3,) arrays", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "# kx3", "\n", "# Sample/pad to num_sample points", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                        ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                        ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "# Normalize", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ")", "+", "0.5", ")", "*", "voxel", "-", "radius", "\n", "pc", "=", "(", "pc", "-", "pc_center", ")", "/", "voxel", "# shift and scale", "\n", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_image_batch": [[134, 144], ["range", "numpy.concatenate", "pc_utils.point_cloud_to_image", "img_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_image"], ["", "def", "point_cloud_to_image_batch", "(", "point_clouds", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxIxIxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "img_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "point_cloud_to_image", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "imgsize", ",", "radius", ",", "num_sample", ")", "\n", "img_list", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "img_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_image": [[146, 179], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "numpy.zeros", "numpy.vstack", "pc_utils.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.random_sampling"], ["", "def", "point_cloud_to_image", "(", "points", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is imgsize*imgsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each pixel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "img", "=", "np", ".", "zeros", "(", "(", "imgsize", ",", "imgsize", ",", "num_sample", ",", "3", ")", ")", "\n", "pixel", "=", "2", "*", "radius", "/", "float", "(", "imgsize", ")", "\n", "locations", "=", "(", "points", "[", ":", ",", "0", ":", "2", "]", "+", "radius", ")", "/", "pixel", "# Nx2", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "", "for", "i", "in", "range", "(", "imgsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "imgsize", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "not", "in", "loc2pc", ":", "\n", "                ", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ")", "]", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                    ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                    ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", "]", ")", "+", "0.5", ")", "*", "pixel", "-", "radius", "\n", "pc", "[", ":", ",", "0", ":", "2", "]", "=", "(", "pc", "[", ":", ",", "0", ":", "2", "]", "-", "pc_center", ")", "/", "pixel", "\n", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "return", "img", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.read_ply": [[183, 189], ["PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_ply": [[191, 197], ["numpy.array", "PlyElement.describe", "PlyData().write", "range", "PlyData"], "function", ["None"], ["", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "\"\"\" input: Nx3, write points to filename as PLY format. \"\"\"", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_ply_color": [[198, 218], ["labels.astype.astype", "range", "numpy.array", "PlyElement.describe", "PlyData().write", "colormap", "np.array.append", "numpy.max", "numpy.max", "range", "int", "PlyData", "float"], "function", ["None"], ["", "def", "write_ply_color", "(", "points", ",", "labels", ",", "filename", ",", "num_classes", "=", "None", ",", "colormap", "=", "pyplot", ".", "cm", ".", "jet", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with labels (N) within range 0 ~ num_classes-1 as OBJ file \"\"\"", "\n", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "num_classes", "=", "np", ".", "max", "(", "labels", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "assert", "(", "num_classes", ">", "np", ".", "max", "(", "labels", ")", ")", "\n", "\n", "", "vertex", "=", "[", "]", "\n", "#colors = [pyplot.cm.jet(i/float(num_classes)) for i in range(num_classes)]    ", "\n", "colors", "=", "[", "colormap", "(", "i", "/", "float", "(", "num_classes", ")", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "labels", "[", "i", "]", "]", "\n", "c", "=", "[", "int", "(", "x", "*", "255", ")", "for", "x", "in", "c", "]", "\n", "vertex", ".", "append", "(", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "vertex", "=", "np", ".", "array", "(", "vertex", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "True", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_ply_rgb": [[219, 226], ["colors.astype.astype", "numpy.array", "PlyElement.describe", "PlyData().write", "range", "PlyData"], "function", ["None"], ["", "def", "write_ply_rgb", "(", "points", ",", "colors", ",", "filename", ",", "text", "=", "True", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with RGB colors (N,3) within range [0,255] as OBJ file \"\"\"", "\n", "colors", "=", "colors", ".", "astype", "(", "int", ")", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "colors", "[", "i", ",", "0", "]", ",", "colors", "[", "i", ",", "1", "]", ",", "colors", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.pyplot_draw_point_cloud": [[231, 240], ["plt.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel"], "function", ["None"], ["", "def", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" points is a Nx3 numpy array \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "#savefig(output_filename)", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.pyplot_draw_volume": [[242, 248], ["pc_utils.volume_to_point_cloud", "pc_utils.pyplot_draw_point_cloud"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.volume_to_point_cloud", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.pyplot_draw_point_cloud"], ["", "def", "pyplot_draw_volume", "(", "vol", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" vol is of size vsize*vsize*vsize\n        output an image to output_filename\n    \"\"\"", "\n", "points", "=", "volume_to_point_cloud", "(", "vol", ")", "\n", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotate_point_cloud": [[252, 264], ["points.mean", "numpy.array", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "points", ",", "rotation_matrix", "=", "None", ")", ":", "\n", "    ", "\"\"\" Input: (n,3), Output: (n,3) \"\"\"", "\n", "# Rotate in-place around Z axis.", "\n", "if", "rotation_matrix", "is", "None", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "sinval", ",", "cosval", "=", "np", ".", "sin", "(", "rotation_angle", ")", ",", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "sinval", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "cosval", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "", "ctr", "=", "points", ".", "mean", "(", "axis", "=", "0", ")", "\n", "rotated_data", "=", "np", ".", "dot", "(", "points", "-", "ctr", ",", "rotation_matrix", ")", "+", "ctr", "\n", "return", "rotated_data", ",", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotate_pc_along_y": [[265, 274], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_pc_along_y", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "''' Input ps is NxC points with first 3 channels as XYZ\n        z is facing forward, x is left ward, y is downward\n    '''", "\n", "cosval", "=", "np", ".", "cos", "(", "rot_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rot_angle", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "dot", "(", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "np", ".", "transpose", "(", "rotmat", ")", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotx": [[275, 282], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotx", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "c", ",", "-", "s", "]", ",", "\n", "[", "0", ",", "s", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.roty": [[283, 290], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.roty_batch": [[291, 306], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["", "def", "roty_batch", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\n    t: (x1,x2,...xn)\n    return: (x1,x2,...,xn,3,3)\n    \"\"\"", "\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "output", "[", "...", ",", "0", ",", "0", "]", "=", "c", "\n", "output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n", "output", "[", "...", ",", "2", ",", "2", "]", "=", "c", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.rotz": [[307, 314], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the z-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.bbox_corner_dist_measure": [[319, 340], ["range", "max", "print", "sum", "numpy.linalg.norm().sum", "numpy.linalg.norm", "range", "range", "numpy.linalg.norm"], "function", ["None"], ["", "def", "bbox_corner_dist_measure", "(", "crnr1", ",", "crnr2", ")", ":", "\n", "    ", "\"\"\" compute distance between box corners to replace iou\n    Args:\n        crnr1, crnr2: Nx3 points of box corners in camera axis (y points down)\n        output is a scalar between 0 and 1        \n    \"\"\"", "\n", "\n", "dist", "=", "sys", ".", "maxsize", "\n", "for", "y", "in", "range", "(", "4", ")", ":", "\n", "        ", "rows", "=", "(", "[", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", "+", "[", "4", "+", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", ")", "\n", "d_", "=", "np", ".", "linalg", ".", "norm", "(", "crnr2", "[", "rows", ",", ":", "]", "-", "crnr1", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "/", "8.0", "\n", "if", "d_", "<", "dist", ":", "\n", "            ", "dist", "=", "d_", "\n", "\n", "", "", "u", "=", "sum", "(", "[", "np", ".", "linalg", ".", "norm", "(", "x", "[", "0", ",", ":", "]", "-", "x", "[", "6", ",", ":", "]", ")", "for", "x", "in", "[", "crnr1", ",", "crnr2", "]", "]", ")", "/", "2.0", "\n", "\n", "measure", "=", "max", "(", "1.0", "-", "dist", "/", "u", ",", "0", ")", "\n", "print", "(", "measure", ")", "\n", "\n", "\n", "return", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.point_cloud_to_bbox": [[342, 353], ["numpy.concatenate", "len", "points.min", "points.max"], "function", ["None"], ["", "def", "point_cloud_to_bbox", "(", "points", ")", ":", "\n", "    ", "\"\"\" Extract the axis aligned box from a pcl or batch of pcls\n    Args:\n        points: Nx3 points or BxNx3\n        output is 6 dim: xyz pos of center and 3 lengths        \n    \"\"\"", "\n", "which_dim", "=", "len", "(", "points", ".", "shape", ")", "-", "2", "# first dim if a single cloud and second if batch", "\n", "mn", ",", "mx", "=", "points", ".", "min", "(", "which_dim", ")", ",", "points", ".", "max", "(", "which_dim", ")", "\n", "lengths", "=", "mx", "-", "mn", "\n", "cntr", "=", "0.5", "*", "(", "mn", "+", "mx", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "cntr", ",", "lengths", "]", ",", "axis", "=", "which_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_bbox": [[354, 384], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.eye", "trimesh.creation.box", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "pc_utils.write_bbox.convert_box_to_trimesh_fmt"], "function", ["None"], ["", "def", "write_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export scene bbox to meshes\n    Args:\n        scene_bbox: (N x 6 numpy array): xyz pos of center and 3 lengths\n        out_filename: (string) filename\n\n    Note:\n        To visualize the boxes in MeshLab.\n        1. Select the objects (the boxes)\n        2. Filters -> Polygon and Quad Mesh -> Turn into Quad-Dominant Mesh\n        3. Select Wireframe view.\n    \"\"\"", "\n", "def", "convert_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_oriented_bbox": [[385, 422], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.eye", "pc_utils.write_oriented_bbox.heading2rotmat"], "function", ["None"], ["", "def", "write_oriented_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Z axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Z axis.\n            Y forward, X right, Z upward. heading angle of positive X is 0,\n            heading angle of positive Y is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "2", ",", "2", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ":", "2", ",", "0", ":", "2", "]", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_oriented_bbox_camera_coord": [[423, 461], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.eye", "pc_utils.write_oriented_bbox.heading2rotmat"], "function", ["None"], ["", "def", "write_oriented_bbox_camera_coord", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Y axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Y axis.\n            Z forward, X rightward, Y downward. heading angle of positive X is 0,\n            heading angle of negative Z is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "1", ",", "1", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "[", "cosval", ",", "0", ",", "sinval", "]", ")", "\n", "rotmat", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "-", "sinval", ",", "0", ",", "cosval", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.pc_utils.write_lines_as_cylinders": [[462, 481], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "trimesh.geometry.align_vectors", "numpy.sqrt", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "numpy.dot", "trimesh.creation.cylinder"], "function", ["None"], ["", "def", "write_lines_as_cylinders", "(", "pcl", ",", "filename", ",", "rad", "=", "0.005", ",", "res", "=", "64", ")", ":", "\n", "    ", "\"\"\"Create lines represented as cylinders connecting pairs of 3D points\n    Args:\n        pcl: (N x 2 x 3 numpy array): N pairs of xyz pos             \n        filename: (string) filename for the output mesh (ply) file\n        rad: radius for the cylinder\n        res: number of sections used to create the cylinder\n    \"\"\"", "\n", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "src", ",", "tgt", "in", "pcl", ":", "\n", "# compute line", "\n", "        ", "vec", "=", "tgt", "-", "src", "\n", "M", "=", "trimesh", ".", "geometry", ".", "align_vectors", "(", "[", "0", ",", "0", ",", "1", "]", ",", "vec", ",", "False", ")", "\n", "vec", "=", "tgt", "-", "src", "# compute again since align_vectors modifies vec in-place!", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "0.5", "*", "src", "+", "0.5", "*", "tgt", "\n", "height", "=", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "vec", ",", "vec", ")", ")", "\n", "scene", ".", "add_geometry", "(", "trimesh", ".", "creation", ".", "cylinder", "(", "radius", "=", "rad", ",", "height", "=", "height", ",", "sections", "=", "res", ",", "transform", "=", "M", ")", ")", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "f'{filename}.ply'", ",", "file_type", "=", "'ply'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.get_scene_list": [[32, 35], ["open", "sorted", "list", "set", "f.read().splitlines", "f.read"], "function", ["None"], ["def", "get_scene_list", "(", ")", ":", "\n", "    ", "with", "open", "(", "SCANNET_LIST", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "sorted", "(", "list", "(", "set", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.to_tensor": [[36, 38], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "to_tensor", "(", "arr", ")", ":", "\n", "    ", "return", "torch", ".", "Tensor", "(", "arr", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.resize_crop_image": [[39, 49], ["int", "numpy.array", "math.floor", "torchvision.Resize", "PIL.Image.fromarray", "torchvision.CenterCrop", "float", "float", "numpy.np.float32"], "function", ["None"], ["", "def", "resize_crop_image", "(", "image", ",", "new_image_dims", ")", ":", "\n", "    ", "image_dims", "=", "[", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", "]", "\n", "if", "image_dims", "==", "new_image_dims", ":", "\n", "        ", "return", "image", "\n", "", "resize_width", "=", "int", "(", "math", ".", "floor", "(", "new_image_dims", "[", "1", "]", "*", "float", "(", "image_dims", "[", "0", "]", ")", "/", "float", "(", "image_dims", "[", "1", "]", ")", ")", ")", "\n", "image", "=", "transforms", ".", "Resize", "(", "[", "new_image_dims", "[", "1", "]", ",", "resize_width", "]", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "(", "Image", ".", "fromarray", "(", "image", ")", ")", "\n", "image", "=", "transforms", ".", "CenterCrop", "(", "[", "new_image_dims", "[", "1", "]", ",", "new_image_dims", "[", "0", "]", "]", ")", "(", "image", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.load_image": [[50, 63], ["imageio.imread", "project_multiview_features.resize_crop_image", "len", "numpy.transpose", "torchvision.Normalize", "torch.Tensor", "torch.Tensor", "len", "np.transpose.astype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.resize_crop_image"], ["", "def", "load_image", "(", "file", ",", "image_dims", ")", ":", "\n", "    ", "image", "=", "imread", "(", "file", ")", "\n", "# preprocess", "\n", "image", "=", "resize_crop_image", "(", "image", ",", "image_dims", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "# color image", "\n", "        ", "image", "=", "np", ".", "transpose", "(", "image", ",", "[", "2", ",", "0", ",", "1", "]", ")", "# move feature to front", "\n", "image", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.496342", ",", "0.466664", ",", "0.440796", "]", ",", "std", "=", "[", "0.277856", ",", "0.28623", ",", "0.291129", "]", ")", "(", "torch", ".", "Tensor", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", ")", ")", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "# label image", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.load_pose": [[64, 70], ["open().read().splitlines", "numpy.asarray().astype", "len", "open().read", "numpy.asarray", "x.split", "open"], "function", ["None"], ["", "def", "load_pose", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "assert", "len", "(", "lines", ")", "==", "4", "\n", "lines", "=", "[", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ",", "x", "[", "3", "]", "]", "for", "x", "in", "(", "x", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", ")", "]", "\n", "\n", "return", "np", ".", "asarray", "(", "lines", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.load_depth": [[71, 78], ["imageio.imread", "project_multiview_features.resize_crop_image", "resize_crop_image.astype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.resize_crop_image"], ["", "def", "load_depth", "(", "file", ",", "image_dims", ")", ":", "\n", "    ", "depth_image", "=", "imread", "(", "file", ")", "\n", "# preprocess", "\n", "depth_image", "=", "resize_crop_image", "(", "depth_image", ",", "image_dims", ")", "\n", "depth_image", "=", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.0", "\n", "\n", "return", "depth_image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.get_scene_data": [[79, 86], ["numpy.load", "os.path.join"], "function", ["None"], ["", "def", "get_scene_data", "(", "scene_list", ")", ":", "\n", "    ", "scene_data", "=", "{", "}", "\n", "for", "scene_id", "in", "scene_list", ":", "\n", "# load the original vertices, not the axis-aligned ones", "\n", "        ", "scene_data", "[", "scene_id", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "SCANNET_DATA", ",", "scene_id", ")", "+", "\"_vert.npy\"", ")", "[", ":", ",", ":", "3", "]", "\n", "\n", "", "return", "scene_data", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_features.compute_projection": [[87, 113], ["torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "range", "PROJECTOR.compute_projection", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "project_multiview_features.to_tensor", "project_multiview_features.to_tensor", "project_multiview_features.to_tensor", "indices[].long", "indices[].long", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.compute_projection", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor"], ["", "def", "compute_projection", "(", "points", ",", "depth", ",", "camera_to_world", ")", ":", "\n", "    ", "\"\"\"\n        :param points: tensor containing all points of the point cloud (num_points, 3)\n        :param depth: depth map (size: proj_image)\n        :param camera_to_world: camera pose (4, 4)\n        \n        :return indices_3d (array with point indices that correspond to a pixel),\n        :return indices_2d (array with pixel indices that correspond to a point)\n\n        note:\n            the first digit of indices represents the number of relevant points\n            the rest digits are for the projection mapping\n    \"\"\"", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_frames", "=", "depth", ".", "shape", "[", "0", "]", "\n", "indices_3ds", "=", "torch", ".", "zeros", "(", "num_frames", ",", "num_points", "+", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "indices_2ds", "=", "torch", ".", "zeros", "(", "num_frames", ",", "num_points", "+", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_frames", ")", ":", "\n", "        ", "indices", "=", "PROJECTOR", ".", "compute_projection", "(", "to_tensor", "(", "points", ")", ",", "to_tensor", "(", "depth", "[", "i", "]", ")", ",", "to_tensor", "(", "camera_to_world", "[", "i", "]", ")", ")", "\n", "if", "indices", ":", "\n", "            ", "indices_3ds", "[", "i", "]", "=", "indices", "[", "0", "]", ".", "long", "(", ")", "\n", "indices_2ds", "[", "i", "]", "=", "indices", "[", "1", "]", ".", "long", "(", ")", "\n", "print", "(", "\"found {} mappings in {} points from frame {}\"", ".", "format", "(", "indices_3ds", "[", "i", "]", "[", "0", "]", ",", "num_points", ",", "i", ")", ")", "\n", "\n", "", "", "return", "indices_3ds", ",", "indices_2ds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset.__init__": [[29, 31], ["compute_multiview_features.EnetDataset._init_resources"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._init_resources"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_resources", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset.__getitem__": [[35, 40], ["compute_multiview_features.EnetDataset._load_image", "SCANNET_FRAME_PATH.format"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._load_image"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "scene_id", ",", "frame_id", "=", "self", ".", "data", "[", "idx", "]", "\n", "image", "=", "self", ".", "_load_image", "(", "SCANNET_FRAME_PATH", ".", "format", "(", "scene_id", ",", "\"color\"", ",", "\"{}.jpg\"", ".", "format", "(", "frame_id", ")", ")", ",", "[", "328", ",", "256", "]", ")", "\n", "\n", "return", "scene_id", ",", "frame_id", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._init_resources": [[41, 51], ["compute_multiview_features.EnetDataset._get_scene_list", "sorted", "os.listdir", "compute_multiview_features.EnetDataset.data.append", "SCANNET_FRAME_ROOT.format", "int", "int", "x.split", "frame_file.split"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._get_scene_list"], ["", "def", "_init_resources", "(", "self", ")", ":", "\n", "        ", "self", ".", "_get_scene_list", "(", ")", "\n", "self", ".", "data", "=", "[", "]", "\n", "for", "scene_id", "in", "self", ".", "scene_list", ":", "\n", "            ", "frame_list", "=", "sorted", "(", "os", ".", "listdir", "(", "SCANNET_FRAME_ROOT", ".", "format", "(", "scene_id", ",", "\"color\"", ")", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "for", "frame_file", "in", "frame_list", ":", "\n", "                ", "self", ".", "data", ".", "append", "(", "\n", "(", "\n", "scene_id", ",", "\n", "int", "(", "frame_file", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._get_scene_list": [[54, 57], ["open", "sorted", "list", "set", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "", "", "def", "_get_scene_list", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "SCANNET_LIST", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "scene_list", "=", "sorted", "(", "list", "(", "set", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._resize_crop_image": [[58, 66], ["numpy.array", "int", "math.floor", "torchvision.Resize", "PIL.Image.fromarray", "torchvision.CenterCrop", "float", "float"], "methods", ["None"], ["", "", "def", "_resize_crop_image", "(", "self", ",", "image", ",", "new_image_dims", ")", ":", "\n", "        ", "image_dims", "=", "[", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", "]", "\n", "if", "image_dims", "!=", "new_image_dims", ":", "\n", "            ", "resize_width", "=", "int", "(", "math", ".", "floor", "(", "new_image_dims", "[", "1", "]", "*", "float", "(", "image_dims", "[", "0", "]", ")", "/", "float", "(", "image_dims", "[", "1", "]", ")", ")", ")", "\n", "image", "=", "transforms", ".", "Resize", "(", "[", "new_image_dims", "[", "1", "]", ",", "resize_width", "]", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "(", "Image", ".", "fromarray", "(", "image", ")", ")", "\n", "image", "=", "transforms", ".", "CenterCrop", "(", "[", "new_image_dims", "[", "1", "]", ",", "new_image_dims", "[", "0", "]", "]", ")", "(", "image", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._load_image": [[67, 80], ["imageio.imread", "compute_multiview_features.EnetDataset._resize_crop_image", "len", "numpy.transpose", "torchvision.Normalize", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "numpy.expand_dims", "numpy.expand_dims.astype"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset._resize_crop_image"], ["", "def", "_load_image", "(", "self", ",", "file", ",", "image_dims", ")", ":", "\n", "        ", "image", "=", "imread", "(", "file", ")", "\n", "# preprocess", "\n", "image", "=", "self", ".", "_resize_crop_image", "(", "image", ",", "image_dims", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "# color image", "\n", "            ", "image", "=", "np", ".", "transpose", "(", "image", ",", "[", "2", ",", "0", ",", "1", "]", ")", "# move feature to front", "\n", "image", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.496342", ",", "0.466664", ",", "0.440796", "]", ",", "std", "=", "[", "0.277856", ",", "0.28623", ",", "0.291129", "]", ")", "(", "torch", ".", "Tensor", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", ")", ")", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "# label image", "\n", "            ", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.EnetDataset.collate_fn": [[81, 88], ["zip", "list", "list", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack().cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "data", ")", ":", "\n", "        ", "scene_ids", ",", "frame_ids", ",", "images", "=", "zip", "(", "*", "data", ")", "\n", "scene_ids", "=", "list", "(", "scene_ids", ")", "\n", "frame_ids", "=", "list", "(", "frame_ids", ")", "\n", "images", "=", "torch", ".", "stack", "(", "images", ",", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "scene_ids", ",", "frame_ids", ",", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.compute_multiview_features.create_enet": [[89, 100], ["lib.enet.create_enet_for_3d", "torch.Sequential().cuda", "nn.Sequential().cuda.eval", "nn.Sequential().cuda.parameters", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.create_enet_for_3d"], ["", "", "def", "create_enet", "(", ")", ":", "\n", "    ", "enet_fixed", ",", "enet_trainable", ",", "_", "=", "create_enet_for_3d", "(", "41", ",", "ENET_PATH", ",", "21", ")", "\n", "enet", "=", "nn", ".", "Sequential", "(", "\n", "enet_fixed", ",", "\n", "enet_trainable", "\n", ")", ".", "cuda", "(", ")", "\n", "enet", ".", "eval", "(", ")", "\n", "for", "param", "in", "enet", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "return", "enet", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.predict.get_dataloader": [[33, 65], ["os.path.join", "json.load", "sorted", "len", "print", "lib.dataset.ScannetQADataset", "print", "torch.utils.data.DataLoader", "open", "json.load.keys", "transformers.AutoTokenizer.from_pretrained", "len"], "function", ["None"], ["def", "get_dataloader", "(", "args", ",", "scanqa", ",", "all_scene_list", ",", "split", ",", "config", ")", ":", "\n", "    ", "answer_vocab_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "\"answer_vocab.json\"", ")", "\n", "answer_counter", "=", "json", ".", "load", "(", "open", "(", "answer_vocab_path", ")", ")", "\n", "answer_cands", "=", "sorted", "(", "answer_counter", ".", "keys", "(", ")", ")", "\n", "config", ".", "num_answers", "=", "len", "(", "answer_cands", ")", "\n", "\n", "print", "(", "\"using {} answers\"", ".", "format", "(", "config", ".", "num_answers", ")", ")", "\n", "\n", "if", "'bert-'", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "os", ".", "environ", "[", "\"TOKENIZERS_PARALLELISM\"", "]", "=", "\"true\"", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer_name", ")", "\n", "", "else", ":", "\n", "        ", "tokenizer", "=", "None", "\n", "\n", "", "dataset", "=", "ScannetQADataset", "(", "\n", "scanqa", "=", "scanqa", ",", "\n", "scanqa_all_scene", "=", "all_scene_list", ",", "\n", "use_unanswerable", "=", "True", ",", "\n", "answer_cands", "=", "answer_cands", ",", "\n", "answer_counter", "=", "answer_counter", ",", "\n", "answer_cls_loss", "=", "args", ".", "answer_cls_loss", ",", "\n", "split", "=", "split", ",", "\n", "num_points", "=", "args", ".", "num_points", ",", "\n", "use_height", "=", "(", "not", "args", ".", "no_height", ")", ",", "\n", "use_color", "=", "args", ".", "use_color", ",", "\n", "use_normal", "=", "args", ".", "use_normal", ",", "\n", "use_multiview", "=", "args", ".", "use_multiview", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "print", "(", "\"predict for {} samples\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "return", "dataset", ",", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.predict.get_model": [[67, 134], ["models.qa_module.ScanQA", "os.path.join", "print", "model.cuda.cuda", "model.cuda.load_state_dict", "model.cuda.eval", "transformers.AutoConfig.from_pretrained", "hasattr", "int", "torch.load", "torch.load", "torch.load", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "get_model", "(", "args", ",", "config", ")", ":", "\n", "# load tokenizer model", "\n", "    ", "if", "\"bert-\"", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "bert_model_name", "=", "args", ".", "tokenizer_name", "\n", "bert_config", "=", "AutoConfig", ".", "from_pretrained", "(", "bert_model_name", ")", "\n", "if", "hasattr", "(", "bert_config", ",", "\"hidden_size\"", ")", ":", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "hidden_size", "\n", "", "else", ":", "\n", "# for distllbert", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "dim", "\n", "", "", "else", ":", "\n", "        ", "bert_model_name", "=", "None", "\n", "lang_emb_size", "=", "300", "# glove emb_size", "\n", "\n", "# load model", "\n", "", "input_channels", "=", "int", "(", "args", ".", "use_multiview", ")", "*", "128", "+", "int", "(", "args", ".", "use_normal", ")", "*", "3", "+", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "int", "(", "not", "args", ".", "no_height", ")", "\n", "\n", "model", "=", "ScanQA", "(", "\n", "num_answers", "=", "config", ".", "num_answers", ",", "\n", "# proposal", "\n", "input_feature_dim", "=", "input_channels", ",", "\n", "num_object_class", "=", "config", ".", "num_class", ",", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", ",", "\n", "num_proposal", "=", "args", ".", "num_proposals", ",", "\n", "seed_feat_dim", "=", "args", ".", "seed_feat_dim", ",", "\n", "proposal_size", "=", "args", ".", "proposal_size", ",", "\n", "pointnet_width", "=", "args", ".", "pointnet_width", ",", "\n", "pointnet_depth", "=", "args", ".", "pointnet_depth", ",", "\n", "vote_radius", "=", "args", ".", "vote_radius", ",", "\n", "vote_nsample", "=", "args", ".", "vote_nsample", ",", "\n", "# qa", "\n", "#answer_cls_loss=\"ce\",", "\n", "answer_pdrop", "=", "args", ".", "answer_pdrop", ",", "\n", "mcan_num_layers", "=", "args", ".", "mcan_num_layers", ",", "\n", "mcan_num_heads", "=", "args", ".", "mcan_num_heads", ",", "\n", "mcan_pdrop", "=", "args", ".", "mcan_pdrop", ",", "\n", "mcan_flat_mlp_size", "=", "args", ".", "mcan_flat_mlp_size", ",", "\n", "mcan_flat_glimpses", "=", "args", ".", "mcan_flat_glimpses", ",", "\n", "mcan_flat_out_size", "=", "args", ".", "mcan_flat_out_size", ",", "\n", "# lang", "\n", "lang_use_bidir", "=", "args", ".", "lang_use_bidir", ",", "\n", "lang_num_layers", "=", "args", ".", "lang_num_layers", ",", "\n", "lang_emb_size", "=", "lang_emb_size", ",", "\n", "lang_pdrop", "=", "args", ".", "lang_pdrop", ",", "\n", "bert_model_name", "=", "bert_model_name", ",", "\n", "freeze_bert", "=", "args", ".", "freeze_bert", ",", "\n", "finetune_bert_last_layer", "=", "args", ".", "finetune_bert_last_layer", ",", "\n", "# common", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "# option", "\n", "use_object_mask", "=", "(", "not", "args", ".", "no_object_mask", ")", ",", "\n", "use_lang_cls", "=", "(", "not", "args", ".", "no_lang_cls", ")", ",", "\n", "use_reference", "=", "(", "not", "args", ".", "no_reference", ")", ",", "\n", "use_answer", "=", "(", "not", "args", ".", "no_answer", ")", ",", "\n", ")", "\n", "\n", "model_name", "=", "\"model.pth\"", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "model_name", ")", "\n", "print", "(", "'loading model from:'", ",", "model_path", ")", "\n", "# to CUDA", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "#, strict=False)", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.predict.get_scanqa": [[135, 140], ["json.load", "sorted", "open", "list", "os.path.join", "set"], "function", ["None"], ["", "def", "get_scanqa", "(", "args", ")", ":", "\n", "    ", "scanqa", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANQA", ",", "project_name", "+", "\"_\"", "+", "args", ".", "test_type", "+", "\".json\"", ")", ")", ")", "\n", "scene_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "data", "[", "\"scene_id\"", "]", "for", "data", "in", "scanqa", "]", ")", ")", ")", "\n", "scanqa", "=", "[", "data", "for", "data", "in", "scanqa", "if", "data", "[", "\"scene_id\"", "]", "in", "scene_list", "]", "\n", "return", "scanqa", ",", "scene_list", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.predict.predict": [[141, 257], ["print", "data.scannet.model_util_scannet.ScannetDatasetConfig", "print", "predict.get_scanqa", "predict.get_dataloader", "predict.get_model", "print", "tqdm.tqdm", "print", "os.path.join", "print", "torch.argmax().long", "torch.argmax().long", "torch.argmax().long", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_heading_residual.squeeze.squeeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "pred_size_residual.squeeze.squeeze", "pred_answers_top10.tolist", "range", "open", "json.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "get_model.", "lib.loss_helper.get_loss", "lib.ap_helper.parse_predictions", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "data_dict[].topk", "data.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "utils.box_util.get_3d_box", "[].item", "pred_bboxes.append", "type", "data_dict[].cuda", "torch.argmax", "torch.argmax", "torch.argmax", "pred_center[].detach().cpu().numpy", "pred_heading_class[].detach().cpu().numpy", "pred_heading_residual[].detach().cpu().numpy", "pred_size_class[].detach().cpu().numpy", "pred_size_residual[].detach().cpu().numpy", "dataset.answer_vocab.itos", "utils.box_util.get_3d_box.tolist", "v.cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.argmax.unsqueeze().unsqueeze", "data_dict[].items", "pred_center[].detach().cpu", "pred_heading_class[].detach().cpu", "pred_heading_residual[].detach().cpu", "pred_size_class[].detach().cpu", "pred_size_residual[].detach().cpu", "torch.argmax.unsqueeze", "pred_center[].detach", "pred_heading_class[].detach", "pred_heading_residual[].detach", "pred_size_class[].detach", "pred_size_residual[].detach"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scanqa", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_model", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.get_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.itos"], ["", "def", "predict", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"predict bounding boxes...\"", ")", "\n", "# constant", "\n", "DC", "=", "ScannetDatasetConfig", "(", ")", "\n", "\n", "# init training dataset", "\n", "print", "(", "\"preparing data...\"", ")", "\n", "scanqa", ",", "scene_list", "=", "get_scanqa", "(", "args", ")", "\n", "\n", "# dataloader", "\n", "_", ",", "dataloader", "=", "get_dataloader", "(", "args", ",", "scanqa", ",", "scene_list", ",", "\"test\"", ",", "DC", ")", "\n", "dataset", "=", "dataloader", ".", "dataset", "\n", "scanqa", "=", "dataset", ".", "scanqa", "\n", "\n", "# model", "\n", "model", "=", "get_model", "(", "args", ",", "DC", ")", "\n", "\n", "# config", "\n", "POST_DICT", "=", "{", "\n", "\"remove_empty_box\"", ":", "True", ",", "\n", "\"use_3d_nms\"", ":", "True", ",", "\n", "\"nms_iou\"", ":", "0.25", ",", "\n", "\"use_old_type_nms\"", ":", "False", ",", "\n", "\"cls_nms\"", ":", "True", ",", "\n", "\"per_class_proposal\"", ":", "True", ",", "\n", "\"conf_thresh\"", ":", "0.05", ",", "\n", "\"dataset_config\"", ":", "DC", "\n", "}", "if", "not", "args", ".", "no_nms", "else", "None", "\n", "\n", "if", "args", ".", "no_detection", ":", "\n", "        ", "POST_DICT", "=", "None", "\n", "\n", "# predict", "\n", "", "print", "(", "\"predicting...\"", ")", "\n", "pred_bboxes", "=", "[", "]", "\n", "for", "data_dict", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "# move to cuda", "\n", "        ", "for", "key", "in", "data_dict", ":", "\n", "            ", "if", "type", "(", "data_dict", "[", "key", "]", ")", "is", "dict", ":", "\n", "                ", "data_dict", "[", "key", "]", "=", "{", "k", ":", "v", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "data_dict", "[", "key", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "data_dict", "[", "key", "]", "=", "data_dict", "[", "key", "]", ".", "cuda", "(", ")", "\n", "\n", "# feed", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data_dict", "=", "model", "(", "data_dict", ")", "\n", "_", ",", "data_dict", "=", "get_loss", "(", "\n", "data_dict", "=", "data_dict", ",", "\n", "config", "=", "DC", ",", "\n", "detection", "=", "False", ",", "\n", "use_reference", "=", "not", "args", ".", "no_reference", ",", "\n", "use_lang_classifier", "=", "not", "args", ".", "no_lang_cls", ",", "\n", "use_answer", "=", "(", "not", "args", ".", "no_answer", ")", ",", "\n", ")", "\n", "\n", "", "objectness_preds_batch", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'objectness_scores'", "]", ",", "2", ")", ".", "long", "(", ")", "\n", "\n", "if", "POST_DICT", ":", "\n", "            ", "_", "=", "parse_predictions", "(", "data_dict", ",", "POST_DICT", ")", "\n", "nms_masks", "=", "torch", ".", "LongTensor", "(", "data_dict", "[", "'pred_mask'", "]", ")", ".", "cuda", "(", ")", "\n", "# construct valid mask", "\n", "pred_masks", "=", "(", "nms_masks", "*", "objectness_preds_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "# construct valid mask", "\n", "            ", "pred_masks", "=", "(", "objectness_preds_batch", "==", "1", ")", ".", "float", "(", ")", "\n", "\n", "# bbox prediction", "\n", "", "pred_ref", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'cluster_ref'", "]", "*", "pred_masks", ",", "1", ")", "# (B,)", "\n", "pred_center", "=", "data_dict", "[", "'center'", "]", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'heading_residuals'", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "'size_residuals'", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_class", "=", "pred_size_class", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", "# B,num_proposal,3", "\n", "\n", "topk", "=", "10", "\n", "pred_answers_top10", "=", "data_dict", "[", "'answer_scores'", "]", ".", "topk", "(", "topk", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "pred_answer_idxs", "=", "pred_answers_top10", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "pred_ref", ".", "shape", "[", "0", "]", ")", ":", "\n", "# compute the iou", "\n", "            ", "pred_ref_idx", "=", "pred_ref", "[", "i", "]", "\n", "pred_obb", "=", "DC", ".", "param2obb", "(", "\n", "pred_center", "[", "i", ",", "pred_ref_idx", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_heading_class", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_heading_residual", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_size_class", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_size_residual", "[", "i", ",", "pred_ref_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "pred_bbox", "=", "get_3d_box", "(", "pred_obb", "[", "3", ":", "6", "]", ",", "pred_obb", "[", "6", "]", ",", "pred_obb", "[", "0", ":", "3", "]", ")", "\n", "\n", "# answer", "\n", "#pred_answer = dataset.answer_vocab.itos(pred_answer_idxs[i])", "\n", "pred_answers_top10", "=", "[", "dataset", ".", "answer_vocab", ".", "itos", "(", "pred_answer_idx", ")", "for", "pred_answer_idx", "in", "pred_answer_idxs", "[", "i", "]", "]", "\n", "\n", "# store data", "\n", "scanqa_idx", "=", "data_dict", "[", "\"scan_idx\"", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "pred_data", "=", "{", "\n", "\"scene_id\"", ":", "scanqa", "[", "scanqa_idx", "]", "[", "\"scene_id\"", "]", ",", "\n", "\"question_id\"", ":", "scanqa", "[", "scanqa_idx", "]", "[", "\"question_id\"", "]", ",", "\n", "\"answer_top10\"", ":", "pred_answers_top10", ",", "\n", "\"bbox\"", ":", "pred_bbox", ".", "tolist", "(", ")", ",", "\n", "}", "\n", "pred_bboxes", ".", "append", "(", "pred_data", ")", "\n", "\n", "# dump", "\n", "", "", "print", "(", "\"dumping...\"", ")", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "\"pred.\"", "+", "args", ".", "test_type", "+", "\".json\"", ")", "\n", "\n", "with", "open", "(", "pred_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "pred_bboxes", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "print", "(", "\"done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_nyu40_labels": [[44, 49], ["[].tolist", "pandas.read_csv"], "function", ["None"], ["def", "get_nyu40_labels", "(", ")", ":", "\n", "    ", "labels", "=", "[", "\"unannotated\"", "]", "\n", "labels", "+=", "pd", ".", "read_csv", "(", "NYU40_LABELS", ")", "[", "\"nyu40class\"", "]", ".", "tolist", "(", ")", "\n", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_prediction_to_raw": [[50, 55], ["project_multiview_labels.get_nyu40_labels", "enumerate"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_nyu40_labels"], ["", "def", "get_prediction_to_raw", "(", ")", ":", "\n", "    ", "labels", "=", "get_nyu40_labels", "(", ")", "\n", "mapping", "=", "{", "i", ":", "label", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", "}", "\n", "\n", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_nyu_to_scannet": [[56, 71], ["project_multiview_labels.get_prediction_to_raw", "range", "enumerate", "scannet_label_to_scannet_idx.keys"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_prediction_to_raw"], ["", "def", "get_nyu_to_scannet", "(", ")", ":", "\n", "    ", "nyu_idx_to_nyu_label", "=", "get_prediction_to_raw", "(", ")", "\n", "scannet_label_to_scannet_idx", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "SCANNET_LABELS", ")", "}", "\n", "\n", "# mapping", "\n", "nyu_to_scannet", "=", "{", "}", "\n", "for", "nyu_idx", "in", "range", "(", "41", ")", ":", "\n", "        ", "nyu_label", "=", "nyu_idx_to_nyu_label", "[", "nyu_idx", "]", "\n", "if", "nyu_label", "in", "scannet_label_to_scannet_idx", ".", "keys", "(", ")", ":", "\n", "            ", "scannet_idx", "=", "scannet_label_to_scannet_idx", "[", "nyu_label", "]", "\n", "", "else", ":", "\n", "            ", "scannet_idx", "=", "0", "\n", "", "nyu_to_scannet", "[", "nyu_idx", "]", "=", "scannet_idx", "\n", "\n", "", "return", "nyu_to_scannet", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.create_color_palette": [[72, 95], ["None"], "function", ["None"], ["", "def", "create_color_palette", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"unannotated\"", ":", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "\"floor\"", ":", "(", "152", ",", "223", ",", "138", ")", ",", "\n", "\"wall\"", ":", "(", "174", ",", "199", ",", "232", ")", ",", "\n", "\"cabinet\"", ":", "(", "31", ",", "119", ",", "180", ")", ",", "\n", "\"bed\"", ":", "(", "255", ",", "187", ",", "120", ")", ",", "\n", "\"chair\"", ":", "(", "188", ",", "189", ",", "34", ")", ",", "\n", "\"sofa\"", ":", "(", "140", ",", "86", ",", "75", ")", ",", "\n", "\"table\"", ":", "(", "255", ",", "152", ",", "150", ")", ",", "\n", "\"door\"", ":", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "\"window\"", ":", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "\"bookshelf\"", ":", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "\"picture\"", ":", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "\"counter\"", ":", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "\"desk\"", ":", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "\"curtain\"", ":", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "\"refridgerator\"", ":", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "\"bathtub\"", ":", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "\"shower curtain\"", ":", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "\"toilet\"", ":", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "\"sink\"", ":", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "\"otherfurniture\"", ":", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_scene_list": [[97, 103], ["open", "sorted", "list", "set", "f.read().splitlines", "f.read"], "function", ["None"], ["", "def", "get_scene_list", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "scene_id", "==", "\"-1\"", ":", "\n", "        ", "with", "open", "(", "SCANNET_LIST", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "return", "sorted", "(", "list", "(", "set", "(", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "[", "args", ".", "scene_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor": [[104, 106], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "", "def", "to_tensor", "(", "arr", ")", ":", "\n", "    ", "return", "torch", ".", "Tensor", "(", "arr", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.resize_crop_image": [[107, 117], ["int", "numpy.array", "math.floor", "torchvision.Resize", "PIL.Image.fromarray", "torchvision.CenterCrop", "float", "float", "numpy.np.float32"], "function", ["None"], ["", "def", "resize_crop_image", "(", "image", ",", "new_image_dims", ")", ":", "\n", "    ", "image_dims", "=", "[", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", "]", "\n", "if", "image_dims", "==", "new_image_dims", ":", "\n", "        ", "return", "image", "\n", "", "resize_width", "=", "int", "(", "math", ".", "floor", "(", "new_image_dims", "[", "1", "]", "*", "float", "(", "image_dims", "[", "0", "]", ")", "/", "float", "(", "image_dims", "[", "1", "]", ")", ")", ")", "\n", "image", "=", "transforms", ".", "Resize", "(", "[", "new_image_dims", "[", "1", "]", ",", "resize_width", "]", ",", "interpolation", "=", "Image", ".", "NEAREST", ")", "(", "Image", ".", "fromarray", "(", "image", ")", ")", "\n", "image", "=", "transforms", ".", "CenterCrop", "(", "[", "new_image_dims", "[", "1", "]", ",", "new_image_dims", "[", "0", "]", "]", ")", "(", "image", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.load_image": [[118, 132], ["imageio.imread", "project_multiview_labels.resize_crop_image", "len", "numpy.transpose", "torchvision.Normalize", "torch.Tensor", "torch.Tensor", "len", "np.transpose.astype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.resize_crop_image"], ["", "def", "load_image", "(", "file", ",", "image_dims", ")", ":", "\n", "    ", "image", "=", "imread", "(", "file", ")", "\n", "# preprocess", "\n", "image", "=", "resize_crop_image", "(", "image", ",", "image_dims", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "# color image", "\n", "        ", "image", "=", "np", ".", "transpose", "(", "image", ",", "[", "2", ",", "0", ",", "1", "]", ")", "# move feature to front", "\n", "image", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.496342", ",", "0.466664", ",", "0.440796", "]", ",", "std", "=", "[", "0.277856", ",", "0.28623", ",", "0.291129", "]", ")", "(", "torch", ".", "Tensor", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", ")", ")", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "# label image", "\n", "#         image = np.expand_dims(image, 0)", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.load_pose": [[133, 139], ["open().read().splitlines", "numpy.asarray().astype", "len", "open().read", "numpy.asarray", "x.split", "open"], "function", ["None"], ["", "def", "load_pose", "(", "filename", ")", ":", "\n", "    ", "lines", "=", "open", "(", "filename", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "assert", "len", "(", "lines", ")", "==", "4", "\n", "lines", "=", "[", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ",", "x", "[", "3", "]", "]", "for", "x", "in", "(", "x", ".", "split", "(", "\" \"", ")", "for", "x", "in", "lines", ")", "]", "\n", "\n", "return", "np", ".", "asarray", "(", "lines", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.load_depth": [[140, 147], ["imageio.imread", "project_multiview_labels.resize_crop_image", "resize_crop_image.astype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.resize_crop_image"], ["", "def", "load_depth", "(", "file", ",", "image_dims", ")", ":", "\n", "    ", "depth_image", "=", "imread", "(", "file", ")", "\n", "# preprocess", "\n", "depth_image", "=", "resize_crop_image", "(", "depth_image", ",", "image_dims", ")", "\n", "depth_image", "=", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000.0", "\n", "\n", "return", "depth_image", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.visualize": [[148, 180], ["project_multiview_labels.create_color_palette", "project_multiview_labels.get_nyu_to_scannet", "range", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData", "os.makedirs", "plyfile.PlyData.write", "np.array.append", "PC_LABEL_PATH.format", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype", "numpy.dtype"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.create_color_palette", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_nyu_to_scannet"], ["", "def", "visualize", "(", "coords", ",", "labels", ")", ":", "\n", "    ", "palette", "=", "create_color_palette", "(", ")", "\n", "nyu_to_scannet", "=", "get_nyu_to_scannet", "(", ")", "\n", "vertex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vertex", ".", "append", "(", "\n", "(", "\n", "coords", "[", "i", "]", "[", "0", "]", ",", "\n", "coords", "[", "i", "]", "[", "1", "]", ",", "\n", "coords", "[", "i", "]", "[", "2", "]", ",", "\n", "palette", "[", "SCANNET_LABELS", "[", "nyu_to_scannet", "[", "labels", "[", "i", "]", "]", "]", "]", "[", "0", "]", ",", "\n", "palette", "[", "SCANNET_LABELS", "[", "nyu_to_scannet", "[", "labels", "[", "i", "]", "]", "]", "]", "[", "1", "]", ",", "\n", "palette", "[", "SCANNET_LABELS", "[", "nyu_to_scannet", "[", "labels", "[", "i", "]", "]", "]", "]", "[", "2", "]", "\n", ")", "\n", ")", "\n", "\n", "", "vertex", "=", "np", ".", "array", "(", "\n", "vertex", ",", "\n", "dtype", "=", "[", "\n", "(", "\"x\"", ",", "np", ".", "dtype", "(", "\"float32\"", ")", ")", ",", "\n", "(", "\"y\"", ",", "np", ".", "dtype", "(", "\"float32\"", ")", ")", ",", "\n", "(", "\"z\"", ",", "np", ".", "dtype", "(", "\"float32\"", ")", ")", ",", "\n", "(", "\"red\"", ",", "np", ".", "dtype", "(", "\"uint8\"", ")", ")", ",", "\n", "(", "\"green\"", ",", "np", ".", "dtype", "(", "\"uint8\"", ")", ")", ",", "\n", "(", "\"blue\"", ",", "np", ".", "dtype", "(", "\"uint8\"", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "output_pc", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "\"vertex\"", ")", "\n", "output_pc", "=", "PlyData", "(", "[", "output_pc", "]", ")", "\n", "os", ".", "makedirs", "(", "PC_LABEL_ROOT", ",", "exist_ok", "=", "True", ")", "\n", "output_pc", ".", "write", "(", "PC_LABEL_PATH", ".", "format", "(", "args", ".", "scene_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.get_scene_data": [[181, 188], ["numpy.load", "os.path.join"], "function", ["None"], ["", "def", "get_scene_data", "(", "scene_list", ")", ":", "\n", "    ", "scene_data", "=", "{", "}", "\n", "for", "scene_id", "in", "scene_list", ":", "\n", "        ", "scene_data", "[", "scene_id", "]", "=", "{", "}", "\n", "scene_data", "[", "scene_id", "]", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "SCANNET_DATA", ",", "scene_id", ")", "+", "\"_vert.npy\"", ")", "[", ":", ",", ":", "3", "]", "\n", "\n", "", "return", "scene_data", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.compute_projection": [[189, 214], ["torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "range", "PROJECTOR.compute_projection", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "project_multiview_labels.to_tensor", "project_multiview_labels.to_tensor", "project_multiview_labels.to_tensor", "indices[].long", "indices[].long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.compute_projection", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.to_tensor"], ["", "def", "compute_projection", "(", "points", ",", "depth", ",", "camera_to_world", ")", ":", "\n", "    ", "\"\"\"\n        :param points: tensor containing all points of the point cloud (num_points, 3)\n        :param depth: depth map (size: proj_image)\n        :param camera_to_world: camera pose (4, 4)\n        \n        :return indices_3d (array with point indices that correspond to a pixel),\n        :return indices_2d (array with pixel indices that correspond to a point)\n\n        note:\n            the first digit of indices represents the number of relevant points\n            the rest digits are for the projection mapping\n    \"\"\"", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_frames", "=", "depth", ".", "shape", "[", "0", "]", "\n", "indices_3ds", "=", "torch", ".", "zeros", "(", "num_frames", ",", "num_points", "+", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "indices_2ds", "=", "torch", ".", "zeros", "(", "num_frames", ",", "num_points", "+", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_frames", ")", ":", "\n", "        ", "indices", "=", "PROJECTOR", ".", "compute_projection", "(", "to_tensor", "(", "points", ")", ",", "to_tensor", "(", "depth", "[", "i", "]", ")", ",", "to_tensor", "(", "camera_to_world", "[", "i", "]", ")", ")", "\n", "if", "indices", ":", "\n", "            ", "indices_3ds", "[", "i", "]", "=", "indices", "[", "0", "]", ".", "long", "(", ")", "\n", "indices_2ds", "[", "i", "]", "=", "indices", "[", "1", "]", ".", "long", "(", ")", "\n", "\n", "", "", "return", "indices_3ds", ",", "indices_2ds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.project_multiview_labels.create_enet": [[215, 227], ["lib.enet.create_enet_for_3d", "torch.Sequential().cuda", "nn.Sequential().cuda.eval", "nn.Sequential().cuda.parameters", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.enet.create_enet_for_3d"], ["", "def", "create_enet", "(", ")", ":", "\n", "    ", "enet_fixed", ",", "enet_trainable", ",", "enet_classifier", "=", "create_enet_for_3d", "(", "41", ",", "ENET_PATH", ",", "21", ")", "\n", "enet", "=", "nn", ".", "Sequential", "(", "\n", "enet_fixed", ",", "\n", "enet_trainable", ",", "\n", "enet_classifier", "\n", ")", ".", "cuda", "(", ")", "\n", "enet", ".", "eval", "(", ")", "\n", "for", "param", "in", "enet", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "return", "enet", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.get_dataloader": [[33, 67], ["os.path.join", "json.load", "sorted", "len", "print", "lib.dataset.ScannetQADataset", "print", "torch.utils.data.DataLoader", "open", "json.load.keys", "AutoTokenizer.from_pretrained", "len"], "function", ["None"], ["def", "get_dataloader", "(", "args", ",", "scanqa", ",", "all_scene_list", ",", "split", ",", "config", ")", ":", "\n", "    ", "answer_vocab_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "\"answer_vocab.json\"", ")", "\n", "answer_counter", "=", "json", ".", "load", "(", "open", "(", "answer_vocab_path", ")", ")", "\n", "answer_cands", "=", "sorted", "(", "answer_counter", ".", "keys", "(", ")", ")", "\n", "config", ".", "num_answers", "=", "len", "(", "answer_cands", ")", "\n", "\n", "print", "(", "\"using {} answers\"", ".", "format", "(", "config", ".", "num_answers", ")", ")", "\n", "\n", "if", "'bert-'", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "from", "transformers", "import", "AutoTokenizer", "\n", "os", ".", "environ", "[", "\"TOKENIZERS_PARALLELISM\"", "]", "=", "\"true\"", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer_name", ")", "\n", "", "else", ":", "\n", "        ", "tokenizer", "=", "None", "\n", "\n", "", "dataset", "=", "ScannetQADataset", "(", "\n", "scanqa", "=", "scanqa", ",", "\n", "scanqa_all_scene", "=", "all_scene_list", ",", "\n", "use_unanswerable", "=", "(", "not", "args", ".", "no_unanswerable", ")", ",", "\n", "answer_cands", "=", "answer_cands", ",", "\n", "answer_counter", "=", "answer_counter", ",", "\n", "answer_cls_loss", "=", "args", ".", "answer_cls_loss", ",", "\n", "split", "=", "split", ",", "\n", "num_points", "=", "args", ".", "num_points", ",", "\n", "use_height", "=", "(", "not", "args", ".", "no_height", ")", ",", "\n", "use_color", "=", "args", ".", "use_color", ",", "\n", "use_normal", "=", "args", ".", "use_normal", ",", "\n", "use_multiview", "=", "args", ".", "use_multiview", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "print", "(", "\"evaluate on {} samples\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "return", "dataset", ",", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.get_model": [[68, 134], ["models.qa_module.ScanQA", "os.path.join", "print", "model.cuda.cuda", "model.cuda.load_state_dict", "model.cuda.eval", "AutoConfig.from_pretrained", "hasattr", "int", "torch.load", "torch.load", "torch.load", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "get_model", "(", "args", ",", "config", ")", ":", "\n", "# load tokenizer model", "\n", "    ", "if", "\"bert-\"", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "from", "transformers", "import", "AutoConfig", "\n", "bert_model_name", "=", "args", ".", "tokenizer_name", "\n", "bert_config", "=", "AutoConfig", ".", "from_pretrained", "(", "bert_model_name", ")", "\n", "if", "hasattr", "(", "bert_config", ",", "\"hidden_size\"", ")", ":", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "hidden_size", "\n", "", "else", ":", "\n", "# for distllbert", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "dim", "\n", "", "", "else", ":", "\n", "        ", "bert_model_name", "=", "None", "\n", "lang_emb_size", "=", "300", "# glove emb_size    ", "\n", "\n", "# load model", "\n", "", "input_channels", "=", "int", "(", "args", ".", "use_multiview", ")", "*", "128", "+", "int", "(", "args", ".", "use_normal", ")", "*", "3", "+", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "int", "(", "not", "args", ".", "no_height", ")", "\n", "model", "=", "ScanQA", "(", "\n", "num_answers", "=", "config", ".", "num_answers", ",", "\n", "# proposal", "\n", "input_feature_dim", "=", "input_channels", ",", "\n", "num_object_class", "=", "config", ".", "num_class", ",", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", ",", "\n", "num_proposal", "=", "args", ".", "num_proposals", ",", "\n", "seed_feat_dim", "=", "args", ".", "seed_feat_dim", ",", "\n", "proposal_size", "=", "args", ".", "proposal_size", ",", "\n", "pointnet_width", "=", "args", ".", "pointnet_width", ",", "\n", "pointnet_depth", "=", "args", ".", "pointnet_depth", ",", "\n", "vote_radius", "=", "args", ".", "vote_radius", ",", "\n", "vote_nsample", "=", "args", ".", "vote_nsample", ",", "\n", "# qa", "\n", "answer_pdrop", "=", "args", ".", "answer_pdrop", ",", "\n", "mcan_num_layers", "=", "args", ".", "mcan_num_layers", ",", "\n", "mcan_num_heads", "=", "args", ".", "mcan_num_heads", ",", "\n", "mcan_pdrop", "=", "args", ".", "mcan_pdrop", ",", "\n", "mcan_flat_mlp_size", "=", "args", ".", "mcan_flat_mlp_size", ",", "\n", "mcan_flat_glimpses", "=", "args", ".", "mcan_flat_glimpses", ",", "\n", "mcan_flat_out_size", "=", "args", ".", "mcan_flat_out_size", ",", "\n", "# lang", "\n", "lang_use_bidir", "=", "args", ".", "lang_use_bidir", ",", "\n", "lang_num_layers", "=", "args", ".", "lang_num_layers", ",", "\n", "lang_emb_size", "=", "lang_emb_size", ",", "\n", "lang_pdrop", "=", "args", ".", "lang_pdrop", ",", "\n", "bert_model_name", "=", "bert_model_name", ",", "\n", "freeze_bert", "=", "args", ".", "freeze_bert", ",", "\n", "finetune_bert_last_layer", "=", "args", ".", "finetune_bert_last_layer", ",", "\n", "# common", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "# option", "\n", "use_object_mask", "=", "(", "not", "args", ".", "no_object_mask", ")", ",", "\n", "use_lang_cls", "=", "(", "not", "args", ".", "no_lang_cls", ")", ",", "\n", "use_reference", "=", "(", "not", "args", ".", "no_reference", ")", ",", "\n", "use_answer", "=", "(", "not", "args", ".", "no_answer", ")", ",", "\n", ")", "\n", "\n", "model_name", "=", "\"model_last.pth\"", "if", "args", ".", "detection", "else", "\"model.pth\"", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "model_name", ")", "\n", "print", "(", "'loading model from:'", ",", "model_path", ")", "\n", "# to CUDA", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.get_scannet_scene_list": [[136, 139], ["sorted", "line.rstrip", "open", "os.path.join"], "function", ["None"], ["", "def", "get_scannet_scene_list", "(", "split", ")", ":", "\n", "    ", "scene_list", "=", "sorted", "(", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_META", ",", "\"scannetv2_{}.txt\"", ".", "format", "(", "split", ")", ")", ")", "]", ")", "\n", "return", "scene_list", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.get_scanqa": [[141, 159], ["eval.get_scannet_scene_list", "json.load", "sorted", "copy.deepcopy", "scanqa.append", "open", "list", "os.path.join", "set"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scannet_scene_list"], ["", "def", "get_scanqa", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "detection", ":", "\n", "        ", "scene_list", "=", "get_scannet_scene_list", "(", "\"val\"", ")", "\n", "scanqa", "=", "[", "]", "\n", "for", "scene_id", "in", "scene_list", ":", "\n", "            ", "data", "=", "deepcopy", "(", "SCANQA_TRAIN", "[", "0", "]", ")", "\n", "data", "[", "\"scene_id\"", "]", "=", "scene_id", "\n", "scanqa", ".", "append", "(", "data", ")", "\n", "", "", "else", ":", "\n", "        ", "SCANQA_VAL", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANQA", ",", "project_name", "+", "\"_val.json\"", ")", ")", ")", "\n", "scanqa", "=", "SCANQA_TRAIN", "if", "args", ".", "use_train", "else", "SCANQA_VAL", "\n", "scene_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "data", "[", "\"scene_id\"", "]", "for", "data", "in", "scanqa", "]", ")", ")", ")", "\n", "if", "args", ".", "num_scenes", "!=", "-", "1", ":", "\n", "            ", "scene_list", "=", "scene_list", "[", ":", "args", ".", "num_scenes", "]", "\n", "\n", "", "scanqa", "=", "[", "data", "for", "data", "in", "scanqa", "if", "data", "[", "\"scene_id\"", "]", "in", "scene_list", "]", "\n", "\n", "", "return", "scanqa", ",", "scene_list", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.eval_qa": [[161, 336], ["print", "lib.dataset.ScannetQADatasetConfig", "print", "eval.get_scanqa", "eval.get_dataloader", "eval.get_model", "print", "os.path.join", "os.path.join", "print", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "len", "print", "os.path.exists", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "print", "tqdm.tqdm", "predictions.items", "json.dump", "ref_acc_all.append", "lang_acc_all.append", "ious_all.append", "answer_acc_at1_all.append", "answer_acc_at10_all.append", "open", "pickle.dump", "open", "pickle.load", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "range", "np.array.append", "np.array.append", "data[].detach().cpu().numpy", "data[].tolist", "range", "open", "pickle.dump", "scene.items", "open", "numpy.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "get_model.", "lib.loss_helper.get_loss", "lib.eval_helper.get_eval", "np.array.append", "data[].item", "data[].item", "instance.update", "conved.append", "type", "data[].cuda", "data[].item", "data[].detach().cpu", "dataset.answer_vocab.itos", "v.cuda", "isinstance", "v.tolist", "instance.items", "data[].items", "data[].detach"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scanqa", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_model", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.get_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.get_eval", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.dataset.Answer.itos"], ["", "def", "eval_qa", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"evaluate localization...\"", ")", "\n", "# constant", "\n", "DC", "=", "ScannetQADatasetConfig", "(", ")", "\n", "\n", "# init training dataset", "\n", "print", "(", "\"preparing data...\"", ")", "\n", "scanqa", ",", "scene_list", "=", "get_scanqa", "(", "args", ")", "\n", "\n", "# dataloader", "\n", "_", ",", "dataloader", "=", "get_dataloader", "(", "args", ",", "scanqa", ",", "scene_list", ",", "\"val\"", ",", "DC", ")", "\n", "\n", "# model", "\n", "model", "=", "get_model", "(", "args", ",", "DC", ")", "\n", "\n", "# config", "\n", "POST_DICT", "=", "{", "\n", "\"remove_empty_box\"", ":", "True", ",", "\n", "\"use_3d_nms\"", ":", "True", ",", "\n", "\"nms_iou\"", ":", "0.25", ",", "\n", "\"use_old_type_nms\"", ":", "False", ",", "\n", "\"cls_nms\"", ":", "True", ",", "\n", "\"per_class_proposal\"", ":", "True", ",", "\n", "\"conf_thresh\"", ":", "0.05", ",", "\n", "\"dataset_config\"", ":", "DC", "\n", "}", "if", "not", "args", ".", "no_nms", "else", "None", "\n", "\n", "if", "args", ".", "no_detection", ":", "\n", "        ", "POST_DICT", "=", "None", "\n", "\n", "", "dataset", "=", "dataloader", ".", "dataset", "\n", "scanqa", "=", "dataset", ".", "scanqa", "\n", "# random seeds", "\n", "seeds", "=", "[", "args", ".", "seed", "]", "+", "[", "2", "*", "i", "for", "i", "in", "range", "(", "args", ".", "repeat", "-", "1", ")", "]", "\n", "\n", "# evaluate", "\n", "print", "(", "\"evaluating...\"", ")", "\n", "score_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "\"score.val.pkl\"", ")", "\n", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "folder", ",", "\"pred.val.pkl\"", ")", "\n", "gen_flag", "=", "(", "not", "os", ".", "path", ".", "exists", "(", "score_path", ")", ")", "or", "args", ".", "force", "or", "args", ".", "repeat", ">", "1", "\n", "if", "gen_flag", ":", "\n", "        ", "ref_acc_all", "=", "[", "]", "\n", "lang_acc_all", "=", "[", "]", "\n", "ious_all", "=", "[", "]", "\n", "answer_acc_at1_all", "=", "[", "]", "\n", "answer_acc_at10_all", "=", "[", "]", "\n", "\n", "for", "trial", ",", "seed", "in", "enumerate", "(", "seeds", ")", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "print", "(", "\"generating the scores for seed {}...\"", ".", "format", "(", "seed", ")", ")", "\n", "ref_acc", "=", "[", "]", "\n", "lang_acc", "=", "[", "]", "\n", "ious", "=", "[", "]", "\n", "answer_acc_at1", "=", "[", "]", "\n", "answer_acc_at10", "=", "[", "]", "\n", "predictions", "=", "{", "}", "\n", "\n", "for", "data", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "# move to cuda", "\n", "                ", "for", "key", "in", "data", ":", "\n", "                    ", "if", "type", "(", "data", "[", "key", "]", ")", "is", "dict", ":", "\n", "                        ", "data", "[", "key", "]", "=", "{", "k", ":", "v", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "data", "[", "key", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                        ", "data", "[", "key", "]", "=", "data", "[", "key", "]", ".", "cuda", "(", ")", "\n", "# feed", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "data", "=", "model", "(", "data", ")", "\n", "_", ",", "data", "=", "get_loss", "(", "\n", "data_dict", "=", "data", ",", "\n", "config", "=", "DC", ",", "\n", "detection", "=", "True", ",", "\n", "use_reference", "=", "(", "not", "args", ".", "no_reference", ")", ",", "\n", "use_lang_classifier", "=", "(", "not", "args", ".", "no_lang_cls", ")", ",", "\n", "use_answer", "=", "(", "not", "args", ".", "no_answer", ")", ",", "\n", ")", "\n", "data", "=", "get_eval", "(", "\n", "data_dict", "=", "data", ",", "\n", "config", "=", "DC", ",", "\n", "answer_vocab", "=", "None", "if", "(", "not", "args", ".", "no_unanswerable", ")", "else", "dataset", ".", "answer_vocab", ",", "\n", "use_reference", "=", "True", ",", "\n", "use_lang_classifier", "=", "not", "args", ".", "no_lang_cls", ",", "\n", "post_processing", "=", "POST_DICT", "\n", ")", "\n", "", "if", "\"ref_acc\"", "in", "data", ":", "\n", "                    ", "ref_acc", "+=", "data", "[", "\"ref_acc\"", "]", "\n", "", "ious", "+=", "data", "[", "\"ref_iou\"", "]", "\n", "if", "\"lang_acc\"", "in", "data", ":", "\n", "                    ", "lang_acc", ".", "append", "(", "data", "[", "\"lang_acc\"", "]", ".", "item", "(", ")", ")", "\n", "", "answer_acc_at1", ".", "append", "(", "data", "[", "\"answer_acc_at1\"", "]", ".", "item", "(", ")", ")", "\n", "answer_acc_at10", ".", "append", "(", "data", "[", "\"answer_acc_at10\"", "]", ".", "item", "(", ")", ")", "\n", "\n", "# store predictions", "\n", "ids", "=", "data", "[", "\"scan_idx\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_answer_idxs", "=", "data", "[", "\"pred_answers_at10\"", "]", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "ids", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "idx", "=", "ids", "[", "i", "]", "\n", "scene_id", "=", "scanqa", "[", "idx", "]", "[", "\"scene_id\"", "]", "\n", "question_id", "=", "scanqa", "[", "idx", "]", "[", "\"question_id\"", "]", "\n", "\n", "if", "scene_id", "not", "in", "predictions", ":", "\n", "                        ", "predictions", "[", "scene_id", "]", "=", "{", "}", "\n", "\n", "", "if", "question_id", "not", "in", "predictions", "[", "scene_id", "]", ":", "\n", "                        ", "predictions", "[", "scene_id", "]", "[", "question_id", "]", "=", "{", "}", "\n", "\n", "", "predictions", "[", "scene_id", "]", "[", "question_id", "]", "[", "\"pred_bbox\"", "]", "=", "data", "[", "\"pred_bboxes\"", "]", "[", "i", "]", "\n", "predictions", "[", "scene_id", "]", "[", "question_id", "]", "[", "\"gt_bbox\"", "]", "=", "data", "[", "\"gt_bboxes\"", "]", "[", "i", "]", "\n", "predictions", "[", "scene_id", "]", "[", "question_id", "]", "[", "\"iou\"", "]", "=", "data", "[", "\"ref_iou\"", "]", "[", "i", "]", "\n", "\n", "pred_answers_at10", "=", "[", "dataset", ".", "answer_vocab", ".", "itos", "(", "pred_answer_idx", ")", "for", "pred_answer_idx", "in", "pred_answer_idxs", "[", "i", "]", "]", "\n", "predictions", "[", "scene_id", "]", "[", "question_id", "]", "[", "\"pred_answers_at10\"", "]", "=", "pred_answers_at10", "\n", "\n", "# save the last predictions", "\n", "", "", "with", "open", "(", "pred_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "predictions", ",", "f", ")", "\n", "\n", "# convert pkl to json", "\n", "", "conved", "=", "[", "]", "\n", "for", "scene_name", ",", "scene", "in", "predictions", ".", "items", "(", ")", ":", "\n", "                ", "for", "qid", ",", "instance", "in", "scene", ".", "items", "(", ")", ":", "\n", "                    ", "instance", "=", "{", "k", ":", "v", ".", "tolist", "(", ")", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "else", "v", "for", "k", ",", "v", "in", "instance", ".", "items", "(", ")", "}", "\n", "instance", ".", "update", "(", "{", "'scene_id'", ":", "scene_name", ",", "'question_id'", ":", "qid", "}", ")", "\n", "instance", "[", "'answer_top10'", "]", "=", "instance", "[", "'pred_answers_at10'", "]", "\n", "del", "instance", "[", "'pred_answers_at10'", "]", "\n", "instance", "[", "'bbox'", "]", "=", "instance", "[", "'pred_bbox'", "]", "\n", "del", "instance", "[", "'pred_bbox'", "]", "\n", "conved", ".", "append", "(", "instance", ")", "\n", "", "", "json", ".", "dump", "(", "conved", ",", "open", "(", "pred_path", "[", ":", "-", "4", "]", "+", "'.json'", ",", "'w'", ")", ")", "\n", "\n", "# save to global", "\n", "ref_acc_all", ".", "append", "(", "ref_acc", ")", "\n", "lang_acc_all", ".", "append", "(", "lang_acc", ")", "\n", "ious_all", ".", "append", "(", "ious", ")", "\n", "answer_acc_at1_all", ".", "append", "(", "answer_acc_at1", ")", "\n", "answer_acc_at10_all", ".", "append", "(", "answer_acc_at10", ")", "\n", "\n", "# convert to numpy array", "\n", "", "ref_acc", "=", "np", ".", "array", "(", "ref_acc_all", ")", "\n", "lang_acc", "=", "np", ".", "array", "(", "lang_acc_all", ")", "\n", "answer_acc_at1", "=", "np", ".", "array", "(", "answer_acc_at1_all", ")", "\n", "answer_acc_at10", "=", "np", ".", "array", "(", "answer_acc_at10_all", ")", "\n", "ious", "=", "np", ".", "array", "(", "ious_all", ")", "\n", "\n", "# save the global scores", "\n", "with", "open", "(", "score_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "scores", "=", "{", "\n", "\"ref_acc\"", ":", "ref_acc_all", ",", "\n", "\"lang_acc\"", ":", "lang_acc_all", ",", "\n", "\"answer_acc_at1\"", ":", "answer_acc_at1_all", ",", "\n", "\"answer_acc_at10\"", ":", "answer_acc_at10_all", ",", "\n", "\"ious\"", ":", "ious_all", ",", "\n", "}", "\n", "pickle", ".", "dump", "(", "scores", ",", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"loading the scores...\"", ")", "\n", "with", "open", "(", "score_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "scores", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# unpack", "\n", "ref_acc", "=", "np", ".", "array", "(", "scores", "[", "\"ref_acc\"", "]", ")", "\n", "lang_acc", "=", "np", ".", "array", "(", "scores", "[", "\"lang_acc\"", "]", ")", "\n", "ious", "=", "np", ".", "array", "(", "scores", "[", "\"ious\"", "]", ")", "\n", "answer_acc_at1", "=", "np", ".", "array", "(", "scores", "[", "\"answer_acc_at1\"", "]", ")", "\n", "answer_acc_at10", "=", "np", ".", "array", "(", "scores", "[", "\"answer_acc_at10\"", "]", ")", "\n", "\n", "", "", "if", "len", "(", "lang_acc", ")", "!=", "0", ":", "\n", "        ", "print", "(", "\"\\nlanguage classification accuracy: {}\"", ".", "format", "(", "np", ".", "mean", "(", "lang_acc", ")", ")", ")", "\n", "# ACCURACY for only answerable questions, not all questions", "\n", "", "print", "(", "\"\\n[answerbele] answer accuracy @1: {}, @10: {}\"", ".", "format", "(", "np", ".", "mean", "(", "answer_acc_at1", ")", ",", "np", ".", "mean", "(", "answer_acc_at10", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.eval.eval_det": [[338, 404], ["print", "lib.dataset.ScannetQADatasetConfig", "print", "eval.get_scanqa", "eval.get_dataloader", "eval.get_model", "tqdm.tqdm", "print", "enumerate", "lib.ap_helper.APCalculator", "sem_acc.append", "lib.ap_helper.parse_predictions", "lib.ap_helper.parse_groundtruths", "print", "print", "ap_calculator.compute_metrics", "data[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "get_model.", "lib.loss_helper.get_loss", "lib.eval_helper.get_eval", "data[].item", "ap_calculator.step", "numpy.mean", "print"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scanqa", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_model", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.loss_helper.get_loss", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.eval_helper.get_eval", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.step"], ["", "def", "eval_det", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"evaluate detection...\"", ")", "\n", "# constant", "\n", "DC", "=", "ScannetQADatasetConfig", "(", ")", "\n", "\n", "# init training dataset", "\n", "print", "(", "\"preparing data...\"", ")", "\n", "scanqa", ",", "scene_list", "=", "get_scanqa", "(", "args", ")", "\n", "\n", "# dataloader", "\n", "dataset", ",", "dataloader", "=", "get_dataloader", "(", "args", ",", "scanqa", ",", "scene_list", ",", "\"val\"", ",", "DC", ")", "\n", "scanqa", "=", "dataset", ".", "scanqa", "\n", "\n", "# model", "\n", "model", "=", "get_model", "(", "args", ",", "DC", ")", "\n", "\n", "# config", "\n", "POST_DICT", "=", "{", "\n", "\"remove_empty_box\"", ":", "True", ",", "\n", "\"use_3d_nms\"", ":", "True", ",", "\n", "\"nms_iou\"", ":", "0.25", ",", "\n", "\"use_old_type_nms\"", ":", "False", ",", "\n", "\"cls_nms\"", ":", "True", ",", "\n", "\"per_class_proposal\"", ":", "True", ",", "\n", "\"conf_thresh\"", ":", "0.05", ",", "\n", "\"dataset_config\"", ":", "DC", "\n", "}", "\n", "AP_IOU_THRESHOLDS", "=", "[", "0.25", ",", "0.5", "]", "\n", "AP_CALCULATOR_LIST", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DC", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "\n", "sem_acc", "=", "[", "]", "\n", "for", "data", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "        ", "for", "key", "in", "data", ":", "\n", "            ", "data", "[", "key", "]", "=", "data", "[", "key", "]", ".", "cuda", "(", ")", "\n", "\n", "# feed", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", "=", "model", "(", "data", ")", "\n", "_", ",", "data", "=", "get_loss", "(", "\n", "data_dict", "=", "data", ",", "\n", "config", "=", "DC", ",", "\n", "detection", "=", "True", ",", "\n", "reference", "=", "False", "\n", ")", "\n", "data", "=", "get_eval", "(", "\n", "data_dict", "=", "data", ",", "\n", "config", "=", "DC", ",", "\n", "reference", "=", "False", ",", "\n", "post_processing", "=", "POST_DICT", "\n", ")", "\n", "\n", "", "sem_acc", ".", "append", "(", "data", "[", "\"sem_acc\"", "]", ".", "item", "(", ")", ")", "\n", "\n", "batch_pred_map_cls", "=", "parse_predictions", "(", "data", ",", "POST_DICT", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "data", ",", "POST_DICT", ")", "\n", "for", "ap_calculator", "in", "AP_CALCULATOR_LIST", ":", "\n", "            ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "\n", "# aggregate object detection results and report", "\n", "", "", "print", "(", "\"\\nobject detection sem_acc: {}\"", ".", "format", "(", "np", ".", "mean", "(", "sem_acc", ")", ")", ")", "\n", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "AP_CALCULATOR_LIST", ")", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"-\"", "*", "10", ",", "\"iou_thresh: %f\"", "%", "(", "AP_IOU_THRESHOLDS", "[", "i", "]", ")", ",", "\"-\"", "*", "10", ")", "\n", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "            ", "print", "(", "\"eval %s: %f\"", "%", "(", "key", ",", "metrics_dict", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.parse_option": [[27, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"debugging mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tag\"", ",", "type", "=", "str", ",", "help", "=", "\"tag for the training, e.g. XYZ_COLOR\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "str", ",", "help", "=", "\"gpu\"", ",", "default", "=", "\"0\"", ")", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "\"--cur_criterion\"", ",", "type", "=", "str", ",", "default", "=", "\"answer_acc_at1\"", ",", "help", "=", "\"data augmentation type\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "help", "=", "\"batch size\"", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "help", "=", "\"number of epochs\"", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "type", "=", "int", ",", "help", "=", "\"iterations of showing verbose\"", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_step\"", ",", "type", "=", "int", ",", "help", "=", "\"iterations of validating\"", ",", "default", "=", "1000", ")", "# 5000", "\n", "parser", ".", "add_argument", "(", "\"--train_num_scenes\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Number of train scenes [default: -1]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_num_scenes\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Number of val scenes [default: -1]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"random seed\"", ")", "\n", "# Optimizer   ", "\n", "parser", ".", "add_argument", "(", "\"--optim_name\"", ",", "type", "=", "str", ",", "help", "=", "\"optimizer name\"", ",", "default", "=", "\"adam\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "help", "=", "\"weight decay\"", ",", "default", "=", "1e-5", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "help", "=", "\"initial learning rate\"", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_beta1\"", ",", "type", "=", "float", ",", "help", "=", "\"beta1 hyperparameter for the Adam optimizer\"", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_beta2\"", ",", "type", "=", "float", ",", "help", "=", "\"beta2 hyperparameter for the Adam optimizer\"", ",", "default", "=", "0.999", ")", "# 0.98", "\n", "parser", ".", "add_argument", "(", "\"--adam_epsilon\"", ",", "type", "=", "float", ",", "help", "=", "\"epsilon hyperparameter for the Adam optimizer\"", ",", "default", "=", "1e-8", ")", "# 1e-9", "\n", "parser", ".", "add_argument", "(", "\"--amsgrad\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use amsgrad for Adam\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_step'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "100", ",", "200", "]", ")", "# 15", "\n", "parser", ".", "add_argument", "(", "\"--lr_decay_rate\"", ",", "type", "=", "float", ",", "help", "=", "\"decay rate of learning rate\"", ",", "default", "=", "0.2", ")", "# 01, 0.2", "\n", "parser", ".", "add_argument", "(", "'--bn_decay_step'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_decay_rate\"", ",", "type", "=", "float", ",", "help", "=", "\"bn rate\"", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "type", "=", "float", ",", "help", "=", "\"Maximum gradient norm \"", ",", "default", "=", "1.0", ")", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "\"--num_points\"", ",", "type", "=", "int", ",", "default", "=", "40000", ",", "help", "=", "\"Point Number [default: 40000]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_height\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT use height signal in input.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_augment\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT use data augmentations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_color\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use RGB color in input.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_normal\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use RGB color in input.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_multiview\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use multiview images.\"", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "\"--hidden_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Hidden layer size[default: 256]\"", ")", "\n", "## pointnet & votenet & proposal", "\n", "parser", ".", "add_argument", "(", "\"--vote_radius\"", ",", "type", "=", "float", ",", "help", "=", "\"\"", ",", "default", "=", "0.3", ")", "# 5", "\n", "parser", ".", "add_argument", "(", "\"--vote_nsample\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "16", ")", "# 512", "\n", "parser", ".", "add_argument", "(", "\"--pointnet_width\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--pointnet_depth\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed_feat_dim\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "256", ")", "# or 288", "\n", "parser", ".", "add_argument", "(", "\"--proposal_size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_proposals\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"Proposal number [default: 256]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_seed_lang\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Fuse seed feature and language feature.\"", ")", "\n", "## module option", "\n", "parser", ".", "add_argument", "(", "\"--no_object_mask\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"objectness_mask for qa\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_lang_cls\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT use language classifier.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_answer\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT train the localization module.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_detection\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT train the detection module.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_reference\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Do NOT train the localization module.\"", ")", "\n", "# Pretrain", "\n", "parser", ".", "add_argument", "(", "\"--use_checkpoint\"", ",", "type", "=", "str", ",", "help", "=", "\"Specify the checkpoint root\"", ",", "default", "=", "\"\"", ")", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "\"--vote_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"vote_net loss weight\"", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--objectness_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"objectness loss weight\"", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--box_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"box loss weight\"", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--sem_cls_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"sem_cls loss weight\"", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--ref_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"reference loss weight\"", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--lang_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"language loss weight\"", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--answer_loss_weight\"", ",", "type", "=", "float", ",", "help", "=", "\"answer loss weight\"", ",", "default", "=", "0.1", ")", "\n", "# Answer", "\n", "parser", ".", "add_argument", "(", "\"--answer_cls_loss\"", ",", "type", "=", "str", ",", "help", "=", "\"answer classifier loss\"", ",", "default", "=", "\"bce\"", ")", "# ce, bce", "\n", "parser", ".", "add_argument", "(", "\"--answer_max_size\"", ",", "type", "=", "int", ",", "help", "=", "\"maximum size of answer candicates\"", ",", "default", "=", "-", "1", ")", "# default use all", "\n", "parser", ".", "add_argument", "(", "\"--answer_min_freq\"", ",", "type", "=", "int", ",", "help", "=", "\"minimum frequence of answers\"", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--answer_pdrop\"", ",", "type", "=", "float", ",", "help", "=", "\"dropout_rate of answer_cls\"", ",", "default", "=", "0.3", ")", "\n", "# Question", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer_name\"", ",", "type", "=", "str", ",", "help", "=", "\"Pretrained tokenizer name\"", ",", "default", "=", "\"spacy_blank\"", ")", "# or bert-base-uncased, bert-large-uncased-whole-word-masking, distilbert-base-uncased", "\n", "parser", ".", "add_argument", "(", "\"--lang_num_layers\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of GRU layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lang_use_bidir\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use bi-directional GRU.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--freeze_bert\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Freeze BERT ebmedding model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--finetune_bert_last_layer\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Finetue BERT last layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lang_pdrop\"", ",", "type", "=", "float", ",", "help", "=", "\"dropout_rate of lang_cls\"", ",", "default", "=", "0.3", ")", "\n", "## MCAN", "\n", "parser", ".", "add_argument", "(", "\"--mcan_pdrop\"", ",", "type", "=", "float", ",", "help", "=", "\"\"", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--mcan_flat_mlp_size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "256", ")", "# mcan: 512", "\n", "parser", ".", "add_argument", "(", "\"--mcan_flat_glimpses\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--mcan_flat_out_size\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "512", ")", "# mcan: 1024", "\n", "parser", ".", "add_argument", "(", "\"--mcan_num_heads\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--mcan_num_layers\"", ",", "type", "=", "int", ",", "help", "=", "\"\"", ",", "default", "=", "2", ")", "# mcan: 6", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_answer_cands": [[112, 123], ["sum", "collections.Counter", "len", "dict", "print", "sorted", "sorted", "len", "dict.keys", "len", "dict.most_common"], "function", ["None"], ["", "def", "get_answer_cands", "(", "args", ",", "scanqa", ")", ":", "\n", "    ", "answer_counter", "=", "sum", "(", "[", "data", "[", "\"answers\"", "]", "for", "data", "in", "scanqa", "[", "\"train\"", "]", "]", ",", "[", "]", ")", "\n", "answer_counter", "=", "collections", ".", "Counter", "(", "sorted", "(", "answer_counter", ")", ")", "\n", "num_all_answers", "=", "len", "(", "answer_counter", ")", "\n", "answer_max_size", "=", "args", ".", "answer_max_size", "\n", "if", "answer_max_size", "<", "0", ":", "\n", "        ", "answer_max_size", "=", "len", "(", "answer_counter", ")", "\n", "", "answer_counter", "=", "dict", "(", "[", "x", "for", "x", "in", "answer_counter", ".", "most_common", "(", ")", "[", ":", "answer_max_size", "]", "if", "x", "[", "1", "]", ">=", "args", ".", "answer_min_freq", "]", ")", "\n", "print", "(", "\"using {} answers out of {} ones\"", ".", "format", "(", "len", "(", "answer_counter", ")", ",", "num_all_answers", ")", ")", "\n", "answer_cands", "=", "sorted", "(", "answer_counter", ".", "keys", "(", ")", ")", "\n", "return", "answer_cands", ",", "answer_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader": [[125, 154], ["train.get_answer_cands", "len", "lib.dataset.ScannetQADataset", "torch.utils.data.DataLoader", "AutoTokenizer.from_pretrained"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_answer_cands"], ["", "def", "get_dataloader", "(", "args", ",", "scanqa", ",", "all_scene_list", ",", "split", ",", "config", ",", "augment", ")", ":", "\n", "    ", "answer_cands", ",", "answer_counter", "=", "get_answer_cands", "(", "args", ",", "scanqa", ")", "\n", "config", ".", "num_answers", "=", "len", "(", "answer_cands", ")", "\n", "\n", "if", "'bert-'", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "from", "transformers", "import", "AutoTokenizer", "\n", "os", ".", "environ", "[", "\"TOKENIZERS_PARALLELISM\"", "]", "=", "\"true\"", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", ".", "tokenizer_name", ")", "\n", "", "else", ":", "\n", "        ", "tokenizer", "=", "None", "\n", "\n", "", "dataset", "=", "ScannetQADataset", "(", "\n", "scanqa", "=", "scanqa", "[", "split", "]", ",", "\n", "scanqa_all_scene", "=", "all_scene_list", ",", "\n", "answer_cands", "=", "answer_cands", ",", "\n", "answer_counter", "=", "answer_counter", ",", "\n", "answer_cls_loss", "=", "args", ".", "answer_cls_loss", ",", "\n", "split", "=", "split", ",", "\n", "num_points", "=", "args", ".", "num_points", ",", "\n", "use_height", "=", "(", "not", "args", ".", "no_height", ")", ",", "\n", "use_color", "=", "args", ".", "use_color", ",", "\n", "use_normal", "=", "args", ".", "use_normal", ",", "\n", "use_multiview", "=", "args", ".", "use_multiview", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "augment", "=", "augment", ",", "\n", "debug", "=", "args", ".", "debug", ",", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "return", "dataset", ",", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_model": [[156, 217], ["models.qa_module.ScanQA", "model.cuda.cuda", "AutoConfig.from_pretrained", "hasattr", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_model", "(", "args", ",", "config", ")", ":", "\n", "    ", "if", "\"bert-\"", "in", "args", ".", "tokenizer_name", ":", "\n", "        ", "from", "transformers", "import", "AutoConfig", "\n", "bert_model_name", "=", "args", ".", "tokenizer_name", "\n", "bert_config", "=", "AutoConfig", ".", "from_pretrained", "(", "bert_model_name", ")", "\n", "if", "hasattr", "(", "bert_config", ",", "\"hidden_size\"", ")", ":", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "hidden_size", "\n", "", "else", ":", "\n", "# for distllbert", "\n", "            ", "lang_emb_size", "=", "bert_config", ".", "dim", "\n", "", "", "else", ":", "\n", "        ", "bert_model_name", "=", "None", "\n", "lang_emb_size", "=", "300", "# glove emb_size", "\n", "\n", "# initiate model", "\n", "", "input_channels", "=", "int", "(", "args", ".", "use_multiview", ")", "*", "128", "+", "int", "(", "args", ".", "use_normal", ")", "*", "3", "+", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "int", "(", "not", "args", ".", "no_height", ")", "\n", "\n", "model", "=", "ScanQA", "(", "\n", "num_answers", "=", "config", ".", "num_answers", ",", "\n", "# proposal", "\n", "input_feature_dim", "=", "input_channels", ",", "\n", "num_object_class", "=", "config", ".", "num_class", ",", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", ",", "\n", "num_proposal", "=", "args", ".", "num_proposals", ",", "\n", "seed_feat_dim", "=", "args", ".", "seed_feat_dim", ",", "\n", "proposal_size", "=", "args", ".", "proposal_size", ",", "\n", "pointnet_width", "=", "args", ".", "pointnet_width", ",", "\n", "pointnet_depth", "=", "args", ".", "pointnet_depth", ",", "\n", "vote_radius", "=", "args", ".", "vote_radius", ",", "\n", "vote_nsample", "=", "args", ".", "vote_nsample", ",", "\n", "# qa", "\n", "#answer_cls_loss=\"ce\",", "\n", "answer_pdrop", "=", "args", ".", "answer_pdrop", ",", "\n", "mcan_num_layers", "=", "args", ".", "mcan_num_layers", ",", "\n", "mcan_num_heads", "=", "args", ".", "mcan_num_heads", ",", "\n", "mcan_pdrop", "=", "args", ".", "mcan_pdrop", ",", "\n", "mcan_flat_mlp_size", "=", "args", ".", "mcan_flat_mlp_size", ",", "\n", "mcan_flat_glimpses", "=", "args", ".", "mcan_flat_glimpses", ",", "\n", "mcan_flat_out_size", "=", "args", ".", "mcan_flat_out_size", ",", "\n", "# lang", "\n", "lang_use_bidir", "=", "args", ".", "lang_use_bidir", ",", "\n", "lang_num_layers", "=", "args", ".", "lang_num_layers", ",", "\n", "lang_emb_size", "=", "lang_emb_size", ",", "\n", "lang_pdrop", "=", "args", ".", "lang_pdrop", ",", "\n", "bert_model_name", "=", "bert_model_name", ",", "\n", "freeze_bert", "=", "args", ".", "freeze_bert", ",", "\n", "finetune_bert_last_layer", "=", "args", ".", "finetune_bert_last_layer", ",", "\n", "# common", "\n", "hidden_size", "=", "args", ".", "hidden_size", ",", "\n", "# option", "\n", "use_object_mask", "=", "(", "not", "args", ".", "no_object_mask", ")", ",", "\n", "use_lang_cls", "=", "(", "not", "args", ".", "no_lang_cls", ")", ",", "\n", "use_reference", "=", "(", "not", "args", ".", "no_reference", ")", ",", "\n", "use_answer", "=", "(", "not", "args", ".", "no_answer", ")", ",", "\n", ")", "\n", "\n", "# to CUDA", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_num_params": [[219, 224], ["filter", "int", "model.parameters", "sum", "numpy.prod", "p.size"], "function", ["None"], ["", "def", "get_num_params", "(", "model", ")", ":", "\n", "    ", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "num_params", "=", "int", "(", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", ")", "\n", "\n", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_solver": [[225, 301], ["train.get_model", "print", "print", "print", "lib.solver.Solver", "train.get_num_params", "torch.Adam", "print", "os.path.join", "torch.load", "torch.load", "get_model.load_state_dict", "AdamW.load_state_dict", "datetime.datetime.now().strftime", "os.path.join", "os.makedirs", "torch.AdamW", "os.path.join", "get_model.parameters", "get_model.parameters", "AdamW", "datetime.datetime.now", "args.tag.upper", "get_model.parameters"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_model", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_num_params", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "get_solver", "(", "args", ",", "dataloader", ")", ":", "\n", "    ", "model", "=", "get_model", "(", "args", ",", "DC", ")", "\n", "#wandb.watch(model, log_freq=100)", "\n", "\n", "if", "args", ".", "optim_name", "==", "'adam'", ":", "\n", "        ", "model_params", "=", "[", "{", "\"params\"", ":", "model", ".", "parameters", "(", ")", "}", "]", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "model_params", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "[", "args", ".", "adam_beta1", ",", "args", ".", "adam_beta2", "]", ",", "\n", "eps", "=", "args", ".", "adam_epsilon", ",", "\n", "weight_decay", "=", "args", ".", "wd", ",", "\n", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "[", "args", ".", "adam_beta1", ",", "args", ".", "adam_beta2", "]", ",", "\n", "eps", "=", "args", ".", "adam_epsilon", ",", "\n", "weight_decay", "=", "args", ".", "wd", ",", "\n", "amsgrad", "=", "args", ".", "amsgrad", ")", "\n", "", "elif", "args", ".", "optim_name", "==", "'adamw_cb'", ":", "\n", "        ", "from", "transformers", "import", "AdamW", "\n", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "\n", "betas", "=", "[", "args", ".", "adam_beta1", ",", "args", ".", "adam_beta2", "]", ",", "\n", "eps", "=", "args", ".", "adam_epsilon", ",", "\n", "weight_decay", "=", "args", ".", "wd", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "print", "(", "'set optimizer...'", ")", "\n", "print", "(", "optimizer", ")", "\n", "print", "(", ")", "\n", "\n", "if", "args", ".", "use_checkpoint", ":", "\n", "        ", "print", "(", "\"loading checkpoint {}...\"", ".", "format", "(", "args", ".", "use_checkpoint", ")", ")", "\n", "stamp", "=", "args", ".", "use_checkpoint", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "args", ".", "use_checkpoint", ",", "\"checkpoint.tar\"", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "stamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", "\n", "if", "args", ".", "tag", ":", "stamp", "+=", "\"_\"", "+", "args", ".", "tag", ".", "upper", "(", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "OUTPUT", ",", "stamp", ")", "\n", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "loss_weights", "=", "{", "}", "\n", "loss_weights", "[", "'vote_loss'", "]", "=", "args", ".", "vote_loss_weight", "\n", "loss_weights", "[", "'objectness_loss'", "]", "=", "args", ".", "objectness_loss_weight", "\n", "loss_weights", "[", "'box_loss'", "]", "=", "args", ".", "box_loss_weight", "\n", "loss_weights", "[", "'sem_cls_loss'", "]", "=", "args", ".", "sem_cls_loss_weight", "\n", "loss_weights", "[", "'ref_loss'", "]", "=", "args", ".", "ref_loss_weight", "\n", "loss_weights", "[", "'lang_loss'", "]", "=", "args", ".", "lang_loss_weight", "\n", "loss_weights", "[", "'answer_loss'", "]", "=", "args", ".", "answer_loss_weight", "\n", "\n", "solver", "=", "Solver", "(", "\n", "model", "=", "model", ",", "\n", "config", "=", "DC", ",", "\n", "dataloader", "=", "dataloader", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "stamp", "=", "stamp", ",", "\n", "val_step", "=", "args", ".", "val_step", ",", "\n", "cur_criterion", "=", "args", ".", "cur_criterion", ",", "\n", "detection", "=", "not", "args", ".", "no_detection", ",", "\n", "use_reference", "=", "not", "args", ".", "no_reference", ",", "\n", "use_answer", "=", "not", "args", ".", "no_answer", ",", "\n", "use_lang_classifier", "=", "not", "args", ".", "no_lang_cls", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ",", "\n", "lr_decay_step", "=", "args", ".", "lr_decay_step", ",", "\n", "lr_decay_rate", "=", "args", ".", "lr_decay_rate", ",", "\n", "bn_decay_step", "=", "args", ".", "bn_decay_step", ",", "\n", "bn_decay_rate", "=", "args", ".", "bn_decay_rate", ",", "\n", "loss_weights", "=", "loss_weights", ",", "\n", ")", "\n", "num_params", "=", "get_num_params", "(", "model", ")", "\n", "\n", "return", "solver", ",", "num_params", ",", "root", ",", "stamp", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.save_info": [[302, 319], ["vars().items", "len", "len", "len", "len", "open", "json.dump", "open", "json.dump", "vars", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_info", "(", "args", ",", "root", ",", "num_params", ",", "train_dataset", ",", "val_dataset", ")", ":", "\n", "    ", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "info", "[", "key", "]", "=", "value", "\n", "\n", "", "info", "[", "\"num_train\"", "]", "=", "len", "(", "train_dataset", ")", "\n", "info", "[", "\"num_val\"", "]", "=", "len", "(", "val_dataset", ")", "\n", "info", "[", "\"num_train_scenes\"", "]", "=", "len", "(", "train_dataset", ".", "scene_list", ")", "\n", "info", "[", "\"num_val_scenes\"", "]", "=", "len", "(", "val_dataset", ".", "scene_list", ")", "\n", "info", "[", "\"num_params\"", "]", "=", "num_params", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"info.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "info", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "answer_vocab", "=", "train_dataset", ".", "answer_counter", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"answer_vocab.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "answer_vocab", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scannet_scene_list": [[322, 325], ["sorted", "line.rstrip", "open", "os.path.join"], "function", ["None"], ["", "", "def", "get_scannet_scene_list", "(", "split", ")", ":", "\n", "    ", "scene_list", "=", "sorted", "(", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET_META", ",", "\"scannetv2_{}.txt\"", ".", "format", "(", "split", ")", ")", ")", "]", ")", "\n", "return", "scene_list", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scanqa": [[326, 367], ["sorted", "sorted", "list", "list", "len", "len", "set", "set", "len", "new_scanqa_train.append", "len", "new_scanqa_val.append"], "function", ["None"], ["", "def", "get_scanqa", "(", "scanqa_train", ",", "scanqa_val", ",", "train_num_scenes", ",", "val_num_scenes", ")", ":", "\n", "# get initial scene list", "\n", "    ", "train_scene_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "data", "[", "\"scene_id\"", "]", "for", "data", "in", "scanqa_train", "]", ")", ")", ")", "\n", "val_scene_list", "=", "sorted", "(", "list", "(", "set", "(", "[", "data", "[", "\"scene_id\"", "]", "for", "data", "in", "scanqa_val", "]", ")", ")", ")", "\n", "\n", "# set train_num_scenes", "\n", "if", "train_num_scenes", "<=", "-", "1", ":", "\n", "        ", "train_num_scenes", "=", "len", "(", "train_scene_list", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "train_scene_list", ")", ">=", "train_num_scenes", "\n", "\n", "# slice train_scene_list", "\n", "", "train_scene_list", "=", "train_scene_list", "[", ":", "train_num_scenes", "]", "\n", "\n", "# filter data in chosen scenes", "\n", "new_scanqa_train", "=", "[", "]", "\n", "for", "data", "in", "scanqa_train", ":", "\n", "        ", "if", "data", "[", "\"scene_id\"", "]", "in", "train_scene_list", ":", "\n", "            ", "new_scanqa_train", ".", "append", "(", "data", ")", "\n", "\n", "# set val_num_scenes", "\n", "", "", "if", "val_num_scenes", "<=", "-", "1", ":", "\n", "        ", "val_num_scenes", "=", "len", "(", "val_scene_list", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "val_scene_list", ")", ">=", "val_num_scenes", "\n", "\n", "# slice val_scene_list", "\n", "", "val_scene_list", "=", "val_scene_list", "[", ":", "val_num_scenes", "]", "\n", "\n", "new_scanqa_val", "=", "[", "]", "\n", "for", "data", "in", "scanqa_val", ":", "\n", "        ", "if", "data", "[", "\"scene_id\"", "]", "in", "val_scene_list", ":", "\n", "            ", "new_scanqa_val", ".", "append", "(", "data", ")", "\n", "\n", "#new_scanqa_val = scanqa_val[0:4] # debugging", "\n", "\n", "# all scanqa scene", "\n", "", "", "all_scene_list", "=", "train_scene_list", "+", "val_scene_list", "\n", "#print(\"train on {} samples and val on {} samples\".format(len(new_scanqa_train), len(new_scanqa_val)))", "\n", "#exit()", "\n", "return", "new_scanqa_train", ",", "new_scanqa_val", ",", "all_scene_list", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.train": [[369, 400], ["wandb.init", "print", "train.get_scanqa", "train.get_dataloader", "train.get_dataloader", "print", "print", "train.get_solver", "print", "train.save_info", "solver", "wandb.run.save", "len", "len"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_scanqa", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_dataloader", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.get_solver", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.train.save_info"], ["", "def", "train", "(", "args", ")", ":", "\n", "# WandB init    ", "\n", "    ", "wandb", ".", "init", "(", "project", "=", "project_name", ",", "config", "=", "args", ")", "\n", "\n", "# init training dataset", "\n", "print", "(", "\"preparing data...\"", ")", "\n", "scanqa_train", ",", "scanqa_val", ",", "all_scene_list", "=", "get_scanqa", "(", "SCANQA_TRAIN", ",", "SCANQA_VAL", ",", "args", ".", "train_num_scenes", ",", "args", ".", "val_num_scenes", ")", "\n", "scanqa", "=", "{", "\n", "\"train\"", ":", "scanqa_train", ",", "\n", "\"val\"", ":", "scanqa_val", "\n", "}", "\n", "\n", "# dataloader", "\n", "train_dataset", ",", "train_dataloader", "=", "get_dataloader", "(", "args", ",", "scanqa", ",", "all_scene_list", ",", "\"train\"", ",", "DC", ",", "not", "args", ".", "no_augment", ")", "\n", "val_dataset", ",", "val_dataloader", "=", "get_dataloader", "(", "args", ",", "scanqa", ",", "all_scene_list", ",", "\"val\"", ",", "DC", ",", "False", ")", "\n", "print", "(", "\"train on {} samples and val on {} samples\"", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "dataloader", "=", "{", "\n", "\"train\"", ":", "train_dataloader", ",", "\n", "\"val\"", ":", "val_dataloader", "\n", "}", "\n", "\n", "print", "(", "\"initializing...\"", ")", "\n", "solver", ",", "num_params", ",", "root", ",", "stamp", "=", "get_solver", "(", "args", ",", "dataloader", ")", "\n", "if", "stamp", ":", "\n", "        ", "wandb", ".", "run", ".", "name", "=", "stamp", "\n", "wandb", ".", "run", ".", "save", "(", ")", "\n", "\n", "", "print", "(", "\"Start training...\\n\"", ")", "\n", "save_info", "(", "args", ",", "root", ",", "num_params", ",", "train_dataset", ",", "val_dataset", ")", "\n", "solver", "(", "args", ".", "epoch", ",", "args", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.eprint": [[16, 18], ["print"], "function", ["None"], ["def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.get_lemma": [[33, 35], ["lemmatizer.lemmatize", "ss.split"], "function", ["None"], ["def", "get_lemma", "(", "ss", ")", ":", "\n", "    ", "return", "[", "lemmatizer", ".", "lemmatize", "(", "token", ")", "for", "token", "in", "ss", ".", "split", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.simple_ratio": [[37, 41], ["sum", "len"], "function", ["None"], ["", "def", "simple_ratio", "(", "numerator", ",", "denominator", ")", ":", "\n", "    ", "num_numerator", "=", "sum", "(", "[", "1", "if", "token", "in", "numerator", "else", "0", "for", "token", "in", "denominator", "]", ")", "\n", "num_denominator", "=", "len", "(", "denominator", ")", "\n", "return", "num_numerator", "/", "num_denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.tokens_unigram_f_value": [[43, 49], ["score.get_lemma", "score.get_lemma", "score.simple_ratio", "score.simple_ratio"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.get_lemma", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.get_lemma", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.simple_ratio", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.simple_ratio"], ["", "def", "tokens_unigram_f_value", "(", "ref", ":", "str", ",", "pred", ":", "str", ")", "->", "float", ":", "\n", "    ", "ref_lemma", "=", "get_lemma", "(", "ref", ")", "\n", "pred_lemma", "=", "get_lemma", "(", "pred", ")", "\n", "precision", "=", "simple_ratio", "(", "ref_lemma", ",", "pred_lemma", ")", "\n", "recall", "=", "simple_ratio", "(", "pred_lemma", ",", "ref_lemma", ")", "\n", "return", "2", "*", "(", "recall", "*", "precision", ")", "/", "(", "recall", "+", "precision", ")", "if", "recall", "+", "precision", "!=", "0.", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.tokens_score": [[51, 53], ["None"], "function", ["None"], ["", "def", "tokens_score", "(", "ref", ":", "str", ",", "pred", ":", "str", ")", "->", "float", ":", "\n", "    ", "return", "1.", "if", "ref", "==", "pred", "else", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.evals_json": [[55, 90], ["score.items", "len", "print", "score[].append", "score[].append", "score[].append", "score[].append", "score[].append", "len", "len", "numpy.mean", "score.tokens_unigram_f_value", "max", "score[].append", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.tokens_unigram_f_value"], ["", "def", "evals_json", "(", "gold_data", ",", "preds", ")", ":", "\n", "    ", "score_list", "=", "[", "'Top1 (EM)'", ",", "'Top10 (EM)'", ",", "'Top1 (F-value)'", "]", "\n", "score", "=", "{", "s", ":", "[", "]", "for", "s", "in", "score_list", "}", "\n", "\n", "for", "ins", "in", "gold_data", ":", "\n", "        ", "question_id", "=", "ins", "[", "'question_id'", "]", "\n", "question", "=", "ins", "[", "'question'", "]", "\n", "ref_answers", "=", "ins", "[", "'answers'", "]", "\n", "scene_id", "=", "ins", "[", "'scene_id'", "]", "\n", "pred", "=", "preds", "[", "question_id", "]", "\n", "\n", "# top-1", "\n", "answer", "=", "pred", "[", "'answer_top10'", "]", "[", "0", "]", "\n", "if", "answer", "in", "ref_answers", ":", "\n", "            ", "score", "[", "'Top1 (EM)'", "]", ".", "append", "(", "1", ")", "\n", "score", "[", "'Top1 (F-value)'", "]", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "[", "tokens_unigram_f_value", "(", "answer", ",", "ref", ")", "for", "ref", "in", "ref_answers", "]", "\n", "score", "[", "'Top1 (EM)'", "]", ".", "append", "(", "0", ")", "\n", "score", "[", "'Top1 (F-value)'", "]", ".", "append", "(", "max", "(", "scores", ")", ")", "\n", "\n", "# top-10", "\n", "", "for", "answer", "in", "pred", "[", "'answer_top10'", "]", ":", "\n", "            ", "if", "answer", "in", "ref_answers", ":", "\n", "                ", "score", "[", "'Top10 (EM)'", "]", ".", "append", "(", "1", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "score", "[", "'Top10 (EM)'", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "", "rlt", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "score", ".", "items", "(", ")", ":", "\n", "        ", "assert", "len", "(", "v", ")", "==", "len", "(", "gold_data", ")", ",", "len", "(", "v", ")", "\n", "print", "(", "k", ",", "np", ".", "mean", "(", "v", ")", "*", "100", ")", "\n", "rlt", "[", "k", "]", "=", "np", ".", "mean", "(", "v", ")", "*", "100", "\n", "", "return", "rlt", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.eval_pycoco": [[91, 127], ["pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "scorers.append", "score.eprint", "scorer.compute_score", "pycocoevalcap.bleu.bleu.Bleu", "pycocoevalcap.meteor.meteor.Meteor", "pycocoevalcap.rouge.rouge.Rouge", "pycocoevalcap.cider.cider.Cider", "preds.items", "type", "zip", "print", "pycocoevalcap.spice.spice.Spice", "scorer.method", "print"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.eprint"], ["", "def", "eval_pycoco", "(", "gold_data", ",", "preds", ",", "use_spice", "=", "False", ")", ":", "\n", "    ", "score_list", "=", "[", "'Top1 (EM)'", ",", "'Top10 (EM)'", ",", "'Top1 (F-value)'", ",", "'BLEU-1'", ",", "'BLEU-2'", ",", "'BLEU-3'", ",", "'BLEU-4'", "]", "\n", "score", "=", "{", "s", ":", "[", "]", "for", "s", "in", "score_list", "}", "\n", "\n", "scorers", "=", "[", "\n", "(", "Bleu", "(", "4", ")", ",", "[", "\"Bleu_1\"", ",", "\"Bleu_2\"", ",", "\"Bleu_3\"", ",", "\"Bleu_4\"", "]", ")", ",", "\n", "(", "Meteor", "(", ")", ",", "\"METEOR\"", ")", ",", "\n", "(", "Rouge", "(", ")", ",", "\"ROUGE_L\"", ")", ",", "\n", "(", "Cider", "(", ")", ",", "\"CIDEr\"", ")", ",", "\n", "]", "\n", "if", "use_spice", ":", "\n", "        ", "scorers", ".", "append", "(", "(", "Spice", "(", ")", ",", "\"SPICE\"", ")", ")", "\n", "\n", "", "tokenizer", "=", "PTBTokenizer", "(", ")", "\n", "# pycocoeval", "\n", "gts", "=", "{", "ins", "[", "'question_id'", "]", ":", "[", "{", "'caption'", ":", "ans", "}", "for", "ans", "in", "ins", "[", "'answers'", "]", "]", "for", "ins", "in", "gold_data", "}", "\n", "res", "=", "{", "qid", ":", "[", "{", "'caption'", ":", "value", "[", "'answer_top10'", "]", "[", "0", "]", "}", "]", "for", "qid", ",", "value", "in", "preds", ".", "items", "(", ")", "}", "\n", "gts", "=", "tokenizer", ".", "tokenize", "(", "gts", ")", "\n", "res", "=", "tokenizer", ".", "tokenize", "(", "res", ")", "\n", "#print(gts,res)", "\n", "\n", "# =================================================", "\n", "# Compute scores", "\n", "# =================================================", "\n", "rlt", "=", "{", "}", "\n", "for", "scorer", ",", "method", "in", "scorers", ":", "\n", "        ", "eprint", "(", "'computing %s score...'", "%", "(", "scorer", ".", "method", "(", ")", ")", ")", "\n", "score", ",", "scores", "=", "scorer", ".", "compute_score", "(", "gts", ",", "res", ")", "\n", "if", "type", "(", "method", ")", "==", "list", ":", "\n", "            ", "for", "sc", ",", "scs", ",", "m", "in", "zip", "(", "score", ",", "scores", ",", "method", ")", ":", "\n", "                ", "print", "(", "\"%s: %0.3f\"", "%", "(", "m", ",", "sc", "*", "100", ")", ")", "\n", "rlt", "[", "m", "]", "=", "sc", "*", "100", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"%s: %0.3f\"", "%", "(", "method", ",", "score", "*", "100", ")", ")", "\n", "rlt", "[", "method", "]", "=", "score", "*", "100", "\n", "", "", "return", "rlt", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scripts.score.qclass1": [[129, 149], ["None"], "function", ["None"], ["def", "qclass1", "(", "question", ")", ":", "\n", "    ", "lques", "=", "question", "\n", "if", "'Where'", "in", "lques", ":", "\n", "        ", "return", "'Place'", "\n", "", "if", "'How many'", "in", "lques", ":", "\n", "        ", "return", "'Number'", "\n", "", "if", "'What color'", "in", "lques", "or", "'What is the color'", "in", "lques", ":", "\n", "        ", "return", "'Color'", "\n", "", "if", "'What shape'", "in", "lques", ":", "\n", "#return 'Shape'", "\n", "        ", "return", "'Object nature'", "\n", "", "if", "'What type'", "in", "lques", ":", "\n", "#return 'Type'", "\n", "        ", "return", "'Object nature'", "\n", "", "if", "'What kind'", "in", "lques", ":", "\n", "#return 'Kind'", "\n", "        ", "return", "'Object nature'", "\n", "", "if", "'What is'", "in", "lques", ":", "\n", "        ", "return", "'Object'", "\n", "", "return", "'Other'", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.backbone_module.Pointnet2Backbone.__init__": [[22, 73], ["torch.Module.__init__", "lib.pointnet2.pointnet2_modules.PointnetSAModuleVotes", "lib.pointnet2.pointnet2_modules.PointnetSAModuleVotes", "lib.pointnet2.pointnet2_modules.PointnetSAModuleVotes", "lib.pointnet2.pointnet2_modules.PointnetSAModuleVotes", "lib.pointnet2.pointnet2_modules.PointnetFPModule", "lib.pointnet2.pointnet2_modules.PointnetFPModule", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["def", "__init__", "(", "self", ",", "input_feature_dim", "=", "0", ",", "width", "=", "1", ",", "depth", "=", "2", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "self", ".", "sa1", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "2048", ",", "\n", "radius", "=", "0.2", ",", "\n", "nsample", "=", "64", ",", "\n", "#mlp=[input_feature_dim, 64, 64, 128],", "\n", "mlp", "=", "[", "input_feature_dim", "]", "+", "[", "64", "*", "width", "for", "i", "in", "range", "(", "depth", ")", "]", "+", "[", "128", "*", "width", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "#mlp=[128, 128, 128, 256],", "\n", "mlp", "=", "[", "128", "*", "width", "]", "+", "[", "128", "*", "width", "for", "i", "in", "range", "(", "depth", ")", "]", "+", "[", "256", "*", "width", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "#mlp=[256, 128, 128, 256],", "\n", "mlp", "=", "[", "256", "*", "width", "]", "+", "[", "128", "*", "width", "for", "i", "in", "range", "(", "depth", ")", "]", "+", "[", "256", "*", "width", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "#mlp=[256, 128, 128, 256],", "\n", "mlp", "=", "[", "256", "*", "width", "]", "+", "[", "128", "*", "width", "for", "i", "in", "range", "(", "depth", ")", "]", "+", "[", "256", "*", "width", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "# --------- 2 FEATURE UPSAMPLING LAYERS --------", "\n", "#self.fp1 = PointnetFPModule(mlp=[256+256,256,256])", "\n", "#self.fp2 = PointnetFPModule(mlp=[256+256,256,256])", "\n", "self", ".", "fp1", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "*", "width", "+", "256", "*", "width", ",", "256", "*", "width", ",", "256", "*", "width", "]", ")", "\n", "self", ".", "fp2", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "*", "width", "+", "256", "*", "width", ",", "256", "*", "width", ",", "seed_feat_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.backbone_module.Pointnet2Backbone._break_up_pc": [[74, 79], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.backbone_module.Pointnet2Backbone.forward": [[80, 132], ["backbone_module.Pointnet2Backbone._break_up_pc", "backbone_module.Pointnet2Backbone.sa1", "backbone_module.Pointnet2Backbone.sa2", "backbone_module.Pointnet2Backbone.sa3", "backbone_module.Pointnet2Backbone.sa4", "backbone_module.Pointnet2Backbone.fp1", "backbone_module.Pointnet2Backbone.fp2"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.backbone_module.Pointnet2Backbone._break_up_pc"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "r\"\"\"\n            Forward pass of the network\n\n            Parameters\n            ----------\n            pointcloud: Variable(torch.cuda.FloatTensor)\n                (B, N, 3 + input_feature_dim) tensor\n                Point cloud to run predicts on\n                Each point in the point-cloud MUST\n                be formated as (x, y, z, features...)\n\n            Returns\n            ----------\n            data_dict: {XXX_xyz, XXX_features, XXX_inds}\n                XXX_xyz: float32 Tensor of shape (B,K,3)\n                XXX_features: float32 Tensor of shape (B,K,D)\n                XXX-inds: int64 Tensor of shape (B,K) values in [0,N-1]\n        \"\"\"", "\n", "\n", "pointcloud", "=", "data_dict", "[", "\"point_clouds\"", "]", "# batch, num_points, 4 (16, 40000, 4)", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "# features: batch, 1, num_points (16, 1, 40000)", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n", "data_dict", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "data_dict", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "data_dict", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "data_dict", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "data_dict", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "data_dict", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "data_dict", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "data_dict", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "data_dict", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "data_dict", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "# --------- 2 FEATURE UPSAMPLING LAYERS --------", "\n", "features", "=", "self", ".", "fp1", "(", "data_dict", "[", "'sa3_xyz'", "]", ",", "data_dict", "[", "'sa4_xyz'", "]", ",", "data_dict", "[", "'sa3_features'", "]", ",", "data_dict", "[", "'sa4_features'", "]", ")", "\n", "features", "=", "self", ".", "fp2", "(", "data_dict", "[", "'sa2_xyz'", "]", ",", "data_dict", "[", "'sa3_xyz'", "]", ",", "data_dict", "[", "'sa2_features'", "]", ",", "features", ")", "\n", "data_dict", "[", "'fp2_features'", "]", "=", "features", "# batch_size, feature_dim, num_seed, (16, 256, 1024)", "\n", "data_dict", "[", "'fp2_xyz'", "]", "=", "data_dict", "[", "'sa2_xyz'", "]", "\n", "num_seed", "=", "data_dict", "[", "'fp2_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "data_dict", "[", "'fp2_inds'", "]", "=", "data_dict", "[", "'sa1_inds'", "]", "[", ":", ",", "0", ":", "num_seed", "]", "# indices among the entire input point clouds", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.voting_module.VotingModule.__init__": [[12, 32], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vote_factor", ",", "seed_feature_dim", ")", ":", "\n", "        ", "\"\"\" Votes generation from seed point features.\n\n        Args:\n            vote_facotr: int\n                number of votes generated from each seed point\n            seed_feature_dim: int\n                number of channels of seed point features\n            vote_feature_dim: int\n                number of channels of vote features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "in_dim", "=", "seed_feature_dim", "\n", "self", ".", "out_dim", "=", "self", ".", "in_dim", "# due to residual feature, in_dim has to be == out_dim", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "(", "3", "+", "self", ".", "out_dim", ")", "*", "self", ".", "vote_factor", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.voting_module.VotingModule.forward": [[33, 61], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "voting_module.VotingModule.conv3", "net.transpose().view().contiguous.transpose().view().contiguous.transpose().view().contiguous", "vote_xyz.contiguous().view.contiguous().view.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.transpose().contiguous", "voting_module.VotingModule.bn1", "voting_module.VotingModule.bn2", "seed_xyz.unsqueeze", "seed_features.transpose().unsqueeze().contiguous", "voting_module.VotingModule.conv1", "voting_module.VotingModule.conv2", "net.transpose().view().contiguous.transpose().view().contiguous.transpose().view", "vote_xyz.contiguous().view.contiguous().view.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.transpose", "seed_features.transpose().unsqueeze", "net.transpose().view().contiguous.transpose().view().contiguous.transpose", "seed_features.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seed_xyz", ",", "seed_features", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n\n        Arguments:\n            seed_xyz: (batch_size, num_seed, 3) Pytorch tensor\n            seed_features: (batch_size, feature_dim, num_seed) Pytorch tensor\n        Returns:\n            vote_xyz: (batch_size, num_seed*vote_factor, 3)\n            vote_features: (batch_size, vote_feature_dim, num_seed*vote_factor)\n        \"\"\"", "\n", "batch_size", "=", "seed_xyz", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "seed_xyz", ".", "shape", "[", "1", "]", "\n", "num_vote", "=", "num_seed", "*", "self", ".", "vote_factor", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "seed_features", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, (3+out_dim)*vote_factor, num_seed)", "\n", "\n", "net", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "num_seed", ",", "self", ".", "vote_factor", ",", "3", "+", "self", ".", "out_dim", ")", ".", "contiguous", "(", ")", "\n", "offset", "=", "net", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "vote_xyz", "=", "seed_xyz", ".", "unsqueeze", "(", "2", ")", "+", "offset", "\n", "vote_xyz", "=", "vote_xyz", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "3", ")", "\n", "\n", "residual_features", "=", "net", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "# (batch_size, num_seed, vote_factor, out_dim)", "\n", "vote_features", "=", "seed_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", "+", "residual_features", "\n", "vote_features", "=", "vote_features", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "self", ".", "out_dim", ")", "\n", "vote_features", "=", "vote_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "vote_xyz", ",", "vote_features", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.qa_module.ScanQA.__init__": [[10, 110], ["torch.Module.__init__", "models.lang_module.LangModule", "models.backbone_module.Pointnet2Backbone", "models.voting_module.VotingModule", "models.proposal_module.ProposalModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.mcan_module.MCAN_ED", "models.mcan_module.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.mcan_module.AttFlat", "models.mcan_module.AttFlat", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_answers", ",", "\n", "# proposal", "\n", "num_object_class", ",", "input_feature_dim", ",", "\n", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "num_proposal", "=", "256", ",", "vote_factor", "=", "1", ",", "sampling", "=", "\"vote_fps\"", ",", "seed_feat_dim", "=", "256", ",", "proposal_size", "=", "128", ",", "\n", "pointnet_width", "=", "1", ",", "\n", "pointnet_depth", "=", "2", ",", "\n", "vote_radius", "=", "0.3", ",", "\n", "vote_nsample", "=", "16", ",", "\n", "# qa", "\n", "#answer_cls_loss=\"ce\",", "\n", "answer_pdrop", "=", "0.3", ",", "\n", "mcan_num_layers", "=", "2", ",", "\n", "mcan_num_heads", "=", "8", ",", "\n", "mcan_pdrop", "=", "0.1", ",", "\n", "mcan_flat_mlp_size", "=", "512", ",", "\n", "mcan_flat_glimpses", "=", "1", ",", "\n", "mcan_flat_out_size", "=", "1024", ",", "\n", "# lang", "\n", "lang_use_bidir", "=", "False", ",", "\n", "lang_num_layers", "=", "1", ",", "\n", "lang_emb_size", "=", "300", ",", "\n", "lang_pdrop", "=", "0.1", ",", "\n", "bert_model_name", "=", "None", ",", "\n", "freeze_bert", "=", "False", ",", "\n", "finetune_bert_last_layer", "=", "False", ",", "\n", "# common", "\n", "hidden_size", "=", "128", ",", "\n", "# option", "\n", "use_object_mask", "=", "False", ",", "\n", "use_lang_cls", "=", "False", ",", "\n", "use_reference", "=", "False", ",", "\n", "use_answer", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Option", "\n", "self", ".", "use_object_mask", "=", "use_object_mask", "\n", "self", ".", "use_lang_cls", "=", "use_lang_cls", "\n", "self", ".", "use_reference", "=", "use_reference", "\n", "self", ".", "use_answer", "=", "use_answer", "\n", "\n", "lang_size", "=", "hidden_size", "*", "(", "1", "+", "lang_use_bidir", ")", "\n", "# Language encoding ", "\n", "self", ".", "lang_net", "=", "LangModule", "(", "num_object_class", ",", "use_lang_classifier", "=", "False", ",", "\n", "use_bidir", "=", "lang_use_bidir", ",", "num_layers", "=", "lang_num_layers", ",", "\n", "emb_size", "=", "lang_emb_size", ",", "hidden_size", "=", "hidden_size", ",", "pdrop", "=", "lang_pdrop", ",", "\n", "bert_model_name", "=", "bert_model_name", ",", "freeze_bert", "=", "freeze_bert", ",", "\n", "finetune_bert_last_layer", "=", "finetune_bert_last_layer", ")", "\n", "\n", "# Ojbect detection", "\n", "self", ".", "detection_backbone", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "input_feature_dim", ",", "\n", "width", "=", "pointnet_width", ",", "depth", "=", "pointnet_depth", ",", "\n", "seed_feat_dim", "=", "seed_feat_dim", ")", "\n", "# Hough voting", "\n", "self", ".", "voting_net", "=", "VotingModule", "(", "vote_factor", ",", "seed_feat_dim", ")", "\n", "\n", "# Vote aggregation and object proposal", "\n", "self", ".", "proposal_net", "=", "ProposalModule", "(", "num_object_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "seed_feat_dim", ",", "proposal_size", "=", "proposal_size", ",", "\n", "radius", "=", "vote_radius", ",", "nsample", "=", "vote_nsample", ")", "\n", "\n", "# Feature projection", "\n", "self", ".", "lang_feat_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "lang_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "GELU", "(", ")", "\n", ")", "\n", "self", ".", "object_feat_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "proposal_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "GELU", "(", ")", "\n", ")", "\n", "\n", "# Fusion backbone", "\n", "self", ".", "fusion_backbone", "=", "MCAN_ED", "(", "hidden_size", ",", "num_heads", "=", "mcan_num_heads", ",", "num_layers", "=", "mcan_num_layers", ",", "pdrop", "=", "mcan_pdrop", ")", "\n", "self", ".", "fusion_norm", "=", "LayerNorm", "(", "mcan_flat_out_size", ")", "\n", "\n", "# Esitimate confidence", "\n", "self", ".", "object_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", ")", "\n", "\n", "# Language classifier", "\n", "self", ".", "lang_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "mcan_flat_out_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "num_object_class", ")", "\n", ")", "\n", "\n", "# QA head", "\n", "self", ".", "attflat_visual", "=", "AttFlat", "(", "hidden_size", ",", "mcan_flat_mlp_size", ",", "mcan_flat_glimpses", ",", "mcan_flat_out_size", ",", "0.1", ")", "\n", "self", ".", "attflat_lang", "=", "AttFlat", "(", "hidden_size", ",", "mcan_flat_mlp_size", ",", "mcan_flat_glimpses", ",", "mcan_flat_out_size", ",", "0.1", ")", "\n", "self", ".", "answer_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "mcan_flat_out_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "answer_pdrop", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "num_answers", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.qa_module.ScanQA.forward": [[112, 226], ["qa_module.ScanQA.lang_net", "qa_module.ScanQA.detection_backbone", "qa_module.ScanQA.voting_net", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "qa_module.ScanQA.proposal_net", "qa_module.ScanQA.lang_feat_linear", "qa_module.ScanQA.object_feat_linear", "qa_module.ScanQA.fusion_backbone", "qa_module.ScanQA.attflat_lang", "qa_module.ScanQA.attflat_visual", "qa_module.ScanQA.fusion_norm", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "lang_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "lang_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "object_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.dim", "object_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "qa_module.ScanQA.object_cls().squeeze", "qa_module.ScanQA.lang_cls", "qa_module.ScanQA.answer_cls", "data_dict[].bool().detach", "[].float().unsqueeze", "lang_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "object_mask.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "qa_module.ScanQA.object_cls", "data_dict[].bool", "[].float", "data_dict[].max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "#######################################", "\n", "#                                     #", "\n", "#           LANGUAGE BRANCH           #", "\n", "#                                     #", "\n", "#######################################", "\n", "\n", "# --------- LANGUAGE ENCODING ---------", "\n", "        ", "data_dict", "=", "self", ".", "lang_net", "(", "data_dict", ")", "\n", "\n", "#######################################", "\n", "#                                     #", "\n", "#           DETECTION BRANCH          #", "\n", "#                                     #", "\n", "#######################################", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "data_dict", "=", "self", ".", "detection_backbone", "(", "data_dict", ")", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "data_dict", "[", "\"fp2_xyz\"", "]", "\n", "features", "=", "data_dict", "[", "\"fp2_features\"", "]", "# batch_size, seed_feature_dim, num_seed, (16, 256, 1024)", "\n", "data_dict", "[", "\"seed_inds\"", "]", "=", "data_dict", "[", "\"fp2_inds\"", "]", "\n", "data_dict", "[", "\"seed_xyz\"", "]", "=", "xyz", "\n", "\n", "data_dict", "[", "\"seed_features\"", "]", "=", "features", "\n", "xyz", ",", "features", "=", "self", ".", "voting_net", "(", "xyz", ",", "features", ")", "# batch_size, vote_feature_dim, num_seed * vote_factor, (16, 256, 1024)", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "data_dict", "[", "\"vote_xyz\"", "]", "=", "xyz", "\n", "data_dict", "[", "\"vote_features\"", "]", "=", "features", "\n", "\n", "# --------- PROPOSAL GENERATION ---------", "\n", "data_dict", "=", "self", ".", "proposal_net", "(", "xyz", ",", "features", ",", "data_dict", ")", "\n", "\n", "#######################################", "\n", "#                                     #", "\n", "#             QA BACKBONE             #", "\n", "#                                     #", "\n", "#######################################", "\n", "\n", "# unpack outputs from question encoding branch", "\n", "lang_feat", "=", "data_dict", "[", "\"lang_out\"", "]", "# word embeddings after LSTM (batch_size, num_words(max_question_length), hidden_size * num_dir)", "\n", "lang_mask", "=", "data_dict", "[", "\"lang_mask\"", "]", "# word attetion (batch, num_words)", "\n", "\n", "# unpack outputs from detection branch", "\n", "object_feat", "=", "data_dict", "[", "'aggregated_vote_features'", "]", "# batch_size, num_proposal, proposal_size (128)", "\n", "if", "self", ".", "use_object_mask", ":", "\n", "            ", "object_mask", "=", "~", "data_dict", "[", "\"bbox_mask\"", "]", ".", "bool", "(", ")", ".", "detach", "(", ")", "#  # batch, num_proposals", "\n", "", "else", ":", "\n", "            ", "object_mask", "=", "None", "\n", "\n", "", "if", "lang_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "lang_mask", "=", "lang_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "", "if", "object_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "object_mask", "=", "object_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# --------- QA BACKBONE ---------", "\n", "# Pre-process Lanauge & Image Feature", "\n", "", "lang_feat", "=", "self", ".", "lang_feat_linear", "(", "lang_feat", ")", "# batch_size, num_words, hidden_size", "\n", "object_feat", "=", "self", ".", "object_feat_linear", "(", "object_feat", ")", "# batch_size, num_proposal, hidden_size", "\n", "\n", "# QA Backbone (Fusion network)", "\n", "lang_feat", ",", "object_feat", "=", "self", ".", "fusion_backbone", "(", "\n", "lang_feat", ",", "\n", "object_feat", ",", "\n", "lang_mask", ",", "\n", "object_mask", ",", "\n", ")", "\n", "# object_feat: batch_size, num_proposal, hidden_size", "\n", "# lang_feat: batch_size, num_words, hidden_size", "\n", "\n", "#######################################", "\n", "#                                     #", "\n", "#          PROPOSAL MATCHING          #", "\n", "#                                     #", "\n", "#######################################", "\n", "if", "self", ".", "use_reference", ":", "\n", "#  data_dict[\"cluster_ref\"]:", "\n", "#  tensor([[-0.2910, -0.2910, -0.1096],", "\n", "#          [0.7795, -0.2910,  1.2384]]    ", "\n", "# mask out invalid proposals", "\n", "            ", "object_conf_feat", "=", "object_feat", "*", "data_dict", "[", "'objectness_scores'", "]", ".", "max", "(", "2", ")", "[", "1", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "data_dict", "[", "\"cluster_ref\"", "]", "=", "self", ".", "object_cls", "(", "object_conf_feat", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "lang_feat", "=", "self", ".", "attflat_lang", "(", "\n", "lang_feat", ",", "\n", "lang_mask", "\n", ")", "\n", "\n", "object_feat", "=", "self", ".", "attflat_visual", "(", "\n", "object_feat", ",", "\n", "object_mask", "\n", ")", "\n", "\n", "fuse_feat", "=", "self", ".", "fusion_norm", "(", "lang_feat", "+", "object_feat", ")", "# batch, mcan_flat_out_size", "\n", "\n", "#######################################", "\n", "#                                     #", "\n", "#           LANGUAGE BRANCH           #", "\n", "#                                     #", "\n", "#######################################", "\n", "if", "self", ".", "use_lang_cls", ":", "\n", "            ", "data_dict", "[", "\"lang_scores\"", "]", "=", "self", ".", "lang_cls", "(", "fuse_feat", ")", "# batch_size, num_object_classe", "\n", "\n", "#######################################", "\n", "#                                     #", "\n", "#          QUESTION ANSERING          #", "\n", "#                                     #", "\n", "#######################################", "\n", "", "if", "self", ".", "use_answer", ":", "\n", "            ", "data_dict", "[", "\"answer_scores\"", "]", "=", "self", ".", "answer_cls", "(", "fuse_feat", ")", "# batch_size, num_answers", "\n", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.FC.__init__": [[19, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "pdrop", "=", "0.", ",", "use_gelu", "=", "True", ")", ":", "\n", "        ", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pdrop", "=", "pdrop", "\n", "self", ".", "use_gelu", "=", "use_gelu", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ")", "\n", "\n", "if", "use_gelu", ":", "\n", "#self.relu = nn.Relu(inplace=True)", "\n", "            ", "self", ".", "gelu", "=", "nn", ".", "GELU", "(", ")", "\n", "\n", "", "if", "pdrop", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.FC.forward": [[33, 44], ["mcan_module.FC.linear", "mcan_module.FC.gelu", "mcan_module.FC.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_gelu", ":", "\n", "#x = self.relu(x)", "\n", "            ", "x", "=", "self", ".", "gelu", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "pdrop", ">", "0", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MLP.__init__": [[47, 52], ["torch.Module.__init__", "mcan_module.FC", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "mid_size", ",", "out_size", ",", "pdrop", "=", "0.", ",", "use_gelu", "=", "True", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "FC", "(", "in_size", ",", "mid_size", ",", "pdrop", "=", "pdrop", ",", "use_gelu", "=", "use_gelu", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "mid_size", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MLP.forward": [[53, 55], ["mcan_module.MLP.linear", "mcan_module.MLP.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "linear", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.LayerNorm.__init__": [[58, 64], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "size", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.LayerNorm.forward": [[65, 70], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.AttFlat.__init__": [[75, 90], ["torch.Module.__init__", "mcan_module.MLP", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "flat_mlp_size", "=", "512", ",", "flat_glimpses", "=", "1", ",", "flat_out_size", "=", "1024", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "AttFlat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "in_size", "=", "hidden_size", ",", "\n", "mid_size", "=", "flat_mlp_size", ",", "\n", "out_size", "=", "flat_glimpses", ",", "\n", "pdrop", "=", "pdrop", ",", "\n", "use_gelu", "=", "True", "\n", ")", "\n", "self", ".", "flat_glimpses", "=", "flat_glimpses", "\n", "\n", "self", ".", "linear_merge", "=", "nn", ".", "Linear", "(", "\n", "hidden_size", "*", "flat_glimpses", ",", "\n", "flat_out_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.AttFlat.forward": [[92, 111], ["mcan_module.AttFlat.mlp", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mcan_module.AttFlat.linear_merge", "att.masked_fill.masked_fill.masked_fill", "att_list.append", "x_mask.squeeze().squeeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x_mask.squeeze().squeeze", "x_mask.squeeze"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "att", "=", "self", ".", "mlp", "(", "x", ")", "\n", "if", "x_mask", "is", "not", "None", ":", "\n", "            ", "att", "=", "att", ".", "masked_fill", "(", "\n", "x_mask", ".", "squeeze", "(", "1", ")", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "-", "1e9", "\n", ")", "\n", "", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "1", ")", "\n", "\n", "att_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "flat_glimpses", ")", ":", "\n", "            ", "att_list", ".", "append", "(", "\n", "torch", ".", "sum", "(", "att", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", "*", "x", ",", "dim", "=", "1", ")", "\n", ")", "\n", "\n", "", "x_atted", "=", "torch", ".", "cat", "(", "att_list", ",", "dim", "=", "1", ")", "\n", "x_atted", "=", "self", ".", "linear_merge", "(", "x_atted", ")", "\n", "\n", "return", "x_atted", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MHAtt.__init__": [[116, 129], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_heads", "=", "8", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MHAtt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear_v", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear_k", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear_q", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "linear_merge", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "head_hidden_size", "=", "int", "(", "hidden_size", "/", "num_heads", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MHAtt.forward": [[130, 164], ["mcan_module.MHAtt.size", "mcan_module.MHAtt.linear_v().view().transpose", "mcan_module.MHAtt.linear_k().view().transpose", "mcan_module.MHAtt.linear_q().view().transpose", "mcan_module.MHAtt.att", "mcan_module.MHAtt.transpose().contiguous().view", "mcan_module.MHAtt.linear_merge", "mcan_module.MHAtt.linear_v().view", "mcan_module.MHAtt.linear_k().view", "mcan_module.MHAtt.linear_q().view", "mcan_module.MHAtt.transpose().contiguous", "mcan_module.MHAtt.linear_v", "mcan_module.MHAtt.linear_k", "mcan_module.MHAtt.linear_q", "mcan_module.MHAtt.transpose"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MHAtt.att"], ["", "def", "forward", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ")", ":", "\n", "        ", "n_batches", "=", "q", ".", "size", "(", "0", ")", "\n", "\n", "v", "=", "self", ".", "linear_v", "(", "v", ")", ".", "view", "(", "\n", "n_batches", ",", "\n", "-", "1", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "head_hidden_size", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "k", "=", "self", ".", "linear_k", "(", "k", ")", ".", "view", "(", "\n", "n_batches", ",", "\n", "-", "1", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "head_hidden_size", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "q", "=", "self", ".", "linear_q", "(", "q", ")", ".", "view", "(", "\n", "n_batches", ",", "\n", "-", "1", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "head_hidden_size", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "atted", "=", "self", ".", "att", "(", "v", ",", "k", ",", "q", ",", "mask", ")", "\n", "atted", "=", "atted", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "n_batches", ",", "\n", "-", "1", ",", "\n", "self", ".", "hidden_size", "\n", ")", "\n", "\n", "atted", "=", "self", ".", "linear_merge", "(", "atted", ")", "\n", "\n", "return", "atted", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MHAtt.att": [[169, 183], ["query.size", "torch.softmax", "torch.softmax", "torch.softmax", "mcan_module.MHAtt.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill.masked_fill", "key.transpose"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax", "home.repos.pwc.inspect_result.atr-dbi_scanqa.lib.ap_helper.softmax"], ["", "def", "att", "(", "self", ",", "value", ",", "key", ",", "query", ",", "mask", ")", ":", "\n", "        ", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "\n", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", ",", "-", "1e9", ")", "\n", "\n", "", "att_map", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "att_map", "=", "self", ".", "dropout", "(", "att_map", ")", "\n", "\n", "return", "torch", ".", "matmul", "(", "att_map", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.FFN.__init__": [[189, 200], ["torch.Module.__init__", "int", "mcan_module.MLP"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "FFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "ff_size", "=", "int", "(", "hidden_size", "*", "4", ")", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "\n", "in_size", "=", "hidden_size", ",", "\n", "mid_size", "=", "ff_size", ",", "\n", "out_size", "=", "hidden_size", ",", "\n", "pdrop", "=", "pdrop", ",", "\n", "use_gelu", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.FFN.forward": [[202, 204], ["mcan_module.FFN.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mlp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.SA.__init__": [[210, 221], ["torch.Module.__init__", "mcan_module.MHAtt", "mcan_module.FFN", "torch.Dropout", "torch.Dropout", "torch.Dropout", "mcan_module.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "mcan_module.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_heads", "=", "8", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mhatt", "=", "MHAtt", "(", "hidden_size", ",", "num_heads", ",", "pdrop", ")", "\n", "self", ".", "ffn", "=", "FFN", "(", "hidden_size", ",", "pdrop", ")", "\n", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "self", ".", "norm1", "=", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "self", ".", "norm2", "=", "LayerNorm", "(", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.SA.forward": [[222, 232], ["mcan_module.SA.norm1", "mcan_module.SA.norm2", "mcan_module.SA.dropout1", "mcan_module.SA.dropout2", "mcan_module.SA.mhatt", "mcan_module.SA.ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "dropout1", "(", "\n", "self", ".", "mhatt", "(", "x", ",", "x", ",", "x", ",", "x_mask", ")", "\n", ")", ")", "\n", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "dropout2", "(", "\n", "self", ".", "ffn", "(", "x", ")", "\n", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.SGA.__init__": [[238, 253], ["torch.Module.__init__", "mcan_module.MHAtt", "mcan_module.MHAtt", "mcan_module.FFN", "torch.Dropout", "torch.Dropout", "torch.Dropout", "mcan_module.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "mcan_module.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "mcan_module.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_heads", "=", "8", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "SGA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mhatt1", "=", "MHAtt", "(", "hidden_size", ",", "num_heads", ",", "pdrop", ")", "\n", "self", ".", "mhatt2", "=", "MHAtt", "(", "hidden_size", ",", "num_heads", ",", "pdrop", ")", "\n", "self", ".", "ffn", "=", "FFN", "(", "hidden_size", ",", "pdrop", ")", "\n", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "self", ".", "norm1", "=", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "self", ".", "norm2", "=", "LayerNorm", "(", "hidden_size", ")", "\n", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "self", ".", "norm3", "=", "LayerNorm", "(", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.SGA.forward": [[254, 268], ["mcan_module.SGA.norm1", "mcan_module.SGA.norm2", "mcan_module.SGA.norm3", "mcan_module.SGA.dropout1", "mcan_module.SGA.dropout2", "mcan_module.SGA.dropout3", "mcan_module.SGA.mhatt1", "mcan_module.SGA.mhatt2", "mcan_module.SGA.ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ",", "y_mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "norm1", "(", "x", "+", "self", ".", "dropout1", "(", "\n", "self", ".", "mhatt1", "(", "x", ",", "x", ",", "x", ",", "x_mask", ")", "\n", ")", ")", "\n", "\n", "x", "=", "self", ".", "norm2", "(", "x", "+", "self", ".", "dropout2", "(", "\n", "self", ".", "mhatt2", "(", "y", ",", "y", ",", "x", ",", "y_mask", ")", "\n", ")", ")", "\n", "\n", "x", "=", "self", ".", "norm3", "(", "x", "+", "self", ".", "dropout3", "(", "\n", "self", ".", "ffn", "(", "x", ")", "\n", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MCAN_ED.__init__": [[274, 279], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mcan_module.SA", "mcan_module.SGA", "range", "range"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_heads", "=", "8", ",", "num_layers", "=", "6", ",", "pdrop", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "MCAN_ED", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enc_list", "=", "nn", ".", "ModuleList", "(", "[", "SA", "(", "hidden_size", ",", "num_heads", ",", "pdrop", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "dec_list", "=", "nn", ".", "ModuleList", "(", "[", "SGA", "(", "hidden_size", ",", "num_heads", ",", "pdrop", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.mcan_module.MCAN_ED.forward": [[280, 289], ["enc", "dec"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "x_mask", ",", "y_mask", ")", ":", "\n", "# Get hidden vector", "\n", "        ", "for", "enc", "in", "self", ".", "enc_list", ":", "\n", "            ", "x", "=", "enc", "(", "x", ",", "x_mask", ")", "\n", "\n", "", "for", "dec", "in", "self", ".", "dec_list", ":", "\n", "            ", "y", "=", "dec", "(", "y", ",", "x", ",", "y_mask", ",", "x_mask", ")", "\n", "\n", "", "return", "x", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.lang_module.LangModule.__init__": [[13, 62], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "AutoModel.from_pretrained", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lang_module.LangModule.bert_model.parameters", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "lang_module.LangModule.bert_model.parameters", "hasattr", "lang_module.LangModule.bert_model.encoder.layer[].parameters", "lang_module.LangModule.bert_model.transformer.layer[].parameters"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_object_class", ",", "use_lang_classifier", "=", "True", ",", "use_bidir", "=", "False", ",", "num_layers", "=", "1", ",", "\n", "emb_size", "=", "300", ",", "hidden_size", "=", "256", ",", "pdrop", "=", "0.1", ",", "word_pdrop", "=", "0.1", ",", "\n", "bert_model_name", "=", "None", ",", "freeze_bert", "=", "False", ",", "finetune_bert_last_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_object_class", "=", "num_object_class", "\n", "self", ".", "use_lang_classifier", "=", "use_lang_classifier", "\n", "self", ".", "use_bidir", "=", "use_bidir", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "bert_model_name", "=", "bert_model_name", "\n", "self", ".", "use_bert_model", "=", "bert_model_name", "is", "not", "None", "\n", "\n", "if", "self", ".", "use_bert_model", ":", "\n", "            ", "from", "transformers", "import", "AutoModel", "\n", "self", ".", "bert_model", "=", "AutoModel", ".", "from_pretrained", "(", "bert_model_name", ")", "\n", "assert", "not", "(", "freeze_bert", "and", "finetune_bert_last_layer", ")", "\n", "if", "freeze_bert", ":", "\n", "                ", "for", "param", "in", "self", ".", "bert_model", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "elif", "finetune_bert_last_layer", ":", "\n", "                ", "for", "param", "in", "self", ".", "bert_model", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "if", "hasattr", "(", "self", ".", "bert_model", ",", "'encoder'", ")", ":", "\n", "                    ", "for", "param", "in", "self", ".", "bert_model", ".", "encoder", ".", "layer", "[", "-", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "# distill-bert", "\n", "                    ", "for", "param", "in", "self", ".", "bert_model", ".", "transformer", ".", "layer", "[", "-", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "", "", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "emb_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "batch_first", "=", "True", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "bidirectional", "=", "use_bidir", ",", "\n", "dropout", "=", "0.1", "if", "num_layers", ">", "1", "else", "0", ",", "\n", ")", "\n", "\n", "self", ".", "word_drop", "=", "nn", ".", "Dropout", "(", "pdrop", ")", "\n", "\n", "lang_size", "=", "hidden_size", "*", "2", "if", "use_bidir", "else", "hidden_size", "\n", "\n", "#", "\n", "# Language classifier", "\n", "#   num_object_class -> 18", "\n", "if", "use_lang_classifier", ":", "\n", "            ", "self", ".", "lang_cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "p", "=", "pdrop", ")", ",", "\n", "nn", ".", "Linear", "(", "lang_size", ",", "num_object_class", ")", ",", "\n", "#nn.Dropout()", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.lang_module.LangModule.make_mask": [[65, 73], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "def", "make_mask", "(", "self", ",", "feature", ")", ":", "\n", "        ", "\"\"\"\n        return a mask that is True for zero values and False for other values.\n        \"\"\"", "\n", "return", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "abs", "(", "feature", ")", ",", "\n", "dim", "=", "-", "1", "\n", ")", "==", "0", ")", "#.unsqueeze(-1) #.unsqueeze(2)        ", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.lang_module.LangModule.forward": [[75, 113], ["hasattr", "lang_module.LangModule.word_drop", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "lang_module.LangModule.lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "lang_last.permute().contiguous().flatten.permute().contiguous().flatten.size", "lang_last.permute().contiguous().flatten.permute().contiguous().flatten.view", "lang_last.permute().contiguous().flatten.permute().contiguous().flatten.permute().contiguous().flatten", "lang_module.LangModule.bert_model", "data_dict[].cpu", "lang_module.LangModule.make_mask", "lang_module.LangModule.lang_cls", "lang_last.permute().contiguous().flatten.permute().contiguous().flatten.permute().contiguous", "[].bool", "lang_last.permute().contiguous().flatten.permute().contiguous().flatten.permute"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.lang_module.LangModule.make_mask"], ["", "def", "forward", "(", "self", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        encode the input descriptions\n        \"\"\"", "\n", "\n", "if", "hasattr", "(", "self", ",", "'bert_model'", ")", ":", "\n", "            ", "word_embs", "=", "self", ".", "bert_model", "(", "**", "data_dict", "[", "\"lang_feat\"", "]", ")", "\n", "word_embs", "=", "word_embs", ".", "last_hidden_state", "# batch_size, MAX_TEXT_LEN (32), bert_embed_size", "\n", "", "else", ":", "\n", "            ", "word_embs", "=", "data_dict", "[", "\"lang_feat\"", "]", "# batch_size, MAX_TEXT_LEN (32), glove_size", "\n", "\n", "# dropout word embeddings", "\n", "", "word_embs", "=", "self", ".", "word_drop", "(", "word_embs", ")", "\n", "lang_feat", "=", "pack_padded_sequence", "(", "word_embs", ",", "data_dict", "[", "\"lang_len\"", "]", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "\n", "# encode description", "\n", "packed_output", ",", "(", "lang_last", ",", "_", ")", "=", "self", ".", "lstm", "(", "lang_feat", ")", "\n", "lang_output", ",", "_", "=", "pad_packed_sequence", "(", "packed_output", ",", "batch_first", "=", "True", ")", "\n", "data_dict", "[", "\"lang_out\"", "]", "=", "lang_output", "# batch_size, num_words(max_question_length), hidden_size * num_dir", "\n", "\n", "# lang_last: (num_layers * num_directions, batch_size, hidden_size)", "\n", "_", ",", "batch_size", ",", "hidden_size", "=", "lang_last", ".", "size", "(", ")", "\n", "lang_last", "=", "lang_last", ".", "view", "(", "self", ".", "num_layers", ",", "-", "1", ",", "batch_size", ",", "hidden_size", ")", "\n", "# lang_last: num_directions, batch_size, hidden_size", "\n", "lang_last", "=", "lang_last", "[", "-", "1", "]", "\n", "lang_last", "=", "lang_last", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "# batch_size, hidden_size * num_dir", "\n", "\n", "# store the encoded language features", "\n", "data_dict", "[", "\"lang_emb\"", "]", "=", "lang_last", "# batch_size, hidden_size * num_dir", "\n", "if", "self", ".", "use_bert_model", ":", "\n", "            ", "data_dict", "[", "\"lang_mask\"", "]", "=", "~", "data_dict", "[", "\"lang_feat\"", "]", "[", "\"attention_mask\"", "]", "[", ":", ",", ":", "lang_output", ".", "shape", "[", "1", "]", "]", ".", "bool", "(", ")", "# batch_size, num_words (max_question_length)", "\n", "", "else", ":", "\n", "            ", "data_dict", "[", "\"lang_mask\"", "]", "=", "self", ".", "make_mask", "(", "lang_output", ")", "# batch_size, num_words (max_question_length)", "\n", "\n", "# classify", "\n", "", "if", "self", ".", "use_lang_classifier", ":", "\n", "            ", "data_dict", "[", "\"lang_scores\"", "]", "=", "self", ".", "lang_cls", "(", "data_dict", "[", "\"lang_emb\"", "]", ")", "\n", "", "return", "data_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.__init__": [[21, 56], ["torch.Module.__init__", "lib.pointnet2.pointnet2_modules.PointnetSAModuleVotes", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "256", ",", "proposal_size", "=", "128", ",", "radius", "=", "0.3", ",", "nsample", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Vote clustering", "\n", "self", ".", "votenet_hidden_size", "=", "proposal_size", "\n", "\n", "self", ".", "vote_aggregation", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "self", ".", "num_proposal", ",", "\n", "radius", "=", "radius", ",", "# 0.3 (scanrefer, votenet), 5 (scan2cap)", "\n", "nsample", "=", "nsample", ",", "# 16 (scanrefer, votenet), 512 (scan2cap)", "\n", "mlp", "=", "[", "self", ".", "seed_feat_dim", ",", "proposal_size", ",", "proposal_size", ",", "proposal_size", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (2), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "\n", "self", ".", "proposal", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "proposal_size", ",", "proposal_size", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "proposal_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "proposal_size", ",", "proposal_size", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "proposal_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "proposal_size", ",", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "+", "self", ".", "num_class", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.forward": [[58, 82], ["proposal_module.ProposalModule.vote_aggregation", "features.permute().contiguous", "proposal_module.ProposalModule.proposal", "proposal_module.ProposalModule.decode_scores", "features.permute"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.decode_scores"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        Returns:\n            scores: (B,num_proposal,2+3+NH*2+NS*4) \n        \"\"\"", "\n", "\n", "# Farthest point sampling (FPS) on votes", "\n", "# feturea: batch, 256, 1024", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ")", "#  batch, votenet_mlp_size (128), 256", "\n", "\n", "sample_inds", "=", "fps_inds", "\n", "data_dict", "[", "'aggregated_vote_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "data_dict", "[", "'aggregated_vote_features'", "]", "=", "features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_proposal, 128)", "\n", "data_dict", "[", "'aggregated_vote_inds'", "]", "=", "sample_inds", "# (batch_size, num_proposal,) # should be 0,1,2,...,num_proposal", "\n", "\n", "# --------- PROPOSAL GENERATION ---------", "\n", "net", "=", "self", ".", "proposal", "(", "features", ")", "\n", "# net: batch, ???, num_proposals (32, 97, 256)", "\n", "data_dict", "=", "self", ".", "decode_scores", "(", "net", ",", "data_dict", ",", "self", ".", "num_class", ",", "self", ".", "num_heading_bin", ",", "self", ".", "num_size_cluster", ",", "self", ".", "mean_size_arr", ")", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.decode_pred_box": [[83, 105], ["data_dict[].detach().cpu().numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy.unsqueeze", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.unsqueeze().unsqueeze().repeat", "DC.param2obb_batch", "utils.box_util.get_3d_box_batch", "torch.cat.append", "torch.cat.append", "torch.cat.append", "data_dict[].detach().cpu", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.unsqueeze().unsqueeze", "data_dict[].detach", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy.detach", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.detach", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze().detach", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "pred_size_class.detach().cpu().numpy.detach().cpu().numpy.unsqueeze", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy.squeeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.utils.box_util.get_3d_box_batch"], ["", "def", "decode_pred_box", "(", "self", ",", "data_dict", ")", ":", "\n", "# predicted bbox", "\n", "        ", "pred_center", "=", "data_dict", "[", "\"center\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "\"heading_scores\"", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "\"heading_residuals\"", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "data_dict", "[", "\"size_scores\"", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "data_dict", "[", "\"size_residuals\"", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_class", "=", "pred_size_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal,3", "\n", "\n", "batch_size", ",", "num_proposals", ",", "_", "=", "pred_center", ".", "shape", "\n", "pred_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# convert the bbox parameters to bbox corners", "\n", "            ", "pred_obb_batch", "=", "DC", ".", "param2obb_batch", "(", "pred_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "pred_heading_class", "[", "i", "]", ",", "pred_heading_residual", "[", "i", "]", ",", "\n", "pred_size_class", "[", "i", "]", ",", "pred_size_residual", "[", "i", "]", ")", "\n", "pred_bbox_batch", "=", "get_3d_box_batch", "(", "pred_obb_batch", "[", ":", ",", "3", ":", "6", "]", ",", "pred_obb_batch", "[", ":", ",", "6", "]", ",", "pred_obb_batch", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "pred_bboxes", ".", "append", "(", "torch", ".", "from_numpy", "(", "pred_bbox_batch", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "pred_bboxes", "=", "torch", ".", "cat", "(", "pred_bboxes", ",", "dim", "=", "0", ")", "# batch_size, num_proposals, 8, 3", "\n", "return", "pred_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.decode_scores": [[106, 148], ["net.transpose().contiguous", "net_transposed[].view", "proposal_module.ProposalModule.decode_pred_box", "objectness_scores.argmax", "sem_cls_scores.argmax", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "net.transpose", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.models.proposal_module.ProposalModule.decode_pred_box"], ["", "def", "decode_scores", "(", "self", ",", "net", ",", "data_dict", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ")", ":", "\n", "        ", "\"\"\"\n        decode the predicted parameters for the bounding boxes\n\n        \"\"\"", "\n", "#net_transposed = net.transpose(2,1).contiguous() # (batch_size, 1024, ..)", "\n", "net_transposed", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_proposal, ..)", "\n", "batch_size", "=", "net_transposed", ".", "shape", "[", "0", "]", "\n", "num_proposal", "=", "net_transposed", ".", "shape", "[", "1", "]", "\n", "\n", "objectness_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "\n", "base_xyz", "=", "data_dict", "[", "'aggregated_vote_xyz'", "]", "# (batch_size, num_proposal, 3)", "\n", "center", "=", "base_xyz", "+", "net_transposed", "[", ":", ",", ":", ",", "2", ":", "5", "]", "# (batch_size, num_proposal, 3)", "\n", "\n", "heading_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_heading_bin", "]", "\n", "heading_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", ":", "5", "+", "num_heading_bin", "*", "2", "]", "\n", "\n", "size_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "]", "\n", "size_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "]", ".", "view", "(", "[", "batch_size", ",", "num_proposal", ",", "num_size_cluster", ",", "3", "]", ")", "# Bxnum_proposalxnum_size_clusterx3", "\n", "\n", "sem_cls_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", ":", "]", "# Bxnum_proposalx10", "\n", "\n", "# store", "\n", "data_dict", "[", "'objectness_scores'", "]", "=", "objectness_scores", "\n", "data_dict", "[", "'center'", "]", "=", "center", "\n", "data_dict", "[", "'heading_scores'", "]", "=", "heading_scores", "# B x num_proposal x num_heading_bin", "\n", "data_dict", "[", "'heading_residuals_normalized'", "]", "=", "heading_residuals_normalized", "# B x num_proposal x num_heading_bin (should be -1 to 1)", "\n", "data_dict", "[", "'heading_residuals'", "]", "=", "heading_residuals_normalized", "*", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "# B x num_proposal x num_heading_bin", "\n", "data_dict", "[", "'size_scores'", "]", "=", "size_scores", "\n", "data_dict", "[", "'size_residuals_normalized'", "]", "=", "size_residuals_normalized", "\n", "data_dict", "[", "'size_residuals'", "]", "=", "size_residuals_normalized", "*", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "data_dict", "[", "'sem_cls_scores'", "]", "=", "sem_cls_scores", "# B x num_proposal x 10", "\n", "\n", "# processed box info", "\n", "data_dict", "[", "\"bbox_corner\"", "]", "=", "self", ".", "decode_pred_box", "(", "data_dict", ")", "# batch_size, num_proposals, 8, 3 (bounding box corner coordinates)", "\n", "data_dict", "[", "\"bbox_feature\"", "]", "=", "data_dict", "[", "\"aggregated_vote_features\"", "]", "\n", "data_dict", "[", "\"bbox_mask\"", "]", "=", "objectness_scores", ".", "argmax", "(", "-", "1", ")", "\n", "data_dict", "[", "'bbox_sems'", "]", "=", "sem_cls_scores", ".", "argmax", "(", "-", "1", ")", "# # B x num_proposal", "\n", "#data_dict['sem_cls'] = sem_cls_scores.argmax(-1)", "\n", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.batch_load_scannet_data.export_one_scan": [[24, 65], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export", "numpy.logical_not", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "len", "print", "numpy.in1d", "print", "print", "numpy.random.choice", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.export"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.ply'", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.aggregation.json'", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.0.010000.segs.json'", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.txt'", ")", "# includes axisAlignment info for the train set scans.   ", "\n", "mesh_vertices", ",", "aligned_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", ",", "aligned_instance_bboxes", "=", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "LABEL_MAP_FILE", ",", "None", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "aligned_vertices", "=", "aligned_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "if", "instance_bboxes", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "        ", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "# bbox_mask = np.in1d(instance_bboxes[:,-1], OBJ_CLASS_IDS)", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "2", "]", ",", "OBJ_CLASS_IDS", ")", "# match the mesh2cap", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "aligned_instance_bboxes", "=", "aligned_instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No semantic/instance annotation for test scenes\"", ")", "\n", "\n", "", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "aligned_vertices", "=", "aligned_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "print", "(", "\"Shape of points: {}\"", ".", "format", "(", "mesh_vertices", ".", "shape", ")", ")", "\n", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_aligned_vert.npy'", ",", "aligned_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_aligned_bbox.npy'", ",", "aligned_instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.batch_load_scannet_data.batch_export": [[66, 82], ["os.path.exists", "print", "os.mkdir", "os.path.join", "print", "print", "print", "batch_load_scannet_data.export_one_scan", "print", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "SCAN_NAMES", ":", "\n", "        ", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "# if os.path.exists(output_filename_prefix + '_vert.npy'): continue", "\n", "\n", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "\n", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.__init__": [[82, 99], ["numpy.array", "model_util_scannet.ScannetDatasetConfig._get_nyu40id2class", "len", "len", "range", "numpy.load", "model_util_scannet.ScannetDatasetConfig.type2class.keys", "model_util_scannet.ScannetDatasetConfig.type2class.keys", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig._get_nyu40id2class"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "type2class", "=", "{", "'cabinet'", ":", "0", ",", "'bed'", ":", "1", ",", "'chair'", ":", "2", ",", "'sofa'", ":", "3", ",", "'table'", ":", "4", ",", "'door'", ":", "5", ",", "\n", "'window'", ":", "6", ",", "'bookshelf'", ":", "7", ",", "'picture'", ":", "8", ",", "'counter'", ":", "9", ",", "'desk'", ":", "10", ",", "'curtain'", ":", "11", ",", "\n", "'refrigerator'", ":", "12", ",", "'shower curtain'", ":", "13", ",", "'toilet'", ":", "14", ",", "'sink'", ":", "15", ",", "'bathtub'", ":", "16", ",", "'others'", ":", "17", "}", "\n", "self", ".", "class2type", "=", "{", "self", ".", "type2class", "[", "t", "]", ":", "t", "for", "t", "in", "self", ".", "type2class", "}", "\n", "\n", "self", ".", "nyu40ids", "=", "np", ".", "array", "(", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", ",", "36", ",", "37", ",", "38", ",", "39", ",", "40", "]", ")", "# exclude wall (1), floor (2), ceiling (22)", "\n", "self", ".", "nyu40id2class", "=", "self", ".", "_get_nyu40id2class", "(", ")", "\n", "self", ".", "mean_size_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET", ",", "'meta_data/scannet_reference_means.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "\n", "self", ".", "num_class", "=", "len", "(", "self", ".", "type2class", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_heading_bin", "=", "1", "\n", "self", ".", "num_size_cluster", "=", "len", "(", "self", ".", "type2class", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "type_mean_size", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_size_cluster", ")", ":", "\n", "            ", "self", ".", "type_mean_size", "[", "self", ".", "class2type", "[", "i", "]", "]", "=", "self", ".", "mean_size_arr", "[", "i", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig._get_nyu40id2class": [[100, 116], ["range", "line.rstrip", "len", "set", "lines[].split", "int", "open", "model_util_scannet.ScannetDatasetConfig.type2class.keys", "os.path.join"], "methods", ["None"], ["", "", "def", "_get_nyu40id2class", "(", "self", ")", ":", "\n", "        ", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "CONF", ".", "PATH", ".", "SCANNET", ",", "'meta_data/scannetv2-labels.combined.tsv'", ")", ")", "]", "\n", "lines", "=", "lines", "[", "1", ":", "]", "\n", "nyu40ids2class", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "label_classes_set", "=", "set", "(", "self", ".", "type2class", ".", "keys", "(", ")", ")", "\n", "elements", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "nyu40_id", "=", "int", "(", "elements", "[", "4", "]", ")", "\n", "nyu40_name", "=", "elements", "[", "7", "]", "\n", "if", "nyu40_id", "in", "self", ".", "nyu40ids", ":", "\n", "                ", "if", "nyu40_name", "not", "in", "label_classes_set", ":", "\n", "                    ", "nyu40ids2class", "[", "nyu40_id", "]", "=", "self", ".", "type2class", "[", "\"others\"", "]", "\n", "", "else", ":", "\n", "                    ", "nyu40ids2class", "[", "nyu40_id", "]", "=", "self", ".", "type2class", "[", "nyu40_name", "]", "\n", "\n", "", "", "", "return", "nyu40ids2class", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.angle2class": [[117, 129], ["None"], "methods", ["None"], ["", "def", "angle2class", "(", "self", ",", "angle", ")", ":", "\n", "        ", "''' Convert continuous angle to discrete class\n            [optinal] also small regression number from  \n            class center angle to current angle.\n           \n            angle is from 0-2pi (or -pi~pi), class center at 0, 1*(2pi/N), 2*(2pi/N) ...  (N-1)*(2pi/N)\n            return is class of int32 of 0,1,...,N-1 and a number such that\n                class*(2pi/N) + number = angle\n\n            NOT USED.\n        '''", "\n", "assert", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle": [[130, 135], ["None"], "methods", ["None"], ["", "def", "class2angle", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle_batch": [[136, 141], ["numpy.zeros"], "methods", ["None"], ["", "def", "class2angle_batch", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "return", "np", ".", "zeros", "(", "pred_cls", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.size2class": [[142, 147], ["None"], "methods", ["None"], ["", "def", "size2class", "(", "self", ",", "size", ",", "type_name", ")", ":", "\n", "        ", "''' Convert 3D box size (l,w,h) to size class and size residual '''", "\n", "size_class", "=", "self", ".", "type2class", "[", "type_name", "]", "\n", "size_residual", "=", "size", "-", "self", ".", "type_mean_size", "[", "type_name", "]", "\n", "return", "size_class", ",", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size": [[148, 151], ["None"], "methods", ["None"], ["", "def", "class2size", "(", "self", ",", "pred_cls", ",", "residual", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "self", ".", "mean_size_arr", "[", "pred_cls", "]", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size_batch": [[152, 155], ["None"], "methods", ["None"], ["", "def", "class2size_batch", "(", "self", ",", "pred_cls", ",", "residual", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "self", ".", "mean_size_arr", "[", "pred_cls", "]", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb": [[156, 164], ["model_util_scannet.ScannetDatasetConfig.class2angle", "model_util_scannet.ScannetDatasetConfig.class2size", "numpy.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size"], ["", "def", "param2obb", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size", "(", "int", "(", "size_class", ")", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "7", ",", ")", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.param2obb_batch": [[165, 173], ["model_util_scannet.ScannetDatasetConfig.class2angle_batch", "model_util_scannet.ScannetDatasetConfig.class2size_batch", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2angle_batch", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.ScannetDatasetConfig.class2size_batch"], ["", "def", "param2obb_batch", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle_batch", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size_batch", "(", "size_class", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "heading_class", ".", "shape", "[", "0", "]", ",", "7", ")", ")", "\n", "obb", "[", ":", ",", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", ":", ",", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", ":", ",", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "", "", ""]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.in_hull": [[13, 18], ["isinstance", "Delaunay", "Delaunay.find_simplex"], "function", ["None"], ["def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "from", "scipy", ".", "spatial", "import", "Delaunay", "\n", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "        ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "return", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.extract_pc_in_box3d": [[19, 23], ["model_util_scannet.in_hull"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.in_hull"], ["", "def", "extract_pc_in_box3d", "(", "pc", ",", "box3d", ")", ":", "\n", "    ", "''' pc: (N,3), box3d: (8,3) '''", "\n", "box3d_roi_inds", "=", "in_hull", "(", "pc", "[", ":", ",", "0", ":", "3", "]", ",", "box3d", ")", "\n", "return", "pc", "[", "box3d_roi_inds", ",", ":", "]", ",", "box3d_roi_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.rotate_aligned_boxes": [[24, 46], ["numpy.dot", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.stack", "numpy.concatenate", "numpy.transpose", "numpy.zeros", "numpy.dot", "numpy.max", "numpy.max", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_aligned_boxes", "(", "input_boxes", ",", "rot_mat", ")", ":", "\n", "    ", "centers", ",", "lengths", "=", "input_boxes", "[", ":", ",", "0", ":", "3", "]", ",", "input_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "new_centers", "=", "np", ".", "dot", "(", "centers", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "dx", ",", "dy", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "1", "]", "/", "2.0", "\n", "new_x", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "new_y", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "\n", "for", "i", ",", "crnr", "in", "enumerate", "(", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", "]", ")", ":", "\n", "        ", "crnrs", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "crnrs", "[", ":", ",", "0", "]", "=", "crnr", "[", "0", "]", "*", "dx", "\n", "crnrs", "[", ":", ",", "1", "]", "=", "crnr", "[", "1", "]", "*", "dy", "\n", "crnrs", "=", "np", ".", "dot", "(", "crnrs", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "new_x", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "0", "]", "\n", "new_y", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "1", "]", "\n", "\n", "\n", "", "new_dx", "=", "2.0", "*", "np", ".", "max", "(", "new_x", ",", "1", ")", "\n", "new_dy", "=", "2.0", "*", "np", ".", "max", "(", "new_y", ",", "1", ")", "\n", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_dx", ",", "new_dy", ",", "lengths", "[", ":", ",", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "new_centers", ",", "new_lengths", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.model_util_scannet.rotate_aligned_boxes_along_axis": [[47, 80], ["numpy.dot", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.concatenate", "numpy.transpose", "numpy.zeros", "numpy.dot", "numpy.max", "numpy.max", "numpy.stack", "numpy.transpose", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "rotate_aligned_boxes_along_axis", "(", "input_boxes", ",", "rot_mat", ",", "axis", ")", ":", "\n", "    ", "centers", ",", "lengths", "=", "input_boxes", "[", ":", ",", "0", ":", "3", "]", ",", "input_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "new_centers", "=", "np", ".", "dot", "(", "centers", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "if", "axis", "==", "\"x\"", ":", "\n", "        ", "d1", ",", "d2", "=", "lengths", "[", ":", ",", "1", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "2", "]", "/", "2.0", "\n", "", "elif", "axis", "==", "\"y\"", ":", "\n", "        ", "d1", ",", "d2", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "2", "]", "/", "2.0", "\n", "", "else", ":", "\n", "        ", "d1", ",", "d2", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "1", "]", "/", "2.0", "\n", "\n", "", "new_1", "=", "np", ".", "zeros", "(", "(", "d1", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "new_2", "=", "np", ".", "zeros", "(", "(", "d1", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "\n", "for", "i", ",", "crnr", "in", "enumerate", "(", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", "]", ")", ":", "\n", "        ", "crnrs", "=", "np", ".", "zeros", "(", "(", "d1", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "crnrs", "[", ":", ",", "0", "]", "=", "crnr", "[", "0", "]", "*", "d1", "\n", "crnrs", "[", ":", ",", "1", "]", "=", "crnr", "[", "1", "]", "*", "d2", "\n", "crnrs", "=", "np", ".", "dot", "(", "crnrs", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "new_1", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "0", "]", "\n", "new_2", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "1", "]", "\n", "\n", "", "new_d1", "=", "2.0", "*", "np", ".", "max", "(", "new_1", ",", "1", ")", "\n", "new_d2", "=", "2.0", "*", "np", ".", "max", "(", "new_2", ",", "1", ")", "\n", "\n", "if", "axis", "==", "\"x\"", ":", "\n", "        ", "new_lengths", "=", "np", ".", "stack", "(", "(", "lengths", "[", ":", ",", "0", "]", ",", "new_d1", ",", "new_d2", ")", ",", "axis", "=", "1", ")", "\n", "", "elif", "axis", "==", "\"y\"", ":", "\n", "        ", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_d1", ",", "lengths", "[", ":", ",", "1", "]", ",", "new_d2", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_d1", ",", "new_d2", ",", "lengths", "[", ":", ",", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "[", "new_centers", ",", "new_lengths", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.read_aggregation": [[16, 32], ["open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.read_segmentation": [[34, 46], ["open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.export": [[48, 155], ["scannet_utils.read_label_mapping", "scannet_utils.read_mesh_vertices_rgb_normal", "open().readlines", "os.path.isfile", "numpy.array().reshape", "numpy.ones", "numpy.dot", "numpy.copy", "print", "load_scannet_data.read_aggregation", "load_scannet_data.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "object_id_to_segs.items", "numpy.zeros", "numpy.zeros", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "open", "np.array().reshape.transpose", "numpy.unique", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.array", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.array", "float", "numpy.array", "list", "len", "len", "line.rstrip().strip().split", "object_id_to_segs.keys", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_mesh_vertices_rgb_normal", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.read_aggregation", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.read_segmentation"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "scannet_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", "\n", "# mesh_vertices = scannet_utils.read_mesh_vertices_rgb(mesh_file)", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb_normal", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "axis_align_matrix", "=", "None", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "\n", "", "", "if", "axis_align_matrix", "!=", "None", ":", "\n", "        ", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "aligned_vertices", "=", "np", ".", "copy", "(", "mesh_vertices", ")", "\n", "aligned_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No axis alignment matrix found\"", ")", "\n", "aligned_vertices", "=", "mesh_vertices", "\n", "\n", "# Load semantic and instance labels", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "agg_file", ")", ":", "\n", "        ", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "            ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "            ", "for", "seg", "in", "segs", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                    ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "8", ")", ")", "# also include object id", "\n", "aligned_instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "8", ")", ")", "# also include object id", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "            ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "\n", "# bboxes in the original meshes", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "label_id", ",", "obj_id", "-", "1", "]", ")", "# also include object id", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "# bboxes in the aligned meshes", "\n", "obj_pc", "=", "aligned_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "label_id", ",", "obj_id", "-", "1", "]", ")", "# also include object id", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "aligned_instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "", "", "else", ":", "\n", "# use zero as placeholders for the test scene", "\n", "        ", "print", "(", "\"use placeholders\"", ")", "\n", "num_verts", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", "# also include object id", "\n", "aligned_instance_bboxes", "=", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", "# also include object id", "\n", "\n", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "output_file", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_aligned_vert.npy'", ",", "aligned_vertices", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_sem_label.npy'", ",", "label_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_aligned_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n", "", "return", "mesh_vertices", ",", "aligned_vertices", ",", "label_ids", ",", "instance_ids", ",", "instance_bboxes", ",", "aligned_instance_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.main": [[156, 169], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export", "os.path.split"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.load_scannet_data.export"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--scan_path'", ",", "required", "=", "True", ",", "help", "=", "'path to scannet scene (e.g., data/ScanNet/v2/scene0000_00'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_file'", ",", "required", "=", "True", ",", "help", "=", "'output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_map_file'", ",", "required", "=", "True", ",", "help", "=", "'path to scannetv2-labels.combined.tsv'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "scan_name", "=", "os", ".", "path", ".", "split", "(", "opt", ".", "scan_path", ")", "[", "-", "1", "]", "\n", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'_vh_clean_2.ply'", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'.aggregation.json'", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'_vh_clean_2.0.010000.segs.json'", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'.txt'", ")", "# includes axisAlignment info for the train set scans.", "\n", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "opt", ".", "label_map_file", ",", "opt", ".", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.normalize_v3": [[18, 25], ["numpy.sqrt"], "function", ["None"], ["", "def", "normalize_v3", "(", "arr", ")", ":", "\n", "    ", "''' Normalize a numpy array of 3 component vectors shape=(n,3) '''", "\n", "lens", "=", "np", ".", "sqrt", "(", "arr", "[", ":", ",", "0", "]", "**", "2", "+", "arr", "[", ":", ",", "1", "]", "**", "2", "+", "arr", "[", ":", ",", "2", "]", "**", "2", ")", "\n", "arr", "[", ":", ",", "0", "]", "/=", "(", "lens", "+", "1e-8", ")", "\n", "arr", "[", ":", ",", "1", "]", "/=", "(", "lens", "+", "1e-8", ")", "\n", "arr", "[", ":", ",", "2", "]", "/=", "(", "lens", "+", "1e-8", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.compute_normal": [[26, 46], ["numpy.zeros", "numpy.cross", "scannet_utils.normalize_v3", "scannet_utils.normalize_v3"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.normalize_v3", "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.normalize_v3"], ["", "def", "compute_normal", "(", "vertices", ",", "faces", ")", ":", "\n", "#Create a zeroed array with the same type and shape as our vertices i.e., per vertex normal", "\n", "    ", "normals", "=", "np", ".", "zeros", "(", "vertices", ".", "shape", ",", "dtype", "=", "vertices", ".", "dtype", ")", "\n", "#Create an indexed view into the vertex array using the array of three indices for triangles", "\n", "tris", "=", "vertices", "[", "faces", "]", "\n", "#Calculate the normal for all the triangles, by taking the cross product of the vectors v1-v0, and v2-v0 in each triangle             ", "\n", "n", "=", "np", ".", "cross", "(", "tris", "[", ":", ":", ",", "1", "]", "-", "tris", "[", ":", ":", ",", "0", "]", ",", "tris", "[", ":", ":", ",", "2", "]", "-", "tris", "[", ":", ":", ",", "0", "]", ")", "\n", "# n is now an array of normals per triangle. The length of each normal is dependent the vertices, ", "\n", "# we need to normalize these, so that our next step weights each normal equally.", "\n", "normalize_v3", "(", "n", ")", "\n", "# now we have a normalized array of normals, one per triangle, i.e., per triangle normals.", "\n", "# But instead of one per triangle (i.e., flat shading), we add to each vertex in that triangle, ", "\n", "# the triangles' normal. Multiple triangles would then contribute to every vertex, so we need to normalize again afterwards.", "\n", "# The cool part, we can actually add the normals through an indexed view of our (zeroed) per vertex normal array", "\n", "normals", "[", "faces", "[", ":", ",", "0", "]", "]", "+=", "n", "\n", "normals", "[", "faces", "[", ":", ",", "1", "]", "]", "+=", "n", "\n", "normals", "[", "faces", "[", ":", ",", "2", "]", "]", "+=", "n", "\n", "normalize_v3", "(", "normals", ")", "\n", "\n", "return", "normals", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.represents_int": [[47, 54], ["int"], "function", ["None"], ["", "def", "represents_int", "(", "s", ")", ":", "\n", "    ", "''' if string s represents an int. '''", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_label_mapping": [[56, 66], ["os.path.isfile", "dict", "scannet_utils.represents_int", "open", "csv.DictReader", "int", "list", "int", "dict.keys", "dict.items"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.represents_int"], ["", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "        ", "mapping", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", "}", "\n", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_mesh_vertices": [[67, 79], ["os.path.isfile", "open", "PlyData.read", "numpy.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ for each vertex.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_mesh_vertices_rgb": [[80, 96], ["os.path.isfile", "open", "PlyData.read", "numpy.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.read_mesh_vertices_rgb_normal": [[97, 117], ["os.path.isfile", "open", "PlyData.read", "numpy.zeros", "numpy.array", "numpy.array", "scannet_utils.compute_normal"], "function", ["home.repos.pwc.inspect_result.atr-dbi_scanqa.scannet.scannet_utils.compute_normal"], ["", "def", "read_mesh_vertices_rgb_normal", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ RGB normals point cloud from filename PLY file \"\"\"", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "filename", ")", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "9", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "\n", "# compute normals", "\n", "xyz", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", ",", "_", ",", "_", ",", "_", ",", "_", "in", "plydata", "[", "\"vertex\"", "]", ".", "data", "]", ")", "\n", "face", "=", "np", ".", "array", "(", "[", "f", "[", "0", "]", "for", "f", "in", "plydata", "[", "\"face\"", "]", ".", "data", "]", ")", "\n", "nxnynz", "=", "compute_normal", "(", "xyz", ",", "face", ")", "\n", "vertices", "[", ":", ",", "6", ":", "]", "=", "nxnynz", "\n", "", "return", "vertices", "\n", "", ""]]}