{"home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.__init__": [[35, 49], ["img_exp.ImgExp.__init__"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.__init__"], ["def", "__init__", "(", "self", ",", "model", "=", "None", ",", "model_name", "=", "None", ",", "\n", "misc_save_info", "=", "None", ",", "batch_size", "=", "32", ",", "model_type", "=", "None", ",", "callbacks_list", "=", "None", ",", "pre_load", "=", "None", ",", "initial_epoch", "=", "0", ",", "epochs", "=", "1", ",", "dset", "=", "'Thermal'", ",", "win_len", "=", "8", ",", "hor_flip", "=", "False", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ")", ":", "\n", "\n", "            ", "ImgExp", ".", "__init__", "(", "self", ",", "model", "=", "model", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "model_name", "=", "model_name", ",", "batch_size", "=", "batch_size", ",", "model_type", "=", "model_type", ",", "pre_load", "=", "pre_load", ",", "initial_epoch", "=", "initial_epoch", ",", "epochs", "=", "epochs", ",", "hor_flip", "=", "hor_flip", ",", "dset", "=", "dset", ")", "\n", "\n", "self", ".", "win_len", "=", "win_len", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.set_train_data": [[50, 74], ["os.path.isfile", "print", "numpy.load", "print", "data_management.init_windowed_arr", "seq_exp.SeqExp.init_flipped_by_win", "numpy.concatenate", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.init_windowed_arr", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.init_flipped_by_win"], ["", "def", "set_train_data", "(", "self", ",", "raw", "=", "False", ",", "mmap_mode", "=", "None", ")", ":", "#TODO init windows from h5py if no npData found ", "\n", "                ", "'''\n                loads or initazlzes windowed train data,  and sets self.train_data accordingly\n                '''", "\n", "if", "self", ".", "dset", "==", "'Thermal'", ":", "#TODO rename npdata in accordance with new initialzer", "\n", "                        ", "to_load", "=", "root_drive", "+", "'/npData/train_data_NonFalls_proc_windowed_by_vid-win_{}.npy'", ".", "format", "(", "self", ".", "win_len", ")", "\n", "", "else", ":", "\n", "                        ", "to_load", "=", "root_drive", "+", "'/npData/{}/ADL_data-proc-win_{}.npy'", ".", "format", "(", "self", ".", "dset", ",", "self", ".", "win_len", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "to_load", ")", ":", "\n", "                    ", "print", "(", "'npData found, loading..'", ")", "\n", "self", ".", "train_data", "=", "np", ".", "load", "(", "to_load", ",", "mmap_mode", "=", "mmap_mode", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'npData not found, initializing..'", ")", "\n", "\n", "self", ".", "train_data", "=", "init_windowed_arr", "(", "dset", "=", "self", ".", "dset", ",", "ADL_only", "=", "True", ",", "win_len", "=", "self", ".", "win_len", ",", "\n", "img_width", "=", "self", ".", "img_width", ",", "img_height", "=", "self", ".", "img_height", ")", "\n", "\n", "", "if", "self", ".", "hor_flip", "==", "True", ":", "\n", "\n", "                        ", "to_load_flip", "=", "'./npData/hor_flip-by_window/{}'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "to_load", ")", ")", "\n", "data_flip", "=", "self", ".", "init_flipped_by_win", "(", "to_load_flip", ")", "\n", "\n", "self", ".", "train_data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "train_data", ",", "data_flip", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.train": [[77, 102], ["keras.callbacks.ModelCheckpoint", "time.time", "print", "keras.callbacks.CSVLogger", "seq_exp.SeqExp.model.fit", "seq_exp.SeqExp.save_exp", "os.path.isdir", "os.mkdir", "str"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.save_exp"], ["", "", "def", "train", "(", "self", ",", "sample_weight", "=", "None", ")", ":", "\n", "                ", "\"\"\"\n                trains a sequential autoencoder on windowed data. That is, sequeneces of contigous frames\n                are reconstucted.\n                \"\"\"", "\n", "\n", "model_name", "=", "self", ".", "model_name", "\n", "base", "=", "'./Checkpoints/{}'", ".", "format", "(", "self", ".", "dset", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "base", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "base", ")", "\n", "\n", "", "checkpointer", "=", "ModelCheckpoint", "(", "filepath", "=", "base", "+", "'/'", "+", "model_name", "+", "'-'", "+", "'{epoch:03d}-{loss:.3f}.hdf5'", ",", "period", "=", "100", ",", "verbose", "=", "1", ")", "\n", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'./Checkpoints/'", "+", "model_name", "+", "'-'", "+", "'.{epoch:03d}-{loss:.3f}.hdf5'", ")", "\n", "csv_logger", "=", "CSVLogger", "(", "'./Logs/'", "+", "model_name", "+", "'training-'", "+", "str", "(", "timestamp", ")", "+", "'.log'", ")", "\n", "\n", "#callbacks_list = [checkpointer, early_stopper, csv_logger]", "\n", "callbacks_list", "=", "[", "csv_logger", ",", "checkpointer", "]", "\n", "\n", "\n", "self", ".", "model", ".", "fit", "(", "self", ".", "train_data", ",", "self", ".", "train_data", ",", "epochs", "=", "self", ".", "epochs", ",", "batch_size", "=", "self", ".", "batch_size", ",", "verbose", "=", "2", ",", "callbacks", "=", "callbacks_list", ",", "sample_weight", "=", "sample_weight", ")", "\n", "self", ".", "save_exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.init_flipped_by_win": [[103, 117], ["os.path.isfile", "numpy.load", "flip_windowed_arr.reshape", "print", "flip_windowed_arr", "len"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.flip_windowed_arr"], ["", "def", "init_flipped_by_win", "(", "self", ",", "to_load_flip", ")", ":", "\n", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "to_load_flip", ")", ":", "\n", "                        ", "data_flip", "=", "np", ".", "load", "(", "to_load_flip", ")", "\n", "data_flip", "=", "data_flip", ".", "reshape", "(", "len", "(", "data_flip", ")", ",", "self", ".", "train_data", ".", "shape", "[", "1", "]", ",", "self", ".", "train_data", ".", "shape", "[", "2", "]", ",", "self", ".", "train_data", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "\n", "return", "data_flip", "\n", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'creating flipped by window data..'", ")", "\n", "data_flip", "=", "flip_windowed_arr", "(", "self", ".", "train_data", ")", "\n", "\n", "return", "data_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.get_MSE": [[120, 157], ["print", "time.time", "model.predict", "print", "print", "recons_seq.reshape.reshape.reshape", "data_management.create_windowed_arr.reshape", "numpy.mean", "util.agg_window", "data_management.create_windowed_arr.reshape", "data_management.create_windowed_arr", "time.time", "len", "len", "len", "numpy.power", "len"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.agg_window", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr"], ["", "", "def", "get_MSE", "(", "self", ",", "test_data", ",", "agg_type", "=", "'x_std'", ")", ":", "\n", "            ", "'''\n            MSE for sequential data (video). Uses data chunking with memap for SDU-Filled. Assumes windowed\n            \n            Params:\n                ndarray test_data: data used to test model (reconstrcut). Of \n                    shape (samples, window length, img_width, img_height)\n                agg_type: how to aggregate windowde scores\n\n            Returns:\n                ndarray: Mean squared error between test_data windows and reconstructed windows, aggregated.\n                This gives (samples,) shape\n    \n            '''", "\n", "\n", "import", "time", "\n", "\n", "\n", "img_width", ",", "img_height", ",", "win_len", ",", "model", ",", "stride", "=", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "self", ".", "win_len", ",", "self", ".", "model", ",", "1", "\n", "print", "(", "'test_data.shape'", ",", "test_data", ".", "shape", ")", "\n", "if", "test_data", ".", "shape", "[", "1", "]", "!=", "win_len", ":", "#Not windowed", "\n", "                ", "test_data", "=", "test_data", ".", "reshape", "(", "len", "(", "test_data", ")", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "test_data", "=", "create_windowed_arr", "(", "test_data", ",", "stride", ",", "win_len", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "recons_seq", "=", "model", ".", "predict", "(", "test_data", ")", "#(samples-win_len+1, win_len, wd,ht,1)", "\n", "print", "(", "recons_seq", ".", "shape", ")", "\n", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'elapsed time for num frames'", ",", "elapsed_time", ",", "len", "(", "test_data", ")", ")", "\n", "recons_seq", "=", "recons_seq", ".", "reshape", "(", "len", "(", "recons_seq", ")", ",", "win_len", ",", "img_height", "*", "img_width", ")", "#(samples-win_len+1, 5, wd*ht)", "\n", "test_data", "=", "test_data", ".", "reshape", "(", "len", "(", "test_data", ")", ",", "win_len", ",", "img_height", "*", "img_width", ")", "#(samples-win_len+1, 5, wd*ht)", "\n", "\n", "RE", "=", "np", ".", "mean", "(", "np", ".", "power", "(", "test_data", "-", "recons_seq", ",", "2", ")", ",", "axis", "=", "2", ")", "# (samples-win_len+1,win_len)", "\n", "\n", "RE", "=", "agg_window", "(", "RE", ",", "agg_type", ")", "\n", "\n", "return", "RE", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.get_MSE_all_agg": [[158, 192], ["model.predict", "recons_seq.reshape.reshape.reshape", "test_data.reshape.reshape.reshape", "numpy.mean", "len", "len", "numpy.power", "util.agg_window"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.agg_window"], ["", "def", "get_MSE_all_agg", "(", "self", ",", "test_data", ")", ":", "\n", "            ", "\"\"\"\n            Gets MSE for all aggregate types 'x_std', 'x_mean', 'in_std', 'in_mean'.\n\n            Params:\n                ndarray test_data: data used to test model (reconstrcut). Of \n                shape (samples, window length, img_width, img_height)\n\n            Returns:\n                dictionary with keys 'x_std', 'x_mean', 'in_std', 'in_mean', and values \n                ndarrays of shape (samples,)\n            \"\"\"", "\n", "\n", "img_width", ",", "img_height", ",", "win_len", ",", "model", "=", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "self", ".", "win_len", ",", "self", ".", "model", "\n", "\n", "\n", "\n", "recons_seq", "=", "model", ".", "predict", "(", "test_data", ")", "#(samples-win_len+1, win_len, wd,ht,1)", "\n", "\n", "recons_seq_or", "=", "recons_seq", "\n", "recons_seq", "=", "recons_seq", ".", "reshape", "(", "len", "(", "recons_seq", ")", ",", "win_len", ",", "img_height", "*", "img_width", ")", "#(samples-win_len+1, 5, wd*ht)", "\n", "test_data", "=", "test_data", ".", "reshape", "(", "len", "(", "test_data", ")", ",", "win_len", ",", "img_height", "*", "img_width", ")", "#(samples-win_len+1, 5, wd*ht)", "\n", "\n", "RE", "=", "np", ".", "mean", "(", "np", ".", "power", "(", "test_data", "-", "recons_seq", ",", "2", ")", ",", "axis", "=", "2", ")", "# (samples-win_len+1,win_len)", "\n", "\n", "RE_dict", "=", "{", "}", "\n", "\n", "agg_type_list", "=", "[", "'x_std'", ",", "'x_mean'", ",", "'in_std'", ",", "'in_mean'", "]", "\n", "\n", "for", "agg_type", "in", "agg_type_list", ":", "\n", "\n", "                ", "RE_dict", "[", "agg_type", "]", "=", "agg_window", "(", "RE", ",", "agg_type", ")", "\n", "\n", "", "return", "RE_dict", ",", "recons_seq_or", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.test": [[193, 320], ["print", "print", "util.generate_vid_keys", "len", "print", "numpy.ones", "numpy.ones", "os.path.basename().split", "model.summary", "os.path.isfile", "print", "init_videos", "h5py.File", "print", "numpy.mean", "numpy.std", "util.join_mean_std", "numpy.mean", "numpy.std", "util.join_mean_std", "numpy.vstack", "print", "pandas.DataFrame", "print", "print", "pandas.DataFrame.to_csv", "print", "vid_total.reshape", "data_management.create_windowed_arr", "seq_exp.SeqExp.get_MSE_all_agg", "std_total.append", "mean_total.append", "labels_total_l.append", "util.get_output", "util.get_output", "util.gather_auc_avg_per_tol", "range", "os.path.isdir", "os.makedirs", "os.path.basename", "len", "print", "util.animate_fall_detect_Spresent", "os.path.isdir", "os.makedirs", "int", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.generate_vid_keys", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_videos", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.join_mean_std", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.join_mean_std", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.seq_exp.SeqExp.get_MSE_all_agg", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.gather_auc_avg_per_tol", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.animate_fall_detect_Spresent"], ["", "def", "test", "(", "self", ",", "animate", "=", "False", ")", ":", "\n", "\n", "            ", "'''\n            Gets AUC ROC/PR for all videos, using various (20) scoring schemes. Saves scores to \n            './AEComparisons/all_scores/self.dset/self.model_name.csv'\n\n            Assumes self.model has been initialized\n            '''", "\n", "\n", "dset", ",", "to_load", ",", "img_width", ",", "img_height", "=", "self", ".", "dset", ",", "self", ".", "pre_load", ",", "self", ".", "img_width", ",", "self", ".", "img_height", "\n", "stride", "=", "1", "\n", "win_len", "=", "self", ".", "win_len", "\n", "\n", "\n", "model", "=", "self", ".", "model", "#TODO this can go in constructor", "\n", "model_name", "=", "os", ".", "path", ".", "basename", "(", "to_load", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "print", "(", "model_name", ")", "\n", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "aucs", "=", "[", "]", "\n", "std_total", "=", "[", "]", "\n", "mean_total", "=", "[", "]", "\n", "labels_total_l", "=", "[", "]", "\n", "vid_index", "=", "0", "#vid index TODO rename", "\n", "\n", "vid_dir_keys_Fall", "=", "generate_vid_keys", "(", "'Fall'", ",", "dset", "=", "dset", ")", "\n", "num_vids", "=", "len", "(", "vid_dir_keys_Fall", ")", "\n", "print", "(", "'num_vids'", ",", "num_vids", ")", "\n", "\n", "ROC_mat", "=", "np", ".", "ones", "(", "(", "num_vids", ",", "2", "*", "win_len", "+", "2", ")", ")", "# 20 scores-Xstd,Xmean,tols std..,tols mean..", "\n", "PR_mat", "=", "np", ".", "ones", "(", "(", "num_vids", ",", "2", "*", "win_len", "+", "2", ")", ")", "\n", "\n", "path", "=", "root_drive", "+", "'H5Data/{}/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "                ", "print", "(", "'initializing h5py..'", ")", "\n", "init_videos", "(", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "raw", "=", "False", ",", "dset", "=", "dset", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hf", ":", "\n", "\n", "                ", "data_dict", "=", "hf", "[", "'{}/Processed/Split_by_video'", ".", "format", "(", "dset", ")", "]", "\n", "\n", "for", "Fall_name", "in", "vid_dir_keys_Fall", ":", "\n", "                    ", "print", "(", "Fall_name", ")", "\n", "\n", "vid_total", "=", "data_dict", "[", "Fall_name", "]", "[", "'Data'", "]", "[", ":", "]", "\n", "labels_total", "=", "data_dict", "[", "Fall_name", "]", "[", "'Labels'", "]", "[", ":", "]", "\n", "\n", "display_name", "=", "Fall_name", "\n", "\n", "test_labels", "=", "labels_total", "\n", "test_data", "=", "vid_total", ".", "reshape", "(", "len", "(", "vid_total", ")", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "test_data_windowed", "=", "create_windowed_arr", "(", "test_data", ",", "stride", ",", "win_len", ")", "\n", "\n", "RE_dict", ",", "recons_seq", "=", "self", ".", "get_MSE_all_agg", "(", "test_data_windowed", ")", "#Return dict with value for each score style ", "\n", "\n", "in_mean", "=", "RE_dict", "[", "'in_mean'", "]", "\n", "in_std", "=", "RE_dict", "[", "'in_std'", "]", "\n", "\n", "x_std", "=", "RE_dict", "[", "'x_std'", "]", "\n", "x_mean", "=", "RE_dict", "[", "'x_mean'", "]", "\n", "\n", "\n", "std_total", ".", "append", "(", "x_std", ")", "\n", "mean_total", ".", "append", "(", "x_mean", ")", "\n", "labels_total_l", ".", "append", "(", "labels_total", ")", "\n", "inwin_labels", "=", "labels_total", "[", "win_len", "-", "1", ":", "]", "\n", "\n", "auc_x_std", ",", "conf_mat", ",", "g_mean", ",", "ap_x_std", "=", "get_output", "(", "labels", "=", "test_labels", ",", "predictions", "=", "x_std", ",", "data_option", "=", "'NA'", ",", "to_plot", "=", "False", ")", "\n", "auc_x_mean", ",", "conf_mat", ",", "g_mean", ",", "ap_x_mean", "=", "get_output", "(", "labels", "=", "test_labels", ",", "predictions", "=", "x_mean", ",", "data_option", "=", "'NA'", ",", "to_plot", "=", "False", ")", "\n", "\n", "ROC_mat", "[", "vid_index", ",", "0", "]", "=", "auc_x_std", "\n", "ROC_mat", "[", "vid_index", ",", "1", "]", "=", "auc_x_mean", "\n", "\n", "tol_mat", ",", "tol_keys", "=", "gather_auc_avg_per_tol", "(", "in_mean", ",", "in_std", ",", "labels", "=", "test_labels", ",", "win_len", "=", "win_len", ")", "\n", "AUROC_tol", "=", "tol_mat", "[", "0", "]", "\n", "AUPR_tol", "=", "tol_mat", "[", "1", "]", "\n", "num_scores_tol", "=", "tol_mat", ".", "shape", "[", "1", "]", "\n", "\n", "\n", "for", "k", "in", "range", "(", "num_scores_tol", ")", ":", "\n", "                        ", "j", "=", "k", "+", "2", "#start at 2, first two were for X_std and X_mean", "\n", "ROC_mat", "[", "vid_index", ",", "j", "]", "=", "AUROC_tol", "[", "k", "]", "\n", "PR_mat", "[", "vid_index", ",", "j", "]", "=", "AUPR_tol", "[", "k", "]", "\n", "\n", "", "PR_mat", "[", "vid_index", ",", "0", "]", "=", "ap_x_std", "\n", "PR_mat", "[", "vid_index", ",", "1", "]", "=", "ap_x_mean", "\n", "\n", "vid_index", "+=", "1", "\n", "\n", "if", "animate", "==", "True", ":", "\n", "                        ", "ani_dir", "=", "'./Animation/{}/'", ".", "format", "(", "dset", ")", "\n", "ani_dir", "=", "ani_dir", "+", "'/{}'", ".", "format", "(", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ani_dir", ")", ":", "\n", "                            ", "os", ".", "makedirs", "(", "ani_dir", ")", "\n", "", "print", "(", "'saving animation to {}'", ".", "format", "(", "ani_dir", ")", ")", "\n", "animate_fall_detect_Spresent", "(", "testfall", "=", "test_data", ",", "recons", "=", "recons_seq", "[", ":", ",", "int", "(", "np", ".", "floor", "(", "win_len", "/", "2", ")", ")", ",", ":", "]", ",", "scores", "=", "x_mean", ",", "to_save", "=", "ani_dir", "+", "'/{}.mp4'", ".", "format", "(", "Fall_name", ")", ")", "\n", "\n", "\n", "#    break", "\n", "", "", "print", "(", "'ROC_mat.shape'", ",", "ROC_mat", ".", "shape", ")", "\n", "AUROC_avg", "=", "np", ".", "mean", "(", "ROC_mat", ",", "axis", "=", "0", ")", "\n", "AUROC_std", "=", "np", ".", "std", "(", "ROC_mat", ",", "axis", "=", "0", ")", "\n", "AUROC_avg_std", "=", "join_mean_std", "(", "AUROC_avg", ",", "AUROC_std", ")", "\n", "# print(AUROC_std)", "\n", "AUPR_avg", "=", "np", ".", "mean", "(", "PR_mat", ",", "axis", "=", "0", ")", "\n", "AUPR_std", "=", "np", ".", "std", "(", "PR_mat", ",", "axis", "=", "0", ")", "\n", "\n", "AUPR_avg_std", "=", "join_mean_std", "(", "AUPR_avg", ",", "AUPR_std", ")", "\n", "total", "=", "np", ".", "vstack", "(", "(", "AUROC_avg_std", ",", "AUPR_avg_std", ")", ")", "\n", "print", "(", "tol_keys", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "total", ",", "index", "=", "[", "'AUROC'", ",", "'AUPR'", "]", ",", "columns", "=", "[", "'X-STD'", ",", "'X-Mean'", "]", "+", "tol_keys", ")", "\n", "\n", "print", "(", "df", ")", "\n", "base", "=", "'./AEComparisons/all_scores/{}/'", ".", "format", "(", "self", ".", "dset", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "base", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "base", ")", "\n", "\n", "", "save_path", "=", "'./AEComparisons/all_scores/{}/{}.csv'", ".", "format", "(", "dset", ",", "model_name", ")", "\n", "\n", "print", "(", "save_path", ")", "\n", "df", ".", "to_csv", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.dae_main_train.init_dae_exp": [[7, 32], ["models.DAE", "ae_exp.AEExp"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.DAE"], ["def", "init_dae_exp", "(", "pre_load", "=", "None", ",", "regularizer_list", "=", "[", "]", ")", ":", "\n", "\n", "\t", "'''\n\tThese are the training setting. \n\t'''", "\n", "batch_size", "=", "16", "\n", "\n", "epochs", "=", "1", "\n", "img_width", ",", "img_height", "=", "64", ",", "64", "\n", "hor_flip", "=", "False", "\n", "\n", "initial_epoch", "=", "0", "\n", "\n", "dset", "=", "'UR-Filled'", "#Choose data set here", "\n", "\n", "autoencooder", ",", "model_name", ",", "model_type", "=", "DAE", "(", "img_width", "=", "img_width", ",", "\n", "img_height", "=", "img_height", ",", "regularizer_list", "=", "regularizer_list", ")", "\n", "\n", "DAE_exp", "=", "AEExp", "(", "model", "=", "autoencooder", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "model_name", "=", "model_name", ",", "model_type", "=", "model_type", ",", "pre_load", "=", "pre_load", ",", "initial_epoch", "=", "initial_epoch", ",", "epochs", "=", "epochs", ",", "batch_size", "=", "batch_size", ",", "dset", "=", "dset", ",", "hor_flip", "=", "hor_flip", "\n", ")", "\n", "\n", "return", "DAE_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.DAE": [[18, 66], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Input", "keras.layers.Reshape", "keras.regularizers.l1", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.Dropout"], "function", ["None"], ["def", "DAE", "(", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "regularizer_list", "=", "[", "]", ")", ":", "\n", "\n", "\t", "\"\"\"\n\tlist regularizer_list: List of strings indicating which regulairzers to use, options are \n\t'L1L2' and 'Dropout'. Can use both. Assume regularizer list ordered like ['L1L2', 'Dropout']\n\t\"\"\"", "\n", "encoding_dim", "=", "10", "\n", "encoding_dim", "=", "500", "\n", "flatenned_dim", "=", "img_width", "*", "img_height", "\n", "input_shape", "=", "(", "img_width", ",", "img_height", ",", "1", ")", "\n", "input_img_0", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "\n", "input_img", "=", "Reshape", "(", "(", "flatenned_dim", ",", ")", ",", "input_shape", "=", "input_shape", ")", "(", "input_img_0", ")", "\n", "\n", "if", "'L1'", "in", "regularizer_list", ":", "\n", "\t\t", "activity_regularizer", "=", "regularizers", ".", "l1", "(", "0.1", ")", "\n", "", "else", ":", "\n", "\t\t", "activity_regularizer", "=", "None", "\n", "\n", "\n", "", "encoded", "=", "Dense", "(", "3", "*", "encoding_dim", ",", "activation", "=", "'relu'", ",", "activity_regularizer", "=", "activity_regularizer", ")", "(", "input_img", ")", "\n", "if", "'Dropout'", "in", "regularizer_list", ":", "\n", "\t\t", "encoded", "=", "Dropout", "(", "0.25", ")", "(", "encoded", ")", "\n", "", "encoded", "=", "Dense", "(", "2", "*", "encoding_dim", ",", "activation", "=", "'relu'", ")", "(", "encoded", ")", "\n", "encoded", "=", "Dense", "(", "encoding_dim", ",", "activation", "=", "'relu'", ")", "(", "encoded", ")", "\n", "\n", "decoded", "=", "Dense", "(", "2", "*", "encoding_dim", ",", "activation", "=", "'relu'", ")", "(", "encoded", ")", "\n", "decoded", "=", "Dense", "(", "3", "*", "encoding_dim", ",", "activation", "=", "'relu'", ")", "(", "decoded", ")", "\n", "decoded", "=", "Dense", "(", "flatenned_dim", ",", "activation", "=", "'tanh'", ")", "(", "decoded", ")", "\n", "decoded", "=", "Reshape", "(", "(", "img_width", ",", "img_height", ",", "1", ")", ",", "input_shape", "=", "(", "flatenned_dim", ",", ")", ")", "(", "decoded", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_img_0", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "#-------------------------------------------------------", "\n", "\n", "encoded_input", "=", "Input", "(", "shape", "=", "(", "encoding_dim", ",", ")", ")", "\n", "\n", "model", "=", "autoencoder", "\n", "\n", "model_name", "=", "'DAE'", "\n", "\n", "for", "reg", "in", "regularizer_list", ":", "\n", "\t\t", "model_name", "+=", "'-'", "+", "reg", "\n", "\n", "", "model_type", "=", "'FC'", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.CAE": [[67, 118], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.regularizers.l2", "keras.regularizers.l1", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Conv2DTranspose", "keras.layers.UpSampling2D", "keras.layers.Conv2DTranspose", "keras.layers.UpSampling2D", "keras.layers.Conv2DTranspose", "keras.layers.UpSampling2D", "keras.layers.Conv2DTranspose", "keras.layers.Dropout"], "function", ["None"], ["", "def", "CAE", "(", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "regularizer_list", "=", "[", "]", ")", ":", "\n", "\t", "\"\"\"\n\tlist regularizer_list: List of strings indicating which regulairzers to use, options are \n\t'L1L2' and 'Dropout'. Can use both. Assume regularizer list ordered like ['L1L2', 'Dropout']\n\t\"\"\"", "\n", "\n", "input_img", "=", "Input", "(", "shape", "=", "(", "img_width", ",", "img_height", ",", "1", ")", ")", "# adapt this if using `channels_first` image data format", "\n", "\n", "if", "'L1L2'", "in", "regularizer_list", ":", "\n", "\t\t", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "0.01", ")", "\n", "activity_regularizer", "=", "regularizers", ".", "l1", "(", "0.01", ")", "\n", "", "else", ":", "\n", "\t\t", "kernel_regularizer", "=", "None", "\n", "activity_regularizer", "=", "None", "\n", "\n", "", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "kernel_regularizer", ",", "activity_regularizer", "=", "activity_regularizer", ")", "(", "input_img", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "if", "'Dropout'", "in", "regularizer_list", ":", "\n", "\t\t", "x", "=", "Dropout", "(", "0.25", ")", "(", "x", ")", "\n", "\n", "", "x", "=", "Conv2D", "(", "8", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "kernel_regularizer", ",", "activity_regularizer", "=", "activity_regularizer", ")", "(", "x", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "\n", "x", "=", "Conv2D", "(", "8", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "kernel_regularizer", ",", "activity_regularizer", "=", "activity_regularizer", ")", "(", "x", ")", "\n", "encoded", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "\n", "x", "=", "Conv2DTranspose", "(", "8", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "encoded", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2DTranspose", "(", "8", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling2D", "(", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "decoded", "=", "Conv2DTranspose", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_img", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_name", "=", "'CAE'", "\n", "for", "reg", "in", "regularizer_list", ":", "\n", "\t\t", "model_name", "+=", "'-'", "+", "reg", "\n", "\n", "", "model_type", "=", "'conv'", "\n", "\n", "model", "=", "autoencoder", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.DSTCAE_C3D": [[120, 163], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Dropout", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Conv3D", "keras.layers.UpSampling3D", "keras.layers.Conv3D", "keras.layers.UpSampling3D", "keras.layers.Conv3D", "keras.layers.UpSampling3D", "keras.layers.Conv3D"], "function", ["None"], ["", "def", "DSTCAE_C3D", "(", "img_width", ",", "img_height", ",", "win_length", ")", ":", "\n", "\t", "\"\"\"\n\tint win_length: Length of window of frames\n\t\"\"\"", "\n", "\n", "input_shape", "=", "(", "win_length", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "input_window", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "\n", "temp_pool", "=", "2", "\n", "temp_depth", "=", "5", "\n", "x", "=", "Conv3D", "(", "16", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "input_window", ")", "\n", "x", "=", "MaxPooling3D", "(", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "MaxPooling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "#4", "\n", "x", "=", "Dropout", "(", "0.25", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "MaxPooling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "#2", "\n", "\n", "# at this point the representation is (4, 4, 8) i.e. 128-dimensional", "\n", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "encoded", ")", "\n", "x", "=", "UpSampling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ")", "(", "x", ")", "#4", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ")", "(", "x", ")", "#8", "\n", "\n", "x", "=", "Conv3D", "(", "16", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling3D", "(", "(", "1", ",", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "decoded", "=", "Conv3D", "(", "1", ",", "(", "5", ",", "3", ",", "3", ")", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "autoencoder", "=", "Model", "(", "input_window", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_type", "=", "'conv'", "\n", "model_name", "=", "'DSTCAE_C3D'", "\n", "encoder", "=", "None", "\n", "decoder", "=", "None", "\n", "model", "=", "autoencoder", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.DSTCAE_UpSampling": [[165, 204], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Dropout", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Conv3D", "keras.layers.UpSampling3D", "keras.layers.Conv3D", "keras.layers.UpSampling3D", "keras.layers.Conv3D", "keras.layers.Conv3D"], "function", ["None"], ["", "def", "DSTCAE_UpSampling", "(", "img_width", ",", "img_height", ",", "win_length", ")", ":", "\n", "    ", "\"\"\"\n    int win_length: Length of window of frames\n    \"\"\"", "\n", "\n", "input_shape", "=", "(", "win_length", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "input_window", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "\n", "temp_pool", "=", "2", "\n", "temp_depth", "=", "5", "\n", "x", "=", "Conv3D", "(", "16", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "input_window", ")", "\n", "x", "=", "MaxPooling3D", "(", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "#x = Conv3D(8, (temp_depth, 3, 3), activation='relu', padding='same')(x)", "\n", "#x = MaxPooling3D((temp_pool, 2, 2), padding='same')(x)", "\n", "x", "=", "Dropout", "(", "0.25", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "MaxPooling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "# at this point the representation is (4, 4, 8) i.e. 128-dimensional", "\n", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "encoded", ")", "\n", "x", "=", "UpSampling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "16", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "#x = UpSampling3D((1, 2, 2))(x)", "\n", "decoded", "=", "Conv3D", "(", "1", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_window", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_type", "=", "'conv'", "\n", "model_name", "=", "'DSTCAE_UpSampling'", "\n", "\n", "\n", "model", "=", "autoencoder", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.DSTCAE_Deconv": [[205, 241], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Dropout", "keras.layers.Conv3D", "keras.layers.MaxPooling3D", "keras.layers.Deconvolution3D", "keras.layers.Deconvolution3D", "keras.layers.Conv3D"], "function", ["None"], ["", "def", "DSTCAE_Deconv", "(", "img_width", ",", "img_height", ",", "win_length", ")", ":", "\n", "    ", "\"\"\"\n    int win_length: Length of window of frames\n\n    Replace Upsampling with Deconv\n    \"\"\"", "\n", "\n", "input_shape", "=", "(", "win_length", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "input_window", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "\n", "temp_pool", "=", "2", "\n", "temp_depth", "=", "5", "\n", "\n", "x", "=", "Conv3D", "(", "16", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "input_window", ")", "\n", "x", "=", "MaxPooling3D", "(", "(", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "#x = Conv3D(8, (temp_depth, 3, 3), activation='relu', padding='same')(x)", "\n", "#x = MaxPooling3D((temp_pool, 2, 2), padding='same')(x)", "\n", "x", "=", "Dropout", "(", "0.25", ")", "(", "x", ")", "\n", "x", "=", "Conv3D", "(", "8", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "MaxPooling3D", "(", "(", "temp_pool", ",", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "\n", "x", "=", "Deconvolution3D", "(", "8", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "encoded", ")", "\n", "x", "=", "Deconvolution3D", "(", "16", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "decoded", "=", "Conv3D", "(", "1", ",", "(", "temp_depth", ",", "3", ",", "3", ")", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_window", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_type", "=", "'conv'", "\n", "model_name", "=", "'DSTCAE_Deconv-pooling-win_{}'", ".", "format", "(", "win_length", ")", "\n", "model", "=", "autoencoder", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.CAE_deconv": [[242, 270], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.MaxPooling2D", "keras.layers.Conv2DTranspose", "keras.layers.Conv2DTranspose", "keras.layers.Conv2D"], "function", ["None"], ["", "def", "CAE_deconv", "(", "img_width", ",", "img_height", ")", ":", "\n", "    ", "\"\"\"\n    Replace Upsampling with Deconv\n    \"\"\"", "\n", "\n", "input_shape", "=", "(", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "input_frame", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "\n", "x", "=", "Conv2D", "(", "16", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "input_frame", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "Dropout", "(", "0.25", ")", "(", "x", ")", "\n", "x", "=", "Conv2D", "(", "8", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "encoded", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Conv2DTranspose", "(", "8", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "encoded", ")", "\n", "x", "=", "Conv2DTranspose", "(", "16", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "decoded", "=", "Conv2D", "(", "1", ",", "(", "3", ",", "3", ")", ",", "activation", "=", "'tanh'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_frame", ",", "decoded", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_type", "=", "'conv'", "\n", "model_name", "=", "'CAE_Deconv'", "\n", "model", "=", "autoencoder", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.CLSTM_AE": [[272, 314], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "TimeDistributed", "TimeDistributed", "TimeDistributed", "TimeDistributed", "TimeDistributed", "TimeDistributed", "ConvLSTM2D", "ConvLSTM2D", "ConvLSTM2D", "TimeDistributed", "TimeDistributed", "TimeDistributed", "TimeDistributed", "keras.layers.Conv2D", "BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2D", "BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2DTranspose", "BatchNormalization", "keras.layers.Activation", "keras.layers.Conv2DTranspose"], "function", ["None"], ["", "def", "CLSTM_AE", "(", "img_width", ",", "img_height", ",", "win_len", ")", ":", "\n", "\n", "\t", "\"\"\"\n\tfrom https://github.com/yshean/abnormal-spatiotemporal-ae/blob/master/classifier.py\n\t\"\"\"", "\n", "from", "keras", ".", "models", "import", "Model", "\n", "from", "keras", ".", "layers", ".", "convolutional", "import", "Conv2D", ",", "Conv2DTranspose", "\n", "from", "keras", ".", "layers", ".", "convolutional_recurrent", "import", "ConvLSTM2D", "\n", "from", "keras", ".", "layers", ".", "normalization", "import", "BatchNormalization", "\n", "from", "keras", ".", "layers", ".", "wrappers", "import", "TimeDistributed", "\n", "from", "keras", ".", "layers", ".", "core", "import", "Activation", "\n", "from", "keras", ".", "layers", "import", "Input", "\n", "\n", "input_tensor", "=", "Input", "(", "shape", "=", "(", "win_len", ",", "img_width", ",", "img_height", ",", "1", ")", ")", "\n", "\n", "conv1", "=", "TimeDistributed", "(", "Conv2D", "(", "128", ",", "kernel_size", "=", "(", "11", ",", "11", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "4", ",", "4", ")", ",", "name", "=", "'conv1'", ")", ",", "\n", "input_shape", "=", "(", "win_len", ",", "224", ",", "224", ",", "1", ")", ")", "(", "input_tensor", ")", "\n", "conv1", "=", "TimeDistributed", "(", "BatchNormalization", "(", ")", ")", "(", "conv1", ")", "\n", "conv1", "=", "TimeDistributed", "(", "Activation", "(", "'relu'", ")", ")", "(", "conv1", ")", "\n", "\n", "conv2", "=", "TimeDistributed", "(", "Conv2D", "(", "64", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'conv2'", ")", ")", "(", "conv1", ")", "\n", "conv2", "=", "TimeDistributed", "(", "BatchNormalization", "(", ")", ")", "(", "conv2", ")", "\n", "conv2", "=", "TimeDistributed", "(", "Activation", "(", "'relu'", ")", ")", "(", "conv2", ")", "\n", "\n", "convlstm1", "=", "ConvLSTM2D", "(", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "return_sequences", "=", "True", ",", "name", "=", "'convlstm1'", ")", "(", "conv2", ")", "\n", "convlstm2", "=", "ConvLSTM2D", "(", "32", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "return_sequences", "=", "True", ",", "name", "=", "'convlstm2'", ")", "(", "convlstm1", ")", "\n", "convlstm3", "=", "ConvLSTM2D", "(", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "return_sequences", "=", "True", ",", "name", "=", "'convlstm3'", ")", "(", "convlstm2", ")", "\n", "\n", "deconv1", "=", "TimeDistributed", "(", "Conv2DTranspose", "(", "128", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'deconv1'", ")", ")", "(", "convlstm3", ")", "\n", "deconv1", "=", "TimeDistributed", "(", "BatchNormalization", "(", ")", ")", "(", "deconv1", ")", "\n", "deconv1", "=", "TimeDistributed", "(", "Activation", "(", "'relu'", ")", ")", "(", "deconv1", ")", "\n", "\n", "decoded", "=", "TimeDistributed", "(", "Conv2DTranspose", "(", "1", ",", "kernel_size", "=", "(", "11", ",", "11", ")", ",", "padding", "=", "'same'", ",", "strides", "=", "(", "4", ",", "4", ")", ",", "name", "=", "'deconv2'", ")", ")", "(", "\n", "deconv1", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "input_tensor", ",", "outputs", "=", "decoded", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_name", "=", "'CLSTM_AE'", "\n", "model_type", "=", "'conv'", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.dummy_3d": [[317, 332], ["keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.Reshape"], "function", ["None"], ["", "def", "dummy_3d", "(", "img_width", ",", "img_height", ",", "win_len", ")", ":", "\n", "\t", "input_shape", "=", "(", "win_len", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "input_window", "=", "Input", "(", "shape", "=", "input_shape", ")", "\n", "x", "=", "Reshape", "(", "input_shape", ",", "input_shape", "=", "input_shape", ")", "(", "input_window", ")", "\n", "\n", "autoencoder", "=", "Model", "(", "input_window", ",", "x", ")", "\n", "autoencoder", ".", "compile", "(", "optimizer", "=", "'adadelta'", ",", "loss", "=", "'mean_squared_error'", ")", "\n", "\n", "model_type", "=", "'conv'", "\n", "model_name", "=", "'dummy_3d'", "\n", "\n", "model", "=", "autoencoder", "\n", "\n", "return", "model", ",", "model_name", ",", "model_type", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.cae_main_train.init_cae_exp": [[6, 34], ["models.CAE", "ae_exp.AEExp"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.models.CAE"], ["def", "init_cae_exp", "(", "pre_load", "=", "None", ")", ":", "\n", "\t", "'''\n\tThese are the training setting. \n\t'''", "\n", "batch_size", "=", "32", "\n", "\n", "hor_flip", "=", "True", "\n", "zoom_range", "=", "0", "\n", "\n", "regularizer_list", "=", "[", "]", "\n", "epochs", "=", "2", "\n", "img_width", ",", "img_height", "=", "64", ",", "64", "\n", "\n", "dset", "=", "'UR-Filled'", "\n", "initial_epoch", "=", "0", "\n", "\n", "#Convautoencooder-------------------", "\n", "\n", "model", ",", "model_name", ",", "model_type", "=", "CAE", "(", "img_width", "=", "img_width", ",", "\n", "img_height", "=", "img_height", ")", "\n", "\n", "convautoencoder_experiment", "=", "AEExp", "(", "model", "=", "model", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "model_name", "=", "model_name", ",", "model_type", "=", "model_type", ",", "pre_load", "=", "pre_load", ",", "initial_epoch", "=", "initial_epoch", ",", "epochs", "=", "epochs", ",", "batch_size", "=", "batch_size", ",", "hor_flip", "=", "hor_flip", ",", "zoom_range", "=", "zoom_range", ",", "dset", "=", "dset", "\n", ")", "\n", "\n", "return", "convautoencoder_experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.opencvinpaint.fill_depth_im": [[12, 40], ["cv2.imread", "print", "cv2.threshold", "print", "cv2.inpaint", "numpy.amax", "numpy.amin", "numpy.amax", "numpy.amin", "numpy.concatenate", "numpy.concatenate", "cv2.imshow", "cv2.imwrite", "cv2.waitKey", "cv2.destroyAllWindows"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.threshold"], ["def", "fill_depth_im", "(", "img_path", ",", "plot", "=", "False", ")", ":", "\n", "\n", "# Set values equal to or above thresh to 0.", "\n", "# Set values below thresh to maxval.", "\n", "\t", "img", "=", "cv2", ".", "imread", "(", "img_path", ",", "0", ")", "\n", "\n", "print", "(", "np", ".", "amax", "(", "img", ")", ",", "np", ".", "amin", "(", "img", ")", ")", "\n", "# return", "\n", "\n", "thresh", ",", "maxval", "=", "20", ",", "255", "\n", "th", ",", "im_th", "=", "cv2", ".", "threshold", "(", "img", ",", "thresh", ",", "maxval", ",", "cv2", ".", "THRESH_BINARY_INV", ")", "\n", "\n", "print", "(", "np", ".", "amax", "(", "im_th", ")", ",", "np", ".", "amin", "(", "im_th", ")", ")", "\n", "mask", "=", "im_th", "\n", "# cv2.imshow('mask', mask)", "\n", "# cv2.waitKey(0)", "\n", "dst", "=", "cv2", ".", "inpaint", "(", "img", ",", "mask", ",", "3", ",", "cv2", ".", "INPAINT_NS", ")", "#paints non-zero pixels, Try adaptive thresh?", "\n", "\n", "if", "plot", "==", "True", ":", "\n", "\t\t", "disp", "=", "np", ".", "concatenate", "(", "(", "dst", ",", "img", ")", ",", "axis", "=", "1", ")", "\n", "disp", "=", "np", ".", "concatenate", "(", "(", "disp", ",", "mask", ")", ",", "axis", "=", "1", ")", "\n", "\n", "cv2", ".", "imshow", "(", "'sdu'", ",", "disp", ")", "\n", "cv2", ".", "imwrite", "(", "'./filling_SDU.png'", ",", "disp", ")", "\n", "#cv2.imshow('sdu',dst)", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.opencvinpaint.fill_SDU_NonFall": [[44, 83], ["print", "glob.glob", "print", "len", "glob.glob", "print", "sort_frames", "os.path.isdir", "os.mkdir", "print", "len", "shutil.rmtree", "opencvinpaint.fill_depth_im", "os.path.basename", "print", "save_path_fr.replace", "cv2.imwrite", "print"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.opencvinpaint.fill_depth_im"], ["def", "fill_SDU_NonFall", "(", ")", ":", "\n", "\t", "root", "=", "'./Fall-Data/SDUFall'", "\n", "\n", "train_path", "=", "root", "+", "'/train/NonFall/ADL*/'", "\n", "#train_path_depth = train_path + 'Depth'", "\n", "print", "(", "train_path", ")", "\n", "ADL_dir_list", "=", "glob", ".", "glob", "(", "train_path", ")", "\n", "print", "(", "len", "(", "ADL_dir_list", ")", ")", "\n", "\n", "for", "ADL_dir", "in", "ADL_dir_list", ":", "\n", "\t\t", "frames", "=", "glob", ".", "glob", "(", "ADL_dir", "+", "'/Depth/*.png'", ")", "\n", "print", "(", "len", "(", "frames", ")", ")", "\n", "#print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "frames", "=", "sort_frames", "(", "frames", ",", "'SDU'", ")", "\n", "#print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "\n", "save_path", "=", "ADL_dir", "+", "'/Filled'", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "\t\t\t", "assert", "'Filled'", "in", "save_path", "\n", "if", "not", "'Filled'", "in", "save_path", ":", "\n", "\t\t\t\t", "print", "(", "'trying to remove dir which is not Filled'", ")", "\n", "", "shutil", ".", "rmtree", "(", "save_path", ")", "\n", "\n", "", "os", ".", "mkdir", "(", "save_path", ")", "\n", "print", "(", "save_path", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "\t\t\t", "frame_filled", "=", "fill_depth_im", "(", "frame", ")", "\n", "\n", "#print(frame)", "\n", "frame_base", "=", "os", ".", "path", ".", "basename", "(", "frame", ")", "\n", "#print(frame_base)", "\n", "\n", "save_path_fr", "=", "save_path", "+", "'/'", "+", "frame_base", "\n", "print", "(", "save_path_fr", ")", "\n", "save_path_fr", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "save_path_fr", ",", "frame_filled", ")", "\n", "#break", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.opencvinpaint.fill_SDU_Fall": [[85, 123], ["print", "glob.glob", "print", "len", "glob.glob", "print", "os.path.isdir", "os.mkdir", "print", "len", "shutil.rmtree", "opencvinpaint.fill_depth_im", "os.path.basename", "print", "save_path_fr.replace", "cv2.imwrite", "print"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.opencvinpaint.fill_depth_im"], ["", "", "def", "fill_SDU_Fall", "(", ")", ":", "\n", "\t", "root", "=", "'N:/FallDetection/Fall-Data/SDUFall/sorted_by_person/Fall'", "\n", "\n", "test_path_F", "=", "root", "+", "'/Fall*/'", "\n", "\n", "#train_path_depth = train_path + 'Depth'", "\n", "print", "(", "test_path_F", ")", "\n", "Fall_dir_list", "=", "glob", ".", "glob", "(", "test_path_F", ")", "\n", "print", "(", "len", "(", "Fall_dir_list", ")", ")", "\n", "\n", "for", "Fall_dir", "in", "Fall_dir_list", ":", "\n", "\t\t", "frames", "=", "glob", ".", "glob", "(", "Fall_dir", "+", "'/Depth/*.png'", ")", "\n", "print", "(", "len", "(", "frames", ")", ")", "\n", "#print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "#frames = sort_frames(frames, 'SDU')", "\n", "#print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "\n", "save_path", "=", "Fall_dir", "+", "'/Filled'", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "\t\t\t", "assert", "'Filled'", "in", "save_path", "\n", "if", "not", "'Filled'", "in", "save_path", ":", "\n", "\t\t\t\t", "print", "(", "'trying to remove dir which is not Filled'", ")", "\n", "", "shutil", ".", "rmtree", "(", "save_path", ")", "\n", "\n", "", "os", ".", "mkdir", "(", "save_path", ")", "\n", "print", "(", "save_path", ")", "\n", "for", "frame", "in", "frames", ":", "\n", "\t\t\t", "frame_filled", "=", "fill_depth_im", "(", "frame", ")", "\n", "\n", "#print(frame)", "\n", "frame_base", "=", "os", ".", "path", ".", "basename", "(", "frame", ")", "\n", "#print(frame_base)", "\n", "\n", "save_path_fr", "=", "save_path", "+", "'/'", "+", "frame_base", "\n", "print", "(", "save_path_fr", ")", "\n", "save_path_fr", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "save_path_fr", ",", "frame_filled", ")", "\n", "#break", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.__init__": [[23, 39], ["img_exp.ImgExp.__init__"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.__init__"], ["def", "__init__", "(", "self", ",", "model", "=", "None", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "model_name", "=", "'None'", ",", "\n", "batch_size", "=", "32", ",", "model_type", "=", "None", ",", "pre_load", "=", "None", ",", "initial_epoch", "=", "0", ",", "epochs", "=", "1", ",", "hor_flip", "=", "None", ",", "zoom_range", "=", "0", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "\n", "\n", "\t\t", "ImgExp", ".", "__init__", "(", "self", ",", "model", "=", "model", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "model_name", "=", "model_name", ",", "batch_size", "=", "batch_size", ",", "model_type", "=", "model_type", ",", "pre_load", "=", "pre_load", ",", "initial_epoch", "=", "initial_epoch", ",", "epochs", "=", "epochs", ",", "hor_flip", "=", "hor_flip", ",", "zoom_range", "=", "zoom_range", ",", "dset", "=", "dset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.play_frames_with_reconstructions": [[41, 57], ["ae_exp.AEExp.model.predict", "print", "animate_fall_detect", "animate_fall_detect.event_source.stop", "matplotlib.close", "ae_exp.AEExp.test_data.reshape", "numpy.amax", "numpy.amin", "animate_fall_detect.save", "len"], "methods", ["None"], ["", "def", "play_frames_with_reconstructions", "(", "self", ",", "to_save", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPlays frames of test_data with reconstuction. Saves animation to to_save\n\n\t\tParams:\n\t\t\tstr to_save: if not None, saves animation to './to_save.mp4'\n\t\t\"\"\"", "\n", "preds", "=", "self", ".", "model", ".", "predict", "(", "self", ".", "test_data", ".", "reshape", "(", "len", "(", "self", ".", "test_data", ")", ",", "64", ",", "64", ",", "1", ")", ")", "\n", "print", "(", "np", ".", "amax", "(", "preds", "[", "0", "]", ")", ",", "np", ".", "amin", "(", "preds", "[", "0", "]", ")", ")", "\n", "\n", "ani", "=", "animate_fall_detect", "(", "self", ".", "model", ",", "self", ".", "test_data", ",", "self", ".", "img_width", ",", "self", ".", "img_height", ")", "\n", "if", "to_save", "!=", "None", ":", "\n", "\t\t\t", "ani", ".", "save", "(", "'{}.mp4'", ".", "format", "(", "to_save", ")", ")", "\n", "", "ani", ".", "event_source", ".", "stop", "(", ")", "\n", "del", "ani", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.train": [[59, 113], ["print", "keras.callbacks.ModelCheckpoint", "keras.callbacks.EarlyStopping", "time.time", "keras.callbacks.CSVLogger", "ae_exp.AEExp.train_data.reshape", "print", "ae_exp.AEExp.save_exp", "ae_exp.AEExp.model.summary", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "len", "keras.preprocessing.image.ImageDataGenerator", "ae_exp.AEExp.model.fit_generator", "ae_exp.AEExp.model.fit", "keras.preprocessing.image.ImageDataGenerator.flow", "str", "len"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.save_exp"], ["", "def", "train", "(", "self", ",", "sample_weight", "=", "None", ",", "verbose", "=", "2", ")", ":", "\n", "\t\t", "\"\"\"\n\t\ttrains the autoencoder model on data loaded from load_train_data. This data is non-sequential; that is,\n\t\tframes are reconstructed one by one. Reconstruction error (MSE) is minimized. Checkpoints and logs are saved to\n\t\t'./Checkpoints/dset/'\n\t\t'./logs/dset/'\n\t\tModel is saved as per save_exp method in parent class\n\n\t\t\"\"\"", "\n", "\n", "print", "(", "self", ".", "model", ".", "summary", "(", ")", ")", "\n", "model_name", "=", "self", ".", "model_name", "\n", "base_cp", "=", "'./Checkpoints/{}'", ".", "format", "(", "self", ".", "dset", ")", "\n", "base_logs", "=", "'./logs/{}'", ".", "format", "(", "self", ".", "dset", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "base_cp", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "base_cp", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "base_logs", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "base_logs", ")", "\n", "\n", "", "checkpointer", "=", "ModelCheckpoint", "(", "filepath", "=", "base_cp", "+", "'/'", "+", "model_name", "+", "'-'", "+", "'{epoch:03d}-{loss:.3f}.hdf5'", ",", "period", "=", "100", ",", "verbose", "=", "1", ")", "\n", "\n", "early_stopper", "=", "EarlyStopping", "(", "patience", "=", "5", ",", "verbose", "=", "1", ",", "monitor", "=", "'loss'", ",", "min_delta", "=", "1e-5", ")", "\n", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "csv_logger", "=", "CSVLogger", "(", "base_logs", "+", "'/'", "+", "model_name", "+", "'-'", "+", "'training-'", "+", "str", "(", "timestamp", ")", "+", "'.log'", ")", "\n", "\n", "callbacks_list", "=", "[", "csv_logger", ",", "checkpointer", "]", "\n", "\n", "\n", "self", ".", "train_data", "=", "self", ".", "train_data", ".", "reshape", "(", "len", "(", "self", ".", "train_data", ")", ",", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "1", ")", "\n", "\n", "\n", "\n", "print", "(", "'training on data of shape {}, with model {}, with hor_flip {}'", ".", "format", "(", "self", ".", "train_data", ".", "shape", ",", "self", ".", "model_name", ",", "self", ".", "hor_flip", ")", ")", "\n", "\n", "if", "self", ".", "hor_flip", "==", "True", ":", "\n", "\n", "\t\t\t", "datagen", "=", "ImageDataGenerator", "(", "horizontal_flip", "=", "self", ".", "hor_flip", ",", "zoom_range", "=", "self", ".", "zoom_range", ")", "\n", "\n", "self", ".", "model", ".", "fit_generator", "(", "datagen", ".", "flow", "(", "self", ".", "train_data", ",", "self", ".", "train_data", ",", "batch_size", "=", "self", ".", "batch_size", ")", ",", "steps_per_epoch", "=", "len", "(", "self", ".", "train_data", ")", "/", "self", ".", "batch_size", ",", "epochs", "=", "self", ".", "epochs", ",", "callbacks", "=", "callbacks_list", ",", "verbose", "=", "verbose", ",", "initial_epoch", "=", "self", ".", "initial_epoch", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "model", ".", "fit", "(", "self", ".", "train_data", ",", "self", ".", "train_data", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "callbacks", "=", "callbacks_list", ",", "verbose", "=", "verbose", ",", "initial_epoch", "=", "self", ".", "initial_epoch", "\n", ")", "\n", "\n", "", "self", ".", "save_exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.test": [[114, 118], ["multi_AEmodel.get_stats_for_all_vids"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.get_stats_for_all_vids"], ["", "def", "test", "(", "self", ",", "raw", "=", "False", ",", "animate", "=", "False", ")", ":", "\n", "\n", "\t\t", "get_stats_for_all_vids", "(", "experiment", "=", "self", ",", "metric", "=", "'AUC'", ",", "dset", "=", "self", ".", "dset", ",", "raw", "=", "raw", ",", "animate", "=", "animate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.get_MSE": [[119, 140], ["ae_exp.AEExp.model.predict", "util.MSE", "test_data.reshape.reshape.reshape", "test_data.reshape.reshape.reshape", "len", "len", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.MSE"], ["", "def", "get_MSE", "(", "self", ",", "test_data", ")", ":", "\n", "\n", "\t\t", "'''\n\t\tGets mean squared error between test_data array of images, and their reconstructions from self.model\n\n\t\tParams:\n\t\t\t\tndarray test_data: Data consiting of frames, ie. of dimension (samples, img_height, img_width)\n\t\tReturns:\n\t\t\t\tndarray of MSE scores, one for each frame in test_data, ie dimensions (samples,1).\n\n\t\t'''", "\n", "\n", "if", "self", ".", "model_type", "==", "'conv'", "or", "1", ":", "#If using flow(no reason not to) then all take same shape TODO remove condition?", "\n", "\t\t\t", "test_data", "=", "test_data", ".", "reshape", "(", "len", "(", "test_data", ")", ",", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "test_data", "=", "test_data", ".", "reshape", "(", "(", "len", "(", "test_data", ")", ",", "np", ".", "prod", "(", "test_data", ".", "shape", "[", "1", ":", "]", ")", ")", ")", "\n", "", "decoded_imgs", "=", "self", ".", "model", ".", "predict", "(", "test_data", ")", "\n", "\n", "\n", "RE", "=", "MSE", "(", "test_data", ",", "decoded_imgs", ")", "\n", "return", "RE", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.get_features": [[141, 157], ["keras.models.Model", "keras.models.Model.predict", "ae_exp.AEExp.test_data.reshape", "ae_exp.AEExp.train_data.reshape", "len", "len", "model.get_layer"], "methods", ["None"], ["", "def", "get_features", "(", "self", ",", "layer_name", ",", "train_or_test", "=", "'test'", ")", ":", "\n", "\n", "\t\t", "from", "keras", ".", "models", "import", "Model", "\n", "model", "=", "self", ".", "model", "# create the original model ", "\n", "if", "train_or_test", "==", "'test'", ":", "\n", "\t\t\t", "data", "=", "self", ".", "test_data", ".", "reshape", "(", "len", "(", "self", ".", "test_data", ")", ",", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "data", "=", "self", ".", "train_data", ".", "reshape", "(", "len", "(", "self", ".", "train_data", ")", ",", "self", ".", "img_width", ",", "self", ".", "img_height", ",", "1", ")", "\n", "\n", "#layer_name = 'my_layer' ", "\n", "", "intermediate_layer_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "\n", "outputs", "=", "model", ".", "get_layer", "(", "layer_name", ")", ".", "output", ")", "\n", "intermediate_output", "=", "intermediate_layer_model", ".", "predict", "(", "data", ")", "\n", "#print(intermediate_output)", "\n", "return", "intermediate_output", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.set_train_data": [[158, 170], ["data_management.load_data"], "methods", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.load_data"], ["", "def", "set_train_data", "(", "self", ",", "raw", "=", "False", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tsets train_data attribute to ADL data correpsonding to the dataset for this experiment\n\t\t\"\"\"", "\n", "\n", "split_by_vid_or_class", "=", "'Split_by_class'", "\n", "vid_class", "=", "'NonFall'", "\n", "\n", "data", "=", "load_data", "(", "split_by_vid_or_class", "=", "split_by_vid_or_class", ",", "raw", "=", "raw", ",", "img_width", "=", "self", ".", "img_width", ",", "img_height", "=", "self", ".", "img_height", ",", "vid_class", "=", "vid_class", ",", "dset", "=", "self", ".", "dset", ")", "\n", "\n", "self", ".", "train_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.get_dir_lists": [[19, 72], ["print", "glob.glob", "glob.glob", "len", "print", "len", "print"], "function", ["None"], ["def", "get_dir_lists", "(", "dset", ")", ":", "\n", "    ", "'''\n    This shows structure which frames must be in\n    \n    Params:\n        str dset: dataset to be loaded\n    Returns:\n        paths to ADL and Fall videos\n    '''", "\n", "\n", "\n", "#----------USe these for N: drive located Fall-Data", "\n", "#root_drive = 'N:/FallDetection/Jacob/Fall-Data/' #Put Path to video frames ", "\n", "\n", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/{}/Fall/Fall*'", ".", "format", "(", "dset", ")", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/{}/NonFall/ADL*'", ".", "format", "(", "dset", ")", "\n", "if", "dset", "==", "'Thermal-Dummy'", ":", "\n", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/Thermal-Dummy/Fall/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/Thermal-Dummy/NonFall/ADL*'", "\n", "\n", "", "elif", "dset", "==", "'Thermal'", ":", "\n", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/Thermal/Fall/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/Thermal/NonFall/ADL*'", "\n", "\n", "", "elif", "dset", "==", "'UR'", ":", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/Fall/original/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/NonFall/original/adl*'", "\n", "\n", "", "elif", "dset", "==", "'UR-Filled'", ":", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/Fall/filled/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/NonFall/filled/adl*'", "\n", "\n", "", "elif", "dset", "==", "'SDU'", ":", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/SDUFall/Fall/Fall*/Depth'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/SDUFall/NonFall/ADL*/Depth'", "\n", "\n", "", "elif", "dset", "==", "'SDU-Filled'", ":", "\n", "        ", "path_Fall", "=", "root_drive", "+", "'/Fall-Data/SDUFall/Fall/Fall*/Filled'", "\n", "path_ADL", "=", "root_drive", "+", "'/Fall-Data/SDUFall/NonFall/ADL*/Filled'", "\n", "\n", "", "print", "(", "path_Fall", ",", "path_ADL", ")", "\n", "vid_dir_list_Fall", "=", "glob", ".", "glob", "(", "path_Fall", ")", "\n", "vid_dir_list_ADL", "=", "glob", ".", "glob", "(", "path_ADL", ")", "\n", "\n", "if", "len", "(", "vid_dir_list_Fall", ")", "==", "0", ":", "\n", "        ", "print", "(", "'no Fall vids found'", ")", "\n", "\n", "", "if", "len", "(", "vid_dir_list_ADL", ")", "==", "0", ":", "\n", "        ", "print", "(", "'no ADL vids found'", ")", "\n", "\n", "", "return", "vid_dir_list_ADL", ",", "vid_dir_list_Fall", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.init_videos": [[74, 175], ["h5py_init.get_dir_lists", "print", "os.path.isfile", "print", "sys.exit", "h5py.File", "print", "h5py_init.init_videos.init_videos_helper"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_dir_lists"], ["", "def", "init_videos", "(", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "raw", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "\n", "    ", "'''\n    Creates or overwrites h5py group corresponding to root_path (in body), for the h5py file located at \n    'N:/FallDetection/Fall-Data/H5Data/Data_set-{}-imgdim{}x{}.h5'.format(dset, img_width, img_height). \n\n    The h5py group of nested groups is structured as follows:\n    \n    Processed (or Raw)\n        Split_by_video\n            ADL1\n                Data\n                    <HDF5 dataset \"Data\": shape (1397, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (1397,), type \"<i4\">\n            ADL2\n                Data\n                    <HDF5 dataset \"Data\": shape (3203, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (3203,), type \"<i4\">\n                .\n                .\n                .\n\n            ADL{N}\n                Data\n                    <HDF5 dataset \"Data\": shape (3203, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (3203,), type \"<i4\">\n\n            Fall1\n                Data\n                    <HDF5 dataset \"Data\": shape (49, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (49,), type \"<i4\">\n                .\n                .\n                .\n            Fall{M}\n                Data\n                    <HDF5 dataset \"Data\": shape (49, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (49,), type \"<i4\">\n\n\n            where N is number of ADL videos, and M is number of Fall videos.\n\n    Params:\n        bool raw: if true, data will be not processed (mean centering and intensity scaling)\n        int img_wdith: width of images\n        int img_height: height of images\n        str dset: dataset to be loaded\n\n    '''", "\n", "path", "=", "root_drive", "+", "'/H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "img_width", ",", "img_height", ")", "\n", "#print(root_drive + '/H5Data/{}/'.format(dset))", "\n", "\n", "vid_dir_list_0", ",", "vid_dir_list_1", "=", "get_dir_lists", "(", "dset", ")", "\n", "\n", "\n", "if", "len", "(", "vid_dir_list_0", ")", "==", "0", "and", "len", "(", "vid_dir_list_1", ")", "==", "0", ":", "\n", "        ", "print", "(", "'no videos found, make sure video files are placed in Fall-Data folde, terminating...'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "if", "raw", "==", "False", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Processed/Split_by_video'", "\n", "", "else", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Raw/Split_by_video'", "\n", "\n", "", "print", "(", "'creating data at root_path'", ",", "root_path", ")", "\n", "\n", "def", "init_videos_helper", "(", "root_path", ")", ":", "#Nested to keep scope", "\n", "            ", "with", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "as", "hf", ":", "\n", "#root_sub = root.create_group('Split_by_video')", "\n", "                ", "root", "=", "hf", ".", "create_group", "(", "root_path", ")", "\n", "\n", "for", "vid_dir", "in", "vid_dir_list_1", ":", "\n", "                    ", "init_vid", "(", "vid_dir", "=", "vid_dir", ",", "vid_class", "=", "1", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "hf", "=", "root", ",", "raw", "=", "raw", ",", "dset", "=", "dset", ")", "\n", "\n", "", "for", "vid_dir", "in", "vid_dir_list_0", ":", "\n", "                    ", "init_vid", "(", "vid_dir", "=", "vid_dir", ",", "vid_class", "=", "0", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "hf", "=", "root", ",", "raw", "=", "raw", ",", "dset", "=", "dset", ")", "\n", "\n", "", "", "", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "hf", "=", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "\n", "if", "root_path", "in", "hf", ":", "\n", "            ", "print", "(", "'video h5py file exists, deleting old group {}, creating new'", ".", "format", "(", "root_path", ")", ")", "\n", "del", "hf", "[", "root_path", "]", "\n", "hf", ".", "close", "(", ")", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'File exists, but no group for this data set; initializing..'", ")", "\n", "hf", ".", "close", "(", ")", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "\n", "", "", "else", ":", "#not initialized", "\n", "        ", "print", "(", "'No data file exists yet; initializing'", ")", "\n", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.init_vid": [[177, 210], ["print", "h5py_init.create_img_data_set", "numpy.zeros", "print", "hf.create_group", "len", "os.path.basename", "os.path.basename", "print", "h5py_init.get_fall_indeces", "os.path.dirname", "str", "range"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.create_img_data_set", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_fall_indeces"], ["", "", "def", "init_vid", "(", "vid_dir", "=", "None", ",", "vid_class", "=", "None", ",", "img_width", "=", "32", ",", "img_height", "=", "32", ",", "hf", "=", "None", ",", "raw", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "    ", "'''\n    helper function for init_videos. Initialzies a single video.\n\n    Params:\n        str vid_dir: path to vid dir of frames to be initialzied\n        int vid_class: 1 for Fall, 0 for NonFall\n        h5py group: group within which new group is nested\n\n    '''", "\n", "\n", "print", "(", "'initializing vid at'", ",", "vid_dir", ")", "\n", "\n", "data", "=", "create_img_data_set", "(", "fpath", "=", "vid_dir", ",", "ht", "=", "img_height", ",", "wd", "=", "img_width", ",", "raw", "=", "raw", ",", "sort", "=", "True", ",", "dset", "=", "dset", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "data", ")", ")", "\n", "\n", "if", "dset", "==", "'SDU'", "or", "dset", "==", "'SDU-Filled'", ":", "\n", "        ", "vid_dir_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "vid_dir", ")", ")", "\n", "", "else", ":", "\n", "        ", "vid_dir_name", "=", "os", ".", "path", ".", "basename", "(", "vid_dir", ")", "\n", "", "print", "(", "'vid_dir_name'", ",", "vid_dir_name", ")", "\n", "grp", "=", "hf", ".", "create_group", "(", "vid_dir_name", ")", "\n", "\n", "\n", "\n", "if", "vid_dir_name", "in", "[", "'Fall'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "201", ")", "]", ":", "#201 is max fall index across all vids", "\n", "        ", "print", "(", "'setting fall start'", ")", "\n", "Fall_start", ",", "Fall_stop", "=", "get_fall_indeces", "(", "vid_dir_name", ",", "dset", ")", "\n", "labels", "[", "Fall_start", ":", "Fall_stop", "+", "1", "]", "=", "1", "\n", "\n", "", "grp", "[", "'Labels'", "]", "=", "labels", "\n", "grp", "[", "'Data'", "]", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.get_fall_indeces": [[211, 224], ["pd.read_csv", "print"], "function", ["None"], ["", "def", "get_fall_indeces", "(", "Fall_name", ",", "dset", ")", ":", "\n", "    ", "root_dir", "=", "'./Fall-Data/'", "\n", "\n", "labels_dir", "=", "root_dir", "+", "'/{}/Labels.csv'", ".", "format", "(", "dset", ")", "\n", "#print(labels_dir)", "\n", "import", "pandas", "as", "pd", "\n", "my_data", "=", "pd", ".", "read_csv", "(", "labels_dir", ",", "sep", "=", "','", ",", "header", "=", "0", ",", "index_col", "=", "0", ")", "\n", "\n", "start", ",", "stop", "=", "my_data", ".", "loc", "[", "Fall_name", "]", "\n", "print", "(", "'start,stop'", ",", "start", ",", "stop", ")", "\n", "\n", "#print(my_data)", "\n", "return", "start", ",", "stop", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.sort_frames": [[226, 259], ["print", "sorted", "print", "sorted", "int", "print", "sorted", "print", "sorted", "os.path.basename().split", "int", "print", "int", "os.path.basename", "[].split", "int", "[].split", "x.split", "x.split", "x.split"], "function", ["None"], ["", "def", "sort_frames", "(", "frames", ",", "dset", ")", ":", "\n", "#Sorting, trying for differnt dataset string formats", "\n", "        ", "if", "dset", "==", "'SDU'", "or", "dset", "==", "'SDU-Filled'", ":", "#TODO remove try except, failing to sort shoudl stop!", "\n", "            ", "print", "(", "'sorting SDU frames...'", ")", "\n", "\n", "#try:", "\n", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "#SDU", "\n", "# except ValueError:", "\n", "#     print('failed to sort SDU vid frames')", "\n", "#     pass", "\n", "", "elif", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", "or", "dset", "==", "'Thermal'", ":", "\n", "            ", "print", "(", "'sorting UR or Thermal frames...'", ")", "\n", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort UR vid frames'", ")", "\n", "return", "\n", "\n", "", "", "elif", "dset", "==", "'TST'", ":", "\n", "            ", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort vid frames, trying again....'", ")", "\n", "pass", "\n", "\n", "", "", "elif", "dset", "==", "'FallFree'", "or", "dset", "==", "'FallFree-Filled'", ":", "\n", "            ", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort vid frames, trying again....'", ")", "\n", "pass", "\n", "\n", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.create_img_data_set": [[260, 309], ["fpath.replace.replace", "numpy.zeros", "zip", "print", "glob.glob", "glob.glob", "h5py_init.sort_frames", "range", "cv2.imread", "cv2.resize", "img.reshape.reshape", "sort_frames.__len__", "sort_frames.__len__", "numpy.mean", "img.reshape.astype"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames"], ["", "def", "create_img_data_set", "(", "fpath", ",", "ht", "=", "64", ",", "wd", "=", "64", ",", "raw", "=", "False", ",", "sort", "=", "True", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "        ", "'''\n        Creates data set of all images located at fpath. Sorts images\n\n        Params:\n            str fpath: path to images to be processed\n            bool raw: if True does mean centering and rescaling \n            bool sort: if True, sorts frames, ie. keeps sequential order, which may be lost due to glob\n            dset: dataset\n\n        Returns:\n            ndarray data: Numpy array of images at fpath. Shape (samples, img_width*img_height),\n            samples isnumber of images at fpath.\n\n        '''", "\n", "\n", "#print('gathering data at', fpath)", "\n", "fpath", "=", "fpath", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "# print(fpath+'/*.png')", "\n", "frames", "=", "glob", ".", "glob", "(", "fpath", "+", "'/*.jpg'", ")", "+", "glob", ".", "glob", "(", "fpath", "+", "'/*.png'", ")", "\n", "\n", "if", "sort", "==", "True", ":", "\n", "            ", "frames", "=", "sort_frames", "(", "frames", ",", "dset", ")", "\n", "\n", "#print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "\n", "", "data", "=", "np", ".", "zeros", "(", "(", "frames", ".", "__len__", "(", ")", ",", "ht", ",", "wd", ",", "1", ")", ")", "\n", "for", "x", ",", "i", "in", "zip", "(", "frames", ",", "range", "(", "0", ",", "frames", ".", "__len__", "(", ")", ")", ")", ":", "\n", "#print(x,i)", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "x", ",", "0", ")", "#Use this for RGB to GS", "\n", "#print('x', x)", "\n", "#img=cv2.imread(x,-1) #Use this for loading as is(ie. 16 bit needs this, else gets converted to 8)", "\n", "# print('img.shape', img.shape)", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "ht", ",", "wd", ")", ")", "#resize", "\n", "img", "=", "img", ".", "reshape", "(", "ht", ",", "wd", ",", "1", ")", "\n", "\n", "if", "raw", "==", "False", ":", "\n", "#print('proccessing data')", "\n", "\n", "                ", "img", "=", "img", "-", "np", ".", "mean", "(", "img", ")", "#Mean centering", "\n", "img", "=", "img", ".", "astype", "(", "'float32'", ")", "/", "255.", "#rescaling", "\n", "\n", "", "data", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "\n", "# data = data.reshape((len(data), np.prod(data.shape[1:]))) #Flatten the images", "\n", "\n", "", "print", "(", "'data.shape'", ",", "data", ".", "shape", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.init_data_by_class": [[310, 400], ["h5py_init.create_img_data_set", "print", "sys.exit", "numpy.array", "numpy.array", "h5py.File", "print", "hf.create_group", "print", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.create_img_data_set"], ["", "def", "init_data_by_class", "(", "vid_class", "=", "'NonFall'", ",", "dset", "=", "'Thermal'", ",", "raw", "=", "False", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "use_cropped", "=", "False", ")", ":", "\n", "\n", "    ", "'''\n    Creates or overwrites h5py group corresponding to root_path (in body), for the h5py file located at \n    'N:/FallDetection/Fall-Data/H5Data/Data_set-{}-imgdim{}x{}.h5'.format(dset, img_width, img_height). \n\n    Creates the following structure:\n\n    Processed\n        Split_by_class\n            NonFall\n                Data\n                    <HDF5 dataset \"Data\": shape (22116, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (22116,), type \"<i4\">\n            Fall\n                Data\n                    <HDF5 dataset \"Data\": shape (22116, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (22116,), type \"<i4\">\n    '''", "\n", "\n", "ht", ",", "wd", "=", "img_width", ",", "img_height", "\n", "if", "dset", "==", "'Thermal'", ":", "\n", "\n", "        ", "if", "vid_class", "==", "'NonFall'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/Thermal/{}/ADL*'", ".", "format", "(", "vid_class", ")", "\n", "", "elif", "vid_class", "==", "'Fall'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/Thermal/{}/Fall*'", ".", "format", "(", "vid_class", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid vid class'", ")", "\n", "return", "\n", "\n", "\n", "", "", "elif", "dset", "==", "'UR-Filled'", ":", "\n", "\n", "        ", "if", "vid_class", "==", "'NonFall'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/{}/filled/adl*'", ".", "format", "(", "vid_class", ")", "\n", "", "else", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/{}/filled/Fall*'", ".", "format", "(", "vid_class", ")", "\n", "\n", "\n", "", "", "elif", "dset", "==", "'UR'", ":", "\n", "\n", "        ", "if", "vid_class", "==", "'NonFall'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/{}/original/adl*'", ".", "format", "(", "vid_class", ")", "\n", "", "else", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/Fall-Data/UR_Kinect/{}/original/Fall*'", ".", "format", "(", "vid_class", ")", "\n", "\n", "\n", "", "", "elif", "dset", "==", "'SDU'", ":", "\n", "        ", "fpath", "=", "root_drive", "+", "'/Fall-Data/SDUFall/{}/ADL*/Depth'", ".", "format", "(", "vid_class", ")", "\n", "\n", "", "elif", "dset", "==", "'SDU-Filled'", ":", "\n", "        ", "fpath", "=", "root_drive", "+", "'/SDUFall/{}/ADL*/Filled'", ".", "format", "(", "vid_class", ")", "\n", "\n", "\n", "", "data", "=", "create_img_data_set", "(", "fpath", ",", "ht", ",", "wd", ",", "raw", ",", "False", ")", "#Don't need to sort", "\n", "\n", "if", "data", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "print", "(", "'no data found, make sure video files are placed in Fall-Data folder, terminating'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "#path = './H5Data/Data_set_imgdim{}x{}.h5'.format(img_width, img_height) #Old", "\n", "#path = 'N:/FallDetection/Fall-Data/H5Data/Data_set_imgdim{}x{}.h5'.format(img_width, img_height) #Old", "\n", "", "path", "=", "root_drive", "+", "'/H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "if", "raw", "==", "False", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Processed/Split_by_class/'", "+", "vid_class", "#root path is for h5py tree         ", "\n", "\n", "", "else", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Raw/Split_by_class/'", "+", "vid_class", "\n", "\n", "", "if", "vid_class", "==", "'NonFall'", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "0", "]", "*", "len", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "1", "]", "*", "len", "(", "data", ")", ")", "\n", "\n", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "as", "hf", ":", "\n", "#root_sub = root.create_group('Split_by_video')", "\n", "        ", "print", "(", "'creating data at '", ",", "root_path", ")", "\n", "if", "root_path", "in", "hf", ":", "\n", "            ", "print", "(", "'root_path {} found, clearing'", ".", "format", "(", "root_path", ")", ")", "\n", "del", "hf", "[", "root_path", "]", "\n", "", "root", "=", "hf", ".", "create_group", "(", "root_path", ")", "\n", "\n", "root", "[", "'Data'", "]", "=", "data", "\n", "\n", "root", "[", "'Labels'", "]", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init.flip_windowed_arr": [[401, 428], ["numpy.prod", "numpy.zeros", "print", "range", "len", "numpy.zeros", "range", "len", "len", "cv2.flip", "cv2.flip.reshape"], "function", ["None"], ["", "", "def", "flip_windowed_arr", "(", "windowed_data", ")", ":", "\n", "    ", "\"\"\"\n    windowed_data: of shape (samples, win_len,...)\n    \n    returns shape len(windowed_data), win_len, flattened_dim)\n    Note: Requires openCV\n    \"\"\"", "\n", "win_len", "=", "windowed_data", ".", "shape", "[", "1", "]", "\n", "flattened_dim", "=", "np", ".", "prod", "(", "windowed_data", ".", "shape", "[", "2", ":", "]", ")", "\n", "#print(flattened_dim)", "\n", "flipped_data_windowed", "=", "np", ".", "zeros", "(", "(", "len", "(", "windowed_data", ")", ",", "win_len", ",", "flattened_dim", ")", ")", "#Array of windows", "\n", "print", "(", "flipped_data_windowed", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "win_idx", "in", "range", "(", "len", "(", "windowed_data", ")", ")", ":", "\n", "        ", "window", "=", "windowed_data", "[", "win_idx", "]", "\n", "flip_win", "=", "np", ".", "zeros", "(", "(", "win_len", ",", "flattened_dim", ")", ")", "\n", "\n", "for", "im_idx", "in", "range", "(", "len", "(", "window", ")", ")", ":", "\n", "            ", "im", "=", "window", "[", "im_idx", "]", "\n", "hor_flip_im", "=", "cv2", ".", "flip", "(", "im", ",", "1", ")", "\n", "#print(hor_flip_im.shape)", "\n", "#print(flip_win[im_idx].shape)", "\n", "\n", "flip_win", "[", "im_idx", "]", "=", "hor_flip_im", ".", "reshape", "(", "flattened_dim", ")", "\n", "\n", "", "flipped_data_windowed", "[", "win_idx", "]", "=", "flip_win", "\n", "", "return", "flipped_data_windowed", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.__init__": [[37, 62], ["print", "keras.models.load_model", "os.path.basename().split", "os.path.basename"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", "=", "None", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "model_name", "=", "'None'", ",", "batch_size", "=", "32", ",", "model_type", "=", "None", ",", "pre_load", "=", "None", ",", "initial_epoch", "=", "0", ",", "epochs", "=", "1", ",", "zoom_range", "=", "0", ",", "hor_flip", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "\n", "\n", "\t\t", "self", ".", "train_data", "=", "None", "\n", "self", ".", "dset", "=", "dset", "\n", "self", ".", "initial_epoch", "=", "initial_epoch", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "pre_load", "=", "pre_load", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "epochs", "=", "epochs", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "zoom_range", "=", "zoom_range", "\n", "self", ".", "hor_flip", "=", "hor_flip", "\n", "\n", "\n", "if", "self", ".", "pre_load", "!=", "None", ":", "\n", "\t\t\t", "print", "(", "'loading saved model'", ")", "\n", "self", ".", "model", "=", "load_model", "(", "pre_load", ")", "\n", "self", ".", "model_name", "=", "os", ".", "path", ".", "basename", "(", "pre_load", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.save_exp": [[63, 81], ["print", "img_exp.ImgExp.model.save", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["", "", "def", "save_exp", "(", "self", ")", ":", "\n", "\n", "\t    ", "'''\n\t    Saves the model of the experiment to './Models/self.dset/self.model_name'\n\t    '''", "\n", "#save_string = self.exp_name #Do this again incase info added to str based on data load(ie after init)", "\n", "if", "self", ".", "hor_flip", "==", "True", ":", "\n", "\t        ", "self", ".", "model_name", "=", "self", ".", "model_name", "+", "'-hor_flip'", "\n", "\n", "", "base", "=", "'./Models/{}/'", ".", "format", "(", "self", ".", "dset", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "base", ")", ":", "\n", "\t        ", "os", ".", "makedirs", "(", "base", ")", "\n", "\n", "", "save_string", "=", "'{}/{}.h5'", ".", "format", "(", "base", ",", "self", ".", "model_name", ")", "\n", "\n", "print", "(", "'saving model to '", ",", "save_string", ")", "\n", "self", ".", "model", ".", "save", "(", "save_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.set_train_data": [[83, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_train_data", "(", "self", ",", "raw", "=", "False", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tLoads train data from memory, and assigns it to self.train_data. Train data will \n\t\talways consist of images/image sequences.\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please Implement this method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.get_MSE": [[91, 94], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_MSE", "(", "self", ",", "test_data", ")", ":", "\n", "\t\t", "\"\"\"Returns MSE per input sample in test_data\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please Implement this method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.train": [[95, 100], ["NotImplementedError"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tTrain model\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please Implement this method\"", ")", "\n", "", "def", "test", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.test": [[100, 106], ["NotImplementedError"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tEvalute model based on reconstruciotn error as anomoly score for detecting falls in test video. Reports ROC AUC\n\t\tand PR AUC.\n\t\t\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please Implement this method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.init_windowed_arr": [[16, 65], ["os.path.isfile", "print", "h5py_init.init_videos", "h5py.File", "data_management.create_windowed_arr_per_vid", "print", "dict", "print", "numpy.save", "os.path.isdir", "os.makedirs", "dict.items"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_videos", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr_per_vid"], ["def", "init_windowed_arr", "(", "dset", "=", "'Thermal'", ",", "ADL_only", "=", "True", ",", "win_len", "=", "8", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ")", ":", "\n", "    ", "'''\n    Creates windowed version of dset data. Saves windowed array to 'npData/ADL_data-proc-win_{}.npy'.format(train_or_test, \\\n                    dset, win_len), vids_win)\n\n    Params:\n        str dset: dataset to use\n        bool ADL_only: if True, only takes ADL from dataset\n        int win_len: how many frames to extract for a sequence\n\n    Returns:\n        ndarray vids_win: shape (samples-D, win_len, )\n    '''", "\n", "\n", "master_path", "=", "root_drive", "+", "'/H5Data/{}/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "master_path", ")", ":", "\n", "        ", "print", "(", "'initializing h5py..'", ")", "\n", "init_videos", "(", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "raw", "=", "False", ",", "dset", "=", "dset", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "master_path", ",", "'r'", ")", "as", "hf", ":", "\n", "\n", "            ", "data_dict", "=", "hf", "[", "dset", "+", "'/Processed/Split_by_video'", "]", "\n", "\n", "if", "ADL_only", "==", "True", ":", "\n", "                ", "data_dict", "=", "dict", "(", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "data_dict", ".", "items", "(", ")", "if", "'adl'", "in", "key", "or", "'ADL'", "in", "key", ")", "#Get only ADL vids", "\n", "\n", "", "vids_win", "=", "create_windowed_arr_per_vid", "(", "vids_dict", "=", "data_dict", ",", "stride", "=", "1", ",", "win_len", "=", "win_len", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ")", "\n", "\n", "if", "ADL_only", "==", "True", ":", "\n", "                ", "save_path", "=", "root_drive", "+", "'/npData/{}/'", ".", "format", "(", "dset", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "save_path", "=", "save_path", "+", "'ADL_data-proc-win_{}.npy'", ".", "format", "(", "win_len", ")", "\n", "\n", "print", "(", "'saving data to '", ",", "save_path", ")", "\n", "np", ".", "save", "(", "save_path", ",", "vids_win", ")", "\n", "\n", "\n", "", "print", "(", "'total windowed array shape'", ",", "vids_win", ".", "shape", ")", "\n", "\n", "", "return", "vids_win", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr_per_vid": [[66, 93], ["sum", "numpy.zeros", "zip", "len", "vids_dict.values", "vids_dict.keys", "print", "vid.reshape.reshape", "data_management.create_windowed_arr", "print", "len", "list", "len", "vids_dict.values", "int", "len", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr"], ["", "def", "create_windowed_arr_per_vid", "(", "vids_dict", ",", "stride", ",", "win_len", ",", "img_width", ",", "img_height", ")", ":", "\n", "    ", "'''\n    Assumes vids_dict is h5py structure, ie. vids_dict = hf['Data_2017/UR/Raw/Split_by_video']\n    data set must cotnain atleast win_len frames\n    '''", "\n", "\n", "vid_list", "=", "[", "len", "(", "vid", "[", "'Data'", "]", "[", ":", "]", ")", "for", "vid", "in", "list", "(", "vids_dict", ".", "values", "(", ")", ")", "]", "\n", "#print(vid_list)", "\n", "\n", "num_windowed", "=", "sum", "(", "[", "int", "(", "np", ".", "floor", "(", "val", "-", "win_len", ")", "/", "stride", ")", "+", "1", "for", "val", "in", "vid_list", "]", ")", "\n", "#print('num_windowed', num_windowed)", "\n", "output_shape", "=", "(", "num_windowed", ",", "win_len", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "# print('output_shape', output_shape)", "\n", "\n", "total", "=", "np", ".", "zeros", "(", "output_shape", ")", "\n", "#print('total.shape', 'num_windowed', 'output_shape', total.shape, num_windowed, output_shape)", "\n", "i", "=", "0", "\n", "for", "vid", ",", "name", "in", "zip", "(", "vids_dict", ".", "values", "(", ")", ",", "vids_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", "(", "'windowing vid at'", ",", "name", ")", "\n", "vid", "=", "vid", "[", "'Data'", "]", "[", ":", "]", "\n", "vid", "=", "vid", ".", "reshape", "(", "len", "(", "vid", ")", ",", "64", ",", "64", ",", "1", ")", "\n", "vid_windowed", "=", "create_windowed_arr", "(", "vid", ",", "stride", ",", "win_len", ")", "\n", "print", "(", "'windowed vid shape'", ",", "vid_windowed", ".", "shape", ")", "\n", "total", "[", "i", ":", "i", "+", "len", "(", "vid_windowed", ")", "]", "=", "vid_windowed", "\n", "i", "+=", "len", "(", "vid_windowed", ")", "\n", "\n", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr": [[95, 119], ["numpy.zeros", "int", "numpy.array", "numpy.floor", "range", "len"], "function", ["None"], ["", "def", "create_windowed_arr", "(", "arr", ",", "stride", ",", "win_len", ")", ":", "\n", "    ", "\"\"\"\n    arr: array of imgs\n    \"\"\"", "\n", "\n", "img_width", ",", "img_height", "=", "arr", ".", "shape", "[", "1", "]", ",", "arr", ".", "shape", "[", "2", "]", "\n", "\n", "output_length", "=", "int", "(", "np", ".", "floor", "(", "(", "len", "(", "arr", ")", "-", "win_len", ")", "/", "stride", ")", ")", "+", "1", "\n", "output_shape", "=", "(", "output_length", ",", "win_len", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "\n", "total", "=", "np", ".", "zeros", "(", "output_shape", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "output_length", ":", "\n", "        ", "next_chunk", "=", "np", ".", "array", "(", "[", "arr", "[", "i", "+", "j", "]", "for", "j", "in", "range", "(", "win_len", ")", "]", ")", "#Can use np.arange if want to use time step \\", "\n", "# ie. np.arrange(0,win_len,dt)", "\n", "\n", "total", "[", "i", "]", "=", "next_chunk", "\n", "\n", "i", "=", "i", "+", "stride", "\n", "\n", "", "arr_windowed", "=", "total", "\n", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.load_data": [[122, 213], ["print", "os.path.isfile", "print", "h5py_init.init_videos", "h5py_init.init_data_by_class", "h5py.File"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_videos", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_data_by_class"], ["", "def", "load_data", "(", "split_by_vid_or_class", "=", "'Split_by_vid'", ",", "raw", "=", "False", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "vid_class", "=", "'NonFall'", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "    ", "\"\"\"\n    Note :to use this function, need to have downloaded h5py for dset, and placed in ./H5Data directory, or have downloaded data set,\n    extracted frames, and placed them in directory structure specified in h5py_init.py\n    \n    Loads data from h5py file, and reutrns a dictionary, the properties of which depend on params vid_class and split_by_vid_or_class\n\n    Params:\n    \tstr split_by_vid_or_class: must be one of \"Split_by_vid\" or \"Split_by_class\". If \"Split_by_vid\", the returned dictionary\n    \twill have key-value pairs for each video. Otherwise, will have key-value paris for data and labels\n    \tbool raw: if true, data will be not processed (mean centering and intensity scaling)\n    \tint img_wdith: width of images\n    \tint img_height: height of images\n        str dset: dataset to be loaded\n    \tstr vid_class: must be one of \"NonFall\" or \"Fall\". if split_by_vid_or_class is \"Split_by_class\", will load only class\n    \t\tgiven by vid_class\n    \n    Returns:\n    \th5py group data_dict: returns h5py nested group containing strucutred view of data. With \n\n\t\t\t\t\tSplit_by_class\n\t\t\t\t\t\tNonFall\n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Data\": shape (samples, img_height*img_width), type \"<f8\">\n\t\t\t\t\t\t\tLabels\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Labels\": shape (samples,), type \"<i4\">\n\n\t\t\t\t\tSplit_by_video\n\t\t\t\t\t\tADL1\n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Data\": shape (1397, 4096), type \"<f8\">\n\t\t\t\t\t\t\tLabels\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Labels\": shape (1397,), type \"<i4\">\n\t\t\t\t\t\tADL2\n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Data\": shape (3203, 4096), type \"<f8\">\n\t\t\t\t\t\t\tLabels\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Labels\": shape (3203,), type \"<i4\">\n\n\t\t\t\t\t\t\t.\n\t\t\t\t\t\t\t.\n\t\t\t\t\t\t\t.\n\t\t\t\t\t\tFall1\n\t\t\t\t\t\t\tData\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Data\": shape (49, 4096), type \"<f8\">\n\t\t\t\t\t\t\tLabels\n\t\t\t\t\t\t\t\t<HDF5 dataset \"Labels\": shape (49,), type \"<i4\">\n                            .\n                            .\n                            .\n\n\n        See h5py_init documentation for more details on creation of the H5 Data.\n\n    \t\n    \"\"\"", "\n", "\n", "\n", "path", "=", "'./H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "# path = 'N:/FallDetection/Fall-Data//H5Data/Data_set-{}-imgdim{}x{}.h5'.format(dset, img_width, img_height)#Local use only", "\n", "\n", "\n", "#init_h5py(path)", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "print", "(", "'h5py path {} not found, attempting to create h5 file..'", ".", "format", "(", "path", ")", ")", "\n", "init_videos", "(", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "raw", "=", "False", ",", "dset", "=", "dset", ")", "\n", "init_data_by_class", "(", "vid_class", "=", "vid_class", ",", "dset", "=", "dset", ",", "raw", "=", "False", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ")", "\n", "\n", "#else:", "\n", "#print('h5py path found, loading data_dict..')", "\n", "", "if", "split_by_vid_or_class", "==", "'Split_by_class'", ":", "\n", "        ", "if", "raw", "==", "False", ":", "\n", "            ", "root_path", "=", "dset", "+", "'/Processed/'", "+", "split_by_vid_or_class", "+", "'/'", "+", "vid_class", "\n", "", "else", ":", "\n", "            ", "root_path", "=", "dset", "+", "'/Raw/'", "+", "split_by_vid_or_class", "+", "'/'", "+", "vid_class", "\n", "", "", "else", ":", "\n", "        ", "if", "raw", "==", "False", ":", "\n", "            ", "root_path", "=", "dset", "+", "'/Processed/'", "+", "split_by_vid_or_class", "\n", "", "else", ":", "\n", "            ", "root_path", "=", "dset", "+", "'/Raw/'", "+", "split_by_vid_or_class", "\n", "", "", "print", "(", "'getting data at group'", ",", "root_path", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hf", ":", "\n", "        ", "data_dict", "=", "hf", "[", "root_path", "]", "[", "'Data'", "]", "[", ":", "]", "\n", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.get_stats_for_all_vids": [[31, 120], ["util.generate_vid_keys", "data_matrix.pop", "print", "pandas.DataFrame", "df.round.mean", "df[].std", "df.round.round", "print", "df.round.to_csv", "os.path.isfile", "print", "h5py_init.init_videos", "h5py_init.init_data_by_class", "h5py.File", "os.path.isdir", "os.makedirs", "vid_name_list.append", "print", "multi_AEmodel.get_stats_for_vid", "RE_l.append", "data_matrix.append", "print", "experiment.model.predict", "util.animate_fall_detect_Spresent", "os.path.isdir", "os.makedirs", "vid_total.reshape", "len"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.generate_vid_keys", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_videos", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_data_by_class", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.get_stats_for_vid", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.animate_fall_detect_Spresent"], ["def", "get_stats_for_all_vids", "(", "experiment", "=", "None", ",", "thresholds", "=", "None", ",", "metric", "=", "'G_Mean'", ",", "models_dir", "=", "None", ",", "dset", "=", "'Thermal'", ",", "agg_type", "=", "None", ",", "raw", "=", "False", ",", "animate", "=", "False", ")", ":", "\n", "\t", "'''\n\tTODO auto initialize data if component not found etc.\n\t'''", "\n", "\n", "\n", "if", "thresholds", "!=", "None", ":", "\n", "\t\t", "data_matrix", "=", "[", "[", "'Mean Reconstruction Error'", ",", "'Mean Reconstruction Error + 1 :'", ",", "'Mean Reconstruction Error + 2 :'", ",", "'Mean Reconstruction Error + 3 :'", ",", "'Maximum Reconstruction Error'", ",", "'RRE'", ",", "'ROC AUC Score'", ",", "'PR AUC Score'", "]", "]", "\n", "", "else", ":", "\n", "\t\t", "data_matrix", "=", "[", "[", "'ROC AUC Score'", ",", "'PR AUC Score'", "]", "]", "\n", "\n", "\n", "", "vid_name_list", "=", "[", "]", "\n", "features_list", "=", "[", "]", "\n", "labels_list", "=", "[", "]", "\n", "RE_l", "=", "[", "]", "\n", "\n", "vid_dir_keys_Fall", "=", "generate_vid_keys", "(", "'Fall'", ",", "experiment", ".", "dset", ")", "#Ensures sorted order of fall vids", "\n", "\n", "path", "=", "root_drive", "+", "'/H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "experiment", ".", "dset", ",", "experiment", ".", "img_width", ",", "experiment", ".", "img_height", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "\t\t", "print", "(", "'h5py path {} not found, attempting to create h5 file..'", ".", "format", "(", "path", ")", ")", "\n", "init_videos", "(", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "raw", "=", "False", ",", "dset", "=", "dset", ")", "\n", "init_data_by_class", "(", "vid_class", "=", "vid_class", ",", "dset", "=", "dset", ",", "raw", "=", "False", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ")", "\n", "\n", "", "Fall_stop", "=", "'None'", "#Make th", "\n", "\n", "\n", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hf", ":", "\n", "\t\t", "data_dict", "=", "hf", "[", "dset", "+", "'/Processed/Split_by_video'", "]", "\n", "f_idx", "=", "0", "\n", "for", "Fall_name", "in", "vid_dir_keys_Fall", ":", "\n", "\n", "\t\t\t", "if", "Fall_name", "==", "Fall_stop", ":", "\n", "\t\t\t\t", "print", "(", "'breaking at '", ",", "Fall_name", ")", "\n", "break", "\n", "\n", "", "vid_total", "=", "data_dict", "[", "Fall_name", "]", "[", "'Data'", "]", "[", ":", "]", "\n", "labels_total", "=", "data_dict", "[", "Fall_name", "]", "[", "'Labels'", "]", "[", ":", "]", "\n", "\n", "experiment", ".", "test_data", "=", "vid_total", "\n", "display_name", "=", "Fall_name", "\n", "vid_name_list", ".", "append", "(", "display_name", ")", "\n", "print", "(", "'testing on'", ",", "display_name", ")", "\n", "\n", "next_row", ",", "RE", "=", "get_stats_for_vid", "(", "test_data", "=", "vid_total", ",", "test_labels", "=", "labels_total", ",", "experiment", "=", "experiment", ",", "thresholds", "=", "thresholds", ",", "metric", "=", "metric", ",", "Fall_name", "=", "Fall_name", ",", "dset", "=", "dset", ",", "agg_type", "=", "agg_type", ",", "f_idx", "=", "f_idx", ")", "\n", "f_idx", "+=", "1", "\n", "\n", "RE_l", ".", "append", "(", "RE", ")", "\n", "\n", "data_matrix", ".", "append", "(", "next_row", ")", "\n", "\n", "\n", "if", "animate", "==", "True", ":", "\n", "\t\t\t\t", "ani_dir", "=", "'./animation/{}/'", ".", "format", "(", "dset", ")", "\n", "ani_dir", "=", "ani_dir", "+", "'/{}'", ".", "format", "(", "experiment", ".", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ani_dir", ")", ":", "\n", "\t\t\t\t\t", "os", ".", "makedirs", "(", "ani_dir", ")", "\n", "", "preds", "=", "experiment", ".", "model", ".", "predict", "(", "vid_total", ".", "reshape", "(", "len", "(", "vid_total", ")", ",", "experiment", ".", "img_width", ",", "experiment", ".", "img_height", ",", "1", ")", ")", "\n", "animate_fall_detect_Spresent", "(", "testfall", "=", "vid_total", ",", "recons", "=", "preds", ",", "scores", "=", "RE", ",", "to_save", "=", "ani_dir", "+", "'/{}.mp4'", ".", "format", "(", "Fall_name", ")", ")", "\n", "\n", "", "", "", "headers", "=", "data_matrix", ".", "pop", "(", "0", ")", "\n", "print", "(", "headers", ")", "\n", "#print(np.array(data_matrix).shape)", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data_matrix", ",", "index", "=", "vid_name_list", ",", "columns", "=", "headers", ")", "\n", "df", ".", "loc", "[", "'mean'", "]", "=", "df", ".", "mean", "(", ")", "\n", "\n", "df", ".", "loc", "[", "'std'", "]", "=", "df", "[", "0", ":", "-", "1", "]", ".", "std", "(", ")", "\n", "df", "=", "df", ".", "round", "(", "2", ")", "\n", "\n", "\n", "if", "agg_type", "!=", "None", ":", "\n", "\t    ", "root_s", "=", "'./AEComparisons/'", "+", "metric", "+", "'/'", "+", "experiment", ".", "dset", "+", "'/'", "+", "agg_type", "\n", "", "else", ":", "\n", "\t    ", "root_s", "=", "'./AEComparisons/'", "+", "metric", "+", "'/'", "+", "experiment", ".", "dset", "+", "'/'", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "root_s", ")", ":", "\n", "\t    ", "os", ".", "makedirs", "(", "root_s", ")", "\n", "", "save_path", "=", "root_s", "+", "'/'", "+", "experiment", ".", "model_name", "+", "'.csv'", "\n", "\n", "print", "(", "'saving results to'", ",", "save_path", ")", "\n", "df", ".", "to_csv", "(", "save_path", ")", "\n", "#print(df)", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.get_stats_for_vid": [[123, 164], ["experiment.get_MSE", "print", "print", "next_row.append", "next_row.append", "print", "data_management.create_windowed_arr.reshape", "data_management.create_windowed_arr", "util.get_output", "len", "util.get_output", "conf_mat.ravel", "next_row.append", "next_row.append", "next_row.append"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.img_exp.ImgExp.get_MSE", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.data_management.create_windowed_arr", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output"], ["", "def", "get_stats_for_vid", "(", "test_data", "=", "None", ",", "experiment", "=", "None", ",", "thresholds", "=", "None", ",", "metric", "=", "None", ",", "test_labels", "=", "None", ",", "Fall_name", "=", "None", ",", "dset", "=", "None", ",", "agg_type", "=", "None", ",", "f_idx", "=", "None", ")", ":", "\n", "\n", "\t", "if", "agg_type", "!=", "None", ":", "#Must window if agg_type != None", "\n", "\t\t", "print", "(", "'windowing data'", ")", "\n", "img_width", ",", "img_height", ",", "win_len", ",", "stride", "=", "experiment", ".", "img_width", ",", "experiment", ".", "img_height", ",", "experiment", ".", "win_len", ",", "1", "\n", "test_data", "=", "test_data", ".", "reshape", "(", "len", "(", "test_data", ")", ",", "img_width", ",", "img_height", ",", "1", ")", "\n", "test_data", "=", "create_windowed_arr", "(", "test_data", ",", "stride", ",", "win_len", ")", "\n", "\n", "", "labels", "=", "test_labels", "\n", "RE", "=", "experiment", ".", "get_MSE", "(", "test_data", ")", "\n", "\n", "\n", "#print('np.amin(RE), np.amax(RE)', np.amin(RE), np.amax(RE))", "\n", "next_row", "=", "[", "]", "\n", "\n", "if", "thresholds", "!=", "None", ":", "\n", "\t\t", "for", "t", "in", "thresholds", ":", "\n", "\t\t\t", "AUROC", ",", "conf_mat", ",", "g_mean", ",", "AUPR", "=", "get_output", "(", "labels", ",", "RE", ",", "'AE'", ",", "t", "=", "t", ",", "to_plot", "=", "False", ")", "\n", "tn", ",", "fp", ",", "fn", ",", "tp", "=", "conf_mat", ".", "ravel", "(", ")", "\n", "\n", "FPR", "=", "fp", "/", "(", "fp", "+", "tn", ")", "\n", "TPR", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "\n", "if", "metric", "==", "'G_Mean'", ":", "\n", "\t\t\t\t", "next_row", ".", "append", "(", "g_mean", ")", "\n", "", "elif", "metric", "==", "'FPR'", ":", "\n", "\t\t\t\t", "next_row", ".", "append", "(", "FPR", ")", "\n", "", "elif", "metric", "==", "'TPR'", ":", "\n", "\t\t\t\t", "next_row", ".", "append", "(", "TPR", ")", "\n", "", "", "", "else", ":", "\n", "\t\t", "AUROC", ",", "conf_mat", ",", "g_mean", ",", "AUPR", "=", "get_output", "(", "labels", ",", "RE", ",", "'AE'", ",", "to_plot", "=", "False", ")", "\n", "\n", "\n", "", "print", "(", "'AUROC'", ",", "AUROC", ")", "\n", "print", "(", "'AUPR'", ",", "AUPR", ")", "\n", "next_row", ".", "append", "(", "AUROC", ")", "\n", "next_row", ".", "append", "(", "AUPR", ")", "\n", "#print(next_row)", "\n", "\n", "return", "next_row", ",", "RE", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.create_all_pds": [[166, 200], ["print", "multi_AEmodel.get_stats_for_all_vids", "exp.load_train_data", "exp.get_thresholds", "exp.load_train_data", "exp.get_thresholds"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.get_stats_for_all_vids"], ["", "def", "create_all_pds", "(", "experiments", ",", "AUC_only", "=", "False", ",", "models_dir", "=", "None", ",", "dset", "=", "'Thermal'", ",", "agg_type", "=", "None", ")", ":", "\n", "\t", "'''\n\tagg_type is method of aggregating window of scores\n\t'''", "\n", "\n", "if", "AUC_only", "==", "True", ":", "\n", "\t\t", "metrics", "=", "[", "'ROC_AUC'", "]", "\n", "\n", "", "else", ":", "\n", "\t\t", "metrics", "=", "[", "'G_Mean'", "]", "\n", "metrics", "=", "[", "'G_Mean'", ",", "'TPR'", ",", "'FPR'", "]", "\n", "\n", "", "for", "exp", "in", "experiments", ":", "\n", "\t\t", "if", "AUC_only", "==", "False", ":", "\n", "\n", "#load thresholds", "\n", "#if not there..init", "\n", "\t\t    ", "if", "exp", ".", "dset", "==", "'SDU-Filled'", "or", "exp", ".", "dset", "==", "'SDU'", ":", "\n", "\t\t        ", "exp", ".", "load_train_data", "(", "raw", "=", "False", ",", "mmap_mode", "=", "'r'", ")", "\n", "thresholds", "=", "exp", ".", "get_thresholds", "(", "train_data", "=", "exp", ".", "train_data", ",", "agg_type", "=", "agg_type", ")", "\n", "\n", "", "else", ":", "\n", "\t\t        ", "exp", ".", "load_train_data", "(", "raw", "=", "False", ")", "\n", "\n", "thresholds", "=", "exp", ".", "get_thresholds", "(", "train_data", "=", "exp", ".", "train_data", ",", "agg_type", "=", "agg_type", ")", "\n", "", "print", "(", "'got thresholds'", ")", "\n", "#train_data = None", "\n", "exp", ".", "train_data", "=", "None", "\n", "\n", "", "else", ":", "\n", "\t\t    ", "thresholds", "=", "None", "\n", "", "for", "metric", "in", "metrics", ":", "\n", "\t\t\t", "get_stats_for_all_vids", "(", "experiment", "=", "exp", ",", "thresholds", "=", "thresholds", ",", "metric", "=", "metric", ",", "models_dir", "=", "models_dir", ",", "dset", "=", "dset", ",", "agg_type", "=", "agg_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.save_features": [[204, 223], ["range", "pandas.DataFrame", "pd.DataFrame.to_csv", "header.append", "str"], "function", ["None"], ["", "", "", "def", "save_features", "(", "features", ",", "model_name", ",", "classes", ",", "train_or_test", ",", "non_zero_idxs", ")", ":", "\n", "\t", "'''\n\tnon_zero_idxs must come from train set\n\t'''", "\n", "import", "pandas", "as", "pd", "\n", "import", "csv", "\n", "#chararr = np.chararray(len(features))", "\n", "chararr", "=", "[", "]", "\n", "header", "=", "[", "]", "\n", "features", "=", "features", "[", ":", ",", "non_zero_idxs", "]", "\n", "\n", "for", "i", "in", "range", "(", "features", ".", "shape", "[", "1", "]", ")", ":", "#for each col", "\n", "\t\t", "header", ".", "append", "(", "'feature_'", "+", "str", "(", "i", ")", ")", "\n", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "features", ",", "columns", "=", "header", ")", "\n", "df", "[", "'class'", "]", "=", "classes", "\n", "\n", "df", ".", "to_csv", "(", "\"./features/Thermal/{}_data-{}.csv\"", ".", "format", "(", "train_or_test", ",", "model_name", ")", ",", "index", "=", "False", ",", "quoting", "=", "csv", ".", "QUOTE_NONE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.gather_and_save_feautres": [[224, 250], ["cae_exp.init_data", "cae_exp.get_features", "print", "features.reshape.reshape", "range", "multi_AEmodel.save_features", "multi_AEmodel.gather_test_features", "multi_AEmodel.save_features", "len", "numpy.prod", "classes.append"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.get_features", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.save_features", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.gather_test_features", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.save_features"], ["", "def", "gather_and_save_feautres", "(", "experiment", ",", "dset", ")", ":", "\n", "\t", "'''\n\tGets train and test features, also gets non zero idx's form train set.\n\t'''", "\n", "#Getting/Saving train features-----------------------", "\n", "cae_exp", ".", "init_data", "(", "raw", "=", "False", ",", "split_by_vid_or_class", "=", "'Split_by_class'", ",", "vid_class", "=", "'NonFall'", ")", "\n", "layer_name", "=", "'max_pooling2d_3'", "\n", "\n", "features", "=", "cae_exp", ".", "get_features", "(", "layer_name", "=", "layer_name", ",", "train_or_test", "=", "'train'", ")", "\n", "\n", "print", "(", "features", ".", "shape", ")", "\n", "\n", "features", "=", "features", ".", "reshape", "(", "len", "(", "features", ")", ",", "np", ".", "prod", "(", "features", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "#features = features[0:856,0:20]", "\n", "non_zero_idxs", "=", "~", "(", "features", "==", "0", ")", ".", "all", "(", "axis", "=", "0", ")", "\n", "\n", "classes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "features", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "classes", ".", "append", "(", "'n'", ")", "\n", "", "train_or_test", "=", "'train'", "\n", "save_features", "(", "features", ",", "cae_exp", ".", "model_name", ",", "classes", ",", "train_or_test", ",", "non_zero_idxs", ")", "\n", "\n", "#---------------------------------", "\n", "features_list", ",", "classes", "=", "gather_test_features", "(", "experiment", ",", "dset", ")", "\n", "train_or_test", "=", "'test'", "\n", "save_features", "(", "features_list", ",", "experiment", ".", "model_name", ",", "classes", ",", "train_or_test", ",", "non_zero_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.multi_AEmodel.gather_test_features": [[251, 334], ["util.generate_vid_keys", "util.generate_vid_keys", "numpy.vstack", "print", "features_list.reshape.reshape", "print", "h5py.File", "zip", "len", "numpy.prod", "numpy.concatenate", "numpy.concatenate", "experiment.get_features", "features_list.reshape.append", "range", "print", "print", "len", "labels_list.append", "labels_list.append"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.generate_vid_keys", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.generate_vid_keys", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.ae_exp.AEExp.get_features"], ["", "def", "gather_test_features", "(", "experiment", "=", "None", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "\n", "\t", "vid_name_list", "=", "[", "]", "\n", "features_list", "=", "[", "]", "\n", "labels_list", "=", "[", "]", "\n", "vid_dir_keys_NFF", "=", "generate_vid_keys", "(", "'NFFall'", ",", "experiment", ".", "dset", ")", "#ensures sorted order", "\n", "vid_dir_keys_Fall", "=", "generate_vid_keys", "(", "'Fall'", ",", "experiment", ".", "dset", ")", "\n", "\n", "path", "=", "'N:/FallDetection/Fall-Data/H5Data/Data_set_imgdim{}x{}.h5'", ".", "format", "(", "experiment", ".", "img_width", ",", "experiment", ".", "img_height", ")", "\n", "\n", "Fall_stop", "=", "'None'", "\n", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "hf", ":", "\n", "#train_dict = hf['Data_2017/Thermal/Raw/Split_by_class'] ", "\n", "\n", "\t\t", "if", "dset", "!=", "'UR'", ":", "\n", "\t\t\t\t", "data_dict", "=", "hf", "[", "'Data_2017/'", "+", "dset", "+", "'/Processed/Split_by_video'", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "data_dict", "=", "hf", "[", "'Data_2017/UR/Processed/Filled/Split_by_video'", "]", "\n", "data_dict", "=", "hf", "[", "'Data_2017/'", "+", "dset", "+", "'/Processed/Split_by_video'", "]", "\n", "\n", "", "RE_old", "=", "0", "\n", "for", "Fall_name", ",", "NFF_name", "in", "zip", "(", "vid_dir_keys_Fall", ",", "vid_dir_keys_NFF", ")", ":", "\n", "\n", "\t\t\t", "if", "Fall_name", "==", "Fall_stop", ":", "\n", "\t\t\t\t", "print", "(", "'breaking at '", ",", "Fall_name", ")", "\n", "break", "\n", "\n", "", "fall_start", "=", "data_dict", "[", "Fall_name", "+", "'/Data'", "]", ".", "attrs", "[", "'Fall start index'", "]", "#Restores sequence order, experiment.use_cropped != data.use_cropped always", "\n", "if", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", ":", "\n", "\t\t\t\t", "fall_start", "-=", "1", "\n", "\n", "", "Fall_data", ",", "Fall_labels", "=", "data_dict", "[", "Fall_name", "+", "'/Data'", "]", "[", ":", "]", ",", "data_dict", "[", "Fall_name", "+", "'/Labels'", "]", "[", ":", "]", "\n", "NFF_data", ",", "NFF_labels", "=", "data_dict", "[", "NFF_name", "+", "'/Data'", "]", "[", ":", "]", ",", "data_dict", "[", "NFF_name", "+", "'/Labels'", "]", "[", ":", "]", "\n", "vid_total", "=", "np", ".", "concatenate", "(", "(", "NFF_data", "[", ":", "fall_start", "]", ",", "Fall_data", ",", "NFF_data", "[", "fall_start", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "labels_total", "=", "np", ".", "concatenate", "(", "(", "NFF_labels", "[", ":", "fall_start", "]", ",", "Fall_labels", ",", "NFF_labels", "[", "fall_start", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "experiment", ".", "test_data", "=", "vid_total", "\n", "\n", "#Saving Test Features-----------------------------", "\n", "layer_name", "=", "'max_pooling2d_3'", "\n", "# #experiment.play_frames_with_reconstructions()", "\n", "features", "=", "experiment", ".", "get_features", "(", "layer_name", ")", "\n", "features_list", ".", "append", "(", "features", ")", "\n", "#labels_list.append(labels_total)", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "labels_total", ")", ")", ":", "\n", "\t\t\t\t", "lab", "=", "labels_total", "[", "i", "]", "\n", "if", "lab", "==", "1", ":", "\n", "\t\t\t\t\t", "labels_list", ".", "append", "(", "'o'", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "labels_list", ".", "append", "(", "'n'", ")", "\n", "\n", "\n", "# print('features.shape', features.shape)", "\n", "# print(np.amax(features), np.amin(features))", "\n", "# #print(features[0])", "\n", "# plt.figure()", "\n", "\n", "# for i in range(7):", "\n", "# \ti+=1", "\n", "# \tax = plt.subplot(1,8,i)", "\n", "# \tplt.imshow(features[300,:,:,0], cmap = 'gray')", "\n", "# plt.show()", "\n", "# break", "\n", "#-----------------------------", "\n", "", "", "display_name", "=", "Fall_name", "\n", "print", "(", "'testing on'", ",", "display_name", ")", "\n", "\n", "\n", "\n", "", "", "features_list", "=", "np", ".", "vstack", "(", "features_list", ")", "\n", "print", "(", "'features_list.shape'", ",", "features_list", ".", "shape", ")", "\n", "features_list", "=", "features_list", ".", "reshape", "(", "len", "(", "features_list", ")", ",", "np", ".", "prod", "(", "features_list", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "print", "(", "'features_list.shape'", ",", "features_list", ".", "shape", ")", "\n", "#features_list = features_list[:,~(features_list == 0).all(axis=0)]", "\n", "\n", "\n", "classes", "=", "labels_list", "\n", "\n", "#If truncating for testing----", "\n", "#features_list = features_list[0:856,0:20]", "\n", "#classes = classes[0:856]", "\n", "return", "features_list", ",", "classes", "\n", "", ""]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.threshold": [[20, 30], ["predictions.copy", "predictions.copy.reshape", "range", "len"], "function", ["None"], ["def", "threshold", "(", "predictions", "=", "None", ",", "t", "=", "0.5", ")", ":", "\n", "        ", "temp", "=", "predictions", ".", "copy", "(", ")", "\n", "predicted_classes", "=", "temp", ".", "reshape", "(", "predictions", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "predicted_classes", ")", ")", ":", "\n", "            ", "if", "predicted_classes", "[", "i", "]", "<", "t", ":", "\n", "                ", "predicted_classes", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "predicted_classes", "[", "i", "]", "=", "1", "\n", "\n", "", "", "return", "predicted_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.plot_ROC_AUC": [[35, 48], ["matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show"], "function", ["None"], ["def", "plot_ROC_AUC", "(", "fpr", ",", "tpr", ",", "roc_auc", ",", "data_option", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "color", "=", "'darkorange'", ",", "\n", "lw", "=", "lw", ",", "label", "=", "'ROC curve (area = %0.4f)'", "%", "roc_auc", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'navy'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "title", "(", "'Receiver operating characteristic for {}'", ".", "format", "(", "data_option", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output": [[49, 76], ["util.threshold", "sklearn.metrics.confusion_matrix", "imblearn.metrics.geometric_mean_score", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "print", "numpy.count_nonzero", "numpy.count_nonzero", "util.plot_ROC_AUC"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.threshold", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.plot_ROC_AUC"], ["", "def", "get_output", "(", "labels", ",", "predictions", ",", "data_option", "=", "None", ",", "t", "=", "0.5", ",", "to_plot", "=", "False", ",", "pos_label", "=", "1", ")", ":", "\n", "    ", "predicted_classes", "=", "threshold", "(", "predictions", ",", "t", ")", "\n", "true_classes", "=", "labels", "\n", "conf_mat", "=", "confusion_matrix", "(", "y_true", "=", "true_classes", ",", "y_pred", "=", "predicted_classes", ")", "\n", "#report = classification_report(true_classes, predicted_classes)", "\n", "AUROC", "=", "[", "]", "\n", "AUPR", "=", "[", "]", "\n", "if", "np", ".", "count_nonzero", "(", "labels", ")", ">", "0", "and", "np", ".", "count_nonzero", "(", "labels", ")", "!=", "labels", ".", "shape", "[", "0", "]", ":", "#Makes sure both classes present", "\n", "\n", "        ", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "y_true", "=", "true_classes", ",", "y_score", "=", "predictions", ",", "pos_label", "=", "pos_label", ")", "\n", "#auc1 = roc_auc_score(y_true = labels, y_score = predictions)", "\n", "AUROC", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "\n", "precision", ",", "recall", ",", "thresholds", "=", "precision_recall_curve", "(", "true_classes", ",", "predictions", ")", "\n", "AUPR", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "\n", "if", "to_plot", "==", "True", ":", "\n", "            ", "plot_ROC_AUC", "(", "fpr", ",", "tpr", ",", "AUROC", ",", "data_option", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'only one class present'", ")", "\n", "#g_mean = geometric_mean_score(labels, predicted_classes) ", "\n", "", "g_mean", "=", "geometric_mean_score", "(", "labels", ",", "predicted_classes", ")", "\n", "#print(report)", "\n", "# print(\"\\n\")", "\n", "# print(conf_mat)", "\n", "\n", "return", "AUROC", ",", "conf_mat", ",", "g_mean", ",", "AUPR", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.MSE": [[77, 84], ["numpy.mean", "y.reshape", "t.reshape", "numpy.power", "len", "numpy.prod", "len", "numpy.prod"], "function", ["None"], ["", "def", "MSE", "(", "y", ",", "t", ")", ":", "\n", "    ", "'''\n    Mean sqaured error\n    '''", "\n", "y", ",", "t", "=", "y", ".", "reshape", "(", "len", "(", "y", ")", ",", "np", ".", "prod", "(", "y", ".", "shape", "[", "1", ":", "]", ")", ")", ",", "t", ".", "reshape", "(", "len", "(", "t", ")", ",", "np", ".", "prod", "(", "t", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "return", "np", ".", "mean", "(", "np", ".", "power", "(", "y", "-", "t", ",", "2", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.plot_MSE_per_sample": [[86, 96], ["print", "util.MSE", "print", "matplotlib.plot", "MSE.mean", "matplotlib.show", "matplotlib.legend"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.MSE"], ["", "def", "plot_MSE_per_sample", "(", "test_data", ",", "test_data_re", ",", "show", "=", "True", ",", "marker", "=", "'o-'", ",", "label", "=", "'label'", ")", ":", "\n", "    ", "print", "(", "'test_data.shape'", ",", "test_data", ".", "shape", ")", "\n", "recons_error", "=", "MSE", "(", "test_data", ",", "test_data_re", ")", "\n", "print", "(", "'recons_error.mean()'", ",", "recons_error", ".", "mean", "(", ")", ")", "\n", "\n", "plt", ".", "plot", "(", "recons_error", ",", "marker", ",", "label", "=", "label", ")", "\n", "if", "show", "==", "True", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "label", "!=", "None", ":", "\n", "        ", "plt", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.plot_MSE_per_sample_conv": [[97, 104], ["numpy.zeros", "numpy.arange", "print", "matplotlib.plot", "matplotlib.show", "len", "len", "calc_mse_conv", "np.zeros.mean"], "function", ["None"], ["", "", "def", "plot_MSE_per_sample_conv", "(", "y", ",", "t", ")", ":", "\n", "    ", "mse", "=", "np", ".", "zeros", "(", "len", "(", "y", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "y", ")", ")", ":", "\n", "        ", "mse", "[", "i", "]", "=", "calc_mse_conv", "(", "y", "[", "i", "]", ",", "t", "[", "i", "]", ")", "\n", "", "print", "(", "'mse.mean()'", ",", "mse", ".", "mean", "(", ")", ")", "\n", "plt", ".", "plot", "(", "mse", ",", "'o-'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.play_frames": [[106, 130], ["range", "cv2.destroyAllWindows", "len", "cv2.namedWindow", "cv2.resizeWindow", "cv2.imshow", "cv2.waitKey", "len", "cv2.namedWindow", "frames[].reshape", "len", "cv2.namedWindow", "cv2.resizeWindow", "cv2.imshow", "cv2.imshow", "cv2.imshow", "decoded_frames[].reshape", "numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "play_frames", "(", "frames", ",", "decoded_frames", "=", "[", "]", ",", "labels", "=", "[", "]", ")", ":", "\n", "\n", "    ", "ht", ",", "wd", "=", "64", ",", "64", "#TODO change to frames.shape...", "\n", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", ":", "\n", "        ", "cv2", ".", "namedWindow", "(", "'image'", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "cv2", ".", "resizeWindow", "(", "'image'", ",", "600", ",", "600", ")", "\n", "\n", "if", "len", "(", "labels", ")", ">", "0", ":", "\n", "\n", "            ", "cv2", ".", "namedWindow", "(", "'labels'", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "if", "labels", "[", "i", "]", "==", "1", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'labels'", ",", "255", "*", "np", ".", "ones", "(", "(", "ht", ",", "wd", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'labels'", ",", "np", ".", "zeros", "(", "(", "ht", ",", "wd", ")", ")", ")", "\n", "\n", "", "", "cv2", ".", "imshow", "(", "'image'", ",", "frames", "[", "i", "]", ".", "reshape", "(", "ht", ",", "wd", ")", ")", "\n", "\n", "if", "len", "(", "decoded_frames", ")", ">", "0", ":", "\n", "            ", "cv2", ".", "namedWindow", "(", "'decoded'", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "cv2", ".", "resizeWindow", "(", "'decoded'", ",", "600", ",", "600", ")", "\n", "cv2", ".", "imshow", "(", "'decoded'", ",", "decoded_frames", "[", "i", "]", ".", "reshape", "(", "ht", ",", "wd", ")", ")", "\n", "\n", "", "cv2", ".", "waitKey", "(", "10", ")", "\n", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.generate_vid_keys": [[134, 184], ["print", "print", "range", "str", "range", "print", "print", "print"], "function", ["None"], ["", "def", "generate_vid_keys", "(", "vid_base_name", ",", "dset", ")", ":", "\n", "#print('dset', dset)", "\n", "\n", "    ", "if", "dset", "==", "'Thermal'", ":", "\n", "        ", "if", "vid_base_name", "==", "'Fall'", "or", "vid_base_name", "==", "'NFFall'", ":", "\n", "            ", "num_vids", "=", "35", "\n", "", "elif", "vid_base_name", "==", "'ADL'", ":", "\n", "            ", "num_vids", "=", "9", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid basename'", ")", "\n", "\n", "", "", "if", "dset", "==", "'Thermal-Dummy'", ":", "\n", "        ", "if", "vid_base_name", "==", "'Fall'", "or", "vid_base_name", "==", "'NFFall'", ":", "\n", "            ", "num_vids", "=", "2", "\n", "", "elif", "vid_base_name", "==", "'ADL'", ":", "\n", "            ", "num_vids", "=", "2", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid basename'", ")", "\n", "\n", "", "", "elif", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", ":", "\n", "        ", "if", "vid_base_name", "==", "'Fall'", "or", "vid_base_name", "==", "'NFFall'", ":", "\n", "            ", "num_vids", "=", "30", "\n", "", "elif", "vid_base_name", "==", "'ADL'", ":", "\n", "            ", "num_vids", "=", "40", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid basename'", ")", "\n", "\n", "", "", "elif", "dset", "==", "'TST'", ":", "\n", "        ", "if", "vid_base_name", "==", "'Fall'", "or", "vid_base_name", "==", "'NFFall'", ":", "\n", "            ", "num_vids", "=", "80", "#TODO update to 132 once init", "\n", "", "elif", "vid_base_name", "==", "'ADL'", ":", "\n", "            ", "num_vids", "=", "132", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid basename'", ")", "\n", "\n", "\n", "", "", "elif", "dset", "==", "'SDU'", "or", "dset", "==", "'SDU-Filled'", ":", "\n", "\n", "        ", "if", "vid_base_name", "==", "'Fall'", "or", "vid_base_name", "==", "'NFFall'", ":", "\n", "            ", "num_vids", "=", "200", "#TODO update to 132 once init", "\n", "", "elif", "vid_base_name", "==", "'ADL'", ":", "\n", "            ", "num_vids", "=", "1000", "\n", "", "else", ":", "\n", "            ", "print", "(", "'invalid basename'", ")", "\n", "", "", "if", "(", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", ")", "and", "vid_base_name", "==", "'ADL'", ":", "\n", "        ", "keys", "=", "[", "'adl-{num:02d}-cam0-d'", ".", "format", "(", "num", "=", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num_vids", ")", "]", "\n", "", "else", ":", "\n", "        ", "keys", "=", "[", "vid_base_name", "+", "str", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num_vids", ")", "]", "\n", "", "return", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.plot_ROC_AUC_tol": [[185, 205], ["matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend"], "function", ["None"], ["", "def", "plot_ROC_AUC_tol", "(", "fpr", ",", "tpr", ",", "roc_auc", ",", "data_option", ",", "tolerance", ")", ":", "\n", "    ", "'''\n    plots fo rmultiple tolerance\n    '''", "\n", "\n", "#plt.figure()", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "lw", "=", "lw", ",", "label", "=", "'tolerance %0.1f (area = %0.4f)'", "%", "(", "tolerance", ",", "roc_auc", ")", ")", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'navy'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "title", "(", "'Receiver operating characteristic for {}'", ".", "format", "(", "data_option", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "#plt.close()", "\n", "#plt.show()", "\n", "\n", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.make_cross_window_matrix": [[206, 224], ["numpy.zeros", "range", "len", "len", "len", "len"], "function", ["None"], ["", "def", "make_cross_window_matrix", "(", "scores", ")", ":", "\n", "    ", "\"\"\"\n    Takes input of form (samples,window_length) corresponding to \n    RE averaged accross image dims, and creates matrix of form\n    (image_index,cross_window_score)\n    \"\"\"", "\n", "\n", "win_len", "=", "scores", ".", "shape", "[", "1", "]", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "scores", ")", "+", "win_len", "-", "1", ",", "len", "(", "scores", ")", ")", ")", "\n", "mat", "[", ":", "]", "=", "np", ".", "NAN", "\n", "#print('mat[:,0].shape', mat[:,0].shape)", "\n", "#print(mat.shape)", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "#print(i, len(win)+i)", "\n", "        ", "win", "=", "scores", "[", "i", "]", "\n", "mat", "[", "i", ":", "len", "(", "win", ")", "+", "i", ",", "i", "]", "=", "win", "\n", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_cross_window_stats": [[225, 242], ["range", "print", "numpy.array", "len", "numpy.nanmean", "numpy.nanstd", "np.array.append", "len"], "function", ["None"], ["", "def", "get_cross_window_stats", "(", "scores_mat", ")", ":", "\n", "    ", "'''\n    Assumes scores in form (image_index,cross_window_scores), ie. shape (samples,window_len)\n    returns in form (img_index, mean, std, mean+std)\n    '''", "\n", "scores_final", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "scores_mat", ")", ")", ":", "\n", "#print(i)", "\n", "        ", "row", "=", "scores_mat", "[", "i", ",", ":", "]", "\n", "#print(row.shape)", "\n", "mean", "=", "np", ".", "nanmean", "(", "row", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "nanstd", "(", "row", ",", "axis", "=", "0", ")", "\n", "scores_final", ".", "append", "(", "(", "mean", ",", "std", ",", "mean", "+", "std", "*", "10", "**", "3", ")", ")", "\n", "", "print", "(", "len", "(", "scores_final", ")", ")", "\n", "\n", "scores_final", "=", "np", ".", "array", "(", "scores_final", ")", "\n", "return", "scores_final", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.agg_window": [[243, 272], ["numpy.mean", "numpy.std", "util.make_cross_window_matrix", "util.get_cross_window_stats", "util.make_cross_window_matrix", "util.get_cross_window_stats", "print"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.make_cross_window_matrix", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_cross_window_stats", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.make_cross_window_matrix", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_cross_window_stats"], ["", "def", "agg_window", "(", "RE", ",", "agg_type", ")", ":", "\n", "    ", "'''\n    Aggregates window of scores in various ways\n    '''", "\n", "\n", "if", "agg_type", "==", "'in_mean'", ":", "\n", "        ", "inwin_mean", "=", "np", ".", "mean", "(", "RE", ",", "axis", "=", "1", ")", "\n", "return", "inwin_mean", "\n", "\n", "", "elif", "agg_type", "==", "'in_std'", ":", "\n", "# print('inwin_mean', inwin_mean.shape)", "\n", "        ", "inwin_std", "=", "np", ".", "std", "(", "RE", ",", "axis", "=", "1", ")", "\n", "return", "inwin_std", "\n", "#inwin_labels = labels_total[win_len-1:]", "\n", "\n", "", "elif", "agg_type", "==", "'x_std'", ":", "\n", "        ", "RE_xmat", "=", "make_cross_window_matrix", "(", "RE", ")", "\n", "stats", "=", "get_cross_window_stats", "(", "RE_xmat", ")", "\n", "x_std", "=", "stats", "[", ":", ",", "1", "]", "\n", "return", "x_std", "\n", "\n", "", "elif", "agg_type", "==", "'x_mean'", ":", "\n", "        ", "RE_xmat", "=", "make_cross_window_matrix", "(", "RE", ")", "\n", "stats", "=", "get_cross_window_stats", "(", "RE_xmat", ")", "\n", "x_mean", "=", "stats", "[", ":", ",", "0", "]", "\n", "return", "x_mean", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'agg_type not found'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.restore_Fall_vid": [[274, 286], ["numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "", "def", "restore_Fall_vid", "(", "data_dict", ",", "Fall_name", ",", "NFF_name", ")", ":", "\n", "\n", "    ", "fall_start", "=", "data_dict", "[", "Fall_name", "+", "'/Data'", "]", ".", "attrs", "[", "'Fall start index'", "]", "#Restores sequence order, experiment.use_cropped != data.use_cropped always", "\n", "\n", "fall_start", "-=", "1", "\n", "\n", "Fall_data", ",", "Fall_labels", "=", "data_dict", "[", "Fall_name", "+", "'/Data'", "]", "[", ":", "]", ",", "data_dict", "[", "Fall_name", "+", "'/Labels'", "]", "[", ":", "]", "\n", "NFF_data", ",", "NFF_labels", "=", "data_dict", "[", "NFF_name", "+", "'/Data'", "]", "[", ":", "]", ",", "data_dict", "[", "NFF_name", "+", "'/Labels'", "]", "[", ":", "]", "\n", "vid_total", "=", "np", ".", "concatenate", "(", "(", "NFF_data", "[", ":", "fall_start", "]", ",", "Fall_data", ",", "NFF_data", "[", "fall_start", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "labels_total", "=", "np", ".", "concatenate", "(", "(", "NFF_labels", "[", ":", "fall_start", "]", ",", "Fall_labels", ",", "NFF_labels", "[", "fall_start", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "vid_total", ",", "labels_total", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_thresholds_helper": [[287, 304], ["numpy.percentile", "numpy.mean", "numpy.max", "numpy.max", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "function", ["None"], ["", "def", "get_thresholds_helper", "(", "RE", ",", "omega", "=", "1.5", ")", ":", "\n", "        ", "'''\n        Gets all threshodls from RE\n\n        Params:\n            ndarray RE: reconstruction error of training data\n        '''", "\n", "\n", "Q_3", ",", "Q_1", "=", "np", ".", "percentile", "(", "RE", ",", "[", "75", ",", "25", "]", ")", "\n", "IQR", "=", "Q_3", "-", "Q_1", "\n", "#omega = 1.5", "\n", "RRE", "=", "RE", "[", "(", "Q_1", "-", "omega", "*", "IQR", "<=", "RE", ")", "&", "(", "RE", "<=", "Q_3", "+", "omega", "*", "IQR", ")", "]", "\n", "\n", "t1", ",", "t2", ",", "t3", ",", "t4", ",", "t5", ",", "t6", "=", "np", ".", "mean", "(", "RE", ")", ",", "np", ".", "mean", "(", "RE", ")", "+", "np", ".", "std", "(", "RE", ")", ",", "np", ".", "mean", "(", "RE", ")", "+", "2", "*", "np", ".", "std", "(", "RE", ")", ",", "np", ".", "mean", "(", "RE", ")", "+", "3", "*", "np", ".", "std", "(", "RE", ")", ",", "np", ".", "max", "(", "RE", ")", ",", "np", ".", "max", "(", "RRE", ")", "\n", "thresholds", "=", "[", "t1", ",", "t2", ",", "t3", ",", "t4", ",", "t5", ",", "t6", "]", "\n", "\n", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.animate_fall_detect_Spresent": [[306, 394], ["gridspec.GridSpec", "matplotlib.subplots", "fig.add_subplot.axis", "fig.add_subplot.axis", "fig.add_subplot", "fig.add_subplot.set_title", "fig.add_subplot.set_xticks", "fig.add_subplot.set_yticks", "fig.add_subplot", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_xlabel", "fig.add_subplot", "fig.add_subplot.set_title", "fig.add_subplot.set_xticks", "fig.add_subplot.set_yticks", "range", "matplotlib.ArtistAnimation", "gridspec.GridSpec.tight_layout", "animation.ArtistAnimation.save", "animation.ArtistAnimation.event_source.stop", "matplotlib.close", "fig.add_subplot.axhline", "fig.add_subplot.legend", "fig.add_subplot.imshow", "recons[].reshape", "fig.add_subplot.imshow", "ims.append", "testfall[].reshape", "numpy.argwhere", "numpy.argwhere", "fig.add_subplot.plot", "fig.add_subplot.plot", "len", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot"], "function", ["None"], ["", "def", "animate_fall_detect_Spresent", "(", "testfall", ",", "recons", ",", "scores", ",", "win_len", "=", "1", ",", "threshold", "=", "0", ",", "to_save", "=", "'./test.mp4'", ")", ":", "\n", "    ", "'''\n    Pass in data for single video, recons is recons frames, scores is x_std or x_mean etc.\n    Threshold is RRE, mean, etc..\n    '''", "\n", "import", "matplotlib", ".", "gridspec", "as", "gridspec", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "2", ",", "2", ",", "height_ratios", "=", "[", "2", ",", "1", "]", ")", "\n", "\n", "ht", ",", "wd", "=", "64", ",", "64", "\n", "\n", "eps", "=", ".0001", "\n", "#setup figure", "\n", "#fig = plt.figure()", "\n", "fig", ",", "(", "(", "ax1", ",", "ax3", ")", ")", "=", "plt", ".", "subplots", "(", "1", ",", "2", ",", "figsize", "=", "(", "6", ",", "6", ")", ")", "\n", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "ax3", ".", "axis", "(", "'off'", ")", "\n", "#ax1=fig.add_subplot(2,2,1)", "\n", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "0", "]", ")", "\n", "ax1", ".", "set_title", "(", "\"Original\"", ")", "\n", "ax1", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax1", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n", "\n", "#ax2=fig.add_subplot(gs[-1,0])", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", ":", "]", ")", "\n", "\n", "#ax2.set_yticks([])", "\n", "#ax2.set_xticks([])", "\n", "ax2", ".", "set_ylabel", "(", "'Score'", ")", "\n", "ax2", ".", "set_xlabel", "(", "'Frame'", ")", "\n", "\n", "if", "threshold", "!=", "0", ":", "\n", "        ", "ax2", ".", "axhline", "(", "y", "=", "threshold", ",", "color", "=", "'r'", ",", "linestyle", "=", "'dashed'", ",", "label", "=", "'RRE'", ")", "\n", "ax2", ".", "legend", "(", ")", "\n", "\n", "#ax3=fig.add_subplot(2,2,2)", "\n", "", "ax3", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "1", "]", ")", "\n", "ax3", ".", "set_title", "(", "\"Reconstruction\"", ")", "\n", "ax3", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax3", ".", "set_yticks", "(", "[", "]", ")", "\n", "\n", "\n", "#set up list of images for animation", "\n", "ims", "=", "[", "]", "\n", "\n", "for", "time", "in", "range", "(", "len", "(", "testfall", ")", "-", "(", "win_len", "-", "1", ")", "-", "1", ")", ":", "\n", "\n", "        ", "im1", "=", "ax1", ".", "imshow", "(", "testfall", "[", "time", "]", ".", "reshape", "(", "ht", ",", "wd", ")", ",", "cmap", "=", "'gray'", ",", "aspect", "=", "'equal'", ")", "\n", "figure", "=", "recons", "[", "time", "]", ".", "reshape", "(", "ht", ",", "wd", ")", "\n", "im2", "=", "ax3", ".", "imshow", "(", "figure", ",", "cmap", "=", "'gray'", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "#print(\"time={} mse={} std={}\".format(time,mse_difficult[time],std))", "\n", "if", "time", ">", "0", ":", "\n", "\n", "            ", "scores_curr", "=", "scores", "[", "0", ":", "time", "]", "\n", "\n", "fall_pts_idx", "=", "np", ".", "argwhere", "(", "scores_curr", ">", "threshold", ")", "\n", "nonfall_pts_idx", "=", "np", ".", "argwhere", "(", "scores_curr", "<=", "threshold", ")", "\n", "\n", "fall_pts", "=", "scores_curr", "[", "fall_pts_idx", "]", "\n", "nonfall_pts", "=", "scores_curr", "[", "nonfall_pts_idx", "]", "\n", "\n", "if", "fall_pts_idx", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "#pass", "\n", "                ", "plot_r", ",", "=", "ax2", ".", "plot", "(", "fall_pts_idx", ",", "fall_pts", ",", "'r.'", ")", "\n", "plot", ",", "=", "ax2", ".", "plot", "(", "nonfall_pts_idx", ",", "nonfall_pts", ",", "'b.'", ")", "\n", "", "else", ":", "\n", "\n", "                ", "plot", ",", "=", "ax2", ".", "plot", "(", "scores_curr", ",", "'b.'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "plot", ",", "=", "ax2", ".", "plot", "(", "scores", "[", "0", "]", ",", "'b.'", ")", "\n", "plot_r", ",", "=", "ax2", ".", "plot", "(", "scores", "[", "0", "]", ",", "'b.'", ")", "\n", "\n", "\n", "", "ims", ".", "append", "(", "[", "im1", ",", "plot", ",", "im2", ",", "plot_r", "]", ")", "#list of ims", "\n", "\n", "#run animation", "\n", "", "ani", "=", "animation", ".", "ArtistAnimation", "(", "fig", ",", "ims", ",", "interval", "=", "40", ",", "repeat", "=", "False", ")", "\n", "#plt.tight_layout()", "\n", "gs", ".", "tight_layout", "(", "fig", ")", "\n", "ani", ".", "save", "(", "to_save", ")", "\n", "\n", "ani", ".", "event_source", ".", "stop", "(", ")", "\n", "del", "ani", "\n", "plt", ".", "close", "(", ")", "\n", "#plt.show()", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.join_mean_std": [[397, 413], ["mean.flatten", "std.flatten", "numpy.ones", "range", "numpy.reshape", "len"], "function", ["None"], ["", "def", "join_mean_std", "(", "mean", ",", "std", ")", ":", "\n", "    ", "'''\n    mean(std) for matrix of means and stds (same size)\n    '''", "\n", "mean_fl", "=", "mean", ".", "flatten", "(", ")", "\n", "std_fl", "=", "std", ".", "flatten", "(", ")", "\n", "new", "=", "np", ".", "ones", "(", "std_fl", ".", "shape", ",", "dtype", "=", "object", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "std_fl", ")", ")", ":", "\n", "\n", "        ", "new", "[", "i", "]", "=", "\"{:.2f}({:.2f})\"", ".", "format", "(", "mean_fl", "[", "i", "]", ",", "std_fl", "[", "i", "]", ")", "\n", "\n", "", "new", "=", "np", ".", "reshape", "(", "new", ",", "mean", ".", "shape", ")", "\n", "\n", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.gather_auc_avg_per_tol": [[415, 465], ["numpy.zeros", "range", "numpy.array", "numpy.array", "util.create_windowed_labels", "util.get_output", "util.get_output", "tol_list_ROC.append", "tol_keys.append", "tol_list_ROC.append", "tol_keys.append", "tol_list_PR.append", "tol_list_PR.append"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.create_windowed_labels", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.get_output"], ["", "def", "gather_auc_avg_per_tol", "(", "inwin_mean", ",", "inwin_std", ",", "labels", ",", "win_len", "=", "8", ")", ":", "\n", "    ", "'''\n    inwin_mean/std are mean over the windows for a video (1,num_windows = vid_length - win_len-1)\n\n    Retruns array of shape (2,win_len = tolerance*2), which are scores for each tolerance in range(win_len),\n    *2 for std and mean, one row\n    for AUROC, one for AUPR\n\n    tol1_mean, tol1_std, tol2_men, tol2_std.....\n    '''", "\n", "img_width", ",", "img_height", "=", "64", ",", "64", "\n", "stride", "=", "1", "\n", "\n", "tol_mat", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", "*", "win_len", ")", ")", "\n", "tol_list_ROC", "=", "[", "]", "\n", "tol_list_PR", "=", "[", "]", "\n", "\n", "#print(tol_mat.shape)", "\n", "tol_keys", "=", "[", "]", "#For dataframe labels", "\n", "for", "tolerance", "in", "range", "(", "win_len", ")", ":", "\n", "        ", "tolerance", "+=", "1", "#Start at 1", "\n", "\n", "windowed_labels", "=", "create_windowed_labels", "(", "labels", ",", "stride", ",", "tolerance", ",", "win_len", ")", "\n", "\n", "# plt.plot(windowed_labels)", "\n", "# plt.show()", "\n", "\n", "AUROC_mean", ",", "conf_mat", ",", "g_mean", ",", "AUPR_mean", "=", "get_output", "(", "labels", "=", "windowed_labels", ",", "predictions", "=", "inwin_mean", ",", "data_option", "=", "'NA'", ",", "to_plot", "=", "False", ")", "#single value", "\n", "\n", "AUROC_std", ",", "conf_mat", ",", "g_mean", ",", "AUPR_std", "=", "get_output", "(", "labels", "=", "windowed_labels", ",", "predictions", "=", "inwin_std", ",", "data_option", "=", "'NA'", ",", "to_plot", "=", "False", ")", "\n", "\n", "#print(AUROC_mean)", "\n", "tol_list_ROC", ".", "append", "(", "AUROC_mean", ")", "\n", "#tol_mat[0, tolerance-1] = AUROC_mean #mean AUROC note mean refers to inwin_mean, not taking mean of AUROC", "\n", "tol_keys", ".", "append", "(", "'tol_{}-mean'", ".", "format", "(", "tolerance", ")", ")", "\n", "tol_list_ROC", ".", "append", "(", "AUROC_std", ")", "\n", "#tol_mat[0, tolerance] = AUROC_std #std AUROC \"\" std", "\n", "tol_keys", ".", "append", "(", "'tol_{}-std'", ".", "format", "(", "tolerance", ")", ")", "\n", "\n", "#        tol_mat[1, tolerance-1] = AUPR_mean #mean AUPR", "\n", "#        tol_mat[1, tolerance] = AUPR_std #mean AUPR", "\n", "tol_list_PR", ".", "append", "(", "AUPR_mean", ")", "\n", "tol_list_PR", ".", "append", "(", "AUPR_std", ")", "\n", "\n", "", "ROCS", "=", "np", ".", "array", "(", "tol_list_ROC", ")", "\n", "PRS", "=", "np", ".", "array", "(", "tol_list_PR", ")", "\n", "tol_mat", "[", "0", ",", ":", "]", "=", "ROCS", "\n", "tol_mat", "[", "1", ",", ":", "]", "=", "PRS", "\n", "return", "tol_mat", ",", "tol_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.util.create_windowed_labels": [[466, 496], ["numpy.zeros", "int", "numpy.array", "sum", "numpy.floor", "range", "len"], "function", ["None"], ["", "def", "create_windowed_labels", "(", "labels", ",", "stride", ",", "tolerance", ",", "window_length", ")", ":", "\n", "    ", "'''\n    Create labels on seq level\n\n    int tolerance: number of fall frames (1's) in a window for it to be labeled as a fall (1). must not exceed window length\n\n    '''", "\n", "output_length", "=", "int", "(", "np", ".", "floor", "(", "(", "len", "(", "labels", ")", "-", "window_length", ")", "/", "stride", ")", ")", "+", "1", "\n", "#output_shape = (output_length, window_length, 1)", "\n", "output_shape", "=", "(", "output_length", ",", "1", ")", "\n", "\n", "total", "=", "np", ".", "zeros", "(", "output_shape", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "output_length", ":", "\n", "        ", "next_chunk", "=", "np", ".", "array", "(", "[", "labels", "[", "i", "+", "j", "]", "for", "j", "in", "range", "(", "window_length", ")", "]", ")", "\n", "\n", "num_falls", "=", "sum", "(", "next_chunk", ")", "#number of falls in the window", "\n", "\n", "if", "num_falls", ">=", "tolerance", ":", "\n", "            ", "total", "[", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "total", "[", "i", "]", "=", "0", "\n", "\n", "\n", "", "i", "=", "i", "+", "stride", "\n", "\n", "", "labels_windowed", "=", "total", "\n", "\n", "return", "labels_windowed", "\n", "", ""]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_dir_lists": [[18, 71], ["glob.glob", "glob.glob", "glob.glob"], "function", ["None"], ["", "def", "get_dir_lists", "(", "dset", ",", "use_cropped", "=", "False", ")", ":", "\n", "    ", "'''\n    This shows structure which frames must be in\n    '''", "\n", "\n", "if", "dset", "==", "'Thermal'", ":", "\n", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/Thermal/DataforAE/test/NonFall/NFFall*'", "\n", "path_Fall", "=", "root_drive", "+", "'/Thermal/DataforAE/test/Fall/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Thermal/DataforAE/train/NonFall/ADL*'", "\n", "\n", "", "elif", "dset", "==", "'UR-Filled'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/UR_Kinect/test/NonFall/filled/NFFall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/UR_Kinect/train/NonFall/filled/adl*'", "\n", "path_Fall", "=", "root_drive", "+", "'/UR_Kinect/test/Fall/filled/Fall*'", "\n", "\n", "", "elif", "dset", "==", "'UR'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/UR_Kinect/test/NonFall/NFFall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/UR_Kinect/train/NonFall/adl*'", "\n", "path_Fall", "=", "root_drive", "+", "'/UR_Kinect/test/Fall/Fall*'", "\n", "\n", "", "elif", "dset", "==", "'TST'", ":", "\n", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/TST_Kinect_V2/Reorganized/test/NonFall/NFFall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/TST_Kinect_V2/Reorganized/train/NonFall/ADL*'", "\n", "path_Fall", "=", "root_drive", "+", "'/TST_Kinect_V2/Reorganized/test/Fall/Fall*'", "\n", "\n", "\n", "", "elif", "dset", "==", "'SDU'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/SDUFall/test/NonFall/NFFall*/Depth'", "\n", "path_ADL", "=", "root_drive", "+", "'/SDUFall/train/NonFall/ADL*/Depth'", "\n", "path_Fall", "=", "root_drive", "+", "'/SDUFall/test/Fall/Fall*/Depth'", "\n", "\n", "", "elif", "dset", "==", "'SDU-Filled'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/SDUFall/test/NonFall/NFFall*/Filled'", "\n", "path_ADL", "=", "root_drive", "+", "'/SDUFall/train/NonFall/ADL*/Filled'", "\n", "path_Fall", "=", "root_drive", "+", "'/SDUFall/test/Fall/Fall*/Filled'", "\n", "\n", "", "elif", "dset", "==", "'FallFree-Filled'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/FallFree/Re-organized/Filled/NonFall/NFFall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/FallFree/Re-organized/Filled/NonFall/ADL*'", "\n", "path_Fall", "=", "root_drive", "+", "'/FallFree/Re-organized/Filled/Fall/Fall*'", "\n", "\n", "", "elif", "dset", "==", "'Thermal-PNG'", ":", "\n", "        ", "path_NFFall", "=", "root_drive", "+", "'/Thermal/DataforAE_png/test/NonFall/NFFall*'", "\n", "path_Fall", "=", "root_drive", "+", "'/Thermal/DataforAE_png/test/Fall/Fall*'", "\n", "path_ADL", "=", "root_drive", "+", "'/Thermal/DataforAE_png/train/NonFall/ADL*'", "\n", "\n", "\n", "", "vid_dir_list_0", "=", "glob", ".", "glob", "(", "path_NFFall", ")", "+", "glob", ".", "glob", "(", "path_ADL", ")", "\n", "vid_dir_list_1", "=", "glob", ".", "glob", "(", "path_Fall", ")", "\n", "\n", "return", "vid_dir_list_0", ",", "vid_dir_list_1", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_videos": [[72, 178], ["h5py_init_old.get_dir_lists", "print", "os.path.isfile", "h5py.File", "print", "h5py_init_old.init_videos.init_videos_helper"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_dir_lists"], ["", "def", "init_videos", "(", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "use_cropped", "=", "False", ",", "raw", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "\n", "    ", "'''\n    Creates or overwrites h5py group corresponding to root_path (in body), for the h5py file located at \n    'N:/FallDetection/Fall-Data/H5Data/Data_set-{}-imgdim{}x{}.h5'.format(dset, img_width, img_height). \n\n    The h5py group of nested groups is structured as follows:\n    \n    Processed (or Raw)\n        Split_by_video\n            ADL1\n                Data\n                    <HDF5 dataset \"Data\": shape (1397, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (1397,), type \"<i4\">\n            ADL2\n                Data\n                    <HDF5 dataset \"Data\": shape (3203, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (3203,), type \"<i4\">\n                .\n                .\n                .\n\n            ADL{N}\n                Data\n                    <HDF5 dataset \"Data\": shape (3203, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (3203,), type \"<i4\">\n\n            Fall1\n                Data\n                    <HDF5 dataset \"Data\": shape (49, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (49,), type \"<i4\">\n            NFFall1\n                Data\n                    <HDF5 dataset \"Data\": shape (839, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (839,), type \"<i4\">\n                .\n                .\n                .\n            Fall{M}\n                Data\n                    <HDF5 dataset \"Data\": shape (49, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (49,), type \"<i4\">\n            NFFall{M}\n                Data\n                    <HDF5 dataset \"Data\": shape (839, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (839,), type \"<i4\">\n\n            where N is number of ADL videos, and M is number of Fall videos. NFFall are the NonFall frames of a Fall video.\n\n    Params:\n        bool raw: if true, data will be not processed (mean centering and intensity scaling)\n        int img_wdith: width of images\n        int img_height: height of images\n        str dset: dataset to be loaded\n\n\n    '''", "\n", "path", "=", "root_drive", "+", "'/H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "\n", "vid_dir_list_0", ",", "vid_dir_list_1", "=", "get_dir_lists", "(", "dset", ")", "\n", "\n", "if", "raw", "==", "False", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Processed/Split_by_video'", "\n", "", "else", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Raw/Split_by_video'", "\n", "\n", "", "print", "(", "'creating data at root_path'", ",", "root_path", ")", "\n", "\n", "def", "init_videos_helper", "(", "root_path", ")", ":", "#Nested to keep scope", "\n", "            ", "with", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "as", "hf", ":", "\n", "#root_sub = root.create_group('Split_by_video')", "\n", "                ", "root", "=", "hf", ".", "create_group", "(", "root_path", ")", "\n", "\n", "for", "vid_dir", "in", "vid_dir_list_1", ":", "\n", "                    ", "init_vid", "(", "vid_dir", "=", "vid_dir", ",", "vid_class", "=", "1", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "hf", "=", "root", ",", "raw", "=", "raw", ",", "use_cropped", "=", "use_cropped", ",", "dset", "=", "dset", ")", "\n", "\n", "", "for", "vid_dir", "in", "vid_dir_list_0", ":", "\n", "                    ", "init_vid", "(", "vid_dir", "=", "vid_dir", ",", "vid_class", "=", "0", ",", "img_width", "=", "img_width", ",", "img_height", "=", "img_height", ",", "hf", "=", "root", ",", "raw", "=", "raw", ",", "use_cropped", "=", "use_cropped", ",", "dset", "=", "dset", ")", "\n", "\n", "", "", "", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "hf", "=", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "\n", "if", "root_path", "in", "hf", ":", "\n", "            ", "print", "(", "'video h5py file exists, deleting old group {}, creating new'", ".", "format", "(", "root_path", ")", ")", "\n", "del", "hf", "[", "root_path", "]", "\n", "hf", ".", "close", "(", ")", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'File exists, but no group for this data set; initializing..'", ")", "\n", "hf", ".", "close", "(", ")", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "\n", "", "", "else", ":", "#not initialized", "\n", "        ", "print", "(", "'No data file exists yet; initializing'", ")", "\n", "\n", "init_videos_helper", "(", "root_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_vid": [[180, 213], ["print", "h5py_init_old.create_img_data_set", "numpy.array", "print", "hf.create_group", "os.path.basename", "os.path.basename", "print", "h5py_init_old.get_fall_indeces", "print", "len", "os.path.dirname", "str", "range"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.create_img_data_set", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_fall_indeces"], ["", "", "def", "init_vid", "(", "vid_dir", "=", "None", ",", "vid_class", "=", "None", ",", "img_width", "=", "32", ",", "img_height", "=", "32", ",", "hf", "=", "None", ",", "raw", "=", "False", ",", "use_cropped", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "    ", "'''\n    helper function for init_videos. Initialzies a single video.\n\n    Params:\n        str vid_dir: path to vid dir of frames to be initialzied\n        int vid_class: 1 for Fall, 0 for NonFall\n        h5py group: group within which new group is nested\n\n    '''", "\n", "\n", "print", "(", "'initializing vid at'", ",", "vid_dir", ")", "\n", "\n", "data", "=", "create_img_data_set", "(", "fpath", "=", "vid_dir", ",", "ht", "=", "img_height", ",", "wd", "=", "img_width", ",", "raw", "=", "raw", ",", "sort", "=", "True", ",", "dset", "=", "dset", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "vid_class", "]", "*", "len", "(", "data", ")", ")", "\n", "\n", "if", "dset", "==", "'SDU'", "or", "dset", "==", "'SDU-Filled'", ":", "\n", "        ", "vid_dir_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "vid_dir", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "vid_dir_name", "=", "os", ".", "path", ".", "basename", "(", "vid_dir", ")", "\n", "", "print", "(", "'vid_dir_name'", ",", "vid_dir_name", ")", "\n", "grp", "=", "hf", ".", "create_group", "(", "vid_dir_name", ")", "\n", "\n", "grp", "[", "'Labels'", "]", "=", "labels", "\n", "grp", "[", "'Data'", "]", "=", "data", "\n", "\n", "if", "vid_dir_name", "in", "[", "'Fall'", "+", "str", "(", "i", ")", "for", "i", "in", "range", "(", "201", ")", "]", ":", "#201 is max fall index across all vids", "\n", "        ", "print", "(", "'setting fall start'", ")", "\n", "Fall_start", ",", "Fall_stop", "=", "get_fall_indeces", "(", "vid_dir", ",", "use_cropped", ",", "dset", ")", "\n", "print", "(", "'Fall_start'", ",", "Fall_start", ")", "\n", "grp", "[", "'Data'", "]", ".", "attrs", "[", "'Fall start index'", "]", "=", "Fall_start", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.find_start_index_disc": [[216, 227], ["range", "len"], "function", ["None"], ["", "", "def", "find_start_index_disc", "(", "start_frame_index", ",", "NF_frames_indeces", ")", ":", "\n", "    ", "'''\n    gets real index(not frame index) where Fall starts in NFFall array\n    '''", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "NF_frames_indeces", ")", ")", ":", "\n", "        ", "index", "=", "NF_frames_indeces", "[", "i", "]", "\n", "if", "index", ">", "start_frame_index", ":", "\n", "            ", "return", "i", "\n", "", "else", ":", "\n", "            ", "return", "start_frame_index", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.get_fall_indeces": [[228, 291], ["print", "Fall_vid_dir.replace.replace", "os.path.basename", "print", "os.path.dirname", "print", "h5py_init_old.sort_frames", "h5py_init_old.sort_frames", "frames_opt3_Fall[].replace", "print", "int", "print", "print", "os.path.dirname", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "len", "int", "len", "h5py_init_old.find_start_index_disc", "print", "len", "len", "[].split", "range", "[].split", "len", "os.path.basename().split", "os.path.basename().split", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames", "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.find_start_index_disc"], ["", "", "", "def", "get_fall_indeces", "(", "Fall_vid_dir", "=", "None", ",", "use_cropped", "=", "False", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "    ", "\"\"\"\n    input Fall not NFFall (ie. recreate fall opt1, with opt3 labels)\n    \n    Gets start/stop indices accoutnign for potentiol discont's from cropping\n    \"\"\"", "\n", "if", "dset", "==", "'Thermal'", "or", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", ":", "\n", "        ", "split_char", "=", "'-'", "\n", "", "else", ":", "\n", "        ", "split_char", "=", "'_'", "\n", "\n", "", "print", "(", "'Fall_vid_dir'", ",", "Fall_vid_dir", ")", "\n", "Fall_vid_dir", "=", "Fall_vid_dir", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "base_Fall", "=", "Fall_vid_dir", "\n", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "Fall_vid_dir", ")", "\n", "print", "(", "basename", ")", "\n", "root", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "Fall_vid_dir", ")", ")", "\n", "print", "(", "root", ")", "\n", "base_NFFall", "=", "root", "+", "'/NonFall/NF'", "+", "basename", "\n", "\n", "frames_opt3_Fall", "=", "glob", ".", "glob", "(", "base_Fall", "+", "'/*.jpg'", ")", "+", "glob", ".", "glob", "(", "base_Fall", "+", "'/*.png'", ")", "\n", "\n", "frames_opt3_NFFall", "=", "glob", ".", "glob", "(", "base_NFFall", "+", "'/*.jpg'", ")", "+", "glob", ".", "glob", "(", "base_NFFall", "+", "'/*.png'", ")", "\n", "\n", "\n", "#print(\"\\n\".join(frames_opt3_Fall))", "\n", "#print('{} opt3 fall frames found'.format(len(frames_opt3)))", "\n", "\n", "frames_opt3_Fall", "=", "sort_frames", "(", "frames_opt3_Fall", ",", "dset", ")", "\n", "frames_opt3_NFFall", "=", "sort_frames", "(", "frames_opt3_NFFall", ",", "dset", ")", "\n", "\n", "# if dset == 'TST': #Sortign frames, glob returns unsorted", "\n", "#     frames_opt3_Fall = sorted(frames_opt3_Fall, key = lambda x: int(x.split(split_char)[-1].split('.')[0]))", "\n", "\n", "\n", "frames_opt3_Fall", "[", "0", "]", "=", "frames_opt3_Fall", "[", "0", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "print", "(", "'frames_opt3_Fall[0]'", ",", "frames_opt3_Fall", "[", "0", "]", ")", "\n", "\n", "start_frame_ind", "=", "int", "(", "os", ".", "path", ".", "basename", "(", "frames_opt3_Fall", "[", "0", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "split_char", ")", "[", "-", "1", "]", ")", "\n", "#start_frame_ind = int(frames_opt3_Fall[0].split(split_char)[-1].split('.')[0]) #Thermal", "\n", "print", "(", "'start_frame_ind'", ",", "start_frame_ind", ")", "\n", "end_frame_index", "=", "start_frame_ind", "+", "len", "(", "frames_opt3_Fall", ")", "#-1? TODO Not used ", "\n", "\n", "#print(frames_opt3_NFFall)", "\n", "NF_frame_indices", "=", "[", "int", "(", "os", ".", "path", ".", "basename", "(", "frames_opt3_NFFall", "[", "i", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "split_char", ")", "[", "-", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "frames_opt3_NFFall", ")", ")", "]", "\n", "\n", "if", "len", "(", "frames_opt3_NFFall", ")", ">", "0", ":", "\n", "        ", "new_fall_start_ind", "=", "find_start_index_disc", "(", "start_frame_ind", ",", "NF_frame_indices", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no NFF frames found'", ")", "\n", "new_fall_start_ind", "=", "start_frame_ind", "\n", "\n", "", "print", "(", "'new_fall_start_ind, len(frames_opt3_Fall)'", ",", "new_fall_start_ind", ",", "len", "(", "frames_opt3_Fall", ")", ")", "\n", "new_end_frame_index", "=", "new_fall_start_ind", "+", "len", "(", "frames_opt3_Fall", ")", "\n", "\n", "#New means accounts for discont of cropping", "\n", "\n", "return", "new_fall_start_ind", ",", "new_end_frame_index", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames": [[293, 326], ["print", "sorted", "print", "sorted", "int", "print", "sorted", "print", "sorted", "os.path.basename().split", "int", "print", "int", "os.path.basename", "[].split", "int", "[].split", "x.split", "x.split", "x.split"], "function", ["None"], ["", "def", "sort_frames", "(", "frames", ",", "dset", ")", ":", "\n", "#Sorting, trying for differnt dataset string formats", "\n", "        ", "if", "dset", "==", "'SDU'", "or", "dset", "==", "'SDU-Filled'", ":", "#TODO remove try except, failing to sort shoudl stop!", "\n", "            ", "print", "(", "'sorting SDU frames...'", ")", "\n", "\n", "#try:", "\n", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "#SDU", "\n", "# except ValueError:", "\n", "#     print('failed to sort SDU vid frames')", "\n", "#     pass", "\n", "", "elif", "dset", "==", "'UR'", "or", "dset", "==", "'UR-Filled'", "or", "dset", "==", "'Thermal'", ":", "\n", "            ", "print", "(", "'sorting UR or Thermal frames...'", ")", "\n", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort UR vid frames'", ")", "\n", "return", "\n", "\n", "", "", "elif", "dset", "==", "'TST'", ":", "\n", "            ", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort vid frames, trying again....'", ")", "\n", "pass", "\n", "\n", "", "", "elif", "dset", "==", "'FallFree'", "or", "'FallFree-Filled'", ":", "\n", "            ", "try", ":", "\n", "                ", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'failed to sort vid frames, trying again....'", ")", "\n", "pass", "\n", "\n", "", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.create_img_data_set": [[327, 375], ["print", "fpath.replace.replace", "numpy.zeros", "zip", "print", "glob.glob", "glob.glob", "h5py_init_old.sort_frames", "range", "cv2.imread", "cv2.resize", "img.reshape.reshape", "sort_frames.__len__", "sort_frames.__len__", "numpy.mean", "img.reshape.astype"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.sort_frames"], ["", "def", "create_img_data_set", "(", "fpath", ",", "ht", "=", "64", ",", "wd", "=", "64", ",", "raw", "=", "False", ",", "sort", "=", "True", ",", "dset", "=", "'Thermal'", ")", ":", "\n", "        ", "'''\n        Creates data set of all images located at fpath. Sorts images\n\n        Params:\n            str fpath: path to images to be processed\n            bool raw: if True does mean centering and rescaling \n            bool sort: if True, sorts frames, ie. keeps sequential order, which may be lost due to glob\n            dset: dataset\n\n        Returns:\n            ndarray data: Numpy array of images at fpath. Shape (samples, img_width*img_height),\n            samples isnumber of images at fpath.\n\n        '''", "\n", "\n", "print", "(", "'gathering data at'", ",", "fpath", ")", "\n", "fpath", "=", "fpath", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "\n", "frames", "=", "glob", ".", "glob", "(", "fpath", "+", "'/*.jpg'", ")", "+", "glob", ".", "glob", "(", "fpath", "+", "'/*.png'", ")", "\n", "\n", "if", "sort", "==", "True", ":", "\n", "            ", "frames", "=", "sort_frames", "(", "frames", ",", "dset", ")", "\n", "\n", "# print(\"\\n\".join(frames)) #Use this to check if sorted", "\n", "\n", "", "data", "=", "np", ".", "zeros", "(", "(", "frames", ".", "__len__", "(", ")", ",", "ht", ",", "wd", ",", "1", ")", ")", "\n", "for", "x", ",", "i", "in", "zip", "(", "frames", ",", "range", "(", "0", ",", "frames", ".", "__len__", "(", ")", ")", ")", ":", "\n", "#print(x,i)", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "x", ",", "0", ")", "#Use this for RGB to GS", "\n", "#print('x', x)", "\n", "#img=cv2.imread(x,-1) #Use this for loading as is(ie. 16 bit needs this, else gets converted to 8)", "\n", "# print('img.shape', img.shape)", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "ht", ",", "wd", ")", ")", "#resize", "\n", "img", "=", "img", ".", "reshape", "(", "ht", ",", "wd", ",", "1", ")", "\n", "\n", "if", "raw", "==", "False", ":", "\n", "#print('proccessing data')", "\n", "\n", "                ", "img", "=", "img", "-", "np", ".", "mean", "(", "img", ")", "#Mean centering", "\n", "img", "=", "img", ".", "astype", "(", "'float32'", ")", "/", "255.", "#rescaling", "\n", "\n", "", "data", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "\n", "# data = data.reshape((len(data), np.prod(data.shape[1:]))) #Flatten the images", "\n", "\n", "", "print", "(", "'data.shape'", ",", "data", ".", "shape", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.init_data_by_class": [[376, 468], ["h5py_init_old.create_img_data_set", "numpy.array", "numpy.array", "h5py.File", "print", "hf.create_group", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.create_img_data_set"], ["", "def", "init_data_by_class", "(", "vid_class", "=", "'NonFall'", ",", "train_or_test", "=", "'train'", ",", "dset", "=", "'Thermal'", ",", "raw", "=", "False", ",", "img_width", "=", "64", ",", "img_height", "=", "64", ",", "use_cropped", "=", "False", ")", ":", "\n", "\n", "    ", "'''\n    Creates or overwrites h5py group corresponding to root_path (in body), for the h5py file located at \n    'N:/FallDetection/Fall-Data/H5Data/Data_set-{}-imgdim{}x{}.h5'.format(dset, img_width, img_height). \n\n    Creates the following structure:\n\n    Processed\n        Split_by_class\n            NonFall\n                Data\n                    <HDF5 dataset \"Data\": shape (22116, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (22116,), type \"<i4\">\n            Fall\n                Data\n                    <HDF5 dataset \"Data\": shape (22116, 4096), type \"<f8\">\n                Labels\n                    <HDF5 dataset \"Labels\": shape (22116,), type \"<i4\">\n    '''", "\n", "\n", "ht", ",", "wd", "=", "img_width", ",", "img_height", "\n", "if", "use_cropped", "==", "False", ":", "\n", "        ", "if", "dset", "==", "'Thermal'", ":", "\n", "            ", "if", "vid_class", "==", "'NonFall'", ":", "\n", "                ", "fpath", "=", "root_drive", "+", "'/Thermal/DataforAE'", "+", "'/'", "+", "train_or_test", "+", "'/'", "+", "vid_class", "+", "'/ADL*'", "\n", "", "else", ":", "\n", "                ", "fpath", "=", "root_drive", "+", "'/DataforAE'", "+", "'/'", "+", "train_or_test", "+", "'/Fall/Fall*'", "\n", "\n", "", "", "elif", "dset", "==", "'UR-Filled'", ":", "#TODO update!", "\n", "\n", "            ", "fpath", "=", "root_drive", "+", "'/UR_Kinect'", "+", "'/'", "+", "train_or_test", "+", "'/'", "+", "vid_class", "+", "'/filled/adl*'", "\n", "\n", "", "elif", "dset", "==", "'UR'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/UR_Kinect'", "+", "'/'", "+", "train_or_test", "+", "'/'", "+", "vid_class", "+", "'/adl*'", "\n", "\n", "", "elif", "dset", "==", "'TST'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/TST_Kinect_V2/Reorganized/train/NonFall/ADL*'", "\n", "\n", "", "elif", "dset", "==", "'SDU'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/SDUFall/{}/{}/ADL*/Depth'", ".", "format", "(", "train_or_test", ",", "vid_class", ")", "\n", "\n", "", "elif", "dset", "==", "'SDU-Filled'", ":", "\n", "            ", "fpath", "=", "root_drive", "+", "'/SDUFall/{}/{}/ADL*/Filled'", ".", "format", "(", "train_or_test", ",", "vid_class", ")", "\n", "\n", "\n", "", "", "elif", "vid_class", "==", "'NonFall'", ":", "#use cropped", "\n", "\n", "        ", "if", "dset", "==", "'Thermal'", ":", "\n", "            ", "fpath", "=", "root_Drive", "+", "'/DataforAE-json'", "+", "'/'", "+", "train_or_test", "+", "'/'", "+", "vid_class", "+", "'/'", "+", "'Cropped'", "\n", "\n", "\n", "", "", "elif", "vid_class", "==", "'Fall'", ":", "#use cropped", "\n", "        ", "fpath", "=", "root_drive", "+", "'/DataforAE-json'", "+", "'/'", "+", "train_or_test", "+", "'/'", "+", "vid_class", "+", "'/Fall*/'", "+", "'Cropped'", "\n", "\n", "", "data", "=", "create_img_data_set", "(", "fpath", ",", "ht", ",", "wd", ",", "raw", ",", "False", ")", "#Don't need to sort", "\n", "\n", "#path = './H5Data/Data_set_imgdim{}x{}.h5'.format(img_width, img_height) #Old", "\n", "#path = 'N:/FallDetection/Fall-Data/H5Data/Data_set_imgdim{}x{}.h5'.format(img_width, img_height) #Old", "\n", "path", "=", "root_drive", "+", "'/H5Data/Data_set-{}-imgdim{}x{}.h5'", ".", "format", "(", "dset", ",", "img_width", ",", "img_height", ")", "\n", "\n", "if", "raw", "==", "False", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Processed/Split_by_class/'", "+", "vid_class", "#root path is for h5py tree         ", "\n", "\n", "", "else", ":", "\n", "        ", "root_path", "=", "dset", "+", "'/Raw/Split_by_class/'", "+", "vid_class", "\n", "\n", "", "if", "vid_class", "==", "'NonFall'", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "0", "]", "*", "len", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "        ", "labels", "=", "np", ".", "array", "(", "[", "1", "]", "*", "len", "(", "data", ")", ")", "\n", "\n", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'a'", ")", "as", "hf", ":", "\n", "#root_sub = root.create_group('Split_by_video')", "\n", "        ", "print", "(", "'creating data at '", ",", "root_path", ")", "\n", "if", "root_path", "in", "hf", ":", "\n", "            ", "print", "(", "'root_path {} found, clearing'", ".", "format", "(", "root_path", ")", ")", "\n", "del", "hf", "[", "root_path", "]", "\n", "", "root", "=", "hf", ".", "create_group", "(", "root_path", ")", "\n", "\n", "root", "[", "'Data'", "]", "=", "data", "\n", "\n", "root", "[", "'Labels'", "]", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.JJN123_Fall-Detection.None.h5py_init_old.flip_windowed_arr": [[469, 496], ["numpy.prod", "numpy.zeros", "print", "range", "len", "numpy.zeros", "range", "len", "len", "cv2.flip", "cv2.flip.reshape"], "function", ["None"], ["", "", "def", "flip_windowed_arr", "(", "windowed_data", ")", ":", "\n", "    ", "\"\"\"\n    windowed_data: of shape (samples, win_len,...)\n    \n    returns shape len(windowed_data), win_len, flattened_dim)\n    Note: Requires openCV\n    \"\"\"", "\n", "win_len", "=", "windowed_data", ".", "shape", "[", "1", "]", "\n", "flattened_dim", "=", "np", ".", "prod", "(", "windowed_data", ".", "shape", "[", "2", ":", "]", ")", "\n", "#print(flattened_dim)", "\n", "flipped_data_windowed", "=", "np", ".", "zeros", "(", "(", "len", "(", "windowed_data", ")", ",", "win_len", ",", "flattened_dim", ")", ")", "#Array of windows", "\n", "print", "(", "flipped_data_windowed", ".", "shape", ")", "\n", "i", "=", "0", "\n", "for", "win_idx", "in", "range", "(", "len", "(", "windowed_data", ")", ")", ":", "\n", "        ", "window", "=", "windowed_data", "[", "win_idx", "]", "\n", "flip_win", "=", "np", ".", "zeros", "(", "(", "win_len", ",", "flattened_dim", ")", ")", "\n", "\n", "for", "im_idx", "in", "range", "(", "len", "(", "window", ")", ")", ":", "\n", "            ", "im", "=", "window", "[", "im_idx", "]", "\n", "hor_flip_im", "=", "cv2", ".", "flip", "(", "im", ",", "1", ")", "\n", "#print(hor_flip_im.shape)", "\n", "#print(flip_win[im_idx].shape)", "\n", "\n", "flip_win", "[", "im_idx", "]", "=", "hor_flip_im", ".", "reshape", "(", "flattened_dim", ")", "\n", "\n", "", "flipped_data_windowed", "[", "win_idx", "]", "=", "flip_win", "\n", "", "return", "flipped_data_windowed", "\n", "\n"]]}